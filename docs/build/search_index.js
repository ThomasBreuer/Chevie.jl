var documenterSearchIndex = {"docs":
[{"location":"#Gapjm.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Gapjm","category":"page"},{"location":"#Gapjm","page":"Gapjm.jl Documentation","title":"Gapjm","text":"This  is  my  effort  porting  GAP  code  to Julia, specifically the Chevie package  of GAP3 plus the minimal other GAP functionality needed for Chevie to   work:  Cyclotomics,  Permutations,   Laurent  polynomials,  and  basic permutation group operations.\n\nI am rather new to Julia, git and github so I am not even sure this package is  properly constituted; I did not try yet to register it. If you are more competent  that me and see anything to  be improved in this package, please write me or make a pull request.\n\nInstalling\n\nTo install this package, at the Julia command line:\n\nenter package mode with ]\ndo the command\n\n(v1.0) pkg> add \"https://github.com/jmichel7/Gapjm.jl\"\n\nexit package mode with backspace and then do \n\njulia> using Gapjm\n\nand you are set up.\n\nTo update later to the latest version, do\n\n(v1.0) pkg> update \"https://github.com/jmichel7/Gapjm.jl\"\n\nThe package currently contains:\n\ninfrastructure: permutations,  cyclotomic numbers,  Laurent polynomials.\n\nThere  are also  permutation groups,  for which  I have  often replaced the proper  algorithms of GAP by naive but  easy to write methods only suitable for  small groups (sufficient for the rest of the package but maybe not for your needs).\n\nported from  Chevie:  Weyl  groups,  Coxeter  groups,  Hecke  algebras,\n\nKazhdan-Lusztig   polynomials,  braid  and   Garside  groups  and  monoids, factorisations into cyclotomic polynomials, character tables of Weyl groups and  Hecke algebras, Unipotent characters  of Spetses, unipotent classes of reductive groups.\n\nThe  code for infrastructure  is often competitive  with GAP, despite being much  shorter (often 100 lines of Julia replace 1000 lines of C); I am sure there  are more optimisations possible. Any comments about the code and the design  are welcome. The code for Chevie  is often 10 times faster than the GAP3 Chevie (after the maddeningly long compilation time on first execution).\n\n\n\n\n\n","category":"module"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"","category":"page"},{"location":"#Perms.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Perms.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Perms\nlargest_moved_point\nsmallest_moved_point\norder\nGroups.orbit(a::Perm,i::Integer,check=false)\ncycles\ncycletype\nsign\npermuted\nrestricted","category":"page"},{"location":"#Gapjm.Perms","page":"Gapjm.jl Documentation","title":"Gapjm.Perms","text":"This module is a port of the GAP permutations type.\n\nA  permutation here is a permutation of the set 1:n and is represented as a  vector of n integers representing the images of 1:n. The integer n is called the degree of the permutation, even if it is not moved. We follow the  GAP design: it is possible to multiply, or to store in the same group, permutations of different degrees; this is implemented by promoting both to the   higher  degree.  Slightly  faster  is  the  MAGMA  design  where  any permutation  has to belong to a group  and the degree is determined by that group. Then multiplication of permutations within a given group is slightly faster,  but  it  is  more  difficult  to multiply permutations coming from different  groups, like a group and one  of its subgroups. The degree is an implementation  detail so usually  it should not  be used. One sould rather use the function largest_moved_point.\n\nA  permutation  can  be  defined  by  the  list  of  images  of 1:n, like Perm([2,3,1,5,4]).  Usually it is rather  given by its cycle decomposion: the  permutation whose cycle decomposition is (1,2,3)(4,5) can be written Perm(1,2,3)*Perm(4,5)  or  perm\"(1,2,3)(4,5)\".  The  list  of images of 1:n  is gotten back from the permutation by the function vec; note that since  equal  permutations  may  have  different  degrees,  they  may  have different vec.\n\nThe  complete  type  of  our  permutations is Perm{T} where T<:Integer, where Vector{T} is the type of the vector which holds the image of 1:n. This   can  used  to  save  space  or  time  when  possible.  For  instance Perm{UInt8}  uses less  space than  Perm{Int} and  can be used for Weyl groups of rank <=8 since they have at most 240 roots.\n\nExamples\n\njulia> a=Perm(1,2,3)\n(1,2,3)\n\njulia> vec(a)\n3-element Array{Int64,1}:\n 2\n 3\n 1\n\njulia> a==Perm(vec(a))\ntrue\n\njulia> b=Perm(1,2,3,4)\n(1,2,3,4)\n\njulia> a*b     # product\n(1,3,2,4)\n\njulia> inv(a)  # inverse\n(1,3,2)\n\njulia> a/b     # quotient  a*inv(b)\n(3,4)\n\njulia> a\\b     # left quotient inv(a)*b\n(1,4)\n\njulia> a^b     # conjugation inv(b)*a*b\n(2,3,4)\n\njulia> b^2\n(1,3)(2,4)\n\njulia> 1^a     # apply a to point 1\n2\n\njulia> one(a)\n()\n\njulia> sign(a)\n1\n\njulia> order(a)\n3\n\njulia> largest_moved_point(a)\n3\n\njulia> smallest_moved_point(a)\n1\n\njulia> Perm{Int8}(a) # convert to Perm{Int8}\nInt8(1,2,3)\n\njulia> Matrix(b)\n4×4 Array{Int64,2}:\n 0  1  0  0\n 0  0  1  0\n 0  0  0  1\n 1  0  0  0\n\njulia> rand(Perm,10)\n(1,8,4,2,9,7,5,10,3,6)\n\n\nPerms  have methods copy, hash, ==, cmp, isless (total order) so they can be  keys in hashes or elements of  sets; two permutations are equal if they move   the  same  points.  Permutations   are  considered  as  scalars  for broadcasting.\n\nother functions are:  cycles, cycletype, orbit, orbits, permuted, rand, restricted, sign.  See individual documentations.\n\nGAP→ Julia dictionary\n\n     PermList(v)                      →  Perm(v) \n     Permuted(v,p)                    →  permuted(v,p)\n     ListPerm(p)                      →  vec(p)\n     PermListList(l1,l2)              →  Perm(l1,l2)\n     OnTuples(l,p)                    →  l.^p\n     RestrictedPerm(p,d)              →  restricted(p,d)\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Perms.largest_moved_point","page":"Gapjm.jl Documentation","title":"Gapjm.Perms.largest_moved_point","text":"largest_moved_point(a::Perm) is the largest integer moved by a\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.smallest_moved_point","page":"Gapjm.jl Documentation","title":"Gapjm.Perms.smallest_moved_point","text":"smallest_moved_point(a::Perm) is the smallest integer moved by a\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.order","page":"Gapjm.jl Documentation","title":"Gapjm.Perms.order","text":"order(a) is the order of the permutation a\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.orbit","page":"Gapjm.jl Documentation","title":"Gapjm.Groups.orbit","text":"orbit(a::Perm,i::Integer) returns the orbit of a on i\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.cycles","page":"Gapjm.jl Documentation","title":"Gapjm.Perms.cycles","text":"cycles(a::Perm) returns the non-trivial cycles of a\n\nExample\n\njulia> cycles(Perm(1,2)*Perm(4,5))\n3-element Array{Array{Int64,1},1}:\n [1, 2]\n [4, 5]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.cycletype","page":"Gapjm.jl Documentation","title":"Gapjm.Perms.cycletype","text":"cycletype(a::Perm) describes the partition of degree(a) associated to the   conjugacy class of a in the symmetric group, with ones removed. It is   represented as a Dict of cyclesize=>multiplicity\n\nExample\n\njulia> cycletype(Perm(1,2)*Perm(3,4))\n1-element Array{Pair{Tuple{Int64,Int64},Int64},1}:\n (2, 1) => 2\n\n\n\n\n\n","category":"function"},{"location":"#Base.sign","page":"Gapjm.jl Documentation","title":"Base.sign","text":"sign(a::Perm) is the signature of  the permutation a\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.permuted","page":"Gapjm.jl Documentation","title":"Gapjm.Perms.permuted","text":"permuted(l,a) returns l permuted by a as a new list r,    that is r[i^a]==l[i]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.restricted","page":"Gapjm.jl Documentation","title":"Gapjm.restricted","text":"restricted(a::Perm{T},l::AbstractVector{<:Integer})\n\nl should be a union of cycles of p; returns p restricted to l\n\n\n\n\n\n","category":"function"},{"location":"#Groups.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Groups.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Groups\norbit\norbits\ntransversal\ncentralizer\nword(G::Group,w)\nelements\nlength\nclass_reps\nminimal_words","category":"page"},{"location":"#Gapjm.Groups","page":"Gapjm.jl Documentation","title":"Gapjm.Groups","text":"This module is a port of some GAP functionality on groups.\n\nThe only field of a Group G at the start is gens, the list of generators of G.  To  mimic  GAP  records  where  attributes/properties  of an object are computed  on demand when asked for, other attributes computed on demand are stored in the field .prop of the Group, which starts as Dict{Symbol,Any}()\n\nExamples\n\njulia> G=Group([Perm(1,2),Perm(1,2,3)])\nGroup([(1,2),(1,2,3)])\n\njulia> gens(G)\n2-element Array{Perm{Int64},1}:\n (1,2)  \n (1,2,3)\n\njulia> nbgens(G)\n2\n\nThe group itself, applied to a sequence of integers, returns the element defined by the corresponding word in the generators\n\njulia> G(2,1,-2) # returns gens(G)[2]*gens(G)[1]*inv(gens(G)[2])\n(1,3)\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Groups.orbit","page":"Gapjm.jl Documentation","title":"Gapjm.Groups.orbit","text":"orbit(a::Perm,i::Integer) returns the orbit of a on i\n\n\n\n\n\norbit(G::Group,p;action::Function=^)\n\nthe orbit of p under Group G\"\n\njulia> G=Group([Perm(1,2),Perm(1,2,3)]);\njulia> orbit(G,1) \n3-element Array{Int64,1}:\n 2\n 3\n 1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.orbits","page":"Gapjm.jl Documentation","title":"Gapjm.Groups.orbits","text":"orbits(a::Perm,d::Vector=1:length(vec(a))) returns the orbits of a on domain d\n\nExample\n\njulia> orbits(Perm(1,2)*Perm(4,5),1:5)\n3-element Array{Array{Int64,1},1}:\n [1, 2]\n [3]\n [4, 5]\n\n\n\n\n\norbits(G,v;action=^) \nthe orbits of G on v\n\njulia> G=Group([Perm(1,2),Perm(1,2,3)]);\njulia> orbits(G,1:4)\n2-element Array{Array{Int64,1},1}:\n [2, 3, 1]\n [4]      \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.transversal","page":"Gapjm.jl Documentation","title":"Gapjm.Groups.transversal","text":"transversal(G::Group,p;action::Function=^)\n\nreturns  a Dict with entries x=>g where x runs over orbit(G,p) and where g  is such that x=action(p,g)\n\njulia> G=Group([Perm(1,2),Perm(1,2,3)]);\njulia> transversal(G,1)\nDict{Int64,Perm{Int64}} with 3 entries:\n  2 => (1,2)\n  3 => (1,3,2)\n  1 => ()\n\norbit functions can take any action of G as keyword argument\n\njulia> transversal(G,[1,2],action=(x,y)->x.^y)\nDict{Array{Int64,1},Perm{Int64}} with 6 entries:\n  [1, 3] => (2,3)\n  [1, 2] => ()\n  [2, 3] => (1,2,3)\n  [3, 2] => (1,3)\n  [2, 1] => (1,2)\n  [3, 1] => (1,3,2)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.centralizer","page":"Gapjm.jl Documentation","title":"Gapjm.Groups.centralizer","text":"centralizer(G,p;action=^) \ncomputes the centralizer C_G(p)\n\njulia> G=Group([Perm(1,2),Perm(1,2,3)]);\njulia> centralizer(G,1)\nGroup([(2,3)])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.word-Tuple{Group,Any}","page":"Gapjm.jl Documentation","title":"Gapjm.word","text":"word(G::Group,w): a word in  gens(G) representing element w of G\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.elements","page":"Gapjm.jl Documentation","title":"Gapjm.elements","text":"elements(G::Group): the list of elements of G\n\n\n\n\n\nelements(M,l) returns the elements of M of length l.\n\n\n\n\n\n","category":"function"},{"location":"#Base.length","page":"Gapjm.jl Documentation","title":"Base.length","text":"length(G::PermGroup) returns the cardinality of G \n\n\n\n\n\nlength(G::Group): the number of elements of G\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.class_reps","page":"Gapjm.jl Documentation","title":"Gapjm.Groups.class_reps","text":"class_reps(G::Group): representatives of conjugacy classes of G\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.minimal_words","page":"Gapjm.jl Documentation","title":"Gapjm.Groups.minimal_words","text":"`minimal_words(G)`\n\nreturns a Dict giving for each element of G a minimal positive word in    the generators representing it.\n\njulia> G=Group([Perm(1,2),Perm(1,2,3)]);\njulia> minimal_words(G)\nDict{Perm{Int64},Array{Int64,1}} with 6 entries:\n  ()      => Int64[]\n  (2,3)   => [2, 1]\n  (1,3,2) => [1, 2, 1]\n  (1,3)   => [1, 2]\n  (1,2)   => [1]\n  (1,2,3) => [2]\n\nThis Dict is stored in G.prop[:words] for further use.\n\n\n\n\n\n","category":"function"},{"location":"#PermGroups.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"PermGroups.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"PermGroups\nbase\ncentralizers\ntransversals\nsymmetric_group","category":"page"},{"location":"#Gapjm.PermGroups","page":"Gapjm.jl Documentation","title":"Gapjm.PermGroups","text":"This module is a port of some GAP functionality on permutation groups.\n\nThis code refers to Holt \"Handbook of computational group theory\" chapter 4 for basic algorithms.\n\nA  PermGroup is  a group  where gens  are Perms,  which allows  for all the algorithms like base, centralizer chain, etc...\n\nExamples\n\njulia> G=Group([Perm(i,i+1) for i in 1:2])\nGroup([(1,2),(2,3)])\n\n# PermGroups are iterators over their elements\njulia> collect(G)  \n6-element Array{Perm{Int64},1}:\n (1,2)\n (1,3,2)\n ()\n (1,2,3)\n (1,3)\n (2,3)\n\n# maximum degree of an element of G\njulia> degree(G)  \n3\n\njulia> Perm(1,2) in G\ntrue\n\njulia> Perm(1,2,4) in G\nfalse\n\n# Elements,  appartenance test and  other function are  computed on G using\n# Schreier-Sims theory, that is computing the following\n\n# a list of points that no element of G fixes\njulia> base(G) \n2-element Array{Int64,1}:\n 1\n 2\n\n# the i-th element is the centralizer of base[1:i-1]\njulia> centralizers(G) \n2-element Array{PermGroup{Int64},1}:\n Group([(1,2),(2,3)])\n Group([(2,3)])\n\n# i-th element is transversal of centralizer[i] on base[i]\njulia> transversals(G)\n2-element Array{Dict{Int64,Perm{Int64}},1}:\n Dict(2=>(1,2),3=>(1,3,2),1=>())\n Dict(2=>(),3=>(2,3))\n\nfinally, benchmarks on julia 1.0.1\n\njulia> @btime length(collect(symmetric_group(8)))\n  5.481 ms (270429 allocations: 12.40 MiB)\n\njulia> @btime minimal_words(symmetric_group(8));\n  10.477 ms (122062 allocations: 15.22 MiB)\n\nCompare to GAP3 Elements(SymmetricGroup(8)); takes 3.8 ms\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.PermGroups.base","page":"Gapjm.jl Documentation","title":"Gapjm.PermGroups.base","text":"A list of points stabilized by no element of G \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.centralizers","page":"Gapjm.jl Documentation","title":"Gapjm.PermGroups.centralizers","text":"centralizers: the i-th element is the centralizer of base[1:i-1]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.transversals","page":"Gapjm.jl Documentation","title":"Gapjm.PermGroups.transversals","text":"The  i-th element  is  a description of  the orbit of :centralizers[i] on   :base[i]  as a Dict where each point q is the key to a permutation p such   that :base[i]^p=q\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.symmetric_group","page":"Gapjm.jl Documentation","title":"Gapjm.PermGroups.symmetric_group","text":"The symmetric group of degree n \n\n\n\n\n\n","category":"function"},{"location":"#Cycs.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Cycs.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Cycs\ngalois\nER\nquadratic","category":"page"},{"location":"#Gapjm.Cycs","page":"Gapjm.jl Documentation","title":"Gapjm.Cycs","text":"Cyclotomic  numbers means complex numbers which are sums of rationals times roots of unity.\n\nThey are a very important feature of GAP, since entries of character tables of finite groups are cyclotomics.\n\nThey  have a normal form given by the Zumbroich basis, which allows to find the  smallest Cyclotomic field which contains a given number, and decide in particular if a cyclotomic is zero. Let ζn:=e^{2iπ/n}. The Zumbroich basis of Q(ζn) is a particular subset of 1,ζ,ζ^2,...,ζ^{n-1} which forms a basis of Q(ζ_n) with good properties.\n\nI  ported here Christian Stump's Sage  code, which is simpler to understand than GAP's code. The reference for the algorithms is\n\nT. Breuer, Integral bases for subfields of cyclotomic fields AAECC 8 (1997)\n\nAs in GAP, I lower automatically numbers after each computation; this makes this code about twice slower than GAP since lower is not as much optimized. GAP  also converts a Cyclotomic which is rational to a Rational, a Rational which is integral to an Int, etc... This is tremendously useful but needs a new  type of  number to  be added  to Julia,  which requires more competent people than me.\n\nThe main way to build a Cyclotomic number is to use the function E(n,k=1) which constructs ζ_n^k.\n\nExamples\n\njulia> E(3)+E(4)\nζ₁₂⁴-ζ₁₂⁷-ζ₁₂¹¹\n\njulia> E(3,2)\nζ₃²\n\njulia> 1+E(3,2)\n-ζ₃\n\njulia> a=E(4)-E(4)\n0\n\njulia> conductor(a) # a is lowered to Q(ζ_1)=Q\n1\n\njulia> typeof(convert(Int,a))\nInt64\n\njulia> convert(Int,E(4))\nERROR: InexactError: convert(Int64, E(4))\n\njulia> c=inv(1+E(4)) # inverses need Rationals\n1//2+(-1//2)ζ₄\n\njulia> typeof(c)\nCyc{Rational{Int64}}\n\njulia> typeof(1+E(4))\nCyc{Int64}\n\njulia> Cyc(1+im) # one can convert Gaussian integers or rationals\n1+ζ₄\n\njulia> 1//(1+E(4))\n1//2+(-1//2)ζ₄\n\njulia> typeof(Cyc(1//2)) # another way of building a Cyc\nCyc{Rational{Int64}}\n\njulia> conj(1+E(4))\n1-ζ₄\n\njulia> c=E(9)   # an effect of the Zumbroich basis\n-ζ₉⁴-ζ₉⁷\n\njulia> Root1(c) # but you can decide whether a Cyc is a root of unity\nRoot1(1//9)\n\njulia> c=Complex(E(3))   # convert to float is probably not very useful\n-0.4999999999999998 + 0.8660254037844387im\n\njulia> Cyc(c) # even less useful\n-0.4999999999999998+0.8660254037844387ζ₄\n\nFor more information see ER, quadratic, galois. \n\nFinally, a benchmark:\n\njulia> function testmat(p) \n         ss=vcat([[[i,j] for j in i+1:p-1] for i in 0:p-1]...)\n         [(E(p,i'*reverse(j))-E(p,i'*j))//p for i in ss,j in ss]\n       end\ntestmat (generic function with 1 method)\n\njulia> @btime testmat(12)^2;\n  472.964 ms (8324504 allocations: 707.18 MiB)\n\nThe equivalent in GAP:\n\ntestmat:=function(p)local ss;ss:=Combinations([0..p-1],2);\n  return List(ss,i->List(ss,j->(E(p)^(i*Reversed(j))-E(p)^(i*j))/p));\nend; \n\nfor testmat(12) takes 0.4s in GAP3, 0.3s in GAP4\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Cycs.galois","page":"Gapjm.jl Documentation","title":"Gapjm.Cycs.galois","text":"galois(c::Cyc,n::Int) applies to c the galois automorphism   of Q(ζ_conductor(c)) raising all roots of unity to the n-th power.   n should be prime to c.\n\nExamples\n\njulia> galois(1+E(4),-1) # galois(c,-1) is the same as conj(c)\n1-ζ₄\n\njulia> galois(ER(5),2)==-ER(5)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Cycs.ER","page":"Gapjm.jl Documentation","title":"Gapjm.Cycs.ER","text":"ER(n::Int) computes as a Cyc the square root of the integer n.\n\nExamples\n\njulia> ER(-3)\nζ₃-ζ₃²\n\njulia> ER(3)\n-ζ₁₂⁷+ζ₁₂¹¹\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Cycs.quadratic","page":"Gapjm.jl Documentation","title":"Gapjm.Cycs.quadratic","text":"quadratic(c::Cyc) determines if c lives in a quadratic extension of Q   it  returns a named  tuple (a=a,b=b,root=root,d=d) of  integers such that   c=(a + b ER(root))//d or nothing if no such tuple exists\n\nExamples\n\njulia> quadratic(1+E(3))\n(a = 1, b = 1, root = -3, den = 2)\n\njulia> quadratic(1+E(5))\n\n\n\n\n\n\n","category":"function"},{"location":"#Pols.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Pols.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Pols\ndivrem\ndivrem1\ngcd","category":"page"},{"location":"#Gapjm.Pols","page":"Gapjm.jl Documentation","title":"Gapjm.Pols","text":"An implementation of univariate Laurent polynomials.  A Pol contains two fields: its vector of coefficients, and its valuation.\n\nExamples\n\njulia> Pol(:q) # define string used for printing and set variable q\nq\n\njulia> Pol([1,2],0) # coefficients should have no leading or trailing zeroes.\n2q+1\n\njulia> p=Pol([1,2],-1)\n2+q⁻¹\n\njulia> valuation(p)\n-1\n\njulia> p=(q+1)^2\nq²+2q+1\n\njulia> degree(p)\n2\n\njulia> p(1//2) # a Pol is a callable object, where the call evaluates the Pol\n9//4\n\njulia> divrem(q^3+1,q+2) # changes coefficients to field elements\n(1.0q²-2.0q+4.0, -7.0)\n\njulia> divrem1(q^3+1,q+2) # keeps the ring, but needs second argument unitary\n(q²-2q+4, -7)\n\njulia> cyclotomic_polynomial(24) # the 24-th cyclotomic polynomial\nq⁸-q⁴+1\n\n\nsee also the individual documentation of gcd.\n\n\n\n\n\n","category":"module"},{"location":"#Base.divrem","page":"Gapjm.jl Documentation","title":"Base.divrem","text":"computes (p,q) such that a=p*b+q\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Pols.divrem1","page":"Gapjm.jl Documentation","title":"Gapjm.Pols.divrem1","text":"divrem when b unitary: does not change type\n\n\n\n\n\n","category":"function"},{"location":"#Base.gcd","page":"Gapjm.jl Documentation","title":"Base.gcd","text":"gcd(p::Pol, q::Pol)   the coefficients of p and q must be elements of a field for   gcd to be type-stable\n\nExamples\n\njulia> gcd(q+1,q^2-1)\n1.0q+1.0\n\njulia> gcd(q+1//1,q^2-1//1)\n(1//1)q+1//1\n\n\n\n\n\n","category":"function"},{"location":"#CoxGroups.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"CoxGroups.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"CoxGroups\nreduced\nword(W::CoxeterGroup,w)\nbruhatless\ncoxsym\nlongest\nnref","category":"page"},{"location":"#Gapjm.CoxGroups","page":"Gapjm.jl Documentation","title":"Gapjm.CoxGroups","text":"A  suitable  reference  for  the  general  theory of Coxeter groups is, for example, Bourbaki \"Lie Groups and Lie Algebras\" chapter 4.\n\nA Coxeter group is a group which has the presentation W=⟨S|(st)^m(s,t)=1  for  s,t∈  S⟩  for  some  symmetric  integer matrix m(s,t)  called  the  Coxeter  matrix,  where  m(s,t)>1  for s≠t and m(s,s)=1.  It is true (but a non-trivial theorem) that in a Coxeter group the  order of st is exactly m(s,t), thus a Coxeter group is the same as a  Coxeter system, that is a pair (W,S) of a group W and a set S of involutions,  such that the group is  presented by relations describing the order  of the product of two elements of S. A Coxeter group has a natural representation, its reflection representation, on a real vector space V of  dimension length(S) (the Coxeter rank  of W), where each element of S  acts as a  reflection; the faithfulness  of this representation in the main  argument to prove  that the order  of st is  exactly m(s,t). Thus Coxeter groups are real reflection groups. The converse need not be true if the  set of reflecting  hyperplanes has bad  topological properties, but it turns out that finite Coxeter groups are the same as finite real reflection groups.  The possible Coxeter matrices for  finite Coxeter groups have been completely  classified; the corresponding finite groups play a deep role in several areas of mathematics.\n\nCoxeter  groups  have  a  nice  solution  to the word problem. The length l(w)  of an element  w∈ W is  the minimum number  of elements of S of which it is a product (since the elements of S are involutions, we do not need inverses). An expression of w of minimal length is called a reduced word  for w. The main property of  reduced words is the exchange lemma which  states that if s₁…sₖ is a  reduced word for w (thusk=l(w)) and s∈  S is such that l(sw)≤l(w) then one  of the sᵢ in the word for w can be deleted to obtain a reduced word for sw. Thus given s∈ S and w∈ W,  either l(sw)=l(w)+1 or  l(sw)=l(w)-1 and we  say in this last case that  s belongs to  the left descent  set of w.  The computation of a reduced word for an element, and other word problems, are easily done if we know  the left descent sets. For the Coxeter groups that we implement, this left  descent set  can be  easily determined  (see e.g. 'coxsym' below), so this suggests how to deal with Coxeter groups.\n\nThe type CoxeterGroup is an abstact type; an actual struct which implements it must define a function\n\nisleftdescent(W,w,i) which tells whether the       i-th element of S is in the left descending set of w.\n\nthe other functions needed in an instance of a Coxeter group are\n\ngens(W) which returns the set S (the list of Coxeter generators)\nnref(W) which  returns the  number of  reflections of  W, if  W is  finite or nothing if W is infinite\n\nIt  should be  noted that  a Coxeter group can be any kind of group implementing the above functions.\n\nA  common occurrence in code for Coxeter groups is a loop like:\n\nfindfirst(eachindex(gens(W)),x->isleftdescent(W,w,x))\n\nif you provide a function firstleftdescent(W,w) it will be called instead of the above loop.\n\nBecause  of the  easy solution  of the  word problem  in Coxeter  groups, a convenient  way  to  represent  their  elements  is as words in the Coxeter generators.  They are represented as lists of labels for the generators. By default  these labels are  given as the  index of a  generator in S, so a Coxeter  word is just  a list of  integers in 1:length(S). For reflection subgroups, the labels are indices of the reflections in the parent group.\n\nThe functions 'word' and 'W(...)' will do the conversion between Coxeter words and elements of the group.\n\nExamples\n\njulia> W=coxsym(4)\n𝔖 ₄\n\njulia> p=W(1,3,2,1,3)\nUInt8(1,4)\n\njulia> word(W,p)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 2\n 1\n\n\nWe  notice that the word we started with and the one that we ended up with, are not the same, though they represent the same element of W. The reason is  that the function 'word' computes a lexicographically smallest word for w.  Below  are  some  other  possible  computations with the same Coxeter group:\n\njulia> word(W,longest(W))  # the (unique) longest element in W\n6-element Array{Int64,1}:\n 1\n 2\n 1\n 3\n 2\n 1\n\njulia> w0=longest(W)\nUInt8(1,4)(2,3)\njulia> length(W,w0)\n6\njulia> map(i->word(W,reflection(W,i)),1:nref(W))\n6-element Array{Array{Int64,1},1}:\n [1]            \n [2]            \n [3]            \n [1, 2, 1]      \n [2, 3, 2]      \n [1, 2, 3, 2, 1]\njulia> [length(elements(W,i)) for i in 0:nref(W)]\n7-element Array{Int64,1}:\n 1\n 3\n 5\n 6\n 5\n 3\n 1\n\n\nThe above line tells us that there is 1 element of length 0, there are 6 of length 3, …\n\nFor  most basic functions the convention is that the input is an element of the  group, rather than  a Coxeter word.  The reason is  that for a Coxeter group  which  is  a  permutation  group,  using the low level functions for permutations  is usually  much faster  than manipulating lists representing reduced expressions.\n\nThis  file contains mostly a port of  the basic functions on Coxeter groups in  CHEVIE. The only Coxeter group  constructor implemented here is coxsym. The file Weyl.jl defines coxgroup.\n\nThe dictionary from CHEVIE is as follows:\n\n     CoxeterElements(W[,l])                → elements(W[,l])\n     CoxeterLength(W,w)                    → length(W,w)\n     CoxeterWord(W,w)                      → word(W,w)\n     LongestCoxeterElement(W)              → longest(W)\n     FirstLeftDescending(W,w)              → firstleftdescent(W,w)\n     LeftDescenTSet(W,w)                   → leftdescents(W,w)\n     ReducedInRightCoset(W,w)              → reduced(W,w)\n     ReducedRightCosetRepresentatives(W,H) → reduced(H,W)\n     SemiSimpleRank(W)                     → coxrank(W)\n     CoxeterGroupSymmetricGroup(n)         → coxsym(n)\n     ReflectionSubGroup                    only standard parabolics now\n     IsLeftDescending(W,w,i)               → isleftdescent(W,w,i)\n     ReflectionDegrees(W)                  → degrees(W)\n     ReflectionLength(W,w)                 → reflength(W,w)\n     W.N                                   → nref(W)\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.CoxGroups.reduced","page":"Gapjm.jl Documentation","title":"Gapjm.CoxGroups.reduced","text":"reduced(W,w)   The unique element in the coset W.w which stabilises the positive roots of W\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> H=reflection_subgroup(W,[2,6])\nG₂₍₂₄₎\n\njulia> Set(word.(Ref(W),reduced.(Ref(H),elements(W))))\nSet(Array{Int64,1}[[1], []])\n\n\n\n\n\n\nreduced(H,W)   The elements in W which are H-reduced\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> H=reflection_subgroup(W,[2,6])\nG₂₍₂₄₎\n\njulia> [word(W,w) for S in reduced(H,W) for w in S]\n2-element Array{Array{Int64,1},1}:\n [] \n [1]\n\n\n\n\n\n\nreduced(H,W,S)   The elements in W which are H-reduced of length i from the set S of length i-1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.word-Tuple{CoxeterGroup,Any}","page":"Gapjm.jl Documentation","title":"Gapjm.word","text":"word(W::CoxeterGroup,w)   The Coxeter word for element w of W\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.CoxGroups.bruhatless","page":"Gapjm.jl Documentation","title":"Gapjm.CoxGroups.bruhatless","text":"bruhatless(W, x, y)  whether x≤y in the Bruhat order, for x, y ∈ W.\n\n\n\n\n\nbruhatless(W, y)  all x≤y in the Bruhat order, for y ∈ W.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.coxsym","page":"Gapjm.jl Documentation","title":"Gapjm.CoxGroups.coxsym","text":"The symmetric group on n letters as a Coxeter group\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.longest","page":"Gapjm.jl Documentation","title":"Gapjm.CoxGroups.longest","text":"The longest element of reflection_subgroup(W,I) –- never ends if infinite\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.nref","page":"Gapjm.jl Documentation","title":"Gapjm.CoxGroups.nref","text":"number of reflections of W\n\n\n\n\n\n","category":"function"},{"location":"#Weyl.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Weyl.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Weyl\ncartan\ntwo_tree\nreflection_subgroup\ncoxgroup\nrootdatum","category":"page"},{"location":"#Gapjm.Weyl","page":"Gapjm.jl Documentation","title":"Gapjm.Weyl","text":"Let  V be a  real vector space.  Finite Coxeter groups  coincide with the finite  subgroups of  GL(V) which  can be  generated y reflections. Weyl groups  are  the  finite  Coxeter  groups  which  can  be defined over the rational   numbers.  We  implement  finite   Coxter  groups  as  groups  of permutations  of  a  root  system.  Root  systems play an important role in mathematics as they classify semi-simple Lie algebras and algebraic groups.\n\nLet  us give precise definitions. Let V  be a real vector space, Vⱽ its dual  and let (,)  be the natural  pairing between Vⱽ  and V. A root system  is a finite set  of vectors R which  generate V (the roots), together  with  a  map  r↦  rⱽ  from  R  to  a subset Rⱽ of Vⱽ (the coroots) such that:\n\nFor any r∈  R, we have  (rⱽ,r)=2 so that  the formula x↦ x-(rⱽ,x)r\n\ndefines a reflection s_r:V→ V with root r and coroot rⱽ.\n\nThe reflection s_r stabilizes R.\n\nWe  will only  consider reduced  root systems,  i.e., such  that the only elements  of R colinear with r∈ R are r and -r; for Weyl groups, we also ask that the root system be crystallographic, that is (rⱽ,s) is an integer, for any s∈ R,rⱽ∈ Rⱽ.\n\nThe  subgroup W=W(R) of  GL(V) generated by  the reflections s_r is a finite  Coxeter group; when R is crystallographic, the representation V of  W  is  defined  over  the  rational  numbers.  All finite-dimensional (complex)  representations of a  finite Coxeter group  can be realized over the  same field  as V.  Weyl groups  can be  characterized amongst finite Coxeter  groups by the fact that all numbers m(s,t) in the Coxeter matrix are in {2,3,4,6}.\n\nIf  we identify  V with  Vⱽ by  choosing a  W-invariant bilinear form (.;.);  then we have rⱽ=2r/(r;r). A root system R is irreducible if it is not the union of two orthogonal subsets. If R is reducible then the corresponding  Coxeter group  is the  direct product  of the Coxeter groups associated with the irreducible components of R.\n\nThe  irreducible  crystallographic  root  systems  are  classified  by  the following  list of  Dynkin diagrams,  which, in  addition to  the Coxeter matrix,  encode also the relative length of the roots. We show the labeling of the nodes given by the function 'Diagram' described below.\n\nA_n O—O—O—…—O   B_n O⇐O—O—…—O  C_n O⇒ O—O—…—O  D_n  O 2\n    1 2 3 … n       1 2 3 … n      1  2 3 … n       ￨\n                                                  O—O—…—O\n                                                  1 3 … n\n\nG₂ O⇛ O  F₄ O—O⇒ O—O  E₆   O 2   E₇   O 2     E₈    O 2\n   1  2     1 2  3 4       ￨          ￨             ￨\n                       O—O—O—O—O  O—O—O—O—O—O   O—O—O—O—O—O—O\n                       1 3 4 5 6  1 3 4 5 6 7   1 3 4 5 6 7 8\n\nThese diagrams encode the presentation of the Coxeter group W as follows: the vertices represent the generating reflections; an edge is drawn between s  and t if the order m(s,t) of st is greater than 2; the edge is single  if  m(s,t)=3,  double  if  m(s,t)=4,  triple if m(s,t)=6. The arrows  indicate the relative root lengths when W has more than one orbit on  R, as explained below; we  get the Coxeter Diagram, which describes the  underlying Weyl group, if  we ignore the arrows:  we see that the root systems B_n and C_n correspond to the same Coxeter group.\n\nHere  are  the  diagrams  for  the  finite  Coxeter  groups which  are  not crystallographic:\n\n       e        5         5\nI₂(e) O—O   H₃ O—O—O  H₄ O—O—O—O\n      1 2      1 2 3     1 2 3 4 \n\nLet us now describe how the root systems are encoded in these diagrams. Let R  be a root system in V. Then we can choose a linear form on V which vanishes  on no element of R. According to  the sign of the value of this linear  form on a root  r ∈ R we  call r positive or negative. Then there  exists a unique subset Π of  the positive roots, called the set of simple  roots, such that  any positive root  is a linear combination with non-negative  coefficients of  roots in  Π. Any  two sets of simple roots (corresponding  to  different  choices  of  linear  forms  as above) can be transformed into each other by a unique element of W(R). Hence, since the pairing  between V and Vⱽ  is W-invariant, if Π  is a set of simple roots  and if  we define  the Cartan  matrix as  being the  n times n matrix   C={rⱽ(s)}_{rs},  for  r,s∈Π  this   matrix  is  unique  up  to simultaneous  permutation of rows and columns.  It is precisely this matrix which is encoded in a Dynkin diagram, as follows.\n\nThe  indices for the rows of C label the nodes of the diagram. The edges, for  r ≠ s, are  given as follows. If  C_{rs} and C_{sr} are integers such  that |C_{rs}|≥|C_{sr}|=1  the vertices  are connected by |C_{rs}| lines,  and if |C_{rs}|>1  then we put  an additional arrow  on the lines pointing  towards the node with label s.  In other cases, we simply put a single   line  equipped  with  the  unique  integer  p_{rs}≥1  such  that C_{rs}C_{sr}=cos^2 (π/p_{sr}).\n\nConversely,  the whole root  system can be  recovered from the simple roots and  the corresponding coroots. The  reflections in W(R) corresponding to the  simple roots are called  simple reflections or Coxeter generators. They are precisely the generators for which the Coxeter diagram encodes the defining  relations of W(R). Each root is  in the orbit of a simple root, so  that R is obtained  as the orbit of  the simple roots under the group generated  by  the  simple  reflections.  The  restriction  of  the  simple reflections  to the span of R is  determined by the Cartan matrix, so R is determined by the Cartan matrix and the set of simple roots.\n\nThe  Cartan  matrix  corresponding  to  one  of  the above irreducible root systems  (with the specified labeling) is  returned by the command 'cartan' which  takes as input  a Symbol giving  the type (that  is ':A', ':B', …, ':I')  and a positive Int giving the  rank (plus an Int giving the bond for  type :I).  This function  returns a  matrix with  entries in ℤ for crystallographic  types, and a  matrix of Cyc  for the other types. Given two  Cartan matrices c1 and c2,  their matrix direct sum (corresponding to  the  orthogonal  direct  sum  of  the  root systems) can be produced by cat(c1,c2,dims=[1,2]).\n\nThe  function 'rootdatum' takes as input a  list of simple roots and a list of the corresponding coroots and produces a struct containing information about  the root system R and about W(R). If we label the positive roots by  '1:N', and the negative roots  by 'N+1:2N', then each simple reflection is  represented by the permutation of '1:2N' which it induces on the roots. If  only one argument is given, the Cartan matrix of the root system, it is taken  as the list  of coroots and  the list of  roots is assumed to be the canonical basis of V.\n\nIf one only wants to work with Cartan matrices with a labeling as specified by  the  above  list,  the  function  call  can  be  simplified. Instead of 'rootdatum(cartan(:D,4))' the following is also possible.\n\njulia> W=coxgroup(:D,4)\nD₄\n\njulia> cartan(W)\n4×4 Array{Int64,2}:\n  2   0  -1   0\n  0   2  -1   0\n -1  -1   2  -1\n  0   0  -1   2\n\nAlso,  the Weyl group struct associated to a direct sum of irreducible root systems can be obtained as a product\n\njulia> W=coxgroup(:A,2)*coxgroup(:B,2)\nA₂× B₂₍₃₄₎\n\njulia> cartan(W)\n4×4 Array{Int64,2}:\n  2  -1   0   0\n -1   2   0   0\n  0   0   2  -2\n  0   0  -1   2\n\nThe  same struct  is constructed  by applying  'coxgroup' to  the matrix 'cat(cartan(:A,2), cartan(:B,2),dims=[1,2])'.\n\nThe elements of a Weyl group are permutations of the roots:\n\njulia> W=coxgroup(:D,4)\nD₄\n\njulia> p=W(1,3,2,1,3)\nInt16(1,14,13,2)(3,17,8,18)(4,12)(5,20,6,15)(7,10,11,9)(16,24)(19,22,23,21)\n\njulia> word(W,p)\n5-element Array{Int64,1}:\n 1\n 3\n 1\n 2\n 3\n\n\nThis module is mostly a port of the basic functions on Weyl groups in CHEVIE. The dictionary from CHEVIE is as follows:\n\n     CartanMat(\"A\",5)                       →  cartan(:A,5) \n     CoxeterGroup(\"A\",5)                    →  coxgroup(:A,5) \n     Size(W)                                →  length(W) \n     ForEachElement(W,f)                    →  for w in W f(w) end \n     ReflectionDegrees(W)                   →  degrees(W) \n     IsLeftDescending(W,w,i)                →  isleftdescent(W,w,i) \n     ReflectionSubgroup                     →  reflection_subgroup\n     TwoTree(m)                             →  twotree(m) \n     FiniteCoxeterTypeFromCartanMat(m)      →  type_cartan(m) \n     RootsCartan(m)                         →  roots(m) \n     PrintDiagram(W)                        →  Diagram(W) \n     Inversions                             →  inversions \n     Reflection                             →  reflection \n     W.orbitRepresentative[i]               →  simple_representative(W,i) \n     ElementWithInversions                  →  with_inversions\n\nfinally, a benchmark on julia 1.0.2\n\njulia> @btime length(elements(coxgroup(:E,7)))\n  531.385 ms (5945569 allocations: 1.08 GiB)\n\nGAP3 for the same computation takes 2.2s\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.PermRoot.cartan","page":"Gapjm.jl Documentation","title":"Gapjm.PermRoot.cartan","text":"`cartan(type, rank)`\n\nCartan matrix for a Weyl group:\n\njulia> cartan(:A,4)\n4×4 Array{Int64,2}:\n  2  -1   0   0\n -1   2  -1   0\n  0  -1   2  -1\n  0   0  -1   2\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.two_tree","page":"Gapjm.jl Documentation","title":"Gapjm.Weyl.two_tree","text":"two_tree(m)\n\nGiven  a square  matrix m  with zeroes  (or falses,  for a boolean matrix)  symmetric  with respect to the diagonal, let  G be the graph with vertices  axes(m)[1] and an edge between i and j iff !iszero(m[i,j]).  If G  is a line this function returns it as a Vector{Int}.   If  G  is  a  tree  with  one  vertex  c of valence 3 the function returns  (c,b1,b2,b3)  where b1,b2,b3 are  the branches from  this vertex sorted by  increasing length.  Otherwise the function returns nothing\n\njulia> Weyl.two_tree(cartan(:A,4))\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\njulia> Weyl.two_tree(cartan(:E,8))\n(4, [2], [3, 1], [5, 6, 7, 8])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.reflection_subgroup","page":"Gapjm.jl Documentation","title":"Gapjm.PermRoot.reflection_subgroup","text":"reflection_subgroup(W,I) The subgroup of W generated by reflections(W)[I]\n\nA   theorem  discovered  by  Deodhar  cite{Deo89}  and  Dyer  cite{Dye90} independently  is that a subgroup H of a Coxeter system (W,S) generated by  reflections has  a canonical  Coxeter generating  set, formed of the t ∈Ref(H)  such l(tt')>l(t) for any t'∈  Ref(H) different from t. This is used by 'reflection_subgroup' to determine the Coxeter system of H.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> Diagram(W)\nO⇛ O\n1  2\n\njulia> H=reflection_subgroup(W,[2,6])\nG₂₍₂₄₎\n\njulia> Diagram(H)\nO—O\n1 2\n\nThe  notation G₂₍₂₃₎ means  that 'W.roots[2:3]' form  a system of simple roots for H.\n\nA  reflection subgroup has specific properties  the most important of which is  'inclusion' which gives the positions of the roots of H in the roots of W. The inverse (partial) map is 'restriction'.\n\njulia> inclusion(H)\n6-element Array{Int64,1}:\n  2\n  4\n  6\n  8\n 10\n 12\n\njulia> restriction(H)\n12-element Array{Int64,1}:\n 0\n 1\n 0\n 2\n 0\n 3\n 0\n 4\n 0\n 5\n 0\n 6\n\n\nIf H is a standard parabolic subgroup  of a Coxeter group W then the length function  on H (with respect  to its set of  generators) is the restriction of  the length function on  W. This need not  no longer be true for arbitrary reflection subgroups of W:\n\njulia> word(W,H(2))\n3-element Array{Int64,1}:\n 1\n 2\n 1\n\nIn  this package, finite  reflection groups are  represented as permutation groups  on a set of roots. Consequently,  a reflection subgroup H⊆ W is a permutation  subgroup, thus its elements are represented as permutations of the roots of the parent group.\n\njulia> elH=word.(Ref(H),elements(H))\n6-element Array{Array{Int64,1},1}:\n []       \n [2]      \n [1]      \n [2, 1]   \n [1, 2]   \n [1, 2, 1]\n\njulia> elW=word.(Ref(W),elements(H))\n6-element Array{Array{Int64,1},1}:\n []             \n [1, 2, 1]      \n [2]            \n [1, 2, 1, 2]   \n [2, 1, 2, 1]   \n [2, 1, 2, 1, 2]\n\njulia> map(w->H(w...),elH)==map(w->W(w...),elW)\ntrue\n\n\nAnother  basic result about reflection subgroups  of Coxeter groups is that each  coset of  H in  W contains  a unique  element of  minimal length, see reduced.\n\n\n\n\n\nOnly parabolics defined are I=1:m for m≤n\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.coxgroup","page":"Gapjm.jl Documentation","title":"Gapjm.Weyl.coxgroup","text":"Coxeter group from type\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.rootdatum","page":"Gapjm.jl Documentation","title":"Gapjm.Weyl.rootdatum","text":"Adjoint root datum from cartan mat\n\n\n\n\n\nroot datum\n\n\n\n\n\n","category":"function"},{"location":"#Hecke.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Hecke.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Hecke\nhecke","category":"page"},{"location":"#Gapjm.Hecke","page":"Gapjm.jl Documentation","title":"Gapjm.Hecke","text":"This   module  ports   Chevie  functionality   for  Iwahori-Hecke  algebras associated to Coxeter groups.\n\nLet  (W,S) be a Coxeter  system where mₛₜ is  the order of st for s,t∈ S. Let R be a commutative ring with 1 and for s∈ S let uₛ₀,uₛ₁∈ R be elements which depend ony on the conjugacy class of s in W (this is the same  as requiring that uₛᵢ=uₜᵢ whenever mₛₜ is odd). The Iwahori-Hecke algebra of W over R with parameters uₛᵢ is a deformation of the group algebra  of W over R defined as  follows: it is the unitary associative R-algebra generated by elements Tₛ, s∈ S subject to the relations:\n\n(Tₛ-uₛ₀)(Tₛ-uₛ₁)=0 for all s∈ S (the quadratic relations)\n\nTₛTₜTₛ= TₜTₛTₜ with mₛₜ factors on each side (the braid relations)\n\nIf  uₛ₀=1 and  uₛ₁=-1 for  all s  then the quadratic relations become Tₛ²=1 and the deformation of the group algebra is trivial.\n\nSince  the generators Tₛ satisfy the  braid relations, the algebra H is in  fact a quotient of the group algebra of the braid group associated with W.  It follows that, if w=s_1⋯ s_m  is a reduced expression of w ∈ W then  the  product  Tₛ_1⋯ Tₛ_m  depends  only  on w. We will therefore denote by T_w. We have T_1=1.\n\nIf  one of uₛ₀ or uₛ₁ is invertible  in R, for example uₛ₁, then by changing  the generators  to T′ₛ=-Tₛ/uₛ₁,  and setting qₛ=-uₛ₀/uₛ₁, the braid  relations do no change  (since when mₛₜ is  odd we have uₛᵢ=uₜᵢ) but  the quadratic relations become  (T′ₛ-qₛ)(T′ₛ+1)=0. This last form is the  most common  form considered  in the  literature. Another common form, considered  in  the  context  of  Kazhdan-Lusztig  theory, is uₛ₀=√qₛ and uₛ₁=-√qₛ⁻¹.  The general form of parameters provided is a special case of general cyclotomic Hecke algebras, and can be useful in many contexts.\n\nFor  some  algebras  the  character  table,  and in general Kazhdan-Lusztig bases,  require a square root of -uₛ₀uₛ₁.  We provide a way to specify it with  the  field  .rootpara  which  can  be  given  when constructing the algebra. If not given a root is automatically extracted when needed (and we know  how to compute it) by the function RootParameter. Note however that sometimes  an  explicit  choice  of  root  is  necessary  which  cannot  be automatically determined.\n\nThere  is a universal choice  for R and uₛᵢ:  Let uₛᵢ:s∈ S,i∈[0,1] be indeterminates   such  that  uₛᵢ=uₜᵢ  whenever  mₛₜ  is  odd,  and  let A=ℤ[uₛᵢ] be the corresponding polynomial ring. Then the Hecke algebra H of  W over a  with parameters uₛᵢ  is called the generic Iwahori-Hecke algebra  of  with  W.  Any  other  algebra  with parameters vₛᵢ can be obtained  by specialization from  H: There is  a unique ring homomorphism f:A  → R such that f(uₛᵢ)=vₛᵢ  for all i. Then we  can view R as an A-module via f and we can identify the other algebra to R _A H.\n\nThe  elements {T_w∣w∈ W} actually form an  R-basis of H if one of the uₛᵢ  is invertible for all s. The  structure constants in that basis is obtained  as  follows.  To  multiply  T_v  by  T_w,  choose  a  reduced expression for v, say v=s_1 ⋯ s_k and apply inductively the formula:\n\nT_sT_w=T_sw               if l(sw)=l(w)+1\n\nT_sT_w=-uₛ₀uₛ₁T_sw+(uₛ₀+uₛ₁)T_w if l(sw)=l(w)-1.\n\nIf all s we have uₛ₀=q, uₛ₁=-1 then we call the corresponding algebra the one-parameter or Spetsial Iwahori-Hecke algebra associated with W; it can  be obtained with the  simplified call 'Hecke(W,q)'. Certain invariants of  the irreducible characters of  this algebra play a  special role in the representation  theory of the underlying  finite Coxeter groups, namely the a- and A-invariants. For basic properties of Iwahori-Hecke algebras and their  relevance to the representation theory of finite groups of Lie type, see for example Curtis and Reiner 1987, Sections~67 and 68.\n\nIn  the  following  example,  we  compute  the multiplication table for the 0-Iwahori–Hecke algebra associated with the Coxeter group of type A_2.\n\njulia> W=coxgroup(:A,2)\nA₂\n\njulia> H=hecke(W,0)             # One-parameter algebra with `q=0`\nHecke(A₂,0)\n\njulia> T=Tbasis(H)              # Create the `T` basis\n(::getfield(Gapjm.Hecke, Symbol(\"#f#25\")){Int64,Perm{Int16},HeckeAlgebra{Int64,Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}}) (generic function with 4 methods)\n\njulia> el=words(W)\n6-element Array{Array{Int8,1},1}:\n []       \n [2]      \n [1]      \n [2, 1]   \n [1, 2]   \n [1, 2, 1]\n\njulia> T.(el)*permutedims(T.(el))        # multiplication table\n6×6 Array{HeckeTElt{Perm{Int16},Int64,Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}},2}:\n T.    T₂     T₁     T₂₁    T₁₂    T₁₂₁ \n T₂    -T₂    T₂₁    -T₂₁   T₁₂₁   -T₁₂₁\n T₁    T₁₂    -T₁    T₁₂₁   -T₁₂   -T₁₂₁\n T₂₁   T₁₂₁   -T₂₁   -T₁₂₁  -T₁₂₁  T₁₂₁ \n T₁₂   -T₁₂   T₁₂₁   -T₁₂₁  -T₁₂₁  T₁₂₁ \n T₁₂₁  -T₁₂₁  -T₁₂₁  T₁₂₁   T₁₂₁   -T₁₂₁\n\n\nThus,  we work  with algebras  with arbitrary  parameters. We will see that this also works on the level of characters and representations.\n\nfinally, benchmarks on julia 1.0.2\n\njulia> function test_w0(n)\n         W=coxgroup(:A,n)\n         Tbasis(hecke(W,Pol([1],1)))(longest(W))^2\n       end\ntest_w0 (generic function with 1 method)\n\njulia> @btime test_w0(7);\n  132.737 ms (1788153 allocations: 157.37 MiB)\n\nCompare to GAP3 where the following function takes 0.92s\n\ntest_w0:=function(n)local W,T,H;\n  W:=CoxeterGroup(\"A\",n);H:=Hecke(W,X(Rationals));T:=Basis(H,\"T\");\n  T(LongestCoxeterWord(W))^2;\nend;\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Hecke.hecke","page":"Gapjm.jl Documentation","title":"Gapjm.Hecke.hecke","text":"hecke( W [, parameter][,rootpara=r]) return a Hecke algebra for W\n\nExample\n\njulia> W=coxgroup(:B,2)\nB₂\n\njulia> Pol(:q)\nq\n\njulia> H=hecke(W,q)\nHecke(B₂,q)\n\njulia> H.para\n2-element Array{Array{Pol{Int64},1},1}:\n [q, -1]\n [q, -1]\n\njulia> H=hecke(W,q^2,rootpara=q)\nHecke(B₂,q²,rootpara=q)\n\njulia> [H.para,rootpara(H)]\n2-element Array{Array{T,1} where T,1}:\n Array{Pol{Int64},1}[[q², -1], [q², -1]]\n Pol{Int64}[q, q]                                  \n\njulia> H=hecke(W,[q^2,q^4],rootpara=[q,q^2])\nHecke(B₂,Pol{Int64}[q², q⁴],rootpara=Pol{Int64}[q, q²])\n\njulia> [H.para,rootpara(H)]\n2-element Array{Array{T,1} where T,1}:\n Array{Pol{Int64},1}[[q², -1], [q⁴, -1]]\n Pol{Int64}[q, q²]\n\njulia> H=hecke(W,9,rootpara=3)\nHecke(B₂,9,rootpara=3)\n\njulia> [H.para,rootpara(H)]\n2-element Array{Array{T,1} where T,1}:\n Array{Int64,1}[[9, -1], [9, -1]]\n [3, 3]                              \n\n\n\n\n\n","category":"function"},{"location":"#KL.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"KL.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"KL\nKLPol\nTbasis","category":"page"},{"location":"#Gapjm.KL","page":"Gapjm.jl Documentation","title":"Gapjm.KL","text":"This  module ports Chevie functionality for Kazhdan-Lusztig polynomials and bases.\n\nLet  ℋ be  the Iwahori-Hecke algebra  of a Coxeter  system (W,S), with quadratic  relations (Tₛ-uₛ₀)(Tₛ-uₛ₁)=0  for s∈  S. If  -uₛ₀uₛ₁ has a square  root  wₛ,  we  can  scale  the  basis  Tₛ  to  get  a new basis tₛ=-Tₛ/wₛ    with   quadratic    relations   (tₛ-vₛ)(tₛ+vₛ⁻¹)=0   where vₛ=wₛ/uₛ₁.   The  most  general  case   when  Kazhdan-Lusztig  bases  and polynomials  can be defined is when the parameters vₛ belong to a totally ordered  abelian group Γ  for multiplication, see  Lus83. We set Γ⁺= {γ∈ Γ∣γ>0} and Γ⁻={γ⁻¹∣γ∈ Γ⁺}={γ∈ Γ∣γ<0}.\n\nThus  we assume ℋ defined over the ring ℤ[Γ], the group algebra of Γ over  ℤ, and the quadratic  relations of ℋ  associate to each s∈ S a vₛ∈  Γ⁺ such that  (tₛ-vₛ)(tₛ+vₛ⁻¹)=0. We also  set qₛ=vₛ² and define the  basis Tₛ=vₛtₛ with quadratic relations (Tₛ-qₛ)(Tₛ+1)=0; for w∈ W with reduced expression w=s₁…sₙ we define q_w∈ Γ⁺ by q_w^½=v_{s₁}…v_{sₙ} and let q_w=(q_w^½)².\n\nWe  define the bar involution on ℋ  by linearity: on ℤ[Γ] we define it by  overline_γ Γa_γγ= _γ Γ a_γ γ¹ and we extend it to ℋ by  overline  Tₛ=Tₛ¹.  Then  the  Kazhdan-Lusztig  basis C′_w is defined  as  the  only  basis  of  ℋ  stable  by the bar involution and congruent to t_w modulo _w WΓ t_w.\n\nThe  basis C′_w can be computed  as follows. We define elements R_xy of  ℤ[Γ] by  T_y¹=_x overlineR_xy¹  q_x¹T_x. We  then define inductively  the Kazhdan-Lusztig  polynomials (in  this general  context we should  say the  Kazhdan-Lusztig elements  of ℤ[Γ],  which belong  to the subalgebra  of ℤ[Γ] generated by  the qₛ) by P_xw=τ_(q_wq_x)^½ (_xywR_xyP_yw)  where τ  is the  truncation: τ_nu _γ Γ a_γγ= _γnua_γγ; the induction is thus on decreasing x for the Bruhat order  and  starts  at  P_ww=1.  We  have  then  C_w=_y q_w^-12 P_ywT_y.\n\nThe  Chevie code  for the  Kazhdan-Lusztig bases  C, D and their primed versions, has been initially written by Andrew Mathas around 1994, who also contributed  to  the  design  of  the programs dealing with Kazhdan-Lusztig bases. He also implemented some other bases, such as the Murphy basis which can  be  found  in  the  Chevie  contributions  directory. The code for the unequal  parameters  case  has  been  written  around  1999  by F.Digne and J.Michel. The other Kazhdan-Lusztig bases are computed in terms of the C′ basis.\n\nWhen  the ℤ[Γ] is a  Laurent polynomial ring the  bar operation is taking the  inverse of  the variables,  and truncation  is keeping terms of degree smaller or equal to that of ν. It is possible to use arbitrary groups Γ as   long   as   methods   bar:_γ   Γ   a_γγ  _γ  Γ  a_γγ¹, positive_part  : _γ  Γ a_γγ  _γ 1  a_γγ and negative_part: _γ  Γ  a_γγ    _γ  1  a_γγ  have been defined on ℤ[Γ]. These operations   will   be   used   internally   by  the  programs  to  compute Kazhdan-Lusztig bases.\n\nfinally, benchmarks on julia 1.0.2\n\njulia> function test_kl(W)\n         q=Pol([1],1); H=hecke(W,q^2,rootpara=q)\n         C=Cpbasis(H); T=Tbasis(H)\n         [T(C(w)) for w in elements(W)]\n       end\ntest_kl (generic function with 1 method)\n\njulia> @btime test_kl(coxgroup(:F,4));\n2.265 s (22516606 allocations: 1.81 GiB)\n\nCompare to GAP3 where the following function takes 11s for F4\n\ntest_kl:=function(W)local q,H,T,C;\n  q:=X(Rationals);H:=Hecke(W,q^2,q);\n  T:=Basis(H,\"T\");C:=Basis(H,\"C'\");\n  List(Elements(W),e->T(C(e)));\nend;\n\nAnother benchmark:\n\nfunction test_kl2(W)\n  el=elements(W)\n  [KLPol(W,x,y) for x in el, y in el]\nend\n\ntest_kl2 (generic function with 1 method)\n\njulia>@btime test_kl2(coxgroup(:F,4));\n  8s (97455915 allocations: 6.79 GiB)\n\nCompare to GAP3 where the following function takes 42s for F4\n\ntest_kl2:=function(W)local el;\n  el:=Elements(W);\n  List(el,x->List(el,y->KazhdanLusztigPolynomial(W,x,y)));\nend;\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.KL.KLPol","page":"Gapjm.jl Documentation","title":"Gapjm.KL.KLPol","text":"KLPol(W,y,w) returns the Kazhdan-Lusztig polynomial P_{y,w} of W\n\nTo  compute Kazhdan-Lusztig polynomials in  the one-parameter case it seems that  the best  approach still  is by  using the  recursion formula  in the original  article KL79. One can first run  a number of standard checks on a given  pair  of  elements  to  see  if the computation of the corresponding polynomial  can be reduced to a similar computation for elements of smaller length. One such check involves the notion of critical pairs (cf. Alv87): a pair  of elements w₁,w₂∈  W such that  w₁≤w₂ is critical  if ℒ(w₂) ⊆ ℒ(w₁)  and ℛ (w₂)⊆ ℛ (w₁), where ℒ  and ℛ denote the left and right descent  set, respectively.  Now if  y≤w ∈  W are arbitrary elements then there   always  exists  a  critical  pair   z≤w  with  y≤z≤w  and  then P_{y,w}=P_{z,w}.  Given two elements y and w, such a critical pair is found by the function 'critical_pair'. Whenever the polynomial corresponding to a critical pair is computed then this pair and the polynomial are stored in the property :klpol of the underlying Coxeter group.\n\njulia> W=coxgroup(:B,3)\nB₃\n\njulia> map(i->map(x->KLPol(W,one(W),x),elements(W,i)),1:W.N)\n9-element Array{Array{Pol{Int64},1},1}:\n [1, 1, 1]                       \n [1, 1, 1, 1, 1]                 \n [1, 1, 1, 1, 1, 1, 1]           \n [1, 1, 1, x+1, 1, 1, 1, 1]      \n [x+1, 1, 1, x+1, x+1, 1, x+1, 1]\n [1, x+1, 1, x+1, x+1, x²+1, 1]  \n [x+1, x+1, x²+x+1, 1, 1]        \n [x²+1, x+1, 1]                  \n [1]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Hecke.Tbasis","page":"Gapjm.jl Documentation","title":"Gapjm.Hecke.Tbasis","text":"julia> W=coxgroup(:B,3)\nB₃\n\njulia> Pol(:v);H=hecke(W,v^2,rootpara=v)\nHecke(B₃,v²,rootpara=v)\n\njulia> C=Cpbasis(H)\n(::getfield(Gapjm.KL, Symbol(\"#f#10\")){Pol{Int64},Perm{Int16},HeckeAlgebra{Pol{Int64},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}}) (generic function with 4 methods)\n\njulia> T=Tbasis(H)\n(::getfield(Gapjm.Hecke, Symbol(\"#f#25\")){Pol{Int64},Perm{Int16},HeckeAlgebra{Pol{Int64},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}}) (generic function with 4 methods)\n\njulia> T(C(1,2))\nv⁻²T.+v⁻²T₂+v⁻²T₁+v⁻²T₁₂\n\n\n\n\n\n","category":"function"},{"location":"#Garside.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Garside.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Garside\nleft_divisors\nDualBraidMonoid\nfraction\nword(b::Garside.GarsideElm)\nrepresentative_operation\ncentralizer_generators\nshrink","category":"page"},{"location":"#Gapjm.Garside","page":"Gapjm.jl Documentation","title":"Gapjm.Garside","text":"Garside  monoids are a general class  of monoids whose most famous examples are  the braid  and dual  braid monoids.  The implementation  of these last monoids is in the framework of a general implementation of Garside monoids.\n\nTo   define  them  we  first  need   to  introduce  some  vocabulary  about divisibility  in monoids. A left divisor of  x is a d such that there exists  y with x=dy (and then we say  that x is a right multiple of d).  We say  that a  monoid M  is left  (resp. right) cancellable if an equality dx=dy (resp. xd=yd) implies x=y. The divisor d is proper if  y≠1. We say  that x is  an atom if  it has no proper left divisor apart from 1. A left gcd of x and y is a common left divisor d of x  and y such that  any other common left  divisor is a left divisor of d. Similarly a right lcm of x and y is a common multiple which is a left divisor of any other common multiple.\n\nWe  call Garside a monoid M which is:\n\nleft and right cancellable.\ngenerated by its atoms,  which are finite in number.\nsuch that any element has only finitely many divisors.\nadmits left and  right  gcds  and  lcms.\nadmits a Garside element, which is an element Δ whose set of left and right divisors coincide and generate M.\n\nGarside  elements are not  unique, but there  is a unique  minimal one (for divisibility); we assume such an element has been chosen. Then the divisors of  Δ are called the  simples of M. A  Garside monoid embeds into its group  of fractions, which is called a Garside group (a Garside group may have  several distinct Garside structures, as  we will see for Braid groups of finite Coxeter groups).\n\nWe  also implement locally Garside monoids,  which are monoids where lcms do  not always exist, but exist when any common multiple exists; the set of simples  is then not defined using a  Garside element, but by the condition that  they contain the atoms and are  closed under lcms and taking divisors (see  [BDM01]); since it is not ensured by the existence of Δ, one has to add  the condition that  any element is  divisible by finitely many simples (but  the number of simples can be infinite). The main example is the braid monoid of an infinite Coxeter group. It is not known if these monoids embed in  their group of fractions (though that has been proved for braid monoids of Coxeter groups by Paris [Paris01]) and thus computing in the monoid does not help for computing in the group (only the monoid is implemented here).\n\nWhat allows computing with Garside and locally Garside monoids, and Garside groups,  is the fact  that they admit  normal forms –-  these normal forms where  first exhibited for  braid monoids by  Deligne [Del72], who extended previous work of Brieskorn, Saito [BS72] and Garside [Gar69]:\n\n(i) Let  M be a locally Garside monoid and let b∈ M. Then there is a unique maximal left simple divisor α(b) of b, called the head of b –- any other simple dividing b on the left divides α(b) on the left.\n\n(ii) Assume  M is a Garside monoid, Δ is  its Garside element and G is its group  of fractions. Then,  given any element  x∈ G, there  is some power Δⁱ such that Δⁱ x∈ M.\n\nA consequence of (i) is that any element has a canonical decomposition as a product of simples, called its left-greedy normal form. If we define ω(x) by  x=α(x)ω(x), then the normal form of x is α(x)α(ω(x))α(ω^2(x))… We use  the normal form to represent elements  of M, and when M is Garside (ii)  to represent elements  of G: given  x∈ G we  compute the smallest power  i  such  that  Δⁱ  x∈  M,  and  we  represent  x by the couple (i,Δ⁻ⁱx).  We are thus reduced to the case where x∈ M, not divisible by Δ,  where we represent  x by the  sequence of simples which constitutes its normal form. We now describe Artin-Tits braid monoids. Let (W,S) be a Coxeter system, that is W has presentation\n\n⟨s∈ S∣s^2=1, sts⋯ =tst⋯   (mₛₜ factors on each side) for s,t∈ S⟩\n\nfor  some Coxeter matrix mₛₜ for s,t∈ S. The braid group B associated to (W,S) is the group defined by the presentation\n\n⟨𝐬∈ 𝐒∣ 𝐬𝐭𝐬⋯ =𝐭𝐬𝐭⋯  (mₛₜ factors on each side) for 𝐬,𝐭∈ 𝐒⟩\n\nThe positive braid monoid B⁺ associated to W is the monoid defined by the  presentation above –- it identifies to the submonoid of B generated by  𝐒 by  the result  of Paris  mentioned above.  This monoid  is locally Garside,  with set of simples  in bijection with elements  of W and atoms the elements of 𝐒; we will denote by 𝐖 the set of simples, and by 𝐰 ↦ w  the bijection between simples and elements  of W. The group W has a length  defined  in  terms  of  reduced expressions. Similarly, having only homogeneous relations, B⁺ has a natural length function. Then 𝐖 can be characterized  as the subset of the elements  of B⁺ of the same length as their image in W.\n\nIf  W is finite, then B⁺ is Garside with Garside element the element of 𝐖 whose image is the longest element  of W. A finite Coxeter group is also  a reflection group in  a real vector space,  thus in its complexified V,  and B has also a topological definition as the fundamental group of the  space Vʳᵉᵍ/W, where Vʳᵉᵍ  is the set of  elements of V which are fixed  by no  non-identity element  of S;  however, we  will not use this here.\n\nGiven a Coxeter group W,\n\nExamples\n\njulia> W=coxgroup(:A,4)\nA₄\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A₄)\n\nconstructs  the  associated  braid  monoid,  and  then  as  a  function 'B' constructs  elements of the braid monoid (or group when W is finite) from a list of generators.\n\njulia> w=B(1,2,3,4)\n1234\n\njulia> w^3\n121321432.343\n\njulia> word(W,α(w^3))\n9-element Array{Int64,1}:\n 1\n 2\n 1\n 3\n 2\n 1\n 4\n 3\n 2\n\njulia> w^4\nδ.232432\n\njulia> inv(w)\n(1234)⁻¹\n\nAs  seen in the fourth  line above, the function  'α(b)' returns the simple α(b)∈ 𝐖 as an element of W.\n\nHow  an element of  a Garside group  is printed is  controlled by IOcontext ':greedy'.  By default, elements are printed  as fractions a⁻¹b where a and  b have no left common divisor. Each  of a and b is printed using its left-greedy normal form, that is a maximal power of the Garside element followed  the rest.  One can  print the  entire element  in the left-greedy normal  from by setting the ':greedy' IOContext; with the same w as above we have:\n\njulia> repr(w^-1,context=IOContext(stdout,:greedy=>true,:limit=>true))\n\"δ⁻¹.232432\"\n\nFinally,  repr gives   w  back   in  a   form  which   after  assigning 'B=braid(braid_monoid(W))' can be input back into Julia:\n\njulia> repr(w)\n\"B(1,2,3,4)\"\n\njulia> repr(w^3)\n\"B(1,2,1,3,2,1,4,3,2,3,4,3)\"\n\njulia> repr(w^-1)\n\"B(-4,-3,-2,-1)\"\n\nIn  general elements of  a Garside monoid  are displayed thus  as a list of their constituting atoms.\n\nWe  now describe the dual braid monoid.  For that, we first give a possible approach  to construct Garside monoids. Given a  group W and a set S of generators  of W as a monoid, we  define the length l(w) as the minimum number of elements of S needed to write w. We then define left divisors of   x  as  the  d   such  that  there  exists   y  with  x=dy  and l(d)+l(y)=l(x).  We say that w∈ W is  balanced if its set of left and right  divisors coincide,  is a  lattice (where  upper and lower bounds are lcms and gcds) and generates W. Then we have:\n\nsuppose w is balanced and let [1,w] be its set of divisors (an interval for  the partial order  defined by divisibility).  Then the monoid M with generators  [1,w] and relations  xy=z whenever xy=z  holds in W and l(x)+l(y)=l(z)  is Garside,  with simples  [1,w] and  atoms S.  It is called the interval monoid defined by the interval [1,w].\n\nThe  Artin-Tits braid monoid  is an interval  monoid by taking  for S the Coxeter generators, in which case l is the Coxeter length, and taking for w  the longest element of W. The dual monoid, constructed by Birman, Ko and  Lee  for  type  A  and  by  Bessis  for  all  well-generated complex reflection  groups, is obtained in  a similar way, by  taking this time for S  the set of all reflections, and for w a Coxeter element; then l is the  reflection length  'reflength' (for  well-generated complex reflection groups  whihc are not real S contains only those reflections which divide w  for the  reflection length);  for the  dual monoid  the simples are of cardinality  the  generalized  Catalan  numbers.  An  interval  monoid  has naturally  an inverse morphism from M  to W, called 'EltBraid' which is the  quotient map from the  interval monoid to W  which sends back simple braids to [1,w]. #A  last notable  notion is  reversible monoids.  Since in CHEVIE we store #only  left normal forms, it is easy to compute left lcms and gcds, but hard #to  compute right ones.  But this becomes  easy to do  if the monoid has an #operation  'reverse', which has the property that  'a' is a left divisor of #'b'  if and only if  'reverse(a)' is a right  divisor of 'reverse(b)'. This #holds  for Artin-Tits  and dual  braid monoids;  Artin-Tits monoids  have a #reverse  operation which consists of reversing a word, written as a list of #atoms.  The dual monoid  also has a  reverse operation defined  in the same #way,  but this operation changes  monoid: it goes from  the dual monoid for #the  Coxeter element w to the dual  monoid for the Coxeter element w⁻¹. #The  operations 'RightLcm' and  'RightGcd', as well  quite a few algorithms #have faster implementations if the monoid has a reverse operation.\n\nThis module implements functions to solve the conjugacy problem and compute centralizers  in Garside groups, following the work of Franco, Gebhardt and Gonzalez-Meneses.\n\nTwo  elements w and w' of a monoid  M are conjugate in M if there exists  x∈ M such that wx=xw'; if  M satisfies the Öre conditions, it has  a  group  of  fractions  where  this  becomes  x⁻¹wx=w',  the  usual definition  of conjugacy. A special case  which is even closer to conjugacy in  the group is if there exists y∈  M such that w=xy and w'=yx. This relation  is not transitive in general,  but we call cyclic conjugacy the transitive closure of this relation, a restricted form of conjugacy.\n\nThe  next  observation  is  that  if  w,w'  are conjugate in the group of fractions  of the Garside monoid M then  they are conjugate in M, since if  wx=xw' then  there is  a power  Δⁱ which  is central and such that xΔⁱ∈ M. Then wxΔⁱ=xΔⁱ w' is a conjugation in M.\n\nThe  crucial observation for solving the  conjugacy problem is to introduce inf(w):=sup{i such  that  Δⁱ   divides  w}  and sup(w):=inf{i such  that  w  divides Δⁱ}, and to notice  that the number of  conjugates of w with  same inf and sup as w  is finite. Further, a  theorem of Birman shows  that the maximum inf and  minimum sup in a conjugacy class can be achieved simultaneously; the elements  achieving this are called the super summit set of w. Thus a way to  determine if two elements are conjugate  is to find a representative of both  of them in  their super summit  set, and then  solve conjugacy within that  set. This can also be used  to compute the centralizer of an element: if  we consider  the super  summit set  as the  objects of a category whose morphisms are the conjugations by simple elements, the centralizer is given by the endomorphisms of the given object.\n\nWe illustrate this on an example:\n\njulia> b=B(2,1,4,1,4)\n214.14\n\njulia> c=B(1,4,1,4,3)\n14.143\n\njulia> d=representative_operation(b,c)\n(1)⁻¹21321432\n\njulia> b^d\n14.143\n\njulia> centralizer_generators(b)\n3-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}},1}:\n 21.1         \n 321432.213243\n 4\n\njulia> C=conjcat(b,:ss)\ncategory with 10 objects and 32 generating maps\n\njulia> C.obj\n10-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}},1}:\n 214.14\n 14.124\n 143.13\n 1214.4\n 13.134\n 124.24\n 1343.1\n 24.214\n 134.14\n 14.143\n\nThere  is a faster  solution to the  conjugacy problem given in [gebgon10]: for  each b∈ M, they define a  particular simple left divisor of b, its preferred  prefix  such  that  the  operation  sliding which cyclically conjugates  b by  its preferred  prefix, is  eventually periodic, and the period  is contained in the super summit set  of x. We say that x is in its  sliding circuit if some  iterated sliding of x  is equal to x. The set  of sliding  circuits in  a given  conjugacy class  is smaller than the super  summit  set,  thus  allows  to  solve  the conjugacy problem faster. Continuing from the above example,\n\njulia> word(W,preferred_prefix(b))\n2-element Array{Int64,1}:\n 2\n 1\n\njulia> b^B(preferred_prefix(b))\n1214.4\n\njulia> b1=b^B(preferred_prefix(b))\n1214.4\n\njulia> C=conjcat(b)\ncategory with 3 objects and 7 generating maps\n\njulia> C.obj\n3-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}},1}:\n 214.14\n 1214.4\n 1343.1\n\nFinally,  we have implemented  Hao Zheng's algorithm  to extract roots in a Garside monoid:\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A₃)\n\njulia> pi=B(B.delta)^2\nδ²\n\njulia> root(pi,2)\nδ\n\njulia> root(pi,3)\n1232\n\njulia> root(pi,4)\n132\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Garside.left_divisors","page":"Gapjm.jl Documentation","title":"Gapjm.Garside.left_divisors","text":"left_divisors( M, s)\n\nall  the left divisors of the simple element s of the Garside monoid M, as  a vector  of vectors,  where the  i+1-th vector  holds the  divisors of length i in the atoms.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A₃)\n\njulia> map(x->B.(x),Garside.left_divisors(B,W(1,3,2)))\n4-element Array{Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}},1},1}:\n [.]   \n [1, 3]\n [13]  \n [132] \n\njulia> B=DualBraidMonoid(W)\nDualBraidMonoid(A₃,c=[1, 3, 2])\n\njulia> map(x->B.(x),Garside.left_divisors(B,W(1,3,2)))\n4-element Array{Array{Gapjm.Garside.GarsideElm{Perm{Int16},DualBraidMonoid{Perm{Int16},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}},1},1}:\n [.]                     \n [1, 2, 3, 4, 5, 6]      \n [12, 13, 15, 25, 34, 45]\n [δ]                     \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.DualBraidMonoid","page":"Gapjm.jl Documentation","title":"Gapjm.Garside.DualBraidMonoid","text":"Let  W be a well generated complex  reflection group and c be a Coxeter element  of W (if W is a Coxeter group and no c is given a particular one  is chosen  by making  the product  of elements  in a  partition of the Coxeter  diagram in two sets where  elements in each commute pairwise). The result  is the dual braid  monoid determined by W  and c: let w be an element  of W or a sequence  s₁,…,sₙ of integers indices of reflections of W.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> B=DualBraidMonoid(W)\nDualBraidMonoid(A₃,c=[1, 3, 2])\n\njulia> B(2,1,2,1,1)\n12.1.1.1\n\njulia> B(-1,-2,-3,1,1)\n(25.1)⁻¹1.1\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Garside.fraction","page":"Gapjm.jl Documentation","title":"Gapjm.Garside.fraction","text":"fraction(b) returns a tuple (x,y)  of two  elements with  no non-trivial  common left divisor and such that b=inv(x)*y.\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A₃)\n\njulia> b=B( 2, 1, -3, 1, 1)\n(23)⁻¹321.1.1\n\njulia> fraction(b)\n(23, 321.1.1)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.word-Tuple{Gapjm.Garside.GarsideElm}","page":"Gapjm.jl Documentation","title":"Gapjm.word","text":"word(b::GarsideElm) returns  a description  of b  as a  list of  the atoms  of which  it is a product.  If b is in the Garside group  but not the Garside monoid, it is represented  in  fraction  normal  form  where  as a special convention the inverses  of  the  atoms  are  represented  by  negating  the corresponding integer.\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A₃)\n\njulia> b=B(2,1,2,1,1)*inv(B(2,2))\n(21)⁻¹1.12.21\n\njulia> word(b)\n7-element Array{Int64,1}:\n -1\n -2\n  1\n  1\n  2\n  2\n  1\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Garside.representative_operation","page":"Gapjm.jl Documentation","title":"Gapjm.Garside.representative_operation","text":"representative_operation(b,b1)\n\nThe  function returns a such that  b^a=b1 if such exists, and nothing otherwise.  If an argument <type> is given,  the computation is done in the corresponding category –- see \"conjcat\".\n\njulia> W=coxgroup(:D,4)\nD₄\n\njulia> B=BraidMonoid(coxgroup(:D,4))\nBraidMonoid(D₄)\n\njulia> b=B(2,3,1,2,4,3);b1=B(1,4,3,2,2,2)\n1432.2.2\n\njulia> representative_operation(b,b1)\n(134312.23)⁻¹\n\njulia> representative_operation(b,b1,:cyc)\n232.2\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.centralizer_generators","page":"Gapjm.jl Documentation","title":"Gapjm.Garside.centralizer_generators","text":"centralizer_generators(b)\n\na list of generators  of the centralizer of b.  The computation is done by computing the  endomorphisms  of  the  object  b  in  the  category  of its sliding circuits.  If an argument type  is given, the computation  is done in the corresponding  category –- see conjcat. The  main use of this is to compute  the  centralizer  in  the  category  of cyclic conjugacy by giving :cyc as the type.\n\njulia> W=coxgroup(:D,4)\nD₄\n\njulia> B=BraidMonoid(W)\nBraidMonoid(D₄)\n\njulia> w=B(4,4,4)\n4.4.4\n\njulia> cc=centralizer_generators(w)\n8-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}},1}:\n (31432)⁻¹231432\n 1              \n (2)⁻¹34.432    \n (1)⁻¹34.431    \n 34.43          \n 4              \n (32431)⁻¹132431\n 2              \n\njulia> shrink(cc)\n5-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}},1}:\n 4            \n 2            \n 1            \n 34.43        \n (3243)⁻¹13243\n\njulia> centralizer_generators(w,:cyc)\nSet(Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}}}[4])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.shrink","page":"Gapjm.jl Documentation","title":"Gapjm.Garside.shrink","text":"shrink(l)\n\nThe  list l is a  list of  elements of  the same Garside group G. This function  tries to find  another set of  generators of the  subgroup of G generated by the elements of l, of smaller total length (the length being counted  as returned by the function  word).\n\njulia> B=BraidMonoid(coxsym(3))\nBraidMonoid(𝔖 ₃)\n\njulia> b=[B(1)^3,B(2)^3,B(-2,-1,-1,2,2,2,2,1,1,2),B(1,1,1,2)]\n4-element Array{Gapjm.Garside.GarsideElm{Perm{UInt8},BraidMonoid{Perm{UInt8},Gapjm.CoxGroups.CoxSymmetricGroup{UInt8}}},1}:\n 1.1.1              \n 2.2.2              \n (1.12)⁻¹2.2.2.21.12\n 1.1.12             \n\njulia> shrink(b)\n2-element Array{Gapjm.Garside.GarsideElm{Perm{UInt8},BraidMonoid{Perm{UInt8},Gapjm.CoxGroups.CoxSymmetricGroup{UInt8}}},1}:\n 2  \n 1  \n\n\n\n\n\n","category":"function"},{"location":"#Chars.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Chars.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Chars\ncharinfo","category":"page"},{"location":"#Gapjm.Chars","page":"Gapjm.jl Documentation","title":"Gapjm.Chars","text":"The  CharTable of a finite complex reflection group W is computed using the  decomposition of W in irreducible  groups (see refltype). For each irreducible  group the character  table is either  computed using recursive formulas  for the infinite series,  or read into the  system from a library file  for the  exceptional types.  Thus, character  tables can  be obtained quickly  even for very large groups  (e.g., E₈). Similar remarks apply for conjugacy classes.\n\nThe  conjugacy  classes  and  irreducible  characters of irreducible finite complex reflection groups have canonical labelings by certain combinatorial objects;  these labelings are used in the  tables we give. For the classes, these  are partitions or partition tuples  for the infinite series, or, for exceptional  Coxeter  groups,  Carter's  admissible  diagrams @Car72.  For the  characters, these are again partitions  or partition tuples for the infinite series, and for the others they  are pairs  of two  integers (d,e)  where d  is the  degree of the character  and  e  is  the  smallest  symmetric  power  of the reflection representation  containing  the  given  character  as  a  constituent  (the b-invariant  of the character). This information is obtained by using the functions classinfo and charinfo. When you display the character table, the canonical labelings for classes and characters are those displayed.\n\nA  typical example  is coxgroup(:A,n),  the symmetric  group 𝔖ₙ₊₁ where classes and characters are parameterized by partitions of n+1.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> CharTable(W)\nCharTable(H(G(1,1,4)))\n    │1111 211 22 31  4\n────┼──────────────────\n1111│   1  -1  1  1 -1\n211 │   3  -1 -1  .  1\n22  │   2   .  2 -1  .\n31  │   3   1 -1  . -1\n4   │   1   1  1  1  1\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> ct=CharTable(W)\nCharTable(W(G2))\n     │A₀ Ã₁ A₁ G₂ A₂ A₁+Ã₁\n─────┼─────────────────────\nφ₁‚₀ │ 1  1  1  1  1     1\nφ₁‚₆ │ 1 -1 -1  1  1     1\nφ′₁‚₃│ 1  1 -1 -1  1    -1\nφ″₁‚₃│ 1 -1  1 -1  1    -1\nφ₂‚₁ │ 2  .  .  1 -1    -2\nφ₂‚₂ │ 2  .  . -1 -1     2\n\n\njulia> ct.charnames\n6-element Array{String,1}:\n \"\\phi_{1,0}\"  \n \"\\phi_{1,6}\"  \n \"\\phi_{1,3}'\" \n \"\\phi_{1,3}''\"\n \"\\phi_{2,1}\"  \n \"\\phi_{2,2}\"  \n\njulia> ct.classnames\n6-element Array{String,1}:\n \"A_0\"            \n \"\\tilde A_1\"    \n \"A_1\"            \n \"G_2\"            \n \"A_2\"            \n \"A_1+\\tilde A_1\"\n\nRecall  that our groups acts a reflection group on the vector space V, so have  fake degrees  (see \"fakeDegree\").  The valuation  and degree of these give  two  integers  b,B  for  each  irreducible  character  of  W (see charinf(W)[:b]  and  charinfo(W)[:B]).  For  finite Coxeter groups, the valuation  and degree of  the generic degrees  of the one-parameter generic Hecke  algebra  give  two  more  integers  a,A (see charinfo(W)[:a] and charinfo(W)[:A],  and [@Car85, Ch.11] for  more details). These will also be  used in the operations of truncated inductions explained in the chapter \"Reflection subgroups\".\n\nIwahori-Hecke  algebras and  cyclotomic Hecke  algebras also have character tables, see the corresponding chapters.\n\nWe  now describe for each type our conventions for labeling the classes and characters.\n\nType  Aₙ (n≥0). In this  case we have  W ≅ 𝔖ₙ₊₁. The classes and characters  are labeled by partitions of n+1. The partition corresponding to  a class describes  the cycle type  for the elements  in that class; the representative   in  '.classtext'   is  the   concatenation  of  the  words corresponding  to each part, and to a part i is associated the product of i-1  consecutive generators (starting one  higher that the last generator used  for the previous  parts). The partition  corresponding to a character describes  the type of  the Young subgroup  such that the trivial character induced  from this  subgroup contains  that character with multiplicity 1 and such that every other character occurring in this induced character has a  higher a-value. Thus, the sign  character corresponds to the partition (1ⁿ⁺¹)  and  the  trivial  character  to  the  partition  (n+1). The character of the reflection representation of W is labeled by (n,1).\n\nType  Bₙ (n≥2). In this  case W=W(Bₙ) is  isomorphic to the wreath product  of the cyclic  group of order  2 with the  symmetric group 𝔖ₙ. Hence  the classes and characters are  parameterized by pairs of partitions such  that the total sum of their  parts equals n. The pair corresponding to  a class describes the signed cycle type for the elements in that class, as  in [@Car72]. We use the convention that  if (λ,μ) is such a pair then λ  corresponds  to  the  positive  and  μ to the negative cycles. Thus, (1ⁿ,-)  and (-,1ⁿ) label the trivial class and the class containing the longest  element, respectively.  The pair  corresponding to  an irreducible character is determined via Clifford theory, as follows.\n\nWe  have a semidirect product decomposition W(Bₙ)=N ⋊ 𝔖ₙ where N is the standard  n-dimensional  𝔽₂ⁿ-vector  space.  For  a,b  ≥  0 such that n=a+b let η_{a,b} be the irreducible character of N which takes value 1  on the first a standard basis vectors and value -1 on the next b standard  basis vectors of N. Then  the inertia subgroup of η_{a,b} has the  form T_{a,b}=N.(𝔖_a × 𝔖_b) and  we can extend η_{a,b} trivially to an  irreducible  character  η̃_{a,b}  of  T_{a,b}.  Let  α and β be partitions  of a and b, respectively. We take the tensor product of the corresponding  irreducible characters of 𝔖_a and 𝔖_b and regard this as an  irreducible  character  of  T_{a,b}.  Multiplying this character with η̃_{a,b}  and  inducing  to  W(Bₙ)  yields an irreducible character χ= χ_{(α,β)}  of W(Bₙ). This defines the correspondence between irreducible characters and pairs of partitions as above.\n\nFor example, the pair ((n),-) labels the trivial character and (-,(1ⁿ)) labels  the  sign  character.  The  character  of  the  natural  reflection representation is labeled by ((n-1),(1)).\n\nType  Dₙ (n≥4). In this case W=W(Dₙ) can be embedded as a subgroup of index  2 into the Coxeter  group W(Bₙ). The intersection  of a class of W(Bₙ) with W(Dₙ) is either empty or a single class in W(Dₙ) or splits up  into two classes in  W(Dₙ). This also leads  to a parameterization of the  classes of W(Dₙ) by pairs of  partitions (λ,μ) as before but where the  number of parts of μ is even and where there are two classes of this type  if μ is empty and all parts of  λ are even. In the latter case we denote  the two classes in W(Dₙ) by (λ,+) and (λ,-), where we use the convention  that  the  class  labeled  by (λ,+) contains a representative which  can be written  as a word  in {s₁,s₃,…,sₙ} and  (λ,-) contains a representative which can be written as a word in {s₂,s₃, …,sₙ}.\n\nBy  Clifford theory the restriction of  an irreducible character of W(Bₙ) to  W(Dₙ)  is  either  irreducible  or  splits  up  into  two irreducible components.  Let (α,β) be  a pair of  partitions with total  sum of parts equal to n. If α!=β then the restrictions of the irreducible characters of  W(Bₙ) labeled  by (α,β)  and (β,α)  are irreducible and equal. If α=β  then the restriction of the character labeled by (α,α) splits into two  irreducible components  which we  denote by  (α,+) and (α,-). Note that  this can only happen if n is  even. In order to fix the notation we use  a result of  [@Ste89] which describes  the value of  the difference of these  two  characters  on  a  class  of  the  form (λ,+) in terms of the character  values  of  the  symmetric  group  𝔖_{n/2}.  Recall that it is implicit  in the notation (λ,+) that all  parts of λ are even. Let λ' be  the partition of n/2 obtained by  dividing each part by 2. Then the value  of χ_{(α,-)}-χ_{(α,+)} on an element in the class (λ,+) is given by  2^{k(λ)} times  the value  of the  irreducible character of 𝔖_{n/2} labeled  by α on the class of  cycle type λ'. (Here, k(λ) denotes the number of non-zero parts of λ.)\n\nThe  labels for the trivial, the  sign and the natural reflection character are the same as for W(Bₙ), since these characters are restrictions of the corresponding characters of W(Bₙ).\n\nThe groups G(d,1,n). They  are isomorphic to the wreath product of the cyclic group of order d with  the  symmetric  group  𝔖ₙ.  Hence  the  classes  and characters are parameterized  by d-tuples of partitions such that the total sum of their parts  equals n. The words chosen  as representatives of the classes are, when d>2, computed in a slightly different way than for Bₙ, in order to agree  with the words on which Ram  and Halverson compute the characters of the  Hecke algebra. First the parts of the d partitions are merged in one big  partition and sorted in  increasing order. Then, to  a part i coming from  the j-th partition is  associated the word (l+1…1… l+1)ʲ⁻¹l+2…l+i where l is the highest generator used to express the previous part.\n\nThe  d-tuple corresponding to an  irreducible character is determined via Clifford  theory in  a similar  way than  for the  Bₙ case.  The identity character  has the first  partition with one  part equal n  and the other ones  empty. The character of the  reflection representations has the first two  partitions with one part  equal respectively to n-1  and to 1, and the other partitions empty.\n\nThe groups G(de,e,n). They  are normal  subgroups of  index e  in G(de,1,n).  The quotient is cyclic,  generated by the image g  of the first generator of G(de,1,n). The  classes are parameterized as the  classes of G(de,e,n) with an extra information for a component of a class which splits.\n\nAccording  to  [@Hu85],  a  class  C  of  G(de,1,n)  parameterized by a de-partition  (S₀,…,S_{de-1}) is  in G(de,e,n)  if e  divides ∑ᵢ i ∑_{p∈  Sᵢ}p. It splits in d classes for the largest d dividing e and all  parts of all Sᵢ and  such that Sᵢ is empty  if d does not divide i.  If w is in C then 'gⁱ w g⁻ⁱ' for 'i in 0:d-1' are representatives of  the  classes  of  G(de,e,n)  which  meet  C.  They are described by appending the integer i to the label for C.\n\nThe  characters are described by Clifford theory. We make g act on labels for  characters of G(de,1,n)  . The action  of g permutes circularly by d  the partitions in the de-tuple.  A character has same restriction to G(de,e,n)  as its transform by g.  The number of irreducible components of its restriction is equal to the order k of its stabilizer under powers of  g.  We  encode  a  character  of  G(de,e,n)  by first, choosing the smallest  for lexicographical order label  of a character whose restriction contains  it; then this label is periodic with a motive repeated k times; we  represent the  character by  one of  these motives,  to which we append E(k)ⁱ for 'i in 0:k-1' to describe which component of the restriction we choose.\n\nTypes  G₂ and F₄. The matrices  of character values and the orderings and  labelings of  the irreducible  characters are  exactly the  same as in [@Car85,  p.412/413]: in type G₂ the character φ₁,₃' takes the value -1 on  the reflection associated  to the long  simple root; in  type F₄, the characters  φ₁,₁₂', φ₂,₄', φ₄,₇', φ₈,₉' and φ₉,₆' occur in the induced  of the  identity from  the A₂  corresponding to the short simple roots;  the  pairs  (φ₂,₁₆',  φ₂,₄″)  and  (φ₈,₃', φ₈,₉″) are related by tensoring by sign; and finally φ₆,₆″ is the exterior square of  the reflection representation. Note, however, that we put the long root at the left of the Dynkin diagrams to be in accordance with the conventions in [@Lus85, (4.8) and (4.10)].\n\nThe  classes  are  labeled  by  Carter's  admissible  diagrams  [@Car72]. A character is labeled by a pair (d,b) where d denotes the degree and b the  corresponding b-invariant. If there  are several characters with the same pair (d,b) we attach a prime to them, as in [@Car85].\n\nTypes  E₆,E₇,E₈. The character tables are obtained by specialization of those  of the Hecke algebra. The classes are labeled by Carter's admissible diagrams  [@Car72]. A  character is  labeled by  the pair (d,b) where d denotes  the degree and  b is the  corresponding b-invariant. For these types, this gives a unique labeling of the characters.\n\nNon-crystallographic  types I₂(m), H₃, H₄. In these cases we do not have  canonical  labelings  for  the  classes.  We  label  them  by reduced expressions.\n\nEach  character for  type H₃  is uniquely  determined by the pair (d,b) where  d is the degree and  b the corresponding b-invariant. For type H₄  there are just  two characters (those  of degree 30)  for which the corresponding  pairs are  the same.  These two  characters are nevertheless distinguished  by  their  fake  degrees:  the  character φ₃₀,₁₀' has fake degree  q¹⁰+q¹²+ higher terms, while φ₃₀,₁₀″ has fake degree q¹⁰+q¹⁴+ higher  terms. The characters in the table for type H₄ are ordered in the same way as in [@AL82].\n\nFinally,  the characters  of degree 2  for type  I₂(m) are  ordered as follows.  The matrix representations affording the characters of degree 2 are given by: ρ_j : s₁s₂ ↦ (\\begin{array}{cc}E(m)^j&0\\0&E(m)^{-j}\\end{array}),  s₁↦(\\begin{array}{cc}0&1\\1&0\\end{array}), where  1 ≤ j ≤  ⌊(m-1)/2⌋. The reflection representation is  ρ₁. The  characters in  the table  are ordered by listing first the characters of degree 1 and then ρ₁,ρ₂,….\n\nPrimitive complex reflection groups G₄ to G₃₄. The  groups G₂₃=H₃, G₂₈=F₄, G₃₀=H₄ are exceptional Coxeter groups and have  been  explained  above.  Similarly  for  the  other groups labels for characters  consist primarily  of the  pair (d,b)  where d  denotes the degree  and b is the corresponding  b-invariant. This is sufficient for G₄,  G₁₂, G₂₂ and G₂₄. For other  groups there are pairs or triples of  characters which  have the  same (d,b)  value. We  disambiguate these according  to  the  conventions  of  [@Mal00]  for G₂₇, G₂₉, G₃₁, G₃₃ and G₃₄:\n\nFor G₂₇:\n\nThe  fake degree  of φ₃,₅'  (resp. φ₃,₂₀',  φ₈,₉″) has smaller degree that  of  φ₃,₅″  (resp.  φ₃,₂₀″,  φ₈,₉'). The characters φ₅,₁₅' and φ₅,₆' occur with multiplicity 1 in the induced from the trivial character of  the parabolic subgroup  of type A₂  generated by the  first and third generator  (it is  asserted mistakenly  in [@Mal00]  that φ₅,₆″  does not occur in this induced; it occurs with multiplicity 2).\n\nFor G₂₉:\n\nThe  character  φ₆,₁₀‴  is  the  exterior  square  of φ₄,₁; its complex conjugate  is φ₆,₁₀⁗. The  character φ₁₅,₄″ occurs  in φ₄,₁⊗φ₄,₃; the character  φ₁₅,₁₂″  is  tensored  by  the  sign  character from φ₁₅,₄″. Finally  φ₆,₁₀' occurs in  the induced from  the trivial character of the standard parabolic subgroup of type A₃ generated by the first, second and fourth generators.\n\nFor G₃₁:\n\nThe  characters φ₁₅,₈', φ₁₅,₂₀' and φ₄₅,₈″ occur in φ₄,₁⊗φ₂₀,₇; the character   φ₂₀,₁₃'  is  complex  conjugate  of  φ₂₀,₇;  the  character φ₄₅,₁₂'  is tensored by sign of φ₄₅,₈'. The two terms of maximal degree of  the fakedegree of φ₃₀,₁₀' are  q⁵⁰+q⁴⁶ while for φ₃₀,₁₀″ they are q⁵⁰+2q⁴⁶.\n\nFor G₃₃:\n\nThe  terms of  maximal degree  of the  fakedegree of φ₁₀,₈' are q²⁸+q²⁶ while  for φ₁₀,₈' they are q²⁸+q²⁴. The  terms of maximal degree of the fakedegree   of  φ₄₀,₅'  are  q³¹+q²⁹   while  for  φ₄₀,₅″  they  are q³¹+2q²⁹.  The character  φ₁₀,₁₇' is  tensored by  sign of φ₁₀,₈' and φ₄₀,₁₄' is tensored by sign of φ₄₀,₅'.\n\nFor G₃₄:\n\nThe  character φ₂₀,₃₃' occurs in φ₆,₁⊗φ₁₅,₁₄. The character φ₇₀,₉' is rational.  The character  φ₇₀,₉″ occurs  in φ₆,₁⊗φ₁₅,₁₄.  The character φ₇₀,₄₅'   is  rational.The   character  φ₇₀,₄₅″   is  tensored  by  the determinant  character of  φ₇₀,₉″. The  character φ₅₆₀,₁₈' is rational. The character φ₅₆₀,₁₈‴ occurs in φ₆,₁⊗φ₃₃₆,₁₇. The character φ₂₈₀,₁₂' occurs    in   φ₆,₁⊗φ₃₃₆,₁₇.   The   character   φ₂₈₀,₃₀″   occurs   in φ₆,₁⊗φ₃₃₆,₁₇.  The  character  φ₅₄₀,₂₁'  occurs  in φ₆,₁⊗φ₁₀₅,₂₀. The character  φ₁₀₅,₈' is  complex conjugate  of φ₁₀₅,₄,  and φ₈₄₀,₁₃' is complex  conjugate  of  φ₈₄₀,₁₁.  The  character  φ₈₄₀,₂₃'  is  complex conjugate  of  φ₈₄₀,₁₉.  Finally  φ₁₂₀,₂₁'  occurs  in induced from the trivial character of the standard parabolic subgroup of type A₅ generated by the generators of G₃₄ with the third one omitted.\n\nFor  the groups G₅ and G₇ we  adopt the following conventions. For G₅ they are compatible with those of [@MR03] and [@BMM14].\n\nFor G₅:\n\nWe  let W=ComplexReflectionGroup(5),  so the  generators are  W(1) and W(2).\n\nThe  character φ₁,₄' (resp. φ₁,₁₂', φ₂,₃') takes the value 1 (resp. ζ₃,  -ζ₃)  on  W(1).  The  character  φ₁,₈″ is complex conjugate to φ₁,₁₆,  and the character  φ₁,₈' is complex  conjugate to φ₁,₄' . The character  φ₂,₅″ is complex  conjugate to φ₂,₁;  φ₂,₅' take the value -1 on W(1). The character φ₂,₇' is complex conjugate to φ₂,₅'.\n\nFor G₇:\n\nWe  let W=ComplexReflectionGroup(7),  so the  generators are W(1), W(2) and W(3).\n\nThe  characters  φ₁,₄'  and  φ₁,₁₀'  take  the value 1 on W(2). The character  φ₁,₈″ is complex  conjugate to φ₁,₁₆  and φ₁,₈' is complex conjugate  to φ₁,₄'. The characters φ₁,₁₂'  and φ₁,₁₈' take the value ζ₃  on W(2). The character φ₁,₁₄″ is complex conjugate to φ₁,₂₂ and φ₁,₁₄'  is complex conjugate to φ₁,₁₀'. The character φ₂,₃' takes the value  -ζ₃ on  W(2) and  φ₂,₁₃' takes  the value  -1 on W(2). The characters  φ₂,₁₁″, φ₂,₅″, φ₂,₇‴ and  φ₂,₁ are Galois conjugate, as well  as  the  characters  φ₂,₇',  φ₂,₁₃',  φ₂,₁₁'  and  φ₂,₅'. The character  φ₂,₉' is complex  conjugate to φ₂,₁₅  and φ₂,₉‴ is complex conjugate to φ₂,₃'.\n\nFinally,  for the remaining groups G₆, G₈  to G₁₁, G₁₃ to G₂₁, G₂₅, G₂₆,  G₃₂ and G₃₃ there are only  pairs of characters with same value (d,b).  We give labels uniformly to these characters by applying in order the following rules :\n\nIf the two characters have  different fake degrees, label φ_{d,b}' the  one  whose  fake  degree  is  minimal  for  the  lexicographic  order of  polynomials (starting with the highest term).\nFor the not yet labeled pairs, if only one of the two characters has the  property   that  in  its   Galois  orbit  at   least  one  character  is  distinguished by its (d,b)-invariant, label it φ_{d,b}'.\nFor the not yet labeled pairs,  if the minimum of the (d,b)-value (for  the  lexicographic  order  (d,b))  in  the  Galois  orbits  of the two  character  is different, label φ_{d,b}' the character with the minimal  minimum.\nWe define now a new invariant  for characters: consider all the pairs of  irreducible   characters  χ  and  ψ  uniquely  determined  by  their  (d,b)-invariant such that φ occurs with non-zero multiplicity m in  χ⊗ψ.  We define  t(φ) to  be the  minimal (for  lexicographic order)  possible list (d(χ),b(χ),d(ψ),b(ψ),m).\n\nFor  the not  yet labeled  pairs, if  the t-invariants are different, label φ_{d,b}' the character with the minimal t-invariant.\n\nAfter  applying  the  last  rule  all  the  pairs  will be labelled for the considered  groups. The labelling obtained  is compatible for G₂₅, G₂₆, G₃₂  and G₃₃ with that of [@Mal00]  and for G₈ with that described in [@MR03].\n\nWe  should  emphasize  that  for  all  groups  with  a  few exceptions, the parameters  for characters do  not depend on  any non-canonical choice. The exceptions  are G(de,e,n) with e>1, and G₅, G₇, G₂₇, G₂₈, G₂₉ and  G₃₄, groups  which admit  outer automorphisms  preserving the set of reflections,  so choices  of a  particular value  on a particular generator must be made for characters which are not invariant by these automorphisms.\n\nLabels  for the classes. For the exceptional complex reflection groups, the labels  for the classes represent the  decomposition of a representative of the  class as a product of generators, with the additional conventions that 'z'  represents the generator  of the center  and for well-generated groups 'c'  represents a Coxeter element  (a product of the  generators which is a regular element for the highest reflection degree).\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Chars.charinfo","page":"Gapjm.jl Documentation","title":"Gapjm.Chars.charinfo","text":"charinfo(W)\n\nreturns   information  about  the  irreducible  characters  of  the  finite reflection group W. The result is a Dict with the following entries:\n\n:charparams:  contains  parameters  for  the  irreducible  characters  as described in the introduction. The parameters are tuples with one component for  each irreducible  component of  W (as  given by  refltype). For an irreducible   component  which  is  an  imprimitive  reflection  group  the component  of the charparam is a tuple of partitions (partitions for type :A,  double partitions  for type  :B), and  for a primitive irreducible group it is a pair (d,e) where d is the degree of the character and e is  the  smallest  symmetric  power  of  the  character  of  the reflection representation  which  contains  the  given  character  as  a component. In addition,  there is an ordinal number if more than one character shares the first two invariants.\n\njulia> charinfo(coxgroup(:G,2))[:charparams]\n6-element Array{Array{Array{Int64,1},1},1}:\n [[1, 0]]   \n [[1, 6]]   \n [[1, 3, 1]]\n [[1, 3, 2]]\n [[2, 1]]   \n [[2, 2]]   \n\n:charnames:  strings describing the  irreducible characters, computed from the charparams. This is the same as CharNames(W).\n\n:positionId:  the position of the trivial character in the character table of W.\n\njulia> charinfo(coxgroup(:D,4))[:positionId]\n13\n\n:positionDet:  Contains the position  of the determinant  character in the character   table  of  W. For Coxeter groups this is the sign character.\n\njulia> charinfo(coxgroup(:D,4))[:positionDet]\n4\n\n:extRefl: Only present if W is irreducible, in which case the reflection representation  of W and all its exterior powers are irreducible. It then contains   the  position   of  the   exterior  powers   of  the  reflection representation in the character table.\n\njulia> charinfo(coxgroup(:D,4))[:extRefl]\n5-element Array{Int64,1}:\n 13\n 11\n  5\n  3\n  4\n\n:b:   contains  a  list  holding  the  b-function  for  all  irreducible characters  of W, that is,  for each character χ,  the valuation of the fake  degree of χ. The ordering of the result corresponds to the ordering of  the  characters  in  CharTable(W).  The  advantage  of  this function compared  to calling fakeDegrees is that one  does not have to provide an indeterminate,  and that  it may  be much  faster to  compute than the fake degrees.\n\njulia> charinfo(coxgroup(:D,4))[:b]\n13-element Array{Int64,1}:\n  6\n  6\n  7\n 12\n  4\n  3\n  6\n  2\n  2\n  4\n  1\n  2\n  0\n\n:B:   contains  a  list  holding  the  B-function  for  all  irreducible characters  of W, that is, for each character χ, the degree of the fake degree  of χ. The ordering  of the result corresponds  to the ordering of the  characters in CharTable(W). The  advantage of this function compared to  calling  fakeDegrees  is  that  one  does  not  have  to  provide  an indeterminate,  and that  it may  be much  faster to  compute than the fake degrees.\n\njulia> charinfo(coxgroup(:D,4))[:B]\n13-element Array{Int64,1}:\n 10\n 10\n 11\n 12\n  8\n  9\n 10\n  6\n  6\n  8\n  5\n  6\n  0\n\n:a:  Only  filled  for  Spetsial  groups.  Contains  a  list  holding  the a-function  for  all  irreducible  characters  of  the  Coxeter  group or Spetsial  reflection  group  W,  that  is,  for  each  character χ, the valuation  of the generic degree of χ (in the one-parameter Hecke algebra Hecke(W,Pol(:q))  corresponding  to  W).  The  ordering  of  the result corresponds to the ordering of the characters in CharTable(W).\n\njulia> charinfo(coxgroup(:D,4))[:a]\n13-element Array{Int64,1}:\n  6\n  6\n  7\n 12\n  3\n  3\n  6\n  2\n  2\n  3\n  1\n  2\n  0\n\n:A:  Only  filled  for  Spetsial  groups.  Contains  a  list  holding  the A-function  for  all  irreducible  characters  of  the  Coxeter  group or Spetsial  reflection group W, that is, for each character χ, the degree of   the  generic  degree  of  χ  (in  the  one-parameter  Hecke  algebra Hecke(W,Pol(:q))  corresponding  to  W).  The  ordering  of  the result corresponds to the ordering of the characters in CharTable(W).\n\njulia> charinfo(coxgroup(:D,4))[:A]\n13-element Array{Int64,1}:\n 10\n 10\n 11\n 12\n  9\n  9\n 10\n  6\n  6\n  9\n  5\n  6\n  0\n\n:opdam:  Contains the permutation of  the characters obtained by composing the  Opdam  involution  with  complex  conjugation. This permutation has an interpretation as a Galois action on the characters of H=Hecke(W,Pol(:x)):  if H splits  by taking v  an e-th root of x, .opdam records the permutation effected by the Galois action v->E(e)*v.\n\njulia> charinfo(ComplexReflectionGroup(22))[:opdam]\n(3,5)(4,6)(11,13)(12,14)(17,18)\n\njulia> charinfo(coxgroup(:A,2))\nDict{Symbol,Any} with 9 entries:\n  :a           => [3, 1, 0]\n  :b           => [3, 1, 0]\n  :positionId  => 3\n  :charnames   => [\"111\", \"21\", \"3\"]\n  :A           => [3, 2, 0]\n  :B           => [3, 2, 0]\n  :extRefl     => [3, 2, 1]\n  :charparams  => Array{Array{Int64,1},1}[[[1, 1, 1]], [[2, 1]], [[3]]]\n  :positionDet => 1\n\nFor  irreducible groups, the returned  record contains sometimes additional information:\n\nfor  F₄: the entry :kondo gives the  labeling of the characters given by Kondo, also used in [@Lus85, (4.10)].\n\nfor  E₆, E₇, E₈: the  entry :frame gives the  labeling of the characters given by Frame, also used in [@Lus85, (4.11), (4.12), and (4.13)].\n\nfor  G₂: the  entry :spaltenstein  gives the  labeling of the characters given by Spaltenstein.\n\njulia> charinfo(coxgroup(:G,2))[:spaltenstein]\n6-element Array{String,1}:\n \"1\"             \n \"\\varepsilon\"  \n \"\\varepsilon_l\"\n \"\\varepsilon_c\"\n \"\\theta'\"      \n \"\\theta''\"     \n\nfor  G(de,e,2)  even  e  and  d>1:  the  entry  :malle  gives  the parameters for the characters used by Malle in [@Mal96].\n\n\n\n\n\n","category":"function"},{"location":"#HasType.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"HasType.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"UnipotentCharacters","category":"page"},{"location":"#Util.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Util.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"Util\ngroupby\nconstant\nblocks\nformat\nprime_residues\nphi\nprimitiveroot\nechelon!","category":"page"},{"location":"#Gapjm.Util","page":"Gapjm.jl Documentation","title":"Gapjm.Util","text":"This  module contains  various utility  functions used  in the  rest of the code.  Maybe some  of them  exist in  some Julia  module I am not aware of; please tell me.\n\nThe code is divided in sections  according to semantics.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Util.groupby","page":"Gapjm.jl Documentation","title":"Gapjm.Util.groupby","text":"group items of list l according to the corresponding values in list v\n\njulia> groupby([31,28,31,30,31,30,31,31,30,31,30,31],\n       [:Jan,:Feb,:Mar,:Apr,:May,:Jun,:Jul,:Aug,:Sep,:Oct,:Nov,:Dec])\nDict{Int64,Array{Symbol,1}} with 3 entries:\n  31 => Symbol[:Jan, :Mar, :May, :Jul, :Aug, :Oct, :Dec]\n  28 => Symbol[:Feb]\n  30 => Symbol[:Apr, :Jun, :Sep, :Nov]\n\n\n\n\n\ngroup items of list l according to the values taken by function f on them\n\njulia> groupby(iseven,1:10)\nDict{Bool,Array{Int64,1}} with 2 entries:\n  false => [1, 3, 5, 7, 9]\n  true  => [2, 4, 6, 8, 10]\n\nNote:in this version l is required to be non-empty since I do not know how to access the return type of a function\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.constant","page":"Gapjm.jl Documentation","title":"Gapjm.Util.constant","text":"whether all elements in list a are equal\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.blocks","page":"Gapjm.jl Documentation","title":"Gapjm.Util.blocks","text":"blocks(M::Matrix)\n\nM  should be a square matrix. Define  a graph G with vertices 1:size(M,1)   and  with an edge between i and j  if either M[i,j] or M[j,i] is not zero   or false. blocks returns a vector of vectors I such that I[1],I[2], etc..   are  the  vertices  in  each  connected  component  of G. In other words,   M[I[1],I[1]],M[I[2],I[2]],etc... are blocks of M.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.format","page":"Gapjm.jl Documentation","title":"Gapjm.Util.format","text":"format( table; options )\n\nGeneral routine to format a table. Used for character tables.   Options:      rowlabels          Labels for rows      columnlabels       Labels for columns      rowslabel          Label for column of rowLabels      separators          line numbers after which to put a separator      columnrepartition  display in pieces of sizes these numbers of cols      rows                show only these rows      columns             show only these columns\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.prime_residues","page":"Gapjm.jl Documentation","title":"Gapjm.Util.prime_residues","text":"the numbers less than n and prime to n \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.phi","page":"Gapjm.jl Documentation","title":"Gapjm.Util.phi","text":"the Euler function ϕ \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.primitiveroot","page":"Gapjm.jl Documentation","title":"Gapjm.Util.primitiveroot","text":"primitiveroot(m::Integer) a primitive root mod. m,   that is it generates multiplicatively prime_residues(m).   It exists if m is of the form 4, 2p^a or p^a for p prime>2.\n\n\n\n\n\n","category":"function"},{"location":"#Cycpols.jl-Documentation-1","page":"Gapjm.jl Documentation","title":"Cycpols.jl Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm.jl Documentation","title":"Gapjm.jl Documentation","text":"CycPols","category":"page"},{"location":"#Gapjm.CycPols","page":"Gapjm.jl Documentation","title":"Gapjm.CycPols","text":"Cyclotomic  numbers, and cyclotomic polynomials  over the rationals or some cyclotomic field, are important in reductive groups or Spetses. This module deals  with them: the type CycPol  represents the product of a polynomial with  a rational fraction in one variable with all poles or zeroes equal to 0  or  roots  of  unity.  The  advantages  of representing as CycPol such objects    are:   nice   display   (factorized),   less   storage,   faster multiplication,  division and evaluation. The drawback is that addition and subtraction are not implemented!\n\njulia> Pol(:q)\nq\n\njulia> p=CycPol(q^25-q^24-2q^23-q^2+q+2)\n(q-2)Φ₁Φ₂Φ₂₃\n\njulia> p(q) # a CycPol is a callable object, this call evaluates p at q\nq²⁵-q²⁴-2q²³-q²+q+2\n\njulia> p*inv(CycPol(q^2+q+1))\n(q-2)Φ₁Φ₂Φ₃⁻¹Φ₂₃\n\n\nThe variable name in a CycPol is set by default to the same as for Pols.\n\nCycPols are internally a struct with fields:\n\n.coeff:  a coefficient, usually a cyclotomic number or a polynomial.\n\n.valuation: an Int.\n\n.v: a list of pairs r=>m of a root of unity r and a multiplicity m. Here r is a Root1, internally a fraction n//e with n<e representing E(r)=E(e,n).\n\nSo CycPol(c,val,v) represents c*q^val*prod((q-E(r))^m for (r,m) in v).\n\nWhen   showing,  some  factors  of   the  cyclotomic  polynomial  Φₙ  are represented.  If n  has a  primitive root,  ϕ′ₙ is  the product  of the (q-ζ)  where ζ runs over the odd powers of a primitive root of n, and ϕ″ₙ  is the product for the even powers. Some other factors of cyclotomic polynomials are:\n\nΦ′₈=q²-ζ₄\nΦ″₈=q²+ζ₄\nΦ‴₈=q²-√2q+1\nΦ⁗₈=q²+√2q+1\nΦ⁽⁵⁾₈=q²-√-2q-1\nΦ⁽⁶⁾₈=q²+√-2q-1\nΦ′₁₂=q²-ζ₄q-1\nΦ″₁₂=q²+ζ₄q-1\nΦ‴₁₂=q²+ζ₃²\nΦ⁗₁₂=q²+ζ₃\nΦ⁽⁵⁾₁₂=q²-√3q+1\nΦ⁽⁶⁾₁₂=q²+√3q+1\nΦ′₁₅=q⁴-q(1+√5)(q^2-q+1)/2+1\nΦ″₁₅=q⁴-q(1-√5)(q^2-q+1)/2+1\nΦ‴₁₅=q⁴+ζ₃²q³+ζ₃q²+q+ζ₃²\nΦ⁗₁₅=q⁴+ζ₃q³+ζ₃²q²+q+ζ₃\nΦ⁽⁵⁾₁₅=q²+ζ₃²(1+√5)q/2+ζ₃\nΦ⁽⁶⁾₁₅=q²+ζ₃²(1-√5)q/2+ζ₃\nΦ⁽⁷⁾₁₅=q²+ζ₃(1+√5)q/2+ζ₃\nΦ⁽⁸⁾₁₅=q²+ζ₃(1-√5)q/2+ζ₃\nΦ′₂₀=q⁴-(1+√5)/2q²+1\nΦ″₂₀=q⁴-(1-√5)/2q²+1\nΦ‴₂₀=q⁴+ζ₄q³-q²-ζ₄q+1\nΦ⁗₂₀=q⁴-ζ₄q³-q²+ζ₄q+1\nΦ′₂₄=q⁴+ζ₃²\nΦ″₂₄=q⁴+ζ₃\nΦ‴₂₄=q⁴-√2q³+q²-√2q+1\nΦ⁗₂₄=q⁴+√2q³+q²+√2q+1\nΦ⁽⁵⁾₂₄=q⁴-√6q³+3q²-√6q+1\nΦ⁽⁶⁾₂₄=q⁴+√6q³+3q²+√6q+1\nΦ⁽⁷⁾₂₄=q⁴+√-2q³-q²-√-2q+1\nΦ⁽⁸⁾₂₄=q⁴-√-2q³-q²+√-2q+1\nΦ⁽⁹⁾₂₄=q²+ζ₃²√-2q-ζ₃\nΦ⁽¹⁰⁾₂₄=q²-ζ₃²√-2q-ζ₃\nΦ⁽¹¹⁾₂₄=q²+ζ₃√-2q-ζ₃²\nΦ⁽¹²⁾₂₄=q²-ζ₃√-2q-ζ₃²\nΦ′₃₀=q⁴-q(1-√5)(q^2+q+1)/2+1\nΦ″₃₀=q⁴-q(1+√5)(q^2+q+1)/2+1\nΦ‴₃₀=q⁴-ζ₃q³+ζ₃²q²-q+ζ₃\nΦ⁗₃₀=q⁴-ζ₃²q³+ζ₃q²-q+ζ₃²\nΦ⁽⁵⁾₃₀=q²-ζ₃²(1-√5)q/2+ζ₃\nΦ⁽⁶⁾₃₀=q²-ζ₃²(1+√5)q/2+ζ₃\nΦ⁽⁷⁾₃₀=q²-ζ₃(1-√5)q/2+ζ₃²\nΦ⁽⁸⁾₃₀=q²-ζ₃(1+√5)q/2+ζ₃²\nΦ′₄₂=q⁶-ζ₃²q⁵+ζ₃q⁴-q³+ζ₃²q²-ζ₃q+1\nΦ″₄₂=q⁶-ζ₃q⁵+ζ₃²q⁴-q³+ζ₃q²-ζ₃²q+1\n\n\n\n\n\n","category":"module"}]
}
