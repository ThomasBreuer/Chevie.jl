var documenterSearchIndex = {"docs":
[{"location":"#Gapjm-Documentation-1","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Gapjm","category":"page"},{"location":"#Gapjm","page":"Gapjm Documentation","title":"Gapjm","text":"This  is  my  effort  porting  GAP  code  to Julia, specifically the Chevie package  of  GAP3  plus  the  GAP  functionality needed for Chevie to work: Cyclotomics,   Permutations,   Laurent   and   Puiseux  polynomials,  basic permutation group operations, etc….\n\nI am rather new to Julia, git and github so I am not even sure this package is  properly constituted; I did not try yet to register it. If you are more competent  that me and see anything to  be improved in this package, please write me or make a pull request.\n\nInstalling\n\nTo install this package, at the Julia command line:\n\nenter package mode with ]\ndo the command\n\n(v1.0) pkg> add \"https://github.com/jmichel7/Gapjm.jl\"\n\nexit package mode with backspace and then do \n\njulia> using Gapjm\n\nand you are set up.\n\nTo update later to the latest version, do\n\n(v1.0) pkg> update \"https://github.com/jmichel7/Gapjm.jl\"\n\nThe package currently contains as infrastructure:      * permutations        * cyclotomic numbers        * univariate Laurent and multivariate Puiseux polynomials      * combinatorics      * linear algebra on any field/ring      * posets      * cyclotomic polynomials      * signed permutations      * groups      * permutation groups\n\nfor  permutation groups I have  often replaced the sophisticated algorithms of  GAP by naive but  easy to write methods  only suitable for small groups (sufficient  for the  rest of  the package  but maybe  not for your needs). Otherwise  the  code  for  infrastructure  is  often  competitive with GAP, despite  being much shorter (often 100 lines of Julia replace 1000 lines of C); I am sure there are more optimisations possible. Any comments about the code and the design are welcome.\n\nThen  it contains about 75% of  Chevie functionality, ported from Gap3. The data  library has been automatically ported by  a transpiler so the code is \"strange\".  The  function  gap  can  help  you  discover  the  equivalent functionality  to a Gap3  function: it takes  a string and  gives you Julia translations of functions in Gap3 which match this string:\n\njulia> gap(\"words\")\nCoxeterWords(W[,l])      =>  word.(Ref(W),elements(W[,l])\nGarsideWords             =>  elements\nCharRepresentationWords  =>  traces_words_mats\n\nThen you can call on-line help on the discovered functions.\n\nThe  code in this package is often 10 times faster than the equivalent GAP3 Chevie   code  (after  the  maddeningly  long  compilation  time  on  first execution).\n\nI  tried that submodules in of my  package can be used independently of the rest.  They could be independent package. This  is the case for the modules Combinat,  Groups,  ModuleElts,  Perms,  Util  which  can be used stand-alone.  In addition modules MatInt, Cycs, Pols, Mvp, Posets can be used stand-alone except they use some functions from Util.\n\n\n\n\n\n","category":"module"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"","category":"page"},{"location":"#Permutations-1","page":"Gapjm Documentation","title":"Permutations","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Perms\nPerm\nPerm(::Integer...)\nPerm(::AbstractVector,::AbstractVector)\nlargest_moved_point\nsmallest_moved_point\nBase.:^(::AbstractVector,::Perm) \nPerms.orbit\nPerms.orbits\nPerms.order\ncycles\ncycletype\nsign\nBase.Matrix(::Perm,n)\nBase.:^(::AbstractMatrix,::Perm)\nrestricted(::Perm,::AbstractVector{<:Integer})\nreflength(::Perm)\nmappingPerm","category":"page"},{"location":"#Gapjm.Perms","page":"Gapjm Documentation","title":"Gapjm.Perms","text":"This module is a port of the GAP permutations type.\n\nThey  are permutations  of the  set 1:n  represented as  a vector  of n integers  holding the images of 1:n. The integer n is called the degree of  the permutation, even if it is not  moved. We follow the GAP design: it is  possible to multiply,  or to store  in the same  group, permutations of different  degrees; this  is implemented  by promoting  both to  the higher degree. Slightly different is the MAGMA design where any permutation has to belong  to  a  group  and  the  degree  is  determined  by that group; then multiplication of permutations within a given group is slightly faster, but it is more difficult to multiply permutations coming from different groups, like  a group  and one  of its  subgroups. The  degree is an implementation detail so usually it should not be used. One should rather use the function largest_moved_point.\n\nThe default constructor for a permutation uses the list of images of 1:n, like  Perm([2,3,1,5,4]).  Often  it  is  more  convenient  to  use  cycle decompositions:    the   above   permutation    has   cycle   decomposition (1,2,3)(4,5)    thus   can   be    written   Perm(1,2,3)*Perm(4,5)   or perm\"(1,2,3)(4,5)\"  (this last form  can parse any  GAP permutation). The list  of images  of 1:n  can be  gotten back  from the permutation by the function  vec;  note  that  permutations  may  be equal even if they have different  degrees  (if  they  move  the  same points), then they will have different vec.\n\nThe  complete type of a permutation  is Perm{T} where T<:Integer, where Vector{T}  is the type of the vector which holds the image of 1:n. This can  be used to save space or  time. For instance Perm{UInt8} can be used for  Weyl groups of rank≤8 since they permute  at most 240 roots. If T is not  specified we  take it  to be  Int16 since  this is a good compromise between   speed,  compactness  and  possible  size  of  n.  One  can  mix permutations  of different  types T;  they are  promoted to the wider one when multiplying.\n\nExamples of operations with permutations\n\njulia> a=Perm(1,2,3)\n(1,2,3)\n\njulia> vec(a)\n3-element Array{Int16,1}:\n 2\n 3\n 1\n\njulia> a==Perm(vec(a))\ntrue\n\njulia> b=Perm(1,2,3,4)\n(1,2,3,4)\n\njulia> a*b     # product\n(1,3,2,4)\n\njulia> inv(a)  # inverse\n(1,3,2)\n\njulia> a/b     # quotient  a*inv(b)\n(3,4)\n\njulia> a\\b     # left quotient inv(a)*b\n(1,4)\n\njulia> a^b     # conjugation inv(b)*a*b\n(2,3,4)\n\njulia> b^2     # square\n(1,3)(2,4)\n\njulia> 1^a     # image by a of point 1\n2\n\njulia> one(a)\n()\n\njulia> sign(a) # sigature of permutation\n1\n\njulia> order(a)\n3\n\njulia> largest_moved_point(a)\n3\n\njulia> smallest_moved_point(a)\n1\n\njulia> Perm{Int8}(a) # convert to Perm{Int8}\nPerm{Int8}: (1,2,3)\n\njulia> Matrix(b)\n4×4 Array{Bool,2}:\n 0  1  0  0\n 0  0  1  0\n 0  0  0  1\n 1  0  0  0\n\njulia> rand(Perm,10)\n(1,8,4,2,9,7,5,10,3,6)\n\nPerms have methods copy, hash, ==, so they can be keys in hashes or elements  of sets; two permutations are equal  if they move the same points to  the same images. They have methods cmp, isless (lexicographic order on   moved  points)  so  they  can  be  sorted.  Perms  are  scalars  for broadcasting.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Perms.Perm","page":"Gapjm Documentation","title":"Gapjm.Perms.Perm","text":"struct Perm{T<:Integer}\n\nA  Perm represents a permutation  of the set 1:n  and is implemented by a struct with one field, a Vector{T} holding the images of 1:n.\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Perms.Perm-Tuple{Vararg{Integer,N} where N}","page":"Gapjm Documentation","title":"Gapjm.Perms.Perm","text":"Perm{T}(x::Integer...)where T<:Integer\n\nreturns  a cycle.  For example  Perm{Int8}(1,2,3) constructs the cycle    (1,2,3) as a Perm{Int8}. If omitted {T} is taken as to be Int16.\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Perms.Perm-Tuple{AbstractArray{T,1} where T,AbstractArray{T,1} where T}","page":"Gapjm Documentation","title":"Gapjm.Perms.Perm","text":"Perm{T}(l::AbstractVector,l1::AbstractVector)\n\nreturns p, a Perm{T}, such that l1^p==l if such a p exists; returns nothing otherwise. If not given {T} is taken to be {Int16}. Needs the elements of l and l1 to be sortable.\n\njulia> Perm([0,2,4],[4,0,2])\n(1,3,2)\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Perms.largest_moved_point","page":"Gapjm Documentation","title":"Gapjm.Perms.largest_moved_point","text":"largest_moved_point(a::Perm) is the largest integer moved by a\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.smallest_moved_point","page":"Gapjm Documentation","title":"Gapjm.Perms.smallest_moved_point","text":"smallest_moved_point(a::Perm) is the smallest integer moved by a\n\n\n\n\n\n","category":"function"},{"location":"#Base.:^-Tuple{AbstractArray{T,1} where T,Perm}","page":"Gapjm Documentation","title":"Base.:^","text":"Base.:^(l::AbstractVector,p::Perm) \n\nreturns l permuted by p, a vector r such that r[i^p]==l[i]\n\nExamples\n\njulia> [5,4,6,1,7,5]^Perm(1,3,5,6,4)\n6-element Array{Int64,1}:\n 1\n 4\n 5\n 5\n 6\n 7\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Perms.orbit","page":"Gapjm Documentation","title":"Gapjm.Perms.orbit","text":"orbit(a::Perm,i::Integer) returns the orbit of a on i\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.orbits","page":"Gapjm Documentation","title":"Gapjm.Perms.orbits","text":"orbits(a::Perm,d::Vector=1:degree(a)) \n\nreturns the orbits of a on domain d\n\nExample\n\njulia> orbits(Perm(1,2)*Perm(4,5),1:5)\n3-element Array{Array{Int16,1},1}:\n [1, 2]\n [3]\n [4, 5]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.order","page":"Gapjm Documentation","title":"Gapjm.Perms.order","text":"order(a::Perm) is the order of the permutation a\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.cycles","page":"Gapjm Documentation","title":"Gapjm.Perms.cycles","text":"cycles(a::Perm) returns the non-trivial cycles of a\n\nExample\n\njulia> cycles(Perm(1,2)*Perm(4,5))\n2-element Array{Array{Int16,1},1}:\n [1, 2]\n [4, 5]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Perms.cycletype","page":"Gapjm Documentation","title":"Gapjm.Perms.cycletype","text":"cycletype(a::Perm) describes the partition of degree(a) associated to the   conjugacy class of a in the symmetric group, with ones removed. It is   represented as a list of pairs cyclesize=>multiplicity\n\nExample\n\njulia> cycletype(Perm(1,2)*Perm(3,4))\n1-element Array{Pair{Int64,Int64},1}:\n 2 => 2\n\n\n\n\n\n","category":"function"},{"location":"#Base.sign","page":"Gapjm Documentation","title":"Base.sign","text":"sign(a::Perm) is the signature of  the permutation a\n\n\n\n\n\n","category":"function"},{"location":"#Base.Matrix-Tuple{Perm,Any}","page":"Gapjm Documentation","title":"Base.Matrix","text":"Matrix(a::Perm,n=degree(a))  the  permutation  matrix  for  a  operating  on n points. If given, n should be larger than largest_moved_point(a).\n\njulia> Matrix(Perm(2,3,4),5)\n5×5 Array{Bool,2}:\n 1  0  0  0  0\n 0  0  1  0  0\n 0  0  0  1  0\n 0  1  0  0  0\n 0  0  0  0  1\n\n\n\n\n\n","category":"method"},{"location":"#Base.:^-Tuple{AbstractArray{T,2} where T,Perm}","page":"Gapjm Documentation","title":"Base.:^","text":"Base.:^(m::AbstractMatrix,p::Perm;dims=1)\n\nApplies the permutation p on the lines, columns or both of the matrix m depending on the value of dims\n\njulia> m=[3*i+j for i in 0:2,j in 1:3]\n3×3 Array{Int64,2}:\n 1  2  3\n 4  5  6\n 7  8  9\n\njulia> p=Perm(1,2,3)\n(1,2,3)\n\njulia> m^p\n3×3 Array{Int64,2}:\n 7  8  9\n 1  2  3\n 4  5  6\n\njulia> ^(m,p;dims=2)\n3×3 Array{Int64,2}:\n 3  1  2\n 6  4  5\n 9  7  8\n\njulia> ^(m,p;dims=(1,2))\n3×3 Array{Int64,2}:\n 9  7  8\n 3  1  2\n 6  4  5\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Perms.restricted-Tuple{Perm,AbstractArray{#s3,1} where #s3<:Integer}","page":"Gapjm Documentation","title":"Gapjm.Perms.restricted","text":"restricted(a::Perm{T},l::AbstractVector{<:Integer})\n\nl should be a union of cycles of p; returns p restricted to l\n\njulia> restricted(Perm(1,2)*Perm(3,4),3:4)\n(3,4)\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Perms.reflength-Tuple{Perm}","page":"Gapjm Documentation","title":"Gapjm.Perms.reflength","text":"reflength(a::Perm) minimum number of transpositions of which a is product\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Perms.mappingPerm","page":"Gapjm Documentation","title":"Gapjm.Perms.mappingPerm","text":"mappingPerm(a,b)\n\ngiven two lists of positive integers without repetition a and b, this function finds a permutation p such that a.^p==b.\n\njulia> mappingPerm([1,2,5,3],[2,3,4,6])\n(1,2,3,6,5,4)\n\n\n\n\n\n","category":"function"},{"location":"#Groups-1","page":"Gapjm Documentation","title":"Groups","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Groups\norbit(::Vector,::Any)\norbits(::Group,::AbstractVector)\nelements(::Group)\ntransversal\ncentralizer\nstabilizer\nword(::Group,w)\nlength(::Group)\nclass_reps(::Group)\nminimal_words\ntransporting_elt","category":"page"},{"location":"#Gapjm.Groups","page":"Gapjm Documentation","title":"Gapjm.Groups","text":"This module is a port of some GAP functionality on groups.\n\nThe only field of a Group G at the start is gens, the list of generators of G.  To  mimic  GAP  records  where  attributes/properties  of an object are computed  on demand when asked for, other attributes computed on demand are stored in the field .prop of the Group, which starts as Dict{Symbol,Any}()\n\nExamples\n\njulia> G=Group([Perm(1,2),Perm(1,2,3)])\nGroup([perm\"(1,2)\",perm\"(1,2,3)\"])\n\njulia> gens(G)\n2-element Array{Perm{Int16},1}:\n (1,2)  \n (1,2,3)\n\njulia> nbgens(G)\n2\n\nThe group itself, applied to a sequence of integers, returns the element defined by the corresponding word in the generators\n\njulia> G(2,1,-2) # returns gens(G)[2]*gens(G)[1]*inv(gens(G)[2])\n(1,3)\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Groups.orbit-Tuple{Array{T,1} where T,Any}","page":"Gapjm Documentation","title":"Gapjm.Groups.orbit","text":"orbit(gens::vector,p;action::Function=^)\n\norbit(G::Group,p;action::Function=^)\n\nthe  orbit of point  p under repeated  action of generators gens. Point p  should be hashable. The default action  of a group element is ^. For example  if g is a permutation and p  an integer, p^g is the image of p  by g; if h and g are group elements, then h^g is the conjugate inv(g)*h*g.  If a group  is given instead  of generators, the orbit under gens(G) is returned.\n\njulia> orbit([Perm(1,2),Perm(2,3)],1) \n3-element Array{Int64,1}:\n 1\n 2\n 3\n\njulia> orbit([Perm(1,2),Perm(2,3)],[1,3];action=(v,g)->v.^g)\n6-element Array{Array{Int64,1},1}:\n [1, 3]\n [2, 3]\n [1, 2]\n [3, 2]\n [2, 1]\n [3, 1]\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.orbits-Tuple{Group,AbstractArray{T,1} where T}","page":"Gapjm Documentation","title":"Gapjm.Groups.orbits","text":"orbits(gens::Vector,v;action=^)\n\norbits(G,v;action=^)\n\nthe  orbits on v of reapted action  of gens; the elements of v should be  hashable. If a  group is given  instead of generators,  the orbit under gens(G) is returned.\n\njulia> G=Group([Perm(1,2),Perm(2,3)]);\njulia> orbits(G,1:4)\n2-element Array{Array{Int64,1},1}:\n [1, 2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.elements-Tuple{Group}","page":"Gapjm Documentation","title":"Gapjm.Groups.elements","text":"elements(G::Group): the list of elements of G\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.transversal","page":"Gapjm Documentation","title":"Gapjm.Groups.transversal","text":"transversal(G::Group,p;action::Function=^)\n\nreturns  a Dict with entries x=>g where x runs over orbit(G,p) and where g  is such that x=action(p,g)\n\njulia> G=Group([Perm(1,2),Perm(2,3)]);\njulia> transversal(G,1)\nDict{Int64,Perm{Int16}} with 3 entries:\n  2 => (1,2)\n  3 => (1,3,2)\n  1 => ()\n\norbit functions can take any action of G as keyword argument\n\njulia> transversal(G,[1,2],action=(x,y)->x.^y)\nDict{Array{Int64,1},Perm{Int16}} with 6 entries:\n  [1, 3] => (2,3)\n  [1, 2] => ()\n  [2, 3] => (1,2,3)\n  [3, 2] => (1,3)\n  [2, 1] => (1,2)\n  [3, 1] => (1,3,2)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.centralizer","page":"Gapjm Documentation","title":"Gapjm.Groups.centralizer","text":"Centralizer(W,s)\n\nW  should  be  a  Weyl  group  or  an extended reflection group and s a semisimple  element of the  algebraic group G  corresponding to W. This function  returns  the  Weyl  group  of  C_G(s),  which describes it. The stabilizer  is an extended reflection group, with the reflection group part equal  to the Weyl group of C_{G⁰}(s), and the diagram automorphism part being those induced by C_G(s).\n\njulia> G=coxgroup(:A,3)\nA₃\njulia> s=SS(G,[0,1//2,0])\nSemisimpleElement{Root1}: <1,-1,1>\njulia> centralizer(G,s)\nA₃₍₁₃₎=(A₁A₁)Φ₂\n\n\n\n\n\ncentralizer(G,p;action=^)\n\ncomputes the centralizer C_G(p)\n\njulia> G=Group([Perm(1,2),Perm(1,2,3)]);\njulia> centralizer(G,1)\nGroup([perm\"(2,3)\"])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.stabilizer","page":"Gapjm Documentation","title":"Gapjm.Groups.stabilizer","text":"stabilizer(G,s)\n\nAssuming  that  s  is  a  set,  represented  as  a  sorted  list  without repetitions,   the  action   of  the   group  G   on  sets  is  given  by (g,p)->sort(p.^g).  The stabilizer of s in  G is the centralizer of s for the action of G on sets.\n\njulia> G=Group([Perm(1,2),Perm(1,2,3,4)])\nGroup([perm\"(1,2)\",perm\"(1,2,3,4)\"])\n\njulia> centralizer(G,[1,2];action=(s,g)->s.^g)\nGroup([perm\"(3,4)\"])\n\njulia> stabilizer(G,[1,2])\nGroup([perm\"(3,4)\",perm\"(1,2)\",perm\"(1,2)(3,4)\"])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.word-Tuple{Group,Any}","page":"Gapjm Documentation","title":"Gapjm.Groups.word","text":"word(G::Group,w): a word in  gens(G) representing element w of G\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{Group}","page":"Gapjm Documentation","title":"Base.length","text":"length(G::Group): the number of elements of G\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.class_reps-Tuple{Group}","page":"Gapjm Documentation","title":"Gapjm.Groups.class_reps","text":"class_reps(G::Group): representatives of conjugacy classes of G\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.minimal_words","page":"Gapjm Documentation","title":"Gapjm.Groups.minimal_words","text":"`minimal_words(G)`\n\nreturns a Dict giving for each element of G a minimal positive word in    the generators representing it.\n\njulia> G=Group([Perm(1,2),Perm(1,2,3)]);\njulia> minimal_words(G)\nDict{Perm{Int16},Array{Int64,1}} with 6 entries:\n  ()      => Int64[]\n  (2,3)   => [2, 1]\n  (1,3,2) => [1, 2, 1]\n  (1,3)   => [1, 2]\n  (1,2)   => [1]\n  (1,2,3) => [2]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.transporting_elt","page":"Gapjm Documentation","title":"Gapjm.Groups.transporting_elt","text":"transporting_elt(G,p,q;action=^,dist=nothing)   \n\nreturns  an  element  g∈ G  such  that  p^g==q (or action(p,g)==q if action  is given) if such a g  exists and nothing otherwise. The set of possible g forms a right coset of the centralizer of p in G.\n\njulia> g=Group(perm\"(1,2,3)(6,7)\",perm\"(3,4,5)(7,8)\")\nGroup([perm\"(1,2,3)(6,7)\",perm\"(3,4,5)(7,8)\"])\n\njulia> transporting_elt(g,1,5)\n(1,5,4,3,2)\n\njulia> transporting_elt(g,1,6)\n\njulia> transporting_elt(g,[1,2,3,4],[2,3,4,5];action=(s,g)->sort(s.^g))\n(1,2,3,4,5)(6,7,8)\n\njulia> transporting_elt(g,[1,2,3,4],[3,4,5,2];action=(s,g)->s.^g)\n\n\n\n\n\n","category":"function"},{"location":"#Permutation-groups-1","page":"Gapjm Documentation","title":"Permutation groups","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"PermGroups\nbase\ncentralizers\ntransversals\nsymmetric_group\nstab_onmat\nperm_onmat\nperm_rowcolmat","category":"page"},{"location":"#Gapjm.PermGroups","page":"Gapjm Documentation","title":"Gapjm.PermGroups","text":"This module is a port of some GAP functionality on permutation groups.\n\nThis code refers to Holt \"Handbook of computational group theory\" chapter 4 for basic algorithms.\n\nA  PermGroup is  a group  where gens  are Perms,  which allows  for all the algorithms like base, centralizer chain, etc...\n\nExamples\n\njulia> G=Group([Perm(i,i+1) for i in 1:2])\nGroup([perm\"(1,2)\",perm\"(2,3)\"])\n\n# PermGroups are iterators over their elements\njulia> collect(G)  \n6-element Array{Perm{Int16},1}:\n (1,2)\n (1,3,2)\n ()\n (1,2,3)\n (1,3)\n (2,3)\n\n# maximum degree of an element of G\njulia> degree(G)  \n3\n\njulia> Perm(1,2) in G\ntrue\n\njulia> Perm(1,2,4) in G\nfalse\n\n# Elements,  appartenance test and  other function are  computed on G using\n# Schreier-Sims theory, that is computing the following\n\n# a list of points that no element of G fixes\njulia> base(G) \n2-element Array{Int16,1}:\n 1\n 2\n\n# the i-th element is the centralizer of base[1:i-1]\njulia> centralizers(G) \n2-element Array{PermGroup{Int16},1}:\n Group([perm\"(1,2)\",perm\"(2,3)\"])\n Group([perm\"(2,3)\"])\n\n# i-th element is transversal of centralizer[i] on base[i]\njulia> transversals(G)\n2-element Array{Dict{Int16,Perm{Int16}},1}:\n Dict(2 => (1,2),3 => (1,3,2),1 => ())\n Dict(2 => (),3 => (2,3))\n\nfinally, benchmarks on julia 1.0.1\n\njulia> @btime length(collect(symmetric_group(8)))\n  5.995 ms (391728 allocations: 13.89 MiB)\n\njulia> @btime minimal_words(symmetric_group(8));\n  10.477 ms (122062 allocations: 15.22 MiB)\n  \njulia> @btime length(elements(symmetric_group(8)))\n  2.136 ms (98328 allocations: 5.94 MiB)\n\nCompare to GAP3 Elements(SymmetricGroup(8)); takes 3.8 ms\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.PermGroups.base","page":"Gapjm Documentation","title":"Gapjm.PermGroups.base","text":"A list of points stabilized by no element of G \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.centralizers","page":"Gapjm Documentation","title":"Gapjm.PermGroups.centralizers","text":"centralizers: the i-th element is the centralizer of base[1:i-1]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.transversals","page":"Gapjm Documentation","title":"Gapjm.PermGroups.transversals","text":"The  i-th element  is  a description of  the orbit of :centralizers[i] on   :base[i]  as a Dict where each point q is the key to a permutation p such   that :base[i]^p=q\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.symmetric_group","page":"Gapjm Documentation","title":"Gapjm.PermGroups.symmetric_group","text":"The symmetric group of degree n \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.stab_onmat","page":"Gapjm Documentation","title":"Gapjm.PermGroups.stab_onmat","text":"stab_onmat([G,]M[,l])\n\nIf  OnMats(m,p)=^(M,p;dims=(1,2)), and  the argument  G is given (which should   be  a  PermGroup)   this  is  just   a  fast  implementation  of centralizer(G,M;action=OnMats).  If  G  is  omitted  it  is taken to be symmetric_group(size(M,1)).  The  program  uses sophisticated algorithms, and can handle matrices up to 80×80.\n\njulia> uc=UnipotentCharacters(ComplexReflectionGroup(34));\n\njulia> stab_onmat(fourier(uc.families[20]))\nGroup([perm\"(7,38)\",perm\"(39,44)(40,43)(41,42)\"])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.perm_onmat","page":"Gapjm Documentation","title":"Gapjm.PermGroups.perm_onmat","text":"perm_onmat(M, N[, m ,n]) \n\nIf  OnMats(M,p)=^(M,p;dims=(1,2)), return p  such that OnMats(M,p)=N. If  in  addition  the  vectors  m  and  n are given, p should satisfy m^p=n.\n\nEfficient version of  transporting_elt(symmetric_group(size(M,1)),M,N;action=OnMats)\n\njulia> m=cartan(:D,12);\n\njulia> n=^(m,Perm(1,5,2,8,12,4,7)*Perm(3,9,11,6);dims=(1,2));\n\njulia> perm_onmat(m,n)\n(1,5,2,8,12,4,7)(3,9,11,6)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.perm_rowcolmat","page":"Gapjm Documentation","title":"Gapjm.PermGroups.perm_rowcolmat","text":"RepresentativeRowColPermutation(m1,m2)   whether matrix m1 is conjugate to matrix m2 by row/col permutations\n\nm1  and m2 should be rectangular matrices of the same dimensions. The   function   returns   a   pair   of   permutations   [p1,p2]  such  that   ^(m1^p[1],p[2];dims=2)==m2   if  such   permutations  exist,  nothing   otherwise.\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomic-numbers-1","page":"Gapjm Documentation","title":"Cyclotomic numbers","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Cycs\nconductor\ncoefficients(c::Cyc)\nE\ngalois\nER\nQuadratic\nRoot1\nCycs.root","category":"page"},{"location":"#Gapjm.Cycs","page":"Gapjm Documentation","title":"Gapjm.Cycs","text":"Cyclotomic  numbers means complex numbers which are sums of rationals times roots of unity.\n\nThey  are a very important feature of GAP, since character values of finite groups are cyclotomics.\n\nThey  have a normal form given by writing them in the Zumbroich basis. This form  allows to find  the smallest Cyclotomic  field which contains a given number,   and  decide   in  particular   if  a   cyclotomic  is  zero.  Let ζₙ=exp(2iπ/n).  The Zumbroich basis is a  particular subset of size φ(n) of 1,ζₙ,ζₙ²,…,ζₙⁿ⁻¹ which forms a basis of ℚ (ζₙ).\n\nI  started  this  file  by  porting  Christian  Stump's Sage code, which is simpler to understand than GAP's code. The reference for the algorithms is\n\nT. Breuer, Integral bases for subfields of cyclotomic fields AAECC 8 (1997)\n\nAs  does  GAP,  I  lower  automatically  numbers  after  each  computation; currently  the code about 50% slower than the C code in GAP since it is not as  much optimized. GAP also  converts a Cyclotomic which  is rational to a Rational,  a Rational which is integral to  an Int, a BigInt which is small to  a small Int, etc... This is tremendously useful but needs a new type of number to be added to Julia, which I am not competent enough to try.\n\nThe main way to build a Cyclotomic number is to use the function E(n,k=1) which constructs ζₙᵏ.\n\nExamples\n\njulia> E(3)+E(4)\nCyc{Int64}: ζ₁₂⁴-ζ₁₂⁷-ζ₁₂¹¹\n\njulia> E(3,2)\nCyc{Int64}: ζ₃²\n\njulia> 1+E(3,2)\nCyc{Int64}: -ζ₃\n\njulia> a=E(4)-E(4)\nCyc{Int64}: 0\n\njulia> conductor(a) # a has been lowered to ℚ (ζ₁)=ℚ \n1\n\njulia> typeof(convert(Int,a))\nInt64\n\njulia> convert(Int,E(4))\nERROR: InexactError: convert(Int64, E(4))\n\njulia> inv(1+E(4)) # inverses often need Rational coefficients\nCyc{Rational{Int64}}: 1/2-ζ₄/2\n\njulia> inv(E(5)+E(5,4)) # but not always\nCyc{Int64}: -ζ₅²-ζ₅³\n\njulia> Cyc(1//2+im) # one can convert Gaussian integers or rationals\nCyc{Rational{Int64}}: 1/2+ζ₄\n\njulia> conj(1+E(4)) # complex conjugate\nCyc{Int64}: 1-ζ₄\n\njulia> real(E(5))  # real part\nCyc{Rational{Int64}}: (-1+√5)/4\n\njulia> imag(E(5))  # imaginary part\nCyc{Rational{Int64}}: ζ₅/2-ζ₅⁴/2\n\njulia> c=E(9)   # an effect of the Zumbroich basis\nCyc{Int64}: -ζ₉⁴-ζ₉⁷\n\njulia> Root1(c) # but you can decide whether a Cyc is a root of unity\nRoot1: ζ₉\n\njulia> Root1(1+E(4)) # it returns nothing for a non-root\n\njulia> Root1(1,4)\nRoot1: ζ₄\n\njulia> c=Root1(;r=1//4)*Root1(1,3) # faster computation for roots of unity\nRoot1: ζ₁₂⁷\n\njulia> E(c) # convert back to Cyc\nCyc{Int64}: ζ₁₂⁷\n\njulia> c=Complex{Float64}(E(3))  # convert to float is sometimes useful\n-0.4999999999999998 + 0.8660254037844387im\n\nCycs have methods copy, hash, ==, cmp, isless (total order) so they can be  keys in hashes or  elements of sets. Cyclotomics  which are integers or rationals compare correctly to integers or rationals:\n\njulia> -1<Cyc(0)<1\ntrue\n\nFor more information see the methods conductor, coefficients, denominator, ER, Quadratic, galois, root. \n\nFinally, a benchmark:\n\njulia> function testmat(p) \n         ss=[[i,j] for i in 0:p-1 for j in i+1:p-1]\n         [(E(p,i'*reverse(j))-E(p,i'*j))//p for i in ss,j in ss]\n       end\ntestmat (generic function with 1 method)\n\njulia> @btime testmat(12)^2;\n  453.005 ms (10790333 allocations: 626.01 MiB)\n\nThe equivalent in GAP:\n\ntestmat:=function(p)local ss;ss:=Combinations([0..p-1],2);\n  return List(ss,i->List(ss,j->(E(p)^(i*Reversed(j))-E(p)^(i*j))/p));\nend; \n\ntestmat(12)^2 takes 0.35s in GAP3, 0.29s in GAP4\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Cycs.conductor","page":"Gapjm Documentation","title":"Gapjm.Cycs.conductor","text":"conductor(c::Cyc)    conductor(v::AbstractVector)\n\nreturns the smallest positive integer  n  uch that c∈ ℚ (ζₙ) (resp. all elements of v are in ℚ (ζₙ)).\n\njulia> conductor(E(9))\n9\n\njulia> conductor([E(3),1//2,E(4)])\n12\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Cycs.coefficients-Tuple{Cyc}","page":"Gapjm Documentation","title":"Gapjm.Cycs.coefficients","text":"coefficients(c::Cyc)\n\nfor  a cyclotomic c of conductor n,  returns a vector v of length n such that c==∑ᵢ v[i]ζⁱ.\n\njulia> coefficients(E(9))\n9-element Array{Int64,1}:\n  0\n  0\n  0\n  0\n -1\n  0\n  0\n -1\n  0\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Cycs.E","page":"Gapjm Documentation","title":"Gapjm.Cycs.E","text":"E(n::Integer,k::Integer=1) is exp(2i k π/n)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Cycs.galois","page":"Gapjm Documentation","title":"Gapjm.Cycs.galois","text":"galois(c::Cyc,n::Int) applies to c the galois automorphism   of Q(ζ_conductor(c)) raising all roots of unity to the n-th power.   n should be prime to conductor(c).\n\nExamples\n\njulia> galois(1+E(4),-1) # galois(c,-1) is the same as conj(c)\nCyc{Int64}: 1-ζ₄\n\njulia> galois(ER(5),2)==-ER(5)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Cycs.ER","page":"Gapjm Documentation","title":"Gapjm.Cycs.ER","text":"ER(n::Int) computes as a Cyc the square root of the integer n.\n\nExamples\n\njulia> ER(-1)\nCyc{Int64}: ζ₄\n\njulia> ER(3)\nCyc{Int64}: √3\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Cycs.Quadratic","page":"Gapjm Documentation","title":"Gapjm.Cycs.Quadratic","text":"Quadratic(c::Cyc) \n\ndetermines  if c  lives in  a quadratic  extension of  ℚ. It  returns a Quadratic  struct with fields a, b, root, den representing c as (a  + b ER(root))//den  if such a  representation is possibe or nothing otherwise\n\nExamples\n\njulia> Quadratic(1+E(3))\n(1+√-3)/2\n\njulia> Quadratic(1+E(5))\n\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Cycs.Root1","page":"Gapjm Documentation","title":"Gapjm.Cycs.Root1","text":"Root1(c)\n\nc should be a cyclotomic number (a Cyc), or a Real. Root1 returns a Root1 object containing the rational e/n with 0≤e<n (that is, e/n∈ ℚ /ℤ) if c==E(n,e), and nothing if c is not a root of unity.\n\njulia> r=Root1(-E(9,2)-E(9,5))\nRoot1: ζ₉⁸\n\njulia> conductor(r)\n9\n\njulia> exponent(r)\n8\n\njulia> E(r)\nCyc{Int64}: -ζ₉²-ζ₉⁵\n\njulia> Root1(-E(9,4)-E(9,5))\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Cycs.root","page":"Gapjm Documentation","title":"Gapjm.Cycs.root","text":"root(x,n=2)\n\ncomputes  the n-th root of x when we know  how to do it. We know how to compute  n-th  roots  for  roots  of  unity, square roots of integers and n-th  roots of  integers wich  are perfect  n-th powers  of integers or square roots of integers.\n\njulia> root(-1)\nCyc{Int64}: ζ₄\n\njulia> root(E(4))\nCyc{Int64}: ζ₈\n\njulia> root(27,6)\nCyc{Int64}: √3\n\n\n\n\n\n","category":"function"},{"location":"#Univariate-(Laurent)-polynomials-1","page":"Gapjm Documentation","title":"Univariate (Laurent) polynomials","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Pols\ndivrem\ngcd\ncyclotomic_polynomial","category":"page"},{"location":"#Gapjm.Pols","page":"Gapjm Documentation","title":"Gapjm.Pols","text":"An implementation of univariate Laurent polynomials.  A Pol contains two fields: its vector of coefficients, and its valuation.\n\nExamples\n\njulia> Pol(:q) # define string used for printing and set variable q\nPol{Int64}: q\n\njulia> Pol([1,2],0) # coefficients should have no leading or trailing zeroes.\nPol{Int64}: 2q+1\n\njulia> p=Pol([1,2],-1)\nPol{Int64}: 2+q⁻¹\n\njulia> valuation(p)\n-1\n\njulia> p=(q+1)^2\nPol{Int64}: q²+2q+1\n\njulia> degree(p)\n2\n\njulia> p(1//2) # a Pol is a callable object, where the call evaluates the Pol\n9//4\n\njulia> p[0], p[1], p[-1] # indexing gives the coefficients\n(1, 2, 0)\n\njulia> divrem(q^3+1,2q+1) # changes coefficients to field elements\n(0.5q²-0.25q+0.125, 0.875)\n\njulia> divrem(q^3+1,q+2)  # keeps the ring, but needs leading coeff ±1\n(q²-2q+4, -7)\n\njulia> cyclotomic_polynomial(24) # the 24-th cyclotomic polynomial\nPol{Int64}: q⁸-q⁴+1\n\n\nsee also the individual documentation of divrem, gcd.\n\n\n\n\n\n","category":"module"},{"location":"#Base.divrem","page":"Gapjm Documentation","title":"Base.divrem","text":"divrem(a::Pol, b::Pol)\n\ncomputes (p,q) such that a=p*b+q When the leading coefficient of b is ±1 does not change type\n\n\n\n\n\n","category":"function"},{"location":"#Base.gcd","page":"Gapjm Documentation","title":"Base.gcd","text":"gcd(p::Pol, q::Pol) the  coefficients of  p and  q must  be elements  of a  field for gcd to be type-stable\n\nExamples\n\njulia> gcd(q+1,q^2-1)\nPol{Float64}: 1.0q+1.0\n\njulia> gcd(q+1//1,q^2-1//1)\nPol{Rational{Int64}}: (1//1)q+1//1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Pols.cyclotomic_polynomial","page":"Gapjm Documentation","title":"Gapjm.Pols.cyclotomic_polynomial","text":"cyclotomic_polynomial(n)\n\nreturns the n-th cyclotomic polynomial.\n\njulia> cyclotomic_polynomial(5)\nPol{Int64}: q⁴+q³+q²+q+1\n\nThe  computed  cyclotomic  polynomials  are  cached  in  the global Dict ̀Pols.cyclotomicpolynomialdict`\n\n\n\n\n\n","category":"function"},{"location":"#Multivariate-(Puiseux)-polynomials-1","page":"Gapjm Documentation","title":"Multivariate (Puiseux) polynomials","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Mvps\nvariables\nMvps.coefficients(::Mvp,::Symbol)\nMvps.valuation\nMvps.value\nMvps.degree\nMvps.conj\nfactor(::Mvp)\nderivative\nlaurent_denominator\nscal","category":"page"},{"location":"#Gapjm.Mvps","page":"Gapjm Documentation","title":"Gapjm.Mvps","text":"What   is  implemented  here  is  \"Puiseux  polynomials\",  that  is  linear combinations  of monomials  of the  type x₁^{a₁}…  xₙ^{aₙ} where xᵢ are variables  and aᵢ are exponents which  can be arbitrary rational numbers. Some  functions  described  below  need  their  argument  to  involve  only variables  to integral  powers; we  will refer  to such objects as \"Laurent polynomials\"; some functions require further that variables are raised only to positive powers: we refer then to \"true polynomials\".\n\n@Mvp x₁,…,xₙ\n\ndeclares   that  xᵢare  indeterminates  suitable  to  build  multivariate polynomials.\n\njulia> @Mvp x,y\n\njulia> (x+y)^3\nMvp{Int64}: x³+3x²y+3xy²+y³\n\nMvp(x::Number)   returns  the  constant   multivariate  polynomial  whose constant term is x.\n\njulia> degree(Mvp(1))\n0\n\nOne can divide an Mvp by another when the division is exact (this is equivalent to ExactDiv, see below).\n\njulia> (x^2-y^2)//(x-y)\nMvp{Int64}: x+y\n\nOnly monomials can be raised to a non-integral power; they can be raised to a  fractional power of denominator b only if root(x,b) is defined where x   is  their  leading  coefficient.  For  an  Mvp  m,  the  function root(m,n)  is equivalent  to m^(1//n).  Raising a  non-monomial Laurent polynomial to a negative power returns a rational fraction.\n\njulia> (4x)^(1//2)\nMvp{Int64,Rational{Int64}}: 2x½\n\njulia> (2.0x)^(1//2)\nMvp{Float64,Rational{Int64}}: 1.4142135623730951x½\n\njulia> root(2.0x)\nMvp{Float64,Rational{Int64}}: 1.4142135623730951x½\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Mvps.variables","page":"Gapjm Documentation","title":"Gapjm.Mvps.variables","text":"variables(p::Mvp...)\n\nreturns the list of variables of all p as a sorted list of Symbols.\n\njulia> @Mvp x,y,z\n\njulia> variables(x+y+1,z)\n3-element Array{Symbol,1}:\n :x\n :y\n :z\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Mvps.coefficients-Tuple{Mvp,Symbol}","page":"Gapjm Documentation","title":"Gapjm.Mvps.coefficients","text":"coefficients(p::Mvp, var::Symbol) \n\nreturns as a Dict the list of coefficients of p with respect to var.\n\njulia> p=(x+y+inv(y))^4\nMvp{Int64}: x⁴+4x³y+4x³y⁻¹+6x²y²+12x²+6x²y⁻²+4xy³+12xy+12xy⁻¹+4xy⁻³+y⁴+4y²+6+4y⁻²+y⁻⁴\n\njulia> coefficients(p,:x)\nDict{Int64,Mvp{Int64,Int64}} with 5 entries:\n  0 => y⁴+4y²+6+4y⁻²+y⁻⁴\n  4 => 1\n  2 => 6y²+12+6y⁻²\n  3 => 4y+4y⁻¹\n  1 => 4y³+12y+12y⁻¹+4y⁻³\n\njulia> coefficients(p,:y)\nDict{Int64,Mvp{Int64,Int64}} with 9 entries:\n  0  => x⁴+12x²+6\n  4  => 1\n  -4 => 1\n  -3 => 4x\n  2  => 6x²+4\n  -2 => 6x²+4\n  -1 => 4x³+12x\n  3  => 4x\n  1  => 4x³+12x\n\nThe  same caveat is  applicable to coefficients  as to values: the values are  always Mvps.  To get  a list  of scalars  for univariate polynomials represented as Mvps, one should use scal.\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Mvps.valuation","page":"Gapjm Documentation","title":"Gapjm.Mvps.valuation","text":"The valuation of an Mvp is the minimal degree of a monomial.\n\njulia> a=x^2+x*y\nMvp{Int64}: x²+xy\n\njulia> valuation(a)\n2\n\nWith  second argument a variable name, valuation returns the valuation of the polynomial in that variable.\n\njulia> valuation(a,:y)\n0\n\njulia> valuation(a,:x)\n1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Mvps.value","page":"Gapjm Documentation","title":"Gapjm.Mvps.value","text":"value(p::Mvp,:x1=>v1,:x2=>v2,...)\n\ngives  the value  of p  when doing  the simultaneous  substitution of the variable  :x1  by  v1,  of  x2  by  v2,  … This can also be written p(;x1=v1,x2=v2,...).\n\njulia> p=-2+7x^5*inv(y)\nMvp{Int64}: 7x⁵y⁻¹-2\n\njulia> p(x=2)\nMvp{Int64}: -2+224y⁻¹\n\njulia> p(y=1)\nMvp{Int64}: 7x⁵-2\n\njulia> p(x=2,y=1)\nMvp{Int64}: 222\n\nOne should pay attention to the fact that the last value is not an integer, but  a constant Mvp (for consistency). See the function scal for how to convert such constants to their base ring.\n\njulia> p(x=y)\nMvp{Int64}: 7y⁴-2\n\njulia> p(x=y,y=x)\nMvp{Int64}: -2+7x⁻¹y⁵\n\nEvaluating an Mvp which is a Puiseux polynomial may cause calls to root\n\njulia> p=x^(1//2)*y^(1//3)\nMvp{Int64,Rational{Int64}}: x½y⅓\n\njulia> p(;x=y)\nMvp{Int64,Rational{Int64}}: y^{5//6}\n\njulia> p(;x=4)\nMvp{Int64,Rational{Int64}}: 2y⅓\n\njulia> p(;y=2.0)\nMvp{Float64,Rational{Int64}}: 1.2599210498948732x½\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Mvps.degree","page":"Gapjm Documentation","title":"Gapjm.Mvps.degree","text":"The degree of a monomial is the sum of  the exponents of the variables. The degree of an Mvp is the largest degree of a monomial.\n\njulia> a=x^2+x*y\nMvp{Int64}: x²+xy\n\njulia> degree(a)\n2\n\nWith  second argument a  variable name, degree  returns the degree of the polynomial in that variable.\n\njulia> degree(a,:y)\n1\n\njulia> degree(a,:x)\n2\n\n\n\n\n\n","category":"function"},{"location":"#Base.conj","page":"Gapjm Documentation","title":"Base.conj","text":"conj(p::Mvp) acts on the coefficients of p\n\njulia> @Mvp x;conj(im*x+1)\nMvp{Complex{Int64}}: (0 - 1im)x+1 + 0im\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.factor-Tuple{Mvp}","page":"Gapjm Documentation","title":"Gapjm.Util.factor","text":"factor(p::Mvp)\n\np  should be of degree <=2 thus represents a quadratic form. The function returns  a list  of two  linear forms  of which  p is the product if such exist, otherwise it returns [p].\n\njulia> factor(x^2-y^2+x+3y-2)\n2-element Array{Mvp{Int64,Int64},1}:\n x+y-1\n x-y+2\n\njulia> factor(x^2+x+1)\n2-element Array{Mvp{Cyc{Int64},Int64},1}:\n x-ζ₃\n x-ζ₃²\n\njulia> factor(x*y-1)\n1-element Array{Mvp{Int64,Int64},1}:\n xy-1\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Mvps.derivative","page":"Gapjm Documentation","title":"Gapjm.Mvps.derivative","text":"The  function 'Derivative(p,v)' returns the  derivative of 'p' with respect to  the variable given by the string 'v'; if 'v' is not given, with respect to the first variable in alphabetical order.\n\njulia> @Mvp x,y;p=7x^5*y^-1-2\nMvp{Int64}: 7x⁵y⁻¹-2\n\njulia> derivative(p,:x)\nMvp{Int64}: 35x⁴y⁻¹\n\njulia> derivative(p,:y)\nMvp{Int64}: -7x⁵y⁻²\n\njulia> derivative(p)\nMvp{Int64}: 35x⁴y⁻¹\n\njulia> p=x^(1//2)*y^(1//3)\nMvp{Int64,Rational{Int64}}: x½y⅓\n\njulia> derivative(p,:x)\nMvp{Rational{Int64},Rational{Int64}}: (1//2)x⁻½y⅓\n\njulia> derivative(p,:y)\nMvp{Rational{Int64},Rational{Int64}}: (1//3)x½y^{-2//3}\n\njulia> derivative(p,:z)\nMvp{Rational{Int64},Rational{Int64}}: 0\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Mvps.laurent_denominator","page":"Gapjm Documentation","title":"Gapjm.Mvps.laurent_denominator","text":"laurent_denominator(p1,p2,…)\n\nreturns  the unique monomial  m of minimal  degree such that  for all the Laurent  polynomial  arguments  p1,p2,…  the  product  m*pᵢ  is  a true polynomial.\n\njulia> laurent_denominator(x^-1,y^-2+x^4)\nMonomial{Int64}:xy²\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Mvps.scal","page":"Gapjm Documentation","title":"Gapjm.Mvps.scal","text":"scal(p::Mvp)\n\nIf  p  is a  scalar,  return that  scalar, otherwise return  nothing. \n\njulia> p=Mvp(:x)+1\nMvp{Int64}: x+1\n\njulia> w=p(x=4)\nMvp{Int64}: 5\n\njulia> scal(w)\n5\n\njulia> typeof(scal(w))\nInt64\n\nif p  is a  list, then  apply scal recursively to  it (but return nothing  if it contains any  Mvp which is not a scalar). Else assume p is already a scalar and thus return p.\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomic-polynomials-1","page":"Gapjm Documentation","title":"Cyclotomic polynomials","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"CycPols\nCycPol","category":"page"},{"location":"#Gapjm.CycPols","page":"Gapjm Documentation","title":"Gapjm.CycPols","text":"Cyclotomic  numbers, and cyclotomic polynomials  over the rationals or some cyclotomic field, are important in reductive groups or Spetses. This module deals  with them: the type CycPol  represents the product of a polynomial with  a rational fraction in one variable with all poles or zeroes equal to 0  or  roots  of  unity.  The  advantages  of representing as CycPol such objects    are:   nice   display   (factorized),   less   storage,   faster multiplication,  division and evaluation. The drawback is that addition and subtraction are not implemented!\n\njulia> Pol(:q)\nPol{Int64}: q\n\njulia> p=CycPol(q^25-q^24-2q^23-q^2+q+2)\n(q-2)Φ₁Φ₂Φ₂₃\n\njulia> p(q) # a CycPol is a callable object, this call evaluates p at q\nPol{Cyc{Int64}}: q²⁵-q²⁴-2q²³-q²+q+2\n\njulia> p*inv(CycPol(q^2+q+1))\n(q-2)Φ₁Φ₂Φ₃⁻¹Φ₂₃\n\n\nThe variable name in a CycPol is set by default to the same as for Pols.\n\nCycPols are internally a struct with fields:\n\n.coeff:  a coefficient, usually a cyclotomic number or a polynomial.\n\n.valuation: an Int.\n\n.v: a list of pairs r=>m of a root of unity r and a multiplicity m. Here r is a Root1, internally a fraction n//e with n<e representing E(r)=E(e,n).\n\nSo CycPol(c,val,v) represents c*q^val*prod((q-E(r))^m for (r,m) in v).\n\nWhen   showing,  some  factors  of   the  cyclotomic  polynomial  Φₙ  are represented.  If n has a primitive root  ξ, ϕ′ₙ is the product of the (q-ζ) where ζ runs over the odd powers of ξ, and ϕ″ₙ is the product for the even powers. The function show_factors gives the complete list of recognized factors:\n\njulia> CycPols.show_factors(24)\nΦ₂₄=q⁸-q⁴+1\nΦ′₂₄=q⁴+ζ₃²\nΦ″₂₄=q⁴+ζ₃\nΦ‴₂₄=q⁴-√2q³+q²-√2q+1\nΦ⁗₂₄=q⁴+√2q³+q²+√2q+1\nΦ⁽⁵⁾₂₄=q⁴-√6q³+3q²-√6q+1\nΦ⁽⁶⁾₂₄=q⁴+√6q³+3q²+√6q+1\nΦ⁽⁷⁾₂₄=q⁴+(√-2)q³-q²+(-√-2)q+1\nΦ⁽⁸⁾₂₄=q⁴+(-√-2)q³-q²+(√-2)q+1\nΦ⁽⁹⁾₂₄=q⁴-ζ₄q²-1\nΦ⁽¹⁰⁾₂₄=q⁴+ζ₄q²-1\nΦ⁽¹¹⁾₂₄=q²+(ζ₂₄+ζ₂₄¹⁹)q-ζ₃\nΦ⁽¹²⁾₂₄=q²+(-ζ₂₄-ζ₂₄¹⁹)q-ζ₃\nΦ⁽¹³⁾₂₄=q²+(ζ₂₄¹¹+ζ₂₄¹⁷)q-ζ₃²\nΦ⁽¹⁴⁾₂₄=q²+(-ζ₂₄¹¹-ζ₂₄¹⁷)q-ζ₃²\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.CycPols.CycPol","page":"Gapjm Documentation","title":"Gapjm.CycPols.CycPol","text":"CycPol(v::AbstractVector)\n\nThis  form is a fast  and efficient way of  specifying a CycPol with only positive multiplicities: v should be a vector. The first element is taken as  a  the  .coeff  of  the  CycPol,  the  second  as the .valuation. Subsequent  elements are rationals i//d  representing (q-E(d)^i) or are integers d representing Φ_d(q).\n\njulia> CycPol([3,-5,6,3//7])\n3q⁻⁵Φ₆(q-ζ₇³)\n\n\n\n\n\nCycPol(p::Pol)\n\nConverts a polynomial to CycPol\n\njulia> CycPol(3*q^3-3)\n3Φ₁Φ₃\n\nSpecial code makes the conversion fast if p has not more than two nonzero coefficients.\n\n\n\n\n\n","category":"type"},{"location":"#Utilities-1","page":"Gapjm Documentation","title":"Utilities","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Util\ngroupby\ntally\ncollectby\nconstant\nformat\nprime_residues\nphi\nprimitiveroot\ncut","category":"page"},{"location":"#Gapjm.Util","page":"Gapjm Documentation","title":"Gapjm.Util","text":"This  module contains  various utility  functions used  in the  rest of the code.  Maybe some  of them  exist in  some Julia  module I am not aware of; please tell me.\n\nThe code is divided in sections  according to semantics.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Combinat.groupby","page":"Gapjm Documentation","title":"Gapjm.Combinat.groupby","text":"groupby(v::AbstractVector,l)\n\ngroup items of list l according to the corresponding values in list v\n\njulia> groupby([31,28,31,30,31,30,31,31,30,31,30,31],\n  [:Jan,:Feb,:Mar,:Apr,:May,:Jun,:Jul,:Aug,:Sep,:Oct,:Nov,:Dec])\nDict{Int64,Array{Symbol,1}} with 3 entries:\n  31 => Symbol[:Jan, :Mar, :May, :Jul, :Aug, :Oct, :Dec]\n  28 => Symbol[:Feb]\n  30 => Symbol[:Apr, :Jun, :Sep, :Nov]\n\n\n\n\n\ngroupby(f::Function,l)\n\ngroup items of list l according to the values taken by function f on them\n\njulia> groupby(iseven,1:10)\nDict{Bool,Array{Int64,1}} with 2 entries:\n  false => [1, 3, 5, 7, 9]\n  true  => [2, 4, 6, 8, 10]\n\nNote:in this version l is required to be non-empty since I do not know how to access the return type of a function\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Combinat.tally","page":"Gapjm Documentation","title":"Gapjm.Combinat.tally","text":"tally(v) \n\ncount how many times each element of collection v occurs and return a list  of (elt,count)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Combinat.collectby","page":"Gapjm Documentation","title":"Gapjm.Combinat.collectby","text":"collectby(f,v)\n\ngroup the elements of v in packets where f takes the same value\"\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Combinat.constant","page":"Gapjm Documentation","title":"Gapjm.Combinat.constant","text":"whether all elements in list a are equal\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.format","page":"Gapjm Documentation","title":"Gapjm.Util.format","text":"format(io, table; options )\n\nGeneral routine to format a table. Used for character tables.   Options:      rowlabels          Labels for rows      collabels          Labels for columns      rowslabel          Label for column of rowLabels      separators          line numbers after which to put a separator      columnrepartition  display in pieces of sizes these numbers of cols      rows                show only these rows      cols                show only these columns\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.prime_residues","page":"Gapjm Documentation","title":"Gapjm.Util.prime_residues","text":"the numbers less than n and prime to n \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.phi","page":"Gapjm Documentation","title":"Gapjm.Util.phi","text":"the Euler function ϕ \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.primitiveroot","page":"Gapjm Documentation","title":"Gapjm.Util.primitiveroot","text":"primitiveroot(m::Integer) a primitive root mod. m,   that is it generates multiplicatively prime_residues(m).   It exists if m is of the form 4, 2p^a or p^a for p prime>2.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Util.cut","page":"Gapjm Documentation","title":"Gapjm.Util.cut","text":"cut(string;options)\n\noptions:\n\nwidth=displaysize(stdout)[2]-2 cutting width\nafter=\",\"                      cutting after these chars\nbefore=\"\"                      cutting before these chars\nfile=stdout                    where to print result\n\n\n\n\n\n","category":"function"},{"location":"#Combinatorics-1","page":"Gapjm Documentation","title":"Combinatorics","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"arrangements\ncombinations\ncompositions\nconjugate_partition\ndominates\npartitions\nsubmultisets","category":"page"},{"location":"#Gapjm.Combinat.arrangements","page":"Gapjm Documentation","title":"Gapjm.Combinat.arrangements","text":"arrangements(mset[,k])\n\narrangements  returns  the  arrangements  of  the  multiset mset (a not necessarily  sorted list with  possible repetitions). If  a second argument k is given, it returns arrangements with k elements.\n\nAn  arrangement of  mset is  a selection  without repetitions  and thus lists a subset mset, but in arbitrary order.\n\nAs  an example of arrangements  of a multiset, think  of the game Scrabble. Suppose  you have the six  characters of the word  'settle' and you have to make a four letter word. Then the possibilities are given by\n\njulia> length(arrangements(collect(\"settle\"),4))\n102\n\njulia> length(arrangements(collect(\"settle\")))\n523\n\nThe  result  returned  by  'arrangements'  is  sorted,  which means in this example  that the possibilities are listed in the same order as they appear in the dictionary.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Combinat.combinations","page":"Gapjm Documentation","title":"Gapjm.Combinat.combinations","text":"combinations(mset[,k])\n\n'combinations'  returns  all  combinations  of  the  multiset mset (a not necessarily  sorted list with  possible repetitions). If  a second argument k is given, it returns the combinations with k elements.\n\nA  combination  is  an  unordered  selection  without  repetitions and is represented  by a sorted sublist of mset.  If mset is a proper set, the set of all combinations is just the powerset of mset.\n\njulia> combinations([1,2,2,3])\n12-element Array{Array{Int64,1},1}:\n []\n [1]\n [2]\n [3]\n [1, 2]\n [1, 3]\n [2, 2]\n [2, 3]\n [1, 2, 2]\n [1, 2, 3]\n [2, 2, 3]\n [1, 2, 2, 3]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Combinat.compositions","page":"Gapjm Documentation","title":"Gapjm.Combinat.compositions","text":"compositions(n[,k])\n\nThis  function returns the compositions of  n (the compositions of length k  if a second argument k is given), where a composition of the integer n is a decomposition n=p₁+…+pₖ in positive integers, represented as the list [p₁,…,pₖ].\n\njulia> compositions(4)\n8-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1]\n [2, 1, 1]\n [1, 2, 1]\n [3, 1]\n [1, 1, 2]\n [2, 2]\n [1, 3]\n [4]\n\njulia> compositions(4,2)\n3-element Array{Array{Int64,1},1}:\n [3, 1]\n [2, 2]\n [1, 3]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Combinat.conjugate_partition","page":"Gapjm Documentation","title":"Gapjm.Combinat.conjugate_partition","text":"conjugate_partition(λ)\n\nreturns  the  conjugate  partition  of  the  partition  λ,  that  is, the partition having the transposed of the Young diagram of λ.\n\njulia> conjugate_partition([4,2,1])\n4-element Array{Int64,1}:\n 3\n 2\n 1\n 1\n\njulia> conjugate_partition([6])\n6-element Array{Int64,1}:\n 1\n 1\n 1\n 1\n 1\n 1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.dominates","page":"Gapjm Documentation","title":"Gapjm.Symbols.dominates","text":"dominates(μ,ν)\n\nThe dominance order is an important partial order in representation theory. μ dominates ν if and only if for all i we have sumⱼ₌₁ⁱ μ≥sumⱼ₌₁ⁱ ν.\n\njulia> dominates([5,4],[4,4,1])\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Combinat.partitions","page":"Gapjm Documentation","title":"Gapjm.Combinat.partitions","text":"partitions(n)\n\npartitions returns the set of all partitions of the positive integer n.\n\nA  partition  is  a  decomposition  n=p₁+p₂+…+pₖ  in integers such that p₁≥p₂≥…≥pₖ>0,  and is represented by  the list p=[p₁,p₂,…,pₖ]. We write p⊢n. There are approximately exp(π√(2n/3))/(4√3 n) such partitions.\n\njulia> partitions(7)\n15-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1, 1, 1, 1]\n [2, 1, 1, 1, 1, 1]\n [2, 2, 1, 1, 1]\n [2, 2, 2, 1]\n [3, 1, 1, 1, 1]\n [3, 2, 1, 1]\n [3, 2, 2]\n [3, 3, 1]\n [4, 1, 1, 1]\n [4, 2, 1]\n [4, 3]\n [5, 1, 1]\n [5, 2]\n [6, 1]\n [7]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Combinat.submultisets","page":"Gapjm Documentation","title":"Gapjm.Combinat.submultisets","text":"submultisets(set,k)\n\nsubmultisets  returns the set of all  multisets of length k of elements of the set set.\n\nAn  multiset of length k is a  selection with repetitions of length k from set and is represented by a vector of length k containing elements from set. There are binomial(|set|+k-1,k) such sub-multisets.\n\njulia> Combinat.submultisets(1:4,3)\n20-element Array{Array{Int64,1},1}:\n [1, 1, 1]\n [1, 1, 2]\n [1, 1, 3]\n [1, 1, 4]\n [1, 2, 2]\n [1, 2, 3]\n [1, 2, 4]\n [1, 3, 3]\n [1, 3, 4]\n [1, 4, 4]\n [2, 2, 2]\n [2, 2, 3]\n [2, 2, 4]\n [2, 3, 3]\n [2, 3, 4]\n [2, 4, 4]\n [3, 3, 3]\n [3, 3, 4]\n [3, 4, 4]\n [4, 4, 4]\n\n\n\n\n\n","category":"function"},{"location":"#Module-Elements-1","page":"Gapjm Documentation","title":"Module Elements","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"ModuleElts","category":"page"},{"location":"#Gapjm.ModuleElts","page":"Gapjm Documentation","title":"Gapjm.ModuleElts","text":"A  ModuleElt{K,V}  represents  an  element  of  a free module where basis elements  are of type K and coefficients of type V. It is essentially a list  of pairs b=>c where b is a basis element and c its coefficient. This  basic data  structure is  common in  mathematics and  is used  in the package Gapjm as an efficient representation for cyclotomics, elements of Hecke algebras, multivariate polynomials and their monomials, CycPols, etc…\n\nThe  constructor takes as argument a list of pairs, or a variable number of pair  arguments, or a  generator of pairs.  We provide two implementations, one  by dicts  (easy since  the interface  of the  type is close to that of dicts) and a faster one (the default) by sorting pairs by key.\n\nHere  is an  example where  basis elements  are represented  by Symbols and coefficients  are  Reals.  The  main  operation  which  has work to do is addition,  which  has  to  add  coefficients  of  shared basis elements and suppress zero coefficients.\n\njulia> a=ModuleElt(:xy=>1,:yx=>-1)\n:xy-:yx\n\njulia> a-a\n0\n\njulia> a*99\n99:xy-99:yx\n\njulia> a+ModuleElt(:yx=>1)\n:xy\n\njulia> a[:xy]\n1\n\njulia> haskey(a,:xx)\nfalse\n\njulia> first(a)\n:xy => 1\n\njulia> collect(a)\n2-element Array{Pair{Symbol,Int64},1}:\n :xy => 1\n :yx => -1\n\njulia> keys(a)\n2-element Array{Symbol,1}:\n :xy\n :yx\n\njulia> values(a)\n2-element Array{Int64,1}:\n  1\n -1\n\njulia> length(a)\n2\n\njulia> eltype(a)\nPair{Symbol,Int64}\n\nboth  implementations provide  an option  check in  the constructor which normalizes  an element,  removing zero  coefficients and  merging duplicate basis elements (and sorting the basis in the default implementation).\n\njulia> a=ModuleElt(:yy=>1, :yx=>2, :xy=>3, :yy=>-1)\n:yy+2:yx+3:xy-:yy\n\njulia> a=ModuleElt([:yy=>1, :yx=>2, :xy=>3, :yy=>-1];check=true)\n3:xy+2:yx\n\njulia> a\n3:xy+2:yx\n\nsetting  the  IOContext  property  showbasis  determines  how the basis elements are printed.\n\njulia> show(IOContext(stdout,:showbasis=>(io,s)->string(\"<\",s,\">\")),a)\n3<xy>+2<yx>\n\nWhen  adding or subtracting ModuleElts there  is promotion on the type of the keys and the coefficients if needed:\n\njulia> a+ModuleElt([:z=>1.0])\n3.0:xy+2.0:yx+1.0:z\n\n\n\n\n\n","category":"module"},{"location":"#Posets-1","page":"Gapjm Documentation","title":"Posets","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Posets\nPoset\nlcm_partitions\ngcd_partitions\ntransitive_closure\nlinear_extension\nhasse\nincidence\nreverse\npartition\nPosets.restricted(::Poset,::AbstractVector{<:Integer})\nis_join_lattice\nis_meet_lattice\nPoset(::CoxeterGroup,w=longest(W))","category":"page"},{"location":"#Gapjm.Posets","page":"Gapjm Documentation","title":"Gapjm.Posets","text":"Posets  are represented as  Dicts where at  least one of  the two following fields is present:\n\n:incidence:  a  boolean  matrix  such that :incidence[i][j]==true iff   i<=j in the poset.\n\n:hasse:  a list representing  the Hasse diagram  of the poset: the i-th   entry  is the list of indices  of elements which are immediate successors   (covers)  of the i-th element, that is the  list of j such that i<j and   such that there is no k such that i<k<j.\n\nIf  only one field is present, the other  is computed on demand. Here is an example of use;\n\njulia> p=Poset(coxgroup(:A,2))\n<1,2<21,12<121\n\njulia> hasse(p)\n6-element Array{Array{Int64,1},1}:\n [2, 3]\n [4, 5]\n [4, 5]\n [6]   \n [6]   \n []    \n\njulia> incidence(p)\n6×6 Array{Bool,2}:\n 1  1  1  1  1  1\n 0  1  0  1  1  1\n 0  0  1  1  1  1\n 0  0  0  1  0  1\n 0  0  0  0  1  1\n 0  0  0  0  0  1\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Posets.Poset","page":"Gapjm Documentation","title":"Gapjm.Posets.Poset","text":"Poset(W::CoxeterGroup,w=longest(W))\n\nreturns  as a poset the Bruhat interval [1,w]of W. If w is not given, the whole Bruhat Poset of W is returned (W must then be finite).\n\njulia> W=coxgroup(:A,2)\nA₂\n\njulia> Poset(W)\n<1,2<21,12<121\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> Poset(W,W(1,3))\n<3,1<13\n\n\n\n\n\nPoset(m::Matrix{Bool})\n\nCreates a poset from an incidence matrix m, that is m[i,j]==true if and only if i≤j in the poset,\n\njulia> Poset(Bool[1 1 1 1 1;0 1 0 1 1;0 0 1 1 1;0 0 0 1 0;0 0 0 0 1])\n1<2,3<4,5\n\n\n\n\n\nPoset(h::Vector{<:Vector{<:Integer}})\n\nCreates a poset from a Hasse diagram given as a Vector whose i-th entry is  the list of indices of elements which are immediate successors (covers) of the i-th element, that is h[i] is the list of j such that i<j in the poset and such that there is no k such that i<k<j.\n\njulia> Poset([[2,3],[4,5],[4,5],Int[],Int[]])\n1<2,3<4,5\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Posets.lcm_partitions","page":"Gapjm Documentation","title":"Gapjm.Posets.lcm_partitions","text":"lcm_partitions(p1,...,pn)\n\neach  argument is  a partition  of the  same set  S, given  as a  list of disjoint  vectors whose  union is  S. Equivalently  each argument  can be interpreted as an equivalence relation on S.\n\nThe result is the finest partition of S such that each argument partition refines it. It represents the 'or' of the equivalence relations represented by the arguments.\n\njulia> lcm_partitions([[1,2],[3,4],[5,6]],[[1],[2,5],[3],[4],[6]])\n2-element Array{Array{Int64,1},1}:\n [1, 2, 5, 6]\n [3, 4]      \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Posets.gcd_partitions","page":"Gapjm Documentation","title":"Gapjm.Posets.gcd_partitions","text":"gcd_partitions(p1,...,pn) Each  argument is  a partition  of the  same set  S, given  as a  list of disjoint  vectors whose  union is  S. Equivalently  each argument  can be interpreted as an equivalence relation on S.\n\nThe result is the coarsest partition which refines all argument partitions. It  represents the  'and' of  the equivalence  relations represented by the arguments.\n\njulia> gcd_partitions([[1,2],[3,4],[5,6]],[[1],[2,5],[3],[4],[6]])\n6-element Array{Array{Int64,1},1}:\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Posets.transitive_closure","page":"Gapjm Documentation","title":"Gapjm.Posets.transitive_closure","text":"transitive_closure(M)\n\nM  should be a  square boolean matrix  representing a relation; returns a boolean  matrix representing the  transitive closure of  this relation. The transitive  closure is computed  by the Floyd-Warshall  algorithm, which is quite fast even for large matrices.\n\njulia> m=[j-i in [0,1] for i in 1:5, j in 1:5]\n5×5 Array{Bool,2}:\n 1  1  0  0  0\n 0  1  1  0  0\n 0  0  1  1  0\n 0  0  0  1  1\n 0  0  0  0  1\n\njulia>transitive_closure(m)\n5×5 Array{Bool,2}:\n 1  1  1  1  1\n 0  1  1  1  1\n 0  0  1  1  1\n 0  0  0  1  1\n 0  0  0  0  1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Posets.linear_extension","page":"Gapjm Documentation","title":"Gapjm.Posets.linear_extension","text":"linear_extension(P)\n\nreturns  a  linear  extension  of  the  poset  P,  that  is  a vector l containing  a permutation of the integers  1:length(P) such that if i<j in  P,  then  findfirst(isequal(i),l)<findfirst(isequal(j),l).  This is also called a topological sort of P.\n\njulia> p=Poset([j%i==0 for i in 1:5, j in 1:5])\n1<3,5\n1<2<4\n\njulia> linear_extension(p)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 5\n 4\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Posets.hasse","page":"Gapjm Documentation","title":"Gapjm.Posets.hasse","text":"hasse(P)\n\nreturns the Hasse diagram of the poset P.\n\njulia> p=Poset([j%i==0 for i in 1:5, j in 1:5])\n1<3,5\n1<2<4\n\njulia> hasse(p)\n5-element Array{Array{Int64,1},1}:\n [2, 3, 5]\n [4]      \n []       \n []       \n []       \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Posets.incidence","page":"Gapjm Documentation","title":"Gapjm.Posets.incidence","text":"incidence(P)\n\nreturns the incidence matrix of the poset P.\n\njulia> p=Poset(push!([[i+1] for i in 1:5],Int[]))\n1<2<3<4<5<6\n\njulia> incidence(p)\n6×6 Array{Bool,2}:\n 1  1  1  1  1  1\n 0  1  1  1  1  1\n 0  0  1  1  1  1\n 0  0  0  1  1  1\n 0  0  0  0  1  1\n 0  0  0  0  0  1\n\n\n\n\n\n","category":"function"},{"location":"#Base.reverse","page":"Gapjm Documentation","title":"Base.reverse","text":"reverse(P)\n\nreturns the opposed poset to P.\n\njulia> p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])\n4,8<1,5<2,6<3,7\n\njulia> reverse(p)\n3,7<2,6<1,5<4,8\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Posets.partition","page":"Gapjm Documentation","title":"Gapjm.Posets.partition","text":"partition(P::Poset)\n\nreturns  the  partition  of  1:length(P)  determined  by  the equivalence relation  associated to P; that  is, i and j  are in the same part of the  partition if the k such that i<k and j<k are the same as well as the k such that k<i and k<j.\n\njulia> p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])\n4,8<1,5<2,6<3,7\n\njulia> partition(p)\n4-element Array{Array{Int64,1},1}:\n [4, 8]\n [2, 6]\n [3, 7]\n [1, 5]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Posets.restricted-Tuple{Poset,AbstractArray{#s3,1} where #s3<:Integer}","page":"Gapjm Documentation","title":"Gapjm.Posets.restricted","text":"restricted(P,indices)\n\nreturns  the  sub-poset  of  P  determined  by indices, which must be a sublistof1:length(P)`.\n\njulia> p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])\n4,8<1,5<2,6<3,7\n\njulia> restricted(p,2:6)\n3<4<1,5<2\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Posets.is_join_lattice","page":"Gapjm Documentation","title":"Gapjm.Posets.is_join_lattice","text":"is_join_lattice(P::Poset)\n\nreturns  true if P is  a join semilattice, that  is any two elements of P have a unique smallest upper bound; returns false otherwise.\n\njulia> p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])\n4,8<1,5<2,6<3,7\n\njulia> is_join_lattice(p)\nfalse\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Posets.is_meet_lattice","page":"Gapjm Documentation","title":"Gapjm.Posets.is_meet_lattice","text":"is_meet_lattice(P)\n\nreturns  true if P is  a meet semilattice, that  is any two elements of P have a unique highest lower bound; returns false otherwise.\n\njulia> p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])\n4,8<1,5<2,6<3,7\n\njulia> is_meet_lattice(p)\nfalse\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Posets.Poset","page":"Gapjm Documentation","title":"Gapjm.Posets.Poset","text":"Poset(W::CoxeterGroup,w=longest(W))\n\nreturns  as a poset the Bruhat interval [1,w]of W. If w is not given, the whole Bruhat Poset of W is returned (W must then be finite).\n\njulia> W=coxgroup(:A,2)\nA₂\n\njulia> Poset(W)\n<1,2<21,12<121\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> Poset(W,W(1,3))\n<3,1<13\n\n\n\n\n\n","category":"type"},{"location":"#Signed-permutations-1","page":"Gapjm Documentation","title":"Signed permutations","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"SPerms\nSPerm\nPerm(::SPerm)\norbit(::SPerm,::Integer)\norder(::SPerm)\nMatrix\nCoxHyperoctaedral\nreflection_subgroup(::CoxHyperoctaedral,::AbstractVector{Int})\nstab_onsmat\nperm_onsmat","category":"page"},{"location":"#Gapjm.SPerms","page":"Gapjm Documentation","title":"Gapjm.SPerms","text":"A  signed permutation of 1:n is  a permutation of the set -n,…,-1,1,…,n which  preserves the  pairs (-i,i).  It is  represented internally as the images of 1:n. It is printed as a product of signed cycles.\n\nExamples\n\njulia> SPerm([-2,-1,-3])\nSPerm{Int64}: (1,-2)(3,-3)\n\njulia> p=SPerm(-1)\n(1,-1)\n\njulia> q=SPerm(1,2)\n(1,2)\n\njulia> elements(Group([p,q]))\n8-element Array{SPerm{Int16},1}:\n ()          \n (1,-1)(2,-2)\n (1,-2,-1,2) \n (1,-2)      \n (1,2)       \n (1,2,-1,-2) \n (2,-2)      \n (1,-1)      \n\nThe  complete type of signed permutations is SPerm{T} where T<:Integer, where Vector{T} is the type of the vector which holds the image of 1:n. This  can used to save space or time when possible. If T is not specified we  take it to be Int16 since this is a good compromise between speed and compactness.\n\nSPerms have methods copy, hash, ==, cmp, isless (total order) so they can be  keys in hashes or elements of sets; two SPerms are equal if they move the same points to the same images. For instance,\n\njulia> SPerm([-2,-1,-3])==SPerm([-2,-1,-3,4])\ntrue\n\nSPerms are considered as scalars for broadcasting.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.SPerms.SPerm","page":"Gapjm Documentation","title":"Gapjm.SPerms.SPerm","text":"struct SPerm\n\nAn  SPerm represents a signed permutation of 1:n, that is a permutation of  the  set  -n,…,-1,1,…,n  which  preserves  the  pairs (-i,i). It is implemented  by a struct SPerm  with one field d,  a vector holding the images of 1:n.\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Perms.Perm-Tuple{SPerm}","page":"Gapjm Documentation","title":"Gapjm.Perms.Perm","text":"Perm(p::SPerm) returns the underlying Perm of an SPerm\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.orbit-Tuple{SPerm,Integer}","page":"Gapjm Documentation","title":"Gapjm.Groups.orbit","text":"orbit(a::SPerm,i::Integer) returns the orbit of a on i\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.order-Tuple{SPerm}","page":"Gapjm Documentation","title":"Gapjm.Groups.order","text":"order(a) \n\norder of the signed permutation a\n\n\n\n\n\n","category":"method"},{"location":"#Base.Matrix","page":"Gapjm Documentation","title":"Base.Matrix","text":"Matrix(a::Perm,n=degree(a))  the  permutation  matrix  for  a  operating  on n points. If given, n should be larger than largest_moved_point(a).\n\njulia> Matrix(Perm(2,3,4),5)\n5×5 Array{Bool,2}:\n 1  0  0  0  0\n 0  0  1  0  0\n 0  0  0  1  0\n 0  1  0  0  0\n 0  0  0  0  1\n\n\n\n\n\nMatrix(a::SPerm) is the permutation matrix for a\n\nExamples\n\njulia> Matrix(SPerm([-2,-1,-3]))\n3×3 Array{Int64,2}:\n  0  -1   0\n -1   0   0\n  0   0  -1\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.SPerms.CoxHyperoctaedral","page":"Gapjm Documentation","title":"Gapjm.SPerms.CoxHyperoctaedral","text":"CoxHyperoctaedral(n)  The Hyperoctaedral  group on  ±1,…,±n as  a Coxeter group  of type  B, with  generators (1,-1)  and (i,i+1)(-i,-i-1); it is the group of all signed permutations of 1:n.\n\njulia> elements(CoxHyperoctaedral(2))\n8-element Array{SPerm{Int8},1}:\n ()          \n (1,2)       \n (1,-1)      \n (1,2,-1,-2) \n (1,-2,-1,2) \n (2,-2)      \n (1,-2)      \n (1,-1)(2,-2)\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.PermRoot.reflection_subgroup-Tuple{CoxHyperoctaedral,AbstractArray{Int64,1}}","page":"Gapjm Documentation","title":"Gapjm.PermRoot.reflection_subgroup","text":"Only parabolics defined are I=1:m for m≤n\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.SPerms.stab_onsmat","page":"Gapjm Documentation","title":"Gapjm.SPerms.stab_onsmat","text":"stab_onsmat([G,]M[,l])\n\nIf OnMats(m,p)=^(M,p;dims=(1,2)) (simultaneous signed conjugation of rows and  columns, or conjugating by the  matrix of the signed permutation p), and  the argument G  is given (which  should be an  SPermGroup) this is just  a fast implementation of  centralizer(G,M;action=OnMats). If G is omitted  it is taken to be CoxHyperoctaedral(size(M,1)). The program uses sophisticated  algorithms, and can  handle matrices up  to 80×80. If l is given the return group should also centralize l (for the action ^)\n\njulia> uc=UnipotentCharacters(ComplexReflectionGroup(6));\n\njulia> g=stab_onsmat(fourier(uc.families[2]))\nGroup([sperm\"(1,18)(3,-6)(8,-21)(10,-16)(11,22)(13,15)\",sperm\"(1,-15)(2,-19)(3,-11)(6,22)(7,-12)(13,-18)\",sperm\"(2,19)(4,-14)(5,20)(7,12)\",sperm\"(1,-11)(2,-19)(3,-15)(5,-20)(6,13)(8,10)(16,21)(17,-17)(18,-22)\",sperm\"(1,-22)(2,-19)(3,-13)(5,-20)(6,15)(8,-16)(10,-21)(11,-18)(17,-17)\",sperm\"(1,-3)(2,-19)(4,14)(6,18)(8,-10)(9,-9)(11,-15)(13,-22)(16,-21)\",sperm\"(1,6)(2,-19)(3,-18)(4,14)(8,16)(9,-9)(10,21)(11,-13)(15,-22)\",sperm\"(1,13)(3,22)(4,14)(5,-20)(6,-11)(8,21)(9,-9)(10,16)(15,18)(17,-17)\"])\njulia> length(g)\n32\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.SPerms.perm_onsmat","page":"Gapjm Documentation","title":"Gapjm.SPerms.perm_onsmat","text":"perm_onsmat(M,N[,l1,l2])\n\nM  and  N  should  be  symmetric matrices. perm_onsmat returns a signed  permutation p such that OnMats(M,p)=N if such a permutation exists, and nothing otherwise. If list arguments l1 and l2 are given, the permutation p should also satisfy l1^p==l2.\n\nThis  routine is  useful to  identify two  objects which are isomorphic but with  different  labelings.  It  is  used  in   CHEVIE  to identify Lusztig Fourier  transform matrices  with standard  (classified) data.  The program uses  sophisticated  algorithms,  and  can  often  handle  matrices  up  to 80times   80.\n\njulia> f=SubFamilyij(CHEVIE[:families][:X](12),1,3,(3+ER(-3))/2);\n\njulia> M=fourier(conj(f));\n\njulia> uc=UnipotentCharacters(ComplexReflectionGroup(6));\n\njulia> N=fourier(uc.families[2]);\n\njulia> p=perm_onsmat(M,N)\n(1,3)(2,19,-2,-19)(4,-14,-4,14)(5,-5)(6,-18)(7,-7)(8,10)(11,15,-11,-15)(12,-12)(13,22)(16,21,-16,-21)\n\njulia> ^(M,p;dims=(1,2))==N\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Linear-algebra-on-any-field/ring-1","page":"Gapjm Documentation","title":"Linear algebra on any field/ring","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"GLinearAlgebra\nGLinearAlgebra.echelon!\nGLinearAlgebra.echelon\nbigcell_decomposition\ndiagblocks\nblocks\nratio\nexterior_power\npermanent\nsymmetric_power\nschur_functor\ntransporter\ndiagconj_elt\ntraces_words_mats\nsolutionmat","category":"page"},{"location":"#Gapjm.GLinearAlgebra","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra","text":"GLinearAlgebra: linear algebra over arbitrary fields and rings\n\nThe  linear  algebra  package  in  Julia  is  not  suitable  for  a general mathematics  package: it assumes  the field is  the Real or Complex numbers and uses floating point to do approximate computations. Here we are interested in functions which work over any field (or sometimes any ring).\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.GLinearAlgebra.echelon!","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.echelon!","text":"`echelon!(m)`\n\nputs m in echelon form and returns:   (m, indices of linearly independent rows of m)   The  echelon form transforms the rows of m into a particular basis of the   rowspace.  The first  non-zero element  of each  line is  1, and  such an   element is also the only non-zero in its column.   works in any field.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.echelon","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.echelon","text":"echelon(m)\n\nreturns: (echelon form of m, indices of linearly independent rows of m)   works in any field.   The  echelon form transforms the rows of m into a particular basis of the   rowspace  of m: the first non-zero element  of each line is 1, and such   an element is also the only non-zero in its column.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.bigcell_decomposition","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.bigcell_decomposition","text":"bigcell_decomposition(M [, b])\n\nM  should be a square  matrix, and b specifies  a block structure for a matrix  of  same  size  as  M  (it  is  a  Vector  of  Vectors  whose concatenation  is 1:size(M,1)).  If b  is not  given, the trivial block structure [[i] for i in axes(M,1)] is assumed.\n\nThe  function  decomposes  M  as  a  product  P₁ L P where P is upper block-unitriangular   (with  identity  diagonal   blocks),  P₁  is  lower block-unitriangular  and L is block-diagonal for the block structure b. If  M is symmetric then  P₁ is the transposed  of P and the result is the  pair  [P,L];  else  the  result  is  the triple [P₁,L,P]. The only condition  for  this  decomposition  of  M  to  be  possible  is that the principal  minors  according  to  the  block  structure be invertible. This routine  is used  in the  Lusztig-Shoji algorithm  for computing  the Green functions  and the example  below is extracted  from the computation of the Green functions for G₂.\n\njulia> Pol(:q)\nPol{Int64}: q\n\njulia> M=[q^6 q^0 q^3 q^3 q^5+q q^4+q^2; q^0 q^6 q^3 q^3 q^5+q q^4+q^2; q^3 q^3 q^6 q^0 q^4+q^2 q^5+q; q^3 q^3 q^0 q^6 q^4+q^2 q^5+q; q^5+q q^5+q q^4+q^2 q^4+q^2 q^6+q^4+q^2+1 q^5+2*q^3+q; q^4+q^2 q^4+q^2 q^5+q q^5+q q^5+2*q^3+q q^6+q^4+q^2+1]\n6×6 Array{Pol{Int64},2}:\n q⁶     1      q³     q³     q⁵+q        q⁴+q²\n 1      q⁶     q³     q³     q⁵+q        q⁴+q²\n q³     q³     q⁶     1      q⁴+q²       q⁵+q\n q³     q³     1      q⁶     q⁴+q²       q⁵+q\n q⁵+q   q⁵+q   q⁴+q²  q⁴+q²  q⁶+q⁴+q²+1  q⁵+2q³+q\n q⁴+q²  q⁴+q²  q⁵+q   q⁵+q   q⁵+2q³+q    q⁶+q⁴+q²+1\n\njulia> bb=[[2],[4],[6],[3,5],[1]];\n\njulia> (P,L)=bigcell_decomposition(M,bb);\n\njulia> P\n6×6 Array{Pol{Int64},2}:\n 1    0  0    0    0        0\n q⁻⁶  1  q⁻³  q⁻³  q⁻¹+q⁻⁵  q⁻²+q⁻⁴\n 0    0  1    0    0        0\n q⁻³  0  0    1    q⁻²      q⁻¹\n q⁻¹  0  0    0    1        0\n q⁻²  0  q⁻¹  0    q⁻¹      1\n\njulia> L\n6×6 Array{Pol{Int64},2}:\n q⁶-q⁴-1+q⁻²  0   0            0     0            0\n 0            q⁶  0            0     0            0\n 0            0   q⁶-q⁴-1+q⁻²  0     0            0\n 0            0   0            q⁶-1  0            0\n 0            0   0            0     q⁶-q⁴-1+q⁻²  0\n 0            0   0            0     0            q⁶-1\n\njulia> M==permutedims(P)*L*P\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.diagblocks","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.diagblocks","text":"diagblocks(M::Matrix)\n\nM  should  be  a  square  matrix.  Define  a  graph  G  with vertices 1:size(M,1) and with an edge between i  and j if either M[i,j] or M[j,i] is not zero or false. diagblocks returns a vector of vectors I  such that  I[1],I[2], etc..  are the  vertices in each connected component  of G.  In other  words, M[I[1],I[1]],M[I[2],I[2]],etc... are diagonal blocks of M.\n\njulia> m=[0 0 0 1;0 0 1 0;0 1 0 0;1 0 0 0]\n4×4 Array{Int64,2}:\n 0  0  0  1\n 0  0  1  0\n 0  1  0  0\n 1  0  0  0\n\njulia> diagblocks(m)\n2-element Array{Array{Int64,1},1}:\n [1, 4]\n [2, 3]\n\njulia> m[[1,4],[1,4]]\n2×2 Array{Int64,2}:\n 0  1\n 1  0\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.blocks","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.blocks","text":"blocks(M)\n\nFinds  if the  matrix  M admits a block decomposition.\n\nDefine  a bipartite  graph G  with vertices  axes(M,1), axes(M,2) and with an edge between i and j if M[i,j] is not zero. BlocksMat returns a  list of pairs of  lists I such that  I[i], etc.. are the vertices in the i-th connected component of G. In other words, M[I[1][1],I[1][2]], M[I[2][1],I[2][2]],etc... are blocks of M.\n\nThis  function may  also be  applied to  boolean matrices.\n\njulia> m=[1 0 0 0;0 1 0 0;1 0 1 0;0 0 0 1;0 0 1 0]\n5×4 Array{Int64,2}:\n 1  0  0  0\n 0  1  0  0\n 1  0  1  0\n 0  0  0  1\n 0  0  1  0\n\njulia> blocks(m)\n3-element Array{Tuple{Array{Int64,1},Array{Int64,1}},1}:\n ([1, 3, 5], [1, 3])\n ([2], [2])\n ([4], [4])\n\njulia> m[[1,3,5,2,4],[1,3,2,4]]\n5×4 Array{Int64,2}:\n 1  0  0  0\n 1  1  0  0\n 0  1  0  0\n 0  0  1  0\n 0  0  0  1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.ratio","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.ratio","text":"ratio of two vectors\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.exterior_power","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.exterior_power","text":"exterior_power(mat,n)\n\nmat  should be a square matrix.  The function returns the n-th exterior power  of  mat,  in  the  basis naturally indexed bycombinations(1:r,n) wherer=size(mat,1)\n\njulia> M=[1 2 3 4;2 3 4 1;3 4 1 2;4 1 2 3]\n4×4 Array{Int64,2}:\n 1  2  3  4\n 2  3  4  1\n 3  4  1  2\n 4  1  2  3\n\njulia> exterior_power(M,2)\n6×6 Array{Int64,2}:\n  -1   -2   -7   -1  -10  -13\n  -2   -8  -10  -10  -12    2\n  -7  -10  -13    1    2    1\n  -1  -10    1  -13    2    7\n -10  -12    2    2    8   10\n -13    2    1    7   10   -1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.permanent","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.permanent","text":"permanent(m)\n\nreturns the permanent of the square matrix m, which is defined by  sum_p in frak S_nprod_i=1^n mii^p.\n\nNote the similarity of the definition of  the permanent to the definition of the determinant.  In  fact the only  difference is the missing sign of the permutation.  However the  permanent is quite unlike the determinant, for example   it is  not  multilinear or  alternating.  It   has  however important combinatorical properties.\n\njulia> permanent([0 1 1 1;1 0 1 1;1 1 0 1;1 1 1 0])\n9 # inefficient way to compute the number of derangements of 1:4\n\njulia> permanent([1 1 0 1 0 0 0; 0 1 1 0 1 0 0;0 0 1 1 0 1 0; 0 0 0 1 1 0 1;1 0 0 0 1 1 0;0 1 0 0 0 1 1;1 0 1 0 0 0 1])\n24 # 24 permutations fit the projective plane of order 2 \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.symmetric_power","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.symmetric_power","text":"symmetric_power(m,n)\n\nreturns the n-th symmetric power of the square matrix m, in the basis  naturally indexed by the submultisets of 1:n, where n=size(m,1).\n\njulia> m=[1 2;3 4]\n2×2 Array{Int64,2}:\n 1  2\n 3  4\n\njulia> Int.(symmetric_power(m,2))\n3×3 Array{Int64,2}:\n 1   2   4\n 6  10  16\n 9  12  16\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.schur_functor","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.schur_functor","text":"schur_functor(mat,l)\n\nmat  should be  a square  matrix and  l a  partition. The result is the Schur  functor  of  the  matrix  mat  corresponding to partition l; for example,   if  l==[n]  it  returns  the   n-th  symmetric  power  and  if l==[1,1,1] it returns the 3rd exterior power. The current algorithm (from Littlewood)  is rather inefficient so it is  quite slow for partitions of n where n>6.\n\njulia> m=cartan(:A,3)\n3×3 Array{Int64,2}:\n  2  -1   0\n -1   2  -1\n  0  -1   2\n\njulia> schur_functor(m,[2,2])\n6×6 Array{Rational{Int64},2}:\n 10//1   12//1  -16//1   16//1  -16//1   12//1\n  3//2    9//1   -6//1    4//1   -2//1    1//1\n -4//1  -12//1   16//1  -16//1    8//1   -4//1\n  2//1    4//1   -8//1   16//1   -8//1    4//1\n -4//1   -4//1    8//1  -16//1   16//1  -12//1\n  3//2    1//1   -2//1    4//1   -6//1    9//1\n\njulia-repl\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.transporter","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.transporter","text":"transporter(l1, l2 )\n\nl1  and l2 should be vectors of  the same length of square matrices all of the same size. The result is a basis of the vector space of matrices A such  that for any i we have  A*l1[i]=l2[i]*A –- the basis is returned as  a vector of matrices, empty if the vector space is 0. This is useful to find whether two representations are isomorphic.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.diagconj_elt","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.diagconj_elt","text":"representative_diagconj(M,N)\n\nM and N must be square matrices of the same size. This function returns a  list  d  such  that  N==inv(Diagonal(d)*M*Diagonal(d) if such a list exists, and nothing otherwise.\n\njulia> M=[1 2;2 1];N=[1 4;1 1]\n2×2 Array{Int64,2}:\n 1  4\n 1  1\n\njulia> diagconj_elt(M,N)\n2-element Array{Rational{Int64},1}:\n 1//1\n 2//1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.HasType.traces_words_mats","page":"Gapjm Documentation","title":"Gapjm.HasType.traces_words_mats","text":"traces_words_mats(mats,words)\n\ngiven  a list mats  of matrices and  a list words  of words returns the list of traces of the corresponding products of the matrices\n\njulia> W=coxgroup(:F,4)\nF₄\n\njulia> r=classinfo(W)[:classtext];\n\njulia> R=representation(W,17)\n4-element Array{Array{Int64,2},1}:\n [-1 -1 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1] \n [1 0 0 0; -1 -1 -1 0; 0 0 1 0; 0 0 0 1]\n [1 0 0 0; 0 1 0 0; 0 -2 -1 -1; 0 0 0 1]\n [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 -1 -1] \n\njulia> traces_words_mats(R,r)==CharTable(W).irr[17,:]\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.GLinearAlgebra.solutionmat","page":"Gapjm Documentation","title":"Gapjm.GLinearAlgebra.solutionmat","text":"solutionmat(mat,v)\n\nreturns one solution of the equation permutedims(x)*mat=permutedims(v) or nothing if no such solution exists.\n\njulia> solutionmat([2 -4 1;0 0 -4;1 -2 -1],[10, -20, -10])\n3-element Array{Rational{Int64},1}:\n  5//1\n 15//4\n  0//1\njulia> solutionmat([2 -4 1;0 0 -4;1 -2 -1],[10, 20, -10])\n\n\n\n\n\nreturn matrix x such that x*m==n\n\n\n\n\n\n","category":"function"},{"location":"#Coxeter-groups-1","page":"Gapjm Documentation","title":"Coxeter groups","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"CoxGroups\nisleftdescent\nfirstleftdescent\nleftdescents\nreduced\nword(::CoxeterGroup,w)\nlength(::CoxeterGroup,w)\nelements(::CoxeterGroup)\nCoxGroups.words\nbruhatless\nCoxSym\nreflection_subgroup(::CoxSym,::AbstractVector{Int})\nlongest\nnref\nbraid_relations\ncoxmat\nstandard_parabolic_class\ngencox","category":"page"},{"location":"#Gapjm.CoxGroups","page":"Gapjm Documentation","title":"Gapjm.CoxGroups","text":"A  suitable  reference  for  the  general  theory of Coxeter groups is, for example, Bourbaki \"Lie Groups and Lie Algebras\" chapter 4.\n\nA Coxeter group is a group which has the presentation W=S(st)^m(st)=1hbox  for  st  S  for some symmetric integer matrix m(s,t) called the Coxeter matrix, where m(s,t)>1 for s≠t and m(s,s)=1.  It is true (but a non-trivial theorem) that in a Coxeter group the  order of st is exactly m(s,t), thus a Coxeter group is the same as a  Coxeter system, that is a pair (W,S)  of a group W and a set S⊂W of  involutions, such  that the  group is  presented by  generators S and relations  describing the order  of the product  of two elements  of S. A Coxeter group has a natural representation, its reflection representation, on a real vector space V of dimension length(S) (which is  the  Coxeter  rank  of  W),  where  each  element  of  S  acts as a reflection; the faithfulness of this representation in the main argument to prove  that the order of st is  exactly m(s,t). Thus Coxeter groups are real  reflection  groups.  The  converse  need  not  be  true if the set of reflecting  hyperplanes has  bad topological  properties, but  it turns out that  finite Coxeter groups are the  same as finite real reflection groups. The   possible  Coxeter  matrices  for  finite  Coxeter  groups  have  been completely  classified,  see  the  Weyl  module; the corresponding finite groups play a deep role in several areas of mathematics.\n\nCoxeter  groups  have  a  nice  solution  to the word problem. The length l(w)  of an element  w∈ W is  the minimum number  of elements of S of which it is a product (since the elements of S are involutions, we do not need inverses). An expression of w of minimal length is called a reduced word  for w. The main property of  reduced words is the exchange lemma which  states that if s₁…sₖ is a  reduced word for w (thusk=l(w)) and s∈  S is such that l(sw)≤l(w) then one  of the sᵢ in the word for w can be deleted to obtain a reduced word for sw. Thus given s∈ S and w∈ W,  either l(sw)=l(w)+1 or  l(sw)=l(w)-1 and we  say in this last case that  s belongs to  the left descent  set of w.  The computation of a reduced  word for an element, and other  word problems, are easy if we know how  to multiply elements  and the left  descent sets. In  each case of the Coxeter  groups that we implement, the left  descent set is easy to compute (see  e.g.  'CoxSym'  below),  so  this  suggests  how to deal with Coxeter groups generically:\n\nThe  type  CoxeterGroup  is  an  abstract  type;  an  actual struct which implements it must define a function\n\nisleftdescent(W,w,i) which tells whether the       i-th element of S is in the left descending set of w.\n\nthe other functions needed in an instance of a Coxeter group are\n\ngens(W) which returns the set S (the list of Coxeter generators)\nnref(W) which  returns the  number of  reflections of  W, if  W is  finite or nothing if W is infinite\n\nIt  should  be  noted  that  a  Coxeter  group  can  be any kind of group implementing the above functions.\n\nBecause  of the  easy solution  of the  word problem  in Coxeter  groups, a convenient  way  to  represent  their  elements  is as words in the Coxeter generators. They are represented as lists of integers in 1:length(S). The functions  'word' and 'W(...)' will do the conversion between Coxeter words and elements of the group.\n\nExamples\n\njulia> W=CoxSym(4)\n𝔖 ₄\n\njulia> p=W(1,3,2,1,3)\nPerm{UInt8}: (1,4)\n\njulia> word(W,p)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 2\n 1\n\nWe  notice that the word we started with and the one that we ended up with, are not the same, though they represent the same element of W. The reason is  there are  several reduced  words for  an element  of W. The function 'word'  computes a lexicographically smallest word  for w. Below are some other possible computations with the same Coxeter group:\n\njulia> word(W,longest(W))  # the (unique) longest element in W\n6-element Array{Int64,1}:\n 1\n 2\n 1\n 3\n 2\n 1\n\njulia> w0=longest(W)\nPerm{UInt8}: (1,4)(2,3)\njulia> length(W,w0)\n6\njulia> map(i->word(W,reflection(W,i)),1:nref(W))\n6-element Array{Array{Int64,1},1}:\n [1]\n [2]\n [3]\n [1, 2, 1]\n [2, 3, 2]\n [1, 2, 3, 2, 1]\njulia> [length(elements(W,i)) for i in 0:nref(W)]\n7-element Array{Int64,1}:\n 1\n 3\n 5\n 6\n 5\n 3\n 1\n\nThe above line tells us that there is 1 element of length 0, there are 6 of length 3, …\n\nFor  most basic functions the convention is that the input is an element of the  group, rather than  a Coxeter word.  The reason is  that for a Coxeter group  which  is  a  permutation  group,  using the low level functions for permutations  is usually  much faster  than manipulating lists representing reduced expressions.\n\nThis module contains mostly a port of the basic functions on Coxeter groups in  Chevie. The only Coxeter group  constructor implemented here is CoxSym. The  module Weyl defines coxgroup, a function building a finite Coxeter groups given its type.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.CoxGroups.isleftdescent","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.isleftdescent","text":"isleftdescent(W,w,i)\n\nreturns  true  if  and  only  if  the i-th generating reflection of the Coxeter  group W is  in the left  descent set of  the element w of W, that is iff length(W,W(i)*w)<length(W,w).\n\njulia> W=CoxSym(3)\n𝔖 ₃\n\njulia> isleftdescent(W,Perm(1,2),1)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.firstleftdescent","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.firstleftdescent","text":"firstleftdescent(W,w)\n\nreturns the index in gens(W) of the first element of the left descent set of w –- that is, the first i such that if s=W(i) then `l(sw)<l(w).\n\njulia> W=CoxSym(3)\n𝔖 ₃\n\njulia> firstleftdescent(W,Perm(2,3))\n2\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.leftdescents","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.leftdescents","text":"leftdescents(W,w)\n\nThe  left descents of the element w of the Coxeter group W, that is the set of i such that length(W,W(i)*w)<length(W,w).\n\njulia> W=CoxSym(3)\n𝔖 ₃\n\njulia> leftdescents(W,Perm(1,3))\n2-element Array{Int64,1}:\n 1\n 2\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermGroups.reduced","page":"Gapjm Documentation","title":"Gapjm.PermGroups.reduced","text":"reduced(W,w)\n\nThe unique element of minimal length in the coset W.w\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> H=reflection_subgroup(W,[2,6])\nG₂₍₂₆₎=Ã₁×A₁\n\njulia> word.(Ref(W),Set(reduced.(Ref(H),elements(W))))\n3-element Array{Array{Int64,1},1}:\n []\n [1, 2]\n [1]\n\n\n\n\n\nreduced(H,W)\n\nThe elements w∈ W which are H-reduced (of minimal length in the coset Hw)\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> H=reflection_subgroup(W,[2,6])\nG₂₍₂₆₎=Ã₁×A₁\n\njulia> [word(W,w) for S in reduced(H,W) for w in S]\n3-element Array{Array{Int64,1},1}:\n []\n [1]\n [1, 2]\n\n\n\n\n\nreduced(H,W,S)   The elements in W which are H-reduced of length i given the set S   of those of length i-1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.word-Tuple{CoxeterGroup,Any}","page":"Gapjm Documentation","title":"Gapjm.Groups.word","text":"word(W::CoxeterGroup,w)\n\nreturns  a reduced word in the standard generators of the Coxeter group W for  the  element  w  (represented  as  the  vector  of the corresponding generator indices).\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> w=perm\"(1,11)(3,10)(4,9)(5,7)(6,12)\"\n(1,11)(3,10)(4,9)(5,7)(6,12)\n\njulia> w in W\ntrue\n\njulia> word(W,w)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 2\n 1\n\nThe  result  of   word  is  the  lexicographically  smallest reduced word for~w (for the ordering of the Coxeter generators given by gens(W)).\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{CoxeterGroup,Any}","page":"Gapjm Documentation","title":"Base.length","text":"length(W::CoxeterGroup ,w)\n\nreturns the length of a reduced expression in the Coxeter generators of the element w of W.\n\njulia> W=coxgroup(:F,4)\nF₄\n\njulia> p=W(1,2,3,4,2)\n(1,44,38,25,20,14)(2,5,40,47,48,35)(3,7,13,21,19,15)(4,6,12,28,30,36)(8,34,41,32,10,17)(9,18)(11,26,29,16,23,24)(27,31,37,45,43,39)(33,42)\n\njulia> length(W,p)\n5\n\njulia> word(W,p)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 2\n 4\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.elements-Tuple{CoxeterGroup}","page":"Gapjm Documentation","title":"Gapjm.Groups.elements","text":"elements(G::Group): the list of elements of G\n\n\n\n\n\nelements(W::CoxeterGroup[,l])\n\nWith  one argument this works only if  W is finite; the returned elements are  sorted  by  increasing  Coxeter  length.  If the second argument is an integer  l, the elements  of Coxeter length  l are returned.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> e=elements(W,6)\n1-element Array{Perm{Int16},1}:\n (1,7)(2,8)(3,9)(4,10)(5,11)(6,12)\n\njulia> e[1]==longest(W)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.words","page":"Gapjm Documentation","title":"Gapjm.words","text":"words(W::CoxeterGroup[,l])\n\nWith  one argument this works only if W is finite; it returns the reduced Coxeter  words  of  elements  of  W  by  increasing length. If the second argument  is an integer l, only the  elements of length l are returned; this works for infinite Coxeter groups.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> e=elements(W,6)\n1-element Array{Perm{Int16},1}:\n (1,7)(2,8)(3,9)(4,10)(5,11)(6,12)\n\njulia> e[1]==longest(W)\ntrue\n\n\n\n\n\nwords(W,w)\n\nreturns  the list  of all  reduced expressions  of the  element w  of the Coxeter group W.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> words(W,longest(W))\n16-element Array{Array{Int64,1},1}:\n [1, 2, 1, 3, 2, 1]\n [1, 2, 3, 1, 2, 1]\n [1, 2, 3, 2, 1, 2]\n [1, 3, 2, 1, 3, 2]\n [1, 3, 2, 3, 1, 2]\n [2, 1, 2, 3, 2, 1]\n [2, 1, 3, 2, 1, 3]\n [2, 1, 3, 2, 3, 1]\n [2, 3, 1, 2, 1, 3]\n [2, 3, 1, 2, 3, 1]\n [2, 3, 2, 1, 2, 3]\n [3, 1, 2, 1, 3, 2]\n [3, 1, 2, 3, 1, 2]\n [3, 2, 1, 2, 3, 2]\n [3, 2, 1, 3, 2, 3]\n [3, 2, 3, 1, 2, 3]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.bruhatless","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.bruhatless","text":"bruhatless(W, x, y)\n\nwhether x≤y in the Bruhat order, for x,y∈ W. We have x≤y if a reduced expression  for x can be extracted from  one for w). See cite[(5.9) and (5.10)]{Hum90} for properties of the Bruhat order.\n\njulia> W=coxgroup(:H,3)\nH₃\n\njulia> w=W(1,2,1,3);\n\njulia> b=filter(x->bruhatless(W,x,w),elements(W));\n\njulia> word.(Ref(W),b)\n12-element Array{Array{Int64,1},1}:\n []\n [3]\n [2]\n [1]\n [2, 3]\n [1, 3]\n [2, 1]\n [1, 2]\n [2, 1, 3]\n [1, 2, 3]\n [1, 2, 1]\n [1, 2, 1, 3]\n\n\n\n\n\nbruhatless(W, y)\n\nreturns  a vector  whose i-th  element is  the vector  of elements of W smaller for the Bruhat order than w and of Coxeter length i-1. Thus the first  element  of  the  returned  list  contains  only  one(W)  and  the length(W,w)-th element contains only w.\n\njulia> W=CoxSym(3)\n𝔖 ₃\n\njulia> bruhatless(W,Perm(1,3))\n4-element Array{Array{Perm{Int16},1},1}:\n [()]\n [(1,2), (2,3)]\n [(1,2,3), (1,3,2)]\n [(1,3)]\n\nsee also the method Poset for Coxeter groups.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.CoxSym","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.CoxSym","text":"Coxsym(n) The symmetric group on n letters as a Coxeter group\n\njulia> W=CoxSym(3)\n𝔖 ₃\n\njulia> e=elements(W)\n6-element Array{Perm{UInt8},1}:\n ()     \n (2,3)  \n (1,2)  \n (1,2,3)\n (1,3,2)\n (1,3)  \n\njulia> length.(Ref(W),e)\n6-element Array{Int64,1}:\n 0\n 1\n 1\n 2\n 2\n 3\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.PermRoot.reflection_subgroup-Tuple{CoxSym,AbstractArray{Int64,1}}","page":"Gapjm Documentation","title":"Gapjm.PermRoot.reflection_subgroup","text":"reflection_subgroup(W::CoxSym,I)\n\nOnly parabolics defined are I=1:m for m≤n\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.CoxGroups.longest","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.longest","text":"longest(W)\n\nIf  W is  finite, returns  the unique  element of  maximal length  of the Coxeter group W. May loop infinitely otherwise.\n\njulia> longest(CoxSym(4))\nPerm{UInt8}: (1,4)(2,3)\n\nlongest(W,I)\n\nreturns  the longest element of the  parabolic subgroup of W generated by the generating reflections of indices in I.\n\njulia> longest(CoxSym(4))\nPerm{UInt8}: (1,4)(2,3)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.nref","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.nref","text":"number of reflections of W\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.braid_relations","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.braid_relations","text":"braid_relations(W)\n\nthis  function returns the  relations which present  the braid group of the reflection group W. These are homogeneous (both sides of the same length) relations  between generators in bijection  with the generating reflections of  W. A presentation  of W is  obtained by adding relations specifying the order of the generators.\n\njulia> W=ComplexReflectionGroup(29)\nG₂₉\n\njulia> braid_relations(W)\n7-element Array{Array{Array{Int64,1},1},1}:\n [[1, 2, 1], [2, 1, 2]]\n [[2, 4, 2], [4, 2, 4]]\n [[3, 4, 3], [4, 3, 4]]\n [[2, 3, 2, 3], [3, 2, 3, 2]]\n [[1, 3], [3, 1]]\n [[1, 4], [4, 1]]\n [[4, 3, 2, 4, 3, 2], [3, 2, 4, 3, 2, 4]]\n\neach  relation  is  represented  as  a  pair  of lists, specifying that the product  of the  generators according  to the  indices on  the left side is equal  to the product according to the  indices on the right side. See also Diagram.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.coxmat","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.coxmat","text":"coxmat(m::AbstractMatrix)\n\nreturns  the  Coxeter  matrix  of  the  Coxeter group defined by the cartan matrix m\n\njulia> C=cartan(:H,3)\n3×3 Array{Cyc{Int64},2}:\n       2  ζ₅²+ζ₅³   0\n ζ₅²+ζ₅³        2  -1\n       0       -1   2\n\njulia> coxmat(C)\n3×3 Array{Int64,2}:\n 1  5  2\n 5  1  3\n 2  3  1\n\n\n\n\n\ncoxmat(W)\n\nreturns the Coxeter matrix of the Coxeter group W, that is the matrix m whose  entry m[i,j] contains the order of W(i)*W(j) where W(i) is the i-th  Coxeter generator of  W. An infinite  order is represented by the entry 0.\n\njulia> W=CoxSym(4)\n𝔖 ₄\n\njulia> coxmat(W)\n3×3 Array{Int64,2}:\n 1  3  2\n 3  1  3\n 2  3  1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.standard_parabolic_class","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.standard_parabolic_class","text":"standard_parabolic_class(W,I)\n\nI  should be a  subset of eachindex(gens(W)).  The function returns the list of such subsets conjugate to the given subset.\n\njulia> CoxGroups.standard_parabolic_class(coxgroup(:E,8),[7,8])\n7-element Array{Array{Int64,1},1}:\n [7, 8]\n [6, 7]\n [5, 6]\n [4, 5]\n [2, 4]\n [3, 4]\n [1, 3]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.CoxGroups.gencox","page":"Gapjm Documentation","title":"Gapjm.CoxGroups.gencox","text":"gencox(m)\n\nm  should be a square  matrix of real cyclotomic  numbers. It returns the Coxeter  group  whose  Cartan  matrix  is  m.  This  is  a  matrix  group constructed  as  follows.  Let  V  be  a  real  vector space of dimension size(m,1),  and  let  ⟨,⟩  be  the  bilinear  form defined by ⟨eᵢ,eⱼ⟩= m[i,j]  where eᵢ is the  canonical basis of V.  Then the result is the matrix group generated by the reflections sᵢ(x)=x-2⟨x,eᵢ⟩eᵢ.\n\njulia> W=CoxGroups.gencox([2 -2;-2 2])\nGapjm.CoxGroups.GenCox{Int64}([[-1 0; 2 1], [1 2; 0 -1]], Dict{Symbol,Any}())\n\nAbove is a way to construct the affine Weyl group  ̃A₁.\n\n\n\n\n\n","category":"function"},{"location":"#Finite-Coxeter-groups-and-Weyl-groups-1","page":"Gapjm Documentation","title":"Finite Coxeter groups and Weyl groups","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Weyl\ncartan\ntwo_tree\nreflection_subgroup\ncoxgroup\nrootdatum\ndescribe_involution\nWeyl.standard_parabolic\ninversions\nwith_inversions\ntorus\nSubTorus\nrelative_group","category":"page"},{"location":"#Gapjm.Weyl","page":"Gapjm Documentation","title":"Gapjm.Weyl","text":"Let  V be a  real vector space.  Finite Coxeter groups  coincide with the finite  reflection subgroups of GL(V), that is finite subgroups which can be  generated by reflections.  Weyl groups are  the finite Coxeter groups which can be defined over the rational numbers. We implement finite Coxeter groups  as groups of  permutations of a  root system. Root  systems play an important role in mathematics as they classify semi-simple Lie algebras and algebraic groups.\n\nLet  us give precise definitions. Let V  be a real vector space, Vⱽ its dual  and let (,)  be the natural  pairing between Vⱽ  and V. A root system  is a finite set  of vectors R which  generate V (the roots), together  with  a  map  r↦  rⱽ  from  R  to  a subset Rⱽ of Vⱽ (the coroots) such that:\n\nFor any r∈  R, we have  (rⱽ,r)=2 so that  the formula x↦ x-(rⱽ,x)r\n\ndefines a reflection sᵣ:V→ V with root r and coroot rⱽ.\n\nThe reflection sᵣ stabilizes R.\n\nWe  will only  consider reduced  root systems,  i.e., such  that the only elements  of R colinear with r∈ R are r and -r; for Weyl groups, we also ask that the root system be crystallographic, that is (rⱽ,s) is an integer, for any s∈ R,rⱽ∈ Rⱽ.\n\nThe  subgroup W=W(R)  of GL(V)  generated by  the reflections sᵣ is a finite  Coxeter group; when R is crystallographic, the representation V of  W  is  defined  over  the  rational  numbers.  All finite-dimensional (complex) representations of a finite reflection group can be realized over the  same field as V. Weyl groups can also be characterized as the finite Coxeter  groups such that all numbers m(s,t) in the Coxeter matrix are in {2,3,4,6}.\n\nIf  we identify  V with  Vⱽ by  choosing a  W-invariant bilinear form (.;.),  then we have rⱽ=2r/(r;r). A root system R is irreducible if it is not the union of two orthogonal subsets. If R is reducible then the corresponding  Coxeter group  is the  direct product  of the Coxeter groups associated with the irreducible components of R.\n\nThe  irreducible  crystallographic  root  systems  are  classified  by  the following  list of  Dynkin diagrams,  which, in  addition to  the Coxeter matrix,  encode also the relative length of the roots. We show the labeling of the nodes given by the function 'Diagram' described below.\n\nA_n O—O—O—…—O   B_n O⇐O—O—…—O  C_n O⇒O—O—…—O  D_n  O 2\n    1 2 3 … n       1 2 3 … n      1 2 3 … n       ￨\n                                                 O—O—…—O\n                                                 1 3 … n\n\nG₂ O⇛O  F₄ O—O⇒O—O    E₆   O 2   E₇   O 2     E₈    O 2\n   1  2     1 2  3 4       ￨          ￨             ￨\n                       O—O—O—O—O  O—O—O—O—O—O   O—O—O—O—O—O—O\n                       1 3 4 5 6  1 3 4 5 6 7   1 3 4 5 6 7 8\n\nThese diagrams encode the presentation of the Coxeter group W as follows: the vertices represent the generating reflections; an edge is drawn between s  and t if the order m(s,t) of st is greater than 2; the edge is single  if  m(s,t)=3,  double  if  m(s,t)=4,  triple if m(s,t)=6. The arrows  indicate the relative root lengths when W has more than one orbit on  R, as explained below; we  get the Coxeter Diagram, which describes the  underlying Weyl group, if  we ignore the arrows:  we see that the root systems B_n and C_n correspond to the same Coxeter group.\n\nHere  are the Coxeter diagrams for the  finite Coxeter groups which are not crystallographic:\n\n       e        5         5\nI₂(e) O—O   H₃ O—O—O  H₄ O—O—O—O\n      1 2      1 2 3     1 2 3 4 \n\nLet  us  now  describe  how  the  root  systems  are  encoded in the Dynkin diagrams. Let R be a root system in V. Then we can choose a linear form on  V which vanishes on  no element of R.  According to the sign of the value  of this  linear form  on a  root r  ∈ R  we call r positive or negative.  Then there exists  a unique subset  Π of the positive roots, the  simple roots,  such that  any positive  root is a linear combination with  non-negative coefficients  of roots  in Π.  Any two  sets of simple roots  (corresponding to different choices of linear forms as above) can be transformed into each other by a unique element of W(R). Hence, since the pairing  between V and Vⱽ  is W-invariant, if Π  is a set of simple roots  and if  we define  the Cartan  matrix as  being the  n times n matrix  C={rⱽ(s)}ᵣₛ, for r,s∈Π this matrix is unique up to simultaneous permutation  of  rows  and  columns.  It  is precisely this matrix which is encoded in a Dynkin diagram, as follows.\n\nThe  indices for the rows of C label the nodes of the diagram. The edges, for  r ≠ s,  are given as  follows. If Cᵣₛ  and Cₛᵣ are integers such that  |Cᵣₛ|≥|Cₛᵣ|=1 the vertices  are connected by  |Cᵣₛ| lines, and if |Cᵣₛ|>1 then we put an additional arrow on the lines pointing towards the node  with label s. In other cases,  we simply put a single line equipped with the unique integer pᵣₛ≥1 such that CᵣₛCₛᵣ=cos^2 (π/pₛᵣ).\n\nConversely,  the whole root  system can be  recovered from the simple roots and  the corresponding coroots. The  reflections in W(R) corresponding to the  simple roots are called  simple reflections or Coxeter generators. They are precisely the generators for which the Coxeter diagram encodes the defining  relations of W(R). Each root is  in the orbit of a simple root, so  that R is obtained  as the orbit of  the simple roots under the group generated  by  the  simple  reflections.  The  restriction  of  the  simple reflections  to the span of R is  determined by the Cartan matrix, so R is determined by the Cartan matrix and the set of simple roots.\n\nThe  Cartan  matrix  corresponding  to  one  of  the above irreducible root systems  (with the specified labeling) is  returned by the command 'cartan' which  takes as input  a Symbol giving  the type (that  is ':A', ':B', …, ':I')  and a positive Int giving the  rank (plus an Int giving the bond for  type :I).  This function  returns a  matrix with  entries in ℤ for crystallographic  types, and a  matrix of Cyc  for the other types. Given two  Cartan matrices c1 and c2,  their matrix direct sum (corresponding to  the  orthogonal  direct  sum  of  the  root systems) can be produced by cat(c1,c2,dims=[1,2]).\n\nThe  function 'rootdatum' takes as input a  list of simple roots and a list of the corresponding coroots and produces a struct containing information about  the root system R and about W(R). If we label the positive roots by  '1:N', and the negative roots  by 'N+1:2N', then each simple reflection is  represented by the permutation of '1:2N' which it induces on the roots. If  only one argument is given, the Cartan matrix of the root system, it is taken  as the list  of coroots and  the list of  roots is assumed to be the canonical basis of V.\n\nIf one only wants to work with Cartan matrices with a labeling as specified by  the  above  list,  the  function  call  can  be  simplified. Instead of 'rootdatum(cartan(:D,4))' the following is also possible.\n\njulia> W=coxgroup(:D,4)\nD₄\n\njulia> cartan(W)\n4×4 Array{Int64,2}:\n  2   0  -1   0\n  0   2  -1   0\n -1  -1   2  -1\n  0   0  -1   2\n\nAlso,  the Weyl group struct associated to a direct sum of irreducible root systems can be obtained as a product\n\njulia> W=coxgroup(:A,2)*coxgroup(:B,2)\nA₂×B₂\n\njulia> cartan(W)\n4×4 Array{Int64,2}:\n  2  -1   0   0\n -1   2   0   0\n  0   0   2  -2\n  0   0  -1   2\n\nThe  same struct  is constructed  by applying  'coxgroup' to  the matrix 'cat(cartan(:A,2), cartan(:B,2),dims=[1,2])'.\n\nThe elements of a Weyl group are permutations of the roots:\n\njulia> W=coxgroup(:D,4)\nD₄\n\njulia> p=W(1,3,2,1,3)\n(1,14,13,2)(3,17,8,18)(4,12)(5,20,6,15)(7,10,11,9)(16,24)(19,22,23,21)\n\njulia> word(W,p)\n5-element Array{Int64,1}:\n 1\n 3\n 1\n 2\n 3\n\n\nfinally, a benchmark on julia 1.0.2\n\njulia> @btime length(elements(coxgroup(:E,7)))\n  531.385 ms (5945569 allocations: 1.08 GiB)\n\nGAP3 for the same computation takes 2.2s\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.PermRoot.cartan","page":"Gapjm Documentation","title":"Gapjm.PermRoot.cartan","text":"cartan(m::AbstractMatrix)\n\nThe  argument is a Coxeter matrix for a Coxeter group W and the result is a  Cartan Matrix  for the  standard reflection  representation of  W. Its diagonal   terms  are  2  and  the  coefficient  between  two  generating reflections   s  and  t  is   -2cos(π/m[s,t])  (where  by  convention π/m[s,t]==0  if  m[s,t]==infty,  which  is  represented here by setting 'm[s,t]=0').  The matrix  m is  symmetric, and  the result  is symmetric, meaning  that all roots  in the constructed  reflection representation have same length.\n\njulia> cartan([1 3;3 1])\n2×2 Array{Cyc{Int64},2}:\n  2  -1\n -1   2\n\n\n\n\n\ncartan(type, rank [,bond])\n\nreturn  the Cartan matrix for a finite  Coxeter group described by type and rank.  The recognized types are :A, :B,  :Bsym, :C, :D, :E, :F, :Fsym, :G, :Gsym, :I, :H. For type :I a third argument must be given describing the bond between the two generators. The sym types correspond to root systems where all roots have the same length.\n\njulia> cartan(:F,4)\n4×4 Array{Int64,2}:\n  2  -1   0   0\n -1   2  -1   0\n  0  -2   2  -1\n  0   0  -1   2\n\njulia> cartan(:I,2,5)\n2×2 Array{Cyc{Int64},2}:\n       2  ζ₅²+ζ₅³\n ζ₅²+ζ₅³        2\n\njulia> cartan(:Bsym,2)\n2×2 Array{Cyc{Int64},2}:\n   2  -√2\n -√2    2\n\n\n\n\n\ncartan(W::Group)\n\nLet  s₁,…,sₙ be a  list of reflections  with associated root vectors rᵢ and  coroots cᵢ.  Then the  matrix Cᵢ,ⱼ  of the  cᵢ(rⱼ) is called the Cartan  matrix of the  list of reflections.  It is uniquely determined by the reflections up to conjugating by  a diagonal matrix.\n\nIf  s₁,…,sₙ are the generators of a  reflection group W, the matrix C up  to conjugation by a  diagonal matrix is an  invariant of the reflection representation   of   W.   It   actually   completely   determines   this representation if the rᵢ are linearly independent (which is e.g. the case if  C is  invertible), since  in the  rᵢ basis  the matrix for the sᵢ differs  from the identity only on the i-th line, where the corresponding line of C has been subtracted. This function returns the Cartan matrix of the reflection group W.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> cartan(W)\n3×3 Array{Int64,2}:\n  2  -1   0\n -1   2  -1\n  0  -1   2\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.two_tree","page":"Gapjm Documentation","title":"Gapjm.Weyl.two_tree","text":"two_tree(m)\n\nGiven  a square  matrix m  with zeroes  (or falses,  for a boolean matrix)  symmetric  with respect to the diagonal, let  G be the graph with vertices  axes(m)[1] and an edge between i and j iff !iszero(m[i,j]).  If G  is a line this function returns it as a Vector{Int}.   If  G  is  a  tree  with  one  vertex  c of valence 3 the function returns  (c,b1,b2,b3)  where b1,b2,b3 are  the branches from  this vertex sorted by  increasing length.  Otherwise the function returns nothing\n\njulia> Weyl.two_tree(cartan(:A,4))\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\njulia> Weyl.two_tree(cartan(:E,8))\n(4, [2], [3, 1], [5, 6, 7, 8])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.reflection_subgroup","page":"Gapjm Documentation","title":"Gapjm.PermRoot.reflection_subgroup","text":"reflection_subgroup(W,I) The subgroup of W generated by reflections(W)[I]\n\nA   theorem  discovered  by  Deodhar  cite{Deo89}  and  Dyer  cite{Dye90} independently  is that a subgroup H of a Coxeter system (W,S) generated by  reflections has  a canonical  Coxeter generating  set, formed of the t ∈Ref(H)  such l(tt')>l(t) for any t'∈  Ref(H) different from t. This is used by 'reflection_subgroup' to determine the Coxeter system of H.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> Diagram(W)\nO⇛ O\n1  2\n\njulia> H=reflection_subgroup(W,[2,6])\nG₂₍₂₆₎=Ã₁×A₁\n\njulia> Diagram(H)\nO\n1\nO\n2\n\nThe  notation G₂₍₂₆₎ means  that 'W.G.roots[2:6]' form  a system of simple roots for H.\n\nA  reflection subgroup has specific properties  the most important of which is  'inclusion' which gives the positions of the roots of H in the roots of W. The inverse (partial) map is 'restriction'.\n\njulia> inclusion(H)\n4-element Array{Int64,1}:\n  2\n  6\n  8\n 12\n\njulia> restriction(H)\n12-element Array{Int64,1}:\n 0\n 1\n 0\n 0\n 0\n 2\n 0\n 3\n 0\n 0\n 0\n 4\n\nIf  H is a standard parabolic subgroup of a Coxeter group W then the length function on H (with respect to its set of generators) is the restriction of the  length function on  W. This need  not no longer  be true for arbitrary reflection subgroups of W:\n\njulia> word(W,H(2))\n5-element Array{Int64,1}:\n 1\n 2\n 1\n 2\n 1\n\nIn  this package, finite  reflection groups are  represented as permutation groups  on a set of roots. Consequently,  a reflection subgroup H⊆ W is a permutation  subgroup, thus its elements are represented as permutations of the roots of the parent group.\n\njulia> elH=word.(Ref(H),elements(H))\n4-element Array{Array{Int64,1},1}:\n []    \n [2]   \n [1]   \n [1, 2]\n\njulia> elW=word.(Ref(W),elements(H))\n4-element Array{Array{Int64,1},1}:\n []                \n [1, 2, 1, 2, 1]   \n [2]               \n [1, 2, 1, 2, 1, 2]\n\njulia> map(w->H(w...),elH)==map(w->W(w...),elW)\ntrue\n\n\nAnother  basic result about reflection subgroups  of Coxeter groups is that each  coset of  H in  W contains  a unique  element of  minimal length, see reduced.\n\n\n\n\n\nOnly parabolics defined are I=1:m for m≤n\n\n\n\n\n\nreflection_subgroup(W::CoxSym,I)\n\nOnly parabolics defined are I=1:m for m≤n\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.coxgroup","page":"Gapjm Documentation","title":"Gapjm.Weyl.coxgroup","text":"coxgroup(type,rank[,bond])\n\nThis is equivalent to 'rootdatum(cartan(type,rank[,bond]))`.\n\nThe  resulting object, that we will  call a Coxeter datum, has additional entries and functions describing various information on the root system and Coxeter group that we describe below.\n\nnref(W):   the number of positive roots\n\nW.rootdec:  the  root  vectors,  given  as  linear combinations of simple roots.  The first 'nref(W)' roots are  positive, the next 'nref(W)' are the corresponding negative roots. Moreover, the first 'semisimplerank(W)' roots are the simple roots. The positive roots are ordered by increasing height.\n\n'coroots(W)':  the  same  information  for  the  simple coroots. The coroot corresponding  to a given root is in the same relative position in the list of coroots as the root in the list of roots.\n\n'rootlengths(W)':  the  vector  of  length  of  roots the simple roots. The shortest  roots in  an irreducible  subsystem are  given the  length 1. The others  then  have  length  2  (or  3  in  type  G_2).  The  matrix  of the W-invariant bilinear form is given by 'map(i->(rootLengths)[i]*W.cartan[i,:],1:semisimplerank(W))'.\n\n'simple_representatives(W)[i]':  this gives the  smallest index of  a root in the same W-orbit as the i-th root.\n\n'simpleconjugatingelement(W,i)': returns an element w of W of minimal length such that `i==simple_representative(W,i)^w'.\n\nrefrep(W):    the  matrices  (in  row  convention  –-  that is the matrices      operate  from the right) of the  simple reflections of the Coxeter group.\n\ngens(W):   the generators as permutations of the root vectors.  They        are given in the same order as the first semisimplerank(W) roots.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> cartan(W)\n3×3 Array{Int64,2}:\n  2  -1   0\n -1   2  -1\n  0  -1   2\n\njulia> W.rootdec\n12-element Array{Array{Int64,1},1}:\n [1, 0, 0]   \n [0, 1, 0]   \n [0, 0, 1]   \n [1, 1, 0]   \n [0, 1, 1]   \n [1, 1, 1]   \n [-1, 0, 0]  \n [0, -1, 0]  \n [0, 0, -1]  \n [-1, -1, 0] \n [0, -1, -1] \n [-1, -1, -1]\n\n julia> refrep(W)\n3-element Array{Array{Int64,2},1}:\n [-1 0 0; 1 1 0; 0 0 1]\n [1 1 0; 0 -1 0; 0 1 1]\n [1 0 0; 0 1 1; 0 0 -1]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.rootdatum","page":"Gapjm Documentation","title":"Gapjm.Weyl.rootdatum","text":"root datum from type \n\n\n\n\n\nAdjoint root datum from cartan mat\n\n\n\n\n\nroot datum from 2 matrices: roots on basis of X(T), coroots on basis of Y(T)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.describe_involution","page":"Gapjm Documentation","title":"Gapjm.Weyl.describe_involution","text":"describe_involution(W,w)\n\nGiven  an involution w of a Coxeter group W, by a theorem of Richardson cite{rich82} there is a unique parabolic subgroup P of W such that that w  is the  longest element  of P,  and is  central in P. The function returns I such that P=reflection_subgroup(W,I), so that w=longest(reflection_subgroup(W,I)).\n\njulia> W=coxgroup(:A,2)\nA₂\n\njulia> w=longest(W)\n(1,5)(2,4)(3,6)\n\njulia> describe_involution(W,w)\n1-element Array{Int64,1}:\n 3\n\njulia> w==longest(reflection_subgroup(W,[3]))\ntrue\n\nFor now does not work for abscox groups.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.standard_parabolic","page":"Gapjm Documentation","title":"Gapjm.Weyl.standard_parabolic","text":"standard_parabolic(W,H)\n\nGiven a parabolic subgroup H or the indices of its simple roots returns w such that H^w is a standard parabolic subgroup of W\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.inversions","page":"Gapjm Documentation","title":"Gapjm.Weyl.inversions","text":"inversions(W,w)\n\nReturns  the inversions of the element w of the finite Coxeter group W, that  is, the list of the  indices of roots of W  sent by w to negative roots.  The element w can also be  a word s₁…sₙ (a vector of integers), in  which  case  the  function  returns  inversions  in  the  order  of the reflections W(s₁), W(s₁,s₂,s₁), …, W(s₁,s₂,…,sₙ,sₙ₋₁,…,s₁).\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> inversions(W,W(1,2,1))\n3-element Array{Int64,1}:\n 1\n 2\n 4\n\njulia> inversions(W,[1,2,1])\n3-element Array{Int16,1}:\n 1\n 4\n 2\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.with_inversions","page":"Gapjm Documentation","title":"Gapjm.Weyl.with_inversions","text":"with_inversions(W,N)\n\nW  should be  a finite  Coxeter group  and N  a subset  of 1:nref(W). Returns  the  element  w  of  W such that N==inversions(W,w). Returns nothing if no such element exists.\n\njulia> W=coxgroup(:A,2)\nA₂\n\njulia> map(N->with_inversions(W,N),combinations(1:nref(W)))\n8-element Array{Union{Nothing, Perm{Int16}},1}:\n ()\n (1,4)(2,3)(5,6)\n (1,3)(2,5)(4,6)\n nothing\n nothing\n (1,6,2)(3,5,4)\n (1,2,6)(3,4,5)\n (1,5)(2,4)(3,6)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Weyl.torus","page":"Gapjm Documentation","title":"Gapjm.Weyl.torus","text":"torus(rank)\n\nThis  function returns the object corresponding to the notion of a torus of dimension  rank, a Coxeter  group of semisimple  rank 0 and given rank. This  corresponds to a split torus; the extension to Coxeter cosets is more useful.\n\njulia> torus(3)\n.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Semisimple.SubTorus","page":"Gapjm Documentation","title":"Gapjm.Semisimple.SubTorus","text":"SubTorus(W,Y::Matrix)\n\nThe  function  returns  the  subtorus  𝐒  of  the  maximal torus 𝐓 of the reductive  group represented by the Weyl group  W such that Y(𝐒) is the (pure)  sublattice of  Y(𝐓) generated  by the  (integral) vectors  Y. A basis  of Y(𝐒)  adapted to  Y(𝐓) is  computed and  stored in  the field 'S.generators'  of the returned  SubTorus struct. Here,  adapted means that there  is a  set of  integral vectors,  stored in 'S.complement', such that 'M=vcat(S.generators,S.complement)'  is  a  basis  of  Y(𝐓) (equivalently M∈GL(Z^{rank(W)}).  An  error  is  raised  if  Y does not define a pure sublattice.\n\njulia> W=coxgroup(:A,4)\nA₄\n\njulia> SubTorus(W,[1 2 3 4;2 3 4 1;3 4 1 1])\nSubTorus(A₄,[[1, 0, 3, -13], [0, 1, 2, 7], [0, 0, 4, -3]])\n\njulia> SubTorus(W,[1 2 3 4;2 3 4 1;3 4 1 2])\nERROR: not a pure sublattice\nStacktrace:\n [1] error(::String) at ./error.jl:33\n [2] Gapjm.Weyl.SubTorus(::FiniteCoxeterGroup{Perm{Int16},Int64}, ::Array{Int64,2}) at /home/jmichel/julia/Gapjm.jl/src/Weyl.jl:1082\n [3] top-level scope at REPL[25]:1\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Weyl.relative_group","page":"Gapjm Documentation","title":"Gapjm.Weyl.relative_group","text":"relative_group(W::FiniteCoxeterGroup,J)\n\nJ should be a if distinguished subset of S==eachindex(gens(W)), that is if for s∈ S-J we  set v(s,J)=w0^{J∪ s}w0^J then J  is stable  by all v(s,J). Then R=NW(WJ)/WJ  is a Coxeter group with  Coxeter system the v(s,J). The program  return  R  in  its  reflection  representation  on X(ZLJ/ZG). (according to Lusztig's \"Coxeter Orbits...\", the images of the roots of W in X(ZL_J/ZG) form a root system).\n\nR.prop has the fields: :relativeIndices=setdiff(S,J) :parentMap:=the list of v(s,J) :MappingFromNormalizer maps J-reduced elements of NW(WJ) to elements of R\n\n\n\n\n\n","category":"function"},{"location":"#Finite-reflection-groups-1","page":"Gapjm Documentation","title":"Finite reflection groups","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"PermRoot\nreflection\ncartan(::PermRootGroup)\nDiagram\nhyperplane_orbits\nrank\nsemisimplerank\ndegrees(::Group)\ncodegrees\nbipartite_decomposition\ncatalan\nrefrep(::PRG,w)\nPermX\nreflections\nrefleigen\nreflchar\nsimple_conjugating_element\nsimple_representatives\ninvariant_form\ninvariants\ngeneric_order\ntorus_order\nparabolic_representatives\nComplexReflectionGroup","category":"page"},{"location":"#Gapjm.PermRoot","page":"Gapjm Documentation","title":"Gapjm.PermRoot","text":"Let  V be a vector space over a subfield K of the complex numbers; here it  usually means  a Rational  or a  Cyc. A  complex reflection is an element  s∈ GL(V) of finite order whose  fixed point set is an hyperplane (we  will in the  following just call  it a reflection  to abbreviate; in some  literature the term reflection  is only employed when  the order is 2 and  the  more  general  case  is  called  a  pseudo-reflection).  Thus a reflection  has a unique  eigenvalue not equal  to 1, which  is a root of unity.  If  K  is  a  subfield  of  the  real numbers, this eigenvalue is necessarily equal to -1.\n\nA  reflection group W is a group  generated by a finite number of complex reflections.\n\nSince  when W contains  a reflection s  it contains its  powers, W is always  generated  by  reflections  s  with non-trivial eigenvalue E(d) where  d is the order of s; we may in addition assume that s is not a power  of another reflection with larger order. Such a reflection is called distinguished;  it is  a canonical  generator of  the cyclic  subgroup it generates.  The  generators  of  reflection  groups we construct are always distinguished  reflections. In a real  reflection group all reflections are distinguished.\n\nReflection groups for us are groups W with the following methods defined\n\ngens(W): the reflections which generate W\n\nreflections(W): a list of distinguished reflections, given as elements of W, which starts with gens(W).\n\nNote  that W  does not  need to  be a  matrix group. The meaning of the above  fields is just that W has a representation (called the reflection representation  of W) where  reflections(W) act as  reflections. It is much  more efficient  to compute  with permutation  groups than with matrix groups,  when possible.  Information sufficient  to determine  a particular reflection  representation  is  stored  for  such  groups  (see roots and coroots). Note that when W is finite, the distinguished reflections are in bijection with the reflecting hyperplanes.\n\nLet  W  be  a  finite  reflection  group  on  the vector space V over a subfield  K of the  complex numbers. An  efficient representation that we use  for computing with such group is, is a permutation representation on a W-invariant  set of root and coroot  vectors for reflections of W; that is,  a  set  R  of  pairs  (r,rᵛ)∈  V×Vᵛ invariant by W and such each distinguished  reflection  in  W  is  defined  by  some  pair in R (see reflection). There may be several pairs for each reflection, differing by roots  of unity. This generalizes the usual construction for Coxeter groups (the  case K=ℝ) where to each reflection of W is associated two roots, a  positive and a negative one.  For irreducible complex reflection groups, there are at least as many roots on a given line as the order of the center of W.\n\nThe  finite  irreducible  complex  reflection  groups  have been completely classified   by  Shepard  and  Todd.   They  contain  one  infinite  family G(de,e,r) depending on 3 parameters, and 34 exceptional groups which have been  given by Shephard and Todd names which range from G₄ to G₃₇. They cover the exceptional Coxeter groups, e.g., coxgroup(:E,8) is the same as G₃₇.\n\nWe provide functions to build any finite reflection group, either by giving a  list of  roots and  corrots defining  the generating  reflections, or in terms  of the classification. The  output is a permutation  group on set of roots  (see ComplexReflectionGroup  and PermRootGroup).  In the context e.g.  of  Weyl  groups,  one  wants  to describe the particular root system chosen  in term of the  traditional classification of crystallographic root systems. This is done via calls to the function coxgroup (see the chapter on  finite Coxeter  groups). There  is not  yet a  general theory on how to construct  a nice set of  roots for a non-real  reflection group; the roots chosen  here  where  obtained  case-by-case;  however, they satisfy several important properties:\n\nThe  generating  reflections  satisfy  braid relations which  present the braid group associated to W (see Diagram).\nThe field of definition of W is the field K generated by the traces of the elements of W acting on V.\n\nIt  is a theorem that  W may be realized  as a reflection group over K. For  almost  all  irreducible  complex  reflection  groups,  the generating matrices  for W  we give  have coefficients  in K.  Further, the set of matrices  for all  elements of  W is  globally invariant under the Galois group  of K/ℚ, thus the Galois  action induces automorphisms of W. The exceptions are G₂₂, G₂₇ where the matrices are in a degree two extension of   K  (this  is  needed  to   have  a  globally  invariant  model,  see [MarinMichel10]) and some dihedral groups as well as H_3 and H_4, where the  matrices given (the usual  Coxeter reflection representation over K) are not globally invariant.\n\nIt turns out that all representations of a complex reflection group W are defined  over the  field of  definition of  W (cf.  [Ben76] and D.~Bessis thesis).  This has been known for a long  time in the case K=ℚ, the case of Weyl groups: their representations are defined over the rationals.\n\nThe Cartan matrix (see \"CartanMat\") for the generating roots (those which  correspond  to the generating reflections) has  entries in the ring ℤₖ  of integers of K, and the roots (resp. coroots) are linear combination  with coefficients in ℤₖ of a linearly independent subset of them.\n\nThe finite reflection groups have thus the following additional fields:\n\nroots:  a  set  of  complex  roots  in  V,  given  as a list of lists        (vectors), on which W has a faithful permutation representation.\n\n   `coroots`: the  coroots for `gens(W)`.\n\nHere  we  describe  functions  available  for  finite reflection groups W represented  as permutation groups on a  set of roots. These functions make use  of the classification of W whenever it is known, but work even if it is not known.\n\nLet SV be the symmetric algebra of V. The invariants of W in SV are called  the  polynomial  invariants  of  W.  They  are  generated  as a polynomial   ring   by   dim   V  homogeneous  algebraically  independent polynomials  f₁,…,f_{dim  V}.  The  polynomials  fᵢ  are not uniquely determined  but  their  degrees  are.  The  fᵢ  are  called  the  basic invariants  of W, and their degrees the reflection degrees of W. Let I be the ideal generated by the homogeneous invariants of positive degree in  SV. Then SV/I is isomorphic to the regular representation of W as a  W-module. It  is thus  a graded  (by the  degree of  elements of SV) version  of the regular  representation of W.  The polynomial which gives the  graded multiplicity  of a  character φ  of W  in the graded module SV/I is called the fake degree of φ.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.PermRoot.reflection","page":"Gapjm Documentation","title":"Gapjm.PermRoot.reflection","text":"reflection(W,i)\n\nreflection for i-th root of W\n\n\n\n\n\nreflection(root, coroot)::Matrix the reflection of given root and coroot\n\nA  (complex) reflection in GL(V), the linear group of a vector space over a subfield of the complex numbers, is a map s of finite order whose fixed points  are  a  hyperplane  H  (the  reflecting  hyperplane of s); an eigenvector  r for  the non-trivial  eigenvalue ζ  (a root of unity) is called  a root of s. If we choose a linear form rᵛ (called a coroot of s) defining H such that rᵛ(r)=1-ζ then the linear map s is given by x↦x-rᵛ(x)r.\n\nA  way of specifying a  reflection is by giving  a root and a coroot, which are  uniquely determined by the reflection up to multiplication of the root by  a  scalar  and  of  the  coroot  by  the  inverse  scalar. The function reflection  gives  the  matrix  of  the  corresponding  reflection in the standard  basis of V, where the root and the coroot are vectors given in  the standard  bases of  V and  Vᵛ, so  that rᵛ(r)  is obtained as permutedims(root)*coroot.\n\njulia> r=reflection([1,0,0],[2,-1,0])\n3×3 Array{Int64,2}:\n -1  0  0\n  1  1  0\n  0  0  1\n\njulia> r==refrep(coxgroup(:A,3),1)\ntrue\n\njulia> r*[2,-1,0]\n3-element Array{Int64,1}:\n -2\n  1\n  0\n\njulia> [1 0 0]*r\n1×3 Array{Int64,2}:\n -1  0  0\n\nAs  we see in the last lines, in our package the matrices operate an V as row vectors and on Vᵛ as column vectors\n\n\n\n\n\nreflection(s::Matrix [,r::AbstractVector])\n\nHere  s is  a square  matrix, and  if given  r is  a vector of the same length  as size(s)[1]. The function determines if  s is the matrix of a reflection  (resp. if r is  given if it is  the matrix of a reflection of root  r; the point of  giving r is to  specify exactly the desired root and  coroot, which  otherwise are  determined only  up to  a scalar and its inverse).  The returned result is false if s is not a reflection (resp. not  a  reflection  with  root  r),  and  otherwise is a record with four fields:\n\n.root:   the root of the reflection s (equal to r if given)\n\n.coroot:  the coroot of s\n\n.eigenvalue:  the non-trivial eigenvalue of s\n\n.isOrthogonal:   a  boolean  which is  true if  and  only if  s is   orthogonal  with respect to  the usual scalar  product (then the root and   eigenvalue are sufficient to determine s)\n\njulia> reflection([-1 0 0;1 1 0;0 0 1])\n(root = [2, 0, 0], coroot = Rational{Int64}[1//1, -1//2, 0//1], eig = -1, isOrthogonal = false)\n\njulia> reflection([-1 0 0;1 1 0;0 0 1],[1,0,0])\n(root = [1, 0, 0], coroot = Rational{Int64}[2//1, -1//1, 0//1], eig = -1, isOrthogonal = false)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.cartan-Tuple{PermRootGroup}","page":"Gapjm Documentation","title":"Gapjm.PermRoot.cartan","text":"cartan(W::Group)\n\nLet  s₁,…,sₙ be a  list of reflections  with associated root vectors rᵢ and  coroots cᵢ.  Then the  matrix Cᵢ,ⱼ  of the  cᵢ(rⱼ) is called the Cartan  matrix of the  list of reflections.  It is uniquely determined by the reflections up to conjugating by  a diagonal matrix.\n\nIf  s₁,…,sₙ are the generators of a  reflection group W, the matrix C up  to conjugation by a  diagonal matrix is an  invariant of the reflection representation   of   W.   It   actually   completely   determines   this representation if the rᵢ are linearly independent (which is e.g. the case if  C is  invertible), since  in the  rᵢ basis  the matrix for the sᵢ differs  from the identity only on the i-th line, where the corresponding line of C has been subtracted. This function returns the Cartan matrix of the reflection group W.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> cartan(W)\n3×3 Array{Int64,2}:\n  2  -1   0\n -1   2  -1\n  0  -1   2\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.PermRoot.Diagram","page":"Gapjm Documentation","title":"Gapjm.PermRoot.Diagram","text":"diagram of finite Coxeter group\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.PermRoot.hyperplane_orbits","page":"Gapjm Documentation","title":"Gapjm.PermRoot.hyperplane_orbits","text":"hyperplane_orbits(W)\n\nreturns  a  list  of  named  tuples,  one  for each hyperplane orbit of the reflection  group W. If o is the named tuple for such an orbit, and s is  the first  element of  gens(W) whose  hyperplane is  in the orbit, it contains the following fields\n\no.s:     index of s in gens(W)\n\no.cl_s:  map(i->position_class(W,s^i),1:o.order-1)\n\no.order: order of s\n\n.N_s:    Size of orbit\n\n.det_s:  for i in 1:o.order-1, position in CharTable of (det_s)^i\n\njulia> W=coxgroup(:B,2)\nB₂\n\njulia> hyperplane_orbits(W)\n2-element Array{NamedTuple{(:s, :cl_s, :order, :N_s, :det_s),Tuple{Int64,Array{Int64,1},Int64,Int64,Array{Int64,1}}},1}:\n (s = 2, cl_s = [4], order = 2, N_s = 2, det_s = [1])\n (s = 1, cl_s = [2], order = 2, N_s = 2, det_s = [3])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.rank","page":"Gapjm Documentation","title":"Gapjm.PermRoot.rank","text":"rank(W::Group)\n\nThis  function  returns  the  rank  of  a  reflection group, which is the dimension of the space where it acts.\n\njulia> rank(ComplexReflectionGroup(31))\n4\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.semisimplerank","page":"Gapjm Documentation","title":"Gapjm.PermRoot.semisimplerank","text":"semisimpleRank(W)\n\nThis  function returns the  semisimple rank of  the reflection group W, which  is the dimension of the space  where it effectively acts. If Wis a reflection  group acting on V, and V₁  is the subspace generated by the roots  of  the  reflections  of  W,  then  the  dimension  of V₁ is the semisimple rank. W is called essential if V₁=V.\n\njulia> W=reflection_subgroup(coxgroup(:A,3),[1,3])\nA₃₍₁₃₎=A₁×A₁\n\njulia> semisimplerank(W)\n2\n\njulia> rank(W)\n3\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.degrees-Tuple{Group}","page":"Gapjm Documentation","title":"Gapjm.degrees","text":"degrees(W)\n\nreturns  a list  holding the  degrees of  W as  a reflection group on the vector  space V on which  it acts. These are  the degrees d₁,…,dₙ where n  is the dimension of  V of the basic  invariants of W in SV. They reflect various properties of W; in particular, their product is the size of W.\n\njulia> W=ComplexReflectionGroup(30)\nH₄\n\njulia> degrees(W)\n4-element Array{Int64,1}:\n  2\n 12\n 20\n 30\n\njulia> length(W)\n14400\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.ComplexR.codegrees","page":"Gapjm Documentation","title":"Gapjm.ComplexR.codegrees","text":"codegrees(W)\n\nreturns  a list holding the  codegrees of W as  a reflection group on the vector  space V  on which  it acts.  These are  one less than the degrees d^*_1,ldots,d^*_(dim V) of the basic derivations of W on SV⊗ V^vee.\n\njulia> W=ComplexReflectionGroup(4)\nG₄\n\njulia> codegrees(W)\n2-element Array{Int64,1}:\n 0\n 2\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.bipartite_decomposition","page":"Gapjm Documentation","title":"Gapjm.PermRoot.bipartite_decomposition","text":"bipartite_decomposition(W)\n\nReturns  a bipartite decomposition [L,R] of the indices of the generators of  the  reflection  group  W,  such  that reflection_subgroup(W,L) and reflection_subgroup(W,R) are abelian subgroups, and W=reflection_subgroup(W,   vcat(L,R)).   Gives   an   error  if  no  such decomposition is possible.\n\njulia> bipartite_decomposition(coxgroup(:E,8))\n([1, 4, 6, 8], [3, 2, 5, 7])\n\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.catalan","page":"Gapjm Documentation","title":"Gapjm.PermRoot.catalan","text":"Catalan(n) n-th Catalan Number\n\njulia> catalan(8)\n1430\n\n\n\n\n\nCatalan(W)\n\nreturns the Catalan Number of the irreducible complex reflection group W. For well-generated groups, this number is equal to the number of simples in the  dual  Braid  monoid.  For  other  groups  it was defined by Gordon and Griffeth  (cite{gg12}).  For  Weyl  groups,  it  also counts the number of antichains of roots.\n\njulia> catalan(coxgroup(:A,7))\n1430\n\nCatalan(W,i)\n\nreturns   the  i-th  Fuss-Catalan  Number   of  the  irreducible  complex reflection  group W. For  well-generated groups, this  number is equal to the  number of chains  s₁,…,sᵢ of simples  in the dual  monoid where sⱼ divides  sⱼ₊₁. For these groups, it is also equal to ∏ⱼ(ih+dⱼ)/dⱼ where the  product runs over the reflection degrees  of W, and where h is the Coxeter  number of W. For non-well generated groups, the definition is in cite{gg12}.\n\njulia> catalan(ComplexReflectionGroup(7),2)\n16//1\n\nCatalan(W,q), resp. Catalan(W,i,q)\n\nwhere  q  is  a  variable  (like  Pol(:q)  or  an  'Mvp')  returns  the q-Catalan number (resp. the i-th q-Fuss Catalan number) of W. Again the definitions in general are in cite{gg12}.\n\njulia> catalan(ComplexReflectionGroup(7),2,q)\nPol{Int64}: q⁷²+2q⁶⁰+3q⁴⁸+4q³⁶+3q²⁴+2q¹²+1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.refrep-Tuple{PRG,Any}","page":"Gapjm Documentation","title":"Gapjm.PermRoot.refrep","text":"refrep(W,w)\n\nLet  W be a  finite reflection group  on the space  V and let  w be a permutation  of the roots of W.  The function refrep returns the matrix of  w acting on V. This is  the linear transformation of V which acts trivially  on the orthogonal of  the coroots and has  same effect as w on the simple roots. The function makes sense more generally for an element of the normalizer of W in the whole permutation group of the roots.\n\njulia> W=reflection_subgroup(rootdatum(\"E7sc\"),1:6)\nE₇₍₁₂₃₄₅₆₎=E₆\n\njulia> refrep(W,longest(W))\n7×7 Array{Int64,2}:\n  0   0   0   0   0  -1  2\n  0  -1   0   0   0   0  2\n  0   0   0   0  -1   0  3\n  0   0   0  -1   0   0  4\n  0   0  -1   0   0   0  3\n -1   0   0   0   0   0  2\n  0   0   0   0   0   0  1\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.PermRoot.PermX","page":"Gapjm Documentation","title":"Gapjm.PermRoot.PermX","text":"PermX(W,M::AbstractMatrix)\n\nLet  M be  a linear  transformation of  reflection representation  of W which  preserves the set  of roots of  parent(W), and normalizes W (for the  action of  matrices on  the right).  PermX returns the corresponding permutation  of the roots of parent(W);  it returns nothing if M does not normalize the set of roots.\n\njulia> W=reflection_subgroup(rootdatum(\"E7sc\"),1:6)\nE₇₍₁₂₃₄₅₆₎=E₆\n\njulia> PermX(W,refrep(W,longest(W)))==longest(W)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.reflections","page":"Gapjm Documentation","title":"Gapjm.PermRoot.reflections","text":"list of same length as W.roots giving corresponding reflections\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.refleigen","page":"Gapjm Documentation","title":"Gapjm.PermRoot.refleigen","text":"'refleigen(W)'\n\nLet  W  be  a  reflection  group  on the vector space V. refleigen(W) returns  the  list  for  each  conjugacy  classes  of the eigenvalues of an element of that class acting on V, as a list of Root1.\n\njulia> refleigen(coxgroup(:B,2))\n5-element Array{Array{Root1,1},1}:\n [1, 1]\n [1, -1]\n [-1, -1]\n [1, -1]\n [ζ₄, ζ₄³]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.reflchar","page":"Gapjm Documentation","title":"Gapjm.PermRoot.reflchar","text":"reflchar(W,w)\n\nReturns  the trace  of the  element w  of the  reflection group W as an endomorphism of the vector space V on which W acts. This is the same as trace(refrep(W,w)).\n\njulia-repl``` julia> W=coxgroup(:B,3) B₃\n\njulia> reflchar(W,longest(W)) -3 julia-repl```\n\n\n\n\n\nreflchar(W)\n\nReturns  the reflection character of the  reflection group W. This is the same  as map(c->reflchar(W,c),class-reps(W)). When W is irreducible, it is also CharTable(W).irr[charinfo(W)[:extRefl][2]].\n\njulia> reflchar(coxgroup(:A,3))\n5-element Array{Int64,1}:\n  3\n  1\n -1\n  0\n -1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.simple_conjugating_element","page":"Gapjm Documentation","title":"Gapjm.PermRoot.simple_conjugating_element","text":"for each root element conjugative representative to root\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.simple_representatives","page":"Gapjm Documentation","title":"Gapjm.PermRoot.simple_representatives","text":"for each root index of simple representative\n\n\n\n\n\nreturn for each root the index of the first simple root conjugate to it\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.invariant_form","page":"Gapjm Documentation","title":"Gapjm.PermRoot.invariant_form","text":"invariant_form(W)\n\nThis  function returns the matrix F  of an Hermitian form invariant under the action of the reflection group W. That is, if M is the matrix of an element of W, then M*F*M'=F.\n\njulia> W=ComplexReflectionGroup(4)\nG₄\n\njulia> invariant_form(W)\n2×2 Array{Cyc{Rational{Int64}},2}:\n 1  0\n 0  2\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.invariants","page":"Gapjm Documentation","title":"Gapjm.PermRoot.invariants","text":"invariants(W)\n\nreturns  the fundamental invariants of W in its reflection representation V.  That is, returns  a set of  algebraically independent elements of the symmetric  algebra  of  the  dual  of  V which generate the W-invariant polynomial  functions on V. Each such invariant function is returned as a function:  if e₁,…,eₙ is a basis of V and f is the function, then the value  of the polynomial  function on a₁e₁+…+aₙeₙ  is obtained by calling f(a₁,…,aₙ). This function depends on the classification, and is dependent on the exact reflection representation of W. So for the moment it is only implemented   when  the  reflection   representation  for  the  irreducible components has the same Cartan matrix as the one provided by CHEVIE for the corresponding  irreducible  group.  The  polynomials  are invariant for the natural   action  of   the  group   elements  as   matrices;  that  is,  if m==refrep(W,w)  for  some  w  in  W,  then an invariant f satisfies f(a₁,…,aₙ)=f(v₁,…,vₙ)   where  [v₁,…,vₙ]=[a₁,…,aₙ]×m.  This  action  is implemented on Mvps by the function ^.\n\njulia> W=coxgroup(:A,2)\nA₂\n\njulia> @Mvp x,y,z\n\njulia> i=invariants(W);\n\njulia> i[1](x,y)\nMvp{Int64}: -2x²+2xy-2y²\n\njulia> i[2](x,y)\nMvp{Int64}: 6x²y-6xy²\n\njulia> W=ComplexReflectionGroup(24)\nG₂₄\n\njulia> i=invariants(W)[1];\n\njulia> p=i(x,y,z)\nMvp{Rational{Int64}}: (14//1)x⁴+(-12//1)x²y²+(-42//1)x²yz+(21//2)x²z²+(18//7)y⁴+(-6//1)y³z+(-9//2)y²z²+(-21//8)z⁴\n\njulia> p^refrep(W,1)-p\nMvp{Cyc{Rational{Int64}}}: 0\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.generic_order","page":"Gapjm Documentation","title":"Gapjm.PermRoot.generic_order","text":"generic_order(W,q)\n\nreturns  the \"compact\" generic order of W as a polynomial in q. This is q^(Nₕ)Πᵢ(q^(dᵢ)-1)  where dᵢ  are the  reflection degrees  and Nₕ the number  of reflecting hyperplanes. For a Weyl group, it is the order of the associated  semisimple  finite  reductive  group  over  the  field with q elements.\n\njulia> Pol(:q)\nPol{Int64}: q\n\njulia> PermRoot.generic_order(ComplexReflectionGroup(4),q)\nPol{Int64}: q¹⁴-q¹⁰-q⁸+q⁴\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.torus_order","page":"Gapjm Documentation","title":"Gapjm.PermRoot.torus_order","text":"torus_order(W,i,q)\n\nreturns  as a  polynomial in  q the  toric order  of the i-th conjugacy class  of W. This is the characteristic  polynomial of an element of that class  on  the  reflection  representation  of  W.  It is the same as the generic  order of the reflection subcoset  of W determined by the trivial subgroup and a representative of the i-th conjugacy class.\n\njulia> W=ComplexReflectionGroup(4);Pol(:q);\n\njulia> torus_order.(Ref(W),1:HasType.NrConjugacyClasses(W),q)\n7-element Array{Pol{Cyc{Int64}},1}:\n q²-2q+1\n q²+2q+1\n q²+1\n q²-ζ₃q+ζ₃²\n q²+ζ₃q+ζ₃²\n q²+ζ₃²q+ζ₃\n q²-ζ₃²q+ζ₃\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.parabolic_representatives","page":"Gapjm Documentation","title":"Gapjm.PermRoot.parabolic_representatives","text":"parabolic_representatives(W)\n\nReturns   a   list   of   indices of roots of W   describing representatives  of orbits of parabolic subgroups under conjugation by W. For Coxeter groups, each orbit has a representative whose indices is a subset of eachindex(gens(W)). This may not be the case in general.\n\njulia> parabolic_representatives(coxgroup(:A,4)) 7-element Array{Array{Int64,1},1}:  []  [1]  [1, 2]  [1, 3]  [1, 2, 3]  [1, 2, 4]  [1, 2, 3, 4] gap> ParabolicRepresentatives(ComplexReflectionGroup(3,3,3)); [ [  ], [ 1 ], [ 1, 2 ], [ 1, 3 ], [ 1, 20 ], [ 2, 3 ], [ 1, 2, 3 ] ]\n\nparabolic_representatives(W,r)\n\nIf  a second  argument <r>  is given,  returns only  representatives of the parabolic subgroups of semisimple rank <r>. julia> parabolic_representatives(coxgroup(:A,4),2) 2-element Array{Array{Int64,1},1}:  [1, 2]  [1, 3] gap> ParabolicRepresentatives(ComplexReflectionGroup(3,3,3),2); [ [ 1, 2 ], [ 1, 3 ], [ 1, 20 ], [ 2, 3 ] ]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.ComplexR.ComplexReflectionGroup","page":"Gapjm Documentation","title":"Gapjm.ComplexR.ComplexReflectionGroup","text":"ComplexReflectionGroup(STnumber)\n\nComplexReflectionGroup(p,q,r)\n\nThe  first form of ComplexReflectionGroup  returns the complex reflection group which has Shephard-Todd number STnumber, see cite{ST54}. The second form returns the imprimitive complex reflection group G(p,q,r).\n\njulia> G=ComplexReflectionGroup(4)\nG₄\n\njulia> degrees(G)\n2-element Array{Int64,1}:\n 4\n 6\n\njulia> length(G)\n24\n\njulia> fakedegrees(G,Pol(:q))\n7-element Array{Pol{Int64},1}:\n 1       \n q⁴      \n q⁸      \n q⁷+q⁵   \n q⁵+q³   \n q³+q    \n q⁶+q⁴+q²\n\njulia> ComplexReflectionGroup(2,1,6)\nB₆\n\n\n\n\n\n","category":"function"},{"location":"#Hecke-algebras-1","page":"Gapjm Documentation","title":"Hecke algebras","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"HeckeAlgebras\nhecke\ncentral_monomials\nclass_polynomials\nchar_values\nschur_elements\nFactorizedSchurElement\nFactorizedSchurElements\nisrepresentation\nrefrep(::HeckeAlgebra)","category":"page"},{"location":"#Gapjm.HeckeAlgebras","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras","text":"This   module  ports   Chevie  functionality   for  Iwahori-Hecke  algebras associated to Coxeter groups.\n\nLet  (W,S) be a Coxeter  system where mₛₜ is  the order of st for s,t∈ S. Let R be a commutative ring with 1 and for s∈ S let uₛ₀,uₛ₁∈ R be elements which depend ony on the conjugacy class of s in W (this is the same  as requiring that uₛᵢ=uₜᵢ whenever mₛₜ is odd). The Iwahori-Hecke algebra of W over R with parameters uₛᵢ is a deformation of the group algebra  of W over R defined as  follows: it is the unitary associative R-algebra generated by elements Tₛ, s∈ S subject to the relations:\n\n(Tₛ-uₛ₀)(Tₛ-uₛ₁)=0 for all s∈ S (the quadratic relations)\n\nTₛTₜTₛ= TₜTₛTₜ with mₛₜ factors on each side (the braid relations)\n\nIf  uₛ₀=1 and  uₛ₁=-1 for  all s  then the quadratic relations become Tₛ²=1 and the deformation of the group algebra is trivial.\n\nSince  the generators Tₛ satisfy the  braid relations, the algebra H is in  fact a quotient of the group algebra of the braid group associated with W.  It follows that, if w=s_1⋯ s_m  is a reduced expression of w ∈ W then  the  product  Tₛ_1⋯ Tₛ_m  depends  only  on w. We will therefore denote by T_w. We have T_1=1.\n\nIf  one of uₛ₀ or uₛ₁ is invertible  in R, for example uₛ₁, then by changing  the generators  to T′ₛ=-Tₛ/uₛ₁,  and setting qₛ=-uₛ₀/uₛ₁, the braid  relations do no change  (since when mₛₜ is  odd we have uₛᵢ=uₜᵢ) but  the quadratic relations become  (T′ₛ-qₛ)(T′ₛ+1)=0. This last form is the  most common  form considered  in the  literature. Another common form, considered  in  the  context  of  Kazhdan-Lusztig  theory, is uₛ₀=√qₛ and uₛ₁=-√qₛ⁻¹.  The general form of parameters provided is a special case of general cyclotomic Hecke algebras, and can be useful in many contexts.\n\nFor  some  algebras  the  character  table,  and in general Kazhdan-Lusztig bases,  require a square root of -uₛ₀uₛ₁.  We provide a way to specify it with  the  field  .rootpara  which  can  be  given  when constructing the algebra. If not given a root is automatically extracted when needed (and we know  how to compute it) by the function RootParameter. Note however that sometimes  an  explicit  choice  of  root  is  necessary  which  cannot  be automatically determined.\n\nThere  is a universal choice  for R and uₛᵢ:  Let uₛᵢ:s∈ S,i∈[0,1] be indeterminates   such  that  uₛᵢ=uₜᵢ  whenever  mₛₜ  is  odd,  and  let A=ℤ[uₛᵢ] be the corresponding polynomial ring. Then the Hecke algebra H of  W over a  with parameters uₛᵢ  is called the generic Iwahori-Hecke algebra  of  with  W.  Any  other  algebra  with parameters vₛᵢ can be obtained  by specialization from  H: There is  a unique ring homomorphism f:A  → R such that f(uₛᵢ)=vₛᵢ  for all i. Then we  can view R as an A-module via f and we can identify the other algebra to R _A H.\n\nThe  elements {T_w∣w∈ W} actually form an  R-basis of H if one of the uₛᵢ  is invertible for all s. The  structure constants in that basis is obtained  as  follows.  To  multiply  T_v  by  T_w,  choose  a  reduced expression for v, say v=s_1 ⋯ s_k and apply inductively the formula:\n\nT_sT_w=T_sw               if l(sw)=l(w)+1\n\nT_sT_w=-uₛ₀uₛ₁T_sw+(uₛ₀+uₛ₁)T_w if l(sw)=l(w)-1.\n\nIf all s we have uₛ₀=q, uₛ₁=-1 then we call the corresponding algebra the one-parameter or Spetsial Iwahori-Hecke algebra associated with W; it can  be obtained with the  simplified call 'hecke(W,q)'. Certain invariants of  the irreducible characters of  this algebra play a  special role in the representation  theory of the underlying  finite Coxeter groups, namely the a- and A-invariants. For basic properties of Iwahori-Hecke algebras and their  relevance to the representation theory of finite groups of Lie type, see for example Curtis and Reiner 1987, Sections~67 and 68.\n\nIn  the  following  example,  we  compute  the multiplication table for the 0-Iwahori–Hecke algebra associated with the Coxeter group of type A_2.\n\njulia> W=coxgroup(:A,2)\nA₂\n\njulia> H=hecke(W,0)             # One-parameter algebra with `q=0`\nhecke(A₂,0)\n\njulia> T=Tbasis(H);             # Create the `T` basis\n\njulia> el=words(W)\n6-element Array{Array{Int8,1},1}:\n []       \n [2]      \n [1]      \n [2, 1]   \n [1, 2]   \n [1, 2, 1]\n\njulia> T.(el)*permutedims(T.(el))        # multiplication table\n6×6 Array{HeckeTElt{Perm{Int16},Int64,HeckeAlgebra{Int64,FiniteCoxeterGroup{Perm{Int16},Int64}}},2}:\n T.    T₂     T₁     T₂₁    T₁₂    T₁₂₁ \n T₂    -T₂    T₂₁    -T₂₁   T₁₂₁   -T₁₂₁\n T₁    T₁₂    -T₁    T₁₂₁   -T₁₂   -T₁₂₁\n T₂₁   T₁₂₁   -T₂₁   -T₁₂₁  -T₁₂₁  T₁₂₁ \n T₁₂   -T₁₂   T₁₂₁   -T₁₂₁  -T₁₂₁  T₁₂₁ \n T₁₂₁  -T₁₂₁  -T₁₂₁  T₁₂₁   T₁₂₁   -T₁₂₁\n\n\nThus,  we work  with algebras  with arbitrary  parameters. We will see that this also works on the level of characters and representations.\n\nfinally, benchmarks on julia 1.0.2\n\njulia> function test_w0(n)\n         W=coxgroup(:A,n)\n         Tbasis(hecke(W,Pol([1],1)))(longest(W))^2\n       end\ntest_w0 (generic function with 1 method)\n\njulia> @btime test_w0(7);\n  132.737 ms (1788153 allocations: 157.37 MiB)\n\nCompare to GAP3 where the following function takes 0.92s\n\ntest_w0:=function(n)local W,T,H;\n  W:=CoxeterGroup(\"A\",n);H:=Hecke(W,X(Rationals));T:=Basis(H,\"T\");\n  T(LongestCoxeterWord(W))^2;\nend;\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.HeckeAlgebras.hecke","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras.hecke","text":"hecke( W [, parameter][,rootpara=r]) return a Hecke algebra for W\n\nExample\n\njulia> W=coxgroup(:B,2)\nB₂\n\njulia> Pol(:q)\nPol{Int64}: q\n\njulia> H=hecke(W,q)\nhecke(B₂,q)\n\njulia> H.para\n2-element Array{Array{Pol{Int64},1},1}:\n [q, -1]\n [q, -1]\n\njulia> H=hecke(W,q^2,rootpara=q)\nhecke(B₂,q²,rootpara=q)\n\njulia> H.para,rootpara(H)\n(Array{Pol{Int64},1}[[q², -1], [q², -1]], Pol{Int64}[q, q])\n\njulia> H=hecke(W,[q^2,q^4],rootpara=[q,q^2])\nhecke(B₂,Pol{Int64}[q², q⁴],rootpara=Pol{Int64}[q, q²])\n\njulia> H.para,rootpara(H)\n(Array{Pol{Int64},1}[[q², -1], [q⁴, -1]], Pol{Int64}[q, q²])\n\njulia> H=hecke(W,9,rootpara=3)\nhecke(B₂,9,rootpara=3)\n\njulia> H.para,rootpara(H)\n([[9, -1], [9, -1]], [3, 3])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.HeckeAlgebras.central_monomials","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras.central_monomials","text":"central_monomials(H)   Let  H be an Hecke  algebra for the reflection  group W. The function   returns  the  scalars  by  which  the  image  in  H  of  π  acts on the   irreducible  representations of  the Iwahori-Hecke  algebra. When  W is   irreducible, π is the generator of the center of the pure braid group. In   general,  it  is  the  product  of  such  elements  for  each irreducible   component. When W is an irreducible Coxeter group, π is the lift to the   braid group of the square of the longest element of W.\n\njulia> H=hecke(coxgroup(:H,3),Pol(:q))\nhecke(H₃,q)\n\njulia> central_monomials(H)\n10-element Array{Pol{Cyc{Int64}},1}:\n 1  \n q³⁰\n q¹²\n q¹⁸\n q¹⁰\n q¹⁰\n q²⁰\n q²⁰\n q¹⁵\n q¹⁵\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.HeckeAlgebras.class_polynomials","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras.class_polynomials","text":"class_polynomials(h)\n\nreturns the class polynomials of the Hecke element h of the Hecke algebra H=h.H  with respect  to representatives  reps of  minimal length in the conjugacy  classes  of  the  Coxeter  group  W=H.W.  Such  minimal length representatives  are given by  the function classinfo(W)[:classtext]. The vector  p of these polynomials has the property that if X is the matrix of  the values of  the irreducible characters  of H on  T_w (for w in reps),  then the product X*p  is the list of  values of the irreducible characters on h.\n\njulia> W=CoxSym(4)\n𝔖 ₄\n\njulia> H=hecke(W,Pol(:q))\nhecke(𝔖 ₄,q)\n\njulia> h=Tbasis(H)(longest(W))\nT₁₂₁₃₂₁\n\njulia> p=class_polynomials(h)\n5-element Array{Pol{Int64},1}:\n 0        \n 0        \n q²       \n q³-2q²+q \n q³-q²+q-1\n\nThe class polynomials were introduced in  cite{GP93}.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.HeckeAlgebras.char_values","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras.char_values","text":"char_values(h)\n\nh  is an  element of  an Iwahori-Hecke  algebra H  (in any  basis). The function  returns the  values of  the irreducible  characters of H on h (the   method  used  is  to  convert  to   the  T  basis,  and  then  use class_polynomials).\n\njulia> W=coxgroup(:B,2)\nB₂\n\njulia> H=hecke(W,q^2;rootpara=q)\nhecke(B₂,q²,rootpara=q)\n\njulia> char_values(Cpbasis(H)(1,2,1))\n5-element Array{Pol{Int64},1}:\n -q-q⁻¹        \n q+q⁻¹         \n 0             \n q³+2q+2q⁻¹+q⁻³\n 0             \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.HeckeAlgebras.schur_elements","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras.schur_elements","text":"schur_elements(H)\n\nreturns the list of Schur elements for the (cyclotomic) Hecke algebra H\n\njulia> H=hecke(ComplexReflectionGroup(4),Pol(:q))\nhecke(G₄,Pol{Cyc{Int64}}[q, ζ₃, ζ₃²])\n\njulia> s=schur_elements(H)\n7-element Array{Pol{Cyc{Rational{Int64}}},1}:\n q⁸+2q⁷+3q⁶+4q⁵+4q⁴+4q³+3q²+2q+1              \n 2√-3+(6+4√-3)q⁻¹+12q⁻²+(6-4√-3)q⁻³+(-2√-3)q⁻⁴\n -2√-3+(6-4√-3)q⁻¹+12q⁻²+(6+4√-3)q⁻³+(2√-3)q⁻⁴\n 2+2q⁻¹+4q⁻²+2q⁻³+2q⁻⁴                        \n (-2ζ₃-ζ₃²)q³+(3-√-3)q²+3q+3+√-3+(-ζ₃-2ζ₃²)q⁻¹\n (-ζ₃-2ζ₃²)q³+(3+√-3)q²+3q+3-√-3+(-2ζ₃-ζ₃²)q⁻¹\n q²+2q+2+2q⁻¹+q⁻²                             \n\njulia> CycPol.(s)\n7-element Array{CycPol{Cyc{Rational{Int64}}},1}:\n Φ₂²Φ₃Φ₄Φ₆             \n (2√-3)q⁻⁴Φ₂²Φ′₃Φ′₆    \n (-2√-3)q⁻⁴Φ₂²Φ″₃Φ″₆   \n 2q⁻⁴Φ₃Φ₄              \n (-2ζ₃-ζ₃²)q⁻¹Φ₂²Φ′₃Φ″₆\n (-ζ₃-2ζ₃²)q⁻¹Φ₂²Φ″₃Φ′₆\n q⁻²Φ₂²Φ₄              \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.HeckeAlgebras.FactorizedSchurElement","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras.FactorizedSchurElement","text":"FactorizedSchurElement(H,phi)\n\nreturns  the factorized schur_element (see FactorizedSchurElements) of the Hecke  algebra  H  for  the  irreducible  character of H of parameter phi (see charinfo(W)[:charparams])\n\njulia> W=ComplexReflectionGroup(4)\nG₄\n\njulia> @Mvp x,y; H=hecke(W,[[1,x,y]])\nhecke(G₄,Mvp{Int64,Int64}[1, x, y])\n\njulia> FactorizedSchurElement(H,[[2,5]])\n-x⁻¹yΦ₂(xy)Φ₁(x)Φ₆(xy⁻¹)Φ₁(y)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.HeckeAlgebras.FactorizedSchurElements","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras.FactorizedSchurElements","text":"FactorizedSchurElements(H)\n\nLet  H be  a Hecke  algebra for  the complex  reflection group W, whose parameters are all (Laurent) monomials in some variables x₁,…,xₙ, and let K  be the field of definition of W. Then Maria Chlouveraki has shown that the  Schur elements  of H  then take  the particular  form M ∏_Φ Φ(M_Φ) where  Φ runs over a list of  K-cyclotomic polynomials, and M and M_Φ are  (Laurent)  monomials  (in  possibly  some  fractional  powers)  of the variables  xᵢ.  The  function  FactorizedSchurElements  returns  a data structure which shows this factorization.\n\njulia> W=ComplexReflectionGroup(4)\nG₄\n\njulia> @Mvp x,y; H=hecke(W,[[1,x,y]])\nhecke(G₄,Mvp{Int64,Int64}[1, x, y])\n\njulia> FactorizedSchurElements(H)\n7-element Array{Gapjm.HeckeAlgebras.FactSchur,1}:\n x⁻⁴y⁻⁴Φ₂(xy)Φ₁Φ₆(x)Φ₁Φ₆(y)\n Φ₂(x²y⁻¹)Φ₁Φ₆(x)Φ₁Φ₆(xy⁻¹)\n -x⁻⁴y⁵Φ₁Φ₆(xy⁻¹)Φ₂(xy⁻²)Φ₁Φ₆(y)\n -x⁻¹yΦ₂(xy)Φ₁(x)Φ₆(xy⁻¹)Φ₁(y)\n -x⁻⁴yΦ₂(x²y⁻¹)Φ₁(x)Φ₁(xy⁻¹)Φ₆(y)\n x⁻¹y⁻¹Φ₆(x)Φ₁(xy⁻¹)Φ₂(xy⁻²)Φ₁(y)\n x⁻²yΦ₂(x²y⁻¹)Φ₂(xy)Φ₂(xy⁻²)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.HeckeAlgebras.isrepresentation","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras.isrepresentation","text":"isrepresentation(H::HeckeAlgebra,r)\n\nreturns true or false, according  to whether a  given set r of matrices corresponding to the standard generators  of the Coxeter group H.W defines a representation of the Iwahori-Hecke algebra H or not.\n\njulia> H=hecke(coxgroup(:F,4))\nhecke(F₄,1)\n\njulia> isrepresentation(H,refrep(H))\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.PermRoot.refrep-Tuple{HeckeAlgebra}","page":"Gapjm Documentation","title":"Gapjm.PermRoot.refrep","text":"refrep(H)\n\nreturns  a list of matrices which give the reflection representation of the Iwahori-Hecke algebra H.\n\njulia> Pol(:q);W=coxgroup(:B,2);H=hecke(W,q)\nhecke(B₂,q)\n\njulia> refrep(H)\n2-element Array{Array{Pol,2},1}:\n [-1 0; -q q]\n [q -2; 0 -1]\n\njulia> H=hecke(coxgroup(:H,3))\nhecke(H₃,1)\n\njulia> refrep(H)\n3-element Array{Array{Cyc{Rational{Int64}},2},1}:\n [-1 0 0; -1 1 0; 0 0 1]\n [1 (-3-√5)/2 0; 0 -1 0; 0 -1 1]\n [1 0 0; 0 1 -1; 0 0 -1]\n\n\n\n\n\n","category":"method"},{"location":"#Kazhdan-Lusztig-polynomials-and-bases-1","page":"Gapjm Documentation","title":"Kazhdan-Lusztig polynomials and bases","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"KL\nKLPol\nTbasis\nKL.getCp\ncharacter\nrepresentation(::LeftCell,H)\nLeftCells\nLeftCell","category":"page"},{"location":"#Gapjm.KL","page":"Gapjm Documentation","title":"Gapjm.KL","text":"This  module ports Chevie functionality for Kazhdan-Lusztig polynomials and bases.\n\nLet  ℋ be  the Iwahori-Hecke algebra  of a Coxeter  system (W,S), with quadratic  relations (Tₛ-uₛ₀)(Tₛ-uₛ₁)=0  for s∈  S. If  -uₛ₀uₛ₁ has a square  root  wₛ,  we  can  scale  the  basis  Tₛ  to  get  a new basis tₛ=-Tₛ/wₛ    with   quadratic    relations   (tₛ-vₛ)(tₛ+vₛ⁻¹)=0   where vₛ=wₛ/uₛ₁.   The  most  general  case   when  Kazhdan-Lusztig  bases  and polynomials  can be defined is when the parameters vₛ belong to a totally ordered  abelian group Γ  for multiplication, see  Lus83. We set Γ⁺= {γ∈ Γ∣γ>0} and Γ⁻={γ⁻¹∣γ∈ Γ⁺}={γ∈ Γ∣γ<0}.\n\nThus  we assume ℋ defined over the ring ℤ[Γ], the group algebra of Γ over  ℤ, and the quadratic  relations of ℋ  associate to each s∈ S a vₛ∈  Γ⁺ such that  (tₛ-vₛ)(tₛ+vₛ⁻¹)=0. We also  set qₛ=vₛ² and define the  basis Tₛ=vₛtₛ with quadratic relations (Tₛ-qₛ)(Tₛ+1)=0; for w∈ W with reduced expression w=s₁…sₙ we define q_w∈ Γ⁺ by q_w^½=v_{s₁}…v_{sₙ} and let q_w=(q_w^½)².\n\nWe  define the bar involution on ℋ  by linearity: on ℤ[Γ] we define it by  overline_γ Γa_γγ= _γ Γ a_γ γ¹ and we extend it to ℋ by  overline  Tₛ=Tₛ¹.  Then  the  Kazhdan-Lusztig  basis C′_w is defined  as  the  only  basis  of  ℋ  stable  by the bar involution and congruent to t_w modulo _w WΓ t_w.\n\nThe  basis C′_w can be computed  as follows. We define elements R_xy of  ℤ[Γ] by  T_y¹=_x overlineR_xy¹  q_x¹T_x. We  then define inductively  the Kazhdan-Lusztig  polynomials (in  this general  context we should  say the  Kazhdan-Lusztig elements  of ℤ[Γ],  which belong  to the subalgebra  of ℤ[Γ] generated by  the qₛ) by P_xw=τ_(q_wq_x)^½ (_xywR_xyP_yw)  where τ  is the  truncation: τ_nu _γ Γ a_γγ= _γnua_γγ; the induction is thus on decreasing x for the Bruhat order  and  starts  at  P_ww=1.  We  have  then  C_w=_y q_w^-12 P_ywT_y.\n\nThe  Chevie code  for the  Kazhdan-Lusztig bases  C, D and their primed versions, has been initially written by Andrew Mathas around 1994, who also contributed  to  the  design  of  the programs dealing with Kazhdan-Lusztig bases. He also implemented some other bases, such as the Murphy basis which can  be  found  in  the  Chevie  contributions  directory. The code for the unequal  parameters  case  has  been  written  around  1999  by F.Digne and J.Michel. The other Kazhdan-Lusztig bases are computed in terms of the C′ basis.\n\nWhen  the ℤ[Γ] is a  Laurent polynomial ring the  bar operation is taking the  inverse of  the variables,  and truncation  is keeping terms of degree smaller or equal to that of ν. It is possible to use arbitrary groups Γ as   long   as   methods   bar:_γ   Γ   a_γγ  _γ  Γ  a_γγ¹, positive_part  : _γ  Γ a_γγ  _γ 1  a_γγ and negative_part: _γ  Γ  a_γγ    _γ  1  a_γγ  have been defined on ℤ[Γ]. These operations   will   be   used   internally   by  the  programs  to  compute Kazhdan-Lusztig bases.\n\nfinally, benchmarks on julia 1.0.2\n\njulia> function test_kl(W)\n         q=Pol([1],1); H=hecke(W,q^2,rootpara=q)\n         C=Cpbasis(H); T=Tbasis(H)\n         [T(C(w)) for w in elements(W)]\n       end\ntest_kl (generic function with 1 method)\n\njulia> @btime test_kl(coxgroup(:F,4));\n2.265 s (22516606 allocations: 1.81 GiB)\n\nCompare to GAP3 where the following function takes 11s for F4\n\ntest_kl:=function(W)local q,H,T,C;\n  q:=X(Rationals);H:=Hecke(W,q^2,q);\n  T:=Basis(H,\"T\");C:=Basis(H,\"C'\");\n  List(Elements(W),e->T(C(e)));\nend;\n\nAnother benchmark:\n\nfunction test_kl2(W)\n  el=elements(W)\n  [KLPol(W,x,y) for x in el, y in el]\nend\n\ntest_kl2 (generic function with 1 method)\n\njulia>@btime test_kl2(coxgroup(:F,4));\n  8s (97455915 allocations: 6.79 GiB)\n\nCompare to GAP3 where the following function takes 42s for F4\n\ntest_kl2:=function(W)local el;\n  el:=Elements(W);\n  List(el,x->List(el,y->KazhdanLusztigPolynomial(W,x,y)));\nend;\n\nWe provide also functionality to study the Kazhdan-Lusztig left cells (for the equal-parameter Hecke algebra).\n\njulia> W=coxgroup(:H,3)\nH₃\n\njulia> c=LeftCells(W)\n22-element Array{LeftCell{FiniteCoxeterGroup{Perm{Int16},Cyc{Int64}}},1}:\n LeftCell<H₃: duflo= character=φ₁‚₀>\n LeftCell<H₃: duflo=123 character=φ₁‚₁₅>\n LeftCell<H₃: duflo=(15) character=φ₅‚₅>\n LeftCell<H₃: duflo=(10) character=φ₅‚₅>\n LeftCell<H₃: duflo=(14) character=φ₅‚₅>\n LeftCell<H₃: duflo=7 character=φ₅‚₅>\n LeftCell<H₃: duflo=(12) character=φ₅‚₅>\n LeftCell<H₃: duflo=(9,12) character=φ₅‚₂>\n LeftCell<H₃: duflo=(5,11) character=φ₅‚₂>\n LeftCell<H₃: duflo=13 character=φ₅‚₂>\n ⋮\n LeftCell<H₃: duflo=(8,13) character=φ₃‚₆+φ₃‚₈>\n LeftCell<H₃: duflo=(1,15) character=φ₃‚₆+φ₃‚₈>\n LeftCell<H₃: duflo=3 character=φ₃‚₁+φ₃‚₃>\n LeftCell<H₃: duflo=2 character=φ₃‚₁+φ₃‚₃>\n LeftCell<H₃: duflo=1 character=φ₃‚₁+φ₃‚₃>\n LeftCell<H₃: duflo=6 character=φ₄‚₃+φ₄‚₄>\n LeftCell<H₃: duflo=(13) character=φ₄‚₃+φ₄‚₄>\n LeftCell<H₃: duflo=(11) character=φ₄‚₃+φ₄‚₄>\n LeftCell<H₃: duflo=9 character=φ₄‚₃+φ₄‚₄>\n\nsee  also  the  functions  elements,  character,  representation  and WGraph  for left  cells. The  operations length,  in (which  refer to elements)  and == (which  compares Duflo involutions)  are also defined for  left cells. When  Character(c) has been  computed, then c.prop[:a] also  has been bound which holds the common value of Lusztig's a-function for the elements of c and The irreducible constituents of character(c).\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.KL.KLPol","page":"Gapjm Documentation","title":"Gapjm.KL.KLPol","text":"KLPol(W,y,w) returns the Kazhdan-Lusztig polynomial P_{y,w} of W\n\nTo  compute Kazhdan-Lusztig polynomials in  the one-parameter case it seems that  the best  approach still  is by  using the  recursion formula  in the original  article KL79. One can first run  a number of standard checks on a given  pair  of  elements  to  see  if the computation of the corresponding polynomial  can be reduced to a similar computation for elements of smaller length. One such check involves the notion of critical pairs (cf. Alv87): a pair  of elements w₁,w₂∈  W such that  w₁≤w₂ is critical  if ℒ(w₂) ⊆ ℒ(w₁)  and ℛ (w₂)⊆ ℛ (w₁), where ℒ  and ℛ denote the left and right descent  set, respectively.  Now if  y≤w ∈  W are arbitrary elements then there   always  exists  a  critical  pair   z≤w  with  y≤z≤w  and  then P_{y,w}=P_{z,w}.  Given two elements y and w, such a critical pair is found by the function 'critical_pair'. Whenever the polynomial corresponding to a critical pair is computed then this pair and the polynomial are stored in the property :klpol of the underlying Coxeter group.\n\njulia> W=coxgroup(:B,3)\nB₃\n\njulia> map(i->map(x->KLPol(W,one(W),x),elements(W,i)),1:W.N)\n9-element Array{Array{Pol{Int64},1},1}:\n [1, 1, 1]\n [1, 1, 1, 1, 1]\n [1, 1, 1, 1, 1, 1, 1]\n [1, 1, 1, x+1, 1, 1, 1, 1]\n [x+1, 1, 1, x+1, x+1, 1, x+1, 1]\n [1, x+1, 1, x+1, x+1, x²+1, 1]\n [x+1, x+1, x²+x+1, 1, 1]\n [x²+1, x+1, 1]\n [1]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.HeckeAlgebras.Tbasis","page":"Gapjm Documentation","title":"Gapjm.HeckeAlgebras.Tbasis","text":"julia> W=coxgroup(:B,3)\nB₃\n\njulia> Pol(:v);H=hecke(W,v^2,rootpara=v)\nhecke(B₃,v²,rootpara=v)\n\njulia> C=Cpbasis(H);\n\njulia> T=Tbasis(H);\n\njulia> T(C(1,2))\nv⁻²T.+v⁻²T₂+v⁻²T₁+v⁻²T₁₂\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.KL.getCp","page":"Gapjm Documentation","title":"Gapjm.KL.getCp","text":"getCp(H,w)\n\nreturn C_w expressed in the basis T of the Hecke algebra H.\n\nImplementation JM and FD 1999. We use the formulae: C_w=Σ_ywP_yw(q)q^-l(w)2T_y and if sww then Cₛ C_sw=Cw+Σ_yswμ(ysw)Cy=Σ_vwμᵥ Tᵥ where μᵥ=P_vw(q)q^-l(w)2+Σ_vyswμ(ysw)P_vy(q)q^-l(y)2 It  follows that if deg(μᵥ)=-l(v)  then deg(μᵥ)=-l(v) with leading coefficient  μ(vsw) (this happens exactly for y=v in the sum which occurs in the formula for μᵥ).\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.KL.character","page":"Gapjm Documentation","title":"Gapjm.KL.character","text":"character(c)\n\nReturns  a list l  such that the  character of c.group  afforded by the left cell c is sum(CharTable(c.group).irr[l]).\n\njulia> c=LeftCells(coxgroup(:G,2))[3]\nLeftCell<G₂: duflo=2 character=φ₂‚₁+φ′₁‚₃+φ₂‚₂>\n\njulia> character(c)\n3-element Array{Int64,1}:\n 3\n 5\n 6\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Chars.representation-Tuple{LeftCell,Any}","page":"Gapjm Documentation","title":"Gapjm.Chars.representation","text":"representation(c::LeftCell,H)\n\nreturns  a list of  matrices giving the  representation of H  on the left cell c.\n\njulia> W=coxgroup(:H,3)\nH₃\n\njulia> c=LeftCells(W)[3]\nLeftCell<H₃: duflo=(15) character=φ₅‚₅>\n\njulia> @Mvp q;H=hecke(W,q)\nhecke(H₃,q)\n\njulia> representation(c,H)\n3-element Array{Array{Mvp{Int64,Rational{Int64}},2},1}:\n [-1 0 … 0 0; 0 -1 … 0 q½; … ; 0 0 … q 0; 0 0 … 0 q]\n [-1 q½ … 0 0; 0 q … 0 0; … ; 0 0 … -1 0; 0 q½ … 0 -1]\n [q 0 … 0 0; q½ -1 … 0 0; … ; 0 0 … q 0; 0 0 … 0 -1]\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.KL.LeftCells","page":"Gapjm Documentation","title":"Gapjm.KL.LeftCells","text":"LeftCells(W[,i]) left cells of W [in i-th 2-sided cell]   for the 1-parameter Hecke algebra hecke(W,q)\n\nThe program uses precomputed data(see cite{GH14}) for exceptional types and for  type :A, so  is quite fast  for these types  (it takes 13 seconds to compute  the 101796 left cells for type  E₈). For other types, left cells are  computed from  first principles,  thus computing  many Kazhdan-Lusztig polynomials.  It takes 60  seconds to compute  the left cells  of D₆, for example.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> LeftCells(W)\n4-element Array{LeftCell{FiniteCoxeterGroup{Perm{Int16},Int64}},1}:\n LeftCell<G₂: duflo= character=φ₁‚₀>\n LeftCell<G₂: duflo=12 character=φ₁‚₆>\n LeftCell<G₂: duflo=2 character=φ₂‚₁+φ′₁‚₃+φ₂‚₂>\n LeftCell<G₂: duflo=1 character=φ₂‚₁+φ″₁‚₃+φ₂‚₂>\n\nPrinting such a record displays the character afforded by the left cell and its  Duflo involution; the Duflo involution r  is printed as a subset I of    1:W.N   such    that   r=longest(reflection_subgroup(W,I)),   see describe_involution.\n\nIf  a second argument i is given, the program returns only the left cells which  are in the i-th two-sided cell,  that is whose character is in the i-th family of W (see \"Families of unipotent characters\").\n\njulia> W=coxgroup(:G,2);\njulia> LeftCells(W,1)\n2-element Array{LeftCell{FiniteCoxeterGroup{Perm{Int16},Int64}},1}:\n LeftCell<G₂: duflo=2 character=φ₂‚₁+φ′₁‚₃+φ₂‚₂>\n LeftCell<G₂: duflo=1 character=φ₂‚₁+φ″₁‚₃+φ₂‚₂>\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.KL.LeftCell","page":"Gapjm Documentation","title":"Gapjm.KL.LeftCell","text":"LeftCell(W,w)\n\nreturns  a  record  describing  the  left  cell  of  W  for  hecke(W,q) containing element w.\n\njulia> W=coxgroup(:E,8)\nE₈\n\njulia> LeftCell(W,W((1:8)...))\nLeftCell<E₈: duflo=(42,43) character=φ₃₅‚₂>\n\n\n\n\n\n","category":"type"},{"location":"#Garside-monoids-and-groups,-braids.-1","page":"Gapjm Documentation","title":"Garside monoids and groups, braids.","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Garside\nleft_divisors\nleftgcd\nα\nDualBraidMonoid\nfraction\nword(::Garside.GarsideMonoid,w)\nword(::Garside.GarsideElm)\nelements(::Garside.LocallyGarsideMonoid,l)\nimage\nconjugating_elt\ncentralizer_generators\nconjcat\nendomorphisms\nshrink","category":"page"},{"location":"#Gapjm.Garside","page":"Gapjm Documentation","title":"Gapjm.Garside","text":"Garside  monoids are a general class  of monoids whose most famous examples are  the braid  and dual  braid monoids.  The implementation  of these last monoids is in the framework of a general implementation of Garside monoids.\n\nTo   define  them  we  first  need   to  introduce  some  vocabulary  about divisibility  in monoids. A left divisor of  x is a d such that there exists  y with x=dy (and then we say  that x is a right multiple of d).  We say that a monoid M  is left cancellable if an equality dx=dy implies  x=y. We define symmetrically  right divisors, left multiples and right cancellability. We say that x is an atom if it has no proper left divisor (that is a d such that x=dy with y≠1) apart from 1. A left gcd  of x and y is a common left  divisor d of x and y such that any  other common left divisor is a left divisor of d. Similarly a right lcm  of x and  y is a  common multiple which  is a left divisor of any other common multiple.\n\nWe  call Garside a monoid M which:\n\nis left and right cancellable.\nis generated by its atoms,  which are finite in number.\nadmits left and  right  gcds  and  lcms.\nis such that any element has only finitely many left (or right) divisors.\nadmits a Garside element, which is an element Δ whose set of left and right divisors coincide and generate M.\n\nGarside  elements are not  unique, but there  is a unique  minimal one (for divisibility);  we assume a  Garside element Δ  has been chosen. Then the divisors  of Δ are called  the simples of M.  A Garside monoid embeds into  its group of fractions, which is  called a Garside group (a Garside group  may have  several distinct  Garside structures,  as we  will see for Braid groups of finite Coxeter groups).\n\nWe  also implement locally Garside monoids,  which are monoids where lcms do  not always exist, but exist when any common multiple exists; the set of simples  is then not defined using a  Garside element, but by the condition that  they contain the atoms and are  closed under lcms and taking divisors (see  [BDM01]); since it is not ensured by the existence of Δ, one has to add  the condition that  any element is  divisible by finitely many simples (but  the number of simples can be infinite). The main example is the braid monoid of an infinite Coxeter group. It is not known if these monoids embed in  their group of fractions (though that has been proved for braid monoids of Coxeter groups by Paris [Paris01]) and thus computing in the monoid does not help for computing in the group (only the monoid is implemented here).\n\nWhat allows computing with Garside and locally Garside monoids, and Garside groups,  is the fact  that they admit  normal forms –-  these normal forms where exhibited for braid monoids of Coxeter groups by Deligne [Del72], who extended previous work of Brieskorn, Saito [BS72] and Garside [Gar69]:\n\n(i) Let  M be a locally Garside monoid and let b∈ M. Then there is a unique maximal left simple divisor α(b) of b, called the head of b –- any other simple dividing b on the left divides α(b) on the left.\n\n(ii) Assume  M is a Garside monoid, Δ is  its Garside element and G is its group  of fractions. Then,  given any element  x∈ G, there  is some power Δⁱ such that Δⁱ x∈ M.\n\nA consequence of (i) is that any element has a canonical decomposition as a product of simples, called its left-greedy normal form. If we define ω(x) by  x=α(x)ω(x), then the normal form of x is α(x)α(ω(x))α(ω^2(x))… We use  the normal form to represent elements  of M, and when M is Garside (ii)  to represent elements  of G: given  x∈ G we  compute the smallest power  i  such  that  Δⁱ  x∈  M,  and  we  represent  x by the couple (i,Δ⁻ⁱx).  We are thus reduced to the case where x∈ M, not divisible by Δ,  where we represent  x by the  sequence of simples which constitutes its normal form. We now describe Artin-Tits braid monoids. Let (W,S) be a Coxeter system, that is W has presentation\n\n⟨s∈ S∣s^2=1, sts⋯ =tst⋯   (mₛₜ factors on each side) for s,t∈ S⟩\n\nfor  some Coxeter matrix mₛₜ for s,t∈ S. The braid group B associated to (W,S) is the group defined by the presentation\n\n⟨𝐬∈ 𝐒∣ 𝐬𝐭𝐬⋯ =𝐭𝐬𝐭⋯  (mₛₜ factors on each side) for 𝐬,𝐭∈ 𝐒⟩\n\nThe positive braid monoid B⁺ associated to W is the monoid defined by the  presentation above –- it identifies to the submonoid of B generated by  𝐒 by  the result  of Paris  mentioned above.  This monoid  is locally Garside,  with set of simples  in bijection with elements  of W and atoms the elements of 𝐒; we will denote by 𝐖 the set of simples, and by 𝐰 ↦ w  the bijection between simples and elements  of W. The group W has a length  defined  in  terms  of  reduced expressions. Similarly, having only homogeneous relations, B⁺ has a natural length function. Then 𝐖 can be characterized  as the subset of the elements  of B⁺ of the same length as their image in W.\n\nIf  W is finite, then B⁺ is Garside with Garside element the element of 𝐖 whose image is the longest element  of W. A finite Coxeter group is also  a reflection group in  a real vector space,  thus in its complexified V,  and B has also a topological definition as the fundamental group of the  space Vʳᵉᵍ/W, where Vʳᵉᵍ  is the set of  elements of V which are fixed  by no  non-identity element  of S;  however, we  will not use this here.\n\nGiven a Coxeter group W,\n\nExamples\n\njulia> W=coxgroup(:A,4)\nA₄\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A₄)\n\nconstructs  the  associated  braid  monoid,  and  then  as  a  function 'B' constructs  elements of the braid monoid (or group when W is finite) from a list of generators.\n\njulia> w=B(1,2,3,4)\n1234\n\njulia> w^3\n121321432.343\n\njulia> word(W,α(w^3))\n9-element Array{Int64,1}:\n 1\n 2\n 1\n 3\n 2\n 1\n 4\n 3\n 2\n\njulia> w^4\nδ.232432\n\njulia> inv(w)\n(1234)⁻¹\n\nAs  seen in the fourth  line above, the function  'α(b)' returns the simple α(b)∈ 𝐖 as an element of W.\n\nHow  an element of  a Garside group  is printed is  controlled by IOcontext ':greedy'.  By default, elements are printed  as fractions a⁻¹b where a and  b have no left common divisor. Each  of a and b is printed using its left-greedy normal form, that is a maximal power of the Garside element followed  the rest.  One can  print the  entire element  in the left-greedy normal  from by setting the ':greedy' IOContext; with the same w as above we have:\n\njulia> repr(w^-1,context=IOContext(stdout,:greedy=>true,:limit=>true))\n\"δ⁻¹.232432\"\n\nFinally,  repr gives   w  back   in  a   form  which   after  assigning 'B=BraidMonoid(W)' can be input back into Julia:\n\njulia> repr(w)\n\"B(1,2,3,4)\"\n\njulia> repr(w^3)\n\"B(1,2,1,3,2,1,4,3,2,3,4,3)\"\n\njulia> repr(w^-1)\n\"B(-4,-3,-2,-1)\"\n\nIn  general elements of  a Garside monoid  are displayed thus  as a list of their constituting atoms.\n\nWe  now describe the dual braid monoid.  For that, we first give a possible approach  to construct Garside monoids. Given a  group W and a set S of generators  of W as a monoid, we  define the length l(w) as the minimum number of elements of S needed to write w. We then define left divisors of   x  as  the  d   such  that  there  exists   y  with  x=dy  and l(d)+l(y)=l(x).  We say that w∈ W is  balanced if its set of left and right  divisors coincide,  is a  lattice (where  upper and lower bounds are lcms and gcds) and generates W. Then we have:\n\nsuppose w is balanced and let [1,w] be its set of divisors (an interval for  the partial order  defined by divisibility).  Then the monoid M with generators  [1,w] and relations  xy=z whenever xy=z  holds in W and l(x)+l(y)=l(z)  is Garside,  with simples  [1,w] and  atoms S.  It is called the interval monoid defined by the interval [1,w].\n\nThe  Artin-Tits braid monoid  is an interval  monoid by taking  for S the Coxeter generators, in which case l is the Coxeter length, and taking for w  the longest element of W. The dual monoid, constructed by Birman, Ko and  Lee  for  type  A  and  by  Bessis  for  all  well-generated complex reflection  groups, is obtained in  a similar way, by  taking this time for S  the set of all reflections, and for w a Coxeter element; then l is the  reflection length  'reflength' (for  well-generated complex reflection groups  whihc are not real S contains only those reflections which divide w  for the  reflection length);  for the  dual monoid  the simples are of cardinality  the  generalized  Catalan  numbers.  An  interval  monoid  has naturally  an inverse morphism from M  to W, called 'EltBraid' which is the  quotient map from the  interval monoid to W  which sends back simple braids to [1,w]. #A  last notable  notion is  reversible monoids.  Since in Chevie we store #only  left normal forms, it is easy to compute left lcms and gcds, but hard #to  compute right ones.  But this becomes  easy to do  if the monoid has an #operation  'reverse', which has the property that  'a' is a left divisor of #'b'  if and only if  'reverse(a)' is a right  divisor of 'reverse(b)'. This #holds  for Artin-Tits  and dual  braid monoids;  Artin-Tits monoids  have a #reverse  operation which consists of reversing a word, written as a list of #atoms.  The dual monoid  also has a  reverse operation defined  in the same #way,  but this operation changes  monoid: it goes from  the dual monoid for #the  Coxeter element w to the dual  monoid for the Coxeter element w⁻¹. #The  operations 'RightLcm' and  'RightGcd', as well  quite a few algorithms #have faster implementations if the monoid has a reverse operation.\n\nThis module implements functions to solve the conjugacy problem and compute centralizers  in Garside groups, following the work of Franco, Gebhardt and Gonzalez-Meneses.\n\nTwo  elements w and w' of a monoid  M are conjugate in M if there exists  x∈ M such that wx=xw'; if  M satisfies the Öre conditions, it has  a  group  of  fractions  where  this  becomes  x⁻¹wx=w',  the  usual definition  of conjugacy. A special case  which is even closer to conjugacy in  the group is if there exists y∈  M such that w=xy and w'=yx. This relation  is not transitive in general,  but we call cyclic conjugacy the transitive closure of this relation, a restricted form of conjugacy.\n\nThe  next  observation  is  that  if  w,w'  are conjugate in the group of fractions  of the Garside monoid M then  they are conjugate in M, since if  wx=xw' then  there is  a power  Δⁱ which  is central and such that xΔⁱ∈ M. Then wxΔⁱ=xΔⁱ w' is a conjugation in M.\n\nThe  crucial observation for solving the  conjugacy problem is to introduce inf(w):=sup{i such  that  Δⁱ   divides  w}  and sup(w):=inf{i such  that  w  divides Δⁱ}, and to notice  that the number of  conjugates of w with  same inf and sup as w  is finite. Further, a  theorem of Birman shows  that the maximum inf and  minimum sup in a conjugacy class can be achieved simultaneously; the elements  achieving this are called the super summit set of w. Thus a way to  determine if two elements are conjugate  is to find a representative of both  of them in  their super summit  set, and then  solve conjugacy within that  set. This can also be used  to compute the centralizer of an element: if  we consider  the super  summit set  as the  objects of a category whose morphisms are the conjugations by simple elements, the centralizer is given by the endomorphisms of the given object.\n\nWe illustrate this on an example:\n\njulia> b=B(2,1,4,1,4)\n214.14\n\njulia> c=B(1,4,1,4,3)\n14.143\n\njulia> d=conjugating_elt(b,c)\n(1)⁻¹21321432\n\njulia> b^d\n14.143\n\njulia> centralizer_generators(b)\n3-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 21.1         \n 321432.213243\n 4\n\njulia> C=conjcat(b;ss=:ss)\ncategory with 10 objects and 32 generating maps\n\njulia> C.obj\n10-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 1214.4\n 214.14\n 124.24\n 1343.1\n 14.124\n 143.13\n 24.214\n 134.14\n 13.134\n 14.143\n\nThere  is a faster  solution to the  conjugacy problem given in [gebgon10]: for  each b∈ M, they define a  particular simple left divisor of b, its preferred  prefix  such  that  the  operation  sliding which cyclically conjugates  b by  its preferred  prefix, is  eventually periodic, and the period  is contained in the super summit set  of x. We say that x is in its  sliding circuit if some  iterated sliding of x  is equal to x. The set  of sliding  circuits in  a given  conjugacy class  is smaller than the super  summit  set,  thus  allows  to  solve  the conjugacy problem faster. Continuing from the above example,\n\njulia> word(W,preferred_prefix(b))\n2-element Array{Int64,1}:\n 2\n 1\n\njulia> b^B(preferred_prefix(b))\n1214.4\n\njulia> b1=b^B(preferred_prefix(b))\n1214.4\n\njulia> C=conjcat(b)\ncategory with 2 objects and 6 generating maps\n\njulia> C.obj\n2-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 1214.4\n 1343.1\n\nFinally,  we have implemented  Hao Zheng's algorithm  to extract roots in a Garside monoid:\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A₃)\n\njulia> Pi=B(B.delta)^2\nδ²\n\njulia> root(Pi,2)\nδ\n\njulia> root(Pi,3)\n1232\n\njulia> root(Pi,4)\n132\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Garside.left_divisors","page":"Gapjm Documentation","title":"Gapjm.Garside.left_divisors","text":"left_divisors( M, s)\n\nall  the left divisors of the simple element s of the Garside monoid M, as  a vector  of vectors,  where the  i+1-th vector  holds the  divisors of length i in the atoms.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A₃)\n\njulia> map(x->B.(x),Garside.left_divisors(B,W(1,3,2)))\n4-element Array{Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1},1}:\n [.]   \n [1, 3]\n [13]  \n [132] \n\njulia> B=DualBraidMonoid(W)\nDualBraidMonoid(A₃,c=[1, 3, 2])\n\njulia> map(x->B.(x),Garside.left_divisors(B,W(1,3,2)))\n4-element Array{Array{Gapjm.Garside.GarsideElm{Perm{Int16},DualBraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1},1}:\n [.]                     \n [1, 2, 3, 4, 5, 6]      \n [12, 13, 15, 25, 34, 45]\n [δ]                     \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.leftgcd","page":"Gapjm Documentation","title":"Gapjm.Garside.leftgcd","text":"elts must be simples\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.α","page":"Gapjm Documentation","title":"Gapjm.Garside.α","text":"α(b)\n\nb should be an element of a Garside monoid.  α returns the first simple in the normal form of b.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> b=BraidMonoid(W)(2,1,2,1,1)\n121.1.1\n\njulia> word(W,α(b))\n3-element Array{Int64,1}:\n 1\n 2\n 1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.DualBraidMonoid","page":"Gapjm Documentation","title":"Gapjm.Garside.DualBraidMonoid","text":"Let  W be a well generated complex  reflection group and c be a Coxeter element  of W (if W is a Coxeter group and no c is given a particular one  is chosen  by making  the product  of elements  in a  partition of the Coxeter  diagram in two sets where  elements in each commute pairwise). The result  is the dual braid  monoid determined by W  and c: let w be an element  of W or a sequence  s₁,…,sₙ of integers indices of reflections of W.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> B=DualBraidMonoid(W)\nDualBraidMonoid(A₃,c=[1, 3, 2])\n\njulia> B(2,1,2,1,1)\n12.1.1.1\n\njulia> B(-1,-2,-3,1,1)\n(25.1)⁻¹1.1\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Garside.fraction","page":"Gapjm Documentation","title":"Gapjm.Garside.fraction","text":"fraction(b) returns a tuple (x,y)  of two  elements with  no non-trivial  common left divisor and such that b=inv(x)*y.\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A₃)\n\njulia> b=B( 2, 1, -3, 1, 1)\n(23)⁻¹321.1.1\n\njulia> fraction(b)\n(23, 321.1.1)\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Groups.word-Tuple{Gapjm.Garside.GarsideMonoid,Any}","page":"Gapjm Documentation","title":"Gapjm.Groups.word","text":"word(M::GarsideMonoid,w)\n\nreturns a word in the atoms of M representing the simple w\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A₃)\n\njulia> word(B,B.delta)\n6-element Array{Int64,1}:\n 1\n 2\n 1\n 3\n 2\n 1\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.word-Tuple{Gapjm.Garside.GarsideElm}","page":"Gapjm Documentation","title":"Gapjm.Groups.word","text":"word(b::GarsideElm) returns  a description  of b  as a  list of  the atoms  of which  it is a product.  If b is in the Garside group  but not the Garside monoid, it is represented  in  fraction  normal  form  where  as a special convention the inverses  of  the  atoms  are  represented  by  negating  the corresponding integer.\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A₃)\n\njulia> b=B(2,1,2,1,1)*inv(B(2,2))\n(21)⁻¹1.12.21\n\njulia> word(b)\n7-element Array{Int64,1}:\n -1\n -2\n  1\n  1\n  2\n  2\n  1\n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Groups.elements-Tuple{Gapjm.Garside.LocallyGarsideMonoid,Any}","page":"Gapjm Documentation","title":"Gapjm.Groups.elements","text":"elements(M,l)\n\nM  should  be  a  (locally)  Garside  monoid which has an additive length function  (that is, a product  of l atoms is  not equal to any product of less  than l atoms). GarsideWords(M,l) returns  the list of elements of length l in M.\n\njulia> M=BraidMonoid(coxgroup(:A,2))\nBraidMonoid(A₂)\n\njulia> elements(M,4)\n12-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n δ.1    \n 21.1.1 \n 2.2.2.2\n 12.2.2 \n 1.1.12 \n 12.21  \n δ.2    \n 2.2.21 \n 1.12.2 \n 1.1.1.1\n 21.12  \n 2.21.1 \n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Garside.image","page":"Gapjm Documentation","title":"Gapjm.Garside.image","text":"'image(b::GarsideElm)'\n\nThis  function is defined only if <b>  is an element of an interval monoid, for instance a braid. It returns the image of <b> in the group of which the monoid  is an interval  monoid. For instance  it gives the  projection of a braid in an Artin monoid back to the Coxeter group.\n\ngap>  W := CoxeterGroupSymmetricGroup( 4 );; gap>  b := Braid( W )(2, 1, 2, 1, 1); 121.1.1 gap> p := EltBraid( b ); (1,3) gap> CoxeterWord( W, p ); [ 1, 2, 1 ]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.conjugating_elt","page":"Gapjm Documentation","title":"Gapjm.Garside.conjugating_elt","text":"conjugating_elt(b,b1[,F];ss=:sc)\n\nb  and b1 should  be elements of  the same Garside  group. The function returns  a such that b^a=b1 if such exists, and nothing otherwise. If an  argument ss  is given,  the computation  is done in the corresponding category  –- see \"conjcat\".  If an argument  F is given  it should be an automorphism  of the braid monoid, like the Frobenius of a reflection coset attached  to b.M.W;  the computation  is then  done in  the corresponding F-conjugacy category.\n\njulia> W=coxgroup(:D,4)\nD₄\n\njulia> B=BraidMonoid(W)\nBraidMonoid(D₄)\n\njulia> b=B(2,3,1,2,4,3);b1=B(1,4,3,2,2,2)\n1432.2.2\n\njulia> conjugating_elt(b,b1)\n(134312.23)⁻¹\n\njulia> c=conjugating_elt(b,b1;ss=:cyc)\n232.2\n\njulia> b^c\n1432.2.2\n\njulia> WF=spets(W,Perm(1,2,4))\n³D₄\n\njulia> F=Frobenius(WF);\n\njulia> c=B(3,4,3,3,2,4)\n343.324\n\njulia> conjugating_elt(b,c,F)\n2312\n\njulia> ^(b,B(2,3,1,2),F)\n343.324\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.centralizer_generators","page":"Gapjm Documentation","title":"Gapjm.Garside.centralizer_generators","text":"centralizer_generators(b[,F];ss=:sc)\n\na  list of generators of the centralizer of b. The computation is done by computing  the  endomorphisms  of  the  object  b  in the category of its sliding  circuits. If an argument ss is given, the computation is done in the corresponding category –- see conjcat.\n\nIf  an argument  F is  given it  should be  an automorphism  of the braid monoid,  like the Frobenius of a reflection coset attached to b.M.W; then the F-centralizer is computed.\n\njulia> W=coxgroup(:D,4)\nD₄\n\njulia> B=BraidMonoid(W)\nBraidMonoid(D₄)\n\njulia> w=B(4,4,4)\n4.4.4\n\njulia> cc=centralizer_generators(w)\n8-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n (31432)⁻¹231432\n 1              \n (2)⁻¹34.432    \n (1)⁻¹34.431    \n 34.43          \n 4              \n (32431)⁻¹132431\n 2              \n\njulia> shrink(cc)\n5-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 4            \n 2            \n 1            \n 34.43        \n (3243)⁻¹13243\n\njulia> centralizer_generators(w;ss=:cyc)\nSet{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}}} with 1 element:\n  4\n\njulia> F=Frobenius(spets(W,Perm(1,2,4)));\n\njulia> centralizer_generators(w,F)\n2-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 124      \n 312343123\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.conjcat","page":"Gapjm Documentation","title":"Gapjm.Garside.conjcat","text":"'conjcat(b[,F];ss=:sc)'\n\nreturns  the conjugacy category  of the summit  set of b  of the required type.  By default,  computes the  category of  sliding circuits  of b. If ss==:ss,  computes  the  super  summit  set.  If ss==:cyc, computes the cyclic  conjugacy category. Finally, if ss==:inf computes the category of all conjugate elements with same Inf as b.\n\nIf  an argument  F is  given it  should be  the Frobenius of a Reflection coset attached to b.M.W. Then the F-conjugacy category is returned.\n\njulia> W=coxgroup(:A,4)\nA₄\n\njulia> w=BraidMonoid(W)(4,3,3,2,1)\n43.321\n\njulia> conjcat(w)\ncategory with 2 objects and 4 generating maps\n\njulia> conjcat(w).obj\n2-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 32143\n 21324\n\njulia> conjcat(w;ss=:ss).obj\n4-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 32143\n 13243\n 21432\n 21324\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.endomorphisms","page":"Gapjm Documentation","title":"Gapjm.Garside.endomorphisms","text":"endomorphisms(C,o)  for category C, returns generators of the endomorphisms of C.obj[o]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Garside.shrink","page":"Gapjm Documentation","title":"Gapjm.Garside.shrink","text":"shrink(l)\n\nThe  list l is a  list of  elements of  the same Garside group G. This function  tries to find  another set of  generators of the  subgroup of G generated by the elements of l, of smaller total length (the length being counted  as returned by the function  word).\n\njulia> B=BraidMonoid(CoxSym(3))\nBraidMonoid(𝔖 ₃)\n\njulia> b=[B(1)^3,B(2)^3,B(-2,-1,-1,2,2,2,2,1,1,2),B(1,1,1,2)]\n4-element Array{Gapjm.Garside.GarsideElm{Perm{UInt8},BraidMonoid{Perm{UInt8},CoxSym{UInt8}}},1}:\n 1.1.1              \n 2.2.2              \n (1.12)⁻¹2.2.2.21.12\n 1.1.12             \n\njulia> shrink(b)\n2-element Array{Gapjm.Garside.GarsideElm{Perm{UInt8},BraidMonoid{Perm{UInt8},CoxSym{UInt8}}},1}:\n 2  \n 1  \n\n\n\n\n\n","category":"function"},{"location":"#Classes/characters-of-reflection-groups-1","page":"Gapjm Documentation","title":"Classes/characters of reflection groups","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Chars\nCharTable\ncharinfo\nclassinfo\nfakedegree\nfakedegrees\nrepresentation\nrepresentations\nInductionTable\nWGraphToRepresentation","category":"page"},{"location":"#Gapjm.Chars","page":"Gapjm Documentation","title":"Gapjm.Chars","text":"The  CharTable of a finite complex reflection group W is computed using the  decomposition of W in irreducible  groups (see refltype). For each irreducible  group the character  table is either  computed using recursive formulas  for the infinite series,  or read into the  system from a library file  for the  exceptional types.  Thus, character  tables can  be obtained quickly  even for very large groups  (e.g., E₈). Similar remarks apply for conjugacy classes.\n\nThe  conjugacy  classes  and  irreducible  characters of irreducible finite complex reflection groups have canonical labelings by certain combinatorial objects;  these labelings are used in the  tables we give. For the classes, these  are partitions or partition tuples  for the infinite series, or, for exceptional  Coxeter  groups,  Carter's  admissible  diagrams [@Car72]; for other  primitive  complex  reflection  groups  we  just  use  words  in the generators  to specify  the classes.  For the  characters, these  are again partitions  or partition tuples for the infinite series, and for the others they  are pairs  of two  integers (d,e)  where d  is the  degree of the character  and  e  is  the  smallest  symmetric  power  of the reflection representation  containing  the  given  character  as  a  constituent  (the b-invariant  of the character). This information is obtained by using the functions classinfo and charinfo. When you display the character table, the canonical labelings for classes and characters are those displayed.\n\nA  typical example  is coxgroup(:A,n),  the symmetric  group 𝔖ₙ₊₁ where classes and characters are parameterized by partitions of n+1.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> CharTable(W)\nCharTable(H(G(1,1,4)))\n    │1111 211 22 31  4\n────┼──────────────────\n1111│   1  -1  1  1 -1\n211 │   3  -1 -1  .  1\n22  │   2   .  2 -1  .\n31  │   3   1 -1  . -1\n4   │   1   1  1  1  1\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> ct=CharTable(W)\nCharTable(W(G2))\n     │A₀ Ã₁ A₁ G₂ A₂ A₁+Ã₁\n─────┼─────────────────────\nφ₁‚₀ │ 1  1  1  1  1     1\nφ₁‚₆ │ 1 -1 -1  1  1     1\nφ′₁‚₃│ 1  1 -1 -1  1    -1\nφ″₁‚₃│ 1 -1  1 -1  1    -1\nφ₂‚₁ │ 2  .  .  1 -1    -2\nφ₂‚₂ │ 2  .  . -1 -1     2\n\njulia> ct.charnames\n6-element Array{String,1}:\n \"\\phi_{1,0}\"  \n \"\\phi_{1,6}\"  \n \"\\phi_{1,3}'\" \n \"\\phi_{1,3}''\"\n \"\\phi_{2,1}\"  \n \"\\phi_{2,2}\"  \n\njulia> ct.classnames\n6-element Array{String,1}:\n \"A_0\"            \n \"\\tilde A_1\"    \n \"A_1\"            \n \"G_2\"            \n \"A_2\"            \n \"A_1+\\tilde A_1\"\n\nRecall  that our groups acts a reflection group on the vector space V, so have  fake degrees  (see \"fakeDegree\").  The valuation  and degree of these give  two  integers  b,B  for  each  irreducible  character  of  W (see charinf(W)[:b]  and  charinfo(W)[:B]).  For  finite Coxeter groups, the valuation  and degree of  the generic degrees  of the one-parameter generic Hecke  algebra  give  two  more  integers  a,A (see charinfo(W)[:a] and charinfo(W)[:A],  and [@Car85, Ch.11] for  more details). These will also be  used in the operations of truncated inductions explained in the chapter \"Reflection subgroups\".\n\nIwahori-Hecke  algebras and  cyclotomic Hecke  algebras also have character tables, see the corresponding chapters.\n\nWe  now describe for each type our conventions for labeling the classes and characters.\n\nType  Aₙ (n≥0). In this  case we have  W ≅ 𝔖ₙ₊₁. The classes and characters  are labeled by partitions of n+1. The partition corresponding to  a class describes  the cycle type  for the elements  in that class; the representative   in  '.classtext'   is  the   concatenation  of  the  words corresponding  to each part, and to a part i is associated the product of i-1  consecutive generators (starting one  higher that the last generator used  for the previous  parts). The partition  corresponding to a character describes  the type of  the Young subgroup  such that the trivial character induced  from this  subgroup contains  that character with multiplicity 1 and such that every other character occurring in this induced character has a  higher a-value. Thus, the sign  character corresponds to the partition (1ⁿ⁺¹)  and  the  trivial  character  to  the  partition  (n+1). The character of the reflection representation of W is labeled by (n,1).\n\nType  Bₙ (n≥2). In this  case W=W(Bₙ) is  isomorphic to the wreath product  of the cyclic  group of order  2 with the  symmetric group 𝔖ₙ. Hence  the classes and characters are  parameterized by pairs of partitions such  that the total sum of their  parts equals n. The pair corresponding to  a class describes the signed cycle type for the elements in that class, as  in [@Car72]. We use the convention that  if (λ,μ) is such a pair then λ  corresponds  to  the  positive  and  μ to the negative cycles. Thus, (1ⁿ,-)  and (-,1ⁿ) label the trivial class and the class containing the longest  element, respectively.  The pair  corresponding to  an irreducible character is determined via Clifford theory, as follows.\n\nWe  have a semidirect product decomposition W(Bₙ)=N ⋊ 𝔖ₙ where N is the standard  n-dimensional  𝔽₂ⁿ-vector  space.  For  a,b  ≥  0 such that n=a+b let η_{a,b} be the irreducible character of N which takes value 1  on the first a standard basis vectors and value -1 on the next b standard  basis vectors of N. Then  the inertia subgroup of η_{a,b} has the  form T_{a,b}=N.(𝔖_a × 𝔖_b) and  we can extend η_{a,b} trivially to an  irreducible  character  η̃_{a,b}  of  T_{a,b}.  Let  α and β be partitions  of a and b, respectively. We take the tensor product of the corresponding  irreducible characters of 𝔖_a and 𝔖_b and regard this as an  irreducible  character  of  T_{a,b}.  Multiplying this character with η̃_{a,b}  and  inducing  to  W(Bₙ)  yields an irreducible character χ= χ_{(α,β)}  of W(Bₙ). This defines the correspondence between irreducible characters and pairs of partitions as above.\n\nFor example, the pair ((n),-) labels the trivial character and (-,(1ⁿ)) labels  the  sign  character.  The  character  of  the  natural  reflection representation is labeled by ((n-1),(1)).\n\nType  Dₙ (n≥4). In this case W=W(Dₙ) can be embedded as a subgroup of index  2 into the Coxeter  group W(Bₙ). The intersection  of a class of W(Bₙ) with W(Dₙ) is either empty or a single class in W(Dₙ) or splits up  into two classes in  W(Dₙ). This also leads  to a parameterization of the  classes of W(Dₙ) by pairs of  partitions (λ,μ) as before but where the  number of parts of μ is even and where there are two classes of this type  if μ is empty and all parts of  λ are even. In the latter case we denote  the two classes in W(Dₙ) by (λ,+) and (λ,-), where we use the convention  that  the  class  labeled  by (λ,+) contains a representative which  can be written  as a word  in {s₁,s₃,…,sₙ} and  (λ,-) contains a representative which can be written as a word in {s₂,s₃, …,sₙ}.\n\nBy  Clifford theory the restriction of  an irreducible character of W(Bₙ) to  W(Dₙ)  is  either  irreducible  or  splits  up  into  two irreducible components.  Let (α,β) be  a pair of  partitions with total  sum of parts equal to n. If α!=β then the restrictions of the irreducible characters of  W(Bₙ) labeled  by (α,β)  and (β,α)  are irreducible and equal. If α=β  then the restriction of the character labeled by (α,α) splits into two  irreducible components  which we  denote by  (α,+) and (α,-). Note that  this can only happen if n is  even. In order to fix the notation we use  a result of  [@Ste89] which describes  the value of  the difference of these  two  characters  on  a  class  of  the  form (λ,+) in terms of the character  values  of  the  symmetric  group  𝔖_{n/2}.  Recall that it is implicit  in the notation (λ,+) that all  parts of λ are even. Let λ' be  the partition of n/2 obtained by  dividing each part by 2. Then the value  of χ_{(α,-)}-χ_{(α,+)} on an element in the class (λ,+) is given by  2^{k(λ)} times  the value  of the  irreducible character of 𝔖_{n/2} labeled  by α on the class of  cycle type λ'. (Here, k(λ) denotes the number of non-zero parts of λ.)\n\nThe  labels for the trivial, the  sign and the natural reflection character are the same as for W(Bₙ), since these characters are restrictions of the corresponding characters of W(Bₙ).\n\nThe groups G(d,1,n). They  are isomorphic to the wreath product of the cyclic group of order d with  the  symmetric  group  𝔖ₙ.  Hence  the  classes  and characters are parameterized  by d-tuples of partitions such that the total sum of their parts  equals n. The words chosen  as representatives of the classes are, when d>2, computed in a slightly different way than for Bₙ, in order to agree  with the words on which Ram  and Halverson compute the characters of the  Hecke algebra. First the parts of the d partitions are merged in one big  partition and sorted in  increasing order. Then, to  a part i coming from  the j-th partition is  associated the word (l+1…1… l+1)ʲ⁻¹l+2…l+i where l is the highest generator used to express the previous part.\n\nThe  d-tuple corresponding to an  irreducible character is determined via Clifford  theory in  a similar  way than  for the  Bₙ case.  The identity character  has the first  partition with one  part equal n  and the other ones  empty. The character of the  reflection representations has the first two  partitions with one part  equal respectively to n-1  and to 1, and the other partitions empty.\n\nThe groups G(de,e,n). They  are normal  subgroups of  index e  in G(de,1,n).  The quotient is cyclic,  generated by the image g  of the first generator of G(de,1,n). The  classes are parameterized as the  classes of G(de,e,n) with an extra information for a component of a class which splits.\n\nAccording  to  [@Hu85],  a  class  C  of  G(de,1,n)  parameterized by a de-partition  (S₀,…,S_{de-1}) is  in G(de,e,n)  if e  divides ∑ᵢ i ∑_{p∈  Sᵢ}p. It splits in d classes for the largest d dividing e and all  parts of all Sᵢ and  such that Sᵢ is empty  if d does not divide i.  If w is in C then 'gⁱ w g⁻ⁱ' for 'i in 0:d-1' are representatives of  the  classes  of  G(de,e,n)  which  meet  C.  They are described by appending the integer i to the label for C.\n\nThe  characters are described by Clifford theory. We make g act on labels for  characters of G(de,1,n)  . The action  of g permutes circularly by d  the partitions in the de-tuple.  A character has same restriction to G(de,e,n)  as its transform by g.  The number of irreducible components of its restriction is equal to the order k of its stabilizer under powers of  g.  We  encode  a  character  of  G(de,e,n)  by first, choosing the smallest  for lexicographical order label  of a character whose restriction contains  it; then this label is periodic with a motive repeated k times; we  represent the  character by  one of  these motives,  to which we append E(k)ⁱ for 'i in 0:k-1' to describe which component of the restriction we choose.\n\nTypes  G₂ and F₄. The matrices  of character values and the orderings and  labelings of  the irreducible  characters are  exactly the  same as in [@Car85,  p.412/413]: in type G₂ the character φ₁,₃' takes the value -1 on  the reflection associated  to the long  simple root; in  type F₄, the characters  φ₁,₁₂', φ₂,₄', φ₄,₇', φ₈,₉' and φ₉,₆' occur in the induced  of the  identity from  the A₂  corresponding to the short simple roots;  the  pairs  (φ₂,₁₆',  φ₂,₄″)  and  (φ₈,₃', φ₈,₉″) are related by tensoring by sign; and finally φ₆,₆″ is the exterior square of  the reflection representation. Note, however, that we put the long root at the left of the Dynkin diagrams to be in accordance with the conventions in [@Lus85, (4.8) and (4.10)].\n\nThe  classes  are  labeled  by  Carter's  admissible  diagrams  [@Car72]. A character is labeled by a pair (d,b) where d denotes the degree and b the  corresponding b-invariant. If there  are several characters with the same pair (d,b) we attach a prime to them, as in [@Car85].\n\nTypes  E₆,E₇,E₈. The character tables are obtained by specialization of those  of the Hecke algebra. The classes are labeled by Carter's admissible diagrams  [@Car72]. A  character is  labeled by  the pair (d,b) where d denotes  the degree and  b is the  corresponding b-invariant. For these types, this gives a unique labeling of the characters.\n\nNon-crystallographic  types I₂(m), H₃, H₄. In these cases we do not have  canonical  labelings  for  the  classes.  We  label  them  by reduced expressions.\n\nEach  character for  type H₃  is uniquely  determined by the pair (d,b) where  d is the degree and  b the corresponding b-invariant. For type H₄  there are just  two characters (those  of degree 30)  for which the corresponding  pairs are  the same.  These two  characters are nevertheless distinguished  by  their  fake  degrees:  the  character φ₃₀,₁₀' has fake degree  q¹⁰+q¹²+ higher terms, while φ₃₀,₁₀″ has fake degree q¹⁰+q¹⁴+ higher  terms. The characters in the table for type H₄ are ordered in the same way as in [@AL82].\n\nFinally,  the characters  of degree 2  for type  I₂(m) are  ordered as follows.  The matrix representations affording the characters of degree 2 are given by: ρ_j : s₁s₂ ↦ (\\begin{array}{cc}E(m)^j&0\\0&E(m)^{-j}\\end{array}),  s₁↦(\\begin{array}{cc}0&1\\1&0\\end{array}), where  1 ≤ j ≤  ⌊(m-1)/2⌋. The reflection representation is  ρ₁. The  characters in  the table  are ordered by listing first the characters of degree 1 and then ρ₁,ρ₂,….\n\nPrimitive complex reflection groups G₄ to G₃₄. The  groups G₂₃=H₃, G₂₈=F₄, G₃₀=H₄ are exceptional Coxeter groups and have  been  explained  above.  Similarly  for  the  other groups labels for characters  consist primarily  of the  pair (d,b)  where d  denotes the degree  and b is the corresponding  b-invariant. This is sufficient for G₄,  G₁₂, G₂₂ and G₂₄. For other  groups there are pairs or triples of  characters which  have the  same (d,b)  value. We  disambiguate these according  to  the  conventions  of  [@Mal00]  for G₂₇, G₂₉, G₃₁, G₃₃ and G₃₄:\n\nFor G₂₇:\n\nThe  fake degree  of φ₃,₅'  (resp. φ₃,₂₀',  φ₈,₉″) has smaller degree that  of  φ₃,₅″  (resp.  φ₃,₂₀″,  φ₈,₉'). The characters φ₅,₁₅' and φ₅,₆' occur with multiplicity 1 in the induced from the trivial character of  the parabolic subgroup  of type A₂  generated by the  first and third generator  (it is  asserted mistakenly  in [@Mal00]  that φ₅,₆″  does not occur in this induced; it occurs with multiplicity 2).\n\nFor G₂₉:\n\nThe  character  φ₆,₁₀‴  is  the  exterior  square  of φ₄,₁; its complex conjugate  is φ₆,₁₀⁗. The  character φ₁₅,₄″ occurs  in φ₄,₁⊗φ₄,₃; the character  φ₁₅,₁₂″  is  tensored  by  the  sign  character from φ₁₅,₄″. Finally  φ₆,₁₀' occurs in  the induced from  the trivial character of the standard parabolic subgroup of type A₃ generated by the first, second and fourth generators.\n\nFor G₃₁:\n\nThe  characters φ₁₅,₈', φ₁₅,₂₀' and φ₄₅,₈″ occur in φ₄,₁⊗φ₂₀,₇; the character   φ₂₀,₁₃'  is  complex  conjugate  of  φ₂₀,₇;  the  character φ₄₅,₁₂'  is tensored by sign of φ₄₅,₈'. The two terms of maximal degree of  the fakedegree of φ₃₀,₁₀' are  q⁵⁰+q⁴⁶ while for φ₃₀,₁₀″ they are q⁵⁰+2q⁴⁶.\n\nFor G₃₃:\n\nThe  terms of  maximal degree  of the  fakedegree of φ₁₀,₈' are q²⁸+q²⁶ while  for φ₁₀,₈' they are q²⁸+q²⁴. The  terms of maximal degree of the fakedegree   of  φ₄₀,₅'  are  q³¹+q²⁹   while  for  φ₄₀,₅″  they  are q³¹+2q²⁹.  The character  φ₁₀,₁₇' is  tensored by  sign of φ₁₀,₈' and φ₄₀,₁₄' is tensored by sign of φ₄₀,₅'.\n\nFor G₃₄:\n\nThe  character φ₂₀,₃₃' occurs in φ₆,₁⊗φ₁₅,₁₄. The character φ₇₀,₉' is rational.  The character  φ₇₀,₉″ occurs  in φ₆,₁⊗φ₁₅,₁₄.  The character φ₇₀,₄₅'   is  rational.The   character  φ₇₀,₄₅″   is  tensored  by  the determinant  character of  φ₇₀,₉″. The  character φ₅₆₀,₁₈' is rational. The character φ₅₆₀,₁₈‴ occurs in φ₆,₁⊗φ₃₃₆,₁₇. The character φ₂₈₀,₁₂' occurs    in   φ₆,₁⊗φ₃₃₆,₁₇.   The   character   φ₂₈₀,₃₀″   occurs   in φ₆,₁⊗φ₃₃₆,₁₇.  The  character  φ₅₄₀,₂₁'  occurs  in φ₆,₁⊗φ₁₀₅,₂₀. The character  φ₁₀₅,₈' is  complex conjugate  of φ₁₀₅,₄,  and φ₈₄₀,₁₃' is complex  conjugate  of  φ₈₄₀,₁₁.  The  character  φ₈₄₀,₂₃'  is  complex conjugate  of  φ₈₄₀,₁₉.  Finally  φ₁₂₀,₂₁'  occurs  in induced from the trivial character of the standard parabolic subgroup of type A₅ generated by the generators of G₃₄ with the third one omitted.\n\nFor  the groups G₅ and G₇ we  adopt the following conventions. For G₅ they are compatible with those of [@MR03] and [@BMM14].\n\nFor G₅:\n\nWe  let W=ComplexReflectionGroup(5),  so the  generators are  W(1) and W(2).\n\nThe  character φ₁,₄' (resp. φ₁,₁₂', φ₂,₃') takes the value 1 (resp. ζ₃,  -ζ₃)  on  W(1).  The  character  φ₁,₈″ is complex conjugate to φ₁,₁₆,  and the character  φ₁,₈' is complex  conjugate to φ₁,₄' . The character  φ₂,₅″ is complex  conjugate to φ₂,₁;  φ₂,₅' take the value -1 on W(1). The character φ₂,₇' is complex conjugate to φ₂,₅'.\n\nFor G₇:\n\nWe  let W=ComplexReflectionGroup(7),  so the  generators are W(1), W(2) and W(3).\n\nThe  characters  φ₁,₄'  and  φ₁,₁₀'  take  the value 1 on W(2). The character  φ₁,₈″ is complex  conjugate to φ₁,₁₆  and φ₁,₈' is complex conjugate  to φ₁,₄'. The characters φ₁,₁₂'  and φ₁,₁₈' take the value ζ₃  on W(2). The character φ₁,₁₄″ is complex conjugate to φ₁,₂₂ and φ₁,₁₄'  is complex conjugate to φ₁,₁₀'. The character φ₂,₃' takes the value  -ζ₃ on  W(2) and  φ₂,₁₃' takes  the value  -1 on W(2). The characters  φ₂,₁₁″, φ₂,₅″, φ₂,₇‴ and  φ₂,₁ are Galois conjugate, as well  as  the  characters  φ₂,₇',  φ₂,₁₃',  φ₂,₁₁'  and  φ₂,₅'. The character  φ₂,₉' is complex  conjugate to φ₂,₁₅  and φ₂,₉‴ is complex conjugate to φ₂,₃'.\n\nFinally,  for the remaining groups G₆, G₈  to G₁₁, G₁₃ to G₂₁, G₂₅, G₂₆,  G₃₂ and G₃₃ there are only  pairs of characters with same value (d,b).  We give labels uniformly to these characters by applying in order the following rules :\n\nIf the two characters have  different fake degrees, label φ_{d,b}' the  one  whose  fake  degree  is  minimal  for  the  lexicographic  order of  polynomials (starting with the highest term).\nFor the not yet labeled pairs, if only one of the two characters has the  property   that  in  its   Galois  orbit  at   least  one  character  is  distinguished by its (d,b)-invariant, label it φ_{d,b}'.\nFor the not yet labeled pairs,  if the minimum of the (d,b)-value (for  the  lexicographic  order  (d,b))  in  the  Galois  orbits  of the two  character  is different, label φ_{d,b}' the character with the minimal  minimum.\nWe define now a new invariant  for characters: consider all the pairs of  irreducible   characters  χ  and  ψ  uniquely  determined  by  their  (d,b)-invariant such that φ occurs with non-zero multiplicity m in  χ⊗ψ.  We define  t(φ) to  be the  minimal (for  lexicographic order)  possible list (d(χ),b(χ),d(ψ),b(ψ),m).\n\nFor  the not  yet labeled  pairs, if  the t-invariants are different, label φ_{d,b}' the character with the minimal t-invariant.\n\nAfter  applying  the  last  rule  all  the  pairs  will be labelled for the considered  groups. The labelling obtained  is compatible for G₂₅, G₂₆, G₃₂  and G₃₃ with that of [@Mal00]  and for G₈ with that described in [@MR03].\n\nWe  should  emphasize  that  for  all  groups  with  a  few exceptions, the parameters  for characters do  not depend on  any non-canonical choice. The exceptions  are G(de,e,n) with e>1, and G₅, G₇, G₂₇, G₂₈, G₂₉ and  G₃₄, groups  which admit  outer automorphisms  preserving the set of reflections,  so choices  of a  particular value  on a particular generator must be made for characters which are not invariant by these automorphisms.\n\nLabels  for the classes. For the exceptional complex reflection groups, the labels  for the classes represent the  decomposition of a representative of the  class as a product of generators, with the additional conventions that 'z'  represents the generator  of the center  and for well-generated groups 'c'  represents a Coxeter element  (a product of the  generators which is a regular element for the highest reflection degree).\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Chars.CharTable","page":"Gapjm Documentation","title":"Gapjm.Chars.CharTable","text":"CharTable is a structure to hold character tables of groups and Hecke  algebras\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Chars.charinfo","page":"Gapjm Documentation","title":"Gapjm.Chars.charinfo","text":"charinfo(W)\n\nreturns   information  about  the  irreducible  characters  of  the  finite reflection group W. The result is a Dict with the following entries:\n\n:charparams:  contains  parameters  for  the  irreducible  characters  as described in the introduction. The parameters are tuples with one component for  each irreducible  component of  W (as  given by  refltype). For an irreducible   component  which  is  an  imprimitive  reflection  group  the component  of the charparam is a tuple of partitions (partitions for type :A,  double partitions  for type  :B), and  for a primitive irreducible group it is a pair (d,e) where d is the degree of the character and e is  the  smallest  symmetric  power  of  the  character  of  the reflection representation  which  contains  the  given  character  as  a component. In addition,  there is an ordinal number if more than one character shares the first two invariants.\n\njulia> charinfo(coxgroup(:G,2))[:charparams]\n6-element Array{Array{Array{Int64,1},1},1}:\n [[1, 0]]   \n [[1, 6]]   \n [[1, 3, 1]]\n [[1, 3, 2]]\n [[2, 1]]   \n [[2, 2]]   \n\n:charnames:  strings describing the  irreducible characters, computed from the charparams. This is the same as charnames(W).\n\n:positionId:  the position of the trivial character in the character table of W.\n\njulia> charinfo(coxgroup(:D,4))[:positionId]\n13\n\n:positionDet:  Contains the position  of the determinant  character in the character   table  of  W. For Coxeter groups this is the sign character.\n\njulia> charinfo(coxgroup(:D,4))[:positionDet]\n4\n\n:extRefl: Only present if W is irreducible, in which case the reflection representation  of W and all its exterior powers are irreducible. It then contains   the  position   of  the   exterior  powers   of  the  reflection representation in the character table.\n\njulia> charinfo(coxgroup(:D,4))[:extRefl]\n5-element Array{Int64,1}:\n 13\n 11\n  5\n  3\n  4\n\n:b:   contains  a  list  holding  the  b-function  for  all  irreducible characters  of W, that is,  for each character χ,  the valuation of the fake  degree of χ. The ordering of the result corresponds to the ordering of  the  characters  in  CharTable(W).  The  advantage  of  this function compared  to calling fakeDegrees is that one  does not have to provide an indeterminate,  and that  it may  be much  faster to  compute than the fake degrees.\n\njulia> charinfo(coxgroup(:D,4))[:b]\n13-element Array{Int64,1}:\n  6\n  6\n  7\n 12\n  4\n  3\n  6\n  2\n  2\n  4\n  1\n  2\n  0\n\n:B:   contains  a  list  holding  the  B-function  for  all  irreducible characters  of W, that is, for each character χ, the degree of the fake degree  of χ. The ordering  of the result corresponds  to the ordering of the  characters in CharTable(W). The  advantage of this function compared to  calling  fakeDegrees  is  that  one  does  not  have  to  provide  an indeterminate,  and that  it may  be much  faster to  compute than the fake degrees.\n\njulia> charinfo(coxgroup(:D,4))[:B]\n13-element Array{Int64,1}:\n 10\n 10\n 11\n 12\n  8\n  9\n 10\n  6\n  6\n  8\n  5\n  6\n  0\n\n:a:  Only  filled  for  Spetsial  groups.  Contains  a  list  holding  the a-function  for  all  irreducible  characters  of  the  Coxeter  group or Spetsial  reflection  group  W,  that  is,  for  each  character χ, the valuation  of the generic degree of χ (in the one-parameter Hecke algebra hecke(W,Pol(:q))  corresponding  to  W).  The  ordering  of  the result corresponds to the ordering of the characters in CharTable(W).\n\njulia> charinfo(coxgroup(:D,4))[:a]\n13-element Array{Int64,1}:\n  6\n  6\n  7\n 12\n  3\n  3\n  6\n  2\n  2\n  3\n  1\n  2\n  0\n\n:A:  Only  filled  for  Spetsial  groups.  Contains  a  list  holding  the A-function  for  all  irreducible  characters  of  the  Coxeter  group or Spetsial  reflection group W, that is, for each character χ, the degree of   the  generic  degree  of  χ  (in  the  one-parameter  Hecke  algebra hecke(W,Pol(:q))  corresponding  to  W).  The  ordering  of  the result corresponds to the ordering of the characters in CharTable(W).\n\njulia> charinfo(coxgroup(:D,4))[:A]\n13-element Array{Int64,1}:\n 10\n 10\n 11\n 12\n  9\n  9\n 10\n  6\n  6\n  9\n  5\n  6\n  0\n\n:opdam:  Contains the permutation of  the characters obtained by composing the  Opdam  involution  with  complex  conjugation. This permutation has an interpretation as a Galois action on the characters of H=hecke(W,Pol(:x)):  if H splits  by taking v  an e-th root of x, .opdam records the permutation effected by the Galois action v->E(e)*v.\n\njulia> charinfo(ComplexReflectionGroup(22))[:opdam]\n(3,5)(4,6)(11,13)(12,14)(17,18)\n\njulia> charinfo(coxgroup(:A,2))\nDict{Symbol,Any} with 9 entries:\n  :a           => [3, 1, 0]\n  :b           => [3, 1, 0]\n  :positionId  => 3\n  :charnames   => [\"111\", \"21\", \"3\"]\n  :A           => [3, 2, 0]\n  :B           => [3, 2, 0]\n  :extRefl     => [3, 2, 1]\n  :charparams  => [[[1, 1, 1]], [[2, 1]], [[3]]]\n  :positionDet => 1\n\nFor  irreducible groups, the returned  record contains sometimes additional information:\n\nfor  F₄: the entry :kondo gives the  labeling of the characters given by Kondo, also used in [@Lus85, (4.10)].\n\nfor  E₆, E₇, E₈: the  entry :frame gives the  labeling of the characters given by Frame, also used in [@Lus85, (4.11), (4.12), and (4.13)].\n\nfor  G₂: the  entry :spaltenstein  gives the  labeling of the characters given by Spaltenstein.\n\njulia> charinfo(coxgroup(:G,2))[:spaltenstein]\n6-element Array{String,1}:\n \"1\"             \n \"\\varepsilon\"  \n \"\\varepsilon_l\"\n \"\\varepsilon_c\"\n \"\\theta'\"      \n \"\\theta''\"     \n\nfor  G(de,e,2)  even  e  and  d>1:  the  entry  :malle  gives  the parameters for the characters used by Malle in [@Mal96].\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Chars.classinfo","page":"Gapjm Documentation","title":"Gapjm.Chars.classinfo","text":"classinfo(W)\n\nreturns  information about the  conjugacy classes of  the finite reflection group W. The result is a Dict with three entries:\n\n:classtext:  contains words in  the generators describing representatives of  each  conjugacy  class.  Each  word  is  a  list  of integers where the generator  sᵢ  is  represented  by  the  integer  i. For finite Coxeter groups, it is the same as map(x->word(W,representative(x)),conjugacyclasses(W)),   and   each  such representative  is of minimal length in its  conjugacy class and is a \"very good\" element in the sense of [@GM97].\n\n:classparams:  The  elements  of  this  list  are  tuples  which have one component  for each irreducible component of  W. These components for the infinite  series,  contain  partitions  or  partition tuples describing the class  (see  the  introduction).  For  the  exceptional Coxeter groups they contain Carter's admissible diagrams, see [@Car72]. For exceptional complex reflection  groups  they  contain  in  general  the  same information as in classtext.\n\n:classnames:  Contains strings describing the conjugacy classes, made out of the information in :classparams.\n\njulia> classinfo(coxgroup(:A,2))\nDict{Symbol,Any} with 5 entries:\n  :classes     => [1, 3, 2]\n  :orders      => [1, 2, 3]\n  :classtext   => [[], [1], [1, 2]]\n  :classnames  => [\"111\", \"21\", \"3\"]\n  :classparams => [[1, 1, 1], [2, 1], [3]]\n\nSee also the introduction of this section.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Chars.fakedegree","page":"Gapjm Documentation","title":"Gapjm.Chars.fakedegree","text":"fakedegree(W, φ, q)\n\nreturns  the  fake degree  of  the  character  of parameter  φ  (see :CharParams)  of  the  reflection  group W,  evaluated  at  q  (see \"fakeDegrees\" for a definition of the fake degrees).\n\njulia> Chars.fakedegree(coxgroup(:A,2),[[2,1]],Pol(:q))\nPol{Cyc{Int64}}: q²+q\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Chars.fakedegrees","page":"Gapjm Documentation","title":"Gapjm.Chars.fakedegrees","text":"fakedegrees(W , q)\n\nreturns  a list holding the fake degrees of the reflection group W on the vector  space V, evaluated at q. These are the graded multiplicities of the  irreducible characters of W in the quotient SV/I where SV is the symmetric  algebra of V and I is the ideal generated by the homogeneous invariants  of  positive  degree  in  SV.  The  ordering  of  the  result corresponds to the ordering of the characters in 'CharTable(W)'.\n\njulia> fakedegrees(coxgroup(:A,2),Pol(:q))\n3-element Array{Pol,1}:\n q³  \n q²+q\n 1   \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Chars.representation","page":"Gapjm Documentation","title":"Gapjm.Chars.representation","text":"representation(W,i)\n\nreturns a list holding, for the i-th irreducible character of the complex reflection  group  W,  a  list  of  matrices  images  of  the  generating reflections  of W  in a  model of  the corresponding representation. This function  is based on the classification,  and is not yet fully implemented for   G₃₄;  88  representations  are  missing  out  of  169,  that  is  4 representations of dim. 105, 3 of dim. 315, 6 of dim. 420, 4 of dim.840 and those  of dim. 120, 140, 189, 280, 384,  504, 540, 560, 630, 720, 729, 756, 896, 945, 1260 and 1280.\n\njulia> representation(ComplexReflectionGroup(24),3)\n3-element Array{Array{Cyc{Int64},2},1}:\n [1 0 0; -1 -1 0; -1 0 -1]\n [-1 0 -1; 0 -1 (1-√-7)/2; 0 0 1]\n [-1 -1 0; 0 1 0; 0 (1+√-7)/2 -1]\n\n\n\n\n\nrepresentation(c::LeftCell,H)\n\nreturns  a list of  matrices giving the  representation of H  on the left cell c.\n\njulia> W=coxgroup(:H,3)\nH₃\n\njulia> c=LeftCells(W)[3]\nLeftCell<H₃: duflo=(15) character=φ₅‚₅>\n\njulia> @Mvp q;H=hecke(W,q)\nhecke(H₃,q)\n\njulia> representation(c,H)\n3-element Array{Array{Mvp{Int64,Rational{Int64}},2},1}:\n [-1 0 … 0 0; 0 -1 … 0 q½; … ; 0 0 … q 0; 0 0 … 0 q]\n [-1 q½ … 0 0; 0 q … 0 0; … ; 0 0 … -1 0; 0 q½ … 0 -1]\n [q 0 … 0 0; q½ -1 … 0 0; … ; 0 0 … q 0; 0 0 … 0 -1]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Chars.representations","page":"Gapjm Documentation","title":"Gapjm.Chars.representations","text":"representations(W)\n\nreturns the representations of W (see representation).\n\njulia> representations(coxgroup(:B,2))\n5-element Array{Array{Array{Int64,2},1},1}:\n [[1], [-1]]                \n [[1 0; -1 -1], [1 2; 0 -1]]\n [[-1], [-1]]               \n [[1], [1]]                 \n [[-1], [1]]                \n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Chars.InductionTable","page":"Gapjm Documentation","title":"Gapjm.Chars.InductionTable","text":"InductionTable(u,g)\n\nreturns   an  object  describing  the   decomposition  of  the  irreducible characters  of the subgroup  u induced to  the group g.  In the default show method, the rows correspond to the characters of the parent group, and the  columns  to  those  of  the  subgroup.  The  return object has a field scalar  which is a Matrix{Int} containing  the induction table, and the other  fields contain labeling information  taken from the character tables of u and g when it exists.\n\njulia> g=Group([Perm(1,2),Perm(2,3),Perm(3,4)])\nGroup([(1,2),(2,3),(3,4)])\n\njulia> u=Group( [ Perm(1,2), Perm(3,4) ])\nGroup([(1,2),(3,4)])\n\njulia> InductionTable(u,g)\nInduction Table from Group([perm\"(1,2)\",perm\"(3,4)\"]) to Group([perm\"(1,2)\",perm\"(2,3)\",perm\"(3,4)\"])\n   │X.1 X.2 X.3 X.4\n───┼────────────────\nX.1│  .   1   .   .\nX.2│  .   1   1   1\nX.3│  1   1   .   .\nX.4│  1   .   1   1\nX.5│  1   .   .   .\n\njulia> g=coxgroup(:G,2)\nG₂\n\njulia> u=reflection_subgroup(g,[1,6])\nG₂₍₁₅₎=A₂\n\njulia> InductionTable(u,g)\nInduction Table from G₂₍₁₅₎=A₂ to G₂\n     │111 21 3\n─────┼─────────\nφ₁‚₀ │  .  . 1\nφ₁‚₆ │  1  . .\nφ′₁‚₃│  1  . .\nφ″₁‚₃│  .  . 1\nφ₂‚₁ │  .  1 .\nφ₂‚₂ │  .  1 .\n\nthe rshow method allows to transmit attributes to the format method\n\njulia> rshow(t;rows=[5],cols=[3,2])\nInduction Table\n    │2,11 11,2\n────┼──────────\nφ₂‚₁│   1    1\n\nIt is also possible to TeX induction tables\n\nThis function also works for Spets (Reflection Cosets)\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Chars.WGraphToRepresentation","page":"Gapjm Documentation","title":"Gapjm.Chars.WGraphToRepresentation","text":"          Functions for W-graphs\n\n(Jean Michel june/december 2003 from  code/data of Geck, Marin, Alvis, Naruse, Howlett,Yin)    WGraphToRepresentation(semisimpleRank,graph,v) or WGraphToRepresentation(H,graph) Chevie stores some representations of some equal-parameter Hecke algebras as  W-graphs. For a Coxeter system (W,S)  a W-graph is defined by a set  of vertices  C; to  x∈ C  is attached  I(x)⊂ S  and to (x,y)∈  C^2  is  attached  an  `edge''μ(x,y)in  the field of definition  ofW;  this defines  a representation  of the Hecke algebra with single rootparametervon a space with basisey{y∈ C}` by:\n\nTs(ey)=cases{-ey&                            if s∈ I(y)\n             v^2 ey+∑{x∣s∈ I(x)} vμ(x,y)ex&otherwise}\n\nThe W-graphs  are stored in a  compact format to save  space. They are represented  as a  pair.  -The  first element is a list describing C; its elements are either a set I(x),  or an integer n  specifying to repeat the  previous element n more times. -The  second element is a list which  specifies mu. We first describe the mu-list  for symmetric  W-graphs (when  μ(x,y)=μ(y,x)). There  is one element  of the  mu-list for  each non-zero  value m  taken by μ, which consists of a pair whose first element is m and whose second element is a list  of  lists;  if  l  is  one  of  these  lists  each pair [l[1],l[i]] represents  an  edge  (x=l[1],y=l[i])  such that μ(x,y)=μ(y,x)=m. For non-symmetric  W-graphs, the first element of each pair in the mu-list is a  pair [m1,m2] and each edge [x,y] obtained from the lists in the second element has to be interpreted as mu(x,y)=m1 and mu(y,x)=m2.\n\nThe next function given a W-graph gr for some Hecke algebra of rank rk with rootparameter v constructs the rk matrices it specifies\n\n\n\n\n\n","category":"function"},{"location":"#Reductive-groups,-semisimple-elements-1","page":"Gapjm Documentation","title":"Reductive groups, semisimple elements","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Semisimple\nfundamental_group\nSemisimple.QuasiIsolatedRepresentatives","category":"page"},{"location":"#Gapjm.Semisimple","page":"Gapjm Documentation","title":"Gapjm.Semisimple","text":"Algebraic groups and semi-simple elements\n\nLet  us fix an  algebraically closed field  K and let  𝐆 be a connected reductive  algebraic group over K. Let 𝐓 be a maximal torus of 𝐆, let X(𝐓)  be the  character group  of 𝐓  (resp. Y(𝐓)  the dual lattice of one-parameter  subgroups  of  𝐓)  and  Φ  (resp  Φ^) the roots (resp. coroots) of 𝐆 with respect to 𝐓.\n\nThen  𝐆 is  determined up  to isomorphism  by the  root datum (X(𝐓),Φ, Y(𝐓),Φ^).  In algebraic terms, this consists  in giving a free ℤ-lattice X=X(𝐓) of dimension the rank of 𝐓 (which is also called the rank of 𝐆),  and a root system Φ ⊂ X,  and giving similarly the dual roots Φ^⊂ Y=Y(𝐓).\n\nThis  is obtained  by a  slight generalization  of our  setup for a Coxeter group  W. This time we assume the canonical basis of the vector space V on  which W acts is a ℤ-basis of  X, and Φ is specified by a matrix 'simpleroots(W)'  whose lines are the simple  roots expressed in this basis of  X. Similarly Φ^  is described by  a matrix 'simplecoroots(W)' whose lines  are the simple coroots in the basis  of Y dual to the chosen basis of  X. The duality pairing between X and Y is the canonical one, that is  the pairing between vectors x∈ X  and y∈ Y is given by sum(x.*y). Thus, we must have the relation simpleroots(W)*permutedims(simplecoroots(W))=cartan(W).\n\nWe  get that  by a  the function  rootdatum, whose  arguments are the two matrices simpleroots(W) and simplecoroots(W) described above. The roots need  not generate V, so  the matrices need not  be square. For instance, the root datum of the linear group of rank 3 can be specified as:\n\njulia> W=rootdatum([-1 1 0;0 -1 1],[-1 1 0;0 -1 1])\nA₂\n\njulia> refrep(W,W(1))\n3×3 Array{Int64,2}:\n 0  1  0\n 1  0  0\n 0  0  1\n\nhere  the symmetric group on 3 letters  acts by permutation of the basis of X.  The dimension of X (the  length of the vectors in simpleroots(W)) is the rank and the dimension of the subspace generated by the roots (the length  of  simpleroots(W))  is  called  the  semi-simple  rank. In the example the rank is 3 and the semisimple rank is 2.\n\nThe  default form  'W=coxgroup(:A,2)' defines  the adjoint  algebraic group (the  group with a trivial center). In that  case Φ is a basis of X, so 'simpleroots(W)'  is  the  identity  matrix  and  'simplecoroots(W)' is the Cartan  matrix 'cartan(W)' of the root system. The form 'coxgroup(:A,2,sc)' constructs   the  semisimple   simply  connected   algebraic  group,  where 'simpleroots(W)' is the transposed of 'cartan(W)' and 'simplecoroots(W)' is the identity matrix.\n\nThere  is an extreme form  of root data which  requires another function to specify:  when W is the trivial |coxgroup()|  and there are thus no roots (in  this case 𝐆 is a torus), the  root datum cannot be determined by the roots,  but is entirely determined by the rank r. The function torus(r) constructs such a root datum.\n\nFinally,  thee function rootdatum understands some familiar names for the algebraic groups and gives the results that could be obtained by giving the appropriate matrices 'simpleroots(W)' and 'simplecoroots(W)':\n\njulia> rootdatum(:gl,3)   # same as the previous example\nA₂\n\n##{Semisimple elements}\n\nIt  is also possible  to compute with  semi-simple elements. The first type are  finite order elements of 𝐓, which over an algebraically closed field K  are in bijection with elements of  Y⊗ ℚ/ℤ whose denominator is prime to the characteristic of K. These are represented as elements of a vector space  of rank r over  ℚ, taken 'Mod1' whenever  the need arises, where 'Mod1'  is the function which replaces the numerator of a fraction with the numerator  'mod' the denominator; the fraction p/q represents a primitive q-th  root of unity  raised to the  p-th power. In this representation, multiplication  of roots of unity becomes  addition 'Mod1' of rationals and raising  to the power n  becomes multiplication by n.  We call this the ``additive'' representation of semisimple elements.\n\nHere  is an example of computations  with semisimple-elements given as list of r elements of ℚ/ℤ.\n\njulia> G=rootdatum(:sl,4)\nA₃\n\njulia> L=reflection_subgroup(G,[1,3])\nA₃₍₁₃₎=A₁×A₁\n\njulia> algebraic_centre(L)\nDict{Symbol,Any} with 3 entries:\n  :descAZ => [[1, 2]]\n  :AZ     => SSGroup(SemisimpleElement{Root1}[<1,1,-1>])\n  :Z0     => SubTorus(A₃₍₁₃₎=A₁×A₁,[[1, 2, 1]])\n\ngap> SemisimpleSubgroup(last.Z0,3);\nGroup( <1/3,2/3,1/3> )\ngap> e:=Elements(last);\n[ <0,0,0>, <1/3,2/3,1/3>, <2/3,1/3,2/3> ]|\n\nFirst,  the  group  𝐆  =SL₄  is  constructed,  then the Levi subgroup L consisting   of  block-diagonal  matrices  of  shape  2×2.  The  function 'AlgebraicCentre' returns a record with : the neutral component Z⁰ of the centre Z of L, represented by a basis of Y(Z⁰), a complement subtorus S  of  𝐓  to  Z⁰  represented  similarly  by  a  basis of Y(S), and semi-simple  elements representing the classes of  Z modulo Z⁰ , chosen in S. The classes Z/Z⁰ also biject to the fundamental group as given by the  field '.descAZ', see \"AlgebraicCentre\" for an explanation. Finally the semi-simple elements of order 3 in Z⁰ are computed.\n\n|    gap> e[2]^G.2;     <1/3,0,1/3>     gap> Orbit(G,e[2]);     [ <1/3,2/3,1/3>, <1/3,0,1/3>, <2/3,0,1/3>, <1/3,0,2/3>, <2/3,0,2/3>,       <2/3,1/3,2/3> ]|\n\nSince  over an algebraically  closed field K  the points of  𝐓 are in bijection  with Y⊗  K^× it  is also  possible to represent any point  of 𝐓 over K as a list of r non-zero elements of K. This is the ``multiplicative'' representation of semisimple elements. here is the same   computation  as  above  performed  with  semisimple  elements  whose coefficients are in the finite field 'GF(4)':\n\n|    gap> s:=SemisimpleElement(G,List([1,2,1],i->Z(4)^i));     <Z(2^2),Z(2^2)^2,Z(2^2)>     gap> s^G.2;     <Z(2^2),Z(2)^0,Z(2^2)>     gap> Orbit(G,s);     [ <Z(2^2),Z(2^2)^2,Z(2^2)>, <Z(2^2),Z(2)^0,Z(2^2)>,       <Z(2^2)^2,Z(2)^0,Z(2^2)>, <Z(2^2),Z(2)^0,Z(2^2)^2>,       <Z(2^2)^2,Z(2)^0,Z(2^2)^2>, <Z(2^2)^2,Z(2^2),Z(2^2)^2> ]|\n\nWe  can  compute  the  centralizer  C_𝐆 (s)  of  a semisimple element in 𝐆:\n\n|    gap> G:=CoxeterGroup(\"A\",3);     CoxeterGroup(\"A\",3)     gap> s:=SemisimpleElement(G,[0,1/2,0]);     <0,1/2,0>     gap> Centralizer(G,s);     (A1xA1)<1,3>.(q+1)|\n\nThe  result is an  extended reflection group;  the reflection group part is the Weyl group of C_𝐆 ⁰(s) and the extended part are representatives of C_𝐆 (s)  modulo  C_𝐆⁰(s)  taken  as  diagram  automorphisms  of the reflection  part.  Here  is  is  printed  as a coset C_𝐆 ⁰(s)ϕ which generates C_𝐆 (s).\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Semisimple.fundamental_group","page":"Gapjm Documentation","title":"Gapjm.Semisimple.fundamental_group","text":"fundamental_group(W)\n\nThis  function returns the fundamental group of the algebraic group defined by  the Coxeter  group struct  W. This  group is  returned as  a group of diagram  automorphisms of the corresponding affine Weyl group, that is as a group  of permutations of  the set of  simple roots enriched  by the lowest root  of  each  irreducible  component.  The  definition  we  take  of  the fundamental  group of a (not necessarily semisimple) reductive group is (P∩ Y(𝐓))/Q where P is the coweight lattice (the dual lattice in Y(𝐓)⊗ ℚ of the root lattice) and Q is the coroot latice. The bijection between elements of P/Q   and   diagram   automorphisms   is   explained   in  the  context  of non-irreducible groups for example in cite[S 3.B]{Bon05}.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> fundamental_group(W)\nGroup([perm\"(1,2,3,12)\"])\n\njulia> W=rootdatum(:sl,4)\nA₃\n\njulia> fundamental_group(W)\nGroup([])\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Semisimple.QuasiIsolatedRepresentatives","page":"Gapjm Documentation","title":"Gapjm.Semisimple.QuasiIsolatedRepresentatives","text":"'QuasiIsolatedRepresentatives(<W>[,<p>])'\n\n<W>  should  be  a  Weyl  group  record corresponding to an algebraic group bG.    This function returns a list of semisimple elements for   bG,  which are  representatives  of  the    bG-orbits   of  quasi-isolated  semisimple elements.  It  follows  the  algorithm  given  by C. Bonnafaccent19   e  in citeBon05.     If a second argument <p>  is given, it gives representatives of those quasi-isolated elements which exist in characteristic <p>.\n\ngap> W:=CoxeterGroup(\"E\",6);;QuasiIsolatedRepresentatives(W); [ <0,0,0,0,0,0>, <0,0,0,1/3,0,0>, <0,1/6,1/6,0,1/6,0>, <0,1/2,0,0,0,0>, <1/3,0,0,0,0,1/3> ] gap> List(last,x->IsIsolated(W,x)); [ true, true, false, true, false ] gap> W:=CoxeterGroup(\"E\",6,\"sc\");;QuasiIsolatedRepresentatives(W); [ <0,0,0,0,0,0>, <1/3,0,2/3,0,1/3,2/3>, <1/2,0,0,1/2,0,1/2>, <2/3,0,1/3,0,1/3,2/3>, <2/3,0,1/3,0,2/3,1/3>, <2/3,0,1/3,0,2/3,5/6>, <5/6,0,2/3,0,1/3,2/3> ] gap> List(last,x->IsIsolated(W,x)); [ true, true, true, true, true, true, true ] gap> QuasiIsolatedRepresentatives(W,3); [ <0,0,0,0,0,0>, <1/2,0,0,1/2,0,1/2> ]\n\n\n\n\n\n","category":"function"},{"location":"#Reflection-cosets-1","page":"Gapjm Documentation","title":"Reflection cosets","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Cosets\ndegrees(::Spets)","category":"page"},{"location":"#Gapjm.Cosets","page":"Gapjm Documentation","title":"Gapjm.Cosets","text":"Let  R be a  root system in  the real vector  space V. We say that F₀∈ GL(V)  is an  automorphism of  R if  it permutes  R and is of finite order  (finite  order  is  automatic  if  R generates V). It follows by cite[chap.  VI, S1.1, lemme 1]{Bou68} that  the dual F₀*∈ GL(V*) permutes the  coroots  R*⊂  V*;  thus  F₀  normalizes  the  reflection group W associated  to R, that is w↦ F₀wF₀⁻¹ is an automorphism of W. Thus we get a reflection coset WF₀, which we call a Coxeter coset.\n\nThe  motivation for introducing Coxeter  cosets comes from automorphisms of algebraic  reductive groups, giving rise to non-split reductive groups over finite fields. Let 𝐆 be a connected reductive algebraic group 𝐆 over an algebraic  closure 𝔽̄_q of a finite field 𝔽_q, defined over 𝔽_q; this corresponds  to a  Frobenius endomorphism  F so  that the finite group of rational  points 𝐆(𝔽_q) identifies to the  subgroup 𝐆^F of fixed points under F.\n\nLet 𝐓 be a maximal torus of 𝐆, and Φ (resp. Φ*) be the roots (resp. coroots)  of 𝐆 with respect  to 𝐓 in the  character group X(𝐓) (resp. the  group of one-parameter subgroups Y(𝐓)). Then 𝐆 is determined up to isomorphism  by (X(𝐓),Φ,Y(𝐓),Φ*); this corresponds  to give a root system in   the  vector  space  V=ℚ ⊗ X(𝐓)   and  a  rational  reflection  group W=N_𝐆(𝐓)/𝐓 acting on it.\n\nIf  𝐓 is F-stable the Frobenius endomorphism F acts also naturally on X(T)  and defines thus  an endomorphism of  V, which is  of the form q F₀, where F₀∈ GL(V) is of finite order and normalizes W. We get thus a Coxeter  coset WF₀⊂GL(V).  The data  (X(𝐓), Φ,  Y(𝐓), Φ*,  F₀), and the integer   q  completely  determine  up   to  isomorphism  the  associated reductive finite group 𝐆^F. Thus these data is a way of representing in the  essential  information  which  determines  a  finite  reductive group. Indeed, all properties of Chevalley groups can be computed from that datum: symbols  representing characters, conjugacy classes,  and finally the whole character table of 𝐆^F.\n\nIt  turns out that  many interesting objects  attached to this datum depend only on (V,W, F₀): the order of the maximal tori, the fake degrees, the order  of 𝐆^F, symbols representing unipotent characters, Deligne-Lusztig induction  in  terms  of  almost  characters, the Fourier matrix relating characters  and almost  characters, etc…  (see, e.g.,  cite{BMM93}). It is thus  possible to extend their  construction to non-crystallographic groups (or  even to more general complex  reflection groups, see \"Spets\"); this is why  we did  not include  a root  system in  the definition of a reflection coset. However, unipotent conjugacy classes for instance depend on the root system.\n\nWe assume now that 𝐓 is contained in an F-stable Borel subgroup of 𝐆. This  defines an order  on the roots,  and there is  a unique element ϕ∈ W F₀,  the  reduced  element  of  the  coset,  which  preserves the set of positive  roots.  It  thus  defines  a  diagram  automorphism, that is an automorphism  of the Coxeter system (W,S).  This element is stored in the component  '.phi' of the coset record. It may be defined without mentioning the  roots,  as  follows:  (W,F₀(S))  is  another  Coxeter  system,  thus conjugate to S by a unique element of W, thus there is a unique element ϕ∈ WF₀ which stabilizes S (a proof follows from cite[Theoreme 1, chap. V,  S  3]{Bou68}).  We  consider  thus  cosets  of the form Wϕ where ϕ stabilizes  S. The coset  W ϕ is  completely defined by the permutation '.phi'  when 𝐆 is semi-simple –- equivalently when Φ generates V; in this case we just need to specify 'phi' to define the coset.\n\nThere is a slight generalisation of the above setup, covering in particular the  case of the Ree  and Suzuki groups. We  consider 𝐆^F where F not a Frobenius  endomorphism, but  an isogeny  such that  some power  F^n is a Frobenius endomorphism. Then F still defines an endomorphism of V which normalizes  W; we define a real number q such that F^n is attached to an  𝔽_{qⁿ}-structure. Then we still have F=q F₀ where F₀ is of finite order  but q is no more an integer.  Thus F₀∈ GL(V⊗ ℝ) but F₀∉ GL(V). For  instance, for the  Ree and Suzuki  groups, F₀ is  an automorphism of order  2 of W, which is of type G₂, B₂ or F₄, and q=√2 for B₂ and  F₄ and q=√3  for G₂ This  can be constructed  starting from root systems  for G₂, B₂ or  F₄ where all the  roots have the same length. This kind of root system is not crystallographic. Such non-crystallographic  root systems exist for all finite Coxeter groups such as  the dihedral groups, H₃ and H₄. We will call here Weyl cosets the cosets  corresponding to rational forms  of algebraic groups, which include thus some non-rational roots systems for B₂, G₂ and F₄.\n\nConjugacy  classes and irreducible characters of Coxeter cosets are defined as  for  general  reflection  cosets.  For  irreducible  characters of Weyl cosets,  we choose (following Lusztig) for each ϕ-stable character of W a  particular extension to a character of  W⋊ ⟨ϕ⟩, which we will call the preferred extension. The character table of the coset Wϕ is the table of  the restrictions to  Wϕ of the  preferred extensions. The question of finding the conjugacy classes and character table of a Coxeter coset can be reduced to the case of irreducible root systems R.\n\nThe automorphism ϕ permutes the irreducible components of W, and Wϕ  is a direct  product of cosets  where ϕ permutes cyclically the irreducible components of W. The preferred extension is defined to be the  direct  product  of  the  preferred  extension  in  each  of these situations.\nAssume now that Wϕ is a  descent of scalars, that is the decomposition in irreducible components W=W₁× ⋯ × Wₖ is cyclically permuted by ϕ. Then there are natural bijections from the ϕ-conjugacy classes of W to  the ϕᵏ-conjugacy classes  of W₁ as  well as from the ϕ-stable characters  of W to the ϕᵏ-stable  characters of W₁, which reduce the  definition of preferred  extensions on Wϕ  to the definition for W₁ϕᵏ.\nAssume now  that W  is the  Coxeter group  of an  irreducible root system.   ϕ  permutes  the  simple   roots,  hence  induces  a  graph automorphism  on  the  corresponding  Dynkin  diagram.  If  ϕ=1  then conjugacy  classes and  characters coincide  with those  of the Coxeter group W.\n\nThe  nontrivial cases for crystallographic roots  systems are (the order of ϕ  is written as left exponent to  the type): ²Aₙ, ²Dₙ, ³D₄, ²E₆. For  non-crystallographic root  systems where  all the  roots have the same length the additional cases ²B₂, ²G₂, ²F₄ and ²I₂(k) arise.\n\nIn  case  ³D₄  the  group  W⋊ ⟨ϕ⟩  can be embedded into the Coxeter  group of type F₄, which induces a labeling for the conjugacy classes of the coset. The preferred extension is chosen as the (single) extension with rational values.\nIn case  ²Dₙ the  group W⋊ ⟨ϕ⟩  is isomorphic  to a Coxeter group of type Bₙ. This induces a canonical labeling for the conjugacy classes  of the coset and allows to define the preferred extension in a combinatorial  way  using  the  labels  (pairs  of  partitions) for the characters of the Coxeter group of type Bₙ.\nIn the remaining crystallographic cases ϕ identifies to -w₀ where w₀  is the longest element of W.  So, there is a canonical labeling of  the conjugacy classes and characters of  the coset by those of W. The  preferred extensions  are defined  by describing  the signs of the character values on -w₀.\n\nThe  most general  construction of  a Coxeter  coset is  by starting from a Coxeter   datum   specified   by   the   matrices   of   'simpleRoots'  and 'simpleCoroots',  and  giving  in  addition  the  matrix 'F0Mat' of the map F₀:V→ V (see the commands  'CoxeterCoset' and 'CoxeterSubCoset'). As for Coxeter  groups,  the  elements  of  Wϕ  are  uniquely  determined by the permutation  they  induce  on  the  set  of  roots  R.  We consider these permutations as 'Elements' of the Coxeter coset.\n\nCoxeter  cosets are implemented by a struct which points to a Coxeter datum record  and  has  additional  fields  holding 'F0Mat' and the corresponding element  'phi'. Functions on the coset (for example, 'classinfo') are about properties  of  the  group  coset  W  ϕ  ;  however, most definitions for elements of untwisted Coxeter groups apply without change to elements in W ϕ:  e.g., if we define the length of  an element wϕ∈ Wϕ as the number of positive  roots it sends to negative ones, it  is the same as the length of w,  i.e., ϕ is of length 0, since ϕ has been chosen to preserve the set of positive roots. Similarly, the 'Coxeter word' describing wϕ is the same as the one for w, etc…\n\nWe associate to a Coxeter coset Wϕ a twisted Dynkin diagram, consisting of  the Dynkin diagram of W and  the graph automorphism induced by ϕ on this  diagram (this specifies the  group W⋊ ⟨F⟩, mentioned above, up to  isomorphism). See the  functions 'ReflectionType', 'ReflectionName' and 'Diagram' for Coxeter cosets.\n\nBelow  is an example showing first how to not define, then how to define, the Weyl coset for a Suzuki group:\n\njulia> W=coxgroup(:B,2)\nB₂\n\njulia> spets(W,Perm(1,2))\nERROR: matrix F must preserve the roots\nStacktrace:\n [1] error(::String) at ./error.jl:33\n [2] spets(::Gapjm.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}, ::Array{Int64,2}) at /home/jmichel/julia/Gapjm/src/Cosets.jl:241 (repeats 2 times)\n [3] top-level scope at REPL[19]:1\n\njulia> W=coxgroup(:Bsym,2)\nBsym₂\n\njulia> spets(W,Perm(1,2))\n²Bsym₂\n\njulia> CharTable(W)\nCharTable(H(G(2,1,2)))\n   │11. 1.1 .11 2. .2\n───┼──────────────────\n11.│  1   1   1 -1 -1\n1.1│  2   .  -2  .  .\n.11│  1  -1   1 -1  1\n2. │  1   1   1  1  1\n.2 │  1  -1   1  1 -1\n\nA subcoset Hwϕ of Wϕ is given by a reflection subgroup H of W and an  element w of W  such that wϕ induces  an automorphism of the root system of H. For algebraic groups, this corresponds to a rational form of a  reductive subgroup of maximal rank.  For example, if Wϕ corresponds to the  algebraic group 𝐆 and  H is the trivial  subgroup, the coset Hwϕ corresponds to a maximal torus 𝐓_w of type w.\n\njulia> W=coxgroup(:Bsym,2)\nBsym₂\n\njulia> WF=spets(W,Perm(1,2))\n²Bsym₂\n\njulia> subspets(WF,Int[],W(1))\nBsym₂₍₎=.Φ‴₈\n\nA subgroup H which is a parabolic subgroup corresponds to a rational form of  a Levi  subgroup of  𝐆. The  command 'twistings'  gives all rational forms of such a Levi.\n\njulia> W=coxgroup(:B,2)\nB₂\n\njulia> twistings(W,[1])\n2-element Array{Gapjm.Cosets.FCC{Int16,FiniteCoxeterSubGroup{Perm{Int16},Int64}},1}:\n B₂₍₁₎=Ã₁Φ₁\n B₂₍₁₎=Ã₁Φ₂\n\njulia> twistings(W,[2])\n2-element Array{Gapjm.Cosets.FCC{Int16,FiniteCoxeterSubGroup{Perm{Int16},Int64}},1}:\n B₂₍₂₎=A₁Φ₂\n B₂₍₂₎=A₁Φ₁\n\nNotice how we distinguish between subgroups generated by short roots and by long  roots. A general  H corresponds to  a reductive subgroup of maximal rank.  Here we consider the subgroup generated  by the long roots in B₂, which  corresponds to a  subgroup of type  SL₂× SL₂ in SP₄, and show its possible rational forms.\n\njulia> W=coxgroup(:B,2)\nB₂\n\njulia> twistings(W,[2,4])\n2-element Array{Gapjm.Cosets.FCC{Int16,FiniteCoxeterSubGroup{Perm{Int16},Int64}},1}:\n B₂₍₂₄₎=(A₁A₁)\n B₂₍₂₄₎=A₁×A₁\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.degrees-Tuple{Spets}","page":"Gapjm Documentation","title":"Gapjm.degrees","text":"degrees(WF::Spets)\n\nLet  W be  the group  of the  reflection coset  WF, and  let V be the vector  space  of  dimension  'rank(W)'  on  which W acts as a reflection group.  Let  f₁,…,fₙ  be  the  basic  invariants  of W on the symmetric algebra  SV of V;  they can be  chosen so they  are eigenvectors of the matrix  WF.F. The corresponding  eigenvalues are called  the factors of F acting on V; they characterize the coset –- they are equal to 1 only for  the trivial  coset. The  generalized degrees  of WF  are the pairs formed of the reflection degrees and the corresponding factor.\n\njulia> W=coxgroup(:E,6)\nE₆\n\njulia> WF=spets(W)\nE₆\n\njulia> phi=W(6,5,4,2,3,1,4,3,5,4,2,6,5,4,3,1);\n\njulia> HF=subspets(WF,2:5,phi)\nE₆₍₂₃₄₅₎=³D₄Φ₃\n\njulia> Diagram(HF)\nϕ acts as (1,2,4) on the component below\n  O 2\n  ￨\nO—O—O\n1 3 4\n\njulia> degrees(HF)\n6-element Array{Tuple{Int64,Cyc{Int64}},1}:\n (1, ζ₃) \n (1, ζ₃²)\n (2, 1)  \n (4, ζ₃) \n (6, 1)  \n (4, ζ₃²)\n\n\n\n\n\n","category":"method"},{"location":"#Unipotent-characters-1","page":"Gapjm Documentation","title":"Unipotent characters","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Uch\nUnipotentCharacters\ndegrees(::UnipotentCharacters,q)\nUch.CycPolUnipotentDegrees\nUniChar\nDLChar\nAlmostChar\nDLLefschetz\nLusztigInduce\nLusztigRestrict\nLusztigInductionTable\nFamilies\nFamily\ndrinfeld_double\nndrinfeld_double\nfamily_imprimitive\nFamiliesClassical","category":"page"},{"location":"#Gapjm.Uch","page":"Gapjm Documentation","title":"Gapjm.Uch","text":"Let  𝐆 be a connected reductive group defined over the algebraic closure of  a finite field 𝔽_q, with corresponding Frobenius automorphism F, or more  generally  let  F  be  an  isogeny  of  𝐆 such that a power is a Frobenius (this covers the Suzuki and Ree groups).\n\nIf  𝐓  is  an  F-stable  maximal  torus  of  𝐆,  and  𝐁 is a (not necessarily  F-stable)  Borel  subgroup  containing  𝐓,  we  define the Deligne-Lusztig  variety X_𝐁={g𝐁 ∈ 𝐆 /𝐁 ∣ g𝐁 ∩ F(g𝐁 )≠∅ }. This variety has  a  natural  action  of  𝐆  ^F  on  the  left,  so  the corresponding Deligne-Lusztig  virtual  module  ∑ᵢ  (-1)ⁱ  Hⁱ_c(X_𝐁,ℚ̄  _ℓ) also. The character of this virtual module is the Deligne-Lusztig character R_𝐓 ^𝐆 (1); the notation reflects the fact that one can prove that this character does  not  depend  on  the  choice  of  𝐁.  Actually,  this  character is parameterized by an F-conjugacy class of W: if 𝐓₀⊂𝐁₀ is an F-stable pair,  there is an unique w∈ W=N_𝐆 (𝐓₀)/𝐓₀ such that the triple (𝐓,𝐁,F) is  𝐆-conjugate to (𝐓₀,𝐁₀,wF). In this case we denote R_w for R_𝐓^𝐆 (1); it depends only on the F-class of w.\n\nThe  unipotent characters of  𝐆 ^F are  the irreducible constituents of the R_w. In a similar way that the unipotent classes are a building block for  describing the conjugacy  classes of a  reductive group, the unipotent characters  are  a  building  block  for  the  irreducible  characters of a reductive  group.  They  can  be  parameterized  by combinatorial data that Lusztig  has attached just to the coset Wφ, where φ is the finite order automorphism  of  X(𝐓₀)  such  that  F=qφ.  Thus, from the viewpoint of Chevie, they are objects combinatorially attached to a Coxeter coset.\n\nA  subset  of  the  unipotent  characters, the principal series unipotent characters,   can  be  described  in  an   elementary  way.  They  are  the constituents  of R₁, or equivalently the characters of the virtual module defined  by the cohomology of X_{𝐁 ₀},  which is the discrete variety (𝐆 /𝐁₀)^F;  the virtual  module reduces  to the  actual module ℚ̄ _ℓ[(𝐆 /𝐁₀) ^F].   Thus  the   Deligne-Lusztig  induction   R_𝐓₀^𝐆  (1)  reduces  to Harish-Chandra  induction,  defined  as  follows:  let  𝐏  =𝐔  ⋊ 𝐋 be an F-stable  Levi decomposition of an F-stable parabolic subgroup of 𝐆. Then  the Harish-Chandra induced R_𝐋^𝐆 of  a character χ of 𝐋^F is the  character Ind_{𝐏^F}^{𝐆 ^F}χ̃, where χ̃ is the lift to 𝐏^F of χ via  the quotient 𝐏^F/𝐔 ^F=𝐋^F;  Harish-Chandra induction is a particular case  of Lusztig induction,  which is defined  when 𝐏 is not F-stable using  the variety X_𝐔  ={ g𝐔 ∈𝐆  /𝐔 ∣ g𝐔  ∩ F(g𝐔 )≠∅},  and gives for an 𝐋^F-module  a  virtual  𝐆  ^F-module.  Like  ordinary  induction, these functors  have adjoint  functors going  from representations  of 𝐆  ^F to representations   (resp.   virtual   representations)   of   𝐋^F   called Harish-Chandra restriction (resp. Lusztig restriction).\n\nThe  commuting  algebra  of  𝐆^F-endomorphisms  of  R_{𝐓₀}^𝐆(1)  is  an Iwahori-Hecke  algebra for W^φ, with parameters  which are some powers of q;  they  are  all  equal  to  q  when  W^φ=W.  Thus principal series unipotent characters correspond to characters of W^φ.\n\nTo  understand the  decomposition of  Deligne-Lusztig characters,  and thus unipotent  characters,  is  is  useful  to  introduce  another set of class functions  which are parameterized  by irreducible characters  of the coset Wφ.  If  χ  is  such  a  character,  we  define  the associated almost character by: Rᵪ=|W|⁻¹∑_{w∈ W}χ(wφ) R_w. The reason to the name is that these  class  function  are  close  to irreducible characters: they satisfy ⟨Rᵪ, R_ψ⟩_{𝐆^F}=δ_{χ,ψ};  for  the  linear  and  unitary group they are actually  unipotent characters (up to sign in the latter case). They are in general  sum (with  rational coefficients)  of a  small number of unipotent characters  in  the  same  Lusztig  family  (see  \"Families  of unipotent characters\").  The degree of Rᵪ is a polynomial in q equal to the fake degree  of  the  character  χ  of  Wφ  (see  \"Functions  for Reflection cosets\").\n\nWe  now describe the parameterization of unipotent characters when W^φ=W, thus  when the coset Wφ identifies with W (the situation is similar but a  bit more difficult to describe  in general). The (rectangular) matrix of scalar  products  ⟨ρ, Rᵪ⟩_{𝐆 ^F},  when  characters of W and unipotent characters  are arranged in the right  order, is block-diagonal with rather small blocks which are called Lusztig families.\n\nFor  the characters of W a family 𝓕 corresponds to a block of the Hecke algebra  over a ring called the Rouquier  ring. To 𝓕 Lusztig associates a small  group Γ (not bigger  than (ℤ/2)^n, or 𝔖ᵢ  for i≤5) such that the  unipotent  characters  in  the  family  are parameterized by the pairs (x,θ)  taken up to  Γ-conjugacy, where x∈Γ  and θ is an irreducible character  of  C_Γ(x).  Further,  the  elements  of  𝓕  themselves  are parameterized  by a  subset of  such pairs,  and Lusztig  defines a pairing between  such pairs which computes the scalar product ⟨ρ, Rᵪ⟩_{𝐆^F}. For more details see \"DrinfeldDouble\".\n\nA  second parameterization  of unipotent  character is  via Harish-Chandra series.  A character is called cuspidal if all its proper Harish-Chandra restrictions  vanish. There are few  cuspidal unipotent characters (none in linear   groups,  and  at   most  one  in   other  classical  groups).  The 𝐆^F-endomorphism  algebra of an  Harish-Chandra induced R_{𝐋^F}^{𝐆^F}λ, where λ is a cuspidal unipotent character turns out to be a Hecke algebra associated to the group W_{𝐆^F}(𝐋^F):=N_{𝐆^F}(𝐋)/𝐋, which turns out to be a  Coxeter group.  Thus another  parameterization is  by triples (𝐋,λ,φ), where  λ  is  a  cuspidal  unipotent  character  of  𝐋^F  and φ is an irreducible   character  of  the   relative  group  W_{𝐆^F}(𝐋^F).  Such characters  are said to  belong to the  Harish-Chandra series determined by (𝐋,λ).\n\nA  final  piece  of  information  attached  to  unipotent characters is the eigenvalues  of Frobenius. Let F^δ be the smallest power of the isogeny F which is a split Frobenius (that is, F^δ is a Frobenius and φ^δ=1). Then  F^δ acts  naturally on  Deligne-Lusztig varieties  and thus  on the corresponding  virtual modules, and  commutes to the  action of 𝐆^F; thus for  a given  unipotent character  ρ, a  submodule of  the virtual module which  affords ρ  affords a  single eigenvalue  μ of  F^δ. Results of Lusztig  and  Digne-Michel  show  that  this  eigenvalue  is  of  the  form q^{aδ}λ_ρ where 2a∈ℤ and λ_ρ is a root of unity which depends only on ρ  and not the considered module. This  λ_ρ is called the eigenvalue of Frobenius  attached  to  ρ.  Unipotent  characters  in the Harish-Chandra series of a pair (𝐋,λ) have the same eigenvalue of Frobenius as λ.\n\nChevie   contains  tables  of  all   this  information,   and  can  compute Harish-Chandra  and Lusztig  induction of  unipotent characters  and almost characters. We illustrate the information on some examples:\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> uc=UnipotentCharacters(W)\nUnipotentCharacters(G₂)\n      γ│   Deg(γ)  Feg Fr(γ)    label\n───────┼──────────────────────────────\nφ₁‚₀   │        1    1     1         \nφ₁‚₆   │       q⁶   q⁶     1         \nφ′₁‚₃  │  qΦ₃Φ₆/3   q³     1    (1,ρ)\nφ″₁‚₃  │  qΦ₃Φ₆/3   q³     1   (g₃,1)\nφ₂‚₁   │ qΦ₂²Φ₃/6  qΦ₈     1    (1,1)\nφ₂‚₂   │ qΦ₂²Φ₆/2 q²Φ₄     1   (g₂,1)\nG₂[-1] │ qΦ₁²Φ₃/2    0    -1   (g₂,ε)\nG₂[1]  │ qΦ₁²Φ₆/6    0     1    (1,ε)\nG₂[ζ₃] │qΦ₁²Φ₂²/3    0    ζ₃  (g₃,ζ₃)\nG₂[ζ₃²]│qΦ₁²Φ₂²/3    0   ζ₃² (g₃,ζ₃²)\n\nThe first column gives the name of the unipotent character; the first 6 are in  the  principal  series  so  are  named  according  to the corresponding characters  of W. The last 4 are cuspidal, and named by the corresponding eigenvalue  of  Frobenius,  which  is  displayed  in  the fourth column. In general   the   names   of   the   unipotent  characters  come  from  their parameterization  by  Harish-Chandra  series;  in  addition,  for classical groups, they are associated to symbols.\n\nThe first two characters are each in a family by themselves. The last eight are  in a family associated to the group Γ=𝔖_3: the last column shows the parameters  (x,θ). The  second column  shows the  degree of the unipotent characters, which is transformed by the Lusztig Fourier matrix of the third column,  which gives the  degree of the  corresponding almost character, or equivalently the fake degree of the corresponding character of W.\n\nOne  can get  more information  on the  Lusztig Fourier  matrix of  the big family by asking\n\njulia> uc.families[1]\nFamily(D(S₃):[5, 6, 4, 3, 8, 7, 9, 10])\n   label│eigen                                               \n────────┼─────────────────────────────────────────────────────\n(1,1)   │    1 1//6  1//2  1//3  1//3  1//6  1//2  1//3  1//3\n(g₂,1)  │    1 1//2  1//2  0//1  0//1 -1//2 -1//2  0//1  0//1\n(g₃,1)  │    1 1//3  0//1  2//3 -1//3  1//3  0//1 -1//3 -1//3\n(1,ρ)   │    1 1//3  0//1 -1//3  2//3  1//3  0//1 -1//3 -1//3\n(1,ε)   │    1 1//6 -1//2  1//3  1//3  1//6 -1//2  1//3  1//3\n(g₂,ε)  │   -1 1//2 -1//2  0//1  0//1 -1//2  1//2  0//1  0//1\n(g₃,ζ₃) │   ζ₃ 1//3  0//1 -1//3 -1//3  1//3  0//1  2//3 -1//3\n(g₃,ζ₃²)│  ζ₃² 1//3  0//1 -1//3 -1//3  1//3  0//1 -1//3  2//3\n\nOne  can  do  computations  with  individual  unipotent characters. Here we construct  the Coxeter torus, and then the identity character of this torus as a unipotent character.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> T=spets(reflection_subgroup(W,Int[]),W(1,2))\nG₂₍₎=.Φ₆\n\njulia> u=UniChar(T,1)\n[G₂₍₎=.Φ₆]:<.>\n\nThen  here  are  two  ways  to  construct  the  Deligne-Lusztig  character associated to the Coxeter torus:\n\njulia> LusztigInduce(W,u)\n[G₂]:<φ₁‚₀>+<φ₁‚₆>-<φ₂‚₁>+<G₂[-1]>+<G₂[ζ₃]>+<G₂[ζ₃²]>\n\njulia> v=DLChar(W,[1,2])\n[G₂]:<φ₁‚₀>+<φ₁‚₆>-<φ₂‚₁>+<G₂[-1]>+<G₂[ζ₃]>+<G₂[ζ₃²]>\n\njulia> degree(v)\nPol{Cyc{Rational{Int64}}}: q⁶+q⁵-q⁴-2q³-q²+q+1\n\njulia> v*v\nCyc{Rational{Int64}}: 6\n\nThe  last two lines ask for the degree  of v, then for the scalar product of v with itself.\n\nFinally  we mention  that Chevie  can also  provide unipotent characters of Spetses, as defined in [@BMM14]. An example:\n\njulia> UnipotentCharacters(ComplexReflectionGroup(4))\nUnipotentCharacters(G₄)\n    γ│               Deg(γ)    Feg Fr(γ)   label\n─────┼───────────────────────────────────────────\nφ₁‚₀ │                    1      1     1        \nφ₁‚₄ │   (-√-3)q⁴Φ″₃Φ₄Φ″₆/6     q⁴     1  1∧-ζ₃²\nφ₁‚₈ │    (√-3)q⁴Φ′₃Φ₄Φ′₆/6     q⁸     1  -1∧ζ₃²\nφ₂‚₅ │            q⁴Φ₂²Φ₆/2   q⁵Φ₄     1   1∧ζ₃²\nφ₂‚₃ │(-ζ₃-2ζ₃²)qΦ″₃Φ₄Φ′₆/3   q³Φ₄     1   1∧ζ₃²\nφ₂‚₁ │(-2ζ₃-ζ₃²)qΦ′₃Φ₄Φ″₆/3    qΦ₄     1    1∧ζ₃\nφ₃‚₂ │               q²Φ₃Φ₆ q²Φ₃Φ₆     1        \nZ₃:2 │      (-√-3)qΦ₁Φ₂Φ₄/3      0   ζ₃²  ζ₃∧ζ₃²\nZ₃:11│     (-√-3)q⁴Φ₁Φ₂Φ₄/3      0   ζ₃²  ζ₃∧-ζ₃\nG₄   │           -q⁴Φ₁²Φ₃/2      0    -1 -ζ₃²∧-1\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Uch.UnipotentCharacters","page":"Gapjm Documentation","title":"Gapjm.Uch.UnipotentCharacters","text":"UnipotentCharacters(W)\n\nW  should be a Coxeter group, a  Coxeter Coset or a Spetses. The function gives  back a record containing  information about the unipotent characters of the associated algebraic group (or Spetses). This contains the following fields:\n\n:group: a pointer to W\n\n:charNames:  the list of names of the unipotent characters.\n\n:charSymbols: the list of symbols associated to unipotent characters, for classical groups.\n\n:harishChandra:  information  about  Harish-Chandra  series  of  unipotent characters.  This is itself a list of records, one for each pair (𝐋,λ) of a  Levi  of  an  F-stable  parabolic  subgroup  and  a cuspidal unipotent character of 𝐋^F. These records themselves have the following fields:\n\n:levi: a list 'l' such that 𝐋 corresponds to 'ReflectionSubgroup(W,l)'.\n\n:cuspidalName: the name of the unipotent cuspidal character lambda.\n\n:eigenvalue: the eigenvalue of Frobenius for λ.\n\n:relativeType: the reflection type of W_𝐆 (𝐋);\n\n:parameterExponents:  the  𝐆 ^F-endomorphism  algebra  of R_𝐋^𝐆 (λ) is a Hecke algebra for W_𝐆 (𝐋) with some parameters of the form q^{a_s}. This holds the list of exponents a_s.\n\n:charNumbers:  the  indices  of  the  unipotent  characters indexed by the irreducible characters of W_𝐆 (𝐋).\n\n:families:  information  about  Lusztig  families of unipotent characters. This  is itself a list  of records, one for  each family. These records are described in the section about families below.\n\njulia> W=coxgroup(:Bsym,2)\nBsym₂\n\njulia> WF=spets(W,Perm(1,2))\n²Bsym₂\n\njulia> uc=UnipotentCharacters(WF)\nUnipotentCharacters(²Bsym₂)\n       γ│   Deg(γ)   Feg Fr(γ) label\n────────┼────────────────────────────\n2       │        1     1     1      \n11      │       q⁴    q⁴     1      \n²B₂[1,3]│√2qΦ₁Φ₂/2 qΦ₁Φ₂   ζ₈³     1\n²B₂[1,5]│√2qΦ₁Φ₂/2     0   ζ₈⁵     2\n\njulia> uc.families\n3-element Array{Family,1}:\n Family(C₁:[1]) \n Family(C₁:[2]) \n Family(?4:3:4)\n\njulia> uc.families[3]\nFamily(?4:3:4)\nlabel│eigen    1     2\n─────┼─────────────────\n1    │  ζ₈³ √2/2 -√2/2\n2    │  -ζ₈ √2/2  √2/2\n\n:charnames:  returns  the  names  of  the  unipotent characters. Using the version  with an additional  option record as  the second argument, one can control the display in various ways.\n\njulia> uc=UnipotentCharacters(coxgroup(:G,2));\n\njulia> charnames(uc;limit=true)\n10-element Array{String,1}:\n \"φ₁‚₀\"   \n \"φ₁‚₆\"   \n \"φ′₁‚₃\"  \n \"φ″₁‚₃\"  \n \"φ₂‚₁\"   \n \"φ₂‚₂\"   \n \"G₂[-1]\" \n \"G₂[1]\"  \n \"G₂[ζ₃]\" \n \"G₂[ζ₃²]\"\n\njulia> charnames(uc;TeX=true)\n10-element Array{String,1}:\n \"\\phi_{1,0}\"    \n \"\\phi_{1,6}\"    \n \"\\phi_{1,3}'\"   \n \"\\phi_{1,3}''\"  \n \"\\phi_{2,1}\"    \n \"\\phi_{2,2}\"    \n \"G_2[-1]\"        \n \"G_2[1]\"         \n \"G_2[\\zeta_3]\"  \n \"G_2[\\zeta_3^2]\"\n\n:Display:  One can control the display  of unipotent characters in various ways.  In the record controlling 'Display', a field 'items' specifies which columns are displayed. The possible values are\n\n:n0:  The index of the character in the list of unipotent characters.\n\n:Name:   The name of the unipotent character.\n\n:Degree:  The degree of the unipotent character.\n\n:FakeDegree: The degree of the corresponding almost character.\n\n:Eigenvalue:  The eigenvalue of Frobenius attached to the unipotent character.\n\n:Symbol: for classical groups, the symbol attached to the unipotent character.\n\n:Family: The parameter the character has in its Lusztig family.\n\n:Signs: The signs attached to the character in the Fourier transform.\n\nThe default value is  'items:=[:Name,:Degree,:FakeDegree,:Eigenvalue,:Family]`\n\nThis  can be changed by setting the variable 'UnipotentCharactersOps.items` which holds this default value. In addition if the field 'byFamily' is set, the  characters are displayed  family by family  instead of in index order. Finally,  the field 'chars' can be  set, indicating which characters are to be displayed in which order.\n\njulia> W=coxgroup(:B,2)\nB₂\n\njulia> uc=UnipotentCharacters(W)\nUnipotentCharacters(B₂)\n  γ│Deg(γ) Feg Fr(γ) label\n───┼───────────────────────\n11.│ qΦ₄/2  q²     1   +,-\n1.1│qΦ₂²/2 qΦ₄     1   +,+\n.11│    q⁴  q⁴     1      \n2. │     1   1     1      \n.2 │ qΦ₄/2  q²     1   -,+\nB₂ │qΦ₁²/2   0    -1   -,-\n\ngap> Display(uc,rec(byFamily:=true));\nUnipotent characters for B2\nName |  Degree FakeDegree Eigenvalue Label\n___________________________________________\n*.11 |     q^4        q^4          1\n___________________________________________\n11.  |  1/2qP4        q^2          1   +,-\n*1.1 |1/2qP2^2        qP4          1   +,+\n.2   |  1/2qP4        q^2          1   -,+\nB2   |1/2qP1^2          0         -1   -,-\n___________________________________________\n*2.  |'|'|       1          1          1\ngap> Display(uc,items=[:n0,:Name,:Symbol]));\nUnipotent characters for B2\nn0 |Name   Symbol\n__________________\n1  | 11.   (12,0)\n2  | 1.1   (02,1)\n3  | .11 (012,12)\n4  |  2.     (2,)\n5  |  .2   (01,2)\n6  |  B2   (012,)|\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.degrees-Tuple{UnipotentCharacters,Any}","page":"Gapjm Documentation","title":"Gapjm.degrees","text":"degrees(uc::UnipotentCharacters,q=Pol([1],1))\n\nReturns  the  list  of  degrees  of  the unipotent characters of the finite reductive group (or Spetses) with Weyl group (or Spetsial reflection group) W, evaluated at q.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> uc=UnipotentCharacters(W);\n\njulia> degrees(uc)\n10-element Array{Pol{Rational{Int64}},1}:\n 1//1                                         \n (1//1)q⁶                                     \n (1//3)q⁵+(1//3)q³+(1//3)q                    \n (1//3)q⁵+(1//3)q³+(1//3)q                    \n (1//6)q⁵+(1//2)q⁴+(2//3)q³+(1//2)q²+(1//6)q  \n (1//2)q⁵+(1//2)q⁴+(1//2)q²+(1//2)q           \n (1//2)q⁵+(-1//2)q⁴+(-1//2)q²+(1//2)q         \n (1//6)q⁵+(-1//2)q⁴+(2//3)q³+(-1//2)q²+(1//6)q\n (1//3)q⁵+(-2//3)q³+(1//3)q                   \n (1//3)q⁵+(-2//3)q³+(1//3)q                   \n\n\n\n\n\n","category":"method"},{"location":"#Gapjm.Uch.CycPolUnipotentDegrees","page":"Gapjm Documentation","title":"Gapjm.Uch.CycPolUnipotentDegrees","text":"CycPolUnipotentDegrees(W)\n\nTaking  advantage that  the degrees  of unipotent  characters of the finite reductive group (or Spetses) with Weyl group (or Spetsial reflection group) W  are products  of cyclotomic  polynomials, this  function returns these degrees as a list of CycPols.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> Uch.CycPolUnipotentDegrees(W)\n10-element Array{CycPol{Rational{Int64}},1}:\n 1     \n q⁶       \n qΦ₃Φ₆/3  \n qΦ₃Φ₆/3  \n qΦ₂²Φ₃/6 \n qΦ₂²Φ₆/2 \n qΦ₁²Φ₃/2 \n qΦ₁²Φ₆/6 \n qΦ₁²Φ₂²/3\n qΦ₁²Φ₂²/3\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Uch.UniChar","page":"Gapjm Documentation","title":"Gapjm.Uch.UniChar","text":"UniChar(W,l)\n\nConstructs  an object representing the unipotent character specified by l of  the algebraic  group associated  to the  Coxeter group or Coxeter coset specified  by W. There are 3 possibilities  for l: if it is an integer, the  l-th unipotent character of W is  returned. If it is a string, the unipotent  character of W whose name is l is returned. Finally, l can be  a  list  of  length  the  number  of unipotent characters of W, which specifies the coefficient to give to each.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> UniChar(W,7)\n[G₂]:<G₂[-1]>\n\njulia> UniChar(W,\"G2[E3]\")\n[G₂]:<G₂[ζ₃]>\n\njulia> UniChar(W,[1,0,0,-1,0,0,2,0,0,1])\n[G₂]:<φ₁‚₀>-<φ″₁‚₃>+2<G₂[-1]>+<G₂[ζ₃²]>\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Uch.DLChar","page":"Gapjm Documentation","title":"Gapjm.Uch.DLChar","text":"DLChar(W,w)\n\nThis  function returns  the Deligne-Lusztig  character R_𝐓  ^𝐆 (1) of the algebraic  group 𝐆 associated to the Coxeter group or Coxeter coset W. The  torus  𝐓  can  be  specified  in  3  ways:  if w is an integer, it represents the w-th conjugacy class (or phi-conjugacy class for a coset Wϕ)  of W. Otherwise  w can be  a word or  an element of  W, and it represents the class (or ϕ-class) of w.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> DLChar(W,3)\n[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>\n\njulia> DLChar(W,W(1))\n[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>\n\njulia> DLChar(W,[1])\n[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>\n\njulia> DLChar(W,[1,2])\n[G₂]:<φ₁‚₀>+<φ₁‚₆>-<φ₂‚₁>+<G₂[-1]>+<G₂[ζ₃]>+<G₂[ζ₃²]>\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Uch.AlmostChar","page":"Gapjm Documentation","title":"Gapjm.Uch.AlmostChar","text":"AlmostChar(W,i)\n\nThis  function  returns  the  i-th  almost  unipotent  character  of  the algebraic  group 𝐆 associated to the Coxeter group or Coxeter coset W. If φ is the i-th irreducible character of W, the i-th almost character is  R_φ=W⁻¹∑_w∈  W  φ(w)  R_𝐓_w^𝐆  (1)  where  𝐓_w is the maximal torus associated  to the conjugacy class (or  ϕ-conjugacy class for a coset) of w.\n\njulia> W=coxgroup(:B,2)\nB₂\n\njulia> AlmostChar(W,3)\n[B₂]:<.11>\n\njulia> AlmostChar(W,1)\n[B₂]:1/2<11.>+1/2<1.1>-1/2<.2>-1/2<B₂>\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Uch.DLLefschetz","page":"Gapjm Documentation","title":"Gapjm.Uch.DLLefschetz","text":"DLLefschetz(h)\n\nHere h is an element of a Hecke algebra associated to a Coxeter group <W> which  itself  is  associated  to  an  algebraic  group 𝐆. By results of Digne-Michel,  for g∈  𝐆 ^F,  the number  of fixed  points of Fᵐ on the Deligne-Lusztig variety associated to the element wϕ of the Coxeter coset Wϕ, have for m sufficiently divisible, the form ∑_φ φ_(qᵐ)(T_wϕ)R_φ(g) where  φ runs over the irreducible characters of Wϕ, where R_φ is the corresponding  almost character, and where φ_(qᵐ) is a character value of the  Hecke algebra ℋ (Wϕ,qᵐ) of Wϕ with parameter qᵐ. This expression is  called the Lefschetz character of  the Deligne-Lusztig variety. If we consider qᵐ as an indeterminate x, it can be seen as a sum of unipotent characters  with coefficients character values of the generic Hecke algebra ℋ (Wϕ,x).\n\nThe  function 'DLLefschetz' takes  as argument a  Hecke element and returns the  corresponding Lefschetz character. This is defined on the whole of the Hecke  algebra by linearity.  The Lefschetz character  of various varieties related   to   Deligne-Lusztig   varieties,   like   their  completions  or desingularisation,  can be  obtained by  taking the  Lefschetz character at various elements of the Hecke algebra.\n\njulia> W=coxgroup(:A,2)\nA₂\n\njulia> H=hecke(W,Pol(:q))\nhecke(A₂,q)\n\njulia> T=Tbasis(H);\n\njulia> DLLefschetz(T(1,2))\n[A₂]:<111>-q<21>+q²<3>\n\njulia> DLLefschetz((T(1)+T())*(T(2)+T()))\n[A₂]:q<21>+(q²+2q+1)<3>\n\nThe   last  line  shows  the   Lefschetz  character  of  the  Samelson-Bott desingularisation of the Coxeter element Deligne-Lusztig variety.\n\nWe now show an example with a coset (corresponding to the unitary group).\n\ngap> H:=Hecke(CoxeterCoset(W,(1,2)),q^2); Hecke(2A2,q^2) gap> T:=Basis(H,\"T\"); function ( arg ) ... end gap> DeligneLusztigLefschetz(T(1)); [2A2]=-<11>-q<2A2>+q^2<2>\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Uch.LusztigInduce","page":"Gapjm Documentation","title":"Gapjm.Uch.LusztigInduce","text":"LusztigInduce(W,u)\n\nu  should be a unipotent character of a parabolic subcoset of the Coxeter coset  W. It represents  a unipotent character  λ of a  Levi 𝐋 of the algebraic  group  𝐆  attached  to  W.  The  program returns the Lusztig induced R_𝐋^𝐆(λ).\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> WF=spets(W)\nG₂\n\njulia> T=subspets(WF,Int[],W(1))\nG₂₍₎=.Φ₁Φ₂\n\njulia> u=UniChar(T,1)\n[G₂₍₎=.Φ₁Φ₂]:<.>\n\njulia> LusztigInduce(WF,u)\n[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>\n\njulia> DLChar(W,W(1))\n[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Uch.LusztigRestrict","page":"Gapjm Documentation","title":"Gapjm.Uch.LusztigRestrict","text":"LusztigRestrict(R,u)\n\nu  should be a unipotent character of a parent Coxeter coset W of which R is a parabolic subcoset. It represents a unipotent character γ of the algebraic  group 𝐆 attached to W,  while R represents a Levi subgroup L. The program returns the Lusztig restriction *R_𝐋^𝐆(γ).\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> WF=spets(W)\nG₂\n\njulia> T=subspets(WF,Int[],W(1))\nG₂₍₎=.Φ₁Φ₂\n\njulia> u=DLChar(W,W(1))\n[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>\n\njulia> Uch.LusztigRestrict(T,u)\n[G₂₍₎=.Φ₁Φ₂]:4<.>\n\njulia> T=subspets(WF,Int[],W(2))\nG₂₍₎=.Φ₁Φ₂\n\njulia> Uch.LusztigRestrict(T,u)\n[G₂₍₎=.Φ₁Φ₂]:0\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Lusztig.LusztigInductionTable","page":"Gapjm Documentation","title":"Gapjm.Lusztig.LusztigInductionTable","text":"LusztigInductionTable(R,W)\n\nR  should be a parabolic subgroup of the Coxeter group W or a parabolic subcoset  of  the  Coxeter  coset  W,  in  each  case representing a Levi subgroup  𝐋 of  the algebraic  group 𝐆  associated to W. The function returns  an  InductionTable  representing  the  Lusztig induction R_𝐋^𝐆 between unipotent characters.\n\njulia> W=coxgroup(:B,3)\nB₃\n\njulia> t=twistings(W,[1,3])\n2-element Array{Gapjm.Cosets.FCC{Int16,FiniteCoxeterSubGroup{Perm{Int16},Int64}},1}:\n B₃₍₁₃₎=Ã₁×A₁Φ₁\n B₃₍₁₃₎=Ã₁×A₁Φ₂\n\njulia> LusztigInductionTable(t[2],W)\nLusztig Induction from B₃₍₁₃₎=Ã₁×A₁Φ₂ to B₃\n     │11⊗ 11 11⊗ 2 2⊗ 11 2⊗ 2\n─────┼────────────────────────\n111. │     1    -1    -1    .\n11.1 │    -1     .     1   -1\n1.11 │     .     .    -1    .\n.111 │    -1     .     .    .\n21.  │     .     .     .    .\n1.2  │     1    -1     .    1\n2.1  │     .     1     .    .\n.21  │     .     .     .    .\n3.   │     .     .     .    1\n.3   │     .     1     1   -1\nB₂:2 │     .     .     1   -1\nB₂:11│     1    -1     .    .\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Families","page":"Gapjm Documentation","title":"Gapjm.Families","text":"Families of unipotent characters\n\nThe  blocks of the (rectangular) matrix  ⟨Rᵪ,ρ⟩_{𝐆 ^F} when χ runs over Irr(W)  and  ρ  runs  over  the  unipotent  characters,  are called the Lusztig  families. When  𝐆  is split  and W  is a Coxeter group they correspond  on the Irr(W) side to two-sided Kazhdan-Lusztig cells –- for split  Spetses they  correspond to  Rouquier blocks  of the  Spetsial Hecke algebra.  The matrix of scalar products ⟨Rᵪ,ρ⟩_{𝐆 ^F} can be completed to a  square matrix ⟨A_{ρ'},ρ⟩_{𝐆 ^F} where A_{ρ'} are the characteristic functions of character sheaves on 𝐆 ^F; this square matrix is called the Fourier matrix of the family.\n\nThe  'UnipotentCharacters' record in Chevie contains a field '.families', a list of family records containing information on each family, including the Fourier matrix. Here is an example.\n\njulia> W=coxgroup(:G,2)\nG₂\n\njulia> uc=UnipotentCharacters(W);\n\njulia> uc.families\n3-element Array{Family,1}:\n Family(D(S₃):[5, 6, 4, 3, 8, 7, 9, 10])\n Family(C₁:[1])                         \n Family(C₁:[2])                         \n\njulia> uc.families[1]\nFamily(D(S₃):[5, 6, 4, 3, 8, 7, 9, 10])\n   label│eigen                                               \n────────┼─────────────────────────────────────────────────────\n(1,1)   │    1 1//6  1//2  1//3  1//3  1//6  1//2  1//3  1//3\n(g₂,1)  │    1 1//2  1//2  0//1  0//1 -1//2 -1//2  0//1  0//1\n(g₃,1)  │    1 1//3  0//1  2//3 -1//3  1//3  0//1 -1//3 -1//3\n(1,ρ)   │    1 1//3  0//1 -1//3  2//3  1//3  0//1 -1//3 -1//3\n(1,ε)   │    1 1//6 -1//2  1//3  1//3  1//6 -1//2  1//3  1//3\n(g₂,ε)  │   -1 1//2 -1//2  0//1  0//1 -1//2  1//2  0//1  0//1\n(g₃,ζ₃) │   ζ₃ 1//3  0//1 -1//3 -1//3  1//3  0//1  2//3 -1//3\n(g₃,ζ₃²)│  ζ₃² 1//3  0//1 -1//3 -1//3  1//3  0//1 -1//3  2//3\n\njulia> charnames(uc)[uc.families[1][:charNumbers]]\n8-element Array{String,1}:\n \"phi2,1\"  \n \"phi2,2\"  \n \"phi1,3''\"\n \"phi1,3'\" \n \"G2[1]\"   \n \"G2[-1]\"  \n \"G2[E3]\"  \n \"G2[E3^2]\"\n\nThe Fourier matrix is obtained by 'fourier(f)'; the field 'f[:charNumbers]' holds  the indices of the unipotent characters  which are in the family. We obtain  the list of eigenvalues of Frobenius for these unipotent characters by  'Eigenvalues(f)'. The Fourier matrix  and vector of eigenvalues satisfy the  properties of fusion data, see  below. The field 'f[:charLabels]' is what  is displayed  in the  column 'labels'  when displaying the family. It contains  labels naturally attached to lines  of the Fourier matrix. In the case   of  reductive  groups,   the  family  is   always  attached  to  the \"drinfeld_double\"  of a small  finite group and  the '.charLabels' come from this construction.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Families.Family","page":"Gapjm Documentation","title":"Gapjm.Families.Family","text":"Family(f [, charNumbers [, opt]])\n\nThis function creates a new family in two possible ways.\n\nIn  the first case f is a string which denotes a family known to  CHEVIE. Examples are \"S3\",   \"S4\",   \"S5\"   which denote the family obtained as the Drinfeld  double of the symmetric group  on 3,4,5 elements, or \"C2\"   which denotes the Drinfeld double of the cyclic group of order 2.\n\nIn the second case f is already a struct Family.\n\nThe other (optional) arguments add information to the family defined by the first argument. If given, the second argument becomes f[:charNumbers]. If given,  the third argument  opt is a  Dict whose keys  are added to the resulting family.\n\nIf opt has a key signs, this should be a list of '1' and '-1', and then the  Fourier matrix  is conjugated  by the  diagonal matrix of those signs. This  is used  in Spetses  to adjust  the matrix  to the choice of signs of unipotent degrees.\n\njulia> Family(\"C2\")\nFamily(C₂:4)\n label│eigen                       \n──────┼─────────────────────────────\n(1,1) │    1 1//2  1//2  1//2  1//2\n(g₂,1)│    1 1//2  1//2 -1//2 -1//2\n(1,ε) │    1 1//2 -1//2  1//2 -1//2\n(g₂,ε)│   -1 1//2 -1//2 -1//2  1//2\n\njulia> Family(\"C2\",4:7,Dict(:signs=>[1,-1,1,-1]))\nFamily(C₂:4:7)\n label│eigen signs                       \n──────┼───────────────────────────────────\n(1,1) │    1     1  1//2 -1//2 1//2 -1//2\n(g₂,1)│    1    -1 -1//2  1//2 1//2 -1//2\n(1,ε) │    1     1  1//2  1//2 1//2  1//2\n(g₂,ε)│   -1    -1 -1//2 -1//2 1//2  1//2\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Families.drinfeld_double","page":"Gapjm Documentation","title":"Gapjm.Families.drinfeld_double","text":"drinfeld_double(g[,opt])\n\nGiven  a (usually small) finite group  Γ, Lusztig has associated a family (a  Fourier matrix, a list of eigenvalues of Frobenius) which describes the representation ring of the Drinfeld double of the group algebra of Γ, and for   some  appropriate  small  groups  describes  a  family  of  unipotent characters. We do not explain the details of this construction, but explain how its final result building Lusztig's Fourier matrix, and a variant of it that we use in Spetses, from Γ.\n\nThe  elements of the family are in bijection  with the set 𝓜 (Γ) of pairs (x,χ)  taken up to  Γ-conjugacy, where x∈Γ  and χ is an irreducible complex-valued   character  of  C_Γ(x).  To  such  a  pair  ρ=(x,χ)  is associated  an eigenvalue of Frobenius defined by ω_ρ:=χ(x)/χ(1). Lusztig then defines a Fourier matrix S₀ whose coefficient is given, for ρ=(x,χ) and ρ'=(x', χ'), by:\n\nS₀_{ρ,ρ'}:=#C_Γ(x)⁻¹ ∑_{ρ₁=(x₁,χ₁)}χ̄₁(x)χ(y₁)\n\nwhere the sum is over all pairs ρ₁∈𝓜 (Γ) which are Γ-conjugate to ρ' and  such that y₁∈  C_Γ(x). This coefficient  also represents the scalar product ⟨ρ,ρ'⟩_{𝐆^F} of the corresponding unipotent characters.\n\nA  way  to  understand  the  formula  for  S₀_{ρ,ρ'} better is to consider another  basis of the complex  vector space with basis  𝓜 (Γ), indexed by the  pairs  (x,y)  taken  up  to  Γ-conjugacy,  where  x  and y are commuting  elements  of  Γ.  This  basis  is  called  the basis of Mellin transforms, and given by:\n\n(x,y)=∑_{χ∈ Irr(C_Γ(x))}χ(y)(x,χ)\n\nIn  the  basis  of  Mellin  transforms,  the  linear  map  S₀ is given by (x,y)↦(x⁻¹,y⁻¹)  and  the  linear  transformation  T which sends ρ to ω_ρρ   becomes  (x,y)↦(x,xy).   These  are   particular  cases  of  the permutation  representation of GL_2(ℤ) on  the basis of Mellin transforms where (begin{array}{cc}a&b;c&d{array}) %begin{pmatrix}{cc}a&b;c&d{pmatrix} acts by (x,y)↦(x^ay^b,x^cy^d).\n\nFourier  matrices in finite reductive groups  are given by the above matrix S₀.  But for non-rational Spetses, we use  a different matrix S which in the  basis of Mellin transforms  is given by (x,y)↦(y⁻¹,x). Equivalently, the  formula S_{ρ,ρ'}  differs from  the formula  for S₀_{ρ,ρ'}  in that there  is no complex conjugation of χ₁;  thus the matrix S is equal to S₀  multiplied on the right by the permutation matrix which corresponds to (x,χ)↦(x,χ̄).  The advantage of the matrix S  over S₀ is that the pair S,T  satisfies directly the axioms for a fusion algebra (see below); also the matrix S is symmetric, while S₀ is Hermitian.\n\nThus there are two variants of 'drinfeld_double`:\n\ndrinfeld_double(g,lu=true)\n\nreturns  a family  containing Lusztig's  Fourier matrix  S₀, and  an extra field  '.perm'  containing  the  permutation  of  the  indices  induced  by (x,χ)↦(x,χ̄),  which allows  to recover  S, as  well as  an extra field `:lusztig', set to 'true'.\n\ndrinfeld_double(g)\n\nreturns a family with the matrix S, which does not have fields '.lusztig' or '.perm'.\n\nThe family record 'f' returned also has the fields:\n\n:group: the group Γ.\n\n:charLabels: a list of labels describing the pairs (x,χ), and thus also specifying in which order they are taken.\n\n:fourierMat: the Fourier matrix (the matrix S or S₀ depending on the call).\n\n:eigenvalues: the eigenvalues of Frobenius.\n\n:xy: a list of pairs '[x,y]' which are representatives of the Γ-orbits of pairs of commuting elements.\n\n:mellinLabels: a list of labels describing the pairs '[x,y]'.\n\n:mellin:  the base change matrix between  the basis (x,χ) and the basis of   Mellin  transforms,   so  that   |f.fourierMat^(f.mellin^-1)|  is  the permutation  matrix (for (x,y)↦(y⁻¹,x)  or (x,y)↦(y⁻¹,x⁻¹) depending on the call).\n\n:special: the index of the special element, which is (x,χ)=(1,1).\n\njulia> drinfeld_double(CoxSym(3))\nFamily(D(CoxSym(3)):8)\n   label│eigen                                       \n────────┼─────────────────────────────────────────────\n(1,X.1) │    1  1/6  1/3 1/6 -3/2 -3/2  1/3  1/3  1/3\n(1,X.2) │    1  1/3  2/3 1/3    0    0 -1/3 -1/3 -1/3\n(1,1)   │    1  1/6  1/3 1/6  3/2  3/2  1/3  1/3  1/3\n(2a,X.1)│   -1 -1/6    0 1/6  1/2 -1/2    0    0    0\n(2a,1)  │    1 -1/6    0 1/6 -1/2  1/2    0    0    0\n(3a,1)  │    1  1/3 -1/3 1/3    0    0  2/3 -1/3 -1/3\n(3a,X.2)│  ζ₃²  1/3 -1/3 1/3    0    0 -1/3 -1/3  2/3\n(3a,X.3)│   ζ₃  1/3 -1/3 1/3    0    0 -1/3  2/3 -1/3\n\njulia> drinfeld_double(CoxSym(3);lu=true)\nFamily(LD(CoxSym(3)):8)\n   label│eigen                                       \n────────┼─────────────────────────────────────────────\n(1,X.1) │    1  1/6  1/3 1/6 -3/2 -3/2  1/3  1/3  1/3\n(1,X.2) │    1  1/3  2/3 1/3    0    0 -1/3 -1/3 -1/3\n(1,1)   │    1  1/6  1/3 1/6  3/2  3/2  1/3  1/3  1/3\n(2a,X.1)│   -1 -1/6    0 1/6  1/2 -1/2    0    0    0\n(2a,1)  │    1 -1/6    0 1/6 -1/2  1/2    0    0    0\n(3a,1)  │    1  1/3 -1/3 1/3    0    0  2/3 -1/3 -1/3\n(3a,X.2)│  ζ₃²  1/3 -1/3 1/3    0    0 -1/3  2/3 -1/3\n(3a,X.3)│   ζ₃  1/3 -1/3 1/3    0    0 -1/3 -1/3  2/3\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Families.ndrinfeld_double","page":"Gapjm Documentation","title":"Gapjm.Families.ndrinfeld_double","text":"ndrinfeld_double(g)\n\nThis  function returns the number of elements that the family associated to the  Drinfeld double of the group g would have, without computing it. The evident advantage is the speed.\n\njulia> Families.ndrinfeld_double(ComplexReflectionGroup(5))\n378\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Families.family_imprimitive","page":"Gapjm Documentation","title":"Gapjm.Families.family_imprimitive","text":"family_imprimitive(<S>)\n\n<S> should be a symbol for a unipotent characters of an imprimitive complex reflection  group 'G(e,1,n)' or 'G(e,e,n)'. The function returns the family\n\njulia> HasType.Family(family_imprimitive([[0,1],[1],[0]]))\nFamily(0011:3)\nlabel│eigen      1         2         3\n─────┼─────────────────────────────────\n1    │  ζ₃²  √-3/3    -√-3/3     √-3/3\n2    │    1 -√-3/3 (3-√-3)/6 (3+√-3)/6\n3    │    1  √-3/3 (3+√-3)/6 (3-√-3)/6\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Families.FamiliesClassical","page":"Gapjm Documentation","title":"Gapjm.Families.FamiliesClassical","text":"FamiliesClassical(l)\n\nThe  list  l  should  be  a  list  of symbols as returned by the function Symbols,  which classify the unipotent characters of groups of type :B, :C  or :D. FamiliesClassical returns  the list of families determined by these symbols.\n\njulia> HasType.FamiliesClassical(HasType.BDSymbols(3,1))\n6-element Array{Family,1}:\n Family(01123:[1, 3, 8])\n Family(3:[9])          \n Family(013:[5, 7, 10]) \n Family(0112233:[4])    \n Family(112:[2])        \n Family(022:[6])\n\nThe  above example shows the families of unipotent characters for the group B_3.\n\n\n\n\n\n","category":"function"},{"location":"#Unipotent-classes-of-reductive-groups-1","page":"Gapjm Documentation","title":"Unipotent classes of reductive groups","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Ucl\nUnipotentClasses\nICCTable\ninduced_linear_form","category":"page"},{"location":"#Gapjm.Ucl","page":"Gapjm Documentation","title":"Gapjm.Ucl","text":"This  module gives information  about the unipotent  conjugacy classes of a connected  reductive  group  over  an  algebraically  closed field k, and various  invariants attached to  them. The unipotent  classes depend on the characteristic of k; their classification differs when the characteristic is  not good  (that is,  when it  divides one  of the coefficients of the highest  root).  In  good  characteristic,  the  unipotent  classes  are in bijection with nilpotent orbits on the Lie algebra.\n\nWe  give  the  following  information  for  a unipotent element u of each class:\n\nthe centralizer C_𝐆 (u), that we describe by the reductive part of C_𝐆 (u)^0,  by the group  of components A(u):=C_𝐆 (u)/C_𝐆 (u)^0, and by the dimension of its radical.\nin good characteristic, the  Dynkin-Richardson  diagram.\nthe Springer correspondence,  attaching characters of  the Weyl group or\n\nrelative Weyl groups to each character of A(u).\n\nThe  Dynkin-Richarson diagram is attached to a nilpotent element e of the Lie  algebra 𝔤.  By the  Jacobson-Morozov theorem  there exists an 𝔰𝔩₂ subalgebra of 𝔤 containing e as the element beginpmatrix1001 endpmatrix. Let 𝐒 be the torus beginpmatrixh00h^-1 endpmatrix of SL₂ and let 𝐓 be a maximal  torus containing 𝐒, so that 𝐒  is the image of a one-parameter subgroup σ∈ Y(𝐓). Consider the root decomposition 𝔤=∑_{α∈Σ}𝔤_α given by 𝐓;  then α↦⟨σ,α⟩ defines a linear form  on Σ, determined by its value on  simple roots. It is possible to choose  a system of simple roots Π so that  ⟨σ,α⟩≥ 0  for α∈Π,  and then  ⟨σ,α⟩∈{0,1,2} for  any α∈Π. The Dynkin  diagram  of  Π  decorated  by  these values 0,1,2 is called the Dynkin-Richardson  diagram of e, and in good characteristic is a complete invariant of its 𝔤-orbit.\n\nLet  𝓑  be  the  variety  of  all  Borel  subgroups  and let 𝓑ᵤ be the subvariety  of Borel subgroups  containing the unipotent  element u. Then dim C_𝐆(u)=rank𝐆+2dim𝓑ᵤ and in good characteristic this dimension can be computed  from the Dynkin-Richardson diagram: the dimension of the class of u is the number of roots α such that ⟨σ,α⟩∉{0,1}.\n\nWe   describe  now  the  Springer  correspondence.  Indecomposable  locally constant  𝐆-equivariant  sheaves  on  C,  called  local  systems, are parameterized  by irreducible characters of A(u). The ordinary Springer correspondence  is a bijection  between irreducible characters  of the Weyl group  and a large subset  of the local systems  which contains all trivial local  systems (those parameterized by the  trivial character of A(u) for each  u).  More  generally,  the  generalized  Springer  correspondence associates  to each local  system a (unique  up to 𝐆-conjugacy) cuspidal pair  of a Levi  subgroup 𝐋 of  𝐆 and a  cuspidal local system on an unipotent  class of 𝐋, such that the set of local systems associated to a given cuspidal pair is parameterized by the characters of the relative Weyl group W_𝐆(𝐋):=N_𝐆(𝐋)/𝐋. There are only few cuspidal pairs.\n\nThe  Springer correspondence gives information on the character values of a finite  reductive  groups  as  follows:  assume  that  k is the algebraic closure  of a finite field 𝔽_q and  that F is the Frobenius attached to an 𝔽_q-structure of 𝐆. Let C be an F-stable unipotent class and let u∈  C^F; we call C  the geometric class of  u and the 𝐆^F-classes inside  C^F  are  parameterized  by  the F-conjugacy classes of A(u), denoted  H^1(F,A(u)) (most of the time we can find u such that F acts trivially  on A(u) and H^1(F,A(u)) is then just the conjugacy classes). To  an F-stable character φ of  A(u) we associate the characteristic function  of  the  corresponding  local  system (actually associated to an extension  φ̃ of φ  to A(u).F); it  is a class  function Y_{u,φ} on 𝐆^F  which can be  normalized so that:  Y_{u,φ}(u₁)=φ̃(cF) if u₁ is geometrically  conjugate to u and its 𝐆^F-class is parameterized by the F-conjugacy class cF of A(u), otherwise Y_{u,φ}(u₁)=0. If the pair u,φ  corresponds via the Springer correspondence  to the character χ of W_𝐆(𝐋),  then Y_{u,φ} is also denoted Yᵪ. There is another important class of functions indexed by local systems: to a local system on class C is  attached  an  intersection  cohomology  complex,  which is a complex of sheaves  supported on  the closure  C̄. To  such a  complex of sheaves is associated  its  characteristic  function,  a  class  function  of  𝐆^F obtained  by taking  the alternating  trace of  the Frobenius acting on the stalks  of the cohomology sheaves. If  Y_ψ is the characteristic function of  a  local  system,  the  characteristic  function  of  the corresponding intersection  cohomology  complex  is  denoted  by  X_ψ. This function is supported  on C̄, and Lusztig has  shown that X_ψ=∑ᵩ P_{ψ,χ} Yᵪ where P_{ψ,χ}  are integer polynomials  in q and  Yᵪ are attached to local systems on classes lying in C̄.\n\nLusztig  and Shoji have given an algorithm to compute the matrix P_{ψ,χ}, which  is  implemented  in  Chevie.  The  relationship  with  characters of 𝐆(𝔽_q),  taking to simplify the ordinary Springer correspondence, is that the  restriction to the unipotent elements of the almost character R_χ is equal  to q^{bᵪ} Xᵪ, where bᵪ is dim  𝓑ᵤ for an element u of the class  C such  that the  support of  χ is  C̄. The restriction of the Deligne-Lusztig  characters R_w to  the unipotents are  called the Green functions  and can also be computed by Chevie. The values of all unipotent characters  on  unipotent  elements  can  also  be computed in principle by applying Lusztig's Fourier transform matrix (see the section on the Fourier matrix)  but  there  is  a  difficulty  in  that  the  Xᵪ  must be first multiplied  by some roots  of unity which  are not known  in all cases (and when  known may  depend on  the congruence  class of  q modulo some small primes).\n\nWe illustrate these computations on some examples:\n\njulia> UnipotentClasses(rootdatum(:sl,4))\nUnipotentClasses(A₃)\n1111<211<22<31<4\n   u│D-R dBu B-C          C(u) A₃(A₃₍₎=.) A₁(A₃₍₁₃₎=A₁×A₁)/-1 .(A₃)/ζ₄\n────┼──────────────────────────────────────────────────────────────────\n4   │222   0 222         q³.Z₄        1:4                -1:2    ζ₄:Id\n31  │202   1 22.   q⁴.A₁₍₎=.Φ₁      Id:31\n22  │020   2 2.2      q⁴.A₁.Z₂       2:22               11:11\n211 │101   3 2.. q⁵.A₂₍₁₎=A₁Φ₁     Id:211\n1111│000   6 ...            A₃    Id:1111\n\n   u│.(A₃)/-ζ₄\n────┼──────────\n4   │   -ζ₄:Id\n31  │\n22  │\n211 │\n1111│\n\nThe  first column in the table gives the name of the unipotent class, which here  is  a  partition  describing  the  Jordan  form. The partial order on unipotent  classes given by Zariski closure  is given before the table. The column   'D-R',   displayed   only   in   good  characteristic,  gives  the Dynkin-Richardson  diagram  for  each  class;  the  column  'dBu' gives the dimension  of the  variety 𝓑ᵤ.  The column  'B-C' gives  the Bala-Carter classification  of u, that is in the case  of sl₄ it displays u as a regular  unipotent  in  a  Levi  subgroup  by  giving the Dynkin-Richardson diagram  of a regular  unipotent (all 2's)  at entries corresponding to the Levi  and '.' at  entries which do  not correspond to  the Levi. The column 'C(u)'  describes  the  group  C_𝐆(u):  a  power q^d describes that the unipotent  radical  of  C_𝐆(u)  has  dimension  d  (thus q^d rational points);  then follows a  description of the  reductive part of the neutral component  of  C_𝐆(u),  given  by  the  name  of  its root datum. Then if C_𝐆(u) is not connected, the description of A(u) is given using another vocabulary:  a cyclic group  of order 4  is given as  'Z4', and a symmetric group on 3 points would be given as 'S3'.\n\nFor instance, the first class '4' has C_𝐆(u)^0 unipotent of dimension 3 and  A(u) equal to 'Z4', the cyclic group  of order 4. The class '22' has C_G(u)  with unipotent radical  of dimension 4,  reductive part of type 'A1'  and A(u) is  'Z2', that is  the cyclic group  of order 2. The other classes  have C_𝐆(u) connected. For the  class '31' the reductive part of C_G(u) is a torus of rank 1.\n\nThen  there is one column for each Springer series, giving for each class the pairs 'a:b' where 'a' is the name of the character of A(u) describing the  local system  involved and  'b' is  the name  of the  character of the (relative)  Weyl group corresponding by the Springer correspondence. At the top  of the column is  written the name of  the relative Weyl group, and in brackets  the name  of the  Levi affording  a cuspidal  local system; next, separated  by a |/| is a description of the central character associated to the  Springer series  (omitted if  this central  character is trivial): all local  systems  in  a  given  Springer  series have same restriction to the center of 𝐆. To find what the picture becomes for another algebraic group in  the  same  isogeny  class,  for  instance the adjoint group, one simply discards the Springer series whose central character becomes trivial on the center  of 𝐆; and  each group A(u)  has to be  quotiented by the common kernel  of  the  remaining  characters.  Here  is the table for the adjoint group:\n\njulia> UnipotentClasses(coxgroup(:A,3))\nUnipotentClasses(A₃)\n1111<211<22<31<4\n   u│D-R dBu B-C          C(u) A₃(A₃₍₎=.)\n────┼─────────────────────────────────────\n4   │222   0 222            q³       Id:4\n31  │202   1 22.   q⁴.A₁₍₎=.Φ₁      Id:31\n22  │020   2 2.2         q⁴.A₁      Id:22\n211 │101   3 2.. q⁵.A₂₍₁₎=A₁Φ₁     Id:211\n1111│000   6 ...            A₃    Id:1111\n\nHere is another example:\n\njulia> UnipotentClasses(coxgroup(:G,2))\nUnipotentClasses(G₂)\n1<A₁<Ã₁<G₂(a₁)<G₂\n     u│D-R dBu B-C  C(u)      G₂(G₂₍₎=.)  .(G₂)\n──────┼─────────────────────────────────────────\nG₂    │ 22   0  22    q²         Id:φ₁‚₀\nG₂(a₁)│ 20   1  20 q⁴.S₃ 21:φ′₁‚₃ 3:φ₂‚₁ 111:Id\nÃ₁    │ 01   2  .2 q³.A₁         Id:φ₂‚₂\nA₁    │ 10   3  2. q⁵.A₁        Id:φ″₁‚₃\n1     │ 00   6  ..    G₂         Id:φ₁‚₆\n\nwhich illustrates that on class G₂(a₁) there are two local systems in the principal  series of  the Springer  correspondence, and  a further cuspidal local system. Also, from the 'B-C' column, we see that that class is not in a  proper Levi,  in which  case the  Bala-Carter diagram coincides with the Dynkin-Richardson diagram.\n\nThe  characteristics 2 and  3 are not  good for 'G2'.  To get the unipotent classes  and the Springer correspondence in bad characteristic, one gives a second argument to the function 'UnipotentClasses':\n\njulia> UnipotentClasses(coxgroup(:G,2),3)\nUnipotentClasses(G₂)\n1<A₁,(Ã₁)₃<Ã₁<G₂(a₁)<G₂\n     u│dBu B-C  C(u) G₂(G₂₍₎=.) .(G₂) .(G₂)  .(G₂)\n──────┼────────────────────────────────────────────\nG₂    │  0  22 q².Z₃     1:φ₁‚₀       ζ₃:Id ζ₃²:Id\nG₂(a₁)│  1  20 q⁴.Z₂     2:φ₂‚₁ 11:Id\nÃ₁    │  2  .2    q⁶    Id:φ₂‚₂\nA₁    │  3  2. q⁵.A₁   Id:φ″₁‚₃\n(Ã₁)₃ │  3  ?? q⁵.A₁   Id:φ′₁‚₃\n1     │  6  ..    G₂    Id:φ₁‚₆\n\nThe  function 'ICCTable' gives the  transition matrix between the functions Xᵪ  and Y_ψ.\n\njulia> uc=UnipotentClasses(coxgroup(:G,2));\njulia> t=ICCTable(uc)\nCoefficients of Xᵩ on Y_ψ for G₂\n      │G₂ G₂(a₁)⁽²¹⁾ G₂(a₁) Ã₁ A₁  1\n──────┼──────────────────────────────\nXφ₁‚₀ │ 1          0      1  1  1  1\nXφ′₁‚₃│ 0          1      0  1  0 q²\nXφ₂‚₁ │ 0          0      1  1  1 Φ₈\nXφ₂‚₂ │ 0          0      0  1  1 Φ₄\nXφ″₁‚₃│ 0          0      0  0  1  1\nXφ₁‚₆ │ 0          0      0  0  0  1\n\nHere  the row labels  and the column  labels show the  two ways of indexing local  systems: the  row labels  give the  character of the relative Weyl group and the column labels give the class and the name of the local system as  a character  of A(u):  for instance,  'G2(a1)' is the trivial local system  of the  class 'G2(a1)',  while 'G2(a1)(21)'  is the local system on that class corresponding to the 2-dimensional character of A(u)=A₂.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Ucl.UnipotentClasses","page":"Gapjm Documentation","title":"Gapjm.Ucl.UnipotentClasses","text":"UnipotentClasses(W[,p])\n\nW  should  be  a  CoxeterGroup  record  for a Weyl group or RootDatum describing a reductive algebraic group 𝐆. The function returns a record containing   information   about   the   unipotent   classes  of  𝐆  in characteristic   p  (if   omitted,  p   is  assumed   to  be  any  good characteristic for 𝐆). This contains the following fields:\n\ngroup: a pointer to W\n\np: the characteristic of the field for which the unipotent classes were computed. It is 0 for any good characteristic.\n\norderClasses:  a list describing the Hasse diagram of the partial order induced   on   unipotent   classes   by   the  closure  relation.  That  is .orderclasses[i]  is the list of j such that C̄ⱼ⊋ C̄ᵢ  and  there  is no  class  Cₖ  such  that C̄ⱼ⊋ C̄ₖ⊋ C̄ᵢ.\n\nclasses:  a  list  of  records  holding information for each unipotent class (see below).\n\nspringerSeries:  a list of records, each  of which describes a Springer series  of 𝐆.\n\nThe  records  describing  individual  unipotent  classes have the following fields:\n\nname: the name of the unipotent class.\n\nparameter:  a parameter  describing the  class (for  example, a partition describing the Jordan form, for classical groups).\n\nAu: the group A(u).\n\ndynkin:  present in good characteristic; contains the Dynkin-Richardson diagram,  given  as  a  list  of  0,1,2  describing  the coefficient on the corresponding simple root.\n\nred:  the reductive part of C_𝐆(u).\n\ndimBu:  the dimension of the variety 𝓑ᵤ.\n\nThe  records for classes contain additional  fields for certain groups: for instance,  the names given to classes by Mizuno in E₆, E₇, E₈ or by Shoji in F₄.\n\nThe  records  describing  individual  Springer  series  have  the following fields:\n\nlevi:the  indices of the  reflections corresponding to  the Levi subgroup 𝐋  where  lives  the  cuspidal  local  system ι from which the Springer series is induced.\n\nrelgroup:  The  relative  Weyl  group N_𝐆(𝐋,ι)/𝐋. The first series is the principal series for which .levi=[] and .relgroup=W.\n\nlocsys:  a  list  of  length  NrConjugacyClasses(.relgroup), holding in i-th  position a  pair describing  which local  system corresponds to the i-th  character of N_𝐆(𝐋,ι). The first element of the pair is the index of  the concerned unipotent class  u, and the second  is the index of the corresponding character of A(u).\n\nZ:  the central character associated  to the Springer series, specified by its value on the generators of the centre.\n\njulia> W=rootdatum(:sl,4)\nA₃\n\njulia> uc=UnipotentClasses(W);\n\njulia> uc.classes\n5-element Array{Gapjm.Ucl.UnipotentClass,1}:\n UnipotentClass(1111)\n UnipotentClass(211)\n UnipotentClass(22)\n UnipotentClass(31)\n UnipotentClass(4)\n\nThe  show  function  for  unipotent  classes  accepts  all the options of formatTable  and  of  charnames.  Giving  the  option  mizuno  (resp. shoji)  uses  the  names  given  by  Mizuno  (resp.  Shoji) for unipotent classes.  Moreover,  there  is  also  an  option  fourier which gives the correspondence  tensored  with  the  sign  character  of each relative Weyl group, which is the correspondence obtained via a Fourier-Deligne transform (here  we assume that  p is very  good, so that  there is a nondegenerate invariant  bilinear  form  on  the  Lie  algebra, and also one can identify nilpotent orbits with unipotent classes).\n\nHere is how to display the non-cuspidal part of the Springer correspondence of  the unipotent  classes of  E₆ using  the notations  of Mizuno for the classes  and those  of Frame  for the  characters of  the Weyl group and of Spaltenstein  for the characters  of G₂ (this  is convenient for checking our data with the original paper of Spaltenstein):\n\njulia> uc=UnipotentClasses(rootdatum(:E6sc));\n\njulia> rshow(uc;cols=[5,6,7],spaltenstein=true,frame=true,mizuno=true,\n      order=false)\nUnipotentClasses(E₆)\n     u│            E₆(E₆₍₎) G₂(E₆₍₁₃₅₆₎=A₂×A₂)/ζ₃ G₂(E₆₍₁₃₅₆₎=A₂×A₂)/ζ₃²\n──────┼──────────────────────────────────────────────────────────────────\nE₆    │                1:1ₚ                  ζ₃:1                  ζ₃²:1\nE₆(a₁)│                1:6ₚ                ζ₃:ε_c                ζ₃²:ε_c\nD₅    │              Id:20ₚ\nA₅+A₁ │        -1:15ₚ 1:30ₚ                 ζ₃:θ′                 ζ₃²:θ′\nA₅    │              1:15_q                 ζ₃:θ″                 ζ₃²:θ″\nD₅(a₁)│              Id:64ₚ\nA₄+A₁ │              Id:60ₚ\nD₄    │              Id:24ₚ\nA₄    │              Id:81ₚ\nD₄(a₁)│111:20ₛ 3:80ₛ 21:90ₛ\nA₃+A₁ │              Id:60ₛ\n2A₂+A₁│               1:10ₛ                 ζ₃:εₗ                 ζ₃²:εₗ\nA₃    │             Id:81ₚ′\nA₂+2A₁│             Id:60ₚ′\n2A₂   │              1:24ₚ′                  ζ₃:ε                  ζ₃²:ε\nA₂+A₁ │             Id:64ₚ′\nA₂    │      11:15ₚ′ 2:30ₚ′\n3A₁   │            Id:15_q′\n2A₁   │             Id:20ₚ′\nA₁    │              Id:6ₚ′\n1     │              Id:1ₚ′\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Ucl.ICCTable","page":"Gapjm Documentation","title":"Gapjm.Ucl.ICCTable","text":"ICCTable(uc[,seriesNo[,q]])\n\nThis  function gives the table of decompositions of the functions X_{u,φ} in  terms of the functions  Y_{u,φ}. Here u is  an unipotent element of the  reductive group 𝐆 and φ is  a character of the group of components A(u);  such a pair describes a  𝐆-equivariant local system on the class C  of u. The function Y_{u,φ}  is the characteristic function of this local   system  and  X_{u,φ}  is   the  characteristic  function  of  the corresponding  intersection cohomology  complex on  C̄. The local systems can  also be indexed by characters of  the relative Weyl group occurring in the Springer correspondence, and since the coefficient of Xᵪ on Y_ψ is 0  if χ and ψ do not correspond  to the same relative Weyl group (are not  in the same Springer series), the  table given is for a given Springer series,  the series  whose number  is given  by the argument 'seriesNo' (if omitted  this defaults to 'seriesNo=1' which  is the principal series). The decomposition  multiplicities are graded,  and are given  as polynomials in one  variable (specified by the argument  q; if not given Pol([1],1) is assumed).\n\njulia> t=ICCTable(uc)\nCoefficients of Xᵩ on Y_ψ for A₃\n     │4 31 22 211 1111\n─────┼─────────────────\nX4   │1  1  1   1    1\nX31  │0  1  1  Φ₂   Φ₃\nX22  │0  0  1   1   Φ₄\nX211 │0  0  0   1   Φ₃\nX1111│0  0  0   0    1\n\nIn  the  above  the  multiplicities  are  given  as  products of cyclotomic polynomials  to display them more compactly. However the 'format' of such a table can be controlled more precisely.\n\nFor  instance,  one  can  ask  to  not  display  the entries as products of cyclotomic polynomials:\n\njulia> rshow(t;cycpol=false)\nCoefficients of X_φ on Y_ψ for A3\n     │4 31 22 211   1111\n─────┼───────────────────\nX4   │1  1  1   1      1\nX31  │0  1  1 q+1 q²+q+1\nX22  │0  0  1   1   q²+1\nX211 │0  0  0   1 q²+q+1\nX1111│0  0  0   0      1\n\nSince  'format'  uses  the  function  format for tables, all the options  of this function are  also available. We can  use this to restrict the  entries displayed to a given sublist of the rows and columns (here the indices correspond to the number in Chevie of the corresponding character of the relative Weyl group of the given Springer series):\n\njulia> uc=UnipotentClasses(coxgroup(:F,4));\njulia> t=ICCTable(uc);\njulia> sh=[13,24,22,18,14,9,11,19];\njulia> show(IOContext(stdout,:rows=>sh,:cols=>sh,:limit=>true),t);\nCoefficients of X_φ on Y_ψ for F₄\n      │A₁+Ã₁ A₂ Ã₂ A₂+Ã₁ Ã₂+A₁ B₂⁽¹¹⁾ B₂ C₃(a₁)⁽¹¹⁾\n──────┼─────────────────────────────────────────────\nXφ₉‚₁₀│    1  0  0     0     0      0  0          0\nXφ″₈‚₉│    1  1  0     0     0      0  0          0\nXφ′₈‚₉│    1  0  1     0     0      0  0          0\nXφ″₄‚₇│    1  1  0     1     0      0  0          0\nXφ′₆‚₆│   Φ₄  1  1     1     1      0  0          0\nXφ₄‚₈ │   q²  0  0     0     0      1  0          0\nXφ″₉‚₆│   Φ₄ Φ₄  0     1     0      0  1          0\nXφ′₄‚₇│   q²  0 Φ₄     0     1      0  0          1\n\nThe function 'ICCTable' returns a Dict with various pieces of information which can help further computations.\n\n:scalar: this contains the table of multiplicities P_{ψ,χ} of the X_ψ on  the Yᵪ. One should  pay attention that by  default, the table is not displayed  in the same order as the  stored |.scalar|, which is in order in Chevie  of  the  characters  in  the  relative  Weyl  group;  the  table is transposed,  then lines  and rows  are sorted  by |dimBu,class  no,index of character in A(u)| while displayed.\n\n:group: The group <W>.\n\n:relgroup: The relative Weyl group for the Springer series.\n\n:series: The index of the Springer series given for <W>.\n\n:dimBu: The list of dim𝓑ᵤ for each local system (u,φ) in the series.\n\n:L:  The matrix of (unnormalized) scalar  products of the functions Y_ψ with  themselves,  that  is  the  (φ,ψ)  entry  is  ∑_{g∈𝐆(𝔽_q)}  Yᵩ(g) Ȳ_ψ(g).  This  is  thus  a  symmetric,  block-diagonal  matrix  where the diagonal  blocks correspond to geometric  unipotent conjugacy classes. This matrix  is  obtained  as  a  by-product  of  Lusztig's algorithm to compute P_{ψ,χ}.\n\n\n\n\n\n","category":"type"},{"location":"#Gapjm.Ucl.induced_linear_form","page":"Gapjm Documentation","title":"Gapjm.Ucl.induced_linear_form","text":"induced_linear_form(W, K, h)\n\nThis routine can be used to find the Richardson-Dynkin diagram of the class in  the algebraic group 𝐆  which contains a given  unipotent class of a reductive subgroup of maximum rank 𝐒 of 𝐆.\n\nIt  takes a linear  form on the  roots of K,  defined by its value on the simple  roots (these values  can define a  Dynkin-Richardson diagram); then extends  this linear form to the roots of 𝐆 by 0 on the orthogonal of the  roots of K; and finally conjugates  the resulting form by an element of the Weyl group so that it takes positive values on the simple roots.\n\njulia> W=coxgroup(:F,4)\nF₄\n\njulia> H=reflection_subgroup(W,[1,3])\nF₄₍₁₃₎=A₁×Ã₁\n\njulia> Ucl.induced_linear_form(W,H,[2,2])\n4-element Array{Int64,1}:\n 0\n 1\n 0\n 0\n\njulia> uc=UnipotentClasses(W);\n\njulia> uc.classes[4].prop\nDict{Symbol,Any} with 7 entries:\n  :dynkin     => [0, 1, 0, 0]\n  :dimred     => 6\n  :red        => A₁×A₁\n  :Au         => .\n  :balacarter => [1, 3]\n  :dimunip    => 18\n  :AuAction   => A₁×A₁\n\njulia> uc.classes[4]\nUnipotentClass(A₁+Ã₁)\n\nThe  example above shows that the class containing the regular class of the Levi subgroup of type A₁× Ã₁ is the class |A1+~A1|.\n\n\n\n\n\n","category":"function"},{"location":"#Symbols-1","page":"Gapjm Documentation","title":"Symbols","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Symbols\nshiftβ\nβset\npartβ\nranksymbol\ndefectsymbol\nfegsymbol\ngendeg_symbol\ndegree_feg_symbol\ndegree_gendeg_symbol\nvaluation_feg_symbol\nvaluation_gendeg_symbol\ntableaux\nsymbols","category":"page"},{"location":"#Gapjm.Symbols","page":"Gapjm Documentation","title":"Gapjm.Symbols","text":"The  combinatorial objects  in this  module are  partitions, β-sets and symbols.\n\nA partition is a decreasing list of strictly positive integers p₁≥p₂≥…pₙ>0, represented as a Vector of Int.\n\nA  β-set is  a set  of positive  integers, up  to the shift equivalence relation.  This  equivalence  relation  is  the  transitive  closure of the elementary  equivalence  of  [s₁,…,sₙ]  and [0,1+s₁,…,1+sₙ]. An equivalence class  has exactly one  member which does  not contain 0:  it is called the normalized  β-set. A β-set is represented as a strictly increasing Vector of Int.\n\nTo  a  partition  p₁≥p₂≥…pₙ>0  is  associated  a  β-set,  whose  normalized representative   is  pₙ,pₙ₋₁+1,…,p₁+n-1.  Conversely,   to  each  β-set  is associated  a partition, the one giving by the above formula its normalized representative.\n\nAn   n-symbol  is  a  tuple  S=[S₁,…,Sₙ]  of  β-sets,  taken  modulo  the equivalence   relation  generated  by   two  elementary  equivalences:  the simultaneous  shift of all β-sets, and  the cyclic permutation of the tuple (in  the particular case where n=2 it is thus an unordered pair of β-sets). This  time  there  is  a  unique  normalized  symbol  where 0 is not in the intersection of the Sᵢ. The content of S is sum(length(S)); it is not an invariant of the symbol, but the rank is, defined for an n-symbol of content c as sum(sum,S)-div((c-1)*(c-n+1),2*n).\n\nAnother  function attached to symbols  is the shape 'map(length,S)'; when n=2  one can  assume that  S₁ has  at least  the same  length as S₂ and the difference  of cardinals 'length(S[1])-length(S[2])',  called the defect, is then an invariant of the symbol.\n\nPartitions  and pairs  of partitions  are parameters  for characters of the Weyl groups of classical types, and tuples of partitions are parameters for characters  of  imprimitive  complex  reflection  groups.  Symbols with two β-sets  are parameters for the  unipotent characters of classical Chevalley groups,   and  more  general  symbols  are  parameters  for  the  unipotent characters  of Spetses associated to complex reflection groups. The rank of the  symbol is the semi-simple rank of the corresponding Chevalley group or Spets.\n\nSymbols of rank n and defect 0 parameterize characters of the Weyl group of type  Dₙ, and  symbols of  rank n  and defect  divisible by  4 parameterize unipotent characters of split orthogonal groups of dimension 2n. Symbols of rank n and defect congruent to 2 mod 4 parameterize unipotent characters of non-split orthogonal groups of dimension 2n. Symbols of rank n and defect 1 parameterize  characters of the Weyl group  of type Bₙ, and finally symbols of  rank n and  odd defect parameterize  unipotent characters of symplectic groups of dimension 2n or orthogonal groups of dimension 2n+1.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Symbols.shiftβ","page":"Gapjm Documentation","title":"Gapjm.Symbols.shiftβ","text":"shiftβ( β, n) shift β-set β by n\n\njulia> shiftβ([4,5],3)\n5-element Array{Int64,1}:\n 0\n 1\n 2\n 7\n 8\n\njulia> shiftβ([0,1,4,5],-2)\n2-element Array{Int64,1}:\n 2\n 3\n\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.βset","page":"Gapjm Documentation","title":"Gapjm.Symbols.βset","text":"βset(p) normalized β-set of a partition\n\njulia> βset([3,3,1])\n3-element Array{Int64,1}:\n 1\n 4\n 5\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.partβ","page":"Gapjm Documentation","title":"Gapjm.Symbols.partβ","text":"'partβ(β)' partition defined by β-set β\n\njulia> partβ([0,4,5])\n2-element Array{Int64,1}:\n 3\n 3\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.ranksymbol","page":"Gapjm Documentation","title":"Gapjm.Symbols.ranksymbol","text":"ranksymbol(S) rank of symbol S.\n\njulia> ranksymbol([[1,2],[1,5,6]])\n11\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.defectsymbol","page":"Gapjm Documentation","title":"Gapjm.Symbols.defectsymbol","text":"`defectsymbol(s)'\n\nLet  s=[S,T] be  a symbol  given as  a pair  of lists  (see the whelp for ?Symbols).   'defectsymbol'  returns   the  defect   of  s,   equal  to length(S)-length(T).\n\njulia> defectsymbol([[1,2],[1,5,6]])\n-1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.fegsymbol","page":"Gapjm Documentation","title":"Gapjm.Symbols.fegsymbol","text":"fegsymbol(S) \n\nLet  s=[S₁,…,Sₙ] be  a symbol  given as  a list  of lists.  This function returns as a CycPol the fake degree of the character of symbol S.\n\njulia> fegsymbol([[1,5,6],[1,2]])\nq¹⁶Φ₅Φ₇Φ₈Φ₉Φ₁₀Φ₁₁Φ₁₄Φ₁₆Φ₁₈Φ₂₀Φ₂₂\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.gendeg_symbol","page":"Gapjm Documentation","title":"Gapjm.Symbols.gendeg_symbol","text":"gendeg_symbol(s)\n\nLet  s=[S₁,…,Sₙ]  be  a  symbol.  The  function returns as a CycPol the generic degree of the unipotent character parameterized by s.\n\njulia> Symbols.gendeg_symbol([[1,2],[1,5,6]])\nq¹³Φ₅Φ₆Φ₇Φ₈²Φ₉Φ₁₀Φ₁₁Φ₁₄Φ₁₆Φ₁₈Φ₂₀Φ₂₂/2\n\nWorks for symbols for:\n\n   G(e,1,r) (d==1, defect==0)\n   G(e,e,r) (d==0, defect==0)\n  ²G(e,e,2) (d==0, defect==1) (this includes ²Dₙ, ²B₂, ²G₂)\n\nhere d=Inhalt mod. e  See cite[3.9 and 6.4]{Malle Unipotente Grade}.\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.degree_feg_symbol","page":"Gapjm Documentation","title":"Gapjm.Symbols.degree_feg_symbol","text":"degree_feg_symbol(s)\n\nLet  s=[S₁,…,Sₙ] be  a symbol  given as  a list  of lists.  This function returns  the degree  of the  fake degree  of the character parameterized by s.\n\njulia> degree_feg_symbol([[1,5,6],[1,2]])\n88\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.degree_gendeg_symbol","page":"Gapjm Documentation","title":"Gapjm.Symbols.degree_gendeg_symbol","text":"degree_gendeg_symbol(s)\n\nLet  s=[S₁,…,Sₙ] be  a symbol  given as  a list  of lists.  This function returns  the  degree  of  the  generic  degree  of  the unipotent character parameterized by s.\n\njulia> degree_gendeg_symbol([[1,5,6],[1,2]])\n91\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.valuation_feg_symbol","page":"Gapjm Documentation","title":"Gapjm.Symbols.valuation_feg_symbol","text":"valuation_feg_symbol(s)\n\nLet  s=[S₁,…,Sₙ] be a symbol valuation_feg_symbol returns the valuation of the fake degree of the character parameterized by s.\n\njulia> valuation_feg_symbol([[1,2],[1,5,6]])\n-1\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.valuation_gendeg_symbol","page":"Gapjm Documentation","title":"Gapjm.Symbols.valuation_gendeg_symbol","text":"valuation_gendeg_symbol(s)\n\nLet  s=[S₁,…,Sₙ] be a  symbol. The function  returns the valuation of the generic degree of the unipotent character parameterized by s.\n\njulia> valuation_gendeg_symbol([[1,2],[1,5,6]])\n13\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.tableaux","page":"Gapjm Documentation","title":"Gapjm.Symbols.tableaux","text":"tableaux(S)\n\nS  is a  partition tuple  or a  partition. returns  the list  of standard tableaux  associated to the partition  tuple S, that is  a filling of the associated  young diagrams  with the  numbers 1:sum(sum,S)  such that the numbers  increase across the rows  and down the columns.  If the imput is a single partition, the standard tableaux for that partition are returned.\n\njulia> tableaux([[2,1],[1]])\n8-element Array{Any,1}:\n [[[2, 4], [3]], [[1]]]\n [[[1, 4], [3]], [[2]]]\n [[[1, 4], [2]], [[3]]]\n [[[2, 3], [4]], [[1]]]\n [[[1, 3], [4]], [[2]]]\n [[[1, 2], [4]], [[3]]]\n [[[1, 3], [2]], [[4]]]\n [[[1, 2], [3]], [[4]]]\n\njulia> tableaux([2,2])\n2-element Array{Array{Array{Int64,1},1},1}:\n [[1, 3], [2, 4]]\n [[1, 2], [3, 4]]\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Symbols.symbols","page":"Gapjm Documentation","title":"Gapjm.Symbols.symbols","text":"symbols(e,r,c) e-symbols of rank r and content=c mode e\n\nThe content of a symbol Sis sum(length,S)%length(S). The symbols for unipotent  characters of  G(d,1,r) are  symbols(d,r,1) and those for unipotent characters of G(e,e,r) are symbols(e,r,0).\n\njulia> stringsymbol.(symbols(3,2,1))\n14-element Array{String,1}:\n \"(12,0,0)\"   \n \"(02,1,0)\"   \n \"(02,0,1)\"   \n \"(012,12,01)\"\n \"(01,1,1)\"   \n \"(012,01,12)\"\n \"(2,,)\"      \n \"(01,2,0)\"   \n \"(01,0,2)\"   \n \"(1,012,012)\"\n \"(,02,01)\"   \n \"(,01,02)\"   \n \"(0,,012)\"   \n \"(0,012,)\"   \n\njulia> stringsymbol.(symbols(3,3,0))\n10-element Array{String,1}:\n \"(1,1,1)\"      \n \"(01,12,02)\"   \n \"(01,02,12)\"   \n \"(012,012,123)\"\n \"(0,1,2)\"      \n \"(0,2,1)\"      \n \"(01,01,13)\"   \n \"(0,0,3)\"      \n \"(012,,)\"      \n \"(012,012,)\"   \n\n\n\n\n\n","category":"function"},{"location":"#Eigenspaces-1","page":"Gapjm Documentation","title":"Eigenspaces","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"Eigenspaces\nrelative_degrees\nregular_eigenvalues\neigenspace_projector\nposition_regular_class\nsplit_levis\ncuspidal_unipotent_characters","category":"page"},{"location":"#Gapjm.Eigenspaces","page":"Gapjm Documentation","title":"Gapjm.Eigenspaces","text":"Eigenspaces and d-Harish-Chandra series\n\nLet Wϕ be a reflection coset on a vector space V and Lwϕ a reflection subcoset  where L is a  parabolic subgroup (the fixator  of a subspace of V).  There  are  several  interesting  cases  where  the relative group N_W(Lwϕ)/L, or a subgroup of it normalizing some further data attached to L, is itself a reflection group.\n\nA first example is the case where ϕ=1 and w=1, W is the Weyl group of a finite reductive group 𝐆^F and the Levi subgroup 𝐋^F corresponding to L  has a cuspidal unipotent character. Then N_W(L)/L is a Coxeter group acting  on the  space X(Z𝐋)⊗ℝ.  A combinatorial  characterization of such parabolic  subgroups of Coxeter  groups is that  they are normalized by the longest element of larger parabolic subgroups (see cite[5.7.1]{Lus76}).\n\nA  second  example  is  when  L  is  trivial  and  wϕ is a ζ-regular element,  that  is  the  ζ-eigenspace  V_ζ  of  wϕ contains a vector outside all the reflecting hyperplanes of W. Then N_W(Lwϕ)/L=C_W(wϕ) is a reflection group in its action on V_ζ.\n\nA  similar but more general example is  when V_ζ is the ζ-eigenspace of some  element of  the reflection  coset Wϕ,  and is  of maximal dimension among such possible ζ-eigenspaces. Then the set of elements of Wϕ which act  by ζ  on V_ζ  is a  certain subcoset  Lwϕ, and N_W(Lwϕ)/L is a reflection group in its action on V_ζ (see cite[2.5]{LS99}).\n\nFinally,  a  still  more  general  example,  but which only occurs for Weyl groups  or  Spetsial  reflection  groups,  is  when 𝐋 is a ζ-split Levi subgroup  (which means that  the corresponding subcoset  Lwϕ is formed of all  the elements which act by ζ on  some subspace V_ζ of V), and λ is  a  d-cuspidal  unipotent  character  of  𝐋  (which  means  that the multiplicity  of ζ  as a  root of  the degree  of λ  is the same as the multiplicity  of ζ as a root of the generic order of the semi-simple part of 𝐆); then N_W(Lwϕ,λ)/L is a complex reflection group in its action on V_ζ.\n\nFurther,  in the above cases the relative group describes the decomposition of a Lusztig induction.\n\nWhen  𝐆^F  is  a  finite  reductive  group,  and λ a cuspidal unipotent character  of the Levi subgroup  𝐋^F, then the 𝐆^F-endomorphism algebra of  the Harish-Chandra induced representation R_𝐋^𝐆(λ) is a Hecke algebra attached  to the group N_W(L)/L, thus  the dimension of the characters of this group describe the multiplicities in the Harish-Chandra induced.\n\nSimilarly, when 𝐋 is a ζ-split Levi subgroup, and λ is a d-cuspidal unipotent  character  of  𝐋  then  (conjecturally) the 𝐆^F-endomorphism algebra of the Lusztig induced R_𝐋^𝐆(λ) is a cyclotomic Hecke algebra for to  the group N_W(Lwϕ,λ)/L.  The constituents of  R_𝐋^𝐆(λ) are called a ζ-Harish-Chandra  series.  In  the  case  of  rational  groups or cosets, corresponding  to  finite  reductive  groups,  the conjugacy class of Lwϕ depends only on the order d of ζ, so one also talks of d-Harish-Chandra  series. These series correspond to ℓ-blocks where l is  a prime divisor of Φ_d(q) which  does not divide any other cyclotomic factor of the order of 𝐆^F.\n\nThe functions described in this module allow to explore these situations.\n\n\n\n\n\n","category":"module"},{"location":"#Gapjm.Eigenspaces.relative_degrees","page":"Gapjm Documentation","title":"Gapjm.Eigenspaces.relative_degrees","text":"relative_degrees(WF,d)\n\nLet  WF be a reflection group or a reflection coset. Here d specifies a root  of unity ζ: either d is an integer and specifies ζ=E(d) or is a fraction  smaller a/b with 0<a<b  and specifies ζ=E(b,a). If omitted, d   is  taken  to  be  1,  specifying  ζ=1.  Then  if  V_ζ  is  the ζ-eigenspace  of some element of WF,  and is of maximal dimension among such   possible  ζ-eigenspaces,  and  W  is  the  group  of  WF  then N_W(V_ζ)/C_W(V_ζ)  is  a  reflection  group  in  its action on V_ζ. The function  relative_degrees returns the reflection degrees of this complex reflection group, which are a subset of those of W.\n\nThese   degrees  are   computed  by   an  invariant-theoretic  formula:  if (d₁,ε₁),…,(dₙ,εₙ)  are the generalized degrees of  WF they are the dᵢ such that ζ^{dᵢ}=εᵢ.\n\njulia> W=coxgroup(:E,8)\nE₈\n\njulia> relative_degrees(W,4)\n4-element Array{Int64,1}:\n  8\n 12\n 20\n 24\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Eigenspaces.regular_eigenvalues","page":"Gapjm Documentation","title":"Gapjm.Eigenspaces.regular_eigenvalues","text":"regular_eigenvalues(W)\n\nLet W be a reflection group or a reflection coset. A root of unity ζ is a regular eigenvalue for W if some element of W has a ζ-eigenvector which   lies   outside   of   the   reflecting  hyperplanes.  The  function 'RelativeDegree' returns a list describing the regular eigenvalues for W. If  all the primitive  n-th roots of  unity are regular eigenvalues, then n  is put on the result list.  Otherwise the fractions a/n are added to the  list for each a such that  E(n,a) is a primitive n-root of unity and a regular eigenvalue for W.\n\njulia> W=coxgroup(:E,8)\nE₈\n\njulia> regular_eigenvalues(W)\n13-element Array{Int64,1}:\n  1\n  2\n  4\n  8\n  3\n  6\n 12\n  5\n 10\n 20\n 24\n 15\n 30\n\njulia> W=ComplexReflectionGroup(6)\nG₆\n\njulia> L=twistings(W,[2])[2]\nG₃‚₁‚₁[ζ₄]Φ′₄\n\njulia> regular_eigenvalues(L)\n3-element Array{Rational{Int64},1}:\n  1//4 \n  7//12\n 11//12\n\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Eigenspaces.eigenspace_projector","page":"Gapjm Documentation","title":"Gapjm.Eigenspaces.eigenspace_projector","text":"eigenspace_projector(WF,w[,d=0//1])\n\nLet  WF be a reflection group or a reflection coset. Here d specifies a root  of unity ζ: either d is an integer and specifies ζ=E(d)' or is a fraction  smallera/bwith0<a<band specifiesζ=E(b,a)'. The function returns the unique w-invariant projector on the ζ-eigenspace of w.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> w=W(1:3...)\n(1,12,3,2)(4,11,10,5)(6,9,8,7)\n\njulia> p=eigenspace_projector(W,w,1//4)\n3×3 Array{Cyc{Rational{Int64}},2}:\n  1/4+ζ₄/4   ζ₄/2  -1/4+ζ₄/4\n  1/4-ζ₄/4    1/2   1/4+ζ₄/4\n -1/4-ζ₄/4  -ζ₄/2   1/4-ζ₄/4\n\njulia> GLinearAlgebra.rank(p)\n1\n\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Eigenspaces.position_regular_class","page":"Gapjm Documentation","title":"Gapjm.Eigenspaces.position_regular_class","text":"position_regular_class(WF,d=0)\n\nLet  WF be a reflection group or a reflection coset. Here d specifies a root  of unity ζ: either d is an integer and specifies ζ=E(d)' or is a fraction  smallera/bwith0<a<band specifiesζ=E(b,a)'. If omitted, d  is taken to be 0, specifying ζ=1. The root ζ should be a regular eigenvalue  for WF (see \"regular_eigenvalues\").  The function returns the index of the conjugacy class of WF which has a ζ-regular eigenvector.\n\njulia> W=coxgroup(:E,8)\nE₈\n\njulia> position_regular_class(W,30)\n65\n\njulia> W=ComplexReflectionGroup(6)\nG₆\n\njulia> L=twistings(W,[2])[3]\nG₆₍₂₎=G₃‚₁‚₁[ζ₄]Φ′₄\n\njulia> position_regular_class(L,7//12)\n2\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Eigenspaces.split_levis","page":"Gapjm Documentation","title":"Gapjm.Eigenspaces.split_levis","text":"split_levis(WF,d=0,ad=-1)\n\nLet  WF  be  a  reflection  group  or  a  reflection  coset.  If W is a reflection group it is treated as the trivial coset 'Spets(W)'.\n\nHere  d  specifies  a  root  of  unity  ζ: either d is an integer and specifies  ζ=E(d)  or  is  a  fraction  a/b  with 0<a<b and specifies ζ=E(b,a). If omitted, d is taken to be 0, specifying ζ=1.\n\nA  Levi  is  a  subcoset  of  the  form W₁F₁ where W₁ is a parabolic subgroup of W, that is the centralizer of some subspace of V.\n\nThe  function returns  a list  of representatives  of conjugacy  classes of d-split  Levis of W. A  d-split Levi is a  subcoset of WF formed of all  the  elements  which  act  by  ζ  on  a given subspace V_ζ. If the additional  argument ad  is given,  it returns  only those subcosets such that the common ζ-eigenspace of their elements is of dimension ad.\n\njulia> W=coxgroup(:A,3)\nA₃\n\njulia> split_levis(W,4)\n2-element Array{Any,1}:\n A₃\n A₃₍₎=.Φ₂Φ₄\n\njulia> W=spets(coxgroup(:D,4),Perm(1,2,4))\n³D₄\n\njulia> split_levis(W,3)\n3-element Array{Any,1}:\n ³D₄\n D₄₍₁₃₎=A₂Φ₃\n ³D₄\n\njulia> W=coxgroup(:E,8)\nE₈\n\njulia> split_levis(W,4,2)\n3-element Array{Any,1}:\n E₈₍₃₂₄₅₎=D₄₍₁₃₂₄₎Φ₄²\n E₈₍₅₇₂₃₎=(A₁A₁)×(A₁A₁)Φ₄²\n E₈₍₃₁₅₆₎=²(A₂A₂)₍₁₄₂₃₎Φ₄²\n\n\n\n\n\n","category":"function"},{"location":"#Gapjm.Eigenspaces.cuspidal_unipotent_characters","page":"Gapjm Documentation","title":"Gapjm.Eigenspaces.cuspidal_unipotent_characters","text":"cuspidal_unipotent_characters(WF[,d])\n\nLet  WF  be  a  reflection  group  or  a  reflection  coset.  If W is a reflection group it is treated as the trivial coset Spets(W).\n\nA  unipotent character γ of the corresponding finite reductive group bG is  d-cuspidal if its Lusztig restriction to any proper d-split Levi is zero.  When  d==1  we  recover  the  usual  notion of cuspidal character. Equivalently  the Phi_d-part of the generic degree of γ is equal to the Phi_d-part of the generic order of the adjoint group of bG.\n\nThe  function returns the list of indices of unipotent characters which are d-cuspidal.  If d is  omitted, it is taken  to be 1.\n\njulia> W=coxgroup(:D,4)\nD₄\n\njulia> cuspidal_unipotent_characters(W)\n1-element Array{Int64,1}:\n 14\n\njulia> cuspidal_unipotent_characters(W,6)\n8-element Array{Int64,1}:\n  1\n  2\n  6\n  7\n  8\n  9\n 10\n 12\n\n\n\n\n\n","category":"function"},{"location":"#Dictionary-from-GAP3/Chevie-1","page":"Gapjm Documentation","title":"Dictionary from GAP3/Chevie","text":"","category":"section"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"The dictionary from GAP3/Chevie is as follows:","category":"page"},{"location":"#","page":"Gapjm Documentation","title":"Gapjm Documentation","text":"AlgebraicCentre                             → algebraic_centre\nAlmostCharacter                             → AlmostChar\nArrangements                                → arrangements\nAsFraction                                  → fraction\nAsReflection                                → reflection\nAsRootOfUnity                               → Root1\nAsWord                                      → word\nAssociatedPartition                         → conjugate_partition\nBetaSet                                     → βset\nBigCellDecomposition                        → bigcell_decomposition\nBinomial                                    → binomial\nBipartiteDecomposition                      → bipartite_decomposition\nBlocksMat                                   → blocks\nBraid                                       → BraidMonoid\nBraidMonoid                                 → BraidMonoid\nBraidRelations                              → braid_relations\nBruhat                                      → bruhatless\nBruhatPoset                                 → Poset\nBruhatSmaller                               → bruhatless\nCartanMat(\"A\",5)                            → cartan(:A,5)\nCartanMatFromCoxeterMatrix                  → cartan\nCatalan                                     → catalan\nCentralizerGenerators                       → centralizer_generators\nCharNames                                   → charnames\nCharParams(W)                               → charinfo(W)[:charparams]\nCharRepresentationWords                     → traces_words_mats\nCheckHeckeDefiningRelations                 → isrepresentation\nChevieCharInfo                              → charinfo\nChevieClassInfo                             → classinfo\nCoefficient(p,i)                            → p[i]\nCollectBy                                   → collectby\nCollected                                   → tally\nCombinations                                → combinations\nComplexConjugate                            → conj\nComplexReflectionGroup                      → ComplexReflectionGroup\nCompositions                                → compositions\nConcatenationString(s...)                   → prod(s)\nConjugacySet(b[,F][,type])                  → conjcat(b[,F],ss=type).obj\nConjugatePartition                          → conjugate_partition\nCoxeterCoset                                → spets\nCoxeterElements(W[,l])                      → elements(W[,l])\nCoxeterGroup(\"A\",5)                         → coxgroup(:A,5)\nCoxeterGroupByCartanMatrix(C)               → gencox(C)\nCoxeterGroupByCoxeterMatrix                 → gencox(cartan(C))\nCoxeterGroupHyperoctaedralGroup(n)          → CoxHyperoctaedral(n)\nCoxeterGroupSymmetricGroup(n)               → CoxSym(n)\nCoxeterLength(W,w)                          → length(W,w)\nCoxeterMatrix                               → coxmat\nCoxeterMatrixFromCartanMat                  → coxmat\nCoxeterSubCoset                             → subspets\nCoxeterWord(W,w)                            → word(W,w)\nCoxeterWords(W[,l])                         → word.(Ref(W),elements(W[,l]))\nCuspidalUnipotentCharacters                 → cuspidal_unipotent_characters\nCycPol                                      → CycPol\nCycPolFakeDegreeSymbol                      → fegsymbol\nCycPolGenericDegreeSymbol                   → gendeg_symbol\nCycPolUnipotentDegrees                      → CycPolUnipotentDegrees\nCycle                                       → orbit\nCycles                                      → orbits\nCyclotomicPolynomial(R,i)                   → cyclotomic_polynomial(i)\nDecomposedMat                               → diagblocks\nDefectSymbol                                → defectsymbol\nDegree(p)                                   → degree(p)\nDeligneLusztigCharacter                     → DLChar\nDeligneLusztigLefschetz                     → DLLeftschetz\nDescribeInvolution                          → describe_involution\nDigits                                      → digits\nDominates                                   → dominates\nDrinfeldDouble                              → drinfeld_double\nDrop                                        → deleteat!\nDualBraid                                   → DualBraidMonoid\nDualBraidMonoid                             → DualBraidMonoid\nEigenspaceProjector                         → eigenspace_projector\nElementWithInversions(W,l)                  → with_inversions(W,l)\nElements                                    → elements\nEltBraid                                    → image\nEltWord(W,w)                                → W(w...)\nExteriorPower                               → exterior_power\nFakeDegree                                  → fakedegree\nFakeDegrees                                 → fakedegrees\nFamiliesClassical                           → FamiliesClassical\nFamily                                      → Family\nFamilyImprimitive                           → family_imprimitive\nFiniteCoxeterTypeFromCartanMat(m)           → type_cartan(m)\nFirstLeftDescending(W,w)                    → firstleftdescent(W,w)\nForEachCoxeterWord(W,f)                     → for w in W f(word(W,w)) end\nForEachElement(W,f)                         → for w in W f(w) end\nFullSymbol                                  → fullsymbol\nFundamentalGroup                            → fundamental_group\nGaloisCyc                                   → galois\nGarsideAlpha                                → α\nGarsideWords                                → elements\nGcdPartitions                               → gcd_partitions\nGcdRepresentation                           → gcd_repr\nGenericOrder                                → generic_order\nGenericSign                                 → generic_sign\nGetRoot                                     → root\nHasse                                       → hasse\nHeckeCentralMonomials                       → central_monomials\nHeckeCharValues                             → char_values\nHeckeClassPolynomials                       → class_polynomials\nHeckeReflectionRepresentation               → refrep\nHighestPowerFakeDegreeSymbol                → degree_feg_symbol\nHighestPowerGenericDegreeSymbol             → degree_gendeg_symbol\nHyperplaneOrbits                            → hyperplane_orbits\nICCTable                                    → ICCTable\nIncidence                                   → incidence\nIndependentLines(M)                         → echelon(M)[2]\nIndependentRoots                            → independent_roots\nInducedLinearForm                           → induced_linear_form\nInductionTable                              → InductionTable\nIntListToString                             → joindigits\nIntersection                                → intersect\nInvariantForm                               → invariant_form\nInversions                                  → inversions\nIsAbelian                                   → isabelian\nIsCycPol(p)                                 → p isa CycPol\nIsFamily(f)                                 → f isa Family\nIsJoinLattice                               → is_join_lattice\nIsLeftDescending(W,w,i)                     → isleftdescent(W,w,i)\nIsMeetLattice                               → is_meet_lattice\nIsSubset(a,b)                               → issubset(b,a)\nJoin                                        → join\nKazhdanLusztigPolynomial                    → KLPol\nKroneckerProduct                            → kron\nLcmPartitions                               → lcm_partitions\nLeadingCoefficient(p)                       → p[end]\nLeftCell                                    → LeftCell\nLeftCells                                   → LeftCells\nLeftDescentSet(W,w)                         → leftdescents(W,w)\nLeftDivisorsSimple                          → left_divisors\nLeftGcd                                     → leftgcd\nLinearExtension                             → linear_extension\nListPerm(p)                                 → vec(p)\nLongestCoxeterElement(W)                    → longest(W)\nLongestCoxeterWord(W)                       → word(W,longest(W))\nLowestPowerFakeDegreeSymbol                 → valuation_feg_symbol\nLowestPowerGenericDegreeSymbol              → valuation_gendeg_symbol\nLusztigInduction                            → LusztigInduce\nLusztigInductionTable                       → LusztigInductionTable\nLusztigRestriction                          → LusztigRestrict\nMappingPermListList                         → mappingPerm\nMatStab                                     → stab_onmat\nMatXPerm(W,p)                               → refrep(W,p)\nNrDrinfeldDouble                            → ndrinfeld_double\nNrPartitionTuples                           → npartition_tuples\nNrPartitions                                → npartitions\nOnFamily(f,p::Int)                          → galois(f,p)\nOnFamily(f,p::Perm)                         → f^p\nOnMatrices(m,p)                             → ^(m,p;dims=(1,2))\nOnPolynomials(m,p)                          → p^m\nOnSets(s,g)                                 → unique!(sort(s.^g))\nOnTuples(l,p)                               → l.^p\nParabolicRepresentatives                    → parabolic_representatives\nPartBeta                                    → partβ\nPartition                                   → partition\nPartitionTuples                             → partition_tuples\nPartitions                                  → partitions\nPermList(v)                                 → Perm(v)\nPermListList(l1,l2)                         → Perm(l1,l2)\nPermMatMat                                  → perm_onmat\nPermMatX                                    → PermX\nPermutationMat(p,dim)                       → Matrix(p,dim)\nPermuted(v,p)                               → v^p\nPermutedByCols(m,p)                         → ^(m,p;dims=2)\nPoset                                       → Poset\nPositionClass                               → position_class\nPositionRegularClass                        → position_regular_class\nPrintDiagram(W)                             → Diagram(W)\nProportionalityCoefficient(v,w)             → ratio(v,w)\nRank                                        → rank\nRankSymbol                                  → ranksymbol\nReducedCoxeterWord(W,w)                     → word(W,W(w...))\nReducedExpressions(W,w)                     → words(W,w)\nReducedInRightCoset(W,w)                    → reduced(W,w)\nReducedRightCosetRepresentatives(W,H)       → reduced(H,W)\nReflection                                  → reflection\nReflectionCharacter                         → reflchar\nReflectionCoDegrees(W)                      → codegrees(W)\nReflectionDegrees(W)                        → degrees(W)\nReflectionEigenvalues                       → refleigen\nReflectionLength(W,w)                       → reflength(W,w)\nReflectionSubgroup                          → reflection_subgroup\nReflectionType                              → refltype\nReflections                                 → reflections\nRegularEigenvalues                          → regular_eigenvalues\nRelativeDegrees                             → relative_degrees\nRepresentations                             → representations\nRepresentativeConjugation(b,b'[,F][,type])  → conjugating_elt(b,b'[,F],ss=type)\nRepresentativeDiagonalConjugation           → diagconj_elt\nRepresentativeOperation                     → transporting_elt\nRepresentativeRowColPermutation             → perm_rowcolmat\nRestricted                                  → restricted\nRestrictedPerm(p,d)                         → restricted(p,d)\nReversed                                    → reverse\nRightDescentSet(W,w)                        → rightdescents(W,w)\nRightGcd                                    → rightgcd\nRightLcm                                    → rightlcm\nRootDatum                                   → rootdatum\nRootsCartan(m)                              → roots(m)\nRotation(v,i)                               → circshift(v,-i)\nRotations(v)                                → circshift.(Ref(a),length(a):-1:1)\nScalMvp                                     → scal\nSchurElements                               → schur_elements\nSchurFunctor                                → schur_functor\nSemisimpleRank                              → semisimplerank\nSemisimpleRank(W)                           → coxrank(W)\nShiftBeta                                   → shiftβ\nShrinkGarsideGeneratingSet                  → shrink\nSignedMatStab                               → stab_onsmat\nSignedPerm                                  → SPerm\nSignedPermListList                          → SPerm\nSignedPermMatMat                            → perm_onsmat\nSize(W)                                     → length(W)\nSolutionMat                                 → solutionmat\nSpets                                       → spets\nSplitLevis                                  → split_levis\nStandardParabolic                           → standard_parabolic\nStandardParabolicClass                      → standard_parabolic_class\nSubSpets                                    → subspets\nSubTorus                                    → SubTorus\nSymmetricDifference                         → symdiff\nSymmetricPower                              → symmetric_power\nTableaux                                    → tableaux\nTorus                                       → torus\nTransitiveClosure                           → transitive_closure\nTransporter                                 → transporter\nTriangulizeMat                              → echelon!\nTwistings                                   → twistings\nTwoTree(m)                                  → twotree(m)\nUnipotentCharacter                          → UniChar\nUnipotentCharacters                         → UnipotentCharacters\nUnipotentClasses                            → UnipotentClasses\nUnipotentDegrees(W,q)                       → degrees(UnipotentCharacters(W),q)\nUnorderedTuples                             → submultisets\nValuation(p)                                → valuation(p)\nValue(p,x)                                  → p(x)\nW.N                                         → nref(W)\nW.matgens[i]                                → refrep(W,i)\nW.orbitRepresentativeElement                → simple_conjugating_element(W,i)\nW.orbitRepresentative[i]                    → simple_representative(W,i)\nWeightInfo                                  → weightinfo","category":"page"}]
}
