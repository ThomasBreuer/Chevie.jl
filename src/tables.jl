
chevieset(:G4_22, :PrintDiagram, function (arg...,)
        local ST, indices, title, s, f
        ST = arg[1]
        indices = arg[2]
        title = arg[3]
        print(title, " ")
        s = pad("\n", -(length(title)))
        f = function (arg...,)
                return IntListToString(indices[arg])
            end
        if ST == 4
            print(f(1), "(3)--", f(2), "(3)")
        elseif ST == 5
            print(f(1), "(3)===", f(2), "(3)")
        elseif ST == 6
            print(f(1), "--6--", f(2), "(3)")
        elseif ST == 7
            print(f(2), "(3)", s, " /3\\", s, f(1), "---", f(3), "(3) ", f(1, 2, 3), "==", f(2, 3, 1), "==", f(3, 1, 2))
        elseif ST == 8
            print(f(1), "(4)--", f(2), "(4)")
        elseif ST == 9
            print(f(1), "--6--", f(2), "(4)")
        elseif ST == 10
            print(f(1), "(3)===", f(2), "(4)")
        elseif ST == 11
            print(f(2), "(3)", s, " /3\\", s, f(1), "---", f(3), "(4) ", f(1, 2, 3), "==", f(2, 3, 1), "==", f(3, 1, 2))
        elseif ST == 12
            print(f(2), s, " /4\\", s, f(1), "---", f(3), " ", f(1, 2, 3, 1), "==", f(2, 3, 1, 2), "==", f(3, 1, 2, 3))
        elseif ST == 13
            print(f(1), s, " / \\", s, f(3), "---", f(2), " ", f(2, 3, 1, 2), "==", f(3, 1, 2, 3), " ", f(1, 2, 3, 1, 2), "==", f(3, 1, 2, 3, 1))
        elseif ST == 14
            print(f(1), "--8--", f(2), "(3)")
        elseif ST == 15
            print(f(1), s, " /5", s, f(3), s, " \\", s, "  ", f(2), "(3) ", f(1, 2, 3), "==", f(3, 1, 2), " ", f(2, 3, 1, 2, 1), "==", f(3, 1, 2, 1, 2))
        elseif ST == 16
            print(f(1), "(5)--", f(2), "(5)")
        elseif ST == 17
            print(f(1), "--6--", f(2), "(5)")
        elseif ST == 18
            print(f(1), "(3)===", f(2), "(5)")
        elseif ST == 19
            print(f(2), "(3)", s, " /3\\", s, f(1), "---", f(3), "(5) ", f(1, 2, 3), "==", f(2, 3, 1), "==", f(3, 1, 2))
        elseif ST == 20
            print(f(1), "(3)--5--", f(2), "(3)")
        elseif ST == 21
            print(f(1), "--10--", f(2), "(3)")
        elseif ST == 22
            print(f(2), s, " /5\\", s, f(1), "---", f(3), " ", f(1, 2, 3, 1, 2), "==", f(2, 3, 1, 2, 3), "==", f(3, 1, 2, 3, 1))
        end
        print("\n")
    end)
chevieset(:G4_22, :BraidRelations, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [[[1, 2, 1], [2, 1, 2]]], Symbol("5") => [[[1, 2, 1, 2], [2, 1, 2, 1]]], Symbol("6") => [[[1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]], Symbol("7") => [[[1, 2, 3], [2, 3, 1]], [[1, 2, 3], [3, 1, 2]]], Symbol("8") => [[[1, 2, 1], [2, 1, 2]]], Symbol("9") => [[[1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]], Symbol("10") => [[[1, 2, 1, 2], [2, 1, 2, 1]]], Symbol("11") => [[[1, 2, 3], [2, 3, 1]], [[1, 2, 3], [3, 1, 2]]], Symbol("12") => [[[1, 2, 3, 1], [2, 3, 1, 2]], [[1, 2, 3, 1], [3, 1, 2, 3]]], Symbol("13") => [[[3, 1, 2, 3], [2, 3, 1, 2]], [[1, 2, 3, 1, 2], [3, 1, 2, 3, 1]]], Symbol("14") => [[[1, 2, 1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1, 2, 1]]], Symbol("15") => [[[3, 1, 2], [1, 2, 3]], [[2, 3, 1, 2, 1], [3, 1, 2, 1, 2]]], Symbol("16") => [[[1, 2, 1], [2, 1, 2]]], Symbol("17") => [[[1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]], Symbol("18") => [[[1, 2, 1, 2], [2, 1, 2, 1]]], Symbol("19") => [[[1, 2, 3], [2, 3, 1]], [[1, 2, 3], [3, 1, 2]]], Symbol("20") => [[[1, 2, 1, 2, 1], [2, 1, 2, 1, 2]]], Symbol("21") => [[[1, 2, 1, 2, 1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], Symbol("22") => [[[1, 2, 3, 1, 2], [2, 3, 1, 2, 3]], [[1, 2, 3, 1, 2], [3, 1, 2, 3, 1]]])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :CharName, function (ST, x, option)
        local s, f
        if haskey(option, :TeX)
            s = "\\phi_"
        else
            s = "phi"
        end
        s *= SPrint("{", x[1], ",", x[2], "}")
        if length(x) == 3
            s = Append(s, map((y->begin
                                '\''
                            end), 1:x[3]))
        end
        return string(s)
    end)
chevieset(:G4_22, :ReflectionName, function (arg...,)
        local ST, n, option
        option = arg[2]
        ST = arg[1]
        if haskey(option, :TeX)
            n = SPrint("G_{", ST, "}")
        else
            n = SPrint("G", ST)
        end
        if length(arg) == 3
            n *= SPrint("(", Format(arg[3], option), ")")
        end
        return n
    end)
chevieset(:G4_22, :SemisimpleRank, 2)
chevieset(:G4_22, :Size, function (ST,)
        local s
        s = 24 * [1, 3, 2, 6, 4, 8, 12, 24, 2, 4, 6, 12, 25, 50, 75, 150, 15, 30, 10]
        return s[ST - 3]
    end)
chevieset(:G4_22, :NrConjugacyClasses, function (ST,)
        local l
        l = [7, 21, 14, 42, 16, 32, 48, 96, 8, 16, 24, 48, 45, 90, 135, 270, 27, 54, 18]
        return l[ST - 3]
    end)
chevieset(:G4_22, :paramclasses, function (ST,)
        if ST in 4:7
            return Concatenation(map((i->begin
                                map((j->begin
                                            [i[1], j]
                                        end), (1:i[2]) - 1)
                            end), [[1, 12], [2, 6], [3, 12], [4, 12]]))
        elseif ST in 8:15
            return Concatenation(map((i->begin
                                map((j->begin
                                            [i[1], j]
                                        end), (1:i[2]) - 1)
                            end), [[1, 24], [2, 12], [3, 24], [4, 24], [5, 12]]))
        elseif ST in 16:22
            return Concatenation(map((i->begin
                                map((j->begin
                                            [i[1], j]
                                        end), (1:i[2]) - 1)
                            end), [[1, 60], [2, 30], [3, 60], [4, 60], [5, 60]]))
        end
    end)
chevieset(:G4_22, :GeneratingRoots, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [[0, -2 * E(3) - E(3, 2)], [2 * E(3, 2), E(3, 2)]], Symbol("5") => [[0, (3 - ER(-3)) // 2], [-1, 1]], Symbol("6") => [[-1 + ER(3), -1], [0, (3 - ER(-3)) // 2]], Symbol("7") => [[0, 1], [((-(E(12, 11)) - E(12, 8)) - 2 * E(12, 4)) // 2, ((-1 - ER(-3)) * (-(E(4)) + 1)) // 4], [((-(E(12, 11)) - E(12, 8)) - 2 * E(12, 4)) // 2, ((1 + ER(-3)) * (E(4) + 1)) // 4]], Symbol("8") => [[0, E(4)], [(E(4) + 1) // 2, (E(4) + 1) // 2]], Symbol("9") => [[(2 - ER(2)) // 2, -1], [0, -(E(4)) + 1]], Symbol("10") => [[0, (3 - ER(-3)) // 2], [-1 + ER(3), 1]], Symbol("11") => [[(3 + ER(6)) // 3, (ER(6) * E(3)) // 6], [0, ER(-2) // 2], [((3 - ER(3)) * (-(E(4)) + 1)) // 6, (-(ER(-3)) * (E(4) + 1)) // 6]], Symbol("12") => [[ER(-2), -1 - ER(-2)], [-(ER(-2)), -1 + ER(-2)], [0, 2]], Symbol("13") => [[0, 1], [2 - ER(2), ER(2)] // 2, [1 - ER(2), -(E(4))] // (E(4) - 1)], Symbol("14") => [[0, 2], [(-2 * E(3, 2) - 1) - ER(-2), -1]], Symbol("15") => [[(((E(24, 22) - E(24, 19)) + 2 * E(24, 17) + E(24, 16)) - E(24, 14)) + E(24, 8) + E(24), (-(E(24, 16)) + E(24, 11)) - E(24, 8)], [0, (3 - ER(-3)) // 2], [-1 + ER(3), 1]], Symbol("16") => [[0, 1], [(2 * E(5, 4) + 3 * E(5)) // ER(5) - 1, (E(5) - E(5, 3)) // ER(5)]], Symbol("17") => [[(E(20, 17) - E(20, 13)) // ER(5), ((((E(20, 16) - E(20, 12)) - E(20, 9)) - E(20, 8)) + E(20, 4) + E(20)) // ER(5)], [0, 1]], Symbol("18") => [[1, E(15, 14) + E(15, 13) + E(15, 11) + E(15)], [0, E(5, 4) - E(5)]], Symbol("19") => [[1, ((E(20) - E(20, 8)) - E(20, 9)) - E(20, 12)], [1, E(15) + E(15, 11) + E(15, 13) + E(15, 14)], [0, -(E(20)) + E(20, 9)]], Symbol("20") => [[0, (-1 + ER(5)) // 2], ((3 - ER(-3)) * [(-5 + 3 * ER(5)) // 2, 1]) // 6], Symbol("21") => [[(5 - ER(5)) // 2, ER(3) + (ER(5) + 1) // 2], [0, 1 - E(3)]], Symbol("22") => [[1, ((E(20, 17) - E(20, 16)) - E(20, 13)) - E(20, 4)], [E(20, 16) + E(20, 13) + E(20, 12) + E(20, 8) + E(20, 4) + E(20), ((-(E(20, 16)) + E(20, 9)) - E(20, 8)) - E(20, 4)], [((((E(20, 17) - E(20, 16)) - E(20, 12)) + E(20, 9)) - E(20, 8)) - E(20, 4), E(20, 16) + E(20, 12) + E(20, 4) + E(20)]])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :GeneratingCoRoots, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [[0, 1], [ER(-3) // 3, ER(-3) // 3]], Symbol("5") => [[0, 1], [(-3 + ER(-3)) // 6, (3 - ER(-3)) // 3]], Symbol("6") => [[ER(3) // 3, (-3 - ER(3)) // 3], [0, 1]], Symbol("7") => [[0, 2], [1, ((-1 - ER(3)) * (-(E(4)) + 1)) // 2], [1, ((-1 - ER(3)) * (E(4) + 1)) // 2]], Symbol("8") => [[0, -(E(4)) - 1], [-(E(4)), -(E(4))]], Symbol("9") => [[1, (-2 - ER(2)) // 2], [0, 1]], Symbol("10") => [[0, 1], [(-(ER(-3)) * (E(4) + 1)) // 6, ((3 + ER(3)) * (-(E(4)) + 1)) // 6]], Symbol("11") => [[1, (-2 + ER(6)) * E(3, 2)], [0, ER(6) * E(3, 2)], [1, 1 + ER(3)]], Symbol("12") => [[1 // ER(-2), -1 + ER(-2)] // 2, [-1 // ER(-2), -1 - ER(-2)] // 2, [0, 1]], Symbol("13") => [[0, 2], [1, 1 + ER(2)], [ER(-2), 2 + ER(2)] // (E(4) - 1)], Symbol("14") => [[0, 1], ([1, -(ER(-2)) + 1 + 2 * E(3, 2)] // 2) // E(3)], Symbol("15") => [[((((((-3 * E(24, 19) - E(24, 17)) - 2 * E(24, 16)) - 3 * E(24, 14)) - 3 * E(24, 11)) - E(24, 8)) + E(24)) // 6, (((E(24, 17) - E(24, 16)) - 2 * E(24, 8)) - E(24)) // 3], [0, 1], [ER(3) // 3, (3 + ER(3)) // 3]], Symbol("16") => [[0, ((-(E(5, 4)) - E(5, 3)) - E(5, 2)) - 2 * E(5)], [(1 - ER(5)) // 2, -(E(5))]], Symbol("17") => [[(E(20, 12) - E(20, 9)) + E(20, 8) + E(20), 1], [0, ((-(E(5, 4)) - E(5, 3)) - E(5, 2)) - 2 * E(5)]], Symbol("18") => [[(5 * E(15, 14) + E(15, 13) + 5 * E(15, 11) + 5 * E(15, 8) + 4 * E(15, 7) + 3 * E(15, 4) + 5 * E(15, 2) + 2 * E(15)) // 5, (((-2 * E(15, 13) - 3 * E(15, 7)) - E(15, 4)) + E(15)) // 5], [0, -(E(5, 4)) - E(5, 2)]], Symbol("19") => [[(((((((-2 * E(20, 17) - 5 * E(20, 16)) + 2 * E(20, 13)) - 5 * E(20, 12)) + E(20, 9)) - 5 * E(20, 8)) - 5 * E(20, 4)) - E(20)) // 5, (((-(E(20, 17)) + E(20, 13)) - 2 * E(20, 9)) + 2 * E(20)) // 5], [(5 * E(15, 14) + E(15, 13) + 5 * E(15, 11) + 5 * E(15, 8) + 4 * E(15, 7) + 3 * E(15, 4) + 5 * E(15, 2) + 2 * E(15)) // 5, (((-2 * E(15, 13) - 3 * E(15, 7)) - E(15, 4)) + E(15)) // 5], [0, -(E(20, 13)) - E(20)]], Symbol("20") => [[0, ((1 + ER(5)) * (3 - ER(-3))) // 4], [ER(5) // 5, (3 + ER(5)) // 2]], Symbol("21") => [[((1 - ER(3)) * (ER(5) - 5 // ER(3))) // 10, ER(3) // 3], [0, 1]], Symbol("22") => [[((((-2 * E(5, 4) + E(5, 3)) - E(5, 2)) + 2 * E(5)) // 5) // E(4) + 1, (((-(E(5, 4)) - 2 * E(5, 3)) + 2 * E(5, 2) + E(5)) // 5) // E(4)], [((((((-4 * E(20, 17) - E(20, 16)) - E(20, 13)) + 3 * E(20, 12)) - 3 * E(20, 9)) + 2 * E(20, 8) + E(20, 4)) - 2 * E(20)) // 5, ((((((-2 * E(20, 17) - 3 * E(20, 16)) + 2 * E(20, 13)) - E(20, 12)) + E(20, 9) + E(20, 8)) - 2 * E(20, 4)) - E(20)) // 5], [(((((((-(E(20, 17)) - E(20, 16)) - 4 * E(20, 13)) - 2 * E(20, 12)) - 2 * E(20, 9)) - 3 * E(20, 8)) + E(20, 4)) - 3 * E(20)) // 5, (((((2 * E(20, 17) + 2 * E(20, 16)) - 2 * E(20, 13)) - E(20, 12)) - E(20, 9)) + E(20, 8) + 3 * E(20, 4) + E(20)) // 5]])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :CartanMat, function (ST,)
        return (chevieget(:G4_22, :GeneratingCoRoots))(ST) * TransposedMat((chevieget(:G4_22, :GeneratingRoots))(ST))
    end)
chevieset(:G4_22, :EigenvaluesGeneratingReflections, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [3, 3], Symbol("5") => [3, 3], Symbol("6") => [2, 3], Symbol("7") => [2, 3, 3], Symbol("8") => [4, 4], Symbol("9") => [2, 4], Symbol("10") => [3, 4], Symbol("11") => [2, 3, 4], Symbol("12") => [2, 2, 2], Symbol("13") => [2, 2, 2], Symbol("14") => [2, 3], Symbol("15") => [2, 3, 2], Symbol("16") => [5, 5], Symbol("17") => [2, 5], Symbol("18") => [3, 5], Symbol("19") => [2, 3, 5], Symbol("20") => [3, 3], Symbol("21") => [2, 3], Symbol("22") => [2, 2, 2])
        return map((x->begin
                        1 // x
                    end), d[Symbol(ST)])
    end)
chevieset(:G4_22, :ReflectionCoDegrees, function (ST,)
        local l
        l = [2, 6, 8, 12, 4, 16, 12, 24, 10, 16, 18, 24, 10, 40, 30, 60, 18, 48, 28]
        return [0, l[ST - 3]]
    end)
chevieset(:G4_22, :ReflectionDegrees, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [4, 6], Symbol("5") => [6, 12], Symbol("6") => [4, 12], Symbol("7") => [12, 12], Symbol("8") => [8, 12], Symbol("9") => [8, 24], Symbol("10") => [12, 24], Symbol("11") => [24, 24], Symbol("12") => [6, 8], Symbol("13") => [8, 12], Symbol("14") => [6, 24], Symbol("15") => [12, 24], Symbol("16") => [20, 30], Symbol("17") => [20, 60], Symbol("18") => [30, 60], Symbol("19") => [60, 60], Symbol("20") => [12, 30], Symbol("21") => [12, 60], Symbol("22") => [12, 20])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :PowerMaps, function (ST,)
        local l, res, i
        l = ((chevieget(:G4_22, :ClassInfo))(ST))[:indexclasses]
        if ST in 4:7
            res = [nothing, [1, 3, 5, 7, 9, 11, 1, 3, 5, 7, 9, 11, 1, 3, 5, 7, 9, 11, 39, 41, 31, 33, 35, 37, 39, 41, 31, 33, 35, 37, 27, 29, 19, 21, 23, 25, 27, 29, 19, 21, 23, 25], [1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10, 13, 16, 13, 16, 13, 16, 1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10], nothing, [1, 6, 11, 4, 9, 2, 7, 12, 5, 10, 3, 8, 13, 18, 17, 16, 15, 14, 39, 32, 37, 42, 35, 40, 33, 38, 31, 36, 41, 34, 27, 20, 25, 30, 23, 28, 21, 26, 19, 24, 29, 22], nothing, [1, 8, 3, 10, 5, 12, 7, 2, 9, 4, 11, 6, 13, 14, 15, 16, 17, 18, 19, 26, 21, 28, 23, 30, 25, 20, 27, 22, 29, 24, 31, 38, 33, 40, 35, 42, 37, 32, 39, 34, 41, 36], nothing, nothing, nothing, [1, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 13, 18, 17, 16, 15, 14, 39, 38, 37, 36, 35, 34, 33, 32, 31, 42, 41, 40, 27, 26, 25, 24, 23, 22, 21, 20, 19, 30, 29, 28]]
        elseif ST in 8:15
            res = [nothing, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 53, 55, 57, 59, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 37, 39, 41, 43, 45, 47, 49, 51, 85, 87, 89, 91, 93, 95, 85, 87, 89, 91, 93, 95, 85, 87, 89, 91, 93, 95, 85, 87, 89, 91, 93, 95, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], [1, 4, 7, 10, 13, 16, 19, 22, 1, 4, 7, 10, 13, 16, 19, 22, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 25, 28, 31, 34, 25, 28, 31, 34, 1, 4, 7, 10, 13, 16, 19, 22, 1, 4, 7, 10, 13, 16, 19, 22, 1, 4, 7, 10, 13, 16, 19, 22, 79, 82, 61, 64, 67, 70, 73, 76, 79, 82, 61, 64, 67, 70, 73, 76, 79, 82, 61, 64, 67, 70, 73, 76, 85, 88, 91, 94, 85, 88, 91, 94, 85, 88, 91, 94], nothing, [1, 6, 11, 16, 21, 2, 7, 12, 17, 22, 3, 8, 13, 18, 23, 4, 9, 14, 19, 24, 5, 10, 15, 20, 25, 30, 35, 28, 33, 26, 31, 36, 29, 34, 27, 32, 53, 58, 39, 44, 49, 54, 59, 40, 45, 50, 55, 60, 41, 46, 51, 56, 37, 42, 47, 52, 57, 38, 43, 48, 61, 66, 71, 76, 81, 62, 67, 72, 77, 82, 63, 68, 73, 78, 83, 64, 69, 74, 79, 84, 65, 70, 75, 80, 85, 90, 95, 88, 93, 86, 91, 96, 89, 94, 87, 92], nothing, [1, 8, 15, 22, 5, 12, 19, 2, 9, 16, 23, 6, 13, 20, 3, 10, 17, 24, 7, 14, 21, 4, 11, 18, 25, 32, 27, 34, 29, 36, 31, 26, 33, 28, 35, 30, 37, 44, 51, 58, 41, 48, 55, 38, 45, 52, 59, 42, 49, 56, 39, 46, 53, 60, 43, 50, 57, 40, 47, 54, 79, 62, 69, 76, 83, 66, 73, 80, 63, 70, 77, 84, 67, 74, 81, 64, 71, 78, 61, 68, 75, 82, 65, 72, 85, 92, 87, 94, 89, 96, 91, 86, 93, 88, 95, 90], nothing, nothing, nothing, [1, 12, 23, 10, 21, 8, 19, 6, 17, 4, 15, 2, 13, 24, 11, 22, 9, 20, 7, 18, 5, 16, 3, 14, 25, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 53, 40, 51, 38, 49, 60, 47, 58, 45, 56, 43, 54, 41, 52, 39, 50, 37, 48, 59, 46, 57, 44, 55, 42, 79, 66, 77, 64, 75, 62, 73, 84, 71, 82, 69, 80, 67, 78, 65, 76, 63, 74, 61, 72, 83, 70, 81, 68, 85, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86], nothing, [1, 14, 3, 16, 5, 18, 7, 20, 9, 22, 11, 24, 13, 2, 15, 4, 17, 6, 19, 8, 21, 10, 23, 12, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 39, 52, 41, 54, 43, 56, 45, 58, 47, 60, 49, 38, 51, 40, 53, 42, 55, 44, 57, 46, 59, 48, 61, 74, 63, 76, 65, 78, 67, 80, 69, 82, 71, 84, 73, 62, 75, 64, 77, 66, 79, 68, 81, 70, 83, 72, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], nothing, nothing, nothing, [1, 18, 11, 4, 21, 14, 7, 24, 17, 10, 3, 20, 13, 6, 23, 16, 9, 2, 19, 12, 5, 22, 15, 8, 25, 30, 35, 28, 33, 26, 31, 36, 29, 34, 27, 32, 53, 46, 39, 56, 49, 42, 59, 52, 45, 38, 55, 48, 41, 58, 51, 44, 37, 54, 47, 40, 57, 50, 43, 60, 61, 78, 71, 64, 81, 74, 67, 84, 77, 70, 63, 80, 73, 66, 83, 76, 69, 62, 79, 72, 65, 82, 75, 68, 85, 90, 95, 88, 93, 86, 91, 96, 89, 94, 87, 92], nothing, [1, 20, 15, 10, 5, 24, 19, 14, 9, 4, 23, 18, 13, 8, 3, 22, 17, 12, 7, 2, 21, 16, 11, 6, 25, 32, 27, 34, 29, 36, 31, 26, 33, 28, 35, 30, 37, 56, 51, 46, 41, 60, 55, 50, 45, 40, 59, 54, 49, 44, 39, 58, 53, 48, 43, 38, 57, 52, 47, 42, 79, 74, 69, 64, 83, 78, 73, 68, 63, 82, 77, 72, 67, 62, 81, 76, 71, 66, 61, 80, 75, 70, 65, 84, 85, 92, 87, 94, 89, 96, 91, 86, 93, 88, 95, 90], nothing, nothing, nothing, [1, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 25, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 60, 59, 58, 57, 56, 55, 54, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 84, 83, 82, 81, 80, 85, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86]]
        elseif ST in 16:22
            res = [nothing, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 199, 201, 203, 205, 207, 209, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 247, 250, 253, 256, 259, 262, 265, 268, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 256, 259, 262, 265, 268, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 256, 259, 262, 265, 268, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208], nothing, [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56], nothing, [1, 8, 15, 22, 29, 36, 43, 50, 57, 4, 11, 18, 25, 32, 39, 46, 53, 60, 7, 14, 21, 28, 35, 42, 49, 56, 3, 10, 17, 24, 31, 38, 45, 52, 59, 6, 13, 20, 27, 34, 41, 48, 55, 2, 9, 16, 23, 30, 37, 44, 51, 58, 5, 12, 19, 26, 33, 40, 47, 54, 61, 68, 75, 82, 89, 66, 73, 80, 87, 64, 71, 78, 85, 62, 69, 76, 83, 90, 67, 74, 81, 88, 65, 72, 79, 86, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 94, 101, 108, 115, 122, 129, 136, 143, 150, 97, 104, 111, 118, 125, 132, 139, 146, 93, 100, 107, 114, 121, 128, 135, 142, 149, 96, 103, 110, 117, 124, 131, 138, 145, 92, 99, 106, 113, 120, 127, 134, 141, 148, 95, 102, 109, 116, 123, 130, 137, 144, 211, 218, 225, 232, 239, 246, 253, 260, 267, 214, 221, 228, 235, 242, 249, 256, 263, 270, 217, 224, 231, 238, 245, 252, 259, 266, 213, 220, 227, 234, 241, 248, 255, 262, 269, 216, 223, 230, 237, 244, 251, 258, 265, 212, 219, 226, 233, 240, 247, 254, 261, 268, 215, 222, 229, 236, 243, 250, 257, 264, 199, 206, 153, 160, 167, 174, 181, 188, 195, 202, 209, 156, 163, 170, 177, 184, 191, 198, 205, 152, 159, 166, 173, 180, 187, 194, 201, 208, 155, 162, 169, 176, 183, 190, 197, 204, 151, 158, 165, 172, 179, 186, 193, 200, 207, 154, 161, 168, 175, 182, 189, 196, 203, 210, 157, 164, 171, 178, 185, 192], nothing, nothing, nothing, [1, 12, 23, 34, 45, 56, 7, 18, 29, 40, 51, 2, 13, 24, 35, 46, 57, 8, 19, 30, 41, 52, 3, 14, 25, 36, 47, 58, 9, 20, 31, 42, 53, 4, 15, 26, 37, 48, 59, 10, 21, 32, 43, 54, 5, 16, 27, 38, 49, 60, 11, 22, 33, 44, 55, 6, 17, 28, 39, 50, 61, 72, 83, 64, 75, 86, 67, 78, 89, 70, 81, 62, 73, 84, 65, 76, 87, 68, 79, 90, 71, 82, 63, 74, 85, 66, 77, 88, 69, 80, 131, 142, 93, 104, 115, 126, 137, 148, 99, 110, 121, 132, 143, 94, 105, 116, 127, 138, 149, 100, 111, 122, 133, 144, 95, 106, 117, 128, 139, 150, 101, 112, 123, 134, 145, 96, 107, 118, 129, 140, 91, 102, 113, 124, 135, 146, 97, 108, 119, 130, 141, 92, 103, 114, 125, 136, 147, 98, 109, 120, 151, 162, 173, 184, 195, 206, 157, 168, 179, 190, 201, 152, 163, 174, 185, 196, 207, 158, 169, 180, 191, 202, 153, 164, 175, 186, 197, 208, 159, 170, 181, 192, 203, 154, 165, 176, 187, 198, 209, 160, 171, 182, 193, 204, 155, 166, 177, 188, 199, 210, 161, 172, 183, 194, 205, 156, 167, 178, 189, 200, 211, 222, 233, 244, 255, 266, 217, 228, 239, 250, 261, 212, 223, 234, 245, 256, 267, 218, 229, 240, 251, 262, 213, 224, 235, 246, 257, 268, 219, 230, 241, 252, 263, 214, 225, 236, 247, 258, 269, 220, 231, 242, 253, 264, 215, 226, 237, 248, 259, 270, 221, 232, 243, 254, 265, 216, 227, 238, 249, 260], nothing, [1, 14, 27, 40, 53, 6, 19, 32, 45, 58, 11, 24, 37, 50, 3, 16, 29, 42, 55, 8, 21, 34, 47, 60, 13, 26, 39, 52, 5, 18, 31, 44, 57, 10, 23, 36, 49, 2, 15, 28, 41, 54, 7, 20, 33, 46, 59, 12, 25, 38, 51, 4, 17, 30, 43, 56, 9, 22, 35, 48, 61, 74, 87, 70, 83, 66, 79, 62, 75, 88, 71, 84, 67, 80, 63, 76, 89, 72, 85, 68, 81, 64, 77, 90, 73, 86, 69, 82, 65, 78, 91, 104, 117, 130, 143, 96, 109, 122, 135, 148, 101, 114, 127, 140, 93, 106, 119, 132, 145, 98, 111, 124, 137, 150, 103, 116, 129, 142, 95, 108, 121, 134, 147, 100, 113, 126, 139, 92, 105, 118, 131, 144, 97, 110, 123, 136, 149, 102, 115, 128, 141, 94, 107, 120, 133, 146, 99, 112, 125, 138, 247, 260, 213, 226, 239, 252, 265, 218, 231, 244, 257, 270, 223, 236, 249, 262, 215, 228, 241, 254, 267, 220, 233, 246, 259, 212, 225, 238, 251, 264, 217, 230, 243, 256, 269, 222, 235, 248, 261, 214, 227, 240, 253, 266, 219, 232, 245, 258, 211, 224, 237, 250, 263, 216, 229, 242, 255, 268, 221, 234, 151, 164, 177, 190, 203, 156, 169, 182, 195, 208, 161, 174, 187, 200, 153, 166, 179, 192, 205, 158, 171, 184, 197, 210, 163, 176, 189, 202, 155, 168, 181, 194, 207, 160, 173, 186, 199, 152, 165, 178, 191, 204, 157, 170, 183, 196, 209, 162, 175, 188, 201, 154, 167, 180, 193, 206, 159, 172, 185, 198], nothing, nothing, nothing, [1, 18, 35, 52, 9, 26, 43, 60, 17, 34, 51, 8, 25, 42, 59, 16, 33, 50, 7, 24, 41, 58, 15, 32, 49, 6, 23, 40, 57, 14, 31, 48, 5, 22, 39, 56, 13, 30, 47, 4, 21, 38, 55, 12, 29, 46, 3, 20, 37, 54, 11, 28, 45, 2, 19, 36, 53, 10, 27, 44, 61, 78, 65, 82, 69, 86, 73, 90, 77, 64, 81, 68, 85, 72, 89, 76, 63, 80, 67, 84, 71, 88, 75, 62, 79, 66, 83, 70, 87, 74, 131, 148, 105, 122, 139, 96, 113, 130, 147, 104, 121, 138, 95, 112, 129, 146, 103, 120, 137, 94, 111, 128, 145, 102, 119, 136, 93, 110, 127, 144, 101, 118, 135, 92, 109, 126, 143, 100, 117, 134, 91, 108, 125, 142, 99, 116, 133, 150, 107, 124, 141, 98, 115, 132, 149, 106, 123, 140, 97, 114, 211, 228, 245, 262, 219, 236, 253, 270, 227, 244, 261, 218, 235, 252, 269, 226, 243, 260, 217, 234, 251, 268, 225, 242, 259, 216, 233, 250, 267, 224, 241, 258, 215, 232, 249, 266, 223, 240, 257, 214, 231, 248, 265, 222, 239, 256, 213, 230, 247, 264, 221, 238, 255, 212, 229, 246, 263, 220, 237, 254, 199, 156, 173, 190, 207, 164, 181, 198, 155, 172, 189, 206, 163, 180, 197, 154, 171, 188, 205, 162, 179, 196, 153, 170, 187, 204, 161, 178, 195, 152, 169, 186, 203, 160, 177, 194, 151, 168, 185, 202, 159, 176, 193, 210, 167, 184, 201, 158, 175, 192, 209, 166, 183, 200, 157, 174, 191, 208, 165, 182], nothing, [1, 20, 39, 58, 17, 36, 55, 14, 33, 52, 11, 30, 49, 8, 27, 46, 5, 24, 43, 2, 21, 40, 59, 18, 37, 56, 15, 34, 53, 12, 31, 50, 9, 28, 47, 6, 25, 44, 3, 22, 41, 60, 19, 38, 57, 16, 35, 54, 13, 32, 51, 10, 29, 48, 7, 26, 45, 4, 23, 42, 61, 80, 69, 88, 77, 66, 85, 74, 63, 82, 71, 90, 79, 68, 87, 76, 65, 84, 73, 62, 81, 70, 89, 78, 67, 86, 75, 64, 83, 72, 91, 110, 129, 148, 107, 126, 145, 104, 123, 142, 101, 120, 139, 98, 117, 136, 95, 114, 133, 92, 111, 130, 149, 108, 127, 146, 105, 124, 143, 102, 121, 140, 99, 118, 137, 96, 115, 134, 93, 112, 131, 150, 109, 128, 147, 106, 125, 144, 103, 122, 141, 100, 119, 138, 97, 116, 135, 94, 113, 132, 199, 158, 177, 196, 155, 174, 193, 152, 171, 190, 209, 168, 187, 206, 165, 184, 203, 162, 181, 200, 159, 178, 197, 156, 175, 194, 153, 172, 191, 210, 169, 188, 207, 166, 185, 204, 163, 182, 201, 160, 179, 198, 157, 176, 195, 154, 173, 192, 151, 170, 189, 208, 167, 186, 205, 164, 183, 202, 161, 180, 247, 266, 225, 244, 263, 222, 241, 260, 219, 238, 257, 216, 235, 254, 213, 232, 251, 270, 229, 248, 267, 226, 245, 264, 223, 242, 261, 220, 239, 258, 217, 236, 255, 214, 233, 252, 211, 230, 249, 268, 227, 246, 265, 224, 243, 262, 221, 240, 259, 218, 237, 256, 215, 234, 253, 212, 231, 250, 269, 228], nothing, nothing, nothing, [1, 24, 47, 10, 33, 56, 19, 42, 5, 28, 51, 14, 37, 60, 23, 46, 9, 32, 55, 18, 41, 4, 27, 50, 13, 36, 59, 22, 45, 8, 31, 54, 17, 40, 3, 26, 49, 12, 35, 58, 21, 44, 7, 30, 53, 16, 39, 2, 25, 48, 11, 34, 57, 20, 43, 6, 29, 52, 15, 38, 61, 84, 77, 70, 63, 86, 79, 72, 65, 88, 81, 74, 67, 90, 83, 76, 69, 62, 85, 78, 71, 64, 87, 80, 73, 66, 89, 82, 75, 68, 131, 94, 117, 140, 103, 126, 149, 112, 135, 98, 121, 144, 107, 130, 93, 116, 139, 102, 125, 148, 111, 134, 97, 120, 143, 106, 129, 92, 115, 138, 101, 124, 147, 110, 133, 96, 119, 142, 105, 128, 91, 114, 137, 100, 123, 146, 109, 132, 95, 118, 141, 104, 127, 150, 113, 136, 99, 122, 145, 108, 247, 270, 233, 256, 219, 242, 265, 228, 251, 214, 237, 260, 223, 246, 269, 232, 255, 218, 241, 264, 227, 250, 213, 236, 259, 222, 245, 268, 231, 254, 217, 240, 263, 226, 249, 212, 235, 258, 221, 244, 267, 230, 253, 216, 239, 262, 225, 248, 211, 234, 257, 220, 243, 266, 229, 252, 215, 238, 261, 224, 151, 174, 197, 160, 183, 206, 169, 192, 155, 178, 201, 164, 187, 210, 173, 196, 159, 182, 205, 168, 191, 154, 177, 200, 163, 186, 209, 172, 195, 158, 181, 204, 167, 190, 153, 176, 199, 162, 185, 208, 171, 194, 157, 180, 203, 166, 189, 152, 175, 198, 161, 184, 207, 170, 193, 156, 179, 202, 165, 188], nothing, nothing, nothing, nothing, nothing, [1, 30, 59, 28, 57, 26, 55, 24, 53, 22, 51, 20, 49, 18, 47, 16, 45, 14, 43, 12, 41, 10, 39, 8, 37, 6, 35, 4, 33, 2, 31, 60, 29, 58, 27, 56, 25, 54, 23, 52, 21, 50, 19, 48, 17, 46, 15, 44, 13, 42, 11, 40, 9, 38, 7, 36, 5, 34, 3, 32, 61, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 131, 100, 129, 98, 127, 96, 125, 94, 123, 92, 121, 150, 119, 148, 117, 146, 115, 144, 113, 142, 111, 140, 109, 138, 107, 136, 105, 134, 103, 132, 101, 130, 99, 128, 97, 126, 95, 124, 93, 122, 91, 120, 149, 118, 147, 116, 145, 114, 143, 112, 141, 110, 139, 108, 137, 106, 135, 104, 133, 102, 199, 168, 197, 166, 195, 164, 193, 162, 191, 160, 189, 158, 187, 156, 185, 154, 183, 152, 181, 210, 179, 208, 177, 206, 175, 204, 173, 202, 171, 200, 169, 198, 167, 196, 165, 194, 163, 192, 161, 190, 159, 188, 157, 186, 155, 184, 153, 182, 151, 180, 209, 178, 207, 176, 205, 174, 203, 172, 201, 170, 247, 216, 245, 214, 243, 212, 241, 270, 239, 268, 237, 266, 235, 264, 233, 262, 231, 260, 229, 258, 227, 256, 225, 254, 223, 252, 221, 250, 219, 248, 217, 246, 215, 244, 213, 242, 211, 240, 269, 238, 267, 236, 265, 234, 263, 232, 261, 230, 259, 228, 257, 226, 255, 224, 253, 222, 251, 220, 249, 218], nothing, [1, 32, 3, 34, 5, 36, 7, 38, 9, 40, 11, 42, 13, 44, 15, 46, 17, 48, 19, 50, 21, 52, 23, 54, 25, 56, 27, 58, 29, 60, 31, 2, 33, 4, 35, 6, 37, 8, 39, 10, 41, 12, 43, 14, 45, 16, 47, 18, 49, 20, 51, 22, 53, 24, 55, 26, 57, 28, 59, 30, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 122, 93, 124, 95, 126, 97, 128, 99, 130, 101, 132, 103, 134, 105, 136, 107, 138, 109, 140, 111, 142, 113, 144, 115, 146, 117, 148, 119, 150, 121, 92, 123, 94, 125, 96, 127, 98, 129, 100, 131, 102, 133, 104, 135, 106, 137, 108, 139, 110, 141, 112, 143, 114, 145, 116, 147, 118, 149, 120, 151, 182, 153, 184, 155, 186, 157, 188, 159, 190, 161, 192, 163, 194, 165, 196, 167, 198, 169, 200, 171, 202, 173, 204, 175, 206, 177, 208, 179, 210, 181, 152, 183, 154, 185, 156, 187, 158, 189, 160, 191, 162, 193, 164, 195, 166, 197, 168, 199, 170, 201, 172, 203, 174, 205, 176, 207, 178, 209, 180, 211, 242, 213, 244, 215, 246, 217, 248, 219, 250, 221, 252, 223, 254, 225, 256, 227, 258, 229, 260, 231, 262, 233, 264, 235, 266, 237, 268, 239, 270, 241, 212, 243, 214, 245, 216, 247, 218, 249, 220, 251, 222, 253, 224, 255, 226, 257, 228, 259, 230, 261, 232, 263, 234, 265, 236, 267, 238, 269, 240], nothing, nothing, nothing, nothing, nothing, [1, 38, 15, 52, 29, 6, 43, 20, 57, 34, 11, 48, 25, 2, 39, 16, 53, 30, 7, 44, 21, 58, 35, 12, 49, 26, 3, 40, 17, 54, 31, 8, 45, 22, 59, 36, 13, 50, 27, 4, 41, 18, 55, 32, 9, 46, 23, 60, 37, 14, 51, 28, 5, 42, 19, 56, 33, 10, 47, 24, 61, 68, 75, 82, 89, 66, 73, 80, 87, 64, 71, 78, 85, 62, 69, 76, 83, 90, 67, 74, 81, 88, 65, 72, 79, 86, 63, 70, 77, 84, 91, 128, 105, 142, 119, 96, 133, 110, 147, 124, 101, 138, 115, 92, 129, 106, 143, 120, 97, 134, 111, 148, 125, 102, 139, 116, 93, 130, 107, 144, 121, 98, 135, 112, 149, 126, 103, 140, 117, 94, 131, 108, 145, 122, 99, 136, 113, 150, 127, 104, 141, 118, 95, 132, 109, 146, 123, 100, 137, 114, 211, 248, 225, 262, 239, 216, 253, 230, 267, 244, 221, 258, 235, 212, 249, 226, 263, 240, 217, 254, 231, 268, 245, 222, 259, 236, 213, 250, 227, 264, 241, 218, 255, 232, 269, 246, 223, 260, 237, 214, 251, 228, 265, 242, 219, 256, 233, 270, 247, 224, 261, 238, 215, 252, 229, 266, 243, 220, 257, 234, 199, 176, 153, 190, 167, 204, 181, 158, 195, 172, 209, 186, 163, 200, 177, 154, 191, 168, 205, 182, 159, 196, 173, 210, 187, 164, 201, 178, 155, 192, 169, 206, 183, 160, 197, 174, 151, 188, 165, 202, 179, 156, 193, 170, 207, 184, 161, 198, 175, 152, 189, 166, 203, 180, 157, 194, 171, 208, 185, 162], nothing, nothing, nothing, [1, 42, 23, 4, 45, 26, 7, 48, 29, 10, 51, 32, 13, 54, 35, 16, 57, 38, 19, 60, 41, 22, 3, 44, 25, 6, 47, 28, 9, 50, 31, 12, 53, 34, 15, 56, 37, 18, 59, 40, 21, 2, 43, 24, 5, 46, 27, 8, 49, 30, 11, 52, 33, 14, 55, 36, 17, 58, 39, 20, 61, 72, 83, 64, 75, 86, 67, 78, 89, 70, 81, 62, 73, 84, 65, 76, 87, 68, 79, 90, 71, 82, 63, 74, 85, 66, 77, 88, 69, 80, 131, 112, 93, 134, 115, 96, 137, 118, 99, 140, 121, 102, 143, 124, 105, 146, 127, 108, 149, 130, 111, 92, 133, 114, 95, 136, 117, 98, 139, 120, 101, 142, 123, 104, 145, 126, 107, 148, 129, 110, 91, 132, 113, 94, 135, 116, 97, 138, 119, 100, 141, 122, 103, 144, 125, 106, 147, 128, 109, 150, 151, 192, 173, 154, 195, 176, 157, 198, 179, 160, 201, 182, 163, 204, 185, 166, 207, 188, 169, 210, 191, 172, 153, 194, 175, 156, 197, 178, 159, 200, 181, 162, 203, 184, 165, 206, 187, 168, 209, 190, 171, 152, 193, 174, 155, 196, 177, 158, 199, 180, 161, 202, 183, 164, 205, 186, 167, 208, 189, 170, 211, 252, 233, 214, 255, 236, 217, 258, 239, 220, 261, 242, 223, 264, 245, 226, 267, 248, 229, 270, 251, 232, 213, 254, 235, 216, 257, 238, 219, 260, 241, 222, 263, 244, 225, 266, 247, 228, 269, 250, 231, 212, 253, 234, 215, 256, 237, 218, 259, 240, 221, 262, 243, 224, 265, 246, 227, 268, 249, 230], nothing, [1, 44, 27, 10, 53, 36, 19, 2, 45, 28, 11, 54, 37, 20, 3, 46, 29, 12, 55, 38, 21, 4, 47, 30, 13, 56, 39, 22, 5, 48, 31, 14, 57, 40, 23, 6, 49, 32, 15, 58, 41, 24, 7, 50, 33, 16, 59, 42, 25, 8, 51, 34, 17, 60, 43, 26, 9, 52, 35, 18, 61, 74, 87, 70, 83, 66, 79, 62, 75, 88, 71, 84, 67, 80, 63, 76, 89, 72, 85, 68, 81, 64, 77, 90, 73, 86, 69, 82, 65, 78, 91, 134, 117, 100, 143, 126, 109, 92, 135, 118, 101, 144, 127, 110, 93, 136, 119, 102, 145, 128, 111, 94, 137, 120, 103, 146, 129, 112, 95, 138, 121, 104, 147, 130, 113, 96, 139, 122, 105, 148, 131, 114, 97, 140, 123, 106, 149, 132, 115, 98, 141, 124, 107, 150, 133, 116, 99, 142, 125, 108, 247, 230, 213, 256, 239, 222, 265, 248, 231, 214, 257, 240, 223, 266, 249, 232, 215, 258, 241, 224, 267, 250, 233, 216, 259, 242, 225, 268, 251, 234, 217, 260, 243, 226, 269, 252, 235, 218, 261, 244, 227, 270, 253, 236, 219, 262, 245, 228, 211, 254, 237, 220, 263, 246, 229, 212, 255, 238, 221, 264, 151, 194, 177, 160, 203, 186, 169, 152, 195, 178, 161, 204, 187, 170, 153, 196, 179, 162, 205, 188, 171, 154, 197, 180, 163, 206, 189, 172, 155, 198, 181, 164, 207, 190, 173, 156, 199, 182, 165, 208, 191, 174, 157, 200, 183, 166, 209, 192, 175, 158, 201, 184, 167, 210, 193, 176, 159, 202, 185, 168], nothing, nothing, nothing, [1, 48, 35, 22, 9, 56, 43, 30, 17, 4, 51, 38, 25, 12, 59, 46, 33, 20, 7, 54, 41, 28, 15, 2, 49, 36, 23, 10, 57, 44, 31, 18, 5, 52, 39, 26, 13, 60, 47, 34, 21, 8, 55, 42, 29, 16, 3, 50, 37, 24, 11, 58, 45, 32, 19, 6, 53, 40, 27, 14, 61, 78, 65, 82, 69, 86, 73, 90, 77, 64, 81, 68, 85, 72, 89, 76, 63, 80, 67, 84, 71, 88, 75, 62, 79, 66, 83, 70, 87, 74, 131, 118, 105, 92, 139, 126, 113, 100, 147, 134, 121, 108, 95, 142, 129, 116, 103, 150, 137, 124, 111, 98, 145, 132, 119, 106, 93, 140, 127, 114, 101, 148, 135, 122, 109, 96, 143, 130, 117, 104, 91, 138, 125, 112, 99, 146, 133, 120, 107, 94, 141, 128, 115, 102, 149, 136, 123, 110, 97, 144, 211, 258, 245, 232, 219, 266, 253, 240, 227, 214, 261, 248, 235, 222, 269, 256, 243, 230, 217, 264, 251, 238, 225, 212, 259, 246, 233, 220, 267, 254, 241, 228, 215, 262, 249, 236, 223, 270, 257, 244, 231, 218, 265, 252, 239, 226, 213, 260, 247, 234, 221, 268, 255, 242, 229, 216, 263, 250, 237, 224, 199, 186, 173, 160, 207, 194, 181, 168, 155, 202, 189, 176, 163, 210, 197, 184, 171, 158, 205, 192, 179, 166, 153, 200, 187, 174, 161, 208, 195, 182, 169, 156, 203, 190, 177, 164, 151, 198, 185, 172, 159, 206, 193, 180, 167, 154, 201, 188, 175, 162, 209, 196, 183, 170, 157, 204, 191, 178, 165, 152], nothing, nothing, nothing, nothing, nothing, [1, 54, 47, 40, 33, 26, 19, 12, 5, 58, 51, 44, 37, 30, 23, 16, 9, 2, 55, 48, 41, 34, 27, 20, 13, 6, 59, 52, 45, 38, 31, 24, 17, 10, 3, 56, 49, 42, 35, 28, 21, 14, 7, 60, 53, 46, 39, 32, 25, 18, 11, 4, 57, 50, 43, 36, 29, 22, 15, 8, 61, 84, 77, 70, 63, 86, 79, 72, 65, 88, 81, 74, 67, 90, 83, 76, 69, 62, 85, 78, 71, 64, 87, 80, 73, 66, 89, 82, 75, 68, 131, 124, 117, 110, 103, 96, 149, 142, 135, 128, 121, 114, 107, 100, 93, 146, 139, 132, 125, 118, 111, 104, 97, 150, 143, 136, 129, 122, 115, 108, 101, 94, 147, 140, 133, 126, 119, 112, 105, 98, 91, 144, 137, 130, 123, 116, 109, 102, 95, 148, 141, 134, 127, 120, 113, 106, 99, 92, 145, 138, 247, 240, 233, 226, 219, 212, 265, 258, 251, 244, 237, 230, 223, 216, 269, 262, 255, 248, 241, 234, 227, 220, 213, 266, 259, 252, 245, 238, 231, 224, 217, 270, 263, 256, 249, 242, 235, 228, 221, 214, 267, 260, 253, 246, 239, 232, 225, 218, 211, 264, 257, 250, 243, 236, 229, 222, 215, 268, 261, 254, 151, 204, 197, 190, 183, 176, 169, 162, 155, 208, 201, 194, 187, 180, 173, 166, 159, 152, 205, 198, 191, 184, 177, 170, 163, 156, 209, 202, 195, 188, 181, 174, 167, 160, 153, 206, 199, 192, 185, 178, 171, 164, 157, 210, 203, 196, 189, 182, 175, 168, 161, 154, 207, 200, 193, 186, 179, 172, 165, 158], nothing, nothing, nothing, nothing, nothing, [1, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 61, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248]]
        end
        for i = 1:length(res)
            if res[i] !== nothing
                res[i] = map((x->begin
                                Position(l, x)
                            end), (res[i])[l])
                if res[i] == 1:length(l) || res[i] in Sublist(res, 1:i - 1)
                    Unbind(res[i])
                end
            end
        end
        return res
    end)
chevieset(:G4_22, :ClassInfo, function (ST,)
        local res, p, g, m, f, digits
        p = (chevieget(:G4_22, :paramclasses))(ST)
        res = Dict{Symbol, Any}()
        g = function (c, a, b)
                return mod(c[2], a) == b[c[1]]
            end
        f = function (class, z)
                local r, i
                r = [[], [1], [2], [3], [3, 3]]
                r = r[class[1]]
                for i = 1:class[2]
                    r = Append(r, z)
                end
                return r
            end
        if ST == 4
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 6, [0, 3, 2, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [3, 1]), [2], [], [1, 3, 1], [2], [3], [1])
                        end), p[res[:indexclasses]])
            m = "121212"
        elseif ST == 5
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 2, [0, 1, 0, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [2, 3]), [1], [], [2], [1], [3], [2])
                        end), p[res[:indexclasses]])
            m = "1212"
        elseif ST == 6
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 3, [0, 0, 2, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [3, 1]), [2], [], [3], [2])
                        end), p[res[:indexclasses]])
            m = "212121"
        elseif ST == 7
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 1, [0, 0, 0, 0])
                        end))
            res[:classtext] = map((x->begin
                            f(x, [1, 2, 3])
                        end), p[res[:indexclasses]])
            m = "123"
        elseif ST == 8
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 6, [0, 3, 2, 0, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [3, 1]), [2], [], [1, 3, 1], [2], [3], [1])
                        end), p[res[:indexclasses]])
            m = "121212"
        elseif ST == 9
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 3, [0, 0, 2, 0, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [3, 1]), [2], [], [3], [2])
                        end), p[res[:indexclasses]])
            m = "212121"
        elseif ST == 10
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 2, [0, 1, 0, 0, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [2, 3]), [1], [], [2], [1], [3], [2])
                        end), p[res[:indexclasses]])
            m = "1212"
        elseif ST == 11
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 1, [0, 0, 0, 0, 0])
                        end))
            res[:classtext] = map((x->begin
                            f(x, [1, 2, 3])
                        end), p[res[:indexclasses]])
            m = "123"
        elseif ST == 12
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 12, [0, 0, 8, 3, 6])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [1, 2]), [3], [], [2, 1, 2, 1, 2], [2, 3])
                        end), p[res[:indexclasses]])
            m = "123123123123"
        elseif ST == 13
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 6, [0, 0, 2, 3, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(x, "z", [1, 2, 3, 1, 2, 3, 1, 2, 3])
                        end), [[], "z", "zz", "zzz", [2], [2, 'z'], [3, 1, 2], [3, 1, 2, 'z'], [3, 1, 2, 'z', 'z'], [3, 1, 2, 'z', 'z', 'z'], [2, 3, 1, 2, 1], [2, 3, 1, 2, 1, 'z'], [2, 3, 1, 2, 1, 'z', 'z'], [2, 3, 1, 2, 1, 'z', 'z', 'z'], [1], [1, 'z']])
            m = "123123123"
        elseif ST == 14
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 4, [0, 0, 0, 3, 2])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [1, 2]), [3], [])
                        end), p[res[:indexclasses]])
            m = "12121212"
        elseif ST == 15
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 2, [0, 0, 0, 1, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [1, 2, 3]), [3, 3], [4], [3, 1, 2, 3], [4, 1, 2], [4], [3])
                        end), p[res[:indexclasses]])
            m = "12312"
        elseif ST == 16
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 6, [0, 3, 2, 0, 0])
                        end))
            res[:classtext] = map((c->begin
                            Replace(f(c, [3, 1]), [2], [], [1, 3, 1], [2], [3], [1])
                        end), p[res[:indexclasses]])
            m = "121212"
        elseif ST == 17
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 3, [0, 0, 2, 0, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [3, 1]), [2], [], [3], [2])
                        end), p[res[:indexclasses]])
            m = "212121"
        elseif ST == 18
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 2, [0, 1, 0, 0, 0])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [2, 3]), [1], [], [2], [1], [3], [2])
                        end), p[res[:indexclasses]])
            m = "1212"
        elseif ST == 19
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 1, [0, 0, 0, 0, 0])
                        end))
            res[:classtext] = map((x->begin
                            f(x, [1, 2, 3])
                        end), p[res[:indexclasses]])
            m = "123"
        elseif ST == 20
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 10, [0, 5, 0, 4, 8])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [1, 2]), [3], [], [1, 1], [], [1, 2, 1], [3], [2], [1], [3], [2])
                        end), p[res[:indexclasses]])
            m = "2121212121"
        elseif ST == 21
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 5, [0, 0, 0, 4, 3])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [1, 2]), [3], [])
                        end), p[res[:indexclasses]])
            m = "1212121212"
        elseif ST == 22
            res[:indexclasses] = Filtered(1:length(p), (i->begin
                            g(p[i], 15, [0, 0, 5, 9, 3])
                        end))
            res[:classtext] = map((x->begin
                            Replace(f(x, [1, 2]), [3], [], [2, 1, 2, 1, 2], [2, 3])
                        end), p[res[:indexclasses]])
            m = "123123123123123"
        end
        digits = "123"
        res[:classnames] = map(function (x,)
                    local res
                    if length(x) == 0
                        return "."
                    end
                    return string(Replace(digits[x], m, "z"))
                end, res[:classtext])
        if ST in 4:7
            m = [1, 6, 4, 4]
            res[:classes] = map((x->begin
                            m[x[1]]
                        end), p[res[:indexclasses]])
            m = [1, 12, 6, 4, 3, 12, 2, 12, 3, 4, 6, 12, 2, 12, 6, 4, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12]
        elseif ST in 8:15
            m = [1, 12, 8, 6, 6]
            res[:classes] = map((x->begin
                            m[x[1]]
                        end), p[res[:indexclasses]])
            m = [1, 24, 12, 8, 6, 24, 4, 24, 3, 8, 12, 24, 2, 24, 12, 8, 3, 24, 4, 24, 6, 8, 12, 24, 2, 24, 12, 8, 6, 24, 4, 24, 6, 8, 12, 24, 3, 24, 12, 24, 6, 24, 12, 24, 3, 24, 12, 24, 6, 24, 12, 24, 3, 24, 12, 24, 6, 24, 12, 24, 4, 24, 12, 8, 12, 24, 4, 24, 12, 8, 12, 24, 4, 24, 12, 8, 12, 24, 4, 24, 12, 8, 12, 24, 2, 24, 12, 8, 6, 24, 4, 24, 6, 8, 12, 24]
        elseif ST in 16:22
            m = [1, 30, 20, 12, 12]
            res[:classes] = map((x->begin
                            m[x[1]]
                        end), p[res[:indexclasses]])
            m = [1, 60, 30, 20, 15, 12, 10, 60, 15, 20, 6, 60, 5, 60, 30, 4, 15, 60, 10, 60, 3, 20, 30, 60, 5, 12, 30, 20, 15, 60, 2, 60, 15, 20, 30, 12, 5, 60, 30, 20, 3, 60, 10, 60, 15, 4, 30, 60, 5, 60, 6, 20, 15, 60, 10, 12, 15, 20, 30, 60, 2, 60, 30, 20, 30, 12, 10, 60, 30, 20, 6, 60, 10, 60, 30, 4, 30, 60, 10, 60, 6, 20, 30, 60, 10, 12, 30, 20, 30, 60, 3, 60, 30, 60, 15, 12, 30, 60, 15, 60, 6, 60, 15, 60, 30, 12, 15, 60, 30, 60, 3, 60, 30, 60, 15, 12, 30, 60, 15, 60, 6, 60, 15, 60, 30, 12, 15, 60, 30, 60, 3, 60, 30, 60, 15, 12, 30, 60, 15, 60, 6, 60, 15, 60, 30, 12, 15, 60, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60]
        end
        res[:orders] = m[res[:indexclasses]]
        res[:classparams] = res[:classnames]
        return res
    end)
chevieset(:G4_22, :ParabolicRepresentatives, function (ST, s)
        local l
        if s == 0
            return [[]]
        elseif s == 1
            return Filtered(((chevieget(:G4_22, :ClassInfo))(ST))[:classtext], (x->begin
                            length(x) == 1
                        end))
        else
            return [1:length((chevieget(:G4_22, :GeneratingRoots))(ST))]
        end
    end)
chevieset(:G4_22, :CharInfo, function (ST,)
        local res
        res = Dict{Symbol, Any}()
        if ST == 4
            res[:charparams] = [[1, 0], [1, 4], [1, 8], [2, 5], [2, 3], [2, 1], [3, 2]]
            res[:extRefl] = [1, 6, 2]
            res[:indexchars] = Concatenation(1:3, 34:37)
            res[:a] = [0, 4, 4, 4, 1, 1, 2]
            res[:A] = [0, 8, 8, 8, 5, 5, 6]
        elseif ST == 5
            res[:charparams] = [[1, 0], [1, 4, 1], [1, 8, 1], [1, 4, 2], [1, 8, 2], [1, 12, 1], [1, 8, 3], [1, 12, 2], [1, 16], [2, 9], [2, 7, 1], [2, 5, 1], [2, 7, 2], [2, 5, 2], [2, 3, 1], [2, 5, 3], [2, 3, 2], [2, 1], [3, 4], [3, 2], [3, 6]]
            res[:extRefl] = [1, 18, 5]
            res[:indexchars] = Concatenation(10:27, [37, 39, 41])
            res[:opdam] = #= none:34 =# @perm_str("(19,20,21)")
        elseif ST == 6
            res[:charparams] = [[1, 0], [1, 4], [1, 8], [1, 6], [1, 10], [1, 14], [2, 5, 2], [2, 3, 2], [2, 3, 1], [2, 7], [2, 1], [2, 5, 1], [3, 2], [3, 4]]
            res[:extRefl] = [1, 11, 5]
            res[:indexchars] = Concatenation(1:3, 10:12, [19, 35, 33, 28, 24, 26, 37, 38])
            res[:opdam] = #= none:46 =# @perm_str("(7,10)")
            res[:a] = [0, 1, 1, 1, 10, 10, 5, 1, 1, 5, 1, 1, 1, 4]
            res[:A] = [0, 11, 11, 11, 14, 14, 13, 11, 11, 13, 11, 11, 11, 12]
        elseif ST == 7
            res[:charparams] = [[1, 0], [1, 4, 1], [1, 8, 1], [1, 4, 2], [1, 8, 2], [1, 12, 1], [1, 8, 3], [1, 12, 2], [1, 16], [1, 6], [1, 10, 1], [1, 14, 1], [1, 10, 2], [1, 14, 2], [1, 18, 1], [1, 14, 3], [1, 18, 2], [1, 22], [2, 9, 1], [2, 7, 1], [2, 11, 1], [2, 7, 2], [2, 11, 2], [2, 9, 2], [2, 11, 3], [2, 9, 3], [2, 7, 3], [2, 15], [2, 13, 1], [2, 5, 1], [2, 13, 2], [2, 5, 2], [2, 3, 1], [2, 5, 3], [2, 3, 2], [2, 1], [3, 10], [3, 4], [3, 2], [3, 8], [3, 6], [3, 12]]
            res[:extRefl] = [1, 36, 14]
            res[:indexchars] = 1:42
            res[:opdam] = #= none:63 =# @perm_str("(19,28)(23,32)(24,33)(26,35)(27,36)(37,41,39)")
        elseif ST == 8
            res[:charparams] = [[1, 0], [1, 6], [1, 12], [1, 18], [2, 1], [2, 4], [2, 7, 1], [2, 7, 2], [2, 10], [2, 13], [3, 8], [3, 6], [3, 4], [3, 2], [4, 5], [4, 3]]
            res[:extRefl] = [1, 5, 2]
            res[:indexchars] = Concatenation(21:30, 81:84, [89, 86])
            res[:opdam] = #= none:74 =# @perm_str("(15,16)")
            res[:a] = [0, 6, 6, 6, 1, 1, 1, 6, 6, 6, 6, 2, 2, 2, 3, 3]
            res[:A] = [0, 18, 18, 18, 11, 11, 11, 18, 18, 18, 18, 14, 14, 14, 15, 15]
        elseif ST == 9
            res[:charparams] = [[1, 0], [1, 6], [1, 12, 1], [1, 18, 1], [1, 12, 2], [1, 18, 2], [1, 24], [1, 30], [2, 5], [2, 4], [2, 7, 1], [2, 7, 2], [2, 10], [2, 13], [2, 1], [2, 14], [2, 17], [2, 11, 1], [2, 11, 2], [2, 8], [3, 8, 1], [3, 6, 1], [3, 4], [3, 2], [3, 12], [3, 10], [3, 8, 2], [3, 6, 2], [4, 9], [4, 7], [4, 3], [4, 5]]
            res[:extRefl] = [1, 15, 6]
            res[:indexchars] = Concatenation(1:4, 21:26, 57:59, [54, 55, 35, 36, 39, 40, 44], 77:85, [88, 93, 95])
            res[:opdam] = #= none:90 =# @perm_str("(12,19)(13,16)(14,17)(29,30,32,31)")
        elseif ST == 10
            res[:charparams] = [[1, 0], [1, 6], [1, 12], [1, 18], [1, 8], [1, 14], [1, 20], [1, 26], [1, 16], [1, 22], [1, 28], [1, 34], [2, 9], [2, 12], [2, 15, 1], [2, 15, 2], [2, 18], [2, 21], [2, 5], [2, 8], [2, 11, 1], [2, 11, 2], [2, 14], [2, 17], [2, 1], [2, 4], [2, 7, 1], [2, 7, 2], [2, 10], [2, 13], [3, 8, 2], [3, 14], [3, 8, 1], [3, 2], [3, 16], [3, 10, 2], [3, 4], [3, 10, 1], [3, 12, 2], [3, 6, 2], [3, 12, 1], [3, 6, 1], [4, 9], [4, 11], [4, 7], [4, 3], [4, 5], [4, 13]]
            res[:extRefl] = [1, 25, 6]
            res[:indexchars] = Concatenation(13:42, 65:72, 77:79, 84:90)
            res[:opdam] = #= none:103 =# @perm_str("(31,39,35)(32,36,40)(33,37,41)(34,38,42)(43,46)")
        elseif ST == 11
            res[:charparams] = [[1, 0], [1, 6], [1, 12, 1], [1, 18, 1], [1, 8], [1, 14], [1, 20, 1], [1, 26, 1], [1, 16], [1, 22], [1, 28, 1], [1, 34, 1], [1, 12, 2], [1, 18, 2], [1, 24], [1, 30], [1, 20, 2], [1, 26, 2], [1, 32], [1, 38], [1, 28, 2], [1, 34, 2], [1, 40], [1, 46], [2, 9], [2, 12], [2, 27, 1], [2, 27, 2], [2, 18], [2, 33], [2, 5], [2, 20], [2, 11, 1], [2, 11, 2], [2, 14], [2, 29], [2, 1], [2, 4], [2, 7, 1], [2, 7, 2], [2, 22], [2, 25], [2, 21, 1], [2, 24], [2, 15, 1], [2, 15, 2], [2, 30], [2, 21, 2], [2, 17, 1], [2, 8], [2, 23, 1], [2, 23, 2], [2, 26], [2, 17, 2], [2, 13, 1], [2, 16], [2, 19, 1], [2, 19, 2], [2, 10], [2, 13, 2], [3, 8, 1], [3, 14, 1], [3, 20, 1], [3, 2], [3, 20, 2], [3, 26], [3, 8, 2], [3, 14, 2], [3, 16, 1], [3, 22, 1], [3, 4], [3, 10, 1], [3, 28], [3, 10, 2], [3, 16, 2], [3, 22, 2], [3, 24, 1], [3, 6, 2], [3, 12, 1], [3, 18, 1], [3, 12, 2], [3, 18, 2], [3, 24, 2], [3, 6, 1], [4, 21], [4, 23], [4, 19], [4, 3], [4, 5], [4, 25], [4, 9], [4, 11], [4, 7], [4, 15], [4, 17], [4, 13]]
            res[:extRefl] = [1, 37, 18]
            res[:indexchars] = 1:96
            res[:opdam] = #= none:121 =# @perm_str("(28,46)(29,47)(30,48)(31,49)(32,50)(33,51)(37,55)(38,56)(39,57)(62,78,70)(63,79,71)(64,80,72)(65,73,81)(85,94,91,88)")
        elseif ST == 12
            res[:charparams] = [[1, 0], [1, 12], [2, 1], [2, 4], [2, 5], [3, 2], [3, 6], [4, 3]]
            res[:extRefl] = [1, 3, 2]
            res[:indexchars] = [1, 13, 25, 26, 30, 61, 65, 85]
            res[:opdam] = #= none:130 =# @perm_str("(3,5)")
        elseif ST == 13
            res[:charparams] = [[1, 0], [1, 6], [1, 12], [1, 18], [2, 7, 1], [2, 4], [2, 1], [2, 5], [2, 10], [2, 7, 2], [3, 4], [3, 2], [3, 8], [3, 6], [4, 3], [4, 5]]
            res[:extRefl] = [1, 7, 4]
            res[:indexchars] = [1, 2, 13, 14, 37, 26, 27, 28, 29, 30, 61, 62, 65, 66, 85, 86]
            res[:opdam] = #= none:140 =# @perm_str("( 5, 8,10, 7)(15,16)")
        elseif ST == 14
            res[:charparams] = [[1, 0], [1, 8], [1, 16], [1, 12], [1, 20], [1, 28], [2, 15], [2, 12], [2, 9], [2, 11], [2, 8], [2, 5], [2, 7], [2, 4], [2, 1], [3, 2], [3, 8], [3, 4], [3, 10], [3, 6, 1], [3, 6, 2], [4, 3], [4, 5], [4, 7]]
            res[:extRefl] = [1, 15, 5]
            res[:indexchars] = Concatenation([1, 5, 9, 13, 17, 21, 25, 26], 30:33, 37:39, [62, 65], [69, 73, 77, 81], 85:87)
            res[:opdam] = #= none:154 =# @perm_str("( 7, 9)(17,19,21)")
            res[:a] = [0, 1, 1, 1, 20, 20, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 6, 1, 6, 1, 6, 1, 5, 5]
            res[:A] = [0, 23, 23, 23, 28, 28, 27, 27, 27, 23, 23, 23, 23, 23, 23, 23, 26, 23, 26, 23, 26, 23, 25, 25]
        elseif ST == 15
            res[:charparams] = [[1, 0], [1, 6], [1, 8], [1, 14], [1, 16], [1, 22], [1, 12], [1, 18], [1, 20], [1, 26], [1, 28], [1, 34], [2, 9], [2, 12], [2, 15, 1], [2, 15, 2], [2, 18], [2, 21], [2, 5], [2, 8], [2, 11, 2], [2, 11, 1], [2, 14], [2, 17], [2, 1], [2, 4], [2, 7, 2], [2, 7, 1], [2, 10], [2, 13], [3, 8, 1], [3, 2], [3, 8, 2], [3, 14], [3, 4], [3, 10, 1], [3, 16], [3, 10, 2], [3, 12, 1], [3, 6, 1], [3, 12, 2], [3, 6, 2], [4, 9], [4, 11], [4, 7], [4, 3], [4, 5], [4, 13]]
            res[:extRefl] = [1, 25, 10]
            res[:indexchars] = Concatenation(3:6, [9, 10], 15:18, 23:42, [61], 64:66, 71:74, 79:82, 85:90)
            res[:opdam] = #= none:173 =# @perm_str("(13,15,18,16)(19,21,24,22)(25,27,30,28)(31,35,39)(32,40,36)(33,41,37)(43,46)")
        elseif ST == 16
            res[:indexchars] = Concatenation(1:5, 81:100, 151:155, 166:170, [211, 217, 228, 229], 240:245)
            res[:extRefl] = [1, 6, 2]
            res[:charparams] = [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [2, 1], [2, 7], [2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1], [2, 31], [2, 37], [3, 2], [3, 6], [3, 10, 2], [3, 10, 1], [3, 14, 1], [3, 18, 1], [3, 14, 2], [3, 18, 2], [3, 22], [3, 26], [4, 15], [4, 17], [4, 9], [4, 11], [4, 3], [4, 20], [4, 12], [4, 14], [4, 6], [4, 8], [5, 12], [5, 4], [5, 16], [5, 8], [5, 10], [6, 5], [6, 7], [6, 9], [6, 11], [6, 13]]
            res[:opdam] = #= none:187 =# @perm_str("(27,32)(28,33)(29,34)(30,35)(36,40,39,38,37)")
        elseif ST == 17
            res[:indexchars] = Concatenation(11:20, [71, 32, 33, 84, 35, 86, 37, 38, 79, 40, 41, 62, 67, 68, 49, 70], [63, 54, 65, 56], 91:110, 151:155, 171:175, 181:185, 206:211, [214, 219, 220, 223, 226, 229, 232, 235, 238], 241:250)
            res[:extRefl] = [1, 21, 7]
            res[:charparams] = [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 30], [1, 42], [1, 54], [1, 66], [1, 78], [2, 11], [2, 17], [2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1], [2, 31], [2, 37], [2, 1], [2, 7], [2, 35, 2], [2, 35, 1], [2, 41], [2, 47], [2, 23, 1], [2, 29, 1], [2, 23, 2], [2, 29, 2], [3, 2], [3, 6], [3, 10, 2], [3, 10, 1], [3, 14, 1], [3, 18, 1], [3, 14, 2], [3, 18, 2], [3, 22], [3, 26], [3, 12], [3, 16], [3, 20, 2], [3, 20, 1], [3, 24, 1], [3, 28, 1], [3, 24, 2], [3, 28, 2], [3, 32], [3, 36], [4, 15], [4, 27], [4, 19], [4, 11], [4, 3], [4, 30], [4, 22], [4, 14], [4, 6], [4, 18], [4, 25], [4, 17], [4, 9], [4, 21], [4, 13], [4, 20], [4, 12], [4, 24], [4, 16], [4, 8], [5, 12], [5, 22], [5, 4], [5, 14], [5, 16], [5, 26], [5, 8], [5, 18], [5, 20], [5, 10], [6, 15], [6, 17], [6, 19], [6, 11], [6, 13], [6, 5], [6, 7], [6, 9], [6, 21], [6, 23]]
            res[:opdam] = #= none:207 =# @perm_str("(15,29)(16,30)(17,23)(18,24)(19,25)(20,26)(51,61)(52,57,62,67)(53,58,63,68)(54,59,64,69)(55,60,65,70)(56,66)(71,73,75,77,79)(72,76,80,74,78)(81,86)")
        elseif ST == 18
            res[:indexchars] = Concatenation(1:15, 61:100, 111:120, 131:134, 135:140, 181:211, 215:219, 223:225, [229, 230, 231, 235], 239:255)
            res[:extRefl] = [1, 36, 7]
            res[:charparams] = [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 20], [1, 32], [1, 44], [1, 56], [1, 68], [1, 40], [1, 52], [1, 64], [1, 76], [1, 88], [2, 21], [2, 27], [2, 33, 1], [2, 39, 1], [2, 33, 2], [2, 39, 2], [2, 45, 2], [2, 45, 1], [2, 51], [2, 57], [2, 11], [2, 17], [2, 23, 1], [2, 29, 1], [2, 23, 2], [2, 29, 2], [2, 35, 2], [2, 35, 1], [2, 41], [2, 47], [2, 1], [2, 7], [2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1], [2, 31], [2, 37], [3, 2], [3, 26, 1], [3, 20, 2], [3, 20, 1], [3, 14, 1], [3, 38, 1], [3, 14, 2], [3, 38, 2], [3, 32], [3, 26, 2], [3, 22, 1], [3, 16], [3, 10, 2], [3, 10, 1], [3, 34, 1], [3, 28, 1], [3, 34, 2], [3, 28, 2], [3, 22, 2], [3, 46], [3, 12], [3, 6], [3, 30, 2], [3, 30, 1], [3, 24, 1], [3, 18, 1], [3, 24, 2], [3, 18, 2], [3, 42], [3, 36], [4, 15], [4, 27], [4, 9], [4, 21], [4, 3], [4, 35], [4, 17], [4, 29], [4, 11], [4, 23], [4, 25], [4, 37], [4, 19], [4, 31], [4, 13], [4, 30], [4, 12], [4, 24], [4, 6], [4, 18], [4, 20], [4, 32], [4, 14], [4, 26], [4, 8], [4, 40], [4, 22], [4, 34], [4, 16], [4, 28], [5, 12], [5, 32], [5, 22], [5, 24], [5, 14], [5, 4], [5, 36], [5, 26], [5, 16], [5, 18], [5, 8], [5, 28], [5, 30], [5, 20], [5, 10], [6, 25], [6, 7], [6, 19], [6, 31], [6, 13], [6, 5], [6, 17], [6, 29], [6, 11], [6, 23], [6, 15], [6, 27], [6, 9], [6, 21], [6, 33]]
            res[:opdam] = #= none:230 =# @perm_str("( 46, 56, 66)( 47, 57, 67)( 48, 58, 68)( 49, 59, 69)( 50, 60, 70)( 51, 61, 71)( 52, 72, 62)( 53, 73, 63)( 54, 74, 64)( 55, 75, 65)( 77, 92)( 78, 93)( 79, 94)( 80, 95)( 81, 96)( 86,101)(106,115,109,118,112)(107,113,119,110,116)(108,114,120,111,117)(121,131,126)")
        elseif ST == 19
            res[:indexchars] = 1:270
            res[:extRefl] = [1, 81, 22]
            res[:charparams] = [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 20], [1, 32], [1, 44], [1, 56], [1, 68], [1, 40], [1, 52], [1, 64], [1, 76], [1, 88], [1, 30], [1, 42], [1, 54], [1, 66], [1, 78], [1, 50], [1, 62], [1, 74], [1, 86], [1, 98], [1, 70], [1, 82], [1, 94], [1, 106], [1, 118], [2, 51, 1], [2, 57, 1], [2, 33, 1], [2, 39, 1], [2, 33, 2], [2, 39, 2], [2, 45, 2], [2, 45, 1], [2, 51, 2], [2, 57, 2], [2, 41, 1], [2, 47, 1], [2, 53, 1], [2, 59, 1], [2, 53, 2], [2, 59, 2], [2, 35, 2], [2, 35, 1], [2, 41, 2], [2, 47, 2], [2, 31, 1], [2, 37, 1], [2, 43, 1], [2, 49, 1], [2, 43, 2], [2, 49, 2], [2, 55, 2], [2, 55, 1], [2, 31, 2], [2, 37, 2], [2, 21], [2, 27], [2, 63, 1], [2, 69, 1], [2, 63, 2], [2, 69, 2], [2, 75, 1], [2, 75, 2], [2, 81], [2, 87], [2, 11], [2, 17], [2, 23, 1], [2, 29, 1], [2, 23, 2], [2, 29, 2], [2, 65, 2], [2, 65, 1], [2, 71], [2, 77], [2, 1], [2, 7], [2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1], [2, 61], [2, 67], [3, 2], [3, 26, 1], [3, 50, 2], [3, 50, 1], [3, 14, 1], [3, 38, 1], [3, 14, 2], [3, 38, 2], [3, 62], [3, 26, 2], [3, 32, 1], [3, 56, 1], [3, 20, 2], [3, 20, 1], [3, 44, 1], [3, 68, 1], [3, 44, 2], [3, 68, 2], [3, 32, 2], [3, 56, 2], [3, 22, 1], [3, 46, 1], [3, 10, 2], [3, 10, 1], [3, 34, 1], [3, 58, 1], [3, 34, 2], [3, 58, 2], [3, 22, 2], [3, 46, 2], [3, 52, 1], [3, 16], [3, 40, 2], [3, 40, 1], [3, 64, 1], [3, 28, 1], [3, 64, 2], [3, 28, 2], [3, 52, 2], [3, 76], [3, 42, 1], [3, 6], [3, 30, 2], [3, 30, 1], [3, 54, 1], [3, 18, 1], [3, 54, 2], [3, 18, 2], [3, 42, 2], [3, 66], [3, 12], [3, 36, 1], [3, 60, 2], [3, 60, 1], [3, 24, 1], [3, 48, 1], [3, 24, 2], [3, 48, 2], [3, 72], [3, 36, 2], [4, 15], [4, 27], [4, 39], [4, 51], [4, 3], [4, 35], [4, 47], [4, 59], [4, 11], [4, 23], [4, 55], [4, 67], [4, 19], [4, 31], [4, 43], [4, 30], [4, 42], [4, 54], [4, 6], [4, 18], [4, 50], [4, 62], [4, 14], [4, 26], [4, 38], [4, 70], [4, 22], [4, 34], [4, 46], [4, 58], [4, 45], [4, 57], [4, 9], [4, 21], [4, 33], [4, 65], [4, 17], [4, 29], [4, 41], [4, 53], [4, 25], [4, 37], [4, 49], [4, 61], [4, 13], [4, 60], [4, 12], [4, 24], [4, 36], [4, 48], [4, 20], [4, 32], [4, 44], [4, 56], [4, 8], [4, 40], [4, 52], [4, 64], [4, 16], [4, 28], [5, 12], [5, 32], [5, 52], [5, 42], [5, 62], [5, 22], [5, 24], [5, 44], [5, 4], [5, 54], [5, 14], [5, 34], [5, 36], [5, 56], [5, 16], [5, 66], [5, 26], [5, 46], [5, 48], [5, 8], [5, 28], [5, 18], [5, 38], [5, 58], [5, 60], [5, 20], [5, 40], [5, 30], [5, 50], [5, 10], [6, 25], [6, 7], [6, 49], [6, 61], [6, 43], [6, 35], [6, 17], [6, 59], [6, 11], [6, 53], [6, 45], [6, 27], [6, 9], [6, 21], [6, 63], [6, 55], [6, 37], [6, 19], [6, 31], [6, 13], [6, 5], [6, 47], [6, 29], [6, 41], [6, 23], [6, 15], [6, 57], [6, 39], [6, 51], [6, 33]]
            res[:opdam] = #= none:266 =# @perm_str("( 35, 65)( 36, 66)( 37, 67)( 38, 68)( 39, 69)( 40, 70)( 41, 71)( 42, 72)( 43, 73)( 44, 74)( 51, 81)( 52, 82)( 53, 83)( 54, 84)( 91,131,111)( 92,132,112)( 93,133,113)( 94,134,114)( 95,135,115)( 96,136,116)(107,127,147)(108,128,148)(109,129,149)(110,130,150)(152,197,182,167)(153,198,183,168)(154,199,184,169)(155,200,185,170)(156,171,186,201)(161,176,191,206)(212,236,230,224,218)(213,237,231,225,219)(214,220,226,232,238)(241,266,261,256,251,246)")
        elseif ST == 20
            res[:indexchars] = Concatenation([1, 6, 11, 31, 32, 41, 42, 51, 52], [103, 104, 111, 112, 131, 132], [152, 156, 161, 167, 172, 176], 238:240, [241, 251, 246])
            res[:extRefl] = [1, 8, 2]
            res[:charparams] = [[1, 0], [1, 20], [1, 40], [2, 21], [2, 27], [2, 11], [2, 17], [2, 1], [2, 7], [3, 2], [3, 14], [3, 10, 1], [3, 10, 2], [3, 12], [3, 6], [4, 3], [4, 11], [4, 13], [4, 6], [4, 8], [4, 16], [5, 12], [5, 8], [5, 4], [6, 7], [6, 9], [6, 5]]
            res[:opdam] = #= none:279 =# @perm_str("(10,14,12)(11,15,13)(17,20)(18,21)(25,27,26)")
        elseif ST == 21
            res[:indexchars] = Concatenation(1:6 - 1:26, [65, 32, 35, 62, 41, 73, 43, 71, 84, 52, 82, 54, 91, 92, 101], [102, 111, 112, 121, 122, 131, 132, 141, 142, 151, 160, 161, 170, 171, 180, 181, 190, 191, 200], [201], 210:216, [241, 242, 246, 261, 251, 266])
            res[:extRefl] = [1, 18, 5]
            res[:charparams] = [[1, 0], [1, 20], [1, 40], [1, 30], [1, 50], [1, 70], [2, 39], [2, 33], [2, 21], [2, 27], [2, 29], [2, 23], [2, 17], [2, 11], [2, 19], [2, 13], [2, 7], [2, 1], [3, 2], [3, 14], [3, 20, 2], [3, 20, 1], [3, 10, 2], [3, 10, 1], [3, 28], [3, 16], [3, 18], [3, 6], [3, 12], [3, 24], [4, 3], [4, 11], [4, 19], [4, 6], [4, 14], [4, 22], [4, 9], [4, 17], [4, 13], [4, 12], [4, 8], [4, 16], [5, 12], [5, 8], [5, 4], [5, 18], [5, 14], [5, 10], [6, 13], [6, 7], [6, 11], [6, 5], [6, 9], [6, 15]]
            res[:opdam] = #= none:296 =# @perm_str("(7,9)( 8,10)(21,25,29)(22,26,30)(32,35,38,41)(33,36,39,42)(49,51,53,50,52,54)")
        elseif ST == 22
            res[:indexchars] = [1, 16, 65, 32, 35, 62, 91, 92, 101, 102, 151, 166, 181, 196, 211, 240, 241, 246]
            res[:extRefl] = [1, 5, 2]
            res[:charparams] = [[1, 0], [1, 30], [2, 11], [2, 13], [2, 1], [2, 7], [3, 2], [3, 6], [3, 12], [3, 16], [4, 3], [4, 6], [4, 9], [4, 8], [5, 4], [5, 10], [6, 7], [6, 5]]
            res[:opdam] = #= none:306 =# @perm_str("( 3, 5)( 4, 6)(11,13)(12,14)(17,18)")
        end
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G4_22, :sparseFakeDegrees, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [[1, 0], [1, 4], [1, 8], [1, 5, 1, 7], [1, 3, 1, 5], [1, 1, 1, 3], [1, 2, 1, 4, 1, 6]], Symbol("5") => [[1, 0], [1, 4], [1, 8], [1, 4], [1, 8], [1, 12], [1, 8], [1, 12], [1, 16], [1, 9, 1, 15], [1, 7, 1, 13], [1, 5, 1, 11], [1, 7, 1, 13], [1, 5, 1, 11], [1, 3, 1, 9], [1, 5, 1, 11], [1, 3, 1, 9], [1, 1, 1, 7], [1, 4, 2, 10], [1, 2, 1, 8, 1, 14], [2, 6, 1, 12]], Symbol("6") => [[1, 0], [1, 4], [1, 8], [1, 6], [1, 10], [1, 14], [1, 5, 1, 13], [1, 3, 1, 11], [1, 3, 1, 7], [1, 7, 1, 11], [1, 1, 1, 9], [1, 5, 1, 9], [1, 2, 1, 6, 1, 10], [1, 4, 1, 8, 1, 12]], Symbol("7") => [[1, 0], [1, 4], [1, 8], [1, 4], [1, 8], [1, 12], [1, 8], [1, 12], [1, 16], [1, 6], [1, 10], [1, 14], [1, 10], [1, 14], [1, 18], [1, 14], [1, 18], [1, 22], [1, 9, 1, 21], [1, 7, 1, 19], [2, 11], [1, 7, 1, 19], [2, 11], [2, 9], [2, 11], [2, 9], [2, 7], [2, 15], [2, 13], [1, 5, 1, 17], [2, 13], [1, 5, 1, 17], [1, 3, 1, 15], [1, 5, 1, 17], [1, 3, 1, 15], [1, 1, 1, 13], [3, 10], [1, 4, 2, 16], [1, 2, 2, 14], [2, 8, 1, 20], [2, 6, 1, 18], [3, 12]], Symbol("8") => [[1, 0], [1, 6], [1, 12], [1, 18], [1, 1, 1, 5], [1, 4, 1, 8], [1, 7, 1, 11], [1, 7, 1, 11], [1, 10, 1, 14], [1, 13, 1, 17], [1, 8, 1, 12, 1, 16], [1, 6, 1, 10, 1, 14], [1, 4, 1, 8, 1, 12], [1, 2, 1, 6, 1, 10], [1, 5, 2, 9, 1, 13], [1, 3, 1, 7, 1, 11, 1, 15]], Symbol("9") => [[1, 0], [1, 6], [1, 12], [1, 18], [1, 12], [1, 18], [1, 24], [1, 30], [1, 5, 1, 13], [1, 4, 1, 20], [1, 7, 1, 23], [1, 7, 1, 23], [1, 10, 1, 26], [1, 13, 1, 29], [1, 1, 1, 17], [1, 14, 1, 22], [1, 17, 1, 25], [1, 11, 1, 19], [1, 11, 1, 19], [1, 8, 1, 16], [1, 8, 1, 16, 1, 24], [1, 6, 1, 14, 1, 22], [1, 4, 1, 12, 1, 20], [1, 2, 1, 10, 1, 18], [1, 12, 1, 20, 1, 28], [1, 10, 1, 18, 1, 26], [1, 8, 1, 16, 1, 24], [1, 6, 1, 14, 1, 22], [2, 9, 1, 17, 1, 25], [1, 7, 2, 15, 1, 23], [1, 3, 1, 11, 1, 19, 1, 27], [1, 5, 1, 13, 2, 21]], Symbol("10") => [[1, 0], [1, 6], [1, 12], [1, 18], [1, 8], [1, 14], [1, 20], [1, 26], [1, 16], [1, 22], [1, 28], [1, 34], [1, 9, 1, 21], [1, 12, 1, 24], [1, 15, 1, 27], [1, 15, 1, 27], [1, 18, 1, 30], [1, 21, 1, 33], [1, 5, 1, 17], [1, 8, 1, 20], [1, 11, 1, 23], [1, 11, 1, 23], [1, 14, 1, 26], [1, 17, 1, 29], [1, 1, 1, 13], [1, 4, 1, 16], [1, 7, 1, 19], [1, 7, 1, 19], [1, 10, 1, 22], [1, 13, 1, 25], [1, 8, 1, 20, 1, 32], [2, 14, 1, 26], [1, 8, 2, 20], [1, 2, 1, 14, 1, 26], [2, 16, 1, 28], [1, 10, 2, 22], [1, 4, 1, 16, 1, 28], [2, 10, 1, 22], [1, 12, 2, 24], [1, 6, 1, 18, 1, 30], [2, 12, 1, 24], [1, 6, 2, 18], [2, 9, 2, 21], [2, 11, 2, 23], [1, 7, 2, 19, 1, 31], [1, 3, 2, 15, 1, 27], [1, 5, 2, 17, 1, 29], [2, 13, 2, 25]], Symbol("11") => [[1, 0], [1, 6], [1, 12], [1, 18], [1, 8], [1, 14], [1, 20], [1, 26], [1, 16], [1, 22], [1, 28], [1, 34], [1, 12], [1, 18], [1, 24], [1, 30], [1, 20], [1, 26], [1, 32], [1, 38], [1, 28], [1, 34], [1, 40], [1, 46], [1, 9, 1, 33], [1, 12, 1, 36], [2, 27], [2, 27], [1, 18, 1, 42], [2, 33], [1, 5, 1, 29], [2, 20], [1, 11, 1, 35], [1, 11, 1, 35], [1, 14, 1, 38], [2, 29], [1, 1, 1, 25], [1, 4, 1, 28], [1, 7, 1, 31], [1, 7, 1, 31], [2, 22], [2, 25], [2, 21], [2, 24], [1, 15, 1, 39], [1, 15, 1, 39], [2, 30], [1, 21, 1, 45], [2, 17], [1, 8, 1, 32], [2, 23], [2, 23], [2, 26], [1, 17, 1, 41], [2, 13], [2, 16], [2, 19], [2, 19], [1, 10, 1, 34], [1, 13, 1, 37], [1, 8, 2, 32], [2, 14, 1, 38], [3, 20], [1, 2, 2, 26], [2, 20, 1, 44], [3, 26], [1, 8, 2, 32], [2, 14, 1, 38], [2, 16, 1, 40], [3, 22], [1, 4, 2, 28], [2, 10, 1, 34], [3, 28], [1, 10, 2, 34], [2, 16, 1, 40], [3, 22], [3, 24], [1, 6, 2, 30], [2, 12, 1, 36], [3, 18], [1, 12, 2, 36], [2, 18, 1, 42], [3, 24], [1, 6, 2, 30], [4, 21], [4, 23], [3, 19, 1, 43], [1, 3, 3, 27], [1, 5, 3, 29], [4, 25], [2, 9, 2, 33], [2, 11, 2, 35], [1, 7, 3, 31], [3, 15, 1, 39], [3, 17, 1, 41], [2, 13, 2, 37]], Symbol("12") => [[1, 0], [1, 12], [1, 1, 1, 11], [1, 4, 1, 8], [1, 5, 1, 7], [1, 2, 1, 4, 1, 6], [1, 6, 1, 8, 1, 10], [1, 3, 1, 5, 1, 7, 1, 9]], Symbol("13") => [[1, 0], [1, 6], [1, 12], [1, 18], [1, 7, 1, 11], [1, 4, 1, 8], [1, 1, 1, 17], [1, 5, 1, 13], [1, 10, 1, 14], [1, 7, 1, 11], [1, 4, 1, 8, 1, 12], [1, 2, 1, 6, 1, 10], [1, 8, 1, 12, 1, 16], [1, 6, 1, 10, 1, 14], [1, 3, 1, 7, 1, 11, 1, 15], [1, 5, 2, 9, 1, 13]], Symbol("14") => [[1, 0], [1, 8], [1, 16], [1, 12], [1, 20], [1, 28], [1, 15, 1, 21], [1, 12, 1, 24], [1, 9, 1, 27], [1, 11, 1, 17], [1, 8, 1, 20], [1, 5, 1, 23], [1, 7, 1, 13], [1, 4, 1, 16], [1, 1, 1, 19], [1, 2, 1, 14, 1, 20], [1, 8, 1, 14, 1, 26], [1, 4, 1, 10, 1, 22], [1, 10, 1, 16, 1, 22], [1, 6, 1, 12, 1, 18], [1, 6, 1, 18, 1, 24], [1, 3, 1, 9, 1, 15, 1, 21], [1, 5, 1, 11, 1, 17, 1, 23], [1, 7, 1, 13, 1, 19, 1, 25]], Symbol("15") => [[1, 0], [1, 6], [1, 8], [1, 14], [1, 16], [1, 22], [1, 12], [1, 18], [1, 20], [1, 26], [1, 28], [1, 34], [1, 9, 1, 33], [1, 12, 1, 24], [1, 15, 1, 27], [1, 15, 1, 27], [1, 18, 1, 30], [2, 21], [1, 5, 1, 29], [1, 8, 1, 20], [1, 11, 1, 23], [1, 11, 1, 23], [1, 14, 1, 26], [2, 17], [1, 1, 1, 25], [1, 4, 1, 16], [1, 7, 1, 19], [1, 7, 1, 19], [1, 10, 1, 22], [2, 13], [1, 8, 2, 20], [1, 2, 1, 14, 1, 26], [1, 8, 1, 20, 1, 32], [2, 14, 1, 26], [1, 4, 1, 16, 1, 28], [2, 10, 1, 22], [2, 16, 1, 28], [1, 10, 2, 22], [2, 12, 1, 24], [1, 6, 2, 18], [1, 12, 2, 24], [1, 6, 1, 18, 1, 30], [2, 9, 2, 21], [2, 11, 2, 23], [1, 7, 2, 19, 1, 31], [1, 3, 2, 15, 1, 27], [1, 5, 2, 17, 1, 29], [2, 13, 2, 25]], Symbol("16") => [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 1, 1, 11], [1, 7, 1, 17], [1, 13, 1, 23], [1, 19, 1, 29], [1, 13, 1, 23], [1, 19, 1, 29], [1, 25, 1, 35], [1, 25, 1, 35], [1, 31, 1, 41], [1, 37, 1, 47], [1, 2, 1, 12, 1, 22], [1, 6, 1, 16, 1, 26], [1, 10, 1, 20, 1, 30], [1, 10, 1, 20, 1, 30], [1, 14, 1, 24, 1, 34], [1, 18, 1, 28, 1, 38], [1, 14, 1, 24, 1, 34], [1, 18, 1, 28, 1, 38], [1, 22, 1, 32, 1, 42], [1, 26, 1, 36, 1, 46], [1, 15, 1, 25, 1, 35, 1, 45], [1, 17, 2, 27, 1, 37], [1, 9, 1, 19, 1, 29, 1, 39], [1, 11, 2, 21, 1, 31], [1, 3, 1, 13, 1, 23, 1, 33], [1, 20, 2, 30, 1, 40], [1, 12, 1, 22, 1, 32, 1, 42], [1, 14, 2, 24, 1, 34], [1, 6, 1, 16, 1, 26, 1, 36], [1, 8, 2, 18, 1, 28], [1, 12, 2, 22, 2, 32], [1, 4, 1, 14, 1, 24, 1, 34, 1, 44], [2, 16, 2, 26, 1, 36], [1, 8, 1, 18, 2, 28, 1, 38], [1, 10, 2, 20, 1, 30, 1, 40], [1, 5, 2, 15, 2, 25, 1, 35], [1, 7, 2, 17, 2, 27, 1, 37], [1, 9, 2, 19, 2, 29, 1, 39], [1, 11, 2, 21, 2, 31, 1, 41], [1, 13, 2, 23, 2, 33, 1, 43]], Symbol("17") => [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 30], [1, 42], [1, 54], [1, 66], [1, 78], [1, 11, 1, 31], [1, 17, 1, 37], [1, 13, 1, 53], [1, 19, 1, 59], [1, 13, 1, 53], [1, 19, 1, 59], [1, 25, 1, 65], [1, 25, 1, 65], [1, 31, 1, 71], [1, 37, 1, 77], [1, 1, 1, 41], [1, 7, 1, 47], [1, 35, 1, 55], [1, 35, 1, 55], [1, 41, 1, 61], [1, 47, 1, 67], [1, 23, 1, 43], [1, 29, 1, 49], [1, 23, 1, 43], [1, 29, 1, 49], [1, 2, 1, 22, 1, 42], [1, 6, 1, 26, 1, 46], [1, 10, 1, 30, 1, 50], [1, 10, 1, 30, 1, 50], [1, 14, 1, 34, 1, 54], [1, 18, 1, 38, 1, 58], [1, 14, 1, 34, 1, 54], [1, 18, 1, 38, 1, 58], [1, 22, 1, 42, 1, 62], [1, 26, 1, 46, 1, 66], [1, 12, 1, 32, 1, 52], [1, 16, 1, 36, 1, 56], [1, 20, 1, 40, 1, 60], [1, 20, 1, 40, 1, 60], [1, 24, 1, 44, 1, 64], [1, 28, 1, 48, 1, 68], [1, 24, 1, 44, 1, 64], [1, 28, 1, 48, 1, 68], [1, 32, 1, 52, 1, 72], [1, 36, 1, 56, 1, 76], [1, 15, 1, 35, 1, 55, 1, 75], [2, 27, 1, 47, 1, 67], [1, 19, 2, 39, 1, 59], [1, 11, 1, 31, 2, 51], [1, 3, 1, 23, 1, 43, 1, 63], [2, 30, 1, 50, 1, 70], [1, 22, 2, 42, 1, 62], [1, 14, 1, 34, 2, 54], [1, 6, 1, 26, 1, 46, 1, 66], [2, 18, 1, 38, 1, 58], [1, 25, 2, 45, 1, 65], [1, 17, 1, 37, 2, 57], [1, 9, 1, 29, 1, 49, 1, 69], [2, 21, 1, 41, 1, 61], [1, 13, 2, 33, 1, 53], [1, 20, 1, 40, 2, 60], [1, 12, 1, 32, 1, 52, 1, 72], [2, 24, 1, 44, 1, 64], [1, 16, 2, 36, 1, 56], [1, 8, 1, 28, 2, 48], [1, 12, 2, 32, 2, 52], [2, 22, 1, 42, 2, 62], [1, 4, 1, 24, 2, 44, 1, 64], [1, 14, 2, 34, 1, 54, 1, 74], [2, 16, 1, 36, 2, 56], [2, 26, 2, 46, 1, 66], [1, 8, 2, 28, 1, 48, 1, 68], [1, 18, 2, 38, 2, 58], [2, 20, 2, 40, 1, 60], [1, 10, 1, 30, 2, 50, 1, 70], [2, 15, 2, 35, 2, 55], [2, 17, 2, 37, 2, 57], [2, 19, 2, 39, 2, 59], [1, 11, 2, 31, 2, 51, 1, 71], [1, 13, 2, 33, 2, 53, 1, 73], [1, 5, 2, 25, 2, 45, 1, 65], [1, 7, 2, 27, 2, 47, 1, 67], [1, 9, 2, 29, 2, 49, 1, 69], [2, 21, 2, 41, 2, 61], [2, 23, 2, 43, 2, 63]], Symbol("18") => [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 20], [1, 32], [1, 44], [1, 56], [1, 68], [1, 40], [1, 52], [1, 64], [1, 76], [1, 88], [1, 21, 1, 51], [1, 27, 1, 57], [1, 33, 1, 63], [1, 39, 1, 69], [1, 33, 1, 63], [1, 39, 1, 69], [1, 45, 1, 75], [1, 45, 1, 75], [1, 51, 1, 81], [1, 57, 1, 87], [1, 11, 1, 41], [1, 17, 1, 47], [1, 23, 1, 53], [1, 29, 1, 59], [1, 23, 1, 53], [1, 29, 1, 59], [1, 35, 1, 65], [1, 35, 1, 65], [1, 41, 1, 71], [1, 47, 1, 77], [1, 1, 1, 31], [1, 7, 1, 37], [1, 13, 1, 43], [1, 19, 1, 49], [1, 13, 1, 43], [1, 19, 1, 49], [1, 25, 1, 55], [1, 25, 1, 55], [1, 31, 1, 61], [1, 37, 1, 67], [1, 2, 1, 32, 1, 62], [2, 26, 1, 56], [1, 20, 2, 50], [1, 20, 2, 50], [1, 14, 1, 44, 1, 74], [2, 38, 1, 68], [1, 14, 1, 44, 1, 74], [2, 38, 1, 68], [1, 32, 2, 62], [1, 26, 1, 56, 1, 86], [2, 22, 1, 52], [1, 16, 2, 46], [1, 10, 1, 40, 1, 70], [1, 10, 1, 40, 1, 70], [2, 34, 1, 64], [1, 28, 2, 58], [2, 34, 1, 64], [1, 28, 2, 58], [1, 22, 1, 52, 1, 82], [2, 46, 1, 76], [1, 12, 2, 42], [1, 6, 1, 36, 1, 66], [2, 30, 1, 60], [2, 30, 1, 60], [1, 24, 2, 54], [1, 18, 1, 48, 1, 78], [1, 24, 2, 54], [1, 18, 1, 48, 1, 78], [2, 42, 1, 72], [1, 36, 2, 66], [1, 15, 2, 45, 1, 75], [2, 27, 2, 57], [1, 9, 2, 39, 1, 69], [2, 21, 2, 51], [1, 3, 2, 33, 1, 63], [2, 35, 2, 65], [1, 17, 2, 47, 1, 77], [2, 29, 2, 59], [1, 11, 2, 41, 1, 71], [2, 23, 2, 53], [1, 25, 2, 55, 1, 85], [2, 37, 2, 67], [1, 19, 2, 49, 1, 79], [2, 31, 2, 61], [1, 13, 2, 43, 1, 73], [2, 30, 2, 60], [1, 12, 2, 42, 1, 72], [2, 24, 2, 54], [1, 6, 2, 36, 1, 66], [2, 18, 2, 48], [1, 20, 2, 50, 1, 80], [2, 32, 2, 62], [1, 14, 2, 44, 1, 74], [2, 26, 2, 56], [1, 8, 2, 38, 1, 68], [2, 40, 2, 70], [1, 22, 2, 52, 1, 82], [2, 34, 2, 64], [1, 16, 2, 46, 1, 76], [2, 28, 2, 58], [1, 12, 2, 42, 2, 72], [3, 32, 2, 62], [2, 22, 3, 52], [2, 24, 2, 54, 1, 84], [1, 14, 3, 44, 1, 74], [1, 4, 2, 34, 2, 64], [3, 36, 2, 66], [2, 26, 3, 56], [2, 16, 2, 46, 1, 76], [1, 18, 3, 48, 1, 78], [1, 8, 2, 38, 2, 68], [3, 28, 2, 58], [2, 30, 3, 60], [2, 20, 2, 50, 1, 80], [1, 10, 3, 40, 1, 70], [3, 25, 3, 55], [1, 7, 3, 37, 2, 67], [2, 19, 3, 49, 1, 79], [3, 31, 3, 61], [1, 13, 3, 43, 2, 73], [1, 5, 3, 35, 2, 65], [2, 17, 3, 47, 1, 77], [3, 29, 3, 59], [1, 11, 3, 41, 2, 71], [2, 23, 3, 53, 1, 83], [2, 15, 3, 45, 1, 75], [3, 27, 3, 57], [1, 9, 3, 39, 2, 69], [2, 21, 3, 51, 1, 81], [3, 33, 3, 63]], Symbol("19") => [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 20], [1, 32], [1, 44], [1, 56], [1, 68], [1, 40], [1, 52], [1, 64], [1, 76], [1, 88], [1, 30], [1, 42], [1, 54], [1, 66], [1, 78], [1, 50], [1, 62], [1, 74], [1, 86], [1, 98], [1, 70], [1, 82], [1, 94], [1, 106], [1, 118], [2, 51], [2, 57], [1, 33, 1, 93], [1, 39, 1, 99], [1, 33, 1, 93], [1, 39, 1, 99], [1, 45, 1, 105], [1, 45, 1, 105], [1, 51, 1, 111], [1, 57, 1, 117], [2, 41], [2, 47], [2, 53], [2, 59], [2, 53], [2, 59], [1, 35, 1, 95], [1, 35, 1, 95], [1, 41, 1, 101], [1, 47, 1, 107], [2, 31], [2, 37], [2, 43], [2, 49], [2, 43], [2, 49], [2, 55], [2, 55], [1, 31, 1, 91], [1, 37, 1, 97], [1, 21, 1, 81], [1, 27, 1, 87], [2, 63], [2, 69], [2, 63], [2, 69], [2, 75], [2, 75], [2, 81], [2, 87], [1, 11, 1, 71], [1, 17, 1, 77], [1, 23, 1, 83], [1, 29, 1, 89], [1, 23, 1, 83], [1, 29, 1, 89], [2, 65], [2, 65], [2, 71], [2, 77], [1, 1, 1, 61], [1, 7, 1, 67], [1, 13, 1, 73], [1, 19, 1, 79], [1, 13, 1, 73], [1, 19, 1, 79], [1, 25, 1, 85], [1, 25, 1, 85], [2, 61], [2, 67], [1, 2, 2, 62], [2, 26, 1, 86], [3, 50], [3, 50], [1, 14, 2, 74], [2, 38, 1, 98], [1, 14, 2, 74], [2, 38, 1, 98], [3, 62], [1, 26, 2, 86], [2, 32, 1, 92], [3, 56], [1, 20, 2, 80], [1, 20, 2, 80], [2, 44, 1, 104], [3, 68], [2, 44, 1, 104], [3, 68], [1, 32, 2, 92], [2, 56, 1, 116], [2, 22, 1, 82], [3, 46], [1, 10, 2, 70], [1, 10, 2, 70], [2, 34, 1, 94], [3, 58], [2, 34, 1, 94], [3, 58], [1, 22, 2, 82], [2, 46, 1, 106], [3, 52], [1, 16, 2, 76], [2, 40, 1, 100], [2, 40, 1, 100], [3, 64], [1, 28, 2, 88], [3, 64], [1, 28, 2, 88], [2, 52, 1, 112], [3, 76], [3, 42], [1, 6, 2, 66], [2, 30, 1, 90], [2, 30, 1, 90], [3, 54], [1, 18, 2, 78], [3, 54], [1, 18, 2, 78], [2, 42, 1, 102], [3, 66], [1, 12, 2, 72], [2, 36, 1, 96], [3, 60], [3, 60], [1, 24, 2, 84], [2, 48, 1, 108], [1, 24, 2, 84], [2, 48, 1, 108], [3, 72], [1, 36, 2, 96], [1, 15, 3, 75], [2, 27, 2, 87], [3, 39, 1, 99], [4, 51], [1, 3, 3, 63], [2, 35, 2, 95], [3, 47, 1, 107], [4, 59], [1, 11, 3, 71], [2, 23, 2, 83], [3, 55, 1, 115], [4, 67], [1, 19, 3, 79], [2, 31, 2, 91], [3, 43, 1, 103], [2, 30, 2, 90], [3, 42, 1, 102], [4, 54], [1, 6, 3, 66], [2, 18, 2, 78], [3, 50, 1, 110], [4, 62], [1, 14, 3, 74], [2, 26, 2, 86], [3, 38, 1, 98], [4, 70], [1, 22, 3, 82], [2, 34, 2, 94], [3, 46, 1, 106], [4, 58], [3, 45, 1, 105], [4, 57], [1, 9, 3, 69], [2, 21, 2, 81], [3, 33, 1, 93], [4, 65], [1, 17, 3, 77], [2, 29, 2, 89], [3, 41, 1, 101], [4, 53], [1, 25, 3, 85], [2, 37, 2, 97], [3, 49, 1, 109], [4, 61], [1, 13, 3, 73], [4, 60], [1, 12, 3, 72], [2, 24, 2, 84], [3, 36, 1, 96], [4, 48], [1, 20, 3, 80], [2, 32, 2, 92], [3, 44, 1, 104], [4, 56], [1, 8, 3, 68], [2, 40, 2, 100], [3, 52, 1, 112], [4, 64], [1, 16, 3, 76], [2, 28, 2, 88], [1, 12, 4, 72], [3, 32, 2, 92], [5, 52], [3, 42, 2, 102], [5, 62], [2, 22, 3, 82], [2, 24, 3, 84], [4, 44, 1, 104], [1, 4, 4, 64], [4, 54, 1, 114], [1, 14, 4, 74], [3, 34, 2, 94], [3, 36, 2, 96], [5, 56], [2, 16, 3, 76], [5, 66], [2, 26, 3, 86], [4, 46, 1, 106], [4, 48, 1, 108], [1, 8, 4, 68], [3, 28, 2, 88], [1, 18, 4, 78], [3, 38, 2, 98], [5, 58], [5, 60], [2, 20, 3, 80], [4, 40, 1, 100], [2, 30, 3, 90], [4, 50, 1, 110], [1, 10, 4, 70], [3, 25, 3, 85], [1, 7, 5, 67], [5, 49, 1, 109], [6, 61], [4, 43, 2, 103], [4, 35, 2, 95], [2, 17, 4, 77], [6, 59], [1, 11, 5, 71], [5, 53, 1, 113], [5, 45, 1, 105], [3, 27, 3, 87], [1, 9, 5, 69], [2, 21, 4, 81], [6, 63], [6, 55], [4, 37, 2, 97], [2, 19, 4, 79], [3, 31, 3, 91], [1, 13, 5, 73], [1, 5, 5, 65], [5, 47, 1, 107], [3, 29, 3, 89], [4, 41, 2, 101], [2, 23, 4, 83], [2, 15, 4, 75], [6, 57], [4, 39, 2, 99], [5, 51, 1, 111], [3, 33, 3, 93]], Symbol("20") => [[1, 0], [1, 20], [1, 40], [1, 21, 1, 39], [1, 27, 1, 33], [1, 11, 1, 29], [1, 17, 1, 23], [1, 1, 1, 19], [1, 7, 1, 13], [1, 2, 1, 20, 1, 38], [1, 14, 1, 20, 1, 26], [1, 10, 1, 22, 1, 28], [1, 10, 1, 16, 1, 34], [1, 12, 1, 18, 1, 30], [1, 6, 1, 24, 1, 30], [1, 3, 1, 9, 1, 21, 1, 27], [1, 11, 1, 17, 1, 23, 1, 29], [1, 13, 1, 19, 1, 31, 1, 37], [1, 6, 1, 12, 1, 18, 1, 24], [1, 8, 1, 14, 1, 26, 1, 32], [1, 16, 1, 22, 1, 28, 1, 34], [1, 12, 1, 18, 1, 24, 1, 30, 1, 36], [1, 8, 1, 14, 1, 20, 1, 26, 1, 32], [1, 4, 1, 10, 1, 16, 1, 22, 1, 28], [1, 7, 1, 13, 1, 19, 2, 25, 1, 31], [1, 9, 2, 15, 1, 21, 1, 27, 1, 33], [1, 5, 1, 11, 1, 17, 1, 23, 1, 29, 1, 35]], Symbol("21") => [[1, 0], [1, 20], [1, 40], [1, 30], [1, 50], [1, 70], [1, 39, 1, 51], [1, 33, 1, 57], [1, 21, 1, 69], [1, 27, 1, 63], [1, 29, 1, 41], [1, 23, 1, 47], [1, 17, 1, 53], [1, 11, 1, 59], [1, 19, 1, 31], [1, 13, 1, 37], [1, 7, 1, 43], [1, 1, 1, 49], [1, 2, 1, 38, 1, 50], [1, 14, 1, 26, 1, 50], [1, 20, 1, 32, 1, 68], [1, 20, 1, 44, 1, 56], [1, 10, 1, 22, 1, 58], [1, 10, 1, 34, 1, 46], [1, 28, 1, 40, 1, 52], [1, 16, 1, 40, 1, 64], [1, 18, 1, 30, 1, 42], [1, 6, 1, 30, 1, 54], [1, 12, 1, 48, 1, 60], [1, 24, 1, 36, 1, 60], [1, 3, 1, 27, 1, 39, 1, 51], [1, 11, 1, 23, 1, 47, 1, 59], [1, 19, 1, 31, 1, 43, 1, 67], [1, 6, 1, 18, 1, 42, 1, 54], [1, 14, 1, 26, 1, 38, 1, 62], [1, 22, 1, 34, 1, 46, 1, 58], [1, 9, 1, 21, 1, 33, 1, 57], [1, 17, 1, 29, 1, 41, 1, 53], [1, 13, 1, 37, 1, 49, 1, 61], [1, 12, 1, 24, 1, 36, 1, 48], [1, 8, 1, 32, 1, 44, 1, 56], [1, 16, 1, 28, 1, 52, 1, 64], [1, 12, 1, 24, 1, 36, 1, 48, 1, 60], [1, 8, 1, 20, 1, 32, 1, 44, 1, 56], [1, 4, 1, 16, 1, 28, 1, 40, 1, 52], [1, 18, 1, 30, 1, 42, 1, 54, 1, 66], [1, 14, 1, 26, 1, 38, 1, 50, 1, 62], [1, 10, 1, 22, 1, 34, 1, 46, 1, 58], [1, 13, 2, 25, 1, 37, 1, 49, 1, 61], [1, 7, 1, 19, 1, 31, 1, 43, 2, 55], [1, 11, 1, 23, 2, 35, 1, 47, 1, 59], [1, 5, 1, 17, 1, 29, 1, 41, 1, 53, 1, 65], [1, 9, 1, 21, 1, 33, 2, 45, 1, 57], [2, 15, 1, 27, 1, 39, 1, 51, 1, 63]], Symbol("22") => [[1, 0], [1, 30], [1, 11, 1, 19], [1, 13, 1, 17], [1, 1, 1, 29], [1, 7, 1, 23], [1, 2, 1, 10, 1, 18], [1, 6, 1, 10, 1, 14], [1, 12, 1, 20, 1, 28], [1, 16, 1, 20, 1, 24], [1, 3, 1, 11, 1, 19, 1, 27], [1, 6, 1, 14, 1, 18, 1, 22], [1, 9, 1, 13, 1, 17, 1, 21], [1, 8, 1, 12, 1, 16, 1, 24], [1, 4, 1, 8, 1, 12, 1, 16, 1, 20], [1, 10, 1, 14, 1, 18, 1, 22, 1, 26], [1, 7, 1, 11, 2, 15, 1, 19, 1, 23], [1, 5, 1, 9, 1, 13, 1, 17, 1, 21, 1, 25]])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :FakeDegree, function (ST, phi, q)
        local f
        f = ((chevieget(:G4_22, :sparseFakeDegrees))(ST))[Position(((chevieget(:G4_22, :CharInfo))(ST))[:charparams], phi)]
        return Sum(1:3 - 1:length(f) - 1, (i->begin
                        f[i] * q ^ f[i + 1]
                    end))
    end)
chevieset(:G4_22, :HighestPowerFakeDegrees, function (ST,)
        return map((x->begin
                        x[length(x)]
                    end), (chevieget(:G4_22, :sparseFakeDegrees))(ST))
    end)
chevieset(:G4_22, :LowestPowerFakeDegrees, function (ST,)
        return map((x->begin
                        x[2]
                    end), (chevieget(:G4_22, :sparseFakeDegrees))(ST))
    end)
chevieset(:G4_22, :Generic, function (ST,)
        if ST in 4:7
            return 7
        elseif ST in 8:15
            return 11
        elseif ST in 16:22
            return 19
        end
    end)
chevieset(:G4_22, :SchurModels, function (ST,)
        if ST in 4:7
            return Dict{Symbol, Any}(:f1 => Dict{Symbol, Any}(:coeff => 1, :vcyc => [[[1, -1, 0, 0, 0, 0, 0, 0], 1], [[1, -1, 2, -1, -1, 2, -1, -1], 1], [[0, 0, 1, -1, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1], 1], [[1, -1, 1, -1, 0, 1, -1, 0], 1], [[1, -1, 1, -1, 0, 1, 0, -1], 1], [[1, -1, 1, 0, -1, 1, -1, 0], 1], [[1, -1, 1, 0, -1, 1, 0, -1], 1]]), :f2 => Dict{Symbol, Any}(:coeff => 2, :factor => [0, 0, -1, 0, 1, 0, 0, 0], :root => [1, 1, 0, 1, 1, 0, 1, 1] // 2, :vcyc => [[[0, 0, 1, -1, 0, 0, 0, 0], 1], [[0, 0, -1, 0, 1, 0, 0, 0], 1], [[0, 0, 0, 0, 0, -1, 1, 0], 1], [[0, 0, 0, 0, 0, -1, 0, 1], 1], [[-1, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, -1, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, -1, 1], 1], [[0, -1, -1, 0, 0, -1, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, -1, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, -1, 1], 1]]), :f3 => Dict{Symbol, Any}(:coeff => 3, :root => [2, 1, 1, 1, 1, 1, 1, 1] // 3, :vcyc => [[[-1, 1, 0, 0, 0, 0, 0, 0], 1], [[1, 0, 1, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 1, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 1, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 0, 1, 1, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 1, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 0, 1, -1], 1]]))
        elseif ST in 8:15
            return Dict{Symbol, Any}(:f1 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 1, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[1, -1, 1, -1, 0, 1, -1, 0, 0], 1], [[1, -1, 1, -1, 0, 1, 0, -1, 0], 1], [[1, -1, 1, -1, 0, 1, 0, 0, -1], 1], [[1, -1, 1, 0, -1, 1, -1, 0, 0], 1], [[1, -1, 1, 0, -1, 1, 0, -1, 0], 1], [[1, -1, 1, 0, -1, 1, 0, 0, -1], 1], [[1, -1, 2, -1, -1, 2, -1, -1, 0], 1], [[1, -1, 2, -1, -1, 2, -1, 0, -1], 1], [[1, -1, 2, -1, -1, 2, 0, -1, -1], 1], [[2, -2, 2, -1, -1, 3, -1, -1, -1], 1]]), :f2 => Dict{Symbol, Any}(:coeff => -2, :factor => [0, 0, 0, 0, 0, -1, 1, 0, 0], :root => [1, 1, 0, 1, 1, 1, 1, 0, 0] // 2, :vcyc => [[[0, 0, -1, 1, 0, 0, 0, 0, 0], 1], [[0, 0, -1, 0, 1, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 1, -1, 0], 1], [[0, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[0, 0, -1, 1, 0, 1, 1, -1, -1], 1], [[0, 0, -1, 0, 1, 1, 1, -1, -1], 1], [[-1, 0, -1, 0, 0, 0, 0, -1, 0, 1], 1], [[-1, 0, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[0, -1, -1, 0, 0, 0, 0, -1, 0, 1], 1], [[0, -1, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[-1, 0, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, -1, 0, 0, 1], 1], [[0, -1, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, -1, 0, 0, 1], 1]]), :f3 => Dict{Symbol, Any}(:coeff => 3, :root => [2, 1, 1, 1, 1, 0, 1, 1, 1] // 3, :vcyc => [[[-1, 1, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, -1, 0, 1, 0], 1], [[0, 0, 0, 0, 0, -1, 0, 0, 1], 1], [[0, 0, 0, 0, 0, -1, 1, 0, 0], 1], [[0, -1, -1, 0, 0, -1, 0, 0, 0, 1], 1], [[0, -1, 0, -1, 0, -1, 0, 0, 0, 1], 1], [[0, -1, 0, 0, -1, -1, 0, 0, 0, 1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 1, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 0, 1, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 0, 1, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 0, 0, 1, -1], 1]]), :f4 => Dict{Symbol, Any}(:coeff => -4, :root => [2, 2, 2, 1, 1, 1, 1, 1, 1] // 4, :vcyc => [[[0, 0, 1, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0, 0], 1], [[-1, 0, -1, 0, 0, -1, 0, 0, 0, 1], 1], [[0, -1, -1, 0, 0, -1, 0, 0, 0, 1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 1, -1], 1], [[0, 1, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 0, 1, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 0, 0, 1, -1], 1], [[1, 1, 1, 1, 0, 1, 1, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 1, -2], 1], [[1, 1, 1, 0, 1, 1, 1, 0, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 1, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 0, 1, -2], 1]]))
        elseif ST in 16:22
            return Dict{Symbol, Any}(:f1 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 1, -1, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, -1, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[1, -1, 1, -1, 0, 1, -1, 0, 0, 0], 1], [[1, -1, 1, -1, 0, 1, 0, -1, 0, 0], 1], [[1, -1, 1, -1, 0, 1, 0, 0, -1, 0], 1], [[1, -1, 1, -1, 0, 1, 0, 0, 0, -1], 1], [[1, -1, 1, 0, -1, 1, -1, 0, 0, 0], 1], [[1, -1, 1, 0, -1, 1, 0, -1, 0, 0], 1], [[1, -1, 1, 0, -1, 1, 0, 0, -1, 0], 1], [[1, -1, 1, 0, -1, 1, 0, 0, 0, -1], 1], [[1, -1, 2, -1, -1, 2, -1, -1, 0, 0], 1], [[1, -1, 2, -1, -1, 2, -1, 0, -1, 0], 1], [[1, -1, 2, -1, -1, 2, -1, 0, 0, -1], 1], [[1, -1, 2, -1, -1, 2, 0, -1, -1, 0], 1], [[1, -1, 2, -1, -1, 2, 0, -1, 0, -1], 1], [[1, -1, 2, -1, -1, 2, 0, 0, -1, -1], 1], [[2, -2, 2, -1, -1, 3, -1, -1, -1, 0], 1], [[2, -2, 2, -1, -1, 3, -1, -1, 0, -1], 1], [[2, -2, 2, -1, -1, 3, -1, 0, -1, -1], 1], [[2, -2, 2, -1, -1, 3, 0, -1, -1, -1], 1], [[2, -2, 3, -2, -1, 4, -1, -1, -1, -1], 1], [[2, -2, 3, -1, -2, 4, -1, -1, -1, -1], 1], [[3, -3, 4, -2, -2, 4, -1, -1, -1, -1], 1]]), :f2 => Dict{Symbol, Any}(:coeff => -2, :root => [1, 1, 1, 1, 0, 1, 1, 0, 0, 0] // 2, :vcyc => [[[0, 0, 1, 0, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 1, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 1, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 0, 1, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 0, 1, 0, -1, 1, 1, -1, -1, 0], 1], [[0, 0, 1, 0, -1, 1, 1, -1, 0, -1], 1], [[0, 0, 1, 0, -1, 1, 1, 0, -1, -1], 1], [[0, 0, 0, 1, -1, 1, 1, -1, -1, 0], 1], [[0, 0, 0, 1, -1, 1, 1, -1, 0, -1], 1], [[0, 0, 0, 1, -1, 1, 1, 0, -1, -1], 1], [[0, 0, 1, 1, -2, 1, 2, -1, -1, -1], 1], [[0, 0, 1, 1, -2, 2, 1, -1, -1, -1], 1], [[-1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[-1, 0, 0, 0, -1, 1, 1, -1, -1, -1, 1], 1], [[0, -1, 0, 0, -1, 1, 1, -1, -1, -1, 1], 1]]), :f3 => Dict{Symbol, Any}(:coeff => 3, :root => [2, 1, 1, 1, 1, 1, 1, 1, 0, 0] // 3, :vcyc => [[[-1, 1, 0, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 1, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 0, 1, -1, 0], 1], [[0, 0, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[1, -1, 0, 0, 0, 1, 1, 0, -1, -1], 1], [[1, -1, 0, 0, 0, 1, 0, 1, -1, -1], 1], [[1, -1, 0, 0, 0, 0, 1, 1, -1, -1], 1], [[0, -1, -1, 0, 0, 0, 0, 0, -1, 0, 1], 1], [[0, -1, -1, 0, 0, 0, 0, 0, 0, -1, 1], 1], [[0, -1, 0, -1, 0, 0, 0, 0, -1, 0, 1], 1], [[0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 0, 1, 0, 0, -1], 1], [[-1, -1, -1, -1, 0, 0, 0, 0, -1, -1, 2], 1], [[-1, -1, -1, 0, -1, 0, 0, 0, -1, -1, 2], 1], [[-1, -1, 0, -1, -1, 0, 0, 0, -1, -1, 2], 1]]), :f4 => Dict{Symbol, Any}(:coeff => -4, :root => [2, 2, 2, 1, 1, 1, 1, 1, 1, 0] // 4, :vcyc => [[[0, 0, -1, 1, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[0, 1, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[-1, 0, 0, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[-1, -1, -1, -1, 0, -1, -1, 0, 0, 0, 2], 1], [[-1, -1, -1, -1, 0, -1, 0, -1, 0, 0, 2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 0, 1, 1, 0, 0, -2], 1], [[-1, -1, -1, -1, 0, 0, -1, 0, -1, 0, 2], 1], [[-1, -1, -1, -1, 0, 0, 0, -1, -1, 0, 2], 1], [[-1, -1, 0, -1, -1, -1, 0, 0, 0, -1, 2], 1], [[-1, -1, 0, -1, -1, 0, -1, 0, 0, -1, 2], 1], [[-1, -1, 0, -1, -1, 0, 0, -1, 0, -1, 2], 1], [[-1, -1, 0, -1, -1, 0, 0, 0, -1, -1, 2], 1]]), :f5 => Dict{Symbol, Any}(:coeff => 5, :root => [3, 2, 2, 2, 1, 1, 1, 1, 1, 1] // 5, :vcyc => [[[1, -1, 0, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, -1, 0, 1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, -1, 1, 0, 0, 0, 0, 0], 1], [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 1, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 0, 0, 1, -1], 1], [[0, -1, 0, 0, -1, -1, 0, 0, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, -1, 0, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[1, 1, 1, 1, 0, 1, 1, 0, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 1, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 0, 1, -2], 1], [[1, 1, 1, 1, 0, 0, 1, 1, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 0, 1, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 0, 1, 0, 0, 1, -2], 1], [[1, 1, 1, 1, 0, 0, 0, 1, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 0, 0, 1, 0, 1, -2], 1], [[1, 1, 1, 1, 0, 0, 0, 0, 1, 1, -2], 1]]), :f6 => Dict{Symbol, Any}(:coeff => -6, :root => [3, 3, 2, 2, 2, 2, 1, 1, 1, 1] // 6, :vcyc => [[[0, 0, 0, 0, 0, 1, -1, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[-1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1], 1], [[-1, 0, 0, -1, 0, -1, 0, 0, 0, 0, 1], 1], [[-1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 1], 1], [[0, 1, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[0, 1, 0, 1, 0, 1, 0, 0, 0, 0, -1], 1], [[0, 1, 0, 0, 1, 1, 0, 0, 0, 0, -1], 1], [[1, 1, 1, 1, 0, 1, 1, 0, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 1, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 0, 1, -2], 1], [[1, 1, 1, 0, 1, 1, 1, 0, 0, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 1, 0, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 0, 0, 1, -2], 1], [[1, 1, 0, 1, 1, 1, 1, 0, 0, 0, -2], 1], [[1, 1, 0, 1, 1, 1, 0, 1, 0, 0, -2], 1], [[1, 1, 0, 1, 1, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 0, 1, 1, 1, 0, 0, 0, 1, -2], 1], [[2, 1, 1, 1, 1, 1, 1, 1, 0, 0, -3], 1], [[2, 1, 1, 1, 1, 1, 1, 0, 1, 0, -3], 1], [[2, 1, 1, 1, 1, 1, 1, 0, 0, 1, -3], 1], [[2, 1, 1, 1, 1, 1, 0, 1, 1, 0, -3], 1], [[2, 1, 1, 1, 1, 1, 0, 1, 0, 1, -3], 1], [[2, 1, 1, 1, 1, 1, 0, 0, 1, 1, -3], 1]]))
        end
    end)
chevieset(:G4_22, :paramchars, function (ST,)
        if ST in 4:7
            return Concatenation(Cartesian([1], 1:2, 1:3, 1:3), Cartesian([2], 1:2, 1:3, 1:3), Cartesian([3], 1:3, 1:2))
        elseif ST in 8:15
            return Concatenation(Cartesian([1], 1:2, 1:3, 1:4), Cartesian([2], 1:2, 1:3, 1:6), Cartesian([3], 1:3, 1:2, 1:4), Cartesian([4], 1:4, 1:3))
        elseif ST in 16:22
            return Concatenation(Cartesian([1], 1:2, 1:3, 1:5), Cartesian([2], 1:2, 1:3, 1:10), Cartesian([3], 1:3, 1:2, 1:10), Cartesian([4], 1:4, 1:3, 1:5), Cartesian([5], 1:5, 1:2, 1:3), Cartesian([6], 1:6, 1:5))
        end
    end)
chevieset(:G4_22, :SchurData, function (ST,)
        if ST in 4:7
            return map(function (char,)
                        local f
                        f = function (l, i)
                                return Concatenation([l[i]], Drop(l, i))
                            end
                        if char[1] == 1
                            return Dict{Symbol, Any}(:name => "f1", :order => Concatenation(f([1, 2], char[2]), f(3:5, char[3]), f(6:8, char[4])))
                        elseif char[1] == 2
                            return Dict{Symbol, Any}(:name => "f2", :order => Concatenation([1, 2], f(3:5, char[3]), f(6:8, char[4])), :rootPower => (-1) ^ char[2])
                        elseif char[1] == 3
                            return Dict{Symbol, Any}(:name => "f3", :order => Concatenation(f(1:2, char[3]), 3:5, 6:8), :rootPower => E(3, char[2]))
                        end
                    end, (chevieget(:G4_22, :paramchars))(ST))
        elseif ST in 8:15
            return map(function (char,)
                        local f
                        f = function (l, i)
                                return Concatenation([l[i]], Drop(l, i))
                            end
                        if char[1] == 1
                            return Dict{Symbol, Any}(:name => "f1", :order => Concatenation(f([1, 2], char[2]), f(3:5, char[3]), f(6:9, char[4])))
                        elseif char[1] == 2
                            return Dict{Symbol, Any}(:name => "f2", :order => Concatenation([1, 2], f(3:5, char[3]), 5 + (Combinations(1:4, 2))[char[4]], 5 + Difference(1:4, (Combinations(1:4, 2))[char[4]])), :rootPower => (-1) ^ char[2])
                        elseif char[1] == 3
                            return Dict{Symbol, Any}(:name => "f3", :order => Concatenation(f([1, 2], char[3]), 3:5, f(6:9, char[4])), :rootPower => E(3, char[2]))
                        elseif char[1] == 4
                            return Dict{Symbol, Any}(:name => "f4", :order => Concatenation([1, 2], f(3:5, char[3]), 6:9), :rootPower => E(4, char[2]))
                        end
                    end, (chevieget(:G4_22, :paramchars))(ST))
        elseif ST in 8:22
            return map(function (char,)
                        local f
                        f = function (l, i)
                                return Concatenation([l[i]], Drop(l, i))
                            end
                        if char[1] == 1
                            return Dict{Symbol, Any}(:name => "f1", :order => Concatenation(f([1, 2], char[2]), f(3:5, char[3]), f(6:10, char[4])))
                        elseif char[1] == 2
                            return Dict{Symbol, Any}(:name => "f2", :order => Concatenation([1, 2], 2 + Drop(1:3, char[3]), [2 + char[3]], 5 + (Combinations(1:5, 2))[char[4]], 5 + Difference(1:5, (Combinations(1:5, 2))[char[4]])), :rootPower => (-1) ^ char[2])
                        elseif char[1] == 3
                            return Dict{Symbol, Any}(:name => "f3", :order => Concatenation(f([1, 2], char[3]), 3:5, 5 + (Combinations(1:5, 3))[char[4]], 5 + Difference(1:5, (Combinations(1:5, 3))[char[4]])), :rootPower => E(3, char[2]))
                        elseif char[1] == 4
                            return Dict{Symbol, Any}(:name => "f4", :order => Concatenation([1, 2], f(3:5, char[3]), Drop(6:10, char[4]), [5 + char[4]]), :rootPower => E(4, char[2]))
                        elseif char[1] == 5
                            return Dict{Symbol, Any}(:name => "f5", :order => Concatenation(f([1, 2], char[3]), Drop(3:5, char[4]), [2 + char[4]], 6:10), :rootPower => E(5, char[2]))
                        elseif char[1] == 6
                            return Dict{Symbol, Any}(:name => "f6", :order => Concatenation([1, 2], 3:5, f(6:10, char[3])), :rootPower => E(6, char[2]))
                        end
                    end, (chevieget(:G4_22, :paramchars))(ST))
        end
    end)
G4_22FetchIndexChars = function (ST, para)
        local p
        if !(CHEVIE[:CheckIndexChars])
            return ((chevieget(:G4_22, :CharInfo))(ST))[:indexchars]
        end
        if !(haskey(CHEVIE, :G4_22CachedIndexChars))
            CHEVIE[:G4_22CachedIndexChars] = []
            (CHEVIE[:G4_22CachedIndexChars])[4:22] = map((i->begin
                            []
                        end), 4:22)
            InfoChevie2("Creating G4_22CachedIndexChars\n")
        end
        p = PositionProperty((CHEVIE[:G4_22CachedIndexChars])[ST], (x->begin
                        x[1] == para
                    end))
        if p != false
            return (((CHEVIE[:G4_22CachedIndexChars])[ST])[p])[2]
            InfoChevie2("Using G4_22CachedIndexChars(", para, ")\n")
        else
            return ((chevieget(:G4_22, :HeckeCharTable))(ST, para, []))[:indexchars]
        end
    end
chevieset(:G4_22, :FactorizedSchurElement, function (ST, p, para, rootpara)
        local Y, index, g
        g = (chevieget(:G4_22, :Generic))(ST)
        index = (chevieget(:G4_22, :Size))(g) // (chevieget(:G4_22, :Size))(ST)
        Y = Concatenation((chevieget(:G4_22, :GetParams))(ST, para))
        g = (chevieget(:G4_22, :CharInfo))(ST)
        g = (G4_22FetchIndexChars(ST, para))[Position(g[:charparams], p)]
        g = ((chevieget(:G4_22, :SchurData))(ST))[g]
        g = VFactorSchurElement(Y, ((chevieget(:G4_22, :SchurModels))(ST))[Symbol(g[:name])], g)
        return g // index
    end)
chevieset(:G4_22, :SchurElement, function (ST, p, para, rootpara)
        local Y, index, g
        g = (chevieget(:G4_22, :Generic))(ST)
        index = (chevieget(:G4_22, :Size))(g) // (chevieget(:G4_22, :Size))(ST)
        Y = Concatenation((chevieget(:G4_22, :GetParams))(ST, para))
        g = (chevieget(:G4_22, :CharInfo))(ST)
        g = (G4_22FetchIndexChars(ST, para))[Position(g[:charparams], p)]
        g = ((chevieget(:G4_22, :SchurData))(ST))[g]
        g = VcycSchurElement(Y, ((chevieget(:G4_22, :SchurModels))(ST))[Symbol(g[:name])], g)
        return g // index
    end)
chevieset(:G4_22, :DecompositionMatrix, function (ST, p)
        local T, m
        T = (chevieget(:G4_22, :CharTable))(ST)
        T[:name] = T[:identifier]
        m = DecompositionMatrix(mod(T, p))
        return map((c->begin
                        [c[1], (m[c[1]])[c[2]]]
                    end), BlocksMat(m))
    end)
chevieset(:G4_22, :GetParams, function (ST, para)
        local d, f
        f = function (p,)
                p = map(GetRoot, p)
                return Concatenation(p, -p)
            end
        if ST == 4
            return [[1, -1], [1, E(3), E(3, 2)], para[1]]
        elseif ST == 5
            return [[1, -1], para[1], para[2]]
        elseif ST == 6
            return [para[1], [1, E(3), E(3, 2)], para[2]]
        elseif ST == 7
            return para
        elseif ST == 8
            return [[1, -1], [1, E(3), E(3, 2)], para[1]]
        elseif ST == 9
            return [para[1], [1, E(3), E(3, 2)], para[2]]
        elseif ST == 10
            return [[1, -1], para[1], para[2]]
        elseif ST == 11
            return para
        elseif ST == 12
            return [para[1], [1, E(3), E(3, 2)], [1, E(4), -1, E(4, 3)]]
        elseif ST == 13
            return [para[2], [1, E(3), E(3, 2)], f(para[1])]
        elseif ST == 14
            return [para[1], para[2], [1, E(4), -1, E(4, 3)]]
        elseif ST == 15
            return [para[1], para[2], f(para[3])]
        elseif ST == 16
            return [[1, -1], [1, E(3), E(3, 2)], para[1]]
        elseif ST == 17
            return [para[1], [1, E(3), E(3, 2)], para[2]]
        elseif ST == 18
            return [[1, -1], para[1], para[2]]
        elseif ST == 19
            return para
        elseif ST == 20
            return [[1, -1], para[1], [1, E(5), E(5, 2), E(5, 3), E(5, 4)]]
        elseif ST == 21
            return [para[1], para[2], [1, E(5), E(5, 2), E(5, 3), E(5, 4)]]
        elseif ST == 22
            return [para[1], [1, E(3), E(3, 2)], [1, E(5), E(5, 2), E(5, 3), E(5, 4)]]
        end
    end)
chevieset(:G4_22, :Embed, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [[1, 3, -1], [3]], Symbol("5") => [[2], [3]], Symbol("6") => [[1], [3]], Symbol("7") => [[1], [2], [3]], Symbol("8") => [[3], [1, 3, -1]], Symbol("9") => [[1], [3]], Symbol("10") => [[2], [3]], Symbol("11") => [[1], [2], [3]], Symbol("12") => [[1], [2, 1, -2], [-2, 1, 2]], Symbol("13") => [[3, 3], [1], [-2, 1, 2]], Symbol("14") => [[1], [2]], Symbol("15") => [[1], [2], [3, 3]], Symbol("16") => [[3], [1, 3, -1]], Symbol("17") => [[1], [3]], Symbol("18") => [[2], [3]], Symbol("19") => [[1], [2], [3]], Symbol("20") => [[2], [1, 2, -1]], Symbol("21") => [[1], [2]], Symbol("22") => [[1], [2, 1, -2], [-2, 1, 2]])
        return d[Symbol(ST)]
    end)
G4_22Helper = function (c, e, x, n, p)
        local nz, r, res, root
        nz = Filtered(1:length(c), (i->begin
                        c[i] != 0 * c[i]
                    end))
        r = gcd(Concatenation(e[nz], [n]))
        root = GetRoot(x, n // r) * E(n, p * r)
        res = c * root ^ 0
        res[nz] = map((i->begin
                        c[i] * root ^ (e[i] // r)
                    end), nz)
        return res
    end
G4_22Test = function (res, rows, i)
        local l, o, p, ic, T
        T = [nothing, nothing, nothing, 7, 7, 7, 7, 11, 11, 11, 11, 11, 11, 11, 11, 19, 19, 19, 19, 19, 19, 19]
        T = SPrint("G", T[res[:ST]])
        if !(haskey(CHEVIE, :G4_22CachedIndexChars))
            CHEVIE[:G4_22CachedIndexChars] = map((i->begin
                            []
                        end), 1:22)
            InfoChevie2("Creating G4_22CachedIndexChars\n")
        end
        p = PositionProperty((CHEVIE[:G4_22CachedIndexChars])[res[:ST]], (x->begin
                        x[1] == res[:parameter]
                    end))
        if p != false
            InfoChevie2("Using G4_22CachedIndexChars(", res[:parameter], ")\n")
            ic = (((CHEVIE[:G4_22CachedIndexChars])[res[:ST]])[p])[2]
            res[:irreducibles] = rows[ic]
            if ic != i
                print("*** WARNING: choice of character restrictions from ", T, " for this specialization does  !  agree with group CharTable\n")
                if !(CHEVIE[:CheckIndexChars])
                    print("Try again with CHEVIE.CheckIndexChars=true\n")
                end
            end
            return ic
        end
        ic = i
        res[:irreducibles] = rows[ic]
        if length(gapSet(res[:irreducibles])) == length(res[:classes])
            l = i
        else
            l = map((x->begin
                            Position(rows, x)
                        end), rows)
            if length(gapSet(l)) != length(res[:classes])
                error("specialization  !  semi-simple")
            end
            l = map((x->begin
                            Filtered(1:length(l), (i->begin
                                        l[i] == x
                                    end))
                        end), gapSet(l))
            print("*** WARNING: bad choice of character restrictions from ", T, " for this specialization\n")
            if !(CHEVIE[:CheckIndexChars])
                print("Try again with CHEVIE.CheckIndexChars=true\n")
            end
            o = Filtered(l, (x->begin
                            count((j->begin
                                            j in x
                                        end), i) > 1
                        end))
            print(" over-represented by ", Intersection(Union(o), i), " : ", o, "\n")
            print(" absent : ", Filtered(l, (x->begin
                            count((j->begin
                                            j in x
                                        end), i) == 0
                        end)), "\n")
            print(" Choosing ", map((x->begin
                            x[1]
                        end), l), "\n")
            l = map((x->begin
                            x[1]
                        end), l)
            res[:irreducibles] = rows[l]
        end
        push!((CHEVIE[:G4_22CachedIndexChars])[res[:ST]], [res[:parameter], l])
        return l
    end
chevieset(:G4_22, :HeckeCharTable, function (ST, para, root)
        local X, Y, Z, classes, GenericRow, res, ci, ic, c, p, c24, c23, rows, c25, c35, c23
        X = (chevieget(:G4_22, :GetParams))(ST, para)
        Z = X[3]
        Y = X[2]
        X = X[1]
        c24 = Combinations(1:4, 2)
        c23 = [[2, 3], [1, 3], [1, 2]]
        c25 = Combinations(1:5, 2)
        c35 = Combinations(1:5, 3)
        c23 = [[2, 3], [1, 3], [1, 2]]
        c = 0 * Product(para, Product)
        if ST in 4:7
            GenericRow = function (char,)
                    local l
                    if char[1] == 1
                        l = [1, X[char[2]], Y[char[3]], Z[char[4]]]
                        return map((class->begin
                                        l[class[1]] * Product(l) ^ class[2]
                                    end), classes)
                    end
                    if char[1] == 2
                        l = [[2], X, Drop(Y, char[3]), Drop(Z, char[4])]
                    elseif char[1] == 3
                        l = [[3], X[[1, 2, char[3]]], Y, Z]
                    end
                    return G4_22Helper(map((class->begin
                                        Sum(l[class[1]])
                                    end), classes), map((c->begin
                                        c[2]
                                    end), classes), Product(l[2:4], Product), char[1], char[2])
                end
        elseif ST in 8:15
            GenericRow = function (char,)
                    local l
                    if char[1] == 1
                        l = [1, X[char[2]], Y[char[3]], Z[char[4]], Z[char[4]] ^ 2]
                        return map((class->begin
                                            l[class[1]] * Product(l[2:4]) ^ class[2]
                                        end), classes) + c
                    end
                    if char[1] == 2
                        l = [[2], X, Y[c23[char[3]]], Z[c24[char[4]]]]
                    elseif char[1] == 3
                        l = [[3], X[[1, 2, char[3]]], Y, Drop(Z, char[4])]
                    elseif char[1] == 4
                        l = [[4], X[[1, 2, 1, 2]], Y[[1, 2, 3, char[3]]], Z]
                    end
                    push!(l, map((x->begin
                                    x ^ 2
                                end), l[4]))
                    return G4_22Helper(map((class->begin
                                            Sum(l[class[1]])
                                        end), classes), map((c->begin
                                            c[2]
                                        end), classes), Product(l[2:4], Product), char[1], char[2]) + c
                end
        elseif ST in 16:22
            GenericRow = function (char,)
                    local l, r
                    if char[1] == 1
                        l = [1, X[char[2]], Y[char[3]], Z[char[4]], Z[char[4]] ^ 2]
                        return map((class->begin
                                        l[class[1]] * Product(l[2:4]) ^ class[2]
                                    end), classes)
                    end
                    if char[1] == 2
                        l = [[2], X, Y[c23[char[3]]], Z[c25[char[4]]]]
                    elseif char[1] == 3
                        l = [[3], X[[1, 2, char[3]]], Y, Z[c35[char[4]]]]
                    elseif char[1] == 4
                        l = [[4], X[[1, 2, 1, 2]], Y[[1, 2, 3, char[3]]], Drop(Z, char[4])]
                    elseif char[1] == 5
                        l = [[5], X[[1, 2, 1, 2, char[3]]], Concatenation(Y, Y[c23[char[4]]]), Z]
                    elseif char[1] == 6
                        l = [[6], X[[1, 2, 1, 2, 1, 2]], Y[[1, 2, 3, 1, 2, 3]], Z[[1, 2, 3, 4, 5, char[3]]]]
                    end
                    push!(l, map((x->begin
                                    x ^ 2
                                end), l[4]))
                    return G4_22Helper(map((class->begin
                                        Sum(l[class[1]])
                                    end), classes), map((c->begin
                                        c[2]
                                    end), classes), Product(l[2:4], Product), char[1], char[2])
                end
        end
        res = Dict{Symbol, Any}(:name => SPrint("H(G", ST, ")"), :ST => ST, :parameter => para, :degrees => (chevieget(:G4_22, :ReflectionDegrees))(ST), :dim => 2, :reflclasses => [3], :powermap => (chevieget(:G4_22, :PowerMaps))(ST))
        Inherit(res, (chevieget(:G4_22, :ClassInfo))(ST))
        classes = ((chevieget(:G4_22, :paramclasses))(ST))[res[:indexclasses]]
        res[:size] = Product(res[:degrees])
        res[:order] = res[:size]
        res[:identifier] = res[:name]
        res[:centralizers] = map((x->begin
                        res[:size] // x
                    end), res[:classes])
        ci = (chevieget(:G4_22, :CharInfo))(ST)
        res[:irredinfo] = map((x->begin
                        Dict{Symbol, Any}(:charparam => x, :charname => (chevieget(:G4_22, :CharName))(ST, x, Dict{Symbol, Any}(:TeX => true)))
                    end), ci[:charparams])
        rows = map(GenericRow, (chevieget(:G4_22, :paramchars))(ST))
        ci = G4_22Test(res, rows * Product(para, Product) ^ 0, ci[:indexchars])
        if ci != true
            res[:indexchars] = ci
        end
        return ((CHEVIE[:compat])[:MakeCharacterTable])(res)
    end)
chevieset(:G4_22, :CharTable, function (ST,)
        local para
        para = (chevieget(:G4_22, :EigenvaluesGeneratingReflections))(ST)
        para = map((x->begin
                        map((j->begin
                                    E(1 // x, j)
                                end), 0:1 // x - 1)
                    end), para)
        return (chevieget(:G4_22, :HeckeCharTable))(ST, para, [])
    end)
chevieset(:G4_22, :Rep, Dict{Symbol, Any}(Symbol("1") => function (X, Y, Z)
                return [[[X]], [[Y]], [[Z]]]
            end, Symbol("2") => function (X, Y, Z, root)
                local r
                r = (-1) ^ root * GetRoot(Product(X) * Product(Y) * Product(Z), 2)
                return [[[X[1], Sum(Y, (x->begin
                                                1 // x
                                            end)) - (Sum(Z) * X[2]) // r], [0, X[2]]], [[Sum(Y), 1 // X[1]], [-(Product(Y)) * X[1], 0]], [[0, (-r // Product(Y)) // Product(X)], [r, Sum(Z)]]]
            end, Symbol("3") => function (X, Y, Z, root)
                local r, x1, x2, a, z1
                x1 = X[1]
                x2 = X[2]
                z1 = Z[1]
                r = E(3, root) * GetRoot(x1 ^ 2 * x2 * Product(Y) * Product(Z), 3)
                a = ((Sum(Y) * r) // x1 - Product(Y) * Sum(Y, (y->begin
                                            1 // y
                                        end)) * z1) + (Product(Y) * (x1 * z1 ^ 2 - (x2 * Product(Z)) // z1)) // r
                return [[[x1, 0, (-(Product(Z)) * Sum(Z, (z->begin
                                                        1 // z
                                                    end)) * x2 * x1) // z1 + ((Sum(Y) * r ^ 2) // Product(Y)) // z1], [0, x1, (a // Product(Y)) // z1 * r ^ 2], [0, 0, x2]], [[Sum(Y) - (r // x1) // z1, 1 // z1, r], [a, (r // x1) // z1, 0], [(-(Product(Y)) * x1 * z1) // r ^ 2, 0, 0]], [[0, 0, (-x1 * Product(Z)) // z1], [0, z1, 0], [1 // x1, -1 // r, Sum(Z) - z1]]]
            end, Symbol("4") => function (X, Y, Z, root)
                local r, x1, x2, y1, y2, y3, a, b
                x1 = X[1]
                x2 = X[2]
                y1 = Y[3]
                y2 = Y[1]
                y3 = Y[2]
                r = GetRoot((x1 * x2 * y1) ^ 2 * y2 * y3 * Product(Z), 4) * E(4, root)
                a = y2 * x1 * x2 * y1 * Product(Z) * Sum(Z, (x->begin
                                        1 // x
                                    end)) - r ^ 2 * Sum(Z)
                b = x1 * x2 * y1 * Product(Z) * (y3 + y2) - r ^ 2 * Sum(Combinations(1:4, 2), (x->begin
                                        Product(Z[x])
                                    end))
                return [[[x1, 0, x1 * a - (x1 * x2 * y1 * b) // r, x1 * (1 + y1 // y3) - (r * Sum(Z, (x->begin
                                                        1 // x
                                                    end))) // y3], [0, x1, 1 // y1 + 1 // y2, -x2 // r ^ 3], [0, 0, x2, 0], [0, 0, 0, x2]], [[y3 + y1, x1 * y1 * y2 * a, y1 * a, y1], [0, y1 + y2, 1 // x1, 0], [0, -x1 * y1 * y2, 0, 0], [-y3, 0, 0, 0]], [[0, 0, 0, -r // (y3 * x2)], [0, 0, -r // (y2 * x1 * x2 * y1), 0], [0, r, 0, 1 // r ^ 2], [r // (x1 * y1), -r * a, b, Sum(Z)]]]
            end, Symbol("5") => function (X, Y, Z, root)
                local r, x1, x2, y1, y2, y3, z1, z2, z3, z4, z5
                x1 = X[1]
                x2 = X[2]
                y1 = Y[1]
                y2 = Y[2]
                y3 = Y[3]
                z1 = Z[1]
                z2 = Z[2]
                z3 = Z[3]
                z4 = Z[4]
                z5 = Z[5]
                r = GetRoot(x1 ^ 3 * x2 ^ 2 * y1 * y2 ^ 2 * y3 ^ 2 * Product(Z), 5) * E(5, root)
                return [[[x2 + x1, 0, 0, 0, x1], [0, x2 + x1, 0, x2, 0], [0, 0, x1, 0, 0], [0, -x1, 0, 0, 0], [-x2, 0, 0, 0, 0]], [[0, 0, 0, 0, -r // (z5 * x2)], [0, 0, 0, (-r // z4) // x1, x2], [0, 0, (r // z3) // x1, (x2 * y2 * y3 * z2) // r - r // (x1 * z4), x2], [0, (r // z2) // x2, (x1 * x2 * y1 * y2 * y3 * z1 * z4 * z5 * ((x1 * (y3 + y2)) // r - 1 // z3)) // r ^ 2 - r // (z2 * x2), ((y2 + y3) - r // (z3 * x1)) + (x1 * x2 * z1 * z5 * y1 * y2 * y3) // r ^ 2, (-(x1 ^ 2) * x2 ^ 2 * y1 * y2 * y3 * z4 * z5 * z1) // r ^ 3], [(r // z1) // x1, ((r ^ 2 * (1 // (z4 * z2) + 1 // (z1 * z5))) // (x1 * x2 ^ 2) - (y2 * y3) // x2) - (x1 * y1 * y2 * y3 * z3) // (r * x2), (-(r ^ 3) // (x1 * x2 * z2 * z4) + z3 * x1 * y1 * y2 * y3) * ((1 // (r * x2) + r // (x1 ^ 2 * x2 * z3 ^ 2 * y2 * y3)) - (1 // y3 + 1 // y2) // (x1 * x2 * z3)), (y1 * y2 * y3 * (z2 + (z1 * z5) // z4)) // r - (r * (r + y1 * z3 * x1)) // (z3 * x1 ^ 2 * z4 * x2), (y1 + y2 + y3) - (z1 * z5 * x1 * x2 * y1 * y2 * y3) // r ^ 2]], [[z1, ((x1 * y2 * y3 * z1 * z2) // (r * x2) + (((((r ^ 3 // x1) // z4) // x2 ^ 3) // y3) // z5) // y2) - (r * (z2 // z5 + z1 // z4)) // x2 ^ 2, (((((-r * z3) // x2 ^ 2) // z5 - z1 // x2 * (y3 + y2)) + (x1 // x2 * z3 * z1 * y2 * y3) // r) - (x1 * y1 * y2 * y3 * z1 * z2 * z4) // r ^ 2) + (x1 ^ 2 * y1 * y2 * y3 * z1 * z2 * z3 * z4 * (y3 + y2)) // r ^ 3 + (r * z1) // (x1 * x2 * z3), ((((y2 * y3 * (x2 * z1 * z2 + x1 * z1 * (z2 + z3) + (x1 * z2 * z3 * z4) // z5)) // x2) // r + ((y1 * y2 * y3 * z1 * z2 * z3 * x1 * (x2 + x1)) // x2) // r ^ 2) - (y2 ^ 2 * y3 ^ 2 * z1 * z2 * z3 * x1 ^ 2 * z4) // r ^ 3) - (r * ((z2 + z3) // (z5 * x2) + z1 // (z4 * x2) + z2 // (z5 * x1) + z1 // (z4 * x1))) // x2, ((z1 * (x2 + x1)) // x2 + (x1 ^ 2 * z2 * z3 * z4 * y2 * y3) // r ^ 2) - (r * (1 // y1 + 1 // y2 + 1 // y3)) // x2], [0, z2, (z3 + (x1 * x2 ^ 2 * y1 * y2 * y3 * z1 * z2 * z4 * z5) // r ^ 3) - (r * (1 // y3 + 1 // y2)) // x1, (((x2 * z2) // x1 + z3 + z2) - (x1 * x2 * z2 * z3 * z4 * y2 * y3) // r ^ 2) - (r * (1 // y3 + 1 // y2)) // x1, -(r ^ 2) // (x1 * z1 * y1 * y2 * y3)], [0, 0, z3, -(r ^ 3) // (x1 ^ 2 * x2 * z1 * z5 * y1 * y2 * y3) + z3, -(r ^ 2) // (x1 * z1 * y1 * y2 * y3)], [0, 0, 0, z4, (z4 * x1 * x2 * z5) // r], [0, 0, 0, 0, z5]]]
            end, Symbol("6") => function (X, Y, Z, root)
                local r, x1, x2, y1, y2, y3, z1, z2, z3, z4, z5, a
                r = GetRoot(Product(Concatenation(X[[1, 2, 1, 2, 1, 2]], Y[[1, 2, 3, 1, 2, 3]], Z[[1, 2, 3, 4, 5, 5]])), 6) * E(6, root)
                x1 = X[1]
                x2 = X[2]
                y1 = Y[1]
                y2 = Y[2]
                y3 = Y[3]
                z1 = Z[1]
                z2 = Z[2]
                z3 = Z[3]
                z4 = Z[4]
                z5 = Z[5]
                a = 1
                return r ^ 0 * [[[x1 + x2, 0, 0, 0, 0, x2 * x1], [0, x1 + x2, 0, 0, x2 * x1, 0], [0, 0, x1 + x2, x2 * x1, 0, 0], [0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0], [-1, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, -1 // z5 * r], [0, 0, 0, 0, -1 // z4 * r, ((-1 // a) // r ^ 2) // z4], [0, 0, 0, -1 // z5 * r, z4 - z5, (-1 // a) // r ^ 3 * z5], [0, 0, ((r // z3) // x2) // x1, (x1 * x2 * y1 * y2 * y3 * (z2 * z5 + z4 * z1) - a // (z4 * z5 ^ 2)) // r ^ 2, (-x1 * x2 * y1 * y2 * y3 * z1 * z4 * z5 * (z4 - z5) + a // z5) // r ^ 3, (((((((1 // y1) // y2) // y3) // x1 ^ 2) // x2 ^ 2) // z2) // z3) // a], [0, ((1 // z2 * r) // x2) // x1, (-((y1 * y3 + y2 * y3 + y1 * y2)) * x1 * x2 * z1 * z5 ^ 2 * z4 * y1 * y2 * y3) // a + (((z5 // x2) // x1 * (y3 + y2 + y1) * r ^ 4) // z3) // a + (((r ^ 2 * y1 * y2 * y3 * z5 * (z4 * z3 * z1 - z2 ^ 2 * z5)) // a) // z2) // z3 + ((((((r ^ 2 * (-z3 + z2)) // z4) // z5) // x1) // x2) // z2) // z3, ((-z5 * (y1 * y3 + y2 * y3 + y1 * y2) * r ^ 3) // a + (((r * (z2 * z4 * x2 * x1 * z5 ^ 3 * y3 * y2 * y1 - a) * (y3 + y2 + y1)) // a) // z4) // z5 + (((x1 * x2) ^ 2 * (y1 * y2 * y3) ^ 2 * z5 ^ 2 * (z1 * z4 * z3 - z5 * z2 ^ 2)) // r) // a + (((x1 * x2 * y1 * y2 * y3 * (z4 * z1 + 2 * z5 * z2)) // r) // z4) // z5) - ((a // r) // z4 ^ 2) // z5 ^ 3, ((y3 + y2 + y1) - (x1 * x2 * y1 * y2 * y3 * ((z4 * z1 + z2 * z5) - z1 * z5)) // r ^ 2) + ((a // r ^ 2) // z4) // z5 ^ 2, (((((((((r // y1) // y2) // y3) // x1 ^ 2) // x2 ^ 2) // z2) // z3) // a) // z4) // z5], [((r // z1) // x2) // x1, (-((x1 * x2) ^ 2) * (y1 * y2 * y3) ^ 2 * z3 * z4 * z5 * (((-z2 * z5 + z2 * z4) - z4 * z1) + z1 * z5) * a) // r ^ 2 - ((x1 * y1 * y2 * y3 * x2 * z3 * a ^ 2) // r ^ 2) // z5, ((-((y1 * y3 + y2 * y3 + y1 * y2)) * (x1 * x2 * y1 * y2 * y3 * z1 * z4 * z5 ^ 2 * (z4 - z5) - a) * r ^ 3) // z5 + (z4 - z5) * x1 ^ 2 * x2 ^ 2 * y1 ^ 2 * y2 ^ 2 * y3 ^ 2 * z5 ^ 2 * z2 * z1 * z4 * (y3 + y2 + y1) * r) - (((x1 * x2 * y1 * y2 * y3 * (((x1 * x2) ^ 2 * (y1 * y2 * y3) ^ 2 * z1 * z4 ^ 2 * z5 ^ 4 * ((z5 * z2 ^ 2 * z4 + (z5 - z4) * z1 * z3 * z4) - z5 ^ 2 * z2 ^ 2) + x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * a * ((2 * z4 * z1 * z3 - z5 * z1 * z3) + z5 * z2 * z1 + z5 * z2 * z3)) - z3 * a ^ 2)) // r) // z5 ^ 2) // z4, (((-((z4 - z5)) * (y1 * y3 + y2 * y3 + y1 * y2) * x1 ^ 3 * x2 ^ 3 * z1 * z5 ^ 2 * z4 * z3 * z2 * y1 ^ 2 * y2 ^ 2 * y3 ^ 2 + (((y3 + y2 + y1) * (x1 * x2 * y1 * y2 * y3 * z2 * z4 * z5 ^ 2 * (z4 - z5) + a) * r ^ 4) // z5) // z4) - r ^ 2 * (x1 * x2) ^ 2 * (y1 * y2 * y3) ^ 2 * z5 * ((-z1 * z3 * z4 ^ 2 + z4 * z2 ^ 2 * z5 + z5 * z1 * z4 * z3) - z5 ^ 2 * z2 ^ 2)) - ((r ^ 2 * a * x1 * x2 * y1 * y2 * y3 * (((z4 * z3 + z4 * z1) - z2 * z4) + 2 * z5 * z2)) // z4) // z5) + ((r ^ 2 * a ^ 2) // z4 ^ 2) // z5 ^ 3, -x1 * x2 * y1 * y2 * y3 * (z2 - z1) * (z4 - z5) * a * r - ((a ^ 2 * r) // z5 ^ 2) // z4, ((((((((-1 // z3) // z4) // z2) // y1) // y2) // y3) // z5) // x1 ^ 2) // x2 ^ 2 * r ^ 4 + y1 + y3 + y2]], [[z1, ((z2 - z1) * (z4 - z5) * a * r ^ 3) // z5 + (((((((a ^ 2 * r ^ 3) // x1) // y1) // y2) // y3) // x2) // z5 ^ 3) // z4, ((x2 ^ 2 * x1 ^ 2 * y2 * y3 * z5 * y1 * (z4 - z5) * (y1 * y3 + y2 * y3 + y1 * y2) * z1 * z4 * z3 * z2 * r ^ 2 - (y3 + y2 + y1) * x1 ^ 2 * x2 ^ 2 * y1 * y2 * y3 * z2 * z3 * (x1 * x2 * y1 * y2 * y3 * z2 * z4 * z5 ^ 2 * (-z5 + z4) + a) * z1) + x1 * x2 * y1 * y2 * y3 * (z4 - z5) * (z2 ^ 2 * z5 - z1 * z4 * z3) * r ^ 4 + (a * (((z3 + z1) - z2) + (2 * z5 * z2) // z4) * r ^ 4) // z5 ^ 2) - (((((((a ^ 2 * r ^ 4) // x1) // x2) // y1) // y2) // y3) // z4 ^ 2) // z5 ^ 4, ((-((y3 + y2 + y1)) * (x1 + x2) * x1 ^ 2 * x2 ^ 2 * y1 * y2 * y3 * z2 * z3 * (x1 * x2 * y1 * y2 * y3 * z2 * z4 * z5 ^ 2 * (-z5 + z4) + a) * z1 - (y1 * y3 + y2 * y3 + y1 * y2) * (x1 * x2 * z1 * z4 * (z4 - z5) - (((a // y1) // y2) // y3) // z5 ^ 2) * r ^ 5) + ((x1 * x2 * y1 * y2 * y3 * (z5 - z4) * (z1 * z4 * z3 - z5 * z2 ^ 2) + ((a * (((z4 * z3 + z4 * z1) - z2 * z4) + 2 * z5 * z2)) // z4) // z5 ^ 2) - ((((((a ^ 2 // x1) // x2) // y1) // y2) // y3) // z4 ^ 2) // z5 ^ 4) * (x1 + x2) * r ^ 4 + x2 ^ 2 * x1 ^ 2 * y1 * y2 * y3 * z5 * z2 * z1 * z4 * (z4 - z5) * (y3 + y2 + y1) * r ^ 3 + x2 ^ 2 * x1 ^ 2 * y1 * y2 * y3 * z5 * z2 * z1 * z4 * z3 * (z4 - z5) * (y1 * y3 + y2 * y3 + y1 * y2) * (x1 + x2) * r ^ 2) - ((r * x1 * x2 * (((x1 * x2 * y1 * y2 * y3) ^ 2 * z1 * z4 ^ 2 * z5 ^ 4 * (z1 * z3 * z4 - z5 * z2 ^ 2) * (z5 - z4) + a * x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * ((2 * z4 * z1 * z3 - z5 * z1 * z3) + z5 * z2 * z1 + z5 * z2 * z3)) - z3 * a ^ 2)) // z4) // z5 ^ 3, (x1 + x2) * (((z1 - z2) * (z5 - z4)) // z5 + ((((((a // x1) // y1) // y2) // y3) // x2) // z5 ^ 3) // z4) * r ^ 3 * a - (x1 * x2 * z3 * (x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * (z1 - z2) * (z5 - z4) + a) * a) // z5 ^ 2, (((-((y1 * y3 + y2 * y3 + y1 * y2)) * r) // y1) // y2) // y3 + z1 * (x1 + x2) + (x1 ^ 2 * x2 ^ 2 * y1 * y2 * y3 * z2 * z5 * z4 * z3) // r ^ 3], [0, z2, (((((((y1 * y3 + y2 * y3 + y1 * y2) // x2) // x1 * r ^ 5) // y1) // y2) // y3) // a - (z5 * z2 * (y3 + y2 + y1) * r ^ 3) // a) + r * ((x1 * x2 * y1 * y2 * y3 * z5 * (-z4 * z3 * z1 + z2 ^ 2 * z5)) // a + ((z3 - z2) // z5) // z4), (((-z2 * z5 * (y3 + y2 + y1) * (x1 + x2) * r ^ 3) // a - r ^ 2 * ((z4 * x1 * x2 * z5 * z1) // a - ((((1 // y1) // y2) // y3) // z4) // z5) * (y1 * y3 + y2 * y3 + y1 * y2)) + (((r * ((x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * (-z4 * z3 * z1 + z2 ^ 2 * z5) + a * z3) - a * z2) * (x1 + x2)) // a) // z5) // z4 + (x2 ^ 2 * x1 ^ 2 * z2 * y1 * y2 * y3 * z5 ^ 2 * z1 * z4 * (y3 + y2 + y1)) // a + ((x2 ^ 2 * x1 ^ 2 * z2 * z3 * y1 * y2 * y3 * z5 ^ 2 * z1 * z4 * (y1 * y3 + y2 * y3 + y1 * y2) * (x1 + x2)) // a) // r) - (x1 * x2 * ((((x1 * x2 * y1 * y2 * y3) ^ 2 * z1 * z4 * z5 ^ 2 * (-z1 * z3 * z4 + z5 * z2 ^ 2)) // a + (x1 * x2 * y1 * y2 * y3 * z3 * (2 * z4 * z1 + z5 * z2)) // z4) - ((z3 * a) // z4 ^ 2) // z5 ^ 2)) // r ^ 2, ((((-((y1 * y3 + y2 * y3 + y1 * y2)) * r) // y1) // y2) // y3 + z2 * (x1 + x2)) - (((x1 * x2 * z3 * (x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * ((-z4 * z1 + z2 * z4) - z2 * z5) + a)) // r ^ 3) // z4) // z5, (((((((1 // x1) // x2) // y1) // y2) // y3) // a) // z1) // z4], [0, 0, z3, z3 * (x1 + x2) - (((x1 * x2 * z3 * (x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * (z2 * z5 + z4 * z1) - a)) // r ^ 3) // z4) // z5, (-x1 * x2 * z3 * (x1 * x2 * y1 * y2 * y3 * z2 * z4 * z5 ^ 2 * (-z5 + z4) + a)) // r ^ 4, (((((((z5 // z1) // r) // x2) // x1) // y1) // y2) // y3) // a], [0, 0, 0, z5, ((z4 - z5) * z4) // r * z5, (-(z5 ^ 2) // r ^ 4) // a * z4], [0, 0, 0, 0, z4, (-1 // a) // r ^ 3 * z5], [0, 0, 0, 0, 0, z5]]]
            end))
chevieset(:G4_22, :HeckeRepresentation, function (ST, para, root, i)
        local X, Y, Z, v, rep, m, ci
        X = (chevieget(:G4_22, :GetParams))(ST, para)
        Z = X[3]
        Y = X[2]
        X = X[1]
        rep = function (char,)
                local r, dim
                dim = char[1]
                r = (chevieget(:G4_22, :Rep))[Symbol(dim)]
                if dim == 1
                    return r(X[char[2]], Y[char[3]], Z[char[4]])
                elseif dim == 2
                    if ST in 4:7
                        Z = Drop(Z, char[4])
                        if ST == 4
                            return [[[0, -(Z[2])], [Z[1], 0]], [[0, 0], [0, 0]], [[Z[2], Z[2]], [0, Z[1]]]]
                        else
                            return r(X, Drop(Y, char[3]), Z, char[2])
                        end
                    else
                        return r(X, Drop(Y, char[3]), Z[(Combinations(1:length(Z), 2))[char[4]]], char[2])
                    end
                elseif dim == 3
                    X = X[[char[3], 3 - char[3]]]
                    if ST == 4
                        return [[[0, 0, 1], [0, -1, 0], [1, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[Z[1], -1, Z[2]], [0, Z[2], -((Z[3] * Z[1] + Z[2] ^ 2))], [0, 0, Z[3]]]]
                    elseif ST == 6
                        return [[[X[2], 0, 0], [(-(X[2]) * Z[3] - X[1] * Z[1]) - X[1] * Z[2], X[1], 0], [X[2] * Z[3] * Z[1] - X[1] * Z[2] ^ 2, 0, X[1]]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[Z[3], 1, 0], [0, Z[1], 1], [0, 0, Z[2]]]]
                    elseif ST in [5, 7]
                        return r(X, Y, Z, char[2])
                    elseif ST in 8:15
                        return r(X, Y, Drop(Z, char[4]), char[2])
                    else
                        return r(X, Y, Z[(Combinations(1:5, 3))[char[4]]], char[2])
                    end
                elseif dim == 4
                    Y = Concatenation(Drop(Y, char[3]), [Y[char[3]]])
                    if ST in 8:15
                        return r(X, Y, Z, char[2])
                    else
                        return r(X, Y, Drop(Z, char[4]), char[2])
                    end
                elseif dim == 5
                    return r(X[[char[3], 3 - char[3]]], Concatenation([Y[char[4]]], Drop(Y, char[4])), Z, char[2])
                elseif dim == 6
                    return r(X, Y, Concatenation(Drop(Z, char[3]), [Z[char[3]]]), char[2])
                end
            end
        ci = (G4_22FetchIndexChars(ST, para))[i]
        m = rep(((chevieget(:G4_22, :paramchars))(ST))[ci]) + 0 * Product(para, Product)
        return map((x->begin
                        ApplyWord(x, m)
                    end), (chevieget(:G4_22, :Embed))(ST))
    end)
chevieset(:G4_22, :Representation, function (ST, i)
        local para
        para = (chevieget(:G4_22, :EigenvaluesGeneratingReflections))(ST)
        para = map((x->begin
                        map((j->begin
                                    E(1 // x, j)
                                end), 0:1 // x - 1)
                    end), para)
        return (chevieget(:G4_22, :HeckeRepresentation))(ST, para, [], i)
    end)
(CHEVIE[:families])[:G14] = Dict{Symbol, Any}(:fourierMat => ER(-3) // 24 * [[4, -4, 4, -4, -4, -4, -4, -4, 0, 0, -4, -4, 4, 4, 0, 0, 0, 0], [-4, 4, 4, -4, 4, 4, 4, 4, 0, 0, -4, -4, 4, 4, 0, 0, 0, 0], [4, 4, 4, 4, -4, -4, 4, 4, 0, 0, -4, -4, -4, -4, 0, 0, 0, 0], [-4, -4, 4, 4, 4, 4, -4, -4, 0, 0, -4, -4, -4, -4, 0, 0, 0, 0], [-4, 4, -4, 4, 4 * E(3, 2), 4 * E(3), 4 * E(3, 2), 4 * E(3), 0, 0, -2, -2, 2, 2, 2 * ER(-3), -2 * ER(-3), 2 * ER(-3), -2 * ER(-3)], [-4, 4, -4, 4, 4 * E(3), 4 * E(3, 2), 4 * E(3), 4 * E(3, 2), 0, 0, -2, -2, 2, 2, -2 * ER(-3), 2 * ER(-3), -2 * ER(-3), 2 * ER(-3)], [-4, 4, 4, -4, 4 * E(3, 2), 4 * E(3), 4 * E(3, 2), 4 * E(3), 0, 0, 2, 2, -2, -2, -2 * ER(-3), 2 * ER(-3), -2 * ER(-3), 2 * ER(-3)], [-4, 4, 4, -4, 4 * E(3), 4 * E(3, 2), 4 * E(3), 4 * E(3, 2), 0, 0, 2, 2, -2, -2, 2 * ER(-3), -2 * ER(-3), 2 * ER(-3), -2 * ER(-3)], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * ER(6), -2 * ER(6), -2 * ER(6), 2 * ER(6), 2 * ER(6), -2 * ER(6), -2 * ER(6), 2 * ER(6)], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * ER(6), -2 * ER(6), -2 * ER(6), 2 * ER(6), -2 * ER(6), 2 * ER(6), 2 * ER(6), -2 * ER(6)], [-4, -4, -4, -4, -2, -2, 2, 2, 2 * ER(6), 2 * ER(6), -2 + ER(6), -2 - ER(6), -2 + ER(6), -2 - ER(6), ER(6), ER(6), ER(6), ER(6)], [-4, -4, -4, -4, -2, -2, 2, 2, -2 * ER(6), -2 * ER(6), -2 - ER(6), -2 + ER(6), -2 - ER(6), -2 + ER(6), -(ER(6)), -(ER(6)), -(ER(6)), -(ER(6))], [4, 4, -4, -4, 2, 2, -2, -2, -2 * ER(6), -2 * ER(6), -2 + ER(6), -2 - ER(6), -2 + ER(6), -2 - ER(6), ER(6), ER(6), ER(6), ER(6)], [4, 4, -4, -4, 2, 2, -2, -2, 2 * ER(6), 2 * ER(6), -2 - ER(6), -2 + ER(6), -2 - ER(6), -2 + ER(6), -(ER(6)), -(ER(6)), -(ER(6)), -(ER(6))], [0, 0, 0, 0, 2 * ER(-3), -2 * ER(-3), -2 * ER(-3), 2 * ER(-3), 2 * ER(6), -2 * ER(6), ER(6), -(ER(6)), ER(6), -(ER(6)), (2 + ER(-2)) * ER(-3), (2 + ER(-2)) * ER(-3), (-2 + ER(-2)) * ER(-3), (-2 + ER(-2)) * ER(-3)], [0, 0, 0, 0, -2 * ER(-3), 2 * ER(-3), 2 * ER(-3), -2 * ER(-3), -2 * ER(6), 2 * ER(6), ER(6), -(ER(6)), ER(6), -(ER(6)), (2 + ER(-2)) * ER(-3), (2 + ER(-2)) * ER(-3), (-2 + ER(-2)) * ER(-3), (-2 + ER(-2)) * ER(-3)], [0, 0, 0, 0, 2 * ER(-3), -2 * ER(-3), -2 * ER(-3), 2 * ER(-3), -2 * ER(6), 2 * ER(6), ER(6), -(ER(6)), ER(6), -(ER(6)), (-2 + ER(-2)) * ER(-3), (-2 + ER(-2)) * ER(-3), (2 + ER(-2)) * ER(-3), (2 + ER(-2)) * ER(-3)], [0, 0, 0, 0, -2 * ER(-3), 2 * ER(-3), 2 * ER(-3), -2 * ER(-3), 2 * ER(6), -2 * ER(6), ER(6), -(ER(6)), ER(6), -(ER(6)), (-2 + ER(-2)) * ER(-3), (-2 + ER(-2)) * ER(-3), (2 + ER(-2)) * ER(-3), (2 + ER(-2)) * ER(-3)]], :eigenvalues => [E(3, 2), E(3, 2), E(3, 2), -(E(3, 2)), 1, 1, 1, 1, E(8), E(8, 3), 1, 1, -1, -1, E(4), -(E(4)), -(E(4)), E(4)], :charLabels => map(string, 1:18), :special => 12, :cospecial => 12, :name => "X_{18}", :explanation => "mysteryG14")
chevieset(:G4_22, :UnipotentCharacters, function (ST,)
        local r3, I, J, cuspidal
        I = E(4)
        J = E(3)
        r3 = -I * ER(-3)
        if ST == 4
            return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:2, :rank => 2, :ST => 4), :levi => [], :parameterExponents => [1, 1], :charNumbers => 1:7, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [2], :rank => 1), :levi => [1], :parameterExponents => [3], :charNumbers => [9, 8], :eigenvalue => E(3, 2), :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [10], :eigenvalue => -1, :cuspidalName => "G_4")], :families => [Family("C1", [1]), Family(((CHEVIE[:families])[:X])(3), [6, 5, 8], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => -1)), Family("C1", [7]), Family("X5", [2, 4, 10, 9, 3], Dict{Symbol, Any}(:signs => [1, 1, -1, -1, 1], :ennola => -5))], :a => [0, 4, 4, 4, 1, 1, 2, 1, 4, 4], :A => [0, 8, 8, 8, 5, 5, 6, 5, 8, 8])
        elseif ST == 6
            return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:2, :rank => 2, :ST => 6), :levi => [], :parameterExponents => [1, 1], :charNumbers => [1, 2, 3, 4, 5, 6, 12, 10, 8, 11, 7, 9, 13, 14], :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1], :rank => 1, :p => 4, :q => 1), :levi => [2], :parameterExponents => [[3, 3, 0, 3]], :charNumbers => [15, 17, 31, 16], :eigenvalue => E(3, 2), :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [18], :eigenvalue => -(E(3, 2)), :cuspidalName => "G_6[-\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [19], :eigenvalue => -(E(3, 2)), :cuspidalName => "G_6^2[-\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [20], :eigenvalue => -1, :cuspidalName => "G_6[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [21], :eigenvalue => -1, :cuspidalName => "G_6^2[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [22], :eigenvalue => -1, :cuspidalName => "G_6^3[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [23], :eigenvalue => -1, :cuspidalName => "G_6^4[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [24], :eigenvalue => I, :cuspidalName => "G_6[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [25], :eigenvalue => I, :cuspidalName => "G_6^2[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [26], :eigenvalue => -I, :cuspidalName => "G_6[-i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [27], :eigenvalue => -I, :cuspidalName => "G_6^2[-i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [28], :eigenvalue => E(12, 5), :cuspidalName => "G_6[\\zeta_{12}^5]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [29], :eigenvalue => E(8, 3), :qEigen => 1 // 2, :cuspidalName => "G_6[\\zeta_8^3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [30], :eigenvalue => E(8, 7), :qEigen => 1 // 2, :cuspidalName => "G_6[\\zeta_8^7]")], :families => [Family("C1", [1]), Family(ComplexConjugate(SubFamilyij(((CHEVIE[:families])[:X])(12), 1, 3, (3 + ER(-3)) // 2)), [7, 13, 8, 2, 27, 21, 24, 18, 15, 19, 10, 25, 22, 3, 9, 17, 28, 20, 4, 26, 16, 23], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1], :cospecial => 11, :ennola => 18)), Family("C1", [14]), Family("Z4", [29, 12, 30, 11], Dict{Symbol, Any}(:signs => [-1, 1, 1, -1], :ennola => 1)), Family(((CHEVIE[:families])[:X])(3), [5, 6, 31], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1))], :a => [0, 1, 1, 1, 10, 10, 1, 1, 1, 1, 5, 5, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 10], :A => [0, 11, 11, 11, 14, 14, 11, 11, 11, 11, 13, 13, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 14])
        elseif ST == 8
            return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:2, :rank => 2, :ST => 8), :levi => [], :parameterExponents => [1, 1], :charNumbers => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 13, 12, 11, 16, 15], :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2], :rank => 1, :p => 4, :q => 1), :levi => [1], :parameterExponents => [[3, 0, 0, 2]], :charNumbers => [17, 27, 25, 22], :eigenvalue => -1, :cuspidalName => ImprimitiveCuspidalName([[0], [0, 1], [0, 1], []])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2], :rank => 1, :p => 4, :q => 1), :levi => [1], :parameterExponents => [[3, 0, 2, 0]], :charNumbers => [18, 29, 21, 30], :eigenvalue => -I, :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2], :rank => 1, :p => 4, :q => 1), :levi => [1], :parameterExponents => [[3, 2, 0, 0]], :charNumbers => [19, 20, 26, 28], :eigenvalue => -1, :cuspidalName => ImprimitiveCuspidalName([[0], [], [0, 1], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [23], :eigenvalue => E(8, 3), :qEigen => 1 // 2, :cuspidalName => "G_8[\\zeta_8^3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [24], :eigenvalue => E(8, 7), :qEigen => 1 // 2, :cuspidalName => "G_8[\\zeta_8^7]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [31], :eigenvalue => 1, :cuspidalName => "G_8[1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [32], :eigenvalue => I, :cuspidalName => "G_8[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [33], :eigenvalue => I, :cuspidalName => "G_8^2[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [34], :eigenvalue => J, :cuspidalName => "G_8[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [35], :eigenvalue => J ^ 2, :cuspidalName => "G_8[\\zeta_3^2]")], :families => [Family("C1", [1]), Family(((CHEVIE[:families])[:X])(4), [5, 6, 7, 17, 18, 19], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, -1], :ennola => 3)), Family(((CHEVIE[:families])[:X])(4), [11, 12, 13, 20, 21, 22], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, -1], :ennola => 1)), Family("Z4", [23, 15, 24, 16], Dict{Symbol, Any}(:signs => [-1, 1, 1, -1], :ennola => 1)), Family(Dict{Symbol, Any}(:fourierMat => [[-1, -1, 3, -3I, 3I, 1, 3, -3I, -3I, -3, 3, 3I, 3I, 1, -3I, -3I, 4, 4], [-1, -1, 3, 3I, -3I, 1, 3, 3I, 3I, -3, 3, -3I, -3I, 1, 3I, 3I, 4, 4], [3, 3, 3, -3, -3, 3, 3, 3, -3, 3, -3, -3, 3, 3, -3, 3, 0, 0], [-3I, 3I, -3, 3, 3, 3, 3, 3, -3, -3I, -3I, 3I, 3I, -3, 3I, 3I, 0, 0], [3I, -3I, -3, 3, 3, 3, 3, 3, -3, 3I, 3I, -3I, -3I, -3, -3I, -3I, 0, 0], [1, 1, 3, 3, 3, -1, 3, -3, 3, -3, 3, -3, 3, -1, -3, 3, -4, -4], [3, 3, 3, 3, 3, 3, 3, -3, 3, 3, -3, 3, -3, 3, 3, -3, 0, 0], [-3I, 3I, 3, 3, 3, -3, -3, 3, -3, -3I, -3I, -3I, -3I, 3, -3I, -3I, 0, 0], [-3I, 3I, -3, -3, -3, 3, 3, -3, 3, -3I, -3I, -3I, -3I, -3, -3I, -3I, 0, 0], [-3, -3, 3, -3I, 3I, -3, 3, -3I, -3I, 3, -3, -3I, -3I, -3, 3I, 3I, 0, 0], [3, 3, -3, -3I, 3I, 3, -3, -3I, -3I, -3, 3, -3I, -3I, 3, 3I, 3I, 0, 0], [3I, -3I, -3, 3I, -3I, -3, 3, -3I, -3I, -3I, -3I, -3, 3, 3, 3, -3, 0, 0], [3I, -3I, 3, 3I, -3I, 3, -3, -3I, -3I, -3I, -3I, 3, -3, -3, -3, 3, 0, 0], [1, 1, 3, -3, -3, -1, 3, 3, -3, -3, 3, 3, -3, -1, 3, -3, -4, -4], [-3I, 3I, -3, 3I, -3I, -3, 3, -3I, -3I, 3I, 3I, 3, -3, 3, -3, 3, 0, 0], [-3I, 3I, 3, 3I, -3I, 3, -3, -3I, -3I, 3I, 3I, -3, 3, -3, 3, -3, 0, 0], [4, 4, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, -4, 8], [4, 4, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 8, -4]] // 12, :eigenvalues => [1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -I, -I, 1, I, I, J, J ^ 2], :name => "?18", :explanation => "mystery G8", :special => 1, :cospecial => 2, :ennola => 2), [2, 4, 3, 8, 10, 9, 14, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1]))], :a => [0, 6, 6, 6, 1, 1, 1, 6, 6, 6, 2, 2, 2, 6, 3, 3, 1, 1, 1, 2, 2, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], :A => [0, 18, 18, 18, 11, 11, 11, 18, 18, 18, 14, 14, 14, 18, 15, 15, 11, 11, 11, 14, 14, 14, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])
        elseif ST == 14
            cuspidal = function (arg...,)
                    local res, n
                    n = "G_{14}"
                    if length(arg) > 2 && IsInt(arg[3])
                        n *= SPrint("^", arg[3])
                    end
                    n *= SPrint("[", FormatTeX(arg[2]), "]")
                    res = Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:6, :parameterExponents => [], :charNumbers => [arg[1]], :eigenvalue => arg[2], :cuspidalName => n)
                    if length(arg) > 2 && !(IsInt(arg[length(arg)]))
                        res[:qEigen] = arg[length(arg)]
                    end
                    return res
                end
            return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:2, :rank => 2, :ST => 14), :levi => [], :parameterExponents => [1, 1], :charNumbers => [1, 2, 3, 4, 5, 6, 8, 7, 9, 12, 11, 10, 15, 14, 13, 16, 20, 18, 21, 17, 19, 22, 23, 24], :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1], :rank => 1, :p => 6, :q => 1), :levi => [2], :parameterExponents => [[3, 4, 4, 0, 4, 4]], :charNumbers => [66, 26, 27, 79, 28, 25], :eigenvalue => J ^ 2, :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])), cuspidal(34, 1), cuspidal(35, 1, 2), cuspidal(29, -1), cuspidal(30, -1, 2), cuspidal(31, -1, 3), cuspidal(32, -1, 4), cuspidal(33, -1, 5), cuspidal(73, -1, 6), cuspidal(74, -1, 7), cuspidal(40, J), cuspidal(41, J, 2), cuspidal(42, J, 3), cuspidal(43, J, 4), cuspidal(50, J, 5), cuspidal(51, J, 6), cuspidal(36, J ^ 2), cuspidal(37, J ^ 2, 2), cuspidal(52, -J), cuspidal(53, -J, 2), cuspidal(38, -(J ^ 2)), cuspidal(39, -(J ^ 2), 2), cuspidal(54, -I), cuspidal(55, -I, 2), cuspidal(56, I, 3), cuspidal(57, I, 4), cuspidal(58, I), cuspidal(59, I, 2), cuspidal(60, -I, 3), cuspidal(61, -I, 4), cuspidal(46, E(8)), cuspidal(47, E(8, 3), 2), cuspidal(48, E(8, 3)), cuspidal(49, E(8), 2), cuspidal(69, E(9, 5), 1 // 3), cuspidal(70, E(9, 5), 2, 2 // 3), cuspidal(71, E(9, 8), 1 // 3), cuspidal(72, E(9, 8), 2, 2 // 3), cuspidal(67, E(9, 2), 1 // 3), cuspidal(68, E(9, 2), 2, 2 // 3), cuspidal(62, E(12)), cuspidal(63, E(12, 7), 2), cuspidal(64, E(12, 7)), cuspidal(65, E(12), 2), cuspidal(75, E(16, 5), 1 // 2), cuspidal(77, E(16, 13), 1 // 2), cuspidal(78, E(16, 15), 1 // 2), cuspidal(76, E(16, 7), 1 // 2), cuspidal(44, E(24, 11)), cuspidal(45, E(24, 17))], :families => [Family("C1", [1]), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)) * Family("G14"), [26, 37, 28, 39, 14, 3, 34, 18, 46, 48, 15, 13, 30, 29, 59, 60, 55, 56, 25, 36, 27, 38, 2, 11, 16, 35, 49, 47, 12, 10, 32, 31, 58, 61, 54, 57, 4, 17, 22, 33, 41, 40, 43, 42, 44, 45, 51, 50, 53, 52, 64, 65, 62, 63], Dict{Symbol, Any}(:signs => [-1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1], :comment => "everything to explain", :ennola => 14)), Family(((CHEVIE[:families])[:X])(3), [23, 24, 66], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 2)), Family("Z9", [19, 70, 67, 20, 72, 71, 21, 68, 69], Dict{Symbol, Any}(:cospecial => 4, :ennola => 2)), Family(Dict{Symbol, Any}(:fourierMat => OnMatrices([[1, 1, 2, 1, 1, -(ER(-2)), -(ER(-2)), -(ER(-2)), -(ER(-2))], [1, 1, 2, 1, 1, ER(-2), ER(-2), ER(-2), ER(-2)], [2, 2, 0, -2, -2, 0, 0, 0, 0], [1, 1, -2, 1, 1, -(ER(-2)), ER(-2), -(ER(-2)), ER(-2)], [1, 1, -2, 1, 1, ER(-2), -(ER(-2)), ER(-2), -(ER(-2))], [-(ER(-2)), ER(-2), 0, -(ER(-2)), ER(-2), 0, -2 * E(4), 0, 2 * E(4)], [-(ER(-2)), ER(-2), 0, ER(-2), -(ER(-2)), -2 * E(4), 0, 2 * E(4), 0], [-(ER(-2)), ER(-2), 0, -(ER(-2)), ER(-2), 0, 2 * E(4), 0, -2 * E(4)], [-(ER(-2)), ER(-2), 0, ER(-2), -(ER(-2)), 2 * E(4), 0, -2 * E(4), 0]] // 4, #= none:244 =# @perm_str("(4,5)")), :comment => "everything to explain", :eigenvalues => [1, 1, 1, -1, -1, E(16, 5), E(16, 7), -(E(16, 5)), -(E(16, 7))], :qEigen => [0, 0, 0, 0, 0, 1 // 2, 1 // 2, 1 // 2, 1 // 2], :special => 2, :ennola => 2), [8, 9, 7, 73, 74, 75, 76, 77, 78]), Family(((CHEVIE[:families])[:X])(3), [5, 6, 79], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1))], :a => [0, 1, 1, 1, 20, 20, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 1, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 20], :A => [0, 23, 23, 23, 28, 28, 27, 27, 27, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26, 23, 25, 25, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28])
        else
            return false
        end
    end)
chevieset(:G4_22, :Invariants, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [function (x1, x2)
                            return x1 ^ 4 - 8 * x1 * x2 ^ 3
                        end, function (x1, x2)
                            return (x1 ^ 6 + 20 * x1 ^ 3 * x2 ^ 3) - 8 * x2 ^ 6
                        end], Symbol("5") => [function (x1, x2)
                            return (x1 ^ 6 + 20 * x1 ^ 3 * x2 ^ 3) - 8 * x2 ^ 6
                        end, function (x1, x2)
                            return 3 * x1 ^ 3 * x2 ^ 9 + 3 * x1 ^ 6 * x2 ^ 6 + x1 ^ 9 * x2 ^ 3 + x2 ^ 12
                        end], Symbol("6") => [function (x1, x2)
                            return 8 * x1 * x2 ^ 3 + x1 ^ 4
                        end, function (x1, x2)
                            return ((-3 * x1 ^ 3 * x2 ^ 9 + 3 * x1 ^ 6 * x2 ^ 6) - x1 ^ 9 * x2 ^ 3) + x2 ^ 12
                        end], Symbol("7") => [function (x1, x2)
                            return (x1 ^ 10 * x2 ^ 2 - 2 * x1 ^ 6 * x2 ^ 6) + x1 ^ 2 * x2 ^ 10
                        end, function (x1, x2)
                            return ((x1 ^ 12 - 33 * x1 ^ 8 * x2 ^ 4) - 33 * x1 ^ 4 * x2 ^ 8) + x2 ^ 12
                        end], Symbol("8") => [function (x1, x2)
                            return 14 * x1 ^ 4 * x2 ^ 4 + x1 ^ 8 + x2 ^ 8
                        end, function (x1, x2)
                            return (-33 * x1 ^ 4 * x2 ^ 8 - 33 * x1 ^ 8 * x2 ^ 4) + x1 ^ 12 + x2 ^ 12
                        end], Symbol("9") => [function (x1, x2)
                            return 56 * x1 ^ 4 * x2 ^ 4 + 16 * x1 ^ 8 + x2 ^ 8
                        end, function (x1, x2)
                            return (((x1 ^ 4 * x2 ^ 20 - 16 * x1 ^ 8 * x2 ^ 16) + 96 * x1 ^ 12 * x2 ^ 12) - 256 * x1 ^ 16 * x2 ^ 8) + 256 * x1 ^ 20 * x2 ^ 4
                        end], Symbol("10") => [function (x1, x2)
                            return ((x1 ^ 12 - 88 * x1 ^ 9 * x2 ^ 3) - 704 * x1 ^ 3 * x2 ^ 9) - 64 * x2 ^ 12
                        end, function (x1, x2)
                            return (((((-512 * x1 ^ 3 * x2 ^ 21 - 1344 * x1 ^ 6 * x2 ^ 18) - 984 * x1 ^ 9 * x2 ^ 15) - 7 * x1 ^ 12 * x2 ^ 12) + 123 * x1 ^ 15 * x2 ^ 9) - 21 * x1 ^ 18 * x2 ^ 6) + x1 ^ 21 * x2 ^ 3
                        end], Symbol("11") => [function (x1, x2)
                            return ((x1 ^ 24 + 4048 * x1 ^ 18 * x2 ^ 6 + 20240 * x1 ^ 15 * x2 ^ 9 + 122544 * x1 ^ 12 * x2 ^ 12) - 161920 * x1 ^ 9 * x2 ^ 15) + 259072 * x1 ^ 6 * x2 ^ 18 + 4096 * x2 ^ 24
                        end, function (x1, x2)
                            return (((((x1 ^ 21 * x2 ^ 3 - 21 * x1 ^ 18 * x2 ^ 6) + 123 * x1 ^ 15 * x2 ^ 9) - 7 * x1 ^ 12 * x2 ^ 12) - 984 * x1 ^ 9 * x2 ^ 15) - 1344 * x1 ^ 6 * x2 ^ 18) - 512 * x1 ^ 3 * x2 ^ 21
                        end], Symbol("12") => [function (x1, x2)
                            return ((x1 ^ 6 + 10 * x1 ^ 4 * x2 ^ 2) - 20 * x1 ^ 2 * x2 ^ 4) - 8 * x2 ^ 6
                        end, function (x1, x2)
                            return (((3 * x1 ^ 8 - 56 * x1 ^ 6 * x2 ^ 2) - 56 * x1 ^ 4 * x2 ^ 4) - 224 * x1 ^ 2 * x2 ^ 6) + 48 * x2 ^ 8
                        end], Symbol("13") => [function (x1, x2)
                            return 14 * x1 ^ 4 * x2 ^ 4 + x1 ^ 8 + x2 ^ 8
                        end, function (x1, x2)
                            return (x1 ^ 2 * x2 ^ 10 - 2 * x1 ^ 6 * x2 ^ 6) + x1 ^ 10 * x2 ^ 2
                        end], Symbol("14") => [function (x1, x2)
                            return (-5 * x1 ^ 2 * x2 ^ 4 - 5 * x1 ^ 4 * x2 ^ 2) + x1 ^ 6 + x2 ^ 6
                        end, function (x1, x2)
                            return ((81 * x1 ^ 2 * x2 ^ 22 + 198 * x1 ^ 4 * x2 ^ 20 + 1309 * x1 ^ 6 * x2 ^ 18 + 264 * x1 ^ 8 * x2 ^ 16 + 2706 * x1 ^ 10 * x2 ^ 14) - 9116 * x1 ^ 12 * x2 ^ 12) + 2706 * x1 ^ 14 * x2 ^ 10 + 264 * x1 ^ 16 * x2 ^ 8 + 1309 * x1 ^ 18 * x2 ^ 6 + 198 * x1 ^ 20 * x2 ^ 4 + 81 * x1 ^ 22 * x2 ^ 2
                        end], Symbol("15") => [function (x1, x2)
                            return ((x1 ^ 12 + 40 * x1 ^ 9 * x2 ^ 3 + 384 * x1 ^ 6 * x2 ^ 6) - 320 * x1 ^ 3 * x2 ^ 9) + 64 * x2 ^ 12
                        end, function (x1, x2)
                            return (((512 * x1 ^ 3 * x2 ^ 21 + 1344 * x1 ^ 6 * x2 ^ 18 + 984 * x1 ^ 9 * x2 ^ 15 + 7 * x1 ^ 12 * x2 ^ 12) - 123 * x1 ^ 15 * x2 ^ 9) + 21 * x1 ^ 18 * x2 ^ 6) - x1 ^ 21 * x2 ^ 3
                        end], Symbol("16") => [function (x, y)
                            return ((228 * x ^ 5 * y ^ 15 + 494 * x ^ 10 * y ^ 10) - 228 * x ^ 15 * y ^ 5) + x ^ 20 + y ^ 20
                        end, function (x, y)
                            return ((-522 * x ^ 5 * y ^ 25 - 10005 * x ^ 10 * y ^ 20) - 10005 * x ^ 20 * y ^ 10) + 522 * x ^ 25 * y ^ 5 + x ^ 30 + y ^ 30
                        end], Symbol("17") => [function (x, y)
                            return ((228 * x ^ 5 * y ^ 15 + 494 * x ^ 10 * y ^ 10) - 228 * x ^ 15 * y ^ 5) + x ^ 20 + y ^ 20
                        end, function (x, y)
                            return ((((-6 * x ^ 5 * y ^ 55 + 330 * x ^ 10 * y ^ 50) - 7230 * x ^ 15 * y ^ 45) + 78540 * x ^ 20 * y ^ 40) - 417510 * x ^ 25 * y ^ 35) + 808566 * x ^ 30 * y ^ 30 + 417510 * x ^ 35 * y ^ 25 + 78540 * x ^ 40 * y ^ 20 + 7230 * x ^ 45 * y ^ 15 + 330 * x ^ 50 * y ^ 10 + 6 * x ^ 55 * y ^ 5
                        end], Symbol("18") => [function (x, y)
                            return ((-522 * x ^ 5 * y ^ 25 - 10005 * x ^ 10 * y ^ 20) - 10005 * x ^ 20 * y ^ 10) + 522 * x ^ 25 * y ^ 5 + x ^ 30 + y ^ 30
                        end, function (x, y)
                            return (((((((((6 * x ^ 5 * y ^ 55 - 330 * x ^ 10 * y ^ 50) + 7230 * x ^ 15 * y ^ 45) - 78540 * x ^ 20 * y ^ 40) + 417510 * x ^ 25 * y ^ 35) - 808566 * x ^ 30 * y ^ 30) - 417510 * x ^ 35 * y ^ 25) - 78540 * x ^ 40 * y ^ 20) - 7230 * x ^ 45 * y ^ 15) - 330 * x ^ 50 * y ^ 10) - 6 * x ^ 55 * y ^ 5
                        end], Symbol("19") => [function (x, y)
                            return ((((-(x ^ 5) * y ^ 55 + 55 * x ^ 10 * y ^ 50) - 1205 * x ^ 15 * y ^ 45) + 13090 * x ^ 20 * y ^ 40) - 69585 * x ^ 25 * y ^ 35) + 134761 * x ^ 30 * y ^ 30 + 69585 * x ^ 35 * y ^ 25 + 13090 * x ^ 40 * y ^ 20 + 1205 * x ^ 45 * y ^ 15 + 55 * x ^ 50 * y ^ 10 + x ^ 55 * y ^ 5
                        end, function (x, y)
                            return ((((-180 * x ^ 5 * y ^ 55 + 204954 * x ^ 10 * y ^ 50 + 11486340 * x ^ 15 * y ^ 45 + 88770255 * x ^ 20 * y ^ 40 + 70567704 * x ^ 25 * y ^ 35 + 83221580 * x ^ 30 * y ^ 30) - 70567704 * x ^ 35 * y ^ 25) + 88770255 * x ^ 40 * y ^ 20) - 11486340 * x ^ 45 * y ^ 15) + 204954 * x ^ 50 * y ^ 10 + 180 * x ^ 55 * y ^ 5 + x ^ 60 + y ^ 60
                        end], Symbol("20") => [function (x, y)
                            return ((34375 * x ^ 3 * y ^ 9 - 4125 * x ^ 6 * y ^ 6) - 275 * x ^ 9 * y ^ 3) + x ^ 12 + 15625 * y ^ 12
                        end, function (x, y)
                            return ((((-3540039062500 * x ^ 3 * y ^ 27 + 955810546875 * x ^ 6 * y ^ 24) - 977050781250 * x ^ 9 * y ^ 21) - 371279296875 * x ^ 12 * y ^ 18) - 2970234375 * x ^ 18 * y ^ 12) + 62531250 * x ^ 21 * y ^ 9 + 489375 * x ^ 24 * y ^ 6 + 14500 * x ^ 27 * y ^ 3 + 8 * x ^ 30 + 244140625000 * y ^ 30
                        end], Symbol("21") => [function (x, y)
                            return ((34375 * x ^ 3 * y ^ 9 - 4125 * x ^ 6 * y ^ 6) - 275 * x ^ 9 * y ^ 3) + x ^ 12 + 15625 * y ^ 12
                        end, function (x, y)
                            return -(x ^ 3) * y ^ 3 * ((5 * y ^ 2 - 5 * x * y) + 2 * x ^ 2) ^ 3 * (25 * y ^ 4 + 25 * y ^ 3 * x + 15 * y ^ 2 * x ^ 2 + 10 * y * x ^ 3 + 4 * x ^ 4) ^ 3 * (-5 * y ^ 2 + 5 * x * y + x ^ 2) ^ 3 * (((25 * y ^ 4 + 25 * y ^ 3 * x + 30 * y ^ 2 * x ^ 2) - 5 * y * x ^ 3) + x ^ 4) ^ 3 * (10 * y ^ 2 + 5 * x * y + x ^ 2) ^ 3 * ((((100 * y ^ 4 - 50 * y ^ 3 * x) + 15 * y ^ 2 * x ^ 2) - 5 * y * x ^ 3) + x ^ 4) ^ 3
                        end], Symbol("22") => [function (x, y)
                            return -x * y ^ 11 + 11 * x ^ 6 * y ^ 6 + x ^ 11 * y
                        end, function (x, y)
                            return ((228 * x ^ 5 * y ^ 15 + 494 * x ^ 10 * y ^ 10) - 228 * x ^ 15 * y ^ 5) + x ^ 20 + y ^ 20
                        end])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :Discriminant, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => function (t1, t2)
                        return -(t2 ^ 2) + t1 ^ 3
                    end, Symbol("5") => function (t1, t2)
                        return 64 * t2 ^ 2 - t1 ^ 2 * t2
                    end, Symbol("6") => function (t1, t2)
                        return 64 * t2 ^ 2 + t1 ^ 3 * t2
                    end, Symbol("7") => function (t1, t2)
                        return t2 ^ 2 * t1 + 108 * t1 ^ 3
                    end, Symbol("8") => function (t1, t2)
                        return -(t2 ^ 2) + t1 ^ 3
                    end, Symbol("9") => function (t1, t2)
                        return t1 ^ 3 * t2 - 432 * t2 ^ 2
                    end, Symbol("10") => function (t1, t2)
                        return 256 * t2 ^ 2 + t1 ^ 2 * t2
                    end, Symbol("11") => function (t1, t2)
                        return (96 * t1 * t2 ^ 2 - t1 ^ 2 * t2) + 14080 * t2 ^ 3
                    end, Symbol("12") => function (t1, t2)
                        return t2 ^ 3 - 27 * t1 ^ 4
                    end, Symbol("13") => function (t1, t2)
                        return 108 * t2 ^ 3 - t1 ^ 3 * t2
                    end, Symbol("14") => function (t1, t2)
                        return 16 * t2 ^ 2 + 27 * t1 ^ 4 * t2
                    end, Symbol("15") => function (t1, t2)
                        return 256 * t1 * t2 ^ 2 + t1 ^ 3 * t2
                    end, Symbol("16") => function (t1, t2)
                        return t2 ^ 2 - t1 ^ 3
                    end, Symbol("17") => function (t1, t2)
                        return 288 * t2 ^ 2 + t1 ^ 3 * t2
                    end, Symbol("18") => function (t1, t2)
                        return 288 * t2 ^ 2 + t1 ^ 2 * t2
                    end, Symbol("19") => function (t1, t2)
                        return t1 * t2 ^ 2 - 746496 * t1 ^ 3
                    end, Symbol("20") => function (t1, t2)
                        return t2 ^ 2 - 64 * t1 ^ 5
                    end, Symbol("21") => function (t1, t2)
                        return 625 * t2 ^ 2 - 64 * t1 ^ 5 * t2
                    end, Symbol("22") => function (t1, t2)
                        return t2 ^ 3 + 1728 * t1 ^ 5
                    end)
        return d[Symbol(ST)]
    end)
chevieset(Symbol("2G5"), :PhiFactors, [1, -1])
chevieset(Symbol("2G5"), :NrConjugacyClasses, 9)
chevieset(Symbol("2G5"), :ClassInfo, function ()
        local res
        res = Dict{Symbol, Any}(:classtext => [[], [1, 2, 2, 1, 2, 2, 1], [1, 2, 2, 1, 2, 2, 1, 1], [1], [1, 1, 2, 1, 1], [1, 1, 2, 2, 1, 1], [1, 2], [1, 2, 1], [2, 1, 2, 1]], :classes => [12, 6, 6, 6, 12, 6, 6, 6, 12], :orders => [2, 24, 24, 24, 6, 8, 24, 8, 6])
        res[:classnames] = map(IntListToString, res[:classtext])
        return res
    end)
chevieset(Symbol("2G5"), :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 8, 2], [1, 16], [2, 9], [2, 5, 2], [2, 1], [3, 2], [3, 4], [3, 6]], :extRefl => [1, 6, 2], :b => [0, 8, 16, 9, 5, 1, 2, 4, 12], :B => [0, 8, 16, 15, 11, 7, 14, 4, 12])
        return res
    end)
chevieset(Symbol("2G5"), :CharTable, function ()
        local res
        res = Dict{Symbol, Any}(:identifier => "2G5", :size => 72, :centralizers => [6, 12, 12, 12, 6, 12, 12, 12, 6], :irreducibles => [[1, 1, 1, 1, 1, 1, 1, 1, 1], -([1, E(3), E(3, 2), E(3), E(3, 2), 1, E(3, 2), 1, E(3)]), [1, E(3, 2), E(3), E(3, 2), E(3), 1, E(3), 1, E(3, 2)], [0, ER(-2), -(ER(-2)), -(ER(-2)), 0, ER(-2), ER(-2), -(ER(-2)), 0], [0, -(ER(-2)) * E(3), ER(-2) * E(3, 2), ER(-2) * E(3), 0, -(ER(-2)), -(ER(-2)) * E(3, 2), ER(-2), 0], -([0, ER(-2) * E(3, 2), -(ER(-2)) * E(3), -(ER(-2)) * E(3, 2), 0, ER(-2), ER(-2) * E(3), -(ER(-2)), 0]), [1, -(E(3)), -(E(3, 2)), -(E(3)), E(3, 2), -1, -(E(3, 2)), -1, E(3)], [1, -(E(3, 2)), -(E(3)), -(E(3, 2)), E(3), -1, -(E(3)), -1, E(3, 2)], [1, -1, -1, -1, 1, -1, -1, -1, 1]])
        return ((CHEVIE[:compat])[:MakeCharacterTable])(res)
    end)
chevieset(:G24, :PrintDiagram, function (indices, title)
        local s
        print(title, " ", indices[1], "\n")
        s = pad("", length(title) - 1)
        print(s, " / \\\n", s, indices[2], "=====", indices[3], "  ", IntListToString(indices[[2, 3, 1, 2, 3, 1, 2, 3, 1]]), "==", IntListToString(indices[[3, 2, 3, 1, 2, 3, 1, 2, 3]]), "\n")
    end)
chevieset(:G24, :GeneratingRoots, [[1, ER(-7), 0], [1, -(ER(-7)), 0], [(-1 - ER(-7)) // 2, (-7 - 3 * ER(-7)) // 6, -4 // 3]])
chevieset(:G24, :GeneratingCoRoots, [[1, (-3 * ER(-7)) // 7, 0], [1, (3 * ER(-7)) // 7, 0], [(-1 + ER(-7)) // 2, (-7 + 3 * ER(-7)) // 14, -1 // 2]] // 2)
chevieset(:G24, :CartanMat, function ()
        return chevieget(:G24, :GeneratingCoRoots) * TransposedMat(chevieget(:G24, :GeneratingRoots))
    end)
chevieset(:G24, :EigenvaluesGeneratingReflections, [1 // 2, 1 // 2, 1 // 2])
chevieset(:G24, :BraidRelations, [[[1, 2, 1], [2, 1, 2]], [[1, 3, 1], [3, 1, 3]], [[3, 2, 3, 2], [2, 3, 2, 3]], [[2, 3, 1, 2, 3, 1, 2, 3, 1], [3, 2, 3, 1, 2, 3, 1, 2, 3]]])
chevieset(:G24, :AltPres, [Dict{Symbol, Any}(:gens => [[1], [2, 3, -2], [2]], :rels => [[[1, 2, 1, 2], [2, 1, 2, 1]], [[2, 3, 2, 3], [3, 2, 3, 2]], [[1, 3, 1], [3, 1, 3]], [[2, 1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3, 1]]]), Dict{Symbol, Any}(:gens => [[2], [3], [-3, -2, 1, 2, 3]], :rels => [[[1, 3, 1, 3], [3, 1, 3, 1]], [[3, 2, 3, 2], [2, 3, 2, 3]], [[1, 2, 1, 2], [2, 1, 2, 1]], [[2, 3, 1, 2, 3, 1, 2], [1, 2, 3, 1, 2, 3, 1]], [[2, 3, 1, 2, 3, 1, 2], [3, 1, 2, 3, 1, 2, 3]]])])
chevieset(:G24, :ReflectionDegrees, [4, 6, 14])
chevieset(:G24, :Size, Product(chevieget(:G24, :ReflectionDegrees)))
chevieset(:G24, :NrConjugacyClasses, 12)
chevieset(:G24, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [2, 3]], [1:3]]
        return t[s + 1]
    end)
chevieset(:G24, :WordsClassRepresentatives, [[], [1], [2, 3], [1, 3], [1, 2, 3, 1, 2, 3, 1, 2, 3], [1, 2, 3], [2, 3, 2, 3], [1, 2, 3, 1, 2, 3, 1], [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2], [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]])
chevieset(:G24, :ClassNames, [".", "1", "23", "13", "ccc", "c", "2323", "cc1", "cccccc", "cc", "ccc12", "z"])
chevieset(:G24, :PowerMaps, [nothing, [1, 1, 7, 4, 9, 10, 1, 4, 9, 10, 7, 1], [1, 2, 3, 1, 6, 5, 7, 12, 10, 9, 11, 12], nothing, [1, 2, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12], nothing, [1, 2, 3, 4, 12, 12, 7, 8, 1, 1, 11, 12], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], nothing, [1, 2, 3, 4, 6, 5, 7, 8, 10, 9, 11, 12]])
chevieset(:G24, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G24, :WordsClassRepresentatives), :classnames => chevieget(:G24, :ClassNames), :classparams => chevieget(:G24, :ClassNames), :orders => [1, 2, 4, 3, 14, 14, 2, 6, 7, 7, 4, 2], :classes => [1, 21, 42, 56, 24, 24, 21, 56, 24, 24, 42, 1]))
chevieset(:G24, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 21], [3, 8], [3, 1], [3, 10], [3, 3], [6, 2], [6, 9], [7, 6], [7, 3], [8, 4], [8, 5]], :opdam => #= none:7 =# @perm_str("(11,12)"), :extRefl => [1, 4, 5, 2])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G24, :CycPolSchurElements, [[1, 0, 2, 2, 2, 3, 4, 6, 7, 14], [1, -21, 2, 2, 2, 3, 4, 6, 7, 14], [2 * ER(-7), -8, 2, 2, 2, 1 // 7, 2 // 7, 4 // 7, 3 // 14, 5 // 14, 13 // 14], [-2 * ER(-7), -1, 2, 2, 2, 3 // 7, 5 // 7, 6 // 7, 1 // 14, 9 // 14, 11 // 14], [-2 * ER(-7), -8, 2, 2, 2, 3 // 7, 5 // 7, 6 // 7, 1 // 14, 9 // 14, 11 // 14], [2 * ER(-7), -1, 2, 2, 2, 1 // 7, 2 // 7, 4 // 7, 3 // 14, 5 // 14, 13 // 14], [2, -1, 2, 4, 7], [2, -8, 2, 4, 7], [1, -6, 2, 2, 2, 3, 4, 6], [1, -3, 2, 2, 2, 3, 4, 6], [2, -4, 3, 7], [2, -4, 3, 7]])
chevieset(:G24, :sparseFakeDegrees, [[1, 0], [1, 21], [1, 8, 1, 16, 1, 18], [1, 1, 1, 9, 1, 11], [1, 10, 1, 12, 1, 20], [1, 3, 1, 5, 1, 13], [1, 2, 1, 4, 1, 6, 1, 8, 1, 10, 1, 12], [1, 9, 1, 11, 1, 13, 1, 15, 1, 17, 1, 19], [1, 6, 1, 8, 1, 10, 1, 12, 1, 14, 1, 16, 1, 18], [1, 3, 1, 5, 1, 7, 1, 9, 1, 11, 1, 13, 1, 15], [1, 4, 1, 6, 1, 8, 1, 10, 1, 12, 2, 14, 1, 16], [1, 5, 2, 7, 1, 9, 1, 11, 1, 13, 1, 15, 1, 17]])
chevieset(:G24, :HeckeCharTable, function (param, root)
        local r, tbl, p, f1, f3, f6, f7, f8, u
        r = (param[1])[1]
        p = (param[1])[2]
        u = GetRoot(-p * r, 2)
        f1 = function (r,)
                return [1, r, r ^ 2, r ^ 2, r ^ 9, r ^ 3, r ^ 4, r ^ 7, r ^ 18, r ^ 6, r ^ 11, r ^ 21]
            end
        f3 = function (p, r, a)
                return [3, 2p + r, p ^ 2, p * r + p ^ 2, (-1 - a) // 2 * p ^ 6 * r ^ 3, (-1 + a) // 2 * p ^ 2 * r, -2 * p ^ 2 * r ^ 2 + p ^ 4, 0, (-1 - a) // 2 * p ^ 12 * r ^ 6, (-1 + a) // 2 * p ^ 4 * r ^ 2, -(p ^ 7) * r ^ 4, 3 * p ^ 14 * r ^ 7]
            end
        f6 = function (r, p)
                return [6, 2p + 4r, 2 * p * r + 2 * r ^ 2, 2 * p * r + 2 * r ^ 2, p ^ 3 * r ^ 6, p * r ^ 2, 2 * r ^ 4, 0, -(p ^ 6) * r ^ 12, -(p ^ 2) * r ^ 4, 0, -6 * p ^ 7 * r ^ 14]
            end
        f7 = function (p, r)
                return [7, 4p + 3r, 2 * p * r + p ^ 2, 2 * p * r + 2 * p ^ 2 + r ^ 2, 0, 0, -2 * p ^ 2 * r ^ 2 + p ^ 4, p ^ 4 * r ^ 3, 0, 0, -(p ^ 6) * r ^ 5, 7 * p ^ 12 * r ^ 9]
            end
        f8 = function (p, r, u)
                return [8, 4p + 4r, 2 * p * r + p ^ 2 + r ^ 2, 3 * p * r + p ^ 2 + r ^ 2, u * p ^ 4 * r ^ 4, -p * r * u, -2 * p ^ 2 * r ^ 2 + p ^ 4 + r ^ 4, p ^ 3 * r ^ 3 * u, -(p ^ 9) * r ^ 9, -(p ^ 3) * r ^ 3, 0, 8 * p ^ 10 * r ^ 10 * u]
            end
        tbl = Dict{Symbol, Any}(:identifier => "H(G24)", :name => "H(G24)", :size => 336, :order => 336, :powermap => chevieget(:G24, :PowerMaps), :irreducibles => [f1(r), f1(p), f3(p, r, ER(-7)), f3(r, p, ER(-7)), f3(p, r, -(ER(-7))), f3(r, p, -(ER(-7))), f6(r, p), f6(p, r), f7(p, r), f7(r, p), f8(p, r, u), f8(p, r, -u)] * p ^ 0 * r ^ 0, :galomorphisms => Group(#= none:39 =# @perm_str("( 5, 6)( 9,10)")), :irredinfo => chevieget(:G24, :IrredInfo))
        Inherit(tbl, chevieget(:G24, :ClassInfo))
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        return ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
    end)
chevieset(:G24, :CharTable, function ()
        return (chevieget(:G24, :HeckeCharTable))([[1, -1], [1, -1], [1, -1]], [])
    end)
chevieset(:G24, :HeckeRepresentation, function (para, root, i)
        local p, r, rep, f1, f3, f7, f9, f11
        p = (para[1])[2]
        r = (para[1])[1]
        f1 = (r->begin
                    map((x->begin
                                [[r]]
                            end), 1:3)
                end)
        f3 = function (p, r, a)
                return WGraph2Representation([[[2, 3], [1, 2], [1, 3]], [[1, 2, p, -r], [1, 3, p, -r], [2, 3, (r * (1 - a)) // 2, (-p * (a + 1)) // 2]]], [p, r]) * p ^ 0 * r ^ 0
            end
        f7 = function (p, r)
                return WGraph2Representation([[[2, 3], [2, 3], [1, 3], [1, 3], [1, 2], [1, 2]], [[1, 4, r, -p], [1, 5, r, -p], [2, 3, r, -p], [2, 6, p, -r], [3, 5, -p, 0], [3, 6, -2p, r], [4, 5, r, 0], [4, 6, 2r, 0]]], [r, p]) * p ^ 0 * r ^ 0
            end
        f9 = function (r, p)
                return WGraph2Representation([[[1], [1, 2], [1, 3], [2], [2], [3], [3]], [[1, 2, 0, -r], [1, 3, 0, p], [1, 4, p, -r], [1, 5, 0, -r], [1, 6, -p, r], [2, 5, -p, 0], [2, 7, -p, r], [3, 4, -p, 0], [3, 5, p, -r], [3, 6, p, 0], [3, 7, p, 0], [4, 6, 0, -p], [4, 7, -r, p], [5, 6, -r, p], [5, 7, -r, 0]]], [p, r]) * p ^ 0 * r ^ 0
            end
        f11 = function (x, y, e)
                local v
                v = e * GetRoot(-x * y)
                return [[[0, 0, 0, 0, 0, 0, 0, -x], [0, x + y, 0, 0, y, 0, 0, 0], [0, 0, x, -v * y + x * y, 0, 0, -(x ^ 2), 0], [0, 0, 0, y, 0, 0, 0, 0], [0, -x, 0, 0, 0, 0, 0, 0], [0, 0, 0, x, 0, x, -v - y, 0], [0, 0, 0, 0, 0, 0, y, 0], [y, 0, 0, 0, 0, 0, 0, x + y]], [[x, 0, 0, v, 0, 0, 0, -y], [0, x, 0, v, x, 0, 0, 0], [0, 0, x + y, 0, 0, 0, -x * y, 0], [0, 0, 0, y, 0, 0, 0, 0], [0, 0, 0, 0, y, 0, 0, 0], [0, 0, -1, x, -v, x, x, v], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y]], [[y, 0, 0, 0, 0, 0, 0, 0], [0, x, 0, 0, x, 0, -v, 0], [-x * y, 0, x, 0, -v * y, v * y, (v * y - x * y) - x ^ 2, 0], [0, 0, 0, x, 0, -y, -v - y, 0], [0, 0, 0, 0, y, 0, 0, 0], [0, 0, 0, 0, 0, y, 0, 0], [0, 0, 0, 0, 0, 0, y, 0], [x, 0, 0, 0, 0, 0, x, x]]]
            end
        rep = [[f1, r], [f1, p], [f3, p, r, ER(-7)], [f3, r, p, ER(-7)], [f3, p, r, -(ER(-7))], [f3, r, p, -(ER(-7))], [f7, p, r], [f7, r, p], [f9, p, r], [f9, r, p], [f11, p, r, 1], [f11, p, r, -1]]
        return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])]) + 0 * Product(para[1])
    end)
(CHEVIE[:families])[:X7] = Dict{Symbol, Any}(:name => "X7", :fourierMat => [[-1 // 2, 1 // 2, ER(-7) // 2, ER(-7) // 2, -1, -1, -1], [1 // 2, -1 // 2, ER(-7) // 2, ER(-7) // 2, 1, 1, 1], [ER(-7) // 2, ER(-7) // 2, ER(-7) // 2, -(ER(-7)) // 2, 0, 0, 0], [ER(-7) // 2, ER(-7) // 2, -(ER(-7)) // 2, ER(-7) // 2, 0, 0, 0], [-1, 1, 0, 0, -(E(7, 6)) - E(7), -(E(7, 5)) - E(7, 2), -(E(7, 4)) - E(7, 3)], [-1, 1, 0, 0, -(E(7, 5)) - E(7, 2), -(E(7, 4)) - E(7, 3), -(E(7, 6)) - E(7)], [-1, 1, 0, 0, -(E(7, 4)) - E(7, 3), -(E(7, 6)) - E(7), -(E(7, 5)) - E(7, 2)]] // ER(-7), :eigenvalues => [1, 1, 1, -1, E(7, 4), E(7, 2), E(7)], :explanation => "mystery G24", :special => 1, :cospecial => 2)
chevieset(:G24, :UnipotentCharacters, function ()
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:3, :rank => 3, :ST => 24), :levi => [], :parameterExponents => [1, 1, 1], :charNumbers => 1:12, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [1], :rank => 1), :levi => [2, 3], :parameterExponents => [7], :charNumbers => [19, 13], :eigenvalue => -1, :cuspidalName => "B_2"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [17], :eigenvalue => E(4), :qEigen => 1 // 2, :cuspidalName => "G_{24}[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [18], :eigenvalue => -(E(4)), :qEigen => 1 // 2, :cuspidalName => "G_{24}[-i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [20], :eigenvalue => E(7, 3), :cuspidalName => "G_{24}[\\zeta_7^3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [21], :eigenvalue => E(7, 5), :cuspidalName => "G_{24}[\\zeta_7^5]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [22], :eigenvalue => E(7, 6), :cuspidalName => "G_{24}[\\zeta_7^6]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [14], :eigenvalue => E(7, 4), :cuspidalName => "G_{24}[\\zeta_7^4]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [15], :eigenvalue => E(7, 2), :cuspidalName => "G_{24}[\\zeta_7^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [16], :eigenvalue => E(7), :cuspidalName => "G_{24}[\\zeta_7]")], :families => [Family("C1", [1]), Family("X7", [4, 6, 7, 13, 14, 15, 16], Dict{Symbol, Any}(:ennola => 2)), Family("C1", [10], Dict{Symbol, Any}(:ennola => -1)), Family("C'\"2", [11, 12, 17, 18], Dict{Symbol, Any}(:ennola => -3)), Family("C1", [9]), ComplexConjugate(Family("X7", [3, 5, 8, 19, 20, 21, 22], Dict{Symbol, Any}(:ennola => -2))), Family("C1", [2], Dict{Symbol, Any}(:ennola => -1))], :a => [0, 21, 8, 1, 8, 1, 1, 8, 6, 3, 4, 4, 1, 1, 1, 1, 4, 4, 8, 8, 8, 8], :A => [0, 21, 20, 13, 20, 13, 13, 20, 18, 15, 17, 17, 13, 13, 13, 13, 17, 17, 20, 20, 20, 20], :curtis => [2, 1, 6, 5, 4, 3, 8, 7, 10, 9, 12, 11, 19, -20, -21, -22, -18, -17, 13, -14, -15, -16])
    end)
chevieset(:G24, :Invariants, [function (x, y, z)
            return (((((-42 * x ^ 2 * y * z - 12 * x ^ 2 * y ^ 2) + 21 // 2 * x ^ 2 * z ^ 2) - 9 // 2 * y ^ 2 * z ^ 2) - 6 * y ^ 3 * z) + 14 * x ^ 4 + 18 // 7 * y ^ 4) - 21 // 8 * z ^ 4
        end, function (x, y, z)
            return ((((((((((((-1960 * x ^ 2 * y * z ^ 3 + 840 * x ^ 2 * y ^ 2 * z ^ 2) - 1120 * x ^ 2 * y ^ 3 * z) + 1760 * x ^ 2 * y ^ 4) - 1225 * x ^ 2 * z ^ 4) + 525 * y ^ 2 * z ^ 4) - 280 * y ^ 3 * z ^ 3) + 3920 * x ^ 4 * y * z + 1120 * x ^ 4 * y ^ 2) - 980 * x ^ 4 * z ^ 2) - 180 * y ^ 4 * z ^ 2) - 240 * y ^ 5 * z) + 1568 * x ^ 6) - 416 // 7 * y ^ 6) - 49 // 2 * z ^ 6
        end, function (x, y, z)
            return (((((((((((((((((((((((((((((((((((((((-857157 // 4 * x ^ 2 * y * z ^ 11 - 4847619 // 32 * x ^ 2 * y ^ 2 * z ^ 10) + 1596665 // 8 * x ^ 2 * y ^ 3 * z ^ 9 + 18321345 // 16 * x ^ 2 * y ^ 4 * z ^ 8 + 179046 * x ^ 2 * y ^ 5 * z ^ 7 + 576093 // 2 * x ^ 2 * y ^ 6 * z ^ 6) - 440118 * x ^ 2 * y ^ 7 * z ^ 5) + 1608075 * x ^ 2 * y ^ 8 * z ^ 4) - 633080 * x ^ 2 * y ^ 9 * z ^ 3) + 269760 * x ^ 2 * y ^ 10 * z ^ 2 + 48576 * x ^ 2 * y ^ 11 * z + 785728 // 7 * x ^ 2 * y ^ 12) - 1327753 // 128 * x ^ 2 * z ^ 12) + 569037 // 128 * y ^ 2 * z ^ 12) - 122451 // 4 * y ^ 3 * z ^ 11) - 11176655 // 16 * x ^ 4 * y * z ^ 9) + 432180 * x ^ 4 * y ^ 2 * z ^ 8) - 2088870 * x ^ 4 * y ^ 3 * z ^ 7) - 2922360 * x ^ 4 * y ^ 4 * z ^ 6) - 24696 * x ^ 4 * y ^ 5 * z ^ 5) - 5735940 * x ^ 4 * y ^ 6 * z ^ 4) - 4210080 * x ^ 4 * y ^ 7 * z ^ 3) + 2688840 * x ^ 4 * y ^ 8 * z ^ 2 + 148960 * x ^ 4 * y ^ 9 * z) - 203456 * x ^ 4 * y ^ 10) + 11311111 // 64 * x ^ 4 * z ^ 10 + 2077551 // 64 * y ^ 4 * z ^ 10 + 684285 // 16 * y ^ 5 * z ^ 9 + 2924418 * x ^ 6 * y * z ^ 7 + 15047067 // 2 * x ^ 6 * y ^ 2 * z ^ 6) - 16696554 * x ^ 6 * y ^ 3 * z ^ 5) + 3755850 * x ^ 6 * y ^ 4 * z ^ 4 + 7721616 * x ^ 6 * y ^ 5 * z ^ 3 + 12098688 * x ^ 6 * y ^ 6 * z ^ 2) - 470400 * x ^ 6 * y ^ 7 * z) + 2546880 * x ^ 6 * y ^ 8 + 17798613 // 16 * x ^ 6 * z ^ 8) - 396459 // 8 * y ^ 6 * z ^ 8) + 76734 * y ^ 7 * z ^ 7 + 8319465 * x ^ 8 * y * z ^ 5 + 432180 * x ^ 8 * y ^ 2 * z ^ 4 + 8643600 * x ^ 8 * y ^ 3 * z ^ 3 + 24572520 * x ^ 8 * y ^ 4 * z ^ 2) - 3457440 * x ^ 8 * y ^ 5 * z) - 2511936 * x ^ 8 * y ^ 6) - 8621991 // 4 * x ^ 8 * z ^ 6) - 424809 // 4 * y ^ 8 * z ^ 6) - 114513 * y ^ 9 * z ^ 5) + 9008552 * x ^ 10 * y * z ^ 3) - 2304960 * x ^ 10 * y ^ 2 * z ^ 2) + 7222208 * x ^ 10 * y ^ 3 * z) - 8978368 * x ^ 10 * y ^ 4) + 6537923 * x ^ 10 * z ^ 4) - 40392 * y ^ 10 * z ^ 4) + 14928 * y ^ 11 * z ^ 3) - 537824 * x ^ 12 * y * z) - 153664 * x ^ 12 * y ^ 2) + 134456 * x ^ 12 * z ^ 2 + 92712 // 7 * y ^ 12 * z ^ 2 + 30816 // 7 * y ^ 13 * z + 1382976 * x ^ 14 + 210624 // 343 * y ^ 14 + 7203 // 256 * z ^ 14
        end])
chevieset(:G24, :BasicDerivations, function ()
        return function (x, y, z)
                return [[x, 3 * y ^ 2, 7z - 9 * x ^ 2 * y], [3y, 1792z, 64 * x * y ^ 2 + 3136 * x ^ 4], [7z, 64 * x * y ^ 3 + 5376 * x ^ 2 * z + 3136 * x ^ 4 * y, ((287 // 2 * x * y * z - 35 // 4 * x ^ 3 * y ^ 2) + 21 // 256 * y ^ 4) - 1568 * x ^ 6]]
            end
    end)
chevieset(:G24, :Discriminant, function ()
        return function (x, y, z)
                return (((((((18 * x * y ^ 4 * z + 5632 * x ^ 2 * y * z ^ 2) - 1024 * z ^ 3) - 67 * x ^ 3 * y ^ 5) - 4352 * x ^ 4 * y ^ 2 * z) - 5504 * x ^ 6 * y ^ 3) - 27 // 3136 * y ^ 7) - 229376 * x ^ 7 * z) - 114688 * x ^ 9 * y
            end
    end)
chevieset(:G25, :PrintDiagram, function (indices, title)
        print(title, " ", indices[1], "(3)--(3)", indices[2], "--(3)", indices[3], "\n")
    end)
chevieset(:G25, :GeneratingRoots, [[0, 0, -1], -((2 * E(3, 2) + 1)) // 3 * [1, 1, 1], [0, 1, 0]])
chevieset(:G25, :EigenvaluesGeneratingReflections, [1 // 3, 1 // 3, 1 // 3])
chevieset(:G25, :HyperplaneRepresentatives, [1])
chevieset(:G25, :BraidRelations, [[[1, 2, 1], [2, 1, 2]], [[1, 3], [3, 1]], [[2, 3, 2], [3, 2, 3]]])
chevieset(:G25, :Size, 648)
chevieset(:G25, :ReflectionDegrees, [6, 9, 12])
chevieset(:G25, :NrConjugacyClasses, 24)
chevieset(:G25, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3]], [1:3]]
        return t[s + 1]
    end)
chevieset(:G25, :ClassNames, [".", "cc", "31", "3131", "12231223", "1223", "d", "dd", "z", "zz", "2231223", "d1", "1", "131", "3221223221", "11", "1122", "12", "12z", "122312231223", "332112", "212", "c", "cz"])
chevieset(:G25, :WordsClassRepresentatives, map((x->begin
                Replace(x, ".", [], "1", [1], "2", [2], "3", [3], "c", [1, 2, 3], "z", [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3], "d", [1, 2, 3, 2])
            end), chevieget(:G25, :ClassNames)))
chevieset(:G25, :PowerMaps, [nothing, [1, 9, 4, 3, 15, 5, 8, 7, 10, 9, 3, 15, 16, 14, 5, 13, 16, 13, 4, 1, 10, 20, 2, 21], [1, 20, 1, 1, 1, 20, 9, 10, 1, 1, 20, 20, 1, 1, 1, 1, 20, 20, 20, 20, 20, 22, 22, 22], nothing, [1, 21, 4, 3, 15, 12, 8, 7, 10, 9, 19, 6, 16, 14, 5, 13, 18, 17, 11, 20, 2, 22, 24, 23], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], nothing, nothing, nothing, [1, 21, 4, 3, 15, 12, 8, 7, 10, 9, 19, 6, 16, 14, 5, 13, 18, 17, 11, 20, 2, 22, 24, 23]])
chevieset(:G25, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G25, :WordsClassRepresentatives), :classnames => chevieget(:G25, :ClassNames), :classparams => chevieget(:G25, :ClassNames), :orders => [1, 6, 3, 3, 3, 6, 9, 9, 3, 3, 6, 6, 3, 3, 3, 3, 6, 6, 6, 2, 6, 4, 12, 12], :classes => [1, 9, 12, 12, 12, 36, 72, 72, 1, 1, 36, 36, 12, 24, 12, 12, 36, 36, 36, 9, 9, 54, 54, 54]))
chevieset(:G25, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 24], [1, 12], [2, 15], [2, 3], [2, 9], [3, 6], [3, 5, 2], [3, 5, 1], [3, 17], [3, 13, 2], [3, 1], [3, 13, 1], [6, 8, 2], [6, 8, 1], [6, 2], [6, 4, 2], [6, 10], [6, 4, 1], [8, 3], [8, 9], [8, 6], [9, 5], [9, 7]], :extRefl => [1, 12, 8, 3])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G25, :HeckeCharTable, function (para, root)
        local u, v, w, f10, f23, f31, f62, f83, f97, res, c
        u = (para[1])[1]
        v = (para[1])[2]
        w = (para[1])[3]
        c = (u * v * w) ^ 0
        res = Dict{Symbol, Any}(:name => "H(G25)", :identifier => "H(G25)", :parameter => para, :size => 648, :order => 648, :dim => 3, :degrees => [6, 9, 12], :reflclasses => [13], :powermap => chevieget(:G25, :PowerMaps), :irredinfo => chevieget(:G25, :IrredInfo))
        f10 = (y->begin
                    map((w->begin
                                y ^ length(w)
                            end), res[:classtext])
                end)
        f23 = function (u, v, w)
                return [2, -2 * (u * v) ^ 3, u ^ 2 + v ^ 2, u ^ 4 + v ^ 4, (u * v) ^ 2 * (u ^ 4 + v ^ 4), -u * v * (u ^ 2 + v ^ 2), -(u ^ 2) * v ^ 2, -(u ^ 4) * v ^ 4, 2 * u ^ 6 * v ^ 6, 2 * u ^ 12 * v ^ 12, -(v ^ 3) * u ^ 3 * (u + v), -(v ^ 2) * u ^ 2 * (u + v), u + v, (u + v) * ((u ^ 2 - u * v) + v ^ 2), u ^ 4 * v ^ 4 * (u ^ 2 + v ^ 2), u ^ 2 + v ^ 2, -u * v * (u ^ 2 + v ^ 2), u * v, u ^ 7 * v ^ 7, -(u ^ 3) * v ^ 3 * (u ^ 2 + v ^ 2) * ((v ^ 4 - u ^ 2 * v ^ 2) + u ^ 4), -2 * u ^ 3 * v ^ 3, 0, 0, 0]
            end
        f31 = function (u, v, w)
                return [3, -(u ^ 4) * v ^ 2, 2 * u * v + u ^ 2, 2 * u ^ 2 * v ^ 2 + u ^ 4, u ^ 4 * v ^ 4 + 2 * u ^ 6 * v ^ 2, -(u ^ 2) * v ^ 2, 0, 0, 3 * u ^ 8 * v ^ 4, 3 * u ^ 16 * v ^ 8, -(u ^ 4) * v ^ 3, -(u ^ 4) * v, 2u + v, u * v ^ 2 + u ^ 2 * v + u ^ 3, 2 * u ^ 6 * v ^ 4 + u ^ 8 * v ^ 2, 2 * u ^ 2 + v ^ 2, (-u * v ^ 3 - u ^ 3 * v) + u ^ 4, u * v + u ^ 2, u ^ 9 * v ^ 5 + u ^ 10 * v ^ 4, -(u ^ 6) * v ^ 6, u ^ 2 * v ^ 4 - 2 * u ^ 5 * v, u ^ 3, u ^ 2 * v, u ^ 10 * v ^ 5]
            end
        f62 = function (u, v, w)
                return [6, 2 * u ^ 3 * v ^ 2 * w, 2 * u * v + 2 * u * w + u ^ 2 + v ^ 2, 2 * u ^ 2 * v ^ 2 + 2 * u ^ 2 * w ^ 2 + u ^ 4 + v ^ 4, u ^ 2 * (v ^ 4 * w ^ 2 + 2 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * v ^ 4 * u ^ 2 + u ^ 4 * w ^ 2), u * w * (u ^ 2 + v ^ 2), 0, 0, 6 * u ^ 6 * v ^ 4 * w ^ 2, 6 * u ^ 12 * v ^ 8 * w ^ 4, u ^ 3 * v ^ 2 * w * (w + u), u ^ 2 * v ^ 2 * (w + u), 3u + 2v + w, v ^ 2 * u + u * w ^ 2 + v * u ^ 2 + u ^ 2 * w + u ^ 3 + v ^ 3, v ^ 2 * u ^ 4 * (3 * v ^ 2 * w ^ 2 + 2 * u ^ 2 * w ^ 2 + u ^ 2 * v ^ 2), 3 * u ^ 2 + 2 * v ^ 2 + w ^ 2, -((u ^ 2 + v ^ 2)) * ((u * v - w ^ 2) - u ^ 2), u * (u + v), v ^ 4 * u ^ 7 * w ^ 2 * (u + v), u ^ 3 * w ^ 3 * (u ^ 2 + v ^ 2) * ((v ^ 4 - u ^ 2 * v ^ 2) + u ^ 4), v * (-2 * u ^ 3 * w ^ 2 + 3 * u ^ 4 * v + v ^ 3 * w ^ 2), -u * (-(u ^ 2) + v * w), 0, 0]
            end
        f83 = function (u, v, w)
                return [8, 0, 2 * (w + u) * (u + v), 2 * (w ^ 2 + u ^ 2) * (u ^ 2 + v ^ 2), 2 * u ^ 2 * v * w * (w ^ 2 + u ^ 2) * (u ^ 2 + v ^ 2), 0, -(u ^ 2) * v * w, -(u ^ 4) * v ^ 2 * w ^ 2, 8 * u ^ 6 * v ^ 3 * w ^ 3, 8 * u ^ 12 * v ^ 6 * w ^ 6, 0, 0, 4u + 2v + 2w, v ^ 2 * u + u * w ^ 2 + v * w ^ 2 + v * u ^ 2 + u ^ 2 * w + v ^ 2 * w + 2 * u ^ 3, 2 * u ^ 4 * v * w * (2 * v ^ 2 * w ^ 2 + u ^ 2 * w ^ 2 + u ^ 2 * v ^ 2), 4 * u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2, ((((-u * v ^ 3 - u * w ^ 3) + u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2) - u ^ 3 * v) - u ^ 3 * w) + u ^ 4, u * (u + v + w), v ^ 3 * u ^ 7 * w ^ 3 * (u + v + w), 0, (-2 * u ^ 3 * v ^ 3 - 2 * u ^ 3 * w ^ 3) + v ^ 3 * w ^ 3 + 3 * u ^ 4 * v * w, -u * (-(u ^ 2) + v * w), 0, 0]
            end
        f97 = function (u, v, w, J)
                return [9, -3 * J ^ 2 * u ^ 2 * v ^ 2 * w ^ 2, (u + v + w) ^ 2, (u ^ 2 + w ^ 2 + v ^ 2) ^ 2, J * (u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2) ^ 2, -(J ^ 2) * (u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2), 0, 0, 9 * J * u ^ 4 * v ^ 4 * w ^ 4, 9 * J ^ 2 * u ^ 8 * v ^ 8 * w ^ 8, -(v ^ 2) * J ^ 2 * u ^ 2 * w ^ 2 * (u + v + w), -v * u * w * J ^ 2 * (u * v + u * w + v * w), 3u + 3v + 3w, (u + v + w) * (u ^ 2 + w ^ 2 + v ^ 2), 3 * J * u ^ 2 * v ^ 2 * w ^ 2 * (u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2), 3 * u ^ 2 + 3 * v ^ 2 + 3 * w ^ 2, (((((-u * v ^ 3 - u * w ^ 3) - v * w ^ 3) + u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2) - u ^ 3 * v) - u ^ 3 * w) - v ^ 3 * w, u * v + u * w + v * w, v ^ 4 * J * u ^ 4 * w ^ 4 * (u * v + u * w + v * w), (-(u ^ 6) * v ^ 6 - u ^ 6 * w ^ 6) - v ^ 6 * w ^ 6, -J * u * v * w * (((2 * w ^ 3 + 2 * v ^ 3) - 3 * u * v * w) + 2 * u ^ 3), -u * v * w, -J * u * v * w, -(J ^ 2) * u ^ 5 * v ^ 5 * w ^ 5]
            end
        Inherit(res, chevieget(:G25, :ClassInfo))
        res[:centralizers] = map((x->begin
                        res[:order] // x
                    end), res[:classes])
        res[:irreducibles] = [f10(u), f10(w), f10(v), f23(v, w, u), f23(u, v, w), f23(u, w, v), [3, 3 * u ^ 2 * v ^ 2 * w ^ 2, u ^ 2 + v ^ 2 + w ^ 2, u ^ 4 + v ^ 4 + w ^ 4, u ^ 4 * v ^ 4 + u ^ 4 * w ^ 4 + v ^ 4 * w ^ 4, u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2, 0, 0, 3 * u ^ 4 * v ^ 4 * w ^ 4, 3 * u ^ 8 * v ^ 8 * w ^ 8, u ^ 2 * v ^ 2 * w ^ 3 + u ^ 2 * v ^ 3 * w ^ 2 + u ^ 3 * v ^ 2 * w ^ 2, u * v ^ 2 * w ^ 2 + u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w, u + v + w, u ^ 3 + v ^ 3 + w ^ 3, u ^ 2 * v ^ 4 * w ^ 4 + u ^ 4 * v ^ 2 * w ^ 4 + u ^ 4 * v ^ 4 * w ^ 2, u ^ 2 + v ^ 2 + w ^ 2, u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2, 0, 0, u ^ 6 * v ^ 6 + u ^ 6 * w ^ 6 + v ^ 6 * w ^ 6, 3 * u ^ 2 * v ^ 2 * w ^ 2, -u * v * w, -u * v * w, -(u ^ 5) * v ^ 5 * w ^ 5], f31(v, u, w), f31(u, w, v), f31(w, v, u), f31(w, u, v), f31(u, v, w), f31(v, w, u), f62(w, u, v), f62(v, w, u), f62(u, v, w), f62(v, u, w), f62(w, v, u), f62(u, w, v), f83(u, v, w), f83(w, v, u), f83(v, u, w), f97(u, v, w, E(3, 2)), f97(u, v, w, E(3))] * c
        res = ((CHEVIE[:compat])[:MakeCharacterTable])(res)
        return res
    end)
chevieset(:G25, :CharTable, function ()
        return (chevieget(:G25, :HeckeCharTable))([[1, E(3), E(3, 2)]], [])
    end)
chevieset(:G25, :sparseFakeDegrees, [[1, 0], [1, 24], [1, 12], [1, 15, 1, 21], [1, 3, 1, 9], [1, 9, 1, 15], [1, 6, 1, 12, 1, 18], [1, 5, 1, 8, 1, 11], [1, 5, 1, 8, 1, 11], [1, 17, 1, 20, 1, 23], [1, 13, 1, 16, 1, 19], [1, 1, 1, 4, 1, 7], [1, 13, 1, 16, 1, 19], [1, 8, 1, 11, 2, 14, 1, 17, 1, 20], [1, 8, 1, 11, 2, 14, 1, 17, 1, 20], [1, 2, 1, 5, 2, 8, 1, 11, 1, 14], [1, 4, 1, 7, 2, 10, 1, 13, 1, 16], [1, 10, 1, 13, 2, 16, 1, 19, 1, 22], [1, 4, 1, 7, 2, 10, 1, 13, 1, 16], [1, 3, 2, 6, 2, 9, 2, 12, 1, 15], [1, 9, 2, 12, 2, 15, 2, 18, 1, 21], [1, 6, 2, 9, 2, 12, 2, 15, 1, 18], [1, 5, 1, 8, 3, 11, 2, 14, 2, 17], [2, 7, 2, 10, 3, 13, 1, 16, 1, 19]])
chevieset(:G25, :SchurModels, Dict{Symbol, Any}(:f1_0 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[1, -1, 0], 4], [[1, 0, -1], 4], [[3, -2, -1], 1], [[3, -1, -2], 1], [[2, -1, -1], 3], [[2, -1, -1], 2], [[1, -1, 0], 6], [[1, 0, -1], 6]]), :f2_3 => Dict{Symbol, Any}(:vcyc => [[[1, 0, -1], 1], [[1, 0, -1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 2], [[0, 1, -1], 2], [[1, -1, 0], 1], [[1, -1, 0], 1], [[1, 1, -2], 3], [[1, 1, -2], 2], [[-1, 1, 0], 6]]), :f3_1 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0], 1], [[-1, 1, 0], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[1, 0, -1], 2], [[0, 1, -1], 1], [[1, 1, -2], 2], [[2, -1, -1], 2], [[1, 0, -1], 6], [[1, -1, 0], 4], [[2, 1, -3], 1]]), :f3_6 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[0, 1, -1], 1], [[0, -1, 1], 1], [[-1, -1, 2], 2], [[-1, 2, -1], 2], [[-2, 1, 1], 2]]), :f6_2 => Dict{Symbol, Any}(:vcyc => [[[-1, 1, 0], 1], [[1, 0, -1], 1], [[-1, 0, 1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 2], [[1, 0, -1], 6], [[1, -2, 1], 2], [[0, 1, -1], 2], [[3, -2, -1], 1]]), :f8_3 => Dict{Symbol, Any}(:vcyc => [[[0, 1, -1], 1], [[0, -1, 1], 1], [[-1, 0, 1], 1], [[-1, 1, 0], 1], [[2, -3, 1], 1], [[2, -1, -1], 3], [[2, 1, -3], 1]]), :f9_7 => Dict{Symbol, Any}(:rootUnity => E(3), :vcyc => [[[0, 0, 0, 1], 1], [[0, 0, 0, 2], 2], [[-1, 1, 0], 6], [[1, 0, -1], 6], [[0, -1, 1], 6], [[2, -1, -1, 1], 1], [[-1, 2, -1, 1], 1], [[-1, -1, 2, 1], 1]])))
chevieset(:G25, :SchurData, [Dict{Symbol, Any}(:name => "f1_0", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f1_0", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f2_3", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f2_3", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f2_3", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f3_6", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f3_1", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f3_1", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f3_1", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f3_1", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f3_1", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f3_1", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f6_2", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f6_2", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f6_2", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f6_2", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f6_2", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f6_2", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f8_3", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f8_3", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f8_3", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f9_7", :order => [1, 2, 3], :rootUnityPower => 1), Dict{Symbol, Any}(:name => "f9_7", :order => [1, 2, 3], :rootUnityPower => 2)])
chevieset(:G25, :HeckeRepresentation, function (para, root, i)
        local u, v, w, f1, f2, f31, f32, f6, f8, f9, rep
        u = (para[1])[1]
        v = (para[1])[2]
        w = (para[1])[3]
        f1 = (u->begin
                    [[[u]], [[u]], [[u]]]
                end)
        f2 = function (v, w)
                return WGraph2Representation([[[1, 3], [2]], [[1, 2, -1, v * w]]], [w, v])
            end
        f31 = function (u, v)
                return WGraph2Representation([[[1], [2], [3]], [[1, 2, u, -v], [2, 3, -v, u]]], [u, v])
            end
        f32 = function (u, v, w)
                return WGraph2Representation([[[[2], []], [[], [1, 2, 3]], [[1, 3], []]], [[1, 2, -1, u * w + v ^ 2], [1, 3, v, v], [2, 3, -u * w - v ^ 2, 1]]], [u, v, w])
            end
        f6 = function (v, u, w)
                return WGraph2Representation([[[[2], []], [[], [1, 2]], [[1], []], [[], [2, 3]], [[3], []], [[], [1, 3]]], [[1, 2, -1, v * w + u ^ 2], [1, 3, u, u], [1, 4, -1, v * w + u ^ 2], [1, 5, -u, -u], [1, 6, w, 0], [2, 3, -v * w - u ^ 2, 1], [2, 6, -u * w, 1], [4, 5, v * w + u ^ 2, -1], [4, 6, -u * w, 1]]], [v, u, w])
            end
        f8 = function (u, w, v)
                return WGraph2Representation([[[[2, 3], []], [[3], [1, 2]], [[1, 3], []], [[2], [3]], [[1, 3], []], [[2], [1]], [[1], [2, 3]], [[1, 2], []]], [[1, 2, -u * v - w ^ 2, 1], [1, 3, w, w], [1, 4, v * w - w ^ 2, 0], [1, 5, 0, -1], [2, 3, -1, u * v + w ^ 2], [2, 4, [1, 0, 3, w], -u], [2, 5, 0, -w], [2, 6, -1, 0], [3, 6, [1, 0, 3, v - w], -u], [3, 7, u * w + w ^ 2, -1], [3, 8, -w, -w], [4, 5, -u, [1, v, 3, 0]], [4, 7, 0, v], [5, 6, [1, 0, 3, 1], -u * w], [5, 7, -u, v - w], [5, 8, 0, v * w - w ^ 2], [6, 7, u * w, [1, -1, 3, 0]], [6, 8, 0, v - w], [7, 8, -1, u * v + w ^ 2]]], [u, w, v])
            end
        f9 = function (u, v, w, a)
                return WGraph2Representation([[[[2], []], [[], [1, 2, 3]], [[1], [3]], [[1, 3], []], [[2], [1]], [[1], [2]], [[2], [3]], [[3], [2]], [[3], [1]]], [[1, 2, -1, u * w + v ^ 2], [1, 3, v, [1, v, 3, 0]], [1, 4, -a * v, 0], [1, 5, 0, a ^ 2 * u - v], [1, 6, 0, a ^ 2 * u], [1, 7, 0, a ^ 2 * u - v], [1, 8, 0, -(a ^ 2) * u], [1, 9, v, [1, 0, 3, v]], [2, 3, -u * w - v ^ 2, 1], [2, 4, -u * w + a * v ^ 2, 0], [2, 5, -(a ^ 2) * v * w, 0], [2, 7, -(a ^ 2) * v * w, 0], [2, 9, -u * w - v ^ 2, 1], [3, 4, 0, u + a ^ 2 * v], [3, 5, 0, u], [3, 6, -(a ^ 2) * w, a * v], [3, 7, w, 0], [4, 5, [1, 0, 3, -w], u], [4, 6, -a * w, 0], [4, 7, [1, -w, 3, 0], u], [4, 8, a * w, 0], [4, 9, u + a ^ 2 * v, 0], [5, 6, -u, v], [5, 9, 0, w], [7, 8, u, -v], [7, 9, u, 0], [8, 9, -a * v, a ^ 2 * w]]], [u, v, w])
            end
        rep = [[f1, u], [f1, w], [f1, v], [f2, v, w], [f2, u, v], [f2, u, w], [f32, u, v, w], [f31, u, v], [f31, w, u], [f31, v, w], [f31, u, w], [f31, v, u], [f31, w, v], [f6, v, u, w], [f6, u, w, v], [f6, w, v, u], [f6, w, u, v], [f6, u, v, w], [f6, v, w, u], [f8, u, v, w], [f8, w, u, v], [f8, v, w, u], [f9, u, v, w, E(3)], [f9, u, v, w, E(3, 2)]]
        return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])]) * Product(para[1]) ^ 0
    end)
chevieset(:G25, :UnipotentCharacters, function ()
        local J
        J = E(3)
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:3, :rank => 3, :ST => 25), :levi => [], :parameterExponents => [1, 1, 1], :charNumbers => 1:24, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [3, 2], :rank => 2, :p => 3, :q => 1), :levi => [1], :parameterExponents => [1, 3], :charNumbers => [39, 31, 30, 41, 38, 40, 25, 27, 26], :eigenvalue => J ^ 2, :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2], :rank => 1, :p => 6, :q => 1), :levi => [1, 3], :parameterExponents => [[3, 3, 2, 0, 0, 2]], :charNumbers => [29, 28, 32, 44, 43, 33], :eigenvalue => J, :cuspidalName => Concatenation(ImprimitiveCuspidalName([[], [0, 1], [0, 1]]), "\\otimes ", ImprimitiveCuspidalName([[], [0, 1], [0, 1]]))), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [3], :rank => 1, :p => 3, :q => 1), :levi => 1:2, :parameterExponents => [[0, 4, 4]], :charNumbers => [42, 34, 35], :eigenvalue => -1, :cuspidalName => "G_4"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [36], :eigenvalue => -J, :cuspidalName => "G_{25}[-\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [37], :eigenvalue => J, :cuspidalName => "G_{25}[\\zeta_3]")], :families => [Family("C1", [1]), Family(((CHEVIE[:families])[:X])(3), [12, 9, 25], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => -2)), Family(((CHEVIE[:families])[:QZ])(3), [20, 16, 19, 6, 28, 26, 5, 27, 29], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, -1, 1, 1, 1], :special => 2, :cospecial => 3, :ennola => 5)), Family(((CHEVIE[:families])[:X])(6), [17, 23, 7, 24, 14, 32, 34, 30, 36, 8, 37, 31, 11, 35, 33], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1], :ennola => -10)), Family(((CHEVIE[:families])[:X])(3), [22, 21, 38], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1)), Family(((CHEVIE[:families])[:X])(3), [15, 18, 39], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => -2)), Family(SubFamilyij(((CHEVIE[:families])[:ExtPowCyclic])(6, 3), 1, 2, -(ER(2)) // ER(-1)), [3, 13, 40, 10, 41, 2, 43, 42, 4, 44], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, -1, 1, -1, 1, -1, -1], :cospecial => 6, :ennola => 6))], :a => [0, 12, 12, 12, 2, 2, 4, 4, 1, 12, 4, 1, 12, 4, 8, 2, 4, 8, 2, 2, 6, 6, 4, 4, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 6, 8, 12, 12, 12, 12, 12], :A => [0, 24, 24, 24, 16, 16, 20, 20, 11, 24, 20, 11, 24, 20, 22, 16, 20, 22, 16, 16, 21, 21, 20, 20, 11, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 21, 22, 24, 24, 24, 24, 24])
    end)
chevieset(:G25, :Invariants, [function (x1, x2, x3)
            return ((-10 * x1 ^ 3 * x2 ^ 3 - 10 * x1 ^ 3 * x3 ^ 3) - 10 * x2 ^ 3 * x3 ^ 3) + x1 ^ 6 + x2 ^ 6 + x3 ^ 6
        end, function (x1, x2, x3)
            return ((((-(x1 ^ 3) * x2 ^ 6 + x1 ^ 3 * x3 ^ 6) - x2 ^ 3 * x3 ^ 6) + x1 ^ 6 * x2 ^ 3) - x1 ^ 6 * x3 ^ 3) + x2 ^ 6 * x3 ^ 3
        end, function (x1, x2, x3)
            return ((((2 * x1 ^ 3 * x2 ^ 3 * x3 ^ 6 + 2 * x1 ^ 3 * x2 ^ 6 * x3 ^ 3 + x1 ^ 3 * x2 ^ 9 + x1 ^ 3 * x3 ^ 9 + x2 ^ 3 * x3 ^ 9 + 2 * x1 ^ 6 * x2 ^ 3 * x3 ^ 3) - 4 * x1 ^ 6 * x2 ^ 6) - 4 * x1 ^ 6 * x3 ^ 6) - 4 * x2 ^ 6 * x3 ^ 6) + x1 ^ 9 * x2 ^ 3 + x1 ^ 9 * x3 ^ 3 + x2 ^ 9 * x3 ^ 3
        end])
chevieset(:G25, :Discriminant, function ()
        return function (t1, t2, t3)
                return ((36 * t1 * t2 ^ 2 * t3 - t1 ^ 2 * t3 ^ 2) - 32 * t3 ^ 3) + t1 ^ 3 * t2 ^ 2 + 108 * t2 ^ 4
            end
    end)
chevieset(:G26, :PrintDiagram, function (indices, title)
        print(title, " ", indices[1], "===(3)", indices[2], "--(3)", indices[3], "\n")
    end)
chevieset(:G26, :GeneratingRoots, [[0, 1, -1], [0, 0, 1], -(E(4)) // ER(3) * [1, 1, 1]])
chevieset(:G26, :HyperplaneRepresentatives, [1, 2])
chevieset(:G26, :EigenvaluesGeneratingReflections, [1 // 2, 1 // 3, 1 // 3])
chevieset(:G26, :BraidRelations, [[[1, 2, 1, 2], [2, 1, 2, 1]], [[1, 3], [3, 1]], [[2, 3, 2], [3, 2, 3]]])
chevieset(:G26, :ReflectionName, function (arg...,)
        local i, TeX, type_
        type_ = arg[2]
        TeX = haskey(arg[1], :TeX)
        if type_ == 1
            if TeX
                return "G_{26}"
            else
                return "G26"
            end
        elseif TeX
            return SPrint("G(", Format(type_), ")_{26}")
        else
            return SPrint("G(", Format(type_), ")26")
        end
    end)
chevieset(:G26, :Size, 1296)
chevieset(:G26, :ReflectionDegrees, [6, 12, 18])
chevieset(:G26, :NrConjugacyClasses, 48)
chevieset(:G26, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1], [2]], [[1, 2], [1, 3], [2, 3]], [1:3]]
        return t[s + 1]
    end)
chevieset(:G26, :ClassNames, [".", "1", "212", "c3c3", "212c22c3", "12", "1212", "12121212", "c32", "1212z", "c32c32", "1212zzz", "12z", "c", "cc", "z", "zc", "zcc", "zz", "zzz", "zzzz", "zzzzz", "13", "13z", "13zz", "133", "c1223", "2", "21212", "2323c", "2z", "2zz", "2zzz", "22", "c12122", "3322", "23", "23z", "23zz", "232323", "232323z", "232323zz", "323", "c121", "c12", "c3c3c3", "323zzzz", "c3"])
chevieset(:G26, :WordsClassRepresentatives, map((x->begin
                Replace(x, ".", [], "1", [1], "2", [2], "3", [3], "c", [1, 2, 3], "z", [1, 2, 3, 1, 2, 3, 1, 2, 3])
            end), chevieget(:G26, :ClassNames)))
chevieset(:G26, :PowerMaps, [nothing, [1, 1, 8, 19, 21, 7, 8, 7, 11, 28, 32, 8, 11, 15, 17, 19, 15, 17, 21, 1, 19, 21, 34, 7, 11, 28, 32, 34, 29, 29, 7, 11, 34, 28, 32, 34, 28, 32, 8, 1, 19, 21, 40, 42, 4, 40, 42, 4], [1, 2, 2, 40, 2, 2, 1, 1, 20, 20, 1, 20, 40, 16, 19, 20, 21, 22, 1, 20, 1, 20, 2, 40, 2, 2, 40, 1, 1, 20, 20, 1, 20, 1, 20, 40, 40, 2, 40, 40, 2, 40, 43, 46, 43, 46, 43, 46], nothing, [1, 2, 6, 42, 41, 3, 8, 7, 35, 33, 32, 31, 27, 18, 17, 22, 15, 14, 21, 20, 19, 16, 26, 39, 38, 23, 13, 34, 29, 30, 12, 11, 10, 28, 9, 37, 36, 25, 24, 40, 5, 4, 43, 48, 47, 46, 45, 44], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], nothing, nothing, nothing, [1, 2, 6, 42, 41, 3, 8, 7, 35, 33, 32, 31, 27, 18, 17, 22, 15, 14, 21, 20, 19, 16, 26, 39, 38, 23, 13, 34, 29, 30, 12, 11, 10, 28, 9, 37, 36, 25, 24, 40, 5, 4, 43, 48, 47, 46, 45, 44], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], nothing, nothing, nothing, [1, 2, 6, 42, 41, 3, 8, 7, 35, 33, 32, 31, 27, 18, 17, 22, 15, 14, 21, 20, 19, 16, 26, 39, 38, 23, 13, 34, 29, 30, 12, 11, 10, 28, 9, 37, 36, 25, 24, 40, 5, 4, 43, 48, 47, 46, 45, 44]])
chevieset(:G26, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G26, :WordsClassRepresentatives), :classnames => chevieget(:G26, :ClassNames), :classparams => chevieget(:G26, :ClassNames), :orders => [1, 2, 6, 6, 6, 6, 3, 3, 6, 6, 3, 6, 6, 18, 9, 6, 9, 18, 3, 2, 3, 6, 6, 6, 6, 6, 6, 3, 3, 6, 6, 3, 6, 3, 6, 6, 6, 6, 6, 2, 6, 6, 4, 12, 12, 4, 12, 12], :classes => [1, 9, 36, 9, 9, 36, 12, 12, 12, 12, 12, 12, 36, 72, 72, 1, 72, 72, 1, 1, 1, 1, 36, 36, 36, 36, 36, 12, 24, 24, 12, 12, 12, 12, 12, 36, 36, 36, 36, 9, 9, 9, 54, 54, 54, 54, 54, 54]))
chevieset(:G26, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 9], [1, 33], [1, 21], [1, 24], [1, 12], [2, 24], [2, 15], [2, 12], [2, 3], [2, 18], [2, 9], [3, 6], [3, 15], [3, 8, 2], [3, 5, 2], [3, 8, 1], [3, 5, 1], [3, 20], [3, 17], [3, 16, 2], [3, 13, 2], [3, 4], [3, 1], [3, 16, 1], [3, 13, 1], [6, 8, 2], [6, 11, 2], [6, 8, 1], [6, 11, 1], [6, 2], [6, 5], [6, 4, 2], [6, 7, 2], [6, 10], [6, 13], [6, 4, 1], [6, 7, 1], [8, 6, 1], [8, 3], [8, 9, 2], [8, 12], [8, 6, 2], [8, 9, 1], [9, 8], [9, 5], [9, 10], [9, 7]], :opdam => #= none:21 =# @perm_str("(39,40)"), :extRefl => [1, 24, 15, 4])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G26, :HeckeCharTable, function (para, root)
        local r, p, u, v, w, f10, f23, f36, f31, f62, f83, f97, res, c
        c = Product(para, Product) ^ 0
        res = Dict{Symbol, Any}(:size => 1296, :order => 1296, :identifier => "G26", :name => "G26", :powermap => chevieget(:G26, :PowerMaps), :parameter => para[[1, 2]], :dim => 3, :irredinfo => chevieget(:G26, :IrredInfo))
        Inherit(res, chevieget(:G26, :ClassInfo))
        res[:centralizers] = map((x->begin
                        res[:order] // x
                    end), res[:classes])
        f10 = function (r, u)
                return [1, r, r * u ^ 2, r ^ 2 * u ^ 6, r ^ 3 * u ^ 9, r * u, r ^ 2 * u ^ 2, r ^ 4 * u ^ 4, r * u ^ 4, r ^ 5 * u ^ 8, r ^ 2 * u ^ 8, r ^ 11 * u ^ 20, r ^ 4 * u ^ 7, r * u ^ 2, r ^ 2 * u ^ 4, r ^ 3 * u ^ 6, r ^ 4 * u ^ 8, r ^ 5 * u ^ 10, r ^ 6 * u ^ 12, r ^ 9 * u ^ 18, r ^ 12 * u ^ 24, r ^ 15 * u ^ 30, r * u, r ^ 4 * u ^ 7, r ^ 7 * u ^ 13, r * u ^ 2, r ^ 2 * u ^ 5, u, r ^ 2 * u ^ 3, r * u ^ 6, r ^ 3 * u ^ 7, r ^ 6 * u ^ 13, r ^ 9 * u ^ 19, u ^ 2, r ^ 3 * u ^ 5, u ^ 4, u ^ 2, r ^ 3 * u ^ 8, r ^ 6 * u ^ 14, u ^ 6, r ^ 3 * u ^ 12, r ^ 6 * u ^ 18, u ^ 3, r ^ 3 * u ^ 3, r ^ 2 * u ^ 3, r ^ 3 * u ^ 9, r ^ 12 * u ^ 27, r * u ^ 3] * c
            end
        f23 = function (r, p, u, v, w)
                return [2, 2r, r * (u ^ 2 + v ^ 2), -2 * r ^ 2 * u ^ 3 * v ^ 3, r ^ 3 * u ^ 3 * v ^ 3 * (u + v) * ((v ^ 2 - u * v) + u ^ 2), r * (u + v), r ^ 2 * (u ^ 2 + v ^ 2), r ^ 4 * (u ^ 4 + v ^ 4), -r * u * v * (u ^ 2 + v ^ 2), -(u ^ 3) * v ^ 3 * r ^ 5 * (u ^ 2 + v ^ 2), r ^ 2 * u ^ 2 * v ^ 2 * (u ^ 4 + v ^ 4), -(u ^ 9) * v ^ 9 * r ^ 11 * (u ^ 2 + v ^ 2), -(u ^ 3) * r ^ 4 * v ^ 3 * (u + v), r * u * v, -(r ^ 2) * u ^ 2 * v ^ 2, -2 * r ^ 3 * u ^ 3 * v ^ 3, -(r ^ 4) * u ^ 4 * v ^ 4, r ^ 5 * u ^ 5 * v ^ 5, 2 * r ^ 6 * u ^ 6 * v ^ 6, -2 * r ^ 9 * u ^ 9 * v ^ 9, 2 * r ^ 12 * u ^ 12 * v ^ 12, -2 * r ^ 15 * u ^ 15 * v ^ 15, r * (u + v), -(u ^ 3) * r ^ 4 * v ^ 3 * (u + v), u ^ 6 * r ^ 7 * v ^ 6 * (u + v), r * (u ^ 2 + v ^ 2), -(u ^ 2) * r ^ 2 * v ^ 2 * (u + v), u + v, r ^ 2 * (u + v) * ((v ^ 2 - u * v) + u ^ 2), -2 * r * u ^ 3 * v ^ 3, -(u ^ 3) * v ^ 3 * r ^ 3 * (u + v), u ^ 6 * r ^ 6 * v ^ 6 * (u + v), -(u ^ 9) * r ^ 9 * v ^ 9 * (u + v), u ^ 2 + v ^ 2, -(u ^ 2) * r ^ 3 * v ^ 2 * (u + v), -u * v * (u ^ 2 + v ^ 2), u * v, -(r ^ 3) * u ^ 4 * v ^ 4, r ^ 6 * u ^ 7 * v ^ 7, -2 * u ^ 3 * v ^ 3, 2 * r ^ 3 * u ^ 6 * v ^ 6, -2 * r ^ 6 * u ^ 9 * v ^ 9, 0, 0, 0, 0, 0, 0] * c
            end
        f36 = function (r, p, u, v, w)
                return [3, 3r, r * (u ^ 2 + v ^ 2 + w ^ 2), 3 * r ^ 2 * u ^ 2 * v ^ 2 * w ^ 2, r ^ 3 * u * v * w * (w ^ 3 * v ^ 3 + w ^ 3 * u ^ 3 + u ^ 3 * v ^ 3), r * (u + v + w), r ^ 2 * (u ^ 2 + v ^ 2 + w ^ 2), r ^ 4 * (u ^ 4 + v ^ 4 + w ^ 4), r * (u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2), u ^ 2 * r ^ 5 * v ^ 2 * w ^ 2 * (u ^ 2 + v ^ 2 + w ^ 2), r ^ 2 * (u ^ 4 * v ^ 4 + u ^ 4 * w ^ 4 + v ^ 4 * w ^ 4), u ^ 6 * v ^ 6 * r ^ 11 * w ^ 6 * (u ^ 2 + v ^ 2 + w ^ 2), u ^ 2 * r ^ 4 * v ^ 2 * w ^ 2 * (u + v + w), 0, 0, 3 * r ^ 3 * u ^ 2 * v ^ 2 * w ^ 2, 0, 0, 3 * r ^ 6 * u ^ 4 * v ^ 4 * w ^ 4, 3 * r ^ 9 * u ^ 6 * v ^ 6 * w ^ 6, 3 * r ^ 12 * u ^ 8 * v ^ 8 * w ^ 8, 3 * r ^ 15 * u ^ 10 * v ^ 10 * w ^ 10, r * (u + v + w), u ^ 2 * r ^ 4 * v ^ 2 * w ^ 2 * (u + v + w), u ^ 4 * r ^ 7 * v ^ 4 * w ^ 4 * (u + v + w), r * (u ^ 2 + v ^ 2 + w ^ 2), u * v * r ^ 2 * w * (v * w + u * v + u * w), u + v + w, r ^ 2 * (u ^ 3 + v ^ 3 + w ^ 3), 3 * r * u ^ 2 * v ^ 2 * w ^ 2, u ^ 2 * r ^ 3 * v ^ 2 * w ^ 2 * (u + v + w), u ^ 4 * r ^ 6 * v ^ 4 * w ^ 4 * (u + v + w), u ^ 6 * r ^ 9 * v ^ 6 * w ^ 6 * (u + v + w), u ^ 2 + v ^ 2 + w ^ 2, u * v * r ^ 3 * w * (v * w + u * v + u * w), u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2, 0, 0, 0, 3 * u ^ 2 * v ^ 2 * w ^ 2, 3 * r ^ 3 * u ^ 4 * v ^ 4 * w ^ 4, 3 * r ^ 6 * u ^ 6 * v ^ 6 * w ^ 6, -u * v * w, -(r ^ 3) * u * v * w, -(r ^ 2) * u * v * w, -(r ^ 3) * u ^ 3 * v ^ 3 * w ^ 3, -(r ^ 12) * u ^ 9 * v ^ 9 * w ^ 9, -r * u * v * w] * c
            end
        f31 = function (r, p, u, v, w)
                return [3, p + 2r, u * ((-p * v - r * v) + r * u), u ^ 4 * v ^ 2 * r * (2p + r), p ^ 2 * r * u ^ 5 * v ^ 4, u * r, u * r * (r * u - 2 * p * v), r ^ 2 * u ^ 2 * (2 * p ^ 2 * v ^ 2 + r ^ 2 * u ^ 2), -(u ^ 2) * v * (-p * v + 2 * r * u), u ^ 5 * r ^ 3 * v ^ 2 * p * (r * u - 2 * p * v), u ^ 4 * v ^ 2 * (p ^ 2 * v ^ 2 + 2 * r ^ 2 * u ^ 2), u ^ 13 * r ^ 7 * v ^ 6 * p ^ 3 * (r * u - 2 * p * v), p * r ^ 3 * u ^ 5 * v ^ 2, 0, 0, 3 * p * r ^ 2 * u ^ 4 * v ^ 2, 0, 0, 3 * p ^ 2 * r ^ 4 * u ^ 8 * v ^ 4, 3 * p ^ 3 * r ^ 6 * u ^ 12 * v ^ 6, 3 * p ^ 4 * r ^ 8 * u ^ 16 * v ^ 8, 3 * p ^ 5 * r ^ 10 * u ^ 20 * v ^ 10, p * u + r * u + r * v, u ^ 4 * r ^ 2 * v ^ 2 * p * (p * u + r * u + r * v), u ^ 8 * r ^ 4 * v ^ 4 * p ^ 2 * (p * u + r * u + r * v), p * u ^ 2 + r * u ^ 2 + r * v ^ 2, u ^ 3 * r * v * (p * v + r * v + p * u), 2u + v, r * u * ((-p * v ^ 2 - p * u * v) + r * u ^ 2), -(u ^ 3) * v * ((r * v ^ 2 - p * u * v) + r * u ^ 2), u ^ 4 * r ^ 2 * v ^ 2 * p * (2u + v), u ^ 8 * r ^ 4 * v ^ 4 * p ^ 2 * (2u + v), u ^ 12 * p ^ 3 * r ^ 6 * v ^ 6 * (2u + v), 2 * u ^ 2 + v ^ 2, u ^ 3 * p * r ^ 2 * v * (2v + u), u * ((-(v ^ 3) - u ^ 2 * v) + u ^ 3), u * (u + v), u ^ 5 * r ^ 2 * v ^ 2 * p * (u + v), u ^ 9 * r ^ 4 * v ^ 4 * p ^ 2 * (u + v), u ^ 3 * (-2 * v ^ 3 + u ^ 3), u ^ 7 * v ^ 2 * r ^ 2 * p * (-2 * v ^ 3 + u ^ 3), u ^ 11 * v ^ 4 * r ^ 4 * p ^ 2 * (-2 * v ^ 3 + u ^ 3), u ^ 3, p * r ^ 2 * u * v ^ 2, -p * r * u ^ 2 * v, -(r ^ 3) * u ^ 6 * v ^ 3, p ^ 4 * r ^ 8 * u ^ 19 * v ^ 8, -(u ^ 2) * r * v] * c
            end
        f62 = function (r, p, u, v, w)
                return [6, 2p + 4r, (((-p * u * v - p * u * w) - r * u * v) - r * u * w) + r * u ^ 2 + r * v ^ 2, -2 * u ^ 3 * v ^ 2 * r * w * (2p + r), u ^ 3 * p ^ 2 * r * v * w ^ 2 * (u + v) * ((v ^ 2 - u * v) + u ^ 2), r * (u + v), r * ((-2 * p * u * v - 2 * p * u * w) + r * u ^ 2 + r * v ^ 2), r ^ 2 * (2 * p ^ 2 * u ^ 2 * v ^ 2 + 2 * p ^ 2 * u ^ 2 * w ^ 2 + u ^ 4 * r ^ 2 + v ^ 4 * r ^ 2), -u * (((p * v ^ 2 * w - 2 * r * u * v * w) - 2 * u * r * v ^ 2) + u ^ 2 * p * w), -(r ^ 3) * u ^ 3 * v ^ 2 * p * w * ((-2 * p * u * v - 2 * p * u * w) + r * u ^ 2 + r * v ^ 2), u ^ 2 * (p ^ 2 * v ^ 4 * w ^ 2 + 2 * r ^ 2 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 2 * r ^ 2 * v ^ 4 + u ^ 4 * p ^ 2 * w ^ 2), -(u ^ 9) * v ^ 6 * r ^ 7 * p ^ 3 * w ^ 3 * ((-2 * p * u * v - 2 * p * u * w) + r * u ^ 2 + r * v ^ 2), -(u ^ 3) * p * r ^ 3 * v ^ 2 * w * (u + v), 0, 0, -6 * p * r ^ 2 * u ^ 3 * v ^ 2 * w, 0, 0, 6 * p ^ 2 * r ^ 4 * u ^ 6 * v ^ 4 * w ^ 2, -6 * p ^ 3 * r ^ 6 * u ^ 9 * v ^ 6 * w ^ 3, 6 * p ^ 4 * r ^ 8 * u ^ 12 * v ^ 8 * w ^ 4, -6 * p ^ 5 * r ^ 10 * u ^ 15 * v ^ 10 * w ^ 5, p * u + p * v + 2 * r * u + r * v + r * w, -(u ^ 3) * p * r ^ 2 * v ^ 2 * w * (p * u + p * v + 2 * r * u + r * v + r * w), u ^ 6 * r ^ 4 * v ^ 4 * p ^ 2 * w ^ 2 * (p * u + p * v + 2 * r * u + r * v + r * w), p * u ^ 2 + p * v ^ 2 + 2 * r * u ^ 2 + r * v ^ 2 + r * w ^ 2, -(u ^ 2) * r * v * (v * r * w + p * u * v + 2 * v * p * w + r * u * w + p * u * w), 3u + 2v + w, r * ((((-u * p * v ^ 2 - p * u * w ^ 2) - p * u ^ 2 * v) - u ^ 2 * p * w) + r * u ^ 3 + r * v ^ 3), u ^ 2 * v * (((v * r * w ^ 2 + r * v ^ 2 * w) - 2 * v * p * u * w) + r * u ^ 2 * w + u ^ 2 * r * v), -(u ^ 3) * p * r ^ 2 * v ^ 2 * w * (3u + 2v + w), u ^ 6 * r ^ 4 * v ^ 4 * p ^ 2 * w ^ 2 * (3u + 2v + w), -(u ^ 9) * p ^ 3 * r ^ 6 * v ^ 6 * w ^ 3 * (3u + 2v + w), 3 * u ^ 2 + 2 * v ^ 2 + w ^ 2, -(u ^ 2) * p * r ^ 2 * v * (3 * v * w + u * v + 2 * u * w), (u ^ 2 + v ^ 2) * ((u ^ 2 - u * v) + w ^ 2), u * (u + v), -(u ^ 4) * p * r ^ 2 * v ^ 2 * w * (u + v), u ^ 7 * r ^ 4 * v ^ 4 * p ^ 2 * w ^ 2 * (u + v), u ^ 2 * ((3 * v ^ 2 * w ^ 2 - 2 * u * v ^ 3) + u ^ 4), -p * r ^ 2 * u ^ 5 * v ^ 2 * w * ((3 * v ^ 2 * w ^ 2 - 2 * u * v ^ 3) + u ^ 4), p ^ 2 * r ^ 4 * u ^ 8 * v ^ 4 * w ^ 2 * ((3 * v ^ 2 * w ^ 2 - 2 * u * v ^ 3) + u ^ 4), u * (-v * w + u ^ 2), v * r ^ 2 * p * (-v * w + u ^ 2), 0, 0, u ^ 13 * v ^ 8 * p ^ 4 * r ^ 8 * w ^ 4 * (-v * w + u ^ 2), 0] * c
            end
        f83 = function (r, p, u, v, w, eps)
                local s
                s = eps * GetRoot(-r * p * v * w, 2)
                return [8, 4p + 4r, (p + r) * (((-u * v - u * w) - v * w) + u ^ 2), -4 * u ^ 3 * v * s * w * (p + r), -(u ^ 3) * v ^ 3 * w ^ 3 * (p + r) * ((p ^ 2 - p * r) + r ^ 2), u * (p + r), ((-2 * p * r * u * v - 2 * p * r * u * w) - 2 * p * r * v * w) + p ^ 2 * u ^ 2 + r ^ 2 * u ^ 2, 2 * p ^ 2 * r ^ 2 * u ^ 2 * v ^ 2 + 2 * p ^ 2 * r ^ 2 * u ^ 2 * w ^ 2 + 2 * p ^ 2 * r ^ 2 * v ^ 2 * w ^ 2 + p ^ 4 * u ^ 4 + r ^ 4 * u ^ 4, ((s * u * ((-(r ^ 2) * v * w - p ^ 2 * v * w) + 2 * p * r * u * v + 2 * p * r * u * w + 2 * u ^ 2 * p * r)) // p) // r, -(u ^ 3) * v * p * r * s * w * (((-2 * p * r * u * v - 2 * p * r * u * w) - 2 * p * r * v * w) + p ^ 2 * u ^ 2 + r ^ 2 * u ^ 2), ((-(u ^ 2) * v * w * (r ^ 4 * v ^ 2 * w ^ 2 + 2 * p ^ 2 * r ^ 2 * u ^ 2 * w ^ 2 + 2 * p ^ 2 * r ^ 2 * u ^ 2 * v ^ 2 + 2 * p ^ 2 * r ^ 2 * u ^ 4 + p ^ 4 * v ^ 2 * w ^ 2)) // p) // r, u ^ 9 * v ^ 4 * r ^ 4 * p ^ 4 * s * w ^ 4 * (((-2 * p * r * u * v - 2 * p * r * u * w) - 2 * p * r * v * w) + p ^ 2 * u ^ 2 + r ^ 2 * u ^ 2), -(u ^ 4) * v * r * p * s * w * (p + r), -s * u, p * r * u ^ 2 * v * w, -8 * p * r * s * u ^ 3 * v * w, -(p ^ 2) * r ^ 2 * u ^ 4 * v ^ 2 * w ^ 2, -(p ^ 2) * r ^ 2 * s * u ^ 5 * v ^ 2 * w ^ 2, -8 * p ^ 3 * r ^ 3 * u ^ 6 * v ^ 3 * w ^ 3, 8 * p ^ 4 * r ^ 4 * s * u ^ 9 * v ^ 4 * w ^ 4, 8 * p ^ 6 * r ^ 6 * u ^ 12 * v ^ 6 * w ^ 6, -8 * p ^ 7 * r ^ 7 * s * u ^ 15 * v ^ 7 * w ^ 7, (p + r) * (w + v + 2u), -(u ^ 3) * r * v * p * s * w * (p + r) * (w + v + 2u), -(u ^ 6) * v ^ 3 * r ^ 3 * p ^ 3 * w ^ 3 * (p + r) * (w + v + 2u), (w ^ 2 + v ^ 2 + 2 * u ^ 2) * (p + r), -(u ^ 2) * (p + r) * s * (2 * v * w + u * v + u * w), 4u + 2v + 2w, (((((-p * r * u * v ^ 2 - p * r * u * w ^ 2) - p * r * v * w ^ 2) - p * r * u ^ 2 * v) - p * r * u ^ 2 * w) - p * r * v ^ 2 * w) + p ^ 2 * u ^ 3 + r ^ 2 * u ^ 3, ((u ^ 2 * s * ((-(r ^ 2) * u * v * w - p ^ 2 * u * v * w) + p * r * v * w ^ 2 + p * r * v ^ 2 * w + p * r * u * v ^ 2 + p * r * u * w ^ 2 + p * r * u ^ 2 * v + p * r * u ^ 2 * w)) // p) // r, -2 * u ^ 3 * p * r * s * v * w * (w + v + 2u), -2 * u ^ 6 * p ^ 3 * r ^ 3 * v ^ 3 * w ^ 3 * (w + v + 2u), 2 * u ^ 9 * p ^ 4 * r ^ 4 * s * v ^ 4 * w ^ 4 * (w + v + 2u), 4 * u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2, -2 * u ^ 2 * p * r * s * (2 * v * w + u * v + u * w), ((((-u * v ^ 3 - u * w ^ 3) + u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2) - u ^ 3 * v) - u ^ 3 * w) + u ^ 4, u * (u + v + w), -(u ^ 4) * p * r * s * v * w * (u + v + w), -(u ^ 7) * p ^ 3 * r ^ 3 * v ^ 3 * w ^ 3 * (u + v + w), u ^ 2 * (((3 * v ^ 2 * w ^ 2 - 2 * u * v ^ 3) - 2 * u * w ^ 3) + u ^ 4), -p * r * s * u ^ 5 * v * w * (((3 * v ^ 2 * w ^ 2 - 2 * u * v ^ 3) - 2 * u * w ^ 3) + u ^ 4), -(p ^ 3) * r ^ 3 * u ^ 8 * v ^ 3 * w ^ 3 * (((3 * v ^ 2 * w ^ 2 - 2 * u * v ^ 3) - 2 * u * w ^ 3) + u ^ 4), u * (-v * w + u ^ 2), p * r * s * (-v * w + u ^ 2), 0, 0, u ^ 13 * v ^ 6 * p ^ 6 * r ^ 6 * w ^ 6 * (-v * w + u ^ 2), 0] * c
            end
        f97 = function (r, p, u, v, w, j)
                return [9, 3p + 6r, (((((-p * u * v - p * u * w) - v * p * w) - r * u * v) - r * u * w) - v * r * w) + r * u ^ 2 + r * v ^ 2 + r * w ^ 2, 3 * r * u ^ 2 * v ^ 2 * j ^ 2 * w ^ 2 * (2p + r), r * u * v * p ^ 2 * j * w * (w ^ 3 * v ^ 3 + w ^ 3 * u ^ 3 + u ^ 3 * v ^ 3), r * (u + v + w), r * (((-2 * p * u * v - 2 * p * u * w) - 2 * v * p * w) + r * u ^ 2 + r * v ^ 2 + r * w ^ 2), r ^ 2 * (2 * p ^ 2 * u ^ 2 * v ^ 2 + 2 * p ^ 2 * u ^ 2 * w ^ 2 + 2 * p ^ 2 * v ^ 2 * w ^ 2 + u ^ 4 * r ^ 2 + v ^ 4 * r ^ 2 + r ^ 2 * w ^ 4), j ^ 2 * (((-2 * r * u * v * w ^ 2 - 2 * r * u * v ^ 2 * w) - 2 * r * u ^ 2 * v * w) + p * u ^ 2 * v ^ 2 + p * u ^ 2 * w ^ 2 + p * v ^ 2 * w ^ 2), u ^ 2 * v ^ 2 * r ^ 3 * j ^ 2 * p * w ^ 2 * (((-2 * p * u * v - 2 * p * u * w) - 2 * v * p * w) + r * u ^ 2 + r * v ^ 2 + r * w ^ 2), j * (2 * r ^ 2 * u ^ 2 * v ^ 2 * w ^ 4 + 2 * r ^ 2 * u ^ 2 * v ^ 4 * w ^ 2 + 2 * r ^ 2 * u ^ 4 * v ^ 2 * w ^ 2 + p ^ 2 * u ^ 4 * v ^ 4 + p ^ 2 * u ^ 4 * w ^ 4 + p ^ 2 * v ^ 4 * w ^ 4), u ^ 6 * v ^ 6 * r ^ 7 * p ^ 3 * w ^ 6 * (((-2 * p * u * v - 2 * p * u * w) - 2 * v * p * w) + r * u ^ 2 + r * v ^ 2 + r * w ^ 2), u ^ 2 * j ^ 2 * p * r ^ 3 * v ^ 2 * w ^ 2 * (u + v + w), 0, 0, 9 * j ^ 2 * p * r ^ 2 * u ^ 2 * v ^ 2 * w ^ 2, 0, 0, 9 * j * p ^ 2 * r ^ 4 * u ^ 4 * v ^ 4 * w ^ 4, 9 * p ^ 3 * r ^ 6 * u ^ 6 * v ^ 6 * w ^ 6, 9 * j ^ 2 * p ^ 4 * r ^ 8 * u ^ 8 * v ^ 8 * w ^ 8, 9 * j * p ^ 5 * r ^ 10 * u ^ 10 * v ^ 10 * w ^ 10, (p + 2r) * (u + v + w), u ^ 2 * r ^ 2 * v ^ 2 * j ^ 2 * p * w ^ 2 * (p + 2r) * (u + v + w), u ^ 4 * r ^ 4 * v ^ 4 * j * p ^ 2 * w ^ 4 * (p + 2r) * (u + v + w), (u ^ 2 + v ^ 2 + w ^ 2) * (p + 2r), u * (2p + r) * r * v * j ^ 2 * w * (v * w + u * v + u * w), 3u + 3v + 3w, r * ((((((-u * p * v ^ 2 - p * u * w ^ 2) - p * v * w ^ 2) - p * u ^ 2 * v) - u ^ 2 * p * w) - p * v ^ 2 * w) + r * u ^ 3 + r * v ^ 3 + r * w ^ 3), -u * v * j ^ 2 * w * (((v * r * w ^ 2 + w ^ 2 * r * u + r * v ^ 2 * w) - 3 * v * p * u * w) + r * u ^ 2 * w + u * r * v ^ 2 + u ^ 2 * r * v), 3 * u ^ 2 * j ^ 2 * p * r ^ 2 * v ^ 2 * w ^ 2 * (u + v + w), 3 * u ^ 4 * j * p ^ 2 * r ^ 4 * v ^ 4 * w ^ 4 * (u + v + w), 3 * u ^ 6 * p ^ 3 * r ^ 6 * v ^ 6 * w ^ 6 * (u + v + w), 3 * u ^ 2 + 3 * v ^ 2 + 3 * w ^ 2, 3 * u * v * r ^ 2 * p * j ^ 2 * w * (v * w + u * v + u * w), (((((-u * v ^ 3 - u * w ^ 3) - v * w ^ 3) + u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2) - u ^ 3 * v) - u ^ 3 * w) - v ^ 3 * w, v * w + u * v + u * w, u ^ 2 * j ^ 2 * p * r ^ 2 * v ^ 2 * w ^ 2 * (v * w + u * v + u * w), u ^ 4 * j * p ^ 2 * r ^ 4 * v ^ 4 * w ^ 4 * (v * w + u * v + u * w), ((3 * u ^ 2 * v ^ 2 * w ^ 2 - 2 * u ^ 3 * v ^ 3) - 2 * w ^ 3 * u ^ 3) - 2 * w ^ 3 * v ^ 3, -(j ^ 2) * p * r ^ 2 * u ^ 2 * v ^ 2 * w ^ 2 * (-3 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 3 * v ^ 3 + 2 * w ^ 3 * u ^ 3 + 2 * w ^ 3 * v ^ 3), -j * p ^ 2 * r ^ 4 * u ^ 4 * v ^ 4 * w ^ 4 * (-3 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 3 * v ^ 3 + 2 * w ^ 3 * u ^ 3 + 2 * w ^ 3 * v ^ 3), -u * v * w, -(j ^ 2) * p * r ^ 2 * u * v * w, j * p * r * u * v * w, r ^ 3 * u ^ 3 * v ^ 3 * w ^ 3, -(j ^ 2) * p ^ 4 * r ^ 8 * u ^ 9 * v ^ 9 * w ^ 9, j * r * u * v * w] * c
            end
        r = (para[1])[1]
        p = (para[1])[2]
        u = (para[2])[1]
        v = (para[2])[2]
        w = (para[2])[3]
        res[:irreducibles] = [f10(r, u), f10(p, u), f10(p, w), f10(p, v), f10(r, w), f10(r, v), f23(p, r, v, w, u), f23(r, p, v, w, u), f23(p, r, u, v, w), f23(r, p, u, v, w), f23(p, r, u, w, v), f23(r, p, u, w, v), f36(r, p, u, v, w), f36(p, r, u, v, w), f31(p, r, v, u, w), f31(r, p, v, u, w), f31(p, r, u, w, v), f31(r, p, u, w, v), f31(p, r, w, v, u), f31(r, p, w, v, u), f31(p, r, w, u, v), f31(r, p, w, u, v), f31(p, r, u, v, w), f31(r, p, u, v, w), f31(p, r, v, w, u), f31(r, p, v, w, u), f62(r, p, w, u, v), f62(p, r, w, u, v), f62(r, p, v, w, u), f62(p, r, v, w, u), f62(r, p, u, v, w), f62(p, r, u, v, w), f62(r, p, v, u, w), f62(p, r, v, u, w), f62(r, p, w, v, u), f62(p, r, w, v, u), f62(r, p, u, w, v), f62(p, r, u, w, v), f83(r, p, u, v, w, 1), f83(r, p, u, v, w, -1), f83(r, p, w, v, u, -1), f83(r, p, w, v, u, 1), f83(r, p, v, u, w, 1), f83(r, p, v, u, w, -1), f97(p, r, u, v, w, E(3, 2)), f97(r, p, u, v, w, E(3, 2)), f97(p, r, u, v, w, E(3)), f97(r, p, u, v, w, E(3))]
        return ((CHEVIE[:compat])[:MakeCharacterTable])(res)
    end)
chevieset(:G26, :CharTable, function ()
        return (chevieget(:G26, :HeckeCharTable))([[1, -1], [1, E(3), E(3, 2)], [1, E(3), E(3, 2)]], [])
    end)
chevieset(:G26, :sparseFakeDegrees, [[1, 0], [1, 9], [1, 33], [1, 21], [1, 24], [1, 12], [1, 24, 1, 30], [1, 15, 1, 21], [1, 12, 1, 18], [1, 3, 1, 9], [1, 18, 1, 24], [1, 9, 1, 15], [1, 6, 1, 12, 1, 18], [1, 15, 1, 21, 1, 27], [1, 8, 1, 14, 1, 20], [1, 5, 1, 11, 1, 17], [1, 8, 1, 14, 1, 20], [1, 5, 1, 11, 1, 17], [1, 20, 1, 26, 1, 32], [1, 17, 1, 23, 1, 29], [1, 16, 1, 22, 1, 28], [1, 13, 1, 19, 1, 25], [1, 4, 1, 10, 1, 16], [1, 1, 1, 7, 1, 13], [1, 16, 1, 22, 1, 28], [1, 13, 1, 19, 1, 25], [1, 8, 2, 14, 2, 20, 1, 26], [1, 11, 2, 17, 2, 23, 1, 29], [1, 8, 2, 14, 2, 20, 1, 26], [1, 11, 2, 17, 2, 23, 1, 29], [1, 2, 2, 8, 2, 14, 1, 20], [1, 5, 2, 11, 2, 17, 1, 23], [1, 4, 2, 10, 2, 16, 1, 22], [1, 7, 2, 13, 2, 19, 1, 25], [1, 10, 2, 16, 2, 22, 1, 28], [1, 13, 2, 19, 2, 25, 1, 31], [1, 4, 2, 10, 2, 16, 1, 22], [1, 7, 2, 13, 2, 19, 1, 25], [2, 6, 3, 12, 2, 18, 1, 24], [1, 3, 2, 9, 3, 15, 2, 21], [1, 9, 2, 15, 3, 21, 2, 27], [2, 12, 3, 18, 2, 24, 1, 30], [1, 6, 2, 12, 3, 18, 2, 24], [2, 9, 3, 15, 2, 21, 1, 27], [1, 8, 3, 14, 3, 20, 2, 26], [1, 5, 3, 11, 3, 17, 2, 23], [2, 10, 3, 16, 3, 22, 1, 28], [2, 7, 3, 13, 3, 19, 1, 25]])
chevieset(:G26, :SchurModels, Dict{Symbol, Any}(:f1_0 => Dict{Symbol, Any}(:coeff => -1, :vcyc => [[[1, -1, 0, 0, 0], 1], [[0, 0, 1, -1, 0], 1], [[0, 0, 1, 0, -1], 1], [[1, -1, 1, -1, 0], 2], [[1, -1, 1, 0, -1], 2], [[1, -1, 2, -2, 0], 1], [[1, -1, 2, 0, -2], 1], [[1, -1, 3, -2, -1], 2], [[1, -1, 3, -1, -2], 2], [[1, -1, 2, -1, -1], 6], [[0, 0, 2, -1, -1], 2], [[0, 0, 1, -1, 0], 6], [[0, 0, 1, 0, -1], 6]]), :f2_3 => Dict{Symbol, Any}(:factor => [0, 0, -1, 1, 0], :vcyc => [[[1, -1, 0, 0, 0], 1], [[0, 0, 1, 0, -1], 1], [[0, 0, 0, 1, -1], 1], [[1, -1, 1, 0, -1], 1], [[1, -1, 0, 1, -1], 1], [[1, -1, 1, 0, -1], 2], [[1, -1, 0, 1, -1], 2], [[1, -1, 1, -1, 0], 2], [[1, -1, -1, 1, 0], 2], [[1, -1, 1, 1, -2], 6], [[0, 0, 1, 1, -2], 2], [[0, 0, 1, -1, 0], 6]]), :f3_1 => Dict{Symbol, Any}(:coeff => -1, :vcyc => [[[-1, 1, 0, 0, 0], 1], [[0, 0, 1, -1, 0], 1], [[0, 0, 1, 0, -1], 1], [[0, 0, 1, 0, -1], 2], [[0, 0, 0, 1, -1], 1], [[0, 0, 1, 1, -2], 2], [[0, 0, 2, -1, -1], 2], [[0, 0, 1, 0, -1], 6], [[1, -1, 1, 0, -1], 2], [[1, -1, -1, 1, 0], 2], [[1, -1, 2, -2, 0], 1], [[1, -1, 2, 1, -3], 2]]), :f3_6 => Dict{Symbol, Any}(:coeff => -1, :vcyc => [[[1, -1, 0, 0, 0], 1], [[1, -1, 0, 0, 0], 3], [[1, -1, 1, -1, 0], 2], [[1, -1, 1, 0, -1], 2], [[1, -1, -1, 1, 0], 2], [[1, -1, 0, 1, -1], 2], [[1, -1, -1, 0, 1], 2], [[1, -1, 0, -1, 1], 2], [[0, 0, 1, 1, -2], 2], [[0, 0, 1, -2, 1], 2], [[0, 0, -2, 1, 1], 2]]), :f6_2 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0, 0, 0], 1], [[0, 0, -1, 1, 0], 1], [[0, 0, 1, 0, -1], 1], [[0, 0, 0, 1, -1], 1], [[0, 0, -1, 0, 1], 2], [[0, 0, 1, 0, -1], 6], [[0, 0, 1, -2, 1], 2], [[1, -1, 0, 1, -1], 1], [[-1, 1, 1, 0, -1], 2], [[1, -1, 0, 1, -1], 2], [[1, -1, 3, -2, -1], 2]]), :f8_3 => Dict{Symbol, Any}(:coeff => 2, :root => [1, 1, 0, 1, 1] // 2, :rootCoeff => -1, :vcyc => [[[0, 0, 1, -1, 0], 1], [[0, 0, 1, 0, -1], 1], [[-1, 1, 0, -1, 1], 2], [[-1, 1, 0, 1, -1], 2], [[0, -1, 1, 0, -2, 1], 2], [[0, -1, 1, -2, 0, 1], 2], [[0, -1, -1, -1, 1, 1], 1], [[0, -1, -1, 1, -1, 1], 1], [[0, -1, 1, -1, -1, 1], 3], [[-1, 0, 1, -1, -1, 1], 3]]), :f9_7 => Dict{Symbol, Any}(:rootUnity => E(3), :vcyc => [[[0, 0, 0, 0, 0, 2], 1], [[0, 0, 1, -1, 0], 6], [[0, 0, -1, 0, 1], 6], [[0, 0, 0, 1, -1], 6], [[1, -1, -2, 1, 1, 1], 2], [[1, -1, 1, -2, 1, 1], 2], [[1, -1, 1, 1, -2, 1], 2], [[-1, 1, 0, 0, 0], 1], [[1, -1, 0, 0, 0, 1], 1]])))
chevieset(:G26, :SchurData, [Dict{Symbol, Any}(:name => "f1_0", :order => [1, 2, 3, 4, 5]), Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1, 3, 4, 5]), Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1, 5, 4, 3]), Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1, 4, 3, 5]), Dict{Symbol, Any}(:name => "f1_0", :order => [1, 2, 5, 4, 3]), Dict{Symbol, Any}(:name => "f1_0", :order => [1, 2, 4, 3, 5]), Dict{Symbol, Any}(:name => "f2_3", :order => [2, 1, 4, 5, 3]), Dict{Symbol, Any}(:name => "f2_3", :order => [1, 2, 4, 5, 3]), Dict{Symbol, Any}(:name => "f2_3", :order => [2, 1, 3, 4, 5]), Dict{Symbol, Any}(:name => "f2_3", :order => [1, 2, 3, 4, 5]), Dict{Symbol, Any}(:name => "f2_3", :order => [2, 1, 3, 5, 4]), Dict{Symbol, Any}(:name => "f2_3", :order => [1, 2, 3, 5, 4]), Dict{Symbol, Any}(:name => "f3_6", :order => [1, 2, 3, 4, 5]), Dict{Symbol, Any}(:name => "f3_6", :order => [2, 1, 3, 4, 5]), Dict{Symbol, Any}(:name => "f3_1", :order => [2, 1, 4, 3, 5]), Dict{Symbol, Any}(:name => "f3_1", :order => [1, 2, 4, 3, 5]), Dict{Symbol, Any}(:name => "f3_1", :order => [2, 1, 3, 5, 4]), Dict{Symbol, Any}(:name => "f3_1", :order => [1, 2, 3, 5, 4]), Dict{Symbol, Any}(:name => "f3_1", :order => [2, 1, 5, 4, 3]), Dict{Symbol, Any}(:name => "f3_1", :order => [1, 2, 5, 4, 3]), Dict{Symbol, Any}(:name => "f3_1", :order => [2, 1, 5, 3, 4]), Dict{Symbol, Any}(:name => "f3_1", :order => [1, 2, 5, 3, 4]), Dict{Symbol, Any}(:name => "f3_1", :order => [2, 1, 3, 4, 5]), Dict{Symbol, Any}(:name => "f3_1", :order => [1, 2, 3, 4, 5]), Dict{Symbol, Any}(:name => "f3_1", :order => [2, 1, 4, 5, 3]), Dict{Symbol, Any}(:name => "f3_1", :order => [1, 2, 4, 5, 3]), Dict{Symbol, Any}(:name => "f6_2", :order => [1, 2, 5, 3, 4]), Dict{Symbol, Any}(:name => "f6_2", :order => [2, 1, 5, 3, 4]), Dict{Symbol, Any}(:name => "f6_2", :order => [1, 2, 4, 5, 3]), Dict{Symbol, Any}(:name => "f6_2", :order => [2, 1, 4, 5, 3]), Dict{Symbol, Any}(:name => "f6_2", :order => [1, 2, 3, 4, 5]), Dict{Symbol, Any}(:name => "f6_2", :order => [2, 1, 3, 4, 5]), Dict{Symbol, Any}(:name => "f6_2", :order => [1, 2, 4, 3, 5]), Dict{Symbol, Any}(:name => "f6_2", :order => [2, 1, 4, 3, 5]), Dict{Symbol, Any}(:name => "f6_2", :order => [1, 2, 5, 4, 3]), Dict{Symbol, Any}(:name => "f6_2", :order => [2, 1, 5, 4, 3]), Dict{Symbol, Any}(:name => "f6_2", :order => [1, 2, 3, 5, 4]), Dict{Symbol, Any}(:name => "f6_2", :order => [2, 1, 3, 5, 4]), Dict{Symbol, Any}(:name => "f8_3", :order => [1, 2, 3, 4, 5], :rootPower => -1), Dict{Symbol, Any}(:name => "f8_3", :order => [1, 2, 3, 4, 5], :rootPower => 1), Dict{Symbol, Any}(:name => "f8_3", :order => [1, 2, 5, 4, 3], :rootPower => 1), Dict{Symbol, Any}(:name => "f8_3", :order => [1, 2, 5, 4, 3], :rootPower => -1), Dict{Symbol, Any}(:name => "f8_3", :order => [1, 2, 4, 3, 5], :rootPower => -1), Dict{Symbol, Any}(:name => "f8_3", :order => [1, 2, 4, 3, 5], :rootPower => 1), Dict{Symbol, Any}(:name => "f9_7", :order => [2, 1, 3, 4, 5], :rootUnityPower => 2), Dict{Symbol, Any}(:name => "f9_7", :order => [1, 2, 3, 4, 5], :rootUnityPower => 2), Dict{Symbol, Any}(:name => "f9_7", :order => [2, 1, 3, 4, 5], :rootUnityPower => 1), Dict{Symbol, Any}(:name => "f9_7", :order => [1, 2, 3, 4, 5], :rootUnityPower => 1)])
chevieset(:G26, :HeckeRepresentation, function (para, root, i)
        local x, y, u, v, w, f10, f23, f31, f36, f6, f8, f9, rep
        x = (para[1])[1]
        y = (para[1])[2]
        u = (para[2])[1]
        v = (para[2])[2]
        w = (para[2])[3]
        f10 = function (x, u)
                return [[[x]], [[u]], [[u]]]
            end
        f23 = function (x, u, v)
                return [[[x, 0], [0, x]], [[u, 0], [-u, v]], [[v, v], [0, u]]]
            end
        f36 = (x->begin
                    [[[x, 0, 0], [0, x, 0], [0, 0, x]], [[w, 0, 0], [u * w + v ^ 2, v, 0], [v, 1, u]], [[u, -1, v], [0, v, -u * w - v ^ 2], [0, 0, w]]]
                end)
        f31 = function (x, y, u, v)
                return [[[y, 0, 0], [0, y, -u * y - v * x], [0, 0, x]], [[v, v, 0], [0, u, 0], [0, 1, v]], [[u, 0, 0], [-u, v, 0], [0, 0, v]]]
            end
        f6 = function (r, p, u, v, w)
                return [[[r, 0, 0, 0, 0, 0], [0, r, 0, 0, 0, r * u * w + p * w ^ 2], [0, 0, r, 0, p * w + r * u, -p * w - r * u], [0, 0, 0, r, p * w ^ 2 - r * v ^ 2, r * v * w + r * v ^ 2], [0, 0, 0, 0, p, 0], [0, 0, 0, 0, 0, p]], [[w, -1, v, 0, 0, 0], [0, v, -u * w - v ^ 2, 0, 0, 0], [0, 0, u, 0, 0, 0], [0, 0, -v * w - v ^ 2, v, 0, 0], [0, 0, 0, -(w ^ -1), w, 0], [0, 0, 1, -(w ^ -1), 0, w]], [[u, 0, 0, 0, 0, 0], [u * w + v ^ 2, v, 0, 0, 0, 0], [v, 1, w, 0, 0, 0], [v * w, 0, 0, w, 0, v * w ^ 2], [0, 0, 0, 0, w, v], [0, 0, 0, 0, 0, v]]]
            end
        f8 = function (r, p, u, v, w, sgn)
                local s
                s = sgn * GetRoot(-p * r * v * w)
                return [[[p, 0, 0, 0, 0, 0, 0, 0], [0, p, 0, 0, 0, 0, 0, 0], [0, 0, p, 0, 0, 0, 0, 0], [0, 0, 0, p, 0, 0, 0, 0], [0, 0, -p, 0, r, 0, 0, 0], [0, -p * u ^ 2 * v ^ -1 * w ^ -1, p * u * v ^ -1 - p * u * w ^ -1, 0, 0, r, 0, 0], [0, 0, p + p * u * v ^ -1, -p + s * v ^ -1, 0, 0, r, 0], [p * u * v ^ -1 + s * u * v ^ -1 * w ^ -1, 0, ((p + s * v ^ -1 + s * u * v ^ -2 + p * u * v ^ -1) - r * u * v ^ -1) + s * u * v ^ -1 * w ^ -1, 0, 0, 0, 0, r]], [[u, 0, 0, 0, 0, 0, 0, 0], [u ^ -1 * w ^ 2 + v, w, 0, 0, (((((((p ^ -2 * r * s - u ^ -2 * v * w ^ 2) - p ^ -1 * s) - p ^ -1 * s * u ^ -2 * w ^ 2) - p ^ -1 * s * u ^ -1 * v ^ -1 * w ^ 2) - p ^ -1 * s * u ^ -1 * v) - p ^ -1 * s * u ^ -1 * w) + p ^ -1 * r * u ^ -1 * v * w + p ^ -1 * r * u ^ -1 * w ^ 2 + 2 * p ^ -1 * r * w) - u ^ -1 * v * w, u ^ -2 * v * w ^ 2 + p ^ -1 * r * u ^ -1 * v * w, 0, -(u ^ -2) * v * w ^ 2 - p ^ -1 * s * u ^ -1 * v], [w, u, v, 0, (((-(p ^ -1) * s - p ^ -1 * s * u ^ -1 * w) - p ^ -1 * s * v ^ -1 * w) + p ^ -1 * r * u + p ^ -1 * r * w) - u ^ -1 * v * w, u ^ -1 * v * w, 0, -(u ^ -1) * v * w], [0, 0, 0, v, 0, -(p ^ -1) * s, p ^ -1 * s + v, -v], [0, 0, 0, 0, u, 0, 0, 0], [0, 0, 0, 0, 0, u, 0, 0], [0, 0, 0, 0, (((p ^ -1 * s * u * v ^ -1 + r ^ -1 * s * u * v ^ -1) - u) + w + u * v ^ -1 * w) - u ^ 2 * v ^ -1, -w, w, 0], [0, 0, 0, 0, 0, 0, 0, u]], [[v, -u, w, p ^ -1 * s, 0, 0, 0, 0], [0, w, -(u ^ -1) * w ^ 2 - v, -(p ^ -1) * s * u ^ -1 * w + u ^ -1 * v * w, 0, 0, 0, 0], [0, 0, u, 0, 0, 0, 0, 0], [0, 0, 0, u, 0, 0, 0, 0], [0, 0, 0, 0, u, 0, 0, 0], [0, 0, 0, 0, 0, w, u, 0], [0, 0, 0, 0, 0, 0, u, 0], [0, 0, 0, u, ((((p ^ -1 * s - p ^ -1 * r * u) - p ^ -1 * s * u ^ 2 * v ^ -2) + p ^ -1 * r * u ^ 2 * v ^ -1) - p ^ -1 * s * u ^ 2 * v ^ -1 * w ^ -1) + v, p ^ -1 * s + w, u, v]]]
            end
        f9 = function (r, p, u, v, w, j)
                return [[[p, 0, 0, 0, 0, 0, 0, 0, 0], [0, p, 0, 0, 0, 0, 0, 0, 0], [0, 0, p, 0, 0, 0, 0, 0, 0], [0, 0, 0, p, 0, 0, 0, 0, 0], [-(j ^ 2) * p * u, j ^ 2 * p * u ^ -1 * v, -(j ^ 2) * p * u ^ -1 * v ^ 2 + j * p * v + r * w, r * u ^ -1 * w, r, j * w, 0, 1, 0], [0, 0, 0, 0, 0, p, 0, 0, 0], [0, -p * u - j ^ 2 * p * v, (-j * p * u * v - r * u * w) + j ^ 2 * p * v ^ 2, -r * w, 0, 0, r, -u, 0], [0, 0, 0, 0, 0, 0, 0, p, 0], [0, 0, -j * p * u + r * u, r, 0, 0, 0, 0, r]], [[w, 0, 0, 0, 0, 0, 0, 0, 0], [u * w + v ^ 2, v, 0, 0, v, 0, u ^ -1 * v, 0, 0], [v, 1, u, 0, 1, 0, u ^ -1, 0, j ^ 2], [0, 0, 0, u, -u, 0, 0, 0, -(j ^ 2) * u - v], [0, 0, 0, 0, w, 0, 0, 0, 0], [(((-(j ^ 2) * p * v - j ^ 2 * r * u) + j * r * v) - j * p * u * v * w ^ -1) + j ^ 2 * p * v ^ 2 * w ^ -1, 0, 0, 0, -(j ^ 2) * r, v, -(j ^ 2) * r * u ^ -1, 0, 0], [0, 0, 0, 0, 0, 0, w, 0, 0], [(((-j * p * u * v - j ^ 2 * p * v * w) - j ^ 2 * r * u * w) - r * v * w) + j ^ 2 * p * v ^ 2, (p * u + j ^ 2 * p * v) - r * w, 0, 0, 0, v * w, p, u, (r * u ^ -1 * v * w + j * p * u ^ -1 * v ^ 2) - p * v], [0, 0, 0, 0, 0, 0, -1, 0, v]], [[u, -1, v, 0, 0, 0, 0, 0, 0], [0, v, -u * w - v ^ 2, -w, 0, 0, 0, 0, 0], [0, 0, w, 0, 0, 0, 0, 0, 0], [0, 0, 0, w, 0, 0, 0, 0, 0], [0, 0, 0, w, u, 0, -(j ^ 2) - u ^ -1 * v, 0, -(u ^ -1) * v * w - j ^ 2 * w], [0, 0, j ^ 2 * r * u, 0, 0, u, 0, -u * w ^ -1, 0], [0, 0, 0, 0, 0, 0, v, 0, v * w], [0, 0, ((j ^ 2 * p * u ^ -1 * v ^ 2 * w + p * u * w + j ^ 2 * p * v * w) - j ^ 2 * p * v ^ 2) - r * w ^ 2, (j ^ 2 * p * u ^ -1 * v * w - r * u ^ -1 * w ^ 2) + p * w, 0, 0, 0, v, 0], [0, 0, 0, 0, 0, 0, 0, 0, w]]]
            end
        rep = [[f10, x, u], [f10, y, u], [f10, y, w], [f10, y, v], [f10, x, w], [f10, x, v], [f23, y, v, w], [f23, x, v, w], [f23, y, u, v], [f23, x, u, v], [f23, y, u, w], [f23, x, u, w], [f36, x], [f36, y], [f31, x, y, u, v], [f31, y, x, u, v], [f31, x, y, w, u], [f31, y, x, w, u], [f31, x, y, v, w], [f31, y, x, v, w], [f31, x, y, u, w], [f31, y, x, u, w], [f31, x, y, v, u], [f31, y, x, v, u], [f31, x, y, w, v], [f31, y, x, w, v], [f6, x, y, v, u, w], [f6, y, x, v, u, w], [f6, x, y, u, w, v], [f6, y, x, u, w, v], [f6, x, y, w, v, u], [f6, y, x, w, v, u], [f6, x, y, w, u, v], [f6, y, x, w, u, v], [f6, x, y, u, v, w], [f6, y, x, u, v, w], [f6, x, y, v, w, u], [f6, y, x, v, w, u], [f8, x, y, u, v, w, -1], [f8, x, y, u, v, w, 1], [f8, x, y, w, v, u, 1], [f8, x, y, w, v, u, -1], [f8, x, y, v, u, w, -1], [f8, x, y, v, u, w, 1], [f9, x, y, u, v, w, E(3, 2)], [f9, y, x, u, v, w, E(3, 2)], [f9, x, y, u, v, w, E(3)], [f9, y, x, u, v, w, E(3)]]
        if rep[i] !== nothing
            return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])]) + 0 * Product(para, Product)
        else
            return false
        end
    end)
chevieset(:G26, :UnipotentCharacters, function ()
        local i3, J
        J = E(3)
        i3 = ER(-3)
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:3, :rank => 3, :ST => 26), :levi => [], :parameterExponents => [1, 1, 1], :charNumbers => 1:48, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1, 3, 13], :rank => 2, :p => 6, :q => 2), :levi => [2], :parameterExponents => [[0, 2, 2], 3, 1], :charNumbers => [102, 68, 71, 66, 53, 70, 60, 67, 54, 103, 69, 72, 99, 59, 98, 65, 50, 49], :eigenvalue => J ^ 2, :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1], :rank => 1, :p => 6, :q => 1), :levi => 2:3, :parameterExponents => [[3, 4, 3, 0, 3, 4]], :charNumbers => [73, 61, 74, 104, 75, 62], :eigenvalue => -1, :cuspidalName => "G_4"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [3], :rank => 1, :p => 6, :q => 1), :levi => 1:2, :parameterExponents => [[4, 3, 1, 1, 0, 1]], :charNumbers => [51, 55, 76, 81, 100, 78], :eigenvalue => J, :cuspidalName => ImprimitiveCuspidalName([[0], [], [0, 1, 2]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [3], :rank => 1, :p => 6, :q => 1), :levi => 1:2, :parameterExponents => [[4, 1, 0, 1, 1, 3]], :charNumbers => [52, 79, 101, 80, 77, 56], :eigenvalue => J, :cuspidalName => ImprimitiveCuspidalName([[0], [0, 1, 2], []])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [92], :eigenvalue => 1, :cuspidalName => "G_{26}[1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [93], :eigenvalue => 1, :cuspidalName => "G_{26}^2[1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [94], :eigenvalue => 1, :cuspidalName => "G_{26}^3[1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [82], :eigenvalue => -1, :cuspidalName => "G_{26}[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [83], :eigenvalue => -1, :cuspidalName => "G_{26}^2[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [88], :eigenvalue => E(3), :cuspidalName => "G_{26}[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [89], :eigenvalue => E(3), :cuspidalName => "G_{26}^2[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [64], :eigenvalue => E(3, 2), :cuspidalName => "G_{26}[\\zeta_{3}^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [84], :eigenvalue => E(3, 2), :cuspidalName => "G_{26}^2[\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [85], :eigenvalue => E(3, 2), :cuspidalName => "G_{26}^3[\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [90], :eigenvalue => -(E(3)), :cuspidalName => "G_{26}[-\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [91], :eigenvalue => -(E(3)), :cuspidalName => "G_{26}^2[-\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [63], :eigenvalue => -(E(3, 2)), :cuspidalName => "G_{26}[-\\zeta_{3}^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [86], :eigenvalue => -(E(3, 2)), :cuspidalName => "G_{26}^2[-\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [87], :eigenvalue => -(E(3, 2)), :cuspidalName => "G_{26}^3[-\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [57], :eigenvalue => E(4), :cuspidalName => "G_{26}[i]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [58], :eigenvalue => -(E(4)), :cuspidalName => "G_{26}[-i]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [95], :eigenvalue => E(9, 8), :cuspidalName => "G_{26}[\\zeta_9^8]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [96], :eigenvalue => E(9, 5), :cuspidalName => "G_{26}[\\zeta_9^5]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [97], :eigenvalue => E(9, 2), :cuspidalName => "G_{26}[\\zeta_9^2]")], :families => [Family("C1", [1]), Family(((CHEVIE[:families])[:QZ])(3), [2, 18, 24, 12, 51, 49, 10, 50, 52], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, 1, -1, -1, -1], :special => 3, :cospecial => 2, :ennola => 6)), Family(((CHEVIE[:families])[:QZ])(3), [13, 17, 23, 37, 56, 53, 31, 54, 55], Dict{Symbol, Any}(:signs => [1, -1, -1, 1, -1, -1, 1, 1, -1], :special => 7, :cospecial => 4, :ennola => 7)), Family("C'\"2", [40, 39, 57, 58], Dict{Symbol, Any}(:ennola => 1)), Family(Family("C2") * ((CHEVIE[:families])[:X])(3), [33, 27, 59, 22, 16, 60, 48, 46, 64, 61, 62, 63], Dict{Symbol, Any}(:signs => [1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1], :ennola => 11)), Family(((CHEVIE[:families])[:X])(3), [32, 38, 65], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 2)), Family(Dict{Symbol, Any}(:fourierMat => [[-(ER(-3)), ER(-3), -9 * E(3, 2), -9 * E(3), 9, 9, 9, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, ((3 - ER(-3)) * 3) // 2, ((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, ((3 + ER(-3)) * 3) // 2, ER(-3), -(ER(-3)), ER(-3) * 2, -(ER(-3)) * 2, (-3 + ER(-3)) * 3, (3 + ER(-3)) * 3, ER(-3) * 6, ((3 + ER(-3)) * 3) // 2, ((-3 + ER(-3)) * 3) // 2, 9 * E(3), -9 * E(3, 2), 9, 9 * E(3, 2), 9 * E(3), -9 * E(3), -9 * E(3, 2), ((-3 - ER(-3)) * 3) // 2, ((-3 + ER(-3)) * 3) // 2, (3 + ER(-3)) * 3, (3 - ER(-3)) * 3, -9, -9, ((3 + ER(-3)) * 3) // 2, ((-3 + ER(-3)) * 3) // 2, 9 * E(3), -9 * E(3, 2), ((3 + ER(-3)) * 3) // 2, ((-3 + ER(-3)) * 3) // 2, 9 * E(3), 9 * E(3, 2), ER(-3) * 2, ER(-3), ER(-3), ER(-3) * 6, ER(-3) * 6, ER(-3) * 6], [ER(-3), -(ER(-3)), -9 * E(3), -9 * E(3, 2), 9, 9, 9, (3 + ER(-3)) * 3, (3 - ER(-3)) * 3, ((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, ((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, -(ER(-3)), ER(-3), -(ER(-3)) * 2, ER(-3) * 2, (-3 - ER(-3)) * 3, (3 - ER(-3)) * 3, -(ER(-3)) * 6, ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 9 * E(3, 2), -9 * E(3), 9, 9 * E(3), 9 * E(3, 2), -9 * E(3, 2), -9 * E(3), ((-3 + ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, -9, -9, ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 9 * E(3, 2), -9 * E(3), ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 9 * E(3, 2), 9 * E(3), -(ER(-3)) * 2, -(ER(-3)), -(ER(-3)), -(ER(-3)) * 6, -(ER(-3)) * 6, -(ER(-3)) * 6], [-9 * E(3, 2), -9 * E(3), 9, 9, -9, -9 * E(3), -9 * E(3, 2), 0, 0, -9, -9, 9, 9, -9, -9, 0, 0, 0, 0, 0, -9 * E(3), 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9, 9, 9, 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), 0, 0, -9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), 0, 9 * E(3), -9 * E(3, 2), 0, 0, 0], [-9 * E(3), -9 * E(3, 2), 9, 9, -9, -9 * E(3, 2), -9 * E(3), 0, 0, -9, -9, 9, 9, -9, -9, 0, 0, 0, 0, 0, -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3), 9, 9, 9, 9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 0, 0, -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9 * E(3), 9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 0, 9 * E(3, 2), -9 * E(3), 0, 0, 0], [9, 9, -9, -9, 9, 9, 9, 0, 0, 9, 9, -9, -9, 9, 9, 0, 0, 0, 0, 0, 9, -9, 9, -9, -9, -9, -9, -9, -9, -9, -9, 0, 0, 9, 9, -9, 9, -9, 9, -9, 9, -9, -9, 0, -9, 9, 0, 0, 0], [9, 9, -9 * E(3), -9 * E(3, 2), 9, 9, 9, 0, 0, 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9, 9, 0, 0, 0, 0, 0, 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9 * E(3), -9, -9 * E(3), -9 * E(3, 2), -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), -9 * E(3), 0, 0, 9, 9, -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), 0, -9, 9, 0, 0, 0], [9, 9, -9 * E(3, 2), -9 * E(3), 9, 9, 9, 0, 0, 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), 9, 9, 0, 0, 0, 0, 0, 9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9, -9 * E(3, 2), -9 * E(3), -9 * E(3), -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 0, 0, 9, 9, -9 * E(3), 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 0, -9, 9, 0, 0, 0], [(3 - ER(-3)) * 3, (3 + ER(-3)) * 3, 0, 0, 0, 0, 0, 18, 18, 0, 0, 0, 0, -(ER(-3)) * 6, ER(-3) * 6, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, -18 * E(3, 2), 18 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18 * E(3, 2), 18 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ER(-3) * 6, (3 + ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, 0], [(3 + ER(-3)) * 3, (3 - ER(-3)) * 3, 0, 0, 0, 0, 0, 18, 18, 0, 0, 0, 0, ER(-3) * 6, -(ER(-3)) * 6, (-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, -18 * E(3), 18 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18 * E(3), 18 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 6, (3 - ER(-3)) * 3, (-3 - ER(-3)) * 3, 0, 0, 0], [((3 - ER(-3)) * 3) // 2, ((3 + ER(-3)) * 3) // 2, -9, -9, 9, 9 * E(3), 9 * E(3, 2), 0, 0, 9, 9, 9, 9, -(ER(-3)) * 3, ER(-3) * 3, (3 + ER(-3)) * 3, (3 - ER(-3)) * 3, 0, 0, 0, 9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9, 9, 9, -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), -9 * E(3), 0, 0, -9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), -(ER(-3)) * 6, ((3 + ER(-3)) * 3) // 2, ((-3 + ER(-3)) * 3) // 2, 0, 0, 0], [((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, -9, -9, 9, 9 * E(3, 2), 9 * E(3), 0, 0, 9, 9, 9, 9, ER(-3) * 3, -(ER(-3)) * 3, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, 0, 0, 0, 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9 * E(3), 9, 9, 9, -9 * E(3), -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 0, 0, -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9 * E(3), 9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), ER(-3) * 6, ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 0, 0, 0], [((3 - ER(-3)) * 3) // 2, ((3 + ER(-3)) * 3) // 2, 9, 9, -9, -9 * E(3), -9 * E(3, 2), 0, 0, 9, 9, 9, 9, -(ER(-3)) * 3, ER(-3) * 3, (3 + ER(-3)) * 3, (3 - ER(-3)) * 3, 0, 0, 0, 9 * E(3), -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9, -9, -9, 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), 0, 0, 9 * E(3), 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), -9 * E(3), -(ER(-3)) * 6, ((3 + ER(-3)) * 3) // 2, ((-3 + ER(-3)) * 3) // 2, 0, 0, 0], [((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 9, 9, -9, -9 * E(3, 2), -9 * E(3), 0, 0, 9, 9, 9, 9, ER(-3) * 3, -(ER(-3)) * 3, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, 0, 0, 0, 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9 * E(3), -9, -9, -9, 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 0, 0, 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3), -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), ER(-3) * 6, ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 0, 0, 0], [ER(-3), -(ER(-3)), -9, -9, 9, 9, 9, -(ER(-3)) * 6, ER(-3) * 6, -(ER(-3)) * 3, ER(-3) * 3, -(ER(-3)) * 3, ER(-3) * 3, -(ER(-3)), ER(-3), -(ER(-3)) * 2, ER(-3) * 2, ER(-3) * 6, ER(-3) * 6, -(ER(-3)) * 6, ER(-3) * 3, ER(-3) * 3, 9, -9, 9, 9, 9, -9, -9, -(ER(-3)) * 3, ER(-3) * 3, ER(-3) * 6, -(ER(-3)) * 6, -9, -9, ER(-3) * 3, ER(-3) * 3, 9, -9, ER(-3) * 3, ER(-3) * 3, 9, 9, -(ER(-3)) * 2, -(ER(-3)), -(ER(-3)), -(ER(-3)) * 6, -(ER(-3)) * 6, -(ER(-3)) * 6], [-(ER(-3)), ER(-3), -9, -9, 9, 9, 9, ER(-3) * 6, -(ER(-3)) * 6, ER(-3) * 3, -(ER(-3)) * 3, ER(-3) * 3, -(ER(-3)) * 3, ER(-3), -(ER(-3)), ER(-3) * 2, -(ER(-3)) * 2, -(ER(-3)) * 6, -(ER(-3)) * 6, ER(-3) * 6, -(ER(-3)) * 3, -(ER(-3)) * 3, 9, -9, 9, 9, 9, -9, -9, ER(-3) * 3, -(ER(-3)) * 3, -(ER(-3)) * 6, ER(-3) * 6, -9, -9, -(ER(-3)) * 3, -(ER(-3)) * 3, 9, -9, -(ER(-3)) * 3, -(ER(-3)) * 3, 9, 9, ER(-3) * 2, ER(-3), ER(-3), ER(-3) * 6, ER(-3) * 6, ER(-3) * 6], [ER(-3) * 2, -(ER(-3)) * 2, 0, 0, 0, 0, 0, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, (3 + ER(-3)) * 3, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, (3 - ER(-3)) * 3, -(ER(-3)) * 2, ER(-3) * 2, -(ER(-3)) * 4, ER(-3) * 4, (3 + ER(-3)) * 3, (-3 + ER(-3)) * 3, -(ER(-3)) * 12, (3 - ER(-3)) * 3, (-3 - ER(-3)) * 3, 0, 0, 0, 0, 0, 0, 0, (-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, 0, 0, (3 - ER(-3)) * 3, (-3 - ER(-3)) * 3, 0, 0, (3 - ER(-3)) * 3, (-3 - ER(-3)) * 3, 0, 0, -(ER(-3)) * 4, -(ER(-3)) * 2, -(ER(-3)) * 2, ER(-3) * 6, ER(-3) * 6, ER(-3) * 6], [-(ER(-3)) * 2, ER(-3) * 2, 0, 0, 0, 0, 0, (-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, ER(-3) * 2, -(ER(-3)) * 2, ER(-3) * 4, -(ER(-3)) * 4, (3 - ER(-3)) * 3, (-3 - ER(-3)) * 3, ER(-3) * 12, (3 + ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, 0, 0, 0, 0, 0, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, (3 + ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, (3 + ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, ER(-3) * 4, ER(-3) * 2, ER(-3) * 2, -(ER(-3)) * 6, -(ER(-3)) * 6, -(ER(-3)) * 6], [(-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, 0, 0, 0, 0, 0, -18 * E(3, 2), -18 * E(3), 0, 0, 0, 0, ER(-3) * 6, -(ER(-3)) * 6, (3 + ER(-3)) * 3, (3 - ER(-3)) * 3, 18 * E(3), -18 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 6, (-3 - ER(-3)) * 3, (3 - ER(-3)) * 3, 0, 0, 0], [(3 + ER(-3)) * 3, (3 - ER(-3)) * 3, 0, 0, 0, 0, 0, 18 * E(3), 18 * E(3, 2), 0, 0, 0, 0, ER(-3) * 6, -(ER(-3)) * 6, (-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, -18 * E(3, 2), 18 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 6, (3 - ER(-3)) * 3, (-3 - ER(-3)) * 3, 0, 0, 0], [ER(-3) * 6, -(ER(-3)) * 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 6, ER(-3) * 6, -(ER(-3)) * 12, ER(-3) * 12, 0, 0, ER(-3) * 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 12, -(ER(-3)) * 6, -(ER(-3)) * 6, 0, 0, 0], [((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, -9 * E(3), -9 * E(3, 2), 9, 9 * E(3, 2), 9 * E(3), 0, 0, 9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), ER(-3) * 3, -(ER(-3)) * 3, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, 0, 0, 0, 9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9, 9 * E(3), 9 * E(3, 2), -9, -9, -9, -9, 0, 0, -9 * E(3, 2), -9 * E(3), 9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9, -9, 9, 9, ER(-3) * 6, ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 0, 0, 0], [((-3 + ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 9 * E(3, 2), 9 * E(3), -9, -9 * E(3), -9 * E(3, 2), 0, 0, -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), -9 * E(3), ER(-3) * 3, -(ER(-3)) * 3, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, 0, -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3), -9, -9 * E(3, 2), -9 * E(3), 9, 9, 9, 9, 0, 0, 9 * E(3), 9 * E(3, 2), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3), -9, 9, -9, -9, ER(-3) * 6, ((-3 - ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 0, 0, 0], [9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9, 9 * E(3, 2), 9 * E(3), 0, 0, 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9, 9, 0, 0, 0, 0, 0, 9 * E(3), -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9, -9 * E(3), -9 * E(3, 2), -9, -9, -9, -9, 0, 0, 9 * E(3, 2), 9 * E(3), -9 * E(3), 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9, 9, -9, -9, 0, -9 * E(3, 2), 9 * E(3), 0, 0, 0], [-9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), -9, -9 * E(3), -9 * E(3, 2), 0, 0, -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), -9, -9, 0, 0, 0, 0, 0, -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), 9 * E(3), 9, 9 * E(3, 2), 9 * E(3), 9, 9, 9, 9, 0, 0, -9 * E(3), -9 * E(3, 2), 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9 * E(3), 9, -9, 9, 9, 0, 9 * E(3), -9 * E(3, 2), 0, 0, 0], [9, 9, 9, 9, -9, -9, -9, 0, 0, 9, 9, -9, -9, 9, 9, 0, 0, 0, 0, 0, 9, -9, -9, 9, 9, 9, 9, 9, 9, -9, -9, 0, 0, -9, -9, -9, 9, 9, -9, -9, 9, 9, 9, 0, -9, 9, 0, 0, 0], [9 * E(3, 2), 9 * E(3), 9, 9, -9, -9 * E(3), -9 * E(3, 2), 0, 0, 9, 9, -9, -9, 9, 9, 0, 0, 0, 0, 0, 9 * E(3), -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9, 9, 9, 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), 0, 0, -9 * E(3), -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), 0, -9 * E(3), 9 * E(3, 2), 0, 0, 0], [9 * E(3), 9 * E(3, 2), 9, 9, -9, -9 * E(3, 2), -9 * E(3), 0, 0, 9, 9, -9, -9, 9, 9, 0, 0, 0, 0, 0, 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9 * E(3), 9, 9, 9, 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 0, 0, -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 0, -9 * E(3, 2), 9 * E(3), 0, 0, 0], [-9 * E(3), -9 * E(3, 2), 9 * E(3, 2), 9 * E(3), -9, -9 * E(3, 2), -9 * E(3), 0, 0, -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), -9, -9, 0, 0, 0, 0, 0, -9, 9, -9, 9, 9, 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), 0, 0, -9 * E(3, 2), -9 * E(3), 9, -9, 9, -9, 9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), 0, 9 * E(3, 2), -9 * E(3), 0, 0, 0], [-9 * E(3, 2), -9 * E(3), 9 * E(3), 9 * E(3, 2), -9, -9 * E(3), -9 * E(3, 2), 0, 0, -9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9, -9, 0, 0, 0, 0, 0, -9, 9, -9, 9, 9, 9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 0, 0, -9 * E(3), -9 * E(3, 2), 9, -9, 9, -9, 9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 0, 9 * E(3), -9 * E(3, 2), 0, 0, 0], [((-3 - ER(-3)) * 3) // 2, ((-3 + ER(-3)) * 3) // 2, 9 * E(3, 2), 9 * E(3), -9, -9 * E(3, 2), -9 * E(3), 0, 0, -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), -9 * E(3), -(ER(-3)) * 3, ER(-3) * 3, (-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, 0, 0, 0, -9, 9, -9, 9, -9, -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), 0, 0, 9 * E(3, 2), 9 * E(3), -9, 9, -9, 9, -9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), -(ER(-3)) * 6, ((-3 + ER(-3)) * 3) // 2, ((3 + ER(-3)) * 3) // 2, 0, 0, 0], [((-3 + ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 9 * E(3), 9 * E(3, 2), -9, -9 * E(3), -9 * E(3, 2), 0, 0, -9 * E(3), -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), ER(-3) * 3, -(ER(-3)) * 3, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, 0, -9, 9, -9, 9, -9, -9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 0, 0, 9 * E(3), 9 * E(3, 2), -9, 9, -9, 9, -9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), ER(-3) * 6, ((-3 - ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 0, 0, 0], [(3 + ER(-3)) * 3, (3 - ER(-3)) * 3, 0, 0, 0, 0, 0, 18 * E(3, 2), 18 * E(3), 0, 0, 0, 0, ER(-3) * 6, -(ER(-3)) * 6, (-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, -18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18 * E(3, 2), 18 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 6, (3 - ER(-3)) * 3, (-3 - ER(-3)) * 3, 0, 0, 0], [(3 - ER(-3)) * 3, (3 + ER(-3)) * 3, 0, 0, 0, 0, 0, 18 * E(3), 18 * E(3, 2), 0, 0, 0, 0, -(ER(-3)) * 6, ER(-3) * 6, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, -18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18 * E(3), 18 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ER(-3) * 6, (3 + ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, 0], [-9, -9, -9 * E(3), -9 * E(3, 2), 9, 9, 9, 0, 0, -9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9, -9, 0, 0, 0, 0, 0, -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9 * E(3), -9, -9 * E(3), -9 * E(3, 2), -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), 0, 0, 9, 9, 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), -9 * E(3), 0, 9, -9, 0, 0, 0], [-9, -9, -9 * E(3, 2), -9 * E(3), 9, 9, 9, 0, 0, -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), -9, -9, 0, 0, 0, 0, 0, -9 * E(3), 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9, -9 * E(3, 2), -9 * E(3), -9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 0, 0, 9, 9, 9 * E(3), -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 0, 9, -9, 0, 0, 0], [((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 9 * E(3), 9 * E(3, 2), -9, -9 * E(3, 2), -9 * E(3), 0, 0, 9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), ER(-3) * 3, -(ER(-3)) * 3, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, 0, 0, 0, 9 * E(3), -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), -9, -9 * E(3), -9 * E(3, 2), 9, 9, -9, -9, 0, 0, 9 * E(3, 2), 9 * E(3), 9 * E(3), -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9, -9, -9, -9, ER(-3) * 6, ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 0, 0, 0], [((-3 + ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, -9 * E(3, 2), -9 * E(3), 9, 9 * E(3), 9 * E(3, 2), 0, 0, -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), -9 * E(3), ER(-3) * 3, -(ER(-3)) * 3, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, 0, -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9 * E(3), 9, 9 * E(3, 2), 9 * E(3), -9, -9, 9, 9, 0, 0, -9 * E(3), -9 * E(3, 2), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9 * E(3), -9, 9, 9, 9, ER(-3) * 6, ((-3 - ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 0, 0, 0], [9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9, -9 * E(3, 2), -9 * E(3), 0, 0, 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9, 9, 0, 0, 0, 0, 0, 9 * E(3), -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9, 9 * E(3), 9 * E(3, 2), 9, 9, -9, -9, 0, 0, -9 * E(3, 2), -9 * E(3), -9 * E(3), 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9, 9, 9, 9, 0, -9 * E(3, 2), 9 * E(3), 0, 0, 0], [-9 * E(3, 2), -9 * E(3), -9 * E(3, 2), -9 * E(3), 9, 9 * E(3), 9 * E(3, 2), 0, 0, -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), -9, -9, 0, 0, 0, 0, 0, -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9 * E(3), -9, -9 * E(3, 2), -9 * E(3), -9, -9, 9, 9, 0, 0, 9 * E(3), 9 * E(3, 2), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9 * E(3), 9, -9, -9, -9, 0, 9 * E(3), -9 * E(3, 2), 0, 0, 0], [((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 9 * E(3, 2), 9 * E(3), -9, -9 * E(3, 2), -9 * E(3), 0, 0, 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), ER(-3) * 3, -(ER(-3)) * 3, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, 0, 0, 0, 9, -9, -9, 9, -9, -9 * E(3, 2), -9 * E(3), 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), 0, 0, 9 * E(3, 2), 9 * E(3), 9, -9, -9, 9, 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), -9 * E(3), ER(-3) * 6, ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, 0, 0, 0], [((-3 + ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, -9 * E(3), -9 * E(3, 2), 9, 9 * E(3), 9 * E(3, 2), 0, 0, -9 * E(3), -9 * E(3, 2), -9 * E(3), -9 * E(3, 2), ER(-3) * 3, -(ER(-3)) * 3, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, 0, 0, 0, -9, 9, 9, -9, 9, 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 0, 0, -9 * E(3), -9 * E(3, 2), -9, 9, 9, -9, -9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), ER(-3) * 6, ((-3 - ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 0, 0, 0], [9 * E(3), 9 * E(3, 2), 9 * E(3, 2), 9 * E(3), -9, -9 * E(3, 2), -9 * E(3), 0, 0, 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), 9, 9, 0, 0, 0, 0, 0, 9, -9, -9, 9, 9, 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), -9 * E(3, 2), -9 * E(3), 0, 0, -9 * E(3, 2), -9 * E(3), -9, 9, 9, -9, -9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 9 * E(3), 0, -9 * E(3, 2), 9 * E(3), 0, 0, 0], [9 * E(3, 2), 9 * E(3), 9 * E(3), 9 * E(3, 2), -9, -9 * E(3), -9 * E(3, 2), 0, 0, 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 9, 9, 0, 0, 0, 0, 0, 9, -9, -9, 9, 9, 9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), -9 * E(3), -9 * E(3, 2), 0, 0, -9 * E(3), -9 * E(3, 2), -9, 9, 9, -9, -9 * E(3), 9 * E(3, 2), 9 * E(3), 9 * E(3, 2), 0, -9 * E(3), 9 * E(3, 2), 0, 0, 0], [ER(-3) * 2, -(ER(-3)) * 2, 0, 0, 0, 0, 0, ER(-3) * 6, -(ER(-3)) * 6, -(ER(-3)) * 6, ER(-3) * 6, -(ER(-3)) * 6, ER(-3) * 6, -(ER(-3)) * 2, ER(-3) * 2, -(ER(-3)) * 4, ER(-3) * 4, -(ER(-3)) * 6, -(ER(-3)) * 6, -(ER(-3)) * 12, ER(-3) * 6, ER(-3) * 6, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 6, ER(-3) * 6, -(ER(-3)) * 6, ER(-3) * 6, 0, 0, ER(-3) * 6, ER(-3) * 6, 0, 0, ER(-3) * 6, ER(-3) * 6, 0, 0, -(ER(-3)) * 4, -(ER(-3)) * 2, -(ER(-3)) * 2, ER(-3) * 6, ER(-3) * 6, ER(-3) * 6], [ER(-3), -(ER(-3)), 9 * E(3), 9 * E(3, 2), -9, -9, -9, (3 + ER(-3)) * 3, (3 - ER(-3)) * 3, ((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, ((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, -(ER(-3)), ER(-3), -(ER(-3)) * 2, ER(-3) * 2, (-3 - ER(-3)) * 3, (3 - ER(-3)) * 3, -(ER(-3)) * 6, ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, -9 * E(3, 2), 9 * E(3), -9, -9 * E(3), -9 * E(3, 2), 9 * E(3, 2), 9 * E(3), ((-3 + ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, (3 - ER(-3)) * 3, (3 + ER(-3)) * 3, 9, 9, ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, -9 * E(3, 2), 9 * E(3), ((3 - ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, -9 * E(3, 2), -9 * E(3), -(ER(-3)) * 2, -(ER(-3)), -(ER(-3)), -(ER(-3)) * 6, -(ER(-3)) * 6, -(ER(-3)) * 6], [ER(-3), -(ER(-3)), -9 * E(3, 2), -9 * E(3), 9, 9, 9, (-3 + ER(-3)) * 3, (-3 - ER(-3)) * 3, ((-3 + ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, ((-3 + ER(-3)) * 3) // 2, ((-3 - ER(-3)) * 3) // 2, -(ER(-3)), ER(-3), -(ER(-3)) * 2, ER(-3) * 2, (3 - ER(-3)) * 3, (-3 - ER(-3)) * 3, -(ER(-3)) * 6, ((-3 - ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 9 * E(3), -9 * E(3, 2), 9, 9 * E(3, 2), 9 * E(3), -9 * E(3), -9 * E(3, 2), ((3 + ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, (-3 - ER(-3)) * 3, (-3 + ER(-3)) * 3, -9, -9, ((-3 - ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 9 * E(3), -9 * E(3, 2), ((-3 - ER(-3)) * 3) // 2, ((3 - ER(-3)) * 3) // 2, 9 * E(3), 9 * E(3, 2), -(ER(-3)) * 2, -(ER(-3)), -(ER(-3)), -(ER(-3)) * 6, -(ER(-3)) * 6, -(ER(-3)) * 6], [ER(-3) * 6, -(ER(-3)) * 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 6, ER(-3) * 6, ER(-3) * 6, -(ER(-3)) * 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ER(-3) * 6, -(ER(-3)) * 6, -(ER(-3)) * 6, 18 * E(9, 7) - 18 * E(9, 2), -18 * E(9, 5) + 18 * E(9, 4), ((-18 * E(9, 7) + 18 * E(9, 5)) - 18 * E(9, 4)) + 18 * E(9, 2)], [ER(-3) * 6, -(ER(-3)) * 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 6, ER(-3) * 6, ER(-3) * 6, -(ER(-3)) * 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ER(-3) * 6, -(ER(-3)) * 6, -(ER(-3)) * 6, -18 * E(9, 5) + 18 * E(9, 4), ((-18 * E(9, 7) + 18 * E(9, 5)) - 18 * E(9, 4)) + 18 * E(9, 2), 18 * E(9, 7) - 18 * E(9, 2)], [ER(-3) * 6, -(ER(-3)) * 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(ER(-3)) * 6, ER(-3) * 6, ER(-3) * 6, -(ER(-3)) * 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ER(-3) * 6, -(ER(-3)) * 6, -(ER(-3)) * 6, ((-18 * E(9, 7) + 18 * E(9, 5)) - 18 * E(9, 4)) + 18 * E(9, 2), 18 * E(9, 7) - 18 * E(9, 2), -18 * E(9, 5) + 18 * E(9, 4)]] // 54, :eigenvalues => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), -1, -1, -1, E(3), E(3), E(3), E(3), E(3), E(3), -1, -1, E(3, 2), E(3, 2), -(E(3, 2)), -(E(3, 2)), E(3), E(3), -(E(3)), -(E(3)), 1, 1, 1, E(9, 8), E(9, 5), E(9, 2)], :explanation => "mystery G26", :special => 1, :cospecial => 2), [43, 42, 28, 34, 8, 41, 44, 29, 35, 15, 21, 45, 47, 6, 5, 11, 9, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1], :ennola => 15)), Family(((CHEVIE[:families])[:QZ])(3), [14, 36, 30, 20, 100, 98, 26, 99, 101], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, 1, -1, -1, -1], :special => 3, :cospecial => 2, :ennola => 5)), Family(((CHEVIE[:families])[:X])(3), [25, 19, 102], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1)), Family("X5", [4, 7, 104, 103, 3], Dict{Symbol, Any}(:signs => [1, 1, -1, -1, 1], :ennola => 1))], :a => [0, 1, 21, 21, 6, 6, 21, 6, 6, 1, 6, 1, 2, 11, 6, 4, 2, 1, 16, 11, 6, 4, 2, 1, 16, 11, 4, 6, 6, 11, 2, 5, 4, 6, 6, 11, 2, 5, 3, 3, 6, 6, 6, 6, 6, 4, 6, 4, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 11, 11, 11, 11, 16, 21, 21], :A => [0, 17, 33, 33, 30, 30, 33, 30, 30, 17, 30, 17, 22, 31, 30, 26, 22, 17, 32, 31, 30, 26, 22, 17, 32, 31, 26, 30, 30, 31, 22, 25, 26, 30, 30, 31, 22, 25, 24, 24, 30, 30, 30, 30, 30, 26, 30, 26, 17, 17, 17, 17, 22, 22, 22, 22, 24, 24, 26, 26, 26, 26, 26, 26, 25, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 32, 33, 33])
    end)
chevieset(:G26, :Invariants, [function (x1, x2, x3)
            return ((-10 * x1 ^ 3 * x2 ^ 3 - 10 * x1 ^ 3 * x3 ^ 3) - 10 * x2 ^ 3 * x3 ^ 3) + x1 ^ 6 + x2 ^ 6 + x3 ^ 6
        end, function (x1, x2, x3)
            return ((((2 * x1 ^ 3 * x2 ^ 3 * x3 ^ 6 + 2 * x1 ^ 3 * x2 ^ 6 * x3 ^ 3 + x1 ^ 3 * x2 ^ 9 + x1 ^ 3 * x3 ^ 9 + x2 ^ 3 * x3 ^ 9 + 2 * x1 ^ 6 * x2 ^ 3 * x3 ^ 3) - 4 * x1 ^ 6 * x2 ^ 6) - 4 * x1 ^ 6 * x3 ^ 6) - 4 * x2 ^ 6 * x3 ^ 6) + x1 ^ 9 * x2 ^ 3 + x1 ^ 9 * x3 ^ 3 + x2 ^ 9 * x3 ^ 3
        end, function (x1, x2, x3)
            return (((((((((-2 * x1 ^ 3 * x2 ^ 3 * x3 ^ 12 + 2 * x1 ^ 3 * x2 ^ 6 * x3 ^ 9 + 2 * x1 ^ 3 * x2 ^ 9 * x3 ^ 6) - 2 * x1 ^ 3 * x2 ^ 12 * x3 ^ 3) + 2 * x1 ^ 6 * x2 ^ 3 * x3 ^ 9) - 6 * x1 ^ 6 * x2 ^ 6 * x3 ^ 6) + 2 * x1 ^ 6 * x2 ^ 9 * x3 ^ 3 + x1 ^ 6 * x2 ^ 12 + x1 ^ 6 * x3 ^ 12 + x2 ^ 6 * x3 ^ 12 + 2 * x1 ^ 9 * x2 ^ 3 * x3 ^ 6 + 2 * x1 ^ 9 * x2 ^ 6 * x3 ^ 3) - 2 * x1 ^ 9 * x2 ^ 9) - 2 * x1 ^ 9 * x3 ^ 9) - 2 * x2 ^ 9 * x3 ^ 9) - 2 * x1 ^ 12 * x2 ^ 3 * x3 ^ 3) + x1 ^ 12 * x2 ^ 6 + x1 ^ 12 * x3 ^ 6 + x2 ^ 12 * x3 ^ 6
        end])
chevieset(:G26, :Discriminant, function ()
        return function (t1, t2, t3)
                return (((36 * t1 * t2 * t3 ^ 2 - t1 ^ 2 * t2 ^ 2 * t3) + 108 * t3 ^ 3) - 32 * t2 ^ 3 * t3) + t1 ^ 3 * t3 ^ 2
            end
    end)
chevieset(:G27, :AltPres, [Dict{Symbol, Any}(:gens => [[2], [2, 3, -2], [1]], :rels => [[[1, 3, 1], [3, 1, 3]], [[1, 2, 1, 2], [2, 1, 2, 1]], [[2, 3, 2, 3, 2], [3, 2, 3, 2, 3]], [[3, 2, 1, 3, 2, 1, 2], [1, 3, 2, 1, 3, 2, 1]]]), Dict{Symbol, Any}(:gens => [[1], [-1, 3, 1], [2]], :rels => [[[1, 2, 1], [2, 1, 2]], [[2, 3, 2, 3, 2], [3, 2, 3, 2, 3]], [[1, 3, 1], [3, 1, 3]], [[2, 3, 2, 3, 1, 2, 3, 1, 2, 3], [3, 2, 3, 1, 2, 3, 1, 2, 3, 1]]]), Dict{Symbol, Any}(:gens => [[2], [3], [-3, -2, 1, 2, 3]], :rels => [[[1, 2, 1, 2], [2, 1, 2, 1]], [[2, 3, 2, 3, 2], [3, 2, 3, 2, 3]], [[1, 3, 1, 3, 1], [3, 1, 3, 1, 3]], [[2, 3, 1, 2, 3, 1, 2], [1, 2, 3, 1, 2, 3, 1]], [[3, 1, 2, 3, 1, 2, 3, 1], [1, 2, 3, 1, 2, 3, 1, 3]]]), Dict{Symbol, Any}(:gens => [[3], [-3, 2, 3], [1]], :rels => [[[1, 3, 1], [3, 1, 3]], [[1, 2, 1, 2], [2, 1, 2, 1]], [[2, 3, 2, 3, 2], [3, 2, 3, 2, 3]], [[2, 1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3, 1]]])])
chevieset(:G27, :BraidRelations, [[[2, 1, 2], [1, 2, 1]], [[3, 1, 3], [1, 3, 1]], [[3, 2, 3, 2], [2, 3, 2, 3]], [[3, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3], [2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2]]])
chevieset(:G27, :PrintDiagram, function (indices, title)
        local s
        print(title, " ", indices[1], "\n")
        s = pad("", length(title) - 1)
        print(s, " / \\\n", s, indices[2], "=====", indices[3], "  ", IntListToString(indices[[3, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]]), "==", IntListToString(indices[[2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2]]), "\n")
    end)
chevieset(:G27, :GeneratingRoots, [[-(ER(5)) // 5, (((((-(E(15, 14)) + E(15, 13) + E(15, 11)) - E(15, 8)) - E(15, 7)) - E(15, 4)) + E(15, 2) + E(15)) // 5, (((4 * E(15, 14) - 4 * E(15, 11)) + 2 * E(15, 4)) - 2 * E(15)) // 15], [((5 - ER(-15)) * E(3)) // 10, (((-(E(15, 13)) - E(15, 8)) + E(15, 7) + E(15, 4) + E(15, 2)) - E(15)) // 5, (((-4 * E(15, 14) + 4 * E(15, 11)) - 2 * E(15, 4)) + 2 * E(15)) // 15], [(2 * ER(5)) // 5, 0, 0]])
chevieset(:G27, :GeneratingCoRoots, [[-(ER(5)) // 2, ((((((E(15, 14) + E(15, 13)) - E(15, 11)) - E(15, 8)) - E(15, 7)) + E(15, 4) + E(15, 2)) - E(15)) // 2, (((-(E(15, 14)) + E(15, 11)) - 2 * E(15, 4)) + 2 * E(15)) // 2], [((5 + ER(-15)) * E(3, 2)) // 4, (((-(E(15, 14)) + E(15, 13) + E(15, 11) + E(15, 8)) - E(15, 7)) - E(15, 2)) // 2, (((E(15, 14) - E(15, 11)) + 2 * E(15, 4)) - 2 * E(15)) // 2], [ER(5), 0, 0]])
chevieset(:G27, :CartanMat, function ()
        return chevieget(:G27, :GeneratingCoRoots) * TransposedMat(chevieget(:G27, :GeneratingRoots))
    end)
chevieset(:G27, :EigenvaluesGeneratingReflections, [1 // 2, 1 // 2, 1 // 2])
chevieset(:G27, :Size, 2160)
chevieset(:G27, :ReflectionDegrees, [6, 12, 30])
chevieset(:G27, :NrConjugacyClasses, 34)
chevieset(:G27, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3], [2, 3], [1, 8]], [1:3]]
        return t[s + 1]
    end)
chevieset(:G27, :ClassNames, [".", "2", "12", "c2", "23", "132", "c", "2c2c", "13", "3232", "2cc", "ccc", "23z", "132132", "cc", "13z", "2ccc", "32zzzz", "cc21323", "zcc", "12z", "1z", "3232zz", "2323z", "1zz", "zzcccc", "cccc", "zcccc", "32zzz", "z", "zzzzz", "zz", "zzzz", "zzz"])
chevieset(:G27, :WordsClassRepresentatives, map((x->begin
                Replace(x, ".", [], "1", [1], "2", [2], "3", [3], "c", [1, 2, 3], "z", [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])
            end), chevieget(:G27, :ClassNames)))
chevieset(:G27, :PowerMaps, [nothing, [1, 1, 3, 8, 10, 14, 15, 4, 9, 1, 22, 4, 23, 26, 27, 9, 22, 23, 27, 26, 3, 32, 33, 32, 33, 14, 15, 8, 10, 32, 33, 33, 32, 1], [1, 2, 1, 8, 5, 12, 12, 4, 1, 10, 29, 28, 29, 4, 4, 34, 5, 5, 28, 28, 34, 10, 10, 2, 2, 8, 8, 12, 29, 34, 34, 1, 1, 34], nothing, [1, 2, 3, 1, 5, 31, 30, 1, 9, 10, 13, 34, 11, 33, 32, 16, 18, 17, 31, 30, 21, 23, 22, 25, 24, 32, 33, 34, 29, 31, 30, 33, 32, 34], nothing, [1, 2, 3, 8, 5, 19, 20, 4, 9, 10, 11, 28, 13, 27, 26, 16, 17, 18, 6, 7, 21, 22, 23, 24, 25, 15, 14, 12, 29, 30, 31, 32, 33, 34], nothing, nothing, nothing, [1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 13, 12, 11, 15, 14, 16, 18, 17, 20, 19, 21, 23, 22, 25, 24, 27, 26, 28, 29, 31, 30, 33, 32, 34], nothing, [1, 2, 3, 8, 5, 19, 20, 4, 9, 10, 11, 28, 13, 27, 26, 16, 17, 18, 6, 7, 21, 22, 23, 24, 25, 15, 14, 12, 29, 30, 31, 32, 33, 34], nothing, nothing, nothing, [1, 2, 3, 8, 5, 20, 19, 4, 9, 10, 13, 28, 11, 26, 27, 16, 18, 17, 7, 6, 21, 23, 22, 25, 24, 14, 15, 12, 29, 31, 30, 33, 32, 34], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], nothing, nothing, nothing, [1, 2, 3, 8, 5, 20, 19, 4, 9, 10, 13, 28, 11, 26, 27, 16, 18, 17, 7, 6, 21, 23, 22, 25, 24, 14, 15, 12, 29, 31, 30, 33, 32, 34], nothing, nothing, nothing, nothing, nothing, [1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 13, 12, 11, 15, 14, 16, 18, 17, 20, 19, 21, 23, 22, 25, 24, 27, 26, 28, 29, 31, 30, 33, 32, 34]])
chevieset(:G27, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G27, :WordsClassRepresentatives), :classnames => chevieget(:G27, :ClassNames), :classparams => chevieget(:G27, :ClassNames), :orders => [1, 2, 3, 5, 4, 30, 30, 5, 3, 2, 12, 10, 12, 15, 15, 6, 12, 12, 30, 30, 6, 6, 6, 6, 6, 15, 15, 10, 4, 6, 6, 3, 3, 2], :classes => [1, 45, 120, 72, 90, 72, 72, 72, 120, 45, 90, 72, 90, 72, 72, 120, 90, 90, 72, 72, 120, 45, 45, 45, 45, 72, 72, 72, 90, 1, 1, 1, 1, 1]))
chevieset(:G27, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 45], [3, 7], [3, 22], [3, 1], [3, 16], [3, 5, 1], [3, 20, 1], [3, 5, 2], [3, 20, 2], [5, 6, 2], [5, 6, 1], [5, 15, 2], [5, 15, 1], [6, 19], [6, 4], [6, 17], [6, 2], [8, 6], [8, 9, 1], [8, 12], [8, 9, 2], [9, 6], [9, 9], [9, 13], [9, 4], [9, 11], [9, 8], [10, 12], [10, 3], [15, 7], [15, 10], [15, 5], [15, 8]], :opdam => #= none:14 =# @perm_str("(19,20)(21,22)(23,26,28)(24,27,25)"), :extRefl => [1, 5, 10, 2])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G27, :CycPolSchurElements, [[1, 0, 2, 2, 2, 3, 3, 3, 4, 5, 6, 6, 6, 10, 12, 15, 30], [1, -45, 2, 2, 2, 3, 3, 3, 4, 5, 6, 6, 6, 10, 12, 15, 30], [-2 * ER(-15) * E(3), -1, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 1 // 5, 4 // 5, 5 // 6, 5 // 6, 5 // 6, 1 // 10, 9 // 10, 2 // 15, 8 // 15, 7 // 30, 13 // 30], [2 * ER(-15) * E(3, 2), -16, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 1 // 5, 4 // 5, 1 // 6, 1 // 6, 1 // 6, 1 // 10, 9 // 10, 7 // 15, 13 // 15, 17 // 30, 23 // 30], [2 * ER(-15) * E(3), -1, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 2 // 5, 3 // 5, 5 // 6, 5 // 6, 5 // 6, 3 // 10, 7 // 10, 11 // 15, 14 // 15, 1 // 30, 19 // 30], [-2 * ER(-15) * E(3, 2), -16, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 2 // 5, 3 // 5, 1 // 6, 1 // 6, 1 // 6, 3 // 10, 7 // 10, 1 // 15, 4 // 15, 11 // 30, 29 // 30], [2 * ER(-15) * E(3, 2), -1, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 1 // 5, 4 // 5, 1 // 6, 1 // 6, 1 // 6, 1 // 10, 9 // 10, 7 // 15, 13 // 15, 17 // 30, 23 // 30], [-2 * ER(-15) * E(3), -16, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 1 // 5, 4 // 5, 5 // 6, 5 // 6, 5 // 6, 1 // 10, 9 // 10, 2 // 15, 8 // 15, 7 // 30, 13 // 30], [-2 * ER(-15) * E(3, 2), -1, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 2 // 5, 3 // 5, 1 // 6, 1 // 6, 1 // 6, 3 // 10, 7 // 10, 1 // 15, 4 // 15, 11 // 30, 29 // 30], [2 * ER(-15) * E(3), -16, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 2 // 5, 3 // 5, 5 // 6, 5 // 6, 5 // 6, 3 // 10, 7 // 10, 11 // 15, 14 // 15, 1 // 30, 19 // 30], [2, -3, 2, 2, 2, 3, 3, 3, 6, 6, 6], [2, -3, 2, 2, 2, 3, 3, 3, 6, 6, 6], [2, -12, 2, 2, 2, 3, 3, 3, 6, 6, 6], [2, -12, 2, 2, 2, 3, 3, 3, 6, 6, 6], [3 - ER(-3), -16, 2, 2 // 3, 2 // 3, 2 // 3, 4, 5, 1 // 6, 5 // 12, 11 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15], [3 + ER(-3), -1, 2, 1 // 3, 1 // 3, 1 // 3, 4, 5, 5 // 6, 1 // 12, 7 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15], [3 + ER(-3), -16, 2, 1 // 3, 1 // 3, 1 // 3, 4, 5, 5 // 6, 1 // 12, 7 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15], [3 - ER(-3), -1, 2, 2 // 3, 2 // 3, 2 // 3, 4, 5, 1 // 6, 5 // 12, 11 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15], [5 + ER(5), -6, 3, 3, 3, 2 // 5, 3 // 5, 1 // 15, 4 // 15, 11 // 15, 14 // 15], [5 + ER(5), -6, 3, 3, 3, 2 // 5, 3 // 5, 1 // 15, 4 // 15, 11 // 15, 14 // 15], [5 - ER(5), -6, 3, 3, 3, 1 // 5, 4 // 5, 2 // 15, 7 // 15, 8 // 15, 13 // 15], [5 - ER(5), -6, 3, 3, 3, 1 // 5, 4 // 5, 2 // 15, 7 // 15, 8 // 15, 13 // 15], [3, -4, 2, 2, 2, 4, 5, 10], [3, -9, 2, 2, 2, 4, 5, 10], [3, -9, 2, 2, 2, 4, 5, 10], [3, -4, 2, 2, 2, 4, 5, 10], [3, -9, 2, 2, 2, 4, 5, 10], [3, -4, 2, 2, 2, 4, 5, 10], [2, -12, 2, 3, 3, 3, 4, 6, 12], [2, -3, 2, 3, 3, 3, 4, 6, 12], [(3 + ER(-3)) // 2, -5, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 4, 1 // 6, 1 // 6, 1 // 6, 5 // 12, 11 // 12], [(3 - ER(-3)) // 2, -8, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 4, 5 // 6, 5 // 6, 5 // 6, 1 // 12, 7 // 12], [(3 - ER(-3)) // 2, -5, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 4, 5 // 6, 5 // 6, 5 // 6, 1 // 12, 7 // 12], [(3 + ER(-3)) // 2, -8, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 4, 1 // 6, 1 // 6, 1 // 6, 5 // 12, 11 // 12]])
chevieset(:G27, :sparseFakeDegrees, [[1, 0], [1, 45], [1, 7, 1, 13, 1, 25], [1, 22, 1, 28, 1, 40], [1, 1, 1, 19, 1, 25], [1, 16, 1, 34, 1, 40], [1, 5, 1, 17, 1, 23], [1, 20, 1, 32, 1, 38], [1, 5, 1, 11, 1, 29], [1, 20, 1, 26, 1, 44], [1, 6, 1, 12, 1, 18, 1, 24, 1, 30], [1, 6, 1, 12, 1, 18, 1, 24, 1, 30], [1, 15, 1, 21, 1, 27, 1, 33, 1, 39], [1, 15, 1, 21, 1, 27, 1, 33, 1, 39], [1, 19, 2, 25, 1, 31, 1, 37, 1, 43], [1, 4, 2, 10, 1, 16, 1, 22, 1, 28], [1, 17, 1, 23, 1, 29, 2, 35, 1, 41], [1, 2, 1, 8, 1, 14, 2, 20, 1, 26], [1, 6, 1, 12, 1, 18, 2, 24, 2, 30, 1, 36], [1, 9, 2, 15, 2, 21, 1, 27, 1, 33, 1, 39], [2, 12, 2, 18, 1, 24, 2, 30, 1, 36], [1, 9, 2, 15, 1, 21, 2, 27, 2, 33], [1, 6, 2, 12, 2, 18, 2, 24, 1, 30, 1, 36], [1, 9, 1, 15, 2, 21, 2, 27, 2, 33, 1, 39], [2, 13, 2, 19, 1, 25, 2, 31, 2, 37], [1, 4, 1, 10, 2, 16, 2, 22, 2, 28, 1, 34], [1, 11, 2, 17, 2, 23, 2, 29, 1, 35, 1, 41], [2, 8, 2, 14, 1, 20, 2, 26, 2, 32], [1, 12, 2, 18, 2, 24, 2, 30, 2, 36, 1, 42], [1, 3, 2, 9, 2, 15, 2, 21, 2, 27, 1, 33], [2, 7, 3, 13, 3, 19, 3, 25, 3, 31, 1, 37], [2, 10, 3, 16, 3, 22, 3, 28, 3, 34, 1, 40], [1, 5, 3, 11, 3, 17, 3, 23, 3, 29, 2, 35], [1, 8, 3, 14, 3, 20, 3, 26, 3, 32, 2, 38]])
chevieset(:G27, :HeckeCharTable, function (para, root)
        local tbl, r, p, q, f1, f3, f11, f12, f15, f19, f23, f29, f31
        q = -((para[1])[1]) // (para[1])[2]
        r = (para[1])[1]
        p = (para[1])[2]
        tbl = Dict{Symbol, Any}(:identifier => "H(G27)", :size => 2160, :order => 2160, :powermap => chevieget(:G27, :PowerMaps))
        Inherit(tbl, chevieget(:G27, :ClassInfo))
        f1 = (r->begin
                    map((x->begin
                                r ^ length(x)
                            end), tbl[:classtext])
                end)
        f3 = function (r, p, j, d)
                return [3, p + 2r, p * r + r ^ 2, (-1 + (j * (1 - d)) // 2) * p * r ^ 3 + (-2 + (1 - d) * (1 + j)) // 2 * p ^ 2 * r ^ 2, r ^ 2, -p * r ^ 2 + (((-1 + j) - d) - j * d) // 2 * p ^ 2 * r, ((1 - d) * j) // 2 * p * r ^ 2, ((3 // 2 - 3 // 2 * j) + 1 // 2 * d + 1 // 2 * d * j) * p ^ 2 * r ^ 6 + ((1 - j) + d + j * d) * p ^ 3 * r ^ 5 + (j // 2 + d + (j * d) // 2) * p ^ 4 * r ^ 4, p * r + r ^ 2, -2 * p ^ 2 * r ^ 2 + r ^ 4, -j * p ^ 2 * r ^ 5, (1 + d) // 2 * p ^ 3 * r ^ 6, j ^ 2 * p ^ 5 * r ^ 12, (j // 2 + d + (j * d) // 2) * r ^ 2 * p ^ 4 + ((1 - j) + d + j * d) * p ^ 3 * r ^ 3 + 3 * r ^ 4 * p ^ 2 + ((2 + j) - j * d) * r ^ 5 * p, ((1 + d) * j ^ 2) // 2 * p ^ 2 * r ^ 4, j ^ 2 * p ^ 5 * r ^ 12 + j ^ 2 * p ^ 6 * r ^ 11, (1 + d) // 2 * p ^ 3 * r ^ 7 + (1 // 2 + j + d // 2) * p ^ 4 * r ^ 6, j ^ 2 * p ^ 20 * r ^ 42, ((-1 + d) * j ^ 2) // 2 * p ^ 3 * r ^ 8 + j ^ 2 * p ^ 5 * r ^ 6, ((1 + d) * j) // 2 * p ^ 7 * r ^ 14, j ^ 2 * p ^ 5 * r ^ 12 + j ^ 2 * p ^ 6 * r ^ 11, 2 * j ^ 2 * p ^ 5 * r ^ 11 + j ^ 2 * p ^ 6 * r ^ 10, j * p ^ 10 * r ^ 24 - 2 * j * p ^ 12 * r ^ 22, j ^ 2 * p ^ 5 * r ^ 14 - 2 * j ^ 2 * p ^ 7 * r ^ 12, 2 * j * p ^ 10 * r ^ 21 + j * p ^ 11 * r ^ 20, ((1 - d) * j ^ 2) // 2 * p ^ 14 * r ^ 28, ((1 - d) * j) // 2 * p ^ 4 * r ^ 8, (1 - d) // 2 * p ^ 9 * r ^ 18, p ^ 15 * r ^ 32, 3 * j ^ 2 * p ^ 5 * r ^ 10, 3 * j * p ^ 25 * r ^ 50, 3 * j * p ^ 10 * r ^ 20, 3 * j ^ 2 * p ^ 20 * r ^ 40, 3 * p ^ 15 * r ^ 30]
            end
        f11 = function (r, p)
                return [5, 2p + 3r, 2 * p * r + r ^ 2, -p * r ^ 3 - p ^ 2 * r ^ 2, 2 * p * r + r ^ 2, 0, 0, p ^ 2 * r ^ 6 + 2 * p ^ 3 * r ^ 5 + p ^ 4 * r ^ 4, p * r + p ^ 2 + 2 * r ^ 2, r ^ 4, p ^ 3 * r ^ 4, 0, p ^ 6 * r ^ 11 + 2 * p ^ 7 * r ^ 10, 0, 0, 2 * p ^ 6 * r ^ 11 + p ^ 7 * r ^ 10 + p ^ 8 * r ^ 9, -(p ^ 4) * r ^ 6, p ^ 24 * r ^ 38 + 2 * p ^ 25 * r ^ 37, -(p ^ 4) * r ^ 7 + p ^ 6 * r ^ 5, 0, p ^ 6 * r ^ 11 + 2 * p ^ 7 * r ^ 10, 3 * p ^ 6 * r ^ 10 + 2 * p ^ 7 * r ^ 9, p ^ 12 * r ^ 22, p ^ 6 * r ^ 13, 3 * p ^ 12 * r ^ 19 + 2 * p ^ 13 * r ^ 18, 0, 0, 0, p ^ 18 * r ^ 29 + 2 * p ^ 19 * r ^ 28, 5 * p ^ 6 * r ^ 9, 5 * p ^ 30 * r ^ 45, 5 * p ^ 12 * r ^ 18, 5 * p ^ 24 * r ^ 36, 5 * p ^ 18 * r ^ 27]
            end
        f12 = function (r, p)
                return [5, 2p + 3r, p * r + p ^ 2 + 2 * r ^ 2, -p * r ^ 3 - p ^ 2 * r ^ 2, 2 * p * r + r ^ 2, 0, 0, p ^ 2 * r ^ 6 + 2 * p ^ 3 * r ^ 5 + p ^ 4 * r ^ 4, 2 * p * r + r ^ 2, r ^ 4, p ^ 3 * r ^ 4, 0, p ^ 6 * r ^ 11 + 2 * p ^ 7 * r ^ 10, 0, 0, p ^ 6 * r ^ 11 + 2 * p ^ 7 * r ^ 10, -(p ^ 4) * r ^ 6, p ^ 24 * r ^ 38 + 2 * p ^ 25 * r ^ 37, -(p ^ 4) * r ^ 7 + p ^ 6 * r ^ 5, 0, 2 * p ^ 6 * r ^ 11 + p ^ 7 * r ^ 10 + p ^ 8 * r ^ 9, 3 * p ^ 6 * r ^ 10 + 2 * p ^ 7 * r ^ 9, p ^ 12 * r ^ 22, p ^ 6 * r ^ 13, 3 * p ^ 12 * r ^ 19 + 2 * p ^ 13 * r ^ 18, 0, 0, 0, p ^ 18 * r ^ 29 + 2 * p ^ 19 * r ^ 28, 5 * p ^ 6 * r ^ 9, 5 * p ^ 30 * r ^ 45, 5 * p ^ 12 * r ^ 18, 5 * p ^ 24 * r ^ 36, 5 * p ^ 18 * r ^ 27]
            end
        f15 = function (r, p, j)
                return [6, 4p + 2r, 2 * p * r + 2 * p ^ 2, j ^ 2 * p ^ 2 * r ^ 2 + (2 * j ^ 2 + j) * p ^ 3 * r, 2 * p * r + 2 * p ^ 2, j ^ 2 * p * r ^ 2, -j * p ^ 2 * r, (j * p ^ 4 * r ^ 4 - 2 * j ^ 2 * p ^ 5 * r ^ 3) - (3 * j ^ 2 + 2j) * p ^ 6 * r ^ 2, 2 * p * r + 2 * p ^ 2, 2 * p ^ 4, 0, -(p ^ 6) * r ^ 3, -2 * j ^ 2 * p ^ 11 * r ^ 6 - 2 * j ^ 2 * p ^ 12 * r ^ 5, ((j * p ^ 2 * r ^ 4 - 2 * j ^ 2 * p ^ 3 * r ^ 3) + 2 * p ^ 4 * r ^ 2) - 2 * j * p ^ 5 * r, j ^ 2 * p ^ 4 * r ^ 2, -2 * j ^ 2 * p ^ 11 * r ^ 6 - 2 * j ^ 2 * p ^ 12 * r ^ 5, -(p ^ 6) * r ^ 4 - p ^ 7 * r ^ 3, 2 * j ^ 2 * p ^ 41 * r ^ 21 + 2 * j ^ 2 * p ^ 42 * r ^ 20, -2 * j ^ 2 * p ^ 6 * r ^ 5 + j ^ 2 * p ^ 8 * r ^ 3, -j * p ^ 14 * r ^ 7, -2 * j ^ 2 * p ^ 11 * r ^ 6 - 2 * j ^ 2 * p ^ 12 * r ^ 5, -2 * j ^ 2 * p ^ 10 * r ^ 6 - 4 * j ^ 2 * p ^ 11 * r ^ 5, 2 * j * p ^ 24 * r ^ 10, -2 * j ^ 2 * p ^ 14 * r ^ 5, 2 * j * p ^ 20 * r ^ 11 + 4 * j * p ^ 21 * r ^ 10, j ^ 2 * p ^ 28 * r ^ 14, j * p ^ 8 * r ^ 4, -(p ^ 18) * r ^ 9, -2 * p ^ 31 * r ^ 16 - 2 * p ^ 32 * r ^ 15, -6 * j ^ 2 * p ^ 10 * r ^ 5, -6 * j * p ^ 50 * r ^ 25, 6 * j * p ^ 20 * r ^ 10, 6 * j ^ 2 * p ^ 40 * r ^ 20, -6 * p ^ 30 * r ^ 15]
            end
        f19 = function (x, y, d, sgn)
                local v
                v = sgn * GetRoot(-x * y, 2)
                return [8, 4x + 4y, 3 * x * y + x ^ 2 + y ^ 2, (((-((1 + d)) // 2 * v * x * y ^ 2 - (1 + d) // 2 * v * x ^ 2 * y) - x * y ^ 3) + (-3 + d) // 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 2 * x * y + x ^ 2 + y ^ 2, (((-((1 + d)) // 2 * v * x * y - x * y ^ 2) - x ^ 2 * y) - x ^ 3) - y ^ 3, -((1 + d)) // 2 * v * x * y, ((x ^ 2 * y ^ 6 + (1 - d) // 2 * x ^ 3 * y ^ 5) - (1 + 3d) // 2 * x ^ 4 * y ^ 4) + (1 - d) // 2 * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 3 * x * y + x ^ 2 + y ^ 2, -2 * x ^ 2 * y ^ 2 + x ^ 4 + y ^ 4, 0, (1 - d) // 2 * v * x ^ 4 * y ^ 4, (-v * x ^ 7 * y ^ 9 - 2 * v * x ^ 8 * y ^ 8) - v * x ^ 9 * y ^ 7, (3 + d) * v * x ^ 2 * y ^ 3 + (3 + d) * v * x ^ 3 * y ^ 2 + 2 * x * y ^ 5 + 3 * x ^ 2 * y ^ 4 + (7 + d) // 2 * x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + x ^ 6 + y ^ 6, (-1 + d) // 2 * x ^ 3 * y ^ 3, (-v * x ^ 7 * y ^ 9 - 3 * v * x ^ 8 * y ^ 8) - v * x ^ 9 * y ^ 7, (1 - d) // 2 * v * x ^ 4 * y ^ 5 + (1 - d) // 2 * v * x ^ 5 * y ^ 4, x ^ 30 * y ^ 32 + 2 * x ^ 31 * y ^ 31 + x ^ 32 * y ^ 30, (-v * x ^ 3 * y ^ 7 + (3 + d) // 2 * v * x ^ 5 * y ^ 5) - v * x ^ 7 * y ^ 3, (1 - d) // 2 * v * x ^ 10 * y ^ 10, (-v * x ^ 7 * y ^ 9 - 3 * v * x ^ 8 * y ^ 8) - v * x ^ 9 * y ^ 7, -4 * v * x ^ 7 * y ^ 8 - 4 * v * x ^ 8 * y ^ 7, (-(x ^ 15) * y ^ 19 + 2 * x ^ 17 * y ^ 17) - x ^ 19 * y ^ 15, (-v * x ^ 7 * y ^ 11 + 2 * v * x ^ 9 * y ^ 9) - v * x ^ 11 * y ^ 7, -4 * x ^ 15 * y ^ 16 - 4 * x ^ 16 * y ^ 15, -((1 + d)) // 2 * x ^ 21 * y ^ 21, (1 + d) // 2 * x ^ 6 * y ^ 6, -((1 + d)) // 2 * v * x ^ 13 * y ^ 13, v * x ^ 22 * y ^ 24 + 2 * v * x ^ 23 * y ^ 23 + v * x ^ 24 * y ^ 22, -8 * v * x ^ 7 * y ^ 7, -8 * v * x ^ 37 * y ^ 37, -8 * x ^ 15 * y ^ 15, 8 * x ^ 30 * y ^ 30, 8 * v * x ^ 22 * y ^ 22]
            end
        f23 = function (r, p, j)
                local q
                q = GetRoot(-r // p, 3) * j
                return map(function (x, y)
                            return x * (-p) ^ length(y)
                        end, [9, -4 + 5 * q ^ 3, (1 - 3 * q ^ 3) + 2 * q ^ 6, ((q ^ 5 - 2 * q ^ 6) - q ^ 8) + q ^ 9, (1 - 2 * q ^ 3) + 2 * q ^ 6, (-(q ^ 3) - q ^ 4) + q ^ 6, -(q ^ 5), (((q ^ 10 - 2 * q ^ 11) - 2 * q ^ 12) - 2 * q ^ 13) + 2 * q ^ 14 + q ^ 16 + q ^ 18, (1 - 3 * q ^ 3) + 2 * q ^ 6, (1 - 2 * q ^ 6) + 2 * q ^ 12, q ^ 11, -(q ^ 15), (q ^ 25 - 2 * q ^ 28) + 2 * q ^ 31, (((((q ^ 6 + 2 * q ^ 7 + q ^ 8) - 2 * q ^ 9) - 4 * q ^ 10) + 3 * q ^ 12 + 2 * q ^ 13) - 2 * q ^ 14) - 2 * q ^ 15, -(q ^ 10), (q ^ 25 - 3 * q ^ 28) + 2 * q ^ 31, (q ^ 15 + q ^ 17) - q ^ 18, (q ^ 100 - 2 * q ^ 103) + 2 * q ^ 106, q ^ 13 - 2 * q ^ 19, -(q ^ 35), (q ^ 25 - 3 * q ^ 28) + 2 * q ^ 31, -4 * q ^ 25 + 5 * q ^ 28, (q ^ 50 - 2 * q ^ 56) + 2 * q ^ 62, (q ^ 25 - 2 * q ^ 31) + 2 * q ^ 37, -4 * q ^ 50 + 5 * q ^ 53, -(q ^ 70), -(q ^ 20), -(q ^ 45), (q ^ 75 - 2 * q ^ 78) + 2 * q ^ 81, 9 * q ^ 25, 9 * q ^ 125, 9 * q ^ 50, 9 * q ^ 100, 9 * q ^ 75], tbl[:classtext])
            end
        f29 = function (r, p)
                local q
                q = -r // p
                return map(function (x, y)
                            return x * (-p) ^ length(y)
                        end, [10, -6 + 4q, (3 - 3q) + q ^ 2, 2q - 2 * q ^ 2, 2 - 2q, -2q + 2 * q ^ 2, 0, 2 * q ^ 2 - 2 * q ^ 4, (3 - 3q) + q ^ 2, 2 - 4 * q ^ 2, 0, 0, 2 * q ^ 6 - 2 * q ^ 7, (-4q + 8 * q ^ 2) - 4 * q ^ 3, 0, (3 * q ^ 6 - 3 * q ^ 7) + q ^ 8, 0, 2 * q ^ 24 - 2 * q ^ 25, -2 * q ^ 4 + 2 * q ^ 6, 0, (3 * q ^ 6 - 3 * q ^ 7) + q ^ 8, -6 * q ^ 6 + 4 * q ^ 7, 2 * q ^ 12 - 4 * q ^ 14, 2 * q ^ 6 - 4 * q ^ 8, -6 * q ^ 12 + 4 * q ^ 13, 0, 0, 0, 2 * q ^ 18 - 2 * q ^ 19, 10 * q ^ 6, 10 * q ^ 30, 10 * q ^ 12, 10 * q ^ 24, 10 * q ^ 18], tbl[:classtext])
            end
        f31 = function (p, r, j)
                local q
                q = -r // p
                return map(function (x, y)
                            return x * (-p) ^ length(y)
                        end, [15, -7 + 8q, (2 - 5q) + 3 * q ^ 2, (2 * q ^ 3 - 3 * q ^ 2) + q, (1 - 4q) + 2 * q ^ 2, ((2 * q ^ 2 - 2q) + 1) - q ^ 3, 0, q ^ 2 + (3 * j ^ 2 + j) * q ^ 4 + 2 * j * q ^ 5 + 2 * q ^ 6, (2 - 5q) + 3 * q ^ 2, (1 - 4 * q ^ 2) + 2 * q ^ 4, j * q ^ 4, 0, (-(j ^ 2) * q ^ 8 + 4 * j ^ 2 * q ^ 9) - 2 * j ^ 2 * q ^ 10, (((1 - 2q) + (-4 * j ^ 2 - 2j) * q ^ 2 + (8 * j ^ 2 + 4j) * q ^ 3 + (-8 * j ^ 2 - 6j) * q ^ 4) - 4 * q ^ 5) + q ^ 6, 0, (-2 * j ^ 2 * q ^ 8 + 5 * j ^ 2 * q ^ 9) - 3 * j ^ 2 * q ^ 10, -j * q ^ 5, (j ^ 2 * q ^ 32 - 4 * j ^ 2 * q ^ 33) + 2 * j ^ 2 * q ^ 34, (-2 * j ^ 2 * q ^ 4 + 3 * j ^ 2 * q ^ 6) - j ^ 2 * q ^ 8, 0, (-2 * j ^ 2 * q ^ 8 + 5 * j ^ 2 * q ^ 9) - 3 * j ^ 2 * q ^ 10, 7 * j ^ 2 * q ^ 8 - 8 * j ^ 2 * q ^ 9, (j * q ^ 16 - 4 * j * q ^ 18) + 2 * j * q ^ 20, (-(j ^ 2) * q ^ 8 + 4 * j ^ 2 * q ^ 10) - 2 * j ^ 2 * q ^ 12, -7 * j * q ^ 16 + 8 * j * q ^ 17, 0, 0, 0, (-(q ^ 24) + 4 * q ^ 25) - 2 * q ^ 26, -15 * j ^ 2 * q ^ 8, -15 * j * q ^ 40, 15 * j * q ^ 16, 15 * j ^ 2 * q ^ 32, -15 * q ^ 24], tbl[:classtext])
            end
        tbl[:irreducibles] = [f1(r), f1(p), f3(r, p, E(3), ER(5)), f3(p, r, E(3), ER(5)), f3(r, p, E(3), -(ER(5))), f3(p, r, E(3), -(ER(5))), f3(r, p, E(3, 2), ER(5)), f3(p, r, E(3, 2), ER(5)), f3(r, p, E(3, 2), -(ER(5))), f3(p, r, E(3, 2), -(ER(5))), f11(r, p), f12(r, p), f12(p, r), f11(p, r), f15(r, p, E(3)), f15(p, r, E(3)), f15(r, p, E(3, 2)), f15(p, r, E(3, 2)), f19(r, p, ER(5), 1), f19(r, p, ER(5), -1), f19(r, p, -(ER(5)), 1), f19(r, p, -(ER(5)), -1), f23(r, p, 1), f23(p, r, 1), f23(p, r, E(3, 2)), f23(r, p, E(3, 2)), f23(p, r, E(3)), f23(r, p, E(3)), f29(r, p), f29(p, r), f31(p, r, E(3)), f31(r, p, E(3)), f31(p, r, E(3, 2)), f31(r, p, E(3, 2))] * q ^ 0
        tbl[:centralizers] = map((x->begin
                        tbl[:order] // x
                    end), tbl[:classes])
        tbl[:irredinfo] = chevieget(:G27, :IrredInfo)
        tbl[:galomorphisms] = Group(#= none:150 =# @perm_str("(4,8)(6,19)(7,20)(12,28)(14,27)(15,26)"), #= none:150 =# @perm_str("(6,7)(11,13)(14,15)(17,18)(19,20)(22,23)(24,25)(26,27)(30,31)(32,33)"))
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        return tbl
    end)
chevieset(:G27, :CharTable, function ()
        return (chevieget(:G27, :HeckeCharTable))([[1, -1], [1, -1], [1, -1]], [])
    end)
chevieset(:G27, :HeckeRepresentation, function (para, root, i)
        local p, r, rep, f1, f3, f11, f12, f15, f19, f23, f29, f31
        p = (para[1])[2]
        r = (para[1])[1]
        f1 = (r->begin
                    map((x->begin
                                [[r]]
                            end), 1:3)
                end)
        f3 = function (r, p, j, d)
                local c
                c = (2 + j ^ 2 * (1 - d)) // 2
                return WGraph2Representation([[[1, 2], [1, 3], [2, 3]], [[1, 2, -2, p * r], [1, 3, -c, (p * r) // c], [2, 3, r, -p]]], [p, r]) * p ^ 0 * r ^ 0
            end
        f11 = function (r, p)
                return WGraph2Representation([[[1, 2], [1, 3], [1, 3], [2], [2, 3]], [[1, 2, p, 0], [1, 3, -p, r], [1, 5, p, -r], [2, 4, 0, p], [2, 5, p, -r], [3, 4, r, -p], [3, 5, p, 0]]], [p, r]) * p ^ 0 * r ^ 0
            end
        f12 = function (r, p)
                return WGraph2Representation([[[1, 3], [1, 2], [1, 2], [3], [2, 3]], [[1, 2, 0, r], [1, 3, p, -r], [2, 4, r, 0], [3, 4, -r, p], [1, 5, -p, r], [2, 5, -p, r], [3, 5, 0, r]]], [p, r]) * p ^ 0 * r ^ 0
            end
        f15 = function (x, y, j)
                return WGraph2Representation([[[1], [1], [2], [2], [3], [3]], [[1, 4, x, -y], [1, 5, x, -y], [2, 3, y, -x], [2, 6, j ^ 2 * x, -j * y], [3, 5, 2y, 0], [3, 6, 2x, -y], [4, 5, -j * y, 0], [4, 6, -j * x, 0]]], [x, y]) * x ^ 0 * r ^ 0
            end
        f19 = function (x, y, d, sgn)
                local v
                v = -sgn * GetRoot(-x * y, 2)
                return [[[x, 0, -y, 0, 0, 0, v - (y * (1 + d)) // 2, 0], [0, x + y, 0, y, 0, 0, 0, 0], [0, 0, y, 0, 0, 0, 0, 0], [0, -x, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, x], [0, 0, v + (x * (1 + d)) // 2, 0, 0, x, x, 0], [0, 0, 0, 0, 0, 0, y, 0], [0, 0, 0, 0, -y, 0, 0, x + y]], [[x, 0, -y, y, 0, v, v, -y], [0, x, (-x * (3 + d)) // 2, x, 0, 0, 0, 0], [0, 0, y, 0, 0, 0, 0, 0], [0, 0, 0, y, 0, 0, 0, 0], [0, 0, x, 0, x, 0, 0, y], [0, 0, 0, 0, 0, x + y, y, 0], [0, 0, 0, 0, 0, -x, 0, 0], [0, 0, 0, 0, 0, 0, 0, y]], [[0, 0, -x, 0, 0, 0, 0, 0], [0, x, 0, x, 0, 0, (-y * (3 + d)) // 2, 0], [y, 0, x + y, 0, 0, 0, 0, 0], [0, 0, 0, y, 0, 0, 0, 0], [0, 0, 0, 0, y, 0, 0, 0], [v, 0, v, -y, v, x, x, 0], [0, 0, 0, 0, 0, 0, y, 0], [0, 0, 0, 0, -x, 0, v, x]]] * x ^ 0 * y ^ 0
            end
        f23 = function (p, r, e)
                local x, y
                x = e * GetRoot(r, 3)
                y = GetRoot(p, 3)
                return WGraph2Representation([[[1], [1, 2], [1, 2], [1, 3], [1, 3], [2], [2, 3], [2, 3], [3]], [[1, 2, 0, ((x * y ^ 2 - x ^ 2 * y) + x ^ 3) - y ^ 3], [1, 3, 0, (-x * y ^ 2 + x ^ 2 * y) - x ^ 3], [1, 4, 0, x * y ^ 2 - y ^ 3], [1, 8, -(x ^ 3) * y ^ 3, 1], [2, 5, y ^ 2, -(x ^ 3) * y], [2, 7, -(x ^ 2) * y ^ 2, x * y], [3, 4, -x * y ^ 2, x ^ 2 * y], [3, 5, -x * y + y ^ 2, 0], [3, 6, x * y ^ 2 - y ^ 3, 0], [3, 9, x ^ 3, -(y ^ 3)], [4, 6, x ^ 2 * y - x ^ 3, 0], [4, 7, -(x ^ 2) * y ^ 2, x * y], [4, 9, -(x ^ 2) * y + x ^ 3, 0], [5, 6, x ^ 3 * y, -(y ^ 2)], [5, 7, 0, x - y], [5, 9, x ^ 2 * y ^ 2 - x ^ 3 * y, 0], [6, 7, 0, -2 * x * y + x ^ 2 + y ^ 2], [6, 8, 0, 1], [6, 9, 0, x * y ^ 2 - y ^ 3], [7, 9, 2 * x * y - y ^ 2, 0], [8, 9, -1, 0]]], [x ^ 3, y ^ 3]) * x ^ 0 * y ^ 0
            end
        f29 = function (x, y)
                return WGraph2Representation([[[1, 3], [1, 2], [1, 3], [1, 2], [1, 3], [1, 2], [3], [2], [2, 3], [2, 3]], [[1, 4, 0, x * y + x ^ 2 + y ^ 2], [1, 6, 0, x * y + x ^ 2], [1, 7, y, 0], [1, 9, -1, x * y], [1, 10, x, 0], [2, 3, 0, 2 * x ^ 2 + y ^ 2], [2, 5, 0, x * y + x ^ 2 + y ^ 2], [2, 9, 0, -x * y - y ^ 2], [2, 10, x, -y], [3, 4, x, 0], [3, 6, x, -2y], [3, 7, 2 * x ^ 2, 0], [3, 8, 2x, 0], [3, 9, 0, -x], [3, 10, x * y, -1], [4, 5, -y, x], [4, 7, x * y, -1], [4, 8, x + y, 0], [4, 9, 0, -y], [5, 6, 0, 3y], [5, 7, x ^ 2, 0], [5, 8, x, -y], [5, 9, 0, 2x], [5, 10, 0, 2], [6, 7, x * y, 0], [6, 8, x - y, 0], [6, 9, -x, y], [6, 10, x * y + x ^ 2, 0], [7, 8, 1, -x * y], [7, 9, 0, y ^ 2], [8, 9, 0, -x + 2y], [8, 10, 0, -1]]], [x, y]) * x ^ 0 * y ^ 0
            end
        f31 = function (r, p, j)
                return [[[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-p * r, p + r, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, p + r, 0, 0, 0, j * p * r, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, r // p, 0, 0, 0, 0, 0, 0], [0, 0, -(j ^ 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, p, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -(p ^ 2), 0, 0, p + r, 0, 0, 0, 0, 0, 0], [(-p * r ^ 3 - p ^ 2 * r ^ 2) - r ^ 4, p * r ^ 2 + p ^ 2 * r + r ^ 3, p ^ 2 * r, (-p * r ^ 3 - p ^ 2 * r ^ 2) - r ^ 4, j * p ^ 2 * r ^ 2, p * r + p ^ 2 + r ^ 2, j * p ^ 2 * r ^ 2, r ^ 2, ((-p * r - p ^ 2) - r ^ 2) // p, r, 0, (-p * r ^ 2 - p ^ 2 * r) - r ^ 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -r // p, 0], [0, 0, 0, p * r, 0, 0, 0, 0, 0, 0, 0, p + r, 0, 0, 0], [(-(j ^ 2) - 2j) * p * r ^ 3 + (-2 * j ^ 2 - 3j) * p ^ 2 * r ^ 2 + p ^ 3 * r, ((j ^ 2 + 2j) * p * r ^ 2 + (2 * j ^ 2 + 3j) * p ^ 2 * r) - p ^ 3, -(j ^ 2) * p * r ^ 2 - j ^ 2 * r ^ 3, (-j * p * r ^ 3 + 2 * p ^ 2 * r ^ 2) - j ^ 2 * p ^ 3 * r, (j ^ 2 * p * r ^ 3 + p ^ 2 * r ^ 2 + j ^ 2 * p ^ 4) - r ^ 4, j * p * r - p ^ 2, -p * r ^ 3 - r ^ 4, j * p * r + j * p ^ 2, p - j * r, 0, -(j ^ 2) * p + r, (-j * p * r ^ 2 + 2 * p ^ 2 * r) - j ^ 2 * p ^ 3, r, (-(j ^ 2) * p + r) // p, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, p ^ 2, 0, 0, p + r, 0], [p ^ 2 * r ^ 3 + (-2 * j ^ 2 - j) * p ^ 3 * r ^ 2, -(p ^ 2) * r ^ 2 + (2 * j ^ 2 + j) * p ^ 3 * r, p * r ^ 3 + j ^ 2 * p ^ 3 * r, p ^ 2 * r ^ 3 + j ^ 2 * p ^ 4 * r, (p ^ 2 * r ^ 3 - j ^ 2 * p ^ 5) - r ^ 5, 0, j * p * r ^ 4 + p ^ 3 * r ^ 2, p * r ^ 2 + j ^ 2 * p ^ 3, 0, 0, p * r + r ^ 2, p ^ 2 * r ^ 2 + j ^ 2 * p ^ 4, 0, (p * r + r ^ 2) // p, r]], [[0, 0, 0, -r, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [p, 0, 0, p + r, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -r, 0, 0, 0, 0, 0, 0, 0, 0], [0, p * r, 0, 0, 0, p + r, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, p, 0, p + r, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, p + r, 0, 0, p ^ 2 * r, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, p * r, 0, p + r, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -r, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1 // p, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, p, 0, p + r, 0, 0], [(j ^ 2 * p * r ^ 4 + j ^ 2 * p ^ 2 * r ^ 3 + j * p ^ 3 * r ^ 2) - p ^ 4 * r, -(j ^ 2) * p * r ^ 3 - j ^ 2 * p ^ 2 * r ^ 2, 0, (j ^ 2 * p * r ^ 4 + j ^ 2 * p ^ 2 * r ^ 3 + j * p ^ 3 * r ^ 2) - p ^ 4 * r, (j ^ 2 * p * r ^ 4 - j * p ^ 2 * r ^ 3) - p ^ 4 * r, -(j ^ 2) * p * r ^ 2 - j ^ 2 * p ^ 2 * r, (j ^ 2 * p * r ^ 4 - j * p ^ 2 * r ^ 3) - p ^ 4 * r, -(j ^ 2) * p * r ^ 2 - j ^ 2 * p ^ 2 * r, -(j ^ 2) * p ^ 2 - r ^ 2, -(j ^ 2) * p * r - j ^ 2 * p ^ 2, -(j ^ 2) * p * r, -p * r ^ 3 - j ^ 2 * p ^ 3 * r, -(j ^ 2) * p * r, r, 0], [((p ^ 2 * r ^ 3 - j * p ^ 3 * r ^ 2) + j ^ 2 * p ^ 4 * r) - r ^ 5, r ^ 4, 0, ((p ^ 2 * r ^ 3 - j * p ^ 3 * r ^ 2) + j ^ 2 * p ^ 4 * r) - r ^ 5, ((p ^ 2 * r ^ 3 - j * p ^ 3 * r ^ 2) + j ^ 2 * p ^ 4 * r) - r ^ 5, r ^ 3, ((p ^ 2 * r ^ 3 - j * p ^ 3 * r ^ 2) + j ^ 2 * p ^ 4 * r) - r ^ 5, r ^ 3, 0, r ^ 2, r ^ 2, 0, r ^ 2, 0, r]], [[p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [-(r ^ 2), r, r, p * r, -(p ^ 2), 0, j * r ^ 2, 1, 0, 0, 0, p, 0, 0, 0], [0, 0, 0, 0, -r, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, p, p + r, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, p, 0, 0, 0, 0, 0, 0, 0, 0], [0, p * r, 0, 0, 0, 0, 0, p + r, 0, 0, 0, 0, 0, 0, 0], [(-p * r ^ 3 + p ^ 3 * r) - r ^ 4, p * r ^ 2 + r ^ 3, 0, -(j ^ 2) * p ^ 2 * r ^ 2 - r ^ 4, ((-p * r ^ 3 + (j ^ 2 + 2j) * p ^ 2 * r ^ 2) - p ^ 3 * r) - r ^ 4, r ^ 2, j * p * r ^ 3 + j * p ^ 2 * r ^ 2 + p ^ 3 * r, p * r + r ^ 2, r, r, r, p * r ^ 2 + p ^ 2 * r, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1], [0, 0, 0, 0, 0, p * r, 0, 0, 0, 0, p + r, 0, 0, 0, 0], [0, 0, 0, p * r + p ^ 2, p * r + r ^ 2, 0, 0, 0, 0, 0, 0, p, 0, 0, 0], [((p ^ 2 * r ^ 2 - j * p ^ 3 * r) + j ^ 2 * p ^ 4) - r ^ 4, r ^ 3, 0, ((p ^ 2 * r ^ 2 - j * p ^ 3 * r) + j ^ 2 * p ^ 4) - r ^ 4, ((p ^ 2 * r ^ 2 - j * p ^ 3 * r) + j ^ 2 * p ^ 4) - r ^ 4, r ^ 2, ((p ^ 2 * r ^ 2 - j * p ^ 3 * r) + j ^ 2 * p ^ 4) - r ^ 4, r ^ 2, 0, r, r, 0, r, 0, 1], [((-2 * p * r ^ 4 - p ^ 2 * r ^ 3) + (-2 * j ^ 2 - j) * p ^ 3 * r ^ 2) - r ^ 5, 2 * p * r ^ 3 + p ^ 2 * r ^ 2 + j ^ 2 * p ^ 3 * r + r ^ 4, 0, (-p * r ^ 4 + p ^ 2 * r ^ 3 + p ^ 3 * r ^ 2 + j ^ 2 * p ^ 4 * r) - r ^ 5, (((-p * r ^ 4 + j * p ^ 2 * r ^ 3 + (j ^ 2 + 2j) * p ^ 3 * r ^ 2) - p ^ 4 * r) - j ^ 2 * p ^ 5) - r ^ 5, p * r ^ 2 + r ^ 3, j * p * r ^ 4 + j * p ^ 2 * r ^ 3 + p ^ 3 * r ^ 2, 2 * p * r ^ 2 + p ^ 2 * r + j ^ 2 * p ^ 3 + r ^ 3, 0, r ^ 2, p * r + r ^ 2, (-(j ^ 2) - 2j) * p ^ 2 * r ^ 2 + p ^ 3 * r + j ^ 2 * p ^ 4, 0, r, r], [0, 0, 0, 0, 0, 0, 0, 0, 0, p * r, 0, 0, 0, 0, p + r]]] * p ^ 0 * r ^ 0
            end
        rep = [[f1, r], [f1, p], [f3, p, r, E(3, 2), ER(5)], [f3, r, p, E(3, 2), ER(5)], [f3, p, r, E(3, 2), -(ER(5))], [f3, r, p, E(3, 2), -(ER(5))], [f3, p, r, E(3), ER(5)], [f3, r, p, E(3), ER(5)], [f3, p, r, E(3), -(ER(5))], [f3, r, p, E(3), -(ER(5))], [f11, p, r], [f12, p, r], [f12, r, p], [f11, r, p], [f15, r, p, E(3)], [f15, p, r, E(3)], [f15, r, p, E(3, 2)], [f15, p, r, E(3, 2)], [f19, r, p, ER(5), 1], [f19, r, p, ER(5), -1], [f19, r, p, -(ER(5)), 1], [f19, r, p, -(ER(5)), -1], [f23, p, r, 1], [f23, r, p, 1], [f23, r, p, E(3, 2)], [f23, p, r, E(3, 2)], [f23, r, p, E(3)], [f23, p, r, E(3)], [f29, p, r], [f29, r, p], [f31, r, p, E(3)], [f31, p, r, E(3)], [f31, r, p, E(3, 2)], [f31, p, r, E(3, 2)]]
        return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])]) + 0 * Product(para[1])
    end)
(CHEVIE[:families])[:Y6] = Dict{Symbol, Any}(:name => "Y_6", :explanation => "subcategory of DQ(B2).20", :fourierMat => [[-(ER(5)), -(ER(5)), -2 * ER(5), -2 * ER(5), -5, -5], [-(ER(5)), -(ER(5)), -2 * ER(5), -2 * ER(5), 5, 5], [-2 * ER(5), -2 * ER(5), -5 + ER(5), 5 + ER(5), 0, 0], [-2 * ER(5), -2 * ER(5), 5 + ER(5), -5 + ER(5), 0, 0], [-5, 5, 0, 0, 5, -5], [-5, 5, 0, 0, -5, 5]] // 10, :eigenvalues => [1, 1, E(5, 3), E(5, 2), -1, 1], :special => 1, :cospecial => 1)
chevieset(:G27, :UnipotentCharacters, function ()
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:3, :rank => 3, :ST => 27), :levi => [], :parameterExponents => [1, 1, 1], :charNumbers => 1:34, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2], :rank => 1, :p => 6, :q => 1), :levi => [1, 8], :parameterExponents => [[5 // 2, 5, 0, 5 // 2, 0, 5]], :charNumbers => [56, 37, 79, 55, 77, 39], :eigenvalue => E(5, 2), :cuspidalName => "I_2(5)[1,3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2], :rank => 1, :p => 6, :q => 1), :levi => [1, 8], :parameterExponents => [[5 // 2, 5, 0, 5 // 2, 0, 5]], :charNumbers => [58, 38, 80, 57, 78, 40], :eigenvalue => E(5, 3), :cuspidalName => "I_2(5)[1,2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1], :rank => 1, :p => 6, :q => 1), :levi => [2, 3], :parameterExponents => [[4, 5, 0, 1, 0, 5]], :charNumbers => [47, 35, 76, 74, 75, 36], :eigenvalue => -1, :cuspidalName => "B_2"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [65], :eigenvalue => E(4), :cuspidalName => "G_{27}[i]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [63], :eigenvalue => E(4), :cuspidalName => "G_{27}^2[i]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [64], :eigenvalue => -(E(4)), :cuspidalName => "G_{27}[-i]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [66], :eigenvalue => -(E(4)), :cuspidalName => "G_{27}^2[-i]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [83], :eigenvalue => E(3), :cuspidalName => "G_{27}[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [84], :eigenvalue => E(3), :cuspidalName => "G_{27}^2[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [85], :eigenvalue => E(3), :cuspidalName => "G_{27}^3[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [54], :eigenvalue => E(3), :cuspidalName => "G_{27}^4[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [67], :eigenvalue => E(3, 2), :cuspidalName => "G_{27}[\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [43], :eigenvalue => E(3, 2), :cuspidalName => "G_{27}^2[\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [44], :eigenvalue => E(3, 2), :cuspidalName => "G_{27}^3[\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [45], :eigenvalue => E(3, 2), :cuspidalName => "G_{27}^4[\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [86], :eigenvalue => -(E(3)), :cuspidalName => "G_{27}[-\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [46], :eigenvalue => -(E(3, 2)), :cuspidalName => "G_{27}^2[-\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [51], :eigenvalue => E(9), :cuspidalName => "G_{27}[\\zeta_9]", :qEigen => 1 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [53], :eigenvalue => E(9), :cuspidalName => "G_{27}^2[\\zeta_9]", :qEigen => 2 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [72], :eigenvalue => E(9, 2), :cuspidalName => "G_{27}[\\zeta_9^2]", :qEigen => 2 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [68], :eigenvalue => E(9, 2), :cuspidalName => "G_{27}^2[E9^2]", :qEigen => 1 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [50], :eigenvalue => E(9, 4), :cuspidalName => "G_{27}[\\zeta_9^4]", :qEigen => 1 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [49], :eigenvalue => E(9, 4), :cuspidalName => "G_{27}^2[\\zeta_9^4]", :qEigen => 2 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [70], :eigenvalue => E(9, 5), :cuspidalName => "G_{27}[\\zeta_9^5]", :qEigen => 1 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [69], :eigenvalue => E(9, 5), :cuspidalName => "G_{27}^2[\\zeta_9^5]", :qEigen => 2 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [52], :eigenvalue => E(9, 7), :cuspidalName => "G_{27}[\\zeta_9^7]", :qEigen => 2 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [48], :eigenvalue => E(9, 7), :cuspidalName => "G_{27}^2[\\zeta_9^7]", :qEigen => 1 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [73], :eigenvalue => E(9, 8), :cuspidalName => "G_{27}[\\zeta_9^8]", :qEigen => 2 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [71], :eigenvalue => E(9, 8), :cuspidalName => "G_{27}^2[\\zeta_9^8]", :qEigen => 1 // 3), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [41], :eigenvalue => E(15), :cuspidalName => "G_{27}[\\zeta_{15}]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [42], :eigenvalue => E(15, 4), :cuspidalName => "G_{27}[\\zeta_{15}^4]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [81], :eigenvalue => E(15, 11), :cuspidalName => "G_{27}[\\zeta_{15}^{11}]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [82], :eigenvalue => E(15, 14), :cuspidalName => "G_{27}[\\zeta_{15}^{14}]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [59], :eigenvalue => E(20, 17), :cuspidalName => "G_{27}[\\zeta_{20}^{17}]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [61], :eigenvalue => E(20, 13), :cuspidalName => "G_{27}[\\zeta_{20}^{13}]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0, :qEigen => 1 // 2), :levi => 1:3, :parameterExponents => [], :charNumbers => [60], :eigenvalue => E(20, 7), :cuspidalName => "G_{27}[\\zeta_{20}^7]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :parameterExponents => [], :charNumbers => [62], :eigenvalue => E(20, 3), :cuspidalName => "G_{27}[\\zeta_{20}^3]", :qEigen => 1 // 2)], :families => [Family("C1", [1]), Family(((CHEVIE[:families])[:X])(3) * Family("Y6"), [5, 3, 38, 37, 35, 16, 9, 7, 40, 39, 36, 18, 44, 43, 42, 41, 46, 45], Dict{Symbol, Any}(:signs => [-1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1], :ennola => 2)), Family("C2", [30, 11, 12, 47], Dict{Symbol, Any}(:ennola => 1)), ComplexConjugate(Family("Z9", [23, 49, 48, 28, 53, 51, 26, 52, 50], Dict{Symbol, Any}(:special => 7, :cospecial => 1, :ennola => 1))), ComplexConjugate(Family(((CHEVIE[:families])[:X])(3), [33, 31, 54], Dict{Symbol, Any}(:ennola => 2))), Family(Family("C'\"2") * ((CHEVIE[:families])[:Dihedral])(5), [19, 21, 58, 56, 20, 22, 57, 55, 65, 63, 59, 61, 66, 64, 60, 62], Dict{Symbol, Any}(:ennola => 1)), Family(((CHEVIE[:families])[:X])(3), [34, 32, 67], Dict{Symbol, Any}(:ennola => 1)), Family("Z9", [24, 69, 68, 27, 73, 71, 25, 72, 70], Dict{Symbol, Any}(:cospecial => 4, :signs => [1, 1, -1, 1, 1, -1, 1, 1, -1], :ennola => 2)), Family("C2", [29, 13, 14, 74], Dict{Symbol, Any}(:ennola => 1)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3) * Family("Y6")), [6, 4, 77, 78, 75, 15, 10, 8, 79, 80, 76, 17, 84, 83, 81, 82, 86, 85], Dict{Symbol, Any}(:signs => [-1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1], :ennola => 8)), Family("C1", [2])], :a => [0, 45, 1, 16, 1, 16, 1, 16, 1, 16, 3, 3, 12, 12, 16, 1, 16, 1, 6, 6, 6, 6, 4, 9, 9, 4, 9, 4, 12, 3, 5, 8, 5, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 9, 9, 9, 9, 9, 9, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], :A => [0, 45, 29, 44, 29, 44, 29, 44, 29, 44, 33, 33, 42, 42, 44, 29, 44, 29, 39, 39, 39, 39, 36, 41, 41, 36, 41, 36, 42, 33, 37, 40, 37, 40, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 33, 36, 36, 36, 36, 36, 36, 37, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 41, 41, 41, 41, 41, 41, 42, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44])
    end)
chevieset(:G27, :Invariants, [function (x, y, z)
            return ((((((-90 * x ^ 2 * y ^ 2 * z ^ 2 + 180 * x ^ 2 * y ^ 3 * z + 30 * x ^ 2 * y ^ 4) - 135 * x ^ 2 * z ^ 4) + 135 * y ^ 2 * z ^ 4 + 90 * x ^ 4 * y * z) - 30 * x ^ 4 * y ^ 2) + 45 * x ^ 4 * z ^ 2 + 45 * y ^ 4 * z ^ 2 + 18 * y ^ 5 * z + 10 * x ^ 6) - 10 * y ^ 6) - 27 * z ^ 6
        end, function (x, y, z)
            return ((((((((((((((((((((((((((((((((((((-2430 * x ^ 2 * y ^ 2 * z ^ 8 - 58320 * x ^ 2 * y ^ 3 * z ^ 7) + 3240 * x ^ 2 * y ^ 4 * z ^ 6 + 5832 * x ^ 2 * y ^ 5 * z ^ 5) - 13500 * x ^ 2 * y ^ 6 * z ^ 4) - 17280 * x ^ 2 * y ^ 7 * z ^ 3) + 1530 * x ^ 2 * y ^ 8 * z ^ 2) - 1260 * x ^ 2 * y ^ 9 * z) + 756 * x ^ 2 * y ^ 10) - 4374 * x ^ 2 * z ^ 10) + 4374 * y ^ 2 * z ^ 10) - 29160 * x ^ 4 * y * z ^ 7) - 3240 * x ^ 4 * y ^ 2 * z ^ 6) - 3240 * x ^ 4 * y ^ 3 * z ^ 5) + 20250 * x ^ 4 * y ^ 4 * z ^ 4 + 30240 * x ^ 4 * y ^ 5 * z ^ 3) - 8460 * x ^ 4 * y ^ 6 * z ^ 2) + 3960 * x ^ 4 * y ^ 7 * z + 1410 * x ^ 4 * y ^ 8 + 1215 * x ^ 4 * z ^ 8 + 1215 * y ^ 4 * z ^ 8) - 5832 * y ^ 5 * z ^ 7) - 3240 * x ^ 6 * y * z ^ 5) - 13500 * x ^ 6 * y ^ 2 * z ^ 4) + 900 * x ^ 6 * y ^ 4 * z ^ 2) - 2520 * x ^ 6 * y ^ 5 * z) + 760 * x ^ 6 * y ^ 6 + 1080 * x ^ 6 * z ^ 6) - 1080 * y ^ 6 * z ^ 6) + 648 * y ^ 7 * z ^ 5) - 10800 * x ^ 8 * y * z ^ 3) - 3150 * x ^ 8 * y ^ 2 * z ^ 2) - 900 * x ^ 8 * y ^ 3 * z) - 2550 * x ^ 8 * y ^ 4) + 3375 * x ^ 8 * z ^ 4 + 3375 * y ^ 8 * z ^ 4) - 2160 * y ^ 9 * z ^ 3) + 900 * x ^ 10 * y * z) - 300 * x ^ 10 * y ^ 2) + 450 * x ^ 10 * z ^ 2) - 486 * y ^ 10 * z ^ 2) - 180 * y ^ 11 * z) - 50 * x ^ 12) - 26 * y ^ 12) + 729 * z ^ 12
        end, function (x, y, z)
            return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((-60584274 * x ^ 2 * y ^ 2 * z ^ 26 + 7110680580 * x ^ 2 * y ^ 3 * z ^ 25) - 972537030 * x ^ 2 * y ^ 4 * z ^ 24) + 18366600960 * x ^ 2 * y ^ 5 * z ^ 23 + 7702351560 * x ^ 2 * y ^ 6 * z ^ 22 + 3613798800 * x ^ 2 * y ^ 7 * z ^ 21 + 63867398400 * x ^ 2 * y ^ 8 * z ^ 20 + 25404060780 * x ^ 2 * y ^ 9 * z ^ 19) - 23662312110 * x ^ 2 * y ^ 10 * z ^ 18) + 33974432640 * x ^ 2 * y ^ 11 * z ^ 17 + 74567503665 * x ^ 2 * y ^ 12 * z ^ 16) - 1602852300 * x ^ 2 * y ^ 13 * z ^ 15) - 79131761730 * x ^ 2 * y ^ 14 * z ^ 14) + 23244704460 * x ^ 2 * y ^ 15 * z ^ 13 + 33918011685 * x ^ 2 * y ^ 16 * z ^ 12 + 4784806080 * x ^ 2 * y ^ 17 * z ^ 11 + 2685939750 * x ^ 2 * y ^ 18 * z ^ 10 + 940546080 * x ^ 2 * y ^ 19 * z ^ 9 + 4795735815 * x ^ 2 * y ^ 20 * z ^ 8) - 843312060 * x ^ 2 * y ^ 21 * z ^ 7) + 537689610 * x ^ 2 * y ^ 22 * z ^ 6) - 12222900 * x ^ 2 * y ^ 23 * z ^ 5) + 202639995 * x ^ 2 * y ^ 24 * z ^ 4) - 26859060 * x ^ 2 * y ^ 25 * z ^ 3) + 11022960 * x ^ 2 * y ^ 26 * z ^ 2 + 863496 * x ^ 2 * y ^ 27 * z + 485980 * x ^ 2 * y ^ 28) - 23914845 * x ^ 2 * z ^ 28) + 23914845 * y ^ 2 * z ^ 28 + 3555340290 * x ^ 4 * y * z ^ 25 + 972537030 * x ^ 4 * y ^ 2 * z ^ 24) - 10203667200 * x ^ 4 * y ^ 3 * z ^ 23) - 11553527340 * x ^ 4 * y ^ 4 * z ^ 22) - 6324147900 * x ^ 4 * y ^ 5 * z ^ 21) + 91174608450 * x ^ 4 * y ^ 6 * z ^ 20) - 79841333880 * x ^ 4 * y ^ 7 * z ^ 19) - 130374287100 * x ^ 4 * y ^ 8 * z ^ 18) - 164209757760 * x ^ 4 * y ^ 9 * z ^ 17) + 12784633380 * x ^ 4 * y ^ 10 * z ^ 16) - 186840221400 * x ^ 4 * y ^ 11 * z ^ 15) - 136349849070 * x ^ 4 * y ^ 12 * z ^ 14) + 178537275900 * x ^ 4 * y ^ 13 * z ^ 13) - 47897530740 * x ^ 4 * y ^ 14 * z ^ 12) + 91340084160 * x ^ 4 * y ^ 15 * z ^ 11 + 16409911500 * x ^ 4 * y ^ 16 * z ^ 10) - 17014048380 * x ^ 4 * y ^ 17 * z ^ 9) - 14207274450 * x ^ 4 * y ^ 18 * z ^ 8) - 6976672560 * x ^ 4 * y ^ 19 * z ^ 7) - 1297518480 * x ^ 4 * y ^ 20 * z ^ 6) + 772075800 * x ^ 4 * y ^ 21 * z ^ 5) - 513320220 * x ^ 4 * y ^ 22 * z ^ 4) - 303264000 * x ^ 4 * y ^ 23 * z ^ 3) + 121971510 * x ^ 4 * y ^ 24 * z ^ 2 + 3392652 * x ^ 4 * y ^ 25 * z + 1049740 * x ^ 4 * y ^ 26 + 30292137 * x ^ 4 * z ^ 26 + 30292137 * y ^ 4 * z ^ 26 + 711068058 * y ^ 5 * z ^ 25) - 10203667200 * x ^ 6 * y * z ^ 23) + 7702351560 * x ^ 6 * y ^ 2 * z ^ 22 + 215298558900 * x ^ 6 * y ^ 4 * z ^ 20 + 50808121560 * x ^ 6 * y ^ 5 * z ^ 19 + 22208328900 * x ^ 6 * y ^ 6 * z ^ 18 + 203846595840 * x ^ 6 * y ^ 7 * z ^ 17 + 13377058875 * x ^ 6 * y ^ 8 * z ^ 16) - 364141404900 * x ^ 6 * y ^ 9 * z ^ 15) + 511501617990 * x ^ 6 * y ^ 10 * z ^ 14 + 766953999900 * x ^ 6 * y ^ 11 * z ^ 13) - 11123417340 * x ^ 6 * y ^ 12 * z ^ 12) + 76310262000 * x ^ 6 * y ^ 13 * z ^ 11) - 122977974600 * x ^ 6 * y ^ 14 * z ^ 10) + 74494157760 * x ^ 6 * y ^ 15 * z ^ 9) - 37971611325 * x ^ 6 * y ^ 16 * z ^ 8) - 5211188460 * x ^ 6 * y ^ 17 * z ^ 7) + 40676316750 * x ^ 6 * y ^ 18 * z ^ 6) - 4676283900 * x ^ 6 * y ^ 19 * z ^ 5) + 927121590 * x ^ 6 * y ^ 20 * z ^ 4 + 718713000 * x ^ 6 * y ^ 21 * z ^ 3 + 624848160 * x ^ 6 * y ^ 22 * z ^ 2) - 37902000 * x ^ 6 * y ^ 23 * z) + 16601900 * x ^ 6 * y ^ 24) - 324179010 * x ^ 6 * z ^ 24) + 324179010 * y ^ 6 * z ^ 24 + 2040733440 * y ^ 7 * z ^ 23 + 2258624250 * x ^ 8 * y * z ^ 21 + 1805423175 * x ^ 8 * y ^ 2 * z ^ 20 + 18145757700 * x ^ 8 * y ^ 3 * z ^ 19 + 97061793750 * x ^ 8 * y ^ 4 * z ^ 18) - 50961648960 * x ^ 8 * y ^ 5 * z ^ 17) - 325540089450 * x ^ 8 * y ^ 6 * z ^ 16) - 681614416800 * x ^ 8 * y ^ 7 * z ^ 15) + 17328257100 * x ^ 8 * y ^ 8 * z ^ 14 + 127345729500 * x ^ 8 * y ^ 9 * z ^ 13) - 97421744790 * x ^ 8 * y ^ 10 * z ^ 12) - 32091600600 * x ^ 8 * y ^ 11 * z ^ 11) + 171333978300 * x ^ 8 * y ^ 12 * z ^ 10) - 145036931400 * x ^ 8 * y ^ 13 * z ^ 9) - 6063336000 * x ^ 8 * y ^ 14 * z ^ 8) + 56405568240 * x ^ 8 * y ^ 15 * z ^ 7) - 26667506475 * x ^ 8 * y ^ 16 * z ^ 6) + 14669703450 * x ^ 8 * y ^ 17 * z ^ 5 + 6904294200 * x ^ 8 * y ^ 18 * z ^ 4) - 2415528000 * x ^ 8 * y ^ 19 * z ^ 3) + 473133210 * x ^ 8 * y ^ 20 * z ^ 2) - 178922700 * x ^ 8 * y ^ 21 * z) - 561700 * x ^ 8 * y ^ 22) - 1925587890 * x ^ 8 * z ^ 22) - 1925587890 * y ^ 8 * z ^ 22) + 451724850 * y ^ 9 * z ^ 21) - 18145757700 * x ^ 10 * y * z ^ 19) + 36987309450 * x ^ 10 * y ^ 2 * z ^ 18) - 56624054400 * x ^ 10 * y ^ 3 * z ^ 17) + 216134922375 * x ^ 10 * y ^ 4 * z ^ 16) - 284886099540 * x ^ 10 * y ^ 5 * z ^ 15) - 539226829350 * x ^ 10 * y ^ 6 * z ^ 14) - 561988359900 * x ^ 10 * y ^ 7 * z ^ 13) + 348456860550 * x ^ 10 * y ^ 8 * z ^ 12) - 369114570000 * x ^ 10 * y ^ 9 * z ^ 11) - 135367042860 * x ^ 10 * y ^ 10 * z ^ 10) + 139885574400 * x ^ 10 * y ^ 11 * z ^ 9) - 40396615650 * x ^ 10 * y ^ 12 * z ^ 8) - 27645478200 * x ^ 10 * y ^ 13 * z ^ 7) + 69410938500 * x ^ 10 * y ^ 14 * z ^ 6) - 20828602440 * x ^ 10 * y ^ 15 * z ^ 5) - 14036532075 * x ^ 10 * y ^ 16 * z ^ 4) - 3687846300 * x ^ 10 * y ^ 17 * z ^ 3) - 4739024400 * x ^ 10 * y ^ 18 * z ^ 2) + 56859000 * x ^ 10 * y ^ 19 * z) - 67904660 * x ^ 10 * y ^ 20) + 6935895540 * x ^ 10 * z ^ 20) - 5476499505 * y ^ 10 * z ^ 20) + 3629151540 * y ^ 11 * z ^ 19 + 28312027200 * x ^ 12 * y * z ^ 17 + 6784074000 * x ^ 12 * y ^ 2 * z ^ 16) - 18012569400 * x ^ 12 * y ^ 3 * z ^ 15) + 150212454750 * x ^ 12 * y ^ 4 * z ^ 14) - 436654889100 * x ^ 12 * y ^ 5 * z ^ 13) - 308375820900 * x ^ 12 * y ^ 6 * z ^ 12) + 67111740000 * x ^ 12 * y ^ 7 * z ^ 11) - 48098059200 * x ^ 12 * y ^ 8 * z ^ 10) - 63423243000 * x ^ 12 * y ^ 9 * z ^ 9) - 77330627100 * x ^ 12 * y ^ 10 * z ^ 8) - 59739638400 * x ^ 12 * y ^ 11 * z ^ 7) - 146804427000 * x ^ 12 * y ^ 12 * z ^ 6) + 24078124800 * x ^ 12 * y ^ 13 * z ^ 5) - 2059479000 * x ^ 12 * y ^ 14 * z ^ 4) - 8104579200 * x ^ 12 * y ^ 15 * z ^ 3) + 1003240950 * x ^ 12 * y ^ 16 * z ^ 2) - 208780500 * x ^ 12 * y ^ 17 * z) + 244927100 * x ^ 12 * y ^ 18) - 421216200 * x ^ 12 * z ^ 18) - 1799616690 * y ^ 12 * z ^ 18) + 5662405440 * y ^ 13 * z ^ 17) - 9714872700 * x ^ 14 * y * z ^ 15) + 75171017250 * x ^ 14 * y ^ 2 * z ^ 14) - 101928415500 * x ^ 14 * y ^ 3 * z ^ 13) + 79496356500 * x ^ 14 * y ^ 4 * z ^ 12 + 145124946000 * x ^ 14 * y ^ 5 * z ^ 11 + 12057125400 * x ^ 14 * y ^ 6 * z ^ 10) - 1354968000 * x ^ 14 * y ^ 7 * z ^ 9) + 196238112750 * x ^ 14 * y ^ 8 * z ^ 8 + 34147413000 * x ^ 14 * y ^ 9 * z ^ 7 + 21473437500 * x ^ 14 * y ^ 10 * z ^ 6) - 8402988600 * x ^ 14 * y ^ 11 * z ^ 5) + 16518208500 * x ^ 14 * y ^ 12 * z ^ 4 + 9946422000 * x ^ 14 * y ^ 13 * z ^ 3 + 5621544000 * x ^ 14 * y ^ 14 * z ^ 2 + 333948000 * x ^ 14 * y ^ 15 * z + 368138300 * x ^ 14 * y ^ 16 + 5787622125 * x ^ 14 * z ^ 16) - 3895724970 * y ^ 14 * z ^ 16) + 1565717040 * y ^ 15 * z ^ 15 + 3145999500 * x ^ 16 * y * z ^ 13 + 2069539875 * x ^ 16 * y ^ 2 * z ^ 12 + 13626832500 * x ^ 16 * y ^ 3 * z ^ 11 + 18097850250 * x ^ 16 * y ^ 4 * z ^ 10 + 21615457500 * x ^ 16 * y ^ 5 * z ^ 9) - 33570328500 * x ^ 16 * y ^ 6 * z ^ 8) + 22659021000 * x ^ 16 * y ^ 7 * z ^ 7 + 14079369375 * x ^ 16 * y ^ 8 * z ^ 6 + 2785731750 * x ^ 16 * y ^ 9 * z ^ 5) - 12712117500 * x ^ 16 * y ^ 10 * z ^ 4) - 587628000 * x ^ 16 * y ^ 11 * z ^ 3) - 742703250 * x ^ 16 * y ^ 12 * z ^ 2) + 522877500 * x ^ 16 * y ^ 13 * z) - 693500 * x ^ 16 * y ^ 14) + 2084484375 * x ^ 16 * z ^ 14) - 1589391315 * y ^ 16 * z ^ 14) + 1343955240 * y ^ 17 * z ^ 13 + 3331530000 * x ^ 18 * y * z ^ 11) - 10817570250 * x ^ 18 * y ^ 2 * z ^ 10) - 12456180000 * x ^ 18 * y ^ 3 * z ^ 9) + 6056926875 * x ^ 18 * y ^ 4 * z ^ 8) - 8919679500 * x ^ 18 * y ^ 5 * z ^ 7) + 30806831250 * x ^ 18 * y ^ 6 * z ^ 6 + 2539309500 * x ^ 18 * y ^ 7 * z ^ 5 + 8362423125 * x ^ 18 * y ^ 8 * z ^ 4 + 2216092500 * x ^ 18 * y ^ 9 * z ^ 3) - 2958846000 * x ^ 18 * y ^ 10 * z ^ 2) - 229605000 * x ^ 18 * y ^ 11 * z) + 153548500 * x ^ 18 * y ^ 12 + 2208232125 * x ^ 18 * z ^ 12) - 1330486965 * y ^ 18 * z ^ 12) - 424030140 * y ^ 19 * z ^ 11) + 1953112500 * x ^ 20 * y * z ^ 9 + 2267898750 * x ^ 20 * y ^ 2 * z ^ 8) - 3811050000 * x ^ 20 * y ^ 3 * z ^ 7) - 3666195000 * x ^ 20 * y ^ 4 * z ^ 6) - 2054079000 * x ^ 20 * y ^ 5 * z ^ 5) - 3189487500 * x ^ 20 * y ^ 6 * z ^ 4) + 2598480000 * x ^ 20 * y ^ 7 * z ^ 3) - 269568750 * x ^ 20 * y ^ 8 * z ^ 2) - 240157500 * x ^ 20 * y ^ 9 * z) + 58590500 * x ^ 20 * y ^ 10 + 234130500 * x ^ 20 * z ^ 10 + 571718250 * y ^ 20 * z ^ 10 + 396522540 * y ^ 21 * z ^ 9) - 40297500 * x ^ 22 * y * z ^ 7) + 1609233750 * x ^ 22 * y ^ 2 * z ^ 6 + 744592500 * x ^ 22 * y ^ 3 * z ^ 5) - 524306250 * x ^ 22 * y ^ 4 * z ^ 4) - 342495000 * x ^ 22 * y ^ 5 * z ^ 3) + 676740000 * x ^ 22 * y ^ 6 * z ^ 2) - 13710000 * x ^ 22 * y ^ 7 * z) + 49442500 * x ^ 22 * y ^ 8 + 217839375 * x ^ 22 * z ^ 8) - 36720540 * y ^ 22 * z ^ 8) - 24685560 * y ^ 23 * z ^ 7) - 85151250 * x ^ 24 * y * z ^ 5) + 112050000 * x ^ 24 * y ^ 2 * z ^ 4 + 179268750 * x ^ 24 * y ^ 4 * z ^ 2) - 3982500 * x ^ 24 * y ^ 5 * z) - 14607500 * x ^ 24 * y ^ 6) - 64985625 * x ^ 24 * z ^ 6) - 93184155 * y ^ 24 * z ^ 6) - 17528238 * y ^ 25 * z ^ 5) - 13162500 * x ^ 26 * y * z ^ 3) - 1950000 * x ^ 26 * y ^ 2 * z ^ 2) - 4875000 * x ^ 26 * y ^ 3 * z) - 3737500 * x ^ 26 * y ^ 4) + 6946875 * x ^ 26 * z ^ 4 + 1558260 * y ^ 26 * z ^ 4 + 1654560 * y ^ 27 * z ^ 3) - 37500 * x ^ 28 * y * z) + 12500 * x ^ 28 * y ^ 2) - 18750 * x ^ 28 * z ^ 2) + 341610 * y ^ 28 * z ^ 2 + 32052 * y ^ 29 * z + 12500 * x ^ 30 + 1708 * y ^ 30 + 14348907 * z ^ 30
        end])
chevieset(:G27, :BasicDerivations, function ()
        return function (x, y, z)
                return [[6x, 12 * y ^ 2, 30z + 13 // 3 * x ^ 3 * y], [12y, -24z, (((34 // 3 * x * z - 227 // 9 * x ^ 2 * y ^ 2) - 26 // 3 * y ^ 3) - 50 // 9 * x ^ 4 * y) - 5 // 9 * x ^ 6], [30z, ((((34 // 3 * x * y * z - 227 // 9 * x ^ 2 * y ^ 3) + 26 // 3 * x ^ 3 * z) - 26 // 3 * y ^ 4) - 50 // 9 * x ^ 4 * y ^ 2) - 5 // 9 * x ^ 6 * y, ((((((403 // 27 * x * y ^ 4 - 55 // 3 * y ^ 2 * z) - 3349 // 54 * x ^ 2 * y * z) + 5909 // 324 * x ^ 3 * y ^ 3) - 671 // 54 * x ^ 4 * z) + 395 // 162 * x ^ 5 * y ^ 2) - 5 // 324 * x ^ 7 * y) - 5 // 162 * x ^ 9]]
            end
    end)
chevieset(:G27, :Discriminant, function ()
        return function (x, y, z)
                ((((((((((((((return5832 * x * y ^ 2 * z ^ 2 - 1404 * x * y ^ 7) - 5508 * x ^ 2 * y ^ 4 * z) + 11664 * z ^ 3 + 7776 * x ^ 3 * y * z ^ 2) - 3078 * x ^ 3 * y ^ 6) - 198 * x ^ 4 * y ^ 3 * z) - 1944 * y ^ 5 * z) + 648 * x ^ 5 * z ^ 2) - 3271 * x ^ 5 * y ^ 5) + 954 * x ^ 6 * y ^ 2 * z) - 1094 * x ^ 7 * y ^ 4) + 198 * x ^ 8 * y * z) - 204 * x ^ 9 * y ^ 3) + 18 * x ^ 10 * z) - 20 * x ^ 11 * y ^ 2) - x ^ 13 * y
            end
    end)
chevieset(:G29, :AltPres, [Dict{Symbol, Any}(:gens => [[1], [-4, 2, 4], [3], [4]], :rels => [[[1, 2, 1], [2, 1, 2]], [[2, 4, 2], [4, 2, 4]], [[3, 4, 3], [4, 3, 4]], [[2, 3, 2], [3, 2, 3]], [[1, 3], [3, 1]], [[1, 4], [4, 1]], [[4, 2, 3, 4, 2, 3, 4, 2], [3, 4, 2, 3, 4, 2, 3, 4]]])])
chevieset(:G29, :PrintDiagram, function (indices, title)
        local s
        print(title, " ")
        s = pad("", length(title) - 3)
        print(s, "  ", indices[4], "\n", "     /\"\\\n", s, indices[1], "---", indices[2], "=====", indices[3], " ", IntListToString(indices[[4, 3, 2, 4, 3, 2]]), "==", IntListToString(indices[[3, 2, 4, 3, 2, 4]]), "\n")
    end)
chevieset(:G29, :GeneratingRoots, [[0, 0, 0, -2], [-(E(4)), E(4), 1, 1], [1 - E(4), -1 + E(4), 0, 0], [0, 1 - E(4), -1 + E(4), 0]] // 2)
chevieset(:G29, :EigenvaluesGeneratingReflections, [1 // 2, 1 // 2, 1 // 2, 1 // 2])
chevieset(:G29, :BraidRelations, [[[1, 2, 1], [2, 1, 2]], [[2, 4, 2], [4, 2, 4]], [[3, 4, 3], [4, 3, 4]], [[2, 3, 2, 3], [3, 2, 3, 2]], [[1, 3], [3, 1]], [[1, 4], [4, 1]], [[4, 3, 2, 4, 3, 2], [3, 2, 4, 3, 2, 4]]])
chevieset(:G29, :Size, 7680)
chevieset(:G29, :ReflectionDegrees, [4, 8, 12, 20])
chevieset(:G29, :NrConjugacyClasses, 37)
chevieset(:G29, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3], [2, 3]], [1:3, [1, 2, 4], [1, 3, 4], [1, 3, 9], 2:4], [1:4]]
        return t[s + 1]
    end)
chevieset(:G29, :ClassNames, [".", "1", "12", "23", "31", "234", "341", "123", "243", "124", "3232", "c", "ccc", "124z", "43232", "32321", "12zzz", "3123cc", "cc", "12z", "342342", "432432", "123z", "341z", "323123121", "12zz", "234zz", "234z", "cccc", "31z", "3232z", "1z", "323123121z", "432432z", "z", "zzz", "zz"])
chevieset(:G29, :WordsClassRepresentatives, map((x->begin
                Replace(x, ".", [], "1", [1], "2", [2], "3", [3], "4", [4], "z", "ccccc", "c", [1, 2, 4, 3])
            end), chevieget(:G29, :ClassNames)))
chevieset(:G29, :PowerMaps, [nothing, [1, 1, 3, 11, 1, 21, 3, 3, 22, 5, 1, 19, 19, 5, 11, 11, 26, 31, 29, 26, 11, 11, 26, 26, 1, 3, 21, 22, 29, 37, 37, 37, 37, 11, 37, 37, 1], [1, 2, 1, 4, 5, 9, 2, 25, 6, 10, 11, 13, 12, 14, 15, 16, 35, 18, 19, 36, 22, 21, 32, 33, 25, 37, 28, 27, 29, 30, 31, 33, 32, 34, 36, 35, 37], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 36, 14, 15, 16, 17, 18, 37, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 30, 31, 32, 33, 34, 35, 36, 37], nothing, [1, 2, 3, 4, 5, 9, 7, 8, 6, 10, 11, 13, 12, 14, 15, 16, 20, 18, 19, 17, 22, 21, 24, 23, 25, 26, 28, 27, 29, 30, 31, 33, 32, 34, 36, 35, 37], nothing, nothing, nothing, [1, 2, 3, 4, 5, 9, 7, 8, 6, 10, 11, 13, 12, 14, 15, 16, 20, 18, 19, 17, 22, 21, 24, 23, 25, 26, 28, 27, 29, 30, 31, 33, 32, 34, 36, 35, 37], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], nothing, [1, 2, 3, 4, 5, 9, 7, 8, 6, 10, 11, 13, 12, 14, 15, 16, 20, 18, 19, 17, 22, 21, 24, 23, 25, 26, 28, 27, 29, 30, 31, 33, 32, 34, 36, 35, 37]])
chevieset(:G29, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G29, :WordsClassRepresentatives), :classnames => chevieget(:G29, :ClassNames), :classparams => chevieget(:G29, :ClassNames), :orders => [1, 2, 3, 4, 2, 8, 6, 6, 8, 4, 2, 20, 20, 4, 4, 4, 12, 8, 10, 12, 4, 4, 12, 12, 2, 6, 8, 8, 5, 4, 4, 4, 4, 4, 4, 4, 2], :classes => [1, 40, 320, 60, 120, 240, 320, 320, 240, 480, 30, 384, 384, 480, 240, 240, 320, 480, 384, 320, 60, 60, 320, 320, 40, 320, 240, 240, 384, 120, 30, 40, 40, 60, 1, 1, 1]))
chevieset(:G29, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 40], [4, 4], [4, 24], [4, 1], [4, 21], [4, 3], [4, 23], [5, 8], [5, 16], [6, 12], [6, 10, 1], [6, 10, 2], [6, 10, 3], [6, 10, 4], [10, 18], [10, 2], [10, 14], [10, 6], [15, 4, 1], [15, 4, 2], [15, 12, 1], [15, 12, 2], [16, 15], [16, 5], [16, 13], [16, 3], [20, 6], [20, 10], [20, 9], [20, 5], [20, 11], [20, 7], [24, 6], [24, 9], [24, 7], [30, 8]], :opdam => #= none:17 =# @perm_str("(24,26)(25,27)"), :extRefl => [1, 5, 14, 8, 2])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G29, :CycPolSchurElements, [[1, 0, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 6, 8, 10, 12, 20], [1, -40, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 6, 8, 10, 12, 20], [2, -1, 2, 2, 2, 2, 3, 4, 5, 6, 8, 10], [2, -21, 2, 2, 2, 2, 3, 4, 5, 6, 8, 10], [-2 * E(4) + 2, -1, 2, 2, 3, 4, 4, 1 // 4, 1 // 4, 5, 3 // 8, 7 // 8, 7 // 12, 11 // 12, 1 // 20, 9 // 20, 13 // 20, 17 // 20], [2 * E(4) + 2, -21, 2, 2, 3, 4, 4, 3 // 4, 3 // 4, 5, 1 // 8, 5 // 8, 1 // 12, 5 // 12, 3 // 20, 7 // 20, 11 // 20, 19 // 20], [2 * E(4) + 2, -1, 2, 2, 3, 4, 4, 3 // 4, 3 // 4, 5, 1 // 8, 5 // 8, 1 // 12, 5 // 12, 3 // 20, 7 // 20, 11 // 20, 19 // 20], [-2 * E(4) + 2, -21, 2, 2, 3, 4, 4, 1 // 4, 1 // 4, 5, 3 // 8, 7 // 8, 7 // 12, 11 // 12, 1 // 20, 9 // 20, 13 // 20, 17 // 20], [2, -4, 2, 2, 2, 2, 3, 4, 4, 4, 4, 6], [2, -12, 2, 2, 2, 2, 3, 4, 4, 4, 4, 6], [4, -6, 2, 2, 2, 2, 4, 4, 5], [5, -6, 2, 2, 2, 2, 4, 4, 4, 4], [5, -6, 2, 2, 2, 2, 4, 4, 4, 4], [-20, -6, 2, 2, 2, 2, 3 // 4, 3 // 4, 3 // 4, 3 // 4, 1 // 20, 9 // 20, 13 // 20, 17 // 20], [-20, -6, 2, 2, 2, 2, 1 // 4, 1 // 4, 1 // 4, 1 // 4, 3 // 20, 7 // 20, 11 // 20, 19 // 20], [1, -18, 2, 2, 2, 2, 3, 4, 4, 4, 4, 6, 12], [1, -2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 6, 12], [2, -12, 2, 2, 2, 2, 3, 4, 4, 6, 8], [2, -4, 2, 2, 2, 2, 3, 4, 4, 6, 8], [1, -4, 2, 2, 2, 2, 4, 4, 4, 4, 8], [2, -4, 2, 2, 2, 2, 4, 4, 4, 4, 12], [1, -12, 2, 2, 2, 2, 4, 4, 4, 4, 8], [2, -12, 2, 2, 2, 2, 4, 4, 4, 4, 12], [2, -13, 2, 2, 2, 2, 3, 5, 6, 10], [2, -3, 2, 2, 2, 2, 3, 5, 6, 10], [2, -13, 2, 2, 2, 2, 3, 5, 6, 10], [2, -3, 2, 2, 2, 2, 3, 5, 6, 10], [2, -5, 2, 2, 2, 2, 3, 4, 6, 8], [2, -9, 2, 2, 2, 2, 3, 4, 6, 8], [-2 * E(4) + 2, -9, 2, 2, 3, 4, 4, 3 // 4, 3 // 4, 3 // 8, 7 // 8, 1 // 12, 5 // 12], [2 * E(4) + 2, -5, 2, 2, 3, 4, 4, 1 // 4, 1 // 4, 1 // 8, 5 // 8, 7 // 12, 11 // 12], [2 * E(4) + 2, -9, 2, 2, 3, 4, 4, 1 // 4, 1 // 4, 1 // 8, 5 // 8, 7 // 12, 11 // 12], [-2 * E(4) + 2, -5, 2, 2, 3, 4, 4, 3 // 4, 3 // 4, 3 // 8, 7 // 8, 1 // 12, 5 // 12], [20, -6, 4, 4, 4, 4, 10], [4, -6, 2, 2, 4, 5, 8], [4, -6, 2, 2, 4, 5, 8], [4, -6, 2, 2, 2, 2, 4, 4, 10]])
chevieset(:G29, :sparseFakeDegrees, [[1, 0], [1, 40], [1, 4, 1, 8, 1, 12, 1, 16], [1, 24, 1, 28, 1, 32, 1, 36], [1, 1, 1, 9, 1, 13, 1, 17], [1, 21, 1, 29, 1, 33, 1, 37], [1, 3, 1, 7, 1, 11, 1, 19], [1, 23, 1, 27, 1, 31, 1, 39], [1, 8, 1, 12, 1, 16, 1, 20, 1, 24], [1, 16, 1, 20, 1, 24, 1, 28, 1, 32], [1, 12, 1, 16, 2, 20, 1, 24, 1, 28], [1, 10, 1, 14, 1, 18, 1, 22, 1, 26, 1, 30], [1, 10, 1, 14, 1, 18, 1, 22, 1, 26, 1, 30], [1, 10, 1, 14, 1, 18, 1, 22, 1, 26, 1, 30], [1, 10, 1, 14, 1, 18, 1, 22, 1, 26, 1, 30], [1, 18, 2, 22, 2, 26, 2, 30, 2, 34, 1, 38], [1, 2, 2, 6, 2, 10, 2, 14, 2, 18, 1, 22], [1, 14, 2, 18, 2, 22, 2, 26, 2, 30, 1, 34], [1, 6, 2, 10, 2, 14, 2, 18, 2, 22, 1, 26], [1, 4, 2, 8, 3, 12, 3, 16, 3, 20, 2, 24, 1, 28], [1, 4, 2, 8, 3, 12, 3, 16, 3, 20, 2, 24, 1, 28], [1, 12, 2, 16, 3, 20, 3, 24, 3, 28, 2, 32, 1, 36], [1, 12, 2, 16, 3, 20, 3, 24, 3, 28, 2, 32, 1, 36], [2, 15, 3, 19, 3, 23, 3, 27, 3, 31, 2, 35], [2, 5, 3, 9, 3, 13, 3, 17, 3, 21, 2, 25], [1, 13, 2, 17, 3, 21, 4, 25, 3, 29, 2, 33, 1, 37], [1, 3, 2, 7, 3, 11, 4, 15, 3, 19, 2, 23, 1, 27], [1, 6, 3, 10, 4, 14, 4, 18, 4, 22, 3, 26, 1, 30], [1, 10, 3, 14, 4, 18, 4, 22, 4, 26, 3, 30, 1, 34], [1, 9, 2, 13, 4, 17, 4, 21, 4, 25, 3, 29, 2, 33], [1, 5, 2, 9, 4, 13, 4, 17, 4, 21, 3, 25, 2, 29], [2, 11, 3, 15, 4, 19, 4, 23, 4, 27, 2, 31, 1, 35], [2, 7, 3, 11, 4, 15, 4, 19, 4, 23, 2, 27, 1, 31], [1, 6, 2, 10, 4, 14, 5, 18, 5, 22, 4, 26, 2, 30, 1, 34], [2, 9, 4, 13, 5, 17, 5, 21, 4, 25, 3, 29, 1, 33], [1, 7, 3, 11, 4, 15, 5, 19, 5, 23, 4, 27, 2, 31], [2, 8, 4, 12, 6, 16, 6, 20, 6, 24, 4, 28, 2, 32]])
chevieset(:G29, :HeckeCharTable, function (para, root)
        local tbl, q, r, p, f1, f3, f5, f9, f11, f12, f14, f17, f18, f22, f23, f24, f28, f30, f34, f35, f37, adj
        q = -((para[1])[1]) // (para[1])[2]
        r = (para[1])[1]
        p = (para[1])[2]
        tbl = Dict{Symbol, Any}(:identifier => "H(G29)", :size => 7680, :order => 7680, :powermap => chevieget(:G29, :PowerMaps))
        Inherit(tbl, chevieget(:G29, :ClassInfo))
        adj = function (p, x)
                return map(function (x, y)
                            return x * y
                        end, x, map((x->begin
                                    (-p) ^ length(x)
                                end), tbl[:classtext]))
            end
        f1 = (r->begin
                    map((x->begin
                                r ^ length(x)
                            end), tbl[:classtext])
                end)
        f3 = function (r, p)
                local q
                q = -r // p
                return adj(p, [4, -1 + 3q, -q + 2 * q ^ 2, -2q + 2 * q ^ 2, -2q + 2 * q ^ 2, -(q ^ 2) + q ^ 3, -2 * q ^ 2 + q ^ 3, -2 * q ^ 2 + q ^ 3, -(q ^ 2) + q ^ 3, -(q ^ 2) + q ^ 3, 2 * q ^ 2 + 2 * q ^ 4, -(q ^ 3), -(q ^ 9), -(q ^ 17) + q ^ 18, q ^ 4 + q ^ 5, q ^ 3 + q ^ 5, -(q ^ 46) + 2 * q ^ 47, 0, -(q ^ 6), -(q ^ 16) + 2 * q ^ 17, -(q ^ 4) + q ^ 6, -(q ^ 4) + q ^ 6, -2 * q ^ 17 + q ^ 18, -2 * q ^ 17 + q ^ 18, q ^ 6 + q ^ 9, -(q ^ 31) + 2 * q ^ 32, -(q ^ 32) + q ^ 33, -(q ^ 17) + q ^ 18, -(q ^ 12), -2 * q ^ 16 + 2 * q ^ 17, 2 * q ^ 17 + 2 * q ^ 19, -(q ^ 15) + 3 * q ^ 16, q ^ 21 + q ^ 24, -(q ^ 19) + q ^ 21, 4 * q ^ 15, 4 * q ^ 45, 4 * q ^ 30])
            end
        f5 = function (r, p, I)
                local q
                q = -r // p
                return adj(p, [4, -1 + 3q, -q + 2 * q ^ 2, 2 * q ^ 2, -2q + 2 * q ^ 2, (I - 1) * q + q ^ 2 + q ^ 3, -2 * q ^ 2 + q ^ 3, q ^ 3, -I * q ^ 2 + q ^ 3, -(q ^ 2) + q ^ 3, -2 * q ^ 2 + 2 * q ^ 4, -I * q ^ 3, I * q ^ 9, -I * q ^ 17 + I * q ^ 18, ((I - 1) * q ^ 3 - I * q ^ 4) + q ^ 5, -(q ^ 3) + q ^ 5, I * q ^ 46 - 2 * I * q ^ 47, 0, q ^ 6, -I * q ^ 16 + 2 * I * q ^ 17, -2 * I * q ^ 2 + (2I - 2) * q ^ 3 + 3 * q ^ 4 + (-2I - 2) * q ^ 5 + q ^ 6, (2I - 1) * q ^ 4 + q ^ 6, I * q ^ 18, -2 * I * q ^ 17 + I * q ^ 18, -3 * q ^ 6 + q ^ 9, q ^ 31 - 2 * q ^ 32, ((-I + 1) * q ^ 31 - q ^ 32) - q ^ 33, (-I - 1) * q ^ 16 + I * q ^ 17 + I * q ^ 18, -(q ^ 12), -2 * I * q ^ 16 + 2 * I * q ^ 17, -2 * I * q ^ 17 + 2 * I * q ^ 19, -I * q ^ 15 + 3 * I * q ^ 16, -3 * I * q ^ 21 + I * q ^ 24, (-I - 2) * q ^ 19 + I * q ^ 21, 4 * I * q ^ 15, -4 * I * q ^ 45, -4 * q ^ 30])
            end
        f9 = function (r, p)
                local q
                q = -r // p
                return adj(p, [5, -2 + 3q, -2q + q ^ 2, (1 - 2q) + 2 * q ^ 2, (1 - 2q) + 2 * q ^ 2, -(q ^ 2), (q - q ^ 2) + q ^ 3, (q - q ^ 2) + q ^ 3, -(q ^ 2), -(q ^ 2), 1 + 2 * q ^ 2 + 2 * q ^ 4, 0, 0, -(q ^ 14), (q ^ 2 - q ^ 3) + q ^ 4, q ^ 5, -2 * q ^ 37 + q ^ 38, q ^ 6, 0, -2 * q ^ 13 + q ^ 14, 2 * q ^ 3 - q ^ 4, 2 * q ^ 3 - q ^ 4, (q ^ 13 - q ^ 14) + q ^ 15, (q ^ 13 - q ^ 14) + q ^ 15, -2 * q ^ 3 + 2 * q ^ 6 + q ^ 9, -2 * q ^ 25 + q ^ 26, -(q ^ 26), -(q ^ 14), 0, (q ^ 12 - 2 * q ^ 13) + 2 * q ^ 14, q ^ 12 + 2 * q ^ 14 + 2 * q ^ 16, -2 * q ^ 12 + 3 * q ^ 13, -2 * q ^ 15 + 2 * q ^ 18 + q ^ 21, 2 * q ^ 15 - q ^ 16, 5 * q ^ 12, 5 * q ^ 36, 5 * q ^ 24])
            end
        f11 = function (r, p)
                local q
                q = -r // p
                return adj(p, [6, -3 + 3q, (1 - 2q) + q ^ 2, (1 - 4q) + q ^ 2, (1 - 4q) + q ^ 2, q - q ^ 2, 2q - 2 * q ^ 2, 2q - 2 * q ^ 2, q - q ^ 2, q - q ^ 2, 1 + 4 * q ^ 2 + q ^ 4, q ^ 2, q ^ 6, q ^ 11 - q ^ 12, -q + q ^ 4, -(q ^ 2) + q ^ 3, (q ^ 30 - 2 * q ^ 31) + q ^ 32, -(q ^ 5) - q ^ 7, q ^ 4, (q ^ 10 - 2 * q ^ 11) + q ^ 12, -(q ^ 2) - q ^ 4, -(q ^ 2) - q ^ 4, 2 * q ^ 11 - 2 * q ^ 12, 2 * q ^ 11 - 2 * q ^ 12, -(q ^ 3) + q ^ 6, (q ^ 20 - 2 * q ^ 21) + q ^ 22, q ^ 21 - q ^ 22, q ^ 11 - q ^ 12, q ^ 8, (q ^ 10 - 4 * q ^ 11) + q ^ 12, q ^ 10 + 4 * q ^ 12 + q ^ 14, -3 * q ^ 10 + 3 * q ^ 11, -(q ^ 13) + q ^ 16, -(q ^ 12) - q ^ 14, 6 * q ^ 10, 6 * q ^ 30, 6 * q ^ 20])
            end
        f12 = function (r, p)
                local q
                q = -r // p
                return adj(p, [6, -3 + 3q, (1 - 2q) + q ^ 2, -2q, (2 - 2q) + 2 * q ^ 2, ((1 - q) + q ^ 2) - q ^ 3, ((-1 + q) - q ^ 2) + q ^ 3, 0, 0, q + q ^ 3, -2 * q ^ 2, -(q ^ 2), -(q ^ 6), -(q ^ 11) - q ^ 13, q ^ 2 - q ^ 3, q ^ 2 - q ^ 3, (-(q ^ 30) + 2 * q ^ 31) - q ^ 32, 0, q ^ 4, (-(q ^ 10) + 2 * q ^ 11) - q ^ 12, (((((1 - 2q) + 3 * q ^ 2) - 2 * q ^ 3) + 3 * q ^ 4) - 2 * q ^ 5) + q ^ 6, 2 * q ^ 3, 0, ((q ^ 10 - q ^ 11) + q ^ 12) - q ^ 13, -3 * q ^ 4 + 3 * q ^ 5, (q ^ 20 - 2 * q ^ 21) + q ^ 22, ((q ^ 20 - q ^ 21) + q ^ 22) - q ^ 23, ((-(q ^ 10) + q ^ 11) - q ^ 12) + q ^ 13, q ^ 8, (-2 * q ^ 10 + 2 * q ^ 11) - 2 * q ^ 12, 2 * q ^ 12, 3 * q ^ 10 - 3 * q ^ 11, 3 * q ^ 14 - 3 * q ^ 15, -2 * q ^ 13, -6 * q ^ 10, -6 * q ^ 30, 6 * q ^ 20])
            end
        f14 = function (r, p, I)
                local q
                q = -r // p
                return adj(p, [6, -3 + 3q, (1 - 2q) + q ^ 2, 1 + q ^ 2, (1 - 4q) + q ^ 2, (I - 2) * q + (I + 2) * q ^ 2, 2q - 2 * q ^ 2, 0, -I * q - I * q ^ 2, q - q ^ 2, (1 - 4 * q ^ 2) + q ^ 4, -(q ^ 2), -(q ^ 6), -(q ^ 11) + q ^ 12, (-I * q + (I + 1) * q ^ 2 + (I - 1) * q ^ 3) - I * q ^ 4, q ^ 2 - q ^ 3, (-(q ^ 30) + 2 * q ^ 31) - q ^ 32, -I * q ^ 7 + I * q ^ 5, q ^ 4, (-(q ^ 10) + 2 * q ^ 11) - q ^ 12, (((2I - 2) * q + (-2I + 3) * q ^ 2) - 4 * q ^ 3) + (2I + 3) * q ^ 4 + (-2I - 2) * q ^ 5, (-2I - 1) * q ^ 2 + (2I - 1) * q ^ 4, 0, -2 * q ^ 11 + 2 * q ^ 12, 3 * q ^ 3 - 3 * q ^ 6, (q ^ 20 - 2 * q ^ 21) + q ^ 22, (I - 2) * q ^ 21 + (I + 2) * q ^ 22, (-I + 2) * q ^ 11 + (-I - 2) * q ^ 12, q ^ 8, (-(q ^ 10) + 4 * q ^ 11) - q ^ 12, (-(q ^ 10) + 4 * q ^ 12) - q ^ 14, 3 * q ^ 10 - 3 * q ^ 11, -3 * q ^ 13 + 3 * q ^ 16, (2I + 1) * q ^ 12 + (-2I + 1) * q ^ 14, -6 * q ^ 10, -6 * q ^ 30, 6 * q ^ 20])
            end
        f17 = function (r, p)
                local q
                q = -r // p
                return adj(p, [10, -7 + 3q, 4 - 3q, 4 - 2q, (5 - 4q) + q ^ 2, (-1 - q) + 2 * q ^ 2, (-3 + 3q) - q ^ 2, -2 + q, -1 + q, -2 + 2q, 4 - 2 * q ^ 2, 0, 0, 2 * q ^ 6 - 2 * q ^ 7, (-1 - q) + 2 * q ^ 2, -2 + 2 * q ^ 2, -4 * q ^ 18 + 3 * q ^ 19, 0, 0, -4 * q ^ 6 + 3 * q ^ 7, ((1 - 4q) + 5 * q ^ 2) - 4 * q ^ 3, 1 - 3 * q ^ 2, 2 * q ^ 6 - q ^ 7, (3 * q ^ 6 - 3 * q ^ 7) + q ^ 8, (-2 + q ^ 3) - 3 * q ^ 4, 4 * q ^ 12 - 3 * q ^ 13, (-(q ^ 12) - q ^ 13) + 2 * q ^ 14, (q ^ 6 + q ^ 7) - 2 * q ^ 8, 0, (-5 * q ^ 6 + 4 * q ^ 7) - q ^ 8, -4 * q ^ 6 + 2 * q ^ 8, 7 * q ^ 6 - 3 * q ^ 7, (2 * q ^ 6 - q ^ 9) + 3 * q ^ 10, -(q ^ 6) + 3 * q ^ 8, -10 * q ^ 6, -10 * q ^ 18, 10 * q ^ 12])
            end
        f18 = function (r, p)
                local q
                q = -r // p
                return adj(p, [10, -6 + 4q, (3 - 3q) + q ^ 2, 2 - 4q, (3 - 6q) + q ^ 2, q ^ 2 - q ^ 3, (-1 + 4q) - 2 * q ^ 2, 2q - q ^ 2, -1 + q, (-1 + 2q) - q ^ 2, 2, 0, 0, (q ^ 8 - 2 * q ^ 9) + q ^ 10, ((-1 - q) + q ^ 2) - q ^ 3, q ^ 2 + q ^ 3, (-3 * q ^ 24 + 3 * q ^ 25) - q ^ 26, 0, 0, (-3 * q ^ 8 + 3 * q ^ 9) - q ^ 10, (((((2 - 2q) + 2 * q ^ 2) - 2 * q ^ 3) + 3 * q ^ 4) - 2 * q ^ 5) + q ^ 6, (1 - q ^ 2) + 2 * q ^ 3, -2 * q ^ 9 + q ^ 10, (q ^ 8 - 4 * q ^ 9) + 2 * q ^ 10, (2 * q ^ 3 - 3 * q ^ 4) - q ^ 6, (3 * q ^ 16 - 3 * q ^ 17) + q ^ 18, q ^ 18 - q ^ 19, -(q ^ 10) + q ^ 11, 0, (-3 * q ^ 8 + 6 * q ^ 9) - q ^ 10, -2 * q ^ 8, 6 * q ^ 8 - 4 * q ^ 9, -2 * q ^ 11 + 3 * q ^ 12 + q ^ 14, (-(q ^ 8) + q ^ 10) - 2 * q ^ 11, -10 * q ^ 8, -10 * q ^ 24, 10 * q ^ 16])
            end
        f22 = function (r, p)
                local q
                q = -r // p
                return adj(p, [15, -6 + 9q, (1 - 5q) + 4 * q ^ 2, -4q + 3 * q ^ 2, (3 - 6q) + 6 * q ^ 2, ((1 - 3q) + 2 * q ^ 2) - q ^ 3, ((-1 + 2q) - 4 * q ^ 2) + 3 * q ^ 3, -(q ^ 2) + q ^ 3, -(q ^ 2), (q - 2 * q ^ 2) + 2 * q ^ 3, -4 * q ^ 2 + 3 * q ^ 4, 0, 0, (q ^ 13 - 2 * q ^ 14) + 2 * q ^ 15, (q ^ 2 - 3 * q ^ 3) + q ^ 4, (q ^ 2 - 3 * q ^ 3) + q ^ 5, (q ^ 36 - 5 * q ^ 37) + 4 * q ^ 38, -(q ^ 8), 0, (q ^ 12 - 5 * q ^ 13) + 4 * q ^ 14, (((((1 - 2q) + 3 * q ^ 2) - 6 * q ^ 3) + 8 * q ^ 4) - 6 * q ^ 5) + q ^ 6, 2 * q ^ 3 - 3 * q ^ 4, -(q ^ 14) + q ^ 15, ((-(q ^ 12) + 2 * q ^ 13) - 4 * q ^ 14) + 3 * q ^ 15, ((-3 * q ^ 4 + 6 * q ^ 5) - q ^ 6) + q ^ 9, (q ^ 24 - 5 * q ^ 25) + 4 * q ^ 26, ((q ^ 24 - 3 * q ^ 25) + 2 * q ^ 26) - q ^ 27, ((q ^ 12 - 3 * q ^ 13) + 2 * q ^ 14) - q ^ 15, 0, (3 * q ^ 12 - 6 * q ^ 13) + 6 * q ^ 14, -4 * q ^ 14 + 3 * q ^ 16, -6 * q ^ 12 + 9 * q ^ 13, ((-3 * q ^ 16 + 6 * q ^ 17) - q ^ 18) + q ^ 21, 2 * q ^ 15 - 3 * q ^ 16, 15 * q ^ 12, 15 * q ^ 36, 15 * q ^ 24])
            end
        f23 = function (r, p)
                local q
                q = -r // p
                return adj(p, [15, -6 + 9q, (1 - 5q) + 4 * q ^ 2, (1 - 2q) + 4 * q ^ 2, (2 - 8q) + 5 * q ^ 2, (1 - 3q) + 3 * q ^ 2, (3q - 5 * q ^ 2) + 2 * q ^ 3, -(q ^ 2) + q ^ 3, q ^ 3, (q - 3 * q ^ 2) + q ^ 3, (1 - 6 * q ^ 2) + 4 * q ^ 4, 0, 0, (q ^ 13 - 3 * q ^ 14) + q ^ 15, (2 * q ^ 2 - 4 * q ^ 3) + q ^ 5, (q ^ 2 - 3 * q ^ 3) + q ^ 5, (q ^ 36 - 5 * q ^ 37) + 4 * q ^ 38, -(q ^ 6), 0, (q ^ 12 - 5 * q ^ 13) + 4 * q ^ 14, (((((1 - 2q) + 3 * q ^ 2) - 4 * q ^ 3) + 9 * q ^ 4) - 6 * q ^ 5) + 2 * q ^ 6, (4 * q ^ 3 - 2 * q ^ 4) + q ^ 6, -(q ^ 14) + q ^ 15, (3 * q ^ 13 - 5 * q ^ 14) + 2 * q ^ 15, ((3 * q ^ 3 + 3 * q ^ 5) - 4 * q ^ 6) + q ^ 9, (q ^ 24 - 5 * q ^ 25) + 4 * q ^ 26, (q ^ 24 - 3 * q ^ 25) + 3 * q ^ 26, (q ^ 12 - 3 * q ^ 13) + 3 * q ^ 14, 0, (2 * q ^ 12 - 8 * q ^ 13) + 5 * q ^ 14, (q ^ 12 - 6 * q ^ 14) + 4 * q ^ 16, -6 * q ^ 12 + 9 * q ^ 13, ((3 * q ^ 15 + 3 * q ^ 17) - 4 * q ^ 18) + q ^ 21, (4 * q ^ 15 - 2 * q ^ 16) + q ^ 18, 15 * q ^ 12, 15 * q ^ 36, 15 * q ^ 24])
            end
        f24 = function (x, y, sgn)
                local v
                v = sgn * GetRoot(x * y, 2)
                return [16, 6x + 10y, 5 * x * y + x ^ 2 + 5 * y ^ 2, 4 * x * y + 4 * y ^ 2, 8 * x * y + 2 * x ^ 2 + 6 * y ^ 2, (-2 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3, 5 * x * y ^ 2 + 3 * x ^ 2 * y + 3 * y ^ 3, 2 * x * y ^ 2 + y ^ 3, x * y ^ 2 + y ^ 3, 3 * x * y ^ 2 + x ^ 2 * y + 2 * y ^ 3, -4 * x ^ 2 * y ^ 2 + 4 * y ^ 4, -v * x * y ^ 2, -v * x ^ 4 * y ^ 7, (-2 * v * x ^ 7 * y ^ 15 - 3 * v * x ^ 8 * y ^ 14) - v * x ^ 9 * y ^ 13, ((-x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + y ^ 5, (-2 * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + y ^ 5, (-5 * v * x ^ 22 * y ^ 39 - 5 * v * x ^ 23 * y ^ 38) - v * x ^ 24 * y ^ 37, 0, x ^ 3 * y ^ 5, (-5 * v * x ^ 7 * y ^ 14 - 5 * v * x ^ 8 * y ^ 13) - v * x ^ 9 * y ^ 12, 6 * x * y ^ 5 + 8 * x ^ 2 * y ^ 4 + 6 * x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + x ^ 6 + 2 * y ^ 6, (-3 * x ^ 2 * y ^ 4 - 2 * x ^ 3 * y ^ 3) + y ^ 6, -v * x ^ 7 * y ^ 15 - 2 * v * x ^ 8 * y ^ 14, (-3 * v * x ^ 7 * y ^ 15 - 5 * v * x ^ 8 * y ^ 14) - 3 * v * x ^ 9 * y ^ 13, 5 * x ^ 3 * y ^ 6 + 3 * x ^ 4 * y ^ 5 + 3 * x ^ 5 * y ^ 4 + y ^ 9, 5 * x ^ 15 * y ^ 27 + 5 * x ^ 16 * y ^ 26 + x ^ 17 * y ^ 25, (-2 * x ^ 16 * y ^ 27 - 3 * x ^ 17 * y ^ 26) - x ^ 18 * y ^ 25, 2 * v * x ^ 8 * y ^ 14 + 3 * v * x ^ 9 * y ^ 13 + v * x ^ 10 * y ^ 12, x ^ 6 * y ^ 10, (-6 * v * x ^ 7 * y ^ 14 - 8 * v * x ^ 8 * y ^ 13) - 2 * v * x ^ 9 * y ^ 12, -4 * v * x ^ 7 * y ^ 16 + 4 * v * x ^ 9 * y ^ 14, -10 * v * x ^ 7 * y ^ 13 - 6 * v * x ^ 8 * y ^ 12, ((-v * x ^ 7 * y ^ 21 - 5 * v * x ^ 10 * y ^ 18) - 3 * v * x ^ 11 * y ^ 17) - 3 * v * x ^ 12 * y ^ 16, -v * x ^ 7 * y ^ 18 + 3 * v * x ^ 9 * y ^ 16 + 2 * v * x ^ 10 * y ^ 15, -16 * v * x ^ 7 * y ^ 12, -16 * v * x ^ 22 * y ^ 37, 16 * x ^ 15 * y ^ 25]
            end
        f28 = function (r, p)
                local q
                q = -r // p
                return adj(p, [20, -9 + 11q, (2 - 7q) + 4 * q ^ 2, (2 - 6q) + 4 * q ^ 2, (4 - 10q) + 6 * q ^ 2, ((1 - 2q) + 2 * q ^ 2) - q ^ 3, ((-1 + 4q) - 6 * q ^ 2) + 2 * q ^ 3, (q - 3 * q ^ 2) + q ^ 3, q - q ^ 2, (2q - 3 * q ^ 2) + q ^ 3, (2 - 2 * q ^ 2) + 4 * q ^ 4, 0, 0, (-2 * q ^ 12 + 3 * q ^ 13) - q ^ 14, ((-q + 2 * q ^ 2) - 4 * q ^ 3) + q ^ 4, (2 * q ^ 2 - q ^ 3) + q ^ 5, (-2 * q ^ 33 + 7 * q ^ 34) - 4 * q ^ 35, 0, 0, (-2 * q ^ 11 + 7 * q ^ 12) - 4 * q ^ 13, (((((1 - 2q) + 2 * q ^ 2) - 4 * q ^ 3) + 8 * q ^ 4) - 6 * q ^ 5) + q ^ 6, (-(q ^ 2) + 4 * q ^ 3) - 3 * q ^ 4, (-(q ^ 12) + 3 * q ^ 13) - q ^ 14, ((q ^ 11 - 4 * q ^ 12) + 6 * q ^ 13) - 2 * q ^ 14, (q ^ 3 - 3 * q ^ 4) + 3 * q ^ 5 + q ^ 9, (2 * q ^ 22 - 7 * q ^ 23) + 4 * q ^ 24, ((q ^ 22 - 2 * q ^ 23) + 2 * q ^ 24) - q ^ 25, ((-(q ^ 11) + 2 * q ^ 12) - 2 * q ^ 13) + q ^ 14, 0, (-4 * q ^ 11 + 10 * q ^ 12) - 6 * q ^ 13, (-2 * q ^ 11 + 2 * q ^ 13) - 4 * q ^ 15, 9 * q ^ 11 - 11 * q ^ 12, ((-(q ^ 14) + 3 * q ^ 15) - 3 * q ^ 16) - q ^ 20, (q ^ 13 - 4 * q ^ 14) + 3 * q ^ 15, -20 * q ^ 11, -20 * q ^ 33, 20 * q ^ 22])
            end
        f30 = function (r, p, I)
                local q
                q = -r // p
                return adj(p, [20, -11 + 9q, (4 - 7q) + 2 * q ^ 2, (4 - 4q) + 2 * q ^ 2, (6 - 10q) + 4 * q ^ 2, (1 + (I - 3) * q + 4 * q ^ 2) - q ^ 3, ((-2 + 6q) - 4 * q ^ 2) + q ^ 3, (-1 + q) - q ^ 2, q - I * q ^ 2, (-1 + 3q) - 2 * q ^ 2, (4 - 6 * q ^ 2) + 2 * q ^ 4, 0, 0, (-I * q ^ 9 + 3 * I * q ^ 10) - 2 * I * q ^ 11, (-q + 4 * q ^ 2 + (I - 3) * q ^ 3) - I * q ^ 4, (-1 + 3 * q ^ 2) - 2 * q ^ 3, (-4 * I * q ^ 27 + 7 * I * q ^ 28) - 2 * I * q ^ 29, 0, 0, (4 * I * q ^ 9 - 7 * I * q ^ 10) + 2 * I * q ^ 11, (1 - 6q) + (-2I + 8) * q ^ 2 + (2I - 6) * q ^ 3 + 6 * q ^ 4 + (-2I - 4) * q ^ 5 + q ^ 6, -3 * q ^ 2 + 4 * q ^ 3 + (2I - 1) * q ^ 4, (-I * q ^ 9 + I * q ^ 10) - I * q ^ 11, ((-2 * I * q ^ 9 + 6 * I * q ^ 10) - 4 * I * q ^ 11) + I * q ^ 12, (((-1 + 4 * q ^ 3) - 3 * q ^ 4) + 3 * q ^ 5) - q ^ 6, (-4 * q ^ 18 + 7 * q ^ 19) - 2 * q ^ 20, ((-(q ^ 18) + (-I + 3) * q ^ 19) - 4 * q ^ 20) + q ^ 21, (I * q ^ 9 + (-3I - 1) * q ^ 10 + 4 * I * q ^ 11) - I * q ^ 12, 0, (6 * I * q ^ 9 - 10 * I * q ^ 10) + 4 * I * q ^ 11, (4 * I * q ^ 9 - 6 * I * q ^ 11) + 2 * I * q ^ 13, -11 * I * q ^ 9 + 9 * I * q ^ 10, (((-I * q ^ 9 + 4 * I * q ^ 12) - 3 * I * q ^ 13) + 3 * I * q ^ 14) - I * q ^ 15, -3 * I * q ^ 11 + 4 * I * q ^ 12 + (-I - 2) * q ^ 13, 20 * I * q ^ 9, -20 * I * q ^ 27, -20 * q ^ 18])
            end
        f34 = function (r, p)
                local q
                q = -r // p
                return adj(p, [24, -12 + 12q, (4 - 8q) + 4 * q ^ 2, (2 - 4q) + 2 * q ^ 2, (6 - 12q) + 6 * q ^ 2, ((2 - 6q) + 6 * q ^ 2) - 2 * q ^ 3, ((-2 + 6q) - 6 * q ^ 2) + 2 * q ^ 3, 0, 0, ((-1 + 3q) - 3 * q ^ 2) + q ^ 3, (2 - 12 * q ^ 2) + 2 * q ^ 4, q ^ 2, q ^ 6, ((q ^ 10 - 3 * q ^ 11) + 3 * q ^ 12) - q ^ 13, 4 * q ^ 2 - 4 * q ^ 3, 4 * q ^ 2 - 4 * q ^ 3, (-4 * q ^ 30 + 8 * q ^ 31) - 4 * q ^ 32, 0, -(q ^ 4), (-4 * q ^ 10 + 8 * q ^ 11) - 4 * q ^ 12, (((((2 - 8q) + 12 * q ^ 2) - 12 * q ^ 3) + 12 * q ^ 4) - 8 * q ^ 5) + 2 * q ^ 6, (-2 * q ^ 2 + 4 * q ^ 3) - 2 * q ^ 4, 0, ((2 * q ^ 10 - 6 * q ^ 11) + 6 * q ^ 12) - 2 * q ^ 13, ((6 * q ^ 3 - 6 * q ^ 4) + 6 * q ^ 5) - 6 * q ^ 6, (4 * q ^ 20 - 8 * q ^ 21) + 4 * q ^ 22, ((2 * q ^ 20 - 6 * q ^ 21) + 6 * q ^ 22) - 2 * q ^ 23, ((-2 * q ^ 10 + 6 * q ^ 11) - 6 * q ^ 12) + 2 * q ^ 13, -(q ^ 8), (-6 * q ^ 10 + 12 * q ^ 11) - 6 * q ^ 12, (-2 * q ^ 10 + 12 * q ^ 12) - 2 * q ^ 14, 12 * q ^ 10 - 12 * q ^ 11, ((-6 * q ^ 13 + 6 * q ^ 14) - 6 * q ^ 15) + 6 * q ^ 16, (2 * q ^ 12 - 4 * q ^ 13) + 2 * q ^ 14, -24 * q ^ 10, -24 * q ^ 30, 24 * q ^ 20])
            end
        f35 = function (r, p, I)
                local q
                q = -r // p
                return adj(p, [24, -12 + 12q, (4 - 8q) + 4 * q ^ 2, (2 - 8q) + 2 * q ^ 2, (6 - 12q) + 6 * q ^ 2, (2 + (-I - 3) * q + (I + 3) * q ^ 2) - 2 * q ^ 3, ((-2 + 6q) - 6 * q ^ 2) + 2 * q ^ 3, 2q - 2 * q ^ 2, (-I + 1) * q + (I - 1) * q ^ 2, ((-1 + 3q) - 3 * q ^ 2) + q ^ 3, (2 - 4 * q ^ 2) + 2 * q ^ 4, -I * q ^ 2, I * q ^ 6, ((-I * q ^ 10 + 3 * I * q ^ 11) - 3 * I * q ^ 12) + I * q ^ 13, (-I - 1) * q + (I + 3) * q ^ 2 + (-I - 3) * q ^ 3 + (I + 1) * q ^ 4, 2 * q ^ 2 - 2 * q ^ 3, (-4 * I * q ^ 30 + 8 * I * q ^ 31) - 4 * I * q ^ 32, 0, q ^ 4, (4 * I * q ^ 10 - 8 * I * q ^ 11) + 4 * I * q ^ 12, 2 + (2I - 6) * q + (2I + 8) * q ^ 2 + (-4I - 8) * q ^ 3 + (2I + 8) * q ^ 4 + (2I - 6) * q ^ 5 + 2 * q ^ 6, (-2I - 2) * q ^ 2 + 4 * q ^ 3 + (-2I - 2) * q ^ 4, 2 * I * q ^ 11 - 2 * I * q ^ 12, ((-2 * I * q ^ 10 + 6 * I * q ^ 11) - 6 * I * q ^ 12) + 2 * I * q ^ 13, ((2 * q ^ 3 - 6 * q ^ 4) + 6 * q ^ 5) - 2 * q ^ 6, (-4 * q ^ 20 + 8 * q ^ 21) - 4 * q ^ 22, -2 * q ^ 20 + (I + 3) * q ^ 21 + (-I - 3) * q ^ 22 + 2 * q ^ 23, (2 * I * q ^ 10 + (-3I + 1) * q ^ 11 + (3I - 1) * q ^ 12) - 2 * I * q ^ 13, -(q ^ 8), (6 * I * q ^ 10 - 12 * I * q ^ 11) + 6 * I * q ^ 12, (2 * I * q ^ 10 - 4 * I * q ^ 12) + 2 * I * q ^ 14, -12 * I * q ^ 10 + 12 * I * q ^ 11, ((2 * I * q ^ 13 - 6 * I * q ^ 14) + 6 * I * q ^ 15) - 2 * I * q ^ 16, (-2I + 2) * q ^ 12 + 4 * I * q ^ 13 + (-2I + 2) * q ^ 14, 24 * I * q ^ 10, -24 * I * q ^ 30, -24 * q ^ 20])
            end
        f37 = function (r, p)
                local q
                q = -r // p
                return adj(p, [30, -15 + 15q, (5 - 10q) + 5 * q ^ 2, (3 - 8q) + 3 * q ^ 2, (7 - 16q) + 7 * q ^ 2, ((2 - 5q) + 5 * q ^ 2) - 2 * q ^ 3, ((-2 + 8q) - 8 * q ^ 2) + 2 * q ^ 3, 2q - 2 * q ^ 2, q - q ^ 2, ((-1 + 4q) - 4 * q ^ 2) + q ^ 3, (3 - 8 * q ^ 2) + 3 * q ^ 4, 0, 0, ((-(q ^ 10) + 4 * q ^ 11) - 4 * q ^ 12) + q ^ 13, ((-q + 4 * q ^ 2) - 4 * q ^ 3) + q ^ 4, 3 * q ^ 2 - 3 * q ^ 3, (5 * q ^ 30 - 10 * q ^ 31) + 5 * q ^ 32, q ^ 5 + q ^ 7, 0, (5 * q ^ 10 - 10 * q ^ 11) + 5 * q ^ 12, (((((2 - 8q) + 11 * q ^ 2) - 12 * q ^ 3) + 11 * q ^ 4) - 8 * q ^ 5) + 2 * q ^ 6, (-3 * q ^ 2 + 4 * q ^ 3) - 3 * q ^ 4, 2 * q ^ 11 - 2 * q ^ 12, ((-2 * q ^ 10 + 8 * q ^ 11) - 8 * q ^ 12) + 2 * q ^ 13, ((5 * q ^ 3 - 6 * q ^ 4) + 6 * q ^ 5) - 5 * q ^ 6, (5 * q ^ 20 - 10 * q ^ 21) + 5 * q ^ 22, ((2 * q ^ 20 - 5 * q ^ 21) + 5 * q ^ 22) - 2 * q ^ 23, ((2 * q ^ 10 - 5 * q ^ 11) + 5 * q ^ 12) - 2 * q ^ 13, 0, (7 * q ^ 10 - 16 * q ^ 11) + 7 * q ^ 12, (3 * q ^ 10 - 8 * q ^ 12) + 3 * q ^ 14, -15 * q ^ 10 + 15 * q ^ 11, ((5 * q ^ 13 - 6 * q ^ 14) + 6 * q ^ 15) - 5 * q ^ 16, (-3 * q ^ 12 + 4 * q ^ 13) - 3 * q ^ 14, 30 * q ^ 10, 30 * q ^ 30, 30 * q ^ 20])
            end
        tbl[:irreducibles] = [f1(r), f1(p), f3(r, p), f3(p, r), f5(r, p, E(4)), f5(p, r, E(4)), f5(r, p, -(E(4))), f5(p, r, -(E(4))), f9(r, p), f9(p, r), f11(r, p), f12(r, p), f12(p, r), f14(r, p, E(4)), f14(r, p, -(E(4))), f17(r, p), f17(p, r), f18(r, p), f18(p, r), f22(r, p), f23(r, p), f22(p, r), f23(p, r), f24(r, p, 1), f24(p, r, 1), f24(r, p, -1), f24(p, r, -1), f28(r, p), f28(p, r), f30(r, p, E(4)), f30(p, r, E(4)), f30(r, p, -(E(4))), f30(p, r, -(E(4))), f34(r, p), f35(r, p, E(4)), f35(r, p, -(E(4))), f37(r, p)] * q ^ 0
        tbl[:centralizers] = map((x->begin
                        tbl[:order] // x
                    end), tbl[:classes])
        tbl[:irredinfo] = chevieget(:G29, :IrredInfo)
        return ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
    end)
chevieset(:G29, :CharTable, function ()
        local res
        res = (chevieget(:G29, :HeckeCharTable))(map((x->begin
                            [1, -1]
                        end), 1:4), [])
        res[:identifier] = "G29"
        res[:name] = "G29"
        res[:galomorphisms] = Group(#= none:10 =# @perm_str("(6,9)(12,13)(17,20)(21,22)(23,24)(27,28)(32,33)(35,36)"))
        res[:text] = "origin: HeckeCharTable"
        return res
    end)
chevieset(:G29, :HeckeRepresentation, function (para, root, i)
        local x, y, rep, f1, f3, f5, f9, f11, f12, f14, f17, f18, f21, f22, f27, f28, f30, f34, f35, f37
        x = (para[1])[1]
        y = (para[1])[2]
        f1 = (x->begin
                    [[[x]], [[x]], [[x]], [[x]]]
                end)
        f3 = function (x, y)
                return WGraph2Representation([[[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]], [[1, 2, -x, y], [1, 3, -x, y], [3, 4, -x, y]]], [x, y]) * x ^ 0 * y ^ 0
            end
        f5 = function (x, y, I)
                return WGraph2Representation([[[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]], [[1, 2, -x, y], [1, 3, -x, y], [2, 3, (-I - 1) * x, (-I + 1) * y], [3, 4, -x, y]]], [x, y]) * x ^ 0 * y ^ 0
            end
        f9 = function (x, y)
                return WGraph2Representation([[[1, 3], [4], [2], [2, 3], [1, 4]], [[1, 4, -y, x], [1, 5, -y, x], [2, 4, x, -y], [2, 5, 0, -y], [3, 4, 0, x], [3, 5, -y, x]]], [y, x]) * x ^ 0 * y ^ 0
            end
        f11 = function (x, y)
                return map((m->begin
                                ExteriorPower(m, 2) // x
                            end), f3(x, y))
            end
        f12 = function (x, y)
                local R
                R = WGraph2Representation([[[2], [1, 3, 4], [1, 3], [1, 2, 4], [2, 3], [4]], [[1, 2, x, -y], [1, 4, 0, -y], [1, 5, 0, -y], [2, 3, x, 0], [2, 6, -y, 0], [3, 4, -y, x], [3, 5, -y, x], [4, 6, -y, 0], [5, 6, -y, x]]], [x, y]) * x ^ 0 * y ^ 0
                return [R[1], R[2], R[3] ^ R[4], R[4]]
            end
        f14 = function (x, y, I)
                return map((m->begin
                                ExteriorPower(m, 2) // x
                            end), f5(x, y, I))
            end
        f17 = function (x, y)
                local R
                R = WGraph2Representation([[[1, 2, 3], [1, 3, 4], [1, 2, 4], [2, 3], [1, 3, 4], [2, 4], [2, 3, 4], [1, 3, 4], [1, 2, 4], [1, 2, 3]], [[1, 2, y, -x], [1, 3, y, -x], [1, 4, -y, 0], [2, 6, y, -x], [3, 5, -y, x], [3, 6, y, 0], [3, 8, -y, 0], [4, 5, x, -y], [4, 6, -y, x], [4, 7, 0, x - y], [4, 10, 0, x - y], [5, 9, -y, 0], [6, 7, 0, -x + y], [6, 9, 0, x - y], [7, 8, x, -y], [8, 9, y, -x], [8, 10, -y, x], [9, 10, x, -y]]], [x, y]) * x ^ 0 * y ^ 0
                return [R[1], R[2], R[3] ^ R[4], R[4]]
            end
        f18 = function (x, y)
                local R
                R = WGraph2Representation([[[1, 3, 4], [1, 2, 4], [1, 2, 3], [1, 4], [1, 3], [1, 2], [2, 3, 4], [3, 4], [2, 4], [2, 3]], [[1, 4, -y, 0], [1, 5, -y, 0], [1, 6, -y, x], [1, 7, -y, x], [1, 8, -y, 0], [2, 4, x, 0], [2, 5, x, -y], [2, 6, x, 0], [2, 9, -x, 0], [3, 4, -y, x], [3, 5, -y, 0], [3, 6, -y, 0], [3, 10, -y, 0], [4, 9, -y, x], [5, 10, -x, y], [7, 8, -y + x, 0], [7, 9, -y - x, 0], [8, 9, x, -y], [8, 10, -x, y], [9, 10, x, -y]]], [x, y]) * y ^ 0 * x ^ 0
                return [R[1], R[2], R[3] ^ R[4], R[4]]
            end
        f21 = function (x, y)
                return [[[0, 0, x + y, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, x * y, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, x, 0, 0, 0, y ^ 2, 0, 0, 0, 0, 0, 0, 0], [0, x * y ^ 4 + x ^ 2 * y ^ 3, x * y ^ 3 + y ^ 4, 0, x, 0, 0, x * y ^ 3, 0, 0, 0, 0, 0, 0, 0], [-y, -x * y - y ^ 2, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, x, 0, 0, 0, -y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 1, 0, 0, 0], [x * y ^ 3 + y ^ 4, 2 * x * y ^ 4 + x ^ 2 * y ^ 3 + y ^ 5, 0, 0, 0, -x * y ^ 3 - y ^ 4, 0, 0, 0, x, x * y ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, -y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [x * y ^ 2 + y ^ 3, x * y ^ 3 + y ^ 4, -x * y ^ 2 - y ^ 3, 0, 0, -x * y ^ 2 - y ^ 3, 0, 0, 0, 0, 0, x, 0, 0, x]], [[x, -(y ^ 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, 0, 0, 0], [0, 0, x * y + y ^ 2, x + y, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, -1, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0], [0, 0, y, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0], [0, 0, x * y + x ^ 2, x + y, 0, x * y + x ^ 2, x + y, -x * y - y ^ 2, -(x ^ 2) * y ^ -1, 0, x + y, 0, 0, 0, x * y ^ -1], [0, -x * y ^ 4 - y ^ 5, x * y ^ 3 + x ^ 2 * y ^ 2, x * y ^ 2 + y ^ 3, -x - y, x * y ^ 3 + x ^ 2 * y ^ 2, x * y ^ 2 + x ^ 2 * y, -x * y ^ 3 - y ^ 4, (-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, x, x * y ^ 2 + x ^ 2 * y, 0, 0, x + y, x * y + y ^ 2], [0, 0, 0, 0, 0, 0, y, 0, 0, 0, x + y, 0, 0, 0, 0], [0, -x * y ^ 3 - x ^ 2 * y ^ 2, x * y ^ 2 + x ^ 2 * y, x * y + y ^ 2, 0, x * y ^ 2 + x ^ 2 * y, 0, -x * y ^ 2 - y ^ 3, -x * y - x ^ 2, 0, 0, x, 0, 0, x], [0, y ^ 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, -y, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0], [0, 0, x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 2 * x * y + x ^ 2 + y ^ 2, 0, x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 2 * x * y + x ^ 2 + y ^ 2, (-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, ((-x * y - x ^ 2) - y ^ 2) - x ^ 3 * y ^ -1, 0, 2 * x * y + x ^ 2 + y ^ 2, 0, 0, 0, x + y + x ^ 2 * y ^ -1]], [[x, -(y ^ 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, y ^ -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -x * y ^ 2, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, x, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, 0, 0], [0, x * y + x ^ 2, x + y, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, y, 0, x + y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(y ^ 2), x + y, 0, 0, 0], [0, y ^ 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, x * y ^ 4 + y ^ 5, y ^ 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, x + y]], [[0, -x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -x, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0], [0, 0, y, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, y, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, -y, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -(y ^ 2), 0, 0, x + y, 0, 0, 0, 0], [x * y ^ 2 + y ^ 3, x * y ^ 3 + y ^ 4, -x * y ^ 2 - y ^ 3, 0, 0, -x * y ^ 2 - y ^ 3, 0, 0, 0, 0, 0, x, 0, 0, 0], [x * y ^ 3 + y ^ 4, x * y ^ 4 + y ^ 5, x ^ 2 * y ^ 2 + x ^ 3 * y, x * y ^ 2 + y ^ 3, 0, x ^ 2 * y ^ 2 + x ^ 3 * y, x * y ^ 2 + y ^ 3, 0, -(x ^ 2) * y - x ^ 3, 0, 0, 0, x, 0, x * y + x ^ 2], [x * y ^ 3 + y ^ 4, x * y ^ 4 + y ^ 5, x ^ 2 * y ^ 2 + x ^ 3 * y, x * y ^ 2 + y ^ 3, 0, x ^ 2 * y ^ 2 + x ^ 3 * y, x * y ^ 2 + y ^ 3, -x * y ^ 3 - y ^ 4, -(x ^ 2) * y - x ^ 3, 0, x * y ^ 2 + y ^ 3, 0, 0, x, x * y + x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, -x * y, 0, 0, 0, 0, 0, x + y]]] * x ^ 0 * y ^ 0
            end
        f22 = function (x, y)
                local R
                R = WGraph2Representation([[[1, 3, 4], [1, 2, 4], [1, 2, 3], [1, 4], [1, 3], [2], [1, 2, 3], [1, 3, 4], [1, 2, 4], [2, 3], [1, 3, 4], [2, 4], [3, 4], [2, 4], [2, 3]], [[1, 4, -1, 0], [1, 5, -1, 0], [1, 6, -1, y * x], [1, 13, -1, 0], [2, 4, -x, 0], [2, 5, -x, y], [2, 6, -x, 0], [2, 12, y, 0], [2, 14, -1, 0], [3, 4, -y, x], [3, 5, -y, 0], [3, 6, -y, 0], [3, 8, 0, -x], [3, 9, 0, -(x ^ 2)], [3, 10, -y, 0], [3, 15, -x, 0], [4, 7, 0, y], [4, 8, 0, -y], [4, 9, 0, -2 * y * x], [4, 11, 0, -y], [4, 14, -1, y * x], [5, 7, 0, -y], [5, 8, 0, -x], [5, 11, 0, -x], [5, 15, x, -y], [6, 9, 0, -y * x], [6, 10, 0, x], [6, 12, 0, x], [6, 14, 0, y * x], [6, 15, 0, -y], [7, 8, y, -x], [7, 9, y * x ^ -1, -(x ^ 2)], [7, 15, y, 0], [8, 12, y, -x], [8, 13, -y, 0], [9, 11, -y * x, 1], [9, 12, y ^ 2, 0], [9, 14, -y + x, 0], [10, 11, x, -y], [10, 12, -y, x], [10, 14, 0, y * x], [11, 13, -x, 0], [12, 15, 0, y ^ 2 * x ^ -1], [13, 14, -1, y * x], [13, 15, x, -y], [14, 15, x ^ 2, -y * x ^ -1]]], [x, y]) * y ^ 0 * x ^ 0
                return [R[1], R[2], R[3] ^ R[4], R[4]]
            end
        f27 = function (x, y, sgn)
                local v, R
                v = sgn * GetRoot(x * y, 2)
                R = WGraph2Representation([[[1, 3, 4], [1, 2, 4], [1, 2, 3], [1, 4], [1, 3], [1, 2], [1, 2, 3], [1, 3, 4], [1, 2, 4], [2, 3], [1, 3, 4], [2, 4], [3, 4], [2, 4], [2, 3], [2, 3, 4]], [[1, 4, -y, 0], [1, 5, -y, 0], [1, 6, -y, x], [1, 16, -v, v], [2, 4, -v, 0], [2, 5, -v, v], [2, 6, -v, 0], [2, 12, v, 0], [2, 14, v, 0], [3, 4, -y, x], [3, 5, -y, 0], [3, 6, -y, 0], [3, 15, v, 0], [4, 8, 0, -v + y], [4, 9, 0, v - x], [4, 11, 0, -v + y], [4, 14, -v, v], [5, 7, 0, y ^ 2 // v - y], [5, 8, 0, -v + y], [5, 10, -x, 0], [5, 11, 0, -v + y], [5, 15, x, -y], [7, 8, v, -v], [7, 9, y, -x], [7, 10, -y, 0], [7, 15, -x + y, 0], [8, 12, v, -v], [8, 13, -v + y, 0], [9, 11, -v, v], [9, 12, y, 0], [9, 14, -x + y, 0], [10, 11, v, -v], [10, 12, -y, x], [10, 13, 0, v], [10, 16, 0, -v], [11, 13, -v + x, 0], [11, 15, 0, v], [13, 14, -v, v], [13, 15, -v, v], [14, 15, -x, y], [14, 16, 0, -y], [15, 16, 0, v]]], [x, y]) * x ^ 0 * y ^ 0
                return [R[1], R[2], R[3] ^ R[4], R[4]]
            end
        f28 = function (x, y)
                return [[[0, -x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x], [y, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y], [0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x - y, 0, 0, 0], [0, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0], [0, 0, -x, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x - y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, -x - y, 0, 0, 0, x, 2x + y + x ^ 2 * y ^ -1, 3x + y + x ^ 2 * y ^ -1, -x - y, x], [0, 0, 0, x, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, -x, 0, x + y, x + y, 0, 0, 0, 0, 0, 0, x, 0, x, 0, -y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, x + x ^ 2 * y ^ -1, x + x ^ 2 * y ^ -1, -x, x], [0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, -y, -x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, x, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, x + y, 0, 0, 0, 0, -x - y, -x - y, y, -y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, x + y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, -x, -x, -x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x]], [[x, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, x, x], [0, 0, y, 0, -y, 0, 0, 0, 0, 0, -x - y, 0, 0, 0, 0, x, 0, 0, -x - y, -x - y], [0, -x, x + y, 0, 0, 0, 0, 0, 0, 0, -x, -x, 0, 0, 0, x, 0, 0, -x, 0], [0, 0, 0, y, 0, 0, -x, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, x + y, 0], [0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, 0, 0, 0, x], [-x, 0, 0, 0, 0, y, x, 0, 0, 0, x ^ 2 * y ^ -1, 0, 0, -(x ^ -1) * y ^ 2 - y, y, -x - x ^ 2 * y ^ -1, y, 0, -3x - 2y, -x], [0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, y, 0, x, 0, 0, -y, y, 0, 0, x, 0, 0, y, 0, y, y], [-x, 0, 0, 0, 0, 0, 0, 0, y, 0, x ^ 2 * y ^ -1, 0, 0, -x - y, 0, -x - x ^ 2 * y ^ -1, 0, 0, -2x - y, 0], [0, 0, 0, 0, 0, 0, -x, x, 0, x + y, 0, -x, 0, 0, x, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, -x], [0, 0, 0, 0, y, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, y, x + y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x - y, 0, 0, 0, y, -x - y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0, -y, 0, 0, x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, x, 0, 0, -x, -x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, x, x, 0, x + y, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, -x - y, 0, 0, 0, x + y, -x - y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, y, x + y]], [[y, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, y, 0, 0, x, 0, x ^ -1 * y ^ 2, 0], [0, y, 0, -x, 0, 0, -x - y, 0, 0, 0, 0, 0, -y, -(x ^ -1) * y ^ 2 - y, 0, 0, -x - y, -x, -(x ^ -1) * y ^ 2 - y, 0], [0, 0, 0, -x - y, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, y, y, -x, -x, 0, 0], [0, 0, 0, x + y, 0, 0, y, 0, 0, 0, 0, 0, y, y, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, y, y, 0, 0, 0, 0, 0], [0, 0, 0, (-(x ^ -1) * y ^ 2 - x) - 2y, x, 0, (-(x ^ -1) * y ^ 2 - 2x) - 3y, 0, y, 0, 0, 0, (-(x ^ -1) * y ^ 2 - x) - 2y, (-(x ^ -1) * y ^ 2 - x) - 3y, -x - y, 0, x ^ 2 * y ^ -1, -x - y, -x, 0], [0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, x, 0, -x - y, x + y, 0, 0, 0, -x, 0, -y, 0, 0, y, 0, y, 0], [0, 0, 0, -x - y, 0, -x, -x - y, 0, x + y, 0, 0, 0, -x - y, -x - y, -x, 0, x ^ 2 * y ^ -1, 0, -x, 0], [0, 0, 0, 0, 0, 0, y, 0, 0, 0, y, 0, 0, y, y, 0, 0, 0, 0, 0], [0, 0, 0, 0, x, 0, -x, 0, 0, -x, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, y, 0, y, 0, y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -x, 0, x + y, 0, 0, 0, 0, 0, 0, y, x + y, 0, 0, 0, 0, 0], [0, 0, -x, -x, x, 0, -x, 0, 0, 0, 0, 0, 0, 0, 0, x + y, -x, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0], [0, 0, 0, -y, 0, 0, -y, 0, 0, 0, 0, 0, -y, -y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, y, y]], [[y, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, -y, -x - y, y, 0], [0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, -x - y, 0, -(x ^ -1) * y ^ 2, 0], [0, 0, 0, -y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x - y, -y, 0, 0], [0, 0, x, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, y, 0, 0], [0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, y, 0, 0, x, -x, 0, 0, 0, y, y, 0, (-(x ^ -1) * y ^ 2 - 2x) - 2y, -(x ^ -1) * y ^ 2 - y, -y, x + x ^ 2 * y ^ -1], [0, 0, 0, 0, -x, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, -x, 0, -y, 0, y, y, 0, 0, 0, x ^ -1 * y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, -x, 0, -y, x ^ 2 * y ^ -1], [0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, -x - y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, y, 0, x ^ -1 * y ^ 2, -x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, x + y, 0, 0, -x, x ^ -1 * y ^ 2 + y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0, x + y, 0, 0, -x - y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, -y, x, 0, x + y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, y, 0, 0, x ^ -1 * y ^ 2 - x, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, x + y, -(x ^ 2) * y ^ -1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, x ^ -1 * y ^ 2, 0]]]
            end
        f30 = function (x, y, i)
                return [[[0, x * y, 0, 0, 0, 0, 0, 0, 0, -i * x ^ 4, 0, 0, 0, 0, x * y ^ 3 + x ^ 2 * y ^ 2, 0, 0, 0, i * x ^ 3 * y ^ 2 + i * x ^ 4 * y, -i * x ^ 3 * y ^ 2 - x ^ 5], [-1, x + y, 0, 0, 0, 0, 0, 0, 0, (-i * x * y ^ 2 - i * x ^ 2 * y) - i * x ^ 3, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y, 0, 0, 0, i * x ^ 2 * y ^ 2 + i * x ^ 3 * y, -i * x ^ 2 * y ^ 2 - x ^ 4], [0, 0, y, 0, 0, 0, 0, 0, 0, ((-i * x * y ^ 2 - 2 * i * x ^ 2 * y) - i * x ^ 3) - i * y ^ 3, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y ^ 2, ((x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) + i * y ^ 4], [0, 0, 0, y, 0, 0, 0, 0, 0, x ^ 2 * y, 0, 0, 0, 0, 0, 0, 0, 0, (-i * x * y ^ 3 + (-i - 1) * x ^ 2 * y ^ 2 + (-2i - 1) * x ^ 3 * y) - i * x ^ 4, x ^ 2 * y ^ 2 + i * y ^ 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, x * y ^ 3 + y ^ 4, (-i * x * y ^ 3 - i * x ^ 2 * y ^ 2) - i * x ^ 3 * y, -i * x * y ^ 3 - x ^ 3 * y], [0, 0, 0, 0, 0, 0, x * y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y], [0, 0, 0, 0, 0, -(y ^ -1), x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x], [0, 0, 0, 0, 0, 0, 0, y, 0, y ^ 3, 0, 0, 0, 0, 0, 0, 0, 0, -(y ^ 4), (i + 1) * y ^ 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, y], [0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -x, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -i * x ^ 3, 0, 0, 0, x * y, 0, 0, 0, 0, i * x ^ 3 * y, -i * x ^ 2 * y ^ 2 - x ^ 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, -i * x ^ 2, 0, 0, -1, x + y, 0, 0, 0, 0, i * x ^ 2 * y, -i * x * y ^ 2 - x ^ 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, i * x, 0, 0, 0, 0, y, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, x * y ^ 2 + y ^ 3, -i * x ^ 2 * y, -(x ^ 2) * y - i * y ^ 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, -i * x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x]], [[0, x * y + y ^ 2, -x * y, 0, 0, 0, 0, 0, 0, 0, (i + 1) * x ^ 2 * y ^ 3 + (3i + 1) * x ^ 3 * y ^ 2 + (i - 1) * x ^ 4 * y + (-i + 1) * x ^ 5, 0, x * y + y ^ 2, -x * y ^ 2 - y ^ 3, 0, 0, 0, -(x ^ 3) * y ^ 2 + (i + 1) * x ^ 5, 0, 0], [0, y, 0, 0, 0, 0, 0, 0, 0, 0, ((-x * y ^ 3 + i * x ^ 2 * y ^ 2) - x ^ 3 * y) - i * x ^ 4, 0, 0, -x * y - y ^ 2, -x * y ^ 2 - x ^ 2 * y, 0, 0, x ^ 3 * y + x ^ 4, 0, 0], [1, -x - y, x + y, 0, 0, 0, 0, 0, 0, 0, ((((i - 1) * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * i * x ^ 3 * y) - i * x ^ 4) - y ^ 4, 0, -x - y, 0, -x * y ^ 2 - x ^ 2 * y, 0, 0, x ^ 2 * y ^ 2 + (i + 2) * x ^ 3 * y + x ^ 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2, i * x * y ^ 3 + x ^ 3 * y, 0, 0, 0, 0, 0, 0, (-i + 1) * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 0, 0], [0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, -i * x ^ 2 * y ^ 2 + (-i + 1) * x ^ 3 * y, 0, 0, 0, 0, 0, 0, x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + (i + 1) * x ^ 3 * y, 0, 0], [0, 0, 0, 0, -1, x + y, 0, 0, 0, 0, -i * x * y ^ 2 + (-i + 1) * x ^ 2 * y, 0, 0, 0, 0, 0, 0, 2 * x * y ^ 2 + (i + 1) * x ^ 2 * y + y ^ 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -i * x, -x * y, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, x * y ^ 3 + (-i - 1) * y ^ 4, 0, 0, 0, 0, 0, 0, i * x * y ^ 3 + (-i + 1) * y ^ 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, -i * y, y, 0], [0, 0, 0, -(y ^ -1), 0, 0, 0, 0, 0, x + y, x ^ 2 + i * y ^ 2, 0, 0, 0, 0, 0, 0, (-i + 1) * x * y + 2 * x ^ 2 + x ^ 3 * y ^ -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, i, x + y, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (i * x ^ 2 * y ^ 2 - x ^ 3 * y) + (-i + 1) * x ^ 4, 0, y, 0, 0, 0, 0, (i + 1) * x ^ 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y - i * x ^ 3, 0, 0, 0, -x * y, 0, 0, x ^ 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y + i * x ^ 2, 0, 0, 1, x + y, 0, 0, -(x ^ 2), 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -i * x * y ^ 2 - i * x ^ 2 * y, 0, 0, 0, 0, 0, -x * y ^ 2, x * y ^ 2 + x ^ 2 * y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, i * x + i * y, 0, 0, 0, 0, y ^ -1, x + y, -x - y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -x, 0, x, 0, 0, 0, 0, 0, 0, -i * y, x + y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, 0, 0, -i * x, 0, y]], [[0, 0, 0, 0, -x * y, 0, 0, 0, 0, 0, 0, ((-i * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + i * x ^ 5 * y) - i * x ^ 6) + i * x ^ 7 * y ^ -1, x * y + y ^ 2, 0, 0, 0, (x ^ 3 * y ^ 2 + (i + 1) * x ^ 4 * y + (i - 1) * x ^ 5) - i * x ^ 6 * y ^ -1, x * y ^ 4 + x ^ 2 * y ^ 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((i + 1) * x ^ 3 * y ^ 2 + (2i - 1) * x ^ 4 * y) - x ^ 5, 0, x * y + y ^ 2, 0, -x * y, x ^ 3 * y, x * y ^ 3 + x ^ 2 * y ^ 2, 0, 0], [0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, ((-x * y ^ 4 + i * x ^ 2 * y ^ 3 + (2i - 1) * x ^ 3 * y ^ 2) - x ^ 4 * y) + (i - 1) * x ^ 5, 0, 0, 0, 0, (i * x ^ 2 * y ^ 2 + (i - 1) * x ^ 3 * y) - i * x ^ 4, 0, 0, -x * y ^ 3 - x ^ 2 * y ^ 2], [0, 0, -x, x + y, 0, 0, 0, 0, 0, 0, 0, ((-x * y ^ 4 + i * x ^ 2 * y ^ 3 + (3i - 2) * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 0, 0, 0, 0, x ^ 2 * y ^ 2 + i * x ^ 3 * y, 0, 0, -(x ^ 2) * y ^ 2 - x ^ 3 * y], [1, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, ((i * x * y ^ 4 + 2 * i * x ^ 2 * y ^ 3 + (i - 1) * x ^ 3 * y ^ 2) - i * x ^ 4 * y) + i * x ^ 5, -x - y, 0, x * y ^ 2 + y ^ 3, 0, ((i - 1) * x ^ 2 * y ^ 2 + (i - 2) * x ^ 3 * y) - i * x ^ 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2, 0, 0, (-i + 1) * x ^ 3 * y + i * x ^ 4, 0, 0, 0, 0, ((i - 1) * x * y ^ 2 + (i - 2) * x ^ 2 * y) - i * x ^ 3, 0, 0, -x * y ^ 2 - y ^ 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, (i - 1) * x * y - x ^ 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, -2 * x * y ^ 4 + (-2i + 1) * x ^ 2 * y ^ 3, 0, 0, 0, 0, (i - 1) * x * y ^ 3 + y ^ 4, 0, 0, 0], [0, 0, 0, 0, 0, -(y ^ -1), 0, 0, x + y, 0, 0, (i - 1) * x * y - i * x ^ 2, 0, 0, 0, 0, (i - 1) * x, 0, 0, -x - y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y - i * x ^ 3, 0, 0, 0, 0, x * y + i * x ^ 2, 0, x * y, 0], [0, 0, 0, 0, 0, 0, -x, 0, 0, 0, x + y, (i - 1) * x * y - x ^ 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((x ^ 3 * y ^ 2 + i * x ^ 4 * y) - i * x ^ 5) + i * x ^ 6 * y ^ -1, y, 0, 0, 0, (i * x ^ 3 * y + (i - 1) * x ^ 4) - i * x ^ 5 * y ^ -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (x ^ 2 * y ^ 2 + 2 * i * x ^ 3 * y) - x ^ 4, 0, y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -i * x ^ 2 * y + x ^ 3, 0, 0, 0, 0, 0, -x * y, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((i + 1) * x * y ^ 3 + (2i - 1) * x ^ 2 * y ^ 2) - x ^ 3 * y, 0, -x - y, x * y + y ^ 2, x + y, -(x ^ 2) * y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, i * x * y - x ^ 2, 0, 0, 1, 0, 0, x + y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -x * y - i * x ^ 2, 0, 0, 0, 0, i * x + y, 0, x + y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (i - 1) * x ^ 2 - i * x ^ 3 * y ^ -1, 0, 0, 0, 0, (-i + 1) * x + i * x ^ 2 * y ^ -1, 0, 0, y]], [[0, 0, 0, 0, 0, 0, i * x ^ 3 * y ^ 2 + x ^ 5, 0, 0, 0, 0, x ^ 4 * y ^ 2 + x ^ 5 * y + (-i + 1) * x ^ 6, x * y, 0, 0, 0, (-i + 1) * x ^ 3 * y ^ 2 + x ^ 4 * y + (i - 1) * x ^ 5, x ^ 5, -(x ^ 6) * y ^ -1, 0], [0, 0, 0, 0, 0, 0, i * x ^ 2 * y ^ 2 + x ^ 4, 0, 0, 0, 0, -i * x * y ^ 4 + (-i + 1) * x ^ 2 * y ^ 3 + (-i + 3) * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 0, x * y, -x * y ^ 2 - y ^ 3, 0, (-(x ^ 2) * y ^ 2 - x ^ 3 * y) - x ^ 4, x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 0, 0], [0, 0, y, 0, 0, 0, ((-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y) - i * y ^ 4, 0, 0, 0, 0, ((-i - 1) * x * y ^ 4 + (-i - 1) * x ^ 2 * y ^ 3 + (-i + 1) * x ^ 3 * y ^ 2 + (-i + 2) * x ^ 4 * y) - i * y ^ 5, 0, 0, 0, 0, (-i * x * y ^ 3 + (i - 2) * x ^ 3 * y) - x ^ 4, i * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, -(x ^ 4), 0], [0, 0, 0, 0, 0, 0, -(x ^ 2) * y ^ 2 - i * y ^ 4, y, x * y ^ 3 + x ^ 2 * y ^ 2, x * y ^ 2 + y ^ 3, -x * y ^ 3 - y ^ 4, -i * x * y ^ 4 + x ^ 2 * y ^ 3 + (i - 1) * x ^ 3 * y ^ 2, 0, 0, 0, 0, -x * y ^ 3, i * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, (-x * y ^ 3 + x ^ 3 * y) - y ^ 4, 0], [0, 0, 0, 0, y, 0, i * x * y ^ 3 + x ^ 3 * y, 0, 0, 0, 0, (i + 1) * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + (-i + 1) * x ^ 4 * y, 0, 0, 0, 0, (i - 1) * x ^ 3 * y, (x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, -(x ^ 4), 0], [0, 0, 0, 0, 0, 0, x ^ 2 * y, 0, 0, 0, 0, (-i + 1) * x ^ 3 * y, 0, 0, 0, 0, (i - 1) * x ^ 2 * y, 0, -(x ^ 3), -x * y ^ 2], [0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -x, 0, 0, (-i - 1) * y ^ 4, x + y, x ^ 2 * y ^ 2 + x ^ 3 * y, x * y ^ 2 + x ^ 2 * y, -x * y ^ 3 - x ^ 2 * y ^ 2, -2 * x * y ^ 4, 0, 0, 0, 0, y ^ 4, i * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, ((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 0], [0, 0, 0, 0, 0, 0, -y, 0, y, 0, 0, (i - 1) * x * y, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, x * y ^ 2, 0, 0, 0, 0, -(y ^ 2), 0, x ^ 2, 0], [0, 0, 0, 0, 0, 0, -y, 0, 0, 0, y, (i - 1) * x * y, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, 0, 0, 0, 0, i * x ^ 2 * y ^ 2 + x ^ 4, 0, 0, 0, 0, x ^ 3 * y ^ 2 + x ^ 4 * y + (-i + 1) * x ^ 5, x + y, 0, 0, 0, (-i + 1) * x ^ 2 * y ^ 2 + x ^ 3 * y + (i - 1) * x ^ 4, x ^ 4, -(x ^ 5) * y ^ -1, 0], [0, -1, 0, 0, 0, 0, i * x * y ^ 2 + x ^ 3, 0, 0, 0, 0, (-i + 2) * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 0, x + y, -x * y - y ^ 2, 0, -(x ^ 3), x ^ 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, i * x * y ^ 2 - x ^ 2 * y, 0, 0, y, 0, x ^ 2, -(x ^ 2), 0, 0], [0, 0, 0, 0, 0, 0, x ^ 2 * y + i * y ^ 3, 0, 0, 0, 0, (i + 1) * x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 0, 0, 0, y, -(x ^ 2) * y, x ^ 2 * y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, y ^ -1, -x, 0, 0, 0, 0, (i - 1) * x ^ 2, 0, 0, 0, 0, (-i + 1) * x, 0, x ^ 2 * y ^ -1, x + y]]]
            end
        f34 = function (x, y)
                return [[[x, 0, 0, 0, 0, 0, (-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y ^ 3, 0, (-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) + 2 * y ^ 4, (-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 0, (-3 * x * y ^ 4 - x ^ 2 * y ^ 3) + 6 * x ^ 3 * y ^ 2 + 4 * x ^ 4 * y, 0], [0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - 3 * x ^ 4 * y, 0, -3 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 0, 0, x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 0], [0, 0, x, 0, 0, 0, (-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 4 * y, 0, -x * y ^ 3, (-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 0, -x * y ^ 4 + 2 * x ^ 3 * y ^ 2, 0], [0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y ^ 2, 0, x * y ^ 2 + 2 * y ^ 3, -x * y ^ 2 - x ^ 2 * y, 0, -4 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2, 0], [0, 0, 0, -1, x + y, 0, x * y + y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y, 0, y ^ 2, 0, 0, -3 * x * y ^ 2 - 2 * x ^ 2 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, x ^ 4, 0, x * y ^ 2 + x ^ 2 * y + y ^ 3, -(x ^ 2) * y - x ^ 3, 0, -x * y ^ 3 - x ^ 2 * y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, -x, 0, -x * y, 0], [0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, 0, y ^ 2, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 2, 0, x * y + 2 * y ^ 2, -x * y - x ^ 2, 0, -2 * x * y ^ 2 - x ^ 2 * y, 0], [0, 0, 0, 0, 0, 0, x + y, 0, -1, x + y, 0, 0, 0, 0, 0, 0, 0, -x * y, 0, y, 0, 0, -x * y, 0], [0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, x + y, 0, -1, 0, 0, 0, 0, 0, 0, y, 0, 0, -x * y, 0], [0, 0, 0, 0, 0, -y, x * y ^ 2 + x ^ 2 * y, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, x ^ 4, 0, y ^ 3, 0, 0, -x * y ^ 3 + x ^ 3 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, x * y + 2 * y ^ 2, -x * y - x ^ 2, 0, -2 * x * y ^ 2 - x ^ 2 * y, 0], [0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y ^ 2, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y, y ^ 3, 0, 0, x ^ 2 * y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y, 0, y, -x, x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y ^ 2, x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 // x, 0, 0, 0, x + y, -(y ^ 2) // x, 0, 0, -x * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, x + y, 0, x * y, 0], [0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, -x * y, 0, 0, 0, x + y, x * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, 0, y ^ 2, x + y]], [[0, 0, 0, x * y, 0, 0, -x * y ^ 3 - x ^ 2 * y ^ 2, x * y ^ 2 + y ^ 3, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y + y ^ 3, 0, 0, 0, 0, 0, 0, (-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 0, -x * y ^ 3, -2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3, 0], [0, x, 0, 0, 0, 0, 0, x ^ 2 * y + x ^ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, -x * y ^ 3, 0, -x * y ^ 3 + x ^ 2 * y ^ 2 + 3 * x ^ 3 * y, x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 0], [0, 0, 0, 0, 0, x * y, -(x ^ 2) * y ^ 2 - x ^ 3 * y, y ^ 3, 0, 0, 0, 0, x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 0, 0, 0, 0, 0, -x * y ^ 3 - x ^ 2 * y ^ 2, ((-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, 0, -(x ^ 3) * y, (-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 0], [-1, 0, 0, x + y, 0, 0, -x * y ^ 2, x * y + y ^ 2, 0, 0, 0, 0, x * y + y ^ 2, 0, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0, -x * y ^ 2, -2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 0], [0, 0, 0, 0, x, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y, -x * y ^ 2 + y ^ 3, 0], [0, 0, -1, 0, 0, x + y, 0, y ^ 2, 0, 0, 0, 0, x * y + x ^ 2, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, (-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 0, -(x ^ 3), (-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -x - y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -x * y, 0, 0, 0, 0, 0, x + y, 0, 0, x * y, 0, 0, 0, (-2 * x * y - x ^ 2) - y ^ 2, 0, y ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2), 0, 0, 0, y, y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, y ^ 2, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0, 0, -(x ^ 3), 0, 0], [0, 0, 0, 0, 0, 0, -x * y, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, -x * y - x ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, x * y + y ^ 2, 0, 0, (-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, -x * y ^ 2, y ^ 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, x + y, 0, 0, 0, -x - y, 0, y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, y // x, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, -y // x, -(y ^ 2) // x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0, x + y]], [[x, 0, 0, 0, 0, 0, 0, (-x * y ^ 2 - 3 * x ^ 2 * y) + 2 * y ^ 3, 0, 0, 0, 0, 0, 0, 0, 0, (-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, ((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y, 0, 0, 0, (-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, -x * y ^ 3 - x ^ 2 * y ^ 2], [0, 0, x, 0, 0, 0, 0, -3 * x * y ^ 2 - 2 * x ^ 2 * y, -(x ^ 2) * y - x ^ 3, x ^ 3 * y + x ^ 4, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 4 - x ^ 2 * y ^ 3, 0, 0, 0, 0, x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 0], [0, -y, x + y, 0, 0, 0, 0, -x * y ^ 2, -x * y ^ 2 - x ^ 2 * y, x ^ 2 * y ^ 2 + x ^ 3 * y, 0, 0, 0, 0, 0, 0, ((-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, ((x * y ^ 4 + 2 * x ^ 2 * y ^ 3) - 2 * x ^ 4 * y) - x ^ 5, 0, 0, 0, (-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 2 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 4 * x ^ 3 * y ^ 2 + 3 * x ^ 4 * y + x ^ 5, 0], [0, 0, 0, 0, 0, 0, 0, x * y + 2 * y ^ 2, 0, 0, 0, 0, x * y, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, x * y ^ 3 - x ^ 3 * y, 0, 0, 0, 0, -(x ^ 2) * y ^ 2 - x ^ 3 * y, -x * y ^ 2], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, x * y, 0, 0, 0, 0, 0, y ^ 2, -(y ^ 3), 0, 0, 0, x * y + y ^ 2, -(x ^ 2) * y, 0], [0, 0, 0, 0, 0, 0, x ^ 2 * y + x ^ 3, x * y + x ^ 2 + y ^ 2, 0, 0, 0, 0, 0, 0, x, 0, (-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, (-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 0, 0, 0, 0, (x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5) // y, 0], [0, 0, 0, 0, 0, 0, x + y, 1, 0, 0, 0, 0, 0, 0, 0, -y, -x - y, -x * y - x ^ 2, 0, 0, 0, 0, 2 * x * y + x ^ 2 + y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, x + 2y, x, 0, 0, 0, 0, 0, 0, 0, (-2 * x * y - x ^ 2) - y ^ 2, (-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 0, 0, 0, 0, 3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, x, 0, 0, 0, 0, 0, 0, 0, -x * y - y ^ 2, 0, 0, 0, x + y, x * y + y ^ 2, 0], [0, 0, 0, 0, -1, 0, 0, 1, 0, 0, x + y, 0, 0, 0, 0, 0, y, -x * y - y ^ 2, 0, 0, 0, x + y, 0, 0], [0, 0, 0, 0, 0, 0, 0, y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y, 0, 0, x * y ^ 2 + x ^ 2 * y, 0, 0], [0, 0, 0, -1, 0, 0, 0, x + 2y, 0, 0, 0, 0, x + y, 0, 0, 0, -x * y - x ^ 2, (-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 0, 0, 0, 0, x ^ 2 * y + x ^ 3, -x * y], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, -(x ^ 2) * y - x ^ 3, 0], [0, 0, 0, 0, 0, -y, 0, y ^ 2, 0, 0, 0, 0, 0, 0, x + y, x * y ^ 2 + x ^ 2 * y, 0, (-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, x, 1, 0, 0, 0, 0, 0, 0, 0, 0, -x - y, -x * y - x ^ 2, 0, 0, 0, 0, 2 * x * y + x ^ 2 + y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, -(y ^ 2), 0, 0, 0, 0, x * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, -y // x, 0, 0, 0, 1 // x, 0, 0, 0, 0, 0, 0, x + y, 0, 0, -x - y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -x * y - x ^ 2, 0, x + y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, y, 0, x + y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, x + y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y]], [[0, x, 0, x * y + x ^ 2, -(x ^ 2) * y - x ^ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, (-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 0, (x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y, -2 * x * y ^ 3 + x ^ 2 * y ^ 2 + 3 * x ^ 3 * y, 0, (-3 * x * y ^ 3 - x ^ 2 * y ^ 2) + 6 * x ^ 3 * y + 4 * x ^ 4], [-y, x + y, 0, x * y + y ^ 2, -x * y ^ 2 - x ^ 2 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 0, 0, -2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y, 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 0, x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + 2 * x ^ 4], [0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, (-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 0, (-2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, x ^ 2 * y ^ 2, 0, -x * y ^ 3 + 2 * x ^ 3 * y], [0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 0, 0, 2 * x * y ^ 2 + x ^ 2 * y, -2 * x * y ^ 2 - x ^ 2 * y, 0, -4 * x * y ^ 2 - 3 * x ^ 2 * y], [0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 2 + x ^ 2 * y, x * y + y ^ 2, 0, 2 * x * y + y ^ 2, -x * y, 0, -3 * x * y - 2 * x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 0, x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 0, -x * y ^ 2 - x ^ 2 * y, x * y ^ 2 + x ^ 2 * y + x ^ 3, (-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 0, -x * y ^ 2 - x ^ 2 * y], [0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 1 // x, 0, 0, 0, 0, (-x * y - y ^ 2) // x, x, -x, 0, -x], [0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, x * y, x ^ 2, 0, -x * y - x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, -y, 0, 0, 0, 0, 0, 0, 0, 2 * x * y + x ^ 2, -2 * x * y - x ^ 2, 0, -2 * x * y - x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, -y, 0, 0, 0, 0, 0, 0, -x * y, x + y, 0, 2x + y, -x, 0, -x], [0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, -x * y, x + y, 0, 2x + y, -x, 0, -x], [0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y, 0, x * y ^ 2, 2 * x ^ 2 * y + x ^ 3, 0, -x * y ^ 2 + x ^ 3], [0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y + x ^ 2, -2 * x * y - x ^ 2, 0, -2 * x * y - x ^ 2], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, x + y, 0, x * y + x ^ 2, 0, (x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4) // y, 0, 0, x * y, -x * y, 0, -x * y - x ^ 2], [0, 0, 0, 0, 0, 0, -(x ^ 2) * y, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y, 0, 0, 0, 0, x * y ^ 2, -x * y ^ 2, 0, x ^ 2 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, -y, x, -x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y, 0, 0, 0, 0, x * y, y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, -x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, x, -x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, y, x, 0, x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, x + y, 0, x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -x, 0, 0, 0, 0, x + y, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y]]]
            end
        f35 = function (x, y, I)
                return [[[0, -1, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 0, -x * y - y ^ 2, x + y, 0, 0, 0, 0, 0, x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + (I + 1) * x ^ 3 * y, 0, 0, 0, 0, -2 * I * x ^ 3 * y ^ 3 - 2 * x ^ 4 * y ^ 2], [x * y, x + y, 0, 0, 0, 0, 0, 0, 0, ((-(x ^ 2) * y ^ 4 - 3 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) - I * x ^ 5 * y, 0, x * y ^ 2 + x ^ 2 * y, -x * y - x ^ 2, 0, 0, 0, 0, 0, ((-2 * x ^ 2 * y ^ 3 - 4 * x ^ 3 * y ^ 2) + (-I - 1) * x ^ 4 * y) - I * x ^ 5, 0, 0, 0, 0, (-2 * I * x * y ^ 6 - 2 * I * x ^ 2 * y ^ 5) + 4 * I * x ^ 3 * y ^ 4 + 2 * I * x ^ 4 * y ^ 3 + 2 * x ^ 6 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 4 + x ^ 2 * y ^ 3 + (I - 1) * x ^ 3 * y ^ 2 + I * x ^ 4 * y, x * y + y ^ 2, 0, 0, 0, 0, 0, 0, 0, I * x ^ 4, 0, x * y, 0, 0, (2 * x ^ 3 * y ^ 3 - 2 * I * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y], [0, 0, 0, 0, 0, x * y, 0, 0, 0, x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 0, 0, 0, 0, 0, 0, 0, 0, 3 * x * y ^ 2 + 3 * x ^ 2 * y + (I + 1) * x ^ 3 + y ^ 3, 0, 0, 0, 0, (2 * x ^ 2 * y ^ 3 - 2 * I * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y], [0, 0, 0, 0, 0, 0, 0, x * y, 0, x * y ^ 3 + (-I + 2) * x ^ 2 * y ^ 2 + x ^ 3 * y, 0, 0, 0, 0, 0, 0, 0, 0, 3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, x + y, 0, 0, 0, -I * x ^ 3, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y + x ^ 2 + y ^ 2, 0, 0, 0, 0, (2 * x * y ^ 3 - 2 * I * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, 1 // 2, 0, 0, 0, 0, -x * y + (-I - 1) * y ^ 2], [0, 0, 0, 0, -1, 0, 0, x + y, 0, -I * x * y ^ 2 - I * x ^ 2 * y, 0, 0, 0, 0, 0, 0, 0, 0, (-I + 2) * x * y + x ^ 2 + y ^ 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, x, I // 2 * x, 0, 0, 0, 0, 0, 0, 0, 0, I // 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 3 + x ^ 2 * y ^ 2 + I * x ^ 3 * y, y, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y + I * x ^ 3, 0, 0, 0, 0, -2 * I * x ^ 3 * y ^ 2 - 2 * x ^ 4 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2 * I * x ^ 2 * y ^ 3 + (-2I - 2) * x ^ 3 * y ^ 2) - 2 * I * y ^ 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, (-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) - I * x ^ 4 * y, 0, 0, y, 0, 0, 0, 0, 0, (-(x ^ 2) * y ^ 2 - x ^ 3 * y) - I * x ^ 4, 0, 0, 0, 0, ((((-2 * I * x * y ^ 5 + 2 * I * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) + 2 * x ^ 5 * y) - 2 * I * y ^ 6], [0, 0, 0, 0, 0, 0, x, 0, 0, 1 // 2 * x, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y + (I + 1) * y ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, -I // 2 * x ^ 2, 0, 0, 0, 0, x + y, 0, 0, -1 // 2, 0, 0, 0, 0, 0, -(x ^ 2) * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y, 0, 0, 0, 0, 0, 0, -x * y, 0, 2 * x * y + (I + 1) * x ^ 2 + y ^ 2, 0, 0, 0, 0, -2 * I * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, I * x ^ 2, 0, 0, 0, 0, 0, 1, x + y, 0, -x - y, 0, 0, 0, 0, 2 * I * x * y ^ 2 + 2 * x ^ 2 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y, 0, 0, 0, I * x ^ 2, 0, 0, 0, 0, -2 * x ^ 3 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, I // 2 * x, 0, 0, 0, -x * y ^ 2, -(x ^ 2) * y], [0, 0, -1, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y ^ 2 + (I - 1) * x ^ 3 * y, x + y, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 2 - 2 * x ^ 2 * y, 0, x + y, 0, 0, (2I + 2) * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, I * x, 0, 0, 0, 0, 0, 0, 0, 0, I, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, (I // 2 * x) // y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 // y, 0, 0, x + y, x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x]], [[x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y - y ^ 2, y, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 4 * y, -2 * I * x ^ 3 * y ^ 3 - 2 * x ^ 4 * y ^ 2, 0], [-x * y - x ^ 2, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, -x * y - y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, (I * x ^ 4 * y ^ 2 - x ^ 5 * y) - x ^ 6, (-2 * I * x * y ^ 6 - 2 * I * x ^ 2 * y ^ 5) + 4 * I * x ^ 3 * y ^ 4 + 2 * I * x ^ 4 * y ^ 3 + 2 * x ^ 6 * y, 0], [0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y ^ 2 - x ^ 3 * y, 0, 0, x ^ 5, (2 * x ^ 3 * y ^ 3 - 2 * I * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y, 0], [0, 0, -1, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0, 0, x ^ 4, (2 * x ^ 2 * y ^ 3 - 2 * I * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 0], [0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y ^ 2, 0, 0, -x * y - y ^ 2, 0, 0, 0, 0, 0, (2 * x * y ^ 3 - 2 * I * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 0], [0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (1 // 2) // (x * y), -I // 2 * x, -x * y + (-I - 1) * y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, -2 * x * y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y, 0, 0], [0, 0, 0, 0, 0, 0, 0, (1 // 2) // y, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 // 2 * x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, I * x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, x ^ 4, -2 * I * x ^ 3 * y ^ 2 - 2 * x ^ 4 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2 * I * x ^ 2 * y ^ 3 + (-2I - 2) * x ^ 3 * y ^ 2) - 2 * I * y ^ 5, 0], [-x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y + y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 5), ((((-2 * I * x * y ^ 5 + 2 * I * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) + 2 * x ^ 5 * y) - 2 * I * y ^ 6, 0], [0, 0, 0, 0, 0, (-1 // 2) // y, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, (-1 // 2 * x + -1 // 2 * y) // y, 0, 0, 0, 0, 0, x * y + (I + 1) * y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y, -x * y ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, x ^ 3, -2 * I * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 2 * I * x * y ^ 2 + 2 * x ^ 2 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y, 0, x ^ 3, -2 * x ^ 3 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 // 2, 0, x + y, 0, 1 // 2 * x ^ 2, -(x ^ 2) * y, 0], [0, 0, 0, 0, 0, 0, -2 * x ^ 2 * y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, I * x ^ 3 * y, (2I + 2) * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 // y, 0, 0, 0, 0, 0, 0, 0, x, x + y]], [[0, 0, -y, 0, 0, 0, 0, 0, 0, 0, x * y + y ^ 2, 0, 0, 2 * x ^ 2 * y ^ 3 + 4 * x ^ 3 * y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2I + 2) * x ^ 2 * y ^ 4 + (2I + 4) * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, x ^ 2 * y + x ^ 3, 0, ((-2 * x ^ 2 * y ^ 4 - 6 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) - 2 * I * x ^ 5 * y, 0, 0, 0, 0, 0, 0, x * y ^ 2, 0, 0, (-2I - 2) * x ^ 2 * y ^ 5 + (-4I - 6) * x ^ 3 * y ^ 4 + (-2I - 6) * x ^ 4 * y ^ 3 + (-2I + 2) * x ^ 6 * y], [x, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, (-2 * x * y - x ^ 2) - y ^ 2, x + y, 2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + (2I - 2) * x ^ 3 * y ^ 2 + 2 * I * x ^ 4 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2I + 2) * x * y ^ 5 + (2I + 4) * x ^ 2 * y ^ 4 + (2I - 4) * x ^ 4 * y ^ 2 + (2I - 2) * x ^ 5 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 0, 0, 0, x * y, 2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 0, 0, 0, 0, (2I + 2) * x * y ^ 4 + (4I + 6) * x ^ 2 * y ^ 3 + (2I + 4) * x ^ 3 * y ^ 2], [0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y ^ 3 + (-2I + 4) * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2I + 2) * x * y ^ 4 + (2I + 8) * x ^ 2 * y ^ 3 + 6 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * I * x ^ 3, 2 * x * y, 0, 0, 0, 0, 0, 0, 0, 0, (-2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) - 2 * I * x ^ 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1 // 2 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, -2 * I * x * y ^ 2 - 2 * I * x ^ 2 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((-2I + 2) * x * y ^ 3 + (-4I + 2) * x ^ 2 * y ^ 2) - 2 * I * x ^ 3 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, I * x, 0, 0, 0, 0, 0, 0, 0, 1 // 2 * y, 0, (I - 1) * x * y + I * x ^ 2], [0, 0, 0, 0, 0, 0, 2x, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, -x - y, 1, 2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * I * x ^ 3 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2I + 2) * x * y ^ 4 + (2I + 4) * x ^ 2 * y ^ 3 + (2I - 2) * x ^ 4 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y, x * y + x ^ 2, 0, (-2 * x ^ 2 * y ^ 3 - 2 * x ^ 3 * y ^ 2) - 2 * I * x ^ 4 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-2I - 2) * x ^ 2 * y ^ 4 + (-2I - 4) * x ^ 3 * y ^ 3 + (-2I + 2) * x ^ 5 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1 // 2, 0, 0, 0, 0, 0, 0, 0, -I * x ^ 2, x + y, 0, 0, 0, 0, 0, 0, 0, 0, (-x * y ^ 2 - x ^ 2 * y) - I * x ^ 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y ^ 2 + 2 * x ^ 2 * y, 0, 0, 0, 0, x * y + y ^ 2, 2 * x * y, 0, 0, 0, (2I + 2) * x * y ^ 3 + (2I + 4) * x ^ 2 * y ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * I * x ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y ^ 2, 2 * I * x ^ 3], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 2 * x * y + x ^ 2 + y ^ 2, 0, 0, 0, 0, -2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y, 0, 0, 0, 0, y, 0, 0, 0, 0, (2I + 2) * x * y ^ 2 + 2 * x ^ 2 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 // 2, 0, 0, 1 // 2 * x + 1 // 2 * y, x + y, 0, 0, 0, -(x ^ 2) * y], [0, -1 // y, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x - y, (x + y) // y, -2 * x ^ 2 * y ^ 2 + (2I - 2) * x ^ 3 * y, 0, 0, 0, 0, 0, 0, x + y, 0, 0, -2 * x ^ 3 * y ^ 2 + (2I - 2) * x ^ 4 * y], [0, 0, 0, 0, 0, 0, 0, 0, -2x, 0, 0, 0, 0, 2 * I * x, 0, 0, 0, 0, 0, 0, 0, x + y, 0, (2I - 2) * x * y + 2 * I * x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (I * x) // y, 0, 0, (-1 // 2) // y, 0, 0, 0, 0, 0, x + y, (I * x ^ 2) // y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x]], [[y, 0, 0, 0, 0, 0, 2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 0, (I + 1) * x * y ^ 4 + (2I + 2) * x ^ 2 * y ^ 3 + (I + 1) * x ^ 3 * y ^ 2 + 2 * I * x ^ 4 * y, I * x * y ^ 4 + 2 * I * x ^ 2 * y ^ 3 + (2I + 1) * x ^ 3 * y ^ 2, 0, 0, 0, (4I + 2) * x ^ 2 * y ^ 3 + (6I + 4) * x ^ 3 * y ^ 2 + 2 * I * x ^ 4 * y, (I + 1) * x * y ^ 3 + 4 * I * x ^ 2 * y ^ 2 + (3I - 1) * x ^ 3 * y, 0, (-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + (-I - 1) * x ^ 3 * y, (-I - 1) * x * y ^ 2 + (-I - 1) // 2 * x ^ 2 * y + (-I - 1) // 2 * y ^ 3, 0, (3I + 3) * x * y ^ 3 + (3I + 3) * x ^ 2 * y ^ 2 + (I + 1) * x ^ 3 * y + (I + 1) * y ^ 4, 0, 0, (I + 1) * x * y ^ 5 + (5I + 1) * x ^ 2 * y ^ 4 + (7I - 1) * x ^ 3 * y ^ 3 + (3I - 1) * x ^ 4 * y ^ 2, (I + 1) * x * y ^ 5 + (7I + 1) * x ^ 2 * y ^ 4 + (13I + 1) * x ^ 3 * y ^ 3 + (11I + 1) * x ^ 4 * y ^ 2 + 2 * I * x ^ 5 * y], [0, y, 0, 0, 0, 0, (-I + 1) * x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + (3I - 1) * x ^ 3 * y ^ 3 + (I - 3) * x ^ 4 * y ^ 2 + (-I - 3) * x ^ 5 * y + (I - 1) * x ^ 6, 0, (((-I - 1) * x ^ 2 * y ^ 4 + (-3I - 3) * x ^ 3 * y ^ 3 + (-3I - 3) * x ^ 4 * y ^ 2) - 2 * I * x ^ 5 * y) + (-I + 1) * x ^ 6, (x * y ^ 5 + (-I + 1) * x ^ 2 * y ^ 4 + (-2I - 2) * x ^ 3 * y ^ 3 + (-2I - 1) * x ^ 4 * y ^ 2) - 2 * I * x ^ 5 * y, 0, 0, 0, (((I + 1) * x * y ^ 5 + (-I + 1) * x ^ 2 * y ^ 4 + (-8I - 4) * x ^ 3 * y ^ 3 + (-8I - 6) * x ^ 4 * y ^ 2) - 2 * I * x ^ 5 * y) + (-I + 1) * x ^ 6, (((-I - 1) * x * y ^ 4 - 4 * I * x ^ 2 * y ^ 3) + (-5I + 3) * x ^ 3 * y ^ 2 + (-3I + 1) * x ^ 4 * y) - 2 * x ^ 5, 0, 2 * x ^ 2 * y ^ 3 + 4 * x ^ 3 * y ^ 2 + (I + 1) * x ^ 4 * y + I * x ^ 5, ((3I + 1) // 2 * x * y ^ 4 + (I + 2) * x ^ 2 * y ^ 3 + (I + 1) // 2 * x ^ 4 * y + x ^ 5 + (I - 1) // 2 * y ^ 5) // y, 0, (((-4 * I * x * y ^ 5 + (-5I - 5) * x ^ 2 * y ^ 4 + (-2I - 4) * x ^ 3 * y ^ 3 + (-I - 1) * x ^ 4 * y ^ 2 + (-I - 3) * x ^ 5 * y) - 2 * x ^ 6) + (-I + 1) * y ^ 6) // y, 0, 0, ((-I - 1) * x * y ^ 6 + (-5I - 1) * x ^ 2 * y ^ 5 + (-9I + 3) * x ^ 3 * y ^ 4 + (-8I + 4) * x ^ 4 * y ^ 3 + (-3I - 1) * x ^ 5 * y ^ 2) - 2 * x ^ 6 * y, (-3I + 1) * x ^ 2 * y ^ 5 + (-12I + 2) * x ^ 3 * y ^ 4 + (-20I - 2) * x ^ 4 * y ^ 3 + (-13I - 5) * x ^ 5 * y ^ 2 + (-3I + 1) * x ^ 6 * y + (-I + 1) * x ^ 7], [0, 0, 0, x * y + x ^ 2, -x * y, 0, (-I - 1) * x * y ^ 4 + (-3I - 3) * x ^ 2 * y ^ 3 + (-I - 1) * x ^ 3 * y ^ 2 + (-I + 1) * x ^ 4 * y + (-I + 1) * x ^ 5, 0, (-I - 1) * x * y ^ 4 + (-I - 1) * x ^ 2 * y ^ 3 + (I + 1) * x ^ 3 * y ^ 2 + (I - 1) * x ^ 5, (-I * x * y ^ 4 - 2 * I * x ^ 2 * y ^ 3) + I * x ^ 3 * y ^ 2 + (2I + 1) * x ^ 4 * y, x * y + x ^ 2, 0, 0, ((I - 1) * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + (-I - 1) * x ^ 3 * y ^ 2 + (I - 1) * x ^ 5, 2 * I * x * y ^ 3 + (3I + 1) * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, -(x ^ 2) * y - x ^ 3, -I * x ^ 4, -x * y ^ 2 + (-I - 2) * x ^ 2 * y + (-I - 3) // 2 * x ^ 3, 0, (2I + 4) * x ^ 2 * y ^ 2 + (3I + 7) * x ^ 3 * y + (I + 3) * x ^ 4, 0, 0, 2 * I * x * y ^ 5 + (5I + 1) * x ^ 2 * y ^ 4 + (3I + 3) * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2, (I - 3) * x * y ^ 5 + (4I - 4) * x ^ 2 * y ^ 4 + (4I + 4) * x ^ 3 * y ^ 3 + (-I + 5) * x ^ 4 * y ^ 2 + (I - 1) * x ^ 5 * y + (I - 1) * x ^ 6], [0, 0, 0, x, 0, 0, (-I - 1) * x * y ^ 3 + (I + 3) * x ^ 3 * y + 2 * x ^ 4, 0, (I + 1) * x * y ^ 3 + (2I + 2) * x ^ 2 * y ^ 2 + (2I + 2) * x ^ 3 * y + 2 * I * x ^ 4, 2 * I * x ^ 2 * y ^ 2 + (2I + 1) * x ^ 3 * y, 0, 0, 0, (3I + 1) * x * y ^ 3 + (8I + 4) * x ^ 2 * y ^ 2 + (6I + 4) * x ^ 3 * y + 2 * I * x ^ 4, 2 * I * x * y ^ 2 + 4 * I * x ^ 2 * y + 2 * I * x ^ 3, -x * y - x ^ 2, ((-3 * x * y ^ 2 - 3 * x ^ 2 * y) + (-I - 1) * x ^ 3) - y ^ 3, (-I - 1) * x * y + (-I - 3) // 2 * x ^ 2, x * y ^ 2 + x ^ 2 * y, (2I + 2) * x * y ^ 2 + (3I + 5) * x ^ 2 * y + (I + 3) * x ^ 3, 0, 0, 2 * I * x * y ^ 4 + 6 * I * x ^ 2 * y ^ 3 + 6 * I * x ^ 3 * y ^ 2 + 2 * I * x ^ 4 * y, (3I - 1) * x * y ^ 4 + (13I - 1) * x ^ 2 * y ^ 3 + (18I + 2) * x ^ 3 * y ^ 2 + (10I + 2) * x ^ 4 * y + 2 * I * x ^ 5], [0, 0, 1, -x - y, x + y, 0, (I + 1) * x * y ^ 3 + (I + 1) * x ^ 2 * y ^ 2 + (2I + 2) * x ^ 3 * y + (I + 1) * x ^ 4, 0, (I + 1) * x * y ^ 3 + (I + 1) * x ^ 2 * y ^ 2 + (2I + 2) * x ^ 3 * y + (I + 1) * x ^ 4, 0, -x - y, 0, 0, (4I + 2) * x * y ^ 3 + (8I + 6) * x ^ 2 * y ^ 2 + (5I + 3) * x ^ 3 * y + (I + 1) * x ^ 4, (I - 1) * x * y ^ 2 + (3I - 1) * x ^ 2 * y + (I - 1) * x ^ 3, 0, ((-3 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 2 * x * y + x ^ 2 + y ^ 2, x * y ^ 2 + x ^ 2 * y, ((-4 * x * y ^ 2 - 4 * x ^ 2 * y) - 2 * x ^ 3) - 2 * y ^ 3, 0, 0, (I - 1) * x * y ^ 4 + (4I - 2) * x ^ 2 * y ^ 3 + (4I - 2) * x ^ 3 * y ^ 2 + (I - 1) * x ^ 4 * y, (3I - 1) * x * y ^ 4 + (12I - 2) * x ^ 2 * y ^ 3 + (15I + 1) * x ^ 3 * y ^ 2 + (7I + 1) * x ^ 4 * y + (I + 1) * x ^ 5], [0, 0, 0, 0, 0, x, (I + 1) * x * y ^ 2 + 2 * x ^ 2 * y, 0, (I + 1) * x * y ^ 2 + (I + 1) * x ^ 2 * y, 2 * I * x * y ^ 2 + (2I + 1) * x ^ 2 * y, 0, 0, 0, (3I + 3) * x * y ^ 2 + (2I + 2) * x ^ 2 * y + (I + 1) * x ^ 3 + (I + 1) * y ^ 3, ((2I + 2) * x * y ^ 2 + (I + 1) * x ^ 2 * y + (I + 1) * x ^ 3 + (I + 1) * y ^ 3) // y, 0, -x * y - y ^ 2, (-I - 3) // 2 * x + (-I - 1) * y, 0, (3I + 5) * x * y + (I + 3) * x ^ 2 + (2I + 2) * y ^ 2, 0, 0, (3I + 3) * x * y ^ 3 + (3I + 3) * x ^ 2 * y ^ 2 + (2I + 2) * x ^ 3 * y + (I + 1) * x ^ 4 + (I + 1) * y ^ 4, (7I + 3) * x * y ^ 3 + (8I + 6) * x ^ 2 * y ^ 2 + (5I + 3) * x ^ 3 * y + (2I + 2) * x ^ 4 + 2 * I * y ^ 4], [0, 0, 0, 0, 0, 0, (-I + 1) // 2 * x + (-I + 1) // 2 * y, 0, (I + 1) // 2 * x, 1 // 2 * y, 0, 0, 0, (I + 1) // 2 * x, 0, 0, -1 // 2, ((I - 1) // 4) // x, 0, ((-I + 1) // 2 * x + (-I + 1) // 2 * y) // x, 0, 0, 0, (I + 1) // 2 * x * y + (I + 1) // 2 * x ^ 2], [0, 0, 0, 0, 0, -x - y, (I + 1) * x * y ^ 2 + (I + 1) * x ^ 2 * y, x + y, (I + 1) * x * y ^ 2 + (-I + 1) * x ^ 2 * y, 0, 0, 0, 0, (2I + 4) * x * y ^ 2 + 4 * x ^ 2 * y, (I + 5) * x * y + (I + 3) * x ^ 2 + 2 * y ^ 2, 0, ((I - 2) * x * y - x ^ 2) - y ^ 2, 0, 0, 0, 1, 0, (I + 5) * x * y ^ 3 + (2I + 6) * x ^ 2 * y ^ 2 + (I + 3) * x ^ 3 * y + 2 * y ^ 4, (3I + 3) * x * y ^ 3 + (4I + 8) * x ^ 2 * y ^ 2 + (I + 5) * x ^ 3 * y], [0, 0, 0, 0, 0, 0, (-I + 1) // 2 * x, 0, (I + 1) // 2 * x, 0, 0, 0, 0, -x, ((-I - 1) // 2 * x) // y, 0, -I // 2, 0, 0, 0, 0, 0, (-I - 1) // 2 * x * y + (-I - 1) // 2 * x ^ 2, (-I - 1) // 2 * x * y + (-I - 3) // 2 * x ^ 2], [0, 0, 0, 0, 0, 0, 2 * I * x, 0, (-I - 1) * x, 0, 0, 0, 0, (-I - 1) * x, 0, 0, 1, ((-I + 1) // 2) // y, 0, ((I - 1) * x + (I - 1) * y) // y, 0, 0, 0, (-I - 1) * x * y + (-I - 1) * x ^ 2], [0, 0, 0, 0, 0, 0, 2 * x ^ 3 * y + (-I + 1) * x ^ 4, 0, (I + 1) * x ^ 2 * y ^ 2 + (I + 1) * x ^ 3 * y + (I - 1) * x ^ 4, I * x ^ 2 * y ^ 2 + (2I + 1) * x ^ 3 * y, x, 0, 0, 2 * I * x * y ^ 3 + (4I + 2) * x ^ 2 * y ^ 2 + (I + 1) * x ^ 3 * y + (I - 1) * x ^ 4, 2 * I * x * y ^ 2 + (3I + 1) * x ^ 2 * y, 0, (-x * y ^ 2 - x ^ 2 * y) - I * x ^ 3, (-I - 1) // 2 * x * y + (-I - 3) // 2 * x ^ 2, 0, (I + 1) * x * y ^ 2 + (2I + 4) * x ^ 2 * y + (I + 3) * x ^ 3, 0, 0, 2 * I * x * y ^ 4 + (5I + 1) * x ^ 2 * y ^ 3 + (3I + 1) * x ^ 3 * y ^ 2, (2I - 2) * x * y ^ 4 + (9I - 1) * x ^ 2 * y ^ 3 + (8I + 4) * x ^ 3 * y ^ 2 + 2 * I * x ^ 4 * y + (I - 1) * x ^ 5], [0, 0, 0, 0, 0, 0, ((I - 1) * x ^ 2 * y ^ 2 - 2 * I * x ^ 3 * y) + (-I + 1) * y ^ 4, 0, 0, (I - 1) * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 0, x + y, -1, 0, ((2I + 2) * x * y ^ 2 + (2I + 2) * x ^ 2 * y) - 2 * x ^ 3, 0, 0, (((-3I - 1) // 2 * x ^ 2 * y ^ 2 - x ^ 3 * y) + x ^ 4 + (I - 1) // 2 * y ^ 4) // (x * y), 0, ((((-I + 1) * x * y ^ 4 + (3I + 1) * x ^ 2 * y ^ 3 + (3I + 3) * x ^ 3 * y ^ 2) - 2 * x ^ 5) + (-I + 1) * y ^ 5) // (x * y), 0, 0, ((2I + 2) * x * y ^ 4 + (4I + 4) * x ^ 2 * y ^ 3 + 2 * I * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 2 * I * x * y ^ 4 + (4I + 2) * x ^ 2 * y ^ 3 + (2I + 2) * x ^ 3 * y ^ 2], [0, 0, 0, 0, 0, 0, (-I + 1) * x * y ^ 4 + 2 * I * x ^ 2 * y ^ 3 + (-2I - 2) * x ^ 4 * y + (I - 1) * x ^ 5 + (-I + 1) * y ^ 5, 0, (-I - 1) * x ^ 3 * y ^ 2 + (-I - 1) * x ^ 4 * y + (-I + 1) * x ^ 5, ((x * y ^ 4 + (I - 1) * x ^ 2 * y ^ 3) - 2 * I * x ^ 4 * y) + y ^ 5, 0, x * y, 0, (I + 1) * x * y ^ 4 + (-I + 1) * x ^ 2 * y ^ 3 + (-4I - 2) * x ^ 3 * y ^ 2 + (-I - 1) * x ^ 4 * y + (-I + 1) * x ^ 5, ((I + 1) * x * y ^ 3 + (I + 3) * x ^ 2 * y ^ 2 + (-I + 1) * x ^ 3 * y) - 2 * x ^ 4, 0, x ^ 2 * y ^ 2 + x ^ 3 * y + I * x ^ 4, (((I - 1) // 2 * x * y ^ 4 - I * x ^ 2 * y ^ 3) + (-I - 1) // 2 * x ^ 3 * y ^ 2 + (I + 1) // 2 * x ^ 4 * y + x ^ 5 + (I - 1) // 2 * y ^ 5) // (x * y), 0, ((((-2I + 2) * x * y ^ 5 + (I + 1) * x ^ 2 * y ^ 4 + (3I + 1) * x ^ 3 * y ^ 3 + (-I - 3) * x ^ 5 * y) - 2 * x ^ 6) + (-I + 1) * y ^ 6) // (x * y), 0, 0, ((I + 1) * x * y ^ 5 + (2I + 4) * x ^ 2 * y ^ 4 + 4 * x ^ 3 * y ^ 3 + (-I - 1) * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y, ((2 * I * x * y ^ 5 + (4I + 4) * x ^ 2 * y ^ 4 + (-3I + 5) * x ^ 3 * y ^ 3 + (-6I - 2) * x ^ 4 * y ^ 2) - 2 * I * x ^ 5 * y) + (-I + 1) * x ^ 6], [0, 0, 0, 0, 0, 0, (I + 1) // 2 * x + I * y, 0, 0, I // 2 * x + (I - 1) // 2 * y, 0, 0, 0, (I + 1) * x + (I + 1) // 2 * y, (I * x + (I + 1) // 2 * y) // y, 0, 0, ((-I - 1) // 4 * x + -I // 2 * y) // (x * y), 0, ((3I + 1) // 2 * x * y + (I + 1) // 2 * x ^ 2 + I * y ^ 2) // (x * y), 0, 0, (3I + 1) // 2 * x * y + I * x ^ 2 + (I + 1) // 2 * y ^ 2, 2 * I * x * y + 2 * I * x ^ 2 + I * y ^ 2], [0, 0, 0, 0, 0, 0, (I + 1) * x * y + (I + 1) // 2 * y ^ 2, 0, (I + 1) // 2 * x * y + (I + 1) // 2 * y ^ 2, I * x * y + I // 2 * y ^ 2, 0, 0, 0, (I + 1) * x * y + (I + 1) // 2 * x ^ 2 + (I + 1) * y ^ 2, ((I + 1) // 2 * x * y + (I - 1) // 2 * x ^ 2 + (I + 1) // 2 * y ^ 2) // y, 0, 0, (-I - 1) // 4, 0, (I + 1) // 2 * x + (I + 1) // 2 * y, 0, 0, I * x * y ^ 2 + I * x ^ 2 * y + (I - 1) // 2 * x ^ 3 + (I - 1) // 2 * y ^ 3, (3I + 1) * x * y ^ 2 + (5I - 1) // 2 * x ^ 2 * y + I * x ^ 3 + (3I + 1) // 2 * y ^ 3], [0, 0, 0, 0, 0, 0, 2 * x ^ 2 * y + 2 * x ^ 3, 0, (I + 1) * x * y ^ 2 + (I + 1) * x ^ 2 * y + 2 * I * x ^ 3, I * x * y ^ 2 + (2I + 1) * x ^ 2 * y, 0, 0, 0, (3I + 1) * x * y ^ 2 + (5I + 3) * x ^ 2 * y + 2 * I * x ^ 3, 2 * I * x * y + 2 * I * x ^ 2, 0, (-2 * x * y + (-I - 1) * x ^ 2) - y ^ 2, (-I - 3) // 2 * x + (-I - 1) // 2 * y, x * y, (2I + 4) * x * y + (I + 3) * x ^ 2 + (I + 1) * y ^ 2, 0, 0, 2 * I * x * y ^ 3 + 4 * I * x ^ 2 * y ^ 2 + 2 * I * x ^ 3 * y, (3I - 1) * x * y ^ 3 + 10 * I * x ^ 2 * y ^ 2 + (9I + 1) * x ^ 3 * y + 2 * I * x ^ 4], [0, 0, 0, 0, 0, 0, (I - 1) * x * y, 0, (-I - 1) * x * y, (-I - 1) * x * y, 0, 0, 0, (-I - 1) * x * y + (-I - 1) * x ^ 2, ((-I - 1) * x ^ 2) // y, 0, x + y, 1, 0, -2x - 2y, 0, 0, (-I - 1) * x ^ 2 * y + (-I - 1) * x ^ 3, (-I - 1) * x * y ^ 2 + (-3I - 1) * x ^ 2 * y + (-2I - 2) * x ^ 3], [0, 0, 0, 0, 0, 0, (I + 1) * x * y ^ 2 + (I + 1) * x ^ 2 * y + (-I + 1) * x ^ 3 + (I + 1) * y ^ 3, 0, (I + 1) * x * y ^ 2 + (I - 1) * x ^ 3 + (I + 1) * y ^ 3, 2 * I * x * y ^ 2 + 2 * I * x ^ 2 * y + I * y ^ 3, 0, 0, 0, (2I + 2) * x * y ^ 2 + (I + 1) * x ^ 2 * y + (I - 1) * x ^ 3 + (I + 1) * y ^ 3, (I + 1) * x * y + (I + 1) * x ^ 2, 0, -I * x ^ 2, ((-I - 1) // 2 * x * y - x ^ 2) // y, 0, ((I + 3) * x * y ^ 2 + (I + 3) * x ^ 2 * y + 2 * x ^ 3 + 2 * y ^ 3) // y, 0, 0, (I + 1) * x * y ^ 3 + (2I + 2) * x ^ 2 * y ^ 2 + (I + 1) * x ^ 3 * y, (4I + 2) * x * y ^ 3 + (5I + 1) * x ^ 2 * y ^ 2 + (3I - 1) * x ^ 3 * y + (I - 1) * x ^ 4 + (I + 1) * y ^ 4], [0, 0, 0, 0, 0, 0, (I + 1) * x ^ 2, 0, (I + 1) * x ^ 2, 0, 0, 0, 0, (3I + 1) * x * y + (I + 1) * x ^ 2, (I - 1) * x, -1, -x - y, 0, x + y, 0, 0, 0, (I - 1) * x * y ^ 2 + (I - 1) * x ^ 2 * y, (2I - 2) * x * y ^ 2 + (5I - 1) * x ^ 2 * y + (I + 1) * x ^ 3], [0, 0, 0, 0, 0, 0, (I + 1) // 2 * x * y + (-I + 1) // 2 * x ^ 2 + (I + 1) // 2 * y ^ 2, 0, (I - 1) // 2 * x ^ 2 + (I + 1) // 2 * y ^ 2, I * x * y + I // 2 * y ^ 2, 0, 0, 0, (I + 1) // 2 * x * y + (I - 1) // 2 * x ^ 2 + (I + 1) // 2 * y ^ 2, (I + 1) // 2 * x, 0, -I // 2 * x, (-1 // 2 * x + (-I - 1) // 4 * y) // y, 0, ((I + 3) // 2 * x * y + x ^ 2 + (I + 3) // 2 * y ^ 2) // y, 0, 0, (I + 1) // 2 * x * y ^ 2 + (I + 1) // 2 * x ^ 2 * y, (3I + 1) // 2 * x * y ^ 2 + (3I - 1) // 2 * x ^ 2 * y + (I - 1) // 2 * x ^ 3 + (I + 1) // 2 * y ^ 3], [0, 0, 0, 0, 0, x * y + x ^ 2, (-I - 1) * x * y ^ 3 + (-I - 3) * x ^ 2 * y ^ 2 + (I - 1) * x ^ 3 * y, -x * y, (-I - 1) * x * y ^ 3 + (-2I - 2) * x ^ 2 * y ^ 2 + (-I - 1) * x ^ 3 * y, -I * x * y ^ 3 + (-I - 1) * x ^ 2 * y ^ 2, 0, 0, 0, (-I - 1) * x * y ^ 3 + (-3I - 3) * x ^ 2 * y ^ 2 + (-3I - 3) * x ^ 3 * y, (-2 * x * y ^ 2 + (-I - 1) * x ^ 2 * y) - 2 * I * x ^ 3, 0, x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3, (-I + 1) // 2 * x * y, 0, (I - 1) * x * y ^ 2 + (I - 1) * x ^ 2 * y, 0, 0, ((-I - 1) * x ^ 2 * y ^ 3 + (-3I - 1) * x ^ 3 * y ^ 2) - 2 * I * x ^ 4 * y, (-I - 1) * x * y ^ 4 + (-3I - 1) * x ^ 2 * y ^ 3 + (-7I + 1) * x ^ 3 * y ^ 2 + (-5I - 1) * x ^ 4 * y], [0, 0, 0, 0, 0, 0, (I - 1) * x - 2y, 0, (I - 1) * x - 2y, -x - y, 0, 0, 0, (2I - 4) * x - 2y, ((-I - 1) * x) // y, 0, -I, 0, 0, 0, 0, y, (-I - 1) * x * y + (-I - 1) * x ^ 2, ((-I - 5) * x * y + (-I - 5) * x ^ 2) - 2 * y ^ 2], [0, 0, 0, 0, 0, 0, (-I - 1) // 2, 0, (-I - 1) // 2, -I // 2, 0, 0, 0, ((-I - 1) // 2 * x + (-I - 1) // 2 * y) // y, ((-I + 1) // 2 * x) // y ^ 2, 0, 0, 0, 0, 0, 0, 0, ((-I + 1) // 2 * x * y + (-I + 1) // 2 * x ^ 2 + y ^ 2) // y, (((-3I + 1) // 2 * x * y - I * x ^ 2) + (-I - 1) // 2 * y ^ 2) // y], [0, 0, 0, 0, 0, 0, (-I - 1) // 2, 0, 0, -I // 2, 0, 0, 0, (-I - 1) // 2, ((-I - 1) // 2) // y, 0, 0, ((I + 1) // 4) // (x * y), 0, ((-I - 1) // 2 * x + (-I - 1) // 2 * y) // (x * y), 0, 0, (-I - 1) // 2 * x + (-I - 1) // 2 * y, -I * x - I * y]]]
            end
        f37 = function (x, y)
                return [[[0, 0, x * y, x * y + x ^ 2, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 0, 0, 0, 0, 0, (-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y + x ^ 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y ^ 2 + x ^ 3 * y], [-1, 0, x + y, x + y, 0, 0, 0, 0, -x * y - y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y ^ 2 - x ^ 3 * y, 0, 0, 0, 0, 0, x ^ 3 * y + x ^ 4], [0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y + x ^ 2 + y ^ 2, 0, 0, 0, 0, 0, -x * y - x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 0, 0, 0, 0, 0, x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3], [0, 1, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, -x * y - y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 2 - y ^ 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, -x * y - y ^ 2, 0, 0, 0, 0, 0, x * y + x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, x + y, -1 - x ^ -1 * y, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, -x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, x + y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ -1), 0, 0, 0, 0, 0, 0, x + y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, -(x ^ 3) * y ^ 2 - x ^ 4 * y, 0, 0, x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 0, 0, 0, 0, 0, 0, x ^ 3 * y + x ^ 4, 0, 2 * x ^ 2 * y ^ 3 + 4 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 0, 0, 0, 0, (-2 * x ^ 4 * y ^ 2 - 3 * x ^ 5 * y) - x ^ 6, 0], [0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 0, 0, ((2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 0, 0, -(x ^ 3) * y ^ 2 - x ^ 4 * y, ((-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, ((-x * y ^ 4 - 4 * x ^ 2 * y ^ 3) - 5 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 0], [0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2) * y ^ 2 - x ^ 3 * y, 0, 0, x ^ 2 * y + x ^ 3, 0, 0, 0, 0, 0, 0, x ^ 3, 0, x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 0, 0, 0, 0, (-(x ^ 3) * y ^ 2 - 2 * x ^ 4 * y) - x ^ 5, 0], [0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 0, 0, 0, 0, 0, (-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, x * y ^ 2 + x ^ 2 * y, 0, 2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 0, 0, 0, x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 0, x * y, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y, x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 0], [0, 0, 0, 0, -1, 0, x + y, 0, 0, 0, 0, 0, 0, 0, x * y + y ^ 2, 0, 0, 0, 0, 0, (-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 0, 0, x * y ^ 2 + x ^ 2 * y, 0, 0, 0, 2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 0], [0, 0, 0, 0, 0, 0, 0, x + y, 1, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -x * y, 0, 0, 0, 0, 0, 0, x * y + x ^ 2, 0, 0, 0, 0, 0, 0, x ^ 2, 0, x * y ^ 2 + x ^ 2 * y, 0, 0, 0, 0, -(x ^ 3) * y - x ^ 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, 0, 0, 0, ((-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 0, 0, 0, 0, 0, x ^ 2 * y ^ 2 + x ^ 3 * y, x * y ^ 2 + x ^ 2 * y + y ^ 3, 3 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + y ^ 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, (-2 * x * y - x ^ 2) - y ^ 2, 0, 0, 0, 0, 0, 0, x * y + y ^ 2, 3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y + x ^ 3, 0, 0, 0, 0, 0, -(x ^ 2) * y ^ 2 - x ^ 3 * y, 0, (-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, x ^ 2 * y + x ^ 3, 0, 0, 0, 0, 0, -(x ^ 2) * y ^ 2 - x ^ 3 * y, 0, (-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, x, 0, x * y + y ^ 2, 0, 0, 0, 0, -(x ^ 2) * y - x ^ 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, x + y, 0, 0, 0, 0, -x - y, 0, 0, 0, 0, 0, 0, 0, x * y + y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, x * y + x ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, x * y + x ^ 2, 0, 0, y ^ 2, 0, 0, 0, -x * y - y ^ 2, (-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, -2 * x ^ 2 * y - 2 * x ^ 3, 0, 0, (-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 0, 0, x * y ^ 3 + x ^ 4 + y ^ 4, 2 * x * y ^ 2 + 2 * x ^ 2 * y, 2 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + 2 * x ^ 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, x ^ 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, -y, -x * y - y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, 0, 0, 0, 0, -x * y - y ^ 2, 0, 0, 0, 0, x ^ 2 * y + x ^ 3, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y - x ^ 2, 0, x + y, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, 0, 0, 0, x * y + x ^ 2, -y], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, y, -x * y - y ^ 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, -x * y - x ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, x, 0, x + y]], [[y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 0, ((x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y) - x ^ 5, 0, (-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y + x ^ 5, 0, 0, ((x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y) - x ^ 6, 0], [0, 0, 0, 0, -y, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2 + y ^ 3, 0, 0, 0, 0, 0, 0, 0, 0, ((x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 0, x ^ 2 * y ^ 2 + x ^ 3 * y, 0, 0, (-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 0], [0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y + x ^ 3, 0, ((x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 0, x ^ 3 * y + x ^ 4, 0, 0, -(x ^ 4) * y - x ^ 5, 0], [0, x, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0, 0, 0, 0, 0, 0, 2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 0, -x * y ^ 3 - x ^ 2 * y ^ 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, x + y, 0, 0, 0, -x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, x * y + x ^ 2, 0, -x * y - x ^ 2, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y + x ^ 2, 0, -(x ^ 2) * y - x ^ 3, 0, x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 0, 0, -(x ^ 3) * y - x ^ 4, 0], [0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(x ^ 2), 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0, 0, 0, 0, 0, 0, x * y ^ 3 + x ^ 2 * y ^ 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, x + y, 0, 0, 0, 0, 0, -x * y ^ 2 - x ^ 2 * y, 0, 0, 0, 0, 0, 0, x * y ^ 3 + x ^ 2 * y ^ 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, x + y, 0, -x * y - x ^ 2, 0, x * y + x ^ 2, 0, 0, -(x ^ 2) * y - x ^ 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y + x ^ 2, -y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, -x * y ^ 2 - y ^ 3, 0, x * y ^ 2 + x ^ 2 * y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, -x * y - y ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y + x ^ 2, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, -x, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, -1, 0, x + y, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x * y - x ^ 2, x + y, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y]], [[0, -x * y, 0, x * y + y ^ 2, 0, 0, x ^ 2 * y + x ^ 3, 0, 0, 0, (-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, (-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y], [1, x + y, 0, -x - y, 0, 0, x * y + y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, -x * y ^ 2 - x ^ 2 * y, (-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 3 + x ^ 2 * y ^ 2], [0, 0, 0, y, 0, 0, x * y + x ^ 2, 0, 0, 0, -(x ^ 2) * y - x ^ 3, -(x ^ 2) * y ^ 2 - x ^ 3 * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x ^ 2 * y ^ 2 + x ^ 3 * y], [0, 0, 0, 0, y, 0, x ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, y, 0, 0, 0, 0, x ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * x * y + x ^ 2 + y ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, -x * y - x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y ^ 2 + x ^ 2 * y], [0, 0, -1, 0, 0, 0, 0, 0, 0, x + y, -x * y - y ^ 2, -x * y ^ 2 - y ^ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y + y ^ 2, 0, -y, 0, 0, 0, 0, 0, -(x ^ 2) * y - x ^ 3, -x * y ^ 2 - y ^ 3, 0, -x * y ^ 2 - x ^ 2 * y, 0, -x * y ^ 2 - x ^ 2 * y], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -x * y - y ^ 2, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -y, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -x - y, 0, 0, 0, x * y + y ^ 2, -x * y ^ 2 - x ^ 2 * y, 0, x, 0, 0, -x * y - x ^ 2, 0, x + y, 0, 0, 0, 0, 0, x ^ 2 * y + x ^ 3, x * y ^ 2 + x ^ 2 * y, 0, x * y ^ 2 + x ^ 2 * y, 0, x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, -x * y, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x * y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, y ^ -1, 0, 0, 0, -1 - x * y ^ -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x + y, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]
            end
        rep = [[f1, x], [f1, y], [f3, x, y], [f3, y, x], [f5, x, y, E(4)], [f5, y, x, E(4)], [f5, x, y, -(E(4))], [f5, y, x, -(E(4))], [f9, x, y], [f9, y, x], [f11, x, y], [f12, x, y], [f12, y, x], [f14, x, y, E(4)], [f14, x, y, -(E(4))], [f17, y, x], [f17, x, y], [f18, y, x], [f18, x, y], [f22, x, y], [f21, x, y], [f22, y, x], [f21, y, x], [f27, y, x, 1], [f27, x, y, 1], [f27, y, x, -1], [f27, x, y, -1], [f28, x, y], [f28, y, x], [f30, x, y, E(4)], [f30, y, x, E(4)], [f30, x, y, -(E(4))], [f30, y, x, -(E(4))], [f34, x, y], [f35, x, y, E(4)], [f35, x, y, -(E(4))], [f37, x, y]]
        return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])]) + 0 * Product(para[1])
    end)
(CHEVIE[:families])[:F20] = Dict{Symbol, Any}(:name => "Q(F_{20})", :explanation => "DrinfeldDouble(Frobenius group size 20)", :x => [Perm(), Perm(), Perm(), Perm(), Perm(), #= none:10 =# @perm_str("(2,3,5,4)"), #= none:10 =# @perm_str("(2,3,5,4)"), #= none:10 =# @perm_str("(2,3,5,4)"), #= none:10 =# @perm_str("(2,3,5,4)"), #= none:11 =# @perm_str("(2,4,5,3)"), #= none:11 =# @perm_str("(2,4,5,3)"), #= none:11 =# @perm_str("(2,4,5,3)"), #= none:11 =# @perm_str("(2,4,5,3)"), #= none:11 =# @perm_str("(2,5)(3,4)"), #= none:11 =# @perm_str("(2,5)(3,4)"), #= none:12 =# @perm_str("(2,5)(3,4)"), #= none:12 =# @perm_str("(2,5)(3,4)"), #= none:12 =# @perm_str("(1,2,3,4,5)"), #= none:12 =# @perm_str("(1,2,3,4,5)"), #= none:12 =# @perm_str("(1,2,3,4,5)"), #= none:12 =# @perm_str("(1,2,3,4,5)"), #= none:13 =# @perm_str("(1,2,3,4,5)")], :charLabels => ["(1,1)", "(1,-1)", "(1,i)", "(1,-i)", "(1,\\rho)", "(g_4^3,1)", "(g_4^3,-1)", "(g_4^3,-i)", "(g_4^3,i)", "(g_4,1)", "(g_4,-1)", "(g_4,-i)", "(g_4,i)", "(g_4^2,1)", "(g_4^2,-1)", "(g_4^2,-i)", "(g_4^2,i)", "(g_5,1)", "(g_5,\\zeta_5)", "(g_5,\\zeta_5^2)", "(g_5,\\zeta_5^3)", "(g_5,\\zeta_5^4)"], :eigenvalues => [1, 1, 1, 1, 1, 1, -1, E(4), -(E(4)), 1, -1, -(E(4)), E(4), 1, 1, -1, -1, 1, E(5), E(5, 2), E(5, 3), E(5, 4)], :mellin => ApplyFunc(DiagonalMat, [[[1, 1, 1, 1, 4], [1, -1, -(E(4)), E(4), 0], [1, -1, E(4), -(E(4)), 0], [1, 1, -1, -1, 0], [1, 1, 1, 1, -1]], [[1, 1, 1, 1], [1, -1, E(4), -(E(4))], [1, -1, -(E(4)), E(4)], [1, 1, -1, -1]], [[1, 1, 1, 1], [1, -1, E(4), -(E(4))], [1, -1, -(E(4)), E(4)], [1, 1, -1, -1]], [[1, 1, 1, 1], [1, -1, E(4), -(E(4))], [1, -1, -(E(4)), E(4)], [1, 1, -1, -1]], [[1, 1, 1, 1, 1], [1, E(5), E(5, 2), E(5, 3), E(5, 4)], [1, E(5, 2), E(5, 4), E(5), E(5, 3)], [1, E(5, 3), E(5), E(5, 4), E(5, 2)], [1, E(5, 4), E(5, 3), E(5, 2), E(5)]]]), :group => Group(#= none:27 =# @perm_str("(1,2,3,4,5)"), #= none:27 =# @perm_str("(2,4,5,3)")), :fourierMat => [[1, 1, 1, 1, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4], [1, 1, 1, 1, 4, -5, -5, -5, -5, -5, -5, -5, -5, 5, 5, 5, 5, 4, 4, 4, 4, 4], [1, 1, 1, 1, 4, -5 * E(4), -5 * E(4), -5 * E(4), -5 * E(4), 5 * E(4), 5 * E(4), 5 * E(4), 5 * E(4), -5, -5, -5, -5, 4, 4, 4, 4, 4], [1, 1, 1, 1, 4, 5 * E(4), 5 * E(4), 5 * E(4), 5 * E(4), -5 * E(4), -5 * E(4), -5 * E(4), -5 * E(4), -5, -5, -5, -5, 4, 4, 4, 4, 4], [4, 4, 4, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, -4, -4, -4, -4], [5, -5, -5 * E(4), 5 * E(4), 0, 5, -5, 5 * E(4), -5 * E(4), 5, -5, 5 * E(4), -5 * E(4), 5, -5, 5 * E(4), -5 * E(4), 0, 0, 0, 0, 0], [5, -5, -5 * E(4), 5 * E(4), 0, -5, 5, -5 * E(4), 5 * E(4), -5, 5, -5 * E(4), 5 * E(4), 5, -5, 5 * E(4), -5 * E(4), 0, 0, 0, 0, 0], [5, -5, -5 * E(4), 5 * E(4), 0, 5 * E(4), -5 * E(4), -5, 5, -5 * E(4), 5 * E(4), 5, -5, -5, 5, -5 * E(4), 5 * E(4), 0, 0, 0, 0, 0], [5, -5, -5 * E(4), 5 * E(4), 0, -5 * E(4), 5 * E(4), 5, -5, 5 * E(4), -5 * E(4), -5, 5, -5, 5, -5 * E(4), 5 * E(4), 0, 0, 0, 0, 0], [5, -5, 5 * E(4), -5 * E(4), 0, 5, -5, -5 * E(4), 5 * E(4), 5, -5, -5 * E(4), 5 * E(4), 5, -5, -5 * E(4), 5 * E(4), 0, 0, 0, 0, 0], [5, -5, 5 * E(4), -5 * E(4), 0, -5, 5, 5 * E(4), -5 * E(4), -5, 5, 5 * E(4), -5 * E(4), 5, -5, -5 * E(4), 5 * E(4), 0, 0, 0, 0, 0], [5, -5, 5 * E(4), -5 * E(4), 0, 5 * E(4), -5 * E(4), 5, -5, -5 * E(4), 5 * E(4), -5, 5, -5, 5, 5 * E(4), -5 * E(4), 0, 0, 0, 0, 0], [5, -5, 5 * E(4), -5 * E(4), 0, -5 * E(4), 5 * E(4), -5, 5, 5 * E(4), -5 * E(4), 5, -5, -5, 5, 5 * E(4), -5 * E(4), 0, 0, 0, 0, 0], [5, 5, -5, -5, 0, 5, 5, -5, -5, 5, 5, -5, -5, 5, 5, -5, -5, 0, 0, 0, 0, 0], [5, 5, -5, -5, 0, -5, -5, 5, 5, -5, -5, 5, 5, 5, 5, -5, -5, 0, 0, 0, 0, 0], [5, 5, -5, -5, 0, 5 * E(4), 5 * E(4), -5 * E(4), -5 * E(4), -5 * E(4), -5 * E(4), 5 * E(4), 5 * E(4), -5, -5, 5, 5, 0, 0, 0, 0, 0], [5, 5, -5, -5, 0, -5 * E(4), -5 * E(4), 5 * E(4), 5 * E(4), 5 * E(4), 5 * E(4), -5 * E(4), -5 * E(4), -5, -5, 5, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, -4, -4, -4, -4], [4, 4, 4, 4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 6 - 2 * ER(5), -4 - 4 * ER(5), -4 + 4 * ER(5), 6 + 2 * ER(5)], [4, 4, 4, 4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, -4 - 4 * ER(5), 6 + 2 * ER(5), 6 - 2 * ER(5), -4 + 4 * ER(5)], [4, 4, 4, 4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, -4 + 4 * ER(5), 6 - 2 * ER(5), 6 + 2 * ER(5), -4 - 4 * ER(5)], [4, 4, 4, 4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 6 + 2 * ER(5), -4 + 4 * ER(5), -4 - 4 * ER(5), 6 - 2 * ER(5)]] // 20, :special => 1)
chevieset(:G29, :UnipotentCharacters, function ()
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:4, :rank => 4, :ST => 29), :levi => [], :parameterExponents => [1, 1, 1, 1], :charNumbers => 1:37, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [4, 1], :rank => 2, :p => 4, :q => 1), :levi => 2:3, :parameterExponents => [[2, 2, 0, 0], 3], :charNumbers => [60, 43, 47, 50, 61, 49, 48, 66, 63, 67, 38, 39, 44, 45], :eigenvalue => -1, :cuspidalName => "B_2"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1], :rank => 1, :p => 4, :q => 1), :levi => 2:4, :parameterExponents => [[6, 1, 0, 1]], :charNumbers => [40, 53, 62, 52], :eigenvalue => E(4), :cuspidalName => "G_{4,4,3}[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1], :rank => 1, :p => 4, :q => 1), :levi => 2:4, :parameterExponents => [[6, 5, 0, 5]], :charNumbers => [46, 51, 68, 54], :eigenvalue => -(E(4)), :cuspidalName => "G_{4,4,3}[-i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [55], :eigenvalue => 1, :cuspidalName => "G_{29}[1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [56], :eigenvalue => E(5), :cuspidalName => "G_{29}[\\zeta_5]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [57], :eigenvalue => E(5, 2), :cuspidalName => "G_{29}[\\zeta_5^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [58], :eigenvalue => E(5, 3), :cuspidalName => "G_{29}[\\zeta_5^3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [59], :eigenvalue => E(5, 4), :cuspidalName => "G_{29}[\\zeta_5^4]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [41], :eigenvalue => E(8), :cuspidalName => "G_{29}[\\zeta_8]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [64], :eigenvalue => E(8, 3), :cuspidalName => "G_{29}[\\zeta_8^3]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [42], :eigenvalue => E(8, 5), :cuspidalName => "G_{29}[\\zeta_8^5]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [65], :eigenvalue => E(8, 7), :cuspidalName => "G_{29}[\\zeta_8^7]", :qEigen => 1 // 2)], :families => [Family("C1", [1]), Family(ComplexConjugate(((CHEVIE[:families])[:X])(4)), [5, 3, 7, 39, 40, 38], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, -1, -1], :ennola => 3)), Family("C1", [17]), ComplexConjugate(Family("Z4", [42, 27, 41, 25], Dict{Symbol, Any}(:signs => [1, -1, -1, 1], :ennola => 1))), Family("C2", [21, 9, 19, 43], Dict{Symbol, Any}(:ennola => 1)), Family("C1", [20]), Family(((CHEVIE[:families])[:X])(4), [31, 28, 33, 45, 46, 44], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, -1, -1], :ennola => 4)), Family("F20", [34, 55, 15, 14, 13, 35, 48, 52, 51, 36, 47, 54, 53, 37, 11, 49, 50, 12, 56, 57, 58, 59], Dict{Symbol, Any}(:signs => [1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], :ennola => 2)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(4)), [30, 29, 32, 61, 62, 60], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, -1, -1], :ennola => 4)), Family("C1", [22]), Family("C2", [23, 10, 18, 63], Dict{Symbol, Any}(:ennola => 1)), Family("Z4", [64, 26, 65, 24], Dict{Symbol, Any}(:signs => [-1, 1, 1, -1], :ennola => 1)), Family("C1", [16]), Family(((CHEVIE[:families])[:X])(4), [6, 4, 8, 67, 68, 66], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, -1, -1], :ennola => 3)), Family("C1", [2])], :a => [0, 40, 1, 21, 1, 21, 1, 21, 4, 12, 6, 6, 6, 6, 6, 18, 2, 12, 4, 4, 4, 12, 12, 13, 3, 13, 3, 5, 9, 9, 5, 9, 5, 6, 6, 6, 6, 1, 1, 1, 3, 3, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 12, 13, 13, 21, 21, 21], :A => [0, 40, 19, 39, 19, 39, 19, 39, 28, 36, 34, 34, 34, 34, 34, 38, 22, 36, 28, 28, 28, 36, 36, 37, 27, 37, 27, 31, 35, 35, 31, 35, 31, 34, 34, 34, 34, 19, 19, 19, 27, 27, 28, 31, 31, 31, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 36, 37, 37, 39, 39, 39])
    end)
chevieset(:G29, :Invariants, [function (x1, x2, x3, x4)
            return (((((-6 * x1 ^ 2 * x2 ^ 2 - 6 * x1 ^ 2 * x3 ^ 2) - 6 * x1 ^ 2 * x4 ^ 2) - 6 * x2 ^ 2 * x3 ^ 2) - 6 * x2 ^ 2 * x4 ^ 2) - 6 * x3 ^ 2 * x4 ^ 2) + x1 ^ 4 + x2 ^ 4 + x3 ^ 4 + x4 ^ 4
        end, function (x1, x2, x3, x4)
            return (((((((((((((152 * x1 ^ 2 * x2 ^ 2 * x3 ^ 2 * x4 ^ 2 - 20 * x1 ^ 2 * x2 ^ 2 * x3 ^ 4) - 20 * x1 ^ 2 * x2 ^ 2 * x4 ^ 4) - 20 * x1 ^ 2 * x3 ^ 2 * x4 ^ 4) - 20 * x2 ^ 2 * x3 ^ 2 * x4 ^ 4) - 20 * x1 ^ 2 * x2 ^ 4 * x3 ^ 2) - 20 * x1 ^ 2 * x2 ^ 4 * x4 ^ 2) - 20 * x1 ^ 2 * x3 ^ 4 * x4 ^ 2) - 20 * x2 ^ 2 * x3 ^ 4 * x4 ^ 2) + 4 * x1 ^ 2 * x2 ^ 6 + 4 * x1 ^ 2 * x3 ^ 6 + 4 * x1 ^ 2 * x4 ^ 6 + 4 * x2 ^ 2 * x3 ^ 6 + 4 * x2 ^ 2 * x4 ^ 6 + 4 * x3 ^ 2 * x4 ^ 6) - 20 * x1 ^ 4 * x2 ^ 2 * x3 ^ 2) - 20 * x1 ^ 4 * x2 ^ 2 * x4 ^ 2) - 20 * x1 ^ 4 * x3 ^ 2 * x4 ^ 2) - 20 * x2 ^ 4 * x3 ^ 2 * x4 ^ 2) + 6 * x1 ^ 4 * x2 ^ 4 + 6 * x1 ^ 4 * x3 ^ 4 + 6 * x1 ^ 4 * x4 ^ 4 + 6 * x2 ^ 4 * x3 ^ 4 + 6 * x2 ^ 4 * x4 ^ 4 + 6 * x3 ^ 4 * x4 ^ 4 + 4 * x1 ^ 6 * x2 ^ 2 + 4 * x1 ^ 6 * x3 ^ 2 + 4 * x1 ^ 6 * x4 ^ 2 + 4 * x2 ^ 6 * x3 ^ 2 + 4 * x2 ^ 6 * x4 ^ 2 + 4 * x3 ^ 6 * x4 ^ 2 + x1 ^ 8 + x2 ^ 8 + x3 ^ 8 + x4 ^ 8
        end, function (x1, x2, x3, x4)
            (((((((((((((((((((((((((((((((((return2 * x1 ^ 2 * x2 ^ 2 * x3 ^ 2 * x4 ^ 6 + 2 * x1 ^ 2 * x2 ^ 2 * x3 ^ 4 * x4 ^ 4 + 2 * x1 ^ 2 * x2 ^ 2 * x3 ^ 6 * x4 ^ 2 + x1 ^ 2 * x2 ^ 2 * x3 ^ 8 + x1 ^ 2 * x2 ^ 2 * x4 ^ 8 + x1 ^ 2 * x3 ^ 2 * x4 ^ 8 + x2 ^ 2 * x3 ^ 2 * x4 ^ 8 + 2 * x1 ^ 2 * x2 ^ 4 * x3 ^ 2 * x4 ^ 4 + 2 * x1 ^ 2 * x2 ^ 4 * x3 ^ 4 * x4 ^ 2) - x1 ^ 2 * x2 ^ 4 * x3 ^ 6) - x1 ^ 2 * x2 ^ 4 * x4 ^ 6) - x1 ^ 2 * x3 ^ 4 * x4 ^ 6) - x2 ^ 2 * x3 ^ 4 * x4 ^ 6) + 2 * x1 ^ 2 * x2 ^ 6 * x3 ^ 2 * x4 ^ 2) - x1 ^ 2 * x2 ^ 6 * x3 ^ 4) - x1 ^ 2 * x2 ^ 6 * x4 ^ 4) - x1 ^ 2 * x3 ^ 6 * x4 ^ 4) - x2 ^ 2 * x3 ^ 6 * x4 ^ 4) + x1 ^ 2 * x2 ^ 8 * x3 ^ 2 + x1 ^ 2 * x2 ^ 8 * x4 ^ 2 + x1 ^ 2 * x3 ^ 8 * x4 ^ 2 + x2 ^ 2 * x3 ^ 8 * x4 ^ 2 + 2 * x1 ^ 4 * x2 ^ 2 * x3 ^ 2 * x4 ^ 4 + 2 * x1 ^ 4 * x2 ^ 2 * x3 ^ 4 * x4 ^ 2) - x1 ^ 4 * x2 ^ 2 * x3 ^ 6) - x1 ^ 4 * x2 ^ 2 * x4 ^ 6) - x1 ^ 4 * x3 ^ 2 * x4 ^ 6) - x2 ^ 4 * x3 ^ 2 * x4 ^ 6) + 2 * x1 ^ 4 * x2 ^ 4 * x3 ^ 2 * x4 ^ 2) - 2 * x1 ^ 4 * x2 ^ 4 * x3 ^ 4) - 2 * x1 ^ 4 * x2 ^ 4 * x4 ^ 4) - 2 * x1 ^ 4 * x3 ^ 4 * x4 ^ 4) - 2 * x2 ^ 4 * x3 ^ 4 * x4 ^ 4) - x1 ^ 4 * x2 ^ 6 * x3 ^ 2) - x1 ^ 4 * x2 ^ 6 * x4 ^ 2) - x1 ^ 4 * x3 ^ 6 * x4 ^ 2) - x2 ^ 4 * x3 ^ 6 * x4 ^ 2) + 2 * x1 ^ 6 * x2 ^ 2 * x3 ^ 2 * x4 ^ 2) - x1 ^ 6 * x2 ^ 2 * x3 ^ 4) - x1 ^ 6 * x2 ^ 2 * x4 ^ 4) - x1 ^ 6 * x3 ^ 2 * x4 ^ 4) - x2 ^ 6 * x3 ^ 2 * x4 ^ 4) - x1 ^ 6 * x2 ^ 4 * x3 ^ 2) - x1 ^ 6 * x2 ^ 4 * x4 ^ 2) - x1 ^ 6 * x3 ^ 4 * x4 ^ 2) - x2 ^ 6 * x3 ^ 4 * x4 ^ 2) + x1 ^ 8 * x2 ^ 2 * x3 ^ 2 + x1 ^ 8 * x2 ^ 2 * x4 ^ 2 + x1 ^ 8 * x3 ^ 2 * x4 ^ 2 + x2 ^ 8 * x3 ^ 2 * x4 ^ 2
        end, function (x1, x2, x3, x4)
            return (((((((((((((((((((((((-(x1 ^ 2) * x2 ^ 2 * x3 ^ 2 * x4 ^ 14 + x1 ^ 2 * x2 ^ 2 * x3 ^ 6 * x4 ^ 10 + x1 ^ 2 * x2 ^ 2 * x3 ^ 10 * x4 ^ 6) - x1 ^ 2 * x2 ^ 2 * x3 ^ 14 * x4 ^ 2) + x1 ^ 2 * x2 ^ 6 * x3 ^ 2 * x4 ^ 10 + 14 * x1 ^ 2 * x2 ^ 6 * x3 ^ 6 * x4 ^ 6 + x1 ^ 2 * x2 ^ 6 * x3 ^ 10 * x4 ^ 2 + x1 ^ 2 * x2 ^ 10 * x3 ^ 2 * x4 ^ 6 + x1 ^ 2 * x2 ^ 10 * x3 ^ 6 * x4 ^ 2) - x1 ^ 2 * x2 ^ 14 * x3 ^ 2 * x4 ^ 2) - 13 * x1 ^ 4 * x2 ^ 4 * x3 ^ 4 * x4 ^ 8) - 13 * x1 ^ 4 * x2 ^ 4 * x3 ^ 8 * x4 ^ 4) + x1 ^ 4 * x2 ^ 4 * x3 ^ 12 + x1 ^ 4 * x2 ^ 4 * x4 ^ 12 + x1 ^ 4 * x3 ^ 4 * x4 ^ 12 + x2 ^ 4 * x3 ^ 4 * x4 ^ 12) - 13 * x1 ^ 4 * x2 ^ 8 * x3 ^ 4 * x4 ^ 4) - 2 * x1 ^ 4 * x2 ^ 8 * x3 ^ 8) - 2 * x1 ^ 4 * x2 ^ 8 * x4 ^ 8) - 2 * x1 ^ 4 * x3 ^ 8 * x4 ^ 8) - 2 * x2 ^ 4 * x3 ^ 8 * x4 ^ 8) + x1 ^ 4 * x2 ^ 12 * x3 ^ 4 + x1 ^ 4 * x2 ^ 12 * x4 ^ 4 + x1 ^ 4 * x3 ^ 12 * x4 ^ 4 + x2 ^ 4 * x3 ^ 12 * x4 ^ 4 + x1 ^ 6 * x2 ^ 2 * x3 ^ 2 * x4 ^ 10 + 14 * x1 ^ 6 * x2 ^ 2 * x3 ^ 6 * x4 ^ 6 + x1 ^ 6 * x2 ^ 2 * x3 ^ 10 * x4 ^ 2 + 14 * x1 ^ 6 * x2 ^ 6 * x3 ^ 2 * x4 ^ 6 + 14 * x1 ^ 6 * x2 ^ 6 * x3 ^ 6 * x4 ^ 2 + x1 ^ 6 * x2 ^ 10 * x3 ^ 2 * x4 ^ 2) - 13 * x1 ^ 8 * x2 ^ 4 * x3 ^ 4 * x4 ^ 4) - 2 * x1 ^ 8 * x2 ^ 4 * x3 ^ 8) - 2 * x1 ^ 8 * x2 ^ 4 * x4 ^ 8) - 2 * x1 ^ 8 * x3 ^ 4 * x4 ^ 8) - 2 * x2 ^ 8 * x3 ^ 4 * x4 ^ 8) - 2 * x1 ^ 8 * x2 ^ 8 * x3 ^ 4) - 2 * x1 ^ 8 * x2 ^ 8 * x4 ^ 4) - 2 * x1 ^ 8 * x3 ^ 8 * x4 ^ 4) - 2 * x2 ^ 8 * x3 ^ 8 * x4 ^ 4) + x1 ^ 10 * x2 ^ 2 * x3 ^ 2 * x4 ^ 6 + x1 ^ 10 * x2 ^ 2 * x3 ^ 6 * x4 ^ 2 + x1 ^ 10 * x2 ^ 6 * x3 ^ 2 * x4 ^ 2 + x1 ^ 12 * x2 ^ 4 * x3 ^ 4 + x1 ^ 12 * x2 ^ 4 * x4 ^ 4 + x1 ^ 12 * x3 ^ 4 * x4 ^ 4 + x2 ^ 12 * x3 ^ 4 * x4 ^ 4) - x1 ^ 14 * x2 ^ 2 * x3 ^ 2 * x4 ^ 2
        end])
chevieset(:G29, :BasicDerivations, function ()
        return function (x, y, z, t)
                return [[4x, 8 * y ^ 2, 12z + 1 // 40 * x * y, 20t + 1 // 10 * y * z], [8y, 51200t + 2816 * y * z + 16 * x * y ^ 2, 4 // 5 * x * z + 1 // 20 * x ^ 2 * y, -8 * t * x + 1 // 5 * x * y * z + 96 // 5 * z ^ 2], [12z, -160 * t * x - 8 * x * y * z, 5 // 2 * t + -1 // 16 * y * z + 3 // 80 * x ^ 2 * z, -1 // 8 * t * y + 1 // 8 * t * x ^ 2 + -1 // 10 * x * z ^ 2], [20t, (-640 * t * z - 8 * t * x * y) - 16 * y * z ^ 2, -1 // 8 * t * y + 1 // 10 * t * x ^ 2 + -1 // 20 * x * z ^ 2, 9 // 10 * t * x * z + -6 // 5 * z ^ 3]]
            end
    end)
chevieset(:G29, :Discriminant, function ()
        return function (x, y, z, t)
                return (((((((((((((((((((((-442368 * t * x * y * z ^ 4 + 4 * t * x * y ^ 4 * z ^ 2) - 4736 * t * x ^ 2 * y ^ 2 * z ^ 3) + 4608 * x * y ^ 2 * z ^ 5 + 128 * t * y ^ 3 * z ^ 3) - 8 * t * x ^ 3 * y ^ 3 * z ^ 2) - 8192 * t * x ^ 3 * z ^ 4) + 512 * t * x ^ 4 * y * z ^ 3 + 7077888 * t * z ^ 5 + 4 * t * x ^ 5 * y ^ 2 * z ^ 2 + 442368 * y * z ^ 6) - 7372800 * t ^ 2 * x * z ^ 3) - 1280 * t ^ 2 * x * y ^ 3 * z) + 110080 * t ^ 2 * x ^ 2 * y * z ^ 2) - 115200 * t ^ 2 * y ^ 2 * z ^ 2) - 3 * t ^ 2 * x ^ 2 * y ^ 4) + 1408 * t ^ 2 * x ^ 3 * y ^ 2 * z + 8 * x ^ 2 * y ^ 3 * z ^ 4 + 8192 * t ^ 2 * x ^ 4 * z ^ 2 + 3 * t ^ 2 * x ^ 4 * y ^ 3 + t ^ 2 * y ^ 5) - 128 * t ^ 2 * x ^ 5 * y * z) - t ^ 2 * x ^ 6 * y ^ 2) - 5120000 * t ^ 3 * y * z) - 32000 * t ^ 3 * x * y ^ 2) - 512 * x ^ 3 * y * z ^ 5) + 2048000 * t ^ 3 * x ^ 2 * z + 6400 * t ^ 3 * x ^ 3 * y) - 2048 * t ^ 3 * x ^ 5) - 51200000 * t ^ 4) - 4 * x ^ 4 * y ^ 2 * z ^ 4) - 4 * y ^ 4 * z ^ 4
            end
    end)
chevieset(:G31, :PrintDiagram, function (indices, title)
        local s
        print(title, " ")
        s = pad("", length(title))
        print(indices[4], " - ", indices[2], " - ", indices[5], "\n", s, "  \\ /3\\ /\n", s, "   ", indices[1], " - ", indices[3], "     i.e. A_5 on ", IntListToString(indices[[1, 4, 2, 5, 3]]), " plus ", IntListToString(indices[[1, 2, 3]]), "==", IntListToString(indices[[2, 3, 1]]), "==", IntListToString(indices[[3, 1, 2]]), "\n")
    end)
chevieset(:G31, :BraidRelations, [[[1, 4, 1], [4, 1, 4]], [[2, 4, 2], [4, 2, 4]], [[5, 3, 5], [3, 5, 3]], [[2, 5, 2], [5, 2, 5]], [[1, 2, 3], [2, 3, 1]], [[2, 3, 1], [3, 1, 2]], [[1, 5], [5, 1]], [[3, 4], [4, 3]], [[5, 4], [4, 5]]])
chevieset(:G31, :GeneratingRoots, [[E(4), 0, 0, 0], [-1 + E(4), -(E(4)) - 1, 0, 0] // 2, [1 + E(4), -(E(4)) - 1, 0, 0] // 2, [1, 1, 1, 1] // 2, [0, 1 + E(4), -(E(4)) - 1, 0] // 2])
chevieset(:G31, :EigenvaluesGeneratingReflections, [1 // 2, 1 // 2, 1 // 2, 1 // 2, 1 // 2])
chevieset(:G31, :Size, 46080)
chevieset(:G31, :ReflectionCoDegrees, [0, 12, 16, 28])
chevieset(:G31, :ReflectionDegrees, [8, 12, 20, 24])
chevieset(:G31, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 4], [1, 5], 1:3], [[1, 4, 5], [2, 4, 5], 1:4], [1:5]]
        return t[s + 1]
    end)
chevieset(:G31, :NrConjugacyClasses, 59)
chevieset(:G31, :ClassNames, [".", "1", "34", "12", "25", "254", "321", "214", "231", "125", "354", "124", "c1c1c1", "5314", "1243", "3241", "c1", "2121", "53142", "zc", "41352", "31314", "c", "ccc123", "523523", "24z", "142142", "24zzz", "c1c1", "4124131", "354z", "354zzz", "ccc4", "cccc", "523524124", "313141314", "253254214", "cc", "24zz", "zzcc", "4135241352", "124zz", "ccc", "zccc", "1212124zz", "1243z", "43z", "c1c1c1c1", "1243zz", "1212z", "1z", "1zzz", "12zz", "123z", "123zz", "zcc", "z", "zzz", "zz"])
chevieset(:G31, :WordsClassRepresentatives, map((x->begin
                Replace(x, ".", [], "1", [1], "2", [2], "3", [3], "4", [4], "5", [5], "z", "cccccc", "c", [1, 2, 3, 4, 5])
            end), chevieget(:G31, :ClassNames)))
chevieset(:G31, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G31, :WordsClassRepresentatives), :classnames => chevieget(:G31, :ClassNames), :classparams => chevieget(:G31, :ClassNames), :orders => [1, 2, 2, 4, 3, 4, 4, 8, 4, 6, 6, 8, 20, 12, 8, 8, 20, 2, 12, 24, 12, 4, 24, 8, 4, 12, 4, 12, 10, 4, 12, 12, 8, 6, 12, 2, 12, 12, 6, 12, 6, 8, 8, 8, 8, 8, 4, 5, 8, 4, 4, 4, 4, 4, 4, 3, 4, 4, 2], :classes => [1, 60, 360, 180, 640, 2880, 30, 720, 30, 1920, 1920, 720, 2304, 960, 720, 720, 2304, 30, 960, 1920, 960, 720, 1920, 1440, 180, 640, 180, 640, 2304, 360, 1920, 1920, 2880, 160, 960, 60, 960, 160, 640, 160, 960, 720, 240, 240, 720, 720, 360, 2304, 720, 30, 60, 60, 180, 30, 30, 160, 1, 1, 1]))
chevieset(:G31, :PowerMaps, [nothing, [1, 1, 1, 18, 5, 3, 18, 27, 18, 5, 5, 25, 29, 34, 25, 27, 29, 1, 41, 40, 41, 18, 38, 50, 18, 39, 18, 39, 48, 18, 39, 39, 47, 56, 41, 1, 41, 34, 5, 34, 56, 25, 57, 58, 27, 27, 59, 48, 25, 59, 59, 59, 18, 18, 18, 56, 59, 59, 1], [1, 2, 3, 4, 1, 6, 9, 12, 7, 36, 2, 8, 17, 50, 16, 15, 13, 18, 54, 44, 55, 22, 43, 24, 27, 58, 25, 57, 29, 30, 52, 51, 33, 59, 9, 36, 7, 57, 59, 58, 18, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 1, 58, 57, 59], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 58, 14, 15, 16, 57, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 59, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], nothing, [1, 2, 3, 4, 5, 6, 9, 12, 7, 10, 11, 8, 17, 14, 16, 15, 13, 18, 21, 23, 19, 22, 20, 24, 27, 28, 25, 26, 29, 30, 32, 31, 33, 34, 37, 36, 35, 40, 39, 38, 41, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 56, 58, 57, 59], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 9, 12, 7, 10, 11, 8, 17, 14, 16, 15, 13, 18, 21, 23, 19, 22, 20, 24, 27, 28, 25, 26, 29, 30, 32, 31, 33, 34, 37, 36, 35, 40, 39, 38, 41, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 56, 58, 57, 59], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], nothing, [1, 2, 3, 4, 5, 6, 9, 12, 7, 10, 11, 8, 17, 14, 16, 15, 13, 18, 21, 23, 19, 22, 20, 24, 27, 28, 25, 26, 29, 30, 32, 31, 33, 34, 37, 36, 35, 40, 39, 38, 41, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 56, 58, 57, 59], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 9, 12, 7, 10, 11, 8, 17, 14, 16, 15, 13, 18, 21, 23, 19, 22, 20, 24, 27, 28, 25, 26, 29, 30, 32, 31, 33, 34, 37, 36, 35, 40, 39, 38, 41, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 56, 58, 57, 59]])
chevieset(:G31, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 60], [4, 37], [4, 1], [4, 31], [4, 7], [5, 12], [5, 24], [5, 40], [5, 4], [6, 14], [6, 18], [9, 28], [9, 8], [10, 24], [10, 12], [10, 30], [10, 6], [10, 26], [10, 2], [15, 20, 1], [15, 8, 2], [15, 8, 1], [15, 20, 2], [16, 16], [20, 14], [20, 13, 2], [20, 13, 1], [20, 19], [20, 7], [20, 5], [20, 21], [20, 3], [20, 23], [24, 6], [24, 14], [30, 16], [30, 4], [30, 10, 2], [30, 10, 1], [36, 10], [36, 5], [36, 17], [36, 7], [36, 15], [40, 6], [40, 18], [40, 14], [40, 10], [40, 9], [40, 13], [40, 7], [40, 15], [45, 12, 1], [45, 8, 1], [45, 12, 2], [45, 8, 2], [64, 9], [64, 11]], :extRefl => [1, 4, 11, 5, 2], :opdam => #= none:18 =# @perm_str("( 3, 5)( 4, 6)(11,12)(17,19)(18,20)(27,29)(28,30)(31,33)(32,34)(35,36)(39,40)(42,44)(43,45)(48,49)(50,52)(51,53)"))
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G31, :cycpolfakedegrees, [[1, 0], [1, 60], [1, 37, 8, 8, 24], [1, 1, 8, 24, 32], [1, 31, 8, 24, 32], [1, 7, 8, 8, 24], [1, 12, 5, 10, 20, 24], [1, 24, 5, 10, 20, 24], [1, 40, 5, 10, 20], [1, 4, 5, 10, 20], [[1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 1], 14], [[1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1], 18], [1, 28, 3, 3, 6, 6, 12, 12, 24], [1, 8, 3, 3, 6, 6, 12, 12, 24], [1, 24, 5, 10, 16, 20], [1, 12, 5, 10, 16, 20], [1, 30, 5, 10, 16, 20], [1, 6, 5, 10, 16, 20], [1, 26, 5, 10, 20, 32], [1, 2, 5, 10, 20, 32], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 20, 5, 10, 20], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 8, 5, 10, 20], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 8, 5, 10, 20], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 20, 5, 10, 20], [1, 16, 8, 8, 8, 16, 24], [1, 14, 5, 8, 8, 10, 20, 24], [1, 13, 5, 8, 8, 10, 20, 24, 24], [2, 13, 5, 8, 10, 20, 24], [2, 19, 5, 8, 10, 20, 24], [1, 7, 5, 8, 8, 10, 20, 24, 24], [1, 5, 5, 8, 8, 10, 20, 24], [1, 21, 5, 8, 10, 16, 20, 24], [1, 3, 5, 8, 10, 16, 20, 24], [1, 23, 5, 8, 8, 10, 20, 24], [[1, 0, 0, 0, 1, 0, 2, 0, 3, 0, 3, 0, 4, 0, 3, 0, 3, 0, 2, 0, 1, 0, 0, 0, 1], 6], [[1, 0, 3, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 3, 0, 1], 14], [[1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1], 16, 5, 10, 20], [[1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1], 4, 5, 10, 20], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 10, 5, 10, 16, 20], [[1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1], 10, 5, 10, 20], [1, 10, 3, 3, 6, 6, 8, 8, 12, 12, 24, 24], [1, 5, 3, 3, 6, 6, 8, 8, 12, 12, 24, 24], [1, 17, 3, 3, 6, 6, 8, 12, 12, 16, 24], [1, 7, 3, 3, 6, 6, 8, 12, 12, 16, 24], [1, 15, 3, 3, 6, 6, 8, 8, 12, 12, 24, 24], [1, 6, 5, 8, 8, 8, 10, 20, 24], [1, 18, 5, 8, 8, 8, 10, 20, 24], [[2, 0, 1, 0, 2, 0, 1, 0, 2], 14, 5, 10, 20], [[1, 0, 1, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1], 10, 5, 10, 20], [1, 9, 5, 8, 8, 8, 10, 20, 24], [1, 13, 5, 8, 8, 10, 16, 20, 24], [1, 7, 5, 8, 8, 10, 16, 20, 24], [1, 15, 5, 8, 8, 8, 10, 20, 24], [1, 12, 3, 3, 5, 6, 6, 10, 12, 12, 20, 24], [1, 8, 3, 3, 5, 6, 6, 10, 12, 12, 20, 24], [1, 12, 3, 3, 5, 6, 6, 10, 12, 12, 20, 24], [1, 8, 3, 3, 5, 6, 6, 10, 12, 12, 20, 24], [[1, 0, 1, 0, 4, 0, 3, 0, 3, 0, 2, 0, 2], 9, 8, 8, 24], [[2, 0, 2, 0, 3, 0, 3, 0, 4, 0, 1, 0, 1], 11, 8, 8, 24]])
chevieset(:G31, :SchurModels, Dict{Symbol, Any}(:f1_0 => Dict{Symbol, Any}(:coeff => 1, :factor => 0, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 9, 10, 12, 15]), :f4_1 => Dict{Symbol, Any}(:coeff => 2, :factor => -3, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 5, 5, 6, 6, 8, 9, 12, 12, 15, 20], :root => 1), :f5_4 => Dict{Symbol, Any}(:coeff => -1, :factor => -1, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 4, 4, 5, 6, 6, 9, 12]), :f5_12 => Dict{Symbol, Any}(:coeff => 1, :factor => -6, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 4, 4, 6, 6]), :f6_14 => Dict{Symbol, Any}(:coeff => 30, :factor => -16, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 15], :root => 1), :f9_8 => Dict{Symbol, Any}(:coeff => -1, :factor => -3, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 5, 5, 10]), :f10_12 => Dict{Symbol, Any}(:coeff => 2, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 6, 6]), :f10_2 => Dict{Symbol, Any}(:coeff => 2, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 5, 6, 6, 6, 6, 12, 12, 14, 18], :root => 1), :f15_8p => Dict{Symbol, Any}(:coeff => 3, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 9]), :f15_8s => Dict{Symbol, Any}(:coeff => 3, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 4, 4]), :f16_16 => Dict{Symbol, Any}(:coeff => 4, :factor => -8, :vcyc => [1, 1, 1, 1, 3, 3, 6, 6, 10]), :f20_14 => Dict{Symbol, Any}(:coeff => 1, :factor => -10, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 6, 6]), :f20_7 => Dict{Symbol, Any}(:coeff => -2, :factor => -6, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 7, 8, 9, 12, 12], :root => 1), :f20_3 => Dict{Symbol, Any}(:coeff => -2, :factor => -13, :vcyc => [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 8, 12, 12, 18], :root => 1), :f24_6 => Dict{Symbol, Any}(:coeff => 120, :factor => -16, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 6, 6, 6, 6, 10, 10], :root => 1), :f30_4 => Dict{Symbol, Any}(:coeff => 6, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 12]), :f30_10p => Dict{Symbol, Any}(:coeff => 6, :factor => -16, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 9, 10, 10], :root => 1), :f36_10 => Dict{Symbol, Any}(:coeff => 5, :factor => -8, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3]), :f36_5 => Dict{Symbol, Any}(:coeff => -2, :factor => -10, :vcyc => [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 6, 8, 10, 10, 14, 20], :root => 1), :f40_6 => Dict{Symbol, Any}(:coeff => 2, :factor => -4, :vcyc => [1, 1, 1, 1, 3, 3, 4, 4, 6, 6, 12]), :f40_7 => Dict{Symbol, Any}(:coeff => 2, :factor => -12, :vcyc => [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 6, 6, 6, 6, 10, 12, 12], :root => 1), :f40_10 => Dict{Symbol, Any}(:coeff => 8, :factor => -16, :vcyc => [2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 10, 10, 12, 12], :root => 1), :f45_8p => Dict{Symbol, Any}(:coeff => -1, :factor => -7, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 5]), :f45_8s => Dict{Symbol, Any}(:coeff => -1, :factor => -11, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 7]), :f64_9 => Dict{Symbol, Any}(:coeff => 4, :factor => -8, :vcyc => [4, 4, 6, 6, 10, 12])))
chevieset(:G31, :SchurData, [Dict{Symbol, Any}(:name => "f1_0", :order => [1, 2]), Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1]), Dict{Symbol, Any}(:name => "f4_1", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f4_1", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f4_1", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f4_1", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f5_12", :order => [1, 2]), Dict{Symbol, Any}(:name => "f5_12", :order => [2, 1]), Dict{Symbol, Any}(:name => "f5_4", :order => [2, 1]), Dict{Symbol, Any}(:name => "f5_4", :order => [1, 2]), Dict{Symbol, Any}(:name => "f6_14", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f6_14", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f9_8", :order => [2, 1]), Dict{Symbol, Any}(:name => "f9_8", :order => [1, 2]), Dict{Symbol, Any}(:name => "f10_12", :order => [2, 1]), Dict{Symbol, Any}(:name => "f10_12", :order => [1, 2]), Dict{Symbol, Any}(:name => "f10_2", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f10_2", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f10_2", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f10_2", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f15_8p", :order => [2, 1]), Dict{Symbol, Any}(:name => "f15_8p", :order => [1, 2]), Dict{Symbol, Any}(:name => "f15_8s", :order => [1, 2]), Dict{Symbol, Any}(:name => "f15_8s", :order => [2, 1]), Dict{Symbol, Any}(:name => "f16_16", :order => [1, 2]), Dict{Symbol, Any}(:name => "f20_14", :order => [1, 2]), Dict{Symbol, Any}(:name => "f20_3", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f20_3", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f20_3", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f20_3", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f20_7", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f20_7", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f20_7", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f20_7", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f24_6", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f24_6", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f30_4", :order => [2, 1]), Dict{Symbol, Any}(:name => "f30_4", :order => [1, 2]), Dict{Symbol, Any}(:name => "f30_10p", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f30_10p", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f36_10", :order => [1, 2]), Dict{Symbol, Any}(:name => "f36_5", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f36_5", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f36_5", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f36_5", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f40_6", :order => [1, 2]), Dict{Symbol, Any}(:name => "f40_6", :order => [2, 1]), Dict{Symbol, Any}(:name => "f40_10", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f40_10", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f40_7", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f40_7", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f40_7", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f40_7", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f45_8p", :order => [2, 1]), Dict{Symbol, Any}(:name => "f45_8p", :order => [1, 2]), Dict{Symbol, Any}(:name => "f45_8s", :order => [1, 2]), Dict{Symbol, Any}(:name => "f45_8s", :order => [2, 1]), Dict{Symbol, Any}(:name => "f64_9", :order => [1, 2]), Dict{Symbol, Any}(:name => "f64_9", :order => [1, 2])])
chevieset(:G31, :FactorizedSchurElement, function (p, para, root)
        local ci, data, r, q, res
        ci = Position(((chevieget(:G31, :CharInfo))())[:charparams], p)
        data = (chevieget(:G31, :SchurData))[ci]
        r = (chevieget(:G31, :SchurModels))[Symbol(data[:name])]
        q = (para[1])[data[:order]]
        q = q[1] // q[2]
        if haskey(r, :root)
            q = GetRoot(q, 2) * (-1) ^ data[:rootPower]
        end
        res = Dict{Symbol, Any}(:factor => Mvp(r[:coeff] * q ^ r[:factor]), :vcyc => map((v->begin
                                Dict{Symbol, Any}(:monomial => q, :pol => CycPol([1, 0, v]))
                            end), r[:vcyc]), :operations => FactorizedSchurElementsOps)
        return (FactorizedSchurElementsOps[:Simplify])(res)
    end)
chevieset(:G31, :SchurElement, function (p, para, root)
        local ci, data, r, q
        ci = Position(((chevieget(:G31, :CharInfo))())[:charparams], p)
        data = (chevieget(:G31, :SchurData))[ci]
        r = (chevieget(:G31, :SchurModels))[Symbol(data[:name])]
        q = (para[1])[data[:order]]
        q = q[1] // q[2]
        if haskey(r, :root)
            q = GetRoot(q, 2) * (-1) ^ data[:rootPower]
        end
        return r[:coeff] * q ^ r[:factor] * Product(r[:vcyc], (x->begin
                            Value(CyclotomicPolynomial(Cyclotomics, x), q)
                        end))
    end)
chevieset(:G31, :HeckeCharTable, function (para, root)
        local tbl, x, I, r, p, adj, f1, f6, f7, f9, f11, f14, f16, f17, f21, f23, f25, f26, f27, f31, f35, f37, f39, f41, f42, f46, f48, f50, f54, f56, f58
        x = GetRoot(-((para[1])[1]) // (para[1])[2], 2)
        I = E(4)
        r = (para[1])[1]
        p = (para[1])[2]
        tbl = Dict{Symbol, Any}(:identifier => "H(G31)", :size => 46080, :order => 46080, :powermap => chevieget(:G31, :PowerMaps))
        Inherit(tbl, chevieget(:G31, :ClassInfo))
        adj = function (p, x)
                return map(function (x, y)
                            return x * y
                        end, x, map((x->begin
                                    (-p) ^ length(x)
                                end), tbl[:classtext]))
            end
        f1 = function (r,)
                return map((x->begin
                                r ^ length(x)
                            end), tbl[:classtext])
            end
        f6 = function (x, y, sgn)
                local v
                v = sgn * GetRoot(x * y, 2)
                return [4, 3x + y, 2 * x * y + 2 * x ^ 2, (-v * x - v * y) + 2 * x ^ 2, x * y + 2 * x ^ 2, x ^ 2 * y + x ^ 3, (((((-4 * v * x * y - 3 * v * x ^ 2) - 3 * v * y ^ 2) - 3 * x * y ^ 2) - 3 * x ^ 2 * y) + x ^ 3) - y ^ 3, (((-2 * v * x * y - v * x ^ 2) - x * y ^ 2) - x ^ 2 * y) + x ^ 3, -2 * v * x * y + 2 * x ^ 3, (-v * x * y - v * x ^ 2) + x ^ 3, 2 * x ^ 2 * y + x ^ 3, -v * x ^ 2 + x ^ 3, v * x ^ 13 * y ^ 4, -v * x ^ 2 * y - v * x ^ 3, -v * x ^ 2 * y + x ^ 4, (((-v * x * y ^ 2 - 3 * v * x ^ 2 * y) - 3 * v * x ^ 3) - 2 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y, v * x ^ 4 * y, x * y ^ 3 + x ^ 3 * y + 2 * x ^ 4, v * x ^ 2 * y ^ 2 + x ^ 3 * y ^ 2, 0, (((-2 * v * x ^ 3 * y - 3 * v * x ^ 4) - x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5, v * x ^ 2 * y ^ 2 + v * x ^ 3 * y + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 0, 0, 2 * v * x ^ 3 * y ^ 2 + x ^ 5 * y + x ^ 6, -v * x ^ 23 * y ^ 8 - 2 * v * x ^ 24 * y ^ 7, 4 * v * x ^ 2 * y ^ 3 + 8 * v * x ^ 3 * y ^ 2 + 6 * v * x ^ 4 * y + x ^ 2 * y ^ 4 + 6 * x ^ 3 * y ^ 3 + 7 * x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + x ^ 6, -v * x ^ 68 * y ^ 23 - 2 * v * x ^ 69 * y ^ 22, -(x ^ 9) * y ^ 3, v * x ^ 3 * y ^ 3 + 3 * v * x ^ 4 * y ^ 2 + 2 * v * x ^ 5 * y + 2 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y + x ^ 7, -2 * v * x ^ 24 * y ^ 8 - v * x ^ 25 * y ^ 7, -2 * v * x ^ 69 * y ^ 23 - v * x ^ 70 * y ^ 22, 0, -2 * x ^ 15 * y ^ 5, 3 * v * x ^ 6 * y ^ 2 + 2 * v * x ^ 7 * y + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2 + x ^ 8 * y, ((((((-v * x ^ 4 * y ^ 4 - 3 * v * x ^ 5 * y ^ 3) - 3 * v * x ^ 6 * y ^ 2) - v * x ^ 7 * y) - 3 * x ^ 5 * y ^ 4) - 3 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2) + x ^ 9, (((((-4 * v * x ^ 4 * y ^ 4 - 5 * v * x ^ 5 * y ^ 3) + 3 * v * x ^ 6 * y ^ 2 + 5 * v * x ^ 7 * y) - x ^ 4 * y ^ 5) - 6 * x ^ 5 * y ^ 4) - 2 * x ^ 6 * y ^ 3) + 4 * x ^ 7 * y ^ 2 + 2 * x ^ 8 * y, 2 * v * x ^ 7 * y ^ 2, x ^ 46 * y ^ 16 + 2 * x ^ 47 * y ^ 15, 2 * v * x ^ 52 * y ^ 17, 8 * v * x ^ 6 * y ^ 3 + 28 * v * x ^ 7 * y ^ 2 + 26 * v * x ^ 8 * y + 6 * v * x ^ 9 + x ^ 6 * y ^ 4 + 18 * x ^ 7 * y ^ 3 + 31 * x ^ 8 * y ^ 2 + 15 * x ^ 9 * y + x ^ 10, -v * x ^ 47 * y ^ 15 + x ^ 48 * y ^ 15, 0, 0, ((v * x ^ 49 * y ^ 17 - x ^ 48 * y ^ 19) - x ^ 49 * y ^ 18) + x ^ 52 * y ^ 15, -v * x ^ 26 * y ^ 7 + x ^ 25 * y ^ 9, -2 * v * x ^ 23 * y ^ 8 - 2 * v * x ^ 24 * y ^ 7, -(x ^ 18) * y ^ 6, -v * x ^ 47 * y ^ 16 + x ^ 49 * y ^ 15, (-v * x ^ 23 * y ^ 10 - v * x ^ 25 * y ^ 8) - 2 * v * x ^ 26 * y ^ 7, -v * x ^ 22 * y ^ 8 - 3 * v * x ^ 23 * y ^ 7, -v * x ^ 67 * y ^ 23 - 3 * v * x ^ 68 * y ^ 22, (-v * x ^ 45 * y ^ 16 - v * x ^ 46 * y ^ 15) + 2 * x ^ 47 * y ^ 15, -2 * v * x ^ 25 * y ^ 7 + 2 * x ^ 24 * y ^ 9, -2 * v * x ^ 46 * y ^ 16 + 2 * x ^ 48 * y ^ 15, -2 * x ^ 30 * y ^ 10, -4 * v * x ^ 22 * y ^ 7, -4 * v * x ^ 67 * y ^ 22, 4 * x ^ 45 * y ^ 15] * x ^ 0 * y ^ 0
            end
        f7 = function (r, p)
                local q
                q = -r // p
                return adj(p, [5, -2 + 3q, (1 - 2q) + 2 * q ^ 2, (1 - 2q) + 2 * q ^ 2, -2q + q ^ 2, -(q ^ 2), (-1 - 3 * q ^ 2) + q ^ 3, -(q ^ 2), (-1 - 3 * q ^ 2) + q ^ 3, (q - q ^ 2) + q ^ 3, (q - q ^ 2) + q ^ 3, -(q ^ 2), 0, q ^ 2 + q ^ 4, -(q ^ 3), -(q ^ 3), 0, 1 + 2 * q ^ 2 + 2 * q ^ 4, 0, 0, 0, q ^ 5, 0, (q ^ 9 + q ^ 11) - q ^ 12, 2 * q ^ 3 - q ^ 4, -2 * q ^ 19 + q ^ 20, 2 * q ^ 3 - q ^ 4, -2 * q ^ 55 + q ^ 56, 0, -2 * q ^ 3 - q ^ 5, (q ^ 19 - q ^ 20) + q ^ 21, (q ^ 55 - q ^ 56) + q ^ 57, q ^ 9 - 2 * q ^ 10, 2 * q ^ 12, q ^ 5 - q ^ 6, -2 * q ^ 3 + 2 * q ^ 6 + q ^ 9, q ^ 5 - q ^ 6, 2 * q ^ 6, -2 * q ^ 37 + q ^ 38, 2 * q ^ 42, 2 * q ^ 6, -(q ^ 38), -3 * q ^ 9, -3 * q ^ 27, (((q ^ 38 - q ^ 39) + q ^ 40) - 3 * q ^ 41) + q ^ 42, -(q ^ 21), (q ^ 18 - 2 * q ^ 19) + 2 * q ^ 20, 0, -(q ^ 39), q ^ 18 + 2 * q ^ 20 + 2 * q ^ 22, -2 * q ^ 18 + 3 * q ^ 19, -2 * q ^ 54 + 3 * q ^ 55, (q ^ 36 - 2 * q ^ 37) + 2 * q ^ 38, (-(q ^ 18) - 3 * q ^ 20) + q ^ 21, (-(q ^ 36) - 3 * q ^ 38) + q ^ 39, 2 * q ^ 24, 5 * q ^ 18, 5 * q ^ 54, 5 * q ^ 36])
            end
        f9 = function (r, p)
                local q
                q = -r // p
                return adj(p, [5, -4 + q, 3 - 2q, 3 - 2q, 3 - q, -2 + q, -2 + 3q, -2 + q, -2 + 3q, -2 + 2q, -2 + 2q, -2 + q, 0, 1 - 2q, 1 - 2q, 1 - 2q, 0, 3 + 2 * q ^ 2, q, q ^ 7, q, -2 - q ^ 2, q, q ^ 4, 2 - q ^ 2, 3 * q ^ 6 - q ^ 7, 2 - q ^ 2, 3 * q ^ 18 - q ^ 19, 0, -1 + q + q ^ 2, -2 * q ^ 6 + 2 * q ^ 7, -2 * q ^ 18 + 2 * q ^ 19, -(q ^ 3), -(q ^ 4), q ^ 2, -2 - q ^ 3, q ^ 2, -(q ^ 2), 3 * q ^ 12 - q ^ 13, -(q ^ 14), -(q ^ 2), -2 * q ^ 12 + q ^ 13, q ^ 3, q ^ 9, (-2 * q ^ 12 - q ^ 13) + 2 * q ^ 14, q ^ 6 - 2 * q ^ 7, 3 * q ^ 6 - 2 * q ^ 7, 0, q ^ 12 - 2 * q ^ 13, 3 * q ^ 6 + 2 * q ^ 8, -4 * q ^ 6 + q ^ 7, -4 * q ^ 18 + q ^ 19, 3 * q ^ 12 - 2 * q ^ 13, -2 * q ^ 6 + 3 * q ^ 7, -2 * q ^ 12 + 3 * q ^ 13, -(q ^ 8), 5 * q ^ 6, 5 * q ^ 18, 5 * q ^ 12])
            end
        f11 = function (x, y, sgn)
                local v
                v = sgn * GetRoot(x * y, 2)
                return [6, 3x + 3y, 4 * x * y + x ^ 2 + y ^ 2, 2 * v * x + 2 * v * y + x ^ 2 + y ^ 2, 2 * x * y + x ^ 2 + y ^ 2, x * y ^ 2 + x ^ 2 * y, ((((8 * v * x * y + 6 * v * x ^ 2 + 6 * v * y ^ 2) - 6 * x * y ^ 2) - 6 * x ^ 2 * y) - x ^ 3) - y ^ 3, ((4 * v * x * y + v * x ^ 2 + v * y ^ 2) - 2 * x * y ^ 2) - 2 * x ^ 2 * y, 4 * v * x * y + x ^ 3 + y ^ 3, 2 * v * x * y + v * x ^ 2 + v * y ^ 2, 2 * x * y ^ 2 + 2 * x ^ 2 * y, v * x ^ 2 + v * y ^ 2, x ^ 9 * y ^ 9, (2 * v * x * y ^ 2 + 2 * v * x ^ 2 * y) - x ^ 2 * y ^ 2, v * x * y ^ 2 + v * x ^ 2 * y, (((((4 * v * x * y ^ 2 + 4 * v * x ^ 2 * y + 3 * v * x ^ 3 + 3 * v * y ^ 3) - 3 * x * y ^ 3) - 4 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4) - y ^ 4, x ^ 3 * y ^ 3, 2 * x * y ^ 3 + 2 * x ^ 3 * y + x ^ 4 + y ^ 4, -v * x ^ 2 * y ^ 2 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, v * x ^ 17 * y ^ 17, ((2 * v * x * y ^ 3 + 5 * v * x ^ 2 * y ^ 2 + 2 * v * x ^ 3 * y) - 4 * x ^ 2 * y ^ 3) - 4 * x ^ 3 * y ^ 2, ((-v * x * y ^ 3 - 2 * v * x ^ 2 * y ^ 2) - v * x ^ 3 * y) + x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, v * x ^ 2 * y ^ 2, -v * x ^ 7 * y ^ 10 - v * x ^ 10 * y ^ 7, (-2 * v * x ^ 2 * y ^ 3 - 2 * v * x ^ 3 * y ^ 2) + x * y ^ 5 + x ^ 5 * y, x ^ 15 * y ^ 17 + 2 * x ^ 16 * y ^ 16 + x ^ 17 * y ^ 15, (((-6 * v * x * y ^ 4 - 12 * v * x ^ 2 * y ^ 3) - 12 * v * x ^ 3 * y ^ 2) - 6 * v * x ^ 4 * y) + 3 * x * y ^ 5 + 8 * x ^ 2 * y ^ 4 + 12 * x ^ 3 * y ^ 3 + 8 * x ^ 4 * y ^ 2 + 3 * x ^ 5 * y, x ^ 45 * y ^ 47 + 2 * x ^ 46 * y ^ 46 + x ^ 47 * y ^ 45, x ^ 6 * y ^ 6, ((((-2 * v * x * y ^ 5 - 3 * v * x ^ 2 * y ^ 4) - 2 * v * x ^ 3 * y ^ 3) - 3 * v * x ^ 4 * y ^ 2) - 2 * v * x ^ 5 * y) + x * y ^ 6 + 2 * x ^ 2 * y ^ 5 + 2 * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 2 * x ^ 16 * y ^ 17 + 2 * x ^ 17 * y ^ 16, 2 * x ^ 46 * y ^ 47 + 2 * x ^ 47 * y ^ 46, -v * x ^ 7 * y ^ 8 - v * x ^ 8 * y ^ 7, 3 * x ^ 10 * y ^ 10, ((-v * x ^ 3 * y ^ 5 - v * x ^ 4 * y ^ 4) - v * x ^ 5 * y ^ 3) + 3 * x ^ 4 * y ^ 5 + 3 * x ^ 5 * y ^ 4, ((((((v * x * y ^ 7 + 3 * v * x ^ 2 * y ^ 6 + 3 * v * x ^ 3 * y ^ 5 + 2 * v * x ^ 4 * y ^ 4 + 3 * v * x ^ 5 * y ^ 3 + 3 * v * x ^ 6 * y ^ 2 + v * x ^ 7 * y) - 3 * x ^ 2 * y ^ 7) - 3 * x ^ 3 * y ^ 6) - 3 * x ^ 4 * y ^ 5) - 3 * x ^ 5 * y ^ 4) - 3 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2, (((((-3 * v * x ^ 2 * y ^ 6 + 3 * v * x ^ 3 * y ^ 5 + 11 * v * x ^ 4 * y ^ 4 + 3 * v * x ^ 5 * y ^ 3) - 3 * v * x ^ 6 * y ^ 2) + x ^ 2 * y ^ 7 + 2 * x ^ 3 * y ^ 6) - 7 * x ^ 4 * y ^ 5) - 7 * x ^ 5 * y ^ 4) + 2 * x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 3 * x ^ 5 * y ^ 5, x ^ 30 * y ^ 32 + 2 * x ^ 31 * y ^ 31 + x ^ 32 * y ^ 30, 3 * x ^ 35 * y ^ 35, (((-6 * v * x ^ 3 * y ^ 6 - 16 * v * x ^ 4 * y ^ 5) - 16 * v * x ^ 5 * y ^ 4) - 6 * v * x ^ 6 * y ^ 3) + 2 * x ^ 3 * y ^ 7 + 12 * x ^ 4 * y ^ 6 + 19 * x ^ 5 * y ^ 5 + 12 * x ^ 6 * y ^ 4 + 2 * x ^ 7 * y ^ 3, v * x ^ 30 * y ^ 32 + v * x ^ 32 * y ^ 30, -2 * v * x ^ 7 * y ^ 7, -2 * v * x ^ 22 * y ^ 22, ((-v * x ^ 32 * y ^ 34 - v * x ^ 34 * y ^ 32) - 2 * x ^ 33 * y ^ 34) - 2 * x ^ 34 * y ^ 33, v * x ^ 16 * y ^ 17 + v * x ^ 17 * y ^ 16, x ^ 15 * y ^ 17 + 4 * x ^ 16 * y ^ 16 + x ^ 17 * y ^ 15, x ^ 12 * y ^ 12, v * x ^ 31 * y ^ 32 + v * x ^ 32 * y ^ 31, x ^ 15 * y ^ 19 + 2 * x ^ 16 * y ^ 18 + 2 * x ^ 18 * y ^ 16 + x ^ 19 * y ^ 15, 3 * x ^ 15 * y ^ 16 + 3 * x ^ 16 * y ^ 15, 3 * x ^ 45 * y ^ 46 + 3 * x ^ 46 * y ^ 45, 2 * v * x ^ 30 * y ^ 31 + 2 * v * x ^ 31 * y ^ 30 + x ^ 30 * y ^ 32 + x ^ 32 * y ^ 30, 4 * v * x ^ 16 * y ^ 16 + x ^ 15 * y ^ 18 + x ^ 18 * y ^ 15, 4 * v * x ^ 31 * y ^ 31 + x ^ 30 * y ^ 33 + x ^ 33 * y ^ 30, 3 * x ^ 20 * y ^ 20, 6 * x ^ 15 * y ^ 15, 6 * x ^ 45 * y ^ 45, 6 * x ^ 30 * y ^ 30] * x ^ 0 * y ^ 0
            end
        f14 = function (r, p)
                local q
                q = -r // p
                return adj(p, [9, -3 + 6q, (1 - 4q) + 4 * q ^ 2, (1 - 4q) + 4 * q ^ 2, -3q + 3 * q ^ 2, -2 * q ^ 2 + q ^ 3, (3q - 3 * q ^ 2) + 3 * q ^ 3, -2 * q ^ 2 + q ^ 3, (3q - 3 * q ^ 2) + 3 * q ^ 3, (q - 3 * q ^ 2) + 2 * q ^ 3, (q - 3 * q ^ 2) + 2 * q ^ 3, -2 * q ^ 2 + q ^ 3, -(q ^ 12), (q ^ 2 - 2 * q ^ 3) + q ^ 4, (q ^ 2 - q ^ 3) + q ^ 4, (q ^ 2 - q ^ 3) + q ^ 4, -(q ^ 4), 1 + 4 * q ^ 2 + 4 * q ^ 4, 0, 0, 0, q ^ 3 + 2 * q ^ 5, 0, (q ^ 11 - q ^ 12) + q ^ 13, (2 * q ^ 3 - 2 * q ^ 4) + q ^ 6, -3 * q ^ 21 + 3 * q ^ 22, (2 * q ^ 3 - 2 * q ^ 4) + q ^ 6, -3 * q ^ 61 + 3 * q ^ 62, -(q ^ 8), (3 * q ^ 4 - q ^ 5) + q ^ 7, (q ^ 21 - 3 * q ^ 22) + 2 * q ^ 23, (q ^ 61 - 3 * q ^ 62) + 2 * q ^ 63, -(q ^ 10) + 2 * q ^ 11, 0, 0, -2 * q ^ 3 + 3 * q ^ 6 + 2 * q ^ 9, 0, 0, -3 * q ^ 41 + 3 * q ^ 42, 0, 0, -2 * q ^ 42 + q ^ 43, 3 * q ^ 10, 3 * q ^ 30, (((q ^ 42 - q ^ 43) + q ^ 44) - 5 * q ^ 45) + 2 * q ^ 46 + q ^ 47, (q ^ 22 - q ^ 23) + q ^ 24, (q ^ 20 - 4 * q ^ 21) + 4 * q ^ 22, -(q ^ 16), (q ^ 42 - q ^ 43) + q ^ 44, q ^ 20 + 4 * q ^ 22 + 4 * q ^ 24, -3 * q ^ 20 + 6 * q ^ 21, -3 * q ^ 60 + 6 * q ^ 61, (q ^ 40 - 4 * q ^ 41) + 4 * q ^ 42, (3 * q ^ 21 - 3 * q ^ 22) + 3 * q ^ 23, (3 * q ^ 41 - 3 * q ^ 42) + 3 * q ^ 43, 0, 9 * q ^ 20, 9 * q ^ 60, 9 * q ^ 40])
            end
        f16 = function (r, p)
                local q
                q = -r // p
                return adj(p, [10, -4 + 6q, (1 - 6q) + 3 * q ^ 2, (1 - 6q) + 3 * q ^ 2, (1 - 3q) + 3 * q ^ 2, (q - 2 * q ^ 2) + q ^ 3, (3q - 6 * q ^ 2) + q ^ 3, (q - 2 * q ^ 2) + q ^ 3, (3q - 6 * q ^ 2) + q ^ 3, (2q - 4 * q ^ 2) + q ^ 3, (2q - 4 * q ^ 2) + q ^ 3, (q - 2 * q ^ 2) + q ^ 3, 0, 3 * q ^ 2 - 2 * q ^ 3, 2 * q ^ 2 - 2 * q ^ 3, 2 * q ^ 2 - 2 * q ^ 3, 0, 1 + 6 * q ^ 2 + 3 * q ^ 4, q ^ 3, q ^ 21, q ^ 3, -(q ^ 2) + 2 * q ^ 3 + q ^ 5, q ^ 3, -(q ^ 10) - q ^ 12, (-(q ^ 2) - 2 * q ^ 4) + q ^ 6, (q ^ 18 - 3 * q ^ 19) + 3 * q ^ 20, (-(q ^ 2) - 2 * q ^ 4) + q ^ 6, (q ^ 54 - 3 * q ^ 55) + 3 * q ^ 56, 0, ((-(q ^ 3) + q ^ 4) - q ^ 5) - q ^ 6, (2 * q ^ 19 - 4 * q ^ 20) + q ^ 21, (2 * q ^ 55 - 4 * q ^ 56) + q ^ 57, q ^ 9 - q ^ 10, q ^ 12, q ^ 5, -(q ^ 3) + 2 * q ^ 6 + q ^ 9, q ^ 5, q ^ 6, (q ^ 36 - 3 * q ^ 37) + 3 * q ^ 38, q ^ 42, q ^ 6, (q ^ 37 - 2 * q ^ 38) + q ^ 39, -2 * q ^ 9, -2 * q ^ 27, ((-(q ^ 37) + 2 * q ^ 38) - 4 * q ^ 41) + 2 * q ^ 42 + q ^ 43, 2 * q ^ 20 - 2 * q ^ 21, (q ^ 18 - 6 * q ^ 19) + 3 * q ^ 20, 0, 2 * q ^ 38 - 2 * q ^ 39, q ^ 18 + 6 * q ^ 20 + 3 * q ^ 22, -4 * q ^ 18 + 6 * q ^ 19, -4 * q ^ 54 + 6 * q ^ 55, (q ^ 36 - 6 * q ^ 37) + 3 * q ^ 38, (3 * q ^ 19 - 6 * q ^ 20) + q ^ 21, (3 * q ^ 37 - 6 * q ^ 38) + q ^ 39, q ^ 24, 10 * q ^ 18, 10 * q ^ 54, 10 * q ^ 36])
            end
        f17 = function (x, y, sgn)
                local v
                v = sgn * GetRoot(x * y, 2)
                return [10, 3x + 7y, 4 * x * y + x ^ 2 + 5 * y ^ 2, (-2 * v * x - 2 * v * y) + 2 * x * y + 4 * y ^ 2, 3 * x * y + 4 * y ^ 2, 2 * x * y ^ 2 + 2 * y ^ 3, (((((-8 * v * x * y - 6 * v * x ^ 2) - 6 * v * y ^ 2) - 3 * x * y ^ 2) - 6 * x ^ 2 * y) - 2 * x ^ 3) + y ^ 3, ((((-3 * v * x * y - v * x ^ 2) - 2 * v * y ^ 2) - x * y ^ 2) - 2 * x ^ 2 * y) + y ^ 3, -4 * v * x * y + 3 * x * y ^ 2 + 3 * y ^ 3, (-2 * v * x * y - 2 * v * y ^ 2) + x * y ^ 2 + 2 * y ^ 3, 3 * x * y ^ 2 + x ^ 2 * y + 3 * y ^ 3, (-v * x * y - v * y ^ 2) + x * y ^ 2 + y ^ 3, 0, (-2 * v * x * y ^ 2 - 2 * v * y ^ 3) + y ^ 4, -2 * v * x * y ^ 2 + x * y ^ 3 + y ^ 4, (((((-6 * v * x * y ^ 2 - 3 * v * x ^ 2 * y) - 5 * v * y ^ 3) - 4 * x * y ^ 3) - 4 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 0, 2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + 4 * y ^ 4, v * x ^ 2 * y ^ 2 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, -v * x ^ 10 * y ^ 24, ((((-4 * v * x * y ^ 3 - v * x ^ 2 * y ^ 2) - 4 * v * y ^ 4) - 4 * x * y ^ 4) - 2 * x ^ 2 * y ^ 3) - 2 * y ^ 5, v * x * y ^ 3 + 2 * v * x ^ 2 * y ^ 2 + v * x ^ 3 * y + 2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 2 * y ^ 5, -v * x * y ^ 3, v * x ^ 4 * y ^ 13 + v * x ^ 5 * y ^ 12, ((2 * v * x * y ^ 4 + 2 * v * x ^ 2 * y ^ 3 + x * y ^ 5) - x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + y ^ 6, 4 * x ^ 9 * y ^ 23 + 3 * x ^ 10 * y ^ 22, 10 * v * x * y ^ 4 + 14 * v * x ^ 2 * y ^ 3 + 8 * v * x ^ 3 * y ^ 2 + 2 * v * x ^ 4 * y + 2 * v * y ^ 5 + 6 * x * y ^ 5 + 11 * x ^ 2 * y ^ 4 + 11 * x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + x ^ 5 * y + y ^ 6, 4 * x ^ 27 * y ^ 65 + 3 * x ^ 28 * y ^ 64, 0, 3 * v * x * y ^ 5 + 6 * v * x ^ 2 * y ^ 4 + 3 * v * x ^ 3 * y ^ 3 + x * y ^ 6 + 3 * x ^ 2 * y ^ 5 + 4 * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3 + y ^ 7, 3 * x ^ 9 * y ^ 24 + 3 * x ^ 10 * y ^ 23 + x ^ 11 * y ^ 22, 3 * x ^ 27 * y ^ 66 + 3 * x ^ 28 * y ^ 65 + x ^ 29 * y ^ 64, v * x ^ 4 * y ^ 11 + v * x ^ 5 * y ^ 10, x ^ 6 * y ^ 14, v * x * y ^ 7 + v * x ^ 2 * y ^ 6 + v * x ^ 3 * y ^ 5 + 2 * x ^ 2 * y ^ 7 + 2 * x ^ 3 * y ^ 6, (((((((-2 * v * x * y ^ 7 - 6 * v * x ^ 2 * y ^ 6) - 6 * v * x ^ 3 * y ^ 5) - 2 * v * x ^ 4 * y ^ 4) - 3 * x ^ 2 * y ^ 7) - 8 * x ^ 3 * y ^ 6) - 6 * x ^ 4 * y ^ 5) - 3 * x ^ 5 * y ^ 4) + 2 * y ^ 9, ((((((3 * v * x * y ^ 7 - 9 * v * x ^ 3 * y ^ 5) - 6 * v * x ^ 4 * y ^ 4) + v * x ^ 6 * y ^ 2 + 2 * x * y ^ 8 + 2 * x ^ 2 * y ^ 7) - 5 * x ^ 3 * y ^ 6) - 8 * x ^ 4 * y ^ 5) - 2 * x ^ 5 * y ^ 4) + x ^ 6 * y ^ 3, x ^ 3 * y ^ 7, 4 * x ^ 18 * y ^ 44 + 3 * x ^ 19 * y ^ 43, x ^ 21 * y ^ 49, ((((((24 * v * x * y ^ 8 + 20 * v * x ^ 2 * y ^ 7) - 2 * v * x ^ 3 * y ^ 6) - 6 * v * x ^ 4 * y ^ 5) + 8 * v * y ^ 9 + 16 * x * y ^ 9 + 26 * x ^ 2 * y ^ 8 + 10 * x ^ 3 * y ^ 7) - 6 * x ^ 4 * y ^ 6) - 3 * x ^ 5 * y ^ 5) + 2 * y ^ 10, (-v * x ^ 18 * y ^ 44 - v * x ^ 19 * y ^ 43) + x ^ 18 * y ^ 45 + x ^ 19 * y ^ 44, 2 * v * x ^ 4 * y ^ 10, 2 * v * x ^ 13 * y ^ 31, ((((((v * x ^ 18 * y ^ 48 + v * x ^ 19 * y ^ 47 + v * x ^ 20 * y ^ 46) - v * x ^ 22 * y ^ 44) + x ^ 18 * y ^ 49) - 2 * x ^ 19 * y ^ 48) - 3 * x ^ 20 * y ^ 47) - x ^ 21 * y ^ 46) - x ^ 22 * y ^ 45, -2 * v * x ^ 10 * y ^ 23 + x ^ 9 * y ^ 25 + x ^ 10 * y ^ 24, 5 * x ^ 9 * y ^ 23 + 4 * x ^ 10 * y ^ 22 + x ^ 11 * y ^ 21, 0, -2 * v * x ^ 19 * y ^ 44 + x ^ 18 * y ^ 46 + x ^ 19 * y ^ 45, 4 * x ^ 9 * y ^ 25 + 2 * x ^ 10 * y ^ 24 + 2 * x ^ 11 * y ^ 23 + 2 * x ^ 12 * y ^ 22, 7 * x ^ 9 * y ^ 22 + 3 * x ^ 10 * y ^ 21, 7 * x ^ 27 * y ^ 64 + 3 * x ^ 28 * y ^ 63, (-2 * v * x ^ 18 * y ^ 43 - 2 * v * x ^ 19 * y ^ 42) + 4 * x ^ 18 * y ^ 44 + 2 * x ^ 19 * y ^ 43, -4 * v * x ^ 10 * y ^ 22 + 3 * x ^ 9 * y ^ 24 + 3 * x ^ 10 * y ^ 23, -4 * v * x ^ 19 * y ^ 43 + 3 * x ^ 18 * y ^ 45 + 3 * x ^ 19 * y ^ 44, x ^ 12 * y ^ 28, 10 * x ^ 9 * y ^ 21, 10 * x ^ 27 * y ^ 63, 10 * x ^ 18 * y ^ 42] * x ^ 0 * y ^ 0
            end
        f21 = function (r, p)
                local q
                q = -r // p
                return adj(p, [15, -9 + 6q, (5 - 8q) + 2 * q ^ 2, (4 - 2q) + q ^ 2, (4 - 5q) + q ^ 2, (-1 + 3q) - q ^ 2, (-12q + 9 * q ^ 2) - 4 * q ^ 3, (-3q + 3 * q ^ 2) - q ^ 3, -4 - 3 * q ^ 2, -1 + q, (-2 + 5q) - 3 * q ^ 2, -1, 0, -(q ^ 2), 1, (((-1 + 9q) - 9 * q ^ 2) + 3 * q ^ 3) - q ^ 4, 0, (((4 - 4q) + 2 * q ^ 2) - 4 * q ^ 3) + q ^ 4, (q - q ^ 2) - q ^ 4, q ^ 14, (-6q + 8 * q ^ 2) - 3 * q ^ 3, (((-1 + 3q) - 4 * q ^ 2) + 4 * q ^ 3) - q ^ 4, q ^ 2, -(q ^ 8), (1 - 2q) + 2 * q ^ 3 + 2 * q ^ 4, (4 * q ^ 12 - 5 * q ^ 13) + q ^ 14, (((((2 - 8q) + 21 * q ^ 2) - 20 * q ^ 3) + 11 * q ^ 4) - 4 * q ^ 5) + q ^ 6, (4 * q ^ 36 - 5 * q ^ 37) + q ^ 38, 0, ((((-1 + 2q) - 4 * q ^ 2) + 6 * q ^ 3) - 4 * q ^ 4) + 2 * q ^ 5, (-2 * q ^ 12 + 5 * q ^ 13) - 3 * q ^ 14, (-2 * q ^ 36 + 5 * q ^ 37) - 3 * q ^ 38, -(q ^ 6), 3 * q ^ 8, 4 * q ^ 3 - 5 * q ^ 4, (((((-1 + 6 * q ^ 2) - 11 * q ^ 3) + 9 * q ^ 4) - 6 * q ^ 5) + 3 * q ^ 6) - 3 * q ^ 7, ((((-q - q ^ 2) + 8 * q ^ 4) - 9 * q ^ 5) + 3 * q ^ 6) - q ^ 8, 3 * q ^ 4, (4 * q ^ 24 - 5 * q ^ 25) + q ^ 26, 3 * q ^ 28, ((((-4q + 20 * q ^ 2) - 32 * q ^ 3) + 24 * q ^ 4) - 12 * q ^ 5) + q ^ 6 + 2 * q ^ 7, -(q ^ 24), q ^ 6, q ^ 18, (((-(q ^ 24) + 3 * q ^ 26) - 5 * q ^ 27) + 3 * q ^ 28) - q ^ 29, q ^ 12, (5 * q ^ 12 - 8 * q ^ 13) + 2 * q ^ 14, 0, q ^ 24, (((4 * q ^ 12 - 4 * q ^ 13) + 2 * q ^ 14) - 4 * q ^ 15) + q ^ 16, -9 * q ^ 12 + 6 * q ^ 13, -9 * q ^ 36 + 6 * q ^ 37, (4 * q ^ 24 - 2 * q ^ 25) + q ^ 26, -4 * q ^ 12 - 3 * q ^ 14, -4 * q ^ 24 - 3 * q ^ 26, 3 * q ^ 16, 15 * q ^ 12, 15 * q ^ 36, 15 * q ^ 24])
            end
        f23 = function (r, p)
                local q
                q = -r // p
                return adj(p, [15, -6 + 9q, (3 - 6q) + 6 * q ^ 2, -4q + 3 * q ^ 2, (1 - 5q) + 4 * q ^ 2, (q - 2 * q ^ 2) + 2 * q ^ 3, ((4 - 12q) + 6 * q ^ 2) - 3 * q ^ 3, ((1 - 3q) + 2 * q ^ 2) - q ^ 3, -6 * q ^ 2 + q ^ 3, -(q ^ 2) + q ^ 3, ((-1 + 2q) - 4 * q ^ 2) + 3 * q ^ 3, -(q ^ 2), 0, -(q ^ 2), -(q ^ 3), ((5q - 9 * q ^ 2) + 6 * q ^ 3) - 3 * q ^ 4, 0, ((-4q + 4 * q ^ 2) - 4 * q ^ 3) + 3 * q ^ 4, (q - q ^ 2) + q ^ 3, -(q ^ 21), ((4 * q ^ 2 - 6 * q ^ 3) + 5 * q ^ 4) - 2 * q ^ 5, (((q - 4 * q ^ 2) + 4 * q ^ 3) - 3 * q ^ 4) + q ^ 5, -(q ^ 3), -(q ^ 12), -2 * q ^ 3 + q ^ 4, (q ^ 18 - 5 * q ^ 19) + 4 * q ^ 20, (((((1 - 4q) + 13 * q ^ 2) - 20 * q ^ 3) + 18 * q ^ 4) - 10 * q ^ 5) + q ^ 6, (q ^ 54 - 5 * q ^ 55) + 4 * q ^ 56, 0, (6 * q ^ 3 - 8 * q ^ 4) + 5 * q ^ 5, ((-(q ^ 18) + 2 * q ^ 19) - 4 * q ^ 20) + 3 * q ^ 21, ((-(q ^ 54) + 2 * q ^ 55) - 4 * q ^ 56) + 3 * q ^ 57, q ^ 9, 3 * q ^ 12, 5 * q ^ 5 - 4 * q ^ 6, ((((-3 * q ^ 3 + 9 * q ^ 4) - 12 * q ^ 5) + 11 * q ^ 6) - 3 * q ^ 7) + q ^ 9, (((((q ^ 2 - 5 * q ^ 3) + 6 * q ^ 4) - 3 * q ^ 5) + q ^ 6) - q ^ 7) + 2 * q ^ 8, 3 * q ^ 6, (q ^ 36 - 5 * q ^ 37) + 4 * q ^ 38, 3 * q ^ 42, (((((2 * q ^ 3 - 14 * q ^ 5) + 28 * q ^ 6) - 28 * q ^ 7) + 15 * q ^ 8) - 6 * q ^ 9) + 2 * q ^ 10, -(q ^ 38), -(q ^ 9), -(q ^ 27), ((2 * q ^ 38 - 2 * q ^ 39) - 4 * q ^ 41) + 3 * q ^ 42, -(q ^ 21), (3 * q ^ 18 - 6 * q ^ 19) + 6 * q ^ 20, 0, -(q ^ 39), ((-4 * q ^ 19 + 4 * q ^ 20) - 4 * q ^ 21) + 3 * q ^ 22, -6 * q ^ 18 + 9 * q ^ 19, -6 * q ^ 54 + 9 * q ^ 55, -4 * q ^ 37 + 3 * q ^ 38, -6 * q ^ 20 + q ^ 21, -6 * q ^ 38 + q ^ 39, 3 * q ^ 24, 15 * q ^ 18, 15 * q ^ 54, 15 * q ^ 36])
            end
        f25 = function (r, p)
                local q
                q = -r // p
                return adj(p, [16, -8 + 8q, (4 - 8q) + 4 * q ^ 2, (4 - 8q) + 4 * q ^ 2, (2 - 6q) + 2 * q ^ 2, 2q - 2 * q ^ 2, ((-2 + 6q) - 6 * q ^ 2) + 2 * q ^ 3, 2q - 2 * q ^ 2, ((-2 + 6q) - 6 * q ^ 2) + 2 * q ^ 3, ((-1 + 4q) - 4 * q ^ 2) + q ^ 3, ((-1 + 4q) - 4 * q ^ 2) + q ^ 3, 2q - 2 * q ^ 2, q ^ 9, (-2q + 2 * q ^ 2) - 2 * q ^ 3, (-q + 2 * q ^ 2) - q ^ 3, (-q + 2 * q ^ 2) - q ^ 3, q ^ 3, 4 + 8 * q ^ 2 + 4 * q ^ 4, 0, 0, 0, (-1 - q ^ 2) + q ^ 3 + q ^ 5, 0, 0, (-2 * q ^ 2 + 4 * q ^ 3) - 2 * q ^ 4, (2 * q ^ 15 - 6 * q ^ 16) + 2 * q ^ 17, (-2 * q ^ 2 + 4 * q ^ 3) - 2 * q ^ 4, (2 * q ^ 45 - 6 * q ^ 46) + 2 * q ^ 47, q ^ 6, ((q ^ 2 - 3 * q ^ 3) + 3 * q ^ 4) - q ^ 5, ((-(q ^ 15) + 4 * q ^ 16) - 4 * q ^ 17) + q ^ 18, ((-(q ^ 45) + 4 * q ^ 46) - 4 * q ^ 47) + q ^ 48, 0, -2 * q ^ 10, -(q ^ 4) + q ^ 5, (-1 - 5 * q ^ 3) + 5 * q ^ 6 + q ^ 9, -(q ^ 4) + q ^ 5, -2 * q ^ 5, (2 * q ^ 30 - 6 * q ^ 31) + 2 * q ^ 32, -2 * q ^ 35, -2 * q ^ 5, 2 * q ^ 31 - 2 * q ^ 32, 0, 0, ((((-2 * q ^ 31 + 6 * q ^ 32) - 2 * q ^ 33) + 2 * q ^ 34) - 6 * q ^ 35) + 2 * q ^ 36, (-(q ^ 16) + 2 * q ^ 17) - q ^ 18, (4 * q ^ 15 - 8 * q ^ 16) + 4 * q ^ 17, q ^ 12, (-(q ^ 31) + 2 * q ^ 32) - q ^ 33, 4 * q ^ 15 + 8 * q ^ 17 + 4 * q ^ 19, -8 * q ^ 15 + 8 * q ^ 16, -8 * q ^ 45 + 8 * q ^ 46, (4 * q ^ 30 - 8 * q ^ 31) + 4 * q ^ 32, ((-2 * q ^ 15 + 6 * q ^ 16) - 6 * q ^ 17) + 2 * q ^ 18, ((-2 * q ^ 30 + 6 * q ^ 31) - 6 * q ^ 32) + 2 * q ^ 33, -2 * q ^ 20, 16 * q ^ 15, 16 * q ^ 45, 16 * q ^ 30])
            end
        f26 = function (r, p)
                local q
                q = -r // p
                return adj(p, [20, -10 + 10q, (4 - 12q) + 4 * q ^ 2, (2 - 8q) + 2 * q ^ 2, (4 - 6q) + 4 * q ^ 2, ((-1 + 3q) - 3 * q ^ 2) + q ^ 3, ((4 - 6q) + 6 * q ^ 2) - 4 * q ^ 3, ((1 - q) + q ^ 2) - q ^ 3, 6q - 6 * q ^ 2, 3q - 3 * q ^ 2, ((-1 + 6q) - 6 * q ^ 2) + q ^ 3, ((-1 + q) - q ^ 2) + q ^ 3, 0, 2 * q ^ 2, (-q + 2 * q ^ 2) - q ^ 3, (((-1 + 5q) - 8 * q ^ 2) + 5 * q ^ 3) - q ^ 4, 0, (((2 - 4q) + 8 * q ^ 2) - 4 * q ^ 3) + 2 * q ^ 4, ((-1 + q) - q ^ 4) + q ^ 5, 0, ((-2q + 6 * q ^ 2) - 6 * q ^ 3) + 2 * q ^ 4, ((2q - 6 * q ^ 2) + 6 * q ^ 3) - 2 * q ^ 4, 0, 0, 1 + q ^ 2 + q ^ 4 + q ^ 6, (-4 * q ^ 15 + 6 * q ^ 16) - 4 * q ^ 17, (((((3 - 6q) + 15 * q ^ 2) - 20 * q ^ 3) + 15 * q ^ 4) - 6 * q ^ 5) + 3 * q ^ 6, (-4 * q ^ 45 + 6 * q ^ 46) - 4 * q ^ 47, 0, ((((q - 2 * q ^ 2) + 7 * q ^ 3) - 7 * q ^ 4) + 2 * q ^ 5) - q ^ 6, ((q ^ 15 - 6 * q ^ 16) + 6 * q ^ 17) - q ^ 18, ((q ^ 45 - 6 * q ^ 46) + 6 * q ^ 47) - q ^ 48, 0, 2 * q ^ 10, -4 * q ^ 4 + 4 * q ^ 5, ((((3 * q ^ 2 - 6 * q ^ 3) + 9 * q ^ 4) - 9 * q ^ 5) + 6 * q ^ 6) - 3 * q ^ 7, ((((2 * q ^ 2 - 4 * q ^ 3) + 4 * q ^ 4) - 4 * q ^ 5) + 4 * q ^ 6) - 2 * q ^ 7, -2 * q ^ 5, (4 * q ^ 30 - 6 * q ^ 31) + 4 * q ^ 32, -2 * q ^ 35, (((((2 * q ^ 2 - 10 * q ^ 3) + 20 * q ^ 4) - 26 * q ^ 5) + 20 * q ^ 6) - 10 * q ^ 7) + 2 * q ^ 8, ((-(q ^ 30) + q ^ 31) - q ^ 32) + q ^ 33, 0, 0, (((((-(q ^ 30) - q ^ 31) + 4 * q ^ 32) - 2 * q ^ 33) + 2 * q ^ 34) - 4 * q ^ 35) + q ^ 36 + q ^ 37, (q ^ 16 - 2 * q ^ 17) + q ^ 18, (-4 * q ^ 15 + 12 * q ^ 16) - 4 * q ^ 17, 0, (-(q ^ 31) + 2 * q ^ 32) - q ^ 33, (((-2 * q ^ 15 + 4 * q ^ 16) - 8 * q ^ 17) + 4 * q ^ 18) - 2 * q ^ 19, 10 * q ^ 15 - 10 * q ^ 16, 10 * q ^ 45 - 10 * q ^ 46, (2 * q ^ 30 - 8 * q ^ 31) + 2 * q ^ 32, -6 * q ^ 16 + 6 * q ^ 17, 6 * q ^ 31 - 6 * q ^ 32, 2 * q ^ 20, -20 * q ^ 15, -20 * q ^ 45, 20 * q ^ 30])
            end
        f27 = function (r, p, sgn)
                local v
                v = sgn * GetRoot(r // p, 2)
                return adj(p, [20, -11 - 9 * v ^ 2, 6 + 10 * v ^ 2 + 4 * v ^ 4, 4 + 3v + 4 * v ^ 2 + 3 * v ^ 3 + 2 * v ^ 4, 4 + 7 * v ^ 2 + 2 * v ^ 4, (-1 - 3 * v ^ 2) - 2 * v ^ 4, (((((3 - 9v) + 9 * v ^ 2) - 12 * v ^ 3) + 15 * v ^ 4) - 9 * v ^ 5) + 3 * v ^ 6, (((((1 - 2v) + 3 * v ^ 2) - 5 * v ^ 3) + 4 * v ^ 4) - 2 * v ^ 5) + v ^ 6, ((-2 - 6 * v ^ 2) - 6 * v ^ 3) - 2 * v ^ 6, ((((-1 - 2v) - v ^ 2) - 3 * v ^ 3) - v ^ 4) - v ^ 5, ((-2 - 6 * v ^ 2) - 4 * v ^ 4) - v ^ 6, ((-v - v ^ 2) - v ^ 3) - v ^ 5, 0, v + 2 * v ^ 3 + v ^ 5, v ^ 2 + 2 * v ^ 3 + v ^ 5, (((((((-3 + 5v) - 7 * v ^ 2) + 7 * v ^ 3) - 11 * v ^ 4) + 6 * v ^ 5) - 7 * v ^ 6) + 3 * v ^ 7) - v ^ 8, 0, 4 + 5 * v ^ 2 + 4 * v ^ 4 + 5 * v ^ 6 + 2 * v ^ 8, ((-(v ^ 4) + v ^ 5) - v ^ 6) - v ^ 9, 0, 1 + v ^ 2 + v ^ 3 + 2 * v ^ 4 + 2 * v ^ 5 + 2 * v ^ 6 + v ^ 7, ((((((-1 - 3 * v ^ 2) + v ^ 3) - 5 * v ^ 4) + 3 * v ^ 5) - 5 * v ^ 6) + 2 * v ^ 7) - 2 * v ^ 8, 0, 0, (((((v ^ 2 - 2 * v ^ 3) + v ^ 4) - 2 * v ^ 5) - v ^ 6) - 2 * v ^ 7) + v ^ 10, (-4 * v ^ 27 - 7 * v ^ 29) - 2 * v ^ 31, (((((((((1 - 2v) + 10 * v ^ 2) - 10 * v ^ 3) + 21 * v ^ 4) - 18 * v ^ 5) + 25 * v ^ 6) - 16 * v ^ 7) + 18 * v ^ 8) - 8 * v ^ 9) + 6 * v ^ 10 + v ^ 12, (-4 * v ^ 81 - 7 * v ^ 83) - 2 * v ^ 85, 0, (((((((((-(v ^ 2) + 3 * v ^ 3) - 5 * v ^ 4) + 6 * v ^ 5) - 8 * v ^ 6) + 4 * v ^ 7) - 5 * v ^ 8) + 3 * v ^ 9) - 2 * v ^ 10) + 2 * v ^ 11) - v ^ 12, 2 * v ^ 27 + 6 * v ^ 29 + 4 * v ^ 31 + v ^ 33, 2 * v ^ 81 + 6 * v ^ 83 + 4 * v ^ 85 + v ^ 87, 0, -4 * v ^ 18, -5 * v ^ 7 - 5 * v ^ 9, ((((((((((((-1 - 2 * v ^ 3) + 6 * v ^ 4) - 6 * v ^ 5) + 11 * v ^ 6) - 6 * v ^ 7) + 12 * v ^ 8) - 3 * v ^ 9) + 9 * v ^ 10) - 3 * v ^ 11) + 8 * v ^ 12) - 3 * v ^ 13) + 3 * v ^ 14) - v ^ 15, ((((((((((((2 * v ^ 2 - 3 * v ^ 3) + 7 * v ^ 4) - 10 * v ^ 5) + 15 * v ^ 6) - 21 * v ^ 7) + 20 * v ^ 8) - 20 * v ^ 9) + 12 * v ^ 10) - 4 * v ^ 11) + 5 * v ^ 13) - 3 * v ^ 14) + 3 * v ^ 15) - v ^ 16, 4 * v ^ 9, 4 * v ^ 54 + 7 * v ^ 56 + 2 * v ^ 58, 4 * v ^ 63, ((((((((((1 + 8 * v ^ 3) - 11 * v ^ 4) + 36 * v ^ 5) - 33 * v ^ 6) + 76 * v ^ 7) - 48 * v ^ 8) + 86 * v ^ 9) - 38 * v ^ 10) + 54 * v ^ 11) - 14 * v ^ 12) + 16 * v ^ 13 + v ^ 14 + 2 * v ^ 16, ((-(v ^ 55) - v ^ 56) - v ^ 57) - v ^ 59, 0, 0, v ^ 55 + 2 * v ^ 56 + v ^ 57 + 4 * v ^ 58 + v ^ 59 + 3 * v ^ 60 + 5 * v ^ 62 + 3 * v ^ 64, (-(v ^ 29) - 2 * v ^ 30) - v ^ 32, (-6 * v ^ 27 - 10 * v ^ 29) - 4 * v ^ 31, 0, v ^ 56 + 2 * v ^ 57 + v ^ 59, (((-4 * v ^ 27 - 5 * v ^ 29) - 4 * v ^ 31) - 5 * v ^ 33) - 2 * v ^ 35, 11 * v ^ 27 + 9 * v ^ 29, 11 * v ^ 81 + 9 * v ^ 83, 4 * v ^ 54 + 3 * v ^ 55 + 4 * v ^ 56 + 3 * v ^ 57 + 2 * v ^ 58, 2 * v ^ 27 + 6 * v ^ 29 + 6 * v ^ 30 + 2 * v ^ 33, ((-2 * v ^ 54 - 6 * v ^ 56) - 6 * v ^ 57) - 2 * v ^ 60, -4 * v ^ 36, -20 * v ^ 27, -20 * v ^ 81, 20 * v ^ 54])
            end
        f27 = function (x, y, sgn)
                local v
                v = sgn * GetRoot(x * y, 2)
                return [20, 9x + 11y, 10 * x * y + 4 * x ^ 2 + 6 * y ^ 2, 3 * v * x + 3 * v * y + 4 * x * y + 2 * x ^ 2 + 4 * y ^ 2, 7 * x * y + 2 * x ^ 2 + 4 * y ^ 2, 3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, ((((12 * v * x * y + 9 * v * x ^ 2 + 9 * v * y ^ 2) - 9 * x * y ^ 2) - 15 * x ^ 2 * y) - 3 * x ^ 3) - 3 * y ^ 3, ((((5 * v * x * y + 2 * v * x ^ 2 + 2 * v * y ^ 2) - 3 * x * y ^ 2) - 4 * x ^ 2 * y) - x ^ 3) - y ^ 3, 6 * v * x * y + 6 * x * y ^ 2 + 2 * x ^ 3 + 2 * y ^ 3, 3 * v * x * y + v * x ^ 2 + 2 * v * y ^ 2 + x * y ^ 2 + x ^ 2 * y + y ^ 3, 6 * x * y ^ 2 + 4 * x ^ 2 * y + x ^ 3 + 2 * y ^ 3, v * x * y + v * x ^ 2 + v * y ^ 2 + x * y ^ 2, 0, 2 * v * x * y ^ 2 + v * x ^ 2 * y + v * y ^ 3, 2 * v * x * y ^ 2 + v * x ^ 2 * y + x * y ^ 3, (((((7 * v * x * y ^ 2 + 6 * v * x ^ 2 * y + 3 * v * x ^ 3 + 5 * v * y ^ 3) - 7 * x * y ^ 3) - 11 * x ^ 2 * y ^ 2) - 7 * x ^ 3 * y) - x ^ 4) - 3 * y ^ 4, 0, 5 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 5 * x ^ 3 * y + 2 * x ^ 4 + 4 * y ^ 4, -v * x ^ 2 * y ^ 2 + v * x ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 0, (((((-v * x * y ^ 3 - 2 * v * x ^ 2 * y ^ 2) - v * x ^ 3 * y) - x * y ^ 4) - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - y ^ 5, ((-v * x * y ^ 3 - 3 * v * x ^ 2 * y ^ 2) - 2 * v * x ^ 3 * y) + 3 * x * y ^ 4 + 5 * x ^ 2 * y ^ 3 + 5 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + y ^ 5, 0, 0, ((((-2 * v * x * y ^ 4 - 2 * v * x ^ 2 * y ^ 3) - 2 * v * x ^ 3 * y ^ 2) + x * y ^ 5 + x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + x ^ 5 * y, (-4 * v * x ^ 13 * y ^ 18 - 7 * v * x ^ 14 * y ^ 17) - 2 * v * x ^ 15 * y ^ 16, ((((-10 * v * x * y ^ 4 - 18 * v * x ^ 2 * y ^ 3) - 16 * v * x ^ 3 * y ^ 2) - 8 * v * x ^ 4 * y) - 2 * v * y ^ 5) + 10 * x * y ^ 5 + 21 * x ^ 2 * y ^ 4 + 25 * x ^ 3 * y ^ 3 + 18 * x ^ 4 * y ^ 2 + 6 * x ^ 5 * y + x ^ 6 + y ^ 6, (-4 * v * x ^ 40 * y ^ 51 - 7 * v * x ^ 41 * y ^ 50) - 2 * v * x ^ 42 * y ^ 49, 0, ((((-3 * v * x * y ^ 5 - 6 * v * x ^ 2 * y ^ 4) - 4 * v * x ^ 3 * y ^ 3) - 3 * v * x ^ 4 * y ^ 2) - 2 * v * x ^ 5 * y) + x * y ^ 6 + 5 * x ^ 2 * y ^ 5 + 8 * x ^ 3 * y ^ 4 + 5 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, ((-2 * v * x ^ 13 * y ^ 19 - 6 * v * x ^ 14 * y ^ 18) - 4 * v * x ^ 15 * y ^ 17) - v * x ^ 16 * y ^ 16, ((-2 * v * x ^ 40 * y ^ 52 - 6 * v * x ^ 41 * y ^ 51) - 4 * v * x ^ 42 * y ^ 50) - v * x ^ 43 * y ^ 49, 0, -4 * x ^ 9 * y ^ 11, 5 * v * x ^ 3 * y ^ 5 + 5 * v * x ^ 4 * y ^ 4, (((((((2 * v * x * y ^ 7 + 6 * v * x ^ 2 * y ^ 6 + 6 * v * x ^ 3 * y ^ 5 + 3 * v * x ^ 4 * y ^ 4 + 3 * v * x ^ 5 * y ^ 3 + 3 * v * x ^ 6 * y ^ 2 + v * x ^ 7 * y) - 6 * x ^ 2 * y ^ 7) - 11 * x ^ 3 * y ^ 6) - 12 * x ^ 4 * y ^ 5) - 9 * x ^ 5 * y ^ 4) - 8 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2) + y ^ 9, ((((((((3 * v * x * y ^ 7 + 10 * v * x ^ 2 * y ^ 6 + 21 * v * x ^ 3 * y ^ 5 + 20 * v * x ^ 4 * y ^ 4 + 4 * v * x ^ 5 * y ^ 3) - 5 * v * x ^ 6 * y ^ 2) - 3 * v * x ^ 7 * y) - 2 * x * y ^ 8) - 7 * x ^ 2 * y ^ 7) - 15 * x ^ 3 * y ^ 6) - 20 * x ^ 4 * y ^ 5) - 12 * x ^ 5 * y ^ 4) + 3 * x ^ 7 * y ^ 2 + x ^ 8 * y, 4 * v * x ^ 4 * y ^ 5, 4 * x ^ 27 * y ^ 35 + 7 * x ^ 28 * y ^ 34 + 2 * x ^ 29 * y ^ 33, 4 * v * x ^ 31 * y ^ 38, ((((((8 * v * x * y ^ 8 + 36 * v * x ^ 2 * y ^ 7 + 76 * v * x ^ 3 * y ^ 6 + 86 * v * x ^ 4 * y ^ 5 + 54 * v * x ^ 5 * y ^ 4 + 16 * v * x ^ 6 * y ^ 3) - 11 * x ^ 2 * y ^ 8) - 33 * x ^ 3 * y ^ 7) - 48 * x ^ 4 * y ^ 6) - 38 * x ^ 5 * y ^ 5) - 14 * x ^ 6 * y ^ 4) + x ^ 7 * y ^ 3 + 2 * x ^ 8 * y ^ 2 + y ^ 10, v * x ^ 27 * y ^ 35 + v * x ^ 28 * y ^ 34 + v * x ^ 29 * y ^ 33 + x ^ 28 * y ^ 35, 0, 0, ((((((-v * x ^ 27 * y ^ 39 - v * x ^ 28 * y ^ 38) - v * x ^ 29 * y ^ 37) - 2 * x ^ 28 * y ^ 39) - 4 * x ^ 29 * y ^ 38) - 3 * x ^ 30 * y ^ 37) - 5 * x ^ 31 * y ^ 36) - 3 * x ^ 32 * y ^ 35, (-v * x ^ 14 * y ^ 19 - 2 * x ^ 15 * y ^ 19) - x ^ 16 * y ^ 18, (-6 * v * x ^ 13 * y ^ 18 - 10 * v * x ^ 14 * y ^ 17) - 4 * v * x ^ 15 * y ^ 16, 0, 2 * v * x ^ 28 * y ^ 35 + v * x ^ 29 * y ^ 34 + x ^ 28 * y ^ 36, (((-4 * v * x ^ 13 * y ^ 20 - 5 * v * x ^ 14 * y ^ 19) - 4 * v * x ^ 15 * y ^ 18) - 5 * v * x ^ 16 * y ^ 17) - 2 * v * x ^ 17 * y ^ 16, -11 * v * x ^ 13 * y ^ 17 - 9 * v * x ^ 14 * y ^ 16, -11 * v * x ^ 40 * y ^ 50 - 9 * v * x ^ 41 * y ^ 49, 3 * v * x ^ 27 * y ^ 34 + 3 * v * x ^ 28 * y ^ 33 + 4 * x ^ 27 * y ^ 35 + 4 * x ^ 28 * y ^ 34 + 2 * x ^ 29 * y ^ 33, ((-2 * v * x ^ 13 * y ^ 19 - 6 * v * x ^ 14 * y ^ 18) - 2 * v * x ^ 16 * y ^ 16) - 6 * x ^ 15 * y ^ 18, 6 * v * x ^ 28 * y ^ 34 + 2 * x ^ 27 * y ^ 36 + 6 * x ^ 28 * y ^ 35 + 2 * x ^ 30 * y ^ 33, -4 * x ^ 18 * y ^ 22, -20 * v * x ^ 13 * y ^ 16, -20 * v * x ^ 40 * y ^ 49, 20 * x ^ 27 * y ^ 33] * x ^ 0 * y ^ 0
            end
        f31 = function (r, p, sgn)
                local v
                v = sgn * GetRoot(r // p, 2)
                return adj(p, [20, -7 - 13 * v ^ 2, 2 + 10 * v ^ 2 + 8 * v ^ 4, ((-v + 4 * v ^ 2) - v ^ 3) + 6 * v ^ 4, 1 + 6 * v ^ 2 + 7 * v ^ 4, (-(v ^ 2) - 4 * v ^ 4) - 3 * v ^ 6, 5 + 3v + 15 * v ^ 2 + 4 * v ^ 3 + 9 * v ^ 4 + 3 * v ^ 5 + v ^ 6, (1 + v + 4 * v ^ 2 + v ^ 3 + 3 * v ^ 4 + v ^ 5) - v ^ 6, (2 * v ^ 3 - 6 * v ^ 4) - 4 * v ^ 6, ((v ^ 3 - 2 * v ^ 4) + v ^ 5) - 2 * v ^ 6, (-3 * v ^ 2 - 7 * v ^ 4) - 4 * v ^ 6, (v ^ 3 - v ^ 4) - 2 * v ^ 6, 0, Unknown(), -(v ^ 5) + 2 * v ^ 6 + v ^ 8, (((((-4 * v ^ 2 - 2 * v ^ 3) - 11 * v ^ 4) - 3 * v ^ 5) - 9 * v ^ 6) - 2 * v ^ 7) - 3 * v ^ 8, 0, 5 * v ^ 2 + 4 * v ^ 4 + 5 * v ^ 6 + 6 * v ^ 8, Unknown(), 0, Unknown(), (((((-(v ^ 2) - v ^ 3) - 5 * v ^ 4) - v ^ 5) - 6 * v ^ 6) - 4 * v ^ 8) - 2 * v ^ 10, 0, 0, v ^ 6 + v ^ 8 + 2 * v ^ 9 + 2 * v ^ 10 + 2 * v ^ 12, (-(v ^ 39) - 6 * v ^ 41) - 7 * v ^ 43, 1 + 3 * v ^ 2 + 2 * v ^ 3 + 12 * v ^ 4 + 4 * v ^ 5 + 27 * v ^ 6 + 6 * v ^ 7 + 27 * v ^ 8 + 4 * v ^ 9 + 13 * v ^ 10 + 2 * v ^ 11 + 3 * v ^ 12, (-(v ^ 117) - 6 * v ^ 119) - 7 * v ^ 121, 0, ((((((-5 * v ^ 6 - 2 * v ^ 7) - 10 * v ^ 8) - 3 * v ^ 9) - 7 * v ^ 10) - v ^ 11) - 3 * v ^ 12) - v ^ 14, 3 * v ^ 41 + 7 * v ^ 43 + 4 * v ^ 45, 3 * v ^ 119 + 7 * v ^ 121 + 4 * v ^ 123, 0, 2 * v ^ 26, Unknown(), (3 * v ^ 6 + 6 * v ^ 8 + v ^ 9 + 15 * v ^ 10 + 3 * v ^ 11 + 13 * v ^ 12 + 3 * v ^ 13 + 9 * v ^ 14 + v ^ 15) - 2 * v ^ 18, Unknown(), -2 * v ^ 13, v ^ 78 + 6 * v ^ 80 + 7 * v ^ 82, -2 * v ^ 91, Unknown(), (v ^ 81 - v ^ 82) - 2 * v ^ 84, 0, 0, ((((2 * v ^ 82 + v ^ 83 + 4 * v ^ 84 + 2 * v ^ 86 + 3 * v ^ 88) - v ^ 89) + 2 * v ^ 90) - v ^ 91) - 2 * v ^ 92, (v ^ 44 - 2 * v ^ 45) - v ^ 47, (-2 * v ^ 39 - 10 * v ^ 41) - 8 * v ^ 43, 0, -(v ^ 83) + 2 * v ^ 84 + v ^ 86, ((-5 * v ^ 41 - 4 * v ^ 43) - 5 * v ^ 45) - 6 * v ^ 47, 7 * v ^ 39 + 13 * v ^ 41, 7 * v ^ 117 + 13 * v ^ 119, ((-(v ^ 79) + 4 * v ^ 80) - v ^ 81) + 6 * v ^ 82, -2 * v ^ 42 + 6 * v ^ 43 + 4 * v ^ 45, (2 * v ^ 81 - 6 * v ^ 82) - 4 * v ^ 84, 2 * v ^ 52, -20 * v ^ 39, -20 * v ^ 117, 20 * v ^ 78])
            end
        f31 = function (x, y, sgn)
                local v
                v = sgn * GetRoot(x * y, 2)
                return [20, 13x + 7y, 10 * x * y + 8 * x ^ 2 + 2 * y ^ 2, v * x + v * y + 4 * x * y + 6 * x ^ 2, 6 * x * y + 7 * x ^ 2 + y ^ 2, x * y ^ 2 + 4 * x ^ 2 * y + 3 * x ^ 3, ((((4 * v * x * y + 3 * v * x ^ 2 + 3 * v * y ^ 2) - 15 * x * y ^ 2) - 9 * x ^ 2 * y) - x ^ 3) - 5 * y ^ 3, ((((v * x * y + v * x ^ 2 + v * y ^ 2) - 4 * x * y ^ 2) - 3 * x ^ 2 * y) + x ^ 3) - y ^ 3, 2 * v * x * y + 6 * x ^ 2 * y + 4 * x ^ 3, v * x * y + v * x ^ 2 + 2 * x ^ 2 * y + 2 * x ^ 3, 3 * x * y ^ 2 + 7 * x ^ 2 * y + 4 * x ^ 3, v * x * y + x ^ 2 * y + 2 * x ^ 3, 0, v * x ^ 2 * y + v * x ^ 3, v * x ^ 2 * y + 2 * x ^ 3 * y + x ^ 4, ((((2 * v * x * y ^ 2 + 3 * v * x ^ 2 * y + 2 * v * x ^ 3) - 4 * x * y ^ 3) - 11 * x ^ 2 * y ^ 2) - 9 * x ^ 3 * y) - 3 * x ^ 4, 0, 5 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 5 * x ^ 3 * y + 6 * x ^ 4, v * x * y ^ 3 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 0, (((((-v * x ^ 2 * y ^ 2 - v * x ^ 3 * y) + v * x ^ 4) - x ^ 2 * y ^ 3) - 5 * x ^ 3 * y ^ 2) - 6 * x ^ 4 * y) - 3 * x ^ 5, (-v * x * y ^ 3 - v * x ^ 2 * y ^ 2) + x * y ^ 4 + 5 * x ^ 2 * y ^ 3 + 6 * x ^ 3 * y ^ 2 + 4 * x ^ 4 * y + 2 * x ^ 5, 0, 0, -2 * v * x ^ 4 * y + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + 2 * x ^ 6, v * x ^ 19 * y ^ 12 + 6 * v * x ^ 20 * y ^ 11 + 7 * v * x ^ 21 * y ^ 10, ((((-2 * v * x * y ^ 4 - 4 * v * x ^ 2 * y ^ 3) - 6 * v * x ^ 3 * y ^ 2) - 4 * v * x ^ 4 * y) - 2 * v * x ^ 5) + 3 * x * y ^ 5 + 12 * x ^ 2 * y ^ 4 + 27 * x ^ 3 * y ^ 3 + 27 * x ^ 4 * y ^ 2 + 13 * x ^ 5 * y + 3 * x ^ 6 + y ^ 6, v * x ^ 58 * y ^ 33 + 6 * v * x ^ 59 * y ^ 32 + 7 * v * x ^ 60 * y ^ 31, 0, ((-2 * v * x ^ 3 * y ^ 3 - 3 * v * x ^ 4 * y ^ 2) - v * x ^ 5 * y) + 5 * x ^ 3 * y ^ 4 + 10 * x ^ 4 * y ^ 3 + 7 * x ^ 5 * y ^ 2 + 3 * x ^ 6 * y + x ^ 7, 3 * v * x ^ 20 * y ^ 12 + 7 * v * x ^ 21 * y ^ 11 + 4 * v * x ^ 22 * y ^ 10, 3 * v * x ^ 59 * y ^ 33 + 7 * v * x ^ 60 * y ^ 32 + 4 * v * x ^ 61 * y ^ 31, 0, 2 * x ^ 13 * y ^ 7, 3 * v * x ^ 5 * y ^ 3 + 2 * v * x ^ 6 * y ^ 2 + x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, ((((((v * x ^ 4 * y ^ 4 + 3 * v * x ^ 5 * y ^ 3 + 3 * v * x ^ 6 * y ^ 2 + v * x ^ 7 * y) - 3 * x ^ 3 * y ^ 6) - 6 * x ^ 4 * y ^ 5) - 15 * x ^ 5 * y ^ 4) - 13 * x ^ 6 * y ^ 3) - 9 * x ^ 7 * y ^ 2) + 2 * x ^ 9, ((((((-2 * v * x ^ 2 * y ^ 6 - 5 * v * x ^ 3 * y ^ 5) + 4 * v * x ^ 4 * y ^ 4 + 15 * v * x ^ 5 * y ^ 3 + 10 * v * x ^ 6 * y ^ 2 + v * x ^ 7 * y + 2 * x ^ 2 * y ^ 7 + 3 * x ^ 3 * y ^ 6) - 8 * x ^ 4 * y ^ 5) - 20 * x ^ 5 * y ^ 4) - 17 * x ^ 6 * y ^ 3) - 4 * x ^ 7 * y ^ 2) + x ^ 8 * y, 2 * v * x ^ 6 * y ^ 3, x ^ 39 * y ^ 23 + 6 * x ^ 40 * y ^ 22 + 7 * x ^ 41 * y ^ 21, 2 * v * x ^ 45 * y ^ 24, ((((((-2 * v * x ^ 3 * y ^ 6 + 2 * v * x ^ 4 * y ^ 5 + 30 * v * x ^ 5 * y ^ 4 + 56 * v * x ^ 6 * y ^ 3 + 38 * v * x ^ 7 * y ^ 2 + 6 * v * x ^ 8 * y) - 2 * v * x ^ 9) - x ^ 4 * y ^ 6) - 17 * x ^ 5 * y ^ 5) - 33 * x ^ 6 * y ^ 4) - 15 * x ^ 7 * y ^ 3) + 12 * x ^ 8 * y ^ 2 + 13 * x ^ 9 * y + 3 * x ^ 10, v * x ^ 40 * y ^ 22 + x ^ 41 * y ^ 22 + 2 * x ^ 42 * y ^ 21, 0, 0, (((((((v * x ^ 41 * y ^ 25 - v * x ^ 44 * y ^ 22) - v * x ^ 45 * y ^ 21) - 2 * x ^ 41 * y ^ 26) - 4 * x ^ 42 * y ^ 25) - 2 * x ^ 43 * y ^ 24) - 3 * x ^ 44 * y ^ 23) - 2 * x ^ 45 * y ^ 22) + 2 * x ^ 46 * y ^ 21, 2 * v * x ^ 22 * y ^ 11 + v * x ^ 23 * y ^ 10 + x ^ 22 * y ^ 12, 2 * v * x ^ 19 * y ^ 12 + 10 * v * x ^ 20 * y ^ 11 + 8 * v * x ^ 21 * y ^ 10, 0, v * x ^ 41 * y ^ 22 + 2 * x ^ 42 * y ^ 22 + x ^ 43 * y ^ 21, 5 * v * x ^ 20 * y ^ 13 + 4 * v * x ^ 21 * y ^ 12 + 5 * v * x ^ 22 * y ^ 11 + 6 * v * x ^ 23 * y ^ 10, 7 * v * x ^ 19 * y ^ 11 + 13 * v * x ^ 20 * y ^ 10, 7 * v * x ^ 58 * y ^ 32 + 13 * v * x ^ 59 * y ^ 31, v * x ^ 39 * y ^ 22 + v * x ^ 40 * y ^ 21 + 4 * x ^ 40 * y ^ 22 + 6 * x ^ 41 * y ^ 21, 6 * v * x ^ 21 * y ^ 11 + 4 * v * x ^ 22 * y ^ 10 + 2 * x ^ 21 * y ^ 12, 2 * v * x ^ 40 * y ^ 22 + 6 * x ^ 41 * y ^ 22 + 4 * x ^ 42 * y ^ 21, 2 * x ^ 26 * y ^ 14, 20 * v * x ^ 19 * y ^ 10, 20 * v * x ^ 58 * y ^ 31, 20 * x ^ 39 * y ^ 21] * x ^ 0 * y ^ 0
            end
        f35 = function (r, p, sgn)
                local v
                v = sgn * GetRoot(r // p, 2)
                return adj(p, [24, -12 - 12 * v ^ 2, 6 + 12 * v ^ 2 + 6 * v ^ 4, 2 + 4v + 4 * v ^ 2 + 4 * v ^ 3 + 2 * v ^ 4, 4 + 8 * v ^ 2 + 4 * v ^ 4, ((-1 - 3 * v ^ 2) - 3 * v ^ 4) - v ^ 6, (((((7 - 12v) + 21 * v ^ 2) - 16 * v ^ 3) + 21 * v ^ 4) - 12 * v ^ 5) + 7 * v ^ 6, (((((2 - 3v) + 6 * v ^ 2) - 6 * v ^ 3) + 6 * v ^ 4) - 3 * v ^ 5) + 2 * v ^ 6, (((-1 - 3 * v ^ 2) - 8 * v ^ 3) - 3 * v ^ 4) - v ^ 6, (-2v - 4 * v ^ 3) - 2 * v ^ 5, ((-2 - 6 * v ^ 2) - 6 * v ^ 4) - 2 * v ^ 6, (-v - 2 * v ^ 3) - v ^ 5, -(v ^ 18), Unknown(), 2 * v ^ 3 + 2 * v ^ 5, (((((((-3 + 5v) - 12 * v ^ 2) + 9 * v ^ 3) - 18 * v ^ 4) + 9 * v ^ 5) - 12 * v ^ 6) + 5 * v ^ 7) - 3 * v ^ 8, -(v ^ 6), 2 + 8 * v ^ 2 + 4 * v ^ 4 + 8 * v ^ 6 + 2 * v ^ 8, Unknown(), v ^ 35, Unknown(), (((((-4 * v ^ 2 + 2 * v ^ 3) - 8 * v ^ 4) + 4 * v ^ 5) - 8 * v ^ 6) + 2 * v ^ 7) - 4 * v ^ 8, v ^ 5, ((-(v ^ 15) - v ^ 17) - v ^ 19) - v ^ 21, (((((((v ^ 2 - 2 * v ^ 3) + 2 * v ^ 4) - 2 * v ^ 5) + 2 * v ^ 6) - 2 * v ^ 7) + 2 * v ^ 8) - 2 * v ^ 9) + v ^ 10, 4 * v ^ 30 + 8 * v ^ 32 + 4 * v ^ 34, (((((((((((2 - 2v) + 13 * v ^ 2) - 12 * v ^ 3) + 32 * v ^ 4) - 22 * v ^ 5) + 42 * v ^ 6) - 22 * v ^ 7) + 32 * v ^ 8) - 12 * v ^ 9) + 13 * v ^ 10) - 2 * v ^ 11) + 2 * v ^ 12, 4 * v ^ 90 + 8 * v ^ 92 + 4 * v ^ 94, -(v ^ 12), (((((((((-(v ^ 2) + 3 * v ^ 3) - 6 * v ^ 4) + 6 * v ^ 5) - 13 * v ^ 6) + 6 * v ^ 7) - 13 * v ^ 8) + 6 * v ^ 9) - 6 * v ^ 10) + 3 * v ^ 11) - v ^ 12, ((-2 * v ^ 30 - 6 * v ^ 32) - 6 * v ^ 34) - 2 * v ^ 36, ((-2 * v ^ 90 - 6 * v ^ 92) - 6 * v ^ 94) - 2 * v ^ 96, -2 * (v ^ 17 + v ^ 15), 3 * v ^ 20, Unknown(), (((((((((((-2 * v ^ 3 + 6 * v ^ 4) - 6 * v ^ 5) + 12 * v ^ 6) - 6 * v ^ 7) + 18 * v ^ 8) - 4 * v ^ 9) + 18 * v ^ 10) - 6 * v ^ 11) + 12 * v ^ 12) - 6 * v ^ 13) + 6 * v ^ 14) - 2 * v ^ 15, Unknown(), 3 * v ^ 10, 4 * v ^ 60 + 8 * v ^ 62 + 4 * v ^ 64, 3 * v ^ 70, Unknown(), (-(v ^ 61) - 2 * v ^ 63) - v ^ 65, 4 * v ^ 15, 4 * v ^ 45, v ^ 61 + v ^ 62 + v ^ 63 + 3 * v ^ 64 + 4 * v ^ 66 + 4 * v ^ 68 + 3 * v ^ 70 + v ^ 71 + v ^ 72 + v ^ 73, 2 * v ^ 33 + 2 * v ^ 35, 6 * v ^ 30 + 12 * v ^ 32 + 6 * v ^ 34, -(v ^ 24), 2 * v ^ 63 + 2 * v ^ 65, 2 * v ^ 30 + 8 * v ^ 32 + 4 * v ^ 34 + 8 * v ^ 36 + 2 * v ^ 38, -12 * v ^ 30 - 12 * v ^ 32, -12 * v ^ 90 - 12 * v ^ 92, 2 * v ^ 60 + 4 * v ^ 61 + 4 * v ^ 62 + 4 * v ^ 63 + 2 * v ^ 64, (((-(v ^ 30) - 3 * v ^ 32) - 8 * v ^ 33) - 3 * v ^ 34) - v ^ 36, (((-(v ^ 60) - 3 * v ^ 62) - 8 * v ^ 63) - 3 * v ^ 64) - v ^ 66, 3 * v ^ 40, 24 * v ^ 30, 24 * v ^ 90, 24 * v ^ 60])
            end
        f37 = function (x, y)
                return [30, 12x + 18y, 14 * x * y + 5 * x ^ 2 + 11 * y ^ 2, 6 * x * y + x ^ 2 + 7 * y ^ 2, 10 * x * y + 2 * x ^ 2 + 8 * y ^ 2, 5 * x * y ^ 2 + 2 * x ^ 2 * y + 3 * y ^ 3, ((-18 * x * y ^ 2 - 21 * x ^ 2 * y) - 8 * x ^ 3) - 3 * y ^ 3, ((-5 * x * y ^ 2 - 6 * x ^ 2 * y) - 2 * x ^ 3) - y ^ 3, 6 * x * y ^ 2 + 3 * x ^ 2 * y + 5 * y ^ 3, 2 * x * y ^ 2 + 2 * y ^ 3, 9 * x * y ^ 2 + 5 * x ^ 2 * y + x ^ 3 + 5 * y ^ 3, x * y ^ 2 + y ^ 3, 0, x ^ 2 * y ^ 2, x * y ^ 3 + y ^ 4, (((-15 * x * y ^ 3 - 18 * x ^ 2 * y ^ 2) - 8 * x ^ 3 * y) - x ^ 4) - 4 * y ^ 4, 0, 8 * x * y ^ 3 + 6 * x ^ 2 * y ^ 2 + 8 * x ^ 3 * y + x ^ 4 + 7 * y ^ 4, (x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y, x ^ 14 * y ^ 21, (-2 * x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - 2 * y ^ 5, 6 * x * y ^ 4 + 8 * x ^ 2 * y ^ 3 + 8 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + 2 * y ^ 5, x ^ 2 * y ^ 3, -(x ^ 6) * y ^ 12 - x ^ 8 * y ^ 10, 2 * x * y ^ 5 + x ^ 2 * y ^ 4 + 2 * x ^ 4 * y ^ 2 + y ^ 6, 8 * x ^ 12 * y ^ 20 + 10 * x ^ 13 * y ^ 19 + 2 * x ^ 14 * y ^ 18, 18 * x * y ^ 5 + 39 * x ^ 2 * y ^ 4 + 40 * x ^ 3 * y ^ 3 + 24 * x ^ 4 * y ^ 2 + 8 * x ^ 5 * y + 2 * x ^ 6 + 3 * y ^ 6, 8 * x ^ 36 * y ^ 56 + 10 * x ^ 37 * y ^ 55 + 2 * x ^ 38 * y ^ 54, 0, 2 * x * y ^ 6 + 9 * x ^ 2 * y ^ 5 + 14 * x ^ 3 * y ^ 4 + 10 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + y ^ 7, 5 * x ^ 12 * y ^ 21 + 9 * x ^ 13 * y ^ 20 + 5 * x ^ 14 * y ^ 19 + x ^ 15 * y ^ 18, 5 * x ^ 36 * y ^ 57 + 9 * x ^ 37 * y ^ 56 + 5 * x ^ 38 * y ^ 55 + x ^ 39 * y ^ 54, -(x ^ 6) * y ^ 10 - x ^ 7 * y ^ 9, -3 * x ^ 8 * y ^ 12, -4 * x ^ 3 * y ^ 6 - 5 * x ^ 4 * y ^ 5, (((((-9 * x ^ 2 * y ^ 7 - 22 * x ^ 3 * y ^ 6) - 21 * x ^ 4 * y ^ 5) - 15 * x ^ 5 * y ^ 4) - 6 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2) + 2 * y ^ 9, (((-3 * x * y ^ 8 - 27 * x ^ 2 * y ^ 7) - 58 * x ^ 3 * y ^ 6) - 47 * x ^ 4 * y ^ 5) + 22 * x ^ 6 * y ^ 3 + 11 * x ^ 7 * y ^ 2 + x ^ 8 * y, -3 * x ^ 4 * y ^ 6, 8 * x ^ 24 * y ^ 38 + 10 * x ^ 25 * y ^ 37 + 2 * x ^ 26 * y ^ 36, -3 * x ^ 28 * y ^ 42, ((((-8 * x * y ^ 9 - 70 * x ^ 2 * y ^ 8) - 156 * x ^ 3 * y ^ 7) - 149 * x ^ 4 * y ^ 6) - 52 * x ^ 5 * y ^ 5) + 10 * x ^ 6 * y ^ 4 + 8 * x ^ 7 * y ^ 3 + 2 * y ^ 10, x ^ 24 * y ^ 39 + x ^ 25 * y ^ 38, -2 * x ^ 6 * y ^ 9, -2 * x ^ 18 * y ^ 27, ((((x ^ 24 * y ^ 43 - 3 * x ^ 25 * y ^ 42) - 7 * x ^ 26 * y ^ 41) - 5 * x ^ 27 * y ^ 40) - 5 * x ^ 28 * y ^ 39) - 3 * x ^ 29 * y ^ 38, x ^ 12 * y ^ 22 + x ^ 13 * y ^ 21, 11 * x ^ 12 * y ^ 20 + 14 * x ^ 13 * y ^ 19 + 5 * x ^ 14 * y ^ 18, 0, x ^ 24 * y ^ 40 + x ^ 25 * y ^ 39, 7 * x ^ 12 * y ^ 22 + 8 * x ^ 13 * y ^ 21 + 6 * x ^ 14 * y ^ 20 + 8 * x ^ 15 * y ^ 19 + x ^ 16 * y ^ 18, 18 * x ^ 12 * y ^ 19 + 12 * x ^ 13 * y ^ 18, 18 * x ^ 36 * y ^ 55 + 12 * x ^ 37 * y ^ 54, 7 * x ^ 24 * y ^ 38 + 6 * x ^ 25 * y ^ 37 + x ^ 26 * y ^ 36, 5 * x ^ 12 * y ^ 21 + 6 * x ^ 13 * y ^ 20 + 3 * x ^ 14 * y ^ 19, 5 * x ^ 24 * y ^ 39 + 6 * x ^ 25 * y ^ 38 + 3 * x ^ 26 * y ^ 37, -3 * x ^ 16 * y ^ 24, 30 * x ^ 12 * y ^ 18, 30 * x ^ 36 * y ^ 54, 30 * x ^ 24 * y ^ 36] * x ^ 0 * y ^ 0
            end
        f39 = function (r, p, sgn)
                local v
                v = sgn * GetRoot(r // p, 2)
                return adj(p, [30, -15 - 15 * v ^ 2, 7 + 16 * v ^ 2 + 7 * v ^ 4, 3 + 2v + 4 * v ^ 2 + 2 * v ^ 3 + 3 * v ^ 4, 5 + 10 * v ^ 2 + 5 * v ^ 4, ((-1 - 4 * v ^ 2) - 4 * v ^ 4) - v ^ 6, (((((8 - 6v) + 27 * v ^ 2) - 8 * v ^ 3) + 27 * v ^ 4) - 6 * v ^ 5) + 8 * v ^ 6, (((((2 - 2v) + 8 * v ^ 2) - 2 * v ^ 3) + 8 * v ^ 4) - 2 * v ^ 5) + 2 * v ^ 6, (((-2 - 3 * v ^ 2) - 4 * v ^ 3) - 3 * v ^ 4) - 2 * v ^ 6, (-v - 2 * v ^ 3) - v ^ 5, ((-2 - 8 * v ^ 2) - 8 * v ^ 4) - 2 * v ^ 6, -2 * v ^ 3, 0, Unknown(), v ^ 3 + v ^ 5, (((((((-4 + 2v) - 15 * v ^ 2) + 5 * v ^ 3) - 22 * v ^ 4) + 5 * v ^ 5) - 15 * v ^ 6) + 2 * v ^ 7) - 4 * v ^ 8, 0, 3 + 10 * v ^ 2 + 4 * v ^ 4 + 10 * v ^ 6 + 3 * v ^ 8, Unknown(), -(v ^ 35), Unknown(), (((((-5 * v ^ 2 + v ^ 3) - 10 * v ^ 4) + 2 * v ^ 5) - 10 * v ^ 6) + v ^ 7) - 5 * v ^ 8, -(v ^ 5), -(v ^ 17) - v ^ 19, (((2 * v ^ 2 - 2 * v ^ 3) + 2 * v ^ 4 + 2 * v ^ 6 + 2 * v ^ 8) - 2 * v ^ 9) + 2 * v ^ 10, 5 * v ^ 30 + 10 * v ^ 32 + 5 * v ^ 34, (((((((((((2 - 2v) + 16 * v ^ 2) - 6 * v ^ 3) + 40 * v ^ 4) - 10 * v ^ 5) + 54 * v ^ 6) - 10 * v ^ 7) + 40 * v ^ 8) - 6 * v ^ 9) + 16 * v ^ 10) - 2 * v ^ 11) + 2 * v ^ 12, 5 * v ^ 90 + 10 * v ^ 92 + 5 * v ^ 94, 0, (((((((((-2 * v ^ 2 + v ^ 3) - 8 * v ^ 4) + 3 * v ^ 5) - 15 * v ^ 6) + 4 * v ^ 7) - 15 * v ^ 8) + 3 * v ^ 9) - 8 * v ^ 10) + v ^ 11) - 2 * v ^ 12, ((-2 * v ^ 30 - 8 * v ^ 32) - 8 * v ^ 34) - 2 * v ^ 36, ((-2 * v ^ 90 - 8 * v ^ 92) - 8 * v ^ 94) - 2 * v ^ 96, -((v ^ 17 + v ^ 15)), -3 * v ^ 20, Unknown(), (((((((((((-(v ^ 3) + 9 * v ^ 4) - 3 * v ^ 5) + 15 * v ^ 6) - 3 * v ^ 7) + 21 * v ^ 8) - 2 * v ^ 9) + 21 * v ^ 10) - 3 * v ^ 11) + 15 * v ^ 12) - 3 * v ^ 13) + 9 * v ^ 14) - v ^ 15, Unknown(), -3 * v ^ 10, 5 * v ^ 60 + 10 * v ^ 62 + 5 * v ^ 64, -3 * v ^ 70, Unknown(), -2 * v ^ 63, 2 * v ^ 15, 2 * v ^ 45, ((((v ^ 61 + v ^ 62 + v ^ 63 + 3 * v ^ 64) - v ^ 65) + 6 * v ^ 66 + 6 * v ^ 68) - v ^ 69) + 3 * v ^ 70 + v ^ 71 + v ^ 72 + v ^ 73, v ^ 33 + v ^ 35, 7 * v ^ 30 + 16 * v ^ 32 + 7 * v ^ 34, 0, v ^ 63 + v ^ 65, 3 * v ^ 30 + 10 * v ^ 32 + 4 * v ^ 34 + 10 * v ^ 36 + 3 * v ^ 38, -15 * v ^ 30 - 15 * v ^ 32, -15 * v ^ 90 - 15 * v ^ 92, 3 * v ^ 60 + 2 * v ^ 61 + 4 * v ^ 62 + 2 * v ^ 63 + 3 * v ^ 64, (((-2 * v ^ 30 - 3 * v ^ 32) - 4 * v ^ 33) - 3 * v ^ 34) - 2 * v ^ 36, (((-2 * v ^ 60 - 3 * v ^ 62) - 4 * v ^ 63) - 3 * v ^ 64) - 2 * v ^ 66, -3 * v ^ 40, 30 * v ^ 30, 30 * v ^ 90, 30 * v ^ 60])
            end
        f41 = function (r, p)
                local q
                q = -r // p
                return adj(p, [36, -18 + 18q, (10 - 16q) + 10 * q ^ 2, (2 - 8q) + 2 * q ^ 2, (6 - 12q) + 6 * q ^ 2, ((-2 + 4q) - 4 * q ^ 2) + 2 * q ^ 3, ((12 - 30q) + 30 * q ^ 2) - 12 * q ^ 3, ((4 - 8q) + 8 * q ^ 2) - 4 * q ^ 3, 6q - 6 * q ^ 2, 0, ((-4 + 8q) - 8 * q ^ 2) + 4 * q ^ 3, 0, -(q ^ 9), Unknown(), 0, (((-4 + 18q) - 28 * q ^ 2) + 18 * q ^ 3) - 4 * q ^ 4, -(q ^ 3), (((2 - 12q) + 8 * q ^ 2) - 12 * q ^ 3) + 2 * q ^ 4, Unknown(), 0, Unknown(), ((6q - 12 * q ^ 2) + 12 * q ^ 3) - 6 * q ^ 4, 0, 0, (4 * q ^ 2 - 4 * q ^ 3) + 4 * q ^ 4, (-6 * q ^ 15 + 12 * q ^ 16) - 6 * q ^ 17, (((((4 - 20q) + 48 * q ^ 2) - 60 * q ^ 3) + 48 * q ^ 4) - 20 * q ^ 5) + 4 * q ^ 6, (-6 * q ^ 45 + 12 * q ^ 46) - 6 * q ^ 47, q ^ 6, ((-8 * q ^ 2 + 22 * q ^ 3) - 22 * q ^ 4) + 8 * q ^ 5, ((4 * q ^ 15 - 8 * q ^ 16) + 8 * q ^ 17) - 4 * q ^ 18, ((4 * q ^ 45 - 8 * q ^ 46) + 8 * q ^ 47) - 4 * q ^ 48, 0, 0, Unknown(), ((((6 * q ^ 2 - 18 * q ^ 3) + 30 * q ^ 4) - 30 * q ^ 5) + 18 * q ^ 6) - 6 * q ^ 7, Unknown(), 0, (6 * q ^ 30 - 12 * q ^ 31) + 6 * q ^ 32, 0, Unknown(), 0, 0, 0, ((((-2 * q ^ 31 + 6 * q ^ 32) - 4 * q ^ 33) + 4 * q ^ 34) - 6 * q ^ 35) + 2 * q ^ 36, 0, (-10 * q ^ 15 + 16 * q ^ 16) - 10 * q ^ 17, q ^ 12, 0, (((-2 * q ^ 15 + 12 * q ^ 16) - 8 * q ^ 17) + 12 * q ^ 18) - 2 * q ^ 19, 18 * q ^ 15 - 18 * q ^ 16, 18 * q ^ 45 - 18 * q ^ 46, (2 * q ^ 30 - 8 * q ^ 31) + 2 * q ^ 32, -6 * q ^ 16 + 6 * q ^ 17, 6 * q ^ 31 - 6 * q ^ 32, 0, -36 * q ^ 15, -36 * q ^ 45, 36 * q ^ 30])
            end
        f42 = function (x, y, s)
                local v
                v = s * GetRoot(x * y)
                return [36, 21x + 15y, 18 * x * y + 12 * x ^ 2 + 6 * y ^ 2, (-3 * v * x - 3 * v * y) + 8 * x * y + 8 * x ^ 2 + 2 * y ^ 2, 12 * x * y + 9 * x ^ 2 + 3 * y ^ 2, 3 * x * y ^ 2 + 6 * x ^ 2 * y + 3 * x ^ 3, (((((-12 * v * x * y - 9 * v * x ^ 2) - 9 * v * y ^ 2) - 21 * x * y ^ 2) - 21 * x ^ 2 * y) - 3 * x ^ 3) - 9 * y ^ 3, (((((-4 * v * x * y - 3 * v * x ^ 2) - 2 * v * y ^ 2) - 7 * x * y ^ 2) - 5 * x ^ 2 * y) - x ^ 3) - 2 * y ^ 3, -6 * v * x * y + 6 * x * y ^ 2 + 6 * x ^ 2 * y + 6 * x ^ 3, ((-3 * v * x * y - 2 * v * x ^ 2) - v * y ^ 2) + x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3, 7 * x * y ^ 2 + 11 * x ^ 2 * y + 5 * x ^ 3 + y ^ 3, (-2 * v * x * y - v * x ^ 2) + 2 * x ^ 2 * y + x ^ 3, v * x ^ 10 * y ^ 7, (-v * x * y ^ 2 - 2 * v * x ^ 2 * y) - v * x ^ 3, (-v * x * y ^ 2 - 2 * v * x ^ 2 * y) + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, (((((((-6 * v * x * y ^ 2 - 8 * v * x ^ 2 * y) - 5 * v * x ^ 3) - 2 * v * y ^ 3) - 9 * x * y ^ 3) - 19 * x ^ 2 * y ^ 2) - 17 * x ^ 3 * y) - 4 * x ^ 4) - 2 * y ^ 4, v * x ^ 3 * y ^ 2, 9 * x * y ^ 3 + 8 * x ^ 2 * y ^ 2 + 9 * x ^ 3 * y + 8 * x ^ 4 + 2 * y ^ 4, v * x ^ 2 * y ^ 2 + v * x ^ 3 * y + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 0, ((((-v * x ^ 3 * y - v * x ^ 4) - 2 * x ^ 2 * y ^ 3) - 7 * x ^ 3 * y ^ 2) - 6 * x ^ 4 * y) - x ^ 5, v * x * y ^ 3 + 3 * v * x ^ 2 * y ^ 2 + 2 * v * x ^ 3 * y + 3 * x * y ^ 4 + 9 * x ^ 2 * y ^ 3 + 10 * x ^ 3 * y ^ 2 + 6 * x ^ 4 * y + 2 * x ^ 5, 0, 0, 2 * v * x * y ^ 4 + 2 * v * x ^ 3 * y ^ 2 + 2 * v * x ^ 4 * y + 2 * x ^ 2 * y ^ 4 + 3 * x ^ 5 * y + x ^ 6, 3 * v * x ^ 17 * y ^ 14 + 12 * v * x ^ 18 * y ^ 13 + 9 * v * x ^ 19 * y ^ 12, 6 * v * x * y ^ 4 + 14 * v * x ^ 2 * y ^ 3 + 18 * v * x ^ 3 * y ^ 2 + 12 * v * x ^ 4 * y + 2 * v * x ^ 5 + 2 * v * y ^ 5 + 10 * x * y ^ 5 + 27 * x ^ 2 * y ^ 4 + 46 * x ^ 3 * y ^ 3 + 43 * x ^ 4 * y ^ 2 + 19 * x ^ 5 * y + 3 * x ^ 6 + 2 * y ^ 6, 3 * v * x ^ 52 * y ^ 39 + 12 * v * x ^ 53 * y ^ 38 + 9 * v * x ^ 54 * y ^ 37, x ^ 7 * y ^ 5, v * x * y ^ 5 + 3 * v * x ^ 2 * y ^ 4 + 5 * v * x ^ 3 * y ^ 3 + 6 * v * x ^ 4 * y ^ 2 + 3 * v * x ^ 5 * y + 4 * x ^ 2 * y ^ 5 + 11 * x ^ 3 * y ^ 4 + 14 * x ^ 4 * y ^ 3 + 9 * x ^ 5 * y ^ 2 + 3 * x ^ 6 * y + x ^ 7, v * x ^ 17 * y ^ 15 + 7 * v * x ^ 18 * y ^ 14 + 11 * v * x ^ 19 * y ^ 13 + 5 * v * x ^ 20 * y ^ 12, v * x ^ 52 * y ^ 40 + 7 * v * x ^ 53 * y ^ 39 + 11 * v * x ^ 54 * y ^ 38 + 5 * v * x ^ 55 * y ^ 37, 0, 0, 0, ((((((((((((-v * x * y ^ 7 - 3 * v * x ^ 2 * y ^ 6) - 3 * v * x ^ 3 * y ^ 5) - 3 * v * x ^ 4 * y ^ 4) - 6 * v * x ^ 5 * y ^ 3) - 6 * v * x ^ 6 * y ^ 2) - 2 * v * x ^ 7 * y) - 3 * x ^ 2 * y ^ 7) - 11 * x ^ 3 * y ^ 6) - 15 * x ^ 4 * y ^ 5) - 24 * x ^ 5 * y ^ 4) - 21 * x ^ 6 * y ^ 3) - 12 * x ^ 7 * y ^ 2) + 2 * x ^ 9, ((((((((((2 * v * x * y ^ 7 + 6 * v * x ^ 2 * y ^ 6 + 5 * v * x ^ 3 * y ^ 5) - 9 * v * x ^ 4 * y ^ 4) - 18 * v * x ^ 5 * y ^ 3) - 11 * v * x ^ 6 * y ^ 2) - 3 * v * x ^ 7 * y) + 2 * x * y ^ 8 + 7 * x ^ 2 * y ^ 7 + 4 * x ^ 3 * y ^ 6) - 17 * x ^ 4 * y ^ 5) - 37 * x ^ 5 * y ^ 4) - 33 * x ^ 6 * y ^ 3) - 15 * x ^ 7 * y ^ 2) - 3 * x ^ 8 * y, 0, 3 * x ^ 35 * y ^ 27 + 12 * x ^ 36 * y ^ 26 + 9 * x ^ 37 * y ^ 25, 0, (((((((((((2 * v * x ^ 2 * y ^ 7 + 8 * v * x ^ 3 * y ^ 6 + 6 * v * x ^ 4 * y ^ 5) - 18 * v * x ^ 5 * y ^ 4) - 40 * v * x ^ 6 * y ^ 3) - 30 * v * x ^ 7 * y ^ 2) - 8 * v * x ^ 8 * y) - 14 * x ^ 4 * y ^ 6) - 56 * x ^ 5 * y ^ 5) - 87 * x ^ 6 * y ^ 4) - 65 * x ^ 7 * y ^ 3) - 22 * x ^ 8 * y ^ 2) - x ^ 9 * y) + x ^ 10, (-2 * v * x ^ 36 * y ^ 26 - v * x ^ 37 * y ^ 25) + 2 * x ^ 37 * y ^ 26 + x ^ 38 * y ^ 25, 0, 0, (((((((((v * x ^ 35 * y ^ 31 + v * x ^ 36 * y ^ 30) - v * x ^ 37 * y ^ 29) + v * x ^ 40 * y ^ 26 + v * x ^ 41 * y ^ 25) - x ^ 36 * y ^ 31) - 4 * x ^ 37 * y ^ 30) - 6 * x ^ 38 * y ^ 29) - 6 * x ^ 39 * y ^ 28) - 8 * x ^ 40 * y ^ 27) - 3 * x ^ 41 * y ^ 26) + x ^ 42 * y ^ 25, ((v * x ^ 19 * y ^ 14 + v * x ^ 20 * y ^ 13 + v * x ^ 21 * y ^ 12) - x ^ 19 * y ^ 15) - 2 * x ^ 20 * y ^ 14, 6 * v * x ^ 17 * y ^ 14 + 18 * v * x ^ 18 * y ^ 13 + 12 * v * x ^ 19 * y ^ 12, x ^ 14 * y ^ 10, (-v * x ^ 36 * y ^ 27 - 2 * v * x ^ 37 * y ^ 26) + x ^ 37 * y ^ 27 + x ^ 38 * y ^ 26 + x ^ 39 * y ^ 25, 2 * v * x ^ 17 * y ^ 16 + 9 * v * x ^ 18 * y ^ 15 + 8 * v * x ^ 19 * y ^ 14 + 9 * v * x ^ 20 * y ^ 13 + 8 * v * x ^ 21 * y ^ 12, 15 * v * x ^ 17 * y ^ 13 + 21 * v * x ^ 18 * y ^ 12, 15 * v * x ^ 52 * y ^ 38 + 21 * v * x ^ 53 * y ^ 37, (-3 * v * x ^ 35 * y ^ 26 - 3 * v * x ^ 36 * y ^ 25) + 2 * x ^ 35 * y ^ 27 + 8 * x ^ 36 * y ^ 26 + 8 * x ^ 37 * y ^ 25, (6 * v * x ^ 18 * y ^ 14 + 6 * v * x ^ 19 * y ^ 13 + 6 * v * x ^ 20 * y ^ 12) - 6 * x ^ 19 * y ^ 14, -6 * v * x ^ 36 * y ^ 26 + 6 * x ^ 36 * y ^ 27 + 6 * x ^ 37 * y ^ 26 + 6 * x ^ 38 * y ^ 25, 0, 36 * v * x ^ 17 * y ^ 12, 36 * v * x ^ 52 * y ^ 37, 36 * x ^ 35 * y ^ 25] * x ^ 0 * y ^ 0
            end
        f46 = function (x, y)
                return [40, 24x + 16y, 20 * x * y + 14 * x ^ 2 + 6 * y ^ 2, 12 * x * y + 10 * x ^ 2 + 2 * y ^ 2, 13 * x * y + 11 * x ^ 2 + 3 * y ^ 2, 3 * x * y ^ 2 + 7 * x ^ 2 * y + 4 * x ^ 3, ((-18 * x * y ^ 2 - 12 * x ^ 2 * y) - 2 * x ^ 3) - 8 * y ^ 3, (-5 * x * y ^ 2 - 3 * x ^ 2 * y) - 2 * y ^ 3, 6 * x * y ^ 2 + 12 * x ^ 2 * y + 6 * x ^ 3, 2 * x * y ^ 2 + 6 * x ^ 2 * y + 3 * x ^ 3, 7 * x * y ^ 2 + 13 * x ^ 2 * y + 6 * x ^ 3 + y ^ 3, x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3, 0, 2 * x ^ 3 * y, 2 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, (((-8 * x * y ^ 3 - 16 * x ^ 2 * y ^ 2) - 13 * x ^ 3 * y) - 4 * x ^ 4) - y ^ 4, 0, 8 * x * y ^ 3 + 12 * x ^ 2 * y ^ 2 + 8 * x ^ 3 * y + 10 * x ^ 4 + 2 * y ^ 4, x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 0, ((-4 * x ^ 2 * y ^ 3 - 10 * x ^ 3 * y ^ 2) - 8 * x ^ 4 * y) - 2 * x ^ 5, 2 * x * y ^ 4 + 9 * x ^ 2 * y ^ 3 + 10 * x ^ 3 * y ^ 2 + 6 * x ^ 4 * y + 3 * x ^ 5, 0, 0, (x ^ 2 * y ^ 4 - x ^ 4 * y ^ 2) + 2 * x ^ 5 * y + 2 * x ^ 6, (-3 * x ^ 18 * y ^ 14 - 13 * x ^ 19 * y ^ 13) - 11 * x ^ 20 * y ^ 12, 8 * x * y ^ 5 + 23 * x ^ 2 * y ^ 4 + 40 * x ^ 3 * y ^ 3 + 37 * x ^ 4 * y ^ 2 + 18 * x ^ 5 * y + 4 * x ^ 6 + 2 * y ^ 6, (-3 * x ^ 54 * y ^ 38 - 13 * x ^ 55 * y ^ 37) - 11 * x ^ 56 * y ^ 36, 0, 2 * x ^ 2 * y ^ 5 + 9 * x ^ 3 * y ^ 4 + 13 * x ^ 4 * y ^ 3 + 8 * x ^ 5 * y ^ 2 + 3 * x ^ 6 * y + x ^ 7, ((-(x ^ 18) * y ^ 15 - 7 * x ^ 19 * y ^ 14) - 13 * x ^ 20 * y ^ 13) - 6 * x ^ 21 * y ^ 12, ((-(x ^ 54) * y ^ 39 - 7 * x ^ 55 * y ^ 38) - 13 * x ^ 56 * y ^ 37) - 6 * x ^ 57 * y ^ 36, 0, -2 * x ^ 12 * y ^ 8, 4 * x ^ 5 * y ^ 4 + 4 * x ^ 6 * y ^ 3, (((((-3 * x ^ 2 * y ^ 7 - 7 * x ^ 3 * y ^ 6) - 15 * x ^ 4 * y ^ 5) - 21 * x ^ 5 * y ^ 4) - 24 * x ^ 6 * y ^ 3) - 9 * x ^ 7 * y ^ 2) + 3 * x ^ 9, ((((((x * y ^ 8 + 3 * x ^ 2 * y ^ 7) - 4 * x ^ 3 * y ^ 6) - 18 * x ^ 4 * y ^ 5) - 22 * x ^ 5 * y ^ 4) - 16 * x ^ 6 * y ^ 3) - 9 * x ^ 7 * y ^ 2) - 3 * x ^ 8 * y, 2 * x ^ 6 * y ^ 4, 3 * x ^ 36 * y ^ 26 + 13 * x ^ 37 * y ^ 25 + 11 * x ^ 38 * y ^ 24, 2 * x ^ 42 * y ^ 28, ((-6 * x ^ 4 * y ^ 6 - 24 * x ^ 5 * y ^ 5) - 24 * x ^ 6 * y ^ 4) + 14 * x ^ 8 * y ^ 2 + 8 * x ^ 9 * y + 2 * x ^ 10, x ^ 37 * y ^ 26 + 3 * x ^ 38 * y ^ 25 + 2 * x ^ 39 * y ^ 24, 0, 0, (((((-(x ^ 37) * y ^ 30 - 5 * x ^ 38 * y ^ 29) - 5 * x ^ 39 * y ^ 28) - 5 * x ^ 40 * y ^ 27) - 11 * x ^ 41 * y ^ 26) - 5 * x ^ 42 * y ^ 25) + 2 * x ^ 43 * y ^ 24, (-2 * x ^ 20 * y ^ 14 - 3 * x ^ 21 * y ^ 13) - x ^ 22 * y ^ 12, (-6 * x ^ 18 * y ^ 14 - 20 * x ^ 19 * y ^ 13) - 14 * x ^ 20 * y ^ 12, 0, 2 * x ^ 38 * y ^ 26 + 3 * x ^ 39 * y ^ 25 + x ^ 40 * y ^ 24, (((-2 * x ^ 18 * y ^ 16 - 8 * x ^ 19 * y ^ 15) - 12 * x ^ 20 * y ^ 14) - 8 * x ^ 21 * y ^ 13) - 10 * x ^ 22 * y ^ 12, -16 * x ^ 18 * y ^ 13 - 24 * x ^ 19 * y ^ 12, -16 * x ^ 54 * y ^ 37 - 24 * x ^ 55 * y ^ 36, 2 * x ^ 36 * y ^ 26 + 12 * x ^ 37 * y ^ 25 + 10 * x ^ 38 * y ^ 24, (-6 * x ^ 19 * y ^ 14 - 12 * x ^ 20 * y ^ 13) - 6 * x ^ 21 * y ^ 12, 6 * x ^ 37 * y ^ 26 + 12 * x ^ 38 * y ^ 25 + 6 * x ^ 39 * y ^ 24, -2 * x ^ 24 * y ^ 16, -40 * x ^ 18 * y ^ 12, -40 * x ^ 54 * y ^ 36, 40 * x ^ 36 * y ^ 24] * x ^ 0 * y ^ 0
            end
        f48 = function (x, y, s)
                local v
                v = s * GetRoot(x * y)
                return [40, 20x + 20y, 20 * x * y + 10 * x ^ 2 + 10 * y ^ 2, (-4 * v * x - 4 * v * y) + 12 * x * y + 6 * x ^ 2 + 6 * y ^ 2, 14 * x * y + 6 * x ^ 2 + 6 * y ^ 2, 5 * x * y ^ 2 + 5 * x ^ 2 * y + x ^ 3 + y ^ 3, (((((-16 * v * x * y - 12 * v * x ^ 2) - 12 * v * y ^ 2) - 15 * x * y ^ 2) - 15 * x ^ 2 * y) - 5 * x ^ 3) - 5 * y ^ 3, (((((-6 * v * x * y - 3 * v * x ^ 2) - 3 * v * y ^ 2) - 4 * x * y ^ 2) - 4 * x ^ 2 * y) - 2 * x ^ 3) - 2 * y ^ 3, -8 * v * x * y + 9 * x * y ^ 2 + 9 * x ^ 2 * y + 3 * x ^ 3 + 3 * y ^ 3, ((-4 * v * x * y - 2 * v * x ^ 2) - 2 * v * y ^ 2) + 4 * x * y ^ 2 + 4 * x ^ 2 * y + x ^ 3 + y ^ 3, 10 * x * y ^ 2 + 10 * x ^ 2 * y + 3 * x ^ 3 + 3 * y ^ 3, ((-2 * v * x * y - v * x ^ 2) - v * y ^ 2) + 2 * x * y ^ 2 + 2 * x ^ 2 * y, 0, (-2 * v * x * y ^ 2 - 2 * v * x ^ 2 * y) + x ^ 2 * y ^ 2, (-2 * v * x * y ^ 2 - 2 * v * x ^ 2 * y) + x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, (((((((-9 * v * x * y ^ 2 - 9 * v * x ^ 2 * y) - 5 * v * x ^ 3) - 5 * v * y ^ 3) - 11 * x * y ^ 3) - 16 * x ^ 2 * y ^ 2) - 11 * x ^ 3 * y) - 3 * x ^ 4) - 3 * y ^ 4, 0, 8 * x * y ^ 3 + 12 * x ^ 2 * y ^ 2 + 8 * x ^ 3 * y + 6 * x ^ 4 + 6 * y ^ 4, v * x * y ^ 3 + v * x ^ 2 * y ^ 2 + v * x ^ 3 * y + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, -v * x ^ 17 * y ^ 17, (((((-v * x * y ^ 3 - v * x ^ 2 * y ^ 2) - v * x ^ 3 * y) - 2 * x * y ^ 4) - 6 * x ^ 2 * y ^ 3) - 6 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 2 * v * x * y ^ 3 + 4 * v * x ^ 2 * y ^ 2 + 2 * v * x ^ 3 * y + 4 * x * y ^ 4 + 9 * x ^ 2 * y ^ 3 + 9 * x ^ 3 * y ^ 2 + 4 * x ^ 4 * y + x ^ 5 + y ^ 5, -v * x ^ 2 * y ^ 2, ((-v * x ^ 7 * y ^ 10 - v * x ^ 8 * y ^ 9) - v * x ^ 9 * y ^ 8) - v * x ^ 10 * y ^ 7, ((2 * v * x * y ^ 4 + 2 * v * x ^ 2 * y ^ 3 + 2 * v * x ^ 3 * y ^ 2 + 2 * v * x ^ 4 * y + x * y ^ 5) - 2 * x ^ 3 * y ^ 3) + x ^ 5 * y, 6 * x ^ 15 * y ^ 17 + 14 * x ^ 16 * y ^ 16 + 6 * x ^ 17 * y ^ 15, 12 * v * x * y ^ 4 + 22 * v * x ^ 2 * y ^ 3 + 22 * v * x ^ 3 * y ^ 2 + 12 * v * x ^ 4 * y + 2 * v * x ^ 5 + 2 * v * y ^ 5 + 13 * x * y ^ 5 + 30 * x ^ 2 * y ^ 4 + 38 * x ^ 3 * y ^ 3 + 30 * x ^ 4 * y ^ 2 + 13 * x ^ 5 * y + 2 * x ^ 6 + 2 * y ^ 6, 6 * x ^ 45 * y ^ 47 + 14 * x ^ 46 * y ^ 46 + 6 * x ^ 47 * y ^ 45, 0, 3 * v * x * y ^ 5 + 6 * v * x ^ 2 * y ^ 4 + 6 * v * x ^ 3 * y ^ 3 + 6 * v * x ^ 4 * y ^ 2 + 3 * v * x ^ 5 * y + x * y ^ 6 + 5 * x ^ 2 * y ^ 5 + 10 * x ^ 3 * y ^ 4 + 10 * x ^ 4 * y ^ 3 + 5 * x ^ 5 * y ^ 2 + x ^ 6 * y, 3 * x ^ 15 * y ^ 18 + 10 * x ^ 16 * y ^ 17 + 10 * x ^ 17 * y ^ 16 + 3 * x ^ 18 * y ^ 15, 3 * x ^ 45 * y ^ 48 + 10 * x ^ 46 * y ^ 47 + 10 * x ^ 47 * y ^ 46 + 3 * x ^ 48 * y ^ 45, -2 * v * x ^ 7 * y ^ 8 - 2 * v * x ^ 8 * y ^ 7, x ^ 10 * y ^ 10, ((-v * x ^ 3 * y ^ 5 - v * x ^ 4 * y ^ 4) - v * x ^ 5 * y ^ 3) + 2 * x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4, ((((((((((((-2 * v * x * y ^ 7 - 6 * v * x ^ 2 * y ^ 6) - 6 * v * x ^ 3 * y ^ 5) - 4 * v * x ^ 4 * y ^ 4) - 6 * v * x ^ 5 * y ^ 3) - 6 * v * x ^ 6 * y ^ 2) - 2 * v * x ^ 7 * y) - 6 * x ^ 2 * y ^ 7) - 17 * x ^ 3 * y ^ 6) - 18 * x ^ 4 * y ^ 5) - 18 * x ^ 5 * y ^ 4) - 17 * x ^ 6 * y ^ 3) - 6 * x ^ 7 * y ^ 2) + x ^ 9 + y ^ 9, (((((((((-4 * v * x ^ 2 * y ^ 6 - 13 * v * x ^ 3 * y ^ 5) - 19 * v * x ^ 4 * y ^ 4) - 13 * v * x ^ 5 * y ^ 3) - 4 * v * x ^ 6 * y ^ 2) - 3 * x ^ 2 * y ^ 7) - 11 * x ^ 3 * y ^ 6) - 19 * x ^ 4 * y ^ 5) - 19 * x ^ 5 * y ^ 4) - 11 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2, x ^ 5 * y ^ 5, 6 * x ^ 30 * y ^ 32 + 14 * x ^ 31 * y ^ 31 + 6 * x ^ 32 * y ^ 30, x ^ 35 * y ^ 35, (((((((((((-8 * v * x ^ 2 * y ^ 7 - 32 * v * x ^ 3 * y ^ 6) - 58 * v * x ^ 4 * y ^ 5) - 58 * v * x ^ 5 * y ^ 4) - 32 * v * x ^ 6 * y ^ 3) - 8 * v * x ^ 7 * y ^ 2) - 2 * x ^ 2 * y ^ 8) - 11 * x ^ 3 * y ^ 7) - 30 * x ^ 4 * y ^ 6) - 41 * x ^ 5 * y ^ 5) - 30 * x ^ 6 * y ^ 4) - 11 * x ^ 7 * y ^ 3) - 2 * x ^ 8 * y ^ 2, ((-v * x ^ 30 * y ^ 32 - 2 * v * x ^ 31 * y ^ 31) - v * x ^ 32 * y ^ 30) + 2 * x ^ 31 * y ^ 32 + 2 * x ^ 32 * y ^ 31, -4 * v * x ^ 7 * y ^ 7, -4 * v * x ^ 22 * y ^ 22, ((((((v * x ^ 30 * y ^ 36 + v * x ^ 31 * y ^ 35 + v * x ^ 35 * y ^ 31 + v * x ^ 36 * y ^ 30) - 3 * x ^ 31 * y ^ 36) - 9 * x ^ 32 * y ^ 35) - 6 * x ^ 33 * y ^ 34) - 6 * x ^ 34 * y ^ 33) - 9 * x ^ 35 * y ^ 32) - 3 * x ^ 36 * y ^ 31, (-2 * v * x ^ 16 * y ^ 17 - 2 * v * x ^ 17 * y ^ 16) + x ^ 16 * y ^ 18 + 2 * x ^ 17 * y ^ 17 + x ^ 18 * y ^ 16, 10 * x ^ 15 * y ^ 17 + 20 * x ^ 16 * y ^ 16 + 10 * x ^ 17 * y ^ 15, 0, (-2 * v * x ^ 31 * y ^ 32 - 2 * v * x ^ 32 * y ^ 31) + x ^ 31 * y ^ 33 + 2 * x ^ 32 * y ^ 32 + x ^ 33 * y ^ 31, 6 * x ^ 15 * y ^ 19 + 8 * x ^ 16 * y ^ 18 + 12 * x ^ 17 * y ^ 17 + 8 * x ^ 18 * y ^ 16 + 6 * x ^ 19 * y ^ 15, 20 * x ^ 15 * y ^ 16 + 20 * x ^ 16 * y ^ 15, 20 * x ^ 45 * y ^ 46 + 20 * x ^ 46 * y ^ 45, (-4 * v * x ^ 30 * y ^ 31 - 4 * v * x ^ 31 * y ^ 30) + 6 * x ^ 30 * y ^ 32 + 12 * x ^ 31 * y ^ 31 + 6 * x ^ 32 * y ^ 30, -8 * v * x ^ 16 * y ^ 16 + 3 * x ^ 15 * y ^ 18 + 9 * x ^ 16 * y ^ 17 + 9 * x ^ 17 * y ^ 16 + 3 * x ^ 18 * y ^ 15, -8 * v * x ^ 31 * y ^ 31 + 3 * x ^ 30 * y ^ 33 + 9 * x ^ 31 * y ^ 32 + 9 * x ^ 32 * y ^ 31 + 3 * x ^ 33 * y ^ 30, x ^ 20 * y ^ 20, 40 * x ^ 15 * y ^ 15, 40 * x ^ 45 * y ^ 45, 40 * x ^ 30 * y ^ 30] * x ^ 0 * y ^ 0
            end
        f50 = function (r, p, sgn)
                local v
                v = sgn * GetRoot(r // p, 2)
                return adj(p, [40, -18 - 22 * v ^ 2, 8 + 20 * v ^ 2 + 12 * v ^ 4, (((2 - 2v) + 12 * v ^ 2) - 2 * v ^ 3) + 6 * v ^ 4, 5 + 13 * v ^ 2 + 9 * v ^ 4, ((-1 - 4 * v ^ 2) - 6 * v ^ 4) - 3 * v ^ 6, 10 + 6v + 24 * v ^ 2 + 8 * v ^ 3 + 18 * v ^ 4 + 6 * v ^ 5 + 8 * v ^ 6, 3 + v + 6 * v ^ 2 + 3 * v ^ 3 + 5 * v ^ 4 + 2 * v ^ 5 + 2 * v ^ 6, ((-6 * v ^ 2 + 4 * v ^ 3) - 12 * v ^ 4) - 2 * v ^ 6, ((((v - 2 * v ^ 2) + 2 * v ^ 3) - 4 * v ^ 4) + v ^ 5) - v ^ 6, ((-2 - 9 * v ^ 2) - 11 * v ^ 4) - 5 * v ^ 6, (((-(v ^ 2) + v ^ 3) - 2 * v ^ 4) + v ^ 5) - v ^ 6, 0, Unknown(), ((-(v ^ 3) + 2 * v ^ 4) - v ^ 5) + 2 * v ^ 6, (((((((-2 - 2v) - 13 * v ^ 2) - 4 * v ^ 3) - 21 * v ^ 4) - 5 * v ^ 5) - 15 * v ^ 6) - 3 * v ^ 7) - 5 * v ^ 8, 0, 2 + 10 * v ^ 2 + 12 * v ^ 4 + 10 * v ^ 6 + 6 * v ^ 8, Unknown(), 0, Unknown(), (((((-4 * v ^ 2 - 11 * v ^ 4) - 2 * v ^ 5) - 12 * v ^ 6) - 2 * v ^ 7) - 6 * v ^ 8) - v ^ 10, 0, 0, 2 * v ^ 3 + v ^ 4 + 3 * v ^ 6 + 2 * v ^ 7 + 2 * v ^ 8 + v ^ 10 + v ^ 12, 5 * v ^ 33 + 13 * v ^ 35 + 9 * v ^ 37, 3 + 2v + 13 * v ^ 2 + 4 * v ^ 3 + 34 * v ^ 4 + 10 * v ^ 5 + 51 * v ^ 6 + 12 * v ^ 7 + 43 * v ^ 8 + 8 * v ^ 9 + 20 * v ^ 10 + 4 * v ^ 12, 5 * v ^ 99 + 13 * v ^ 101 + 9 * v ^ 103, 0, ((((((((-(v ^ 3) - 4 * v ^ 4) - 3 * v ^ 5) - 15 * v ^ 6) - 3 * v ^ 7) - 18 * v ^ 8) - 3 * v ^ 9) - 9 * v ^ 10) - 2 * v ^ 11) - 2 * v ^ 12, ((-2 * v ^ 33 - 9 * v ^ 35) - 11 * v ^ 37) - 5 * v ^ 39, ((-2 * v ^ 99 - 9 * v ^ 101) - 11 * v ^ 103) - 5 * v ^ 105, 0, -2 * v ^ 22, Unknown(), (v ^ 3 + 3 * v ^ 4 + 3 * v ^ 5 + 13 * v ^ 6 + 3 * v ^ 7 + 21 * v ^ 8 + 2 * v ^ 9 + 27 * v ^ 10 + 3 * v ^ 11 + 20 * v ^ 12 + 3 * v ^ 13 + 9 * v ^ 14 + v ^ 15) - v ^ 18, Unknown(), -2 * v ^ 11, 5 * v ^ 66 + 13 * v ^ 68 + 9 * v ^ 70, -2 * v ^ 77, Unknown(), (((-(v ^ 68) + v ^ 69) - 2 * v ^ 70) + v ^ 71) - v ^ 72, 0, 0, (((-(v ^ 67) + 2 * v ^ 68) - v ^ 69) + 7 * v ^ 70 + 5 * v ^ 72 + 3 * v ^ 74 + 8 * v ^ 76 + 4 * v ^ 78) - v ^ 80, ((-(v ^ 36) + 2 * v ^ 37) - v ^ 38) + 2 * v ^ 39, 8 * v ^ 33 + 20 * v ^ 35 + 12 * v ^ 37, 0, ((-(v ^ 69) + 2 * v ^ 70) - v ^ 71) + 2 * v ^ 72, 2 * v ^ 33 + 10 * v ^ 35 + 12 * v ^ 37 + 10 * v ^ 39 + 6 * v ^ 41, -18 * v ^ 33 - 22 * v ^ 35, -18 * v ^ 99 - 22 * v ^ 101, (((2 * v ^ 66 - 2 * v ^ 67) + 12 * v ^ 68) - 2 * v ^ 69) + 6 * v ^ 70, ((-6 * v ^ 35 + 4 * v ^ 36) - 12 * v ^ 37) - 2 * v ^ 39, ((-6 * v ^ 68 + 4 * v ^ 69) - 12 * v ^ 70) - 2 * v ^ 72, -2 * v ^ 44, 40 * v ^ 33, 40 * v ^ 99, 40 * v ^ 66])
            end
        f54 = function (x, y)
                return [45, 21x + 24y, 22 * x * y + 10 * x ^ 2 + 13 * y ^ 2, 12 * x * y + 3 * x ^ 2 + 6 * y ^ 2, 15 * x * y + 6 * x ^ 2 + 9 * y ^ 2, 6 * x * y ^ 2 + 5 * x ^ 2 * y + x ^ 3 + 3 * y ^ 3, ((-27 * x * y ^ 2 - 27 * x ^ 2 * y) - 12 * x ^ 3) - 9 * y ^ 3, ((-7 * x * y ^ 2 - 8 * x ^ 2 * y) - 3 * x ^ 3) - 3 * y ^ 3, 9 * x * y ^ 2 + 9 * x ^ 2 * y + 3 * y ^ 3, 3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 12 * x * y ^ 2 + 10 * x ^ 2 * y + 3 * x ^ 3 + 5 * y ^ 3, 2 * x * y ^ 2 + x ^ 2 * y, 0, 0, x * y ^ 3 + 2 * x ^ 2 * y ^ 2, (((-20 * x * y ^ 3 - 25 * x ^ 2 * y ^ 2) - 15 * x ^ 3 * y) - 4 * x ^ 4) - 5 * y ^ 4, 0, 12 * x * y ^ 3 + 12 * x ^ 2 * y ^ 2 + 12 * x ^ 3 * y + 3 * x ^ 4 + 6 * y ^ 4, x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 0, ((-5 * x * y ^ 4 - 8 * x ^ 2 * y ^ 3) - 4 * x ^ 3 * y ^ 2) - x ^ 4 * y, 7 * x * y ^ 4 + 13 * x ^ 2 * y ^ 3 + 13 * x ^ 3 * y ^ 2 + 5 * x ^ 4 * y + y ^ 5, 0, (-(x ^ 7) * y ^ 11 - x ^ 8 * y ^ 10) - x ^ 9 * y ^ 9, 2 * x * y ^ 5 + 4 * x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2, 9 * x ^ 14 * y ^ 18 + 15 * x ^ 15 * y ^ 17 + 6 * x ^ 16 * y ^ 16, 22 * x * y ^ 5 + 51 * x ^ 2 * y ^ 4 + 62 * x ^ 3 * y ^ 3 + 42 * x ^ 4 * y ^ 2 + 18 * x ^ 5 * y + 3 * x ^ 6 + 3 * y ^ 6, 9 * x ^ 42 * y ^ 50 + 15 * x ^ 43 * y ^ 49 + 6 * x ^ 44 * y ^ 48, 0, 2 * x * y ^ 6 + 9 * x ^ 2 * y ^ 5 + 21 * x ^ 3 * y ^ 4 + 17 * x ^ 4 * y ^ 3 + 8 * x ^ 5 * y ^ 2, 5 * x ^ 14 * y ^ 19 + 12 * x ^ 15 * y ^ 18 + 10 * x ^ 16 * y ^ 17 + 3 * x ^ 17 * y ^ 16, 5 * x ^ 42 * y ^ 51 + 12 * x ^ 43 * y ^ 50 + 10 * x ^ 44 * y ^ 49 + 3 * x ^ 45 * y ^ 48, -(x ^ 7) * y ^ 9 - 2 * x ^ 8 * y ^ 8, 0, 0, (((((-9 * x ^ 2 * y ^ 7 - 24 * x ^ 3 * y ^ 6) - 30 * x ^ 4 * y ^ 5) - 27 * x ^ 5 * y ^ 4) - 16 * x ^ 6 * y ^ 3) - 6 * x ^ 7 * y ^ 2) + y ^ 9, (((((-2 * x * y ^ 8 - 13 * x ^ 2 * y ^ 7) - 29 * x ^ 3 * y ^ 6) - 39 * x ^ 4 * y ^ 5) - 31 * x ^ 5 * y ^ 4) - 10 * x ^ 6 * y ^ 3) + 2 * x ^ 7 * y ^ 2 + 2 * x ^ 8 * y, 0, 9 * x ^ 28 * y ^ 34 + 15 * x ^ 29 * y ^ 33 + 6 * x ^ 30 * y ^ 32, 0, (((((-15 * x ^ 2 * y ^ 8 - 58 * x ^ 3 * y ^ 7) - 100 * x ^ 4 * y ^ 6) - 92 * x ^ 5 * y ^ 5) - 44 * x ^ 6 * y ^ 4) - 12 * x ^ 7 * y ^ 3) - 3 * x ^ 8 * y ^ 2, 2 * x ^ 29 * y ^ 34 + x ^ 30 * y ^ 33, -3 * x ^ 7 * y ^ 8, -3 * x ^ 21 * y ^ 24, ((((-4 * x ^ 29 * y ^ 38 - 10 * x ^ 30 * y ^ 37) - 6 * x ^ 31 * y ^ 36) - 4 * x ^ 32 * y ^ 35) - 6 * x ^ 33 * y ^ 34) - 3 * x ^ 34 * y ^ 33, x ^ 15 * y ^ 19 + 2 * x ^ 16 * y ^ 18, 13 * x ^ 14 * y ^ 18 + 22 * x ^ 15 * y ^ 17 + 10 * x ^ 16 * y ^ 16, 0, x ^ 29 * y ^ 35 + 2 * x ^ 30 * y ^ 34, 6 * x ^ 14 * y ^ 20 + 12 * x ^ 15 * y ^ 19 + 12 * x ^ 16 * y ^ 18 + 12 * x ^ 17 * y ^ 17 + 3 * x ^ 18 * y ^ 16, 24 * x ^ 14 * y ^ 17 + 21 * x ^ 15 * y ^ 16, 24 * x ^ 42 * y ^ 49 + 21 * x ^ 43 * y ^ 48, 6 * x ^ 28 * y ^ 34 + 12 * x ^ 29 * y ^ 33 + 3 * x ^ 30 * y ^ 32, 3 * x ^ 14 * y ^ 19 + 9 * x ^ 15 * y ^ 18 + 9 * x ^ 16 * y ^ 17, 3 * x ^ 28 * y ^ 35 + 9 * x ^ 29 * y ^ 34 + 9 * x ^ 30 * y ^ 33, 0, 45 * x ^ 14 * y ^ 16, 45 * x ^ 42 * y ^ 48, 45 * x ^ 28 * y ^ 32] * x ^ 0 * y ^ 0
            end
        f56 = function (x, y)
                return [45, 21x + 24y, 24 * x * y + 9 * x ^ 2 + 12 * y ^ 2, 10 * x * y + 4 * x ^ 2 + 7 * y ^ 2, 15 * x * y + 6 * x ^ 2 + 9 * y ^ 2, 7 * x * y ^ 2 + 5 * x ^ 2 * y + x ^ 3 + 2 * y ^ 3, ((-24 * x * y ^ 2 - 33 * x ^ 2 * y) - 9 * x ^ 3) - 9 * y ^ 3, ((-8 * x * y ^ 2 - 8 * x ^ 2 * y) - 3 * x ^ 3) - 2 * y ^ 3, 12 * x * y ^ 2 + 3 * x ^ 2 * y + 3 * x ^ 3 + 3 * y ^ 3, 3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 13 * x * y ^ 2 + 11 * x ^ 2 * y + 2 * x ^ 3 + 4 * y ^ 3, x * y ^ 2 + x ^ 2 * y + y ^ 3, 0, 0, 2 * x * y ^ 3 + x ^ 2 * y ^ 2, (((-17 * x * y ^ 3 - 26 * x ^ 2 * y ^ 2) - 17 * x ^ 3 * y) - 3 * x ^ 4) - 6 * y ^ 4, 0, 12 * x * y ^ 3 + 10 * x ^ 2 * y ^ 2 + 12 * x ^ 3 * y + 4 * x ^ 4 + 7 * y ^ 4, x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, 0, (((-3 * x * y ^ 4 - 7 * x ^ 2 * y ^ 3) - 6 * x ^ 3 * y ^ 2) - x ^ 4 * y) - y ^ 5, 7 * x * y ^ 4 + 13 * x ^ 2 * y ^ 3 + 13 * x ^ 3 * y ^ 2 + 5 * x ^ 4 * y + y ^ 5, 0, (-(x ^ 7) * y ^ 11 - x ^ 9 * y ^ 9) - x ^ 10 * y ^ 8, 2 * x * y ^ 5 + 3 * x ^ 2 * y ^ 4 + x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + y ^ 6, 9 * x ^ 14 * y ^ 18 + 15 * x ^ 15 * y ^ 17 + 6 * x ^ 16 * y ^ 16, 22 * x * y ^ 5 + 50 * x ^ 2 * y ^ 4 + 62 * x ^ 3 * y ^ 3 + 44 * x ^ 4 * y ^ 2 + 16 * x ^ 5 * y + 3 * x ^ 6 + 4 * y ^ 6, 9 * x ^ 42 * y ^ 50 + 15 * x ^ 43 * y ^ 49 + 6 * x ^ 44 * y ^ 48, 0, 3 * x * y ^ 6 + 11 * x ^ 2 * y ^ 5 + 20 * x ^ 3 * y ^ 4 + 15 * x ^ 4 * y ^ 3 + 6 * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 4 * x ^ 14 * y ^ 19 + 13 * x ^ 15 * y ^ 18 + 11 * x ^ 16 * y ^ 17 + 2 * x ^ 17 * y ^ 16, 4 * x ^ 42 * y ^ 51 + 13 * x ^ 43 * y ^ 50 + 11 * x ^ 44 * y ^ 49 + 2 * x ^ 45 * y ^ 48, -2 * x ^ 7 * y ^ 9 - x ^ 8 * y ^ 8, 0, 0, (((((-12 * x ^ 2 * y ^ 7 - 24 * x ^ 3 * y ^ 6) - 27 * x ^ 4 * y ^ 5) - 24 * x ^ 5 * y ^ 4) - 16 * x ^ 6 * y ^ 3) - 9 * x ^ 7 * y ^ 2) + y ^ 9, (((((-3 * x * y ^ 8 - 11 * x ^ 2 * y ^ 7) - 27 * x ^ 3 * y ^ 6) - 41 * x ^ 4 * y ^ 5) - 34 * x ^ 5 * y ^ 4) - 10 * x ^ 6 * y ^ 3) + 4 * x ^ 7 * y ^ 2 + 2 * x ^ 8 * y, 0, 9 * x ^ 28 * y ^ 34 + 15 * x ^ 29 * y ^ 33 + 6 * x ^ 30 * y ^ 32, 0, (((((-15 * x ^ 2 * y ^ 8 - 56 * x ^ 3 * y ^ 7) - 99 * x ^ 4 * y ^ 6) - 96 * x ^ 5 * y ^ 5) - 50 * x ^ 6 * y ^ 4) - 10 * x ^ 7 * y ^ 3) + x ^ 8 * y ^ 2 + y ^ 10, x ^ 28 * y ^ 35 + x ^ 29 * y ^ 34 + x ^ 30 * y ^ 33, -3 * x ^ 7 * y ^ 8, -3 * x ^ 21 * y ^ 24, (((((x ^ 28 * y ^ 39 - 3 * x ^ 29 * y ^ 38) - 7 * x ^ 30 * y ^ 37) - 7 * x ^ 31 * y ^ 36) - 9 * x ^ 32 * y ^ 35) - 7 * x ^ 33 * y ^ 34) - x ^ 34 * y ^ 33, 2 * x ^ 15 * y ^ 19 + x ^ 16 * y ^ 18, 12 * x ^ 14 * y ^ 18 + 24 * x ^ 15 * y ^ 17 + 9 * x ^ 16 * y ^ 16, 0, 2 * x ^ 29 * y ^ 35 + x ^ 30 * y ^ 34, 7 * x ^ 14 * y ^ 20 + 12 * x ^ 15 * y ^ 19 + 10 * x ^ 16 * y ^ 18 + 12 * x ^ 17 * y ^ 17 + 4 * x ^ 18 * y ^ 16, 24 * x ^ 14 * y ^ 17 + 21 * x ^ 15 * y ^ 16, 24 * x ^ 42 * y ^ 49 + 21 * x ^ 43 * y ^ 48, 7 * x ^ 28 * y ^ 34 + 10 * x ^ 29 * y ^ 33 + 4 * x ^ 30 * y ^ 32, 3 * x ^ 14 * y ^ 19 + 12 * x ^ 15 * y ^ 18 + 3 * x ^ 16 * y ^ 17 + 3 * x ^ 17 * y ^ 16, 3 * x ^ 28 * y ^ 35 + 12 * x ^ 29 * y ^ 34 + 3 * x ^ 30 * y ^ 33 + 3 * x ^ 31 * y ^ 32, 0, 45 * x ^ 14 * y ^ 16, 45 * x ^ 42 * y ^ 48, 45 * x ^ 28 * y ^ 32] * x ^ 0 * y ^ 0
            end
        f58 = function (r, p, I)
                local q
                q = -r // p
                return adj(p, [64, -32 + 32q, (16 - 32q) + 16 * q ^ 2, (8 - 16q) + 8 * q ^ 2, (10 - 22q) + 10 * q ^ 2, ((-2 + 8q) - 8 * q ^ 2) + 2 * q ^ 3, ((12 - 36q) + 36 * q ^ 2) - 12 * q ^ 3, ((4 - 10q) + 10 * q ^ 2) - 4 * q ^ 3, ((-4 + 12q) - 12 * q ^ 2) + 4 * q ^ 3, ((-1 + 4q) - 4 * q ^ 2) + q ^ 3, ((-5 + 16q) - 16 * q ^ 2) + 5 * q ^ 3, 2q - 2 * q ^ 2, I * q ^ 9, Unknown(), (-q + 2 * q ^ 2) - q ^ 3, (((-6 + 23q) - 34 * q ^ 2) + 23 * q ^ 3) - 6 * q ^ 4, -I * q ^ 3, (((8 - 16q) + 16 * q ^ 2) - 16 * q ^ 3) + 8 * q ^ 4, Unknown(), 0, Unknown(), ((((-1 + 8q) - 17 * q ^ 2) + 17 * q ^ 3) - 8 * q ^ 4) + q ^ 5, 0, 0, (-2q + 2 * q ^ 2 + 2 * q ^ 4) - 2 * q ^ 5, (10 * I * q ^ 15 - 22 * I * q ^ 16) + 10 * I * q ^ 17, (((((4 - 26q) + 62 * q ^ 2) - 80 * q ^ 3) + 62 * q ^ 4) - 26 * q ^ 5) + 4 * q ^ 6, (-10 * I * q ^ 45 + 22 * I * q ^ 46) - 10 * I * q ^ 47, q ^ 6, ((((2q - 11 * q ^ 2) + 23 * q ^ 3) - 23 * q ^ 4) + 11 * q ^ 5) - 2 * q ^ 6, ((-5 * I * q ^ 15 + 16 * I * q ^ 16) - 16 * I * q ^ 17) + 5 * I * q ^ 18, ((5 * I * q ^ 45 - 16 * I * q ^ 46) + 16 * I * q ^ 47) - 5 * I * q ^ 48, 0, -4 * q ^ 10, Unknown(), ((((((-1 + 12 * q ^ 2) - 29 * q ^ 3) + 36 * q ^ 4) - 36 * q ^ 5) + 29 * q ^ 6) - 12 * q ^ 7) + q ^ 9, Unknown(), -4 * I * q ^ 5, (-10 * q ^ 30 + 22 * q ^ 31) - 10 * q ^ 32, 4 * I * q ^ 35, Unknown(), -2 * q ^ 31 + 2 * q ^ 32, 0, 0, ((((4 * q ^ 31 - 12 * q ^ 32) + 10 * q ^ 33) - 10 * q ^ 34) + 12 * q ^ 35) - 4 * q ^ 36, (-I * q ^ 16 + 2 * I * q ^ 17) - I * q ^ 18, (16 * I * q ^ 15 - 32 * I * q ^ 16) + 16 * I * q ^ 17, -(q ^ 12), (q ^ 31 - 2 * q ^ 32) + q ^ 33, (((8 * I * q ^ 15 - 16 * I * q ^ 16) + 16 * I * q ^ 17) - 16 * I * q ^ 18) + 8 * I * q ^ 19, -32 * I * q ^ 15 + 32 * I * q ^ 16, 32 * I * q ^ 45 - 32 * I * q ^ 46, (-8 * q ^ 30 + 16 * q ^ 31) - 8 * q ^ 32, ((-4 * I * q ^ 15 + 12 * I * q ^ 16) - 12 * I * q ^ 17) + 4 * I * q ^ 18, ((4 * q ^ 30 - 12 * q ^ 31) + 12 * q ^ 32) - 4 * q ^ 33, 4 * q ^ 20, 64 * I * q ^ 15, -64 * I * q ^ 45, -64 * q ^ 30])
            end
        tbl[:irreducibles] = [f1(r), f1(p), f6(p, r, -1), f6(r, p, 1), f6(p, r, 1), f6(r, p, -1), f7(r, p), f7(p, r), f9(r, p), f9(p, r), f11(r, p, -1), f11(r, p, 1), f14(p, r), f14(r, p), f16(p, r), f16(r, p), f17(r, p, -1), f17(p, r, -1), f17(r, p, 1), f17(p, r, 1), f21(r, p), f21(p, r), f23(r, p), f23(p, r), f25(r, p), f26(r, p), f27(r, p, -1), f27(p, r, 1), f27(r, p, 1), f27(p, r, -1), f31(r, p, 1), f31(p, r, 1), f31(r, p, -1), f31(p, r, -1), f35(r, p, 1), f35(r, p, -1), f37(r, p), f37(p, r), f39(r, p, 1), f39(r, p, -1), f41(r, p), f42(r, p, 1), f42(p, r, 1), f42(r, p, -1), f42(p, r, -1), f46(r, p), f46(p, r), f48(r, p, -1), f48(r, p, 1), f50(r, p, 1), f50(p, r, 1), f50(r, p, -1), f50(p, r, -1), f54(r, p), f54(p, r), f56(r, p), f56(p, r), f58(r, p, E(4)), f58(r, p, -(E(4)))]
        tbl[:centralizers] = map((x->begin
                        tbl[:order] // x
                    end), tbl[:classes])
        tbl[:irredinfo] = chevieget(:G31, :IrredInfo)
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        return tbl
    end)
chevieset(:G31, :CharTable, function ()
        local res
        res = (chevieget(:G31, :HeckeCharTable))(map((x->begin
                            [1, -1]
                        end), 1:4), [])
        res[:identifier] = "G31"
        res[:name] = "G31"
        res[:galomorphisms] = Group(#= none:10 =# @perm_str("(7,9)(8,12)(13,17)(15,16)(19,21)(20,23)(25,27)(26,28)(31,32)(35,37)(38,40)(42,45)(43,44)(46,49)(51,52)(54,55)(57,58)"))
        res[:text] = "origin: mostly CharTable(H(G31))"
        ((res[:irreducibles])[Concatenation([35, 36], [39, 40, 41], 50:53, [58, 59])])[[14, 19, 21, 35, 37, 41]] = [[-1, -(E(4)), E(4), E(4), -(E(4)), 1], [-1, E(4), -(E(4)), -(E(4)), E(4), 1], [1, E(4), -(E(4)), -(E(4)), E(4), -1], [1, -(E(4)), E(4), E(4), -(E(4)), -1], [0, 0, 0, 0, 0, 0], [0, E(4) + 1, -(E(4)) + 1, E(4) - 1, -(E(4)) - 1, 0], [0, -(E(4)) - 1, E(4) - 1, -(E(4)) + 1, E(4) + 1, 0], [0, -(E(4)) + 1, E(4) + 1, -(E(4)) - 1, E(4) - 1, 0], [0, E(4) - 1, -(E(4)) - 1, E(4) + 1, -(E(4)) + 1, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
        return res
    end)
chevieset(:G31, :HeckeRepresentation, function (para, root, i)
        local x, y, rep, dec, f1, f6, f7, f9, f11, f14, f16, f19, f21, f23, f25, f26, f27, f31, f37, f42, f46, f48, f54, f56
        dec = function (d, l)
                local m, v, k
                m = map((i->begin
                                NullMat(d)
                            end), 1:5)
                for v = l
                    for k = v[2:length(v)]
                        l = mod(k, d ^ 2)
                        ((m[div(k, d ^ 2) + 1])[div(l, d) + 1])[mod(l, d) + 1] = v[1]
                    end
                end
                return m
            end
        x = (para[1])[1]
        y = (para[1])[2]
        f1 = (x->begin
                    [[[x]], [[x]], [[x]], [[x]], [[x]]]
                end)
        f6 = function (x, y, s)
                local v
                v = s * GetRoot(x * y)
                return [[[x, 0, 0, 0], [0, -v + x + y, -v + x, v], [0, v - y, v, -v], [0, 0, 0, x]], [[x + y, (v - x) - y, -x, -v], [0, x, 0, 0], [y, (v - x) - y, 0, -v], [0, 0, 0, x]], [[x + y, -x, -v, 0], [y, 0, -v, 0], [0, 0, x, 0], [0, 0, 0, x]], [[x, 0, 0, 0], [0, x, 0, 0], [0, 0, x, 0], [0, 0, v, y]], [[y, -y, -y, 0], [0, x, 0, 0], [0, 0, x, 0], [0, 0, 0, x]]] * x ^ 0 * y ^ 0
            end
        f7 = function (x, y)
                return dec(5, [[-x, 35, 38, 96], [-y, 15, 21, 46, 88, 101, 110, 113, 119], [x, 3, 6, 12, 22, 25, 31, 43, 50, 55, 58, 62, 68, 70, 72, 75, 80, 82, 92, 95, 98, 102, 106, 123], [y, 24, 37, 48, 49, 56, 74, 84, 104, 111], [x + y, 0, 20, 23, 73, 83, 93, 99, 100, 103, 124]]) * x ^ 0 * y ^ 0
            end
        f9 = function (x, y)
                return dec(5, [[-x, 33, 48, 95], [-y, 20, 61, 90, 117], [x, 4, 28, 38, 43, 57, 75, 112], [y, 6, 12, 18, 25, 31, 37, 49, 50, 68, 74, 81, 87, 93, 99, 100, 106, 107, 118, 124], [x + y, 0, 56]]) * x ^ 0 * y ^ 0
            end
        f11 = function (x, y, s)
                return map((m->begin
                                ExteriorPower(m, 2) // x
                            end), f6(x, y, s))
            end
        f14 = function (x, y)
                return dec(9, [[-x, 225, 235, 236], [-y, 11, 32, 43, 93, 104, 244, 294, 314, 355, 376, 386], [x, 0, 19, 48, 60, 67, 80, 81, 109, 121, 128, 141, 151, 162, 172, 182, 192, 212, 222, 252, 263, 273, 283, 302, 322, 324, 334, 344, 363, 392, 402], [y, 153, 154, 155, 156, 157, 158, 159, 160, 161, 198, 199, 201, 202, 227, 230, 232, 240, 242], [x + y, 20, 50, 70, 111, 131, 253, 303, 323, 364, 394, 404]]) * x ^ 0 * y ^ 0
            end
        f16 = function (x, y)
                return dec(10, [[-x, 42, 60, 68, 80, 90, 120, 128, 148, 153, 163, 170, 178, 184, 194, 363, 384, 389, 404, 406, 407, 485, 495], [-y, 65, 76, 94, 104, 130, 138, 150, 158, 160, 168, 190, 234, 239, 254, 259, 269, 272, 342, 360, 368, 380, 390, 394, 453, 463], [-x * y, 118], [-(x ^ 2), 12], [-x - y, 124, 174], [(-x * y - x ^ 2) - y ^ 2, 312], [-x + y, 98, 465], [1, 121, 141, 171, 181], [x, 0, 33, 55, 67, 92, 99, 142, 155, 177, 182, 200, 211, 222, 244, 270, 278, 288, 299, 304, 309, 322, 333, 355, 377, 388, 402, 405, 408, 411, 422, 433, 444, 466, 472, 484, 486, 493, 496], [y, 11, 24, 75, 78, 88, 102, 136, 137, 156, 157, 167, 192, 199, 233, 238, 255, 258, 266, 277, 311, 344, 366, 367, 392, 455, 470, 478, 488, 494, 499], [x ^ 2, 14, 110], [x - y, 198, 365], [x + y, 44, 66, 111, 166, 172, 300, 400], [2x + y, 122]]) * x ^ 0 * y ^ 0
            end
        f19 = function (x, y, v)
                local s
                s = v * GetRoot(x * y)
                return dec(10, [[-1, 56, 159], [1, 78, 179, 303, 325, 347, 416], [-s, 98, 268, 296], [-x, 420, 453], [-y, 31, 120, 224, 257], [-s * y ^ -1, 178], [-s * y, 167], [-x * y, 87, 330, 352, 374, 461], [-s * y ^ 2, 182, 292], [-x * y ^ 2, 192, 490], [-(y ^ 2), 130, 150], [-(y ^ 3), 294, 392], [-x * y - x ^ 2, 91, 93, 174, 261, 263, 281, 283], [-s * x * y - s * x ^ 2, 284, 290], [-s * y ^ 2 - x ^ 2 * y, 262], [-x * y ^ 2 - x ^ 2 * y, 264], [(-x * y - x ^ 2) - y ^ 2, 172], [((-s * x * y - s * x ^ 2) - s * y ^ 2) + x * y ^ 2, 282], [(-s * x * y - s * x ^ 2) + y ^ 3, 160, 180], [-s + y, 288], [s, 169, 189, 299], [x, 13, 100, 242, 275, 286], [y, 0, 22, 44, 99, 111, 122, 133, 140, 144, 168, 188, 200, 211, 233, 298, 311, 366, 388, 399, 402, 435, 444, 477, 488, 499], [s * y ^ -1, 176], [s * y, 97, 185], [x * y, 65, 195], [s * x * y, 162], [x * y ^ 2, 492], [y ^ 2, 110, 152, 170, 395], [s - x, 269, 289], [x + y, 11, 66, 88, 96, 175, 177, 199, 244, 266, 277, 333, 355, 377, 422, 455, 466], [s * x + s * y, 285, 287, 291, 293], [x * y + y ^ 2, 95, 265, 267], [s * x * y + s * y ^ 2, 164], [x ^ 2 * y + x ^ 3, 260, 280]]) * x ^ 0 * y ^ 0
            end
        f21 = function (x, y)
                return dec(15, [[-2 * x * y, 495], [-2x - y, 625], [-2 * x * y - y ^ 2, 1096], [-1, 81, 107, 108, 133, 190, 193, 246, 451, 711, 861, 1026], [-(x ^ -1), 116, 854], [-(x ^ -1) * y, 191, 636, 643], [-(x ^ -1) * y ^ 2, 632], [-x, 46, 76, 183, 184, 287, 347, 348, 426, 430, 431, 483, 492, 496, 518, 526, 621, 780, 1005, 1082, 1083], [-y, 17, 242, 252, 274, 330, 396, 400, 528, 529, 537, 550, 740, 743, 800, 857, 933, 968, 1021, 1023, 1101], [-x * y ^ -1, 70], [-x * y, 45, 75, 319, 391, 398, 502, 542, 623], [-x * y ^ 2, 143, 420, 427, 1095], [-x * y ^ 3, 212, 213, 437, 1112, 1113], [-(x ^ 2), 421, 423, 616, 617, 871, 1045], [-(y ^ 2), 152, 187, 378, 387, 720, 742, 975, 1080, 1097], [-(x ^ 2) * y, 540, 600, 607, 870], [-(x ^ 2) * y ^ 2, 664, 887, 888], [-(y ^ 3), 840, 990], [-(x ^ 3) * y, 360, 367], [-(x ^ 4) * y, 435, 442], [-1 - x ^ -1 * y, 1104], [-1 - x * y ^ -1, 130], [-x - y, 963, 1022], [-x * y - x ^ 2, 541], [-x * y - y ^ 2, 199], [-x * y ^ 2 - x ^ 2 * y, 138], [-(x ^ 2) - y ^ 2, 424], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 447, 672], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 667], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 663], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) + x ^ 4, 438], [-x * y + y ^ 2, 240, 247, 525, 855, 862], [-x * y ^ 2 + x ^ 2 * y, 390, 397, 645, 652], [-x * y ^ 2 + y ^ 3, 375, 382], [-(x ^ 2) + y ^ 2, 318, 422], [-(x ^ 2) * y + y ^ 3, 137], [1, 2, 3, 486, 490, 556, 726, 981], [x ^ -1, 565, 969], [x ^ -1 * y, 501, 505, 508, 966, 970, 973, 1059], [x ^ -1 * y ^ 2, 497], [x, 31, 61, 78, 96, 188, 232, 381, 386, 417, 481, 498, 507, 631, 651, 675, 691, 736, 758, 867, 900, 947, 976, 980, 1028, 1081, 1085, 1088, 1108], [y, 80, 144, 192, 224, 259, 278, 305, 369, 433, 449, 530, 533, 574, 594, 626, 674, 722, 723, 738, 739, 747, 787, 819, 835, 876, 883, 916, 961, 964, 978, 996, 1012, 1076, 1092, 1124], [x * y, 203, 300, 307, 316, 366, 393, 402, 432, 465, 618, 619, 627, 630, 647, 657, 767, 826, 1067, 1068], [x * y ^ 2, 136, 139, 361, 362, 586, 811], [x * y ^ 3, 585, 810], [x * y ^ 4, 210, 1110], [x ^ 2, 376, 428, 543, 552], [y ^ 2, 141, 145, 148, 154, 327, 383, 532, 842, 843, 872, 915, 992, 993, 1051], [x ^ 2 * y, 165, 172, 896, 1036], [x ^ 2 * y ^ 2, 436, 668], [y ^ 3, 673, 1050], [x ^ -1 * y ^ 2 - x, 962], [x - y, 243, 858], [x * y - x ^ 2, 480, 487, 648], [x * y - y ^ 2, 180, 323, 735], [x * y ^ 2 - x ^ 2 * y, 363], [x * y ^ 2 - y ^ 3, 315, 322], [x * y ^ 4 - x ^ 3 * y ^ 2, 660], [x ^ 2 - y ^ 2, 377], [x + y, 32, 48, 64, 121, 128, 176, 181, 225, 289, 321, 353, 385, 466, 482, 514, 610, 658, 755, 771, 899, 948, 977, 1044], [x + x ^ 2 * y ^ -1, 1105], [x * y + y ^ 2, 317, 960], [x * y ^ 2 + x ^ 2 * y, 445, 446], [x * y ^ 3 + x ^ 2 * y ^ 2, 135, 443], [x ^ 2 * y + x ^ 3, 615, 622], [(x * y ^ 2 + x ^ 2 * y) - x ^ 3, 441], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 666], [x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 662], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 661], [2 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 670]]) * x ^ 0 * y ^ 0
            end
        f23 = function (x, y)
                return dec(15, [[-2 * x ^ 2, 571], [-2 * x ^ 3, 766], [-1, 19, 281, 304, 567, 584, 657, 700, 922], [-x, 152, 226, 277, 363, 470, 512, 568, 572, 577, 580, 587, 621, 737, 779, 1037], [-y, 62, 102, 114, 133, 177, 352, 355, 588, 813, 897, 933, 963, 969], [-x * y ^ -1, 426], [-x * y, 103, 105, 155, 178, 189, 193, 345, 346, 439, 480, 810, 898, 960, 993, 999, 1003, 1074, 1078, 1093, 1100], [-x * y ^ 2, 315], [-(x ^ 2), 184, 223, 425, 575, 586, 590, 767, 772, 773, 775, 848, 868, 994, 1069, 1123], [-(y ^ 2), 260, 318, 324], [-(x ^ 2) * y, 180, 990, 1065], [-(x ^ 3), 405, 770], [-x - y, 222], [-x * y - x ^ 2, 255, 256, 408, 414], [-x * y - y ^ 2, 438, 444], [-(x ^ 2) - x ^ 3 * y ^ -1, 409], [(-x * y ^ 2 - x ^ 2 * y) + x ^ 3, 435], [1, 17, 371, 452, 582, 591, 597, 760, 988], [x, 16, 34, 48, 54, 96, 112, 128, 154, 160, 191, 224, 257, 273, 353, 367, 417, 423, 429, 433, 449, 514, 562, 583, 594, 598, 610, 626, 739, 751, 755, 771, 777, 787, 788, 790, 819, 851, 869, 878, 880, 883, 947, 996, 1039, 1057, 1058, 1060, 1076, 1092, 1124], [y, 0, 80, 101, 144, 208, 240, 259, 337, 385, 401, 416, 498, 526, 546, 675, 707, 723, 803, 900, 1028], [x * y ^ -1, 366], [x * y, 97, 125, 172, 219, 290, 412, 618, 643, 667, 668, 670, 826, 843, 892, 1006, 1087], [x * y ^ 2, 440], [x ^ 2, 45, 150, 182, 187, 361, 420, 442, 445, 510, 556, 560, 585, 601, 605, 735, 778, 780, 781, 862, 870, 871, 1035, 1050, 1051, 1067, 1072, 1117], [x ^ 2 * y ^ -1, 424], [x ^ 2 * y, 91, 95, 166, 170, 185, 210, 406, 660, 661, 886, 890, 995, 1070, 1081, 1085], [x ^ 3, 181, 215, 436, 856, 860, 1066, 1111, 1115], [x + y, 64, 176, 221, 241, 305, 321, 441, 482, 530, 642, 674, 835, 899, 948, 1012, 1044, 1108], [x + x ^ 2 * y ^ -1, 411], [x * y + x ^ 2, 217], [x * y + y ^ 2, 511, 515], [x ^ 2 * y + x ^ 3, 211, 410]]) * x ^ 0 * y ^ 0
            end
        f25 = function (x, y)
                return dec(16, [[-x, 112, 230, 250, 390, 711, 801, 933, 1013, 1056, 1057, 1232], [-y, 21, 39, 41, 60, 75, 141, 289, 323, 416, 419, 420, 444, 493, 561, 576, 578, 579, 618, 633, 647, 649, 650, 697, 700, 709, 751, 772, 886, 922, 958, 966, 975, 983, 986, 1158, 1159, 1173, 1223], [x, 81, 144, 145, 146, 161, 165, 180, 195, 216, 241, 245, 246, 256, 274, 308, 343, 345, 375, 409, 417, 418, 459, 478, 497, 498, 503, 529, 546, 560, 564, 597, 663, 682, 715, 721, 722, 727, 766, 785, 819, 832, 871, 904, 935, 937, 1003, 1017, 1020, 1024, 1041, 1092, 1109, 1126, 1143, 1185, 1189, 1190, 1211, 1262, 1265, 1269], [y, 7, 37, 110, 174, 175, 341, 360, 426, 507, 508, 509, 510, 511, 512, 513, 514, 609, 613, 614, 640, 641, 643, 644, 645, 648, 693, 731, 732, 733, 734, 735, 800, 802, 803, 804, 849, 853, 913, 917, 918, 970, 976, 979, 980, 984, 987, 988, 989, 990, 991, 1058, 1072, 1075, 1076, 1160, 1175, 1177, 1194, 1227, 1228, 1245, 1246, 1278, 1279], [x + y, 85, 119, 153, 187, 204, 221, 238, 255, 273, 307, 392, 423, 425, 460, 477, 505, 563, 665, 716, 729, 767, 836, 870, 938, 1006, 1023, 1239]]) * x ^ 0 * y ^ 0
            end
        f26 = function (x, y)
                return dec(20, [[-2 * x * y, 343, 1003, 1309], [-2 * x ^ 2, 203, 903], [-2 * x * y - x ^ 2, 1823, 1828], [-1, 1, 85, 134, 402, 466, 676, 854, 944, 997, 1343, 1818], [-(x ^ -1) * y, 834, 1054, 1434], [-(x ^ -1) * y ^ 2, 822, 1042, 1422], [-x, 202, 321, 325, 326, 331, 385, 826, 831, 902, 910, 1017, 1057, 1103, 1104, 1317, 1319, 1437], [-y, 275, 342, 391, 431, 517, 803, 931, 1002, 1121, 1125, 1204, 1332, 1373, 1668, 1795, 1959], [-x * y, 324, 329, 340, 371, 384, 1000, 1043, 1044, 1049, 1183, 1184, 1423, 1424, 1429], [-x * y ^ 2, 1568, 1573, 1827], [-(x ^ 2), 187, 200, 707, 900, 1643, 1648, 1649, 1653, 1655, 1867], [-(y ^ 2), 1124, 1129, 1171, 1566, 1572], [-(x ^ 2) * y, 607], [-(x ^ 3), 683, 1927], [-(y ^ 3), 1169], [-(x ^ 3) * y, 767], [-x * y ^ 2 - 2 * x ^ 2 * y, 207], [-(x ^ -1) * y ^ 3 - y ^ 2, 690], [-(x ^ -1) * y ^ 4 - y ^ 3, 289, 827, 1893], [-x - y, 381, 426], [-x * y - x ^ 2, 361, 365, 623], [-x * y - y ^ 2, 389, 509, 1161, 1165], [-x * y ^ 2 - x ^ 2 * y, 364, 369, 1847], [-x * y ^ 2 - y ^ 3, 127, 847, 1563], [-x * y ^ 3 - y ^ 4, 1487], [-(x ^ 2) * y - x ^ 3, 247], [(-(x ^ -1) * y ^ 3 - x * y) - y ^ 2, 1040, 1420], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 1164], [(-x * y ^ 2 - x ^ 2 * y) + x ^ 3, 647, 907, 1407], [-x + y, 642, 1108, 1113, 1402], [-x * y + x ^ 2, 323, 1300, 1303, 1304, 1308, 1313, 1315, 1928, 1935], [-x * y + y ^ 2, 348, 349, 353, 355, 1008, 1009, 1013, 1015], [-x * y ^ 2 + x ^ 2 * y, 347, 768, 775, 1007, 1575], [-x * y ^ 2 + x ^ 3, 368, 1227], [-(x ^ 2) + y ^ 2, 640, 1223, 1228, 1233, 1235, 1400, 1640], [(-(x ^ -1) * y ^ 4 + x ^ 2 * y) - y ^ 3, 1047, 1427], [-(x ^ -1) * y ^ 3 + x * y + x ^ 2, 820], [1, 334, 702, 706, 710, 716, 1117, 1194, 1938], [x ^ -1, 550, 1114], [x ^ -1 * y, 149, 1102, 1753], [x, 42, 63, 168, 201, 211, 231, 252, 313, 484, 589, 621, 700, 703, 713, 715, 745, 799, 860, 901, 911, 968, 1026, 1073, 1122, 1126, 1130, 1136, 1178, 1237, 1239, 1242, 1280, 1389, 1446, 1468, 1494, 1515, 1557, 1599, 1600, 1621, 1684, 1705, 1763, 1909, 1930, 1936, 1997], [y, 210, 322, 336, 341, 345, 351, 357, 378, 382, 399, 568, 646, 650, 652, 694, 778, 821, 1001, 1005, 1011, 1046, 1051, 1052, 1109, 1115, 1182, 1199, 1221, 1305, 1406, 1410, 1412, 1426, 1431, 1432, 1536, 1578, 1642, 1726, 1821, 1831, 1852, 1894], [x * y, 20, 104, 286, 362, 440, 523, 733, 770, 776, 887, 909, 1082, 1149, 1177, 1267, 1970], [x ^ 2, 681, 686, 691, 1166, 1933], [y ^ 2, 320, 333, 335, 344, 682, 1004, 1180, 1820, 1829, 1833, 1835], [x ^ 2 * y, 773], [x ^ 3, 1160, 1647], [y ^ 3, 373, 375, 680], [x - y, 708, 1922, 1926], [x * y - x ^ 2, 208, 213, 215, 648, 653, 655, 908, 913, 915, 1408, 1413, 1415], [x * y - y ^ 2, 762, 766, 1562], [x * y ^ 2 - x ^ 3, 1127], [x ^ 2 - y ^ 2, 388, 393, 395, 1120, 1128, 1133, 1135, 1920, 1923], [x ^ 2 * y - x ^ 3, 1307], [x ^ 2 * y - y ^ 3, 760, 763, 1560], [x ^ 3 - y ^ 3, 1168, 1173, 1175], [(x ^ -1 * y ^ 2 - x) + y, 1100], [(x * y - x ^ 2) + y ^ 2, 643, 1220, 1224, 1403], [x + y, 21, 41, 105, 126, 189, 205, 315, 442, 526, 610, 631, 736, 757, 863, 905, 947, 1031, 1094, 1157, 1197, 1284, 1347, 1452, 1473, 1768, 1873, 1915, 1978, 1999], [x * y + x ^ 2, 40, 383, 1170, 1240, 1989], [x * y + y ^ 2, 123, 204, 249, 749, 843, 904, 1189, 1229, 1244, 1723, 1728, 1853, 1955], [x * y ^ 2 + x ^ 2 * y, 283, 387, 1080], [x * y ^ 2 + y ^ 3, 1084, 1483], [x * y ^ 3 + x ^ 2 * y ^ 2, 1567], [x * y ^ 3 + y ^ 4, 687, 1887], [x ^ 2 + y ^ 2, 1162], [x ^ 2 * y + x ^ 3, 363], [x ^ 2 * y ^ 2 + x ^ 3 * y, 367], [(x * y + x ^ 2) - y ^ 2, 1123], [(x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 4, 1167], [x ^ -1 * y ^ 3 + x ^ 2 + y ^ 2, 1107], [x * y + x ^ 2 + y ^ 2, 823], [x * y ^ 2 + x ^ 2 * y + x ^ 3, 1163], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 327, 1187], [2 * x * y + y ^ 2, 209]]) * x ^ 0 * y ^ 0
            end
        f27 = function (x, y, v)
                local s
                s = v * GetRoot(x * y)
                return dec(20, [[(-2 * s * x * y - s * x ^ 2) - s * y ^ 2, 1799], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 99, 1699], [(-2 * s * x * y + x * y ^ 2 + x ^ 2 * y) - y ^ 3, 436], [-1, 61, 145, 254, 394, 565, 647, 1151, 1220, 1302], [-(x ^ -1), 1109], [-(x ^ -1) * y, 229], [-s, 337, 470, 657, 716, 756, 1056, 1093, 1516, 1572, 1784, 1918, 1919, 1959], [-x, 690, 1939], [-y, 74, 154, 208, 392, 481, 523, 755, 777, 1087, 1176, 1640, 1701, 1743, 1826, 1868], [-s * x ^ -1, 124, 333, 669, 1570, 1930], [-s * x ^ -1 * y ^ 2, 535], [-s * x, 77, 157, 1819], [-s * y, 557, 617, 635, 695, 893, 956, 1016, 1496, 1898, 1899], [-x * y, 177, 217, 277, 619, 636, 677, 979, 1076, 1412], [-s * x * y, 37, 117, 597, 996, 1639, 1719], [-s * y ^ 2, 98, 898], [-x * y ^ 2, 899], [-(y ^ 2), 34, 78, 114, 138, 475, 878, 938], [-(y ^ 3), 38, 838, 1237, 1317], [-(y ^ 4), 18, 818, 1217, 1257], [-x - y, 1192], [-s * x ^ -1 * y ^ 2 - s * y, 139], [-s * x - s * y, 137, 237, 537, 577, 936, 976, 1679, 1739, 1759, 1839], [-s * x - y ^ 2, 536, 556, 1276, 1356, 1678, 1758], [-x * y - y ^ 2, 179, 219, 1779, 1879], [-s * x * y - s * x ^ 2, 197, 596], [-s * x * y - s * y ^ 2, 517, 916], [-s * x * y ^ 2 - s * y ^ 3, 415], [-s * y ^ 2 - x * y ^ 2, 496], [-x * y ^ 2 - x ^ 2 * y, 97], [-x * y ^ 2 - y ^ 3, 435], [(-s * x * y - s * x ^ 2) - x * y ^ 2, 1396, 1798], [(-s * x * y - s * x ^ 2) - y ^ 3, 813, 1236, 1316, 1638, 1718], [(-s * x * y ^ 2 - s * x ^ 2 * y) - y ^ 4, 1216, 1256, 1618, 1658], [(-s * y ^ 2 - x * y ^ 2) - x ^ 2 * y, 1296, 1698], [(-s * y ^ 2 - x * y ^ 2) - y ^ 3, 495], [(-s * x - s * y) + y ^ 2, 477, 876], [((-s * x - s * y) + x * y) - y ^ 2, 476], [(-s * x - s * y) + x * y + y ^ 2, 483], [(-s * x * y - s * y ^ 2) + x * y ^ 2 + y ^ 3, 437, 836], [((-s * x * y - s * x ^ 2) + s * y ^ 2 + x ^ 2 * y) - y ^ 3, 516], [-1 + s * y ^ -1, 864, 1914], [-s + y, 868], [-s * x + x * y, 423, 616], [-s * y + x * y, 883, 1895], [-s * y + y ^ 2, 539], [(-s * y ^ 2 + x * y ^ 2) - x ^ 3, 411, 451], [(-s * y ^ 3 + x * y ^ 3) - x ^ 3 * y, 15, 55, 1612, 1652], [(((-s * x + x * y) - s * x ^ 2 * y ^ -1) + x ^ 2) - y ^ 2, 576], [-s + x + y, 884, 1915], [-s * x + x * y + y ^ 2, 1772, 1872], [-s * y + x * y + y ^ 2, 75, 155, 431, 511], [-s * x * y + x * y ^ 2 + x ^ 2 * y, 1299], [-s * x * y ^ 2 + s * x ^ 3 + x * y ^ 3, 17, 57, 1619, 1659], [-s * y ^ 2 + x * y ^ 2 + y ^ 3, 35, 115, 1632, 1712], [1, 651, 1133, 1173, 1188], [s, 335, 655, 671, 691, 863, 933, 953, 1013, 1689, 1894, 1912, 1952], [x, 0, 42, 170, 174, 214, 259, 400, 424, 466, 778, 800, 821, 926, 954, 1263, 1284, 1347, 1389, 1494, 1515, 1602, 1625, 1667, 1731, 1773, 1957], [y, 255, 294, 315, 357, 378, 395, 402, 442, 571, 614, 659, 736, 757, 775, 799, 802, 825, 842, 905, 1010, 1033, 1052, 1156, 1178, 1266, 1326, 1351, 1368, 1431, 1452, 1473, 1517, 1536, 1557, 1576, 1599, 1852, 1938, 1978, 1999], [s * x ^ -1, 1113], [s * y ^ -1, 711, 751, 1053], [s * x ^ -1 * y, 534, 930], [s * x, 86, 276, 593, 1418, 1816], [s * y, 697, 1096, 1272, 1286, 1393, 1416, 1818, 1892], [x * y, 23, 107, 275, 508, 552, 675, 699, 1037, 1201, 1245, 1391, 1492], [s * x * y, 515], [x ^ 2, 191], [y ^ 2, 479, 559, 579, 932, 1226, 1288, 1311, 1352, 1497], [x ^ 2 * y, 995], [y ^ 3, 519, 1206, 1251], [s - x, 776], [s - y, 873], [s * x - x * y, 486, 1279], [s * y - x * y, 490], [s * y - y ^ 2, 615], [s * x * y - x * y ^ 2, 832], [s * x * y - y ^ 3, 1292], [s * y ^ 2 - x ^ 2 * y, 497, 896], [(x - y) - s * x * y ^ -1, 656], [(s * x - s * y) - x * y, 696], [(s * x - x * y) - x ^ 2, 676], [(s * y - x * y) - y ^ 2, 833, 888], [(s * x ^ 2 * y - s * y ^ 3) + y ^ 4, 455], [(s * y ^ 3 - x * y ^ 3) + x ^ 3 * y, 456], [s + s * x * y ^ -1, 973], [x + y, 63, 126, 147, 210, 231, 336, 399, 471, 484, 526, 531, 551, 568, 610, 631, 652, 673, 1073, 1094, 1115, 1157, 1199, 1221, 1305, 1578, 1642, 1705, 1747, 1789, 1831, 1873, 1936], [s * x + s * y, 491, 872, 913, 993], [x * y + x ^ 2, 591], [x * y + y ^ 2, 94, 135, 172, 212, 235, 952, 972, 1092, 1672, 1732, 1752, 1832], [s * x * y + s * y ^ 2, 499, 1692], [s * x * y + y ^ 3, 439], [x * y ^ 2 + x ^ 2 * y, 195, 1792], [x * y ^ 2 + y ^ 3, 92], [(s * x + s * y) - y ^ 2, 575], [(s * x ^ 2 * y + s * x ^ 3) - x ^ 2 * y ^ 2, 416], [((s * x * y + s * y ^ 2) - x * y ^ 2) - y ^ 3, 95, 1232], [((s * x * y ^ 2 + s * y ^ 3) - x * y ^ 3) - y ^ 4, 1212], [s * x ^ 2 * y + s * x ^ 3 + x * y ^ 3 + y ^ 4, 417, 816], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 892]]) * x ^ 0 * y ^ 0
            end
        f31 = function (x, y, v)
                local s
                s = v * GetRoot(x * y)
                return dec(20, [[(((((((((-2 * s * x ^ 3 * y ^ -3 - 3 * s * x ^ 4 * y ^ -4) - 4 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 3 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 284], [(((((((-2x - 3 * s * x ^ 2 * y ^ -2) - 4 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 145], [((((((-2s - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 65], [(((-2x + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 238], [((-2 * x ^ -1 * y ^ 2 + s) - y) + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y, 823], [-2 * x ^ -1 * y ^ 2 + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y, 85], [(((-2s + 2x) - 2 * s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2, 25], [(((-2s + 3x + y) - s * x ^ -1 * y) - 2 * s * x * y ^ -1) + s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1, 925], [-(x ^ -1) * y ^ 2, 556, 1753], [-s, 210, 336, 611, 1322], [-x, 1478], [-y, 278, 609, 672, 1029, 1092, 1510, 1596, 1849, 1930, 1995], [-s * x ^ -2 * y ^ 2, 479, 1281], [-s * x ^ -1 * y, 440, 1367, 1951], [-s * x * y ^ -1, 591], [-s * x ^ 2 * y ^ -2, 741, 1880, 1968], [-s * x ^ 3 * y ^ -3, 1122], [-(x ^ 2) * y ^ -1, 565, 1140, 1265], [-(x ^ 3) * y ^ -2, 1186], [-(x ^ 5) * y ^ -4, 1964], [((((((((((-s * x ^ 2 * y ^ -2 - 4 * s * x ^ 3 * y ^ -3) - 7 * s * x ^ 4 * y ^ -4) - 6 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 4 * x ^ 6 * y ^ -5) - 3 * x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 205, 325], [(((((((((-s * x ^ 2 * y ^ -2 - 4 * s * x ^ 3 * y ^ -3) - 6 * s * x ^ 4 * y ^ -4) - 4 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 305, 385], [((((((-s * x ^ 3 * y ^ -3 - 4 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 265], [(((((((((((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - 6 * s * x ^ 4 * y ^ -4) - 6 * s * x ^ 5 * y ^ -5) - 3 * s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - 4 * x ^ 5 * y ^ -4) - 3 * x ^ 6 * y ^ -5) - 2 * x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 185, 245], [(((((((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) - x ^ 2 * y ^ -1) - x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 224], [((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 985], [(((((((((((-s - 3x) - y) - 4 * s * x * y ^ -1) - 7 * s * x ^ 2 * y ^ -2) - 6 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - 4 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 186, 246], [(((((((((-s - 3x) - y) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 181, 241], [((((((((-s - 3x) - y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 981, 1041], [(((((((-(x ^ -1) * y ^ 2 - 3s) - x) - y) - s * x ^ -1 * y) - 2 * s * x * y ^ -1) - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 146], [((((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5, 1045], [(((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1185], [((((((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 646], [(((((((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 282], [(((((((((((-s - 2x) - y) - 4 * s * x * y ^ -1) - 5 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - 3 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 6 * x ^ 4 * y ^ -3) - 4 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 206], [(((((((((-s - 2x) - y) - 4 * s * x * y ^ -1) - 5 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 306, 386], [(((((((((-s - 2x) - y) - 4 * s * x * y ^ -1) - 5 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 3 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 326], [(((((((((-s - 2x) - y) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 201], [((((((((-s - 2x) - y) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 321], [((((((((-s - 2x) - y) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 266], [(((((((-s - 2x) - y) - 3 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 301, 381], [((((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1001], [((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 1121], [((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1101, 1181], [(((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 261], [((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 924], [(((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 988, 1048], [(((((((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 586], [((((((-(x ^ -1) * y ^ 2 - 2s) - x) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 141], [(((((-(x ^ -1) * y ^ 2 - 2s) - x) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 122], [((((((-s - 2x) - y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1061], [((((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 666], [((((((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 682], [((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1105], [((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1025], [-(x ^ -2) * y ^ 3 - s * x ^ -1 * y, 908], [-s - x, 337], [-s - y, 211], [-s - s * x * y ^ -1, 234, 442, 1033], [-x - x ^ 2 * y ^ -1, 233], [-y - s * x ^ -2 * y ^ 2, 520, 927], [-y - x ^ 2 * y ^ -1, 8, 298, 426], [-s * x * y ^ -1 - s * x ^ 2 * y ^ -2, 347, 993, 1038, 1108, 1188], [-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3, 998], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 320], [((((((((((-s - x) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 4 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 183, 243], [(((((((-(x ^ -1) * y ^ 2 - s) - 3x) - 3y) - s * x ^ -2 * y ^ 2) - s * x ^ -1 * y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 66], [(((((((((-s - x) - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 4 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 203, 323], [((((((((-s - x) - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 303, 383], [(((((((-s - x) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 263], [((((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 726], [(((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 786], [(((((-x - s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 222], [((((((-(x ^ -1) * y ^ 2 - s) - 2x) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 63], [(-s - x) - s * x ^ -1 * y, 104], [(-s - x) - s * x * y ^ -1, 359], [(-s - s * x * y ^ -1) - x ^ 3 * y ^ -2, 1168], [(-x - y) - x ^ 3 * y ^ -2, 258], [(-x - s * x * y ^ -1) - x ^ 2 * y ^ -1, 235, 1035], [(-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 1606], [(-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 4 * y ^ -3, 680, 1087], [(-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) - s * x ^ 5 * y ^ -5, 188], [(-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 995], [(-s * x ^ 3 * y ^ -3 - s * x ^ 4 * y ^ -4) - x ^ 4 * y ^ -3, 1882], [(-s * x ^ 3 * y ^ -3 - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 402], [(-s * x ^ 4 * y ^ -4 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 248, 364], [(((((((-s - x) - y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 124], [((((((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 606], [(((((-(x ^ -1) * y ^ 2 - s) - x) - 2y) - s * x ^ -2 * y ^ 2) - s * x ^ -1 * y) - s * x * y ^ -1, 61], [((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1008, 1128], [(((((((-s - x) - y) - s * x ^ -1 * y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 143], [(((-s - x) - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 466], [(((-x - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 742], [(((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 706], [((((((-s * x ^ 4 * y ^ -4 - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 1084], [((((-(x ^ -1) * y ^ 2 - s) - x) - y) - s * x ^ -2 * y ^ 2) - s * x ^ -1 * y, 861], [((((-(x ^ -1) * y ^ 2 - s) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2, 941], [((((-s - x) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 522], [((((-s - x) - y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 964], [((((-s - x) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 546, 844], [((((-x - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 2], [((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 622], [((((-s * x ^ 3 * y ^ -3 - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 804], [((((-s * x ^ 5 * y ^ -5 - s * x ^ 6 * y ^ -6) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1024], [((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1144], [((-(x ^ -2) * y ^ 3 - x ^ -1 * y ^ 2) - y) + 2 * s * x ^ -2 * y ^ 2 + s * x ^ -1 * y, 885], [(-(x ^ -1) * y ^ 2 - x) + s * x * y ^ -1, 23], [((-(x ^ -1) * y ^ 2 - s) + x + s * x ^ -2 * y ^ 2) - s * x * y ^ -1, 863, 905], [((((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1005], [(((-s - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 342], [((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 365], [((((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1125], [-(x ^ -2) * y ^ 3 + s * x ^ -3 * y ^ 3, 888], [-(x ^ -1) * y ^ 2 + s * x ^ -2 * y ^ 2, 827], [(-s + x) - s * x * y ^ -1, 42], [(-y + s * x ^ -1 * y) - x ^ 2 * y ^ -1, 807], [(((((-s * x * y ^ -1 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 344], [((-s + x) - s * x * y ^ -1) - x ^ 3 * y ^ -2, 620, 1027], [-(x ^ -1) * y ^ 2 + x + s * x ^ -1 * y, 105], [-(x ^ -1) * y ^ 2 + y + s * x ^ -2 * y ^ 2, 420], [-x + s * x * y ^ -1 + s * x ^ 3 * y ^ -3, 808], [(((-s + x + y) - 2 * s * x * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1063], [(-s + x + y) - s * x ^ -1 * y, 843], [((((-s + x + y) - s * x * y ^ -1) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1103], [((((((-s + x + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1003], [(((((-s + x + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1183], [((((((-s + x + y) - s * x * y ^ -1) + 3 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1123], [-s * x ^ 2 * y ^ -2 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1028], [((-s + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 165], [((-s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 5], [-s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 348], [(((-s + 2x) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1023], [(((-s + 2x + y) - 3 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1, 983], [(((((-s + 2x + y) - 3 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 1043], [-s * x ^ 2 * y ^ -2 + 2 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 345], [x ^ -2 * y ^ 3, 939], [x ^ -1 * y ^ 2, 508, 817, 1303], [s, 148, 841, 1246], [x, 0, 147, 189, 252, 273, 294, 315, 399, 484, 590, 631, 653, 674, 694, 715, 778, 991, 1010, 1054, 1073, 1093, 1115, 1178, 1200, 1389, 1415, 1431, 1452, 1494, 1539, 1557, 1621, 1642, 1663, 1684, 1705, 1726, 1792, 1816, 1919], [y, 168, 378, 1573], [s * x ^ -3 * y ^ 3, 856], [s * x ^ -2 * y ^ 2, 437, 1614, 1778], [s * x * y ^ -1, 1348, 1741, 1837], [s * x ^ 2 * y ^ -2, 783, 1224, 1764], [s * x ^ 3 * y ^ -3, 1861], [x ^ 2 * y ^ -1, 654, 727, 1053, 1098, 1867], [x ^ 3 * y ^ -2, 1058], [(((x - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1, 44], [((((s - 2x) - y) + s * x * y ^ -1) - x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 198], [((((x ^ -1 * y ^ 2 - 2x) - s * x ^ -1 * y) + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 943], [x - x ^ 2 * y ^ -1, 400], [(x ^ -1 * y ^ 2 - s * x ^ -2 * y ^ 2) - 2 * s * x ^ -1 * y, 847], [((((x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1165], [(s - x) - y, 1147], [(s - y) - s * x ^ -2 * y ^ 2, 21], [((s - x) - y) - s * x ^ 2 * y ^ -2, 740], [(((((((s * x * y ^ -1 - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 4], [((s - x) - y) + x ^ 2 * y ^ -1, 318], [((s - x) - y) + s * x * y ^ -1 + x ^ 3 * y ^ -2, 845], [((s - x) - y) + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 803], [((s - x) - y) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 218], [(((s - x) + y + 3 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 24], [(((x ^ -1 * y ^ 2 - s) + 2y) - s * x ^ -1 * y) + s * x * y ^ -1, 928], [(s - x) + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6], [(((y - s * x ^ -1 * y) + 2 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 965], [x ^ -1 * y ^ 2 + s, 540], [s + x, 230], [s + y, 356], [s + s * x * y ^ -1, 214], [x + y, 41, 421, 463, 505, 547, 610, 673, 800, 842, 926, 1031, 1094, 1284, 1305, 1326, 1368, 1515, 1578, 1599, 1600, 1747, 1768, 1852, 1936, 1957, 1999], [x + s * x ^ -1 * y, 848], [x + s * x * y ^ -1, 446], [x + x ^ 2 * y ^ -1, 213, 614], [y + s * x ^ -2 * y ^ 2, 460, 867], [s * x ^ -1 * y + s * x * y ^ -1, 422], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 340], [s * x ^ 3 * y ^ -3 + x ^ 4 * y ^ -3, 406], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 327, 594], [(((s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 328], [(x ^ -1 * y ^ 2 + y) - s * x ^ -1 * y, 84], [(x + y) - s * x ^ -2 * y ^ 2, 821, 884], [(s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 1148], [((s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 388], [((((x + y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1, 1141], [(((x ^ -1 * y ^ 2 + y) - s * x ^ -2 * y ^ 2) - s * x ^ -1 * y) + s * x * y ^ -1, 923], [(((s + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 226], [((x ^ -1 * y ^ 2 + s) - x) + s * x * y ^ -1, 22], [x ^ -1 * y ^ 2 + s + s * x * y ^ -1, 947, 968], [s + x + y, 231, 357, 1030], [s + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 164], [x + y + s * x ^ 2 * y ^ -2, 660, 1067], [x + s * x * y ^ -1 + x ^ 2 * y ^ -1, 215, 339, 990, 1602], [s * x ^ 4 * y ^ -4 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1886], [s * x ^ 5 * y ^ -5 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1088], [s + x + s * x ^ -1 * y + x ^ 2 * y ^ -1, 43], [x + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 700, 780, 1107, 1187], [s * x * y ^ -1 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 3 * y ^ -2, 746], [s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 5 * y ^ -4, 626], [((s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 805], [s + x + y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 526], [x ^ -1 * y ^ 2 + s + x + y + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y, 921], [x ^ -1 * y ^ 2 + s + x + y + s * x ^ -1 * y + s * x * y ^ -1, 904], [s + x + y + s * x ^ -1 * y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 462], [s + x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 801], [s + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1], [s + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1021], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 3], [s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 6 * y ^ -5, 686], [s + x + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 542], [s + s * x * y ^ -1 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 221], [x + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 223], [x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 662], [x + y + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2, 720], [x + y + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 341, 600, 1007, 1127], [s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1083], [s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1085], [x ^ -1 * y ^ 2 + s + x + 2y + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y + s * x * y ^ -1, 121], [s + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 343], [s + x + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 262], [x ^ -1 * y ^ 2 + s + 2x + 2y + s * x ^ -1 * y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 123], [x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 702, 782], [s + x + 2 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 302, 382], [x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 582, 642], [s + x + 2 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 322], [s + x + 2 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 202], [(((x + y + 2 * s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 346], [x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 722], [x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 602], [s + x + 3 * s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 182, 242], [x ^ -1 * y ^ 2 + s + 3x + 4y + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 126], [s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1104], [x ^ -1 * y ^ 2 + 2s + x + y + s * x ^ -1 * y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 62], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1081, 1164], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 281], [s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 283], [s + 2x + y + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 125], [s + 2x + y + s * x ^ -1 * y + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 142], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4, 264], [s + 2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 144], [s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1004, 1124], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 286], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 4 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 384], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 5 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5, 304], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 5 * s * x ^ 4 * y ^ -4 + 6 * s * x ^ 5 * y ^ -5 + 4 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 324], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 6 * s * x ^ 4 * y ^ -4 + 6 * s * x ^ 5 * y ^ -5 + 4 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 3 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 204], [s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1184], [s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 984, 1044], [s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 4 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1 + 5 * x ^ 3 * y ^ -2 + 6 * x ^ 4 * y ^ -3 + 5 * x ^ 5 * y ^ -4 + 3 * x ^ 6 * y ^ -5, 244], [(s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 5 * s * x ^ 4 * y ^ -4 + 4 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1 + 5 * x ^ 3 * y ^ -2 + 6 * x ^ 4 * y ^ -3 + 4 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 184], [(((2s - 2x) - 2y) - s * x ^ -2 * y ^ 2) + s * x * y ^ -1, 26], [((((2s - 2x) - y) + 3 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 1143], [(2s - 2x) + 3 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 45], [2x + y + s * x ^ -1 * y + x ^ 2 * y ^ -1, 46], [2x + y + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 580, 640, 987, 1047], [2s + x + y + 4 * s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 64], [((((2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 6 * y ^ -5, 1145], [((2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4) - x ^ 3 * y ^ -2) + 2 * x ^ 5 * y ^ -4 + 3 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 225], [2 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + s * x ^ 8 * y ^ -8 + x ^ 5 * y ^ -4 + 4 * x ^ 6 * y ^ -5 + 2 * x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7, 285]]) * x ^ 0 * y ^ 0
            end
        f37 = function (x, y)
                return dec(30, [[(((-4x - y) - 6 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 2879], [((-3x - 6 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 2939], [((-3 * x ^ 2 * y ^ -1 - 6 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4, 2789], [((-3 * x ^ 2 * y ^ -1 - 4 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3629], [(-3x - 2y) - 2 * x ^ 2 * y ^ -1, 2961], [(((-3x - y) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 190, 203, 472], [((-3x - y) - 3 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 2909, 3179], [(((-3x - y) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3, 209, 2007], [(-3x - y) - x ^ 2 * y ^ -1, 2901], [((-2 * x ^ 2 * y ^ -1 - 4 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 22], [(-2x - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 2871, 2931], [(-2 * x ^ 2 * y ^ -1 - 3 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 2781], [(-2 * x ^ 3 * y ^ -2 - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 170], [-2x - 2 * x ^ 2 * y ^ -1, 2365, 3256], [(((-2x - y) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 250, 263], [(-2x - y) - x ^ 2 * y ^ -1, 352, 412, 428, 430, 443, 1048, 3601, 3721], [((-2x - y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 179, 239, 1977, 2037], [((-2x - y) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 85, 520, 2788], [(-2x - y) + x ^ 3 * y ^ -2, 1372, 3177], [-(x ^ -1) * y ^ 2, 2796], [-x, 107, 169, 337, 645, 685, 717, 789, 1221, 1246, 1252, 1314, 1402, 1522, 1531, 1552, 1709, 1850, 2150, 2299, 2330, 2455, 2484, 2516, 2698, 2820, 3054, 3057, 3207, 3223, 3327, 3346, 3357, 3388, 3469, 3602, 3653, 3922, 3926, 3953, 4019, 4133], [-y, 445, 449, 631, 719, 745, 839, 852, 1014, 1064, 1112, 1287, 1344, 1353, 1478, 1524, 1612, 1794, 1847, 1915, 1952, 2047, 2115, 2169, 2231, 2247, 2485, 2517, 2545, 2743, 2769, 2806, 2862, 3141, 3142, 3148, 3329, 3376, 3417, 3436, 3448, 3719, 3858, 3874, 3946, 4006, 4049, 4215, 4229, 4261], [-(x ^ 2) * y ^ -1, 135, 1021, 1414, 3509, 4004, 4012, 4072], [-(x ^ 3) * y ^ -2, 1411, 3856], [-(x ^ 4) * y ^ -3, 3766, 3826], [-(x ^ 5) * y ^ -4, 3676], [(((-(x ^ -1) * y ^ 2 - 6x) - 4y) - 5 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 2969], [((-(x ^ 2) * y ^ -1 - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4077], [(-x - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 2278], [((-x - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 3621], [((-x - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 260], [(((-x - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 160, 173, 220, 233], [(((-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 70, 83], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 145, 322, 2128, 2848, 3171, 4071], [(-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1378, 1438, 3927], [((-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 89, 1887], [-(x ^ -1) * y ^ 2 - y, 588, 1158, 1162, 1488, 2803, 2967, 4031], [-x - y, 100, 113, 226, 294, 345, 431, 495, 502, 578, 585, 622, 652, 1069, 1072, 1231, 1338, 1381, 1471, 2090, 2121, 2180, 2271, 2609, 2819, 2877, 3078, 3149, 3419, 3871, 3893, 3901, 3983], [-x - x ^ 2 * y ^ -1, 40, 50, 53, 144, 295, 346, 477, 565, 659, 804, 1000, 1010, 1013, 1045, 1312, 1328, 1371, 1735, 1738, 1798, 2215, 2457, 2459, 2519, 2707, 2977, 2988, 2998, 3021, 3029, 3068, 3106, 3117, 3268, 3622, 3742, 3781, 3802, 3861, 3921, 4001, 4051, 4076], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 205, 323, 1228, 2827, 2908, 3867, 3869], [-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3, 470, 1224, 1435], [(-(x ^ -1) * y ^ 2 - x) - 2y, 438], [(((-x - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4079], [((-(x ^ -1) * y ^ 2 - x) - 2y) - x ^ 2 * y ^ -1, 269, 2067], [((-x - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1374], [(-x - y) - x ^ 2 * y ^ -1, 110, 405, 1291], [(-x - y) - x ^ 4 * y ^ -3, 922, 2727], [(-x - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 555, 1441], [(-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3929], [((-x - y) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3777], [((((-x - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 15, 901], [((-x - y) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 530, 1945, 2836], [(-x - y) + x ^ 3 * y ^ -2, 805, 2607, 3508], [(((-x - y) + x ^ 2 * y ^ -1) - 3 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4, 1825, 2716], [(-x - y) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 175, 235, 2878, 2938], [(-x - y) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 533], [(-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3627], [(((-x - y) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 479], [-x + x ^ 3 * y ^ -2, 982, 1464, 2787, 3741, 4131], [-y + x ^ 2 * y ^ -1, 1132, 2125, 2937, 3016, 3891], [-(x ^ 2) * y ^ -1 + x ^ 4 * y ^ -3, 149, 1947], [-y + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 130, 1351], [-(x ^ 2) * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4139], [x ^ -1 * y ^ 2, 1037, 4033], [x, 45, 51, 55, 304, 355, 388, 535, 625, 680, 740, 770, 865, 869, 899, 931, 967, 1005, 1159, 1325, 1582, 1644, 1672, 1674, 1722, 1732, 1734, 1764, 1865, 2018, 2082, 2144, 2260, 2311, 2480, 2510, 2575, 2637, 2667, 2697, 2758, 2972, 3058, 3065, 3103, 3163, 3238, 3328, 3374, 3387, 3466, 3477, 3537, 3568, 3599, 3652, 3729, 3981, 4070, 4096, 4148, 4186, 4251, 4283, 4313, 4349, 4377, 4437, 4469, 4499], [y, 0, 62, 105, 186, 221, 248, 296, 359, 403, 434, 496, 509, 513, 558, 575, 599, 744, 833, 900, 991, 1086, 1179, 1303, 1391, 1458, 1462, 1520, 1540, 1613, 1675, 1768, 1796, 1800, 1893, 1924, 1986, 2157, 2203, 2240, 2307, 2358, 2386, 2397, 2420, 2451, 2540, 2542, 2600, 2603, 2669, 2704, 2731, 2917, 2948, 3010, 3013, 3051, 3165, 3201, 3227, 3258, 3267, 3291, 3295, 3320, 3413, 3431, 3506, 3660, 3693, 3755, 3786, 3817, 3941, 3972, 4021, 4036, 4043, 4127, 4189, 4201, 4223, 4341, 4343, 4344, 4371, 4375, 4381, 4390, 4403, 4468], [x ^ 2 * y ^ -1, 315, 380, 389, 650, 1201, 1222, 1282, 1432, 2185, 2187, 2883, 3027, 3076, 3087, 3237, 4111, 4132], [x ^ 3 * y ^ -2, 290, 299, 809, 2095, 2097, 2986, 4156], [x ^ 6 * y ^ -5, 3616], [((x - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 230], [((x - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) + x ^ 6 * y ^ -5, 924], [x - x ^ 3 * y ^ -2, 320, 2335, 3226], [x ^ 2 * y ^ -1 - x ^ 4 * y ^ -3, 325, 329, 3028], [((x - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 200], [(y - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 262], [x ^ -1 * y ^ 2 + y, 168, 228, 1068, 2868], [x + y, 31, 93, 158, 218, 341, 348, 427, 435, 511, 589, 713, 742, 772, 806, 868, 993, 1029, 1058, 1117, 1241, 1285, 1288, 1321, 1334, 1370, 1373, 1427, 1489, 1494, 1551, 1737, 1799, 1831, 1855, 1880, 1955, 1970, 2048, 2110, 2141, 2172, 2296, 2482, 2513, 2699, 2713, 2746, 2767, 2778, 2824, 2833, 2858, 2886, 2893, 2979, 2999, 3059, 3072, 3111, 3144, 3209, 3299, 3351, 3359, 3371, 3382, 3444, 3475, 3631, 3661, 3662, 3683, 3691, 3712, 3773, 3879, 4003, 4158, 4197, 4210, 4220, 4379, 4401, 4406, 4467], [x + x ^ 2 * y ^ -1, 59, 91, 115, 265, 338, 382, 454, 500, 531, 640, 653, 1339, 1708, 1851, 1857, 2129, 2331, 2458, 2608, 2708, 2818, 2841, 2968, 4161], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 111, 117, 143, 324, 410, 539, 562, 1419, 1558, 2275, 2337, 2518, 2828, 3166, 3231, 4137, 4167, 4169], [x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 3807], [(x + y) - x ^ 3 * y ^ -2, 525], [(((x + y) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 460, 473], [((x + y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 310, 3771], [((x + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3837], [((x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 25, 2728, 3687], [(((x + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) + 2 * x ^ 5 * y ^ -4 + 3 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 20], [x + y + x ^ 2 * y ^ -1, 419, 442, 569, 2217, 2367], [x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 465, 1192, 1434, 1704, 2997, 4409], [((x + y + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3779], [x + y + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 255, 1141], [x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 140, 165, 225, 1051, 1111], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 75, 961], [x + y + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 1194], [x + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 29, 1827], [x + 2 * x ^ 2 * y ^ -1, 1284], [((x + 2y) - 3 * x ^ 2 * y ^ -1) + 5 * x ^ 4 * y ^ -3 + 5 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5, 2729], [((x + 2y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 3831], [x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1859, 2279, 2339, 4407], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 119, 474, 3239], [(((x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 80], [((x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 475, 3178], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 3899], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 3749], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 550, 563], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 10, 23], [x + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 3747], [x + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1102, 2907], [x + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 1975, 2866], [x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1885, 2776], [(x + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2) - x ^ 5 * y ^ -4, 984], [(2y - 2 * x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4, 2721], [2 * x ^ 2 * y ^ -1 - x ^ 4 * y ^ -3, 1074], [2x + y, 682], [((2x + y) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 3796], [(2x + y) - x ^ 3 * y ^ -2, 532, 1164], [2x + y + x ^ 2 * y ^ -1, 340, 353, 436, 490, 503, 580, 590, 593, 802, 3119], [((2x + y + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 172], [2x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1042, 2847], [2x + y + 2 * x ^ 2 * y ^ -1, 3987, 3989], [(2x + y + 2 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 2127], [2x + y + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 195, 292, 400, 413, 1081], [2x + y + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 3897], [2x + 2 * x ^ 2 * y ^ -1, 3261], [2x + 2 * x ^ 2 * y ^ -1 + x ^ 4 * y ^ -3, 1104, 3809], [2x + 2y + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1044], [2x + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 2005, 2896], [2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 560], [2x + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 2035, 2926], [((2x + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 2277], [((3x + y + 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3681], [(3x + y + 3 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 1134], [3x + y + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 2849], [3x + y + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 3269], [((3x + y + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 82], [((3x + 2y + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 232, 3839], [3x + 2y + 2 * x ^ 2 * y ^ -1, 2065, 2956], [((3x + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 3689], [4x + y + 4 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 202], [4x + 2y + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 142]]) * x ^ 0 * y ^ 0
            end
        f46 = function (x, y)
                return dec(40, [[(((-3 * x * y ^ 5 - 3 * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) + x ^ 5 * y) - y ^ 6, 1323], [((-3 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 1363], [-3 * x ^ 4 * y ^ 2 - 2 * x ^ 5 * y, 4269], [((-3 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 6907], [-2 * x * y ^ 3, 2905], [(-2 * x ^ 3 * y ^ 3 - 5 * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y, 4789], [(((-2 * x ^ 2 * y ^ 4 - 4 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) - 3 * x ^ 5 * y) - x ^ 6, 323], [(-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 581], [(-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 2025], [((-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + x ^ 4 * y + 2 * x ^ 5, 522], [((-2 * x * y ^ 5 - 2 * x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + x ^ 6) - y ^ 6, 1203], [-2 * x * y - y ^ 2, 7227], [-2 * x * y ^ 2 - x ^ 2 * y, 482], [-2 * x ^ 2 * y ^ 2 - x ^ 3 * y, 6701, 6987], [(-2 * x * y - x ^ 2) - y ^ 2, 642, 1083, 1122, 3229], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 580, 4349], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 1962], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y, 3502, 5101], [((-2 * x * y ^ 8 - x ^ 2 * y ^ 7) + x ^ 5 * y ^ 4) - y ^ 9, 3062], [(-2 * x * y ^ 3 + x ^ 3 * y) - y ^ 4, 1282], [-1, 64, 391, 610, 1022, 1319, 1782, 1968, 2031, 2033, 2232, 2348, 2464, 2696, 2762, 3211, 3228, 3322, 3430, 3608, 3639, 3857, 3969, 4012, 4513, 4756, 4961, 5207, 5455, 5459, 5489, 5734, 6790, 6885, 6926, 6967, 7219, 7330, 7416, 7434, 7537, 7578], [-(y ^ -3), 5246], [-(x ^ -2), 1878, 3517, 5157, 5959], [-(y ^ -2), 4053, 4066, 5693, 5706], [-(x ^ -2) * y ^ -1, 1837], [-(x ^ -1), 6554], [-(y ^ -1), 1516, 1617], [-(x ^ -1) * y ^ 2, 6026], [-x, 546, 1004, 1591, 3013, 3225, 3559, 3746, 3975, 4041, 4298, 4331, 4582, 5744, 6181, 6946, 7990], [-y, 60, 149, 392, 651, 860, 1163, 1660, 2032, 2375, 2460, 2675, 2976, 3385, 3874, 6386, 6480, 7291, 7833], [-x * y ^ -1, 1616], [-x * y, 42, 444, 621, 644, 780, 802, 842, 884, 941, 1378, 2065, 2505, 2987, 3801, 4865, 5224, 5384, 5594, 5665, 6104, 6467, 7267, 7547, 7672], [-x * y ^ 2, 1643, 1976, 2180, 2225, 2403, 2443, 3622, 4029, 4535, 5104, 5221, 5425, 5427, 6981], [-x * y ^ 3, 2083, 3709, 6107, 6154, 7674], [-x * y ^ 4, 1338], [-(x ^ 2), 781, 2220, 3575, 3615, 3902, 3961, 4324, 5501, 6666, 7969], [-(y ^ 2), 247, 534, 620, 714, 940, 2376, 4497, 6099], [-(x ^ 2) * y ^ -1, 5350], [-(x ^ 2) * y, 600, 1252, 2161, 2307, 3497, 3818, 3827, 5099, 5194, 5234, 5282, 5344, 5585, 5603, 6064, 7043], [-(x ^ 2) * y ^ 2, 1298, 5000, 7620], [-(x ^ 2) * y ^ 3, 274, 1244, 1550, 1559, 1860, 1945, 4625, 7683, 7951], [-(x ^ 3), 680, 760, 1212, 1343, 1423, 3535, 3898, 3907, 3987, 6739, 7735, 7815], [-(y ^ 3), 245, 394, 532, 1300, 2663], [-(x ^ 3) * y, 301, 3481, 5154, 7621, 7980], [-(x ^ 3) * y ^ 2, 282, 4755, 5105, 5107], [-(x ^ 4), 3028, 3618, 3721, 4251, 4268, 4726, 5027, 6954, 7981], [-(y ^ 4), 2936], [-(x ^ 4) * y, 1485, 2138, 3133, 3720, 5147, 5345, 7467], [-(x ^ 4) * y ^ 2, 1525, 4675], [-(x ^ 4) * y ^ 4, 7954], [-(x ^ 5), 2842, 4646, 4746], [-(x ^ 5) * y, 549, 2949, 4697, 6299, 7443], [-(x ^ 5) * y ^ 2, 1445], [-(x ^ 5) * y ^ 3, 3140, 7941], [-(x ^ 6), 4666], [(-(x ^ 2) * y ^ 4 - 4 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2, 4429], [-(x ^ 2) * y ^ 3 - 3 * x ^ 3 * y ^ 2, 1242], [((-(x ^ 4) * y ^ 5 - 3 * x ^ 5 * y ^ 4) - 3 * x ^ 6 * y ^ 3) - 2 * x ^ 7 * y ^ 2, 1509], [((-(x ^ 3) * y ^ 4 - 3 * x ^ 4 * y ^ 3) - 3 * x ^ 5 * y ^ 2) - x ^ 6 * y, 7914], [((-x * y ^ 5 - 2 * x ^ 4 * y ^ 2) - 3 * x ^ 5 * y) - 2 * x ^ 6, 3458], [((-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 5, 3538], [((-x * y ^ 5 - 2 * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y) - x ^ 6, 240, 3467], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + 2 * x ^ 6, 1043], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 3422, 3761, 4164, 5021], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 364, 3542, 5141, 6310, 6700, 6714, 6754], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 563, 3520], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 763, 3404], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 3162], [(-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 309, 349, 6304], [(-(x ^ 3) * y ^ 2 - 2 * x ^ 4 * y) - x ^ 5, 403], [(-(x ^ 3) * y ^ 5 - 2 * x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 3098, 4680], [(((-(x ^ 2) * y ^ 6 - 2 * x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3) + x ^ 6 * y ^ 2, 6264], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + x ^ 6, 6270], [((-x * y ^ 9 - 2 * x ^ 2 * y ^ 8) - x ^ 3 * y ^ 7) + x ^ 6 * y ^ 4, 3044], [((-(x ^ 3) * y ^ 6 - 2 * x ^ 4 * y ^ 5) - x ^ 5 * y ^ 4) + x ^ 8 * y, 7874], [((-(x ^ 3) * y ^ 7 - 2 * x ^ 4 * y ^ 6) - x ^ 5 * y ^ 5) + x ^ 8 * y ^ 2, 3058, 4640], [((-(x ^ 4) * y ^ 7 - 2 * x ^ 5 * y ^ 6) - x ^ 6 * y ^ 5) + x ^ 9 * y ^ 2, 1469], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + x ^ 6, 244], [((-x * y ^ 7 - 2 * x ^ 2 * y ^ 6) - x ^ 3 * y ^ 5) + 2 * x ^ 4 * y ^ 4 + 4 * x ^ 5 * y ^ 3 + 2 * x ^ 6 * y ^ 2, 4684], [(((-x * y ^ 9 - 2 * x ^ 2 * y ^ 8) - x ^ 3 * y ^ 7) + 2 * x ^ 4 * y ^ 6 + 5 * x ^ 5 * y ^ 5 + 4 * x ^ 6 * y ^ 4 + 2 * x ^ 7 * y ^ 3) - 2 * x ^ 9 * y, 4644], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + 3 * x ^ 4 * y ^ 2 + 4 * x ^ 5 * y + x ^ 6, 1563], [(-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) + x ^ 5 * y, 1403], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + x ^ 4 * y + x ^ 5, 524], [(-(x ^ 2) * y ^ 6 - 2 * x ^ 3 * y ^ 5) + 3 * x ^ 4 * y ^ 4 + 5 * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 1482], [((-(x ^ 2) * y ^ 8 - 2 * x ^ 3 * y ^ 7) + 3 * x ^ 4 * y ^ 6 + 5 * x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4 + x ^ 7 * y ^ 3) - 2 * x ^ 9 * y, 1442], [-1 - x ^ -1 * y, 1830, 6514], [-(y ^ -2) - x * y ^ -3, 5266], [-(x ^ -1) * y ^ 2 - y, 3510, 5150], [-(x ^ -1) * y ^ 3 - y ^ 2, 1870, 1871], [-x - y, 61, 747, 983, 1080, 1661, 2322, 6899, 7375], [-x * y - x ^ 2, 223, 266, 1124, 1297, 1299, 1603, 2184, 2265, 2465, 2683, 4121, 4182, 4578, 5258, 5781, 6403, 6615], [-x * y - y ^ 2, 83, 109, 1387, 3265, 7067], [-x * y ^ 2 - x ^ 2 * y, 627, 684, 964, 2545, 2749, 2935, 2939, 3869, 4069, 5144, 5709, 5745, 6620, 6834, 6980, 7347], [-x * y ^ 2 - x ^ 3, 1301, 4481], [-x * y ^ 2 - y ^ 3, 1988], [-x * y ^ 3 - x ^ 2 * y ^ 2, 603, 923, 3600], [-x * y ^ 3 - x ^ 3 * y, 340, 6105], [-x * y ^ 4 - x ^ 2 * y ^ 3, 1938, 4759, 6350], [-x * y ^ 4 - x ^ 3 * y ^ 2, 2665, 3185], [-x * y ^ 4 - x ^ 5, 320, 3547], [-x * y ^ 4 - y ^ 5, 1347], [-x * y ^ 6 - y ^ 7, 3102], [-x * y ^ 7 - x ^ 2 * y ^ 6, 3084], [-x * y ^ 7 - y ^ 8, 3142], [-x * y ^ 8 - x ^ 2 * y ^ 7, 3124], [-(x ^ 2) - x ^ 3 * y ^ -1, 5070], [-(x ^ 2) * y - x ^ 3, 380, 1820, 2963, 3582, 5181, 6621], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 427, 1268, 1987, 2828, 3110, 4149, 4411, 4428, 4710, 5064, 5385], [-(x ^ 2) * y ^ 2 - x ^ 4, 341, 3521], [-(x ^ 2) * y ^ 2 - y ^ 4, 4462, 6061], [-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2, 429, 1551, 2163, 2802, 3150, 3151, 3462, 3789, 5061, 7950], [-(x ^ 2) * y ^ 3 - x ^ 4 * y, 5145], [-(x ^ 2) * y ^ 3 - y ^ 5, 2825], [-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3, 1269, 4679, 5058, 5349], [-(x ^ 2) * y ^ 5 - x ^ 3 * y ^ 4, 6344], [-(x ^ 3) * y - x ^ 4, 2203, 2668, 3188, 4771, 4788], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 2642, 7987], [-(x ^ 3) * y ^ 3 - x ^ 4 * y ^ 2, 2829, 7603], [-(x ^ 3) * y ^ 6 - x ^ 4 * y ^ 5, 3138, 4720], [-(x ^ 4) * y - x ^ 5, 4524, 6674], [-(x ^ 4) * y ^ 2 - x ^ 5 * y, 1858, 2669, 3440, 7963], [-(x ^ 4) * y ^ 3 - x ^ 5 * y ^ 2, 7900], [-(x ^ 4) * y ^ 4 - x ^ 5 * y ^ 3, 7940], [-(x ^ 5) * y ^ 2 - x ^ 6 * y, 269, 3100, 7901], [-(x ^ 6) * y ^ 2 - x ^ 7 * y, 6307], [(((-(x ^ 3) * y ^ 7 - x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3) - x ^ 8 * y ^ 2, 3123], [(((-(x ^ 3) * y ^ 8 - x ^ 5 * y ^ 6) - 3 * x ^ 6 * y ^ 5) - x ^ 7 * y ^ 4) + x ^ 10 * y, 3043], [(((((-x * y ^ 6 - x ^ 2 * y ^ 5) - 2 * x ^ 3 * y ^ 4) - 3 * x ^ 4 * y ^ 3) - 2 * x ^ 5 * y ^ 2) - 2 * x ^ 6 * y) - x ^ 7, 1843], [((((-x * y ^ 6 - x ^ 2 * y ^ 5) - 2 * x ^ 3 * y ^ 4) - 3 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) - y ^ 7, 4702, 6301], [(((((-x * y ^ 8 - x ^ 2 * y ^ 7) - 2 * x ^ 3 * y ^ 6) - x ^ 4 * y ^ 5) - x ^ 5 * y ^ 4) + x ^ 6 * y ^ 3) - y ^ 9, 4662, 6261], [((-x * y ^ 5 - x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) + 3 * x ^ 5 * y + 2 * x ^ 6, 242], [(-x * y - x ^ 2) - y ^ 2, 1360, 4587], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 421, 3601], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 420], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 5225], [(-x * y ^ 3 - x ^ 4) - y ^ 4, 7707], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 260], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 2923], [(-(x ^ 3) * y ^ 2 - x ^ 4 * y) - x ^ 5, 4604], [(-(x ^ 3) * y ^ 5 - x ^ 4 * y ^ 4) - y ^ 8, 4742, 6341], [((((-(x ^ 2) * y ^ 6 - x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + y ^ 8, 1540], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 2185], [((-x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y, 1905], [((-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - x ^ 5 * y, 3029], [((((-x * y ^ 5 - x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - x ^ 5 * y) - x ^ 6, 2123], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2, 4509], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 5, 4538], [((-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 5) - y ^ 5, 1320, 4547], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 4 * y + x ^ 5, 4444], [(-x * y ^ 8 - x ^ 2 * y ^ 7) + x ^ 3 * y ^ 6 + 3 * x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4, 4724], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + 2 * x ^ 6, 3444], [(-(x ^ 2) * y ^ 6 - x ^ 3 * y ^ 5) + 2 * x ^ 4 * y ^ 4 + 2 * x ^ 5 * y ^ 3, 1484], [(((-(x ^ 2) * y ^ 8 - x ^ 3 * y ^ 7) + 2 * x ^ 4 * y ^ 6 + 2 * x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4) - x ^ 8 * y ^ 2) - x ^ 9 * y, 1444], [(-x * y ^ 5 - x ^ 2 * y ^ 4) + 3 * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y, 3749], [(-(x ^ 2) * y ^ 7 - x ^ 3 * y ^ 6) + 3 * x ^ 4 * y ^ 5 + 4 * x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 1522], [-x * y ^ 2 + x ^ 3, 682, 3782, 5381], [-x * y ^ 3 + x ^ 2 * y ^ 2, 4542, 6141], [-x * y ^ 3 + x ^ 3 * y, 3909], [-x * y ^ 3 + x ^ 4, 1061, 1581, 4241, 4761], [-x * y ^ 4 + x ^ 4 * y, 5865, 6385, 6947], [-(x ^ 2) + y ^ 2, 1665], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2, 2145], [-(x ^ 2) * y ^ 3 + x ^ 5, 1400, 4618, 4627], [-(x ^ 2) * y ^ 7 + x ^ 4 * y ^ 5, 1524], [-(x ^ 3) + y ^ 3, 1063, 1583, 7455, 7975], [(-(x ^ 3) * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y, 2843], [-x * y ^ 3 + x ^ 3 * y + x ^ 4, 200, 263, 402, 3418, 3427, 6655], [-x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 2947], [-x * y ^ 5 + x ^ 4 * y ^ 2 + x ^ 5 * y, 6667], [(-x * y ^ 5 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - y ^ 6, 1503, 7895], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 1040, 4267], [-(x ^ 3) * y ^ 6 + x ^ 5 * y ^ 4 + x ^ 7 * y ^ 2 + x ^ 8 * y, 3083], [-x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 1200, 4427], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y + 2 * x ^ 5, 4258], [((-x * y ^ 7 + x ^ 3 * y ^ 5 + 2 * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2) - x ^ 7 * y) - y ^ 8, 1463, 7855], [-x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 3 * x ^ 4 * y, 4418], [-(x ^ 3) * y ^ 3 + 2 * x ^ 4 * y ^ 2, 4469], [-x * y ^ 4 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 3589], [-(x ^ -1) * y ^ 5 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 1220], [-x * y ^ 3 + 2 * x ^ 3 * y + 2 * x ^ 4, 362], [1, 63, 122, 754, 863, 1162, 2392, 3382, 3486, 4222, 4577, 4981, 5821, 6179, 6455, 7255], [x ^ -1, 1654, 4892, 4940], [x ^ -1 * y ^ -2, 1238, 7678], [x ^ -1 * y ^ -1, 4805, 5950], [x ^ -1 * y, 3439, 6799], [x ^ -1 * y ^ 5, 2822], [x, 205, 328, 456, 474, 492, 697, 779, 783, 820, 1066, 1107, 1148, 1231, 1289, 1353, 1435, 1625, 1887, 1992, 2051, 2092, 2219, 2420, 2830, 2871, 2912, 2994, 3076, 3199, 3446, 3506, 3651, 3774, 3815, 3897, 4143, 4184, 4204, 4266, 4471, 4576, 4635, 4799, 5499, 5538, 5907, 5989, 6071, 6112, 6153, 6235, 6276, 6358, 6402, 6441, 6564, 6728, 6862, 7175, 7221, 7261, 7339, 7384, 7466, 7554, 7630, 7712, 7755, 7876, 7917], [y, 0, 164, 623, 720, 1279, 1723, 1785, 2155, 2625, 2763, 2951, 3227, 3241, 3349, 3662, 3947, 4102, 4389, 4439, 5261, 5701, 5784, 7015, 7507], [x * y ^ -2, 2533, 2546, 3406], [x * y ^ -1, 286, 573, 586], [x * y, 415, 658, 905, 961, 1709, 1875, 1929, 2267, 2484, 2581, 2738, 2930, 3283, 3530, 3579, 3700, 4320, 4405, 4495, 4552, 4678, 4844, 5090, 5177, 5383, 5416, 5434, 6187, 6612, 6653, 6694, 6823, 7065, 7108, 7149, 7180], [x * y ^ 2, 698, 1477, 2280, 2385, 5587, 6024, 6114, 7714], [x * y ^ 3, 300, 2907, 3741, 5342], [x * y ^ 4, 1204, 3164, 5051, 6147], [x ^ 2, 372, 1205, 1952, 2380, 7181], [y ^ 2, 285, 572, 1683, 2216, 2580, 2952, 3309], [x ^ 2 * y ^ -2, 4406], [x ^ 2 * y ^ -1, 4827, 5870], [x ^ 2 * y, 303, 602, 5864, 6144, 6224, 6384, 6695, 6820, 7107, 7619, 7763], [x ^ 2 * y ^ 2, 1284, 1896, 4622, 5187, 6221, 6627], [x ^ 2 * y ^ 3, 324, 1324, 1404], [x ^ 2 * y ^ 4, 7723], [x ^ 3, 543, 762, 1572, 1816, 1980, 2305, 4686, 6821, 6935, 7979], [y ^ 3, 2896, 3611, 4502, 4537, 6101, 6139], [x ^ 3 * y, 1340, 1420, 1825, 1936, 3126, 3508, 4687, 6288, 6388, 6740, 7083, 7661], [x ^ 3 * y ^ 2, 298, 589, 1907, 3085], [x ^ 3 * y ^ 3, 7952], [x ^ 4, 1341, 1421, 1506, 1940, 3731, 3748, 4521, 4706, 6741, 7474], [y ^ 4, 1260, 1354, 3182, 7834], [x ^ 4 * y, 2658, 4240, 6145, 6225], [x ^ 4 * y ^ 5, 4745], [x ^ 5, 2922, 7827], [y ^ 5, 2804], [x ^ 5 * y, 1069, 1466, 1492, 2869, 6923], [x ^ 5 * y ^ 5, 4665], [x ^ 6 * y ^ 2, 1452, 1498, 3107], [x ^ 6 * y ^ 3, 1474], [((x * y ^ 4 - 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) + y ^ 5, 4404], [(x ^ 2 * y ^ 3 - 2 * x ^ 4 * y) - x ^ 5, 1562], [x ^ -1 * y ^ 4 - x ^ 2 * y, 1223, 7615], [x * y ^ 3 - x ^ 2 * y ^ 2, 3742, 5341], [x * y ^ 3 - x ^ 3 * y, 562], [x * y ^ 3 - x ^ 4, 1261, 4441, 4498], [x * y ^ 4 - x ^ 4 * y, 6065], [x ^ 2 * y ^ 2 - x ^ 4, 202, 2283], [x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2, 3025], [x ^ 2 * y ^ 3 - x ^ 5, 1240, 4458, 4467], [x ^ 3 - y ^ 3, 1263, 7655], [x ^ 3 * y - y ^ 4, 1060], [x ^ 3 * y ^ 2 - y ^ 5, 6025], [x ^ 4 * y - x ^ 5, 7667], [((((x ^ 2 * y ^ 6 - x ^ 3 * y ^ 5) - 3 * x ^ 4 * y ^ 4) - 4 * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + x ^ 7 * y, 4698], [((((x ^ 2 * y ^ 8 - x ^ 3 * y ^ 7) - 3 * x ^ 4 * y ^ 6) - 3 * x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4) + 2 * x ^ 9 * y, 4658], [(((x ^ 2 * y ^ 7 - x ^ 3 * y ^ 6) - 2 * x ^ 4 * y ^ 5) - 3 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3, 4738], [((x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 1564], [((((x ^ 2 * y ^ 8 - x ^ 3 * y ^ 7) - 2 * x ^ 4 * y ^ 6) - x ^ 5 * y ^ 5) - 2 * x ^ 6 * y ^ 4) + x ^ 9 * y, 1440, 4667], [(((x * y ^ 8 - x ^ 3 * y ^ 6) - 2 * x ^ 4 * y ^ 5) - x ^ 6 * y ^ 3) + y ^ 9, 1460], [(((x ^ 2 * y ^ 6 - x ^ 3 * y ^ 5) - 2 * x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3) + x ^ 7 * y, 1480, 4707], [(x * y ^ 7 - x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4, 4721], [(x * y ^ 8 - x ^ 3 * y ^ 6) - x ^ 4 * y ^ 5, 6345], [(x ^ 2 * y ^ 3 - x ^ 4 * y) - x ^ 5, 261, 1044, 3441], [(x ^ 2 * y ^ 4 - x ^ 4 * y ^ 2) - x ^ 5 * y, 5065], [(x ^ 3 * y - x ^ 4) - y ^ 4, 1580], [((x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y) - 2 * x ^ 5, 3738], [(((x ^ 2 * y ^ 7 - x ^ 3 * y ^ 6) - x ^ 4 * y ^ 5) - 2 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3, 1520, 4747], [((x * y ^ 7 - x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 1541], [((x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y) - x ^ 5, 520, 3747], [((x * y ^ 3 - x ^ 3 * y) - x ^ 4) + y ^ 4, 360, 3587], [((x * y ^ 6 - x ^ 3 * y ^ 4) - x ^ 6 * y) + y ^ 7, 1500], [(x * y ^ 2 - x ^ 3) + y ^ 3, 3978], [(x * y ^ 3 - x ^ 3 * y) + y ^ 4, 540], [(x * y ^ 3 - x ^ 4) + y ^ 4, 1280, 4507], [1 + x ^ -1 * y, 6547], [1 + x * y ^ -1, 3222, 4821], [x ^ -1 * y ^ 5 + x * y ^ 3, 4422, 6021], [x + y, 287, 574, 615, 619, 656, 943, 984, 1025, 1082, 1230, 1271, 1312, 1394, 1517, 1641, 1805, 1846, 1969, 2062, 2133, 2215, 2256, 2297, 2338, 2502, 2584, 2666, 2705, 2789, 2953, 3200, 3218, 3262, 3323, 3364, 3405, 3487, 3610, 3862, 3938, 3977, 3979, 4020, 4061, 4062, 4553, 4594, 4758, 4800, 4861, 4882, 4923, 4964, 5128, 5210, 5251, 5415, 5461, 5497, 5579, 5661, 5702, 5743, 5948, 6030, 6482, 6523, 6892, 6933, 6974, 7220, 7234, 7302, 7335, 7343, 7425, 7548, 7589, 7670, 7671, 7835, 7999], [x + x ^ 2 * y ^ -1, 306, 6390], [x * y ^ -1 + x ^ 2 * y ^ -2, 3426], [x * y + x ^ 2, 377, 379, 419, 583, 2015, 2019, 2044, 3244, 3577, 3858, 4044, 4161, 5179, 6975], [x * y + y ^ 2, 44, 667, 980, 1120, 2323, 3485, 4347, 7787], [x * y ^ 2 + x ^ 2 * y, 220, 829, 962, 1149, 2016, 3804, 4145, 4589, 5785, 6699, 7387], [x * y ^ 2 + x ^ 3, 343, 6735], [x * y ^ 2 + y ^ 3, 707, 5498, 5949], [x * y ^ 3 + x ^ 2 * y ^ 2, 378, 483, 2563, 3625, 5178], [x * y ^ 3 + y ^ 4, 1307, 6306], [x * y ^ 4 + y ^ 5, 6346], [x ^ 2 + y ^ 2, 1303, 7695], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 4426], [x ^ 2 * y + x ^ 3, 221, 1308, 2243, 2585, 3401, 3628, 3964, 4124], [x ^ 2 * y ^ 2 + x ^ 3 * y, 564, 2549, 3425, 3989, 5025, 6787, 6827, 7163, 7323, 7660], [x ^ 2 * y ^ 2 + x ^ 4, 4601], [x ^ 2 * y ^ 2 + y ^ 4, 4262, 4782, 5861, 6381], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 284, 307, 1309, 1402, 2818, 3429, 3545, 4400], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 3509], [x ^ 3 * y + x ^ 4, 1588, 2148, 7994], [x ^ 3 * y ^ 2 + x ^ 4 * y, 3178, 3484, 4685, 4760, 6763], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 1865, 6389], [x ^ 4 * y + x ^ 5, 3451, 3468], [x ^ 4 * y ^ 2 + x ^ 5 * y, 2149, 7643, 7899], [x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 1532], [x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3, 1548], [x ^ 4 * y ^ 6 + x ^ 5 * y ^ 5, 3149], [x ^ 5 * y + x ^ 6, 3003], [x ^ 5 * y ^ 2 + x ^ 6 * y, 3096, 6643], [x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 1507], [(((x * y ^ 4 + x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - 4 * x ^ 4 * y) - 2 * x ^ 5, 363], [((x * y ^ 4 + x ^ 2 * y ^ 3) - 2 * x ^ 4 * y) - 2 * x ^ 5, 4764], [(x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 4, 400, 3627], [(x * y ^ 4 + x ^ 3 * y ^ 2) - y ^ 5, 2865], [(x * y ^ 5 + x ^ 2 * y ^ 4) - x ^ 4 * y ^ 2, 4549], [(x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y, 2883], [(x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 4629], [(x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4) - y ^ 7, 1543, 7935], [((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 4 * y) - 2 * x ^ 5, 4244], [((x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y) - 2 * x ^ 5, 1042], [(((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 1202], [(((((x * y ^ 8 + x ^ 2 * y ^ 7) - x ^ 4 * y ^ 5) - 2 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3) - x ^ 7 * y ^ 2) + x ^ 8 * y, 1461, 4641], [(((((x * y ^ 9 + x ^ 2 * y ^ 8) - x ^ 4 * y ^ 6) - 2 * x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3) + x ^ 8 * y ^ 2, 6265], [((x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 683], [((x * y ^ 6 + x ^ 2 * y ^ 5) - x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 1501, 4681], [((x * y ^ 7 + x ^ 2 * y ^ 6) - x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 6305], [((x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - x ^ 5 * y, 3189], [((x ^ 4 * y ^ 6 + x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3, 7923], [((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + y ^ 5, 2945], [x * y + x ^ 2 + y ^ 2, 423, 640, 981, 2985, 3867, 4338, 6815], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 3498], [x * y ^ 4 + x ^ 5 + y ^ 5, 7747], [x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 1985], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 1883], [x ^ 3 * y ^ 5 + x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3, 4731], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 3548, 4484], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 2122], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 2803], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 2643], [((x * y ^ 7 + x ^ 2 * y ^ 6 + x ^ 3 * y ^ 5 + x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) - x ^ 7 * y, 3105], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 1868], [x ^ -1 * y ^ 2 + x + 2y, 6507], [x + 2y, 82], [x ^ 4 * y + 2 * x ^ 5, 3724], [(x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5) - x ^ 6 * y ^ 3, 7947], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 509, 3785], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 280, 3505, 3507, 6707], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 3764], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 283], [x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 203], [x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 1589], [x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 3108, 4691], [x ^ 3 * y ^ 5 + 2 * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3, 3082, 4748], [x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 1869], [x ^ 4 * y ^ 4 + 2 * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 4705], [x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3, 3109, 7883], [(((((x * y ^ 9 + 2 * x ^ 2 * y ^ 8 + x ^ 3 * y ^ 7) - 3 * x ^ 4 * y ^ 6) - 6 * x ^ 5 * y ^ 5) - 4 * x ^ 6 * y ^ 4) - 2 * x ^ 7 * y ^ 3) - x ^ 8 * y ^ 2, 1523], [(x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4) - x ^ 8 * y, 3068], [(x ^ 3 * y ^ 7 + 2 * x ^ 4 * y ^ 6 + x ^ 5 * y ^ 5) - x ^ 8 * y ^ 2, 3042], [(x ^ 4 * y ^ 7 + 2 * x ^ 5 * y ^ 6 + x ^ 6 * y ^ 5) - x ^ 9 * y ^ 2, 3069, 7843], [x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2 + x ^ 6 * y, 4708], [x ^ 3 * y ^ 5 + 2 * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 3148], [(x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3) - x ^ 8 * y, 4651], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 3163], [x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 3122], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 3604], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 6723], [(x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3) - x ^ 8 * y, 4668], [x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 1842], [(x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y, 1243], [x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 6803], [x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 6747], [((((((x * y ^ 10 + 3 * x ^ 2 * y ^ 9 + 4 * x ^ 3 * y ^ 8) - x ^ 4 * y ^ 7) - 9 * x ^ 5 * y ^ 6) - 8 * x ^ 6 * y ^ 5) - 4 * x ^ 7 * y ^ 4) - 2 * x ^ 8 * y ^ 3) + 2 * x ^ 9 * y ^ 2 + 2 * x ^ 10 * y, 1443], [(((x * y ^ 8 + 3 * x ^ 2 * y ^ 7 + 4 * x ^ 3 * y ^ 6) - x ^ 4 * y ^ 5) - 7 * x ^ 5 * y ^ 4) - 4 * x ^ 6 * y ^ 3, 1483], [(((x * y ^ 6 + 3 * x ^ 2 * y ^ 5 + 4 * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3) - 4 * x ^ 5 * y ^ 2) - 5 * x ^ 6 * y) - 2 * x ^ 7, 243], [((x ^ 3 * y ^ 7 + 4 * x ^ 4 * y ^ 6 + 2 * x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) - 2 * x ^ 8 * y ^ 2, 7867], [x * y ^ 5 + 4 * x ^ 2 * y ^ 4 + 5 * x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + x ^ 5 * y, 3549], [x ^ 3 * y ^ 5 + 5 * x ^ 4 * y ^ 4 + 4 * x ^ 5 * y ^ 3 + 2 * x ^ 6 * y ^ 2 + x ^ 7 * y, 7907], [(x ^ 3 * y ^ 7 + 6 * x ^ 4 * y ^ 6 + 5 * x ^ 5 * y ^ 5) - x ^ 7 * y ^ 3, 4749], [((x ^ 3 * y ^ 8 + 7 * x ^ 4 * y ^ 7 + 8 * x ^ 5 * y ^ 6 + 3 * x ^ 6 * y ^ 5 + x ^ 7 * y ^ 4) - 3 * x ^ 8 * y ^ 3) - 2 * x ^ 9 * y ^ 2, 4669], [x ^ 3 * y ^ 6 + 7 * x ^ 4 * y ^ 5 + 9 * x ^ 5 * y ^ 4 + 4 * x ^ 6 * y ^ 3, 4709], [2 * x ^ 3 * y - y ^ 4, 1221, 4401], [2 * x * y ^ 3 + x ^ 2 * y ^ 2, 3531], [(2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 4, 541], [(((2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4) + y ^ 4, 3578], [(((2 * x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y) + y ^ 5, 1283], [((2 * x * y ^ 5 + x ^ 2 * y ^ 4) - x ^ 5 * y) + y ^ 6, 6266], [2 * x * y + x ^ 2 + y ^ 2, 1362, 6914], [2 * x * y ^ 8 + x ^ 2 * y ^ 7 + x ^ 5 * y ^ 4, 3145], [2 * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 1560, 4787], [2 * x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + y ^ 5, 1322], [(2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - x ^ 5, 2003], [2 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 1123], [2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 1803, 3524], [(2 * x * y ^ 9 + 2 * x ^ 2 * y ^ 8 + x ^ 3 * y ^ 7 + 2 * x ^ 4 * y ^ 6 + x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3, 3065], [2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + 2 * x ^ 5, 4778], [2 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 3629], [2 * x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 1923], [2 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 322], [2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + y ^ 5, 1963], [(((2 * x * y ^ 5 + 4 * x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - 3 * x ^ 5 * y) - 2 * x ^ 6, 523], [3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 643], [3 * x ^ 4 * y ^ 3 + 5 * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 3469]]) * x ^ 0 * y ^ 0
            end
        f48 = function (x, y, v)
                local s
                s = v * GetRoot(x * y)
                return dec(40, [[(((-3x - y) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1872], [(-2x - y) - x ^ 2 * y ^ -1, 1912, 1947, 2061, 3473], [(((-2s + x) - s * x ^ -1 * y) - s * x * y ^ -1) + x ^ 2 * y ^ -1, 2041], [(((-2s + x) - s * x ^ -1 * y) - s * x * y ^ -1) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1921], [-s, 165, 1027, 1355, 1596, 1640, 1803, 2702, 3032, 3324, 3597, 3718, 4079, 4105, 4514, 6306, 7842, 7909], [-x, 1361, 3466, 3511, 3876, 7920, 7963], [-y, 122, 286, 448, 489, 530, 774, 815, 856, 897, 938, 1224, 1266, 1308, 1557, 1762, 1926, 2047, 2170, 2373, 2575, 2617, 2658, 2820, 2863, 2948, 2989, 3233, 3402, 3810, 4013, 4174, 4297, 4419, 4629, 4920, 5166, 5447, 5490, 5652, 5895, 5933, 5974, 6102, 6185, 6224, 6271, 6398, 6806, 6927, 7089, 7128, 7292, 7331, 7454, 7536, 7659, 7701], [-s * x ^ -1 * y, 29, 3268, 4860, 4899, 4993, 5030], [((-s - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 325], [(-s - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2, 3640], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 2032, 3440, 3634], [(-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 241, 401, 565, 1840, 1875, 2000, 3724], [(((-s - 2x) - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 1992], [-s - s * x * y ^ -1, 445, 1554, 1841, 1881, 1942, 1965, 2245, 2342, 3559, 3679, 3954, 4154, 4764, 6725, 6845, 7125, 7325], [-x - y, 1265, 1524, 1564, 1920, 2040, 2112, 2320, 2520, 3546, 3552, 3593, 3671, 3672, 3952, 4152, 4720, 4753, 4763], [-x - x ^ 2 * y ^ -1, 324, 1861, 1901, 1941, 1995, 2192, 2243, 3474, 3560, 3834, 6755, 7155], [-s * x * y ^ -1 - s * x ^ 2 * y ^ -2, 601, 965, 1880, 2035, 2120, 3472, 3632, 4004], [-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3, 3484], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 2165, 3723], [-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3, 3483], [s, 204, 1105, 1433, 1479, 1601, 1725, 2507, 2915, 3116, 3363, 4222, 4592, 5877, 6516, 7597, 7764], [x, 83, 247, 331, 372, 413, 579, 620, 661, 702, 743, 990, 1071, 1152, 1518, 1684, 1848, 1891, 1969, 2014, 2092, 2139, 2224, 2305, 2346, 2430, 2551, 2753, 2794, 3117, 3158, 3285, 3446, 3487, 3528, 3569, 3615, 3651, 3692, 3740, 3784, 3856, 3907, 3990, 4061, 4395, 4520, 4803, 5049, 5096, 5128, 5217, 5301, 5348, 5389, 5427, 5538, 5712, 5795, 5834, 6076, 6359, 6441, 6650, 6693, 6738, 6777, 6863, 6902, 6986, 7015, 7068, 7191, 7220, 7272, 7425, 7507, 7794], [y, 74, 1976, 2101, 2256, 2461, 3076, 3159, 3199, 3538, 3663, 3938, 4143, 4266, 4471, 4676, 4717, 4758, 4799, 5131, 5251, 5543, 5743, 6438, 6445, 6559, 6564, 6605, 7024, 7230, 7384, 7433, 7515, 7630, 7753, 7835], [s * x * y ^ -1, 1160, 4321, 5562, 5601, 6005, 6124], [((s - x) + 3 * s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 1867], [s + s * x ^ -1 * y, 35, 1075, 1275, 2641, 2841, 3045, 3273], [s + s * x * y ^ -1, 84, 353, 385, 625, 674, 705, 834, 841, 993, 1067, 1154, 1193, 1281, 1485, 1685, 2107, 2147, 2307, 2475, 2755, 2960, 3115, 3283, 3557, 3582, 3678, 3680, 3782, 3902, 4043, 4145, 4392, 7045, 7525, 7564, 7844, 7845, 7914, 7915], [x + y, 0, 41, 123, 125, 205, 287, 451, 475, 492, 507, 533, 779, 820, 827, 861, 902, 907, 943, 1073, 1107, 1230, 1235, 1271, 1273, 1312, 1435, 1445, 1558, 1599, 1600, 1723, 1763, 1764, 1856, 1896, 1928, 1929, 2051, 2052, 2056, 2102, 2174, 2379, 2382, 2502, 2584, 2622, 2625, 2666, 2667, 2830, 2871, 2912, 2952, 2953, 2994, 3043, 3085, 3112, 3241, 3364, 3404, 3405, 3556, 3585, 3662, 3676, 3815, 4020, 4142, 4184, 4185, 4225, 4305, 4307, 4430, 4433, 4553, 4594, 4634, 4635, 4841, 4882, 4923, 4964, 5005, 5169, 5456, 5497, 5661, 5907, 5948, 5989, 6112, 6194, 6235, 6276, 6317, 6399, 6484, 6485, 6664, 6710, 6744, 6795, 6810, 6824, 6870, 6933, 6950, 6984, 6993, 7097, 7115, 7138, 7144, 7190, 7193, 7302, 7343, 7350, 7464, 7465, 7466, 7548, 7595, 7670, 7671, 7673, 7712, 7876, 7917, 7958, 7999], [x + x ^ 2 * y ^ -1, 1204, 1849, 1892, 2361, 2472, 2761, 3873, 3960, 4320, 6985, 7594], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 1481, 1883, 3444], [s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 2003], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 444, 3443, 3840], [s + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 265, 314, 425, 554, 593, 641, 1121, 1907, 1952, 1987, 2027, 2275, 2760, 3462, 3523, 3622, 3643], [x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 764, 1955, 2161, 2272, 3513, 3720], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 3480], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4, 1843], [((2s - x) + s * x ^ -1 * y + s * x * y ^ -1) - x ^ 2 * y ^ -1, 2045], [2x + y + x ^ 2 * y ^ -1, 85, 307, 355, 387, 547, 627, 707, 795, 995, 1195, 1683, 1902, 1923, 1982, 2043, 2142, 2182, 2302, 2752, 3284, 3465, 3785, 3825, 3905, 3993, 4033, 4353, 4394], [((((3s - x) + s * x ^ -1 * y + 3 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1925], [3x + y + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 267, 427, 595, 1862, 2022, 3625, 3753]]) * x ^ 0 * y ^ 0
            end
        f42 = function (x, y, v)
                local s
                s = v * GetRoot(x * y)
                return dec(36, [[((((((-4x - 2y) - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3903], [(((-3x - y) + s * x ^ 3 * y ^ -3) - 4 * x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 2879], [-2 * x ^ 2 * y ^ -1 - x ^ 3 * y ^ -2, 1582, 2014], [(-2x - y) - 2 * x ^ 2 * y ^ -1, 3311], [((-2x - y) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7, 5209], [(-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2, 1939], [(((-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1651], [(-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1759], [(((((-2x - y) + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2) - x ^ 5 * y ^ -4) - x ^ 7 * y ^ -6, 1310], [(((-2x - y) + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 2622], [(-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1471], [((((-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + 5 * x ^ 3 * y ^ -2 + 6 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 8 * y ^ -7, 1363], [-2s + x + y, 4274, 4382], [((-2s + x + y) - s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1, 4276, 4384], [-2x + y + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 3235], [((((((((-2x + y + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) + s * x ^ 7 * y ^ -7) - x ^ 2 * y ^ -1) + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) + x ^ 8 * y ^ -7, 2659], [-2x + y + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 2767, 2947, 3055], [(((-2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + x ^ 3 * y ^ -2, 5539], [(((((((-2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 7 * s * x ^ 4 * y ^ -4) - 6 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + s * x ^ 7 * y ^ -7 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 5251], [-2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 5647, 5827], [(((-2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + x ^ 3 * y ^ -2, 5359], [(((((-2x + s * x * y ^ -1 + 4 * s * x ^ 2 * y ^ -2 + 6 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) + 2 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 3920], [-(x ^ -3) * y ^ 4, 1773], [-(x ^ -2) * y ^ 3, 549, 724, 3997, 4068, 4293], [-(x ^ -1) * y ^ 2, 2171, 2312, 3176, 5704], [-s, 1259, 1293, 1685, 2369, 2370, 2442, 3118, 3270, 3306, 3414, 4964], [-x, 598, 706, 770, 887, 995, 1257, 2047, 2118, 2142, 2178, 2286, 2407, 3261, 3325, 3405, 3477, 3556, 3585, 4477, 4635, 4712, 4784, 4885, 4892, 5435, 5573, 5681, 5755, 5787, 5867, 5895, 6003, 6227, 6371], [-y, 131, 258, 291, 311, 419, 526, 880, 947, 959, 991, 1180, 1422, 1441, 1602, 1710, 1987, 2216, 2250, 2291, 2589, 2917, 2982, 2991, 3028, 3090, 3294, 3426, 3507, 3666, 3768, 3775, 3779, 3967, 4405, 4621, 4659, 4767, 4942, 4981, 4988, 5025, 5185, 5367, 5557, 5715, 5808, 5964, 5995], [-s * x ^ -1 * y, 6404], [-s * x * y ^ -1, 203, 897, 1005, 1494, 1830, 1974, 2154, 2190, 2298, 3415, 4561, 4748, 5147, 5612, 5861, 5897, 6005, 6046, 6152, 6225], [-s * x ^ 2 * y ^ -2, 198, 753, 1482, 5490], [-(x ^ 2) * y ^ -1, 202, 1743, 1903, 2011, 3199, 3307, 4189, 4633, 4679, 4787, 4895, 5391, 5569, 5677, 5792, 5900], [-(x ^ 3) * y ^ -2, 1510, 4643, 5471, 5795, 5903], [((((((((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - s * x ^ 8 * y ^ -8) + 2 * x ^ 2 * y ^ -1) - 4 * x ^ 4 * y ^ -3) - 4 * x ^ 5 * y ^ -4) + x ^ 7 * y ^ -6) - x ^ 9 * y ^ -8, 3959], [(((((-x - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 1435], [(((-s - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 1543], [(((-x - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 1615], [(((((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - 3 * s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - s * x ^ 8 * y ^ -8) + x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + 2 * x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7 + x ^ 9 * y ^ -8, 3921], [((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 3 * y ^ -2) + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1507], [(-(x ^ -2) * y ^ 3 - 2 * x ^ -1 * y ^ 2) - y, 4085], [(-x - 2 * s * x * y ^ -1) - x ^ 2 * y ^ -1, 2263], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 3905], [(-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3941], [(((-x - 2 * s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 2803], [((((-s - 2x) - y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1, 4021], [((((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1579], [(((-x - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1723], [((-s - 2x) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1, 1434], [(-s - 2x) + y + 2 * s * x ^ 2 * y ^ -2, 3239], [(((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4067], [(((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4247], [(((-s - 2x) + y + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2, 2771, 3059], [((((-s - 2x) + y + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 2951], [(((((((((-s - 2x) + y + 3 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - 3 * s * x ^ 5 * y ^ -5) + s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) + 2 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) + x ^ 8 * y ^ -7, 2663], [-(x ^ -2) * y ^ 3 - x ^ -1 * y ^ 2, 1781], [-(x ^ -1) * y ^ 2 - y, 557, 737, 1853, 4301], [-s - x, 785, 1145, 2262], [-s - y, 418, 958, 2066, 2081, 2174, 2441, 3549, 3631, 4849, 5607, 6147], [-x - y, 535, 1789, 2482, 2862], [-x - s * x * y ^ -1, 1829, 1867, 1973, 2829, 3018, 3441, 3851, 3973, 4129, 5427, 5611, 6151], [-x - x ^ 2 * y ^ -1, 287, 318, 3200, 4425, 5394, 5455, 5719], [-y - s * x * y ^ -1, 4024, 4310], [-s * x ^ -2 * y ^ 2 - s * x ^ -1 * y, 5858], [-s * x * y ^ -1 - s * x ^ 2 * y ^ -2, 2009], [-s * x * y ^ -1 - x ^ 2 * y ^ -1, 533], [-s * x * y ^ -1 - x ^ 3 * y ^ -2, 5324, 5504], [-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1, 5609], [-s * x ^ 3 * y ^ -3 - x ^ 2 * y ^ -1, 2875, 5431, 5467], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 138, 161, 251, 341, 1457, 1637, 2933, 4229, 5322, 5791], [-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3, 1349, 1497, 2645, 3017, 5199, 5204], [-(x ^ 4) * y ^ -3 - x ^ 5 * y ^ -4, 2729, 5235, 5240], [-(x ^ 5) * y ^ -4 - x ^ 6 * y ^ -5, 1450, 2926], [-(x ^ 6) * y ^ -5 - x ^ 7 * y ^ -6, 1342, 2638], [((((((-y - s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7, 2623], [((((((-s - x) - 3 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4, 1325], [(-(x ^ -1) * y ^ 2 - x) - 2y, 4013], [(-x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2, 5323], [((-y - s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4345], [(((-x - s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 4081], [((((((((-x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 5 * y ^ -5) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 29], [(-s - x) - y, 3635], [(-s - x) - x ^ 2 * y ^ -1, 1722], [(-x - y) - s * x ^ 2 * y ^ -2, 4571], [(-x - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 5432], [(-y - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 4057], [(-y - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 4525], [(-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 2119], [(-s * x * y ^ -1 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1542], [(-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5468], [((((-y - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 4237], [((-s - x) - y) - s * x * y ^ -1, 2338], [((-s - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 2721, 3009], [((-x - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 4022], [((-x - s * x * y ^ -1) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 238, 274, 5463], [((-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 137], [(((-s - x) - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 130, 310, 5319, 5499], [((((-s - x) - y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 4309], [(((-s - x) - y) - s * x * y ^ -1) + x ^ 3 * y ^ -2, 4201], [(((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3, 2807], [((-s - y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2, 3975], [((-x - y) - s * x ^ -1 * y) + s * x * y ^ -1, 5864], [((((-x - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5503], [((((-s - y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1402], [((-s - x) - y) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 1382], [((-s - y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 2699], [(((((-y - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 3949], [(-s - x) + y, 382, 490, 3167, 3527, 5571, 5679, 6116], [(-s - x) + x ^ 3 * y ^ -2, 1614], [(-s - y) + s * x ^ 2 * y ^ -2, 2901], [(-x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2, 393], [(-x - s * x * y ^ -1) + x ^ 2 * y ^ -1, 4568], [((-s - x) + y) - s * x * y ^ -1, 5756], [(((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2, 5828], [((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 1942], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2, 5648], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 5540], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5360], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 1654], [((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1, 1762], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 1474], [(((((((((-s - x) + y) - s * x * y ^ -1) + 2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) + 2 * x ^ 4 * y ^ -3) - x ^ 6 * y ^ -5) + x ^ 8 * y ^ -7, 5252], [((((((((((-s - x) + y) - s * x * y ^ -1) + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 3 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) - 3 * x ^ 2 * y ^ -1) + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) + x ^ 8 * y ^ -7 + x ^ 9 * y ^ -8, 1366], [(-s - x) + s * x * y ^ -1 + x ^ 2 * y ^ -1, 383, 1674, 4280], [(-x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 1686], [(-x - s * x * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 2730], [(-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5321], [(-s - x) + y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 2973], [((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 4355], [(-x - s * x * y ^ -1) + 2 * s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1, 3992], [((((-x - y) + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 3915], [-s + x, 2874, 4560], [-s + y, 4598, 4632, 4670, 4672, 4706, 4778, 4780, 4992], [-x + y, 3163, 3523], [-x + s * x * y ^ -1, 4744, 4888, 5145, 5935, 6295], [-x + x ^ 2 * y ^ -1, 4132], [-y + s * x * y ^ -1, 4045, 4333, 4513], [-s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 501], [-s * x * y ^ -1 + x ^ 2 * y ^ -1, 4130, 4893, 5465], [-s * x * y ^ -1 + x ^ 4 * y ^ -3, 105], [-s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 1577, 4083, 4092], [-s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2, 4641], [(((((-x + y) - 3 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 3951], [((-x + y) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4059, 4239, 4347], [(((-x + s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 209], [(((((((-s + y) - 2 * s * x * y ^ -1) + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 23, 1314], [(-s + y) - s * x * y ^ -1, 4705], [(-s + y) - x ^ 2 * y ^ -1, 2230], [(-x + y) - x ^ 2 * y ^ -1, 4527], [(-s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5687], [((-s + y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 1870], [((-s * x * y ^ -1 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 213], [(((-s + x) - y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 3984], [(((((-y + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 3937], [((-s + x) - s * x * y ^ -1) + x ^ 2 * y ^ -1, 2158, 2302], [((-x + y) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3, 95, 1386], [((-x + s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1, 5291], [(((-s + x) - y) + s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3, 2695], [((-s * x ^ 2 * y ^ -2 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 3995], [-s + x + y, 4708], [-s + x + s * x * y ^ -1, 933], [-s + y + x ^ 2 * y ^ -1, 4273, 4381], [-x + s * x * y ^ -1 + x ^ 2 * y ^ -1, 491, 1782, 3081, 3343, 3347, 4388], [-x + s * x * y ^ -1 + x ^ 3 * y ^ -2, 2050], [-x + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 4139], [-s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 1794], [-s * x * y ^ -1 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 4136], [(((-s + x + y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1, 4600], [((-s + x + y) - s * x * y ^ -1) + x ^ 2 * y ^ -1, 4597], [((-s * x * y ^ -1 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1433], [(((((((-s + x + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 4 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + 4 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + s * x ^ 8 * y ^ -8 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 4 * x ^ 5 * y ^ -4) - 4 * x ^ 6 * y ^ -5) - 2 * x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 3916], [-s + x + y + s * x * y ^ -1, 1866, 2226], [-s + x + s * x * y ^ -1 + x ^ 2 * y ^ -1, 573], [-y + s * x * y ^ -1 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 4225], [(-s + x + s * x * y ^ -1 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 645], [(((((-s + x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 177], [((((-s + x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 465], [((((-s + x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 357], [((((((((-s + x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 4 * y ^ -4) + s * x ^ 6 * y ^ -6) - s * x ^ 8 * y ^ -8) + x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 69], [(-x + y + s * x * y ^ -1 + 2 * s * x ^ 3 * y ^ -3) - x ^ 4 * y ^ -3, 3988], [((-s + x + y + 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2, 1938], [(((((-s + x + y + 2 * s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1470, 1650], [((((-s + x + y + 2 * s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 1758], [((((((((((-s + x + y + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - s * x ^ 8 * y ^ -8) - 2 * x ^ 2 * y ^ -1) - 6 * x ^ 3 * y ^ -2) - 7 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 1362], [((((((-x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) + s * x ^ 8 * y ^ -8 + 2 * x ^ 3 * y ^ -2) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) + x ^ 7 * y ^ -6 + x ^ 9 * y ^ -8, 5219], [(((-x + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 5213], [-s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1, 4535], [((-s + 2y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2, 4344, 4524], [((((-s + 2y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 4056], [((((((-s + 2y) - 2 * s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 7 * s * x ^ 3 * y ^ -3 + 6 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3948], [(((-s + 2y) - 2 * s * x * y ^ -1) + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 4236], [(((-s + 2x + y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 4168], [((((-s + 2x + y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1, 4165], [(((-s + 2x + y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + 2 * x ^ 2 * y ^ -1, 4166], [(((((((-s + 3x + y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + 2 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 3914], [x ^ -1 * y ^ 2, 1848], [s, 670, 1294, 2371, 2478, 3117, 3398, 4418, 4549, 4585, 4693, 5859, 6440], [x, 0, 37, 74, 116, 223, 370, 422, 444, 481, 600, 629, 711, 742, 925, 1040, 1110, 1147, 1296, 1336, 1370, 1407, 1567, 1666, 1886, 1888, 1925, 2041, 2073, 2110, 2151, 2258, 2480, 2519, 2592, 2637, 2666, 2711, 2748, 2777, 2831, 2851, 2962, 3127, 3157, 3198, 3221, 3259, 3271, 3487, 3488, 3491, 3591, 3595, 3599, 3665, 3813, 3850, 4036, 4110, 4142, 4184, 4275, 4277, 4332, 4383, 4406, 4417, 4480, 4517, 4554, 4591, 4638, 4675, 4702, 4739, 4820, 4850, 5036, 5146, 5220, 5258, 5297, 5327, 5332, 5406, 5443, 5507, 5517, 5591, 5615, 5633, 5662, 5717, 5739, 5890, 5924, 5931, 5933, 6069, 6080, 6146, 6155, 6188, 6293, 6294], [y, 389, 525, 671, 778, 814, 851, 886, 994, 1031, 1073, 1175, 1221, 1530, 1814, 1962, 2322, 2466, 2518, 2554, 2590, 3080, 3126, 3342, 3369, 3626, 3667, 3702, 3739, 3765, 3887, 4261, 4369, 4452, 4455, 4669, 4777, 4815, 4924, 4945, 5028, 5072, 5109, 5183, 5353, 5533, 5641, 5749, 5821, 5967, 6075, 6109, 6183, 6257, 6331, 6476], [s * x ^ -2 * y ^ 2, 653, 1517, 5840], [s * x ^ -1 * y, 6400, 6431], [s * x * y ^ -1, 1546, 1831, 1975, 2843, 3455, 4490], [s * x ^ 2 * y ^ -2, 609, 717, 1902, 2010, 5399], [x ^ 2 * y ^ -1, 429, 599, 707, 969, 1566, 1612, 1716, 1890, 1998, 2896, 2910, 3189, 3297, 4427, 4489, 4496, 4604, 4823, 5774, 5789, 5929, 5936, 6047, 6083, 6191], [x ^ 3 * y ^ -2, 164, 339, 3893, 3927, 4223, 4499, 4607, 5501], [x ^ 4 * y ^ -3, 1633], [(((((((s - 4x) - 2y) + 4 * s * x * y ^ -1 + 6 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3912], [((((((((s - 3x) - y) - 2 * s * x ^ 2 * y ^ -2) + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - s * x ^ 8 * y ^ -8) - 3 * x ^ 2 * y ^ -1) + 3 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4) - x ^ 8 * y ^ -7, 1326], [((((((((s * x * y ^ -1 - 2 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - s * x ^ 8 * y ^ -8) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7 + x ^ 9 * y ^ -8, 3957], [s - x, 4153], [s - y, 4263, 4272, 4371, 4380, 4454, 4587, 4695], [x - y, 562, 1670, 1778, 3153, 3513, 4453, 4852, 5751], [x - s * x * y ^ -1, 4816, 5000, 5575, 5683], [x - s * x ^ 2 * y ^ -2, 5357, 5645, 5825], [x - s * x ^ 3 * y ^ -3, 5281, 5288], [x - x ^ 2 * y ^ -1, 1795, 5684], [y - s * x * y ^ -1, 1742, 1850, 1922, 2766, 3054, 3234], [s * x * y ^ -1 - x ^ 2 * y ^ -1, 4461, 4821, 5863], [s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1, 4094, 4636], [s * x ^ 2 * y ^ -2 - x ^ 3 * y ^ -2, 101, 245, 281, 1490, 1578, 4281, 4389, 4497], [s * x ^ 3 * y ^ -3 - x ^ 3 * y ^ -2, 4029, 4317, 5395], [s * x ^ 3 * y ^ -3 - x ^ 4 * y ^ -3, 317, 4209], [x ^ 2 * y ^ -1 - x ^ 3 * y ^ -2, 2865], [(((s * x * y ^ -1 - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4245], [(x - s * x * y ^ -1) - x ^ 2 * y ^ -1, 743, 2034, 3091, 3095, 3333, 4640, 5759, 6119], [(s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 2046], [(s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1906], [((((((s - x) - y) - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) + 2 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 3950], [((s - x) - y) - x ^ 2 * y ^ -1, 4346, 4526], [((x - s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5537], [((y - s * x * y ^ -1) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 2946], [((s * x * y ^ -1 - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4065, 4353], [((((s - x) - y) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 4238], [((((s - x) - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4058], [((x - y) - s * x * y ^ -1) + x ^ 2 * y ^ -1, 4312], [((y - s * x * y ^ -1) - s * x ^ 4 * y ^ -4) + x ^ 4 * y ^ -3, 1634], [((y - s * x * y ^ -1) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 1454], [(((s - x) - y) + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 4155], [((y - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7, 5245], [(((((((((s - x) - y) + 3 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 4 * s * x ^ 4 * y ^ -4) - 3 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2) - 2 * x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7 + x ^ 9 * y ^ -8, 1330], [((((((((((s - x) - y) + 3 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7, 5216], [(x - y) + s * x * y ^ -1, 454, 634, 5643, 5823], [(x - y) + x ^ 2 * y ^ -1, 4204], [(s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2, 2793, 4283, 4391, 5939], [(((((((x - y) + s * x * y ^ -1) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 7 * y ^ -6, 58, 5247], [(((x - s * x * y ^ -1) + s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2, 5831], [((x - y) + s * x * y ^ -1) - s * x ^ 3 * y ^ -3, 346, 5535], [((s * x * y ^ -1 - s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5579], [(((((((((s - x) + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - s * x ^ 8 * y ^ -8) - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 33], [(((x - y) + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1, 166, 5355], [((((s - x) + y) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2, 2685], [(s * x ^ 2 * y ^ -2 - s * x ^ 4 * y ^ -4) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4101], [((((x - s * x ^ 2 * y ^ -2) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 5249], [((((y - s * x * y ^ -1) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 2658], [(((((y - s * x * y ^ -1) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 7 * y ^ -6, 1346], [(((x - s * x * y ^ -1) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 5363, 5543, 5651], [(((((((((s - y) + 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - 4 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + s * x ^ 7 * y ^ -7 + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + 2 * x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7, 2627], [((((((((((x - s * x * y ^ -1) + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) + s * x ^ 8 * y ^ -8) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) + x ^ 9 * y ^ -8, 5255], [x ^ -3 * y ^ 4 + x ^ -2 * y ^ 3, 1776], [x ^ -2 * y ^ 3 + x ^ -1 * y ^ 2, 552, 732, 4000, 4296], [x ^ -1 * y ^ 2 + y, 1779, 2186, 2330, 3194], [s + x, 2045, 2334, 2405], [s + y, 2443, 3559, 3621, 3815, 4308, 4839, 4848], [s + s * x * y ^ -1, 1533], [x + y, 259, 296, 518, 555, 592, 666, 703, 740, 745, 962, 1184, 1258, 1444, 1518, 1777, 1851, 1999, 2036, 2184, 2192, 2295, 2332, 2406, 2591, 2863, 2925, 2999, 3036, 3073, 3184, 3196, 3295, 3303, 3309, 3406, 3443, 3480, 3517, 3628, 3962, 3979, 3999, 4073, 4295, 4416, 4813, 4961, 4998, 5035, 5184, 5188, 5193, 5369, 5375, 5554, 5702, 5813, 5850, 5961, 5998, 6405, 6442, 6479], [x + s * x * y ^ -1, 749, 1109, 1994, 2102, 2191, 2694, 4119, 4297, 4856], [x + s * x ^ 2 * y ^ -2, 4128, 4164], [x + x ^ 2 * y ^ -1, 156, 336, 787, 1610, 1632, 1718, 1745, 2002, 2906, 3267, 3273, 3928, 4159, 4167, 4224, 4488, 4599, 5224, 5229, 5303, 5458, 5498], [y + s * x * y ^ -1, 3986], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 286, 4713], [s * x * y ^ -1 + x ^ 2 * y ^ -1, 4492], [s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 250], [s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 4319, 4859, 5285], [s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2, 1613], [s * x ^ 2 * y ^ -2 + x ^ 4 * y ^ -3, 3993], [s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 141, 321], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1570, 1724, 2904, 2908], [x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 169, 1635, 1640], [(((((((((x + s * x * y ^ -1) - 3 * s * x ^ 3 * y ^ -3) - 5 * s * x ^ 4 * y ^ -4) - 3 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 6 * x ^ 4 * y ^ -3) - 5 * x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5, 65], [(((((((x + s * x * y ^ -1) - 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 353], [(s + x) - y, 563, 923, 1854, 2214], [(s + x) - x ^ 2 * y ^ -1, 1687, 5576], [(s + x) - x ^ 3 * y ^ -2, 1690], [(s + y) - s * x ^ 2 * y ^ -2, 2911], [(s + s * x * y ^ -1) - x ^ 2 * y ^ -1, 3275], [(x + s * x * y ^ -1) - x ^ 2 * y ^ -1, 4316], [(y + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 4569], [(s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 3203], [(s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 4093], [((((((x + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 173], [(((((((x + y) - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 7 * y ^ -6, 22, 5211], [((s + x) - y) - s * x * y ^ -1, 4456], [((s + x) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 2983, 2987], [((s + y) - s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2, 94, 5283], [((x + s * x * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 4009], [((x + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 3987], [((s * x * y ^ -1 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4533], [(((s + x) - y) - s * x * y ^ -1) - 2 * x ^ 2 * y ^ -1, 4528], [((((s + x) - y) - s * x * y ^ -1) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 4348], [((((((((s + x) - y) - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + s * x ^ 8 * y ^ -8 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - 2 * x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 3952], [((((((s + x) - y) - s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3, 4240], [((((((s + x) - y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 4060], [((((x + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 461], [s + x + y, 2246, 2266, 3563], [s + x + s * x * y ^ -1, 1937], [s + x + x ^ 2 * y ^ -1, 4424], [s + y + s * x * y ^ -1, 3019], [x + y + x ^ 2 * y ^ -1, 239, 275], [x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 2839, 3451], [x + s * x * y ^ -1 + x ^ 2 * y ^ -1, 641], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2, 249], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 4 * y ^ -3, 4103], [s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 285], [s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4175], [((((((((s + x + s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 6 * s * x ^ 3 * y ^ -3) - 4 * s * x ^ 4 * y ^ -4) + s * x ^ 6 * y ^ -6) - 3 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1361], [(((((s + x + s * x * y ^ -1) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1469], [(s + x + y) - s * x ^ 2 * y ^ -2, 1618], [(s + y + s * x * y ^ -1) - x ^ 2 * y ^ -1, 681], [(s + y + s * x * y ^ -1) - x ^ 3 * y ^ -2, 3985], [(x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2, 5396], [((((((s + x + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1649], [((s + y + s * x * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 2731], [(((s + x + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1757], [(((x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5287], [((x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + x ^ 3 * y ^ -2, 4208], [s + x + y + s * x * y ^ -1, 2083, 4191], [s + x + y + x ^ 2 * y ^ -1, 1706], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 1397], [(s + x + y + s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2, 2915], [((s + x + y + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1, 4200], [s + x + y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 1726], [(s + x + y + s * x * y ^ -1 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1438], [x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1562], [(s + x + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 2735, 3023], [s + y + 2 * s * x * y ^ -1, 4020], [s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1, 4172], [s + x + 2y + s * x * y ^ -1, 4299], [x + s * x ^ 2 * y ^ -2 + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 2802], [s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5393], [(x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 4028], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 3 * y ^ -2, 1506], [(((((y + s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 2613], [(((x + 2 * s * x * y ^ -1) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 4 * y ^ -3, 1399], [((((((((((s + 2x) - y) - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5) - s * x ^ 7 * y ^ -7) + x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 59, 1350], [((s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4605], [(((s + 2x) - y) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 635, 1926], [((((s + 2x) - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2, 167, 347, 455, 1458, 1638, 1746], [((((s + 2x) - s * x * y ^ -1) + x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3, 1398], [s + 2 * s * x * y ^ -1 + x ^ 2 * y ^ -1, 1526], [s + 2x + y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 1598], [s + 2x + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + 2 * x ^ 2 * y ^ -1, 1418], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 3 * y ^ -2, 4100], [s + 2x + 2y + 2 * s * x * y ^ -1 + x ^ 2 * y ^ -1, 4011], [(((s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 4173], [s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 3 * y ^ -2, 1505], [2x, 4460], [2y, 4335, 4443, 4515], [2 * x ^ 2 * y ^ -1, 4463], [((((((((2x - s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 6 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 5215], [((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1, 4532], [((((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4352], [((((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4244], [((((((((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + 2 * s * x ^ 3 * y ^ -3 + 8 * s * x ^ 4 * y ^ -4 + 6 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 3956], [((((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 4064], [(2x - s * x * y ^ -1) - x ^ 3 * y ^ -2, 1798], [(2 * s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4096], [((2x - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 2757, 3045], [((2x - y) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 3225], [(((2x - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4, 2937], [((((((((2x - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + 2 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5) - s * x ^ 7 * y ^ -7) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 8 * y ^ -7, 2649], [2x + x ^ 2 * y ^ -1, 2194], [((2y + s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4047], [(((((((((2x + y) - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 3901], [(((((2y + s * x ^ 3 * y ^ -3) - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3939], [2x + y + x ^ 2 * y ^ -1, 2871, 2877], [2y + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 4227], [((((((((2x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7, 1327], [(2s + s * x ^ -1 * y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 677], [2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4031, 4211], [(((((2x + y + s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 3 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 3913], [(2s + s * x ^ -1 * y + 2 * s * x * y ^ -1) - x ^ 3 * y ^ -2, 1541], [(((((((((2 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4) - s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - s * x ^ 8 * y ^ -8) - 2 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) - x ^ 9 * y ^ -8, 3923]]) * x ^ 0 * y ^ 0
            end
        f54 = function (x, y)
                return dec(45, [[((((-8x - 2y) - 14 * x ^ 2 * y ^ -1) - 14 * x ^ 3 * y ^ -2) - 8 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4, 1499], [(((((-6x - y) - 15 * x ^ 2 * y ^ -1) - 20 * x ^ 3 * y ^ -2) - 15 * x ^ 4 * y ^ -3) - 6 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1489], [((((-5x - y) - 10 * x ^ 2 * y ^ -1) - 10 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1504, 5674, 8014], [((((-5x - y) - 9 * x ^ 2 * y ^ -1) - 8 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1496], [(((-4x - y) - 7 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1620], [(((-4x - y) - 6 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1493, 1501, 1635, 5681, 5684, 5689, 5774, 8021, 8024, 8029], [((-4x - y) - 5 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 5768], [(((-3x - y) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 139, 1049, 2849], [((-3x - y) - 3 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 364, 725, 1274, 1395, 1410, 1491, 1580, 1630, 1642, 1650, 2843, 5538, 5678, 5686, 5791, 5813, 5819, 8018, 8026, 8370, 8385], [((-2x - y) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 146, 154, 1454, 1514, 1516, 5864, 6059], [(-2x - y) - x ^ 2 * y ^ -1, 371, 374, 379, 720, 740, 1041, 1064, 1268, 1417, 1425, 1447, 1467, 1575, 1595, 1655, 2866, 3579, 3700, 3970, 4045, 4151, 4770, 4785, 4839, 5009, 5022, 5452, 5558, 5625, 5635, 5766, 5836, 5857, 5879, 6037, 6044, 6053, 7388, 7674, 8380, 8392, 8400, 8550, 8565, 9691, 9694], [-x, 50, 101, 277, 425, 613, 789, 972, 1521, 1728, 2627, 3081, 3492, 3811, 3854, 4379, 4729, 5051, 5114, 5222, 5419, 5604, 5822, 6071, 6080, 6449, 7139, 8095, 8191, 8474, 8600, 9412, 9849], [-y, 640, 723, 1016, 1348, 1437, 1463, 1569, 1705, 2079, 2118, 2224, 2270, 2411, 2536, 2730, 2873, 3050, 3133, 3597, 3733, 3914, 4413, 4506, 4805, 5035, 5302, 5352, 5458, 5533, 5703, 6266, 6358, 6393, 6492, 6556, 6772, 6823, 6954, 7061, 7218, 7459, 7551, 7692, 8043, 8258, 8280, 8413, 8526, 8585, 8681, 8718, 8852, 9027, 9396, 9475, 9537, 9648], [(((-x - 4 * x ^ 2 * y ^ -1) - 6 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1625, 7564], [((-x - 4 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 2839, 5764], [((-x - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1400, 1640, 7571, 7574, 7579, 7969, 8375], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 585, 1261, 1415, 1644, 2846, 2854, 3555, 3690, 3705, 3754, 3934, 4031, 4144, 4775, 4834, 5015, 5220, 5225, 5545, 5630, 5763, 5771, 5779, 5815, 5870, 5903, 6033, 7576, 7650, 7976, 7979, 7984, 8390, 8555, 9679, 9686], [(-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 590, 1039, 1444, 3560, 3739, 3915, 3960, 4815, 4820, 4999, 5770, 5906, 6050, 7655], [(-(x ^ 3) * y ^ -2 - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 6035], [-x - y, 376, 627, 722, 1266, 1277, 1291, 1430, 1469, 1578, 1662, 1663, 3583, 3722, 3893, 4148, 4154, 4780, 4792, 4800, 5002, 5024, 5032, 5223, 5628, 5683, 5811, 5873, 7678, 8023, 8405, 8423, 8572, 8580, 9707], [-x - x ^ 2 * y ^ -1, 592, 609, 1062, 1269, 1441, 1641, 2851, 3570, 3720, 3759, 3788, 3790, 3873, 3939, 4034, 4141, 4334, 4790, 5564, 5566, 5645, 5776, 5777, 5799, 5877, 6042, 7117, 7394, 7566, 7589, 7665, 7973, 7981, 8570, 9419, 9689, 10042, 10045], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 605, 1054, 1264, 1459, 1512, 3575, 3695, 3746, 3975, 4007, 5762, 5786, 5806, 6057, 7670], [-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3, 3920, 5854], [(-x - y) - x ^ 2 * y ^ -1, 151], [x, 464, 552, 1067, 1192, 1789, 1837, 1886, 1921, 1964, 2024, 2025, 2162, 2431, 2756, 2884, 2930, 3203, 3309, 3390, 3543, 3622, 3681, 3753, 3949, 3997, 4046, 4193, 4330, 4666, 4878, 5200, 5571, 5641, 5742, 5798, 5871, 5968, 6017, 6217, 6574, 6624, 6666, 6910, 6995, 7080, 7174, 7317, 7351, 7480, 7603, 7635, 7727, 7777, 7941, 8000, 8104, 8882, 8944, 8974, 9054, 9138, 9204, 9255, 9335, 9556, 9598, 9685, 9748, 9957, 10021, 10041], [y, 0, 184, 226, 321, 395, 497, 690, 848, 874, 909, 1097, 1150, 1236, 1273, 1380, 1653, 2301, 2347, 2485, 2577, 2669, 2803, 2993, 3175, 3272, 3370, 3459, 4050, 4096, 4166, 4245, 4280, 4464, 4567, 4602, 4687, 4854, 4935, 4970, 5164, 5378, 5939, 6121, 6167, 6300, 6713, 6857, 7271, 7403, 7823, 7869, 7919, 8147, 8336, 8444, 8738, 8790, 9112, 9296, 9802, 9893, 9940, 10124], [x + y, 46, 92, 141, 170, 276, 370, 382, 390, 414, 644, 727, 728, 729, 736, 782, 966, 1078, 1196, 1288, 1334, 1426, 1461, 1472, 1584, 1601, 1610, 1656, 1748, 1794, 1840, 2163, 2393, 2439, 2623, 2761, 2853, 2877, 2899, 2945, 3083, 3313, 3359, 3405, 3446, 3451, 3497, 3586, 3589, 3635, 3696, 3719, 3727, 3910, 3954, 3966, 4000, 4049, 4142, 4162, 4418, 4507, 4510, 4694, 4740, 4778, 4786, 4832, 4846, 4849, 5016, 5062, 5227, 5384, 5430, 5448, 5451, 5476, 5568, 5614, 5631, 5693, 5712, 5713, 5752, 5802, 5818, 5918, 5936, 5982, 6028, 6305, 6351, 6397, 6581, 6627, 6719, 6903, 7087, 7179, 7363, 7383, 7409, 7501, 7639, 7681, 7684, 7731, 7961, 8007, 8033, 8052, 8053, 8099, 8192, 8284, 8376, 8399, 8422, 8558, 8566, 8606, 8744, 8928, 9066, 9158, 9250, 9342, 9526, 9572, 9618, 9700, 9710, 9756, 9848, 9986], [x + x ^ 2 * y ^ -1, 380, 739, 1605, 1637, 1898, 1900, 2860, 2863, 2870, 3430, 3760, 3769, 3896, 3945, 3987, 4026, 4155, 4643, 4645, 4825, 4845, 5004, 5221, 5231, 5563, 5567, 5636, 5644, 5788, 5795, 5829, 5859, 5898, 5907, 5932, 7118, 7595, 7975, 7987, 7995, 9697, 9702], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 155, 589, 1040, 1509, 3757, 3980, 4013, 4816, 5010, 5224, 5824, 5917, 7985], [x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6041], [x + y + x ^ 2 * y ^ -1, 1583], [x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 135, 365, 724, 1035, 1260, 1280, 1440, 1445, 1492, 1590, 1622, 1647, 2857, 2859, 2865, 3559, 3709, 3765, 3925, 4140, 4145, 5551, 5629, 5767, 5782, 5784, 5790, 5922, 7570, 7582, 7590, 7654, 7965, 7980, 9690, 9695], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 140, 2855, 3750, 3964, 4995, 5780, 5805, 5810, 5850, 5915, 7580, 7970, 9680], [x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5900], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6038], [x + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1265, 2835, 2850, 3694, 5690, 5760, 5775, 7560, 7575, 8030], [x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 2840, 5765, 7565], [x + 4 * x ^ 2 * y ^ -1 + 6 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1505, 5675, 8015], [x + 5 * x ^ 2 * y ^ -1 + 10 * x ^ 3 * y ^ -2 + 10 * x ^ 4 * y ^ -3 + 5 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1490], [2x + y + x ^ 2 * y ^ -1, 157, 165, 360, 375, 591, 616, 721, 731, 734, 1284, 1403, 1411, 1527, 1528, 1576, 1582, 1597, 1626, 1649, 1651, 3563, 3717, 3946, 3989, 4781, 4784, 4789, 4823, 4829, 5228, 5234, 5548, 5633, 5673, 5705, 5773, 5902, 5909, 5924, 7658, 8013, 8045, 8386, 8561, 8564, 8569, 9705], [2x + y + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1045, 1409, 1589, 3569, 3929, 7664], [3x + y + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 150, 593, 1406, 1414, 1520, 1628, 1631, 1636, 3704, 3923, 3974, 4774, 5639, 5680, 5692, 5700, 8020, 8032, 8040, 8381, 8384, 8389, 8554], [3x + y + 4 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 599], [4x + y + 6 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1399, 1495, 1507, 1515, 1639, 5670, 5685, 8010, 8025, 8374], [5x + y + 10 * x ^ 2 * y ^ -1 + 10 * x ^ 3 * y ^ -2 + 5 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1500, 1624], [5x + y + 11 * x ^ 2 * y ^ -1 + 11 * x ^ 3 * y ^ -2 + 5 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1485], [7x + 2y + 10 * x ^ 2 * y ^ -1 + 7 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1634]]) * x ^ 0 * y ^ 0
            end
        f56 = function (x, y)
                return dec(45, [[((-4 * x * y ^ 2 - 4 * x ^ 2 * y) - x ^ 3) - y ^ 3, 1533, 3783], [(-4 * x * y ^ 2 - 2 * x ^ 2 * y) - 2 * y ^ 3, 5535], [(-4 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * y ^ 4, 3915], [((-3 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 1549, 3292, 3799, 5542, 7853, 7921, 9653, 10013], [((-3 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 3922, 5947], [((-3 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - y ^ 5, 6030], [(-3 * x * y - 2 * x ^ 2) - y ^ 2, 1713], [(-3 * x * y ^ 2 - 2 * x ^ 2 * y) - y ^ 3, 1858, 5583, 7654], [(-3 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - y ^ 4, 9990], [(-3 * x * y - x ^ 2) - 2 * y ^ 2, 9244], [((-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 7651], [-2 * x ^ 2 * y - x ^ 3, 1534], [(-2 * x * y - x ^ 2) - y ^ 2, 541, 551, 922, 991, 1001, 1238, 1596, 1729, 2656, 2836, 2846, 3287, 3291, 4726, 5267, 5541, 5646, 5683, 7665, 7696, 7706, 7787, 7934, 8025, 8911, 8921, 9228, 9657, 9823, 10017], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 955, 1260, 1267, 2655, 3285, 3510, 3517, 3921, 5137, 5140, 5599, 5680, 5828, 5946, 7518, 7534, 7661, 7663, 7924, 7931, 7933, 7966, 7981, 8011, 8014, 8021, 8023, 9003, 9019, 9820, 10095], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 4006, 4016, 5725, 5940, 7660, 7930, 7965, 8020, 9997, 10081, 10084, 10091, 10093], [(-2 * x * y ^ 4 - x ^ 2 * y ^ 3) - y ^ 5, 10090], [(((-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4) - y ^ 4, 6031], [(-2 * x * y ^ 3 + x ^ 3 * y) - y ^ 4, 6034], [-1, 95, 510, 789, 1064, 1167, 2349, 2545, 2820, 3230, 3364, 3778, 4371, 4559, 5395, 5712, 6076, 6359, 6401, 8295, 8476, 8563, 9487, 9852], [-x, 370, 733, 971, 1008, 1634, 1648, 2308, 2395, 2883, 3029, 3064, 3864, 4779, 4787, 4908, 5787, 6630, 6918, 6921, 6932, 6953, 7774, 9753, 9980], [-y, 49, 663, 824, 1023, 1843, 2207, 2751, 3307, 4468, 4608, 4758, 4761, 5203, 5426, 5685, 6168, 6497, 7042, 7230, 7361, 7490, 7554, 7728, 8107, 8156, 8213, 8354, 8667, 8943, 9039, 9104, 9527, 9825], [-x * y, 912, 951, 1568, 1782, 2251, 2983, 2986, 3242, 3263, 4972, 5466, 5649, 8098, 9276, 9655], [-x * y ^ 2, 1357], [-(x ^ 2), 3444], [-(y ^ 2), 1176, 3927, 5143, 5958, 9051], [-(x ^ 2) * y, 1588, 5634], [((-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, 908, 1447], [(-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 910], [((-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 1440], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 3784, 3828, 3844, 4032, 6008, 7763, 9632, 10048], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 6053, 7523, 8068, 9008, 10045], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 8065], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 2933, 4028], [-x - y, 283, 418, 554, 1004, 1005, 1569, 2072, 2073, 2660, 2849, 3063, 3079, 4232, 4233, 5054, 5656, 5695, 7709, 7710, 8924, 8925, 9835, 10024], [-x * y - x ^ 2, 730, 1416, 1466, 1599, 1626, 1633, 1689, 1714, 1869, 2755, 2937, 2947, 3016, 3026, 3288, 3894, 3900, 4039, 4276, 5268, 5679, 5783, 6012, 6617, 6618, 6619, 6898, 7313, 7765, 7767, 7788, 7851, 7857, 8015, 8039, 9229, 9642, 9645, 9699, 9733, 9819, 9860, 9869, 9914, 9966, 9969, 10040, 10064, 10068], [-x * y - y ^ 2, 280, 415, 811, 821, 958, 994, 1266, 1866, 2745, 2752, 3516, 4048, 4465, 4729, 4738, 5001, 5041, 5136, 5146, 5288, 5618, 5673, 5681, 5832, 6668, 7171, 7537, 7544, 7576, 7632, 7664, 7683, 7686, 7699, 7708, 7808, 7935, 7953, 7956, 8024, 8043, 8914, 8923, 9022, 9029, 9061, 9091, 9101, 9283, 9286, 9696, 9813, 9821], [-x * y ^ 2 - x ^ 2 * y, 903, 1180, 1446, 1592, 1630, 1682, 1778, 1862, 2250, 2928, 2980, 3293, 3782, 3883, 3887, 4034, 4275, 5005, 5506, 5584, 5642, 6057, 6895, 7519, 7607, 7628, 7749, 7976, 8060, 8084, 8088, 9004, 9639, 9688, 9692, 9730, 9856, 9902, 9906, 9923, 9962, 9991, 10085, 10109], [-x * y ^ 2 - y ^ 3, 1170, 1177, 3917, 3919, 4019, 4735, 4995, 5130, 5728, 5731, 5942, 6044, 6063, 7705, 8920, 9045, 9052, 9280, 9999, 10094, 10113], [-x * y ^ 3 - x ^ 2 * y ^ 2, 7972], [-(x ^ 2) * y - x ^ 3, 3829, 7843, 7936, 9098, 10054], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 2935, 4958, 4960, 5497, 5985, 8074, 9683], [(-x * y - x ^ 2) - y ^ 2, 5051], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 9866], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 5002], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 1855], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) - x ^ 4, 5490], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 7928], [1, 560, 1254, 1744, 2075, 2766, 3087, 5026, 5060, 5165, 5577, 8054, 9259], [x ^ -1 * y, 3136], [x, 0, 138, 181, 322, 460, 598, 874, 1499, 1975, 2024, 2025, 2119, 2163, 2485, 2577, 3497, 3681, 3727, 4050, 4096, 4142, 4188, 4418, 4510, 4644, 4872, 5250, 5335, 5547, 5936, 6212, 6259, 6305, 6443, 6765, 6811, 6849, 7006, 7086, 7273, 7409, 7450, 7862, 7915, 8376, 8415, 8514, 8596, 8744, 8882, 8974, 9137, 9204, 9327, 9410, 9571, 9618, 9875], [y, 276, 368, 414, 736, 832, 1191, 1293, 1296, 1380, 1426, 1472, 1610, 1702, 1886, 2393, 2616, 2677, 2712, 2715, 2853, 2899, 2945, 3299, 3313, 3543, 3546, 3820, 3911, 3957, 4049, 4234, 4280, 4743, 4828, 4831, 4924, 5087, 5108, 5303, 5522, 5614, 5752, 5844, 6028, 6074, 6533, 6535, 6627, 6673, 6676, 7113, 7129, 7179, 7317, 7593, 7642, 7685, 7713, 7823, 7961, 8007, 8238, 8254, 8928, 9066, 9112, 9296, 9374, 9388, 9716, 9756, 9940, 10078, 10124], [x * y, 227, 686, 1097, 1328, 1711, 1915, 2437, 3161, 3392, 3584, 3626, 3785, 3998, 4327, 4691, 4964, 5269, 5879, 6120, 6577, 6711, 7789, 8695, 8779, 8828, 9795, 10028], [x * y ^ 2, 5451, 5581, 5987, 9958], [x * y ^ 3, 3880, 9685], [x ^ 2, 1216, 5764, 7294], [y ^ 2, 5973, 7980], [x ^ 2 * y, 1759, 3826, 5806, 7666], [x ^ 2 * y ^ 2, 1665, 5715], [((x * y ^ 2 - x ^ 2 * y) - x ^ 3) + y ^ 3, 8029], [((x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 10099], [x + y, 92, 184, 552, 562, 690, 966, 1012, 1058, 1104, 1244, 1374, 1518, 1564, 1656, 1737, 1794, 1932, 1978, 2071, 2117, 2301, 2304, 2439, 2680, 2847, 2857, 2991, 3037, 3083, 3175, 3290, 3321, 3405, 3451, 3589, 3635, 3773, 3814, 3859, 3865, 3901, 4231, 4326, 4648, 4694, 4786, 4878, 5016, 5062, 5151, 5154, 5246, 5338, 5521, 5550, 5560, 5568, 5571, 5798, 5845, 5890, 5982, 6025, 6121, 6213, 6581, 6719, 6857, 6903, 6949, 6995, 7087, 7170, 7271, 7455, 7575, 7777, 7869, 8099, 8422, 8468, 8606, 8698, 8790, 9158, 9250, 9252, 9342, 9434, 9572, 9802, 9894, 9986, 10032], [x * y + x ^ 2, 918, 1218, 1219, 1234, 1421, 1461, 2253, 2254, 2939, 3852, 4277, 4278, 5266, 5511, 5537, 5539, 5763, 5779, 6023, 6891, 7293, 7309, 7786, 9106, 9726, 9867, 9870, 9877], [x * y + y ^ 2, 270, 277, 405, 412, 543, 1273, 1367, 1871, 2070, 2295, 2610, 2617, 2702, 2703, 2704, 2838, 3259, 3296, 3523, 3809, 3854, 3940, 3951, 4230, 4645, 4727, 4728, 4731, 4825, 5147, 5284, 5546, 5607, 5741, 5745, 5834, 5843, 5954, 5955, 5968, 5976, 6014, 6072, 7159, 7542, 7564, 7635, 7668, 7671, 7672, 7804, 7859, 7938, 7990, 7995, 9027, 9234, 9366, 9373], [x * y ^ 2 + x ^ 2 * y, 550, 818, 820, 1401, 1531, 1710, 1758, 1774, 2663, 2845, 3781, 3876, 4043, 4951, 4961, 5048, 5050, 5265, 5507, 5641, 5677, 5809, 6042, 6068, 7163, 7528, 7568, 7656, 7785, 7846, 7974, 7982, 9013, 9053, 9278, 9817, 9919, 9951, 9961, 10041], [x * y ^ 2 + y ^ 3, 1270, 1851, 3295, 3520, 3926, 4027, 4041, 5545, 5732, 5944, 7622, 9370], [x * y ^ 3 + x ^ 2 * y ^ 2, 1395, 1530, 1672, 3780, 5445, 5452, 5580, 6041, 7650, 8061, 9945], [x * y ^ 3 + y ^ 4, 3925, 5950], [x ^ 2 * y + x ^ 3, 998, 3023, 3025, 5503, 5989, 7744, 7929, 7937, 8012, 8033], [x ^ 2 * y ^ 2 + x ^ 3 * y, 1405, 4007, 5455, 9865, 10082, 10103], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 1402], [x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 548, 1000, 2843, 2926, 2936, 3848, 3879, 5499, 6004, 6885, 6892, 7743, 7834, 7836, 9720, 9727, 9857, 9858, 9859, 10037, 10058], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 1450, 1585, 3870, 6039, 6043, 6049, 7657, 7927, 7973, 8057, 8078, 9952, 9955, 10035, 10042], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 4013, 4015, 6040, 8055, 8062], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 9863], [x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3, 1453, 5988], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 5635], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 7830], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 4024, 7837], [2 * x ^ 2 * y + x ^ 3, 9994], [2 * x * y + x ^ 2 + y ^ 2, 914, 1557, 1601, 1733, 2252, 2302, 2657, 2658, 3286, 3298, 3807, 5538, 5548, 5965, 7529, 9014, 9248], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 1581, 3928, 4017, 4732, 5603, 5631, 5670, 5808, 5824, 5941, 5951, 5953, 6048, 6055, 7538, 7624, 9023, 9633, 9681, 9691, 9810, 10003], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 10000], [2 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 3803], [2 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3, 7759], [2 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 4009], [2 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 3877], [3 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + y ^ 4, 1575, 5625], [3 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 7516, 9001], [3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 901, 911, 1553, 7526, 7833, 7849, 9011], [3 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 1582, 1845, 5632, 9675], [3 * x * y ^ 3 + 5 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + y ^ 4, 6033], [3 * x * y ^ 3 + 6 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + x ^ 4 + y ^ 4, 4008], [4 * x * y ^ 2 + 4 * x ^ 2 * y + x ^ 3 + y ^ 3, 9649, 9993, 10009], [4 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 1852, 9682]]) * x ^ 0 * y ^ 0
            end
        rep = [[f1, x], [f1, y], [f6, y, x, 1], [f6, x, y, -1], [f6, y, x, -1], [f6, x, y, 1], [f7, x, y], [f7, y, x], [f9, x, y], [f9, y, x], [f11, x, y, -1], [f11, x, y, 1], [f14, y, x], [f14, x, y], [f16, y, x], [f16, x, y], [f19, x, y, 1], [f19, y, x, 1], [f19, x, y, -1], [f19, y, x, -1], [f21, x, y], [f21, y, x], [f23, x, y], [f23, y, x], [f25, x, y], [f26, x, y], [f27, x, y, -1], [f27, y, x, 1], [f27, x, y, 1], [f27, y, x, -1], [f31, x, y, 1], [f31, y, x, 1], [f31, x, y, -1], [f31, y, x, -1], nothing, nothing, [f37, x, y], [f37, y, x], nothing, nothing, nothing, [f42, x, y, 1], [f42, y, x, 1], [f42, x, y, -1], [f42, y, x, -1], [f46, x, y], [f46, y, x], [f48, x, y, -1], [f48, x, y, 1], nothing, nothing, nothing, nothing, [f54, x, y], [f54, y, x], [f56, x, y], [f56, y, x]]
        if rep[i] !== nothing
            return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])]) + 0 * x * y
        else
            return false
        end
    end)
chevieset(:G31, :Representation, function (i,)
        local r, f, dec
        r = (chevieget(:G31, :HeckeRepresentation))(map((j->begin
                            [1, -1]
                        end), 1:5), [], i)
        if r != false
            return r
        end
        f = (j->begin
                    (chevieget(:G31, :Representation))(j)
                end)
        dec = function (d, l)
                local m, v, k
                m = map((i->begin
                                NullMat(d)
                            end), 1:5)
                for v = l
                    for k = v[2:length(v)]
                        l = mod(k, d ^ 2)
                        ((m[div(k, d ^ 2) + 1])[div(l, d) + 1])[mod(l, d) + 1] = v[1]
                    end
                end
                return m
            end
        if i == 35
            return -(f(36))
        elseif i == 36
            return E(4) * dec(24, [[-1, 79, 96, 121, 146, 206, 231, 251, 396, 421, 499, 522, 574, 581, 604, 658, 735, 794, 847, 980, 1007, 1016, 1044, 1094, 1117, 1158, 1204, 1287, 1369, 1399, 1419, 1500, 1544, 1629, 1650, 1697, 1717, 1735, 1838, 1923, 1974, 2018, 2041, 2123, 2155, 2175, 2213, 2254, 2289, 2311, 2346, 2364, 2403, 2445, 2464, 2510, 2537, 2578, 2677, 2783, 2852], [1, 4, 29, 54, 171, 274, 304, 329, 344, 369, 453, 476, 551, 633, 673, 696, 755, 786, 819, 883, 910, 933, 942, 1072, 1145, 1185, 1235, 1250, 1296, 1330, 1360, 1454, 1487, 1517, 1582, 1604, 1675, 1765, 1788, 1808, 1868, 1882, 1896, 1967, 2008, 2068, 2106, 2201, 2277, 2335, 2359, 2380, 2427, 2451, 2472, 2523, 2552, 2555, 2582, 2592, 2594, 2616, 2631, 2648, 2671, 2692, 2694, 2716, 2721, 2736, 2737, 2774, 2792, 2806, 2812, 2813, 2846, 2864, 2875]])
        elseif i == 39
            return map(KroneckerProduct, f(9), f(11))
        elseif i == 40
            return -(f(39))
        elseif i == 41
            return map(SignedPermutationMat, [[2, 1, 6, 7, 8, 3, 4, 5, -14, -15, 12, 11, 18, -9, -10, -20, -21, 13, 22, -16, -17, 19, -25, 33, -23, 34, 35, 36, 31, -32, 29, -30, 24, 26, 27, 28], [-2, -1, -6, -5, -4, -3, 8, 7, 10, 9, 13, -18, 11, -15, -14, 19, 23, -12, 16, 22, 25, 20, 17, 26, 21, 24, -29, 30, -27, 28, -35, 36, -34, -33, -31, 32], [3, 6, 1, 9, 10, 2, 14, 15, 4, 5, 16, 20, -19, 7, 8, 11, 21, 22, -13, 12, 17, 18, 25, -28, 23, 30, 29, -24, 27, 26, 35, 34, 36, 32, 31, 33], [4, 8, 9, 1, 7, 15, 5, 2, 3, 14, 17, 20, 24, 10, 6, 21, 11, 27, 28, 12, 16, 29, 26, 13, 30, 23, 18, 19, 22, 25, 36, 34, 35, 32, 33, 31], [5, 8, 11, 7, 1, 12, 4, 2, 17, 16, 3, 6, 18, 21, 20, 10, 9, 13, 23, 15, 14, -25, 19, 27, -22, 28, 24, 26, -30, -29, 32, 31, 35, 36, 33, 34]])
        elseif i == 50
            return map(KroneckerProduct, f(3), f(15))
        elseif i == 51
            return -(f(50))
        elseif i == 52
            return ComplexConjugate(f(50))
        elseif i == 53
            return -(f(52))
        elseif i == 58
            return map(KroneckerProduct, f(3), f(25))
        elseif i == 59
            return ComplexConjugate(f(58))
        end
    end)
chevieset(:G31, :Invariants, [function (x, y, z, t)
            return 168 * t ^ 2 * x ^ 2 * y ^ 2 * z ^ 2 + 14 * t ^ 4 * x ^ 4 + 14 * t ^ 4 * y ^ 4 + 14 * t ^ 4 * z ^ 4 + 14 * x ^ 4 * y ^ 4 + 14 * x ^ 4 * z ^ 4 + 14 * y ^ 4 * z ^ 4 + t ^ 8 + x ^ 8 + y ^ 8 + z ^ 8
        end, function (x, y, z, t)
            return ((((((((((((((792 * t ^ 2 * x ^ 2 * y ^ 2 * z ^ 6 + 792 * t ^ 2 * x ^ 2 * y ^ 6 * z ^ 2 + 792 * t ^ 2 * x ^ 6 * y ^ 2 * z ^ 2 + 330 * t ^ 4 * x ^ 4 * y ^ 4 + 330 * t ^ 4 * x ^ 4 * z ^ 4 + 330 * t ^ 4 * y ^ 4 * z ^ 4 + 330 * x ^ 4 * y ^ 4 * z ^ 4) - 33 * t ^ 4 * x ^ 8) - 33 * t ^ 4 * y ^ 8) - 33 * t ^ 4 * z ^ 8) - 33 * x ^ 4 * y ^ 8) - 33 * x ^ 4 * z ^ 8) - 33 * y ^ 4 * z ^ 8) + 792 * t ^ 6 * x ^ 2 * y ^ 2 * z ^ 2) - 33 * t ^ 8 * x ^ 4) - 33 * t ^ 8 * y ^ 4) - 33 * t ^ 8 * z ^ 4) - 33 * x ^ 8 * y ^ 4) - 33 * x ^ 8 * z ^ 4) - 33 * y ^ 8 * z ^ 4) + t ^ 12 + x ^ 12 + y ^ 12 + z ^ 12
        end, function (x, y, z, t)
            return (((((((((((((((((((((((-(t ^ 2) * x ^ 2 * y ^ 2 * z ^ 14 + t ^ 2 * x ^ 2 * y ^ 6 * z ^ 10 + t ^ 2 * x ^ 2 * y ^ 10 * z ^ 6) - t ^ 2 * x ^ 2 * y ^ 14 * z ^ 2) + t ^ 2 * x ^ 6 * y ^ 2 * z ^ 10 + 14 * t ^ 2 * x ^ 6 * y ^ 6 * z ^ 6 + t ^ 2 * x ^ 6 * y ^ 10 * z ^ 2 + t ^ 2 * x ^ 10 * y ^ 2 * z ^ 6 + t ^ 2 * x ^ 10 * y ^ 6 * z ^ 2) - t ^ 2 * x ^ 14 * y ^ 2 * z ^ 2) - 13 * t ^ 4 * x ^ 4 * y ^ 4 * z ^ 8) - 13 * t ^ 4 * x ^ 4 * y ^ 8 * z ^ 4) + t ^ 4 * x ^ 4 * y ^ 12 + t ^ 4 * x ^ 4 * z ^ 12 + t ^ 4 * y ^ 4 * z ^ 12 + x ^ 4 * y ^ 4 * z ^ 12) - 13 * t ^ 4 * x ^ 8 * y ^ 4 * z ^ 4) - 2 * t ^ 4 * x ^ 8 * y ^ 8) - 2 * t ^ 4 * x ^ 8 * z ^ 8) - 2 * t ^ 4 * y ^ 8 * z ^ 8) - 2 * x ^ 4 * y ^ 8 * z ^ 8) + t ^ 4 * x ^ 12 * y ^ 4 + t ^ 4 * x ^ 12 * z ^ 4 + t ^ 4 * y ^ 12 * z ^ 4 + x ^ 4 * y ^ 12 * z ^ 4 + t ^ 6 * x ^ 2 * y ^ 2 * z ^ 10 + 14 * t ^ 6 * x ^ 2 * y ^ 6 * z ^ 6 + t ^ 6 * x ^ 2 * y ^ 10 * z ^ 2 + 14 * t ^ 6 * x ^ 6 * y ^ 2 * z ^ 6 + 14 * t ^ 6 * x ^ 6 * y ^ 6 * z ^ 2 + t ^ 6 * x ^ 10 * y ^ 2 * z ^ 2) - 13 * t ^ 8 * x ^ 4 * y ^ 4 * z ^ 4) - 2 * t ^ 8 * x ^ 4 * y ^ 8) - 2 * t ^ 8 * x ^ 4 * z ^ 8) - 2 * t ^ 8 * y ^ 4 * z ^ 8) - 2 * x ^ 8 * y ^ 4 * z ^ 8) - 2 * t ^ 8 * x ^ 8 * y ^ 4) - 2 * t ^ 8 * x ^ 8 * z ^ 4) - 2 * t ^ 8 * y ^ 8 * z ^ 4) - 2 * x ^ 8 * y ^ 8 * z ^ 4) + t ^ 10 * x ^ 2 * y ^ 2 * z ^ 6 + t ^ 10 * x ^ 2 * y ^ 6 * z ^ 2 + t ^ 10 * x ^ 6 * y ^ 2 * z ^ 2 + t ^ 12 * x ^ 4 * y ^ 4 + t ^ 12 * x ^ 4 * z ^ 4 + t ^ 12 * y ^ 4 * z ^ 4 + x ^ 12 * y ^ 4 * z ^ 4) - t ^ 14 * x ^ 2 * y ^ 2 * z ^ 2
        end, function (x, y, z, t)
            (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((returnt ^ 2 * x ^ 2 * y ^ 2 * z ^ 18 - 12 * t ^ 2 * x ^ 2 * y ^ 6 * z ^ 14) + 22 * t ^ 2 * x ^ 2 * y ^ 10 * z ^ 10) - 12 * t ^ 2 * x ^ 2 * y ^ 14 * z ^ 6) + t ^ 2 * x ^ 2 * y ^ 18 * z ^ 2) - 12 * t ^ 2 * x ^ 6 * y ^ 2 * z ^ 14) - 52 * t ^ 2 * x ^ 6 * y ^ 6 * z ^ 10) - 52 * t ^ 2 * x ^ 6 * y ^ 10 * z ^ 6) - 12 * t ^ 2 * x ^ 6 * y ^ 14 * z ^ 2) + 22 * t ^ 2 * x ^ 10 * y ^ 2 * z ^ 10) - 52 * t ^ 2 * x ^ 10 * y ^ 6 * z ^ 6) + 22 * t ^ 2 * x ^ 10 * y ^ 10 * z ^ 2) - 12 * t ^ 2 * x ^ 14 * y ^ 2 * z ^ 6) - 12 * t ^ 2 * x ^ 14 * y ^ 6 * z ^ 2) + t ^ 2 * x ^ 18 * y ^ 2 * z ^ 2 + 76 * t ^ 4 * x ^ 4 * y ^ 4 * z ^ 12 + 36 * t ^ 4 * x ^ 4 * y ^ 8 * z ^ 8 + 76 * t ^ 4 * x ^ 4 * y ^ 12 * z ^ 4 + 2 * t ^ 4 * x ^ 4 * y ^ 16 + 2 * t ^ 4 * x ^ 4 * z ^ 16 + 2 * t ^ 4 * y ^ 4 * z ^ 16 + 2 * x ^ 4 * y ^ 4 * z ^ 16 + 36 * t ^ 4 * x ^ 8 * y ^ 4 * z ^ 8 + 36 * t ^ 4 * x ^ 8 * y ^ 8 * z ^ 4) - 2 * t ^ 4 * x ^ 8 * y ^ 12) - 2 * t ^ 4 * x ^ 8 * z ^ 12) - 2 * t ^ 4 * y ^ 8 * z ^ 12) - 2 * x ^ 4 * y ^ 8 * z ^ 12) + 76 * t ^ 4 * x ^ 12 * y ^ 4 * z ^ 4) - 2 * t ^ 4 * x ^ 12 * y ^ 8) - 2 * t ^ 4 * x ^ 12 * z ^ 8) - 2 * t ^ 4 * y ^ 12 * z ^ 8) - 2 * x ^ 4 * y ^ 12 * z ^ 8) + 2 * t ^ 4 * x ^ 16 * y ^ 4 + 2 * t ^ 4 * x ^ 16 * z ^ 4 + 2 * t ^ 4 * y ^ 16 * z ^ 4 + 2 * x ^ 4 * y ^ 16 * z ^ 4) - 12 * t ^ 6 * x ^ 2 * y ^ 2 * z ^ 14) - 52 * t ^ 6 * x ^ 2 * y ^ 6 * z ^ 10) - 52 * t ^ 6 * x ^ 2 * y ^ 10 * z ^ 6) - 12 * t ^ 6 * x ^ 2 * y ^ 14 * z ^ 2) - 52 * t ^ 6 * x ^ 6 * y ^ 2 * z ^ 10) - 8 * t ^ 6 * x ^ 6 * y ^ 6 * z ^ 6) - 52 * t ^ 6 * x ^ 6 * y ^ 10 * z ^ 2) - 52 * t ^ 6 * x ^ 10 * y ^ 2 * z ^ 6) - 52 * t ^ 6 * x ^ 10 * y ^ 6 * z ^ 2) - 12 * t ^ 6 * x ^ 14 * y ^ 2 * z ^ 2) + 36 * t ^ 8 * x ^ 4 * y ^ 4 * z ^ 8 + 36 * t ^ 8 * x ^ 4 * y ^ 8 * z ^ 4) - 2 * t ^ 8 * x ^ 4 * y ^ 12) - 2 * t ^ 8 * x ^ 4 * z ^ 12) - 2 * t ^ 8 * y ^ 4 * z ^ 12) - 2 * x ^ 8 * y ^ 4 * z ^ 12) + 36 * t ^ 8 * x ^ 8 * y ^ 4 * z ^ 4 + 36 * t ^ 8 * x ^ 8 * y ^ 8 + 36 * t ^ 8 * x ^ 8 * z ^ 8 + 36 * t ^ 8 * y ^ 8 * z ^ 8 + 36 * x ^ 8 * y ^ 8 * z ^ 8) - 2 * t ^ 8 * x ^ 12 * y ^ 4) - 2 * t ^ 8 * x ^ 12 * z ^ 4) - 2 * t ^ 8 * y ^ 12 * z ^ 4) - 2 * x ^ 8 * y ^ 12 * z ^ 4) + 22 * t ^ 10 * x ^ 2 * y ^ 2 * z ^ 10) - 52 * t ^ 10 * x ^ 2 * y ^ 6 * z ^ 6) + 22 * t ^ 10 * x ^ 2 * y ^ 10 * z ^ 2) - 52 * t ^ 10 * x ^ 6 * y ^ 2 * z ^ 6) - 52 * t ^ 10 * x ^ 6 * y ^ 6 * z ^ 2) + 22 * t ^ 10 * x ^ 10 * y ^ 2 * z ^ 2 + 76 * t ^ 12 * x ^ 4 * y ^ 4 * z ^ 4) - 2 * t ^ 12 * x ^ 4 * y ^ 8) - 2 * t ^ 12 * x ^ 4 * z ^ 8) - 2 * t ^ 12 * y ^ 4 * z ^ 8) - 2 * x ^ 12 * y ^ 4 * z ^ 8) - 2 * t ^ 12 * x ^ 8 * y ^ 4) - 2 * t ^ 12 * x ^ 8 * z ^ 4) - 2 * t ^ 12 * y ^ 8 * z ^ 4) - 2 * x ^ 12 * y ^ 8 * z ^ 4) - 12 * t ^ 14 * x ^ 2 * y ^ 2 * z ^ 6) - 12 * t ^ 14 * x ^ 2 * y ^ 6 * z ^ 2) - 12 * t ^ 14 * x ^ 6 * y ^ 2 * z ^ 2) + 2 * t ^ 16 * x ^ 4 * y ^ 4 + 2 * t ^ 16 * x ^ 4 * z ^ 4 + 2 * t ^ 16 * y ^ 4 * z ^ 4 + 2 * x ^ 16 * y ^ 4 * z ^ 4 + t ^ 18 * x ^ 2 * y ^ 2 * z ^ 2
        end])
chevieset(:G31, :BasicDerivations, function ()
        return function (x, y, z, t)
                return [[8x, 12 * t * y, 25920z + 88 // 5 * x * y, 24t - 1 // 135 * y ^ 2], [12y, 18 * t * x ^ 2 - 97200 * z ^ 2, -46656t + 12 * y ^ 2 + 72 // 5 * x ^ 3, -42 * x * z - 1 // 90 * x ^ 2 * y], [25920z + 20 * x * y, ((12 * t * y ^ 2 - 19440 * x * z ^ 2) + 18 * t * x ^ 3) - 46656 * t ^ 2, -264384 // 5 * t * x + 20736 * y * z + 148 // 5 * x * y ^ 2 + 72 // 5 * x ^ 4, ((144 // 5 * t * y - 18 * x ^ 2 * z) - 1 // 135 * y ^ 3) - 1 // 90 * x ^ 3 * y], [24t, -42 * t * x * z - 60 * y * z ^ 2, -48 // 5 * x ^ 2 * z, 1 // 135 * x * y * z + 1 // 54 * t * x ^ 2 + 20 * z ^ 2]]
            end
    end)
chevieset(:G31, :Discriminant, function ()
        return function (x, y, z, t)
                return (((((((((((((((-3 * t * x * y ^ 4 * z ^ 2 + 43740000 * x * y * z ^ 5 + 48114000 * t * x ^ 2 * z ^ 4 + 61560 * t * x ^ 3 * y * z ^ 3 + 16200 * t * y ^ 3 * z ^ 3 + 6 * t * x ^ 4 * y ^ 2 * z ^ 2) - 3 * t * x ^ 7 * z ^ 2) + 22680 * t ^ 2 * x * y ^ 2 * z ^ 2) - 34992000 * t ^ 2 * y * z ^ 3) + 32400 * x ^ 2 * y ^ 2 * z ^ 4 + 23976 * t ^ 2 * x ^ 4 * z ^ 2) - 62985600 * t ^ 3 * x * z ^ 2) - 15552 * t ^ 3 * x ^ 2 * y * z) - 2 * t ^ 3 * x ^ 3 * y ^ 2) + 4 * x ^ 3 * y ^ 3 * z ^ 3 + t ^ 3 * y ^ 4 + t ^ 3 * x ^ 6) - 7776 * t ^ 4 * y ^ 2) - 7776 * t ^ 4 * x ^ 3) + 15116544 * t ^ 5) - 2 * y ^ 5 * z ^ 3) - 1296 * x ^ 5 * z ^ 4) + 15746400000 * z ^ 6) - 2 * x ^ 6 * y * z ^ 3
            end
    end)
chevieset(:G32, :PrintDiagram, function (indices, title)
        print(title, " ", indices[1], "(3)--(3)", indices[2], "--(3)", indices[3], "--(3)", indices[4], "\n")
    end)
chevieset(:G32, :GeneratingRoots, [[0, 0, -1, 0], E(4) // ER(3) * [1, 1, 1, 0], [0, 1, 0, 0], E(4) // ER(3) * [1, -1, 0, -1]])
chevieset(:G32, :EigenvaluesGeneratingReflections, [1 // 3, 1 // 3, 1 // 3, 1 // 3])
chevieset(:G32, :HyperplaneRepresentatives, [1])
chevieset(:G32, :BraidRelations, [[[1, 2, 1], [2, 1, 2]], [[2, 3, 2], [3, 2, 3]], [[3, 4, 3], [4, 3, 4]], [[1, 3], [3, 1]], [[1, 4], [4, 1]], [[2, 4], [4, 2]]])
chevieset(:G32, :Size, 155520)
chevieset(:G32, :ReflectionDegrees, [12, 18, 24, 30])
chevieset(:G32, :NrConjugacyClasses, 102)
chevieset(:G32, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3]], [1:3, [1, 3, 4]], [1:4]]
        return t[s + 1]
    end)
chevieset(:G32, :ClassNames, [".", "1", "12", "31", "11", "121", "421", "123", "131", "1232", "aa1211211", "4311", "c", "3131", "1211211", "4211", "42211", "cc", "a32", "d", "aaaa12", "44211", "1232z", "aa123", "a32zzzzz", "aa121121", "a", "ccc", "442211", "dd14", "211211", "121zzzzz", "aaaa1211211", "zd", "cccc", "4211211", "a32z", "11434z", "a32zzz", "aa13", "dd1", "zzc", "121z", "aa12", "1434zzzzz", "1232zzzzz", "44211211", "1zzzzz", "1434z", "1232zzzz", "ddd", "11434zzzzz", "3131z", "11z", "1232zzz", "131zzzzz", "aa1", "zdd1", "a32zzzz", "dd", "131z", "zzdd", "1434zz", "1232zz", "aa", "1211214z", "zc", "12112114zz", "aaaa", "131zzz", "1134z", "a32zz", "12112144z", "1434zzz", "121zz", "11434zzzz", "121zzzz", "11434zzz", "az", "1211214zz", "121121z", "124z", "12zz", "zdd", "11zzzz", "12z", "121121zz", "13z", "124zz", "121zzz", "11zzzzz", "13zz", "1z", "z", "13zzz", "11zzz", "1zz", "1zzz", "zzzzz", "zzz", "zz", "zzzz"])
chevieset(:G32, :WordsClassRepresentatives, map((x->begin
                Replace(x, ".", [], "1", [1], "2", [2], "3", [3], "4", [4], "z", "ccccc", "c", [4, 3, 2, 1], "d", [1, 2, 4, 3, 2], "a", [1, 2, 1, 3, 2, 1])
            end), chevieget(:G32, :ClassNames)))
chevieset(:G32, :PowerMaps, [nothing, [1, 5, 2, 14, 2, 31, 9, 27, 9, 19, 40, 4, 18, 4, 5, 47, 14, 35, 10, 60, 57, 36, 72, 26, 50, 69, 65, 67, 9, 53, 1, 81, 4, 62, 18, 5, 64, 80, 10, 57, 88, 35, 87, 14, 86, 59, 2, 85, 26, 72, 84, 27, 92, 97, 19, 40, 40, 95, 64, 94, 57, 99, 86, 59, 69, 65, 67, 92, 65, 9, 92, 50, 97, 47, 81, 80, 87, 36, 85, 85, 101, 57, 69, 100, 97, 97, 102, 4, 40, 31, 69, 92, 65, 101, 14, 2, 85, 5, 102, 1, 102, 101], [1, 1, 31, 1, 1, 6, 31, 6, 1, 65, 31, 31, 28, 1, 31, 6, 31, 67, 69, 51, 31, 6, 91, 6, 93, 31, 31, 28, 31, 84, 31, 90, 31, 51, 67, 31, 93, 90, 93, 1, 84, 28, 90, 31, 90, 91, 31, 100, 90, 65, 51, 90, 100, 100, 91, 100, 1, 84, 69, 84, 100, 84, 6, 65, 1, 31, 67, 31, 1, 100, 31, 69, 31, 90, 6, 6, 6, 90, 31, 31, 31, 31, 31, 84, 1, 31, 31, 100, 31, 90, 100, 1, 100, 100, 100, 100, 1, 100, 100, 100, 1, 1], nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 94, 4, 3, 22, 12, 101, 10, 34, 11, 16, 25, 8, 23, 27, 26, 100, 7, 30, 31, 43, 44, 20, 102, 47, 46, 45, 55, 57, 58, 99, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 1, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], nothing, nothing, nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 42, 4, 3, 22, 12, 35, 10, 34, 11, 16, 25, 8, 23, 27, 26, 28, 7, 30, 31, 43, 44, 20, 18, 47, 46, 45, 55, 57, 58, 13, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 67, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], nothing, nothing, nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 42, 4, 3, 22, 12, 35, 10, 34, 11, 16, 25, 8, 23, 27, 26, 28, 7, 30, 31, 43, 44, 20, 18, 47, 46, 45, 55, 57, 58, 13, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 67, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], nothing, nothing, nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 42, 4, 3, 22, 12, 35, 10, 34, 11, 16, 25, 8, 23, 27, 26, 28, 7, 30, 31, 43, 44, 20, 18, 47, 46, 45, 55, 57, 58, 13, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 67, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101], nothing, nothing, nothing, nothing, nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 42, 4, 3, 22, 12, 35, 10, 34, 11, 16, 25, 8, 23, 27, 26, 28, 7, 30, 31, 43, 44, 20, 18, 47, 46, 45, 55, 57, 58, 13, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 67, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101]])
chevieset(:G32, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G32, :WordsClassRepresentatives), :classnames => chevieget(:G32, :ClassNames), :classparams => chevieget(:G32, :ClassNames), :orders => [1, 3, 6, 3, 3, 4, 6, 12, 3, 9, 6, 6, 30, 3, 6, 12, 6, 15, 9, 24, 6, 12, 18, 12, 18, 6, 6, 10, 6, 12, 2, 12, 6, 24, 15, 6, 18, 12, 18, 3, 12, 30, 12, 6, 12, 18, 6, 6, 12, 9, 8, 12, 6, 6, 18, 6, 3, 12, 9, 12, 6, 12, 12, 9, 3, 6, 5, 6, 3, 6, 6, 9, 6, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 4, 6, 3, 6, 6, 6, 6, 3, 6, 6, 2, 3, 3], :classes => [1, 40, 360, 240, 40, 540, 1440, 2160, 480, 2880, 1440, 1440, 5184, 240, 360, 2160, 1440, 5184, 2880, 6480, 1440, 2160, 2880, 2160, 2880, 360, 360, 5184, 1440, 4320, 90, 540, 1440, 6480, 5184, 360, 2880, 2160, 2880, 480, 4320, 5184, 540, 1440, 2160, 2880, 360, 40, 2160, 2880, 6480, 2160, 240, 40, 2880, 480, 480, 4320, 2880, 540, 480, 540, 2160, 2880, 40, 360, 5184, 1440, 40, 480, 1440, 2880, 360, 2160, 540, 2160, 540, 2160, 360, 360, 90, 1440, 360, 540, 40, 360, 90, 240, 1440, 540, 40, 240, 40, 1, 240, 40, 40, 40, 1, 1, 1, 1]))
chevieset(:G32, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 80], [1, 40], [4, 61], [4, 21], [4, 11], [4, 41], [4, 51], [4, 1], [5, 36], [5, 44], [5, 4], [5, 12], [5, 52], [5, 20], [6, 48], [6, 8], [6, 28], [10, 30], [10, 2], [10, 34], [10, 42], [10, 10], [10, 14], [15, 24], [15, 6], [15, 8], [15, 16], [15, 38], [15, 22], [20, 33], [20, 12], [20, 13], [20, 9, 1], [20, 35], [20, 29, 1], [20, 3], [20, 25], [20, 31], [20, 9, 2], [20, 17], [20, 29, 2], [20, 21], [20, 7], [20, 19], [20, 5], [20, 20], [20, 16], [24, 6], [24, 26], [24, 16], [30, 12, 2], [30, 12, 1], [30, 8], [30, 28], [30, 24], [30, 4], [30, 20, 2], [30, 20, 1], [30, 16], [36, 7], [36, 27], [36, 17], [36, 5], [36, 15], [36, 25], [40, 24], [40, 14], [40, 10], [40, 18], [40, 22], [40, 8], [45, 6], [45, 14], [45, 22], [45, 18], [45, 10], [45, 26], [60, 15, 2], [60, 12], [60, 7], [60, 15, 1], [60, 17], [60, 11, 1], [60, 9], [60, 19], [60, 13], [60, 11, 2], [60, 20], [60, 16], [64, 18], [64, 21], [64, 8], [64, 16], [64, 13], [64, 11], [80, 9], [80, 13], [80, 17], [81, 12], [81, 14], [81, 10]], :opdam => #= none:25 =# @perm_str("( 93, 96)( 94, 95)(100,101,102)"), :extRefl => [1, 9, 17, 5, 3])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G32, :HeckeCharTable, function (para, root)
        local u, v, w, f1, f4, f5, f6, f10, f15, f15b, f20a, f20b, f20c, f20d, f24, f30a, f30b, f36, f40, f45, f60a, f60b, f60c, f64, f80, f81, res, a, b, c, d, e, f
        a = 1
        b = 1
        c = 1
        d = E(3)
        e = 1
        f = 1
        u = (para[1])[1]
        v = (para[1])[2]
        w = (para[1])[3]
        f1 = (u->begin
                    map((i->begin
                                u ^ length(i)
                            end), chevieget(:G32, :WordsClassRepresentatives))
                end)
        f4 = function (v, w)
                return [4, v + 3w, w * (2w + v), 2 * w * (w + v), v ^ 2 + 3 * w ^ 2, 2 * w ^ 3, w ^ 2 * (w + 2v), w ^ 2 * (w + v), w * (v * w + v ^ 2 + 2 * w ^ 2), w ^ 4, -(w ^ 11) * (-w + v) * (w ^ 7 + v * w ^ 6 + w ^ 5 * v ^ 2 + v ^ 3 * w ^ 4 + 2 * v ^ 4 * w ^ 3 + 2 * w ^ 2 * v ^ 5 + 2 * w * v ^ 6 + v ^ 7), w ^ 2 * (v * w + v ^ 2 + w ^ 2), v * w ^ 3, 2 * w ^ 2 * (v ^ 2 + w ^ 2), -(w ^ 3) * (-w + v) * (2 * w ^ 3 + 2 * v * w ^ 2 + 2 * v ^ 2 * w + v ^ 3), w ^ 3 * (w + v), -(w ^ 2) * (-w + v) * (v * w + v ^ 2 + w ^ 2), -(v ^ 2) * w ^ 6, w ^ 8, 0, w ^ 17 * (v ^ 8 * w + v ^ 9 + w ^ 9), w ^ 3 * (v ^ 2 + w ^ 2), -(v ^ 5) * w ^ 19, w ^ 10 * (w + v) * ((((v ^ 4 - w * v ^ 3) + v ^ 2 * w ^ 2) - v * w ^ 3) + w ^ 4), -(v ^ 25) * w ^ 83, -(w ^ 11) * (-w + v) * (w ^ 6 + v * w ^ 5 + v ^ 2 * w ^ 4 + v ^ 3 * w ^ 3 + 2 * w ^ 2 * v ^ 4 + 2 * w * v ^ 5 + 2 * v ^ 6), -(w ^ 4) * (-w + v) * (w + v), v ^ 3 * w ^ 9, -(w ^ 3) * (-w + v) * (v ^ 2 + w ^ 2), 0, -2 * w ^ 3 * (-w + v) * (v * w + v ^ 2 + w ^ 2), -2 * v ^ 25 * w ^ 78, -(w ^ 19) * (-w + v) * (v * w + v ^ 2 + w ^ 2) * (w ^ 9 + w ^ 6 * v ^ 3 + w ^ 3 * v ^ 6 + v ^ 8 * w + v ^ 9), 0, -(v ^ 4) * w ^ 12, -(w ^ 4) * (-w + v) * (w ^ 2 + 2 * v * w + 2 * v ^ 2), -(v ^ 5) * w ^ 23, -(v ^ 5) * w ^ 18 * (v ^ 2 + w ^ 2), -(v ^ 15) * w ^ 53, w ^ 9 * (w + v) * ((((w ^ 4 - v * w ^ 3) + v ^ 2 * w ^ 2) - w * v ^ 3) + 2 * v ^ 4), 0, v ^ 11 * w ^ 33, -2 * v ^ 5 * w ^ 18, w ^ 9 * (v * w + v ^ 2 + w ^ 2) * ((w ^ 3 - v * w ^ 2) + v ^ 3), -(v ^ 25) * w ^ 78 * (w + v), -(v ^ 25) * w ^ 79, -(w ^ 5) * (-w + v) * (w ^ 2 + v * w + 2 * v ^ 2), -(v ^ 25) * w ^ 75 * (v + 3w), -(v ^ 5) * w ^ 18 * (w + v), v ^ 20 * w ^ 64, 0, -(v ^ 25) * w ^ 78 * (v ^ 2 + w ^ 2), -2 * v ^ 5 * w ^ 17 * (v ^ 2 + w ^ 2), -(v ^ 5) * w ^ 15 * (v ^ 2 + 3 * w ^ 2), -(v ^ 15) * w ^ 49, -(v ^ 25) * w ^ 76 * (v * w + v ^ 2 + 2 * w ^ 2), w ^ 8 * (2 * v ^ 4 * w + v ^ 5 + w ^ 5), 0, v ^ 20 * w ^ 68, 0, -(v ^ 5) * w ^ 16 * (v * w + v ^ 2 + 2 * w ^ 2), 0, v ^ 10 * w ^ 33 * (w + v), v ^ 10 * w ^ 34, w ^ 8 * (3 * v ^ 4 + w ^ 4), v ^ 5 * w ^ 19 * (-w + v) * (w ^ 2 + 2 * v * w + 2 * v ^ 2), -(v ^ 6) * w ^ 18, -(v ^ 10) * w ^ 34 * (-w + v) * (w + v) * (v * w + v ^ 2 + w ^ 2), w ^ 16 * (3 * v ^ 8 + w ^ 8), -(v ^ 15) * w ^ 46 * (v * w + v ^ 2 + 2 * w ^ 2), -(v ^ 5) * w ^ 17 * (v * w + v ^ 2 + w ^ 2), v ^ 10 * w ^ 38, v ^ 5 * w ^ 20 * (-w + v) * (w ^ 2 + v * w + 2 * v ^ 2), -(v ^ 15) * w ^ 48 * (w + v), 2 * v ^ 10 * w ^ 33, v ^ 20 * w ^ 63 * (v ^ 2 + w ^ 2), 2 * v ^ 20 * w ^ 63, -(v ^ 15) * w ^ 48 * (v ^ 2 + w ^ 2), v ^ 5 * w ^ 19 * (-w + v) * (w + v), -(v ^ 10) * w ^ 34 * (-w + v) * (w ^ 2 + 2 * v * w + 2 * v ^ 2), 2 * v ^ 5 * w ^ 18 * (-w + v) * (v * w + v ^ 2 + w ^ 2), -(v ^ 5) * w ^ 17 * (w + 2v), v ^ 10 * w ^ 31 * (2w + v), 0, v ^ 20 * w ^ 60 * (v ^ 2 + 3 * w ^ 2), -(v ^ 5) * w ^ 16 * (2w + v), -2 * v ^ 10 * w ^ 33 * (-w + v) * (v * w + v ^ 2 + w ^ 2), -2 * v ^ 5 * w ^ 16 * (w + v), v ^ 10 * w ^ 32 * (w + 2v), -2 * v ^ 15 * w ^ 48, -(v ^ 25) * w ^ 75 * (v ^ 2 + 3 * w ^ 2), 2 * v ^ 10 * w ^ 31 * (w + v), -(v ^ 5) * w ^ 15 * (v + 3w), -4 * v ^ 5 * w ^ 15, -2 * v ^ 15 * w ^ 46 * (w + v), -(v ^ 15) * w ^ 45 * (v ^ 2 + 3 * w ^ 2), v ^ 10 * w ^ 30 * (v + 3w), -(v ^ 15) * w ^ 45 * (v + 3w), -4 * v ^ 25 * w ^ 75, -4 * v ^ 15 * w ^ 45, 4 * v ^ 10 * w ^ 30, 4 * v ^ 20 * w ^ 60]
            end
        f5 = function (u, v, w)
                return [5, 2u + 3w, w * (2u + w), 2 * u * w + u ^ 2 + 2 * w ^ 2, 2 * u ^ 2 + 3 * w ^ 2, w ^ 3, w * (u * w + u ^ 2 + w ^ 2), u * w ^ 2, u * w ^ 2 + u ^ 2 * w + u ^ 3 + 2 * w ^ 3, -(u ^ 2) * w ^ 2, u ^ 4 * w ^ 9 * (u * w + u ^ 2 + w ^ 2) * ((-(u ^ 4) - u * w ^ 3) + w ^ 4), w * (u * w ^ 2 + u ^ 3 + w ^ 3), 0, 2 * u ^ 2 * w ^ 2 + u ^ 4 + 2 * w ^ 4, w ^ 3 * ((-2 * u ^ 3 * w - 2 * u ^ 4) + w ^ 4), w ^ 4, w * ((((-u * w ^ 3 - u ^ 2 * w ^ 2) - u ^ 3 * w) - u ^ 4) + w ^ 4), 0, -(u ^ 4) * w ^ 4, -(u ^ 2) * w ^ 3, u ^ 8 * w ^ 13 * (u * w + u ^ 2 + w ^ 2) * ((u ^ 3 - u ^ 2 * w) + w ^ 3), w ^ 5, -(u ^ 10) * w ^ 14, u ^ 5 * w ^ 10, -(u ^ 44) * w ^ 64, u ^ 4 * w ^ 9 * ((w ^ 5 - 2 * u ^ 3 * w ^ 2) - 2 * u ^ 5), -(w ^ 3) * u ^ 2 * (2u + w), 0, w * (u * w + u ^ 2 + w ^ 2) * (((-(u ^ 3) + u ^ 2 * w) - 2 * u * w ^ 2) + w ^ 3), u ^ 6 * w ^ 6, w ^ 3 * (-4 * u ^ 3 + w ^ 3), u ^ 40 * w ^ 63, u ^ 8 * w ^ 15 * ((-(u ^ 3) - u ^ 2 * w) + w ^ 3) * (u ^ 5 + u ^ 2 * w ^ 3 + w ^ 5), -(u ^ 10) * w ^ 15, 0, w ^ 3 * ((-2 * u ^ 3 * w - 2 * u ^ 4) + w ^ 4), -(u ^ 12) * w ^ 16, u ^ 8 * w ^ 17, -(u ^ 28) * w ^ 40, u ^ 4 * w ^ 6 * (w ^ 4 + 2 * u * w ^ 3 + u ^ 2 * w ^ 2 + u ^ 4), u ^ 5 * w ^ 6, 0, u ^ 8 * w ^ 15, w ^ 7 * u ^ 4 * (u * w ^ 2 + u ^ 3 + w ^ 3), u ^ 40 * w ^ 64, -(u ^ 42) * w ^ 62, w ^ 3 * ((w ^ 5 - 2 * u ^ 3 * w ^ 2) - 2 * u ^ 5), w ^ 60 * u ^ 40 * (2u + 3w), u ^ 8 * w ^ 16, -(u ^ 34) * w ^ 50, -(u ^ 6) * w ^ 9, u ^ 40 * w ^ 65, u ^ 8 * w ^ 12 * (2 * u ^ 2 * w ^ 2 + u ^ 4 + 2 * w ^ 4), u ^ 8 * w ^ 12 * (2 * u ^ 2 + 3 * w ^ 2), -(u ^ 26) * w ^ 38, u ^ 40 * w ^ 60 * (u * w ^ 2 + u ^ 2 * w + u ^ 3 + 2 * w ^ 3), u ^ 4 * w ^ 6 * (u * w ^ 2 + u ^ 2 * w + u ^ 3 + 2 * w ^ 3), u ^ 13 * w ^ 18, -(u ^ 36) * w ^ 52, u ^ 4 * w ^ 6, u ^ 8 * w ^ 12 * (u * w ^ 2 + u ^ 2 * w + u ^ 3 + 2 * w ^ 3), u ^ 20 * w ^ 30, u ^ 16 * w ^ 28, -(u ^ 18) * w ^ 26, u ^ 4 * w ^ 6 * (2 * u ^ 2 + 3 * w ^ 2), u ^ 8 * w ^ 15 * ((-2 * u ^ 3 * w - 2 * u ^ 4) + w ^ 4), 0, u ^ 16 * w ^ 27 * (((w ^ 5 - u ^ 3 * w ^ 2) - 2 * u ^ 4 * w) - u ^ 5), u ^ 8 * w ^ 12 * (3 * w ^ 4 + 2 * u ^ 4), u ^ 24 * w ^ 36 * (u * w ^ 2 + u ^ 2 * w + u ^ 3 + 2 * w ^ 3), u ^ 8 * w ^ 13 * (u * w ^ 2 + u ^ 3 + w ^ 3), -(u ^ 20) * w ^ 28, u ^ 8 * w ^ 15 * ((w ^ 5 - 2 * u ^ 3 * w ^ 2) - 2 * u ^ 5), u ^ 24 * w ^ 40, u ^ 16 * w ^ 27, u ^ 32 * w ^ 53, u ^ 32 * w ^ 51, u ^ 24 * w ^ 41, -(w ^ 15) * u ^ 10 * (2u + w), u ^ 16 * w ^ 27 * ((-2 * u ^ 3 * w - 2 * u ^ 4) + w ^ 4), u ^ 8 * w ^ 15 * (-4 * u ^ 3 + w ^ 3), u ^ 8 * w ^ 13 * (u * w + u ^ 2 + w ^ 2), w ^ 25 * u ^ 16 * (2u + w), u ^ 12 * w ^ 18, u ^ 32 * w ^ 48 * (2 * u ^ 2 + 3 * w ^ 2), w ^ 13 * u ^ 8 * (2u + w), u ^ 16 * w ^ 27 * (-4 * u ^ 3 + w ^ 3), u ^ 8 * w ^ 12 * (2 * u * w + u ^ 2 + 2 * w ^ 2), u ^ 16 * w ^ 25 * (u * w + u ^ 2 + w ^ 2), u ^ 24 * w ^ 39, u ^ 40 * w ^ 60 * (2 * u ^ 2 + 3 * w ^ 2), u ^ 16 * w ^ 24 * (2 * u * w + u ^ 2 + 2 * w ^ 2), w ^ 12 * u ^ 8 * (2u + 3w), 5 * u ^ 8 * w ^ 12, u ^ 24 * w ^ 36 * (2 * u * w + u ^ 2 + 2 * w ^ 2), u ^ 24 * w ^ 36 * (2 * u ^ 2 + 3 * w ^ 2), w ^ 24 * u ^ 16 * (2u + 3w), w ^ 36 * u ^ 24 * (2u + 3w), 5 * u ^ 40 * w ^ 60, 5 * u ^ 24 * w ^ 36, 5 * u ^ 16 * w ^ 24, 5 * u ^ 32 * w ^ 48]
            end
        f6 = function (v, w)
                return [6, 3v + 3w, (w + v) ^ 2, 4 * v * w + v ^ 2 + w ^ 2, 3 * v ^ 2 + 3 * w ^ 2, (w + v) * ((v ^ 2 - v * w) + w ^ 2), 2 * v * w * (w + v), v * w * (w + v), (w + v) * (v * w + v ^ 2 + w ^ 2), 0, w ^ 4 * v ^ 4 * (w + v) * ((((((((((w ^ 10 - v * w ^ 9) + v ^ 2 * w ^ 8) - 2 * v ^ 3 * w ^ 7) + v ^ 4 * w ^ 6) - v ^ 5 * w ^ 5) + v ^ 6 * w ^ 4) - 2 * v ^ 7 * w ^ 3) + v ^ 8 * w ^ 2) - v ^ 9 * w) + v ^ 10), v * w * (w + v) ^ 2, v ^ 2 * w ^ 2, 4 * v ^ 2 * w ^ 2 + v ^ 4 + w ^ 4, (w + v) * (-(w ^ 3) + v * w ^ 2 + v ^ 3) * ((-(w ^ 3) - v ^ 2 * w) + v ^ 3), v * w * (v ^ 2 + w ^ 2), -(v ^ 2) * w ^ 2 * (w + v), w ^ 4 * v ^ 4, 0, 0, v ^ 8 * w ^ 8 * ((v ^ 2 - v * w) + w ^ 2) * ((w ^ 6 - v ^ 3 * w ^ 3) + v ^ 6) * (w + v) ^ 2, v ^ 2 * w ^ 2 * (w + v), 0, v ^ 5 * w ^ 5 * (w + v) * ((((v ^ 4 - w * v ^ 3) + v ^ 2 * w ^ 2) - v * w ^ 3) + w ^ 4), 0, w ^ 4 * v ^ 4 * (((w ^ 10 - 2 * v ^ 3 * w ^ 7) - 2 * v ^ 7 * w ^ 3) + v ^ 10), -(v ^ 2) * w ^ 2 * (v ^ 2 + w ^ 2), v ^ 6 * w ^ 6, -v * w * (v ^ 2 + w ^ 2) * ((v ^ 2 - v * w) + w ^ 2), v ^ 5 * w ^ 7 + v ^ 7 * w ^ 5, -4 * v ^ 3 * w ^ 3 + v ^ 6 + w ^ 6, v ^ 50 * w ^ 50 * (w + v) * ((v ^ 2 - v * w) + w ^ 2), v ^ 8 * w ^ 8 * (w + v) * ((((((((((((((w ^ 14 - w ^ 13 * v) + w ^ 12 * v ^ 2) - 2 * v ^ 3 * w ^ 11) + v ^ 4 * w ^ 10) - v ^ 5 * w ^ 9) + w ^ 8 * v ^ 6) - v ^ 7 * w ^ 7) + w ^ 6 * v ^ 8) - v ^ 9 * w ^ 5) + v ^ 10 * w ^ 4) - 2 * w ^ 3 * v ^ 11) + w ^ 2 * v ^ 12) - w * v ^ 13) + v ^ 14), 0, v ^ 8 * w ^ 8, v * w * (w + v) * ((((w ^ 4 - v * w ^ 3) - v ^ 2 * w ^ 2) - w * v ^ 3) + v ^ 4), 0, v ^ 12 * w ^ 12 * (w + v), 0, w ^ 4 * v ^ 4 * (v * w + v ^ 2 + w ^ 2) * (((w ^ 4 + v * w ^ 3) - 2 * v ^ 2 * w ^ 2) + w * v ^ 3 + v ^ 4), v ^ 5 * w ^ 5 * (v + w), v ^ 22 * w ^ 22, v ^ 10 * w ^ 10 * (w + v) * ((v ^ 2 - v * w) + w ^ 2), w ^ 4 * v ^ 4 * ((((v ^ 4 - w * v ^ 3) + v ^ 2 * w ^ 2) - v * w ^ 3) + w ^ 4) * (w + v) ^ 2, v ^ 51 * w ^ 51 * (v ^ 2 + w ^ 2), 0, v ^ 2 * w ^ 2 * (((w ^ 4 - 2 * v * w ^ 3) - 2 * w * v ^ 3) + v ^ 4), 3 * v ^ 50 * w ^ 50 * (w + v), v ^ 11 * w ^ 11 * (v ^ 2 + w ^ 2), 0, 0, v ^ 52 * w ^ 52 * (w + v), v ^ 10 * w ^ 10 * (4 * v ^ 2 * w ^ 2 + v ^ 4 + w ^ 4), 3 * v ^ 10 * w ^ 10 * (v ^ 2 + w ^ 2), 0, v ^ 50 * w ^ 50 * (w + v) * (v * w + v ^ 2 + w ^ 2), w ^ 4 * v ^ 4 * (w + v) * (v * w + v ^ 2 + w ^ 2) * ((2 * w ^ 2 - 3 * v * w) + 2 * v ^ 2), v ^ 15 * w ^ 15 * (v + w), 0, 2 * v ^ 5 * w ^ 5, v ^ 10 * w ^ 10 * (w + v) * (v * w + v ^ 2 + w ^ 2), 2 * v ^ 25 * w ^ 25, v ^ 21 * w ^ 21 * (v ^ 2 + w ^ 2), 0, 3 * w ^ 4 * v ^ 4 * (w ^ 4 + v ^ 4), v ^ 11 * w ^ 11 * (w + v) * ((((w ^ 4 - v * w ^ 3) - v ^ 2 * w ^ 2) - w * v ^ 3) + v ^ 4), v ^ 12 * w ^ 12, v ^ 21 * w ^ 21 * ((((w ^ 6 - v ^ 2 * w ^ 4) - 2 * v ^ 3 * w ^ 3) - w ^ 2 * v ^ 4) + v ^ 6), 3 * v ^ 8 * w ^ 8 * (w ^ 8 + v ^ 8), v ^ 30 * w ^ 30 * (w + v) * (v * w + v ^ 2 + w ^ 2), v ^ 11 * w ^ 11 * (w + v) ^ 2, 0, v ^ 12 * w ^ 12 * (((w ^ 4 - 2 * v * w ^ 3) - 2 * w * v ^ 3) + v ^ 4), v ^ 31 * w ^ 31 * (v ^ 2 + w ^ 2), v ^ 20 * w ^ 20 * (w + v) * ((v ^ 2 - v * w) + w ^ 2), v ^ 42 * w ^ 42 * (w + v), v ^ 40 * w ^ 40 * (w + v) * ((v ^ 2 - v * w) + w ^ 2), v ^ 32 * w ^ 32 * (w + v), -(v ^ 12) * w ^ 12 * (v ^ 2 + w ^ 2), v ^ 21 * w ^ 21 * (w + v) * ((((w ^ 4 - v * w ^ 3) - v ^ 2 * w ^ 2) - w * v ^ 3) + v ^ 4), v ^ 10 * w ^ 10 * (-4 * v ^ 3 * w ^ 3 + v ^ 6 + w ^ 6), 2 * v ^ 11 * w ^ 11 * (w + v), v ^ 20 * w ^ 20 * (w + v) ^ 2, 2 * v ^ 15 * w ^ 15, 3 * v ^ 40 * w ^ 40 * (v ^ 2 + w ^ 2), v ^ 10 * w ^ 10 * (w + v) ^ 2, v ^ 20 * w ^ 20 * (-4 * v ^ 3 * w ^ 3 + v ^ 6 + w ^ 6), v ^ 10 * w ^ 10 * (4 * v * w + v ^ 2 + w ^ 2), 2 * v ^ 21 * w ^ 21 * (w + v), v ^ 30 * w ^ 30 * (w + v) * ((v ^ 2 - v * w) + w ^ 2), 3 * v ^ 50 * w ^ 50 * (v ^ 2 + w ^ 2), v ^ 20 * w ^ 20 * (4 * v * w + v ^ 2 + w ^ 2), 3 * v ^ 10 * w ^ 10 * (w + v), 6 * v ^ 10 * w ^ 10, v ^ 30 * w ^ 30 * (4 * v * w + v ^ 2 + w ^ 2), 3 * v ^ 30 * w ^ 30 * (v ^ 2 + w ^ 2), 3 * v ^ 20 * w ^ 20 * (w + v), 3 * v ^ 30 * w ^ 30 * (w + v), 6 * v ^ 50 * w ^ 50, 6 * v ^ 30 * w ^ 30, 6 * v ^ 20 * w ^ 20, 6 * v ^ 40 * w ^ 40]
            end
        f10 = function (u, v, w)
                return [10, u + 6v + 3w, v * (2w + 3v), 2 * u * v + 4 * v * w + 3 * v ^ 2 + w ^ 2, u ^ 2 + 6 * v ^ 2 + 3 * w ^ 2, v * (-u * w + 3 * v ^ 2), v * (u * v + w ^ 2 + 2 * v * w + v ^ 2), v ^ 2 * (w + v), u * v ^ 2 + 2 * v * w ^ 2 + u ^ 2 * v + 2 * v ^ 2 * w + 3 * v ^ 3 + w ^ 3, v ^ 4, v ^ 8 * (((((-v * u ^ 2 * w ^ 8 - v ^ 2 * u ^ 2 * w ^ 7) + v ^ 5 * u ^ 2 * w ^ 4 + u ^ 4 * w ^ 7 + v * u ^ 4 * w ^ 6 + u ^ 5 * w ^ 6) - v ^ 3 * w ^ 8) - v ^ 4 * w ^ 7) + v ^ 7 * w ^ 4 + v ^ 11), v * (w ^ 3 + u ^ 2 * v + v * w ^ 2 + v ^ 2 * w + v ^ 3), 0, 2 * u ^ 2 * v ^ 2 + 4 * v ^ 2 * w ^ 2 + 3 * v ^ 4 + w ^ 4, v ^ 2 * ((((u ^ 2 * w ^ 3 + u ^ 2 * v * w ^ 2 + u ^ 3 * w ^ 2) - 2 * v * w ^ 4) - 2 * v ^ 2 * w ^ 3) + 3 * v ^ 5), v ^ 2 * (-u * w + u * v + v * w + v ^ 2), v * ((((u * v ^ 3 - w ^ 4) + u ^ 2 * w ^ 2 + u ^ 2 * v ^ 2) - v * w ^ 3) + v ^ 4), 0, v ^ 8, 0, v ^ 13 * (u ^ 4 * w ^ 9 + v * u ^ 4 * w ^ 8 + v ^ 4 * w ^ 9 + v ^ 5 * w ^ 8 + v ^ 13), v ^ 3 * (-u * w + u ^ 2 + w ^ 2 + v ^ 2), u ^ 2 * v ^ 16 * w ^ 6, v ^ 10 * (w + v) * ((((v ^ 4 - w * v ^ 3) + v ^ 2 * w ^ 2) - v * w ^ 3) + w ^ 4), u ^ 10 * v ^ 68 * w ^ 30, v ^ 8 * (((-2 * v * u ^ 2 * w ^ 7 + v ^ 4 * u ^ 2 * w ^ 4 + 3 * u ^ 4 * w ^ 6) - 2 * v ^ 3 * w ^ 7) + v ^ 6 * w ^ 4 + v ^ 10), v ^ 3 * ((2 * u * w ^ 2 - v * w ^ 2) + v ^ 3), 0, v * (((((-(w ^ 5) + u ^ 2 * v * w ^ 2 + 2 * u ^ 2 * v ^ 3) - 2 * v ^ 2 * w ^ 3) + 2 * v ^ 3 * w ^ 2) - v ^ 4 * w) + v ^ 5), -u * v ^ 6 * w ^ 3 * (w ^ 2 + v ^ 2), v ^ 2 * ((3 * u ^ 2 * w ^ 2 - 4 * v * w ^ 3) + 3 * v ^ 4), v ^ 61 * w ^ 30 * u ^ 10 * (-u * w + 3 * v ^ 2), v ^ 14 * (((((-v * u ^ 4 * w ^ 12 - v ^ 2 * u ^ 4 * w ^ 11) + v ^ 5 * u ^ 4 * w ^ 8 + u ^ 6 * w ^ 11 + v * u ^ 6 * w ^ 10 + u ^ 7 * w ^ 10) - v ^ 5 * w ^ 12) - v ^ 6 * w ^ 11) + v ^ 9 * w ^ 8 + v ^ 17), 0, 0, v ^ 3 * ((((u * v ^ 3 + 3 * u ^ 2 * w ^ 2) - 2 * w ^ 4) - 2 * v * w ^ 3) + w * v ^ 3 + v ^ 4), u ^ 2 * v ^ 20 * w ^ 6, u ^ 2 * v ^ 15 * w ^ 6 * (-u * w + u ^ 2 + w ^ 2 + v ^ 2), u ^ 6 * v ^ 44 * w ^ 18, v ^ 6 * (u ^ 2 * w ^ 6 + 2 * v * u ^ 2 * w ^ 5 + v ^ 2 * u ^ 2 * w ^ 4 + 2 * v * u ^ 3 * w ^ 4 + 2 * v ^ 3 * w ^ 5 + w ^ 4 * v ^ 4 + v ^ 8), -u * v ^ 6 * w ^ 3 * (v + w), 0, v ^ 13 * w ^ 6 * u ^ 2 * (-u * w + 3 * v ^ 2), v ^ 7 * (u ^ 2 * w ^ 5 + v * u ^ 2 * w ^ 4 + w ^ 5 * v ^ 2 + v ^ 3 * w ^ 4 + v ^ 7), v ^ 62 * w ^ 30 * u ^ 10 * (-u * w + u * v + v * w + v ^ 2), u ^ 10 * v ^ 64 * w ^ 30, v ^ 3 * ((((3 * u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 3) - 2 * w ^ 5) - 2 * v ^ 2 * w ^ 3) + v ^ 3 * w ^ 2 + v ^ 5), v ^ 60 * u ^ 10 * w ^ 30 * (u + 6v + 3w), v ^ 14 * w ^ 6 * u ^ 2 * (-u * w + u * v + v * w + v ^ 2), u ^ 8 * v ^ 52 * w ^ 24, 0, u ^ 10 * v ^ 63 * w ^ 30 * (-u * w + u ^ 2 + w ^ 2 + v ^ 2), u ^ 2 * v ^ 12 * w ^ 6 * (2 * u ^ 2 * v ^ 2 + 4 * v ^ 2 * w ^ 2 + 3 * v ^ 4 + w ^ 4), u ^ 2 * v ^ 12 * w ^ 6 * (u ^ 2 + 6 * v ^ 2 + 3 * w ^ 2), u ^ 6 * v ^ 40 * w ^ 18, u ^ 10 * v ^ 60 * w ^ 30 * (u * v ^ 2 + 2 * v * w ^ 2 + u ^ 2 * v + 2 * v ^ 2 * w + 3 * v ^ 3 + w ^ 3), v ^ 6 * (2 * u ^ 2 * w ^ 5 + 3 * v * u ^ 2 * w ^ 4 + u ^ 3 * w ^ 4 + w ^ 5 * v ^ 2 + 2 * v ^ 3 * w ^ 4 + v ^ 7), -(u ^ 3) * v ^ 18 * w ^ 9 * (v + w), u ^ 8 * v ^ 56 * w ^ 24, -2 * u * v ^ 6 * w ^ 3, u ^ 2 * v ^ 12 * w ^ 6 * (u * v ^ 2 + 2 * v * w ^ 2 + u ^ 2 * v + 2 * v ^ 2 * w + 3 * v ^ 3 + w ^ 3), -2 * u ^ 5 * v ^ 30 * w ^ 15, v ^ 26 * w ^ 12 * u ^ 4 * (-u * w + u * v + v * w + v ^ 2), u ^ 4 * v ^ 28 * w ^ 12, v ^ 6 * (6 * u ^ 2 * w ^ 4 + 3 * v ^ 2 * w ^ 4 + v ^ 6), u ^ 2 * v ^ 15 * w ^ 6 * ((((u * v ^ 3 + 3 * u ^ 2 * w ^ 2) - 2 * w ^ 4) - 2 * v * w ^ 3) + w * v ^ 3 + v ^ 4), 0, u ^ 4 * v ^ 27 * w ^ 12 * (((-(w ^ 5) - 2 * v * w ^ 4) - v ^ 2 * w ^ 3) + v ^ 4 * w + v ^ 5 + u * v ^ 4 + u ^ 2 * w ^ 3 + u ^ 2 * v * w ^ 2 + u ^ 3 * w ^ 2), v ^ 12 * (6 * u ^ 4 * w ^ 8 + 3 * v ^ 4 * w ^ 8 + v ^ 12), u ^ 6 * v ^ 36 * w ^ 18 * (u * v ^ 2 + 2 * v * w ^ 2 + u ^ 2 * v + 2 * v ^ 2 * w + 3 * v ^ 3 + w ^ 3), u ^ 2 * v ^ 13 * w ^ 6 * (w ^ 3 + u ^ 2 * v + v * w ^ 2 + v ^ 2 * w + v ^ 3), u ^ 4 * v ^ 32 * w ^ 12, u ^ 2 * v ^ 15 * w ^ 6 * ((((3 * u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 3) - 2 * w ^ 5) - 2 * v ^ 2 * w ^ 3) + v ^ 3 * w ^ 2 + v ^ 5), v ^ 38 * w ^ 18 * u ^ 6 * (-u * w + u * v + v * w + v ^ 2), v ^ 25 * w ^ 12 * u ^ 4 * (-u * w + 3 * v ^ 2), u ^ 8 * v ^ 51 * w ^ 24 * (-u * w + u ^ 2 + w ^ 2 + v ^ 2), v ^ 49 * w ^ 24 * u ^ 8 * (-u * w + 3 * v ^ 2), u ^ 6 * v ^ 39 * w ^ 18 * (-u * w + u ^ 2 + w ^ 2 + v ^ 2), u ^ 2 * v ^ 15 * w ^ 6 * ((2 * u * w ^ 2 - v * w ^ 2) + v ^ 3), u ^ 4 * v ^ 27 * w ^ 12 * ((((u * v ^ 3 + 3 * u ^ 2 * w ^ 2) - 2 * w ^ 4) - 2 * v * w ^ 3) + w * v ^ 3 + v ^ 4), u ^ 2 * v ^ 14 * w ^ 6 * ((3 * u ^ 2 * w ^ 2 - 4 * v * w ^ 3) + 3 * v ^ 4), u ^ 2 * v ^ 13 * w ^ 6 * (u * v + w ^ 2 + 2 * v * w + v ^ 2), v ^ 25 * u ^ 4 * w ^ 12 * (2w + 3v), -2 * u ^ 3 * v ^ 18 * w ^ 9, u ^ 8 * v ^ 48 * w ^ 24 * (u ^ 2 + 6 * v ^ 2 + 3 * w ^ 2), v ^ 13 * u ^ 2 * w ^ 6 * (2w + 3v), u ^ 4 * v ^ 26 * w ^ 12 * ((3 * u ^ 2 * w ^ 2 - 4 * v * w ^ 3) + 3 * v ^ 4), u ^ 2 * v ^ 12 * w ^ 6 * (2 * u * v + 4 * v * w + 3 * v ^ 2 + w ^ 2), u ^ 4 * v ^ 25 * w ^ 12 * (u * v + w ^ 2 + 2 * v * w + v ^ 2), v ^ 37 * w ^ 18 * u ^ 6 * (-u * w + 3 * v ^ 2), u ^ 10 * v ^ 60 * w ^ 30 * (u ^ 2 + 6 * v ^ 2 + 3 * w ^ 2), u ^ 4 * v ^ 24 * w ^ 12 * (2 * u * v + 4 * v * w + 3 * v ^ 2 + w ^ 2), v ^ 12 * u ^ 2 * w ^ 6 * (u + 6v + 3w), 10 * u ^ 2 * v ^ 12 * w ^ 6, u ^ 6 * v ^ 36 * w ^ 18 * (2 * u * v + 4 * v * w + 3 * v ^ 2 + w ^ 2), u ^ 6 * v ^ 36 * w ^ 18 * (u ^ 2 + 6 * v ^ 2 + 3 * w ^ 2), v ^ 24 * u ^ 4 * w ^ 12 * (u + 6v + 3w), v ^ 36 * u ^ 6 * w ^ 18 * (u + 6v + 3w), 10 * u ^ 10 * v ^ 60 * w ^ 30, 10 * u ^ 6 * v ^ 36 * w ^ 18, 10 * u ^ 4 * v ^ 24 * w ^ 12, 10 * u ^ 8 * v ^ 48 * w ^ 24]
            end
        f15 = function (u, v, w)
                return [15, 3u + 6v + 6w, (v + w) ^ 2, 2 * u * v + 2 * u * w + 4 * v * w + u ^ 2 + 3 * v ^ 2 + 3 * w ^ 2, 3 * u ^ 2 + 6 * v ^ 2 + 6 * w ^ 2, -3 * u * v * w + v ^ 3 + w ^ 3, (v + w) * (v ^ 2 + w ^ 2), -u * v * w, u * v ^ 2 + u * w ^ 2 + 2 * v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 2 * v ^ 2 * w + u ^ 3 + 3 * v ^ 3 + 3 * w ^ 3, 0, u ^ 2 * v ^ 4 * w ^ 4 * (((((w ^ 9 - w ^ 6 * v ^ 3) - w ^ 5 * v ^ 4) - w ^ 4 * v ^ 5) - w ^ 3 * v ^ 6) + v ^ 9 + w ^ 5 * v ^ 2 * u ^ 2 + w ^ 4 * v ^ 3 * u ^ 2 + w ^ 3 * u ^ 2 * v ^ 4 + w ^ 2 * u ^ 2 * v ^ 5 + w ^ 4 * v ^ 2 * u ^ 3 + w ^ 2 * u ^ 3 * v ^ 4 + w ^ 3 * v ^ 2 * u ^ 4 + w ^ 2 * v ^ 3 * u ^ 4 + w ^ 2 * v ^ 2 * u ^ 5), ((v ^ 2 - v * w) + w ^ 2) * (v + w) ^ 2, 0, 2 * u ^ 2 * v ^ 2 + 2 * u ^ 2 * w ^ 2 + 4 * v ^ 2 * w ^ 2 + u ^ 4 + 3 * v ^ 4 + 3 * w ^ 4, (((3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2 + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * v ^ 3 * w ^ 4) - 2 * v ^ 4 * w ^ 3) + v ^ 7 + w ^ 7, ((-u * v * w ^ 2 - u * v ^ 2 * w) - u ^ 2 * v * w) + v ^ 4 + w ^ 4, (((u * v ^ 2 * w ^ 2 - v * w ^ 4) + u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w + u ^ 2 * v ^ 3 + u ^ 2 * w ^ 3 + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2) - v ^ 4 * w) + v ^ 5 + w ^ 5, 0, 0, u * v ^ 2 * w ^ 2, u ^ 4 * v ^ 8 * w ^ 8 * ((((v ^ 4 - v ^ 3 * w) + v ^ 2 * w ^ 2) - v * w ^ 3) + w ^ 4) * (v + w) ^ 2, ((-u * v * w ^ 3 - u * v ^ 3 * w) - u ^ 3 * v * w) + v ^ 5 + w ^ 5, 0, -(u ^ 5) * v ^ 5 * w ^ 5, 0, u ^ 2 * v ^ 4 * w ^ 4 * (((((3 * u ^ 2 * v ^ 2 * w ^ 4 + 3 * u ^ 2 * v ^ 4 * w ^ 2) - 2 * v ^ 3 * w ^ 5) + 3 * u ^ 4 * v ^ 2 * w ^ 2) - 2 * v ^ 5 * w ^ 3) + v ^ 8 + w ^ 8), u * v ^ 2 * w ^ 2 * (2v + 2w + 3u), 0, ((((-v * w ^ 5 + 3 * u ^ 2 * v ^ 2 * w ^ 2 + u ^ 2 * v ^ 4 + u ^ 2 * w ^ 4 + v ^ 2 * w ^ 4) - 2 * v ^ 3 * w ^ 3) + u ^ 4 * v ^ 2 + u ^ 4 * w ^ 2 + v ^ 4 * w ^ 2) - v ^ 5 * w) + v ^ 6 + w ^ 6, u ^ 2 * v ^ 4 * w ^ 4 * (w ^ 2 + v ^ 2 + u ^ 2), (9 * u ^ 2 * v ^ 2 * w ^ 2 - 4 * v ^ 3 * w ^ 3) + v ^ 6 + w ^ 6, -(u ^ 20) * v ^ 40 * w ^ 40 * ((3 * u * v * w - v ^ 3) - w ^ 3), u ^ 4 * v ^ 8 * w ^ 8 * (((((w ^ 11 - w ^ 8 * v ^ 3) - w ^ 7 * v ^ 4) - w ^ 4 * v ^ 7) - w ^ 3 * v ^ 8) + v ^ 11 + w ^ 7 * v ^ 2 * u ^ 2 + w ^ 6 * v ^ 3 * u ^ 2 + w ^ 3 * v ^ 6 * u ^ 2 + w ^ 2 * u ^ 2 * v ^ 7 + w ^ 6 * v ^ 2 * u ^ 3 + w ^ 2 * v ^ 6 * u ^ 3 + w ^ 3 * v ^ 2 * u ^ 6 + w ^ 2 * v ^ 3 * u ^ 6 + u ^ 7 * v ^ 2 * w ^ 2), u ^ 5 * v ^ 10 * w ^ 10, 0, (((3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2 + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * v ^ 3 * w ^ 4) - 2 * v ^ 4 * w ^ 3) + v ^ 7 + w ^ 7, 0, -(u ^ 4) * v ^ 8 * w ^ 8 * (((u * v * w ^ 3 + u * v ^ 3 * w + u ^ 3 * v * w) - v ^ 5) - w ^ 5), 0, u ^ 2 * v ^ 4 * w ^ 4 * (w ^ 4 + 2 * v * w ^ 3 + 2 * v ^ 2 * w ^ 2 + 2 * v ^ 3 * w + v ^ 4 + 2 * w ^ 3 * u + 2 * v ^ 3 * u + u ^ 2 * w ^ 2 + u ^ 2 * v ^ 2 + u ^ 4), u ^ 2 * v ^ 4 * w ^ 4 * (u + v + w), 0, -(u ^ 4) * v ^ 8 * w ^ 8 * ((3 * u * v * w - v ^ 3) - w ^ 3), u ^ 2 * v ^ 4 * w ^ 4 * ((v ^ 2 - v * w) + w ^ 2) * (v + w) ^ 2, -(u ^ 20) * v ^ 40 * w ^ 40 * (((u * v * w ^ 2 + u * v ^ 2 * w + u ^ 2 * v * w) - v ^ 4) - w ^ 4), 0, ((((3 * u ^ 2 * v ^ 2 * w ^ 4 + 3 * u ^ 2 * v ^ 4 * w ^ 2) - 2 * v ^ 3 * w ^ 5) + 3 * u ^ 4 * v ^ 2 * w ^ 2) - 2 * v ^ 5 * w ^ 3) + v ^ 8 + w ^ 8, 3 * u ^ 20 * v ^ 40 * w ^ 40 * (2v + 2w + u), -(u ^ 4) * v ^ 8 * w ^ 8 * (((u * v * w ^ 2 + u * v ^ 2 * w + u ^ 2 * v * w) - v ^ 4) - w ^ 4), 0, u ^ 3 * v ^ 6 * w ^ 6, -(u ^ 20) * v ^ 40 * w ^ 40 * (((u * v * w ^ 3 + u * v ^ 3 * w + u ^ 3 * v * w) - v ^ 5) - w ^ 5), u ^ 4 * v ^ 8 * w ^ 8 * (2 * u ^ 2 * v ^ 2 + 2 * u ^ 2 * w ^ 2 + 4 * v ^ 2 * w ^ 2 + u ^ 4 + 3 * v ^ 4 + 3 * w ^ 4), 3 * u ^ 4 * v ^ 8 * w ^ 8 * (u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2), 0, u ^ 20 * v ^ 40 * w ^ 40 * (u * v ^ 2 + u * w ^ 2 + 2 * v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 2 * v ^ 2 * w + u ^ 3 + 3 * v ^ 3 + 3 * w ^ 3), u ^ 2 * v ^ 4 * w ^ 4 * (u * v ^ 2 + u * w ^ 2 + 2 * v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 2 * v ^ 2 * w + u ^ 3 + 3 * v ^ 3 + 3 * w ^ 3), u ^ 6 * v ^ 12 * w ^ 12 * (v + w + u), 0, 3 * u ^ 2 * v ^ 4 * w ^ 4, u ^ 4 * v ^ 8 * w ^ 8 * (u * v ^ 2 + u * w ^ 2 + 2 * v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 2 * v ^ 2 * w + u ^ 3 + 3 * v ^ 3 + 3 * w ^ 3), 3 * u ^ 10 * v ^ 20 * w ^ 20, -(u ^ 8) * v ^ 16 * w ^ 16 * (((u * v * w ^ 2 + u * v ^ 2 * w + u ^ 2 * v * w) - v ^ 4) - w ^ 4), 0, 3 * u ^ 2 * v ^ 4 * w ^ 4 * (u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2), u ^ 4 * v ^ 8 * w ^ 8 * ((((3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2 + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * v ^ 3 * w ^ 4) - 2 * v ^ 4 * w ^ 3) + v ^ 7 + w ^ 7), 0, u ^ 8 * v ^ 16 * w ^ 16 * ((((w ^ 8 - v ^ 3 * w ^ 5) - 2 * v ^ 4 * w ^ 4) - v ^ 5 * w ^ 3) + v ^ 8 + u ^ 2 * v ^ 2 * w ^ 4 + 2 * w ^ 3 * v ^ 3 * u ^ 2 + u ^ 2 * v ^ 4 * w ^ 2 + 2 * w ^ 3 * v ^ 2 * u ^ 3 + 2 * w ^ 2 * v ^ 3 * u ^ 3 + u ^ 4 * v ^ 2 * w ^ 2), 3 * u ^ 4 * v ^ 8 * w ^ 8 * (2 * w ^ 4 + 2 * v ^ 4 + u ^ 4), u ^ 12 * v ^ 24 * w ^ 24 * (u * v ^ 2 + u * w ^ 2 + 2 * v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 2 * v ^ 2 * w + u ^ 3 + 3 * v ^ 3 + 3 * w ^ 3), u ^ 4 * v ^ 8 * w ^ 8 * ((v ^ 2 - v * w) + w ^ 2) * (v + w) ^ 2, 0, u ^ 4 * v ^ 8 * w ^ 8 * (((((3 * u ^ 2 * v ^ 2 * w ^ 4 + 3 * u ^ 2 * v ^ 4 * w ^ 2) - 2 * v ^ 3 * w ^ 5) + 3 * u ^ 4 * v ^ 2 * w ^ 2) - 2 * v ^ 5 * w ^ 3) + v ^ 8 + w ^ 8), -(u ^ 12) * v ^ 24 * w ^ 24 * (((u * v * w ^ 2 + u * v ^ 2 * w + u ^ 2 * v * w) - v ^ 4) - w ^ 4), -(u ^ 8) * v ^ 16 * w ^ 16 * ((3 * u * v * w - v ^ 3) - w ^ 3), -(u ^ 16) * v ^ 32 * w ^ 32 * (((u * v * w ^ 3 + u * v ^ 3 * w + u ^ 3 * v * w) - v ^ 5) - w ^ 5), -(u ^ 16) * v ^ 32 * w ^ 32 * ((3 * u * v * w - v ^ 3) - w ^ 3), -(u ^ 12) * v ^ 24 * w ^ 24 * (((u * v * w ^ 3 + u * v ^ 3 * w + u ^ 3 * v * w) - v ^ 5) - w ^ 5), u ^ 5 * v ^ 10 * w ^ 10 * (2v + 2w + 3u), u ^ 8 * v ^ 16 * w ^ 16 * ((((3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2 + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * v ^ 3 * w ^ 4) - 2 * v ^ 4 * w ^ 3) + v ^ 7 + w ^ 7), u ^ 4 * v ^ 8 * w ^ 8 * ((9 * u ^ 2 * v ^ 2 * w ^ 2 - 4 * v ^ 3 * w ^ 3) + v ^ 6 + w ^ 6), u ^ 4 * v ^ 8 * w ^ 8 * (v + w) * (v ^ 2 + w ^ 2), u ^ 8 * v ^ 16 * w ^ 16 * (v + w) ^ 2, 3 * u ^ 6 * v ^ 12 * w ^ 12, 3 * u ^ 16 * v ^ 32 * w ^ 32 * (u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2), u ^ 4 * v ^ 8 * w ^ 8 * (v + w) ^ 2, u ^ 8 * v ^ 16 * w ^ 16 * ((9 * u ^ 2 * v ^ 2 * w ^ 2 - 4 * v ^ 3 * w ^ 3) + v ^ 6 + w ^ 6), u ^ 4 * v ^ 8 * w ^ 8 * (2 * u * v + 2 * u * w + 4 * v * w + u ^ 2 + 3 * v ^ 2 + 3 * w ^ 2), u ^ 8 * v ^ 16 * w ^ 16 * (v + w) * (v ^ 2 + w ^ 2), -(u ^ 12) * v ^ 24 * w ^ 24 * ((3 * u * v * w - v ^ 3) - w ^ 3), 3 * u ^ 20 * v ^ 40 * w ^ 40 * (u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2), u ^ 8 * v ^ 16 * w ^ 16 * (2 * u * v + 2 * u * w + 4 * v * w + u ^ 2 + 3 * v ^ 2 + 3 * w ^ 2), 3 * u ^ 4 * v ^ 8 * w ^ 8 * (2v + 2w + u), 15 * u ^ 4 * v ^ 8 * w ^ 8, u ^ 12 * v ^ 24 * w ^ 24 * (2 * u * v + 2 * u * w + 4 * v * w + u ^ 2 + 3 * v ^ 2 + 3 * w ^ 2), 3 * u ^ 12 * v ^ 24 * w ^ 24 * (u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2), 3 * u ^ 8 * v ^ 16 * w ^ 16 * (2v + 2w + u), 3 * u ^ 12 * v ^ 24 * w ^ 24 * (2v + 2w + u), 15 * u ^ 20 * v ^ 40 * w ^ 40, 15 * u ^ 12 * v ^ 24 * w ^ 24, 15 * u ^ 8 * v ^ 16 * w ^ 16, 15 * u ^ 16 * v ^ 32 * w ^ 32]
            end
        f15b = function (u, v, w)
                return [15, 9u + 3v + 3w, 2 * u * (v + w + 2u), 4 * u * v + 4 * u * w + 2 * v * w + 5 * u ^ 2, 9 * u ^ 2 + 3 * v ^ 2 + 3 * w ^ 2, u * (-v * w + 4 * u ^ 2), 2 * u * (w + u) * (u + v), u ^ 2 * (v + w + u), 2 * u * v ^ 2 + 2 * u * w ^ 2 + v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + v ^ 2 * w + 5 * u ^ 3, u ^ 2 * (-v * w + u ^ 2), u ^ 8 * (((((((((((v ^ 5 * w ^ 6 + v ^ 6 * w ^ 5) - u * v ^ 3 * w ^ 7) + u * v ^ 5 * w ^ 5) - u * v ^ 7 * w ^ 3) - w ^ 6 * v ^ 3 * u ^ 2) - w ^ 3 * v ^ 6 * u ^ 2) - u ^ 3 * v ^ 8) - u ^ 3 * w ^ 8) - u ^ 4 * v ^ 7) - u ^ 4 * w ^ 7) + u ^ 5 * v ^ 3 * w ^ 3 + u ^ 7 * v ^ 4 + u ^ 7 * w ^ 4 + u ^ 11), u * (v * w ^ 2 + v ^ 2 * w + u * v ^ 2 + u * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 2 * u ^ 3), 0, 4 * u ^ 2 * v ^ 2 + 4 * u ^ 2 * w ^ 2 + 2 * v ^ 2 * w ^ 2 + 5 * u ^ 4, u ^ 2 * ((((((w ^ 3 * v ^ 2 + v ^ 3 * w ^ 2 + u * v ^ 2 * w ^ 2) - 2 * u * v ^ 4) - 2 * u * w ^ 4) - 2 * u ^ 2 * v ^ 3) - 2 * u ^ 2 * w ^ 3) + 4 * u ^ 5), u ^ 2 * (-v * w + u * v + u * w + 2 * u ^ 2), u * ((((((-v * w ^ 3 + v ^ 2 * w ^ 2) - v ^ 3 * w) - v ^ 3 * u) - w ^ 3 * u) - 2 * u ^ 2 * v * w) + u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + 2 * u ^ 4), 0, u ^ 4 * (-v * w + u ^ 2) * (u ^ 2 + v * w), -(u ^ 3) * v * w, u ^ 13 * (v ^ 6 * w ^ 7 + v ^ 7 * w ^ 6 + u * v ^ 6 * w ^ 6 + u ^ 4 * v ^ 9 + u ^ 4 * w ^ 9 + u ^ 5 * v ^ 8 + u ^ 5 * w ^ 8 + u ^ 13), u ^ 3 * (-v * w + v ^ 2 + w ^ 2 + 2 * u ^ 2), u ^ 14 * v ^ 4 * w ^ 4 * (-v * w + u ^ 2), u ^ 10 * (v ^ 5 + w ^ 5 + u ^ 5), u ^ 64 * v ^ 20 * w ^ 20 * (-v * w + u ^ 2) * (u ^ 2 + v * w), u ^ 8 * (((((3 * v ^ 5 * w ^ 5 - 2 * u * w ^ 6 * v ^ 3) - 2 * u * w ^ 3 * v ^ 6) - 2 * u ^ 3 * v ^ 7) - 2 * u ^ 3 * w ^ 7) + u ^ 4 * v ^ 3 * w ^ 3 + u ^ 6 * v ^ 4 + u ^ 6 * w ^ 4 + u ^ 10), u ^ 4 * ((-(v ^ 2) - w ^ 2) + u ^ 2), 0, u * ((((((((((-(w ^ 3) * v ^ 2 - v ^ 3 * w ^ 2) + u * v ^ 2 * w ^ 2) - u ^ 2 * v * w ^ 2) - u ^ 2 * v ^ 2 * w) - u ^ 2 * v ^ 3) - u ^ 2 * w ^ 3) + 2 * u ^ 3 * v ^ 2 + 2 * u ^ 3 * w ^ 2) - u ^ 4 * v) - u ^ 4 * w) + 2 * u ^ 5), -(u ^ 8) * v ^ 2 * w ^ 2, u ^ 2 * (((3 * v ^ 2 * w ^ 2 - 4 * v ^ 3 * u) - 4 * w ^ 3 * u) + 4 * u ^ 4), u ^ 61 * v ^ 20 * w ^ 20 * (-v * w + 4 * u ^ 2), u ^ 14 * ((((((((((((v ^ 8 * w ^ 9 + v ^ 9 * w ^ 8) - u * v ^ 6 * w ^ 10) + u * v ^ 8 * w ^ 8) - u * v ^ 10 * w ^ 6) - u ^ 2 * v ^ 6 * w ^ 9) - u ^ 2 * v ^ 9 * w ^ 6) + u ^ 5 * v ^ 6 * w ^ 6) - u ^ 5 * v ^ 12) - u ^ 5 * w ^ 12) - u ^ 6 * v ^ 11) - u ^ 6 * w ^ 11) + u ^ 9 * v ^ 8 + u ^ 9 * w ^ 8 + u ^ 17), -(u ^ 15) * v ^ 5 * w ^ 5, 0, u ^ 3 * (((((-2 * v * w ^ 3 + 3 * v ^ 2 * w ^ 2) - 2 * v ^ 3 * w) - 2 * v ^ 3 * u) - 2 * w ^ 3 * u) + u ^ 3 * v + u ^ 3 * w + 2 * u ^ 4), u ^ 16 * v ^ 4 * w ^ 4 * (-v * w + u ^ 2) * (u ^ 2 + v * w), u ^ 15 * v ^ 4 * w ^ 4 * (-v * w + v ^ 2 + w ^ 2 + 2 * u ^ 2), u ^ 40 * v ^ 12 * w ^ 12 * (-v * w + u ^ 2) * (u ^ 2 + v * w), u ^ 6 * (2 * v ^ 4 * w ^ 4 + 2 * u * v ^ 3 * w ^ 4 + 2 * u * v ^ 4 * w ^ 3 + 2 * w ^ 3 * v ^ 3 * u ^ 2 + 2 * u ^ 3 * v ^ 5 + 2 * u ^ 3 * w ^ 5 + u ^ 4 * v ^ 4 + u ^ 4 * w ^ 4 + u ^ 8), -(u ^ 7) * v ^ 2 * w ^ 2, 0, u ^ 13 * v ^ 4 * w ^ 4 * (-v * w + 4 * u ^ 2), u ^ 7 * (v ^ 3 * w ^ 4 + v ^ 4 * w ^ 3 + u * w ^ 3 * v ^ 3 + u ^ 2 * v ^ 5 + u ^ 2 * w ^ 5 + u ^ 3 * v ^ 4 + u ^ 3 * w ^ 4 + u ^ 7), u ^ 62 * v ^ 20 * w ^ 20 * (-v * w + u * v + u * w + 2 * u ^ 2), u ^ 62 * v ^ 20 * w ^ 20 * (-v * w + u ^ 2), u ^ 3 * (((((-2 * w ^ 3 * v ^ 2 - 2 * v ^ 3 * w ^ 2) + 3 * u * v ^ 2 * w ^ 2) - 2 * u ^ 2 * v ^ 3) - 2 * u ^ 2 * w ^ 3) + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2 + 2 * u ^ 5), 3 * u ^ 60 * v ^ 20 * w ^ 20 * (v + w + 3u), u ^ 14 * v ^ 4 * w ^ 4 * (-v * w + u * v + u * w + 2 * u ^ 2), u ^ 50 * v ^ 16 * w ^ 16 * (-v * w + u ^ 2), -(u ^ 9) * v ^ 3 * w ^ 3, u ^ 63 * v ^ 20 * w ^ 20 * (-v * w + v ^ 2 + w ^ 2 + 2 * u ^ 2), u ^ 12 * v ^ 4 * w ^ 4 * (4 * u ^ 2 * v ^ 2 + 4 * u ^ 2 * w ^ 2 + 2 * v ^ 2 * w ^ 2 + 5 * u ^ 4), 3 * u ^ 12 * v ^ 4 * w ^ 4 * (w ^ 2 + v ^ 2 + 3 * u ^ 2), u ^ 38 * v ^ 12 * w ^ 12 * (-v * w + u ^ 2), u ^ 60 * v ^ 20 * w ^ 20 * (2 * u * v ^ 2 + 2 * u * w ^ 2 + v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + v ^ 2 * w + 5 * u ^ 3), u ^ 6 * (2 * v ^ 3 * w ^ 4 + 2 * v ^ 4 * w ^ 3 + 4 * u * w ^ 3 * v ^ 3 + u ^ 2 * v ^ 5 + u ^ 2 * w ^ 5 + 2 * u ^ 3 * v ^ 4 + 2 * u ^ 3 * w ^ 4 + u ^ 7), -(u ^ 19) * v ^ 6 * w ^ 6, u ^ 52 * v ^ 16 * w ^ 16 * (-v * w + u ^ 2) * (u ^ 2 + v * w), -(u ^ 6) * v ^ 2 * w ^ 2, u ^ 12 * v ^ 4 * w ^ 4 * (2 * u * v ^ 2 + 2 * u * w ^ 2 + v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + v ^ 2 * w + 5 * u ^ 3), -(u ^ 30) * v ^ 10 * w ^ 10, u ^ 26 * v ^ 8 * w ^ 8 * (-v * w + u * v + u * w + 2 * u ^ 2), u ^ 26 * v ^ 8 * w ^ 8 * (-v * w + u ^ 2), u ^ 6 * (8 * v ^ 3 * w ^ 3 + 3 * u ^ 2 * v ^ 4 + 3 * u ^ 2 * w ^ 4 + u ^ 6), u ^ 15 * v ^ 4 * w ^ 4 * (((((-2 * v * w ^ 3 + 3 * v ^ 2 * w ^ 2) - 2 * v ^ 3 * w) - 2 * v ^ 3 * u) - 2 * w ^ 3 * u) + u ^ 3 * v + u ^ 3 * w + 2 * u ^ 4), 0, u ^ 27 * v ^ 8 * w ^ 8 * ((((((((((-v * w ^ 4 + w ^ 3 * v ^ 2 + v ^ 3 * w ^ 2) - v ^ 4 * w) - u * w ^ 4) - u * v * w ^ 3) + u * v ^ 2 * w ^ 2) - u * v ^ 3 * w) - u * v ^ 4) - u ^ 2 * w ^ 3) - u ^ 2 * v ^ 3) + u ^ 4 * w + u ^ 4 * v + 2 * u ^ 5), u ^ 12 * (8 * v ^ 6 * w ^ 6 + 3 * u ^ 4 * v ^ 8 + 3 * u ^ 4 * w ^ 8 + u ^ 12), u ^ 36 * v ^ 12 * w ^ 12 * (2 * u * v ^ 2 + 2 * u * w ^ 2 + v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + v ^ 2 * w + 5 * u ^ 3), u ^ 13 * v ^ 4 * w ^ 4 * (v * w ^ 2 + v ^ 2 * w + u * v ^ 2 + u * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 2 * u ^ 3), u ^ 28 * v ^ 8 * w ^ 8 * (-v * w + u ^ 2) * (u ^ 2 + v * w), u ^ 15 * v ^ 4 * w ^ 4 * (((((-2 * w ^ 3 * v ^ 2 - 2 * v ^ 3 * w ^ 2) + 3 * u * v ^ 2 * w ^ 2) - 2 * u ^ 2 * v ^ 3) - 2 * u ^ 2 * w ^ 3) + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2 + 2 * u ^ 5), u ^ 38 * v ^ 12 * w ^ 12 * (-v * w + u * v + u * w + 2 * u ^ 2), u ^ 25 * v ^ 8 * w ^ 8 * (-v * w + 4 * u ^ 2), u ^ 51 * v ^ 16 * w ^ 16 * (-v * w + v ^ 2 + w ^ 2 + 2 * u ^ 2), u ^ 49 * v ^ 16 * w ^ 16 * (-v * w + 4 * u ^ 2), u ^ 39 * v ^ 12 * w ^ 12 * (-v * w + v ^ 2 + w ^ 2 + 2 * u ^ 2), u ^ 16 * v ^ 4 * w ^ 4 * ((-(v ^ 2) - w ^ 2) + u ^ 2), u ^ 27 * v ^ 8 * w ^ 8 * (((((-2 * v * w ^ 3 + 3 * v ^ 2 * w ^ 2) - 2 * v ^ 3 * w) - 2 * v ^ 3 * u) - 2 * w ^ 3 * u) + u ^ 3 * v + u ^ 3 * w + 2 * u ^ 4), u ^ 14 * v ^ 4 * w ^ 4 * (((3 * v ^ 2 * w ^ 2 - 4 * v ^ 3 * u) - 4 * w ^ 3 * u) + 4 * u ^ 4), 2 * u ^ 13 * v ^ 4 * w ^ 4 * (w + u) * (u + v), 2 * u ^ 25 * v ^ 8 * w ^ 8 * (v + w + 2u), -(u ^ 18) * v ^ 6 * w ^ 6, 3 * u ^ 48 * v ^ 16 * w ^ 16 * (w ^ 2 + v ^ 2 + 3 * u ^ 2), 2 * u ^ 13 * v ^ 4 * w ^ 4 * (v + w + 2u), u ^ 26 * v ^ 8 * w ^ 8 * (((3 * v ^ 2 * w ^ 2 - 4 * v ^ 3 * u) - 4 * w ^ 3 * u) + 4 * u ^ 4), u ^ 12 * v ^ 4 * w ^ 4 * (4 * u * v + 4 * u * w + 2 * v * w + 5 * u ^ 2), 2 * u ^ 25 * v ^ 8 * w ^ 8 * (w + u) * (u + v), u ^ 37 * v ^ 12 * w ^ 12 * (-v * w + 4 * u ^ 2), 3 * u ^ 60 * v ^ 20 * w ^ 20 * (w ^ 2 + v ^ 2 + 3 * u ^ 2), u ^ 24 * v ^ 8 * w ^ 8 * (4 * u * v + 4 * u * w + 2 * v * w + 5 * u ^ 2), 3 * u ^ 12 * v ^ 4 * w ^ 4 * (v + w + 3u), 15 * u ^ 12 * v ^ 4 * w ^ 4, u ^ 36 * v ^ 12 * w ^ 12 * (4 * u * v + 4 * u * w + 2 * v * w + 5 * u ^ 2), 3 * u ^ 36 * v ^ 12 * w ^ 12 * (w ^ 2 + v ^ 2 + 3 * u ^ 2), 3 * u ^ 24 * v ^ 8 * w ^ 8 * (v + w + 3u), 3 * u ^ 36 * v ^ 12 * w ^ 12 * (v + w + 3u), 15 * u ^ 60 * v ^ 20 * w ^ 20, 15 * u ^ 36 * v ^ 12 * w ^ 12, 15 * u ^ 24 * v ^ 8 * w ^ 8, 15 * u ^ 48 * v ^ 16 * w ^ 16]
            end
        f20a = function (u, v, w)
                return [20, 2u + 9v + 9w, (v + 2w) * (2v + w), 2 * (v + w) * (2v + 2w + u), 2 * u ^ 2 + 9 * v ^ 2 + 9 * w ^ 2, -2 * u * v * w + 2 * v ^ 3 + 2 * w ^ 3, u * v * w + 3 * v * w ^ 2 + 3 * v ^ 2 * w + v ^ 3 + w ^ 3, v * w * (v + w), u * v ^ 2 + u * w ^ 2 + 4 * v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 4 * v ^ 2 * w + 4 * v ^ 3 + 4 * w ^ 3, -(v ^ 2) * w ^ 2, v ^ 4 * w ^ 4 * ((((((((((((w ^ 9 * u ^ 2 - w ^ 6 * v ^ 3 * u ^ 2) - u ^ 2 * v ^ 4 * w ^ 5) - u ^ 2 * v ^ 5 * w ^ 4) - w ^ 3 * v ^ 6 * u ^ 2) + v ^ 9 * u ^ 2 + w ^ 5 * v ^ 2 * u ^ 4 + w ^ 4 * v ^ 3 * u ^ 4 + w ^ 3 * v ^ 4 * u ^ 4 + w ^ 2 * v ^ 5 * u ^ 4 + w ^ 11 + w ^ 4 * v ^ 2 * u ^ 5 + w ^ 2 * v ^ 4 * u ^ 5) - w ^ 8 * v ^ 3) - w ^ 7 * v ^ 4) - v ^ 5 * w ^ 6) - v ^ 6 * w ^ 5) - w ^ 4 * v ^ 7) - w ^ 3 * v ^ 8) + v ^ 11), 2 * v * w ^ 3 + u ^ 2 * v * w + 2 * v ^ 2 * w ^ 2 + 2 * v ^ 3 * w + v ^ 4 + w ^ 4, 0, 2 * (v ^ 2 + w ^ 2) * (u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2), (((2 * u ^ 2 * v ^ 2 * w ^ 3 + 2 * u ^ 2 * v ^ 3 * w ^ 2 + 2 * u ^ 3 * v ^ 2 * w ^ 2) - 5 * v ^ 3 * w ^ 4) - 5 * v ^ 4 * w ^ 3) + 2 * v ^ 7 + 2 * w ^ 7, -((v + w)) * ((u * v * w - v ^ 3) - w ^ 3), ((((((-u * v * w ^ 3 - u * v ^ 3 * w) - v * w ^ 4) + u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w + u ^ 2 * v ^ 3 + u ^ 2 * w ^ 3) - w ^ 3 * v ^ 2) - v ^ 3 * w ^ 2) - v ^ 4 * w) + v ^ 5 + w ^ 5, 0, -(v ^ 4) * w ^ 4, 0, v ^ 8 * w ^ 8 * (w ^ 6 * u ^ 4 + w ^ 5 * v * u ^ 4 + w * v ^ 5 * u ^ 4 + u ^ 4 * v ^ 6 + w ^ 10 + v * w ^ 9 + v ^ 5 * w ^ 5 + w * v ^ 9 + v ^ 10), -((v ^ 2 + w ^ 2)) * ((u * v * w - v ^ 3) - w ^ 3), u ^ 2 * v ^ 11 * w ^ 11, v ^ 5 * w ^ 5 * (v + w) * ((((v ^ 4 - v ^ 3 * w) + v ^ 2 * w ^ 2) - v * w ^ 3) + w ^ 4), u ^ 10 * v ^ 49 * w ^ 49, v ^ 4 * w ^ 4 * (((((((u ^ 2 * w ^ 8 - 2 * w ^ 5 * v ^ 3 * u ^ 2) - 2 * w ^ 3 * u ^ 2 * v ^ 5) + u ^ 2 * v ^ 8 + 3 * w ^ 4 * v ^ 2 * u ^ 4 + 3 * w ^ 2 * u ^ 4 * v ^ 4 + w ^ 10) - 2 * w ^ 7 * v ^ 3) - 2 * v ^ 5 * w ^ 5) - 2 * w ^ 3 * v ^ 7) + v ^ 10), v ^ 2 * w ^ 2 * (v + w) * ((-v - w) + 2u), 0, (v ^ 2 + w ^ 2) * (((((v ^ 4 - 2 * v ^ 3 * w) + u ^ 2 * v ^ 2 + v ^ 2 * w ^ 2) - u ^ 2 * v * w) - 2 * v * w ^ 3) + u ^ 2 * w ^ 2 + w ^ 4), 0, (6 * u ^ 2 * v ^ 2 * w ^ 2 - 10 * v ^ 3 * w ^ 3) + 2 * v ^ 6 + 2 * w ^ 6, 2 * u ^ 10 * v ^ 45 * w ^ 45 * ((u * v * w - v ^ 3) - w ^ 3), w ^ 8 * v ^ 8 * ((((((((((((w ^ 11 * u ^ 4 - w ^ 8 * v ^ 3 * u ^ 4) - w ^ 7 * v ^ 4 * u ^ 4) - w ^ 4 * v ^ 7 * u ^ 4) - w ^ 3 * v ^ 8 * u ^ 4) + v ^ 11 * u ^ 4 + w ^ 7 * v ^ 2 * u ^ 6 + w ^ 6 * v ^ 3 * u ^ 6 + w ^ 3 * v ^ 6 * u ^ 6 + w ^ 2 * v ^ 7 * u ^ 6 + w ^ 6 * v ^ 2 * u ^ 7 + w ^ 2 * v ^ 6 * u ^ 7 + w ^ 15) - w ^ 12 * v ^ 3) - w ^ 11 * v ^ 4) - w ^ 8 * v ^ 7) - w ^ 7 * v ^ 8) - w ^ 4 * v ^ 11) - w ^ 3 * v ^ 12) + v ^ 15), 0, 0, (((-2 * u * w ^ 3 * v ^ 3 + v * w ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 4 * v ^ 3 * w ^ 4) - 4 * v ^ 4 * w ^ 3) + v ^ 6 * w + v ^ 7 + w ^ 7, u ^ 2 * v ^ 13 * w ^ 13, u ^ 2 * (v ^ 2 + w ^ 2) * v ^ 9 * w ^ 9 * ((u * v * w - v ^ 3) - w ^ 3), u ^ 6 * v ^ 31 * w ^ 31, v ^ 4 * w ^ 4 * (v + w) * (((v ^ 5 + v ^ 4 * w + u ^ 2 * v ^ 3 + 2 * u ^ 3 * v ^ 2 + u ^ 2 * v ^ 2 * w + u ^ 2 * v * w ^ 2 + v * w ^ 4) - 2 * u ^ 3 * v * w) + w ^ 5 + u ^ 2 * w ^ 3 + 2 * u ^ 3 * w ^ 2), 0, 0, 2 * u ^ 2 * v ^ 9 * w ^ 9 * ((u * v * w - v ^ 3) - w ^ 3), v ^ 4 * w ^ 4 * (u ^ 2 * w ^ 4 + u ^ 2 * v * w ^ 3 + u ^ 2 * v ^ 3 * w + u ^ 2 * v ^ 4 + w ^ 6 + v * w ^ 5 + v ^ 3 * w ^ 3 + v ^ 5 * w + v ^ 6), u ^ 10 * (v + w) * v ^ 45 * w ^ 45 * ((u * v * w - v ^ 3) - w ^ 3), u ^ 10 * v ^ 47 * w ^ 47, ((((3 * u ^ 2 * v ^ 2 * w ^ 4 - 2 * w ^ 3 * v ^ 3 * u ^ 2) + 3 * u ^ 2 * v ^ 4 * w ^ 2 + w ^ 6 * v ^ 2) - 4 * v ^ 3 * w ^ 5) - 4 * v ^ 5 * w ^ 3) + v ^ 6 * w ^ 2 + v ^ 8 + w ^ 8, -(u ^ 10) * v ^ 45 * w ^ 45 * (2u + 9v + 9w), u ^ 2 * (v + w) * v ^ 9 * w ^ 9 * ((u * v * w - v ^ 3) - w ^ 3), -(u ^ 8) * v ^ 38 * w ^ 38, 0, u ^ 10 * (v ^ 2 + w ^ 2) * v ^ 45 * w ^ 45 * ((u * v * w - v ^ 3) - w ^ 3), -2 * u ^ 2 * v ^ 9 * w ^ 9 * (v ^ 2 + w ^ 2) * (u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2), -(u ^ 2) * v ^ 9 * w ^ 9 * (2 * u ^ 2 + 9 * v ^ 2 + 9 * w ^ 2), u ^ 6 * v ^ 29 * w ^ 29, -(u ^ 10) * v ^ 45 * w ^ 45 * (u * v ^ 2 + u * w ^ 2 + 4 * v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 4 * v ^ 2 * w + 4 * v ^ 3 + 4 * w ^ 3), v ^ 4 * w ^ 4 * (3 * u ^ 2 * w ^ 3 + 2 * u ^ 2 * v * w ^ 2 + 2 * u ^ 2 * v ^ 2 * w + 3 * u ^ 2 * v ^ 3 + u ^ 3 * w ^ 2 + u ^ 3 * v ^ 2 + 2 * w ^ 5 + v * w ^ 4 + w ^ 3 * v ^ 2 + v ^ 3 * w ^ 2 + v ^ 4 * w + 2 * v ^ 5), 0, -(u ^ 8) * v ^ 40 * w ^ 40, 0, -(u ^ 2) * v ^ 9 * w ^ 9 * (u * v ^ 2 + u * w ^ 2 + 4 * v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 4 * v ^ 2 * w + 4 * v ^ 3 + 4 * w ^ 3), 0, -(u ^ 4) * (v + w) * v ^ 18 * w ^ 18 * ((u * v * w - v ^ 3) - w ^ 3), -(u ^ 4) * v ^ 20 * w ^ 20, v ^ 4 * w ^ 4 * (6 * u ^ 2 * w ^ 2 + 6 * u ^ 2 * v ^ 2 + 3 * w ^ 4 + 2 * v ^ 2 * w ^ 2 + 3 * v ^ 4), -(u ^ 2) * v ^ 9 * w ^ 9 * ((((-2 * u * w ^ 3 * v ^ 3 + v * w ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 4 * v ^ 3 * w ^ 4) - 4 * v ^ 4 * w ^ 3) + v ^ 6 * w + v ^ 7 + w ^ 7), 0, u ^ 4 * v ^ 18 * w ^ 18 * (v + w) * ((((v ^ 7 - 2 * v ^ 4 * w ^ 3) - 2 * v ^ 3 * w ^ 4) - u * w ^ 3 * v ^ 3) + u ^ 2 * v ^ 3 * w ^ 2 + u ^ 2 * v ^ 2 * w ^ 3 + u ^ 3 * v ^ 2 * w ^ 2 + w ^ 7), v ^ 8 * w ^ 8 * (6 * u ^ 4 * w ^ 4 + 6 * u ^ 4 * v ^ 4 + 3 * w ^ 8 + 2 * v ^ 4 * w ^ 4 + 3 * v ^ 8), -(u ^ 6) * v ^ 27 * w ^ 27 * (u * v ^ 2 + u * w ^ 2 + 4 * v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 4 * v ^ 2 * w + 4 * v ^ 3 + 4 * w ^ 3), -(u ^ 2) * v ^ 9 * w ^ 9 * (2 * v * w ^ 3 + u ^ 2 * v * w + 2 * v ^ 2 * w ^ 2 + 2 * v ^ 3 * w + v ^ 4 + w ^ 4), -(u ^ 4) * v ^ 22 * w ^ 22, -(u ^ 2) * v ^ 9 * w ^ 9 * (((((3 * u ^ 2 * v ^ 2 * w ^ 4 - 2 * w ^ 3 * v ^ 3 * u ^ 2) + 3 * u ^ 2 * v ^ 4 * w ^ 2 + w ^ 6 * v ^ 2) - 4 * v ^ 3 * w ^ 5) - 4 * v ^ 5 * w ^ 3) + v ^ 6 * w ^ 2 + v ^ 8 + w ^ 8), u ^ 6 * (v + w) * v ^ 27 * w ^ 27 * ((u * v * w - v ^ 3) - w ^ 3), -2 * u ^ 4 * v ^ 18 * w ^ 18 * ((u * v * w - v ^ 3) - w ^ 3), -(u ^ 8) * (v ^ 2 + w ^ 2) * v ^ 36 * w ^ 36 * ((u * v * w - v ^ 3) - w ^ 3), -2 * u ^ 8 * v ^ 36 * w ^ 36 * ((u * v * w - v ^ 3) - w ^ 3), u ^ 6 * (v ^ 2 + w ^ 2) * v ^ 27 * w ^ 27 * ((u * v * w - v ^ 3) - w ^ 3), -(u ^ 2) * v ^ 11 * w ^ 11 * (v + w) * ((-v - w) + 2u), u ^ 4 * v ^ 18 * w ^ 18 * ((((-2 * u * w ^ 3 * v ^ 3 + v * w ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 4 * v ^ 3 * w ^ 4) - 4 * v ^ 4 * w ^ 3) + v ^ 6 * w + v ^ 7 + w ^ 7), -2 * u ^ 2 * v ^ 9 * w ^ 9 * ((w ^ 6 - 5 * v ^ 3 * w ^ 3) + v ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 2), -(u ^ 2) * v ^ 9 * w ^ 9 * (u * v * w + 3 * v * w ^ 2 + 3 * v ^ 2 * w + v ^ 3 + w ^ 3), u ^ 4 * v ^ 18 * w ^ 18 * (v + 2w) * (2v + w), 0, u ^ 8 * v ^ 36 * w ^ 36 * (2 * u ^ 2 + 9 * v ^ 2 + 9 * w ^ 2), -(u ^ 2) * v ^ 9 * w ^ 9 * (v + 2w) * (2v + w), 2 * u ^ 4 * v ^ 18 * w ^ 18 * ((w ^ 6 - 5 * v ^ 3 * w ^ 3) + v ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 2), -2 * u ^ 2 * (v + w) * v ^ 9 * w ^ 9 * (2v + 2w + u), u ^ 4 * v ^ 18 * w ^ 18 * (u * v * w + 3 * v * w ^ 2 + 3 * v ^ 2 * w + v ^ 3 + w ^ 3), 2 * u ^ 6 * v ^ 27 * w ^ 27 * ((u * v * w - v ^ 3) - w ^ 3), -(u ^ 10) * v ^ 45 * w ^ 45 * (2 * u ^ 2 + 9 * v ^ 2 + 9 * w ^ 2), 2 * u ^ 4 * (v + w) * v ^ 18 * w ^ 18 * (2v + 2w + u), -(u ^ 2) * v ^ 9 * w ^ 9 * (2u + 9v + 9w), -20 * u ^ 2 * v ^ 9 * w ^ 9, -2 * u ^ 6 * (v + w) * v ^ 27 * w ^ 27 * (2v + 2w + u), -(u ^ 6) * v ^ 27 * w ^ 27 * (2 * u ^ 2 + 9 * v ^ 2 + 9 * w ^ 2), u ^ 4 * v ^ 18 * w ^ 18 * (2u + 9v + 9w), -(u ^ 6) * v ^ 27 * w ^ 27 * (2u + 9v + 9w), -20 * u ^ 10 * v ^ 45 * w ^ 45, -20 * u ^ 6 * v ^ 27 * w ^ 27, 20 * u ^ 4 * v ^ 18 * w ^ 18, 20 * u ^ 8 * v ^ 36 * w ^ 36]
            end
        f20b = function (u, v, w)
                return [20, 8u + 6v + 6w, 2 * u * v + 2 * u * w + u ^ 2 + v ^ 2 + w ^ 2, 4 * u * v + 4 * u * w + 6 * v * w + 4 * u ^ 2 + v ^ 2 + w ^ 2, 8 * u ^ 2 + 6 * v ^ 2 + 6 * w ^ 2, (v + w + u) * (((((v ^ 2 - v * w) - u * v) + w ^ 2) - u * w) + u ^ 2), 2 * u * v * w + v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + v ^ 2 * w + u ^ 3, 0, 2 * u * v ^ 2 + 2 * u * w ^ 2 + 3 * v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + 3 * v ^ 2 * w + 4 * u ^ 3 + v ^ 3 + w ^ 3, -(u ^ 2) * v * w, u ^ 4 * v ^ 2 * w ^ 2 * (((((((((((((w ^ 11 + v ^ 11 + w ^ 7 * v ^ 2 * u ^ 2 + w ^ 6 * v ^ 3 * u ^ 2 + w ^ 3 * v ^ 6 * u ^ 2 + w ^ 2 * u ^ 2 * v ^ 7) - u ^ 3 * w ^ 8) + w ^ 6 * v ^ 2 * u ^ 3 + w ^ 2 * u ^ 3 * v ^ 6) - u ^ 3 * v ^ 8) - u ^ 4 * w ^ 7) + w ^ 4 * v ^ 3 * u ^ 4 + w ^ 3 * v ^ 4 * u ^ 4) - u ^ 4 * v ^ 7) - w ^ 5 * v * u ^ 5) + u ^ 5 * v ^ 3 * w ^ 3) - w * v ^ 5 * u ^ 5) - w ^ 4 * v * u ^ 6) - w * u ^ 6 * v ^ 4) + w * v * u ^ 9), u * v * w ^ 2 + u * v ^ 2 * w + 2 * v ^ 2 * w ^ 2 + u ^ 3 * v + u ^ 3 * w + u ^ 4, 0, 4 * u ^ 2 * v ^ 2 + 4 * u ^ 2 * w ^ 2 + 6 * v ^ 2 * w ^ 2 + 4 * u ^ 4 + v ^ 4 + w ^ 4, (((((3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2 + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 4) - 2 * u ^ 3 * w ^ 4) - 2 * u ^ 4 * v ^ 3) - 2 * u ^ 4 * w ^ 3) + u ^ 7 + v ^ 7 + w ^ 7, (((-u * v * w ^ 2 - u * v ^ 2 * w) + v * w ^ 3) - u ^ 2 * v * w) + v ^ 3 * w + u ^ 4, (((((((-u * v * w ^ 3 + u * v ^ 2 * w ^ 2) - u * v ^ 3 * w) + v * w ^ 4 + u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w + w ^ 3 * v ^ 2) - 2 * u ^ 3 * v * w) + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2 + v ^ 3 * w ^ 2) - u ^ 4 * v) - u ^ 4 * w) + v ^ 4 * w + u ^ 5, 0, -(u ^ 4) * v ^ 2 * w ^ 2, 0, u ^ 8 * v ^ 4 * w ^ 4 * (w ^ 10 + v ^ 10 + u * w ^ 9 + v ^ 9 * u + u ^ 5 * w ^ 3 * v ^ 2 + u ^ 5 * v ^ 3 * w ^ 2 + u ^ 6 * v ^ 2 * w ^ 2), (((-u * v * w ^ 3 - u * v ^ 3 * w) + w ^ 3 * v ^ 2) - u ^ 3 * v * w) + v ^ 3 * w ^ 2 + u ^ 5, -(u ^ 10) * v ^ 7 * w ^ 7, 0, -(u ^ 44) * v ^ 32 * w ^ 32, u ^ 4 * v ^ 2 * w ^ 2 * (((((((w ^ 10 + v ^ 10 + 3 * v ^ 2 * u ^ 2 * w ^ 6 + 3 * w ^ 2 * u ^ 2 * v ^ 6) - 2 * u ^ 3 * w ^ 7) - 2 * u ^ 3 * v ^ 7) + 3 * u ^ 4 * v ^ 3 * w ^ 3) - 2 * u ^ 5 * v * w ^ 4) - 2 * u ^ 5 * v ^ 4 * w) + w * v * u ^ 8), 2 * u ^ 2 * v * w * (v ^ 2 + w ^ 2), 0, (((((((((-u * v ^ 2 * w ^ 3 - u * v ^ 3 * w ^ 2) + 3 * u ^ 2 * v ^ 2 * w ^ 2 + u ^ 2 * v ^ 4 + u ^ 2 * w ^ 4 + 2 * v ^ 2 * w ^ 4) - u ^ 3 * v * w ^ 2) - u ^ 3 * v ^ 2 * w) - u ^ 3 * v ^ 3) - u ^ 3 * w ^ 3) + u ^ 4 * v ^ 2 + u ^ 4 * w ^ 2 + 2 * v ^ 4 * w ^ 2) - u ^ 5 * v) - u ^ 5 * w) + u ^ 6, u ^ 4 * v ^ 3 * w ^ 5 + u ^ 4 * v ^ 5 * w ^ 3 + 2 * u ^ 6 * v ^ 3 * w ^ 3, ((9 * u ^ 2 * v ^ 2 * w ^ 2 - 4 * u ^ 3 * v ^ 3) - 4 * u ^ 3 * w ^ 3) + u ^ 6 + v ^ 6 + w ^ 6, u ^ 40 * v ^ 30 * w ^ 30 * (v + w + u) * (((((v ^ 2 - v * w) - u * v) + w ^ 2) - u * w) + u ^ 2), u ^ 8 * v ^ 4 * w ^ 4 * (((((((((((((w ^ 15 + v ^ 15 + w ^ 11 * v ^ 2 * u ^ 2 + w ^ 10 * v ^ 3 * u ^ 2 + w ^ 3 * u ^ 2 * v ^ 10 + w ^ 2 * v ^ 11 * u ^ 2) - w ^ 12 * u ^ 3) + w ^ 10 * v ^ 2 * u ^ 3 + w ^ 2 * v ^ 10 * u ^ 3) - v ^ 12 * u ^ 3) - w ^ 11 * u ^ 4) - v ^ 11 * u ^ 4) + w ^ 5 * u ^ 6 * v ^ 4 + w ^ 4 * u ^ 6 * v ^ 5) - w ^ 6 * v ^ 2 * u ^ 7) + w ^ 4 * u ^ 7 * v ^ 4) - w ^ 2 * v ^ 6 * u ^ 7) - w ^ 5 * u ^ 8 * v ^ 2) - w ^ 2 * u ^ 8 * v ^ 5) + w ^ 2 * v ^ 2 * u ^ 11), 0, 0, ((((((v * w ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3 * w) - 2 * u ^ 4 * v ^ 3) - 2 * u ^ 4 * w ^ 3) + v ^ 6 * w + u ^ 7, -(u ^ 12) * v ^ 8 * w ^ 8, u ^ 8 * v ^ 6 * w ^ 6 * ((((-u * v * w ^ 3 - u * v ^ 3 * w) + w ^ 3 * v ^ 2) - u ^ 3 * v * w) + v ^ 3 * w ^ 2 + u ^ 5), -(u ^ 28) * v ^ 20 * w ^ 20, u ^ 4 * v ^ 2 * w ^ 2 * (w ^ 6 + 2 * v * w ^ 5 + 2 * v ^ 5 * w + v ^ 6 + 2 * w ^ 5 * u + 2 * v ^ 5 * u + u ^ 2 * w ^ 4 + 2 * u ^ 2 * v ^ 2 * w ^ 2 + u ^ 2 * v ^ 4 + 2 * u ^ 3 * v * w ^ 2 + 2 * u ^ 3 * v ^ 2 * w + 2 * w * v * u ^ 4), u ^ 4 * v ^ 3 * w ^ 3 * (a * (u + v + w) + u), 0, u ^ 8 * v ^ 6 * w ^ 6 * (v + w + u) * (((((v ^ 2 - v * w) - u * v) + w ^ 2) - u * w) + u ^ 2), u ^ 4 * v ^ 2 * w ^ 2 * (w ^ 6 + v ^ 6 + w ^ 5 * u + v ^ 5 * u + u ^ 3 * v * w ^ 2 + u ^ 3 * v ^ 2 * w + w * v * u ^ 4), u ^ 40 * v ^ 30 * w ^ 30 * ((((-u * v * w ^ 2 - u * v ^ 2 * w) + v * w ^ 3) - u ^ 2 * v * w) + v ^ 3 * w + u ^ 4), -(u ^ 42) * v ^ 31 * w ^ 31, ((((((3 * u ^ 2 * v ^ 2 * w ^ 4 + 3 * u ^ 2 * v ^ 4 * w ^ 2 + w ^ 6 * v ^ 2) - 2 * w ^ 3 * v ^ 2 * u ^ 3) - 2 * w ^ 2 * v ^ 3 * u ^ 3) + 3 * u ^ 4 * v ^ 2 * w ^ 2) - 2 * u ^ 5 * v ^ 3) - 2 * u ^ 5 * w ^ 3) + v ^ 6 * w ^ 2 + u ^ 8, 2 * u ^ 40 * v ^ 30 * w ^ 30 * (3v + 3w + 4u), u ^ 8 * v ^ 6 * w ^ 6 * ((((-u * v * w ^ 2 - u * v ^ 2 * w) + v * w ^ 3) - u ^ 2 * v * w) + v ^ 3 * w + u ^ 4), -(u ^ 34) * v ^ 25 * w ^ 25, 0, u ^ 40 * v ^ 30 * w ^ 30 * ((((-u * v * w ^ 3 - u * v ^ 3 * w) + w ^ 3 * v ^ 2) - u ^ 3 * v * w) + v ^ 3 * w ^ 2 + u ^ 5), u ^ 8 * v ^ 6 * w ^ 6 * (4 * u ^ 2 * v ^ 2 + 4 * u ^ 2 * w ^ 2 + 6 * v ^ 2 * w ^ 2 + 4 * u ^ 4 + v ^ 4 + w ^ 4), 2 * u ^ 8 * v ^ 6 * w ^ 6 * (3 * w ^ 2 + 3 * v ^ 2 + 4 * u ^ 2), -(u ^ 26) * v ^ 19 * w ^ 19, u ^ 40 * v ^ 30 * w ^ 30 * (2 * u * v ^ 2 + 2 * u * w ^ 2 + 3 * v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + 3 * v ^ 2 * w + 4 * u ^ 3 + v ^ 3 + w ^ 3), u ^ 4 * v ^ 2 * w ^ 2 * (3 * w ^ 5 + v * w ^ 4 + v ^ 4 * w + 3 * v ^ 5 + 2 * w ^ 4 * u + 2 * v ^ 4 * u + 2 * u ^ 2 * v * w ^ 2 + 2 * u ^ 2 * v ^ 2 * w + 4 * u ^ 3 * v * w), u ^ 12 * v ^ 9 * w ^ 9 * (a * (u + v + w) + u), -(u ^ 36) * v ^ 26 * w ^ 26, 4 * u ^ 4 * v ^ 3 * w ^ 3, u ^ 8 * v ^ 6 * w ^ 6 * (2 * u * v ^ 2 + 2 * u * w ^ 2 + 3 * v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + 3 * v ^ 2 * w + 4 * u ^ 3 + v ^ 3 + w ^ 3), 4 * u ^ 20 * v ^ 15 * w ^ 15, u ^ 16 * v ^ 12 * w ^ 12 * ((((-u * v * w ^ 2 - u * v ^ 2 * w) + v * w ^ 3) - u ^ 2 * v * w) + v ^ 3 * w + u ^ 4), -(u ^ 18) * v ^ 13 * w ^ 13, 2 * u ^ 4 * v ^ 2 * w ^ 2 * (3 * w ^ 4 + 3 * v ^ 4 + 4 * u ^ 2 * v * w), u ^ 8 * v ^ 6 * w ^ 6 * (((((((v * w ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3 * w) - 2 * u ^ 4 * v ^ 3) - 2 * u ^ 4 * w ^ 3) + v ^ 6 * w + u ^ 7), 0, u ^ 16 * v ^ 12 * w ^ 12 * ((((((((((((v * w ^ 7 + w * v ^ 7 + u ^ 2 * v ^ 2 * w ^ 4 + 2 * w ^ 3 * v ^ 3 * u ^ 2 + u ^ 2 * v ^ 4 * w ^ 2) - v * u ^ 3 * w ^ 4) + 2 * w ^ 3 * v ^ 2 * u ^ 3 + 2 * w ^ 2 * v ^ 3 * u ^ 3) - w * v ^ 4 * u ^ 3) - u ^ 4 * w ^ 4) - v * u ^ 4 * w ^ 3) + u ^ 4 * v ^ 2 * w ^ 2) - u ^ 4 * v ^ 3 * w) - u ^ 4 * v ^ 4) - u ^ 5 * w ^ 3) - u ^ 5 * v ^ 3) + u ^ 8), 2 * u ^ 8 * v ^ 4 * w ^ 4 * (3 * w ^ 8 + 3 * v ^ 8 + 4 * u ^ 4 * v ^ 2 * w ^ 2), u ^ 24 * v ^ 18 * w ^ 18 * (2 * u * v ^ 2 + 2 * u * w ^ 2 + 3 * v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + 3 * v ^ 2 * w + 4 * u ^ 3 + v ^ 3 + w ^ 3), u ^ 8 * v ^ 6 * w ^ 6 * (u * v * w ^ 2 + u * v ^ 2 * w + 2 * v ^ 2 * w ^ 2 + u ^ 3 * v + u ^ 3 * w + u ^ 4), -(u ^ 20) * v ^ 14 * w ^ 14, u ^ 8 * v ^ 6 * w ^ 6 * (((((((3 * u ^ 2 * v ^ 2 * w ^ 4 + 3 * u ^ 2 * v ^ 4 * w ^ 2 + w ^ 6 * v ^ 2) - 2 * w ^ 3 * v ^ 2 * u ^ 3) - 2 * w ^ 2 * v ^ 3 * u ^ 3) + 3 * u ^ 4 * v ^ 2 * w ^ 2) - 2 * u ^ 5 * v ^ 3) - 2 * u ^ 5 * w ^ 3) + v ^ 6 * w ^ 2 + u ^ 8), u ^ 24 * v ^ 18 * w ^ 18 * ((((-u * v * w ^ 2 - u * v ^ 2 * w) + v * w ^ 3) - u ^ 2 * v * w) + v ^ 3 * w + u ^ 4), u ^ 16 * v ^ 12 * w ^ 12 * (v + w + u) * (((((v ^ 2 - v * w) - u * v) + w ^ 2) - u * w) + u ^ 2), u ^ 32 * v ^ 24 * w ^ 24 * ((((-u * v * w ^ 3 - u * v ^ 3 * w) + w ^ 3 * v ^ 2) - u ^ 3 * v * w) + v ^ 3 * w ^ 2 + u ^ 5), u ^ 32 * v ^ 24 * w ^ 24 * (v + w + u) * (((((v ^ 2 - v * w) - u * v) + w ^ 2) - u * w) + u ^ 2), u ^ 24 * v ^ 18 * w ^ 18 * ((((-u * v * w ^ 3 - u * v ^ 3 * w) + w ^ 3 * v ^ 2) - u ^ 3 * v * w) + v ^ 3 * w ^ 2 + u ^ 5), 2 * u ^ 10 * v ^ 7 * w ^ 7 * (v ^ 2 + w ^ 2), u ^ 16 * v ^ 12 * w ^ 12 * (((((((v * w ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3 * w) - 2 * u ^ 4 * v ^ 3) - 2 * u ^ 4 * w ^ 3) + v ^ 6 * w + u ^ 7), u ^ 8 * v ^ 6 * w ^ 6 * (((9 * u ^ 2 * v ^ 2 * w ^ 2 - 4 * u ^ 3 * v ^ 3) - 4 * u ^ 3 * w ^ 3) + u ^ 6 + v ^ 6 + w ^ 6), u ^ 8 * v ^ 6 * w ^ 6 * (2 * u * v * w + v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + v ^ 2 * w + u ^ 3), u ^ 16 * v ^ 12 * w ^ 12 * (2 * u * v + 2 * u * w + u ^ 2 + v ^ 2 + w ^ 2), 4 * u ^ 12 * v ^ 9 * w ^ 9, 2 * u ^ 32 * v ^ 24 * w ^ 24 * (3 * w ^ 2 + 3 * v ^ 2 + 4 * u ^ 2), u ^ 8 * v ^ 6 * w ^ 6 * (2 * u * v + 2 * u * w + u ^ 2 + v ^ 2 + w ^ 2), u ^ 16 * v ^ 12 * w ^ 12 * (((9 * u ^ 2 * v ^ 2 * w ^ 2 - 4 * u ^ 3 * v ^ 3) - 4 * u ^ 3 * w ^ 3) + u ^ 6 + v ^ 6 + w ^ 6), u ^ 8 * v ^ 6 * w ^ 6 * (4 * u * v + 4 * u * w + 6 * v * w + 4 * u ^ 2 + v ^ 2 + w ^ 2), u ^ 16 * v ^ 12 * w ^ 12 * (2 * u * v * w + v * w ^ 2 + u ^ 2 * v + u ^ 2 * w + v ^ 2 * w + u ^ 3), u ^ 24 * v ^ 18 * w ^ 18 * (v + w + u) * (((((v ^ 2 - v * w) - u * v) + w ^ 2) - u * w) + u ^ 2), 2 * u ^ 40 * v ^ 30 * w ^ 30 * (3 * w ^ 2 + 3 * v ^ 2 + 4 * u ^ 2), u ^ 16 * v ^ 12 * w ^ 12 * (4 * u * v + 4 * u * w + 6 * v * w + 4 * u ^ 2 + v ^ 2 + w ^ 2), 2 * u ^ 8 * v ^ 6 * w ^ 6 * (3v + 3w + 4u), 20 * u ^ 8 * v ^ 6 * w ^ 6, u ^ 24 * v ^ 18 * w ^ 18 * (4 * u * v + 4 * u * w + 6 * v * w + 4 * u ^ 2 + v ^ 2 + w ^ 2), 2 * u ^ 24 * v ^ 18 * w ^ 18 * (3 * w ^ 2 + 3 * v ^ 2 + 4 * u ^ 2), 2 * u ^ 16 * v ^ 12 * w ^ 12 * (3v + 3w + 4u), 2 * u ^ 24 * v ^ 18 * w ^ 18 * (3v + 3w + 4u), 20 * u ^ 40 * v ^ 30 * w ^ 30, 20 * u ^ 24 * v ^ 18 * w ^ 18, 20 * u ^ 16 * v ^ 12 * w ^ 12, 20 * u ^ 32 * v ^ 24 * w ^ 24]
            end
        f20c = function (u, v, w)
                return [20, 6u + 11v + 3w, v * (4v + 4u + w), 6 * u * v + 2 * u * w + 4 * v * w + 2 * u ^ 2 + 6 * v ^ 2, 6 * u ^ 2 + 11 * v ^ 2 + 3 * w ^ 2, -2 * v * (-2 * v ^ 2 + u * w), v * (u + 2v) * (v + w + u), v ^ 2 * (u + v), 3 * u * v ^ 2 + u * w ^ 2 + 2 * v * w ^ 2 + 3 * u ^ 2 * v + u ^ 2 * w + 2 * v ^ 2 * w + 2 * u ^ 3 + 6 * v ^ 3, -(v ^ 2) * ((u * w + u ^ 2) - v ^ 2), -(v ^ 8) * ((((((((((((v * u ^ 3 * w ^ 7 + w ^ 6 * v ^ 2 * u ^ 3) - v ^ 5 * u ^ 3 * w ^ 3) - w ^ 2 * v ^ 5 * u ^ 4) - u ^ 4 * v ^ 7) - u ^ 5 * w ^ 6) - w ^ 5 * v * u ^ 5) - 2 * u ^ 6 * w ^ 5) - w ^ 4 * v * u ^ 6) + u ^ 6 * v ^ 2 * w ^ 3) - u ^ 7 * w ^ 4) + u ^ 7 * v * w ^ 3 + u ^ 7 * v ^ 2 * w ^ 2 + v ^ 4 * u ^ 7 + v * u ^ 8 * w ^ 2 + u ^ 8 * v ^ 3 + v ^ 2 * u ^ 9 + v * u ^ 10) - v ^ 11), v * (u * w ^ 2 + 2 * u * v ^ 2 + u ^ 2 * v + v * w ^ 2 + u ^ 3 + v ^ 2 * w + 2 * v ^ 3), 0, 6 * u ^ 2 * v ^ 2 + 2 * u ^ 2 * w ^ 2 + 4 * v ^ 2 * w ^ 2 + 2 * u ^ 4 + 6 * v ^ 4, -(v ^ 2) * ((((-2 * u ^ 2 * w ^ 3 - 2 * u ^ 2 * v * w ^ 2) - 2 * u ^ 3 * w ^ 2) + 4 * u ^ 3 * v ^ 2 + v * w ^ 4 + 4 * u ^ 4 * v + w ^ 3 * v ^ 2) - 4 * v ^ 5), -v * ((((u * v * w - u * v ^ 2) + u ^ 2 * w) - v ^ 2 * w) - 2 * v ^ 3), ((((((((u * v ^ 2 * w ^ 2 - u * v ^ 3 * w) - v ^ 4 * u) + u ^ 2 * v * w ^ 2) - w ^ 3 * v ^ 2) - u ^ 3 * v * w) - u ^ 3 * v ^ 2) + u ^ 3 * w ^ 2 + v ^ 3 * w ^ 2) - u ^ 4 * v) + 2 * v ^ 5, 0, -(v ^ 4) * ((u ^ 2 * w ^ 2 + u ^ 4) - v ^ 4), 0, v ^ 13 * (u ^ 6 * w ^ 7 + v * u ^ 6 * w ^ 6 + u ^ 7 * w ^ 6 + u ^ 8 * v * w ^ 4 + v ^ 5 * u ^ 8 + u ^ 9 * w ^ 4 + v ^ 4 * u ^ 9 + u ^ 13 + v ^ 13), -v * ((((u * v ^ 2 * w - u ^ 2 * v ^ 2) + u ^ 3 * w) - v ^ 2 * w ^ 2) - 2 * v ^ 4), u ^ 6 * v ^ 13 * w ^ 3 * ((u * w + u ^ 2) - v ^ 2), v ^ 10 * (u + v) * ((((u ^ 4 - u ^ 3 * v) + u ^ 2 * v ^ 2) - u * v ^ 3) + v ^ 4), u ^ 30 * v ^ 59 * w ^ 15 * ((u ^ 2 * w ^ 2 + u ^ 4) - v ^ 4), -(v ^ 8) * (((((((2 * v * u ^ 3 * w ^ 6 - u ^ 3 * v ^ 4 * w ^ 3) - w ^ 2 * u ^ 4 * v ^ 4) - u ^ 4 * v ^ 6) - 3 * u ^ 5 * w ^ 5) - 3 * u ^ 6 * w ^ 4) + 2 * v * u ^ 6 * w ^ 3 + 2 * v * u ^ 7 * w ^ 2 + 2 * u ^ 7 * v ^ 3 + 2 * v * u ^ 9) - v ^ 10), -(v ^ 3) * ((-2 * u ^ 2 * w + u ^ 2 * v + 2 * u ^ 3) - v ^ 3), 0, ((((((((-u * v ^ 3 * w ^ 2 - 2 * v ^ 5 * u) + 2 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 2 * v ^ 4) - u ^ 3 * v * w ^ 2) - 3 * u ^ 3 * v ^ 3) - v ^ 3 * w ^ 3) + u ^ 4 * v ^ 2 + u ^ 4 * w ^ 2 + 2 * v ^ 4 * w ^ 2) - u ^ 5 * v) - v ^ 5 * w) + 2 * v ^ 6, 0, -2 * v ^ 2 * ((-3 * u ^ 2 * w ^ 2 + 4 * u ^ 3 * v + v * w ^ 3) - 2 * v ^ 4), 2 * u ^ 30 * v ^ 56 * w ^ 15 * (-2 * v ^ 2 + u * w), -(v ^ 14) * ((((((((((((v * u ^ 6 * w ^ 10 + v ^ 2 * u ^ 6 * w ^ 9) - v ^ 5 * u ^ 6 * w ^ 6) - u ^ 8 * w ^ 9) - v * u ^ 8 * w ^ 8) - v ^ 5 * u ^ 8 * w ^ 4) - v ^ 9 * u ^ 8) - u ^ 9 * w ^ 8) + v ^ 2 * u ^ 9 * w ^ 6) - u ^ 10 * w ^ 7) - u ^ 11 * w ^ 6) + v ^ 2 * u ^ 11 * w ^ 4 + v ^ 6 * u ^ 11 + v * u ^ 12 * w ^ 4 + v ^ 5 * u ^ 12 + v ^ 2 * u ^ 15 + v * u ^ 16) - v ^ 17), 0, 0, -(v ^ 2) * (((((-(v ^ 4) * u - 3 * u ^ 2 * v * w ^ 2) - 3 * u ^ 3 * w ^ 2) + 2 * u ^ 3 * v * w + 4 * u ^ 3 * v ^ 2 + 2 * u ^ 4 * v + 2 * w ^ 3 * v ^ 2) - v ^ 4 * w) - 2 * v ^ 5), u ^ 6 * v ^ 15 * w ^ 3 * ((u ^ 2 * w ^ 2 + u ^ 4) - v ^ 4), u ^ 6 * v ^ 12 * w ^ 3 * ((((u * v ^ 2 * w - u ^ 2 * v ^ 2) + u ^ 3 * w) - v ^ 2 * w ^ 2) - 2 * v ^ 4), u ^ 18 * v ^ 37 * w ^ 9 * ((u ^ 2 * w ^ 2 + u ^ 4) - v ^ 4), v ^ 6 * (2 * v * u ^ 3 * w ^ 4 + 2 * w ^ 3 * v ^ 2 * u ^ 3 + 2 * u ^ 4 * w ^ 4 + 4 * v * u ^ 4 * w ^ 3 + u ^ 4 * v ^ 2 * w ^ 2 + u ^ 4 * v ^ 4 + 2 * u ^ 5 * v * w ^ 2 + 2 * u ^ 5 * v ^ 3 + u ^ 6 * w ^ 2 + u ^ 6 * v ^ 2 + u ^ 8 + v ^ 8), 0, 0, 2 * u ^ 6 * w ^ 3 * v ^ 12 * (-2 * v ^ 2 + u * w), v ^ 7 * (u ^ 3 * w ^ 4 + u ^ 3 * v * w ^ 3 + u ^ 4 * w ^ 3 + u ^ 4 * v * w ^ 2 + u ^ 4 * v ^ 3 + u ^ 5 * w ^ 2 + u ^ 5 * v ^ 2 + u ^ 7 + v ^ 7), u ^ 30 * v ^ 56 * w ^ 15 * ((((u * v * w - u * v ^ 2) + u ^ 2 * w) - v ^ 2 * w) - 2 * v ^ 3), u ^ 30 * v ^ 57 * w ^ 15 * ((u * w + u ^ 2) - v ^ 2), -(v ^ 2) * ((((((-3 * u ^ 2 * v ^ 2 * w ^ 2 - u ^ 2 * v ^ 4) + 2 * u ^ 3 * v * w ^ 2 + 4 * u ^ 3 * v ^ 3) - 3 * u ^ 4 * w ^ 2) + 2 * u ^ 5 * v + 2 * v ^ 3 * w ^ 3) - v ^ 4 * w ^ 2) - 2 * v ^ 6), -(u ^ 30) * v ^ 55 * w ^ 15 * (6u + 11v + 3w), u ^ 6 * v ^ 12 * w ^ 3 * ((((u * v * w - u * v ^ 2) + u ^ 2 * w) - v ^ 2 * w) - 2 * v ^ 3), -(u ^ 24) * v ^ 46 * w ^ 12 * ((u * w + u ^ 2) - v ^ 2), 0, u ^ 30 * v ^ 56 * w ^ 15 * ((((u * v ^ 2 * w - u ^ 2 * v ^ 2) + u ^ 3 * w) - v ^ 2 * w ^ 2) - 2 * v ^ 4), -2 * u ^ 6 * v ^ 11 * w ^ 3 * (2 * v ^ 2 * w ^ 2 + 3 * v ^ 4 + u ^ 2 * w ^ 2 + 3 * u ^ 2 * v ^ 2 + u ^ 4), -(u ^ 6) * v ^ 11 * w ^ 3 * (6 * u ^ 2 + 11 * v ^ 2 + 3 * w ^ 2), u ^ 18 * v ^ 35 * w ^ 9 * ((u * w + u ^ 2) - v ^ 2), -(u ^ 30) * v ^ 55 * w ^ 15 * (3 * u * v ^ 2 + u * w ^ 2 + 2 * v * w ^ 2 + 3 * u ^ 2 * v + u ^ 2 * w + 2 * v ^ 2 * w + 2 * u ^ 3 + 6 * v ^ 3), v ^ 6 * (2 * u ^ 3 * w ^ 4 + 4 * u ^ 3 * v * w ^ 3 + 3 * u ^ 4 * w ^ 3 + 3 * u ^ 4 * v * w ^ 2 + 2 * u ^ 4 * v ^ 3 + 2 * u ^ 5 * w ^ 2 + u ^ 5 * v ^ 2 + u ^ 6 * v + u ^ 7 + v ^ 7), 0, -(u ^ 24) * v ^ 48 * w ^ 12 * ((u ^ 2 * w ^ 2 + u ^ 4) - v ^ 4), 0, -(u ^ 6) * v ^ 11 * w ^ 3 * (3 * u * v ^ 2 + u * w ^ 2 + 2 * v * w ^ 2 + 3 * u ^ 2 * v + u ^ 2 * w + 2 * v ^ 2 * w + 2 * u ^ 3 + 6 * v ^ 3), 0, -(u ^ 12) * v ^ 23 * w ^ 6 * ((((u * v * w - u * v ^ 2) + u ^ 2 * w) - v ^ 2 * w) - 2 * v ^ 3), -(u ^ 12) * v ^ 24 * w ^ 6 * ((u * w + u ^ 2) - v ^ 2), v ^ 6 * (8 * u ^ 3 * w ^ 3 + 6 * u ^ 4 * w ^ 2 + 3 * u ^ 4 * v ^ 2 + 2 * u ^ 6 + v ^ 6), u ^ 6 * v ^ 13 * w ^ 3 * (((((-(v ^ 4) * u - 3 * u ^ 2 * v * w ^ 2) - 3 * u ^ 3 * w ^ 2) + 2 * u ^ 3 * v * w + 4 * u ^ 3 * v ^ 2 + 2 * u ^ 4 * v + 2 * w ^ 3 * v ^ 2) - v ^ 4 * w) - 2 * v ^ 5), 0, -(u ^ 12) * v ^ 24 * w ^ 6 * (((((((((((v ^ 2 * w ^ 4 + v ^ 3 * w ^ 3) - v ^ 5 * w) - 2 * v ^ 6) - v ^ 5 * u) - u ^ 2 * v * w ^ 3) - u ^ 2 * v ^ 2 * w ^ 2) - u ^ 3 * w ^ 3) - 2 * u ^ 3 * v * w ^ 2) + u ^ 3 * v ^ 2 * w + 2 * u ^ 3 * v ^ 3) - u ^ 4 * w ^ 2) + w * v * u ^ 4 + 3 * u ^ 4 * v ^ 2 + u ^ 5 * v), v ^ 12 * (8 * u ^ 6 * w ^ 6 + 6 * u ^ 8 * w ^ 4 + 3 * v ^ 4 * u ^ 8 + 2 * u ^ 12 + v ^ 12), -(u ^ 18) * v ^ 33 * w ^ 9 * (3 * u * v ^ 2 + u * w ^ 2 + 2 * v * w ^ 2 + 3 * u ^ 2 * v + u ^ 2 * w + 2 * v ^ 2 * w + 2 * u ^ 3 + 6 * v ^ 3), -(u ^ 6) * v ^ 12 * w ^ 3 * (u * w ^ 2 + 2 * u * v ^ 2 + u ^ 2 * v + v * w ^ 2 + u ^ 3 + v ^ 2 * w + 2 * v ^ 3), -(u ^ 12) * v ^ 26 * w ^ 6 * ((u ^ 2 * w ^ 2 + u ^ 4) - v ^ 4), u ^ 6 * v ^ 13 * w ^ 3 * ((((((-3 * u ^ 2 * v ^ 2 * w ^ 2 - u ^ 2 * v ^ 4) + 2 * u ^ 3 * v * w ^ 2 + 4 * u ^ 3 * v ^ 3) - 3 * u ^ 4 * w ^ 2) + 2 * u ^ 5 * v + 2 * v ^ 3 * w ^ 3) - v ^ 4 * w ^ 2) - 2 * v ^ 6), u ^ 18 * v ^ 34 * w ^ 9 * ((((u * v * w - u * v ^ 2) + u ^ 2 * w) - v ^ 2 * w) - 2 * v ^ 3), -2 * u ^ 12 * v ^ 23 * w ^ 6 * (-2 * v ^ 2 + u * w), -(u ^ 24) * v ^ 45 * w ^ 12 * ((((u * v ^ 2 * w - u ^ 2 * v ^ 2) + u ^ 3 * w) - v ^ 2 * w ^ 2) - 2 * v ^ 4), -2 * u ^ 24 * v ^ 45 * w ^ 12 * (-2 * v ^ 2 + u * w), u ^ 18 * v ^ 34 * w ^ 9 * ((((u * v ^ 2 * w - u ^ 2 * v ^ 2) + u ^ 3 * w) - v ^ 2 * w ^ 2) - 2 * v ^ 4), u ^ 6 * v ^ 14 * w ^ 3 * ((-2 * u ^ 2 * w + u ^ 2 * v + 2 * u ^ 3) - v ^ 3), -(u ^ 12) * v ^ 24 * w ^ 6 * (((((-(v ^ 4) * u - 3 * u ^ 2 * v * w ^ 2) - 3 * u ^ 3 * w ^ 2) + 2 * u ^ 3 * v * w + 4 * u ^ 3 * v ^ 2 + 2 * u ^ 4 * v + 2 * w ^ 3 * v ^ 2) - v ^ 4 * w) - 2 * v ^ 5), 2 * u ^ 6 * v ^ 13 * w ^ 3 * ((-3 * u ^ 2 * w ^ 2 + 4 * u ^ 3 * v + v * w ^ 3) - 2 * v ^ 4), -(u ^ 6) * v ^ 12 * w ^ 3 * (u + 2v) * (v + w + u), u ^ 12 * v ^ 23 * w ^ 6 * (4v + 4u + w), 0, u ^ 24 * v ^ 44 * w ^ 12 * (6 * u ^ 2 + 11 * v ^ 2 + 3 * w ^ 2), -(u ^ 6) * v ^ 12 * w ^ 3 * (4v + 4u + w), -2 * u ^ 12 * v ^ 24 * w ^ 6 * ((-3 * u ^ 2 * w ^ 2 + 4 * u ^ 3 * v + v * w ^ 3) - 2 * v ^ 4), -2 * u ^ 6 * v ^ 11 * w ^ 3 * (2 * v * w + 3 * v ^ 2 + u * w + 3 * u * v + u ^ 2), u ^ 12 * v ^ 23 * w ^ 6 * (u + 2v) * (v + w + u), 2 * u ^ 18 * v ^ 34 * w ^ 9 * (-2 * v ^ 2 + u * w), -(u ^ 30) * v ^ 55 * w ^ 15 * (6 * u ^ 2 + 11 * v ^ 2 + 3 * w ^ 2), 2 * u ^ 12 * v ^ 22 * w ^ 6 * (2 * v * w + 3 * v ^ 2 + u * w + 3 * u * v + u ^ 2), -(u ^ 6) * v ^ 11 * w ^ 3 * (6u + 11v + 3w), -20 * u ^ 6 * v ^ 11 * w ^ 3, -2 * u ^ 18 * v ^ 33 * w ^ 9 * (2 * v * w + 3 * v ^ 2 + u * w + 3 * u * v + u ^ 2), -(u ^ 18) * v ^ 33 * w ^ 9 * (6 * u ^ 2 + 11 * v ^ 2 + 3 * w ^ 2), u ^ 12 * v ^ 22 * w ^ 6 * (6u + 11v + 3w), -(u ^ 18) * v ^ 33 * w ^ 9 * (6u + 11v + 3w), -20 * u ^ 30 * v ^ 55 * w ^ 15, -20 * u ^ 18 * v ^ 33 * w ^ 9, 20 * u ^ 12 * v ^ 22 * w ^ 6, 20 * u ^ 24 * v ^ 44 * w ^ 12]
            end
        f20d = function (u, v, w)
                return [20, 3u + 8v + 9w, u * w + 4 * v * w + 2 * v ^ 2 + 2 * w ^ 2, 4 * u * v + 2 * u * w + 8 * v * w + 2 * v ^ 2 + 4 * w ^ 2, 3 * u ^ 2 + 8 * v ^ 2 + 9 * w ^ 2, -2 * u * v * w + 2 * v ^ 3 + 2 * w ^ 3, 2 * u * v * w + u * v ^ 2 + 3 * v * w ^ 2 + 2 * v ^ 2 * w + w ^ 3, v * w * (w + v), 2 * u * v ^ 2 + u * w ^ 2 + 4 * v * w ^ 2 + 2 * u ^ 2 * v + u ^ 2 * w + 4 * v ^ 2 * w + 2 * v ^ 3 + 4 * w ^ 3, -u * v * w ^ 2, -(v ^ 3) * w ^ 4 * ((((((((((((((u ^ 2 * v ^ 6 * w ^ 4 + w ^ 3 * v ^ 7 * u ^ 2) - v ^ 10 * u ^ 2) - u ^ 3 * w ^ 9) + v ^ 3 * u ^ 3 * w ^ 6 + w ^ 5 * v ^ 4 * u ^ 3) - w ^ 3 * v ^ 5 * u ^ 4) - u ^ 4 * v ^ 6 * w ^ 2) - v * w ^ 11) - w ^ 5 * v ^ 2 * u ^ 5) - w ^ 4 * v ^ 3 * u ^ 5) - w ^ 2 * v ^ 5 * u ^ 5) + u ^ 6 * w ^ 6) - u ^ 6 * v ^ 2 * w ^ 4) + w ^ 5 * u ^ 7 + v ^ 4 * w ^ 8 + v ^ 5 * w ^ 7 + v ^ 8 * w ^ 4 + w ^ 3 * v ^ 9) - v ^ 12), u * v ^ 2 * w + 2 * v * w ^ 3 + u ^ 2 * v * w + u ^ 2 * v ^ 2 + 2 * v ^ 2 * w ^ 2 + v ^ 3 * w + w ^ 4, 0, 4 * u ^ 2 * v ^ 2 + 2 * u ^ 2 * w ^ 2 + 8 * v ^ 2 * w ^ 2 + 2 * v ^ 4 + 4 * w ^ 4, (((((2 * u ^ 2 * v ^ 2 * w ^ 3 + 2 * u ^ 2 * v ^ 3 * w ^ 2 + 2 * u ^ 3 * v ^ 2 * w ^ 2) - u ^ 3 * w ^ 4) - 4 * v ^ 3 * w ^ 4) - u ^ 4 * w ^ 3) - 4 * v ^ 4 * w ^ 3) + 2 * v ^ 7 + 2 * w ^ 7, (-u * v * w ^ 2 - u * v ^ 2 * w) + u * v ^ 3 + v * w ^ 3 + v ^ 3 * w + w ^ 4, ((((((-2 * u * v * w ^ 3 - u * v ^ 3 * w) + v ^ 4 * u) - v * w ^ 4) + u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w + u ^ 2 * v ^ 3 + u ^ 2 * w ^ 3) - u ^ 3 * v * w) - v ^ 3 * w ^ 2) + w ^ 5, 0, -(u ^ 2) * v ^ 2 * w ^ 4, 0, v ^ 6 * w ^ 8 * (w * v ^ 7 * u ^ 4 + u ^ 4 * v ^ 8 + u ^ 6 * w ^ 6 + w ^ 5 * v * u ^ 6 + w ^ 5 * u ^ 7 + v ^ 2 * w ^ 10 + v ^ 3 * w ^ 9 + w * v ^ 11 + v ^ 12), (-u * v * w ^ 3 - u * v ^ 3 * w) + u ^ 2 * v ^ 3 + w ^ 3 * v ^ 2 + v ^ 3 * w ^ 2 + w ^ 5, u ^ 4 * v ^ 9 * w ^ 11, v ^ 5 * w ^ 5 * (w + v) * ((((w ^ 4 - v * w ^ 3) + v ^ 2 * w ^ 2) - v ^ 3 * w) + v ^ 4), u ^ 17 * v ^ 42 * w ^ 49, -(v ^ 3) * w ^ 4 * ((((((((2 * w ^ 3 * v ^ 6 * u ^ 2 - v ^ 9 * u ^ 2) - u ^ 3 * w ^ 8) + 2 * w ^ 5 * v ^ 3 * u ^ 3) - 3 * w ^ 2 * v ^ 5 * u ^ 4) - v * w ^ 10) - 3 * w ^ 4 * v ^ 2 * u ^ 5) + 2 * u ^ 6 * w ^ 5 + 2 * v ^ 4 * w ^ 7 + 2 * w ^ 3 * v ^ 8) - v ^ 11), v ^ 2 * w ^ 2 * ((-(v ^ 2) + 2 * u * v) - w ^ 2), 0, (((((((((-u * v ^ 2 * w ^ 3 - 2 * v * w ^ 5) - u ^ 2 * v * w ^ 3) + 2 * u ^ 2 * v ^ 2 * w ^ 2) - u ^ 2 * v ^ 3 * w) + 2 * u ^ 2 * v ^ 4 + u ^ 2 * w ^ 4 + 2 * v ^ 2 * w ^ 4) - u ^ 3 * v ^ 2 * w) - 3 * v ^ 3 * w ^ 3) + 2 * v ^ 4 * w ^ 2) - v ^ 5 * w) + w ^ 6, 0, ((6 * u ^ 2 * v ^ 2 * w ^ 2 - 2 * u ^ 3 * w ^ 3) - 8 * v ^ 3 * w ^ 3) + 2 * v ^ 6 + 2 * w ^ 6, 2 * u ^ 15 * v ^ 40 * w ^ 45 * ((-(v ^ 3) + u * v * w) - w ^ 3), -(v ^ 6) * w ^ 8 * ((((((((((((((w ^ 4 * u ^ 4 * v ^ 9 + w ^ 3 * v ^ 10 * u ^ 4) - v ^ 13 * u ^ 4) - w ^ 11 * u ^ 6) + w ^ 8 * v ^ 3 * u ^ 6 + w ^ 7 * v ^ 4 * u ^ 6) - w ^ 3 * v ^ 8 * u ^ 6) - w ^ 2 * v ^ 9 * u ^ 6) - w ^ 2 * v ^ 8 * u ^ 7) - w ^ 7 * v ^ 2 * u ^ 8) - w ^ 6 * v ^ 3 * u ^ 8) - v ^ 2 * w ^ 15) + u ^ 9 * w ^ 8) - v ^ 2 * u ^ 9 * w ^ 6) + u ^ 10 * w ^ 7 + w ^ 12 * v ^ 5 + w ^ 11 * v ^ 6 + v ^ 13 * w ^ 4 + v ^ 14 * w ^ 3) - v ^ 17), 0, 0, ((((-2 * u * v ^ 3 * w ^ 3 + u * v ^ 6 + v * w ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) - 4 * v ^ 3 * w ^ 4) - 2 * v ^ 4 * w ^ 3) + v ^ 6 * w + w ^ 7, u ^ 5 * v ^ 10 * w ^ 13, -(u ^ 3) * v ^ 8 * w ^ 9 * ((-u * v * w ^ 3 - u * v ^ 3 * w) + u ^ 2 * v ^ 3 + w ^ 3 * v ^ 2 + v ^ 3 * w ^ 2 + w ^ 5), u ^ 11 * v ^ 26 * w ^ 31, v ^ 3 * w ^ 4 * (u ^ 2 * v ^ 3 * w ^ 2 + 2 * w * v ^ 4 * u ^ 2 + v ^ 5 * u ^ 2 + 2 * u ^ 3 * w ^ 4 + 2 * u ^ 3 * v * w ^ 3 + 2 * u ^ 3 * v ^ 4 + 2 * u ^ 4 * w ^ 3 + 2 * u ^ 4 * v * w ^ 2 + v * w ^ 6 + 2 * v ^ 2 * w ^ 5 + 2 * v ^ 6 * w + v ^ 7), 0, 0, 2 * u ^ 3 * v ^ 8 * w ^ 9 * ((-(v ^ 3) + u * v * w) - w ^ 3), v ^ 3 * w ^ 4 * (w * v ^ 4 * u ^ 2 + v ^ 5 * u ^ 2 + u ^ 3 * w ^ 4 + u ^ 3 * v * w ^ 3 + u ^ 4 * w ^ 3 + v * w ^ 6 + v ^ 2 * w ^ 5 + v ^ 6 * w + v ^ 7), -(u ^ 15) * v ^ 40 * w ^ 45 * ((-u * v * w ^ 2 - u * v ^ 2 * w) + u * v ^ 3 + v * w ^ 3 + v ^ 3 * w + w ^ 4), u ^ 16 * v ^ 41 * w ^ 47, (((((3 * u ^ 2 * v ^ 2 * w ^ 4 - 2 * w ^ 3 * v ^ 3 * u ^ 2) + 3 * u ^ 2 * v ^ 4 * w ^ 2 + u ^ 2 * v ^ 6 + w ^ 6 * v ^ 2) - 2 * w ^ 3 * v ^ 2 * u ^ 3) - 4 * v ^ 3 * w ^ 5) - 2 * v ^ 5 * w ^ 3) + v ^ 6 * w ^ 2 + w ^ 8, -(u ^ 15) * v ^ 40 * w ^ 45 * (3u + 8v + 9w), -(u ^ 3) * v ^ 8 * w ^ 9 * ((-u * v * w ^ 2 - u * v ^ 2 * w) + u * v ^ 3 + v * w ^ 3 + v ^ 3 * w + w ^ 4), -(u ^ 13) * v ^ 33 * w ^ 38, 0, -(u ^ 15) * v ^ 40 * w ^ 45 * ((-u * v * w ^ 3 - u * v ^ 3 * w) + u ^ 2 * v ^ 3 + w ^ 3 * v ^ 2 + v ^ 3 * w ^ 2 + w ^ 5), -2 * u ^ 3 * v ^ 8 * w ^ 9 * (2 * w ^ 4 + 4 * v ^ 2 * w ^ 2 + v ^ 4 + u ^ 2 * w ^ 2 + 2 * u ^ 2 * v ^ 2), -(u ^ 3) * v ^ 8 * w ^ 9 * (3 * u ^ 2 + 8 * v ^ 2 + 9 * w ^ 2), u ^ 10 * v ^ 25 * w ^ 29, -(u ^ 15) * v ^ 40 * w ^ 45 * (2 * u * v ^ 2 + u * w ^ 2 + 4 * v * w ^ 2 + 2 * u ^ 2 * v + u ^ 2 * w + 4 * v ^ 2 * w + 2 * v ^ 3 + 4 * w ^ 3), v ^ 3 * w ^ 4 * (2 * u ^ 2 * v ^ 3 * w + 3 * u ^ 2 * v ^ 4 + 4 * u ^ 3 * w ^ 3 + 2 * u ^ 3 * v * w ^ 2 + u ^ 3 * v ^ 3 + 2 * u ^ 4 * w ^ 2 + 2 * v * w ^ 5 + v ^ 2 * w ^ 4 + v ^ 5 * w + 2 * v ^ 6), 0, -(u ^ 14) * v ^ 34 * w ^ 40, 0, -(u ^ 3) * v ^ 8 * w ^ 9 * (2 * u * v ^ 2 + u * w ^ 2 + 4 * v * w ^ 2 + 2 * u ^ 2 * v + u ^ 2 * w + 4 * v ^ 2 * w + 2 * v ^ 3 + 4 * w ^ 3), 0, u ^ 6 * v ^ 16 * w ^ 18 * ((-u * v * w ^ 2 - u * v ^ 2 * w) + u * v ^ 3 + v * w ^ 3 + v ^ 3 * w + w ^ 4), -(u ^ 7) * v ^ 17 * w ^ 20, v ^ 3 * w ^ 4 * (6 * u ^ 2 * v ^ 3 + 8 * u ^ 3 * w ^ 2 + 3 * v * w ^ 4 + 3 * v ^ 5), u ^ 3 * v ^ 8 * w ^ 9 * ((((((((-(w ^ 7) - v * w ^ 6) + 4 * v ^ 3 * w ^ 4 + 2 * v ^ 4 * w ^ 3) - v ^ 6 * w) + 2 * u * v ^ 3 * w ^ 3) - u * v ^ 6) - 3 * u ^ 2 * v ^ 2 * w ^ 3) - 3 * u ^ 2 * v ^ 3 * w ^ 2) + 2 * u ^ 3 * v * w ^ 3), 0, -(u ^ 6) * v ^ 16 * w ^ 18 * ((((((((((((-(w ^ 8) - w ^ 7 * v) + 2 * v ^ 3 * w ^ 5 + 3 * w ^ 4 * v ^ 4 + v ^ 5 * w ^ 3) - w * v ^ 7) + w ^ 4 * v ^ 3 * u + w ^ 3 * v ^ 4 * u) - v ^ 7 * u) - u ^ 2 * v ^ 2 * w ^ 4) - 2 * w ^ 3 * v ^ 3 * u ^ 2) - u ^ 2 * v ^ 4 * w ^ 2) + v * u ^ 3 * w ^ 4) - w ^ 3 * v ^ 2 * u ^ 3) - w ^ 2 * v ^ 3 * u ^ 3) + v * u ^ 4 * w ^ 3), v ^ 6 * w ^ 8 * (6 * u ^ 4 * v ^ 6 + 8 * u ^ 6 * w ^ 4 + 3 * v ^ 2 * w ^ 8 + 3 * v ^ 10), -(u ^ 9) * v ^ 24 * w ^ 27 * (2 * u * v ^ 2 + u * w ^ 2 + 4 * v * w ^ 2 + 2 * u ^ 2 * v + u ^ 2 * w + 4 * v ^ 2 * w + 2 * v ^ 3 + 4 * w ^ 3), -(u ^ 3) * v ^ 8 * w ^ 9 * (u * v ^ 2 * w + 2 * v * w ^ 3 + u ^ 2 * v * w + u ^ 2 * v ^ 2 + 2 * v ^ 2 * w ^ 2 + v ^ 3 * w + w ^ 4), -(u ^ 8) * v ^ 18 * w ^ 22, u ^ 3 * v ^ 8 * w ^ 9 * ((((((((-(w ^ 8) - w ^ 6 * v ^ 2) + 4 * v ^ 3 * w ^ 5 + 2 * v ^ 5 * w ^ 3) - v ^ 6 * w ^ 2) - 3 * u ^ 2 * v ^ 2 * w ^ 4) + 2 * w ^ 3 * v ^ 3 * u ^ 2) - 3 * u ^ 2 * v ^ 4 * w ^ 2) - u ^ 2 * v ^ 6) + 2 * w ^ 3 * v ^ 2 * u ^ 3), -(u ^ 9) * v ^ 24 * w ^ 27 * ((-u * v * w ^ 2 - u * v ^ 2 * w) + u * v ^ 3 + v * w ^ 3 + v ^ 3 * w + w ^ 4), -2 * u ^ 6 * v ^ 16 * w ^ 18 * ((-(v ^ 3) + u * v * w) - w ^ 3), u ^ 12 * v ^ 32 * w ^ 36 * ((-u * v * w ^ 3 - u * v ^ 3 * w) + u ^ 2 * v ^ 3 + w ^ 3 * v ^ 2 + v ^ 3 * w ^ 2 + w ^ 5), -2 * u ^ 12 * v ^ 32 * w ^ 36 * ((-(v ^ 3) + u * v * w) - w ^ 3), -(u ^ 9) * v ^ 24 * w ^ 27 * ((-u * v * w ^ 3 - u * v ^ 3 * w) + u ^ 2 * v ^ 3 + w ^ 3 * v ^ 2 + v ^ 3 * w ^ 2 + w ^ 5), -(u ^ 3) * v ^ 10 * w ^ 11 * ((-(v ^ 2) + 2 * u * v) - w ^ 2), -(u ^ 6) * v ^ 16 * w ^ 18 * ((((((((-(w ^ 7) - v * w ^ 6) + 4 * v ^ 3 * w ^ 4 + 2 * v ^ 4 * w ^ 3) - v ^ 6 * w) + 2 * u * v ^ 3 * w ^ 3) - u * v ^ 6) - 3 * u ^ 2 * v ^ 2 * w ^ 3) - 3 * u ^ 2 * v ^ 3 * w ^ 2) + 2 * u ^ 3 * v * w ^ 3), 2 * u ^ 3 * v ^ 8 * w ^ 9 * ((((-(w ^ 6) + 4 * v ^ 3 * w ^ 3) - v ^ 6) - 3 * u ^ 2 * v ^ 2 * w ^ 2) + u ^ 3 * w ^ 3), -(u ^ 3) * v ^ 8 * w ^ 9 * (2 * u * v * w + u * v ^ 2 + 3 * v * w ^ 2 + 2 * v ^ 2 * w + w ^ 3), u ^ 6 * v ^ 16 * w ^ 18 * (u * w + 4 * v * w + 2 * v ^ 2 + 2 * w ^ 2), 0, u ^ 12 * v ^ 32 * w ^ 36 * (3 * u ^ 2 + 8 * v ^ 2 + 9 * w ^ 2), -(u ^ 3) * v ^ 8 * w ^ 9 * (u * w + 4 * v * w + 2 * v ^ 2 + 2 * w ^ 2), -2 * u ^ 6 * v ^ 16 * w ^ 18 * ((((-(w ^ 6) + 4 * v ^ 3 * w ^ 3) - v ^ 6) - 3 * u ^ 2 * v ^ 2 * w ^ 2) + u ^ 3 * w ^ 3), -2 * u ^ 3 * v ^ 8 * w ^ 9 * (v ^ 2 + 4 * v * w + 2 * u * v + 2 * w ^ 2 + u * w), u ^ 6 * v ^ 16 * w ^ 18 * (2 * u * v * w + u * v ^ 2 + 3 * v * w ^ 2 + 2 * v ^ 2 * w + w ^ 3), 2 * u ^ 9 * v ^ 24 * w ^ 27 * ((-(v ^ 3) + u * v * w) - w ^ 3), -(u ^ 15) * v ^ 40 * w ^ 45 * (3 * u ^ 2 + 8 * v ^ 2 + 9 * w ^ 2), 2 * u ^ 6 * v ^ 16 * w ^ 18 * (v ^ 2 + 4 * v * w + 2 * u * v + 2 * w ^ 2 + u * w), -(u ^ 3) * v ^ 8 * w ^ 9 * (3u + 8v + 9w), -20 * u ^ 3 * v ^ 8 * w ^ 9, -2 * u ^ 9 * v ^ 24 * w ^ 27 * (v ^ 2 + 4 * v * w + 2 * u * v + 2 * w ^ 2 + u * w), -(u ^ 9) * v ^ 24 * w ^ 27 * (3 * u ^ 2 + 8 * v ^ 2 + 9 * w ^ 2), u ^ 6 * v ^ 16 * w ^ 18 * (3u + 8v + 9w), -(u ^ 9) * v ^ 24 * w ^ 27 * (3u + 8v + 9w), -20 * u ^ 15 * v ^ 40 * w ^ 45, -20 * u ^ 9 * v ^ 24 * w ^ 27, 20 * u ^ 6 * v ^ 16 * w ^ 18, 20 * u ^ 12 * v ^ 32 * w ^ 36]
            end
        f24 = function (u, v, w)
                return [24, 12u + 6v + 6w, 2 * u * (v + w + 2u), 6 * u * v + 6 * u * w + 2 * v * w + 6 * u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2, 12 * u ^ 2 + 6 * v ^ 2 + 6 * w ^ 2, 4 * u * (-v * w + u ^ 2), u * (v ^ 2 + w ^ 2 + 2 * u * v + 2 * u * w + 2 * u ^ 2), u * (-v * w + u ^ 2), 3 * u * v ^ 2 + 3 * u * w ^ 2 + v * w ^ 2 + 3 * u ^ 2 * v + 3 * u ^ 2 * w + v ^ 2 * w + 6 * u ^ 3 + 2 * v ^ 3 + 2 * w ^ 3, u ^ 2 * (-v * w + u ^ 2), u ^ 6 * (((((((((((v ^ 6 * w ^ 7 + v ^ 7 * w ^ 6 + u * v ^ 6 * w ^ 6 + u ^ 2 * v ^ 4 * w ^ 7 + 2 * u ^ 2 * v ^ 5 * w ^ 6 + 2 * u ^ 2 * v ^ 6 * w ^ 5 + u ^ 2 * v ^ 7 * w ^ 4) - u ^ 3 * v ^ 2 * w ^ 8) - u ^ 3 * v ^ 3 * w ^ 7) + u ^ 3 * v ^ 4 * w ^ 6 + u ^ 3 * v ^ 5 * w ^ 5 + u ^ 3 * v ^ 6 * w ^ 4) - u ^ 3 * v ^ 7 * w ^ 3) - u ^ 3 * v ^ 8 * w ^ 2) - u ^ 4 * v ^ 2 * w ^ 7) - u ^ 4 * v ^ 3 * w ^ 6) - u ^ 4 * v ^ 6 * w ^ 3) - u ^ 4 * v ^ 7 * w ^ 2) + u ^ 7 * v ^ 2 * w ^ 4 + u ^ 7 * v ^ 3 * w ^ 3 + u ^ 7 * v ^ 4 * w ^ 2 + u ^ 13), u * (v ^ 3 + w ^ 3 + u * v ^ 2 + u * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 2 * u ^ 3), -(u ^ 2) * v * w, 6 * u ^ 2 * v ^ 2 + 6 * u ^ 2 * w ^ 2 + 2 * v ^ 2 * w ^ 2 + 6 * u ^ 4 + 2 * v ^ 4 + 2 * w ^ 4, 2 * u ^ 2 * ((((((2 * w ^ 3 * v ^ 2 + 2 * v ^ 3 * w ^ 2 + 2 * u * v ^ 2 * w ^ 2) - v ^ 4 * u) - w ^ 4 * u) - u ^ 2 * v ^ 3) - u ^ 2 * w ^ 3) + 2 * u ^ 5), u * (v + w + 2u) * (-v * w + u ^ 2), ((2 * u * v ^ 2 * w ^ 2 - v ^ 4 * u) - w ^ 4 * u) + u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w + w ^ 3 * v ^ 2 + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2 + v ^ 3 * w ^ 2 + 2 * u ^ 5, -(u ^ 4) * v ^ 2 * w ^ 2, u ^ 4 * (-v * w + u ^ 2) * (v * w + u ^ 2), 0, u ^ 13 * (v ^ 4 * w ^ 9 + v ^ 6 * w ^ 7 + v ^ 7 * w ^ 6 + v ^ 9 * w ^ 4 + u * v ^ 4 * w ^ 8 + u * v ^ 6 * w ^ 6 + u * v ^ 8 * w ^ 4 + u ^ 13), u * (-v * w + u ^ 2) * (2 * u ^ 2 + v ^ 2 + w ^ 2), v ^ 5 * u ^ 12 * w ^ 5 * (-v * w + u ^ 2), u ^ 5 * (-v * w + u ^ 2) * (u ^ 8 + u ^ 6 * w * v + u ^ 4 * v ^ 2 * w ^ 2 + w ^ 3 * v ^ 3 * u ^ 2 + w ^ 4 * v ^ 4), u ^ 54 * v ^ 25 * w ^ 25 * (-v * w + u ^ 2) * (v * w + u ^ 2), u ^ 6 * ((((((3 * v ^ 6 * w ^ 6 + 3 * u ^ 2 * v ^ 4 * w ^ 6 + 3 * u ^ 2 * v ^ 5 * w ^ 5 + 3 * u ^ 2 * v ^ 6 * w ^ 4) - 2 * u ^ 3 * v ^ 2 * w ^ 7) - 2 * v ^ 3 * u ^ 3 * w ^ 6) - 2 * u ^ 3 * v ^ 6 * w ^ 3) - 2 * u ^ 3 * v ^ 7 * w ^ 2) + u ^ 6 * v ^ 2 * w ^ 4 + u ^ 6 * v ^ 3 * w ^ 3 + u ^ 6 * v ^ 4 * w ^ 2 + u ^ 12), u ^ 2 * (3 * v ^ 2 * w ^ 2 + 2 * u * v * w ^ 2 + 2 * u * v ^ 2 * w + u ^ 4), -(u ^ 6) * v ^ 3 * w ^ 3, (((((((-(v ^ 5) * u - u * w ^ 5) + 4 * u ^ 2 * v ^ 2 * w ^ 2 + u ^ 2 * v ^ 4 + u ^ 2 * w ^ 4 + v ^ 2 * w ^ 4) - 2 * u ^ 3 * v ^ 3) - 2 * u ^ 3 * w ^ 3) + 3 * u ^ 4 * v ^ 2 + 3 * u ^ 4 * w ^ 2 + v ^ 4 * w ^ 2) - u ^ 5 * v) - u ^ 5 * w) + 2 * u ^ 6, 0, 4 * u ^ 2 * (((3 * v ^ 2 * w ^ 2 - u * v ^ 3) - u * w ^ 3) + u ^ 4), 4 * u ^ 51 * v ^ 25 * w ^ 25 * (-v * w + u ^ 2), u ^ 10 * (((((((((v ^ 10 * w ^ 11 + v ^ 11 * w ^ 10 + u * v ^ 10 * w ^ 10 + u ^ 4 * v ^ 6 * w ^ 11 + u ^ 4 * v ^ 7 * w ^ 10 + u ^ 4 * v ^ 8 * w ^ 9 + u ^ 4 * v ^ 9 * w ^ 8 + u ^ 4 * v ^ 10 * w ^ 7 + u ^ 4 * v ^ 11 * w ^ 6) - u ^ 5 * v ^ 4 * w ^ 12) + u ^ 5 * v ^ 8 * w ^ 8) - u ^ 5 * v ^ 12 * w ^ 4) - u ^ 6 * v ^ 4 * w ^ 11) - u ^ 6 * v ^ 6 * w ^ 9) - u ^ 6 * v ^ 9 * w ^ 6) - u ^ 6 * v ^ 11 * w ^ 4) + u ^ 9 * v ^ 4 * w ^ 8 + u ^ 9 * v ^ 6 * w ^ 6 + u ^ 9 * v ^ 8 * w ^ 4 + u ^ 21), 0, -(u ^ 8) * w ^ 4 * v ^ 4, u ^ 2 * ((((((3 * w ^ 3 * v ^ 2 + 3 * v ^ 3 * w ^ 2 + 6 * u * v ^ 2 * w ^ 2) - 2 * v ^ 4 * u) - 2 * w ^ 4 * u) - 2 * u ^ 2 * v ^ 3) - 2 * u ^ 2 * w ^ 3) + u ^ 4 * v + u ^ 4 * w + 2 * u ^ 5), u ^ 14 * v ^ 5 * w ^ 5 * (-v * w + u ^ 2) * (v * w + u ^ 2), u ^ 11 * v ^ 5 * w ^ 5 * (-v * w + u ^ 2) * (2 * u ^ 2 + v ^ 2 + w ^ 2), u ^ 34 * v ^ 15 * w ^ 15 * (-v * w + u ^ 2) * (v * w + u ^ 2), u ^ 4 * (v ^ 4 * w ^ 6 + v ^ 6 * w ^ 4 + u ^ 2 * v ^ 2 * w ^ 6 + 3 * u ^ 2 * v ^ 4 * w ^ 4 + u ^ 2 * v ^ 6 * w ^ 2 + 2 * u ^ 3 * v ^ 2 * w ^ 5 + 4 * u ^ 3 * v ^ 3 * w ^ 4 + 4 * u ^ 3 * v ^ 4 * w ^ 3 + 2 * u ^ 3 * v ^ 5 * w ^ 2 + u ^ 4 * v ^ 2 * w ^ 4 + 2 * u ^ 4 * w ^ 3 * v ^ 3 + u ^ 4 * v ^ 4 * w ^ 2 + u ^ 10), 0, -(u ^ 22) * v ^ 11 * w ^ 11, 4 * u ^ 11 * v ^ 5 * w ^ 5 * (-v * w + u ^ 2), u ^ 7 * (v ^ 2 * w ^ 5 + v ^ 3 * w ^ 4 + v ^ 4 * w ^ 3 + v ^ 5 * w ^ 2 + u * v ^ 2 * w ^ 4 + u * v ^ 3 * w ^ 3 + u * v ^ 4 * w ^ 2 + u ^ 7), u ^ 51 * v ^ 25 * w ^ 25 * (v + w + 2u) * (-v * w + u ^ 2), u ^ 52 * v ^ 25 * w ^ 25 * (-v * w + u ^ 2), u ^ 2 * (((((((3 * v ^ 2 * w ^ 4 + 3 * v ^ 4 * w ^ 2) - 2 * v ^ 5 * u) - 2 * u * w ^ 5) + 6 * u ^ 2 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3) - 2 * u ^ 3 * w ^ 3) + u ^ 4 * v ^ 2 + u ^ 4 * w ^ 2 + 2 * u ^ 6), 6 * u ^ 50 * v ^ 25 * w ^ 25 * (v + w + 2u), u ^ 11 * v ^ 5 * w ^ 5 * (v + w + 2u) * (-v * w + u ^ 2), u ^ 42 * v ^ 20 * w ^ 20 * (-v * w + u ^ 2), 0, u ^ 51 * v ^ 25 * w ^ 25 * (-v * w + u ^ 2) * (2 * u ^ 2 + v ^ 2 + w ^ 2), 2 * u ^ 10 * v ^ 5 * w ^ 5 * (w ^ 4 + v ^ 2 * w ^ 2 + v ^ 4 + 3 * u ^ 2 * w ^ 2 + 3 * u ^ 2 * v ^ 2 + 3 * u ^ 4), 6 * u ^ 10 * v ^ 5 * w ^ 5 * (2 * u ^ 2 + v ^ 2 + w ^ 2), u ^ 32 * v ^ 15 * w ^ 15 * (-v * w + u ^ 2), u ^ 50 * v ^ 25 * w ^ 25 * (3 * u * v ^ 2 + 3 * u * w ^ 2 + v * w ^ 2 + 3 * u ^ 2 * v + 3 * u ^ 2 * w + v ^ 2 * w + 6 * u ^ 3 + 2 * v ^ 3 + 2 * w ^ 3), u ^ 4 * (v ^ 4 * w ^ 5 + v ^ 5 * w ^ 4 + u * v ^ 4 * w ^ 4 + 2 * v ^ 2 * u ^ 2 * w ^ 5 + 3 * u ^ 2 * v ^ 3 * w ^ 4 + 3 * u ^ 2 * v ^ 4 * w ^ 3 + 2 * u ^ 2 * v ^ 5 * w ^ 2 + 3 * u ^ 3 * v ^ 2 * w ^ 4 + 4 * u ^ 3 * w ^ 3 * v ^ 3 + 3 * u ^ 3 * v ^ 4 * w ^ 2 + u ^ 9), 0, u ^ 44 * v ^ 20 * w ^ 20 * (-v * w + u ^ 2) * (v * w + u ^ 2), 0, u ^ 10 * v ^ 5 * w ^ 5 * (3 * u * v ^ 2 + 3 * u * w ^ 2 + v * w ^ 2 + 3 * u ^ 2 * v + 3 * u ^ 2 * w + v ^ 2 * w + 6 * u ^ 3 + 2 * v ^ 3 + 2 * w ^ 3), 0, u ^ 21 * v ^ 10 * w ^ 10 * (v + w + 2u) * (-v * w + u ^ 2), u ^ 22 * v ^ 10 * w ^ 10 * (-v * w + u ^ 2), u ^ 4 * (3 * w ^ 4 * v ^ 4 + 6 * u ^ 2 * v ^ 2 * w ^ 4 + 8 * w ^ 3 * v ^ 3 * u ^ 2 + 6 * u ^ 2 * v ^ 4 * w ^ 2 + u ^ 8), u ^ 12 * v ^ 5 * w ^ 5 * ((((((3 * w ^ 3 * v ^ 2 + 3 * v ^ 3 * w ^ 2 + 6 * u * v ^ 2 * w ^ 2) - 2 * v ^ 4 * u) - 2 * w ^ 4 * u) - 2 * u ^ 2 * v ^ 3) - 2 * u ^ 2 * w ^ 3) + u ^ 4 * v + u ^ 4 * w + 2 * u ^ 5), -(u ^ 12) * v ^ 6 * w ^ 6, u ^ 22 * v ^ 10 * w ^ 10 * ((((((((((v ^ 2 * w ^ 4 + 2 * v ^ 3 * w ^ 3 + v ^ 4 * w ^ 2) - u * w ^ 5) + 3 * u * v ^ 2 * w ^ 3 + 3 * u * v ^ 3 * w ^ 2) - v ^ 5 * u) - 2 * u ^ 2 * w ^ 4) + 2 * u ^ 2 * v ^ 2 * w ^ 2) - 2 * u ^ 2 * v ^ 4) - u ^ 3 * w ^ 3) - u ^ 3 * v ^ 3) + u ^ 5 * w + u ^ 5 * v + 2 * u ^ 6), u ^ 8 * (3 * v ^ 8 * w ^ 8 + 6 * u ^ 4 * v ^ 4 * w ^ 8 + 8 * u ^ 4 * v ^ 6 * w ^ 6 + 6 * u ^ 4 * v ^ 8 * w ^ 4 + u ^ 16), u ^ 30 * v ^ 15 * w ^ 15 * (3 * u * v ^ 2 + 3 * u * w ^ 2 + v * w ^ 2 + 3 * u ^ 2 * v + 3 * u ^ 2 * w + v ^ 2 * w + 6 * u ^ 3 + 2 * v ^ 3 + 2 * w ^ 3), u ^ 11 * v ^ 5 * w ^ 5 * (v ^ 3 + w ^ 3 + u * v ^ 2 + u * w ^ 2 + u ^ 2 * v + u ^ 2 * w + 2 * u ^ 3), u ^ 24 * v ^ 10 * w ^ 10 * (-v * w + u ^ 2) * (v * w + u ^ 2), u ^ 12 * v ^ 5 * w ^ 5 * (((((((3 * v ^ 2 * w ^ 4 + 3 * v ^ 4 * w ^ 2) - 2 * v ^ 5 * u) - 2 * u * w ^ 5) + 6 * u ^ 2 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3) - 2 * u ^ 3 * w ^ 3) + u ^ 4 * v ^ 2 + u ^ 4 * w ^ 2 + 2 * u ^ 6), u ^ 31 * v ^ 15 * w ^ 15 * (v + w + 2u) * (-v * w + u ^ 2), 4 * u ^ 21 * v ^ 10 * w ^ 10 * (-v * w + u ^ 2), u ^ 41 * v ^ 20 * w ^ 20 * (-v * w + u ^ 2) * (2 * u ^ 2 + v ^ 2 + w ^ 2), 4 * u ^ 41 * v ^ 20 * w ^ 20 * (-v * w + u ^ 2), u ^ 31 * v ^ 15 * w ^ 15 * (-v * w + u ^ 2) * (2 * u ^ 2 + v ^ 2 + w ^ 2), u ^ 12 * v ^ 5 * w ^ 5 * (3 * v ^ 2 * w ^ 2 + 2 * u * v * w ^ 2 + 2 * u * v ^ 2 * w + u ^ 4), u ^ 22 * v ^ 10 * w ^ 10 * ((((((3 * w ^ 3 * v ^ 2 + 3 * v ^ 3 * w ^ 2 + 6 * u * v ^ 2 * w ^ 2) - 2 * v ^ 4 * u) - 2 * w ^ 4 * u) - 2 * u ^ 2 * v ^ 3) - 2 * u ^ 2 * w ^ 3) + u ^ 4 * v + u ^ 4 * w + 2 * u ^ 5), 4 * u ^ 12 * v ^ 5 * w ^ 5 * (((3 * v ^ 2 * w ^ 2 - u * v ^ 3) - u * w ^ 3) + u ^ 4), u ^ 11 * v ^ 5 * w ^ 5 * (v ^ 2 + w ^ 2 + 2 * u * v + 2 * u * w + 2 * u ^ 2), 2 * u ^ 21 * v ^ 10 * w ^ 10 * (v + w + 2u), 0, 6 * u ^ 40 * v ^ 20 * w ^ 20 * (2 * u ^ 2 + v ^ 2 + w ^ 2), 2 * u ^ 11 * v ^ 5 * w ^ 5 * (v + w + 2u), 4 * u ^ 22 * v ^ 10 * w ^ 10 * (((3 * v ^ 2 * w ^ 2 - u * v ^ 3) - u * w ^ 3) + u ^ 4), 2 * u ^ 10 * v ^ 5 * w ^ 5 * (w ^ 2 + v * w + v ^ 2 + 3 * u * w + 3 * u * v + 3 * u ^ 2), u ^ 21 * v ^ 10 * w ^ 10 * (v ^ 2 + w ^ 2 + 2 * u * v + 2 * u * w + 2 * u ^ 2), 4 * u ^ 31 * v ^ 15 * w ^ 15 * (-v * w + u ^ 2), 6 * u ^ 50 * v ^ 25 * w ^ 25 * (2 * u ^ 2 + v ^ 2 + w ^ 2), 2 * u ^ 20 * v ^ 10 * w ^ 10 * (w ^ 2 + v * w + v ^ 2 + 3 * u * w + 3 * u * v + 3 * u ^ 2), 6 * u ^ 10 * v ^ 5 * w ^ 5 * (v + w + 2u), 24 * u ^ 10 * v ^ 5 * w ^ 5, 2 * u ^ 30 * v ^ 15 * w ^ 15 * (w ^ 2 + v * w + v ^ 2 + 3 * u * w + 3 * u * v + 3 * u ^ 2), 6 * u ^ 30 * v ^ 15 * w ^ 15 * (2 * u ^ 2 + v ^ 2 + w ^ 2), 6 * u ^ 20 * v ^ 10 * w ^ 10 * (v + w + 2u), 6 * u ^ 30 * v ^ 15 * w ^ 15 * (v + w + 2u), 24 * u ^ 50 * v ^ 25 * w ^ 25, 24 * u ^ 30 * v ^ 15 * w ^ 15, 24 * u ^ 20 * v ^ 10 * w ^ 10, 24 * u ^ 40 * v ^ 20 * w ^ 20]
            end
        f30a = function (u, v, w)
                return [30, 12u + 9v + 9w, 4 * u * v + 4 * u * w + 2 * v * w + u ^ 2, 6 * u * v + 6 * u * w + 6 * v * w + 6 * u ^ 2 + 3 * v ^ 2 + 3 * w ^ 2, 12 * u ^ 2 + 9 * v ^ 2 + 9 * w ^ 2, u * (-3 * v * w + u ^ 2), 2 * u * v * w + u * v ^ 2 + u * w ^ 2 + v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + v ^ 2 * w + u ^ 3, u * v * w, 3 * u * v ^ 2 + 3 * u * w ^ 2 + 3 * v * w ^ 2 + 3 * u ^ 2 * v + 3 * u ^ 2 * w + 3 * v ^ 2 * w + 6 * u ^ 3 + 3 * v ^ 3 + 3 * w ^ 3, -(u ^ 2) * (w ^ 2 + v * w + v ^ 2), u ^ 4 * ((((((((((((((((v ^ 7 * w ^ 8 + v ^ 8 * w ^ 7) - u ^ 2 * v ^ 6 * w ^ 7) - u ^ 2 * v ^ 7 * w ^ 6) + u ^ 3 * v ^ 4 * w ^ 8) - u ^ 3 * v ^ 6 * w ^ 6) + u ^ 3 * v ^ 8 * w ^ 4 + u ^ 4 * v ^ 4 * w ^ 7 + u ^ 4 * v ^ 5 * w ^ 6 + u ^ 4 * v ^ 6 * w ^ 5 + u ^ 4 * v ^ 7 * w ^ 4) - u ^ 5 * v ^ 3 * w ^ 7) + u ^ 5 * v ^ 5 * w ^ 5) - u ^ 5 * v ^ 7 * w ^ 3) - u ^ 5 * v ^ 10) - u ^ 5 * w ^ 10) - u ^ 6 * v ^ 3 * w ^ 6) - u ^ 6 * v ^ 6 * w ^ 3) - u ^ 6 * v ^ 9) - u ^ 6 * w ^ 9) + u ^ 9 * w ^ 3 * v ^ 3), u * v * w ^ 2 + u * v ^ 2 * w + u * v ^ 3 + u * w ^ 3 + v * w ^ 3 + 2 * u ^ 3 * v + 2 * u ^ 3 * w + v ^ 3 * w + u ^ 4, 0, 6 * u ^ 2 * v ^ 2 + 6 * u ^ 2 * w ^ 2 + 6 * v ^ 2 * w ^ 2 + 6 * u ^ 4 + 3 * v ^ 4 + 3 * w ^ 4, (((((((3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2 + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 4 * u ^ 3 * v ^ 4) - 4 * u ^ 3 * w ^ 4) - 2 * v ^ 3 * w ^ 4) - 4 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - 2 * v ^ 4 * w ^ 3) + u ^ 7, u * (((-v * w ^ 2 - v ^ 2 * w) - u * v * w) + u ^ 3), ((((((((((((-u * v * w ^ 3 + u * v ^ 2 * w ^ 2) - u * v ^ 3 * w) - v ^ 4 * u) - w ^ 4 * u) - v * w ^ 4) + u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w) - u ^ 2 * v ^ 3) - u ^ 2 * w ^ 3) - 2 * u ^ 3 * v * w) - 2 * u ^ 4 * v) - 2 * u ^ 4 * w) - v ^ 4 * w) + u ^ 5, 0, -(u ^ 4) * ((w ^ 2 - v * w) + v ^ 2) * (w ^ 2 + v * w + v ^ 2), 0, u ^ 8 * (((-(v ^ 9) * w ^ 9 - u * v ^ 8 * w ^ 9) - u * v ^ 9 * w ^ 8) + u ^ 5 * v ^ 6 * w ^ 7 + u ^ 5 * v ^ 7 * w ^ 6 + u ^ 5 * v ^ 13 + u ^ 5 * w ^ 13 + u ^ 6 * v ^ 6 * w ^ 6), u * (((-v * w ^ 3 - v ^ 3 * w) - u ^ 2 * v * w) + u ^ 4), -(u ^ 10) * v ^ 6 * w ^ 6 * (w ^ 2 + v * w + v ^ 2), u ^ 5 * v ^ 5 * w ^ 5, -(u ^ 44) * v ^ 30 * w ^ 30 * ((w ^ 2 - v * w) + v ^ 2) * (w ^ 2 + v * w + v ^ 2), u ^ 4 * (((((((2 * v ^ 7 * w ^ 7 - 3 * u ^ 2 * v ^ 6 * w ^ 6) + 2 * u ^ 3 * v ^ 4 * w ^ 7 + 2 * u ^ 3 * v ^ 7 * w ^ 4 + 3 * u ^ 4 * v ^ 5 * w ^ 5) - 2 * u ^ 5 * v ^ 3 * w ^ 6) - 2 * u ^ 5 * v ^ 6 * w ^ 3) - 2 * u ^ 5 * v ^ 9) - 2 * u ^ 5 * w ^ 9) + u ^ 8 * w ^ 3 * v ^ 3), -(u ^ 2) * (-3 * v ^ 2 * w ^ 2 + 2 * u * v ^ 3 + 2 * u * w ^ 3), 0, ((((((((((((((-u * v ^ 2 * w ^ 3 - u * v ^ 3 * w ^ 2) - v ^ 5 * u) - u * w ^ 5) - v * w ^ 5) + 3 * u ^ 2 * v ^ 2 * w ^ 2 + u ^ 2 * v ^ 4 + u ^ 2 * w ^ 4 + v ^ 2 * w ^ 4) - u ^ 3 * v * w ^ 2) - u ^ 3 * v ^ 2 * w) - 3 * u ^ 3 * v ^ 3) - 3 * u ^ 3 * w ^ 3) - 2 * v ^ 3 * w ^ 3) + u ^ 4 * v ^ 2 + u ^ 4 * w ^ 2 + v ^ 4 * w ^ 2) - 2 * u ^ 5 * v) - 2 * u ^ 5 * w) - v ^ 5 * w) + u ^ 6, u ^ 4 * v ^ 3 * w ^ 5 + u ^ 4 * v ^ 5 * w ^ 3, (((9 * u ^ 2 * v ^ 2 * w ^ 2 - 8 * u ^ 3 * v ^ 3) - 8 * u ^ 3 * w ^ 3) - 4 * v ^ 3 * w ^ 3) + u ^ 6, u ^ 41 * v ^ 30 * w ^ 30 * (-3 * v * w + u ^ 2), u ^ 8 * ((((((((((((((((v ^ 11 * w ^ 12 + v ^ 12 * w ^ 11) - u ^ 2 * v ^ 10 * w ^ 11) - u ^ 2 * v ^ 11 * w ^ 10) + u ^ 3 * v ^ 8 * w ^ 12) - u ^ 3 * v ^ 10 * w ^ 10) + u ^ 3 * v ^ 12 * w ^ 8 + u ^ 4 * v ^ 8 * w ^ 11 + u ^ 4 * v ^ 11 * w ^ 8 + u ^ 6 * v ^ 8 * w ^ 9 + u ^ 6 * v ^ 9 * w ^ 8) - u ^ 7 * v ^ 6 * w ^ 10) + u ^ 7 * v ^ 8 * w ^ 8) - u ^ 7 * v ^ 10 * w ^ 6) - u ^ 7 * v ^ 16) - u ^ 7 * w ^ 16) - u ^ 8 * v ^ 6 * w ^ 9) - u ^ 8 * v ^ 9 * w ^ 6) - u ^ 8 * v ^ 15) - u ^ 8 * w ^ 15) + u ^ 11 * v ^ 6 * w ^ 6), 0, 0, ((((((((((3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3 * w) - 2 * u ^ 3 * v ^ 4) - 2 * u ^ 3 * w ^ 4) - 2 * v ^ 3 * w ^ 4) - 4 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - 2 * v ^ 4 * w ^ 3) + u ^ 7, -(u ^ 12) * v ^ 6 * w ^ 6 * (w ^ 2 + v * w + v ^ 2) * ((w ^ 2 - v * w) + v ^ 2), u ^ 9 * v ^ 6 * w ^ 6 * (((-v * w ^ 3 - v ^ 3 * w) - u ^ 2 * v * w) + u ^ 4), -(u ^ 28) * v ^ 18 * w ^ 18 * (w ^ 2 + v * w + v ^ 2) * ((w ^ 2 - v * w) + v ^ 2), u ^ 4 * (((((-(v ^ 4) * w ^ 6 - 2 * v ^ 5 * w ^ 5) - v ^ 6 * w ^ 4) - 2 * u * v ^ 4 * w ^ 5) - 2 * u * v ^ 5 * w ^ 4) + u ^ 2 * v ^ 4 * w ^ 4 + u ^ 2 * v ^ 8 + u ^ 2 * w ^ 8 + 2 * u ^ 3 * v ^ 3 * w ^ 4 + 2 * u ^ 3 * v ^ 4 * w ^ 3 + 2 * u ^ 4 * w ^ 3 * v ^ 3 + u ^ 4 * v ^ 6 + u ^ 4 * w ^ 6), u ^ 4 * v ^ 3 * w ^ 3 * (b * (u + v + w) - u), 0, u ^ 9 * v ^ 6 * w ^ 6 * (-3 * v * w + u ^ 2), u ^ 4 * (((-(v ^ 5) * w ^ 5 - u * v ^ 4 * w ^ 5) - u * v ^ 5 * w ^ 4) + u ^ 3 * v ^ 3 * w ^ 4 + u ^ 3 * v ^ 4 * w ^ 3 + u ^ 3 * v ^ 7 + u ^ 3 * w ^ 7 + u ^ 4 * w ^ 3 * v ^ 3), u ^ 41 * v ^ 30 * w ^ 30 * (((-v * w ^ 2 - v ^ 2 * w) - u * v * w) + u ^ 3), -(u ^ 42) * v ^ 30 * w ^ 30 * (w ^ 2 + v * w + v ^ 2), ((((((((((3 * u ^ 2 * v ^ 2 * w ^ 4 + 3 * u ^ 2 * v ^ 4 * w ^ 2) - 2 * w ^ 3 * v ^ 2 * u ^ 3) - 2 * w ^ 2 * v ^ 3 * u ^ 3) - 2 * u ^ 3 * v ^ 5) - 2 * u ^ 3 * w ^ 5) - 2 * v ^ 3 * w ^ 5) + 3 * u ^ 4 * v ^ 2 * w ^ 2) - 4 * u ^ 5 * v ^ 3) - 4 * u ^ 5 * w ^ 3) - 2 * v ^ 5 * w ^ 3) + u ^ 8, 3 * u ^ 40 * v ^ 30 * w ^ 30 * (3v + 3w + 4u), u ^ 9 * v ^ 6 * w ^ 6 * (((-v * w ^ 2 - v ^ 2 * w) - u * v * w) + u ^ 3), -(u ^ 34) * v ^ 24 * w ^ 24 * (w ^ 2 + v * w + v ^ 2), 0, u ^ 41 * v ^ 30 * w ^ 30 * (((-v * w ^ 3 - v ^ 3 * w) - u ^ 2 * v * w) + u ^ 4), 3 * u ^ 8 * v ^ 6 * w ^ 6 * (w ^ 4 + 2 * v ^ 2 * w ^ 2 + v ^ 4 + 2 * u ^ 2 * w ^ 2 + 2 * u ^ 2 * v ^ 2 + 2 * u ^ 4), 3 * u ^ 8 * v ^ 6 * w ^ 6 * (3 * w ^ 2 + 3 * v ^ 2 + 4 * u ^ 2), -(u ^ 26) * v ^ 18 * w ^ 18 * (w ^ 2 + v * w + v ^ 2), 3 * u ^ 40 * v ^ 30 * w ^ 30 * (w ^ 3 + v * w ^ 2 + v ^ 2 * w + v ^ 3 + u * w ^ 2 + u * v ^ 2 + u ^ 2 * w + u ^ 2 * v + 2 * u ^ 3), u ^ 4 * (((-3 * v ^ 4 * w ^ 5 - 3 * v ^ 5 * w ^ 4) - 3 * u * v ^ 4 * w ^ 4) + 2 * u ^ 2 * v ^ 3 * w ^ 4 + 2 * u ^ 2 * v ^ 4 * w ^ 3 + u ^ 2 * v ^ 7 + u ^ 2 * w ^ 7 + 4 * u ^ 3 * w ^ 3 * v ^ 3 + u ^ 3 * v ^ 6 + u ^ 3 * w ^ 6), u ^ 12 * v ^ 9 * w ^ 9 * (b * (u + v + w) - u), -(u ^ 36) * v ^ 24 * w ^ 24 * (w ^ 2 + v * w + v ^ 2) * ((w ^ 2 - v * w) + v ^ 2), 2 * u ^ 4 * w ^ 3 * v ^ 3, 3 * u ^ 8 * v ^ 6 * w ^ 6 * (w ^ 3 + v * w ^ 2 + v ^ 2 * w + v ^ 3 + u * w ^ 2 + u * v ^ 2 + u ^ 2 * w + u ^ 2 * v + 2 * u ^ 3), 2 * u ^ 20 * v ^ 15 * w ^ 15, u ^ 17 * v ^ 12 * w ^ 12 * (((-v * w ^ 2 - v ^ 2 * w) - u * v * w) + u ^ 3), -(u ^ 18) * v ^ 12 * w ^ 12 * (w ^ 2 + v * w + v ^ 2), u ^ 4 * (-9 * w ^ 4 * v ^ 4 + 8 * w ^ 3 * v ^ 3 * u ^ 2 + 2 * u ^ 2 * v ^ 6 + 2 * u ^ 2 * w ^ 6), u ^ 8 * v ^ 6 * w ^ 6 * (((((((((((3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3 * w) - 2 * u ^ 3 * v ^ 4) - 2 * u ^ 3 * w ^ 4) - 2 * v ^ 3 * w ^ 4) - 4 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - 2 * v ^ 4 * w ^ 3) + u ^ 7), 0, u ^ 16 * v ^ 12 * w ^ 12 * ((((((((((((((((-(v ^ 3) * w ^ 5 - 2 * w ^ 4 * v ^ 4) - v ^ 5 * w ^ 3) + u ^ 2 * v ^ 2 * w ^ 4 + 2 * w ^ 3 * v ^ 3 * u ^ 2 + u ^ 2 * v ^ 4 * w ^ 2) - u ^ 3 * w ^ 5) - w ^ 4 * v * u ^ 3) + 2 * w ^ 3 * v ^ 2 * u ^ 3 + 2 * w ^ 2 * v ^ 3 * u ^ 3) - w * v ^ 4 * u ^ 3) - u ^ 3 * v ^ 5) - 3 * u ^ 4 * w ^ 4) - u ^ 4 * v * w ^ 3) + u ^ 4 * v ^ 2 * w ^ 2) - u ^ 4 * v ^ 3 * w) - 3 * u ^ 4 * v ^ 4) - 2 * u ^ 5 * w ^ 3) - 2 * u ^ 5 * v ^ 3) + u ^ 8), u ^ 8 * (-9 * v ^ 8 * w ^ 8 + 8 * u ^ 4 * v ^ 6 * w ^ 6 + 2 * u ^ 4 * v ^ 12 + 2 * u ^ 4 * w ^ 12), 3 * u ^ 24 * v ^ 18 * w ^ 18 * (w ^ 3 + v * w ^ 2 + v ^ 2 * w + v ^ 3 + u * w ^ 2 + u * v ^ 2 + u ^ 2 * w + u ^ 2 * v + 2 * u ^ 3), u ^ 8 * v ^ 6 * w ^ 6 * (u * v * w ^ 2 + u * v ^ 2 * w + u * v ^ 3 + u * w ^ 3 + v * w ^ 3 + 2 * u ^ 3 * v + 2 * u ^ 3 * w + v ^ 3 * w + u ^ 4), -(u ^ 20) * v ^ 12 * w ^ 12 * (w ^ 2 + v * w + v ^ 2) * ((w ^ 2 - v * w) + v ^ 2), u ^ 8 * v ^ 6 * w ^ 6 * (((((((((((3 * u ^ 2 * v ^ 2 * w ^ 4 + 3 * u ^ 2 * v ^ 4 * w ^ 2) - 2 * w ^ 3 * v ^ 2 * u ^ 3) - 2 * w ^ 2 * v ^ 3 * u ^ 3) - 2 * u ^ 3 * v ^ 5) - 2 * u ^ 3 * w ^ 5) - 2 * v ^ 3 * w ^ 5) + 3 * u ^ 4 * v ^ 2 * w ^ 2) - 4 * u ^ 5 * v ^ 3) - 4 * u ^ 5 * w ^ 3) - 2 * v ^ 5 * w ^ 3) + u ^ 8), u ^ 25 * v ^ 18 * w ^ 18 * (((-v * w ^ 2 - v ^ 2 * w) - u * v * w) + u ^ 3), u ^ 17 * v ^ 12 * w ^ 12 * (-3 * v * w + u ^ 2), u ^ 33 * v ^ 24 * w ^ 24 * (((-v * w ^ 3 - v ^ 3 * w) - u ^ 2 * v * w) + u ^ 4), u ^ 33 * v ^ 24 * w ^ 24 * (-3 * v * w + u ^ 2), u ^ 25 * v ^ 18 * w ^ 18 * (((-v * w ^ 3 - v ^ 3 * w) - u ^ 2 * v * w) + u ^ 4), -(u ^ 10) * v ^ 6 * w ^ 6 * (-3 * v ^ 2 * w ^ 2 + 2 * u * v ^ 3 + 2 * u * w ^ 3), u ^ 16 * v ^ 12 * w ^ 12 * (((((((((((3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3 * w) - 2 * u ^ 3 * v ^ 4) - 2 * u ^ 3 * w ^ 4) - 2 * v ^ 3 * w ^ 4) - 4 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - 2 * v ^ 4 * w ^ 3) + u ^ 7), u ^ 8 * v ^ 6 * w ^ 6 * ((((9 * u ^ 2 * v ^ 2 * w ^ 2 - 8 * u ^ 3 * v ^ 3) - 8 * u ^ 3 * w ^ 3) - 4 * v ^ 3 * w ^ 3) + u ^ 6), u ^ 8 * v ^ 6 * w ^ 6 * (2 * u * v * w + u * v ^ 2 + u * w ^ 2 + v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + v ^ 2 * w + u ^ 3), u ^ 16 * v ^ 12 * w ^ 12 * (4 * u * v + 4 * u * w + 2 * v * w + u ^ 2), 2 * u ^ 12 * v ^ 9 * w ^ 9, 3 * u ^ 32 * v ^ 24 * w ^ 24 * (3 * w ^ 2 + 3 * v ^ 2 + 4 * u ^ 2), u ^ 8 * v ^ 6 * w ^ 6 * (4 * u * v + 4 * u * w + 2 * v * w + u ^ 2), u ^ 16 * v ^ 12 * w ^ 12 * ((((9 * u ^ 2 * v ^ 2 * w ^ 2 - 8 * u ^ 3 * v ^ 3) - 8 * u ^ 3 * w ^ 3) - 4 * v ^ 3 * w ^ 3) + u ^ 6), 3 * u ^ 8 * v ^ 6 * w ^ 6 * (w ^ 2 + 2 * v * w + v ^ 2 + 2 * u * w + 2 * u * v + 2 * u ^ 2), u ^ 16 * v ^ 12 * w ^ 12 * (2 * u * v * w + u * v ^ 2 + u * w ^ 2 + v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + v ^ 2 * w + u ^ 3), u ^ 25 * v ^ 18 * w ^ 18 * (-3 * v * w + u ^ 2), 3 * u ^ 40 * v ^ 30 * w ^ 30 * (3 * w ^ 2 + 3 * v ^ 2 + 4 * u ^ 2), 3 * u ^ 16 * v ^ 12 * w ^ 12 * (w ^ 2 + 2 * v * w + v ^ 2 + 2 * u * w + 2 * u * v + 2 * u ^ 2), 3 * u ^ 8 * v ^ 6 * w ^ 6 * (3v + 3w + 4u), 30 * u ^ 8 * v ^ 6 * w ^ 6, 3 * u ^ 24 * v ^ 18 * w ^ 18 * (w ^ 2 + 2 * v * w + v ^ 2 + 2 * u * w + 2 * u * v + 2 * u ^ 2), 3 * u ^ 24 * v ^ 18 * w ^ 18 * (3 * w ^ 2 + 3 * v ^ 2 + 4 * u ^ 2), 3 * u ^ 16 * v ^ 12 * w ^ 12 * (3v + 3w + 4u), 3 * u ^ 24 * v ^ 18 * w ^ 18 * (3v + 3w + 4u), 30 * u ^ 40 * v ^ 30 * w ^ 30, 30 * u ^ 24 * v ^ 18 * w ^ 18, 30 * u ^ 16 * v ^ 12 * w ^ 12, 30 * u ^ 32 * v ^ 24 * w ^ 24]
            end
        f30b = function (u, v, w)
                return [30, 9u + 15v + 6w, 4 * u * v + 2 * v * w + u ^ 2 + 5 * v ^ 2, 10 * u * v + 4 * u * w + 6 * v * w + 2 * u ^ 2 + 7 * v ^ 2 + w ^ 2, 9 * u ^ 2 + 15 * v ^ 2 + 6 * w ^ 2, -4 * u * v * w + u ^ 3 + 5 * v ^ 3, 2 * v * (u + v) * (u + w + v), v ^ 2 * (u + v), 5 * u * v ^ 2 + 2 * u * w ^ 2 + 3 * v * w ^ 2 + 5 * u ^ 2 * v + 2 * u ^ 2 * w + 3 * v ^ 2 * w + 2 * u ^ 3 + 7 * v ^ 3 + w ^ 3, -(v ^ 2) * (-(v ^ 2) + u * w), v ^ 4 * ((((((((((((((((((-(u ^ 6) * v ^ 6 * w ^ 3 + u ^ 4 * v ^ 5 * w ^ 6) - v ^ 6 * u ^ 7 * w ^ 2) - v ^ 5 * u ^ 8 * w ^ 2) + v ^ 9 * u ^ 3 * w ^ 3 + v ^ 9 * u ^ 4 * w ^ 2 + v ^ 4 * u ^ 7 * w ^ 4 + v ^ 5 * u ^ 6 * w ^ 4) - v ^ 5 * u ^ 7 * w ^ 3) + 2 * v ^ 4 * u ^ 6 * w ^ 5 + 2 * v ^ 4 * u ^ 5 * w ^ 6 + u ^ 13 * w ^ 2) - v ^ 3 * u ^ 10 * w ^ 2) + v ^ 3 * u ^ 8 * w ^ 4) - v ^ 4 * u ^ 9 * w ^ 2) + v ^ 2 * u ^ 9 * w ^ 4 + v ^ 2 * u ^ 8 * w ^ 5) - u ^ 2 * v ^ 6 * w ^ 7) - u ^ 3 * v ^ 6 * w ^ 6) + u ^ 4 * v ^ 4 * w ^ 7 + u ^ 5 * v ^ 5 * w ^ 5 + v ^ 15 + v ^ 11 * u ^ 4) - v ^ 8 * u ^ 7) - v ^ 7 * u ^ 8) + v ^ 9 * u ^ 2 * w ^ 4) - v ^ 5 * u ^ 2 * w ^ 8) - v ^ 5 * u ^ 3 * w ^ 7), v * (u * w ^ 2 + 2 * u * v ^ 2 + u ^ 2 * w + 3 * u ^ 2 * v + v * w ^ 2 + u ^ 3 + v ^ 2 * w + 2 * v ^ 3), 0, 10 * u ^ 2 * v ^ 2 + 4 * u ^ 2 * w ^ 2 + 6 * v ^ 2 * w ^ 2 + 2 * u ^ 4 + 7 * v ^ 4 + w ^ 4, (((((4 * u ^ 2 * v ^ 2 * w ^ 3 + 4 * u ^ 2 * v ^ 3 * w ^ 2 + 4 * u ^ 3 * v ^ 2 * w ^ 2) - 4 * u ^ 3 * v ^ 4) - 2 * v ^ 3 * w ^ 4) - 4 * u ^ 4 * v ^ 3) - 2 * v ^ 4 * w ^ 3) + u ^ 7 + 5 * v ^ 7, v * ((((-u * w ^ 2 - 2 * u * v * w) + 2 * u * v ^ 2) - u ^ 2 * w) + u ^ 3 + v ^ 2 * w + 2 * v ^ 3), (((((-u * v * w ^ 3 + u * v ^ 2 * w ^ 2) - 2 * u * v ^ 3 * w) + 2 * u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w + u ^ 2 * v ^ 3 + u ^ 2 * w ^ 3) - u ^ 3 * v * w) - u ^ 3 * v ^ 2) + u ^ 3 * w ^ 2 + 2 * v ^ 3 * w ^ 2 + 2 * v ^ 5, 0, -(v ^ 4) * (-(v ^ 2) + u * w) * (v ^ 2 + u * w), 0, v ^ 8 * (v ^ 5 * u ^ 4 * w ^ 9 + v ^ 6 * u ^ 4 * w ^ 8 + v ^ 5 * u ^ 6 * w ^ 7 + u ^ 6 * v ^ 6 * w ^ 6 + v ^ 5 * u ^ 7 * w ^ 6 + u ^ 8 * v ^ 6 * w ^ 4 + v ^ 10 * u ^ 8 + u ^ 9 * v ^ 5 * w ^ 4 + u ^ 9 * v ^ 9 + v * u ^ 13 * w ^ 4 + u ^ 14 * w ^ 4 + v ^ 18), v * ((((-u * w ^ 3 - 2 * u * v ^ 2 * w) + 2 * u ^ 2 * v ^ 2) - u ^ 3 * w) + u ^ 3 * v + v ^ 2 * w ^ 2 + 2 * v ^ 4), -(u ^ 6) * v ^ 12 * w ^ 4 * (-(v ^ 2) + u * w), v ^ 10 * (u + v) * ((((u ^ 4 - u ^ 3 * v) + u ^ 2 * v ^ 2) - u * v ^ 3) + v ^ 4), -(u ^ 30) * v ^ 54 * w ^ 20 * (-(v ^ 2) + u * w) * (v ^ 2 + u * w), v ^ 4 * (((((((((-2 * v ^ 5 * u ^ 2 * w ^ 7 + u ^ 2 * v ^ 8 * w ^ 4) - 2 * v ^ 5 * u ^ 3 * w ^ 6) + u ^ 3 * v ^ 8 * w ^ 3 + 3 * u ^ 4 * v ^ 4 * w ^ 6 + u ^ 4 * v ^ 8 * w ^ 2 + u ^ 4 * v ^ 10 + 3 * u ^ 5 * v ^ 4 * w ^ 5 + 3 * u ^ 6 * v ^ 4 * w ^ 4) - 2 * v ^ 5 * u ^ 6 * w ^ 3) - 2 * u ^ 7 * v ^ 5 * w ^ 2) - 2 * u ^ 7 * v ^ 7) + 3 * u ^ 8 * v ^ 2 * w ^ 4) - 2 * v ^ 3 * u ^ 9 * w ^ 2) + u ^ 12 * w ^ 2 + v ^ 14), v ^ 2 * (((2 * u * v * w ^ 2 + 2 * u ^ 2 * v * w) - u ^ 2 * v ^ 2) + 2 * u ^ 3 * w + v ^ 4), 0, -((u ^ 2 + v ^ 2)) * (((((((u ^ 3 * v - 2 * u ^ 2 * v ^ 2) - u ^ 2 * w ^ 2) + u * v * w ^ 2 + 2 * u * v ^ 3 + v ^ 3 * w) - 3 * v ^ 2 * w ^ 2) - 2 * v ^ 4) - w ^ 4) + v * w ^ 3), u ^ 3 * v ^ 5 * w ^ 4 + u ^ 3 * v ^ 7 * w ^ 2, ((12 * u ^ 2 * v ^ 2 * w ^ 2 - 8 * u ^ 3 * v ^ 3) - 4 * v ^ 3 * w ^ 3) + u ^ 6 + 5 * v ^ 6, u ^ 30 * v ^ 50 * w ^ 20 * (-4 * u * v * w + u ^ 3 + 5 * v ^ 3), v ^ 8 * ((((((((((((((((((u ^ 8 * v ^ 11 * w ^ 4 + u ^ 6 * v ^ 11 * w ^ 6) - u ^ 9 * v ^ 8 * w ^ 6) + u ^ 8 * v ^ 7 * w ^ 8 + u ^ 8 * v ^ 6 * w ^ 9 + u ^ 9 * v ^ 6 * w ^ 8) - u ^ 4 * v ^ 8 * w ^ 11) - v ^ 12 * u ^ 11) - v ^ 11 * u ^ 12) + u ^ 10 * v ^ 6 * w ^ 7 + u ^ 8 * v ^ 15 + v ^ 23 + u ^ 11 * v ^ 6 * w ^ 6 + v ^ 6 * u ^ 6 * w ^ 11) - v ^ 7 * u ^ 4 * w ^ 12) + v ^ 2 * u ^ 15 * w ^ 6) - v ^ 7 * u ^ 12 * w ^ 4) + v ^ 3 * u ^ 14 * w ^ 6 + u ^ 19 * w ^ 4) - v ^ 3 * u ^ 16 * w ^ 4) + v ^ 2 * u ^ 14 * w ^ 7) - v ^ 8 * u ^ 11 * w ^ 4) + u ^ 4 * v ^ 11 * w ^ 8) - u ^ 6 * v ^ 8 * w ^ 9) + u ^ 7 * v ^ 6 * w ^ 10) - u ^ 15 * v ^ 4 * w ^ 4), 0, 0, v * ((((((-2 * u * v ^ 2 * w ^ 3 + 2 * v ^ 5 * u + 3 * u ^ 2 * v * w ^ 3 + 6 * u ^ 2 * v ^ 2 * w ^ 2 + 3 * u ^ 3 * v * w ^ 2) - 2 * u ^ 3 * v ^ 2 * w) - 4 * u ^ 3 * v ^ 3) - 2 * u ^ 4 * v ^ 2) - 2 * v ^ 3 * w ^ 3) + u ^ 6 + v ^ 5 * w + 2 * v ^ 6), -(u ^ 6) * v ^ 14 * w ^ 4 * (-(v ^ 2) + u * w) * (v ^ 2 + u * w), u ^ 6 * v ^ 11 * w ^ 4 * ((((-u * w ^ 3 - 2 * u * v ^ 2 * w) + 2 * u ^ 2 * v ^ 2) - u ^ 3 * w) + u ^ 3 * v + v ^ 2 * w ^ 2 + 2 * v ^ 4), -(u ^ 18) * v ^ 34 * w ^ 12 * (-(v ^ 2) + u * w) * (v ^ 2 + u * w), v ^ 4 * (v ^ 2 * u ^ 2 * w ^ 6 + 2 * v ^ 3 * u ^ 2 * w ^ 5 + u ^ 2 * v ^ 4 * w ^ 4 + 4 * u ^ 3 * v ^ 3 * w ^ 4 + 2 * u ^ 3 * v ^ 4 * w ^ 3 + 2 * v ^ 2 * u ^ 4 * w ^ 4 + 4 * u ^ 4 * w ^ 3 * v ^ 3 + v ^ 4 * u ^ 4 * w ^ 2 + u ^ 4 * v ^ 6 + 2 * v ^ 3 * u ^ 5 * w ^ 2 + 2 * v ^ 5 * u ^ 5 + 2 * u ^ 6 * v ^ 2 * w ^ 2 + 2 * u ^ 7 * w ^ 3 + 2 * v * u ^ 7 * w ^ 2 + u ^ 8 * w ^ 2 + v ^ 10), u ^ 3 * v ^ 5 * w ^ 2 * (c * (u + v + w) - u), 0, u ^ 6 * v ^ 10 * w ^ 4 * (-4 * u * v * w + u ^ 3 + 5 * v ^ 3), v ^ 4 * (v ^ 3 * u ^ 2 * w ^ 5 + u ^ 2 * v ^ 4 * w ^ 4 + u ^ 3 * v ^ 3 * w ^ 4 + u ^ 3 * v ^ 4 * w ^ 3 + u ^ 4 * w ^ 3 * v ^ 3 + v ^ 4 * u ^ 4 * w ^ 2 + u ^ 4 * v ^ 6 + v ^ 3 * u ^ 5 * w ^ 2 + v ^ 5 * u ^ 5 + v * u ^ 7 * w ^ 2 + u ^ 8 * w ^ 2 + v ^ 10), u ^ 30 * v ^ 51 * w ^ 20 * ((((-u * w ^ 2 - 2 * u * v * w) + 2 * u * v ^ 2) - u ^ 2 * w) + u ^ 3 + v ^ 2 * w + 2 * v ^ 3), -(u ^ 30) * v ^ 52 * w ^ 20 * (-(v ^ 2) + u * w), v ^ 2 * ((((((((3 * u ^ 2 * w ^ 4 - 2 * u ^ 2 * v * w ^ 3) + 6 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 2 * v ^ 4) - 2 * u ^ 3 * v * w ^ 2) - 4 * u ^ 3 * v ^ 3) + 3 * u ^ 4 * w ^ 2) - 2 * u ^ 5 * v) - 2 * v ^ 3 * w ^ 3) + u ^ 6 + v ^ 4 * w ^ 2 + 2 * v ^ 6), 3 * u ^ 30 * v ^ 50 * w ^ 20 * (5v + 2w + 3u), u ^ 6 * v ^ 11 * w ^ 4 * ((((-u * w ^ 2 - 2 * u * v * w) + 2 * u * v ^ 2) - u ^ 2 * w) + u ^ 3 + v ^ 2 * w + 2 * v ^ 3), -(u ^ 24) * v ^ 42 * w ^ 16 * (-(v ^ 2) + u * w), 0, u ^ 30 * v ^ 51 * w ^ 20 * ((((-u * w ^ 3 - 2 * u * v ^ 2 * w) + 2 * u ^ 2 * v ^ 2) - u ^ 3 * w) + u ^ 3 * v + v ^ 2 * w ^ 2 + 2 * v ^ 4), u ^ 6 * v ^ 10 * w ^ 4 * (10 * u ^ 2 * v ^ 2 + 4 * u ^ 2 * w ^ 2 + 6 * v ^ 2 * w ^ 2 + 2 * u ^ 4 + 7 * v ^ 4 + w ^ 4), 3 * u ^ 6 * v ^ 10 * w ^ 4 * (2 * w ^ 2 + 5 * v ^ 2 + 3 * u ^ 2), -(u ^ 18) * v ^ 32 * w ^ 12 * (-(v ^ 2) + u * w), u ^ 30 * v ^ 50 * w ^ 20 * (5 * u * v ^ 2 + 2 * u * w ^ 2 + 3 * v * w ^ 2 + 5 * u ^ 2 * v + 2 * u ^ 2 * w + 3 * v ^ 2 * w + 2 * u ^ 3 + 7 * v ^ 3 + w ^ 3), v ^ 4 * (2 * v ^ 2 * u ^ 2 * w ^ 5 + 3 * u ^ 2 * v ^ 3 * w ^ 4 + 3 * v ^ 2 * u ^ 3 * w ^ 4 + 4 * u ^ 3 * w ^ 3 * v ^ 3 + 3 * v ^ 2 * u ^ 4 * w ^ 3 + 3 * v ^ 3 * u ^ 4 * w ^ 2 + 2 * v ^ 5 * u ^ 4 + 2 * v ^ 2 * u ^ 5 * w ^ 2 + v ^ 4 * u ^ 5 + u ^ 6 * w ^ 3 + 2 * u ^ 6 * v * w ^ 2 + 3 * u ^ 7 * w ^ 2 + v ^ 9), u ^ 9 * v ^ 15 * w ^ 6 * (c * (u + v + w) - u), -(u ^ 24) * v ^ 44 * w ^ 16 * (-(v ^ 2) + u * w) * (v ^ 2 + u * w), 2 * u ^ 3 * v ^ 5 * w ^ 2, u ^ 6 * v ^ 10 * w ^ 4 * (5 * u * v ^ 2 + 2 * u * w ^ 2 + 3 * v * w ^ 2 + 5 * u ^ 2 * v + 2 * u ^ 2 * w + 3 * v ^ 2 * w + 2 * u ^ 3 + 7 * v ^ 3 + w ^ 3), 2 * u ^ 15 * v ^ 25 * w ^ 10, u ^ 12 * v ^ 21 * w ^ 8 * ((((-u * w ^ 2 - 2 * u * v * w) + 2 * u * v ^ 2) - u ^ 2 * w) + u ^ 3 + v ^ 2 * w + 2 * v ^ 3), -(u ^ 12) * v ^ 22 * w ^ 8 * (-(v ^ 2) + u * w), v ^ 4 * (6 * u ^ 2 * v ^ 2 * w ^ 4 + 8 * w ^ 3 * v ^ 2 * u ^ 3 + 6 * u ^ 4 * v ^ 2 * w ^ 2 + 3 * u ^ 4 * v ^ 4 + 6 * u ^ 6 * w ^ 2 + v ^ 8), u ^ 6 * v ^ 11 * w ^ 4 * ((((((-2 * u * v ^ 2 * w ^ 3 + 2 * v ^ 5 * u + 3 * u ^ 2 * v * w ^ 3 + 6 * u ^ 2 * v ^ 2 * w ^ 2 + 3 * u ^ 3 * v * w ^ 2) - 2 * u ^ 3 * v ^ 2 * w) - 4 * u ^ 3 * v ^ 3) - 2 * u ^ 4 * v ^ 2) - 2 * v ^ 3 * w ^ 3) + u ^ 6 + v ^ 5 * w + 2 * v ^ 6), 0, u ^ 12 * v ^ 21 * w ^ 8 * ((((((((((((-(v ^ 3) * w ^ 4 - v ^ 4 * w ^ 3) + v ^ 6 * w + 2 * v ^ 7) - v ^ 2 * u * w ^ 4) - u * v ^ 3 * w ^ 3) + 2 * u * v ^ 6 + v * u ^ 2 * w ^ 4 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 2 * u ^ 2 * v ^ 3 * w ^ 2 + 2 * u ^ 3 * v * w ^ 3 + 3 * u ^ 3 * v ^ 2 * w ^ 2) - u ^ 3 * v ^ 3 * w) - 2 * u ^ 3 * v ^ 4) + w ^ 2 * v * u ^ 4) - u ^ 4 * v ^ 2 * w) - 3 * u ^ 4 * v ^ 3) - v ^ 2 * u ^ 5) + u ^ 7), v ^ 8 * (6 * v ^ 4 * u ^ 4 * w ^ 8 + 8 * v ^ 4 * u ^ 6 * w ^ 6 + 6 * v ^ 4 * u ^ 8 * w ^ 4 + 3 * u ^ 8 * v ^ 8 + 6 * u ^ 12 * w ^ 4 + v ^ 16), u ^ 18 * v ^ 30 * w ^ 12 * (5 * u * v ^ 2 + 2 * u * w ^ 2 + 3 * v * w ^ 2 + 5 * u ^ 2 * v + 2 * u ^ 2 * w + 3 * v ^ 2 * w + 2 * u ^ 3 + 7 * v ^ 3 + w ^ 3), u ^ 6 * v ^ 11 * w ^ 4 * (u * w ^ 2 + 2 * u * v ^ 2 + u ^ 2 * w + 3 * u ^ 2 * v + v * w ^ 2 + u ^ 3 + v ^ 2 * w + 2 * v ^ 3), -(u ^ 12) * v ^ 24 * w ^ 8 * (-(v ^ 2) + u * w) * (v ^ 2 + u * w), u ^ 6 * v ^ 12 * w ^ 4 * ((((((((3 * u ^ 2 * w ^ 4 - 2 * u ^ 2 * v * w ^ 3) + 6 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 2 * v ^ 4) - 2 * u ^ 3 * v * w ^ 2) - 4 * u ^ 3 * v ^ 3) + 3 * u ^ 4 * w ^ 2) - 2 * u ^ 5 * v) - 2 * v ^ 3 * w ^ 3) + u ^ 6 + v ^ 4 * w ^ 2 + 2 * v ^ 6), u ^ 18 * v ^ 31 * w ^ 12 * ((((-u * w ^ 2 - 2 * u * v * w) + 2 * u * v ^ 2) - u ^ 2 * w) + u ^ 3 + v ^ 2 * w + 2 * v ^ 3), u ^ 12 * v ^ 20 * w ^ 8 * (-4 * u * v * w + u ^ 3 + 5 * v ^ 3), u ^ 24 * v ^ 41 * w ^ 16 * ((((-u * w ^ 3 - 2 * u * v ^ 2 * w) + 2 * u ^ 2 * v ^ 2) - u ^ 3 * w) + u ^ 3 * v + v ^ 2 * w ^ 2 + 2 * v ^ 4), u ^ 24 * v ^ 40 * w ^ 16 * (-4 * u * v * w + u ^ 3 + 5 * v ^ 3), u ^ 18 * v ^ 31 * w ^ 12 * ((((-u * w ^ 3 - 2 * u * v ^ 2 * w) + 2 * u ^ 2 * v ^ 2) - u ^ 3 * w) + u ^ 3 * v + v ^ 2 * w ^ 2 + 2 * v ^ 4), u ^ 6 * v ^ 12 * w ^ 4 * (((2 * u * v * w ^ 2 + 2 * u ^ 2 * v * w) - u ^ 2 * v ^ 2) + 2 * u ^ 3 * w + v ^ 4), u ^ 12 * v ^ 21 * w ^ 8 * ((((((-2 * u * v ^ 2 * w ^ 3 + 2 * v ^ 5 * u + 3 * u ^ 2 * v * w ^ 3 + 6 * u ^ 2 * v ^ 2 * w ^ 2 + 3 * u ^ 3 * v * w ^ 2) - 2 * u ^ 3 * v ^ 2 * w) - 4 * u ^ 3 * v ^ 3) - 2 * u ^ 4 * v ^ 2) - 2 * v ^ 3 * w ^ 3) + u ^ 6 + v ^ 5 * w + 2 * v ^ 6), u ^ 6 * v ^ 10 * w ^ 4 * (((12 * u ^ 2 * v ^ 2 * w ^ 2 - 8 * u ^ 3 * v ^ 3) - 4 * v ^ 3 * w ^ 3) + u ^ 6 + 5 * v ^ 6), 2 * u ^ 6 * v ^ 11 * w ^ 4 * (u + v) * (u + w + v), u ^ 12 * v ^ 20 * w ^ 8 * (4 * u * v + 2 * v * w + u ^ 2 + 5 * v ^ 2), 2 * u ^ 9 * v ^ 15 * w ^ 6, 3 * u ^ 24 * v ^ 40 * w ^ 16 * (2 * w ^ 2 + 5 * v ^ 2 + 3 * u ^ 2), u ^ 6 * v ^ 10 * w ^ 4 * (4 * u * v + 2 * v * w + u ^ 2 + 5 * v ^ 2), u ^ 12 * v ^ 20 * w ^ 8 * (((12 * u ^ 2 * v ^ 2 * w ^ 2 - 8 * u ^ 3 * v ^ 3) - 4 * v ^ 3 * w ^ 3) + u ^ 6 + 5 * v ^ 6), u ^ 6 * v ^ 10 * w ^ 4 * (10 * u * v + 4 * u * w + 6 * v * w + 2 * u ^ 2 + 7 * v ^ 2 + w ^ 2), 2 * u ^ 12 * v ^ 21 * w ^ 8 * (u + v) * (u + w + v), u ^ 18 * v ^ 30 * w ^ 12 * (-4 * u * v * w + u ^ 3 + 5 * v ^ 3), 3 * u ^ 30 * v ^ 50 * w ^ 20 * (2 * w ^ 2 + 5 * v ^ 2 + 3 * u ^ 2), u ^ 12 * v ^ 20 * w ^ 8 * (10 * u * v + 4 * u * w + 6 * v * w + 2 * u ^ 2 + 7 * v ^ 2 + w ^ 2), 3 * u ^ 6 * v ^ 10 * w ^ 4 * (5v + 2w + 3u), 30 * u ^ 6 * v ^ 10 * w ^ 4, u ^ 18 * v ^ 30 * w ^ 12 * (10 * u * v + 4 * u * w + 6 * v * w + 2 * u ^ 2 + 7 * v ^ 2 + w ^ 2), 3 * u ^ 18 * v ^ 30 * w ^ 12 * (2 * w ^ 2 + 5 * v ^ 2 + 3 * u ^ 2), 3 * u ^ 12 * v ^ 20 * w ^ 8 * (5v + 2w + 3u), 3 * u ^ 18 * v ^ 30 * w ^ 12 * (5v + 2w + 3u), 30 * u ^ 30 * v ^ 50 * w ^ 20, 30 * u ^ 18 * v ^ 30 * w ^ 12, 30 * u ^ 12 * v ^ 20 * w ^ 8, 30 * u ^ 24 * v ^ 40 * w ^ 16]
            end
        f36 = function (u, v, w, j)
                return [36, 18u + 9v + 9w, 4 * u * v + 4 * u * w + v * w + 6 * u ^ 2, 10 * u * v + 10 * u * w + 4 * v * w + 8 * u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2, 18 * u ^ 2 + 9 * v ^ 2 + 9 * w ^ 2, -4 * u * v * w + 6 * u ^ 3, 3 * u * v * w + u * v ^ 2 + u * w ^ 2 + 4 * u ^ 2 * v + 4 * u ^ 2 * w + 2 * u ^ 3, -j * u * v * w + u ^ 2 * v + u ^ 2 * w + u ^ 3, 5 * u * v ^ 2 + 5 * u * w ^ 2 + 2 * v * w ^ 2 + 5 * u ^ 2 * v + 5 * u ^ 2 * w + 2 * v ^ 2 * w + 8 * u ^ 3 + 2 * v ^ 3 + 2 * w ^ 3, -(u ^ 2) * v * w + u ^ 4, (((((((((((((((((((((-j * u ^ 4 * v ^ 7 * w ^ 8 - j * u ^ 4 * v ^ 8 * w ^ 7) + j * u ^ 6 * v ^ 6 * w ^ 7 + j * u ^ 6 * v ^ 7 * w ^ 6) - j * u ^ 7 * v ^ 4 * w ^ 8) + j * u ^ 7 * v ^ 6 * w ^ 6) - j * u ^ 7 * v ^ 8 * w ^ 4) - (2j + j ^ 2) * u ^ 8 * v ^ 4 * w ^ 7) + 2 * u ^ 8 * v ^ 5 * w ^ 6 + 2 * u ^ 8 * v ^ 6 * w ^ 5) - (2j + j ^ 2) * u ^ 8 * v ^ 7 * w ^ 4) - u ^ 9 * v ^ 2 * w ^ 8) - u ^ 9 * v ^ 3 * w ^ 7) + u ^ 9 * v ^ 4 * w ^ 6 + u ^ 9 * v ^ 5 * w ^ 5 + u ^ 9 * v ^ 6 * w ^ 4) - u ^ 9 * v ^ 7 * w ^ 3) - u ^ 9 * v ^ 8 * w ^ 2) - u ^ 10 * v ^ 2 * w ^ 7) - u ^ 10 * v ^ 3 * w ^ 6) - u ^ 10 * v ^ 6 * w ^ 3) - u ^ 10 * v ^ 7 * w ^ 2) - u ^ 11 * v ^ 8) - u ^ 11 * w ^ 8) - u ^ 12 * v ^ 7) - u ^ 12 * w ^ 7) + u ^ 13 * v ^ 2 * w ^ 4 + u ^ 13 * v ^ 3 * w ^ 3 + u ^ 13 * v ^ 4 * w ^ 2 + u ^ 15 * v ^ 4 + u ^ 15 * w ^ 4 + u ^ 19, u * v * w ^ 2 + u * v ^ 2 * w + u * v ^ 3 + u * w ^ 3 + u ^ 2 * v * w + 2 * u ^ 2 * v ^ 2 + 2 * u ^ 2 * w ^ 2 + 2 * u ^ 3 * v + 2 * u ^ 3 * w + 2 * u ^ 4, -j * u ^ 2 * v * w, 10 * u ^ 2 * v ^ 2 + 10 * u ^ 2 * w ^ 2 + 4 * v ^ 2 * w ^ 2 + 8 * u ^ 4 + 2 * v ^ 4 + 2 * w ^ 4, (((((((4 * u ^ 2 * v ^ 2 * w ^ 3 + 4 * u ^ 2 * v ^ 3 * w ^ 2 + 4 * u ^ 3 * v ^ 2 * w ^ 2) - 4 * u ^ 3 * v ^ 4) - 4 * u ^ 3 * w ^ 4) - v ^ 3 * w ^ 4) - 4 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - v ^ 4 * w ^ 3) + 6 * u ^ 7, ((-u * v * w ^ 2 - u * v ^ 2 * w) - 2 * u ^ 2 * v * w) + 2 * u ^ 3 * v + 2 * u ^ 3 * w + 2 * u ^ 4, (((((((((-2 * u * v * w ^ 3 + 2 * u * v ^ 2 * w ^ 2) - 2 * u * v ^ 3 * w) - u * v ^ 4) - u * w ^ 4) + u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w) - u ^ 2 * v ^ 3) - u ^ 2 * w ^ 3) + v ^ 2 * w ^ 3) - 2 * u ^ 3 * v * w) + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2 + v ^ 3 * w ^ 2 + 2 * u ^ 5, j ^ 2 * u ^ 4 * v ^ 2 * w ^ 2, -(u ^ 4) * v ^ 2 * w ^ 2 + u ^ 8, 0, j ^ 2 * u ^ 8 * v ^ 9 * w ^ 9 + j ^ 2 * u ^ 9 * v ^ 8 * w ^ 9 + j ^ 2 * u ^ 9 * v ^ 9 * w ^ 8 + u ^ 13 * v ^ 4 * w ^ 9 + u ^ 13 * v ^ 6 * w ^ 7 + u ^ 13 * v ^ 7 * w ^ 6 + u ^ 13 * v ^ 9 * w ^ 4 + u ^ 14 * v ^ 4 * w ^ 8 + u ^ 14 * v ^ 6 * w ^ 6 + u ^ 14 * v ^ 8 * w ^ 4 + u ^ 17 * v ^ 9 + u ^ 17 * w ^ 9 + u ^ 18 * v ^ 8 + u ^ 18 * w ^ 8 + u ^ 26, ((-u * v * w ^ 3 - u * v ^ 3 * w) - 2 * u ^ 3 * v * w) + 2 * u ^ 3 * v ^ 2 + 2 * u ^ 3 * w ^ 2 + 2 * u ^ 5, j ^ 2 * u ^ 12 * v ^ 6 * w ^ 6 - j ^ 2 * u ^ 14 * v ^ 5 * w ^ 5, -(j ^ 2) * u ^ 5 * v ^ 5 * w ^ 5 + u ^ 10 * v ^ 5 + u ^ 10 * w ^ 5 + u ^ 15, j * u ^ 54 * v ^ 27 * w ^ 27 - j * u ^ 58 * v ^ 25 * w ^ 25, ((((((((((-2 * j * u ^ 4 * v ^ 7 * w ^ 7 + 3 * j * u ^ 6 * v ^ 6 * w ^ 6) - 2 * j * u ^ 7 * v ^ 4 * w ^ 7) - 2 * j * u ^ 7 * v ^ 7 * w ^ 4) + 3 * u ^ 8 * v ^ 4 * w ^ 6 + 3 * u ^ 8 * v ^ 5 * w ^ 5 + 3 * u ^ 8 * v ^ 6 * w ^ 4) - 2 * u ^ 9 * v ^ 2 * w ^ 7) - 2 * u ^ 9 * v ^ 3 * w ^ 6) - 2 * u ^ 9 * v ^ 6 * w ^ 3) - 2 * u ^ 9 * v ^ 7 * w ^ 2) - 2 * u ^ 11 * v ^ 7) - 2 * u ^ 11 * w ^ 7) + u ^ 12 * v ^ 2 * w ^ 4 + u ^ 12 * v ^ 3 * w ^ 3 + u ^ 12 * v ^ 4 * w ^ 2 + u ^ 14 * v ^ 4 + u ^ 14 * w ^ 4 + u ^ 18, (((-3 * j ^ 2 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 3 * v * w ^ 2 + 2 * u ^ 3 * v ^ 2 * w) - u ^ 4 * v ^ 2) - u ^ 4 * w ^ 2) + u ^ 6, -(u ^ 6) * v ^ 3 * w ^ 3, ((((((((((((((-u * v ^ 2 * w ^ 3 - u * v ^ 3 * w ^ 2) - u * v ^ 5) - u * w ^ 5) - u ^ 2 * v * w ^ 3) + 4 * u ^ 2 * v ^ 2 * w ^ 2) - u ^ 2 * v ^ 3 * w) + u ^ 2 * v ^ 4 + u ^ 2 * w ^ 4 + v ^ 2 * w ^ 4) - u ^ 3 * v * w ^ 2) - u ^ 3 * v ^ 2 * w) - 3 * u ^ 3 * v ^ 3) - 3 * u ^ 3 * w ^ 3) + 4 * u ^ 4 * v ^ 2 + 4 * u ^ 4 * w ^ 2 + v ^ 4 * w ^ 2) - 2 * u ^ 5 * v) - 2 * u ^ 5 * w) + 2 * u ^ 6, 0, (((12 * u ^ 2 * v ^ 2 * w ^ 2 - 8 * u ^ 3 * v ^ 3) - 8 * u ^ 3 * w ^ 3) - 2 * v ^ 3 * w ^ 3) + 6 * u ^ 6, 4 * j * u ^ 51 * v ^ 26 * w ^ 26 - 6 * j * u ^ 53 * v ^ 25 * w ^ 25, ((((((((((((((((((((-(j ^ 2) * u ^ 8 * v ^ 11 * w ^ 12 - j ^ 2 * u ^ 8 * v ^ 12 * w ^ 11) + j ^ 2 * u ^ 10 * v ^ 10 * w ^ 11 + j ^ 2 * u ^ 10 * v ^ 11 * w ^ 10) - j ^ 2 * u ^ 11 * v ^ 8 * w ^ 12) + j ^ 2 * u ^ 11 * v ^ 10 * w ^ 10) - j ^ 2 * u ^ 11 * v ^ 12 * w ^ 8) - j ^ 2 * u ^ 12 * v ^ 8 * w ^ 11) - j ^ 2 * u ^ 12 * v ^ 11 * w ^ 8) + u ^ 14 * v ^ 6 * w ^ 11 + u ^ 14 * v ^ 7 * w ^ 10 + u ^ 14 * v ^ 8 * w ^ 9 + u ^ 14 * v ^ 9 * w ^ 8 + u ^ 14 * v ^ 10 * w ^ 7 + u ^ 14 * v ^ 11 * w ^ 6) - u ^ 15 * v ^ 4 * w ^ 12) + u ^ 15 * v ^ 8 * w ^ 8) - u ^ 15 * v ^ 12 * w ^ 4) - u ^ 16 * v ^ 4 * w ^ 11) - u ^ 16 * v ^ 6 * w ^ 9) - u ^ 16 * v ^ 9 * w ^ 6) - u ^ 16 * v ^ 11 * w ^ 4) + u ^ 19 * v ^ 4 * w ^ 8 + u ^ 19 * v ^ 6 * w ^ 6 + u ^ 19 * v ^ 8 * w ^ 4) - u ^ 19 * v ^ 12) - u ^ 19 * w ^ 12) - u ^ 20 * v ^ 11) - u ^ 20 * w ^ 11) + u ^ 23 * v ^ 8 + u ^ 23 * w ^ 8 + u ^ 31, 0, j * u ^ 8 * v ^ 4 * w ^ 4, ((((((((-2 * u * v ^ 3 * w ^ 3 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 6 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3 * w) - 2 * u ^ 3 * v ^ 4) - 2 * u ^ 3 * w ^ 4) - 4 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) + 2 * u ^ 6 * v + 2 * u ^ 6 * w + 2 * u ^ 7, j ^ 2 * u ^ 14 * v ^ 7 * w ^ 7 - j ^ 2 * u ^ 18 * v ^ 5 * w ^ 5, ((((j ^ 2 * u ^ 11 * v ^ 6 * w ^ 8 + j ^ 2 * u ^ 11 * v ^ 8 * w ^ 6) - 2 * j ^ 2 * u ^ 13 * v ^ 5 * w ^ 7) + 2 * j ^ 2 * u ^ 13 * v ^ 6 * w ^ 6) - 2 * j ^ 2 * u ^ 13 * v ^ 7 * w ^ 5) - 2 * j ^ 2 * u ^ 15 * v ^ 5 * w ^ 5, u ^ 34 * v ^ 17 * w ^ 17 - u ^ 38 * v ^ 15 * w ^ 15, j * u ^ 4 * v ^ 4 * w ^ 6 + 2 * j * u ^ 4 * v ^ 5 * w ^ 5 + j * u ^ 4 * v ^ 6 * w ^ 4 + 2 * j * u ^ 5 * v ^ 4 * w ^ 5 + 2 * j * u ^ 5 * v ^ 5 * w ^ 4 + u ^ 6 * v ^ 2 * w ^ 6 + (-j - 2 * j ^ 2) * u ^ 6 * v ^ 4 * w ^ 4 + u ^ 6 * v ^ 6 * w ^ 2 + 2 * u ^ 7 * v ^ 2 * w ^ 5 + 4 * u ^ 7 * v ^ 3 * w ^ 4 + 4 * u ^ 7 * v ^ 4 * w ^ 3 + 2 * u ^ 7 * v ^ 5 * w ^ 2 + u ^ 8 * v ^ 2 * w ^ 4 + 2 * u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + 2 * u ^ 9 * v ^ 5 + 2 * u ^ 9 * w ^ 5 + u ^ 10 * v ^ 4 + u ^ 10 * w ^ 4 + u ^ 14, 0, -(j ^ 2) * u ^ 22 * v ^ 11 * w ^ 11, 4 * j ^ 2 * u ^ 11 * v ^ 6 * w ^ 6 - 6 * j ^ 2 * u ^ 13 * v ^ 5 * w ^ 5, j * u ^ 4 * v ^ 5 * w ^ 5 + j * u ^ 5 * v ^ 4 * w ^ 5 + j * u ^ 5 * v ^ 5 * w ^ 4 + u ^ 7 * v ^ 2 * w ^ 5 + u ^ 7 * v ^ 3 * w ^ 4 + u ^ 7 * v ^ 4 * w ^ 3 + u ^ 7 * v ^ 5 * w ^ 2 + u ^ 8 * v ^ 2 * w ^ 4 + u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + u ^ 9 * v ^ 5 + u ^ 9 * w ^ 5 + u ^ 10 * v ^ 4 + u ^ 10 * w ^ 4 + u ^ 14, (((j * u ^ 51 * v ^ 26 * w ^ 27 + j * u ^ 51 * v ^ 27 * w ^ 26 + 2 * j * u ^ 52 * v ^ 26 * w ^ 26) - 2 * j * u ^ 53 * v ^ 25 * w ^ 26) - 2 * j * u ^ 53 * v ^ 26 * w ^ 25) - 2 * j * u ^ 54 * v ^ 25 * w ^ 25, j * u ^ 52 * v ^ 26 * w ^ 26 - j * u ^ 54 * v ^ 25 * w ^ 25, (((((((((3 * u ^ 2 * v ^ 2 * w ^ 4 - 2 * u ^ 2 * v ^ 3 * w ^ 3) + 3 * u ^ 2 * v ^ 4 * w ^ 2) - 2 * u ^ 3 * v ^ 2 * w ^ 3) - 2 * u ^ 3 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v ^ 5) - 2 * u ^ 3 * w ^ 5) + 6 * u ^ 4 * v ^ 2 * w ^ 2) - 4 * u ^ 5 * v ^ 3) - 4 * u ^ 5 * w ^ 3) + 2 * u ^ 6 * v ^ 2 + 2 * u ^ 6 * w ^ 2 + 2 * u ^ 8, (-9 * j * u ^ 50 * v ^ 25 * w ^ 26 - 9 * j * u ^ 50 * v ^ 26 * w ^ 25) - 18 * j * u ^ 51 * v ^ 25 * w ^ 25, (((j ^ 2 * u ^ 11 * v ^ 6 * w ^ 7 + j ^ 2 * u ^ 11 * v ^ 7 * w ^ 6 + 2 * j ^ 2 * u ^ 12 * v ^ 6 * w ^ 6) - 2 * j ^ 2 * u ^ 13 * v ^ 5 * w ^ 6) - 2 * j ^ 2 * u ^ 13 * v ^ 6 * w ^ 5) - 2 * j ^ 2 * u ^ 14 * v ^ 5 * w ^ 5, -(j ^ 2) * u ^ 42 * v ^ 21 * w ^ 21 + j ^ 2 * u ^ 44 * v ^ 20 * w ^ 20, 0, ((((j * u ^ 51 * v ^ 26 * w ^ 28 + j * u ^ 51 * v ^ 28 * w ^ 26) - 2 * j * u ^ 53 * v ^ 25 * w ^ 27) + 2 * j * u ^ 53 * v ^ 26 * w ^ 26) - 2 * j * u ^ 53 * v ^ 27 * w ^ 25) - 2 * j * u ^ 55 * v ^ 25 * w ^ 25, ((((-2 * j ^ 2 * u ^ 10 * v ^ 5 * w ^ 9 - 4 * j ^ 2 * u ^ 10 * v ^ 7 * w ^ 7) - 2 * j ^ 2 * u ^ 10 * v ^ 9 * w ^ 5) - 10 * j ^ 2 * u ^ 12 * v ^ 5 * w ^ 7) - 10 * j ^ 2 * u ^ 12 * v ^ 7 * w ^ 5) - 8 * j ^ 2 * u ^ 14 * v ^ 5 * w ^ 5, (-9 * j ^ 2 * u ^ 10 * v ^ 5 * w ^ 7 - 9 * j ^ 2 * u ^ 10 * v ^ 7 * w ^ 5) - 18 * j ^ 2 * u ^ 12 * v ^ 5 * w ^ 5, u ^ 32 * v ^ 16 * w ^ 16 - u ^ 34 * v ^ 15 * w ^ 15, (((((((-2 * j * u ^ 50 * v ^ 25 * w ^ 28 - 2 * j * u ^ 50 * v ^ 26 * w ^ 27) - 2 * j * u ^ 50 * v ^ 27 * w ^ 26) - 2 * j * u ^ 50 * v ^ 28 * w ^ 25) - 5 * j * u ^ 51 * v ^ 25 * w ^ 27) - 5 * j * u ^ 51 * v ^ 27 * w ^ 25) - 5 * j * u ^ 52 * v ^ 25 * w ^ 26) - 5 * j * u ^ 52 * v ^ 26 * w ^ 25) - 8 * j * u ^ 53 * v ^ 25 * w ^ 25, 3 * j * u ^ 4 * v ^ 4 * w ^ 5 + 3 * j * u ^ 4 * v ^ 5 * w ^ 4 + 3 * j * u ^ 5 * v ^ 4 * w ^ 4 + 2 * u ^ 6 * v ^ 2 * w ^ 5 + 3 * u ^ 6 * v ^ 3 * w ^ 4 + 3 * u ^ 6 * v ^ 4 * w ^ 3 + 2 * u ^ 6 * v ^ 5 * w ^ 2 + 3 * u ^ 7 * v ^ 2 * w ^ 4 + 4 * u ^ 7 * v ^ 3 * w ^ 3 + 3 * u ^ 7 * v ^ 4 * w ^ 2 + u ^ 8 * v ^ 5 + u ^ 8 * w ^ 5 + 2 * u ^ 9 * v ^ 4 + 2 * u ^ 9 * w ^ 4 + u ^ 13, 0, -(j ^ 2) * u ^ 44 * v ^ 22 * w ^ 22 + j ^ 2 * u ^ 48 * v ^ 20 * w ^ 20, 0, (((((((-2 * j ^ 2 * u ^ 10 * v ^ 5 * w ^ 8 - 2 * j ^ 2 * u ^ 10 * v ^ 6 * w ^ 7) - 2 * j ^ 2 * u ^ 10 * v ^ 7 * w ^ 6) - 2 * j ^ 2 * u ^ 10 * v ^ 8 * w ^ 5) - 5 * j ^ 2 * u ^ 11 * v ^ 5 * w ^ 7) - 5 * j ^ 2 * u ^ 11 * v ^ 7 * w ^ 5) - 5 * j ^ 2 * u ^ 12 * v ^ 5 * w ^ 6) - 5 * j ^ 2 * u ^ 12 * v ^ 6 * w ^ 5) - 8 * j ^ 2 * u ^ 13 * v ^ 5 * w ^ 5, 0, ((-j * u ^ 21 * v ^ 11 * w ^ 12 - j * u ^ 21 * v ^ 12 * w ^ 11) - 2 * j * u ^ 22 * v ^ 11 * w ^ 11) + 2 * j * u ^ 23 * v ^ 10 * w ^ 11 + 2 * j * u ^ 23 * v ^ 11 * w ^ 10 + 2 * j * u ^ 24 * v ^ 10 * w ^ 10, -j * u ^ 22 * v ^ 11 * w ^ 11 + j * u ^ 24 * v ^ 10 * w ^ 10, 9 * j * u ^ 4 * v ^ 4 * w ^ 4 + 6 * u ^ 6 * v ^ 2 * w ^ 4 + 8 * u ^ 6 * v ^ 3 * w ^ 3 + 6 * u ^ 6 * v ^ 4 * w ^ 2 + 3 * u ^ 8 * v ^ 4 + 3 * u ^ 8 * w ^ 4 + u ^ 12, (((((((2 * j ^ 2 * u ^ 11 * v ^ 8 * w ^ 8 - 3 * j ^ 2 * u ^ 12 * v ^ 7 * w ^ 8) - 3 * j ^ 2 * u ^ 12 * v ^ 8 * w ^ 7) + 2 * j ^ 2 * u ^ 13 * v ^ 5 * w ^ 9 + 2 * j ^ 2 * u ^ 13 * v ^ 6 * w ^ 8) - 6 * j ^ 2 * u ^ 13 * v ^ 7 * w ^ 7) + 2 * j ^ 2 * u ^ 13 * v ^ 8 * w ^ 6 + 2 * j ^ 2 * u ^ 13 * v ^ 9 * w ^ 5 + 4 * j ^ 2 * u ^ 14 * v ^ 5 * w ^ 8 + 4 * j ^ 2 * u ^ 14 * v ^ 8 * w ^ 5) - 2 * j ^ 2 * u ^ 16 * v ^ 5 * w ^ 6) - 2 * j ^ 2 * u ^ 16 * v ^ 6 * w ^ 5) - 2 * j ^ 2 * u ^ 17 * v ^ 5 * w ^ 5, u ^ 12 * v ^ 6 * w ^ 6, ((((((((((((((-j * u ^ 21 * v ^ 13 * w ^ 14 - j * u ^ 21 * v ^ 14 * w ^ 13) + j * u ^ 22 * v ^ 12 * w ^ 14 + 2 * j * u ^ 22 * v ^ 13 * w ^ 13 + j * u ^ 22 * v ^ 14 * w ^ 12) - j * u ^ 23 * v ^ 10 * w ^ 15) - j * u ^ 23 * v ^ 11 * w ^ 14) + 3 * j * u ^ 23 * v ^ 12 * w ^ 13 + 3 * j * u ^ 23 * v ^ 13 * w ^ 12) - j * u ^ 23 * v ^ 14 * w ^ 11) - j * u ^ 23 * v ^ 15 * w ^ 10) - 3 * j * u ^ 24 * v ^ 10 * w ^ 14) - j * u ^ 24 * v ^ 11 * w ^ 13) + 2 * j * u ^ 24 * v ^ 12 * w ^ 12) - j * u ^ 24 * v ^ 13 * w ^ 11) - 3 * j * u ^ 24 * v ^ 14 * w ^ 10) - 2 * j * u ^ 25 * v ^ 10 * w ^ 13) - 2 * j * u ^ 25 * v ^ 13 * w ^ 10) + 2 * j * u ^ 27 * v ^ 10 * w ^ 11 + 2 * j * u ^ 27 * v ^ 11 * w ^ 10 + 2 * j * u ^ 28 * v ^ 10 * w ^ 10, 9 * j ^ 2 * u ^ 8 * v ^ 8 * w ^ 8 + 6 * u ^ 12 * v ^ 4 * w ^ 8 + 8 * u ^ 12 * v ^ 6 * w ^ 6 + 6 * u ^ 12 * v ^ 8 * w ^ 4 + 3 * u ^ 16 * v ^ 8 + 3 * u ^ 16 * w ^ 8 + u ^ 24, (((((((-2 * u ^ 30 * v ^ 15 * w ^ 18 - 2 * u ^ 30 * v ^ 16 * w ^ 17) - 2 * u ^ 30 * v ^ 17 * w ^ 16) - 2 * u ^ 30 * v ^ 18 * w ^ 15) - 5 * u ^ 31 * v ^ 15 * w ^ 17) - 5 * u ^ 31 * v ^ 17 * w ^ 15) - 5 * u ^ 32 * v ^ 15 * w ^ 16) - 5 * u ^ 32 * v ^ 16 * w ^ 15) - 8 * u ^ 33 * v ^ 15 * w ^ 15, ((((((((-(j ^ 2) * u ^ 11 * v ^ 5 * w ^ 8 - j ^ 2 * u ^ 11 * v ^ 6 * w ^ 7) - j ^ 2 * u ^ 11 * v ^ 7 * w ^ 6) - j ^ 2 * u ^ 11 * v ^ 8 * w ^ 5) - 2 * j ^ 2 * u ^ 12 * v ^ 5 * w ^ 7) - j ^ 2 * u ^ 12 * v ^ 6 * w ^ 6) - 2 * j ^ 2 * u ^ 12 * v ^ 7 * w ^ 5) - 2 * j ^ 2 * u ^ 13 * v ^ 5 * w ^ 6) - 2 * j ^ 2 * u ^ 13 * v ^ 6 * w ^ 5) - 2 * j ^ 2 * u ^ 14 * v ^ 5 * w ^ 5, -j * u ^ 24 * v ^ 12 * w ^ 12 + j * u ^ 28 * v ^ 10 * w ^ 10, (((((((-3 * j ^ 2 * u ^ 12 * v ^ 7 * w ^ 9 + 2 * j ^ 2 * u ^ 12 * v ^ 8 * w ^ 8) - 3 * j ^ 2 * u ^ 12 * v ^ 9 * w ^ 7) + 2 * j ^ 2 * u ^ 13 * v ^ 5 * w ^ 10 + 2 * j ^ 2 * u ^ 13 * v ^ 7 * w ^ 8 + 2 * j ^ 2 * u ^ 13 * v ^ 8 * w ^ 7 + 2 * j ^ 2 * u ^ 13 * v ^ 10 * w ^ 5) - 6 * j ^ 2 * u ^ 14 * v ^ 7 * w ^ 7) + 4 * j ^ 2 * u ^ 15 * v ^ 5 * w ^ 8 + 4 * j ^ 2 * u ^ 15 * v ^ 8 * w ^ 5) - 2 * j ^ 2 * u ^ 16 * v ^ 5 * w ^ 7) - 2 * j ^ 2 * u ^ 16 * v ^ 7 * w ^ 5) - 2 * j ^ 2 * u ^ 18 * v ^ 5 * w ^ 5, (((u ^ 31 * v ^ 16 * w ^ 17 + u ^ 31 * v ^ 17 * w ^ 16 + 2 * u ^ 32 * v ^ 16 * w ^ 16) - 2 * u ^ 33 * v ^ 15 * w ^ 16) - 2 * u ^ 33 * v ^ 16 * w ^ 15) - 2 * u ^ 34 * v ^ 15 * w ^ 15, -4 * j * u ^ 21 * v ^ 11 * w ^ 11 + 6 * j * u ^ 23 * v ^ 10 * w ^ 10, (((-(j ^ 2) * u ^ 41 * v ^ 21 * w ^ 23 - j ^ 2 * u ^ 41 * v ^ 23 * w ^ 21) + 2 * j ^ 2 * u ^ 43 * v ^ 20 * w ^ 22) - 2 * j ^ 2 * u ^ 43 * v ^ 21 * w ^ 21) + 2 * j ^ 2 * u ^ 43 * v ^ 22 * w ^ 20 + 2 * j ^ 2 * u ^ 45 * v ^ 20 * w ^ 20, -4 * j ^ 2 * u ^ 41 * v ^ 21 * w ^ 21 + 6 * j ^ 2 * u ^ 43 * v ^ 20 * w ^ 20, ((((u ^ 31 * v ^ 16 * w ^ 18 + u ^ 31 * v ^ 18 * w ^ 16) - 2 * u ^ 33 * v ^ 15 * w ^ 17) + 2 * u ^ 33 * v ^ 16 * w ^ 16) - 2 * u ^ 33 * v ^ 17 * w ^ 15) - 2 * u ^ 35 * v ^ 15 * w ^ 15, (((3 * j * u ^ 12 * v ^ 7 * w ^ 7 - 2 * j ^ 2 * u ^ 13 * v ^ 6 * w ^ 7) - 2 * j ^ 2 * u ^ 13 * v ^ 7 * w ^ 6) + j ^ 2 * u ^ 14 * v ^ 5 * w ^ 7 + j ^ 2 * u ^ 14 * v ^ 7 * w ^ 5) - j ^ 2 * u ^ 16 * v ^ 5 * w ^ 5, ((((((((-2 * j * u ^ 21 * v ^ 13 * w ^ 13 + 3 * j * u ^ 22 * v ^ 12 * w ^ 13 + 3 * j * u ^ 22 * v ^ 13 * w ^ 12) - 2 * j * u ^ 23 * v ^ 10 * w ^ 14) - 2 * j * u ^ 23 * v ^ 11 * w ^ 13) + 6 * j * u ^ 23 * v ^ 12 * w ^ 12) - 2 * j * u ^ 23 * v ^ 13 * w ^ 11) - 2 * j * u ^ 23 * v ^ 14 * w ^ 10) - 4 * j * u ^ 24 * v ^ 10 * w ^ 13) - 4 * j * u ^ 24 * v ^ 13 * w ^ 10) + 2 * j * u ^ 26 * v ^ 10 * w ^ 11 + 2 * j * u ^ 26 * v ^ 11 * w ^ 10 + 2 * j * u ^ 27 * v ^ 10 * w ^ 10, ((2 * j ^ 2 * u ^ 10 * v ^ 8 * w ^ 8 - 12 * j ^ 2 * u ^ 12 * v ^ 7 * w ^ 7) + 8 * j ^ 2 * u ^ 13 * v ^ 5 * w ^ 8 + 8 * j ^ 2 * u ^ 13 * v ^ 8 * w ^ 5) - 6 * j ^ 2 * u ^ 16 * v ^ 5 * w ^ 5, ((((-(j ^ 2) * u ^ 11 * v ^ 5 * w ^ 7 - 3 * j ^ 2 * u ^ 11 * v ^ 6 * w ^ 6) - j ^ 2 * u ^ 11 * v ^ 7 * w ^ 5) - 4 * j ^ 2 * u ^ 12 * v ^ 5 * w ^ 6) - 4 * j ^ 2 * u ^ 12 * v ^ 6 * w ^ 5) - 2 * j ^ 2 * u ^ 13 * v ^ 5 * w ^ 5, j * u ^ 20 * v ^ 11 * w ^ 11 + 4 * j * u ^ 21 * v ^ 10 * w ^ 11 + 4 * j * u ^ 21 * v ^ 11 * w ^ 10 + 6 * j * u ^ 22 * v ^ 10 * w ^ 10, 0, 9 * j ^ 2 * u ^ 40 * v ^ 20 * w ^ 22 + 9 * j ^ 2 * u ^ 40 * v ^ 22 * w ^ 20 + 18 * j ^ 2 * u ^ 42 * v ^ 20 * w ^ 20, ((-(j ^ 2) * u ^ 10 * v ^ 6 * w ^ 6 - 4 * j ^ 2 * u ^ 11 * v ^ 5 * w ^ 6) - 4 * j ^ 2 * u ^ 11 * v ^ 6 * w ^ 5) - 6 * j ^ 2 * u ^ 12 * v ^ 5 * w ^ 5, (((-2 * j * u ^ 20 * v ^ 13 * w ^ 13 + 12 * j * u ^ 22 * v ^ 12 * w ^ 12) - 8 * j * u ^ 23 * v ^ 10 * w ^ 13) - 8 * j * u ^ 23 * v ^ 13 * w ^ 10) + 6 * j * u ^ 26 * v ^ 10 * w ^ 10, ((((-2 * j ^ 2 * u ^ 10 * v ^ 5 * w ^ 7 - 4 * j ^ 2 * u ^ 10 * v ^ 6 * w ^ 6) - 2 * j ^ 2 * u ^ 10 * v ^ 7 * w ^ 5) - 10 * j ^ 2 * u ^ 11 * v ^ 5 * w ^ 6) - 10 * j ^ 2 * u ^ 11 * v ^ 6 * w ^ 5) - 8 * j ^ 2 * u ^ 12 * v ^ 5 * w ^ 5, j * u ^ 21 * v ^ 10 * w ^ 12 + 3 * j * u ^ 21 * v ^ 11 * w ^ 11 + j * u ^ 21 * v ^ 12 * w ^ 10 + 4 * j * u ^ 22 * v ^ 10 * w ^ 11 + 4 * j * u ^ 22 * v ^ 11 * w ^ 10 + 2 * j * u ^ 23 * v ^ 10 * w ^ 10, 4 * u ^ 31 * v ^ 16 * w ^ 16 - 6 * u ^ 33 * v ^ 15 * w ^ 15, (-9 * j * u ^ 50 * v ^ 25 * w ^ 27 - 9 * j * u ^ 50 * v ^ 27 * w ^ 25) - 18 * j * u ^ 52 * v ^ 25 * w ^ 25, 2 * j * u ^ 20 * v ^ 10 * w ^ 12 + 4 * j * u ^ 20 * v ^ 11 * w ^ 11 + 2 * j * u ^ 20 * v ^ 12 * w ^ 10 + 10 * j * u ^ 21 * v ^ 10 * w ^ 11 + 10 * j * u ^ 21 * v ^ 11 * w ^ 10 + 8 * j * u ^ 22 * v ^ 10 * w ^ 10, (-9 * j ^ 2 * u ^ 10 * v ^ 5 * w ^ 6 - 9 * j ^ 2 * u ^ 10 * v ^ 6 * w ^ 5) - 18 * j ^ 2 * u ^ 11 * v ^ 5 * w ^ 5, -36 * j ^ 2 * u ^ 10 * v ^ 5 * w ^ 5, ((((-2 * u ^ 30 * v ^ 15 * w ^ 17 - 4 * u ^ 30 * v ^ 16 * w ^ 16) - 2 * u ^ 30 * v ^ 17 * w ^ 15) - 10 * u ^ 31 * v ^ 15 * w ^ 16) - 10 * u ^ 31 * v ^ 16 * w ^ 15) - 8 * u ^ 32 * v ^ 15 * w ^ 15, (-9 * u ^ 30 * v ^ 15 * w ^ 17 - 9 * u ^ 30 * v ^ 17 * w ^ 15) - 18 * u ^ 32 * v ^ 15 * w ^ 15, 9 * j * u ^ 20 * v ^ 10 * w ^ 11 + 9 * j * u ^ 20 * v ^ 11 * w ^ 10 + 18 * j * u ^ 21 * v ^ 10 * w ^ 10, (-9 * u ^ 30 * v ^ 15 * w ^ 16 - 9 * u ^ 30 * v ^ 16 * w ^ 15) - 18 * u ^ 31 * v ^ 15 * w ^ 15, -36 * j * u ^ 50 * v ^ 25 * w ^ 25, -36 * u ^ 30 * v ^ 15 * w ^ 15, 36 * j * u ^ 20 * v ^ 10 * w ^ 10, 36 * j ^ 2 * u ^ 40 * v ^ 20 * w ^ 20]
            end
        f40 = function (u, v, w)
                return [40, 10u + 12v + 18w, 2 * u * v + 4 * u * w + 6 * v * w + 4 * w ^ 2, 6 * u * v + 10 * u * w + 10 * v * w + 2 * u ^ 2 + 4 * v ^ 2 + 8 * w ^ 2, 10 * u ^ 2 + 12 * v ^ 2 + 18 * w ^ 2, -4 * u * v * w + 4 * w ^ 3, 4 * u * v * w + u * v ^ 2 + 3 * u * w ^ 2 + 3 * v * w ^ 2 + u ^ 2 * w + 2 * v ^ 2 * w + 2 * w ^ 3, u * v * w + u * w ^ 2 + v * w ^ 2, 3 * u * v ^ 2 + 5 * u * w ^ 2 + 5 * v * w ^ 2 + 3 * u ^ 2 * v + 5 * u ^ 2 * w + 5 * v ^ 2 * w + 2 * u ^ 3 + 4 * v ^ 3 + 8 * w ^ 3, -u * v * w ^ 2 - v ^ 2 * w ^ 2, ((((((((((((((((((((u ^ 2 * v ^ 4 * w ^ 13 - u ^ 2 * v ^ 7 * w ^ 10) - u ^ 2 * v ^ 8 * w ^ 9) + u ^ 3 * v ^ 3 * w ^ 13) - u ^ 3 * v ^ 6 * w ^ 10) - u ^ 3 * v ^ 7 * w ^ 9) + u ^ 4 * v ^ 6 * w ^ 9 + 2 * u ^ 4 * v ^ 7 * w ^ 8 + u ^ 4 * v ^ 8 * w ^ 7 + u ^ 4 * w ^ 15 + v ^ 4 * w ^ 15 + u ^ 5 * v ^ 5 * w ^ 9 + 2 * u ^ 5 * v ^ 6 * w ^ 8) - u ^ 6 * v ^ 3 * w ^ 10) + u ^ 6 * v ^ 5 * w ^ 8) - u ^ 6 * v ^ 6 * w ^ 7) - u ^ 6 * v ^ 7 * w ^ 6) - u ^ 7 * v ^ 3 * w ^ 9) + u ^ 7 * v ^ 4 * w ^ 8) - u ^ 7 * v ^ 6 * w ^ 6) + u ^ 7 * v ^ 8 * w ^ 4) - u ^ 7 * w ^ 12) - v ^ 7 * w ^ 12) + u ^ 8 * v ^ 4 * w ^ 7 + u ^ 8 * v ^ 7 * w ^ 4) - u ^ 8 * w ^ 11) - v ^ 8 * w ^ 11) - v ^ 9 * w ^ 10) - v ^ 10 * w ^ 9, u * v * w ^ 2 + u * v ^ 2 * w + u * v ^ 3 + 2 * u * w ^ 3 + 2 * v * w ^ 3 + 2 * u ^ 2 * v * w + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2 + u ^ 3 * w + 2 * v ^ 3 * w + 2 * w ^ 4, 0, 6 * u ^ 2 * v ^ 2 + 10 * u ^ 2 * w ^ 2 + 10 * v ^ 2 * w ^ 2 + 2 * u ^ 4 + 4 * v ^ 4 + 8 * w ^ 4, (((((((4 * u ^ 2 * v ^ 2 * w ^ 3 + 4 * u ^ 2 * v ^ 3 * w ^ 2 + 4 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 4) - 4 * u ^ 3 * w ^ 4) - 6 * v ^ 3 * w ^ 4) - 2 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - 6 * v ^ 4 * w ^ 3) + 4 * w ^ 7, (((-2 * u * v * w ^ 2 - u * v ^ 2 * w) + u * w ^ 3 + v * w ^ 3) - u ^ 2 * v * w) + 2 * w ^ 4, (((((((((((-3 * u * v * w ^ 3 + u * v ^ 2 * w ^ 2) - 3 * u * v ^ 3 * w) - u * v ^ 4) - u * w ^ 4) - v * w ^ 4) + u ^ 2 * v * w ^ 2 + 2 * u ^ 2 * v ^ 2 * w + u ^ 2 * v ^ 3 + u ^ 2 * w ^ 3) - 2 * u ^ 3 * v * w) - u ^ 3 * w ^ 2) - v ^ 3 * w ^ 2) - u ^ 4 * w) - 2 * v ^ 4 * w) + 2 * w ^ 5, 0, -(u ^ 2) * v ^ 2 * w ^ 4 - v ^ 4 * w ^ 4, 0, (((((u ^ 4 * v ^ 8 * w ^ 14 + u ^ 4 * v ^ 9 * w ^ 13 + u ^ 6 * v ^ 6 * w ^ 14 + u ^ 6 * v ^ 7 * w ^ 13 + u ^ 7 * v ^ 6 * w ^ 13) - u ^ 8 * v ^ 9 * w ^ 9) + u ^ 8 * w ^ 18 + v ^ 8 * w ^ 18) - u ^ 9 * v ^ 8 * w ^ 9) - u ^ 9 * v ^ 9 * w ^ 8) + u ^ 9 * w ^ 17 + v ^ 9 * w ^ 17 + v ^ 13 * w ^ 13, (((-2 * u * v * w ^ 3 - u * v ^ 3 * w) + u ^ 2 * w ^ 3 + v ^ 2 * w ^ 3) - u ^ 3 * v * w) + 2 * w ^ 5, -(u ^ 5) * v ^ 8 * w ^ 11 - u ^ 6 * v ^ 7 * w ^ 11, u ^ 5 * v ^ 5 * w ^ 5 + u ^ 5 * w ^ 10 + v ^ 5 * w ^ 10, -(u ^ 25) * v ^ 34 * w ^ 49 - u ^ 27 * v ^ 32 * w ^ 49, (((((((((u ^ 2 * v ^ 4 * w ^ 12 - 2 * u ^ 2 * v ^ 7 * w ^ 9) + u ^ 3 * v ^ 3 * w ^ 12) - 2 * u ^ 3 * v ^ 6 * w ^ 9) + 3 * u ^ 4 * v ^ 6 * w ^ 8 + 2 * u ^ 4 * v ^ 7 * w ^ 7 + u ^ 4 * w ^ 14 + v ^ 4 * w ^ 14 + 3 * u ^ 5 * v ^ 5 * w ^ 8) - 2 * u ^ 6 * v ^ 3 * w ^ 9) - 3 * u ^ 6 * v ^ 6 * w ^ 6) + 2 * u ^ 7 * v ^ 4 * w ^ 7 + 2 * u ^ 7 * v ^ 7 * w ^ 4) - 2 * u ^ 7 * w ^ 11) - 2 * v ^ 7 * w ^ 11) - 2 * v ^ 9 * w ^ 9, (((2 * u * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 2 * w ^ 2) - u ^ 2 * w ^ 4) - v ^ 2 * w ^ 4) - 2 * v ^ 3 * w ^ 3, 0, ((((((((((((((((-u * v ^ 2 * w ^ 3 - u * v ^ 3 * w ^ 2) - u * v ^ 5) - 2 * u * w ^ 5) - 2 * v * w ^ 5) - 2 * u ^ 2 * v * w ^ 3) + 4 * u ^ 2 * v ^ 2 * w ^ 2) - 2 * u ^ 2 * v ^ 3 * w) + u ^ 2 * v ^ 4 + 3 * u ^ 2 * w ^ 4 + 3 * v ^ 2 * w ^ 4) - u ^ 3 * v * w ^ 2) - u ^ 3 * v ^ 2 * w) - u ^ 3 * v ^ 3) - 3 * u ^ 3 * w ^ 3) - 4 * v ^ 3 * w ^ 3) + u ^ 4 * v ^ 2 + u ^ 4 * w ^ 2 + v ^ 4 * w ^ 2) - u ^ 5 * w) - 2 * v ^ 5 * w) + 2 * w ^ 6, 0, (((12 * u ^ 2 * v ^ 2 * w ^ 2 - 4 * u ^ 3 * v ^ 3) - 8 * u ^ 3 * w ^ 3) - 12 * v ^ 3 * w ^ 3) + 4 * w ^ 6, 4 * u ^ 25 * v ^ 30 * w ^ 48 - 4 * u ^ 26 * v ^ 31 * w ^ 46, (((((((((((((((((((u ^ 4 * v ^ 8 * w ^ 19 - u ^ 4 * v ^ 11 * w ^ 16) - u ^ 4 * v ^ 12 * w ^ 15) + u ^ 6 * v ^ 6 * w ^ 19) - u ^ 6 * v ^ 9 * w ^ 16) + u ^ 6 * v ^ 11 * w ^ 14 + u ^ 7 * v ^ 10 * w ^ 14 + u ^ 8 * v ^ 8 * w ^ 15 + u ^ 8 * v ^ 9 * w ^ 14 + u ^ 8 * v ^ 11 * w ^ 12 + u ^ 8 * v ^ 12 * w ^ 11 + u ^ 8 * w ^ 23 + v ^ 8 * w ^ 23) - u ^ 9 * v ^ 6 * w ^ 16) + u ^ 9 * v ^ 8 * w ^ 14) - u ^ 10 * v ^ 6 * w ^ 15) - u ^ 10 * v ^ 10 * w ^ 11) - u ^ 10 * v ^ 11 * w ^ 10) + u ^ 11 * v ^ 8 * w ^ 12) - u ^ 11 * v ^ 10 * w ^ 10) + u ^ 11 * v ^ 12 * w ^ 8) - u ^ 11 * w ^ 20) - v ^ 11 * w ^ 20) + u ^ 12 * v ^ 8 * w ^ 11 + u ^ 12 * v ^ 11 * w ^ 8) - u ^ 12 * w ^ 19) - v ^ 12 * w ^ 19) - v ^ 15 * w ^ 16) - v ^ 16 * w ^ 15, 0, 0, (((((((((-4 * u * v ^ 3 * w ^ 3 + u * w ^ 6 + v * w ^ 6 + 6 * u ^ 2 * v ^ 2 * w ^ 3 + 3 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 3 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3 * w) - 2 * u ^ 3 * v ^ 4) - 4 * u ^ 3 * w ^ 4) - 4 * v ^ 3 * w ^ 4) - 2 * u ^ 4 * w ^ 3) - 4 * v ^ 4 * w ^ 3) + 2 * w ^ 7, -(u ^ 5) * v ^ 10 * w ^ 13 - u ^ 7 * v ^ 8 * w ^ 13, ((((2 * u ^ 5 * v ^ 6 * w ^ 14 + u ^ 5 * v ^ 8 * w ^ 12) - 2 * u ^ 6 * v ^ 7 * w ^ 12) - u ^ 6 * v ^ 9 * w ^ 10) + u ^ 7 * v ^ 6 * w ^ 12) - u ^ 8 * v ^ 7 * w ^ 10, -(u ^ 15) * v ^ 22 * w ^ 31 - u ^ 17 * v ^ 20 * w ^ 31, ((((((((u ^ 2 * v ^ 4 * w ^ 8 + 2 * u ^ 2 * v ^ 5 * w ^ 7 + u ^ 2 * v ^ 6 * w ^ 6 + 2 * u ^ 3 * v ^ 3 * w ^ 8 + 4 * u ^ 3 * v ^ 4 * w ^ 7 + 2 * u ^ 4 * v ^ 3 * w ^ 7 + u ^ 4 * v ^ 4 * w ^ 6) - 2 * u ^ 4 * v ^ 5 * w ^ 5) - u ^ 4 * v ^ 6 * w ^ 4) + u ^ 4 * w ^ 10 + v ^ 4 * w ^ 10) - 2 * u ^ 5 * v ^ 4 * w ^ 5) - 2 * u ^ 5 * v ^ 5 * w ^ 4) + 2 * u ^ 5 * w ^ 9 + 2 * v ^ 5 * w ^ 9) - u ^ 6 * v ^ 4 * w ^ 4) + v ^ 6 * w ^ 8 + v ^ 8 * w ^ 6, 0, 0, 4 * u ^ 5 * v ^ 6 * w ^ 12 - 4 * u ^ 6 * v ^ 7 * w ^ 10, (((((u ^ 2 * v ^ 4 * w ^ 8 + u ^ 2 * v ^ 5 * w ^ 7 + u ^ 3 * v ^ 3 * w ^ 8 + u ^ 3 * v ^ 4 * w ^ 7 + u ^ 4 * v ^ 3 * w ^ 7) - u ^ 4 * v ^ 5 * w ^ 5) + u ^ 4 * w ^ 10 + v ^ 4 * w ^ 10) - u ^ 5 * v ^ 4 * w ^ 5) - u ^ 5 * v ^ 5 * w ^ 4) + u ^ 5 * w ^ 9 + v ^ 5 * w ^ 9 + v ^ 7 * w ^ 7, (((2 * u ^ 25 * v ^ 30 * w ^ 49 + u ^ 25 * v ^ 31 * w ^ 48 + u ^ 26 * v ^ 30 * w ^ 48) - 2 * u ^ 26 * v ^ 31 * w ^ 47) - u ^ 26 * v ^ 32 * w ^ 46) - u ^ 27 * v ^ 31 * w ^ 46, -(u ^ 25) * v ^ 32 * w ^ 47 - u ^ 26 * v ^ 31 * w ^ 47, ((((((((((6 * u ^ 2 * v ^ 2 * w ^ 4 - 4 * u ^ 2 * v ^ 3 * w ^ 3) + 3 * u ^ 2 * v ^ 4 * w ^ 2 + u ^ 2 * w ^ 6 + v ^ 2 * w ^ 6) - 2 * u ^ 3 * v ^ 2 * w ^ 3) - 2 * u ^ 3 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v ^ 5) - 4 * u ^ 3 * w ^ 5) - 4 * v ^ 3 * w ^ 5) + 3 * u ^ 4 * v ^ 2 * w ^ 2) - 2 * u ^ 5 * w ^ 3) - 4 * v ^ 5 * w ^ 3) + 2 * w ^ 8, 18 * u ^ 25 * v ^ 30 * w ^ 46 + 12 * u ^ 25 * v ^ 31 * w ^ 45 + 10 * u ^ 26 * v ^ 30 * w ^ 45, (((2 * u ^ 5 * v ^ 6 * w ^ 13 + u ^ 5 * v ^ 7 * w ^ 12 + u ^ 6 * v ^ 6 * w ^ 12) - 2 * u ^ 6 * v ^ 7 * w ^ 11) - u ^ 6 * v ^ 8 * w ^ 10) - u ^ 7 * v ^ 7 * w ^ 10, -(u ^ 20) * v ^ 26 * w ^ 38 - u ^ 21 * v ^ 25 * w ^ 38, 0, ((((2 * u ^ 25 * v ^ 30 * w ^ 50 + u ^ 25 * v ^ 32 * w ^ 48) - 2 * u ^ 26 * v ^ 31 * w ^ 48) - u ^ 26 * v ^ 33 * w ^ 46) + u ^ 27 * v ^ 30 * w ^ 48) - u ^ 28 * v ^ 31 * w ^ 46, 8 * u ^ 5 * v ^ 6 * w ^ 13 + 10 * u ^ 5 * v ^ 8 * w ^ 11 + 4 * u ^ 5 * v ^ 10 * w ^ 9 + 10 * u ^ 7 * v ^ 6 * w ^ 11 + 6 * u ^ 7 * v ^ 8 * w ^ 9 + 2 * u ^ 9 * v ^ 6 * w ^ 9, 18 * u ^ 5 * v ^ 6 * w ^ 11 + 12 * u ^ 5 * v ^ 8 * w ^ 9 + 10 * u ^ 7 * v ^ 6 * w ^ 9, -(u ^ 15) * v ^ 20 * w ^ 29 - u ^ 16 * v ^ 19 * w ^ 29, 8 * u ^ 25 * v ^ 30 * w ^ 48 + 5 * u ^ 25 * v ^ 31 * w ^ 47 + 5 * u ^ 25 * v ^ 32 * w ^ 46 + 4 * u ^ 25 * v ^ 33 * w ^ 45 + 5 * u ^ 26 * v ^ 30 * w ^ 47 + 3 * u ^ 26 * v ^ 32 * w ^ 45 + 5 * u ^ 27 * v ^ 30 * w ^ 46 + 3 * u ^ 27 * v ^ 31 * w ^ 45 + 2 * u ^ 28 * v ^ 30 * w ^ 45, (((((3 * u ^ 2 * v ^ 4 * w ^ 7 + 2 * u ^ 2 * v ^ 5 * w ^ 6 + 4 * u ^ 3 * v ^ 3 * w ^ 7 + 3 * u ^ 3 * v ^ 4 * w ^ 6 + 2 * u ^ 4 * v ^ 3 * w ^ 6) - 3 * u ^ 4 * v ^ 4 * w ^ 5) - 3 * u ^ 4 * v ^ 5 * w ^ 4) + 2 * u ^ 4 * w ^ 9 + 2 * v ^ 4 * w ^ 9) - 3 * u ^ 5 * v ^ 4 * w ^ 4) + u ^ 5 * w ^ 8 + v ^ 5 * w ^ 8 + v ^ 6 * w ^ 7 + v ^ 7 * w ^ 6, 0, -(u ^ 20) * v ^ 28 * w ^ 40 - u ^ 22 * v ^ 26 * w ^ 40, 0, 8 * u ^ 5 * v ^ 6 * w ^ 12 + 5 * u ^ 5 * v ^ 7 * w ^ 11 + 5 * u ^ 5 * v ^ 8 * w ^ 10 + 4 * u ^ 5 * v ^ 9 * w ^ 9 + 5 * u ^ 6 * v ^ 6 * w ^ 11 + 3 * u ^ 6 * v ^ 8 * w ^ 9 + 5 * u ^ 7 * v ^ 6 * w ^ 10 + 3 * u ^ 7 * v ^ 7 * w ^ 9 + 2 * u ^ 8 * v ^ 6 * w ^ 9, 0, (((2 * u ^ 10 * v ^ 12 * w ^ 22 + u ^ 10 * v ^ 13 * w ^ 21 + u ^ 11 * v ^ 12 * w ^ 21) - 2 * u ^ 11 * v ^ 13 * w ^ 20) - u ^ 11 * v ^ 14 * w ^ 19) - u ^ 12 * v ^ 13 * w ^ 19, -(u ^ 10) * v ^ 14 * w ^ 20 - u ^ 11 * v ^ 13 * w ^ 20, ((6 * u ^ 2 * v ^ 4 * w ^ 6 + 8 * u ^ 3 * v ^ 3 * w ^ 6) - 9 * u ^ 4 * v ^ 4 * w ^ 4) + 3 * u ^ 4 * w ^ 8 + 3 * v ^ 4 * w ^ 8 + 2 * v ^ 6 * w ^ 6, (((((((((((2 * u ^ 5 * v ^ 6 * w ^ 16 + u ^ 5 * v ^ 7 * w ^ 15) - 4 * u ^ 5 * v ^ 9 * w ^ 13) - 4 * u ^ 5 * v ^ 10 * w ^ 12) + u ^ 6 * v ^ 6 * w ^ 15) - 4 * u ^ 6 * v ^ 9 * w ^ 12) + 6 * u ^ 7 * v ^ 8 * w ^ 12 + 3 * u ^ 7 * v ^ 9 * w ^ 11) - 4 * u ^ 8 * v ^ 6 * w ^ 13) - 2 * u ^ 8 * v ^ 7 * w ^ 12) + 3 * u ^ 8 * v ^ 8 * w ^ 11) - 2 * u ^ 8 * v ^ 9 * w ^ 10) - 2 * u ^ 8 * v ^ 10 * w ^ 9) - 2 * u ^ 9 * v ^ 6 * w ^ 12, 0, ((((((((((((((((((2 * u ^ 10 * v ^ 12 * w ^ 26 + u ^ 10 * v ^ 13 * w ^ 25) - 2 * u ^ 10 * v ^ 15 * w ^ 23) - 4 * u ^ 10 * v ^ 16 * w ^ 22) - 2 * u ^ 10 * v ^ 17 * w ^ 21) + u ^ 11 * v ^ 12 * w ^ 25) - 2 * u ^ 11 * v ^ 15 * w ^ 22) - 2 * u ^ 11 * v ^ 16 * w ^ 21) + 2 * u ^ 12 * v ^ 14 * w ^ 22 + 3 * u ^ 12 * v ^ 15 * w ^ 21 + u ^ 12 * v ^ 16 * w ^ 20) - 2 * u ^ 13 * v ^ 12 * w ^ 23) - u ^ 13 * v ^ 13 * w ^ 22) + 3 * u ^ 13 * v ^ 14 * w ^ 21 + 2 * u ^ 13 * v ^ 15 * w ^ 20) - u ^ 13 * v ^ 16 * w ^ 19) - u ^ 13 * v ^ 17 * w ^ 18) - 3 * u ^ 14 * v ^ 12 * w ^ 22) - u ^ 14 * v ^ 13 * w ^ 21) + u ^ 14 * v ^ 14 * w ^ 20) - u ^ 14 * v ^ 15 * w ^ 19) - u ^ 14 * v ^ 16 * w ^ 18) - u ^ 15 * v ^ 12 * w ^ 21, ((6 * u ^ 4 * v ^ 8 * w ^ 12 + 8 * u ^ 6 * v ^ 6 * w ^ 12) - 9 * u ^ 8 * v ^ 8 * w ^ 8) + 3 * u ^ 8 * w ^ 16 + 3 * v ^ 8 * w ^ 16 + 2 * v ^ 12 * w ^ 12, 8 * u ^ 15 * v ^ 18 * w ^ 30 + 5 * u ^ 15 * v ^ 19 * w ^ 29 + 5 * u ^ 15 * v ^ 20 * w ^ 28 + 4 * u ^ 15 * v ^ 21 * w ^ 27 + 5 * u ^ 16 * v ^ 18 * w ^ 29 + 3 * u ^ 16 * v ^ 20 * w ^ 27 + 5 * u ^ 17 * v ^ 18 * w ^ 28 + 3 * u ^ 17 * v ^ 19 * w ^ 27 + 2 * u ^ 18 * v ^ 18 * w ^ 27, 2 * u ^ 5 * v ^ 6 * w ^ 13 + 2 * u ^ 5 * v ^ 7 * w ^ 12 + u ^ 5 * v ^ 8 * w ^ 11 + 2 * u ^ 5 * v ^ 9 * w ^ 10 + 2 * u ^ 6 * v ^ 6 * w ^ 12 + u ^ 6 * v ^ 7 * w ^ 11 + u ^ 6 * v ^ 8 * w ^ 10 + u ^ 6 * v ^ 9 * w ^ 9 + u ^ 7 * v ^ 6 * w ^ 11 + 2 * u ^ 7 * v ^ 7 * w ^ 10 + u ^ 8 * v ^ 6 * w ^ 10, -(u ^ 10) * v ^ 16 * w ^ 22 - u ^ 12 * v ^ 14 * w ^ 22, (((((((((((2 * u ^ 5 * v ^ 6 * w ^ 17 + u ^ 5 * v ^ 8 * w ^ 15) - 4 * u ^ 5 * v ^ 9 * w ^ 14) - 4 * u ^ 5 * v ^ 11 * w ^ 12) + u ^ 7 * v ^ 6 * w ^ 15 + 6 * u ^ 7 * v ^ 8 * w ^ 13) - 4 * u ^ 7 * v ^ 9 * w ^ 12) + 3 * u ^ 7 * v ^ 10 * w ^ 11) - 4 * u ^ 8 * v ^ 6 * w ^ 14) - 2 * u ^ 8 * v ^ 8 * w ^ 12) - 2 * u ^ 8 * v ^ 9 * w ^ 11) - 2 * u ^ 8 * v ^ 11 * w ^ 9) + 3 * u ^ 9 * v ^ 8 * w ^ 11) - 2 * u ^ 10 * v ^ 6 * w ^ 12, (((2 * u ^ 15 * v ^ 18 * w ^ 31 + u ^ 15 * v ^ 19 * w ^ 30 + u ^ 16 * v ^ 18 * w ^ 30) - 2 * u ^ 16 * v ^ 19 * w ^ 29) - u ^ 16 * v ^ 20 * w ^ 28) - u ^ 17 * v ^ 19 * w ^ 28, 4 * u ^ 10 * v ^ 12 * w ^ 21 - 4 * u ^ 11 * v ^ 13 * w ^ 19, ((((2 * u ^ 20 * v ^ 24 * w ^ 41 + u ^ 20 * v ^ 26 * w ^ 39) - 2 * u ^ 21 * v ^ 25 * w ^ 39) - u ^ 21 * v ^ 27 * w ^ 37) + u ^ 22 * v ^ 24 * w ^ 39) - u ^ 23 * v ^ 25 * w ^ 37, 4 * u ^ 20 * v ^ 24 * w ^ 39 - 4 * u ^ 21 * v ^ 25 * w ^ 37, ((((2 * u ^ 15 * v ^ 18 * w ^ 32 + u ^ 15 * v ^ 20 * w ^ 30) - 2 * u ^ 16 * v ^ 19 * w ^ 30) - u ^ 16 * v ^ 21 * w ^ 28) + u ^ 17 * v ^ 18 * w ^ 30) - u ^ 18 * v ^ 19 * w ^ 28, (((-(u ^ 5) * v ^ 8 * w ^ 13 - 2 * u ^ 5 * v ^ 9 * w ^ 12) + 2 * u ^ 6 * v ^ 8 * w ^ 12) - u ^ 7 * v ^ 6 * w ^ 13) + 3 * u ^ 7 * v ^ 8 * w ^ 11, (((((((((((2 * u ^ 10 * v ^ 12 * w ^ 25 + u ^ 10 * v ^ 13 * w ^ 24) - 4 * u ^ 10 * v ^ 15 * w ^ 22) - 4 * u ^ 10 * v ^ 16 * w ^ 21) + u ^ 11 * v ^ 12 * w ^ 24) - 4 * u ^ 11 * v ^ 15 * w ^ 21) + 6 * u ^ 12 * v ^ 14 * w ^ 21 + 3 * u ^ 12 * v ^ 15 * w ^ 20) - 4 * u ^ 13 * v ^ 12 * w ^ 22) - 2 * u ^ 13 * v ^ 13 * w ^ 21) + 3 * u ^ 13 * v ^ 14 * w ^ 20) - 2 * u ^ 13 * v ^ 15 * w ^ 19) - 2 * u ^ 13 * v ^ 16 * w ^ 18) - 2 * u ^ 14 * v ^ 12 * w ^ 21, (((4 * u ^ 5 * v ^ 6 * w ^ 15 - 12 * u ^ 5 * v ^ 9 * w ^ 12) + 12 * u ^ 7 * v ^ 8 * w ^ 11) - 8 * u ^ 8 * v ^ 6 * w ^ 12) - 4 * u ^ 8 * v ^ 9 * w ^ 9, 2 * u ^ 5 * v ^ 6 * w ^ 12 + 3 * u ^ 5 * v ^ 7 * w ^ 11 + 2 * u ^ 5 * v ^ 8 * w ^ 10 + 3 * u ^ 6 * v ^ 6 * w ^ 11 + 4 * u ^ 6 * v ^ 7 * w ^ 10 + u ^ 6 * v ^ 8 * w ^ 9 + u ^ 7 * v ^ 6 * w ^ 10, 4 * u ^ 10 * v ^ 12 * w ^ 20 + 6 * u ^ 10 * v ^ 13 * w ^ 19 + 4 * u ^ 11 * v ^ 12 * w ^ 19 + 2 * u ^ 11 * v ^ 13 * w ^ 18, 0, 18 * u ^ 20 * v ^ 24 * w ^ 38 + 12 * u ^ 20 * v ^ 26 * w ^ 36 + 10 * u ^ 22 * v ^ 24 * w ^ 36, 4 * u ^ 5 * v ^ 6 * w ^ 11 + 6 * u ^ 5 * v ^ 7 * w ^ 10 + 4 * u ^ 6 * v ^ 6 * w ^ 10 + 2 * u ^ 6 * v ^ 7 * w ^ 9, (((4 * u ^ 10 * v ^ 12 * w ^ 24 - 12 * u ^ 10 * v ^ 15 * w ^ 21) + 12 * u ^ 12 * v ^ 14 * w ^ 20) - 8 * u ^ 13 * v ^ 12 * w ^ 21) - 4 * u ^ 13 * v ^ 15 * w ^ 18, 8 * u ^ 5 * v ^ 6 * w ^ 11 + 10 * u ^ 5 * v ^ 7 * w ^ 10 + 4 * u ^ 5 * v ^ 8 * w ^ 9 + 10 * u ^ 6 * v ^ 6 * w ^ 10 + 6 * u ^ 6 * v ^ 7 * w ^ 9 + 2 * u ^ 7 * v ^ 6 * w ^ 9, 2 * u ^ 10 * v ^ 12 * w ^ 21 + 3 * u ^ 10 * v ^ 13 * w ^ 20 + 2 * u ^ 10 * v ^ 14 * w ^ 19 + 3 * u ^ 11 * v ^ 12 * w ^ 20 + 4 * u ^ 11 * v ^ 13 * w ^ 19 + u ^ 11 * v ^ 14 * w ^ 18 + u ^ 12 * v ^ 12 * w ^ 19, 4 * u ^ 15 * v ^ 18 * w ^ 30 - 4 * u ^ 16 * v ^ 19 * w ^ 28, 18 * u ^ 25 * v ^ 30 * w ^ 47 + 12 * u ^ 25 * v ^ 32 * w ^ 45 + 10 * u ^ 27 * v ^ 30 * w ^ 45, 8 * u ^ 10 * v ^ 12 * w ^ 20 + 10 * u ^ 10 * v ^ 13 * w ^ 19 + 4 * u ^ 10 * v ^ 14 * w ^ 18 + 10 * u ^ 11 * v ^ 12 * w ^ 19 + 6 * u ^ 11 * v ^ 13 * w ^ 18 + 2 * u ^ 12 * v ^ 12 * w ^ 18, 18 * u ^ 5 * v ^ 6 * w ^ 10 + 12 * u ^ 5 * v ^ 7 * w ^ 9 + 10 * u ^ 6 * v ^ 6 * w ^ 9, 40 * u ^ 5 * v ^ 6 * w ^ 9, 8 * u ^ 15 * v ^ 18 * w ^ 29 + 10 * u ^ 15 * v ^ 19 * w ^ 28 + 4 * u ^ 15 * v ^ 20 * w ^ 27 + 10 * u ^ 16 * v ^ 18 * w ^ 28 + 6 * u ^ 16 * v ^ 19 * w ^ 27 + 2 * u ^ 17 * v ^ 18 * w ^ 27, 18 * u ^ 15 * v ^ 18 * w ^ 29 + 12 * u ^ 15 * v ^ 20 * w ^ 27 + 10 * u ^ 17 * v ^ 18 * w ^ 27, 18 * u ^ 10 * v ^ 12 * w ^ 19 + 12 * u ^ 10 * v ^ 13 * w ^ 18 + 10 * u ^ 11 * v ^ 12 * w ^ 18, 18 * u ^ 15 * v ^ 18 * w ^ 28 + 12 * u ^ 15 * v ^ 19 * w ^ 27 + 10 * u ^ 16 * v ^ 18 * w ^ 27, 40 * u ^ 25 * v ^ 30 * w ^ 45, 40 * u ^ 15 * v ^ 18 * w ^ 27, 40 * u ^ 10 * v ^ 12 * w ^ 18, 40 * u ^ 20 * v ^ 24 * w ^ 36]
            end
        f45 = function (u, v, w, j)
                return [45, 18u + 18v + 9w, 8 * u * v + 2 * u * w + 2 * v * w + 3 * u ^ 2 + 3 * v ^ 2, 14 * u * v + 8 * u * w + 8 * v * w + 7 * u ^ 2 + 7 * v ^ 2 + w ^ 2, 18 * u ^ 2 + 18 * v ^ 2 + 9 * w ^ 2, -5 * u * v * w + 3 * u ^ 3 + 3 * v ^ 3, 4 * u * v * w + 4 * u * v ^ 2 + 4 * u ^ 2 * v + 2 * u ^ 2 * w + 2 * v ^ 2 * w + u ^ 3 + v ^ 3, -(j ^ 2) * u * v * w + u * v ^ 2 + u ^ 2 * v, 7 * u * v ^ 2 + 4 * u * w ^ 2 + 4 * v * w ^ 2 + 7 * u ^ 2 * v + 4 * u ^ 2 * w + 4 * v ^ 2 * w + 7 * u ^ 3 + 7 * v ^ 3 + w ^ 3, (-u * v ^ 2 * w - u ^ 2 * v * w) - u ^ 2 * v ^ 2, ((((((((((((((((((((((((((-(u ^ 3) * v ^ 9 * w ^ 7 - u ^ 3 * v ^ 10 * w ^ 6) + u ^ 3 * v ^ 13 * w ^ 3) - j ^ 2 * u ^ 4 * v ^ 7 * w ^ 8) - j ^ 2 * u ^ 4 * v ^ 8 * w ^ 7) + u ^ 4 * v ^ 13 * w ^ 2 + u ^ 4 * v ^ 15 + u ^ 5 * v ^ 8 * w ^ 6 + u ^ 5 * v ^ 9 * w ^ 5 + j ^ 2 * u ^ 6 * v ^ 6 * w ^ 7 + j ^ 2 * u ^ 6 * v ^ 7 * w ^ 6 + 2 * u ^ 6 * v ^ 8 * w ^ 5 + u ^ 6 * v ^ 9 * w ^ 4) - u ^ 6 * v ^ 10 * w ^ 3) - j ^ 2 * u ^ 7 * v ^ 4 * w ^ 8) + j ^ 2 * u ^ 7 * v ^ 6 * w ^ 6 + (-j - 2 * j ^ 2) * u ^ 7 * v ^ 8 * w ^ 4) - u ^ 7 * v ^ 9 * w ^ 3) - u ^ 7 * v ^ 10 * w ^ 2) - u ^ 7 * v ^ 12) - j ^ 2 * u ^ 8 * v ^ 4 * w ^ 7) + u ^ 8 * v ^ 5 * w ^ 6 + 2 * u ^ 8 * v ^ 6 * w ^ 5 + (-j - 2 * j ^ 2) * u ^ 8 * v ^ 7 * w ^ 4) - u ^ 8 * v ^ 9 * w ^ 2) - u ^ 8 * v ^ 11) - u ^ 9 * v ^ 3 * w ^ 7) + u ^ 9 * v ^ 5 * w ^ 5 + u ^ 9 * v ^ 6 * w ^ 4) - u ^ 9 * v ^ 7 * w ^ 3) - u ^ 9 * v ^ 8 * w ^ 2) - u ^ 9 * v ^ 10) - u ^ 10 * v ^ 3 * w ^ 6) - u ^ 10 * v ^ 6 * w ^ 3) - u ^ 10 * v ^ 7 * w ^ 2) - u ^ 10 * v ^ 9) - u ^ 11 * v ^ 8) - u ^ 12 * v ^ 7) + u ^ 13 * v ^ 3 * w ^ 3 + u ^ 13 * v ^ 4 * w ^ 2 + u ^ 15 * v ^ 4, 2 * u * v * w ^ 2 + u * v ^ 2 * w + 3 * u * v ^ 3 + u ^ 2 * v * w + 2 * u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + v ^ 2 * w ^ 2 + 3 * u ^ 3 * v + u ^ 3 * w + v ^ 3 * w + u ^ 4 + v ^ 4, 0, 14 * u ^ 2 * v ^ 2 + 8 * u ^ 2 * w ^ 2 + 8 * v ^ 2 * w ^ 2 + 7 * u ^ 4 + 7 * v ^ 4 + w ^ 4, (((((((5 * u ^ 2 * v ^ 2 * w ^ 3 + 5 * u ^ 2 * v ^ 3 * w ^ 2 + 5 * u ^ 3 * v ^ 2 * w ^ 2) - 8 * u ^ 3 * v ^ 4) - 2 * u ^ 3 * w ^ 4) - 2 * v ^ 3 * w ^ 4) - 8 * u ^ 4 * v ^ 3) - 2 * u ^ 4 * w ^ 3) - 2 * v ^ 4 * w ^ 3) + 3 * u ^ 7 + 3 * v ^ 7, (((-u * v * w ^ 2 - 2 * u * v ^ 2 * w) + u * v ^ 3) - 2 * u ^ 2 * v * w) + u ^ 3 * v + u ^ 3 * w + v ^ 3 * w + u ^ 4 + v ^ 4, (((((((((-2 * u * v * w ^ 3 + 2 * u * v ^ 2 * w ^ 2) - 3 * u * v ^ 3 * w) - 2 * u * v ^ 4) + 2 * u ^ 2 * v * w ^ 2 + u ^ 2 * v ^ 2 * w) - u ^ 2 * v ^ 3) - 3 * u ^ 3 * v * w) - u ^ 3 * v ^ 2) + 2 * u ^ 3 * w ^ 2 + 2 * v ^ 3 * w ^ 2) - 2 * u ^ 4 * v) + u ^ 5 + v ^ 5, 0, (-(u ^ 2) * v ^ 4 * w ^ 2 - u ^ 4 * v ^ 2 * w ^ 2) - u ^ 4 * v ^ 4, j ^ 2 * u ^ 2 * v ^ 2 * w, u ^ 6 * v ^ 13 * w ^ 7 + u ^ 6 * v ^ 14 * w ^ 6 + u ^ 7 * v ^ 13 * w ^ 6 + j * u ^ 8 * v ^ 9 * w ^ 9 + u ^ 8 * v ^ 14 * w ^ 4 + u ^ 8 * v ^ 18 + j * u ^ 9 * v ^ 8 * w ^ 9 + j * u ^ 9 * v ^ 9 * w ^ 8 + u ^ 9 * v ^ 13 * w ^ 4 + u ^ 9 * v ^ 17 + u ^ 13 * v ^ 6 * w ^ 7 + u ^ 13 * v ^ 7 * w ^ 6 + u ^ 13 * v ^ 9 * w ^ 4 + u ^ 13 * v ^ 13 + u ^ 14 * v ^ 6 * w ^ 6 + u ^ 14 * v ^ 8 * w ^ 4 + u ^ 17 * v ^ 9 + u ^ 18 * v ^ 8, (((-u * v * w ^ 3 - 2 * u * v ^ 3 * w) + u ^ 2 * v ^ 3) - 2 * u ^ 3 * v * w) + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2 + v ^ 3 * w ^ 2 + u ^ 5 + v ^ 5, (-(j ^ 2) * u ^ 9 * v ^ 10 * w ^ 5 - j ^ 2 * u ^ 10 * v ^ 9 * w ^ 5) - j ^ 2 * u ^ 10 * v ^ 10 * w ^ 4, -j * u ^ 5 * v ^ 5 * w ^ 5 + u ^ 5 * v ^ 10 + u ^ 10 * v ^ 5, (-j * u ^ 42 * v ^ 44 * w ^ 22 - j * u ^ 44 * v ^ 42 * w ^ 22) - j * u ^ 44 * v ^ 44 * w ^ 20, ((((((((((((((-2 * u ^ 3 * v ^ 9 * w ^ 6 + u ^ 3 * v ^ 12 * w ^ 3) - 2 * j ^ 2 * u ^ 4 * v ^ 7 * w ^ 7) + u ^ 4 * v ^ 12 * w ^ 2 + u ^ 4 * v ^ 14 + 3 * u ^ 5 * v ^ 8 * w ^ 5 + 3 * j ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 + 3 * u ^ 6 * v ^ 8 * w ^ 4) - 2 * u ^ 6 * v ^ 9 * w ^ 3) - 2 * j ^ 2 * u ^ 7 * v ^ 4 * w ^ 7) - 2 * j ^ 2 * u ^ 7 * v ^ 7 * w ^ 4) - 2 * u ^ 7 * v ^ 9 * w ^ 2) - 2 * u ^ 7 * v ^ 11) + 3 * u ^ 8 * v ^ 5 * w ^ 5 + 3 * u ^ 8 * v ^ 6 * w ^ 4) - 2 * u ^ 9 * v ^ 3 * w ^ 6) - 2 * u ^ 9 * v ^ 6 * w ^ 3) - 2 * u ^ 9 * v ^ 7 * w ^ 2) - 2 * u ^ 9 * v ^ 9) - 2 * u ^ 11 * v ^ 7) + u ^ 12 * v ^ 3 * w ^ 3 + u ^ 12 * v ^ 4 * w ^ 2 + u ^ 14 * v ^ 4, ((((-3 * j * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 2 * v ^ 3 * w) - u ^ 2 * v ^ 4) + 2 * u ^ 3 * v ^ 2 * w) - 2 * u ^ 3 * v ^ 3) - u ^ 4 * v ^ 2, 0, (((((((((((((((-u * v ^ 2 * w ^ 3 - 2 * u * v ^ 3 * w ^ 2) - 3 * u * v ^ 5) - u ^ 2 * v * w ^ 3) + 5 * u ^ 2 * v ^ 2 * w ^ 2) - u ^ 2 * v ^ 3 * w) + 3 * u ^ 2 * v ^ 4 + u ^ 2 * w ^ 4 + v ^ 2 * w ^ 4) - 2 * u ^ 3 * v * w ^ 2) - u ^ 3 * v ^ 2 * w) - 6 * u ^ 3 * v ^ 3) - u ^ 3 * w ^ 3) - v ^ 3 * w ^ 3) + 3 * u ^ 4 * v ^ 2 + 3 * u ^ 4 * w ^ 2 + 3 * v ^ 4 * w ^ 2) - 3 * u ^ 5 * v) - u ^ 5 * w) - v ^ 5 * w) + u ^ 6 + v ^ 6, (-j * u ^ 4 * v ^ 4 * w ^ 4 - j * u ^ 4 * v ^ 6 * w ^ 2) - j * u ^ 6 * v ^ 4 * w ^ 2, (((15 * u ^ 2 * v ^ 2 * w ^ 2 - 16 * u ^ 3 * v ^ 3) - 4 * u ^ 3 * w ^ 3) - 4 * v ^ 3 * w ^ 3) + 3 * u ^ 6 + 3 * v ^ 6, (3 * j * u ^ 40 * v ^ 43 * w ^ 20 - 5 * j * u ^ 41 * v ^ 41 * w ^ 21) + 3 * j * u ^ 43 * v ^ 40 * w ^ 20, (((((((((((((((((((((((((((((-(u ^ 6) * v ^ 15 * w ^ 10 - u ^ 6 * v ^ 16 * w ^ 9) + u ^ 6 * v ^ 19 * w ^ 6) - j * u ^ 8 * v ^ 11 * w ^ 12) - j * u ^ 8 * v ^ 12 * w ^ 11) + u ^ 8 * v ^ 14 * w ^ 9 + u ^ 8 * v ^ 15 * w ^ 8 + u ^ 8 * v ^ 19 * w ^ 4 + u ^ 8 * v ^ 23 + u ^ 9 * v ^ 14 * w ^ 8) - u ^ 9 * v ^ 16 * w ^ 6) + j * u ^ 10 * v ^ 10 * w ^ 11 + j * u ^ 10 * v ^ 11 * w ^ 10 + u ^ 10 * v ^ 14 * w ^ 7) - j * u ^ 11 * v ^ 8 * w ^ 12) + j * u ^ 11 * v ^ 10 * w ^ 10) - j * u ^ 11 * v ^ 12 * w ^ 8) + u ^ 11 * v ^ 14 * w ^ 6) - u ^ 11 * v ^ 16 * w ^ 4) - u ^ 11 * v ^ 20) - j * u ^ 12 * v ^ 8 * w ^ 11) - j * u ^ 12 * v ^ 11 * w ^ 8) - u ^ 12 * v ^ 15 * w ^ 4) - u ^ 12 * v ^ 19) + u ^ 14 * v ^ 8 * w ^ 9 + u ^ 14 * v ^ 9 * w ^ 8 + u ^ 14 * v ^ 10 * w ^ 7 + u ^ 14 * v ^ 11 * w ^ 6) - u ^ 15 * v ^ 6 * w ^ 10) + u ^ 15 * v ^ 8 * w ^ 8) - u ^ 15 * v ^ 12 * w ^ 4) - u ^ 15 * v ^ 16) - u ^ 16 * v ^ 6 * w ^ 9) - u ^ 16 * v ^ 9 * w ^ 6) - u ^ 16 * v ^ 11 * w ^ 4) - u ^ 16 * v ^ 15) + u ^ 19 * v ^ 6 * w ^ 6 + u ^ 19 * v ^ 8 * w ^ 4) - u ^ 19 * v ^ 12) - u ^ 20 * v ^ 11) + u ^ 23 * v ^ 8, j * u ^ 10 * v ^ 10 * w ^ 5, 0, ((((((((-2 * u * v ^ 3 * w ^ 3 + u * v ^ 6 + 3 * u ^ 2 * v ^ 2 * w ^ 3 + 6 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 6 * u ^ 3 * v ^ 2 * w ^ 2) - 4 * u ^ 3 * v ^ 3 * w) - 6 * u ^ 3 * v ^ 4) - 6 * u ^ 4 * v ^ 3) - 2 * u ^ 4 * w ^ 3) - 2 * v ^ 4 * w ^ 3) + u ^ 6 * v + u ^ 6 * w + v ^ 6 * w + u ^ 7 + v ^ 7, (-(j ^ 2) * u ^ 10 * v ^ 12 * w ^ 6 - j ^ 2 * u ^ 12 * v ^ 10 * w ^ 6) - j ^ 2 * u ^ 12 * v ^ 12 * w ^ 4, (((((j ^ 2 * u ^ 8 * v ^ 11 * w ^ 6 + j ^ 2 * u ^ 8 * v ^ 13 * w ^ 4) - j ^ 2 * u ^ 9 * v ^ 9 * w ^ 7) - 2 * j ^ 2 * u ^ 9 * v ^ 11 * w ^ 5) + j ^ 2 * u ^ 10 * v ^ 11 * w ^ 4 + j ^ 2 * u ^ 11 * v ^ 8 * w ^ 6) - 2 * j ^ 2 * u ^ 11 * v ^ 9 * w ^ 5) + j ^ 2 * u ^ 11 * v ^ 10 * w ^ 4 + j ^ 2 * u ^ 13 * v ^ 8 * w ^ 4, (-(u ^ 26) * v ^ 28 * w ^ 14 - u ^ 28 * v ^ 26 * w ^ 14) - u ^ 28 * v ^ 28 * w ^ 12, 2 * u ^ 3 * v ^ 7 * w ^ 4 + 2 * u ^ 3 * v ^ 8 * w ^ 3 + j ^ 2 * u ^ 4 * v ^ 4 * w ^ 6 + 2 * j ^ 2 * u ^ 4 * v ^ 5 * w ^ 5 + (-2j - j ^ 2) * u ^ 4 * v ^ 6 * w ^ 4 + 4 * u ^ 4 * v ^ 7 * w ^ 3 + u ^ 4 * v ^ 8 * w ^ 2 + u ^ 4 * v ^ 10 + 2 * j ^ 2 * u ^ 5 * v ^ 4 * w ^ 5 + 2 * j ^ 2 * u ^ 5 * v ^ 5 * w ^ 4 + 2 * u ^ 5 * v ^ 7 * w ^ 2 + 2 * u ^ 5 * v ^ 9 + (-2j - j ^ 2) * u ^ 6 * v ^ 4 * w ^ 4 + 2 * u ^ 6 * v ^ 6 * w ^ 2 + u ^ 6 * v ^ 8 + 2 * u ^ 7 * v ^ 3 * w ^ 4 + 4 * u ^ 7 * v ^ 4 * w ^ 3 + 2 * u ^ 7 * v ^ 5 * w ^ 2 + 2 * u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + u ^ 8 * v ^ 6 + 2 * u ^ 9 * v ^ 5 + u ^ 10 * v ^ 4, u ^ 4 * v ^ 4 * w ^ 2 * d * (u + v + w), 0, (3 * j ^ 2 * u ^ 8 * v ^ 11 * w ^ 4 - 5 * j ^ 2 * u ^ 9 * v ^ 9 * w ^ 5) + 3 * j ^ 2 * u ^ 11 * v ^ 8 * w ^ 4, u ^ 3 * v ^ 7 * w ^ 4 + u ^ 3 * v ^ 8 * w ^ 3 + j ^ 2 * u ^ 4 * v ^ 5 * w ^ 5 + u ^ 4 * v ^ 7 * w ^ 3 + u ^ 4 * v ^ 8 * w ^ 2 + u ^ 4 * v ^ 10 + j ^ 2 * u ^ 5 * v ^ 4 * w ^ 5 + j ^ 2 * u ^ 5 * v ^ 5 * w ^ 4 + u ^ 5 * v ^ 7 * w ^ 2 + u ^ 5 * v ^ 9 + u ^ 7 * v ^ 3 * w ^ 4 + u ^ 7 * v ^ 4 * w ^ 3 + u ^ 7 * v ^ 5 * w ^ 2 + u ^ 7 * v ^ 7 + u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + u ^ 9 * v ^ 5 + u ^ 10 * v ^ 4, (((((j * u ^ 40 * v ^ 43 * w ^ 21 + j * u ^ 40 * v ^ 44 * w ^ 20) - j * u ^ 41 * v ^ 41 * w ^ 22) - 2 * j * u ^ 41 * v ^ 42 * w ^ 21) + j * u ^ 41 * v ^ 43 * w ^ 20) - 2 * j * u ^ 42 * v ^ 41 * w ^ 21) + j * u ^ 43 * v ^ 40 * w ^ 21 + j * u ^ 43 * v ^ 41 * w ^ 20 + j * u ^ 44 * v ^ 40 * w ^ 20, (-j * u ^ 41 * v ^ 42 * w ^ 21 - j * u ^ 42 * v ^ 41 * w ^ 21) - j * u ^ 42 * v ^ 42 * w ^ 20, (((((((((3 * u ^ 2 * v ^ 2 * w ^ 4 - 2 * u ^ 2 * v ^ 3 * w ^ 3) + 6 * u ^ 2 * v ^ 4 * w ^ 2 + u ^ 2 * v ^ 6) - 2 * u ^ 3 * v ^ 2 * w ^ 3) - 4 * u ^ 3 * v ^ 3 * w ^ 2) - 6 * u ^ 3 * v ^ 5) + 6 * u ^ 4 * v ^ 2 * w ^ 2) - 6 * u ^ 5 * v ^ 3) - 2 * u ^ 5 * w ^ 3) - 2 * v ^ 5 * w ^ 3) + u ^ 6 * v ^ 2 + u ^ 6 * w ^ 2 + v ^ 6 * w ^ 2 + u ^ 8 + v ^ 8, 9 * j * u ^ 40 * v ^ 40 * w ^ 21 + 18 * j * u ^ 40 * v ^ 41 * w ^ 20 + 18 * j * u ^ 41 * v ^ 40 * w ^ 20, (((((j ^ 2 * u ^ 8 * v ^ 11 * w ^ 5 + j ^ 2 * u ^ 8 * v ^ 12 * w ^ 4) - j ^ 2 * u ^ 9 * v ^ 9 * w ^ 6) - 2 * j ^ 2 * u ^ 9 * v ^ 10 * w ^ 5) + j ^ 2 * u ^ 9 * v ^ 11 * w ^ 4) - 2 * j ^ 2 * u ^ 10 * v ^ 9 * w ^ 5) + j ^ 2 * u ^ 11 * v ^ 8 * w ^ 5 + j ^ 2 * u ^ 11 * v ^ 9 * w ^ 4 + j ^ 2 * u ^ 12 * v ^ 8 * w ^ 4, (-(j ^ 2) * u ^ 33 * v ^ 34 * w ^ 17 - j ^ 2 * u ^ 34 * v ^ 33 * w ^ 17) - j ^ 2 * u ^ 34 * v ^ 34 * w ^ 16, u ^ 6 * v ^ 6 * w ^ 3, (((((j * u ^ 40 * v ^ 43 * w ^ 22 + j * u ^ 40 * v ^ 45 * w ^ 20) - j * u ^ 41 * v ^ 41 * w ^ 23) - 2 * j * u ^ 41 * v ^ 43 * w ^ 21) + j * u ^ 42 * v ^ 43 * w ^ 20 + j * u ^ 43 * v ^ 40 * w ^ 22) - 2 * j * u ^ 43 * v ^ 41 * w ^ 21) + j * u ^ 43 * v ^ 42 * w ^ 20 + j * u ^ 45 * v ^ 40 * w ^ 20, j ^ 2 * u ^ 8 * v ^ 8 * w ^ 8 + 8 * j ^ 2 * u ^ 8 * v ^ 10 * w ^ 6 + 7 * j ^ 2 * u ^ 8 * v ^ 12 * w ^ 4 + 8 * j ^ 2 * u ^ 10 * v ^ 8 * w ^ 6 + 14 * j ^ 2 * u ^ 10 * v ^ 10 * w ^ 4 + 7 * j ^ 2 * u ^ 12 * v ^ 8 * w ^ 4, 9 * j ^ 2 * u ^ 8 * v ^ 8 * w ^ 6 + 18 * j ^ 2 * u ^ 8 * v ^ 10 * w ^ 4 + 18 * j ^ 2 * u ^ 10 * v ^ 8 * w ^ 4, (-(u ^ 25) * v ^ 26 * w ^ 13 - u ^ 26 * v ^ 25 * w ^ 13) - u ^ 26 * v ^ 26 * w ^ 12, j * u ^ 40 * v ^ 40 * w ^ 23 + 4 * j * u ^ 40 * v ^ 41 * w ^ 22 + 4 * j * u ^ 40 * v ^ 42 * w ^ 21 + 7 * j * u ^ 40 * v ^ 43 * w ^ 20 + 4 * j * u ^ 41 * v ^ 40 * w ^ 22 + 7 * j * u ^ 41 * v ^ 42 * w ^ 20 + 4 * j * u ^ 42 * v ^ 40 * w ^ 21 + 7 * j * u ^ 42 * v ^ 41 * w ^ 20 + 7 * j * u ^ 43 * v ^ 40 * w ^ 20, 2 * u ^ 3 * v ^ 6 * w ^ 4 + 4 * u ^ 3 * v ^ 7 * w ^ 3 + 3 * j ^ 2 * u ^ 4 * v ^ 4 * w ^ 5 + 3 * j ^ 2 * u ^ 4 * v ^ 5 * w ^ 4 + 3 * u ^ 4 * v ^ 6 * w ^ 3 + 3 * u ^ 4 * v ^ 7 * w ^ 2 + 2 * u ^ 4 * v ^ 9 + 3 * j ^ 2 * u ^ 5 * v ^ 4 * w ^ 4 + 2 * u ^ 5 * v ^ 6 * w ^ 2 + u ^ 5 * v ^ 8 + 2 * u ^ 6 * v ^ 3 * w ^ 4 + 3 * u ^ 6 * v ^ 4 * w ^ 3 + 2 * u ^ 6 * v ^ 5 * w ^ 2 + u ^ 6 * v ^ 7 + 4 * u ^ 7 * v ^ 3 * w ^ 3 + 3 * u ^ 7 * v ^ 4 * w ^ 2 + u ^ 7 * v ^ 6 + u ^ 8 * v ^ 5 + 2 * u ^ 9 * v ^ 4, j ^ 2 * d * u ^ 12 * v ^ 12 * w ^ 6 * (u + v + w), (-(j ^ 2) * u ^ 34 * v ^ 36 * w ^ 18 - j ^ 2 * u ^ 36 * v ^ 34 * w ^ 18) - j ^ 2 * u ^ 36 * v ^ 36 * w ^ 16, -3 * j * u ^ 4 * v ^ 4 * w ^ 2, j ^ 2 * u ^ 8 * v ^ 8 * w ^ 7 + 4 * j ^ 2 * u ^ 8 * v ^ 9 * w ^ 6 + 4 * j ^ 2 * u ^ 8 * v ^ 10 * w ^ 5 + 7 * j ^ 2 * u ^ 8 * v ^ 11 * w ^ 4 + 4 * j ^ 2 * u ^ 9 * v ^ 8 * w ^ 6 + 7 * j ^ 2 * u ^ 9 * v ^ 10 * w ^ 4 + 4 * j ^ 2 * u ^ 10 * v ^ 8 * w ^ 5 + 7 * j ^ 2 * u ^ 10 * v ^ 9 * w ^ 4 + 7 * j ^ 2 * u ^ 11 * v ^ 8 * w ^ 4, -3 * j ^ 2 * u ^ 20 * v ^ 20 * w ^ 10, (((((j * u ^ 16 * v ^ 19 * w ^ 9 + j * u ^ 16 * v ^ 20 * w ^ 8) - j * u ^ 17 * v ^ 17 * w ^ 10) - 2 * j * u ^ 17 * v ^ 18 * w ^ 9) + j * u ^ 17 * v ^ 19 * w ^ 8) - 2 * j * u ^ 18 * v ^ 17 * w ^ 9) + j * u ^ 19 * v ^ 16 * w ^ 9 + j * u ^ 19 * v ^ 17 * w ^ 8 + j * u ^ 20 * v ^ 16 * w ^ 8, (-j * u ^ 17 * v ^ 18 * w ^ 9 - j * u ^ 18 * v ^ 17 * w ^ 9) - j * u ^ 18 * v ^ 18 * w ^ 8, 8 * u ^ 3 * v ^ 6 * w ^ 3 + 9 * j ^ 2 * u ^ 4 * v ^ 4 * w ^ 4 + 6 * u ^ 4 * v ^ 6 * w ^ 2 + 3 * u ^ 4 * v ^ 8 + 8 * u ^ 6 * v ^ 3 * w ^ 3 + 6 * u ^ 6 * v ^ 4 * w ^ 2 + 2 * u ^ 6 * v ^ 6 + 3 * u ^ 8 * v ^ 4, (((((((((-2 * j ^ 2 * u ^ 8 * v ^ 12 * w ^ 7 + j ^ 2 * u ^ 8 * v ^ 14 * w ^ 5 + j ^ 2 * u ^ 8 * v ^ 15 * w ^ 4) - 2 * j ^ 2 * u ^ 9 * v ^ 11 * w ^ 7) + j ^ 2 * u ^ 9 * v ^ 14 * w ^ 4 + 3 * j ^ 2 * u ^ 10 * v ^ 10 * w ^ 7 + 6 * j ^ 2 * u ^ 10 * v ^ 11 * w ^ 6) - 2 * j ^ 2 * u ^ 11 * v ^ 9 * w ^ 7) + 6 * j ^ 2 * u ^ 11 * v ^ 10 * w ^ 6) - 4 * j ^ 2 * u ^ 11 * v ^ 11 * w ^ 5) - 6 * j ^ 2 * u ^ 11 * v ^ 12 * w ^ 4) - 2 * j ^ 2 * u ^ 12 * v ^ 8 * w ^ 7) - 6 * j ^ 2 * u ^ 12 * v ^ 11 * w ^ 4) + j ^ 2 * u ^ 14 * v ^ 8 * w ^ 5 + j ^ 2 * u ^ 14 * v ^ 9 * w ^ 4 + j ^ 2 * u ^ 15 * v ^ 8 * w ^ 4, 0, ((((((((((((((((-j * u ^ 16 * v ^ 20 * w ^ 12 - j * u ^ 16 * v ^ 21 * w ^ 11) + j * u ^ 16 * v ^ 23 * w ^ 9 + j * u ^ 16 * v ^ 24 * w ^ 8) - j * u ^ 17 * v ^ 19 * w ^ 12) - j * u ^ 17 * v ^ 20 * w ^ 11) + j * u ^ 17 * v ^ 23 * w ^ 8 + j * u ^ 18 * v ^ 18 * w ^ 12 + 3 * j * u ^ 18 * v ^ 19 * w ^ 11 + 2 * j * u ^ 18 * v ^ 20 * w ^ 10) - j * u ^ 19 * v ^ 17 * w ^ 12) + 3 * j * u ^ 19 * v ^ 18 * w ^ 11 + 4 * j * u ^ 19 * v ^ 19 * w ^ 10) - 2 * j * u ^ 19 * v ^ 20 * w ^ 9) - 3 * j * u ^ 19 * v ^ 21 * w ^ 8) - j * u ^ 20 * v ^ 16 * w ^ 12) - j * u ^ 20 * v ^ 17 * w ^ 11) + 2 * j * u ^ 20 * v ^ 18 * w ^ 10) - 2 * j * u ^ 20 * v ^ 19 * w ^ 9) - 6 * j * u ^ 20 * v ^ 20 * w ^ 8) - j * u ^ 21 * v ^ 16 * w ^ 11) - 3 * j * u ^ 21 * v ^ 19 * w ^ 8) + j * u ^ 23 * v ^ 16 * w ^ 9 + j * u ^ 23 * v ^ 17 * w ^ 8 + j * u ^ 24 * v ^ 16 * w ^ 8, 8 * u ^ 6 * v ^ 12 * w ^ 6 + 9 * j * u ^ 8 * v ^ 8 * w ^ 8 + 6 * u ^ 8 * v ^ 12 * w ^ 4 + 3 * u ^ 8 * v ^ 16 + 8 * u ^ 12 * v ^ 6 * w ^ 6 + 6 * u ^ 12 * v ^ 8 * w ^ 4 + 2 * u ^ 12 * v ^ 12 + 3 * u ^ 16 * v ^ 8, u ^ 24 * v ^ 24 * w ^ 15 + 4 * u ^ 24 * v ^ 25 * w ^ 14 + 4 * u ^ 24 * v ^ 26 * w ^ 13 + 7 * u ^ 24 * v ^ 27 * w ^ 12 + 4 * u ^ 25 * v ^ 24 * w ^ 14 + 7 * u ^ 25 * v ^ 26 * w ^ 12 + 4 * u ^ 26 * v ^ 24 * w ^ 13 + 7 * u ^ 26 * v ^ 25 * w ^ 12 + 7 * u ^ 27 * v ^ 24 * w ^ 12, j ^ 2 * u ^ 8 * v ^ 10 * w ^ 6 + j ^ 2 * u ^ 8 * v ^ 11 * w ^ 5 + j ^ 2 * u ^ 8 * v ^ 12 * w ^ 4 + 2 * j ^ 2 * u ^ 9 * v ^ 9 * w ^ 6 + j ^ 2 * u ^ 9 * v ^ 10 * w ^ 5 + 3 * j ^ 2 * u ^ 9 * v ^ 11 * w ^ 4 + j ^ 2 * u ^ 10 * v ^ 8 * w ^ 6 + j ^ 2 * u ^ 10 * v ^ 9 * w ^ 5 + 2 * j ^ 2 * u ^ 10 * v ^ 10 * w ^ 4 + j ^ 2 * u ^ 11 * v ^ 8 * w ^ 5 + 3 * j ^ 2 * u ^ 11 * v ^ 9 * w ^ 4 + j ^ 2 * u ^ 12 * v ^ 8 * w ^ 4, (-j * u ^ 18 * v ^ 20 * w ^ 10 - j * u ^ 20 * v ^ 18 * w ^ 10) - j * u ^ 20 * v ^ 20 * w ^ 8, (((((((((-2 * j ^ 2 * u ^ 8 * v ^ 13 * w ^ 7 + j ^ 2 * u ^ 8 * v ^ 14 * w ^ 6 + j ^ 2 * u ^ 8 * v ^ 16 * w ^ 4 + 3 * j ^ 2 * u ^ 10 * v ^ 10 * w ^ 8) - 2 * j ^ 2 * u ^ 10 * v ^ 11 * w ^ 7) + 6 * j ^ 2 * u ^ 10 * v ^ 12 * w ^ 6 + j ^ 2 * u ^ 10 * v ^ 14 * w ^ 4) - 2 * j ^ 2 * u ^ 11 * v ^ 10 * w ^ 7) - 4 * j ^ 2 * u ^ 11 * v ^ 11 * w ^ 6) - 6 * j ^ 2 * u ^ 11 * v ^ 13 * w ^ 4) + 6 * j ^ 2 * u ^ 12 * v ^ 10 * w ^ 6) - 2 * j ^ 2 * u ^ 13 * v ^ 8 * w ^ 7) - 6 * j ^ 2 * u ^ 13 * v ^ 11 * w ^ 4) + j ^ 2 * u ^ 14 * v ^ 8 * w ^ 6 + j ^ 2 * u ^ 14 * v ^ 10 * w ^ 4 + j ^ 2 * u ^ 16 * v ^ 8 * w ^ 4, (((((u ^ 24 * v ^ 27 * w ^ 13 + u ^ 24 * v ^ 28 * w ^ 12) - u ^ 25 * v ^ 25 * w ^ 14) - 2 * u ^ 25 * v ^ 26 * w ^ 13) + u ^ 25 * v ^ 27 * w ^ 12) - 2 * u ^ 26 * v ^ 25 * w ^ 13) + u ^ 27 * v ^ 24 * w ^ 13 + u ^ 27 * v ^ 25 * w ^ 12 + u ^ 28 * v ^ 24 * w ^ 12, (3 * j * u ^ 16 * v ^ 19 * w ^ 8 - 5 * j * u ^ 17 * v ^ 17 * w ^ 9) + 3 * j * u ^ 19 * v ^ 16 * w ^ 8, (((((j ^ 2 * u ^ 32 * v ^ 35 * w ^ 18 + j ^ 2 * u ^ 32 * v ^ 37 * w ^ 16) - j ^ 2 * u ^ 33 * v ^ 33 * w ^ 19) - 2 * j ^ 2 * u ^ 33 * v ^ 35 * w ^ 17) + j ^ 2 * u ^ 34 * v ^ 35 * w ^ 16 + j ^ 2 * u ^ 35 * v ^ 32 * w ^ 18) - 2 * j ^ 2 * u ^ 35 * v ^ 33 * w ^ 17) + j ^ 2 * u ^ 35 * v ^ 34 * w ^ 16 + j ^ 2 * u ^ 37 * v ^ 32 * w ^ 16, (3 * j ^ 2 * u ^ 32 * v ^ 35 * w ^ 16 - 5 * j ^ 2 * u ^ 33 * v ^ 33 * w ^ 17) + 3 * j ^ 2 * u ^ 35 * v ^ 32 * w ^ 16, (((((u ^ 24 * v ^ 27 * w ^ 14 + u ^ 24 * v ^ 29 * w ^ 12) - u ^ 25 * v ^ 25 * w ^ 15) - 2 * u ^ 25 * v ^ 27 * w ^ 13) + u ^ 26 * v ^ 27 * w ^ 12 + u ^ 27 * v ^ 24 * w ^ 14) - 2 * u ^ 27 * v ^ 25 * w ^ 13) + u ^ 27 * v ^ 26 * w ^ 12 + u ^ 29 * v ^ 24 * w ^ 12, ((((-3 * u ^ 10 * v ^ 10 * w ^ 6 + 2 * j ^ 2 * u ^ 10 * v ^ 11 * w ^ 5) - j ^ 2 * u ^ 10 * v ^ 12 * w ^ 4) + 2 * j ^ 2 * u ^ 11 * v ^ 10 * w ^ 5) - 2 * j ^ 2 * u ^ 11 * v ^ 11 * w ^ 4) - j ^ 2 * u ^ 12 * v ^ 10 * w ^ 4, (((((((((-2 * j * u ^ 16 * v ^ 20 * w ^ 11 + j * u ^ 16 * v ^ 22 * w ^ 9 + j * u ^ 16 * v ^ 23 * w ^ 8) - 2 * j * u ^ 17 * v ^ 19 * w ^ 11) + j * u ^ 17 * v ^ 22 * w ^ 8 + 3 * j * u ^ 18 * v ^ 18 * w ^ 11 + 6 * j * u ^ 18 * v ^ 19 * w ^ 10) - 2 * j * u ^ 19 * v ^ 17 * w ^ 11) + 6 * j * u ^ 19 * v ^ 18 * w ^ 10) - 4 * j * u ^ 19 * v ^ 19 * w ^ 9) - 6 * j * u ^ 19 * v ^ 20 * w ^ 8) - 2 * j * u ^ 20 * v ^ 16 * w ^ 11) - 6 * j * u ^ 20 * v ^ 19 * w ^ 8) + j * u ^ 22 * v ^ 16 * w ^ 9 + j * u ^ 22 * v ^ 17 * w ^ 8 + j * u ^ 23 * v ^ 16 * w ^ 8, (((-4 * j ^ 2 * u ^ 8 * v ^ 11 * w ^ 7 + 3 * j ^ 2 * u ^ 8 * v ^ 14 * w ^ 4 + 15 * j ^ 2 * u ^ 10 * v ^ 10 * w ^ 6) - 4 * j ^ 2 * u ^ 11 * v ^ 8 * w ^ 7) - 16 * j ^ 2 * u ^ 11 * v ^ 11 * w ^ 4) + 3 * j ^ 2 * u ^ 14 * v ^ 8 * w ^ 4, 2 * j ^ 2 * u ^ 8 * v ^ 10 * w ^ 5 + j ^ 2 * u ^ 8 * v ^ 11 * w ^ 4 + 4 * j ^ 2 * u ^ 9 * v ^ 9 * w ^ 5 + 4 * j ^ 2 * u ^ 9 * v ^ 10 * w ^ 4 + 2 * j ^ 2 * u ^ 10 * v ^ 8 * w ^ 5 + 4 * j ^ 2 * u ^ 10 * v ^ 9 * w ^ 4 + j ^ 2 * u ^ 11 * v ^ 8 * w ^ 4, 2 * j * u ^ 16 * v ^ 17 * w ^ 9 + 3 * j * u ^ 16 * v ^ 18 * w ^ 8 + 2 * j * u ^ 17 * v ^ 16 * w ^ 9 + 8 * j * u ^ 17 * v ^ 17 * w ^ 8 + 3 * j * u ^ 18 * v ^ 16 * w ^ 8, -3 * u ^ 12 * v ^ 12 * w ^ 6, 9 * j ^ 2 * u ^ 32 * v ^ 32 * w ^ 18 + 18 * j ^ 2 * u ^ 32 * v ^ 34 * w ^ 16 + 18 * j ^ 2 * u ^ 34 * v ^ 32 * w ^ 16, 2 * j ^ 2 * u ^ 8 * v ^ 9 * w ^ 5 + 3 * j ^ 2 * u ^ 8 * v ^ 10 * w ^ 4 + 2 * j ^ 2 * u ^ 9 * v ^ 8 * w ^ 5 + 8 * j ^ 2 * u ^ 9 * v ^ 9 * w ^ 4 + 3 * j ^ 2 * u ^ 10 * v ^ 8 * w ^ 4, (((-4 * j * u ^ 16 * v ^ 19 * w ^ 11 + 3 * j * u ^ 16 * v ^ 22 * w ^ 8 + 15 * j * u ^ 18 * v ^ 18 * w ^ 10) - 4 * j * u ^ 19 * v ^ 16 * w ^ 11) - 16 * j * u ^ 19 * v ^ 19 * w ^ 8) + 3 * j * u ^ 22 * v ^ 16 * w ^ 8, j ^ 2 * u ^ 8 * v ^ 8 * w ^ 6 + 8 * j ^ 2 * u ^ 8 * v ^ 9 * w ^ 5 + 7 * j ^ 2 * u ^ 8 * v ^ 10 * w ^ 4 + 8 * j ^ 2 * u ^ 9 * v ^ 8 * w ^ 5 + 14 * j ^ 2 * u ^ 9 * v ^ 9 * w ^ 4 + 7 * j ^ 2 * u ^ 10 * v ^ 8 * w ^ 4, 2 * j * u ^ 16 * v ^ 18 * w ^ 9 + j * u ^ 16 * v ^ 19 * w ^ 8 + 4 * j * u ^ 17 * v ^ 17 * w ^ 9 + 4 * j * u ^ 17 * v ^ 18 * w ^ 8 + 2 * j * u ^ 18 * v ^ 16 * w ^ 9 + 4 * j * u ^ 18 * v ^ 17 * w ^ 8 + j * u ^ 19 * v ^ 16 * w ^ 8, (3 * u ^ 24 * v ^ 27 * w ^ 12 - 5 * u ^ 25 * v ^ 25 * w ^ 13) + 3 * u ^ 27 * v ^ 24 * w ^ 12, 9 * j * u ^ 40 * v ^ 40 * w ^ 22 + 18 * j * u ^ 40 * v ^ 42 * w ^ 20 + 18 * j * u ^ 42 * v ^ 40 * w ^ 20, j * u ^ 16 * v ^ 16 * w ^ 10 + 8 * j * u ^ 16 * v ^ 17 * w ^ 9 + 7 * j * u ^ 16 * v ^ 18 * w ^ 8 + 8 * j * u ^ 17 * v ^ 16 * w ^ 9 + 14 * j * u ^ 17 * v ^ 17 * w ^ 8 + 7 * j * u ^ 18 * v ^ 16 * w ^ 8, 9 * j ^ 2 * u ^ 8 * v ^ 8 * w ^ 5 + 18 * j ^ 2 * u ^ 8 * v ^ 9 * w ^ 4 + 18 * j ^ 2 * u ^ 9 * v ^ 8 * w ^ 4, 45 * j ^ 2 * u ^ 8 * v ^ 8 * w ^ 4, u ^ 24 * v ^ 24 * w ^ 14 + 8 * u ^ 24 * v ^ 25 * w ^ 13 + 7 * u ^ 24 * v ^ 26 * w ^ 12 + 8 * u ^ 25 * v ^ 24 * w ^ 13 + 14 * u ^ 25 * v ^ 25 * w ^ 12 + 7 * u ^ 26 * v ^ 24 * w ^ 12, 9 * u ^ 24 * v ^ 24 * w ^ 14 + 18 * u ^ 24 * v ^ 26 * w ^ 12 + 18 * u ^ 26 * v ^ 24 * w ^ 12, 9 * j * u ^ 16 * v ^ 16 * w ^ 9 + 18 * j * u ^ 16 * v ^ 17 * w ^ 8 + 18 * j * u ^ 17 * v ^ 16 * w ^ 8, 9 * u ^ 24 * v ^ 24 * w ^ 13 + 18 * u ^ 24 * v ^ 25 * w ^ 12 + 18 * u ^ 25 * v ^ 24 * w ^ 12, 45 * j * u ^ 40 * v ^ 40 * w ^ 20, 45 * u ^ 24 * v ^ 24 * w ^ 12, 45 * j * u ^ 16 * v ^ 16 * w ^ 8, 45 * j ^ 2 * u ^ 32 * v ^ 32 * w ^ 16]
            end
        f60a = function (u, v, w)
                return [60, 18u + 21v + 21w, 4 * u * v + 4 * u * w + 7 * v * w + 2 * u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2, 14 * u * v + 14 * u * w + 12 * v * w + 4 * u ^ 2 + 8 * v ^ 2 + 8 * w ^ 2, 18 * u ^ 2 + 21 * v ^ 2 + 21 * w ^ 2, -8 * u * v * w + 2 * u ^ 3 + 2 * v ^ 3 + 2 * w ^ 3, 5 * u * v * w + 3 * u * v ^ 2 + 3 * u * w ^ 2 + 2 * v * w ^ 2 + 2 * u ^ 2 * v + 2 * u ^ 2 * w + 2 * v ^ 2 * w + v ^ 3 + w ^ 3, u * v * w, 7 * u * v ^ 2 + 7 * u * w ^ 2 + 6 * v * w ^ 2 + 7 * u ^ 2 * v + 7 * u ^ 2 * w + 6 * v ^ 2 * w + 4 * u ^ 3 + 8 * v ^ 3 + 8 * w ^ 3, (-u * v * w ^ 2 - u * v ^ 2 * w) - v ^ 2 * w ^ 2, (((((((((((((((((((((((((((((u ^ 2 * v ^ 4 * w ^ 13 - u ^ 2 * v ^ 7 * w ^ 10) - u ^ 2 * v ^ 8 * w ^ 9) - u ^ 2 * v ^ 9 * w ^ 8) - u ^ 2 * v ^ 10 * w ^ 7) + u ^ 2 * v ^ 13 * w ^ 4 + u ^ 3 * v ^ 3 * w ^ 13) - u ^ 3 * v ^ 6 * w ^ 10) - u ^ 3 * v ^ 7 * w ^ 9) - u ^ 3 * v ^ 9 * w ^ 7) - u ^ 3 * v ^ 10 * w ^ 6) + u ^ 3 * v ^ 13 * w ^ 3 + u ^ 4 * v ^ 6 * w ^ 9 + 2 * u ^ 4 * v ^ 7 * w ^ 8 + 2 * u ^ 4 * v ^ 8 * w ^ 7 + u ^ 4 * v ^ 9 * w ^ 6 + u ^ 5 * v ^ 5 * w ^ 9 + 2 * u ^ 5 * v ^ 6 * w ^ 8 + 2 * u ^ 5 * v ^ 8 * w ^ 6 + u ^ 5 * v ^ 9 * w ^ 5) - u ^ 6 * v ^ 3 * w ^ 10) + u ^ 6 * v ^ 5 * w ^ 8) - u ^ 6 * v ^ 6 * w ^ 7) - u ^ 6 * v ^ 7 * w ^ 6) + u ^ 6 * v ^ 8 * w ^ 5) - u ^ 6 * v ^ 10 * w ^ 3) - u ^ 7 * v ^ 3 * w ^ 9) + u ^ 7 * v ^ 4 * w ^ 8) - u ^ 7 * v ^ 6 * w ^ 6) + u ^ 7 * v ^ 8 * w ^ 4) - u ^ 7 * v ^ 9 * w ^ 3) + 2 * u ^ 8 * v ^ 4 * w ^ 7 + u ^ 8 * v ^ 5 * w ^ 6 + u ^ 8 * v ^ 6 * w ^ 5 + 2 * u ^ 8 * v ^ 7 * w ^ 4) - u ^ 9 * v ^ 2 * w ^ 8) + u ^ 9 * v ^ 4 * w ^ 6 + u ^ 9 * v ^ 6 * w ^ 4) - u ^ 9 * v ^ 8 * w ^ 2) - v ^ 9 * w ^ 10) - u ^ 10 * v ^ 2 * w ^ 7) - u ^ 10 * v ^ 7 * w ^ 2) - v ^ 10 * w ^ 9) + u ^ 13 * v ^ 2 * w ^ 4 + u ^ 13 * v ^ 4 * w ^ 2, u * v * w ^ 2 + u * v ^ 2 * w + 2 * u * v ^ 3 + 2 * u * w ^ 3 + 2 * v * w ^ 3 + 3 * u ^ 2 * v * w + 2 * u ^ 2 * v ^ 2 + 2 * u ^ 2 * w ^ 2 + u ^ 3 * v + u ^ 3 * w + 2 * v ^ 3 * w + v ^ 4 + w ^ 4, 0, 14 * u ^ 2 * v ^ 2 + 14 * u ^ 2 * w ^ 2 + 12 * v ^ 2 * w ^ 2 + 4 * u ^ 4 + 8 * v ^ 4 + 8 * w ^ 4, (((((((8 * u ^ 2 * v ^ 2 * w ^ 3 + 8 * u ^ 2 * v ^ 3 * w ^ 2 + 8 * u ^ 3 * v ^ 2 * w ^ 2) - 4 * u ^ 3 * v ^ 4) - 4 * u ^ 3 * w ^ 4) - 7 * v ^ 3 * w ^ 4) - 4 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - 7 * v ^ 4 * w ^ 3) + 2 * u ^ 7 + 2 * v ^ 7 + 2 * w ^ 7, (((-3 * u * v * w ^ 2 - 3 * u * v ^ 2 * w) + u * v ^ 3 + u * w ^ 3) - 2 * u ^ 2 * v * w) + u ^ 3 * v + u ^ 3 * w + v ^ 4 + w ^ 4, (((((((((-4 * u * v * w ^ 3 + 2 * u * v ^ 2 * w ^ 2) - 4 * u * v ^ 3 * w) - u * v ^ 4) - u * w ^ 4) - 2 * v * w ^ 4) + 3 * u ^ 2 * v * w ^ 2 + 3 * u ^ 2 * v ^ 2 * w + 2 * u ^ 2 * v ^ 3 + 2 * u ^ 2 * w ^ 3 + v ^ 2 * w ^ 3) - 2 * u ^ 3 * v * w) + v ^ 3 * w ^ 2) - 2 * v ^ 4 * w) + v ^ 5 + w ^ 5, 0, (-(u ^ 2) * v ^ 2 * w ^ 4 - u ^ 2 * v ^ 4 * w ^ 2) - v ^ 4 * w ^ 4, 0, ((((u ^ 4 * v ^ 8 * w ^ 14 + u ^ 4 * v ^ 9 * w ^ 13 + u ^ 4 * v ^ 13 * w ^ 9 + u ^ 4 * v ^ 14 * w ^ 8 + u ^ 6 * v ^ 6 * w ^ 14 + u ^ 6 * v ^ 7 * w ^ 13 + u ^ 6 * v ^ 13 * w ^ 7 + u ^ 6 * v ^ 14 * w ^ 6 + u ^ 7 * v ^ 6 * w ^ 13 + u ^ 7 * v ^ 13 * w ^ 6) - u ^ 8 * v ^ 9 * w ^ 9) - u ^ 9 * v ^ 8 * w ^ 9) - u ^ 9 * v ^ 9 * w ^ 8) + u ^ 13 * v ^ 4 * w ^ 9 + u ^ 13 * v ^ 9 * w ^ 4 + v ^ 13 * w ^ 13 + u ^ 14 * v ^ 4 * w ^ 8 + u ^ 14 * v ^ 8 * w ^ 4, (((-3 * u * v * w ^ 3 - 3 * u * v ^ 3 * w) + u ^ 2 * v ^ 3 + u ^ 2 * w ^ 3) - 2 * u ^ 3 * v * w) + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2 + v ^ 5 + w ^ 5, u ^ 6 * v ^ 9 * w ^ 9 + u ^ 7 * v ^ 8 * w ^ 9 + u ^ 7 * v ^ 9 * w ^ 8, u ^ 5 * v ^ 5 * w ^ 5, u ^ 30 * v ^ 39 * w ^ 39 + u ^ 32 * v ^ 37 * w ^ 39 + u ^ 32 * v ^ 39 * w ^ 37, (((((((((((((u ^ 2 * v ^ 4 * w ^ 12 - 2 * u ^ 2 * v ^ 7 * w ^ 9) - 2 * u ^ 2 * v ^ 9 * w ^ 7) + u ^ 2 * v ^ 12 * w ^ 4 + u ^ 3 * v ^ 3 * w ^ 12) - 2 * u ^ 3 * v ^ 6 * w ^ 9) - 2 * u ^ 3 * v ^ 9 * w ^ 6) + u ^ 3 * v ^ 12 * w ^ 3 + 3 * u ^ 4 * v ^ 6 * w ^ 8 + 2 * u ^ 4 * v ^ 7 * w ^ 7 + 3 * u ^ 4 * v ^ 8 * w ^ 6 + 3 * u ^ 5 * v ^ 5 * w ^ 8 + 3 * u ^ 5 * v ^ 8 * w ^ 5) - 2 * u ^ 6 * v ^ 3 * w ^ 9) - 3 * u ^ 6 * v ^ 6 * w ^ 6) - 2 * u ^ 6 * v ^ 9 * w ^ 3) + 2 * u ^ 7 * v ^ 4 * w ^ 7 + 2 * u ^ 7 * v ^ 7 * w ^ 4 + 3 * u ^ 8 * v ^ 4 * w ^ 6 + 3 * u ^ 8 * v ^ 6 * w ^ 4) - 2 * u ^ 9 * v ^ 2 * w ^ 7) - 2 * u ^ 9 * v ^ 7 * w ^ 2) - 2 * v ^ 9 * w ^ 9) + u ^ 12 * v ^ 2 * w ^ 4 + u ^ 12 * v ^ 4 * w ^ 2, (2 * u * v ^ 2 * w ^ 3 + 2 * u * v ^ 3 * w ^ 2 + 3 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 3 * v * w ^ 2 + 2 * u ^ 3 * v ^ 2 * w) - 2 * v ^ 3 * w ^ 3, 0, (((((((((((((((((-u * v ^ 2 * w ^ 3 - u * v ^ 3 * w ^ 2) - 2 * u * v ^ 5) - 2 * u * w ^ 5) - 2 * v * w ^ 5) - 3 * u ^ 2 * v * w ^ 3) + 8 * u ^ 2 * v ^ 2 * w ^ 2) - 3 * u ^ 2 * v ^ 3 * w) + 4 * u ^ 2 * v ^ 4 + 4 * u ^ 2 * w ^ 4 + 3 * v ^ 2 * w ^ 4) - u ^ 3 * v * w ^ 2) - u ^ 3 * v ^ 2 * w) - 3 * u ^ 3 * v ^ 3) - 3 * u ^ 3 * w ^ 3) - 4 * v ^ 3 * w ^ 3) + 3 * u ^ 4 * v ^ 2 + 3 * u ^ 4 * w ^ 2 + 3 * v ^ 4 * w ^ 2) - u ^ 5 * v) - u ^ 5 * w) - 2 * v ^ 5 * w) + v ^ 6 + w ^ 6, 0, (((24 * u ^ 2 * v ^ 2 * w ^ 2 - 8 * u ^ 3 * v ^ 3) - 8 * u ^ 3 * w ^ 3) - 14 * v ^ 3 * w ^ 3) + 2 * u ^ 6 + 2 * v ^ 6 + 2 * w ^ 6, ((-2 * u ^ 30 * v ^ 35 * w ^ 38 - 2 * u ^ 30 * v ^ 38 * w ^ 35) + 8 * u ^ 31 * v ^ 36 * w ^ 36) - 2 * u ^ 33 * v ^ 35 * w ^ 35, ((((((((((((((((((((((((((u ^ 4 * v ^ 8 * w ^ 19 - u ^ 4 * v ^ 11 * w ^ 16) - u ^ 4 * v ^ 12 * w ^ 15) - u ^ 4 * v ^ 15 * w ^ 12) - u ^ 4 * v ^ 16 * w ^ 11) + u ^ 4 * v ^ 19 * w ^ 8 + u ^ 6 * v ^ 6 * w ^ 19) - u ^ 6 * v ^ 9 * w ^ 16) + u ^ 6 * v ^ 11 * w ^ 14 + u ^ 6 * v ^ 14 * w ^ 11) - u ^ 6 * v ^ 16 * w ^ 9) + u ^ 6 * v ^ 19 * w ^ 6 + u ^ 7 * v ^ 10 * w ^ 14 + u ^ 7 * v ^ 14 * w ^ 10 + u ^ 8 * v ^ 8 * w ^ 15 + u ^ 8 * v ^ 9 * w ^ 14 + u ^ 8 * v ^ 11 * w ^ 12 + u ^ 8 * v ^ 12 * w ^ 11 + u ^ 8 * v ^ 14 * w ^ 9 + u ^ 8 * v ^ 15 * w ^ 8) - u ^ 9 * v ^ 6 * w ^ 16) + u ^ 9 * v ^ 8 * w ^ 14 + u ^ 9 * v ^ 14 * w ^ 8) - u ^ 9 * v ^ 16 * w ^ 6) - u ^ 10 * v ^ 6 * w ^ 15) - u ^ 10 * v ^ 10 * w ^ 11) - u ^ 10 * v ^ 11 * w ^ 10) - u ^ 10 * v ^ 15 * w ^ 6) + u ^ 11 * v ^ 8 * w ^ 12) - u ^ 11 * v ^ 10 * w ^ 10) + u ^ 11 * v ^ 12 * w ^ 8 + u ^ 12 * v ^ 8 * w ^ 11 + u ^ 12 * v ^ 11 * w ^ 8 + u ^ 14 * v ^ 6 * w ^ 11 + u ^ 14 * v ^ 7 * w ^ 10 + u ^ 14 * v ^ 10 * w ^ 7 + u ^ 14 * v ^ 11 * w ^ 6) - u ^ 15 * v ^ 4 * w ^ 12) + u ^ 15 * v ^ 6 * w ^ 10 + u ^ 15 * v ^ 10 * w ^ 6) - u ^ 15 * v ^ 12 * w ^ 4) - v ^ 15 * w ^ 16) - u ^ 16 * v ^ 4 * w ^ 11) - u ^ 16 * v ^ 11 * w ^ 4) - v ^ 16 * w ^ 15) + u ^ 19 * v ^ 4 * w ^ 8 + u ^ 19 * v ^ 8 * w ^ 4, 0, 0, ((((((((((-6 * u * v ^ 3 * w ^ 3 + u * v ^ 6 + u * w ^ 6 + 9 * u ^ 2 * v ^ 2 * w ^ 3 + 9 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 6 * u ^ 3 * v ^ 2 * w ^ 2) - 2 * u ^ 3 * v ^ 3 * w) - 4 * u ^ 3 * v ^ 4) - 4 * u ^ 3 * w ^ 4) - 4 * v ^ 3 * w ^ 4) - 2 * u ^ 4 * v ^ 3) - 2 * u ^ 4 * w ^ 3) - 4 * v ^ 4 * w ^ 3) + u ^ 6 * v + u ^ 6 * w + v ^ 7 + w ^ 7, u ^ 6 * v ^ 11 * w ^ 11 + u ^ 8 * v ^ 9 * w ^ 11 + u ^ 8 * v ^ 11 * w ^ 9, ((((((-(u ^ 6) * v ^ 7 * w ^ 12 - u ^ 6 * v ^ 12 * w ^ 7) + 3 * u ^ 7 * v ^ 8 * w ^ 10 + 3 * u ^ 7 * v ^ 10 * w ^ 8) - u ^ 8 * v ^ 7 * w ^ 10) - u ^ 8 * v ^ 10 * w ^ 7) - u ^ 9 * v ^ 7 * w ^ 9) + 2 * u ^ 9 * v ^ 8 * w ^ 8) - u ^ 9 * v ^ 9 * w ^ 7, u ^ 18 * v ^ 25 * w ^ 25 + u ^ 20 * v ^ 23 * w ^ 25 + u ^ 20 * v ^ 25 * w ^ 23, (((((((u ^ 2 * v ^ 4 * w ^ 8 + 2 * u ^ 2 * v ^ 5 * w ^ 7 + 2 * u ^ 2 * v ^ 6 * w ^ 6 + 2 * u ^ 2 * v ^ 7 * w ^ 5 + u ^ 2 * v ^ 8 * w ^ 4 + 2 * u ^ 3 * v ^ 3 * w ^ 8 + 4 * u ^ 3 * v ^ 4 * w ^ 7 + 4 * u ^ 3 * v ^ 7 * w ^ 4 + 2 * u ^ 3 * v ^ 8 * w ^ 3 + 2 * u ^ 4 * v ^ 3 * w ^ 7 + u ^ 4 * v ^ 4 * w ^ 6) - 2 * u ^ 4 * v ^ 5 * w ^ 5) + u ^ 4 * v ^ 6 * w ^ 4 + 2 * u ^ 4 * v ^ 7 * w ^ 3) - 2 * u ^ 5 * v ^ 4 * w ^ 5) - 2 * u ^ 5 * v ^ 5 * w ^ 4) + u ^ 6 * v ^ 2 * w ^ 6) - u ^ 6 * v ^ 4 * w ^ 4) + u ^ 6 * v ^ 6 * w ^ 2 + v ^ 6 * w ^ 8 + 2 * u ^ 7 * v ^ 2 * w ^ 5 + 2 * u ^ 7 * v ^ 3 * w ^ 4 + 2 * u ^ 7 * v ^ 4 * w ^ 3 + 2 * u ^ 7 * v ^ 5 * w ^ 2 + u ^ 8 * v ^ 2 * w ^ 4 + u ^ 8 * v ^ 4 * w ^ 2 + v ^ 8 * w ^ 6, 0, 0, ((-2 * u ^ 6 * v ^ 7 * w ^ 10 - 2 * u ^ 6 * v ^ 10 * w ^ 7) + 8 * u ^ 7 * v ^ 8 * w ^ 8) - 2 * u ^ 9 * v ^ 7 * w ^ 7, (((((u ^ 2 * v ^ 4 * w ^ 8 + u ^ 2 * v ^ 5 * w ^ 7 + u ^ 2 * v ^ 7 * w ^ 5 + u ^ 2 * v ^ 8 * w ^ 4 + u ^ 3 * v ^ 3 * w ^ 8 + u ^ 3 * v ^ 4 * w ^ 7 + u ^ 3 * v ^ 7 * w ^ 4 + u ^ 3 * v ^ 8 * w ^ 3 + u ^ 4 * v ^ 3 * w ^ 7) - u ^ 4 * v ^ 5 * w ^ 5) + u ^ 4 * v ^ 7 * w ^ 3) - u ^ 5 * v ^ 4 * w ^ 5) - u ^ 5 * v ^ 5 * w ^ 4) + u ^ 7 * v ^ 2 * w ^ 5 + u ^ 7 * v ^ 5 * w ^ 2 + v ^ 7 * w ^ 7 + u ^ 8 * v ^ 2 * w ^ 4 + u ^ 8 * v ^ 4 * w ^ 2, ((((((-(u ^ 30) * v ^ 35 * w ^ 39 - u ^ 30 * v ^ 39 * w ^ 35) - u ^ 31 * v ^ 35 * w ^ 38) + 3 * u ^ 31 * v ^ 36 * w ^ 37 + 3 * u ^ 31 * v ^ 37 * w ^ 36) - u ^ 31 * v ^ 38 * w ^ 35) + 2 * u ^ 32 * v ^ 36 * w ^ 36) - u ^ 33 * v ^ 35 * w ^ 36) - u ^ 33 * v ^ 36 * w ^ 35, u ^ 30 * v ^ 37 * w ^ 37 + u ^ 31 * v ^ 36 * w ^ 37 + u ^ 31 * v ^ 37 * w ^ 36, (((((((((((9 * u ^ 2 * v ^ 2 * w ^ 4 - 6 * u ^ 2 * v ^ 3 * w ^ 3) + 9 * u ^ 2 * v ^ 4 * w ^ 2 + u ^ 2 * v ^ 6 + u ^ 2 * w ^ 6) - 2 * u ^ 3 * v ^ 2 * w ^ 3) - 2 * u ^ 3 * v ^ 3 * w ^ 2) - 4 * u ^ 3 * v ^ 5) - 4 * u ^ 3 * w ^ 5) - 4 * v ^ 3 * w ^ 5) + 6 * u ^ 4 * v ^ 2 * w ^ 2) - 2 * u ^ 5 * v ^ 3) - 2 * u ^ 5 * w ^ 3) - 4 * v ^ 5 * w ^ 3) + u ^ 6 * v ^ 2 + u ^ 6 * w ^ 2 + v ^ 8 + w ^ 8, (-21 * u ^ 30 * v ^ 35 * w ^ 36 - 21 * u ^ 30 * v ^ 36 * w ^ 35) - 18 * u ^ 31 * v ^ 35 * w ^ 35, ((((((-(u ^ 6) * v ^ 7 * w ^ 11 - u ^ 6 * v ^ 11 * w ^ 7) - u ^ 7 * v ^ 7 * w ^ 10) + 3 * u ^ 7 * v ^ 8 * w ^ 9 + 3 * u ^ 7 * v ^ 9 * w ^ 8) - u ^ 7 * v ^ 10 * w ^ 7) + 2 * u ^ 8 * v ^ 8 * w ^ 8) - u ^ 9 * v ^ 7 * w ^ 8) - u ^ 9 * v ^ 8 * w ^ 7, (-(u ^ 24) * v ^ 30 * w ^ 30 - u ^ 25 * v ^ 29 * w ^ 30) - u ^ 25 * v ^ 30 * w ^ 29, 0, ((((((-(u ^ 30) * v ^ 35 * w ^ 40 - u ^ 30 * v ^ 40 * w ^ 35) + 3 * u ^ 31 * v ^ 36 * w ^ 38 + 3 * u ^ 31 * v ^ 38 * w ^ 36) - u ^ 32 * v ^ 35 * w ^ 38) - u ^ 32 * v ^ 38 * w ^ 35) - u ^ 33 * v ^ 35 * w ^ 37) + 2 * u ^ 33 * v ^ 36 * w ^ 36) - u ^ 33 * v ^ 37 * w ^ 35, ((((-8 * u ^ 6 * v ^ 7 * w ^ 11 - 12 * u ^ 6 * v ^ 9 * w ^ 9) - 8 * u ^ 6 * v ^ 11 * w ^ 7) - 14 * u ^ 8 * v ^ 7 * w ^ 9) - 14 * u ^ 8 * v ^ 9 * w ^ 7) - 4 * u ^ 10 * v ^ 7 * w ^ 7, (-21 * u ^ 6 * v ^ 7 * w ^ 9 - 21 * u ^ 6 * v ^ 9 * w ^ 7) - 18 * u ^ 8 * v ^ 7 * w ^ 7, u ^ 18 * v ^ 23 * w ^ 23 + u ^ 19 * v ^ 22 * w ^ 23 + u ^ 19 * v ^ 23 * w ^ 22, (((((((-8 * u ^ 30 * v ^ 35 * w ^ 38 - 6 * u ^ 30 * v ^ 36 * w ^ 37) - 6 * u ^ 30 * v ^ 37 * w ^ 36) - 8 * u ^ 30 * v ^ 38 * w ^ 35) - 7 * u ^ 31 * v ^ 35 * w ^ 37) - 7 * u ^ 31 * v ^ 37 * w ^ 35) - 7 * u ^ 32 * v ^ 35 * w ^ 36) - 7 * u ^ 32 * v ^ 36 * w ^ 35) - 4 * u ^ 33 * v ^ 35 * w ^ 35, (((((3 * u ^ 2 * v ^ 4 * w ^ 7 + 2 * u ^ 2 * v ^ 5 * w ^ 6 + 2 * u ^ 2 * v ^ 6 * w ^ 5 + 3 * u ^ 2 * v ^ 7 * w ^ 4 + 4 * u ^ 3 * v ^ 3 * w ^ 7 + 3 * u ^ 3 * v ^ 4 * w ^ 6 + 3 * u ^ 3 * v ^ 6 * w ^ 4 + 4 * u ^ 3 * v ^ 7 * w ^ 3 + 2 * u ^ 4 * v ^ 3 * w ^ 6) - 3 * u ^ 4 * v ^ 4 * w ^ 5) - 3 * u ^ 4 * v ^ 5 * w ^ 4) + 2 * u ^ 4 * v ^ 6 * w ^ 3) - 3 * u ^ 5 * v ^ 4 * w ^ 4) + 2 * u ^ 6 * v ^ 2 * w ^ 5 + u ^ 6 * v ^ 3 * w ^ 4 + u ^ 6 * v ^ 4 * w ^ 3 + 2 * u ^ 6 * v ^ 5 * w ^ 2 + v ^ 6 * w ^ 7 + 3 * u ^ 7 * v ^ 2 * w ^ 4 + 3 * u ^ 7 * v ^ 4 * w ^ 2 + v ^ 7 * w ^ 6, 0, (-(u ^ 24) * v ^ 32 * w ^ 32 - u ^ 26 * v ^ 30 * w ^ 32) - u ^ 26 * v ^ 32 * w ^ 30, 0, (((((((-8 * u ^ 6 * v ^ 7 * w ^ 10 - 6 * u ^ 6 * v ^ 8 * w ^ 9) - 6 * u ^ 6 * v ^ 9 * w ^ 8) - 8 * u ^ 6 * v ^ 10 * w ^ 7) - 7 * u ^ 7 * v ^ 7 * w ^ 9) - 7 * u ^ 7 * v ^ 9 * w ^ 7) - 7 * u ^ 8 * v ^ 7 * w ^ 8) - 7 * u ^ 8 * v ^ 8 * w ^ 7) - 4 * u ^ 9 * v ^ 7 * w ^ 7, 0, (((((u ^ 12 * v ^ 14 * w ^ 18 + u ^ 12 * v ^ 18 * w ^ 14 + u ^ 13 * v ^ 14 * w ^ 17) - 3 * u ^ 13 * v ^ 15 * w ^ 16) - 3 * u ^ 13 * v ^ 16 * w ^ 15) + u ^ 13 * v ^ 17 * w ^ 14) - 2 * u ^ 14 * v ^ 15 * w ^ 15) + u ^ 15 * v ^ 14 * w ^ 15 + u ^ 15 * v ^ 15 * w ^ 14, (-(u ^ 12) * v ^ 16 * w ^ 16 - u ^ 13 * v ^ 15 * w ^ 16) - u ^ 13 * v ^ 16 * w ^ 15, ((6 * u ^ 2 * v ^ 4 * w ^ 6 + 6 * u ^ 2 * v ^ 6 * w ^ 4 + 8 * u ^ 3 * v ^ 3 * w ^ 6 + 8 * u ^ 3 * v ^ 6 * w ^ 3) - 9 * u ^ 4 * v ^ 4 * w ^ 4) + 6 * u ^ 6 * v ^ 2 * w ^ 4 + 6 * u ^ 6 * v ^ 4 * w ^ 2 + 2 * v ^ 6 * w ^ 6, (((((((((((-(u ^ 6) * v ^ 7 * w ^ 14 + 4 * u ^ 6 * v ^ 10 * w ^ 11 + 4 * u ^ 6 * v ^ 11 * w ^ 10) - u ^ 6 * v ^ 14 * w ^ 7) - u ^ 7 * v ^ 7 * w ^ 13) + 6 * u ^ 7 * v ^ 10 * w ^ 10) - u ^ 7 * v ^ 13 * w ^ 7) - 9 * u ^ 8 * v ^ 9 * w ^ 10) - 9 * u ^ 8 * v ^ 10 * w ^ 9) + 4 * u ^ 9 * v ^ 7 * w ^ 11 + 2 * u ^ 9 * v ^ 8 * w ^ 10) - 6 * u ^ 9 * v ^ 9 * w ^ 9) + 2 * u ^ 9 * v ^ 10 * w ^ 8 + 4 * u ^ 9 * v ^ 11 * w ^ 7 + 2 * u ^ 10 * v ^ 7 * w ^ 10 + 2 * u ^ 10 * v ^ 10 * w ^ 7) - u ^ 12 * v ^ 7 * w ^ 8) - u ^ 12 * v ^ 8 * w ^ 7, 0, (((((((((((((((((((u ^ 12 * v ^ 14 * w ^ 22 - 2 * u ^ 12 * v ^ 17 * w ^ 19) - 4 * u ^ 12 * v ^ 18 * w ^ 18) - 2 * u ^ 12 * v ^ 19 * w ^ 17) + u ^ 12 * v ^ 22 * w ^ 14 + u ^ 13 * v ^ 14 * w ^ 21) - 3 * u ^ 13 * v ^ 17 * w ^ 18) - 3 * u ^ 13 * v ^ 18 * w ^ 17) + u ^ 13 * v ^ 21 * w ^ 14 + 3 * u ^ 14 * v ^ 16 * w ^ 18 + 6 * u ^ 14 * v ^ 17 * w ^ 17 + 3 * u ^ 14 * v ^ 18 * w ^ 16) - 2 * u ^ 15 * v ^ 14 * w ^ 19) - u ^ 15 * v ^ 15 * w ^ 18) + 5 * u ^ 15 * v ^ 16 * w ^ 17 + 5 * u ^ 15 * v ^ 17 * w ^ 16) - u ^ 15 * v ^ 18 * w ^ 15) - 2 * u ^ 15 * v ^ 19 * w ^ 14) - 3 * u ^ 16 * v ^ 14 * w ^ 18) - u ^ 16 * v ^ 15 * w ^ 17) + 2 * u ^ 16 * v ^ 16 * w ^ 16) - u ^ 16 * v ^ 17 * w ^ 15) - 3 * u ^ 16 * v ^ 18 * w ^ 14) - u ^ 17 * v ^ 14 * w ^ 17) - u ^ 17 * v ^ 17 * w ^ 14) + u ^ 19 * v ^ 14 * w ^ 15 + u ^ 19 * v ^ 15 * w ^ 14, ((6 * u ^ 4 * v ^ 8 * w ^ 12 + 6 * u ^ 4 * v ^ 12 * w ^ 8 + 8 * u ^ 6 * v ^ 6 * w ^ 12 + 8 * u ^ 6 * v ^ 12 * w ^ 6) - 9 * u ^ 8 * v ^ 8 * w ^ 8) + 6 * u ^ 12 * v ^ 4 * w ^ 8 + 6 * u ^ 12 * v ^ 8 * w ^ 4 + 2 * v ^ 12 * w ^ 12, (((((((-8 * u ^ 18 * v ^ 21 * w ^ 24 - 6 * u ^ 18 * v ^ 22 * w ^ 23) - 6 * u ^ 18 * v ^ 23 * w ^ 22) - 8 * u ^ 18 * v ^ 24 * w ^ 21) - 7 * u ^ 19 * v ^ 21 * w ^ 23) - 7 * u ^ 19 * v ^ 23 * w ^ 21) - 7 * u ^ 20 * v ^ 21 * w ^ 22) - 7 * u ^ 20 * v ^ 22 * w ^ 21) - 4 * u ^ 21 * v ^ 21 * w ^ 21, (((((((((((-(u ^ 6) * v ^ 7 * w ^ 11 - 2 * u ^ 6 * v ^ 8 * w ^ 10) - 2 * u ^ 6 * v ^ 10 * w ^ 8) - u ^ 6 * v ^ 11 * w ^ 7) - 2 * u ^ 7 * v ^ 7 * w ^ 10) - u ^ 7 * v ^ 8 * w ^ 9) - u ^ 7 * v ^ 9 * w ^ 8) - 2 * u ^ 7 * v ^ 10 * w ^ 7) - 2 * u ^ 8 * v ^ 7 * w ^ 9) - 3 * u ^ 8 * v ^ 8 * w ^ 8) - 2 * u ^ 8 * v ^ 9 * w ^ 7) - u ^ 9 * v ^ 7 * w ^ 8) - u ^ 9 * v ^ 8 * w ^ 7, (-(u ^ 12) * v ^ 18 * w ^ 18 - u ^ 14 * v ^ 16 * w ^ 18) - u ^ 14 * v ^ 18 * w ^ 16, (((((((((((-(u ^ 6) * v ^ 7 * w ^ 15 + 4 * u ^ 6 * v ^ 10 * w ^ 12 + 4 * u ^ 6 * v ^ 12 * w ^ 10) - u ^ 6 * v ^ 15 * w ^ 7) - u ^ 8 * v ^ 7 * w ^ 13) - 9 * u ^ 8 * v ^ 9 * w ^ 11) + 6 * u ^ 8 * v ^ 10 * w ^ 10) - 9 * u ^ 8 * v ^ 11 * w ^ 9) - u ^ 8 * v ^ 13 * w ^ 7) + 4 * u ^ 9 * v ^ 7 * w ^ 12 + 2 * u ^ 9 * v ^ 9 * w ^ 10 + 2 * u ^ 9 * v ^ 10 * w ^ 9 + 4 * u ^ 9 * v ^ 12 * w ^ 7) - 6 * u ^ 10 * v ^ 9 * w ^ 9) + 2 * u ^ 11 * v ^ 7 * w ^ 10 + 2 * u ^ 11 * v ^ 10 * w ^ 7) - u ^ 12 * v ^ 7 * w ^ 9) - u ^ 12 * v ^ 9 * w ^ 7, ((((((-(u ^ 18) * v ^ 21 * w ^ 25 - u ^ 18 * v ^ 25 * w ^ 21) - u ^ 19 * v ^ 21 * w ^ 24) + 3 * u ^ 19 * v ^ 22 * w ^ 23 + 3 * u ^ 19 * v ^ 23 * w ^ 22) - u ^ 19 * v ^ 24 * w ^ 21) + 2 * u ^ 20 * v ^ 22 * w ^ 22) - u ^ 21 * v ^ 21 * w ^ 22) - u ^ 21 * v ^ 22 * w ^ 21, ((2 * u ^ 12 * v ^ 14 * w ^ 17 + 2 * u ^ 12 * v ^ 17 * w ^ 14) - 8 * u ^ 13 * v ^ 15 * w ^ 15) + 2 * u ^ 15 * v ^ 14 * w ^ 14, (((((u ^ 24 * v ^ 28 * w ^ 33 + u ^ 24 * v ^ 33 * w ^ 28) - 3 * u ^ 25 * v ^ 29 * w ^ 31) - 3 * u ^ 25 * v ^ 31 * w ^ 29) + u ^ 26 * v ^ 28 * w ^ 31 + u ^ 26 * v ^ 31 * w ^ 28 + u ^ 27 * v ^ 28 * w ^ 30) - 2 * u ^ 27 * v ^ 29 * w ^ 29) + u ^ 27 * v ^ 30 * w ^ 28, ((2 * u ^ 24 * v ^ 28 * w ^ 31 + 2 * u ^ 24 * v ^ 31 * w ^ 28) - 8 * u ^ 25 * v ^ 29 * w ^ 29) + 2 * u ^ 27 * v ^ 28 * w ^ 28, ((((((-(u ^ 18) * v ^ 21 * w ^ 26 - u ^ 18 * v ^ 26 * w ^ 21) + 3 * u ^ 19 * v ^ 22 * w ^ 24 + 3 * u ^ 19 * v ^ 24 * w ^ 22) - u ^ 20 * v ^ 21 * w ^ 24) - u ^ 20 * v ^ 24 * w ^ 21) - u ^ 21 * v ^ 21 * w ^ 23) + 2 * u ^ 21 * v ^ 22 * w ^ 22) - u ^ 21 * v ^ 23 * w ^ 21, ((((2 * u ^ 6 * v ^ 10 * w ^ 10 - 2 * u ^ 7 * v ^ 9 * w ^ 10) - 2 * u ^ 7 * v ^ 10 * w ^ 9) - 3 * u ^ 8 * v ^ 9 * w ^ 9) - 2 * u ^ 9 * v ^ 8 * w ^ 9) - 2 * u ^ 9 * v ^ 9 * w ^ 8, ((((((((((((u ^ 12 * v ^ 14 * w ^ 21 - 4 * u ^ 12 * v ^ 17 * w ^ 18) - 4 * u ^ 12 * v ^ 18 * w ^ 17) + u ^ 12 * v ^ 21 * w ^ 14 + u ^ 13 * v ^ 14 * w ^ 20) - 6 * u ^ 13 * v ^ 17 * w ^ 17) + u ^ 13 * v ^ 20 * w ^ 14 + 9 * u ^ 14 * v ^ 16 * w ^ 17 + 9 * u ^ 14 * v ^ 17 * w ^ 16) - 4 * u ^ 15 * v ^ 14 * w ^ 18) - 2 * u ^ 15 * v ^ 15 * w ^ 17) + 6 * u ^ 15 * v ^ 16 * w ^ 16) - 2 * u ^ 15 * v ^ 17 * w ^ 15) - 4 * u ^ 15 * v ^ 18 * w ^ 14) - 2 * u ^ 16 * v ^ 14 * w ^ 17) - 2 * u ^ 16 * v ^ 17 * w ^ 14) + u ^ 18 * v ^ 14 * w ^ 15 + u ^ 18 * v ^ 15 * w ^ 14, ((((-2 * u ^ 6 * v ^ 7 * w ^ 13 + 14 * u ^ 6 * v ^ 10 * w ^ 10) - 2 * u ^ 6 * v ^ 13 * w ^ 7) - 24 * u ^ 8 * v ^ 9 * w ^ 9) + 8 * u ^ 9 * v ^ 7 * w ^ 10 + 8 * u ^ 9 * v ^ 10 * w ^ 7) - 2 * u ^ 12 * v ^ 7 * w ^ 7, (((((((-(u ^ 6) * v ^ 7 * w ^ 10 - 2 * u ^ 6 * v ^ 8 * w ^ 9) - 2 * u ^ 6 * v ^ 9 * w ^ 8) - u ^ 6 * v ^ 10 * w ^ 7) - 3 * u ^ 7 * v ^ 7 * w ^ 9) - 5 * u ^ 7 * v ^ 8 * w ^ 8) - 3 * u ^ 7 * v ^ 9 * w ^ 7) - 2 * u ^ 8 * v ^ 7 * w ^ 8) - 2 * u ^ 8 * v ^ 8 * w ^ 7, 2 * u ^ 12 * v ^ 14 * w ^ 16 + 7 * u ^ 12 * v ^ 15 * w ^ 15 + 2 * u ^ 12 * v ^ 16 * w ^ 14 + 4 * u ^ 13 * v ^ 14 * w ^ 15 + 4 * u ^ 13 * v ^ 15 * w ^ 14 + 2 * u ^ 14 * v ^ 14 * w ^ 14, 0, 21 * u ^ 24 * v ^ 28 * w ^ 30 + 21 * u ^ 24 * v ^ 30 * w ^ 28 + 18 * u ^ 26 * v ^ 28 * w ^ 28, ((((-2 * u ^ 6 * v ^ 7 * w ^ 9 - 7 * u ^ 6 * v ^ 8 * w ^ 8) - 2 * u ^ 6 * v ^ 9 * w ^ 7) - 4 * u ^ 7 * v ^ 7 * w ^ 8) - 4 * u ^ 7 * v ^ 8 * w ^ 7) - 2 * u ^ 8 * v ^ 7 * w ^ 7, ((((2 * u ^ 12 * v ^ 14 * w ^ 20 - 14 * u ^ 12 * v ^ 17 * w ^ 17) + 2 * u ^ 12 * v ^ 20 * w ^ 14 + 24 * u ^ 14 * v ^ 16 * w ^ 16) - 8 * u ^ 15 * v ^ 14 * w ^ 17) - 8 * u ^ 15 * v ^ 17 * w ^ 14) + 2 * u ^ 18 * v ^ 14 * w ^ 14, ((((-8 * u ^ 6 * v ^ 7 * w ^ 9 - 12 * u ^ 6 * v ^ 8 * w ^ 8) - 8 * u ^ 6 * v ^ 9 * w ^ 7) - 14 * u ^ 7 * v ^ 7 * w ^ 8) - 14 * u ^ 7 * v ^ 8 * w ^ 7) - 4 * u ^ 8 * v ^ 7 * w ^ 7, u ^ 12 * v ^ 14 * w ^ 17 + 2 * u ^ 12 * v ^ 15 * w ^ 16 + 2 * u ^ 12 * v ^ 16 * w ^ 15 + u ^ 12 * v ^ 17 * w ^ 14 + 3 * u ^ 13 * v ^ 14 * w ^ 16 + 5 * u ^ 13 * v ^ 15 * w ^ 15 + 3 * u ^ 13 * v ^ 16 * w ^ 14 + 2 * u ^ 14 * v ^ 14 * w ^ 15 + 2 * u ^ 14 * v ^ 15 * w ^ 14, ((-2 * u ^ 18 * v ^ 21 * w ^ 24 - 2 * u ^ 18 * v ^ 24 * w ^ 21) + 8 * u ^ 19 * v ^ 22 * w ^ 22) - 2 * u ^ 21 * v ^ 21 * w ^ 21, (-21 * u ^ 30 * v ^ 35 * w ^ 37 - 21 * u ^ 30 * v ^ 37 * w ^ 35) - 18 * u ^ 32 * v ^ 35 * w ^ 35, 8 * u ^ 12 * v ^ 14 * w ^ 16 + 12 * u ^ 12 * v ^ 15 * w ^ 15 + 8 * u ^ 12 * v ^ 16 * w ^ 14 + 14 * u ^ 13 * v ^ 14 * w ^ 15 + 14 * u ^ 13 * v ^ 15 * w ^ 14 + 4 * u ^ 14 * v ^ 14 * w ^ 14, (-21 * u ^ 6 * v ^ 7 * w ^ 8 - 21 * u ^ 6 * v ^ 8 * w ^ 7) - 18 * u ^ 7 * v ^ 7 * w ^ 7, -60 * u ^ 6 * v ^ 7 * w ^ 7, ((((-8 * u ^ 18 * v ^ 21 * w ^ 23 - 12 * u ^ 18 * v ^ 22 * w ^ 22) - 8 * u ^ 18 * v ^ 23 * w ^ 21) - 14 * u ^ 19 * v ^ 21 * w ^ 22) - 14 * u ^ 19 * v ^ 22 * w ^ 21) - 4 * u ^ 20 * v ^ 21 * w ^ 21, (-21 * u ^ 18 * v ^ 21 * w ^ 23 - 21 * u ^ 18 * v ^ 23 * w ^ 21) - 18 * u ^ 20 * v ^ 21 * w ^ 21, 21 * u ^ 12 * v ^ 14 * w ^ 15 + 21 * u ^ 12 * v ^ 15 * w ^ 14 + 18 * u ^ 13 * v ^ 14 * w ^ 14, (-21 * u ^ 18 * v ^ 21 * w ^ 22 - 21 * u ^ 18 * v ^ 22 * w ^ 21) - 18 * u ^ 19 * v ^ 21 * w ^ 21, -60 * u ^ 30 * v ^ 35 * w ^ 35, -60 * u ^ 18 * v ^ 21 * w ^ 21, 60 * u ^ 12 * v ^ 14 * w ^ 14, 60 * u ^ 24 * v ^ 28 * w ^ 28]
            end
        f60b = function (u, v, w)
                return [60, 24u + 18v + 18w, 6 * u * v + 6 * u * w + 4 * v * w + 5 * u ^ 2 + v ^ 2 + w ^ 2, 16 * u * v + 16 * u * w + 10 * v * w + 8 * u ^ 2 + 5 * v ^ 2 + 5 * w ^ 2, 24 * u ^ 2 + 18 * v ^ 2 + 18 * w ^ 2, -7 * u * v * w + 5 * u ^ 3 + v ^ 3 + w ^ 3, 6 * u * v * w + 3 * u * v ^ 2 + 3 * u * w ^ 2 + v * w ^ 2 + 4 * u ^ 2 * v + 4 * u ^ 2 * w + v ^ 2 * w + u ^ 3, u * v * w + u ^ 2 * v + u ^ 2 * w, 8 * u * v ^ 2 + 8 * u * w ^ 2 + 5 * v * w ^ 2 + 8 * u ^ 2 * v + 8 * u ^ 2 * w + 5 * v ^ 2 * w + 8 * u ^ 3 + 5 * v ^ 3 + 5 * w ^ 3, (-u * v * w ^ 2 - u * v ^ 2 * w) - u ^ 2 * v * w, ((((((((((((((((((((((((((((((u ^ 3 * v ^ 3 * w ^ 13 - u ^ 3 * v ^ 6 * w ^ 10) - u ^ 3 * v ^ 7 * w ^ 9) - u ^ 3 * v ^ 9 * w ^ 7) - u ^ 3 * v ^ 10 * w ^ 6) + u ^ 3 * v ^ 13 * w ^ 3 + u ^ 4 * v ^ 7 * w ^ 8 + u ^ 4 * v ^ 8 * w ^ 7 + u ^ 5 * v ^ 5 * w ^ 9 + u ^ 5 * v ^ 6 * w ^ 8 + u ^ 5 * v ^ 8 * w ^ 6 + u ^ 5 * v ^ 9 * w ^ 5) - u ^ 6 * v ^ 3 * w ^ 10) + u ^ 6 * v ^ 5 * w ^ 8) - u ^ 6 * v ^ 6 * w ^ 7) - u ^ 6 * v ^ 7 * w ^ 6) + u ^ 6 * v ^ 8 * w ^ 5) - u ^ 6 * v ^ 10 * w ^ 3) - u ^ 7 * v ^ 3 * w ^ 9) + u ^ 7 * v ^ 4 * w ^ 8) - u ^ 7 * v ^ 6 * w ^ 6) + u ^ 7 * v ^ 8 * w ^ 4) - u ^ 7 * v ^ 9 * w ^ 3) + 2 * u ^ 8 * v ^ 4 * w ^ 7 + 2 * u ^ 8 * v ^ 5 * w ^ 6 + 2 * u ^ 8 * v ^ 6 * w ^ 5 + 2 * u ^ 8 * v ^ 7 * w ^ 4) - u ^ 9 * v ^ 2 * w ^ 8) - u ^ 9 * v ^ 3 * w ^ 7) + u ^ 9 * v ^ 4 * w ^ 6 + u ^ 9 * v ^ 5 * w ^ 5 + u ^ 9 * v ^ 6 * w ^ 4) - u ^ 9 * v ^ 7 * w ^ 3) - u ^ 9 * v ^ 8 * w ^ 2) - u ^ 10 * v ^ 2 * w ^ 7) - u ^ 10 * v ^ 3 * w ^ 6) - u ^ 10 * v ^ 6 * w ^ 3) - u ^ 10 * v ^ 7 * w ^ 2) - u ^ 11 * v ^ 8) - u ^ 11 * w ^ 8) - u ^ 12 * v ^ 7) - u ^ 12 * w ^ 7) + u ^ 13 * v ^ 2 * w ^ 4 + u ^ 13 * v ^ 3 * w ^ 3 + u ^ 13 * v ^ 4 * w ^ 2 + u ^ 15 * v ^ 4 + u ^ 15 * w ^ 4, 2 * u * v * w ^ 2 + 2 * u * v ^ 2 * w + 2 * u * v ^ 3 + 2 * u * w ^ 3 + v * w ^ 3 + 2 * u ^ 2 * v * w + 3 * u ^ 2 * v ^ 2 + 3 * u ^ 2 * w ^ 2 + 2 * u ^ 3 * v + 2 * u ^ 3 * w + v ^ 3 * w + u ^ 4, 0, 16 * u ^ 2 * v ^ 2 + 16 * u ^ 2 * w ^ 2 + 10 * v ^ 2 * w ^ 2 + 8 * u ^ 4 + 5 * v ^ 4 + 5 * w ^ 4, (((((((7 * u ^ 2 * v ^ 2 * w ^ 3 + 7 * u ^ 2 * v ^ 3 * w ^ 2 + 7 * u ^ 3 * v ^ 2 * w ^ 2) - 6 * u ^ 3 * v ^ 4) - 6 * u ^ 3 * w ^ 4) - 4 * v ^ 3 * w ^ 4) - 6 * u ^ 4 * v ^ 3) - 6 * u ^ 4 * w ^ 3) - 4 * v ^ 4 * w ^ 3) + 5 * u ^ 7 + v ^ 7 + w ^ 7, (((-2 * u * v * w ^ 2 - 2 * u * v ^ 2 * w) + u * v ^ 3 + u * w ^ 3) - 3 * u ^ 2 * v * w) + 2 * u ^ 3 * v + 2 * u ^ 3 * w + u ^ 4, (((((((((-4 * u * v * w ^ 3 + 3 * u * v ^ 2 * w ^ 2) - 4 * u * v ^ 3 * w) - u * v ^ 4) - u * w ^ 4) - v * w ^ 4) + 2 * u ^ 2 * v * w ^ 2 + 2 * u ^ 2 * v ^ 2 * w + v ^ 2 * w ^ 3) - 4 * u ^ 3 * v * w) + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2 + v ^ 3 * w ^ 2) - v ^ 4 * w) + u ^ 5, 0, (-(u ^ 2) * v ^ 2 * w ^ 4 - u ^ 2 * v ^ 4 * w ^ 2) - u ^ 4 * v ^ 2 * w ^ 2, 0, ((((u ^ 6 * v ^ 6 * w ^ 14 + u ^ 6 * v ^ 7 * w ^ 13 + u ^ 6 * v ^ 13 * w ^ 7 + u ^ 6 * v ^ 14 * w ^ 6 + u ^ 7 * v ^ 6 * w ^ 13 + u ^ 7 * v ^ 13 * w ^ 6) - u ^ 8 * v ^ 9 * w ^ 9) - u ^ 9 * v ^ 8 * w ^ 9) - u ^ 9 * v ^ 9 * w ^ 8) + u ^ 13 * v ^ 4 * w ^ 9 + u ^ 13 * v ^ 6 * w ^ 7 + u ^ 13 * v ^ 7 * w ^ 6 + u ^ 13 * v ^ 9 * w ^ 4 + u ^ 14 * v ^ 4 * w ^ 8 + u ^ 14 * v ^ 6 * w ^ 6 + u ^ 14 * v ^ 8 * w ^ 4 + u ^ 17 * v ^ 9 + u ^ 17 * w ^ 9 + u ^ 18 * v ^ 8 + u ^ 18 * w ^ 8, (((-2 * u * v * w ^ 3 - 2 * u * v ^ 3 * w) + u ^ 2 * v ^ 3 + u ^ 2 * w ^ 3) - 3 * u ^ 3 * v * w) + 2 * u ^ 3 * v ^ 2 + 2 * u ^ 3 * w ^ 2 + u ^ 5, (-(u ^ 9) * v ^ 7 * w ^ 8 - u ^ 9 * v ^ 8 * w ^ 7) - u ^ 10 * v ^ 7 * w ^ 7, u ^ 5 * v ^ 5 * w ^ 5 + u ^ 10 * v ^ 5 + u ^ 10 * w ^ 5, (-(u ^ 42) * v ^ 32 * w ^ 34 - u ^ 42 * v ^ 34 * w ^ 32) - u ^ 44 * v ^ 32 * w ^ 32, (((((((((((((u ^ 3 * v ^ 3 * w ^ 12 - 2 * u ^ 3 * v ^ 6 * w ^ 9) - 2 * u ^ 3 * v ^ 9 * w ^ 6) + u ^ 3 * v ^ 12 * w ^ 3 + 2 * u ^ 4 * v ^ 7 * w ^ 7 + 3 * u ^ 5 * v ^ 5 * w ^ 8 + 3 * u ^ 5 * v ^ 8 * w ^ 5) - 2 * u ^ 6 * v ^ 3 * w ^ 9) - 3 * u ^ 6 * v ^ 6 * w ^ 6) - 2 * u ^ 6 * v ^ 9 * w ^ 3) + 2 * u ^ 7 * v ^ 4 * w ^ 7 + 2 * u ^ 7 * v ^ 7 * w ^ 4 + 3 * u ^ 8 * v ^ 4 * w ^ 6 + 3 * u ^ 8 * v ^ 5 * w ^ 5 + 3 * u ^ 8 * v ^ 6 * w ^ 4) - 2 * u ^ 9 * v ^ 2 * w ^ 7) - 2 * u ^ 9 * v ^ 3 * w ^ 6) - 2 * u ^ 9 * v ^ 6 * w ^ 3) - 2 * u ^ 9 * v ^ 7 * w ^ 2) - 2 * u ^ 11 * v ^ 7) - 2 * u ^ 11 * w ^ 7) + u ^ 12 * v ^ 2 * w ^ 4 + u ^ 12 * v ^ 3 * w ^ 3 + u ^ 12 * v ^ 4 * w ^ 2 + u ^ 14 * v ^ 4 + u ^ 14 * w ^ 4, ((3 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 3 * v * w ^ 2 + 2 * u ^ 3 * v ^ 2 * w) - u ^ 4 * v ^ 2) - u ^ 4 * w ^ 2, 0, (((((((((((((((((-2 * u * v ^ 2 * w ^ 3 - 2 * u * v ^ 3 * w ^ 2) - 2 * u * v ^ 5) - 2 * u * w ^ 5) - v * w ^ 5) - 2 * u ^ 2 * v * w ^ 3) + 7 * u ^ 2 * v ^ 2 * w ^ 2) - 2 * u ^ 2 * v ^ 3 * w) + 3 * u ^ 2 * v ^ 4 + 3 * u ^ 2 * w ^ 4 + 2 * v ^ 2 * w ^ 4) - 2 * u ^ 3 * v * w ^ 2) - 2 * u ^ 3 * v ^ 2 * w) - 4 * u ^ 3 * v ^ 3) - 4 * u ^ 3 * w ^ 3) - 2 * v ^ 3 * w ^ 3) + 5 * u ^ 4 * v ^ 2 + 5 * u ^ 4 * w ^ 2 + 2 * v ^ 4 * w ^ 2) - 2 * u ^ 5 * v) - 2 * u ^ 5 * w) - v ^ 5 * w) + u ^ 6, u ^ 4 * v ^ 3 * w ^ 5 + u ^ 4 * v ^ 5 * w ^ 3 + 2 * u ^ 6 * v ^ 3 * w ^ 3, (((21 * u ^ 2 * v ^ 2 * w ^ 2 - 12 * u ^ 3 * v ^ 3) - 12 * u ^ 3 * w ^ 3) - 8 * v ^ 3 * w ^ 3) + 5 * u ^ 6 + v ^ 6 + w ^ 6, ((u ^ 40 * v ^ 30 * w ^ 33 + u ^ 40 * v ^ 33 * w ^ 30) - 7 * u ^ 41 * v ^ 31 * w ^ 31) + 5 * u ^ 43 * v ^ 30 * w ^ 30, (((((((((((((((((((((((((((u ^ 6 * v ^ 6 * w ^ 19 - u ^ 6 * v ^ 9 * w ^ 16) - u ^ 6 * v ^ 10 * w ^ 15) - u ^ 6 * v ^ 15 * w ^ 10) - u ^ 6 * v ^ 16 * w ^ 9) + u ^ 6 * v ^ 19 * w ^ 6 + u ^ 8 * v ^ 8 * w ^ 15 + u ^ 8 * v ^ 9 * w ^ 14 + u ^ 8 * v ^ 11 * w ^ 12 + u ^ 8 * v ^ 12 * w ^ 11 + u ^ 8 * v ^ 14 * w ^ 9 + u ^ 8 * v ^ 15 * w ^ 8) - u ^ 9 * v ^ 6 * w ^ 16) + u ^ 9 * v ^ 8 * w ^ 14 + u ^ 9 * v ^ 14 * w ^ 8) - u ^ 9 * v ^ 16 * w ^ 6) - u ^ 10 * v ^ 6 * w ^ 15) - u ^ 10 * v ^ 10 * w ^ 11) - u ^ 10 * v ^ 11 * w ^ 10) - u ^ 10 * v ^ 15 * w ^ 6) + u ^ 11 * v ^ 8 * w ^ 12) - u ^ 11 * v ^ 10 * w ^ 10) + u ^ 11 * v ^ 12 * w ^ 8 + u ^ 12 * v ^ 8 * w ^ 11 + u ^ 12 * v ^ 11 * w ^ 8 + u ^ 14 * v ^ 6 * w ^ 11 + u ^ 14 * v ^ 7 * w ^ 10 + u ^ 14 * v ^ 8 * w ^ 9 + u ^ 14 * v ^ 9 * w ^ 8 + u ^ 14 * v ^ 10 * w ^ 7 + u ^ 14 * v ^ 11 * w ^ 6) - u ^ 15 * v ^ 4 * w ^ 12) + u ^ 15 * v ^ 8 * w ^ 8) - u ^ 15 * v ^ 12 * w ^ 4) - u ^ 16 * v ^ 4 * w ^ 11) - u ^ 16 * v ^ 6 * w ^ 9) - u ^ 16 * v ^ 9 * w ^ 6) - u ^ 16 * v ^ 11 * w ^ 4) + u ^ 19 * v ^ 4 * w ^ 8 + u ^ 19 * v ^ 6 * w ^ 6 + u ^ 19 * v ^ 8 * w ^ 4) - u ^ 19 * v ^ 12) - u ^ 19 * w ^ 12) - u ^ 20 * v ^ 11) - u ^ 20 * w ^ 11) + u ^ 23 * v ^ 8 + u ^ 23 * w ^ 8, 0, 0, ((((((((((-4 * u * v ^ 3 * w ^ 3 + u * v ^ 6 + u * w ^ 6 + 6 * u ^ 2 * v ^ 2 * w ^ 3 + 6 * u ^ 2 * v ^ 3 * w ^ 2) - 4 * u ^ 3 * v * w ^ 3) + 9 * u ^ 3 * v ^ 2 * w ^ 2) - 4 * u ^ 3 * v ^ 3 * w) - 4 * u ^ 3 * v ^ 4) - 4 * u ^ 3 * w ^ 4) - 2 * v ^ 3 * w ^ 4) - 4 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - 2 * v ^ 4 * w ^ 3) + 2 * u ^ 6 * v + 2 * u ^ 6 * w + u ^ 7, (-(u ^ 10) * v ^ 8 * w ^ 10 - u ^ 10 * v ^ 10 * w ^ 8) - u ^ 12 * v ^ 8 * w ^ 8, (((-2 * u ^ 9 * v ^ 7 * w ^ 9 - 2 * u ^ 9 * v ^ 9 * w ^ 7) + u ^ 10 * v ^ 6 * w ^ 9 + u ^ 10 * v ^ 9 * w ^ 6 + 2 * u ^ 11 * v ^ 6 * w ^ 8) - 3 * u ^ 11 * v ^ 7 * w ^ 7) + 2 * u ^ 11 * v ^ 8 * w ^ 6 + u ^ 13 * v ^ 6 * w ^ 6, (-(u ^ 26) * v ^ 20 * w ^ 22 - u ^ 26 * v ^ 22 * w ^ 20) - u ^ 28 * v ^ 20 * w ^ 20, (((((2 * u ^ 3 * v ^ 3 * w ^ 8 + 2 * u ^ 3 * v ^ 4 * w ^ 7 + 2 * u ^ 3 * v ^ 7 * w ^ 4 + 2 * u ^ 3 * v ^ 8 * w ^ 3 + 2 * u ^ 4 * v ^ 3 * w ^ 7 + u ^ 4 * v ^ 4 * w ^ 6) - 2 * u ^ 4 * v ^ 5 * w ^ 5) + u ^ 4 * v ^ 6 * w ^ 4 + 2 * u ^ 4 * v ^ 7 * w ^ 3) - 2 * u ^ 5 * v ^ 4 * w ^ 5) - 2 * u ^ 5 * v ^ 5 * w ^ 4) + u ^ 6 * v ^ 2 * w ^ 6 + u ^ 6 * v ^ 4 * w ^ 4 + u ^ 6 * v ^ 6 * w ^ 2 + 2 * u ^ 7 * v ^ 2 * w ^ 5 + 4 * u ^ 7 * v ^ 3 * w ^ 4 + 4 * u ^ 7 * v ^ 4 * w ^ 3 + 2 * u ^ 7 * v ^ 5 * w ^ 2 + u ^ 8 * v ^ 2 * w ^ 4 + 2 * u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + 2 * u ^ 9 * v ^ 5 + 2 * u ^ 9 * w ^ 5 + u ^ 10 * v ^ 4 + u ^ 10 * w ^ 4, u ^ 4 * v ^ 3 * w ^ 3 * (e * (u + v + w) + u), 0, ((u ^ 8 * v ^ 6 * w ^ 9 + u ^ 8 * v ^ 9 * w ^ 6) - 7 * u ^ 9 * v ^ 7 * w ^ 7) + 5 * u ^ 11 * v ^ 6 * w ^ 6, (((((u ^ 3 * v ^ 3 * w ^ 8 + u ^ 3 * v ^ 4 * w ^ 7 + u ^ 3 * v ^ 7 * w ^ 4 + u ^ 3 * v ^ 8 * w ^ 3 + u ^ 4 * v ^ 3 * w ^ 7) - u ^ 4 * v ^ 5 * w ^ 5) + u ^ 4 * v ^ 7 * w ^ 3) - u ^ 5 * v ^ 4 * w ^ 5) - u ^ 5 * v ^ 5 * w ^ 4) + u ^ 7 * v ^ 2 * w ^ 5 + u ^ 7 * v ^ 3 * w ^ 4 + u ^ 7 * v ^ 4 * w ^ 3 + u ^ 7 * v ^ 5 * w ^ 2 + u ^ 8 * v ^ 2 * w ^ 4 + u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + u ^ 9 * v ^ 5 + u ^ 9 * w ^ 5 + u ^ 10 * v ^ 4 + u ^ 10 * w ^ 4, ((((u ^ 41 * v ^ 30 * w ^ 33 - 2 * u ^ 41 * v ^ 31 * w ^ 32) - 2 * u ^ 41 * v ^ 32 * w ^ 31) + u ^ 41 * v ^ 33 * w ^ 30) - 3 * u ^ 42 * v ^ 31 * w ^ 31) + 2 * u ^ 43 * v ^ 30 * w ^ 31 + 2 * u ^ 43 * v ^ 31 * w ^ 30 + u ^ 44 * v ^ 30 * w ^ 30, (-(u ^ 41) * v ^ 31 * w ^ 32 - u ^ 41 * v ^ 32 * w ^ 31) - u ^ 42 * v ^ 31 * w ^ 31, (((((((((((6 * u ^ 2 * v ^ 2 * w ^ 4 - 4 * u ^ 2 * v ^ 3 * w ^ 3) + 6 * u ^ 2 * v ^ 4 * w ^ 2 + u ^ 2 * v ^ 6 + u ^ 2 * w ^ 6) - 4 * u ^ 3 * v ^ 2 * w ^ 3) - 4 * u ^ 3 * v ^ 3 * w ^ 2) - 4 * u ^ 3 * v ^ 5) - 4 * u ^ 3 * w ^ 5) - 2 * v ^ 3 * w ^ 5) + 9 * u ^ 4 * v ^ 2 * w ^ 2) - 4 * u ^ 5 * v ^ 3) - 4 * u ^ 5 * w ^ 3) - 2 * v ^ 5 * w ^ 3) + 2 * u ^ 6 * v ^ 2 + 2 * u ^ 6 * w ^ 2 + u ^ 8, 18 * u ^ 40 * v ^ 30 * w ^ 31 + 18 * u ^ 40 * v ^ 31 * w ^ 30 + 24 * u ^ 41 * v ^ 30 * w ^ 30, ((((u ^ 9 * v ^ 6 * w ^ 9 - 2 * u ^ 9 * v ^ 7 * w ^ 8) - 2 * u ^ 9 * v ^ 8 * w ^ 7) + u ^ 9 * v ^ 9 * w ^ 6) - 3 * u ^ 10 * v ^ 7 * w ^ 7) + 2 * u ^ 11 * v ^ 6 * w ^ 7 + 2 * u ^ 11 * v ^ 7 * w ^ 6 + u ^ 12 * v ^ 6 * w ^ 6, (-(u ^ 33) * v ^ 25 * w ^ 26 - u ^ 33 * v ^ 26 * w ^ 25) - u ^ 34 * v ^ 25 * w ^ 25, 0, (((-2 * u ^ 41 * v ^ 31 * w ^ 33 - 2 * u ^ 41 * v ^ 33 * w ^ 31) + u ^ 42 * v ^ 30 * w ^ 33 + u ^ 42 * v ^ 33 * w ^ 30 + 2 * u ^ 43 * v ^ 30 * w ^ 32) - 3 * u ^ 43 * v ^ 31 * w ^ 31) + 2 * u ^ 43 * v ^ 32 * w ^ 30 + u ^ 45 * v ^ 30 * w ^ 30, 5 * u ^ 8 * v ^ 6 * w ^ 10 + 10 * u ^ 8 * v ^ 8 * w ^ 8 + 5 * u ^ 8 * v ^ 10 * w ^ 6 + 16 * u ^ 10 * v ^ 6 * w ^ 8 + 16 * u ^ 10 * v ^ 8 * w ^ 6 + 8 * u ^ 12 * v ^ 6 * w ^ 6, 18 * u ^ 8 * v ^ 6 * w ^ 8 + 18 * u ^ 8 * v ^ 8 * w ^ 6 + 24 * u ^ 10 * v ^ 6 * w ^ 6, (-(u ^ 25) * v ^ 19 * w ^ 20 - u ^ 25 * v ^ 20 * w ^ 19) - u ^ 26 * v ^ 19 * w ^ 19, 5 * u ^ 40 * v ^ 30 * w ^ 33 + 5 * u ^ 40 * v ^ 31 * w ^ 32 + 5 * u ^ 40 * v ^ 32 * w ^ 31 + 5 * u ^ 40 * v ^ 33 * w ^ 30 + 8 * u ^ 41 * v ^ 30 * w ^ 32 + 8 * u ^ 41 * v ^ 32 * w ^ 30 + 8 * u ^ 42 * v ^ 30 * w ^ 31 + 8 * u ^ 42 * v ^ 31 * w ^ 30 + 8 * u ^ 43 * v ^ 30 * w ^ 30, (((((4 * u ^ 3 * v ^ 3 * w ^ 7 + 2 * u ^ 3 * v ^ 4 * w ^ 6 + 2 * u ^ 3 * v ^ 6 * w ^ 4 + 4 * u ^ 3 * v ^ 7 * w ^ 3 + 2 * u ^ 4 * v ^ 3 * w ^ 6) - 3 * u ^ 4 * v ^ 4 * w ^ 5) - 3 * u ^ 4 * v ^ 5 * w ^ 4) + 2 * u ^ 4 * v ^ 6 * w ^ 3) - 3 * u ^ 5 * v ^ 4 * w ^ 4) + 2 * u ^ 6 * v ^ 2 * w ^ 5 + 3 * u ^ 6 * v ^ 3 * w ^ 4 + 3 * u ^ 6 * v ^ 4 * w ^ 3 + 2 * u ^ 6 * v ^ 5 * w ^ 2 + 3 * u ^ 7 * v ^ 2 * w ^ 4 + 4 * u ^ 7 * v ^ 3 * w ^ 3 + 3 * u ^ 7 * v ^ 4 * w ^ 2 + u ^ 8 * v ^ 5 + u ^ 8 * w ^ 5 + 2 * u ^ 9 * v ^ 4 + 2 * u ^ 9 * w ^ 4, u ^ 12 * v ^ 9 * w ^ 9 * (e * (u + v + w) + u), (-(u ^ 34) * v ^ 26 * w ^ 28 - u ^ 34 * v ^ 28 * w ^ 26) - u ^ 36 * v ^ 26 * w ^ 26, 4 * u ^ 4 * v ^ 3 * w ^ 3, 5 * u ^ 8 * v ^ 6 * w ^ 9 + 5 * u ^ 8 * v ^ 7 * w ^ 8 + 5 * u ^ 8 * v ^ 8 * w ^ 7 + 5 * u ^ 8 * v ^ 9 * w ^ 6 + 8 * u ^ 9 * v ^ 6 * w ^ 8 + 8 * u ^ 9 * v ^ 8 * w ^ 6 + 8 * u ^ 10 * v ^ 6 * w ^ 7 + 8 * u ^ 10 * v ^ 7 * w ^ 6 + 8 * u ^ 11 * v ^ 6 * w ^ 6, 4 * u ^ 20 * v ^ 15 * w ^ 15, ((((u ^ 17 * v ^ 12 * w ^ 15 - 2 * u ^ 17 * v ^ 13 * w ^ 14) - 2 * u ^ 17 * v ^ 14 * w ^ 13) + u ^ 17 * v ^ 15 * w ^ 12) - 3 * u ^ 18 * v ^ 13 * w ^ 13) + 2 * u ^ 19 * v ^ 12 * w ^ 13 + 2 * u ^ 19 * v ^ 13 * w ^ 12 + u ^ 20 * v ^ 12 * w ^ 12, (-(u ^ 17) * v ^ 13 * w ^ 14 - u ^ 17 * v ^ 14 * w ^ 13) - u ^ 18 * v ^ 13 * w ^ 13, ((8 * u ^ 3 * v ^ 3 * w ^ 6 + 8 * u ^ 3 * v ^ 6 * w ^ 3) - 9 * u ^ 4 * v ^ 4 * w ^ 4) + 6 * u ^ 6 * v ^ 2 * w ^ 4 + 8 * u ^ 6 * v ^ 3 * w ^ 3 + 6 * u ^ 6 * v ^ 4 * w ^ 2 + 3 * u ^ 8 * v ^ 4 + 3 * u ^ 8 * w ^ 4, (((((((((((-2 * u ^ 8 * v ^ 9 * w ^ 10 - 2 * u ^ 8 * v ^ 10 * w ^ 9) + u ^ 9 * v ^ 6 * w ^ 12) - 4 * u ^ 9 * v ^ 9 * w ^ 9) + u ^ 9 * v ^ 12 * w ^ 6 + 6 * u ^ 10 * v ^ 8 * w ^ 9 + 6 * u ^ 10 * v ^ 9 * w ^ 8) - 4 * u ^ 11 * v ^ 6 * w ^ 10) - 4 * u ^ 11 * v ^ 7 * w ^ 9) + 9 * u ^ 11 * v ^ 8 * w ^ 8) - 4 * u ^ 11 * v ^ 9 * w ^ 7) - 4 * u ^ 11 * v ^ 10 * w ^ 6) - 4 * u ^ 12 * v ^ 6 * w ^ 9) - 4 * u ^ 12 * v ^ 9 * w ^ 6) + 2 * u ^ 14 * v ^ 6 * w ^ 7 + 2 * u ^ 14 * v ^ 7 * w ^ 6 + u ^ 15 * v ^ 6 * w ^ 6, 0, ((((((((((((((((((-(u ^ 16) * v ^ 15 * w ^ 17 - 2 * u ^ 16 * v ^ 16 * w ^ 16) - u ^ 16 * v ^ 17 * w ^ 15) + u ^ 17 * v ^ 12 * w ^ 19) - 2 * u ^ 17 * v ^ 15 * w ^ 16) - 2 * u ^ 17 * v ^ 16 * w ^ 15) + u ^ 17 * v ^ 19 * w ^ 12 + 2 * u ^ 18 * v ^ 14 * w ^ 16 + 4 * u ^ 18 * v ^ 15 * w ^ 15 + 2 * u ^ 18 * v ^ 16 * w ^ 14) - 2 * u ^ 19 * v ^ 12 * w ^ 17) - 2 * u ^ 19 * v ^ 13 * w ^ 16) + 5 * u ^ 19 * v ^ 14 * w ^ 15 + 5 * u ^ 19 * v ^ 15 * w ^ 14) - 2 * u ^ 19 * v ^ 16 * w ^ 13) - 2 * u ^ 19 * v ^ 17 * w ^ 12) - 4 * u ^ 20 * v ^ 12 * w ^ 16) - 2 * u ^ 20 * v ^ 13 * w ^ 15) + 3 * u ^ 20 * v ^ 14 * w ^ 14) - 2 * u ^ 20 * v ^ 15 * w ^ 13) - 4 * u ^ 20 * v ^ 16 * w ^ 12) - 2 * u ^ 21 * v ^ 12 * w ^ 15) - 2 * u ^ 21 * v ^ 15 * w ^ 12) + 2 * u ^ 23 * v ^ 12 * w ^ 13 + 2 * u ^ 23 * v ^ 13 * w ^ 12 + u ^ 24 * v ^ 12 * w ^ 12, ((8 * u ^ 6 * v ^ 6 * w ^ 12 + 8 * u ^ 6 * v ^ 12 * w ^ 6) - 9 * u ^ 8 * v ^ 8 * w ^ 8) + 6 * u ^ 12 * v ^ 4 * w ^ 8 + 8 * u ^ 12 * v ^ 6 * w ^ 6 + 6 * u ^ 12 * v ^ 8 * w ^ 4 + 3 * u ^ 16 * v ^ 8 + 3 * u ^ 16 * w ^ 8, 5 * u ^ 24 * v ^ 18 * w ^ 21 + 5 * u ^ 24 * v ^ 19 * w ^ 20 + 5 * u ^ 24 * v ^ 20 * w ^ 19 + 5 * u ^ 24 * v ^ 21 * w ^ 18 + 8 * u ^ 25 * v ^ 18 * w ^ 20 + 8 * u ^ 25 * v ^ 20 * w ^ 18 + 8 * u ^ 26 * v ^ 18 * w ^ 19 + 8 * u ^ 26 * v ^ 19 * w ^ 18 + 8 * u ^ 27 * v ^ 18 * w ^ 18, u ^ 8 * v ^ 7 * w ^ 9 + u ^ 8 * v ^ 9 * w ^ 7 + 2 * u ^ 9 * v ^ 6 * w ^ 9 + 2 * u ^ 9 * v ^ 7 * w ^ 8 + 2 * u ^ 9 * v ^ 8 * w ^ 7 + 2 * u ^ 9 * v ^ 9 * w ^ 6 + 3 * u ^ 10 * v ^ 6 * w ^ 8 + 2 * u ^ 10 * v ^ 7 * w ^ 7 + 3 * u ^ 10 * v ^ 8 * w ^ 6 + 2 * u ^ 11 * v ^ 6 * w ^ 7 + 2 * u ^ 11 * v ^ 7 * w ^ 6 + u ^ 12 * v ^ 6 * w ^ 6, (-(u ^ 18) * v ^ 14 * w ^ 16 - u ^ 18 * v ^ 16 * w ^ 14) - u ^ 20 * v ^ 14 * w ^ 14, (((((((((((-2 * u ^ 8 * v ^ 9 * w ^ 11 - 2 * u ^ 8 * v ^ 11 * w ^ 9) + u ^ 10 * v ^ 6 * w ^ 12 + 6 * u ^ 10 * v ^ 8 * w ^ 10) - 4 * u ^ 10 * v ^ 9 * w ^ 9) + 6 * u ^ 10 * v ^ 10 * w ^ 8 + u ^ 10 * v ^ 12 * w ^ 6) - 4 * u ^ 11 * v ^ 6 * w ^ 11) - 4 * u ^ 11 * v ^ 8 * w ^ 9) - 4 * u ^ 11 * v ^ 9 * w ^ 8) - 4 * u ^ 11 * v ^ 11 * w ^ 6) + 9 * u ^ 12 * v ^ 8 * w ^ 8) - 4 * u ^ 13 * v ^ 6 * w ^ 9) - 4 * u ^ 13 * v ^ 9 * w ^ 6) + 2 * u ^ 14 * v ^ 6 * w ^ 8 + 2 * u ^ 14 * v ^ 8 * w ^ 6 + u ^ 16 * v ^ 6 * w ^ 6, ((((u ^ 25 * v ^ 18 * w ^ 21 - 2 * u ^ 25 * v ^ 19 * w ^ 20) - 2 * u ^ 25 * v ^ 20 * w ^ 19) + u ^ 25 * v ^ 21 * w ^ 18) - 3 * u ^ 26 * v ^ 19 * w ^ 19) + 2 * u ^ 27 * v ^ 18 * w ^ 19 + 2 * u ^ 27 * v ^ 19 * w ^ 18 + u ^ 28 * v ^ 18 * w ^ 18, ((u ^ 16 * v ^ 12 * w ^ 15 + u ^ 16 * v ^ 15 * w ^ 12) - 7 * u ^ 17 * v ^ 13 * w ^ 13) + 5 * u ^ 19 * v ^ 12 * w ^ 12, (((-2 * u ^ 33 * v ^ 25 * w ^ 27 - 2 * u ^ 33 * v ^ 27 * w ^ 25) + u ^ 34 * v ^ 24 * w ^ 27 + u ^ 34 * v ^ 27 * w ^ 24 + 2 * u ^ 35 * v ^ 24 * w ^ 26) - 3 * u ^ 35 * v ^ 25 * w ^ 25) + 2 * u ^ 35 * v ^ 26 * w ^ 24 + u ^ 37 * v ^ 24 * w ^ 24, ((u ^ 32 * v ^ 24 * w ^ 27 + u ^ 32 * v ^ 27 * w ^ 24) - 7 * u ^ 33 * v ^ 25 * w ^ 25) + 5 * u ^ 35 * v ^ 24 * w ^ 24, (((-2 * u ^ 25 * v ^ 19 * w ^ 21 - 2 * u ^ 25 * v ^ 21 * w ^ 19) + u ^ 26 * v ^ 18 * w ^ 21 + u ^ 26 * v ^ 21 * w ^ 18 + 2 * u ^ 27 * v ^ 18 * w ^ 20) - 3 * u ^ 27 * v ^ 19 * w ^ 19) + 2 * u ^ 27 * v ^ 20 * w ^ 18 + u ^ 29 * v ^ 18 * w ^ 18, ((3 * u ^ 10 * v ^ 8 * w ^ 8 + 2 * u ^ 11 * v ^ 7 * w ^ 8 + 2 * u ^ 11 * v ^ 8 * w ^ 7) - u ^ 12 * v ^ 6 * w ^ 8) - u ^ 12 * v ^ 8 * w ^ 6, (((((((((((-2 * u ^ 16 * v ^ 15 * w ^ 16 - 2 * u ^ 16 * v ^ 16 * w ^ 15) + u ^ 17 * v ^ 12 * w ^ 18) - 4 * u ^ 17 * v ^ 15 * w ^ 15) + u ^ 17 * v ^ 18 * w ^ 12 + 6 * u ^ 18 * v ^ 14 * w ^ 15 + 6 * u ^ 18 * v ^ 15 * w ^ 14) - 4 * u ^ 19 * v ^ 12 * w ^ 16) - 4 * u ^ 19 * v ^ 13 * w ^ 15) + 9 * u ^ 19 * v ^ 14 * w ^ 14) - 4 * u ^ 19 * v ^ 15 * w ^ 13) - 4 * u ^ 19 * v ^ 16 * w ^ 12) - 4 * u ^ 20 * v ^ 12 * w ^ 15) - 4 * u ^ 20 * v ^ 15 * w ^ 12) + 2 * u ^ 22 * v ^ 12 * w ^ 13 + 2 * u ^ 22 * v ^ 13 * w ^ 12 + u ^ 23 * v ^ 12 * w ^ 12, ((((u ^ 8 * v ^ 6 * w ^ 12 - 8 * u ^ 8 * v ^ 9 * w ^ 9) + u ^ 8 * v ^ 12 * w ^ 6 + 21 * u ^ 10 * v ^ 8 * w ^ 8) - 12 * u ^ 11 * v ^ 6 * w ^ 9) - 12 * u ^ 11 * v ^ 9 * w ^ 6) + 5 * u ^ 14 * v ^ 6 * w ^ 6, u ^ 8 * v ^ 7 * w ^ 8 + u ^ 8 * v ^ 8 * w ^ 7 + 3 * u ^ 9 * v ^ 6 * w ^ 8 + 6 * u ^ 9 * v ^ 7 * w ^ 7 + 3 * u ^ 9 * v ^ 8 * w ^ 6 + 4 * u ^ 10 * v ^ 6 * w ^ 7 + 4 * u ^ 10 * v ^ 7 * w ^ 6 + u ^ 11 * v ^ 6 * w ^ 6, u ^ 16 * v ^ 12 * w ^ 14 + 4 * u ^ 16 * v ^ 13 * w ^ 13 + u ^ 16 * v ^ 14 * w ^ 12 + 6 * u ^ 17 * v ^ 12 * w ^ 13 + 6 * u ^ 17 * v ^ 13 * w ^ 12 + 5 * u ^ 18 * v ^ 12 * w ^ 12, 4 * u ^ 12 * v ^ 9 * w ^ 9, 18 * u ^ 32 * v ^ 24 * w ^ 26 + 18 * u ^ 32 * v ^ 26 * w ^ 24 + 24 * u ^ 34 * v ^ 24 * w ^ 24, u ^ 8 * v ^ 6 * w ^ 8 + 4 * u ^ 8 * v ^ 7 * w ^ 7 + u ^ 8 * v ^ 8 * w ^ 6 + 6 * u ^ 9 * v ^ 6 * w ^ 7 + 6 * u ^ 9 * v ^ 7 * w ^ 6 + 5 * u ^ 10 * v ^ 6 * w ^ 6, ((((u ^ 16 * v ^ 12 * w ^ 18 - 8 * u ^ 16 * v ^ 15 * w ^ 15) + u ^ 16 * v ^ 18 * w ^ 12 + 21 * u ^ 18 * v ^ 14 * w ^ 14) - 12 * u ^ 19 * v ^ 12 * w ^ 15) - 12 * u ^ 19 * v ^ 15 * w ^ 12) + 5 * u ^ 22 * v ^ 12 * w ^ 12, 5 * u ^ 8 * v ^ 6 * w ^ 8 + 10 * u ^ 8 * v ^ 7 * w ^ 7 + 5 * u ^ 8 * v ^ 8 * w ^ 6 + 16 * u ^ 9 * v ^ 6 * w ^ 7 + 16 * u ^ 9 * v ^ 7 * w ^ 6 + 8 * u ^ 10 * v ^ 6 * w ^ 6, u ^ 16 * v ^ 13 * w ^ 14 + u ^ 16 * v ^ 14 * w ^ 13 + 3 * u ^ 17 * v ^ 12 * w ^ 14 + 6 * u ^ 17 * v ^ 13 * w ^ 13 + 3 * u ^ 17 * v ^ 14 * w ^ 12 + 4 * u ^ 18 * v ^ 12 * w ^ 13 + 4 * u ^ 18 * v ^ 13 * w ^ 12 + u ^ 19 * v ^ 12 * w ^ 12, ((u ^ 24 * v ^ 18 * w ^ 21 + u ^ 24 * v ^ 21 * w ^ 18) - 7 * u ^ 25 * v ^ 19 * w ^ 19) + 5 * u ^ 27 * v ^ 18 * w ^ 18, 18 * u ^ 40 * v ^ 30 * w ^ 32 + 18 * u ^ 40 * v ^ 32 * w ^ 30 + 24 * u ^ 42 * v ^ 30 * w ^ 30, 5 * u ^ 16 * v ^ 12 * w ^ 14 + 10 * u ^ 16 * v ^ 13 * w ^ 13 + 5 * u ^ 16 * v ^ 14 * w ^ 12 + 16 * u ^ 17 * v ^ 12 * w ^ 13 + 16 * u ^ 17 * v ^ 13 * w ^ 12 + 8 * u ^ 18 * v ^ 12 * w ^ 12, 18 * u ^ 8 * v ^ 6 * w ^ 7 + 18 * u ^ 8 * v ^ 7 * w ^ 6 + 24 * u ^ 9 * v ^ 6 * w ^ 6, 60 * u ^ 8 * v ^ 6 * w ^ 6, 5 * u ^ 24 * v ^ 18 * w ^ 20 + 10 * u ^ 24 * v ^ 19 * w ^ 19 + 5 * u ^ 24 * v ^ 20 * w ^ 18 + 16 * u ^ 25 * v ^ 18 * w ^ 19 + 16 * u ^ 25 * v ^ 19 * w ^ 18 + 8 * u ^ 26 * v ^ 18 * w ^ 18, 18 * u ^ 24 * v ^ 18 * w ^ 20 + 18 * u ^ 24 * v ^ 20 * w ^ 18 + 24 * u ^ 26 * v ^ 18 * w ^ 18, 18 * u ^ 16 * v ^ 12 * w ^ 13 + 18 * u ^ 16 * v ^ 13 * w ^ 12 + 24 * u ^ 17 * v ^ 12 * w ^ 12, 18 * u ^ 24 * v ^ 18 * w ^ 19 + 18 * u ^ 24 * v ^ 19 * w ^ 18 + 24 * u ^ 25 * v ^ 18 * w ^ 18, 60 * u ^ 40 * v ^ 30 * w ^ 30, 60 * u ^ 24 * v ^ 18 * w ^ 18, 60 * u ^ 16 * v ^ 12 * w ^ 12, 60 * u ^ 32 * v ^ 24 * w ^ 24]
            end
        f60c = function (u, v, w)
                return [60, 24u + 21v + 15w, 8 * u * v + 4 * u * w + 3 * v * w + 4 * u ^ 2 + 2 * v ^ 2, 16 * u * v + 12 * u * w + 10 * v * w + 10 * u ^ 2 + 8 * v ^ 2 + 4 * w ^ 2, 24 * u ^ 2 + 21 * v ^ 2 + 15 * w ^ 2, -8 * u * v * w + 4 * u ^ 3 + 2 * v ^ 3, 4 * u * v * w + 4 * u * v ^ 2 + u * w ^ 2 + v * w ^ 2 + 4 * u ^ 2 * v + 3 * u ^ 2 * w + v ^ 2 * w + 2 * u ^ 3 + v ^ 3, u ^ 2 * v, 8 * u * v ^ 2 + 6 * u * w ^ 2 + 5 * v * w ^ 2 + 8 * u ^ 2 * v + 6 * u ^ 2 * w + 5 * v ^ 2 * w + 10 * u ^ 3 + 8 * v ^ 3 + 4 * w ^ 3, (-u * v ^ 2 * w - u ^ 2 * v * w) - u ^ 2 * v ^ 2, (((((((((((((((((((((-(u ^ 3) * v ^ 9 * w ^ 7 - u ^ 3 * v ^ 10 * w ^ 6) + u ^ 3 * v ^ 13 * w ^ 3 + u ^ 4 * v ^ 7 * w ^ 8 + u ^ 4 * v ^ 8 * w ^ 7 + u ^ 4 * v ^ 13 * w ^ 2 + u ^ 5 * v ^ 8 * w ^ 6 + u ^ 5 * v ^ 9 * w ^ 5 + 2 * u ^ 6 * v ^ 8 * w ^ 5 + u ^ 6 * v ^ 9 * w ^ 4) - u ^ 6 * v ^ 10 * w ^ 3) + u ^ 7 * v ^ 4 * w ^ 8 + 2 * u ^ 7 * v ^ 8 * w ^ 4) - u ^ 7 * v ^ 9 * w ^ 3) - u ^ 7 * v ^ 10 * w ^ 2) + 2 * u ^ 8 * v ^ 4 * w ^ 7 + 2 * u ^ 8 * v ^ 5 * w ^ 6 + 2 * u ^ 8 * v ^ 6 * w ^ 5 + 2 * u ^ 8 * v ^ 7 * w ^ 4) - u ^ 8 * v ^ 9 * w ^ 2) - u ^ 9 * v ^ 2 * w ^ 8) - u ^ 9 * v ^ 3 * w ^ 7) + u ^ 9 * v ^ 4 * w ^ 6 + u ^ 9 * v ^ 5 * w ^ 5 + u ^ 9 * v ^ 6 * w ^ 4) - u ^ 9 * v ^ 7 * w ^ 3) - u ^ 9 * v ^ 8 * w ^ 2) - u ^ 9 * v ^ 10) - u ^ 10 * v ^ 2 * w ^ 7) - u ^ 10 * v ^ 3 * w ^ 6) - u ^ 10 * v ^ 6 * w ^ 3) - u ^ 10 * v ^ 7 * w ^ 2) - u ^ 10 * v ^ 9) - u ^ 11 * v ^ 8) - u ^ 12 * v ^ 7) + u ^ 13 * v ^ 2 * w ^ 4 + u ^ 13 * v ^ 3 * w ^ 3 + u ^ 13 * v ^ 4 * w ^ 2 + u ^ 15 * v ^ 4, 2 * u * v * w ^ 2 + u * v ^ 2 * w + 3 * u * v ^ 3 + u * w ^ 3 + v * w ^ 3 + u ^ 2 * v * w + 2 * u ^ 2 * v ^ 2 + u ^ 2 * w ^ 2 + 3 * u ^ 3 * v + 2 * u ^ 3 * w + v ^ 3 * w + 2 * u ^ 4 + v ^ 4, 0, 16 * u ^ 2 * v ^ 2 + 12 * u ^ 2 * w ^ 2 + 10 * v ^ 2 * w ^ 2 + 10 * u ^ 4 + 8 * v ^ 4 + 4 * w ^ 4, (((((((8 * u ^ 2 * v ^ 2 * w ^ 3 + 8 * u ^ 2 * v ^ 3 * w ^ 2 + 8 * u ^ 3 * v ^ 2 * w ^ 2) - 8 * u ^ 3 * v ^ 4) - 4 * u ^ 3 * w ^ 4) - 3 * v ^ 3 * w ^ 4) - 8 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - 3 * v ^ 4 * w ^ 3) + 4 * u ^ 7 + 2 * v ^ 7, (((-2 * u * v * w ^ 2 - 3 * u * v ^ 2 * w) + u * v ^ 3) - 3 * u ^ 2 * v * w) + u ^ 3 * v + u ^ 3 * w + 2 * u ^ 4 + v ^ 4, (((((((((((-2 * u * v * w ^ 3 + 3 * u * v ^ 2 * w ^ 2) - 3 * u * v ^ 3 * w) - 2 * u * v ^ 4) - u * w ^ 4) - v * w ^ 4) + 3 * u ^ 2 * v * w ^ 2 + 2 * u ^ 2 * v ^ 2 * w + v ^ 2 * w ^ 3) - 3 * u ^ 3 * v * w) + 2 * u ^ 3 * w ^ 2 + 2 * v ^ 3 * w ^ 2) - 2 * u ^ 4 * v) - u ^ 4 * w) - v ^ 4 * w) + 2 * u ^ 5 + v ^ 5, 0, (-(u ^ 2) * v ^ 4 * w ^ 2 - u ^ 4 * v ^ 2 * w ^ 2) - u ^ 4 * v ^ 4, 0, (((((u ^ 6 * v ^ 13 * w ^ 7 + u ^ 6 * v ^ 14 * w ^ 6 + u ^ 7 * v ^ 13 * w ^ 6) - u ^ 8 * v ^ 9 * w ^ 9) + u ^ 8 * v ^ 14 * w ^ 4) - u ^ 9 * v ^ 8 * w ^ 9) - u ^ 9 * v ^ 9 * w ^ 8) + u ^ 9 * v ^ 13 * w ^ 4 + u ^ 13 * v ^ 4 * w ^ 9 + u ^ 13 * v ^ 6 * w ^ 7 + u ^ 13 * v ^ 7 * w ^ 6 + u ^ 13 * v ^ 9 * w ^ 4 + u ^ 13 * v ^ 13 + u ^ 14 * v ^ 4 * w ^ 8 + u ^ 14 * v ^ 6 * w ^ 6 + u ^ 14 * v ^ 8 * w ^ 4 + u ^ 17 * v ^ 9 + u ^ 18 * v ^ 8, (((-2 * u * v * w ^ 3 - 3 * u * v ^ 3 * w) + u ^ 2 * v ^ 3) - 3 * u ^ 3 * v * w) + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2 + 2 * u ^ 5 + v ^ 5, u ^ 9 * v ^ 9 * w ^ 6 + u ^ 10 * v ^ 8 * w ^ 6 + u ^ 10 * v ^ 9 * w ^ 5, u ^ 10 * v ^ 5, u ^ 42 * v ^ 39 * w ^ 27 + u ^ 44 * v ^ 37 * w ^ 27 + u ^ 44 * v ^ 39 * w ^ 25, (((((((((((-2 * u ^ 3 * v ^ 9 * w ^ 6 + u ^ 3 * v ^ 12 * w ^ 3 + 2 * u ^ 4 * v ^ 7 * w ^ 7 + u ^ 4 * v ^ 12 * w ^ 2 + 3 * u ^ 5 * v ^ 8 * w ^ 5 + 3 * u ^ 6 * v ^ 8 * w ^ 4) - 2 * u ^ 6 * v ^ 9 * w ^ 3) + 2 * u ^ 7 * v ^ 4 * w ^ 7 + 2 * u ^ 7 * v ^ 7 * w ^ 4) - 2 * u ^ 7 * v ^ 9 * w ^ 2) + 3 * u ^ 8 * v ^ 4 * w ^ 6 + 3 * u ^ 8 * v ^ 5 * w ^ 5 + 3 * u ^ 8 * v ^ 6 * w ^ 4) - 2 * u ^ 9 * v ^ 2 * w ^ 7) - 2 * u ^ 9 * v ^ 3 * w ^ 6) - 2 * u ^ 9 * v ^ 6 * w ^ 3) - 2 * u ^ 9 * v ^ 7 * w ^ 2) - 2 * u ^ 9 * v ^ 9) - 2 * u ^ 11 * v ^ 7) + u ^ 12 * v ^ 2 * w ^ 4 + u ^ 12 * v ^ 3 * w ^ 3 + u ^ 12 * v ^ 4 * w ^ 2 + u ^ 14 * v ^ 4, ((6 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 2 * v ^ 3 * w + 2 * u ^ 3 * v * w ^ 2 + 2 * u ^ 3 * v ^ 2 * w) - 2 * u ^ 3 * v ^ 3) - u ^ 4 * v ^ 2, 0, (((((((((((((((((-u * v ^ 2 * w ^ 3 - 2 * u * v ^ 3 * w ^ 2) - 3 * u * v ^ 5) - u * w ^ 5) - v * w ^ 5) - u ^ 2 * v * w ^ 3) + 8 * u ^ 2 * v ^ 2 * w ^ 2) - u ^ 2 * v ^ 3 * w) + 4 * u ^ 2 * v ^ 4 + 2 * u ^ 2 * w ^ 4 + 2 * v ^ 2 * w ^ 4) - 2 * u ^ 3 * v * w ^ 2) - u ^ 3 * v ^ 2 * w) - 6 * u ^ 3 * v ^ 3) - 3 * u ^ 3 * w ^ 3) - 2 * v ^ 3 * w ^ 3) + 4 * u ^ 4 * v ^ 2 + 4 * u ^ 4 * w ^ 2 + 3 * v ^ 4 * w ^ 2) - 3 * u ^ 5 * v) - 2 * u ^ 5 * w) - v ^ 5 * w) + 2 * u ^ 6 + v ^ 6, 0, (((24 * u ^ 2 * v ^ 2 * w ^ 2 - 16 * u ^ 3 * v ^ 3) - 8 * u ^ 3 * w ^ 3) - 6 * v ^ 3 * w ^ 3) + 4 * u ^ 6 + 2 * v ^ 6, (-2 * u ^ 40 * v ^ 38 * w ^ 25 + 8 * u ^ 41 * v ^ 36 * w ^ 26) - 4 * u ^ 43 * v ^ 35 * w ^ 25, ((((((((((((((((((((-(u ^ 6) * v ^ 15 * w ^ 10 - u ^ 6 * v ^ 16 * w ^ 9) + u ^ 6 * v ^ 19 * w ^ 6 + u ^ 8 * v ^ 11 * w ^ 12 + u ^ 8 * v ^ 12 * w ^ 11 + u ^ 8 * v ^ 14 * w ^ 9 + u ^ 8 * v ^ 15 * w ^ 8 + u ^ 8 * v ^ 19 * w ^ 4 + u ^ 9 * v ^ 14 * w ^ 8) - u ^ 9 * v ^ 16 * w ^ 6) + u ^ 10 * v ^ 14 * w ^ 7 + u ^ 11 * v ^ 8 * w ^ 12 + u ^ 11 * v ^ 12 * w ^ 8 + u ^ 11 * v ^ 14 * w ^ 6) - u ^ 11 * v ^ 16 * w ^ 4) + u ^ 12 * v ^ 8 * w ^ 11 + u ^ 12 * v ^ 11 * w ^ 8) - u ^ 12 * v ^ 15 * w ^ 4) + u ^ 14 * v ^ 6 * w ^ 11 + u ^ 14 * v ^ 7 * w ^ 10 + u ^ 14 * v ^ 8 * w ^ 9 + u ^ 14 * v ^ 9 * w ^ 8 + u ^ 14 * v ^ 10 * w ^ 7 + u ^ 14 * v ^ 11 * w ^ 6) - u ^ 15 * v ^ 4 * w ^ 12) + u ^ 15 * v ^ 8 * w ^ 8) - u ^ 15 * v ^ 12 * w ^ 4) - u ^ 15 * v ^ 16) - u ^ 16 * v ^ 4 * w ^ 11) - u ^ 16 * v ^ 6 * w ^ 9) - u ^ 16 * v ^ 9 * w ^ 6) - u ^ 16 * v ^ 11 * w ^ 4) - u ^ 16 * v ^ 15) + u ^ 19 * v ^ 4 * w ^ 8 + u ^ 19 * v ^ 6 * w ^ 6 + u ^ 19 * v ^ 8 * w ^ 4) - u ^ 19 * v ^ 12) - u ^ 20 * v ^ 11) + u ^ 23 * v ^ 8, 0, 0, ((((((((((-2 * u * v ^ 3 * w ^ 3 + u * v ^ 6 + 6 * u ^ 2 * v ^ 2 * w ^ 3 + 9 * u ^ 2 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v * w ^ 3) + 9 * u ^ 3 * v ^ 2 * w ^ 2) - 4 * u ^ 3 * v ^ 3 * w) - 6 * u ^ 3 * v ^ 4) - 2 * u ^ 3 * w ^ 4) - 2 * v ^ 3 * w ^ 4) - 6 * u ^ 4 * v ^ 3) - 4 * u ^ 4 * w ^ 3) - 2 * v ^ 4 * w ^ 3) + u ^ 6 * v + u ^ 6 * w + 2 * u ^ 7 + v ^ 7, u ^ 10 * v ^ 11 * w ^ 7 + u ^ 12 * v ^ 9 * w ^ 7 + u ^ 12 * v ^ 11 * w ^ 5, (((((-(u ^ 8) * v ^ 12 * w ^ 5 + 2 * u ^ 9 * v ^ 8 * w ^ 8 + 3 * u ^ 9 * v ^ 10 * w ^ 6) - u ^ 10 * v ^ 10 * w ^ 5) - u ^ 11 * v ^ 7 * w ^ 7) + 3 * u ^ 11 * v ^ 8 * w ^ 6) - u ^ 11 * v ^ 9 * w ^ 5) - 2 * u ^ 13 * v ^ 7 * w ^ 5, u ^ 26 * v ^ 25 * w ^ 17 + u ^ 28 * v ^ 23 * w ^ 17 + u ^ 28 * v ^ 25 * w ^ 15, (((((2 * u ^ 3 * v ^ 7 * w ^ 4 + 2 * u ^ 3 * v ^ 8 * w ^ 3) - 2 * u ^ 4 * v ^ 5 * w ^ 5) + 2 * u ^ 4 * v ^ 6 * w ^ 4 + 4 * u ^ 4 * v ^ 7 * w ^ 3 + u ^ 4 * v ^ 8 * w ^ 2) - 2 * u ^ 5 * v ^ 4 * w ^ 5) - 2 * u ^ 5 * v ^ 5 * w ^ 4) + 2 * u ^ 5 * v ^ 7 * w ^ 2 + u ^ 6 * v ^ 2 * w ^ 6 + 2 * u ^ 6 * v ^ 4 * w ^ 4 + 2 * u ^ 6 * v ^ 6 * w ^ 2 + u ^ 6 * v ^ 8 + 2 * u ^ 7 * v ^ 2 * w ^ 5 + 4 * u ^ 7 * v ^ 3 * w ^ 4 + 4 * u ^ 7 * v ^ 4 * w ^ 3 + 2 * u ^ 7 * v ^ 5 * w ^ 2 + u ^ 8 * v ^ 2 * w ^ 4 + 2 * u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + u ^ 8 * v ^ 6 + 2 * u ^ 9 * v ^ 5 + u ^ 10 * v ^ 4, 0, 0, (-2 * u ^ 8 * v ^ 10 * w ^ 5 + 8 * u ^ 9 * v ^ 8 * w ^ 6) - 4 * u ^ 11 * v ^ 7 * w ^ 5, (((((u ^ 3 * v ^ 7 * w ^ 4 + u ^ 3 * v ^ 8 * w ^ 3) - u ^ 4 * v ^ 5 * w ^ 5) + u ^ 4 * v ^ 7 * w ^ 3 + u ^ 4 * v ^ 8 * w ^ 2) - u ^ 5 * v ^ 4 * w ^ 5) - u ^ 5 * v ^ 5 * w ^ 4) + u ^ 5 * v ^ 7 * w ^ 2 + u ^ 7 * v ^ 2 * w ^ 5 + u ^ 7 * v ^ 3 * w ^ 4 + u ^ 7 * v ^ 4 * w ^ 3 + u ^ 7 * v ^ 5 * w ^ 2 + u ^ 7 * v ^ 7 + u ^ 8 * v ^ 2 * w ^ 4 + u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + u ^ 9 * v ^ 5 + u ^ 10 * v ^ 4, (((((-(u ^ 40) * v ^ 39 * w ^ 25 + 2 * u ^ 41 * v ^ 36 * w ^ 27 + 3 * u ^ 41 * v ^ 37 * w ^ 26) - u ^ 41 * v ^ 38 * w ^ 25) + 3 * u ^ 42 * v ^ 36 * w ^ 26) - u ^ 43 * v ^ 35 * w ^ 26) - u ^ 43 * v ^ 36 * w ^ 25) - 2 * u ^ 44 * v ^ 35 * w ^ 25, u ^ 41 * v ^ 37 * w ^ 26 + u ^ 42 * v ^ 36 * w ^ 26 + u ^ 42 * v ^ 37 * w ^ 25, (((((((((((6 * u ^ 2 * v ^ 2 * w ^ 4 - 2 * u ^ 2 * v ^ 3 * w ^ 3) + 9 * u ^ 2 * v ^ 4 * w ^ 2 + u ^ 2 * v ^ 6) - 2 * u ^ 3 * v ^ 2 * w ^ 3) - 4 * u ^ 3 * v ^ 3 * w ^ 2) - 6 * u ^ 3 * v ^ 5) - 2 * u ^ 3 * w ^ 5) - 2 * v ^ 3 * w ^ 5) + 9 * u ^ 4 * v ^ 2 * w ^ 2) - 6 * u ^ 5 * v ^ 3) - 4 * u ^ 5 * w ^ 3) - 2 * v ^ 5 * w ^ 3) + u ^ 6 * v ^ 2 + u ^ 6 * w ^ 2 + 2 * u ^ 8 + v ^ 8, (-15 * u ^ 40 * v ^ 35 * w ^ 26 - 21 * u ^ 40 * v ^ 36 * w ^ 25) - 24 * u ^ 41 * v ^ 35 * w ^ 25, (((((-(u ^ 8) * v ^ 11 * w ^ 5 + 2 * u ^ 9 * v ^ 8 * w ^ 7 + 3 * u ^ 9 * v ^ 9 * w ^ 6) - u ^ 9 * v ^ 10 * w ^ 5) + 3 * u ^ 10 * v ^ 8 * w ^ 6) - u ^ 11 * v ^ 7 * w ^ 6) - u ^ 11 * v ^ 8 * w ^ 5) - 2 * u ^ 12 * v ^ 7 * w ^ 5, (-(u ^ 33) * v ^ 30 * w ^ 21 - u ^ 34 * v ^ 29 * w ^ 21) - u ^ 34 * v ^ 30 * w ^ 20, 0, (((((-(u ^ 40) * v ^ 40 * w ^ 25 + 2 * u ^ 41 * v ^ 36 * w ^ 28 + 3 * u ^ 41 * v ^ 38 * w ^ 26) - u ^ 42 * v ^ 38 * w ^ 25) - u ^ 43 * v ^ 35 * w ^ 27) + 3 * u ^ 43 * v ^ 36 * w ^ 26) - u ^ 43 * v ^ 37 * w ^ 25) - 2 * u ^ 45 * v ^ 35 * w ^ 25, ((((-4 * u ^ 8 * v ^ 7 * w ^ 9 - 10 * u ^ 8 * v ^ 9 * w ^ 7) - 8 * u ^ 8 * v ^ 11 * w ^ 5) - 12 * u ^ 10 * v ^ 7 * w ^ 7) - 16 * u ^ 10 * v ^ 9 * w ^ 5) - 10 * u ^ 12 * v ^ 7 * w ^ 5, (-15 * u ^ 8 * v ^ 7 * w ^ 7 - 21 * u ^ 8 * v ^ 9 * w ^ 5) - 24 * u ^ 10 * v ^ 7 * w ^ 5, u ^ 25 * v ^ 23 * w ^ 16 + u ^ 26 * v ^ 22 * w ^ 16 + u ^ 26 * v ^ 23 * w ^ 15, (((((((-4 * u ^ 40 * v ^ 35 * w ^ 28 - 5 * u ^ 40 * v ^ 36 * w ^ 27) - 5 * u ^ 40 * v ^ 37 * w ^ 26) - 8 * u ^ 40 * v ^ 38 * w ^ 25) - 6 * u ^ 41 * v ^ 35 * w ^ 27) - 8 * u ^ 41 * v ^ 37 * w ^ 25) - 6 * u ^ 42 * v ^ 35 * w ^ 26) - 8 * u ^ 42 * v ^ 36 * w ^ 25) - 10 * u ^ 43 * v ^ 35 * w ^ 25, (((((2 * u ^ 3 * v ^ 6 * w ^ 4 + 4 * u ^ 3 * v ^ 7 * w ^ 3) - 2 * u ^ 4 * v ^ 4 * w ^ 5) - 2 * u ^ 4 * v ^ 5 * w ^ 4) + 3 * u ^ 4 * v ^ 6 * w ^ 3 + 3 * u ^ 4 * v ^ 7 * w ^ 2) - 2 * u ^ 5 * v ^ 4 * w ^ 4) + 2 * u ^ 5 * v ^ 6 * w ^ 2 + 2 * u ^ 6 * v ^ 2 * w ^ 5 + 3 * u ^ 6 * v ^ 3 * w ^ 4 + 3 * u ^ 6 * v ^ 4 * w ^ 3 + 2 * u ^ 6 * v ^ 5 * w ^ 2 + u ^ 6 * v ^ 7 + 3 * u ^ 7 * v ^ 2 * w ^ 4 + 4 * u ^ 7 * v ^ 3 * w ^ 3 + 3 * u ^ 7 * v ^ 4 * w ^ 2 + u ^ 7 * v ^ 6 + u ^ 8 * v ^ 5 + 2 * u ^ 9 * v ^ 4, 0, (-(u ^ 34) * v ^ 32 * w ^ 22 - u ^ 36 * v ^ 30 * w ^ 22) - u ^ 36 * v ^ 32 * w ^ 20, 0, (((((((-4 * u ^ 8 * v ^ 7 * w ^ 8 - 5 * u ^ 8 * v ^ 8 * w ^ 7) - 5 * u ^ 8 * v ^ 9 * w ^ 6) - 8 * u ^ 8 * v ^ 10 * w ^ 5) - 6 * u ^ 9 * v ^ 7 * w ^ 7) - 8 * u ^ 9 * v ^ 9 * w ^ 5) - 6 * u ^ 10 * v ^ 7 * w ^ 6) - 8 * u ^ 10 * v ^ 8 * w ^ 5) - 10 * u ^ 11 * v ^ 7 * w ^ 5, 0, ((((u ^ 16 * v ^ 18 * w ^ 10 - 2 * u ^ 17 * v ^ 15 * w ^ 12) - 3 * u ^ 17 * v ^ 16 * w ^ 11) + u ^ 17 * v ^ 17 * w ^ 10) - 3 * u ^ 18 * v ^ 15 * w ^ 11) + u ^ 19 * v ^ 14 * w ^ 11 + u ^ 19 * v ^ 15 * w ^ 10 + 2 * u ^ 20 * v ^ 14 * w ^ 10, (-(u ^ 17) * v ^ 16 * w ^ 11 - u ^ 18 * v ^ 15 * w ^ 11) - u ^ 18 * v ^ 16 * w ^ 10, (8 * u ^ 3 * v ^ 6 * w ^ 3 - 6 * u ^ 4 * v ^ 4 * w ^ 4) + 6 * u ^ 4 * v ^ 6 * w ^ 2 + 6 * u ^ 6 * v ^ 2 * w ^ 4 + 8 * u ^ 6 * v ^ 3 * w ^ 3 + 6 * u ^ 6 * v ^ 4 * w ^ 2 + 2 * u ^ 6 * v ^ 6 + 3 * u ^ 8 * v ^ 4, (((((((((((2 * u ^ 8 * v ^ 10 * w ^ 9 + 2 * u ^ 8 * v ^ 11 * w ^ 8) - u ^ 8 * v ^ 14 * w ^ 5) + 2 * u ^ 9 * v ^ 10 * w ^ 8) - u ^ 9 * v ^ 13 * w ^ 5) - 6 * u ^ 10 * v ^ 9 * w ^ 8) - 9 * u ^ 10 * v ^ 10 * w ^ 7) + 2 * u ^ 11 * v ^ 7 * w ^ 9 + 2 * u ^ 11 * v ^ 8 * w ^ 8) - 9 * u ^ 11 * v ^ 9 * w ^ 7) + 4 * u ^ 11 * v ^ 10 * w ^ 6 + 6 * u ^ 11 * v ^ 11 * w ^ 5 + 4 * u ^ 12 * v ^ 7 * w ^ 8 + 6 * u ^ 12 * v ^ 10 * w ^ 5) - u ^ 14 * v ^ 7 * w ^ 6) - u ^ 14 * v ^ 8 * w ^ 5) - 2 * u ^ 15 * v ^ 7 * w ^ 5, 0, ((((((((((((((((((-(u ^ 16) * v ^ 17 * w ^ 15 - 2 * u ^ 16 * v ^ 18 * w ^ 14) - u ^ 16 * v ^ 19 * w ^ 13) + u ^ 16 * v ^ 22 * w ^ 10) - u ^ 17 * v ^ 17 * w ^ 14) - u ^ 17 * v ^ 18 * w ^ 13) + u ^ 17 * v ^ 21 * w ^ 10 + 2 * u ^ 18 * v ^ 16 * w ^ 14 + 5 * u ^ 18 * v ^ 17 * w ^ 13 + 3 * u ^ 18 * v ^ 18 * w ^ 12) - u ^ 19 * v ^ 14 * w ^ 15) - u ^ 19 * v ^ 15 * w ^ 14) + 5 * u ^ 19 * v ^ 16 * w ^ 13 + 6 * u ^ 19 * v ^ 17 * w ^ 12) - 2 * u ^ 19 * v ^ 18 * w ^ 11) - 3 * u ^ 19 * v ^ 19 * w ^ 10) - 3 * u ^ 20 * v ^ 14 * w ^ 14) - u ^ 20 * v ^ 15 * w ^ 13) + 3 * u ^ 20 * v ^ 16 * w ^ 12) - 2 * u ^ 20 * v ^ 17 * w ^ 11) - 6 * u ^ 20 * v ^ 18 * w ^ 10) - 2 * u ^ 21 * v ^ 14 * w ^ 13) - 3 * u ^ 21 * v ^ 17 * w ^ 10) + u ^ 23 * v ^ 14 * w ^ 11 + u ^ 23 * v ^ 15 * w ^ 10 + 2 * u ^ 24 * v ^ 14 * w ^ 10, (8 * u ^ 6 * v ^ 12 * w ^ 6 - 6 * u ^ 8 * v ^ 8 * w ^ 8) + 6 * u ^ 8 * v ^ 12 * w ^ 4 + 6 * u ^ 12 * v ^ 4 * w ^ 8 + 8 * u ^ 12 * v ^ 6 * w ^ 6 + 6 * u ^ 12 * v ^ 8 * w ^ 4 + 2 * u ^ 12 * v ^ 12 + 3 * u ^ 16 * v ^ 8, (((((((-4 * u ^ 24 * v ^ 21 * w ^ 18 - 5 * u ^ 24 * v ^ 22 * w ^ 17) - 5 * u ^ 24 * v ^ 23 * w ^ 16) - 8 * u ^ 24 * v ^ 24 * w ^ 15) - 6 * u ^ 25 * v ^ 21 * w ^ 17) - 8 * u ^ 25 * v ^ 23 * w ^ 15) - 6 * u ^ 26 * v ^ 21 * w ^ 16) - 8 * u ^ 26 * v ^ 22 * w ^ 15) - 10 * u ^ 27 * v ^ 21 * w ^ 15, (((((((((((-(u ^ 8) * v ^ 8 * w ^ 8 - u ^ 8 * v ^ 10 * w ^ 6) - u ^ 8 * v ^ 11 * w ^ 5) - u ^ 9 * v ^ 7 * w ^ 8) - 2 * u ^ 9 * v ^ 8 * w ^ 7) - u ^ 9 * v ^ 9 * w ^ 6) - 3 * u ^ 9 * v ^ 10 * w ^ 5) - u ^ 10 * v ^ 7 * w ^ 7) - u ^ 10 * v ^ 8 * w ^ 6) - 2 * u ^ 10 * v ^ 9 * w ^ 5) - 2 * u ^ 11 * v ^ 7 * w ^ 6) - 3 * u ^ 11 * v ^ 8 * w ^ 5) - 2 * u ^ 12 * v ^ 7 * w ^ 5, (-(u ^ 18) * v ^ 18 * w ^ 12 - u ^ 20 * v ^ 16 * w ^ 12) - u ^ 20 * v ^ 18 * w ^ 10, (((((((((((2 * u ^ 8 * v ^ 10 * w ^ 10 + 2 * u ^ 8 * v ^ 12 * w ^ 8) - u ^ 8 * v ^ 15 * w ^ 5) - 6 * u ^ 10 * v ^ 9 * w ^ 9) + 2 * u ^ 10 * v ^ 10 * w ^ 8) - 9 * u ^ 10 * v ^ 11 * w ^ 7) - u ^ 10 * v ^ 13 * w ^ 5) + 2 * u ^ 11 * v ^ 7 * w ^ 10 + 2 * u ^ 11 * v ^ 9 * w ^ 8 + 4 * u ^ 11 * v ^ 10 * w ^ 7 + 6 * u ^ 11 * v ^ 12 * w ^ 5) - 9 * u ^ 12 * v ^ 9 * w ^ 7) + 4 * u ^ 13 * v ^ 7 * w ^ 8 + 6 * u ^ 13 * v ^ 10 * w ^ 5) - u ^ 14 * v ^ 7 * w ^ 7) - u ^ 14 * v ^ 9 * w ^ 5) - 2 * u ^ 16 * v ^ 7 * w ^ 5, (((((-(u ^ 24) * v ^ 25 * w ^ 15 + 2 * u ^ 25 * v ^ 22 * w ^ 17 + 3 * u ^ 25 * v ^ 23 * w ^ 16) - u ^ 25 * v ^ 24 * w ^ 15) + 3 * u ^ 26 * v ^ 22 * w ^ 16) - u ^ 27 * v ^ 21 * w ^ 16) - u ^ 27 * v ^ 22 * w ^ 15) - 2 * u ^ 28 * v ^ 21 * w ^ 15, (2 * u ^ 16 * v ^ 17 * w ^ 10 - 8 * u ^ 17 * v ^ 15 * w ^ 11) + 4 * u ^ 19 * v ^ 14 * w ^ 10, ((((u ^ 32 * v ^ 33 * w ^ 20 - 2 * u ^ 33 * v ^ 29 * w ^ 23) - 3 * u ^ 33 * v ^ 31 * w ^ 21) + u ^ 34 * v ^ 31 * w ^ 20 + u ^ 35 * v ^ 28 * w ^ 22) - 3 * u ^ 35 * v ^ 29 * w ^ 21) + u ^ 35 * v ^ 30 * w ^ 20 + 2 * u ^ 37 * v ^ 28 * w ^ 20, (2 * u ^ 32 * v ^ 31 * w ^ 20 - 8 * u ^ 33 * v ^ 29 * w ^ 21) + 4 * u ^ 35 * v ^ 28 * w ^ 20, (((((-(u ^ 24) * v ^ 26 * w ^ 15 + 2 * u ^ 25 * v ^ 22 * w ^ 18 + 3 * u ^ 25 * v ^ 24 * w ^ 16) - u ^ 26 * v ^ 24 * w ^ 15) - u ^ 27 * v ^ 21 * w ^ 17) + 3 * u ^ 27 * v ^ 22 * w ^ 16) - u ^ 27 * v ^ 23 * w ^ 15) - 2 * u ^ 29 * v ^ 21 * w ^ 15, (((-6 * u ^ 10 * v ^ 9 * w ^ 7 - 2 * u ^ 10 * v ^ 10 * w ^ 6) - 2 * u ^ 11 * v ^ 8 * w ^ 7) - 2 * u ^ 11 * v ^ 9 * w ^ 6) + 2 * u ^ 11 * v ^ 10 * w ^ 5 + u ^ 12 * v ^ 9 * w ^ 5, (((((((((((-2 * u ^ 16 * v ^ 17 * w ^ 14 - 2 * u ^ 16 * v ^ 18 * w ^ 13) + u ^ 16 * v ^ 21 * w ^ 10) - 2 * u ^ 17 * v ^ 17 * w ^ 13) + u ^ 17 * v ^ 20 * w ^ 10 + 6 * u ^ 18 * v ^ 16 * w ^ 13 + 9 * u ^ 18 * v ^ 17 * w ^ 12) - 2 * u ^ 19 * v ^ 14 * w ^ 14) - 2 * u ^ 19 * v ^ 15 * w ^ 13) + 9 * u ^ 19 * v ^ 16 * w ^ 12) - 4 * u ^ 19 * v ^ 17 * w ^ 11) - 6 * u ^ 19 * v ^ 18 * w ^ 10) - 4 * u ^ 20 * v ^ 14 * w ^ 13) - 6 * u ^ 20 * v ^ 17 * w ^ 10) + u ^ 22 * v ^ 14 * w ^ 11 + u ^ 22 * v ^ 15 * w ^ 10 + 2 * u ^ 23 * v ^ 14 * w ^ 10, (((6 * u ^ 8 * v ^ 10 * w ^ 8 - 2 * u ^ 8 * v ^ 13 * w ^ 5) - 24 * u ^ 10 * v ^ 9 * w ^ 7) + 8 * u ^ 11 * v ^ 7 * w ^ 8 + 16 * u ^ 11 * v ^ 10 * w ^ 5) - 4 * u ^ 14 * v ^ 7 * w ^ 5, (((((((-(u ^ 8) * v ^ 8 * w ^ 7 - u ^ 8 * v ^ 9 * w ^ 6) - u ^ 8 * v ^ 10 * w ^ 5) - u ^ 9 * v ^ 7 * w ^ 7) - 4 * u ^ 9 * v ^ 8 * w ^ 6) - 4 * u ^ 9 * v ^ 9 * w ^ 5) - 3 * u ^ 10 * v ^ 7 * w ^ 6) - 4 * u ^ 10 * v ^ 8 * w ^ 5) - 2 * u ^ 11 * v ^ 7 * w ^ 5, 3 * u ^ 16 * v ^ 15 * w ^ 11 + 2 * u ^ 16 * v ^ 16 * w ^ 10 + 4 * u ^ 17 * v ^ 14 * w ^ 11 + 8 * u ^ 17 * v ^ 15 * w ^ 10 + 4 * u ^ 18 * v ^ 14 * w ^ 10, 0, 15 * u ^ 32 * v ^ 28 * w ^ 22 + 21 * u ^ 32 * v ^ 30 * w ^ 20 + 24 * u ^ 34 * v ^ 28 * w ^ 20, (((-3 * u ^ 8 * v ^ 8 * w ^ 6 - 2 * u ^ 8 * v ^ 9 * w ^ 5) - 4 * u ^ 9 * v ^ 7 * w ^ 6) - 8 * u ^ 9 * v ^ 8 * w ^ 5) - 4 * u ^ 10 * v ^ 7 * w ^ 5, (((-6 * u ^ 16 * v ^ 17 * w ^ 13 + 2 * u ^ 16 * v ^ 20 * w ^ 10 + 24 * u ^ 18 * v ^ 16 * w ^ 12) - 8 * u ^ 19 * v ^ 14 * w ^ 13) - 16 * u ^ 19 * v ^ 17 * w ^ 10) + 4 * u ^ 22 * v ^ 14 * w ^ 10, ((((-4 * u ^ 8 * v ^ 7 * w ^ 7 - 10 * u ^ 8 * v ^ 8 * w ^ 6) - 8 * u ^ 8 * v ^ 9 * w ^ 5) - 12 * u ^ 9 * v ^ 7 * w ^ 6) - 16 * u ^ 9 * v ^ 8 * w ^ 5) - 10 * u ^ 10 * v ^ 7 * w ^ 5, u ^ 16 * v ^ 15 * w ^ 12 + u ^ 16 * v ^ 16 * w ^ 11 + u ^ 16 * v ^ 17 * w ^ 10 + u ^ 17 * v ^ 14 * w ^ 12 + 4 * u ^ 17 * v ^ 15 * w ^ 11 + 4 * u ^ 17 * v ^ 16 * w ^ 10 + 3 * u ^ 18 * v ^ 14 * w ^ 11 + 4 * u ^ 18 * v ^ 15 * w ^ 10 + 2 * u ^ 19 * v ^ 14 * w ^ 10, (-2 * u ^ 24 * v ^ 24 * w ^ 15 + 8 * u ^ 25 * v ^ 22 * w ^ 16) - 4 * u ^ 27 * v ^ 21 * w ^ 15, (-15 * u ^ 40 * v ^ 35 * w ^ 27 - 21 * u ^ 40 * v ^ 37 * w ^ 25) - 24 * u ^ 42 * v ^ 35 * w ^ 25, 4 * u ^ 16 * v ^ 14 * w ^ 12 + 10 * u ^ 16 * v ^ 15 * w ^ 11 + 8 * u ^ 16 * v ^ 16 * w ^ 10 + 12 * u ^ 17 * v ^ 14 * w ^ 11 + 16 * u ^ 17 * v ^ 15 * w ^ 10 + 10 * u ^ 18 * v ^ 14 * w ^ 10, (-15 * u ^ 8 * v ^ 7 * w ^ 6 - 21 * u ^ 8 * v ^ 8 * w ^ 5) - 24 * u ^ 9 * v ^ 7 * w ^ 5, -60 * u ^ 8 * v ^ 7 * w ^ 5, ((((-4 * u ^ 24 * v ^ 21 * w ^ 17 - 10 * u ^ 24 * v ^ 22 * w ^ 16) - 8 * u ^ 24 * v ^ 23 * w ^ 15) - 12 * u ^ 25 * v ^ 21 * w ^ 16) - 16 * u ^ 25 * v ^ 22 * w ^ 15) - 10 * u ^ 26 * v ^ 21 * w ^ 15, (-15 * u ^ 24 * v ^ 21 * w ^ 17 - 21 * u ^ 24 * v ^ 23 * w ^ 15) - 24 * u ^ 26 * v ^ 21 * w ^ 15, 15 * u ^ 16 * v ^ 14 * w ^ 11 + 21 * u ^ 16 * v ^ 15 * w ^ 10 + 24 * u ^ 17 * v ^ 14 * w ^ 10, (-15 * u ^ 24 * v ^ 21 * w ^ 16 - 21 * u ^ 24 * v ^ 22 * w ^ 15) - 24 * u ^ 25 * v ^ 21 * w ^ 15, -60 * u ^ 40 * v ^ 35 * w ^ 25, -60 * u ^ 24 * v ^ 21 * w ^ 15, 60 * u ^ 16 * v ^ 14 * w ^ 10, 60 * u ^ 32 * v ^ 28 * w ^ 20]
            end
        f80 = function (u, v, w)
                return [80, 32u + 24v + 24w, 8 * u * v + 8 * u * w + 4 * v * w + 6 * u ^ 2 + 2 * v ^ 2 + 2 * w ^ 2, 20 * u * v + 20 * u * w + 16 * v * w + 12 * u ^ 2 + 6 * v ^ 2 + 6 * w ^ 2, 32 * u ^ 2 + 24 * v ^ 2 + 24 * w ^ 2, -10 * u * v * w + 6 * u ^ 3 + 2 * v ^ 3 + 2 * w ^ 3, 8 * u * v * w + 3 * u * v ^ 2 + 3 * u * w ^ 2 + 2 * v * w ^ 2 + 5 * u ^ 2 * v + 5 * u ^ 2 * w + 2 * v ^ 2 * w + 2 * u ^ 3, u * v * w + u ^ 2 * v + u ^ 2 * w, 10 * u * v ^ 2 + 10 * u * w ^ 2 + 8 * v * w ^ 2 + 10 * u ^ 2 * v + 10 * u ^ 2 * w + 8 * v ^ 2 * w + 12 * u ^ 3 + 6 * v ^ 3 + 6 * w ^ 3, (-u * v * w ^ 2 - u * v ^ 2 * w) - 2 * u ^ 2 * v * w, ((((((((((((((((((((((((((((((((((u ^ 3 * v ^ 3 * w ^ 13 - u ^ 3 * v ^ 6 * w ^ 10) - u ^ 3 * v ^ 7 * w ^ 9) - u ^ 3 * v ^ 9 * w ^ 7) - u ^ 3 * v ^ 10 * w ^ 6) + u ^ 3 * v ^ 13 * w ^ 3 + u ^ 4 * v ^ 2 * w ^ 13 + u ^ 4 * v ^ 7 * w ^ 8 + u ^ 4 * v ^ 8 * w ^ 7 + u ^ 4 * v ^ 13 * w ^ 2 + u ^ 5 * v ^ 5 * w ^ 9 + u ^ 5 * v ^ 6 * w ^ 8 + u ^ 5 * v ^ 8 * w ^ 6 + u ^ 5 * v ^ 9 * w ^ 5) - u ^ 6 * v ^ 3 * w ^ 10) + u ^ 6 * v ^ 4 * w ^ 9 + 2 * u ^ 6 * v ^ 5 * w ^ 8) - u ^ 6 * v ^ 6 * w ^ 7) - u ^ 6 * v ^ 7 * w ^ 6) + 2 * u ^ 6 * v ^ 8 * w ^ 5 + u ^ 6 * v ^ 9 * w ^ 4) - u ^ 6 * v ^ 10 * w ^ 3) - u ^ 7 * v ^ 2 * w ^ 10) - u ^ 7 * v ^ 3 * w ^ 9) + 2 * u ^ 7 * v ^ 4 * w ^ 8) - u ^ 7 * v ^ 6 * w ^ 6) + 2 * u ^ 7 * v ^ 8 * w ^ 4) - u ^ 7 * v ^ 9 * w ^ 3) - u ^ 7 * v ^ 10 * w ^ 2) - u ^ 8 * v ^ 2 * w ^ 9) + 2 * u ^ 8 * v ^ 4 * w ^ 7 + 3 * u ^ 8 * v ^ 5 * w ^ 6 + 3 * u ^ 8 * v ^ 6 * w ^ 5 + 2 * u ^ 8 * v ^ 7 * w ^ 4) - u ^ 8 * v ^ 9 * w ^ 2) - u ^ 9 * v ^ 2 * w ^ 8) - 2 * u ^ 9 * v ^ 3 * w ^ 7) + u ^ 9 * v ^ 4 * w ^ 6 + 2 * u ^ 9 * v ^ 5 * w ^ 5 + u ^ 9 * v ^ 6 * w ^ 4) - 2 * u ^ 9 * v ^ 7 * w ^ 3) - u ^ 9 * v ^ 8 * w ^ 2) - u ^ 10 * v ^ 2 * w ^ 7) - 2 * u ^ 10 * v ^ 3 * w ^ 6) - 2 * u ^ 10 * v ^ 6 * w ^ 3) - u ^ 10 * v ^ 7 * w ^ 2) - u ^ 11 * v ^ 8) - u ^ 11 * w ^ 8) - u ^ 12 * v ^ 7) - u ^ 12 * w ^ 7) + u ^ 13 * v ^ 2 * w ^ 4 + 2 * u ^ 13 * v ^ 3 * w ^ 3 + u ^ 13 * v ^ 4 * w ^ 2 + u ^ 15 * v ^ 4 + u ^ 15 * w ^ 4, 3 * u * v * w ^ 2 + 3 * u * v ^ 2 * w + 2 * u * v ^ 3 + 2 * u * w ^ 3 + v * w ^ 3 + 2 * u ^ 2 * v * w + 3 * u ^ 2 * v ^ 2 + 3 * u ^ 2 * w ^ 2 + 2 * v ^ 2 * w ^ 2 + 3 * u ^ 3 * v + 3 * u ^ 3 * w + v ^ 3 * w + 2 * u ^ 4, 0, 20 * u ^ 2 * v ^ 2 + 20 * u ^ 2 * w ^ 2 + 16 * v ^ 2 * w ^ 2 + 12 * u ^ 4 + 6 * v ^ 4 + 6 * w ^ 4, (((((((10 * u ^ 2 * v ^ 2 * w ^ 3 + 10 * u ^ 2 * v ^ 3 * w ^ 2 + 10 * u ^ 3 * v ^ 2 * w ^ 2) - 8 * u ^ 3 * v ^ 4) - 8 * u ^ 3 * w ^ 4) - 4 * v ^ 3 * w ^ 4) - 8 * u ^ 4 * v ^ 3) - 8 * u ^ 4 * w ^ 3) - 4 * v ^ 4 * w ^ 3) + 6 * u ^ 7 + 2 * v ^ 7 + 2 * w ^ 7, (((-3 * u * v * w ^ 2 - 3 * u * v ^ 2 * w) + u * v ^ 3 + u * w ^ 3 + v * w ^ 3) - 4 * u ^ 2 * v * w) + 2 * u ^ 3 * v + 2 * u ^ 3 * w + v ^ 3 * w + 2 * u ^ 4, (((((((((-5 * u * v * w ^ 3 + 4 * u * v ^ 2 * w ^ 2) - 5 * u * v ^ 3 * w) - u * v ^ 4) - u * w ^ 4) + 3 * u ^ 2 * v * w ^ 2 + 3 * u ^ 2 * v ^ 2 * w + 2 * v ^ 2 * w ^ 3) - 6 * u ^ 3 * v * w) + 2 * u ^ 3 * v ^ 2 + 2 * u ^ 3 * w ^ 2 + 2 * v ^ 3 * w ^ 2) - u ^ 4 * v) - u ^ 4 * w) + 2 * u ^ 5, 0, (-(u ^ 2) * v ^ 2 * w ^ 4 - u ^ 2 * v ^ 4 * w ^ 2) - 2 * u ^ 4 * v ^ 2 * w ^ 2, 0, (((((u ^ 6 * v ^ 6 * w ^ 14 + u ^ 6 * v ^ 7 * w ^ 13 + u ^ 6 * v ^ 13 * w ^ 7 + u ^ 6 * v ^ 14 * w ^ 6 + u ^ 7 * v ^ 6 * w ^ 13 + u ^ 7 * v ^ 13 * w ^ 6 + u ^ 8 * v ^ 4 * w ^ 14) - u ^ 8 * v ^ 9 * w ^ 9) + u ^ 8 * v ^ 14 * w ^ 4 + u ^ 9 * v ^ 4 * w ^ 13) - u ^ 9 * v ^ 8 * w ^ 9) - u ^ 9 * v ^ 9 * w ^ 8) + u ^ 9 * v ^ 13 * w ^ 4 + u ^ 13 * v ^ 4 * w ^ 9 + 2 * u ^ 13 * v ^ 6 * w ^ 7 + 2 * u ^ 13 * v ^ 7 * w ^ 6 + u ^ 13 * v ^ 9 * w ^ 4 + u ^ 14 * v ^ 4 * w ^ 8 + 2 * u ^ 14 * v ^ 6 * w ^ 6 + u ^ 14 * v ^ 8 * w ^ 4 + u ^ 17 * v ^ 9 + u ^ 17 * w ^ 9 + u ^ 18 * v ^ 8 + u ^ 18 * w ^ 8, (((-3 * u * v * w ^ 3 - 3 * u * v ^ 3 * w) + u ^ 2 * v ^ 3 + u ^ 2 * w ^ 3 + v ^ 2 * w ^ 3) - 4 * u ^ 3 * v * w) + 2 * u ^ 3 * v ^ 2 + 2 * u ^ 3 * w ^ 2 + v ^ 3 * w ^ 2 + 2 * u ^ 5, u ^ 9 * v ^ 7 * w ^ 8 + u ^ 9 * v ^ 8 * w ^ 7 + 2 * u ^ 10 * v ^ 7 * w ^ 7, u ^ 5 * v ^ 5 * w ^ 5 + u ^ 10 * v ^ 5 + u ^ 10 * w ^ 5, u ^ 42 * v ^ 32 * w ^ 34 + u ^ 42 * v ^ 34 * w ^ 32 + 2 * u ^ 44 * v ^ 32 * w ^ 32, ((((((((((((((((((u ^ 3 * v ^ 3 * w ^ 12 - 2 * u ^ 3 * v ^ 6 * w ^ 9) - 2 * u ^ 3 * v ^ 9 * w ^ 6) + u ^ 3 * v ^ 12 * w ^ 3 + u ^ 4 * v ^ 2 * w ^ 12 + 2 * u ^ 4 * v ^ 7 * w ^ 7 + u ^ 4 * v ^ 12 * w ^ 2 + 3 * u ^ 5 * v ^ 5 * w ^ 8 + 3 * u ^ 5 * v ^ 8 * w ^ 5) - 2 * u ^ 6 * v ^ 3 * w ^ 9) + 3 * u ^ 6 * v ^ 4 * w ^ 8) - 3 * u ^ 6 * v ^ 6 * w ^ 6) + 3 * u ^ 6 * v ^ 8 * w ^ 4) - 2 * u ^ 6 * v ^ 9 * w ^ 3) - 2 * u ^ 7 * v ^ 2 * w ^ 9) + 2 * u ^ 7 * v ^ 4 * w ^ 7 + 2 * u ^ 7 * v ^ 7 * w ^ 4) - 2 * u ^ 7 * v ^ 9 * w ^ 2) + 3 * u ^ 8 * v ^ 4 * w ^ 6 + 6 * u ^ 8 * v ^ 5 * w ^ 5 + 3 * u ^ 8 * v ^ 6 * w ^ 4) - 2 * u ^ 9 * v ^ 2 * w ^ 7) - 4 * u ^ 9 * v ^ 3 * w ^ 6) - 4 * u ^ 9 * v ^ 6 * w ^ 3) - 2 * u ^ 9 * v ^ 7 * w ^ 2) - 2 * u ^ 11 * v ^ 7) - 2 * u ^ 11 * w ^ 7) + u ^ 12 * v ^ 2 * w ^ 4 + 2 * u ^ 12 * v ^ 3 * w ^ 3 + u ^ 12 * v ^ 4 * w ^ 2 + u ^ 14 * v ^ 4 + u ^ 14 * w ^ 4, ((2 * u ^ 2 * v * w ^ 3 + 3 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 2 * v ^ 3 * w + 2 * u ^ 3 * v * w ^ 2 + 2 * u ^ 3 * v ^ 2 * w) - u ^ 4 * v ^ 2) - u ^ 4 * w ^ 2, 0, (((((((((((((((((-3 * u * v ^ 2 * w ^ 3 - 3 * u * v ^ 3 * w ^ 2) - 2 * u * v ^ 5) - 2 * u * w ^ 5) - v * w ^ 5) - 2 * u ^ 2 * v * w ^ 3) + 10 * u ^ 2 * v ^ 2 * w ^ 2) - 2 * u ^ 2 * v ^ 3 * w) + 4 * u ^ 2 * v ^ 4 + 4 * u ^ 2 * w ^ 4 + 4 * v ^ 2 * w ^ 4) - 3 * u ^ 3 * v * w ^ 2) - 3 * u ^ 3 * v ^ 2 * w) - 5 * u ^ 3 * v ^ 3) - 5 * u ^ 3 * w ^ 3) - 2 * v ^ 3 * w ^ 3) + 6 * u ^ 4 * v ^ 2 + 6 * u ^ 4 * w ^ 2 + 4 * v ^ 4 * w ^ 2) - 3 * u ^ 5 * v) - 3 * u ^ 5 * w) - v ^ 5 * w) + 2 * u ^ 6, 0, (((30 * u ^ 2 * v ^ 2 * w ^ 2 - 16 * u ^ 3 * v ^ 3) - 16 * u ^ 3 * w ^ 3) - 8 * v ^ 3 * w ^ 3) + 6 * u ^ 6 + 2 * v ^ 6 + 2 * w ^ 6, ((-2 * u ^ 40 * v ^ 30 * w ^ 33 - 2 * u ^ 40 * v ^ 33 * w ^ 30) + 10 * u ^ 41 * v ^ 31 * w ^ 31) - 6 * u ^ 43 * v ^ 30 * w ^ 30, (((((((((((((((((((((((((((((((((((u ^ 6 * v ^ 6 * w ^ 19 - u ^ 6 * v ^ 9 * w ^ 16) - u ^ 6 * v ^ 10 * w ^ 15) - u ^ 6 * v ^ 15 * w ^ 10) - u ^ 6 * v ^ 16 * w ^ 9) + u ^ 6 * v ^ 19 * w ^ 6 + u ^ 8 * v ^ 4 * w ^ 19 + u ^ 8 * v ^ 8 * w ^ 15 + u ^ 8 * v ^ 9 * w ^ 14 + u ^ 8 * v ^ 11 * w ^ 12 + u ^ 8 * v ^ 12 * w ^ 11 + u ^ 8 * v ^ 14 * w ^ 9 + u ^ 8 * v ^ 15 * w ^ 8 + u ^ 8 * v ^ 19 * w ^ 4) - u ^ 9 * v ^ 6 * w ^ 16) + u ^ 9 * v ^ 8 * w ^ 14 + u ^ 9 * v ^ 14 * w ^ 8) - u ^ 9 * v ^ 16 * w ^ 6) + u ^ 10 * v ^ 7 * w ^ 14) - u ^ 10 * v ^ 10 * w ^ 11) - u ^ 10 * v ^ 11 * w ^ 10) + u ^ 10 * v ^ 14 * w ^ 7) - u ^ 11 * v ^ 4 * w ^ 16) + u ^ 11 * v ^ 6 * w ^ 14 + u ^ 11 * v ^ 8 * w ^ 12) - u ^ 11 * v ^ 10 * w ^ 10) + u ^ 11 * v ^ 12 * w ^ 8 + u ^ 11 * v ^ 14 * w ^ 6) - u ^ 11 * v ^ 16 * w ^ 4) - u ^ 12 * v ^ 4 * w ^ 15) + u ^ 12 * v ^ 8 * w ^ 11 + u ^ 12 * v ^ 11 * w ^ 8) - u ^ 12 * v ^ 15 * w ^ 4) + u ^ 14 * v ^ 6 * w ^ 11 + u ^ 14 * v ^ 7 * w ^ 10 + 2 * u ^ 14 * v ^ 8 * w ^ 9 + 2 * u ^ 14 * v ^ 9 * w ^ 8 + u ^ 14 * v ^ 10 * w ^ 7 + u ^ 14 * v ^ 11 * w ^ 6) - u ^ 15 * v ^ 4 * w ^ 12) - u ^ 15 * v ^ 6 * w ^ 10) + 2 * u ^ 15 * v ^ 8 * w ^ 8) - u ^ 15 * v ^ 10 * w ^ 6) - u ^ 15 * v ^ 12 * w ^ 4) - u ^ 16 * v ^ 4 * w ^ 11) - 2 * u ^ 16 * v ^ 6 * w ^ 9) - 2 * u ^ 16 * v ^ 9 * w ^ 6) - u ^ 16 * v ^ 11 * w ^ 4) + u ^ 19 * v ^ 4 * w ^ 8 + 2 * u ^ 19 * v ^ 6 * w ^ 6 + u ^ 19 * v ^ 8 * w ^ 4) - u ^ 19 * v ^ 12) - u ^ 19 * w ^ 12) - u ^ 20 * v ^ 11) - u ^ 20 * w ^ 11) + u ^ 23 * v ^ 8 + u ^ 23 * w ^ 8, 0, 0, ((((((((((-4 * u * v ^ 3 * w ^ 3 + u * v ^ 6 + u * w ^ 6 + v * w ^ 6 + 9 * u ^ 2 * v ^ 2 * w ^ 3 + 9 * u ^ 2 * v ^ 3 * w ^ 2) - 6 * u ^ 3 * v * w ^ 3) + 12 * u ^ 3 * v ^ 2 * w ^ 2) - 6 * u ^ 3 * v ^ 3 * w) - 4 * u ^ 3 * v ^ 4) - 4 * u ^ 3 * w ^ 4) - 2 * v ^ 3 * w ^ 4) - 6 * u ^ 4 * v ^ 3) - 6 * u ^ 4 * w ^ 3) - 2 * v ^ 4 * w ^ 3) + 2 * u ^ 6 * v + 2 * u ^ 6 * w + v ^ 6 * w + 2 * u ^ 7, u ^ 10 * v ^ 8 * w ^ 10 + u ^ 10 * v ^ 10 * w ^ 8 + 2 * u ^ 12 * v ^ 8 * w ^ 8, (((((((-(u ^ 8) * v ^ 8 * w ^ 9 - u ^ 8 * v ^ 9 * w ^ 8) + 3 * u ^ 9 * v ^ 7 * w ^ 9 + 3 * u ^ 9 * v ^ 9 * w ^ 7) - u ^ 10 * v ^ 6 * w ^ 9) - u ^ 10 * v ^ 9 * w ^ 6) - 2 * u ^ 11 * v ^ 6 * w ^ 8) + 4 * u ^ 11 * v ^ 7 * w ^ 7) - 2 * u ^ 11 * v ^ 8 * w ^ 6) - 2 * u ^ 13 * v ^ 6 * w ^ 6, u ^ 26 * v ^ 20 * w ^ 22 + u ^ 26 * v ^ 22 * w ^ 20 + 2 * u ^ 28 * v ^ 20 * w ^ 20, (((((2 * u ^ 3 * v ^ 3 * w ^ 8 + 2 * u ^ 3 * v ^ 4 * w ^ 7 + 2 * u ^ 3 * v ^ 7 * w ^ 4 + 2 * u ^ 3 * v ^ 8 * w ^ 3 + u ^ 4 * v ^ 2 * w ^ 8 + 4 * u ^ 4 * v ^ 3 * w ^ 7 + u ^ 4 * v ^ 4 * w ^ 6) - 2 * u ^ 4 * v ^ 5 * w ^ 5) + u ^ 4 * v ^ 6 * w ^ 4 + 4 * u ^ 4 * v ^ 7 * w ^ 3 + u ^ 4 * v ^ 8 * w ^ 2 + 2 * u ^ 5 * v ^ 2 * w ^ 7) - 2 * u ^ 5 * v ^ 4 * w ^ 5) - 2 * u ^ 5 * v ^ 5 * w ^ 4) + 2 * u ^ 5 * v ^ 7 * w ^ 2 + 2 * u ^ 6 * v ^ 2 * w ^ 6 + 3 * u ^ 6 * v ^ 4 * w ^ 4 + 2 * u ^ 6 * v ^ 6 * w ^ 2 + 2 * u ^ 7 * v ^ 2 * w ^ 5 + 6 * u ^ 7 * v ^ 3 * w ^ 4 + 6 * u ^ 7 * v ^ 4 * w ^ 3 + 2 * u ^ 7 * v ^ 5 * w ^ 2 + u ^ 8 * v ^ 2 * w ^ 4 + 4 * u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + 2 * u ^ 9 * v ^ 5 + 2 * u ^ 9 * w ^ 5 + u ^ 10 * v ^ 4 + u ^ 10 * w ^ 4, 0, 0, ((-2 * u ^ 8 * v ^ 6 * w ^ 9 - 2 * u ^ 8 * v ^ 9 * w ^ 6) + 10 * u ^ 9 * v ^ 7 * w ^ 7) - 6 * u ^ 11 * v ^ 6 * w ^ 6, (((((u ^ 3 * v ^ 3 * w ^ 8 + u ^ 3 * v ^ 4 * w ^ 7 + u ^ 3 * v ^ 7 * w ^ 4 + u ^ 3 * v ^ 8 * w ^ 3 + u ^ 4 * v ^ 2 * w ^ 8 + u ^ 4 * v ^ 3 * w ^ 7) - u ^ 4 * v ^ 5 * w ^ 5) + u ^ 4 * v ^ 7 * w ^ 3 + u ^ 4 * v ^ 8 * w ^ 2 + u ^ 5 * v ^ 2 * w ^ 7) - u ^ 5 * v ^ 4 * w ^ 5) - u ^ 5 * v ^ 5 * w ^ 4) + u ^ 5 * v ^ 7 * w ^ 2 + u ^ 7 * v ^ 2 * w ^ 5 + 2 * u ^ 7 * v ^ 3 * w ^ 4 + 2 * u ^ 7 * v ^ 4 * w ^ 3 + u ^ 7 * v ^ 5 * w ^ 2 + u ^ 8 * v ^ 2 * w ^ 4 + 2 * u ^ 8 * v ^ 3 * w ^ 3 + u ^ 8 * v ^ 4 * w ^ 2 + u ^ 9 * v ^ 5 + u ^ 9 * w ^ 5 + u ^ 10 * v ^ 4 + u ^ 10 * w ^ 4, (((((((-(u ^ 40) * v ^ 31 * w ^ 33 - u ^ 40 * v ^ 33 * w ^ 31) - u ^ 41 * v ^ 30 * w ^ 33) + 3 * u ^ 41 * v ^ 31 * w ^ 32 + 3 * u ^ 41 * v ^ 32 * w ^ 31) - u ^ 41 * v ^ 33 * w ^ 30) + 4 * u ^ 42 * v ^ 31 * w ^ 31) - 2 * u ^ 43 * v ^ 30 * w ^ 31) - 2 * u ^ 43 * v ^ 31 * w ^ 30) - 2 * u ^ 44 * v ^ 30 * w ^ 30, u ^ 41 * v ^ 31 * w ^ 32 + u ^ 41 * v ^ 32 * w ^ 31 + 2 * u ^ 42 * v ^ 31 * w ^ 31, (((((((((((9 * u ^ 2 * v ^ 2 * w ^ 4 - 4 * u ^ 2 * v ^ 3 * w ^ 3) + 9 * u ^ 2 * v ^ 4 * w ^ 2 + u ^ 2 * v ^ 6 + u ^ 2 * w ^ 6 + v ^ 2 * w ^ 6) - 6 * u ^ 3 * v ^ 2 * w ^ 3) - 6 * u ^ 3 * v ^ 3 * w ^ 2) - 4 * u ^ 3 * v ^ 5) - 4 * u ^ 3 * w ^ 5) - 2 * v ^ 3 * w ^ 5) + 12 * u ^ 4 * v ^ 2 * w ^ 2) - 6 * u ^ 5 * v ^ 3) - 6 * u ^ 5 * w ^ 3) - 2 * v ^ 5 * w ^ 3) + 2 * u ^ 6 * v ^ 2 + 2 * u ^ 6 * w ^ 2 + v ^ 6 * w ^ 2 + 2 * u ^ 8, (-24 * u ^ 40 * v ^ 30 * w ^ 31 - 24 * u ^ 40 * v ^ 31 * w ^ 30) - 32 * u ^ 41 * v ^ 30 * w ^ 30, (((((((-(u ^ 8) * v ^ 7 * w ^ 9 - u ^ 8 * v ^ 9 * w ^ 7) - u ^ 9 * v ^ 6 * w ^ 9) + 3 * u ^ 9 * v ^ 7 * w ^ 8 + 3 * u ^ 9 * v ^ 8 * w ^ 7) - u ^ 9 * v ^ 9 * w ^ 6) + 4 * u ^ 10 * v ^ 7 * w ^ 7) - 2 * u ^ 11 * v ^ 6 * w ^ 7) - 2 * u ^ 11 * v ^ 7 * w ^ 6) - 2 * u ^ 12 * v ^ 6 * w ^ 6, (-(u ^ 33) * v ^ 25 * w ^ 26 - u ^ 33 * v ^ 26 * w ^ 25) - 2 * u ^ 34 * v ^ 25 * w ^ 25, 0, (((((((-(u ^ 40) * v ^ 32 * w ^ 33 - u ^ 40 * v ^ 33 * w ^ 32) + 3 * u ^ 41 * v ^ 31 * w ^ 33 + 3 * u ^ 41 * v ^ 33 * w ^ 31) - u ^ 42 * v ^ 30 * w ^ 33) - u ^ 42 * v ^ 33 * w ^ 30) - 2 * u ^ 43 * v ^ 30 * w ^ 32) + 4 * u ^ 43 * v ^ 31 * w ^ 31) - 2 * u ^ 43 * v ^ 32 * w ^ 30) - 2 * u ^ 45 * v ^ 30 * w ^ 30, ((((-6 * u ^ 8 * v ^ 6 * w ^ 10 - 16 * u ^ 8 * v ^ 8 * w ^ 8) - 6 * u ^ 8 * v ^ 10 * w ^ 6) - 20 * u ^ 10 * v ^ 6 * w ^ 8) - 20 * u ^ 10 * v ^ 8 * w ^ 6) - 12 * u ^ 12 * v ^ 6 * w ^ 6, (-24 * u ^ 8 * v ^ 6 * w ^ 8 - 24 * u ^ 8 * v ^ 8 * w ^ 6) - 32 * u ^ 10 * v ^ 6 * w ^ 6, u ^ 25 * v ^ 19 * w ^ 20 + u ^ 25 * v ^ 20 * w ^ 19 + 2 * u ^ 26 * v ^ 19 * w ^ 19, (((((((-6 * u ^ 40 * v ^ 30 * w ^ 33 - 8 * u ^ 40 * v ^ 31 * w ^ 32) - 8 * u ^ 40 * v ^ 32 * w ^ 31) - 6 * u ^ 40 * v ^ 33 * w ^ 30) - 10 * u ^ 41 * v ^ 30 * w ^ 32) - 10 * u ^ 41 * v ^ 32 * w ^ 30) - 10 * u ^ 42 * v ^ 30 * w ^ 31) - 10 * u ^ 42 * v ^ 31 * w ^ 30) - 12 * u ^ 43 * v ^ 30 * w ^ 30, (((((4 * u ^ 3 * v ^ 3 * w ^ 7 + 2 * u ^ 3 * v ^ 4 * w ^ 6 + 2 * u ^ 3 * v ^ 6 * w ^ 4 + 4 * u ^ 3 * v ^ 7 * w ^ 3 + 3 * u ^ 4 * v ^ 2 * w ^ 7 + 3 * u ^ 4 * v ^ 3 * w ^ 6) - 3 * u ^ 4 * v ^ 4 * w ^ 5) - 3 * u ^ 4 * v ^ 5 * w ^ 4) + 3 * u ^ 4 * v ^ 6 * w ^ 3 + 3 * u ^ 4 * v ^ 7 * w ^ 2 + 2 * u ^ 5 * v ^ 2 * w ^ 6) - 3 * u ^ 5 * v ^ 4 * w ^ 4) + 2 * u ^ 5 * v ^ 6 * w ^ 2 + 2 * u ^ 6 * v ^ 2 * w ^ 5 + 5 * u ^ 6 * v ^ 3 * w ^ 4 + 5 * u ^ 6 * v ^ 4 * w ^ 3 + 2 * u ^ 6 * v ^ 5 * w ^ 2 + 3 * u ^ 7 * v ^ 2 * w ^ 4 + 8 * u ^ 7 * v ^ 3 * w ^ 3 + 3 * u ^ 7 * v ^ 4 * w ^ 2 + u ^ 8 * v ^ 5 + u ^ 8 * w ^ 5 + 2 * u ^ 9 * v ^ 4 + 2 * u ^ 9 * w ^ 4, 0, (-(u ^ 34) * v ^ 26 * w ^ 28 - u ^ 34 * v ^ 28 * w ^ 26) - 2 * u ^ 36 * v ^ 26 * w ^ 26, 0, (((((((-6 * u ^ 8 * v ^ 6 * w ^ 9 - 8 * u ^ 8 * v ^ 7 * w ^ 8) - 8 * u ^ 8 * v ^ 8 * w ^ 7) - 6 * u ^ 8 * v ^ 9 * w ^ 6) - 10 * u ^ 9 * v ^ 6 * w ^ 8) - 10 * u ^ 9 * v ^ 8 * w ^ 6) - 10 * u ^ 10 * v ^ 6 * w ^ 7) - 10 * u ^ 10 * v ^ 7 * w ^ 6) - 12 * u ^ 11 * v ^ 6 * w ^ 6, 0, (((((u ^ 16 * v ^ 13 * w ^ 15 + u ^ 16 * v ^ 15 * w ^ 13 + u ^ 17 * v ^ 12 * w ^ 15) - 3 * u ^ 17 * v ^ 13 * w ^ 14) - 3 * u ^ 17 * v ^ 14 * w ^ 13) + u ^ 17 * v ^ 15 * w ^ 12) - 4 * u ^ 18 * v ^ 13 * w ^ 13) + 2 * u ^ 19 * v ^ 12 * w ^ 13 + 2 * u ^ 19 * v ^ 13 * w ^ 12 + 2 * u ^ 20 * v ^ 12 * w ^ 12, (-(u ^ 17) * v ^ 13 * w ^ 14 - u ^ 17 * v ^ 14 * w ^ 13) - 2 * u ^ 18 * v ^ 13 * w ^ 13, ((8 * u ^ 3 * v ^ 3 * w ^ 6 + 8 * u ^ 3 * v ^ 6 * w ^ 3 + 6 * u ^ 4 * v ^ 2 * w ^ 6) - 9 * u ^ 4 * v ^ 4 * w ^ 4) + 6 * u ^ 4 * v ^ 6 * w ^ 2 + 6 * u ^ 6 * v ^ 2 * w ^ 4 + 16 * u ^ 6 * v ^ 3 * w ^ 3 + 6 * u ^ 6 * v ^ 4 * w ^ 2 + 3 * u ^ 8 * v ^ 4 + 3 * u ^ 8 * w ^ 4, ((((((((((((-(u ^ 8) * v ^ 7 * w ^ 12 + 2 * u ^ 8 * v ^ 9 * w ^ 10 + 2 * u ^ 8 * v ^ 10 * w ^ 9) - u ^ 8 * v ^ 12 * w ^ 7) - u ^ 9 * v ^ 6 * w ^ 12) + 4 * u ^ 9 * v ^ 9 * w ^ 9) - u ^ 9 * v ^ 12 * w ^ 6) - 9 * u ^ 10 * v ^ 8 * w ^ 9) - 9 * u ^ 10 * v ^ 9 * w ^ 8) + 4 * u ^ 11 * v ^ 6 * w ^ 10 + 6 * u ^ 11 * v ^ 7 * w ^ 9) - 12 * u ^ 11 * v ^ 8 * w ^ 8) + 6 * u ^ 11 * v ^ 9 * w ^ 7 + 4 * u ^ 11 * v ^ 10 * w ^ 6 + 6 * u ^ 12 * v ^ 6 * w ^ 9 + 6 * u ^ 12 * v ^ 9 * w ^ 6) - 2 * u ^ 14 * v ^ 6 * w ^ 7) - 2 * u ^ 14 * v ^ 7 * w ^ 6) - 2 * u ^ 15 * v ^ 6 * w ^ 6, 0, (((((((((((((((((((u ^ 16 * v ^ 13 * w ^ 19 - u ^ 16 * v ^ 15 * w ^ 17) - 2 * u ^ 16 * v ^ 16 * w ^ 16) - u ^ 16 * v ^ 17 * w ^ 15) + u ^ 16 * v ^ 19 * w ^ 13 + u ^ 17 * v ^ 12 * w ^ 19) - 2 * u ^ 17 * v ^ 15 * w ^ 16) - 2 * u ^ 17 * v ^ 16 * w ^ 15) + u ^ 17 * v ^ 19 * w ^ 12 + 3 * u ^ 18 * v ^ 14 * w ^ 16 + 6 * u ^ 18 * v ^ 15 * w ^ 15 + 3 * u ^ 18 * v ^ 16 * w ^ 14) - 2 * u ^ 19 * v ^ 12 * w ^ 17) - 3 * u ^ 19 * v ^ 13 * w ^ 16) + 7 * u ^ 19 * v ^ 14 * w ^ 15 + 7 * u ^ 19 * v ^ 15 * w ^ 14) - 3 * u ^ 19 * v ^ 16 * w ^ 13) - 2 * u ^ 19 * v ^ 17 * w ^ 12) - 5 * u ^ 20 * v ^ 12 * w ^ 16) - 3 * u ^ 20 * v ^ 13 * w ^ 15) + 4 * u ^ 20 * v ^ 14 * w ^ 14) - 3 * u ^ 20 * v ^ 15 * w ^ 13) - 5 * u ^ 20 * v ^ 16 * w ^ 12) - 3 * u ^ 21 * v ^ 12 * w ^ 15) - 3 * u ^ 21 * v ^ 15 * w ^ 12) + 2 * u ^ 23 * v ^ 12 * w ^ 13 + 2 * u ^ 23 * v ^ 13 * w ^ 12 + 2 * u ^ 24 * v ^ 12 * w ^ 12, ((8 * u ^ 6 * v ^ 6 * w ^ 12 + 8 * u ^ 6 * v ^ 12 * w ^ 6 + 6 * u ^ 8 * v ^ 4 * w ^ 12) - 9 * u ^ 8 * v ^ 8 * w ^ 8) + 6 * u ^ 8 * v ^ 12 * w ^ 4 + 6 * u ^ 12 * v ^ 4 * w ^ 8 + 16 * u ^ 12 * v ^ 6 * w ^ 6 + 6 * u ^ 12 * v ^ 8 * w ^ 4 + 3 * u ^ 16 * v ^ 8 + 3 * u ^ 16 * w ^ 8, (((((((-6 * u ^ 24 * v ^ 18 * w ^ 21 - 8 * u ^ 24 * v ^ 19 * w ^ 20) - 8 * u ^ 24 * v ^ 20 * w ^ 19) - 6 * u ^ 24 * v ^ 21 * w ^ 18) - 10 * u ^ 25 * v ^ 18 * w ^ 20) - 10 * u ^ 25 * v ^ 20 * w ^ 18) - 10 * u ^ 26 * v ^ 18 * w ^ 19) - 10 * u ^ 26 * v ^ 19 * w ^ 18) - 12 * u ^ 27 * v ^ 18 * w ^ 18, (((((((((((-(u ^ 8) * v ^ 7 * w ^ 9 - 2 * u ^ 8 * v ^ 8 * w ^ 8) - u ^ 8 * v ^ 9 * w ^ 7) - 2 * u ^ 9 * v ^ 6 * w ^ 9) - 3 * u ^ 9 * v ^ 7 * w ^ 8) - 3 * u ^ 9 * v ^ 8 * w ^ 7) - 2 * u ^ 9 * v ^ 9 * w ^ 6) - 3 * u ^ 10 * v ^ 6 * w ^ 8) - 2 * u ^ 10 * v ^ 7 * w ^ 7) - 3 * u ^ 10 * v ^ 8 * w ^ 6) - 3 * u ^ 11 * v ^ 6 * w ^ 7) - 3 * u ^ 11 * v ^ 7 * w ^ 6) - 2 * u ^ 12 * v ^ 6 * w ^ 6, (-(u ^ 18) * v ^ 14 * w ^ 16 - u ^ 18 * v ^ 16 * w ^ 14) - 2 * u ^ 20 * v ^ 14 * w ^ 14, ((((((((((((-(u ^ 8) * v ^ 8 * w ^ 12 + 2 * u ^ 8 * v ^ 9 * w ^ 11 + 2 * u ^ 8 * v ^ 11 * w ^ 9) - u ^ 8 * v ^ 12 * w ^ 8) - u ^ 10 * v ^ 6 * w ^ 12) - 9 * u ^ 10 * v ^ 8 * w ^ 10) + 4 * u ^ 10 * v ^ 9 * w ^ 9) - 9 * u ^ 10 * v ^ 10 * w ^ 8) - u ^ 10 * v ^ 12 * w ^ 6) + 4 * u ^ 11 * v ^ 6 * w ^ 11 + 6 * u ^ 11 * v ^ 8 * w ^ 9 + 6 * u ^ 11 * v ^ 9 * w ^ 8 + 4 * u ^ 11 * v ^ 11 * w ^ 6) - 12 * u ^ 12 * v ^ 8 * w ^ 8) + 6 * u ^ 13 * v ^ 6 * w ^ 9 + 6 * u ^ 13 * v ^ 9 * w ^ 6) - 2 * u ^ 14 * v ^ 6 * w ^ 8) - 2 * u ^ 14 * v ^ 8 * w ^ 6) - 2 * u ^ 16 * v ^ 6 * w ^ 6, (((((((-(u ^ 24) * v ^ 19 * w ^ 21 - u ^ 24 * v ^ 21 * w ^ 19) - u ^ 25 * v ^ 18 * w ^ 21) + 3 * u ^ 25 * v ^ 19 * w ^ 20 + 3 * u ^ 25 * v ^ 20 * w ^ 19) - u ^ 25 * v ^ 21 * w ^ 18) + 4 * u ^ 26 * v ^ 19 * w ^ 19) - 2 * u ^ 27 * v ^ 18 * w ^ 19) - 2 * u ^ 27 * v ^ 19 * w ^ 18) - 2 * u ^ 28 * v ^ 18 * w ^ 18, ((2 * u ^ 16 * v ^ 12 * w ^ 15 + 2 * u ^ 16 * v ^ 15 * w ^ 12) - 10 * u ^ 17 * v ^ 13 * w ^ 13) + 6 * u ^ 19 * v ^ 12 * w ^ 12, (((((u ^ 32 * v ^ 26 * w ^ 27 + u ^ 32 * v ^ 27 * w ^ 26) - 3 * u ^ 33 * v ^ 25 * w ^ 27) - 3 * u ^ 33 * v ^ 27 * w ^ 25) + u ^ 34 * v ^ 24 * w ^ 27 + u ^ 34 * v ^ 27 * w ^ 24 + 2 * u ^ 35 * v ^ 24 * w ^ 26) - 4 * u ^ 35 * v ^ 25 * w ^ 25) + 2 * u ^ 35 * v ^ 26 * w ^ 24 + 2 * u ^ 37 * v ^ 24 * w ^ 24, ((2 * u ^ 32 * v ^ 24 * w ^ 27 + 2 * u ^ 32 * v ^ 27 * w ^ 24) - 10 * u ^ 33 * v ^ 25 * w ^ 25) + 6 * u ^ 35 * v ^ 24 * w ^ 24, (((((((-(u ^ 24) * v ^ 20 * w ^ 21 - u ^ 24 * v ^ 21 * w ^ 20) + 3 * u ^ 25 * v ^ 19 * w ^ 21 + 3 * u ^ 25 * v ^ 21 * w ^ 19) - u ^ 26 * v ^ 18 * w ^ 21) - u ^ 26 * v ^ 21 * w ^ 18) - 2 * u ^ 27 * v ^ 18 * w ^ 20) + 4 * u ^ 27 * v ^ 19 * w ^ 19) - 2 * u ^ 27 * v ^ 20 * w ^ 18) - 2 * u ^ 29 * v ^ 18 * w ^ 18, ((((-2 * u ^ 10 * v ^ 7 * w ^ 9 - 3 * u ^ 10 * v ^ 8 * w ^ 8) - 2 * u ^ 10 * v ^ 9 * w ^ 7) - 2 * u ^ 11 * v ^ 7 * w ^ 8) - 2 * u ^ 11 * v ^ 8 * w ^ 7) + u ^ 12 * v ^ 6 * w ^ 8 + u ^ 12 * v ^ 8 * w ^ 6, ((((((((((((u ^ 16 * v ^ 13 * w ^ 18 - 2 * u ^ 16 * v ^ 15 * w ^ 16) - 2 * u ^ 16 * v ^ 16 * w ^ 15) + u ^ 16 * v ^ 18 * w ^ 13 + u ^ 17 * v ^ 12 * w ^ 18) - 4 * u ^ 17 * v ^ 15 * w ^ 15) + u ^ 17 * v ^ 18 * w ^ 12 + 9 * u ^ 18 * v ^ 14 * w ^ 15 + 9 * u ^ 18 * v ^ 15 * w ^ 14) - 4 * u ^ 19 * v ^ 12 * w ^ 16) - 6 * u ^ 19 * v ^ 13 * w ^ 15) + 12 * u ^ 19 * v ^ 14 * w ^ 14) - 6 * u ^ 19 * v ^ 15 * w ^ 13) - 4 * u ^ 19 * v ^ 16 * w ^ 12) - 6 * u ^ 20 * v ^ 12 * w ^ 15) - 6 * u ^ 20 * v ^ 15 * w ^ 12) + 2 * u ^ 22 * v ^ 12 * w ^ 13 + 2 * u ^ 22 * v ^ 13 * w ^ 12 + 2 * u ^ 23 * v ^ 12 * w ^ 12, ((((-2 * u ^ 8 * v ^ 6 * w ^ 12 + 8 * u ^ 8 * v ^ 9 * w ^ 9) - 2 * u ^ 8 * v ^ 12 * w ^ 6) - 30 * u ^ 10 * v ^ 8 * w ^ 8) + 16 * u ^ 11 * v ^ 6 * w ^ 9 + 16 * u ^ 11 * v ^ 9 * w ^ 6) - 6 * u ^ 14 * v ^ 6 * w ^ 6, ((((((-2 * u ^ 8 * v ^ 7 * w ^ 8 - 2 * u ^ 8 * v ^ 8 * w ^ 7) - 3 * u ^ 9 * v ^ 6 * w ^ 8) - 8 * u ^ 9 * v ^ 7 * w ^ 7) - 3 * u ^ 9 * v ^ 8 * w ^ 6) - 5 * u ^ 10 * v ^ 6 * w ^ 7) - 5 * u ^ 10 * v ^ 7 * w ^ 6) - 2 * u ^ 11 * v ^ 6 * w ^ 6, 2 * u ^ 16 * v ^ 12 * w ^ 14 + 4 * u ^ 16 * v ^ 13 * w ^ 13 + 2 * u ^ 16 * v ^ 14 * w ^ 12 + 8 * u ^ 17 * v ^ 12 * w ^ 13 + 8 * u ^ 17 * v ^ 13 * w ^ 12 + 6 * u ^ 18 * v ^ 12 * w ^ 12, 0, 24 * u ^ 32 * v ^ 24 * w ^ 26 + 24 * u ^ 32 * v ^ 26 * w ^ 24 + 32 * u ^ 34 * v ^ 24 * w ^ 24, ((((-2 * u ^ 8 * v ^ 6 * w ^ 8 - 4 * u ^ 8 * v ^ 7 * w ^ 7) - 2 * u ^ 8 * v ^ 8 * w ^ 6) - 8 * u ^ 9 * v ^ 6 * w ^ 7) - 8 * u ^ 9 * v ^ 7 * w ^ 6) - 6 * u ^ 10 * v ^ 6 * w ^ 6, ((((2 * u ^ 16 * v ^ 12 * w ^ 18 - 8 * u ^ 16 * v ^ 15 * w ^ 15) + 2 * u ^ 16 * v ^ 18 * w ^ 12 + 30 * u ^ 18 * v ^ 14 * w ^ 14) - 16 * u ^ 19 * v ^ 12 * w ^ 15) - 16 * u ^ 19 * v ^ 15 * w ^ 12) + 6 * u ^ 22 * v ^ 12 * w ^ 12, ((((-6 * u ^ 8 * v ^ 6 * w ^ 8 - 16 * u ^ 8 * v ^ 7 * w ^ 7) - 6 * u ^ 8 * v ^ 8 * w ^ 6) - 20 * u ^ 9 * v ^ 6 * w ^ 7) - 20 * u ^ 9 * v ^ 7 * w ^ 6) - 12 * u ^ 10 * v ^ 6 * w ^ 6, 2 * u ^ 16 * v ^ 13 * w ^ 14 + 2 * u ^ 16 * v ^ 14 * w ^ 13 + 3 * u ^ 17 * v ^ 12 * w ^ 14 + 8 * u ^ 17 * v ^ 13 * w ^ 13 + 3 * u ^ 17 * v ^ 14 * w ^ 12 + 5 * u ^ 18 * v ^ 12 * w ^ 13 + 5 * u ^ 18 * v ^ 13 * w ^ 12 + 2 * u ^ 19 * v ^ 12 * w ^ 12, ((-2 * u ^ 24 * v ^ 18 * w ^ 21 - 2 * u ^ 24 * v ^ 21 * w ^ 18) + 10 * u ^ 25 * v ^ 19 * w ^ 19) - 6 * u ^ 27 * v ^ 18 * w ^ 18, (-24 * u ^ 40 * v ^ 30 * w ^ 32 - 24 * u ^ 40 * v ^ 32 * w ^ 30) - 32 * u ^ 42 * v ^ 30 * w ^ 30, 6 * u ^ 16 * v ^ 12 * w ^ 14 + 16 * u ^ 16 * v ^ 13 * w ^ 13 + 6 * u ^ 16 * v ^ 14 * w ^ 12 + 20 * u ^ 17 * v ^ 12 * w ^ 13 + 20 * u ^ 17 * v ^ 13 * w ^ 12 + 12 * u ^ 18 * v ^ 12 * w ^ 12, (-24 * u ^ 8 * v ^ 6 * w ^ 7 - 24 * u ^ 8 * v ^ 7 * w ^ 6) - 32 * u ^ 9 * v ^ 6 * w ^ 6, -80 * u ^ 8 * v ^ 6 * w ^ 6, ((((-6 * u ^ 24 * v ^ 18 * w ^ 20 - 16 * u ^ 24 * v ^ 19 * w ^ 19) - 6 * u ^ 24 * v ^ 20 * w ^ 18) - 20 * u ^ 25 * v ^ 18 * w ^ 19) - 20 * u ^ 25 * v ^ 19 * w ^ 18) - 12 * u ^ 26 * v ^ 18 * w ^ 18, (-24 * u ^ 24 * v ^ 18 * w ^ 20 - 24 * u ^ 24 * v ^ 20 * w ^ 18) - 32 * u ^ 26 * v ^ 18 * w ^ 18, 24 * u ^ 16 * v ^ 12 * w ^ 13 + 24 * u ^ 16 * v ^ 13 * w ^ 12 + 32 * u ^ 17 * v ^ 12 * w ^ 12, (-24 * u ^ 24 * v ^ 18 * w ^ 19 - 24 * u ^ 24 * v ^ 19 * w ^ 18) - 32 * u ^ 25 * v ^ 18 * w ^ 18, -80 * u ^ 40 * v ^ 30 * w ^ 30, -80 * u ^ 24 * v ^ 18 * w ^ 18, 80 * u ^ 16 * v ^ 12 * w ^ 12, 80 * u ^ 32 * v ^ 24 * w ^ 24]
            end
        f64 = function (u, v, w, r)
                return [64, 16u + 24v + 24w, 4 * (v + w) * (v + w + u), 4 * (v + u + 2w) * (2v + u + w), 16 * u ^ 2 + 24 * v ^ 2 + 24 * w ^ 2, -8 * u * v * w + 4 * v ^ 3 + 4 * w ^ 3, (v + w + u) * (v ^ 2 + u * v + 4 * v * w + w ^ 2 + u * w), v * w * (v + w + u), 6 * u * v ^ 2 + 6 * u * w ^ 2 + 10 * v * w ^ 2 + 6 * u ^ 2 * v + 6 * u ^ 2 * w + 10 * v ^ 2 * w + 4 * u ^ 3 + 8 * v ^ 3 + 8 * w ^ 3, -u * v * w * (v + w), -(v ^ 2) * w ^ 2 * (((((((((((((((((((((((((((((((((v ^ 5 * w ^ 10 + v ^ 10 * w ^ 5) - w ^ 7 * v ^ 3 * u ^ 5) - w ^ 3 * v ^ 7 * u ^ 5) + w ^ 8 * v * u ^ 6) - w ^ 7 * v ^ 2 * u ^ 6) + w ^ 5 * v ^ 4 * u ^ 6 + w ^ 4 * v ^ 5 * u ^ 6) - w ^ 2 * v ^ 7 * u ^ 6) + w * v ^ 8 * u ^ 6 + w ^ 7 * v * u ^ 7 + w ^ 4 * v ^ 4 * u ^ 7 + w * v ^ 7 * u ^ 7 + v ^ 8 * u ^ 7) - w ^ 5 * v ^ 2 * u ^ 8) - w ^ 2 * v ^ 5 * u ^ 8) + v ^ 7 * u ^ 8) - 2 * w ^ 2 * v ^ 6 * u ^ 7) - 2 * w ^ 6 * v ^ 2 * u ^ 7) - 2 * w ^ 6 * v ^ 3 * u ^ 6) - 2 * w ^ 3 * v ^ 6 * u ^ 6) - 2 * w ^ 4 * v ^ 6 * u ^ 5) - 2 * w ^ 6 * v ^ 4 * u ^ 5) - 2 * w ^ 6 * v ^ 5 * u ^ 4) - 2 * w ^ 5 * v ^ 6 * u ^ 4) - w ^ 11 * v ^ 2 * u ^ 2) + w ^ 8 * v ^ 5 * u ^ 2 + w ^ 7 * v ^ 6 * u ^ 2 + w ^ 6 * v ^ 7 * u ^ 2 + w ^ 5 * v ^ 8 * u ^ 2) - w ^ 2 * v ^ 11 * u ^ 2) - w ^ 11 * v * u ^ 3) + w ^ 8 * v ^ 4 * u ^ 3 + w ^ 7 * v ^ 5 * u ^ 3 + w ^ 5 * v ^ 7 * u ^ 3 + w ^ 4 * v ^ 8 * u ^ 3) - w * v ^ 11 * u ^ 3) - w ^ 7 * v ^ 4 * u ^ 4) - w ^ 4 * v ^ 7 * u ^ 4) - v ^ 11 * u ^ 4) + w ^ 8 * u ^ 7 + w ^ 7 * u ^ 8) - w ^ 11 * u ^ 4) - w ^ 13 * v ^ 2) + w ^ 9 * v ^ 6 + w ^ 6 * v ^ 9) - w ^ 2 * v ^ 13), (v + w) * (v + w + u) * (v ^ 2 + v * w + w ^ 2 + u ^ 2), -r * u * v * w, 4 * (v ^ 2 + u ^ 2 + 2 * w ^ 2) * (2 * v ^ 2 + u ^ 2 + w ^ 2), -4 * (v + w) * (((((((((((((-(v ^ 6) + v ^ 5 * w) - v ^ 4 * w ^ 2) + u ^ 3 * v ^ 3 + 3 * v ^ 3 * w ^ 3) - 2 * u ^ 2 * v ^ 2 * w ^ 2) - v ^ 2 * w ^ 4) + u ^ 4 * v ^ 2) - u ^ 3 * v ^ 2 * w) - u ^ 3 * v * w ^ 2) + v * w ^ 5) - v * u ^ 4 * w) + u ^ 3 * w ^ 3) - w ^ 6) + u ^ 4 * w ^ 2), (((-3 * u * v * w ^ 2 - 3 * u * v ^ 2 * w) + u * v ^ 3 + u * w ^ 3 + 2 * v * w ^ 3) - 2 * u ^ 2 * v * w) + 2 * v ^ 3 * w + v ^ 4 + w ^ 4, (((((((((-4 * u * v * w ^ 3 + 2 * u * v ^ 2 * w ^ 2) - 4 * u * v ^ 3 * w) - v * w ^ 4) + 3 * u ^ 2 * v * w ^ 2 + 3 * u ^ 2 * v ^ 2 * w + 2 * u ^ 2 * v ^ 3 + 2 * u ^ 2 * w ^ 3) - 4 * u ^ 3 * v * w) + u ^ 3 * v ^ 2 + u ^ 3 * w ^ 2) - u ^ 4 * v) - u ^ 4 * w) - v ^ 4 * w) + v ^ 5 + w ^ 5, -(u ^ 2) * v ^ 3 * w ^ 3, -(u ^ 2) * v ^ 2 * w ^ 4 - u ^ 2 * v ^ 4 * w ^ 2, 0, (((((u ^ 4 * v ^ 8 * w ^ 14 + u ^ 4 * v ^ 9 * w ^ 13 + u ^ 4 * v ^ 13 * w ^ 9 + u ^ 4 * v ^ 14 * w ^ 8 + u ^ 6 * v ^ 6 * w ^ 14 + u ^ 6 * v ^ 7 * w ^ 13 + u ^ 6 * v ^ 13 * w ^ 7 + u ^ 6 * v ^ 14 * w ^ 6 + u ^ 7 * v ^ 6 * w ^ 13 + u ^ 7 * v ^ 13 * w ^ 6 + u ^ 8 * v ^ 4 * w ^ 14) - u ^ 8 * v ^ 9 * w ^ 9) + u ^ 8 * v ^ 14 * w ^ 4 + v ^ 8 * w ^ 18 + u ^ 9 * v ^ 4 * w ^ 13) - u ^ 9 * v ^ 8 * w ^ 9) - u ^ 9 * v ^ 9 * w ^ 8) + u ^ 9 * v ^ 13 * w ^ 4 + v ^ 9 * w ^ 17 + v ^ 17 * w ^ 9 + v ^ 18 * w ^ 8, (((-3 * u * v * w ^ 3 - 3 * u * v ^ 3 * w) + u ^ 2 * v ^ 3 + u ^ 2 * w ^ 3 + 2 * v ^ 2 * w ^ 3) - 2 * u ^ 3 * v * w) + 2 * v ^ 3 * w ^ 2 + v ^ 5 + w ^ 5, -r * u ^ 6 * v ^ 8 * w ^ 9 - r * u ^ 6 * v ^ 9 * w ^ 8, u ^ 5 * v ^ 5 * w ^ 5 + v ^ 5 * w ^ 10 + v ^ 10 * w ^ 5, -r * u ^ 27 * v ^ 39 * w ^ 41 - r * u ^ 27 * v ^ 41 * w ^ 39, ((((((((((((((((u ^ 2 * v ^ 4 * w ^ 12 - 2 * u ^ 2 * v ^ 7 * w ^ 9) - 2 * u ^ 2 * v ^ 9 * w ^ 7) + u ^ 2 * v ^ 12 * w ^ 4 + u ^ 3 * v ^ 3 * w ^ 12) - 2 * u ^ 3 * v ^ 6 * w ^ 9) - 2 * u ^ 3 * v ^ 9 * w ^ 6) + u ^ 3 * v ^ 12 * w ^ 3 + u ^ 4 * v ^ 2 * w ^ 12 + 3 * u ^ 4 * v ^ 6 * w ^ 8 + 2 * u ^ 4 * v ^ 7 * w ^ 7 + 3 * u ^ 4 * v ^ 8 * w ^ 6 + u ^ 4 * v ^ 12 * w ^ 2 + v ^ 4 * w ^ 14 + 3 * u ^ 5 * v ^ 5 * w ^ 8 + 3 * u ^ 5 * v ^ 8 * w ^ 5) - 2 * u ^ 6 * v ^ 3 * w ^ 9) + 3 * u ^ 6 * v ^ 4 * w ^ 8) - 3 * u ^ 6 * v ^ 6 * w ^ 6) + 3 * u ^ 6 * v ^ 8 * w ^ 4) - 2 * u ^ 6 * v ^ 9 * w ^ 3) - 2 * u ^ 7 * v ^ 2 * w ^ 9) + 2 * u ^ 7 * v ^ 4 * w ^ 7 + 2 * u ^ 7 * v ^ 7 * w ^ 4) - 2 * u ^ 7 * v ^ 9 * w ^ 2) - 2 * v ^ 7 * w ^ 11) - 2 * v ^ 11 * w ^ 7) + v ^ 14 * w ^ 4, ((2 * u * v ^ 2 * w ^ 3 + 2 * u * v ^ 3 * w ^ 2 + 2 * u ^ 2 * v * w ^ 3 + 3 * u ^ 2 * v ^ 2 * w ^ 2 + 2 * u ^ 2 * v ^ 3 * w) - v ^ 2 * w ^ 4) - v ^ 4 * w ^ 2, -r * u ^ 3 * v ^ 4 * w ^ 4, (((((((((((((((((-2 * u * v ^ 2 * w ^ 3 - 2 * u * v ^ 3 * w ^ 2) - u * v ^ 5) - u * w ^ 5) - 3 * v * w ^ 5) - 2 * u ^ 2 * v * w ^ 3) + 8 * u ^ 2 * v ^ 2 * w ^ 2) - 2 * u ^ 2 * v ^ 3 * w) + 4 * u ^ 2 * v ^ 4 + 4 * u ^ 2 * w ^ 4 + 5 * v ^ 2 * w ^ 4) - 2 * u ^ 3 * v * w ^ 2) - 2 * u ^ 3 * v ^ 2 * w) - 2 * u ^ 3 * v ^ 3) - 2 * u ^ 3 * w ^ 3) - 6 * v ^ 3 * w ^ 3) + 2 * u ^ 4 * v ^ 2 + 2 * u ^ 4 * w ^ 2 + 5 * v ^ 4 * w ^ 2) - u ^ 5 * v) - u ^ 5 * w) - 3 * v ^ 5 * w) + v ^ 6 + w ^ 6, 0, (((24 * u ^ 2 * v ^ 2 * w ^ 2 - 8 * u ^ 3 * v ^ 3) - 8 * u ^ 3 * w ^ 3) - 16 * v ^ 3 * w ^ 3) + 4 * v ^ 6 + 4 * w ^ 6, (4 * r * u ^ 25 * v ^ 37 * w ^ 40 + 4 * r * u ^ 25 * v ^ 40 * w ^ 37) - 8 * r * u ^ 26 * v ^ 38 * w ^ 38, ((((((((((((((((((((((((((((u ^ 4 * v ^ 8 * w ^ 19 - u ^ 4 * v ^ 11 * w ^ 16) - u ^ 4 * v ^ 12 * w ^ 15) - u ^ 4 * v ^ 15 * w ^ 12) - u ^ 4 * v ^ 16 * w ^ 11) + u ^ 4 * v ^ 19 * w ^ 8 + u ^ 6 * v ^ 6 * w ^ 19) - u ^ 6 * v ^ 9 * w ^ 16) + u ^ 6 * v ^ 11 * w ^ 14 + u ^ 6 * v ^ 14 * w ^ 11) - u ^ 6 * v ^ 16 * w ^ 9) + u ^ 6 * v ^ 19 * w ^ 6 + u ^ 7 * v ^ 10 * w ^ 14 + u ^ 7 * v ^ 14 * w ^ 10 + u ^ 8 * v ^ 4 * w ^ 19 + u ^ 8 * v ^ 8 * w ^ 15 + u ^ 8 * v ^ 9 * w ^ 14 + u ^ 8 * v ^ 11 * w ^ 12 + u ^ 8 * v ^ 12 * w ^ 11 + u ^ 8 * v ^ 14 * w ^ 9 + u ^ 8 * v ^ 15 * w ^ 8 + u ^ 8 * v ^ 19 * w ^ 4 + v ^ 8 * w ^ 23) - u ^ 9 * v ^ 6 * w ^ 16) + u ^ 9 * v ^ 8 * w ^ 14 + u ^ 9 * v ^ 14 * w ^ 8) - u ^ 9 * v ^ 16 * w ^ 6) + u ^ 10 * v ^ 7 * w ^ 14) - u ^ 10 * v ^ 10 * w ^ 11) - u ^ 10 * v ^ 11 * w ^ 10) + u ^ 10 * v ^ 14 * w ^ 7) - u ^ 11 * v ^ 4 * w ^ 16) + u ^ 11 * v ^ 6 * w ^ 14 + u ^ 11 * v ^ 8 * w ^ 12) - u ^ 11 * v ^ 10 * w ^ 10) + u ^ 11 * v ^ 12 * w ^ 8 + u ^ 11 * v ^ 14 * w ^ 6) - u ^ 11 * v ^ 16 * w ^ 4) - v ^ 11 * w ^ 20) - u ^ 12 * v ^ 4 * w ^ 15) + u ^ 12 * v ^ 8 * w ^ 11 + u ^ 12 * v ^ 11 * w ^ 8) - u ^ 12 * v ^ 15 * w ^ 4) - v ^ 12 * w ^ 19) - v ^ 19 * w ^ 12) - v ^ 20 * w ^ 11) + v ^ 23 * w ^ 8, 0, -(u ^ 4) * v ^ 6 * w ^ 6, ((((((((((-4 * u * v ^ 3 * w ^ 3 + u * v ^ 6 + u * w ^ 6 + 2 * v * w ^ 6 + 9 * u ^ 2 * v ^ 2 * w ^ 3 + 9 * u ^ 2 * v ^ 3 * w ^ 2) - 4 * u ^ 3 * v * w ^ 3) + 6 * u ^ 3 * v ^ 2 * w ^ 2) - 4 * u ^ 3 * v ^ 3 * w) - 2 * u ^ 3 * v ^ 4) - 2 * u ^ 3 * w ^ 4) - 6 * v ^ 3 * w ^ 4) - 2 * u ^ 4 * v ^ 3) - 2 * u ^ 4 * w ^ 3) - 6 * v ^ 4 * w ^ 3) + 2 * v ^ 6 * w + v ^ 7 + w ^ 7, -r * u ^ 7 * v ^ 9 * w ^ 9 * (w ^ 2 + v ^ 2), -r * u ^ 5 * v ^ 7 * w ^ 7 * (((((((-(w ^ 5) - 2 * v ^ 2 * w ^ 3) - 2 * v ^ 3 * w ^ 2) - v ^ 5) + 3 * w ^ 3 * v * u + 3 * w * v ^ 3 * u) - w ^ 3 * u ^ 2) - v ^ 3 * u ^ 2) + 2 * w * v * u ^ 3), -r * u ^ 17 * v ^ 24 * w ^ 24 * (w ^ 2 + v ^ 2), v ^ 2 * w ^ 2 * (((((-(u ^ 6) * v ^ 2 * w ^ 2 - 2 * u ^ 5 * v ^ 2 * w ^ 3) - 2 * u ^ 5 * v ^ 3 * w ^ 2) + u ^ 6 * v ^ 4 + u ^ 6 * w ^ 4 + 2 * u ^ 5 * w ^ 5 + 2 * u ^ 5 * v ^ 5 + w ^ 6 * v ^ 2 * u ^ 2 + w ^ 2 * v ^ 6 * u ^ 2 + w ^ 4 * v ^ 2 * u ^ 4 + w ^ 2 * v ^ 4 * u ^ 4 + 4 * w * v ^ 5 * u ^ 4 + v ^ 6 * u ^ 4 + 2 * w ^ 4 * v ^ 4 * u ^ 2 + 2 * w ^ 3 * v ^ 5 * u ^ 2 + 4 * w ^ 5 * v ^ 2 * u ^ 3 + 4 * w ^ 2 * v ^ 5 * u ^ 3 + 2 * w * v ^ 6 * u ^ 3 + 4 * w ^ 5 * v * u ^ 4) - 2 * w ^ 3 * v ^ 3 * u ^ 4) + 2 * w ^ 5 * v ^ 3 * u ^ 2 + 2 * w ^ 6 * v * u ^ 3 + w ^ 8 * v ^ 2 + 2 * w ^ 7 * v ^ 3 + w ^ 6 * u ^ 4 + w ^ 2 * v ^ 8 + 2 * w ^ 3 * v ^ 7), 0, -r * u ^ 11 * v ^ 16 * w ^ 16, -4 * r * u ^ 5 * v ^ 7 * w ^ 7 * ((-(v ^ 3) + 2 * u * w * v) - w ^ 3), v ^ 2 * w ^ 2 * ((((((w ^ 6 * v ^ 2 * u ^ 2 + w ^ 5 * v ^ 3 * u ^ 2 + w ^ 3 * v ^ 5 * u ^ 2 + w ^ 2 * v ^ 6 * u ^ 2 + w ^ 6 * v * u ^ 3 + w ^ 5 * v ^ 2 * u ^ 3 + w ^ 2 * v ^ 5 * u ^ 3 + w * v ^ 6 * u ^ 3 + w ^ 6 * u ^ 4 + w ^ 5 * v * u ^ 4) - w ^ 3 * v ^ 3 * u ^ 4) + w * v ^ 5 * u ^ 4 + v ^ 6 * u ^ 4 + w ^ 8 * v ^ 2 + u ^ 5 * w ^ 5) - u ^ 5 * v ^ 2 * w ^ 3) - u ^ 5 * v ^ 3 * w ^ 2) + u ^ 5 * v ^ 5 + w ^ 7 * v ^ 3 + w ^ 3 * v ^ 7 + w ^ 2 * v ^ 8), -r * u ^ 25 * v ^ 37 * w ^ 37 * (((((((-(w ^ 4) - 2 * v * w ^ 3) - 2 * v ^ 3 * w) - v ^ 4) - w ^ 3 * u) + 3 * w ^ 2 * v * u + 3 * w * v ^ 2 * u) - v ^ 3 * u) + 2 * w * v * u ^ 2), -r * u ^ 26 * v ^ 38 * w ^ 38 * (v + w), (((((((((((9 * u ^ 2 * v ^ 2 * w ^ 4 - 4 * u ^ 2 * v ^ 3 * w ^ 3) + 9 * u ^ 2 * v ^ 4 * w ^ 2 + u ^ 2 * v ^ 6 + u ^ 2 * w ^ 6 + 2 * v ^ 2 * w ^ 6) - 4 * u ^ 3 * v ^ 2 * w ^ 3) - 4 * u ^ 3 * v ^ 3 * w ^ 2) - 2 * u ^ 3 * v ^ 5) - 2 * u ^ 3 * w ^ 5) - 6 * v ^ 3 * w ^ 5) + 6 * u ^ 4 * v ^ 2 * w ^ 2) - 2 * u ^ 5 * v ^ 3) - 2 * u ^ 5 * w ^ 3) - 6 * v ^ 5 * w ^ 3) + 2 * v ^ 6 * w ^ 2 + v ^ 8 + w ^ 8, 24 * r * u ^ 25 * v ^ 37 * w ^ 38 + 24 * r * u ^ 25 * v ^ 38 * w ^ 37 + 16 * r * u ^ 26 * v ^ 37 * w ^ 37, ((((r * u ^ 5 * v ^ 7 * w ^ 11 + 2 * r * u ^ 5 * v ^ 8 * w ^ 10 + 2 * r * u ^ 5 * v ^ 10 * w ^ 8 + r * u ^ 5 * v ^ 11 * w ^ 7 + r * u ^ 6 * v ^ 7 * w ^ 10) - 3 * r * u ^ 6 * v ^ 8 * w ^ 9) - 3 * r * u ^ 6 * v ^ 9 * w ^ 8) + r * u ^ 6 * v ^ 10 * w ^ 7) - 2 * r * u ^ 7 * v ^ 8 * w ^ 8, -(u ^ 21) * v ^ 31 * w ^ 32 - u ^ 21 * v ^ 32 * w ^ 31, 0, ((((r * u ^ 25 * v ^ 37 * w ^ 42 + 2 * r * u ^ 25 * v ^ 39 * w ^ 40 + 2 * r * u ^ 25 * v ^ 40 * w ^ 39 + r * u ^ 25 * v ^ 42 * w ^ 37) - 3 * r * u ^ 26 * v ^ 38 * w ^ 40) - 3 * r * u ^ 26 * v ^ 40 * w ^ 38) + r * u ^ 27 * v ^ 37 * w ^ 40 + r * u ^ 27 * v ^ 40 * w ^ 37) - 2 * r * u ^ 28 * v ^ 38 * w ^ 38, 8 * r * u ^ 5 * v ^ 7 * w ^ 11 + 20 * r * u ^ 5 * v ^ 9 * w ^ 9 + 8 * r * u ^ 5 * v ^ 11 * w ^ 7 + 12 * r * u ^ 7 * v ^ 7 * w ^ 9 + 12 * r * u ^ 7 * v ^ 9 * w ^ 7 + 4 * r * u ^ 9 * v ^ 7 * w ^ 7, 24 * r * u ^ 5 * v ^ 7 * w ^ 9 + 24 * r * u ^ 5 * v ^ 9 * w ^ 7 + 16 * r * u ^ 7 * v ^ 7 * w ^ 7, -r * u ^ 16 * v ^ 23 * w ^ 24 - r * u ^ 16 * v ^ 24 * w ^ 23, 8 * r * u ^ 25 * v ^ 37 * w ^ 40 + 10 * r * u ^ 25 * v ^ 38 * w ^ 39 + 10 * r * u ^ 25 * v ^ 39 * w ^ 38 + 8 * r * u ^ 25 * v ^ 40 * w ^ 37 + 6 * r * u ^ 26 * v ^ 37 * w ^ 39 + 6 * r * u ^ 26 * v ^ 39 * w ^ 37 + 6 * r * u ^ 27 * v ^ 37 * w ^ 38 + 6 * r * u ^ 27 * v ^ 38 * w ^ 37 + 4 * r * u ^ 28 * v ^ 37 * w ^ 37, (((((3 * u ^ 2 * v ^ 4 * w ^ 7 + 2 * u ^ 2 * v ^ 5 * w ^ 6 + 2 * u ^ 2 * v ^ 6 * w ^ 5 + 3 * u ^ 2 * v ^ 7 * w ^ 4 + 4 * u ^ 3 * v ^ 3 * w ^ 7 + 3 * u ^ 3 * v ^ 4 * w ^ 6 + 3 * u ^ 3 * v ^ 6 * w ^ 4 + 4 * u ^ 3 * v ^ 7 * w ^ 3 + 3 * u ^ 4 * v ^ 2 * w ^ 7 + 3 * u ^ 4 * v ^ 3 * w ^ 6) - 3 * u ^ 4 * v ^ 4 * w ^ 5) - 3 * u ^ 4 * v ^ 5 * w ^ 4) + 3 * u ^ 4 * v ^ 6 * w ^ 3 + 3 * u ^ 4 * v ^ 7 * w ^ 2 + 2 * v ^ 4 * w ^ 9 + 2 * u ^ 5 * v ^ 2 * w ^ 6) - 3 * u ^ 5 * v ^ 4 * w ^ 4) + 2 * u ^ 5 * v ^ 6 * w ^ 2 + v ^ 5 * w ^ 8 + v ^ 8 * w ^ 5 + 2 * v ^ 9 * w ^ 4, 0, -(u ^ 22) * v ^ 32 * w ^ 34 - u ^ 22 * v ^ 34 * w ^ 32, 0, 8 * r * u ^ 5 * v ^ 7 * w ^ 10 + 10 * r * u ^ 5 * v ^ 8 * w ^ 9 + 10 * r * u ^ 5 * v ^ 9 * w ^ 8 + 8 * r * u ^ 5 * v ^ 10 * w ^ 7 + 6 * r * u ^ 6 * v ^ 7 * w ^ 9 + 6 * r * u ^ 6 * v ^ 9 * w ^ 7 + 6 * r * u ^ 7 * v ^ 7 * w ^ 8 + 6 * r * u ^ 7 * v ^ 8 * w ^ 7 + 4 * r * u ^ 8 * v ^ 7 * w ^ 7, 0, ((((u ^ 10 * v ^ 15 * w ^ 19 + 2 * u ^ 10 * v ^ 16 * w ^ 18 + 2 * u ^ 10 * v ^ 18 * w ^ 16 + u ^ 10 * v ^ 19 * w ^ 15 + u ^ 11 * v ^ 15 * w ^ 18) - 3 * u ^ 11 * v ^ 16 * w ^ 17) - 3 * u ^ 11 * v ^ 17 * w ^ 16) + u ^ 11 * v ^ 18 * w ^ 15) - 2 * u ^ 12 * v ^ 16 * w ^ 16, -(u ^ 11) * v ^ 16 * w ^ 17 - u ^ 11 * v ^ 17 * w ^ 16, ((6 * u ^ 2 * v ^ 4 * w ^ 6 + 6 * u ^ 2 * v ^ 6 * w ^ 4 + 8 * u ^ 3 * v ^ 3 * w ^ 6 + 8 * u ^ 3 * v ^ 6 * w ^ 3 + 6 * u ^ 4 * v ^ 2 * w ^ 6) - 9 * u ^ 4 * v ^ 4 * w ^ 4) + 6 * u ^ 4 * v ^ 6 * w ^ 2 + 3 * v ^ 4 * w ^ 8 + 3 * v ^ 8 * w ^ 4, ((((((((((((r * u ^ 5 * v ^ 7 * w ^ 14 + 2 * r * u ^ 5 * v ^ 8 * w ^ 13) - 6 * r * u ^ 5 * v ^ 10 * w ^ 11) - 6 * r * u ^ 5 * v ^ 11 * w ^ 10) + 2 * r * u ^ 5 * v ^ 13 * w ^ 8 + r * u ^ 5 * v ^ 14 * w ^ 7 + r * u ^ 6 * v ^ 7 * w ^ 13) - 4 * r * u ^ 6 * v ^ 10 * w ^ 10) + r * u ^ 6 * v ^ 13 * w ^ 7 + 9 * r * u ^ 7 * v ^ 9 * w ^ 10 + 9 * r * u ^ 7 * v ^ 10 * w ^ 9) - 2 * r * u ^ 8 * v ^ 7 * w ^ 11) - 4 * r * u ^ 8 * v ^ 8 * w ^ 10) + 6 * r * u ^ 8 * v ^ 9 * w ^ 9) - 4 * r * u ^ 8 * v ^ 10 * w ^ 8) - 2 * r * u ^ 8 * v ^ 11 * w ^ 7) - 2 * r * u ^ 9 * v ^ 7 * w ^ 10) - 2 * r * u ^ 9 * v ^ 10 * w ^ 7, -(u ^ 6) * v ^ 9 * w ^ 9, (((((((((((((((((((u ^ 10 * v ^ 15 * w ^ 23 + 2 * u ^ 10 * v ^ 16 * w ^ 22) - 3 * u ^ 10 * v ^ 18 * w ^ 20) - 6 * u ^ 10 * v ^ 19 * w ^ 19) - 3 * u ^ 10 * v ^ 20 * w ^ 18) + 2 * u ^ 10 * v ^ 22 * w ^ 16 + u ^ 10 * v ^ 23 * w ^ 15 + u ^ 11 * v ^ 15 * w ^ 22) - 2 * u ^ 11 * v ^ 18 * w ^ 19) - 2 * u ^ 11 * v ^ 19 * w ^ 18) + u ^ 11 * v ^ 22 * w ^ 15 + 3 * u ^ 12 * v ^ 17 * w ^ 19 + 6 * u ^ 12 * v ^ 18 * w ^ 18 + 3 * u ^ 12 * v ^ 19 * w ^ 17) - u ^ 13 * v ^ 15 * w ^ 20) - 2 * u ^ 13 * v ^ 16 * w ^ 19) + 5 * u ^ 13 * v ^ 17 * w ^ 18 + 5 * u ^ 13 * v ^ 18 * w ^ 17) - 2 * u ^ 13 * v ^ 19 * w ^ 16) - u ^ 13 * v ^ 20 * w ^ 15) - 2 * u ^ 14 * v ^ 15 * w ^ 19) - 2 * u ^ 14 * v ^ 16 * w ^ 18) + 2 * u ^ 14 * v ^ 17 * w ^ 17) - 2 * u ^ 14 * v ^ 18 * w ^ 16) - 2 * u ^ 14 * v ^ 19 * w ^ 15) - u ^ 15 * v ^ 15 * w ^ 18) - u ^ 15 * v ^ 18 * w ^ 15, ((6 * u ^ 4 * v ^ 8 * w ^ 12 + 6 * u ^ 4 * v ^ 12 * w ^ 8 + 8 * u ^ 6 * v ^ 6 * w ^ 12 + 8 * u ^ 6 * v ^ 12 * w ^ 6 + 6 * u ^ 8 * v ^ 4 * w ^ 12) - 9 * u ^ 8 * v ^ 8 * w ^ 8) + 6 * u ^ 8 * v ^ 12 * w ^ 4 + 3 * v ^ 8 * w ^ 16 + 3 * v ^ 16 * w ^ 8, 8 * r * u ^ 15 * v ^ 22 * w ^ 25 + 10 * r * u ^ 15 * v ^ 23 * w ^ 24 + 10 * r * u ^ 15 * v ^ 24 * w ^ 23 + 8 * r * u ^ 15 * v ^ 25 * w ^ 22 + 6 * r * u ^ 16 * v ^ 22 * w ^ 24 + 6 * r * u ^ 16 * v ^ 24 * w ^ 22 + 6 * r * u ^ 17 * v ^ 22 * w ^ 23 + 6 * r * u ^ 17 * v ^ 23 * w ^ 22 + 4 * r * u ^ 18 * v ^ 22 * w ^ 22, r * u ^ 5 * v ^ 7 * w ^ 11 + 3 * r * u ^ 5 * v ^ 8 * w ^ 10 + 4 * r * u ^ 5 * v ^ 9 * w ^ 9 + 3 * r * u ^ 5 * v ^ 10 * w ^ 8 + r * u ^ 5 * v ^ 11 * w ^ 7 + r * u ^ 6 * v ^ 7 * w ^ 10 + 2 * r * u ^ 6 * v ^ 8 * w ^ 9 + 2 * r * u ^ 6 * v ^ 9 * w ^ 8 + r * u ^ 6 * v ^ 10 * w ^ 7 + r * u ^ 7 * v ^ 7 * w ^ 9 + 2 * r * u ^ 7 * v ^ 8 * w ^ 8 + r * u ^ 7 * v ^ 9 * w ^ 7 + r * u ^ 8 * v ^ 7 * w ^ 8 + r * u ^ 8 * v ^ 8 * w ^ 7, -(u ^ 12) * v ^ 17 * w ^ 19 - u ^ 12 * v ^ 19 * w ^ 17, ((((((((((((r * u ^ 5 * v ^ 7 * w ^ 15 + 2 * r * u ^ 5 * v ^ 9 * w ^ 13) - 6 * r * u ^ 5 * v ^ 10 * w ^ 12) - 6 * r * u ^ 5 * v ^ 12 * w ^ 10) + 2 * r * u ^ 5 * v ^ 13 * w ^ 9 + r * u ^ 5 * v ^ 15 * w ^ 7 + r * u ^ 7 * v ^ 7 * w ^ 13 + 9 * r * u ^ 7 * v ^ 9 * w ^ 11) - 4 * r * u ^ 7 * v ^ 10 * w ^ 10) + 9 * r * u ^ 7 * v ^ 11 * w ^ 9 + r * u ^ 7 * v ^ 13 * w ^ 7) - 2 * r * u ^ 8 * v ^ 7 * w ^ 12) - 4 * r * u ^ 8 * v ^ 9 * w ^ 10) - 4 * r * u ^ 8 * v ^ 10 * w ^ 9) - 2 * r * u ^ 8 * v ^ 12 * w ^ 7) + 6 * r * u ^ 9 * v ^ 9 * w ^ 9) - 2 * r * u ^ 10 * v ^ 7 * w ^ 10) - 2 * r * u ^ 10 * v ^ 10 * w ^ 7, ((((r * u ^ 15 * v ^ 22 * w ^ 26 + 2 * r * u ^ 15 * v ^ 23 * w ^ 25 + 2 * r * u ^ 15 * v ^ 25 * w ^ 23 + r * u ^ 15 * v ^ 26 * w ^ 22 + r * u ^ 16 * v ^ 22 * w ^ 25) - 3 * r * u ^ 16 * v ^ 23 * w ^ 24) - 3 * r * u ^ 16 * v ^ 24 * w ^ 23) + r * u ^ 16 * v ^ 25 * w ^ 22) - 2 * r * u ^ 17 * v ^ 23 * w ^ 23, (4 * u ^ 10 * v ^ 15 * w ^ 18 + 4 * u ^ 10 * v ^ 18 * w ^ 15) - 8 * u ^ 11 * v ^ 16 * w ^ 16, ((((u ^ 20 * v ^ 30 * w ^ 35 + 2 * u ^ 20 * v ^ 32 * w ^ 33 + 2 * u ^ 20 * v ^ 33 * w ^ 32 + u ^ 20 * v ^ 35 * w ^ 30) - 3 * u ^ 21 * v ^ 31 * w ^ 33) - 3 * u ^ 21 * v ^ 33 * w ^ 31) + u ^ 22 * v ^ 30 * w ^ 33 + u ^ 22 * v ^ 33 * w ^ 30) - 2 * u ^ 23 * v ^ 31 * w ^ 31, (4 * u ^ 20 * v ^ 30 * w ^ 33 + 4 * u ^ 20 * v ^ 33 * w ^ 30) - 8 * u ^ 21 * v ^ 31 * w ^ 31, ((((r * u ^ 15 * v ^ 22 * w ^ 27 + 2 * r * u ^ 15 * v ^ 24 * w ^ 25 + 2 * r * u ^ 15 * v ^ 25 * w ^ 24 + r * u ^ 15 * v ^ 27 * w ^ 22) - 3 * r * u ^ 16 * v ^ 23 * w ^ 25) - 3 * r * u ^ 16 * v ^ 25 * w ^ 23) + r * u ^ 17 * v ^ 22 * w ^ 25 + r * u ^ 17 * v ^ 25 * w ^ 22) - 2 * r * u ^ 18 * v ^ 23 * w ^ 23, (-r * u ^ 5 * v ^ 9 * w ^ 11 - r * u ^ 5 * v ^ 11 * w ^ 9) + 2 * r * u ^ 6 * v ^ 9 * w ^ 10 + 2 * r * u ^ 6 * v ^ 10 * w ^ 9 + 2 * r * u ^ 7 * v ^ 8 * w ^ 10 + 3 * r * u ^ 7 * v ^ 9 * w ^ 9 + 2 * r * u ^ 7 * v ^ 10 * w ^ 8, ((((((((((((u ^ 10 * v ^ 15 * w ^ 22 + 2 * u ^ 10 * v ^ 16 * w ^ 21) - 6 * u ^ 10 * v ^ 18 * w ^ 19) - 6 * u ^ 10 * v ^ 19 * w ^ 18) + 2 * u ^ 10 * v ^ 21 * w ^ 16 + u ^ 10 * v ^ 22 * w ^ 15 + u ^ 11 * v ^ 15 * w ^ 21) - 4 * u ^ 11 * v ^ 18 * w ^ 18) + u ^ 11 * v ^ 21 * w ^ 15 + 9 * u ^ 12 * v ^ 17 * w ^ 18 + 9 * u ^ 12 * v ^ 18 * w ^ 17) - 2 * u ^ 13 * v ^ 15 * w ^ 19) - 4 * u ^ 13 * v ^ 16 * w ^ 18) + 6 * u ^ 13 * v ^ 17 * w ^ 17) - 4 * u ^ 13 * v ^ 18 * w ^ 16) - 2 * u ^ 13 * v ^ 19 * w ^ 15) - 2 * u ^ 14 * v ^ 15 * w ^ 18) - 2 * u ^ 14 * v ^ 18 * w ^ 15, (((4 * r * u ^ 5 * v ^ 7 * w ^ 13 - 16 * r * u ^ 5 * v ^ 10 * w ^ 10) + 4 * r * u ^ 5 * v ^ 13 * w ^ 7 + 24 * r * u ^ 7 * v ^ 9 * w ^ 9) - 8 * r * u ^ 8 * v ^ 7 * w ^ 10) - 8 * r * u ^ 8 * v ^ 10 * w ^ 7, r * u ^ 5 * v ^ 7 * w ^ 10 + 5 * r * u ^ 5 * v ^ 8 * w ^ 9 + 5 * r * u ^ 5 * v ^ 9 * w ^ 8 + r * u ^ 5 * v ^ 10 * w ^ 7 + 2 * r * u ^ 6 * v ^ 7 * w ^ 9 + 6 * r * u ^ 6 * v ^ 8 * w ^ 8 + 2 * r * u ^ 6 * v ^ 9 * w ^ 7 + r * u ^ 7 * v ^ 7 * w ^ 8 + r * u ^ 7 * v ^ 8 * w ^ 7, 4 * u ^ 10 * v ^ 15 * w ^ 17 + 8 * u ^ 10 * v ^ 16 * w ^ 16 + 4 * u ^ 10 * v ^ 17 * w ^ 15 + 4 * u ^ 11 * v ^ 15 * w ^ 16 + 4 * u ^ 11 * v ^ 16 * w ^ 15, 0, 24 * u ^ 20 * v ^ 30 * w ^ 32 + 24 * u ^ 20 * v ^ 32 * w ^ 30 + 16 * u ^ 22 * v ^ 30 * w ^ 30, 4 * r * u ^ 5 * v ^ 7 * w ^ 9 + 8 * r * u ^ 5 * v ^ 8 * w ^ 8 + 4 * r * u ^ 5 * v ^ 9 * w ^ 7 + 4 * r * u ^ 6 * v ^ 7 * w ^ 8 + 4 * r * u ^ 6 * v ^ 8 * w ^ 7, (((4 * u ^ 10 * v ^ 15 * w ^ 21 - 16 * u ^ 10 * v ^ 18 * w ^ 18) + 4 * u ^ 10 * v ^ 21 * w ^ 15 + 24 * u ^ 12 * v ^ 17 * w ^ 17) - 8 * u ^ 13 * v ^ 15 * w ^ 18) - 8 * u ^ 13 * v ^ 18 * w ^ 15, 8 * r * u ^ 5 * v ^ 7 * w ^ 9 + 20 * r * u ^ 5 * v ^ 8 * w ^ 8 + 8 * r * u ^ 5 * v ^ 9 * w ^ 7 + 12 * r * u ^ 6 * v ^ 7 * w ^ 8 + 12 * r * u ^ 6 * v ^ 8 * w ^ 7 + 4 * r * u ^ 7 * v ^ 7 * w ^ 7, u ^ 10 * v ^ 15 * w ^ 18 + 5 * u ^ 10 * v ^ 16 * w ^ 17 + 5 * u ^ 10 * v ^ 17 * w ^ 16 + u ^ 10 * v ^ 18 * w ^ 15 + 2 * u ^ 11 * v ^ 15 * w ^ 17 + 6 * u ^ 11 * v ^ 16 * w ^ 16 + 2 * u ^ 11 * v ^ 17 * w ^ 15 + u ^ 12 * v ^ 15 * w ^ 16 + u ^ 12 * v ^ 16 * w ^ 15, (4 * r * u ^ 15 * v ^ 22 * w ^ 25 + 4 * r * u ^ 15 * v ^ 25 * w ^ 22) - 8 * r * u ^ 16 * v ^ 23 * w ^ 23, 24 * r * u ^ 25 * v ^ 37 * w ^ 39 + 24 * r * u ^ 25 * v ^ 39 * w ^ 37 + 16 * r * u ^ 27 * v ^ 37 * w ^ 37, 8 * u ^ 10 * v ^ 15 * w ^ 17 + 20 * u ^ 10 * v ^ 16 * w ^ 16 + 8 * u ^ 10 * v ^ 17 * w ^ 15 + 12 * u ^ 11 * v ^ 15 * w ^ 16 + 12 * u ^ 11 * v ^ 16 * w ^ 15 + 4 * u ^ 12 * v ^ 15 * w ^ 15, 24 * r * u ^ 5 * v ^ 7 * w ^ 8 + 24 * r * u ^ 5 * v ^ 8 * w ^ 7 + 16 * r * u ^ 6 * v ^ 7 * w ^ 7, 64 * r * u ^ 5 * v ^ 7 * w ^ 7, 8 * r * u ^ 15 * v ^ 22 * w ^ 24 + 20 * r * u ^ 15 * v ^ 23 * w ^ 23 + 8 * r * u ^ 15 * v ^ 24 * w ^ 22 + 12 * r * u ^ 16 * v ^ 22 * w ^ 23 + 12 * r * u ^ 16 * v ^ 23 * w ^ 22 + 4 * r * u ^ 17 * v ^ 22 * w ^ 22, 24 * r * u ^ 15 * v ^ 22 * w ^ 24 + 24 * r * u ^ 15 * v ^ 24 * w ^ 22 + 16 * r * u ^ 17 * v ^ 22 * w ^ 22, 24 * u ^ 10 * v ^ 15 * w ^ 16 + 24 * u ^ 10 * v ^ 16 * w ^ 15 + 16 * u ^ 11 * v ^ 15 * w ^ 15, 24 * r * u ^ 15 * v ^ 22 * w ^ 23 + 24 * r * u ^ 15 * v ^ 23 * w ^ 22 + 16 * r * u ^ 16 * v ^ 22 * w ^ 22, 64 * r * u ^ 25 * v ^ 37 * w ^ 37, 64 * r * u ^ 15 * v ^ 22 * w ^ 22, 64 * u ^ 10 * v ^ 15 * w ^ 15, 64 * u ^ 20 * v ^ 30 * w ^ 30]
            end
        f81 = function (u, v, w, r)
                return [81, 27u + 27v + 27w, 3 * (v + u + w) ^ 2, 9 * (v + u + w) ^ 2, 27 * u ^ 2 + 27 * v ^ 2 + 27 * w ^ 2, -12 * w * v * u + 3 * u ^ 3 + 3 * v ^ 3 + 3 * w ^ 3, (v + u + w) ^ 3, 0, 9 * (v + u + w) * (w ^ 2 + v ^ 2 + u ^ 2), -u * w * v * (v + u + w), w ^ 2 * v ^ 2 * u ^ 2 * (((((((((((((((((((((((((((((((u ^ 7 * w ^ 3 * v ^ 3 - u ^ 8 * w ^ 4 * v) - u ^ 8 * w * v ^ 4) + v ^ 3 * u ^ 3 * w ^ 7 + 2 * v ^ 4 * u ^ 3 * w ^ 6 + 2 * v ^ 3 * u ^ 4 * w ^ 6) - u ^ 6 * w ^ 7) - u ^ 7 * w ^ 6) - v ^ 6 * w ^ 7) - v ^ 7 * w ^ 6) - u ^ 7 * v ^ 6) - u ^ 8 * w ^ 5) - u ^ 8 * v ^ 5) - u ^ 7 * w ^ 5 * v) - u ^ 7 * w * v ^ 5) - w ^ 5 * v ^ 8) + w ^ 11 * u ^ 2 + w ^ 11 * v ^ 2) - w ^ 8 * v ^ 5) + w ^ 2 * v ^ 11) - w ^ 8 * u ^ 5) + w ^ 2 * u ^ 11) - w ^ 4 * u * v ^ 8) - w ^ 5 * u * v ^ 7) + w ^ 11 * v * u) - w ^ 8 * v ^ 4 * u) - w ^ 7 * v ^ 5 * u) + w * v ^ 11 * u + v ^ 11 * u ^ 2) - w ^ 8 * v * u ^ 4) - w * v ^ 8 * u ^ 4) - w ^ 7 * v * u ^ 5) - w * v ^ 7 * u ^ 5) - v ^ 8 * u ^ 5) - v ^ 7 * u ^ 6) + w * v * u ^ 11 + v ^ 2 * u ^ 11 + 2 * u ^ 6 * v ^ 4 * w ^ 3 + 2 * u ^ 6 * v ^ 3 * w ^ 4 + u ^ 7 * v ^ 2 * w ^ 4 + 2 * u ^ 6 * v ^ 5 * w ^ 2 + u ^ 7 * v ^ 4 * w ^ 2 + u ^ 4 * v ^ 7 * w ^ 2 + 2 * u ^ 4 * v ^ 6 * w ^ 3 + 2 * u ^ 5 * v ^ 2 * w ^ 6 + 2 * u ^ 6 * v ^ 2 * w ^ 5 + 2 * u ^ 5 * v ^ 6 * w ^ 2 + 2 * u ^ 2 * v ^ 6 * w ^ 5 + u ^ 2 * v ^ 7 * w ^ 4 + 2 * u ^ 3 * v ^ 6 * w ^ 4 + u ^ 3 * v ^ 7 * w ^ 3 + u ^ 4 * v ^ 2 * w ^ 7 + u ^ 2 * v ^ 4 * w ^ 7 + 2 * u ^ 2 * v ^ 5 * w ^ 6), (w ^ 2 + v ^ 2 + u ^ 2) * (v + u + w) ^ 2, r * u * v * w, 9 * (w ^ 2 + v ^ 2 + u ^ 2) ^ 2, (((((((12 * w ^ 3 * v ^ 2 * u ^ 2 + 12 * w ^ 2 * v ^ 3 * u ^ 2 + 12 * w ^ 2 * v ^ 2 * u ^ 3) - 6 * v ^ 4 * u ^ 3) - 6 * w ^ 4 * u ^ 3) - 6 * w ^ 4 * v ^ 3) - 6 * u ^ 4 * v ^ 3) - 6 * u ^ 4 * w ^ 3) - 6 * w ^ 3 * v ^ 4) + 3 * u ^ 7 + 3 * v ^ 7 + 3 * w ^ 7, (v + u + w) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), (v + u + w) * (((((((((v ^ 4 - 2 * v ^ 3 * u) - 2 * w * v ^ 3) + 4 * u ^ 2 * v ^ 2 + 4 * w ^ 2 * v ^ 2) - 2 * v * u ^ 3) - 2 * w ^ 3 * v) + u ^ 4 + 4 * u ^ 2 * w ^ 2) - 2 * w ^ 3 * u) + w ^ 4) - 2 * w * u ^ 3), r ^ 2 * u ^ 2 * v ^ 2 * w ^ 2, -(w ^ 2) * v ^ 2 * u ^ 2 * (w ^ 2 + v ^ 2 + u ^ 2), -(r ^ 2) * u * v * w, u ^ 4 * v ^ 4 * w ^ 4 * ((((((w ^ 10 * v ^ 4 + v ^ 5 * w ^ 9 + w ^ 5 * v ^ 9 + w ^ 4 * v ^ 10 + v ^ 2 * u ^ 2 * w ^ 10 + v ^ 3 * u ^ 2 * w ^ 9 + w ^ 3 * u ^ 2 * v ^ 9 + w ^ 2 * v ^ 10 * u ^ 2 + v ^ 2 * u ^ 3 * w ^ 9 + w ^ 2 * u ^ 3 * v ^ 9 + w ^ 10 * u ^ 4) - u ^ 4 * v ^ 5 * w ^ 5) + v ^ 10 * u ^ 4 + u ^ 5 * w ^ 9) - u ^ 5 * v ^ 4 * w ^ 5) - u ^ 5 * v ^ 5 * w ^ 4) + v ^ 9 * u ^ 5 + w ^ 5 * u ^ 9 + w ^ 3 * u ^ 9 * v ^ 2 + w ^ 2 * u ^ 9 * v ^ 3 + v ^ 5 * u ^ 9 + w ^ 4 * u ^ 10 + w ^ 2 * v ^ 2 * u ^ 10 + v ^ 4 * u ^ 10), (w ^ 2 + v ^ 2 + u ^ 2) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), -(r ^ 2) * u ^ 7 * v ^ 7 * w ^ 7 * (v + u + w), 0, -r * u ^ 35 * v ^ 35 * w ^ 35 * (w ^ 2 + v ^ 2 + u ^ 2), w ^ 2 * v ^ 2 * u ^ 2 * ((((((((((((((((3 * u ^ 6 * v ^ 2 * w ^ 4 + 3 * u ^ 6 * v ^ 3 * w ^ 3 + 3 * u ^ 6 * v ^ 4 * w ^ 2 + 3 * u ^ 2 * v ^ 4 * w ^ 6 + 3 * u ^ 2 * v ^ 6 * w ^ 4 + 3 * u ^ 3 * v ^ 3 * w ^ 6 + 3 * u ^ 3 * v ^ 6 * w ^ 3 + 3 * u ^ 4 * v ^ 2 * w ^ 6 + 3 * u ^ 4 * v ^ 6 * w ^ 2) - 2 * w ^ 7 * u ^ 5) - 2 * v ^ 7 * u ^ 5) - 2 * u ^ 7 * w ^ 4 * v) - 2 * u ^ 7 * w * v ^ 4) - 2 * u ^ 7 * w ^ 5) - 2 * u ^ 7 * v ^ 5) + v ^ 2 * w ^ 10 + w ^ 2 * v ^ 10 + u ^ 2 * w ^ 10 + w ^ 2 * u ^ 10 + v ^ 10 * u ^ 2 + v ^ 2 * u ^ 10 + w ^ 10 * v * u + w * v ^ 10 * u) - 2 * w ^ 7 * v * u ^ 4) + w * v * u ^ 10) - 2 * w * u ^ 4 * v ^ 7) - 2 * v ^ 5 * w ^ 7) - 2 * v ^ 7 * w ^ 5) + 2 * u ^ 5 * v ^ 2 * w ^ 5 + 2 * u ^ 2 * v ^ 5 * w ^ 5 + 2 * u ^ 5 * v ^ 5 * w ^ 2) - 2 * u * v ^ 7 * w ^ 4) - 2 * u * v ^ 4 * w ^ 7), 2 * w * v * u * (v + u + w) * (u * v + w * v + u * w), u ^ 4 * v ^ 4 * w ^ 4, (w ^ 2 + v ^ 2 + u ^ 2) * (((((((((v ^ 4 - 2 * v ^ 3 * u) - 2 * w * v ^ 3) + 4 * u ^ 2 * v ^ 2 + 4 * w ^ 2 * v ^ 2) - 2 * v * u ^ 3) - 2 * w ^ 3 * v) + u ^ 4 + 4 * u ^ 2 * w ^ 2) - 2 * w ^ 3 * u) + w ^ 4) - 2 * w * u ^ 3), 0, (((36 * w ^ 2 * v ^ 2 * u ^ 2 - 12 * u ^ 3 * v ^ 3) - 12 * u ^ 3 * w ^ 3) - 12 * w ^ 3 * v ^ 3) + 3 * u ^ 6 + 3 * v ^ 6 + 3 * w ^ 6, 3 * r * u ^ 33 * v ^ 33 * w ^ 33 * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), u ^ 4 * v ^ 4 * w ^ 4 * (((((((((((((((((((((((((-(v ^ 12) * w ^ 7 + u ^ 3 * v ^ 6 * w ^ 10 + u ^ 3 * v ^ 10 * w ^ 6) - v ^ 7 * w ^ 12) + v ^ 2 * u ^ 2 * w ^ 15 + u ^ 2 * v ^ 7 * w ^ 10 + u ^ 8 * v ^ 7 * w ^ 4 + u ^ 8 * v ^ 4 * w ^ 7 + u ^ 7 * v ^ 4 * w ^ 8 + u ^ 7 * v ^ 8 * w ^ 4 + u ^ 2 * v ^ 10 * w ^ 7 + u ^ 4 * v ^ 7 * w ^ 8 + u ^ 4 * v ^ 8 * w ^ 7 + u ^ 6 * v ^ 3 * w ^ 10 + u ^ 6 * v ^ 10 * w ^ 3 + u ^ 7 * v ^ 2 * w ^ 10 + u ^ 7 * v ^ 10 * w ^ 2 + u ^ 10 * v ^ 2 * w ^ 7 + u ^ 10 * v ^ 3 * w ^ 6 + u ^ 10 * v ^ 6 * w ^ 3 + u ^ 10 * v ^ 7 * w ^ 2) - u ^ 12 * w ^ 7) - u ^ 12 * v ^ 7) - u ^ 12 * v ^ 2 * w ^ 5) - u ^ 12 * v ^ 5 * w ^ 2) - w ^ 12 * v ^ 5 * u ^ 2) - w ^ 5 * v ^ 12 * u ^ 2) + w ^ 2 * v ^ 15 * u ^ 2 + w ^ 11 * v ^ 4 * u ^ 4 + w ^ 10 * v ^ 5 * u ^ 4 + w ^ 5 * v ^ 10 * u ^ 4 + w ^ 4 * v ^ 11 * u ^ 4 + v ^ 15 * u ^ 4) - w ^ 12 * v ^ 2 * u ^ 5) + w ^ 10 * v ^ 4 * u ^ 5 + w ^ 4 * v ^ 10 * u ^ 5) - w ^ 2 * v ^ 12 * u ^ 5) - v ^ 12 * u ^ 7) - v ^ 11 * u ^ 8) + w ^ 5 * v ^ 4 * u ^ 10 + w ^ 4 * v ^ 5 * u ^ 10 + w ^ 4 * v ^ 4 * u ^ 11) - v ^ 8 * u ^ 11) + w ^ 2 * v ^ 2 * u ^ 15 + v ^ 4 * u ^ 15 + w ^ 15 * u ^ 4) - w ^ 12 * u ^ 7) - w ^ 11 * u ^ 8) - w ^ 8 * u ^ 11) + w ^ 4 * u ^ 15 + w ^ 15 * v ^ 4) - w ^ 11 * v ^ 8) - w ^ 8 * v ^ 11) + w ^ 4 * v ^ 15), -r * u ^ 8 * v ^ 8 * w ^ 8, r * u ^ 5 * v ^ 5 * w ^ 5, (v + u + w) * (((((v ^ 6 - 4 * w ^ 3 * v ^ 3) - 4 * u ^ 3 * v ^ 3) + 12 * w ^ 2 * v ^ 2 * u ^ 2) - 4 * u ^ 3 * w ^ 3) + w ^ 6 + u ^ 6), -(r ^ 2) * u ^ 8 * v ^ 8 * w ^ 8 * (w ^ 2 + v ^ 2 + u ^ 2), r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (w ^ 2 + v ^ 2 + u ^ 2) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), -(u ^ 22) * v ^ 22 * w ^ 22 * (w ^ 2 + v ^ 2 + u ^ 2), w ^ 2 * v ^ 2 * u ^ 2 * (v + u + w) * ((((((v ^ 5 * u ^ 2 + w ^ 2 * v ^ 5 + 2 * w * v ^ 5 * u + w ^ 3 * v ^ 4 + w ^ 2 * v ^ 4 * u + w * v ^ 4 * u ^ 2 + v ^ 4 * u ^ 3 + u ^ 4 * v ^ 3 + w ^ 4 * v ^ 3) - 2 * w ^ 3 * v ^ 3 * u) - 2 * w * v ^ 3 * u ^ 3) + u ^ 5 * v ^ 2 + u ^ 4 * w * v ^ 2 + w ^ 4 * v ^ 2 * u + v ^ 2 * w ^ 5) - 2 * w ^ 3 * v * u ^ 3) + w ^ 4 * v * u ^ 2 + u ^ 4 * w ^ 2 * v + 2 * u ^ 5 * w * v + 2 * w ^ 5 * v * u + u ^ 5 * w ^ 2 + w ^ 5 * u ^ 2 + u ^ 4 * w ^ 3 + w ^ 4 * u ^ 3), r * u ^ 3 * v ^ 3 * w ^ 3 * f * (u + v + w), r ^ 2 * u ^ 14 * v ^ 14 * w ^ 14, 3 * r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), w ^ 2 * v ^ 2 * u ^ 2 * ((((((v ^ 2 * w ^ 6 + w ^ 5 * v ^ 3 + w ^ 3 * v ^ 5 + w ^ 2 * v ^ 6 + v * u * w ^ 6 + w ^ 5 * v ^ 2 * u + w ^ 2 * v ^ 5 * u + w * u * v ^ 6 + u ^ 2 * w ^ 6 + w ^ 5 * v * u ^ 2) - w ^ 3 * v ^ 3 * u ^ 2) + w * v ^ 5 * u ^ 2 + v ^ 6 * u ^ 2 + w ^ 5 * u ^ 3) - w ^ 3 * v ^ 2 * u ^ 3) - w ^ 2 * v ^ 3 * u ^ 3) + v ^ 5 * u ^ 3 + w ^ 3 * u ^ 5 + w ^ 2 * v * u ^ 5 + w * u ^ 5 * v ^ 2 + v ^ 3 * u ^ 5 + u ^ 6 * w ^ 2 + u ^ 6 * w * v + u ^ 6 * v ^ 2), r * u ^ 33 * v ^ 33 * w ^ 33 * (v + u + w) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), -r * u ^ 34 * v ^ 34 * w ^ 34 * (v + u + w), (((((v ^ 6 - 4 * w ^ 3 * v ^ 3) - 4 * u ^ 3 * v ^ 3) + 12 * w ^ 2 * v ^ 2 * u ^ 2) - 4 * u ^ 3 * w ^ 3) + w ^ 6 + u ^ 6) * (w ^ 2 + v ^ 2 + u ^ 2), 27 * r * u ^ 33 * v ^ 33 * w ^ 33 * (v + u + w), r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (v + u + w) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), -(r ^ 2) * u ^ 27 * v ^ 27 * w ^ 27 * (v + u + w), -(u ^ 5) * v ^ 5 * w ^ 5, r * u ^ 33 * v ^ 33 * w ^ 33 * (w ^ 2 + v ^ 2 + u ^ 2) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), 9 * r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (w ^ 2 + v ^ 2 + u ^ 2) ^ 2, 27 * r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (w ^ 2 + v ^ 2 + u ^ 2), -(u ^ 21) * v ^ 21 * w ^ 21 * (v + u + w), 9 * r * u ^ 33 * v ^ 33 * w ^ 33 * (v + u + w) * (w ^ 2 + v ^ 2 + u ^ 2), w ^ 2 * v ^ 2 * u ^ 2 * ((((((3 * v ^ 2 * w ^ 5 + 2 * w ^ 4 * v ^ 3 + 2 * w ^ 3 * v ^ 4 + 3 * w ^ 2 * v ^ 5 + 4 * w ^ 5 * v * u + 3 * w ^ 4 * v ^ 2 * u + 3 * w ^ 2 * v ^ 4 * u + 4 * w * v ^ 5 * u + 3 * w ^ 5 * u ^ 2 + 3 * w ^ 4 * v * u ^ 2) - 2 * w ^ 3 * v ^ 2 * u ^ 2) - 2 * w ^ 2 * v ^ 3 * u ^ 2) + 3 * w * v ^ 4 * u ^ 2 + 3 * v ^ 5 * u ^ 2 + 2 * w ^ 4 * u ^ 3) - 2 * w ^ 2 * v ^ 2 * u ^ 3) + 2 * v ^ 4 * u ^ 3 + 2 * u ^ 4 * w ^ 3 + 3 * u ^ 4 * w ^ 2 * v + 3 * u ^ 4 * w * v ^ 2 + 2 * u ^ 4 * v ^ 3 + 3 * u ^ 5 * w ^ 2 + 4 * u ^ 5 * w * v + 3 * u ^ 5 * v ^ 2), r * u ^ 10 * v ^ 10 * w ^ 10 * f * (u + v + w), -(r ^ 2) * u ^ 28 * v ^ 28 * w ^ 28 * (w ^ 2 + v ^ 2 + u ^ 2), -3 * r * u ^ 3 * v ^ 3 * w ^ 3, 9 * r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (v + u + w) * (w ^ 2 + v ^ 2 + u ^ 2), -3 * r ^ 2 * u ^ 16 * v ^ 16 * w ^ 16, r * u ^ 13 * v ^ 13 * w ^ 13 * (v + u + w) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), -r * u ^ 14 * v ^ 14 * w ^ 14 * (v + u + w), 2 * w ^ 2 * v ^ 2 * u ^ 2 * (((3 * w ^ 4 * v ^ 2 + 3 * w ^ 2 * v ^ 4 + 4 * w ^ 4 * v * u + 4 * w * v ^ 4 * u + 3 * w ^ 4 * u ^ 2) - 3 * w ^ 2 * v ^ 2 * u ^ 2) + 3 * v ^ 4 * u ^ 2 + 3 * w ^ 2 * u ^ 4 + 4 * u ^ 4 * w * v + 3 * v ^ 2 * u ^ 4), r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (v + u + w) * (((((v ^ 6 - 4 * w ^ 3 * v ^ 3) - 4 * u ^ 3 * v ^ 3) + 12 * w ^ 2 * v ^ 2 * u ^ 2) - 4 * u ^ 3 * w ^ 3) + w ^ 6 + u ^ 6), u ^ 8 * v ^ 8 * w ^ 8, r * u ^ 13 * v ^ 13 * w ^ 13 * (v + u + w) * (((((((((v ^ 7 - 2 * v ^ 4 * u ^ 3) - 2 * w ^ 3 * v ^ 4) + 4 * w ^ 2 * v ^ 3 * u ^ 2) - 2 * w ^ 4 * v ^ 3) - 2 * u ^ 4 * v ^ 3) + 4 * w ^ 3 * v ^ 2 * u ^ 2 + 4 * w ^ 2 * v ^ 2 * u ^ 3) - 2 * w ^ 4 * u ^ 3) - 2 * u ^ 4 * w ^ 3) + u ^ 7 + w ^ 7), 2 * u ^ 4 * v ^ 4 * w ^ 4 * (((3 * w ^ 8 * v ^ 4 + 3 * w ^ 4 * v ^ 8 + 4 * w ^ 8 * v ^ 2 * u ^ 2 + 4 * w ^ 2 * v ^ 8 * u ^ 2 + 3 * w ^ 8 * u ^ 4) - 3 * u ^ 4 * v ^ 4 * w ^ 4) + 3 * v ^ 8 * u ^ 4 + 3 * u ^ 8 * w ^ 4 + 4 * u ^ 8 * v ^ 2 * w ^ 2 + 3 * u ^ 8 * v ^ 4), 9 * u ^ 20 * v ^ 20 * w ^ 20 * (v + u + w) * (w ^ 2 + v ^ 2 + u ^ 2), r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (w ^ 2 + v ^ 2 + u ^ 2) * (v + u + w) ^ 2, -r * u ^ 15 * v ^ 15 * w ^ 15 * (w ^ 2 + v ^ 2 + u ^ 2), r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (((((v ^ 6 - 4 * w ^ 3 * v ^ 3) - 4 * u ^ 3 * v ^ 3) + 12 * w ^ 2 * v ^ 2 * u ^ 2) - 4 * u ^ 3 * w ^ 3) + w ^ 6 + u ^ 6) * (w ^ 2 + v ^ 2 + u ^ 2), u ^ 20 * v ^ 20 * w ^ 20 * (v + u + w) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), 3 * r * u ^ 13 * v ^ 13 * w ^ 13 * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), r ^ 2 * u ^ 26 * v ^ 26 * w ^ 26 * (w ^ 2 + v ^ 2 + u ^ 2) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), 3 * r ^ 2 * u ^ 26 * v ^ 26 * w ^ 26 * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), u ^ 20 * v ^ 20 * w ^ 20 * (w ^ 2 + v ^ 2 + u ^ 2) * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), 2 * r ^ 2 * u ^ 7 * v ^ 7 * w ^ 7 * (v + u + w) * (u * v + w * v + u * w), r * u ^ 13 * v ^ 13 * w ^ 13 * (v + u + w) * (((((v ^ 6 - 4 * w ^ 3 * v ^ 3) - 4 * u ^ 3 * v ^ 3) + 12 * w ^ 2 * v ^ 2 * u ^ 2) - 4 * u ^ 3 * w ^ 3) + w ^ 6 + u ^ 6), 3 * r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (((((v ^ 6 - 4 * w ^ 3 * v ^ 3) - 4 * u ^ 3 * v ^ 3) + 12 * w ^ 2 * v ^ 2 * u ^ 2) - 4 * u ^ 3 * w ^ 3) + w ^ 6 + u ^ 6), r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (v + u + w) ^ 3, 3 * r * u ^ 13 * v ^ 13 * w ^ 13 * (v + u + w) ^ 2, -3 * u ^ 10 * v ^ 10 * w ^ 10, 27 * r ^ 2 * u ^ 26 * v ^ 26 * w ^ 26 * (w ^ 2 + v ^ 2 + u ^ 2), 3 * r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (v + u + w) ^ 2, 3 * r * u ^ 13 * v ^ 13 * w ^ 13 * (((((v ^ 6 - 4 * w ^ 3 * v ^ 3) - 4 * u ^ 3 * v ^ 3) + 12 * w ^ 2 * v ^ 2 * u ^ 2) - 4 * u ^ 3 * w ^ 3) + w ^ 6 + u ^ 6), 9 * r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (v + u + w) ^ 2, r * u ^ 13 * v ^ 13 * w ^ 13 * (v + u + w) ^ 3, 3 * u ^ 20 * v ^ 20 * w ^ 20 * ((v ^ 3 - 4 * w * v * u) + u ^ 3 + w ^ 3), 27 * r * u ^ 33 * v ^ 33 * w ^ 33 * (w ^ 2 + v ^ 2 + u ^ 2), 9 * r * u ^ 13 * v ^ 13 * w ^ 13 * (v + u + w) ^ 2, 27 * r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6 * (v + u + w), 81 * r ^ 2 * u ^ 6 * v ^ 6 * w ^ 6, 9 * u ^ 20 * v ^ 20 * w ^ 20 * (v + u + w) ^ 2, 27 * u ^ 20 * v ^ 20 * w ^ 20 * (w ^ 2 + v ^ 2 + u ^ 2), 27 * r * u ^ 13 * v ^ 13 * w ^ 13 * (v + u + w), 27 * u ^ 20 * v ^ 20 * w ^ 20 * (v + u + w), 81 * r * u ^ 33 * v ^ 33 * w ^ 33, 81 * u ^ 20 * v ^ 20 * w ^ 20, 81 * r * u ^ 13 * v ^ 13 * w ^ 13, 81 * r ^ 2 * u ^ 26 * v ^ 26 * w ^ 26]
            end
        res = Dict{Symbol, Any}(:name => "H(G32)", :identifier => "H(G32)", :parameter => para, :size => 155520, :order => 155520, :dim => 4, :degrees => [12, 18, 24, 30], :reflclasses => [2], :powermap => chevieget(:G32, :PowerMaps), :irredinfo => chevieget(:G32, :IrredInfo), :text => "origin: J.Michel, 2008/2012")
        Inherit(res, chevieget(:G32, :ClassInfo))
        res[:centralizers] = map((x->begin
                        res[:order] // x
                    end), res[:classes])
        res[:irreducibles] = [f1(u), f1(w), f1(v), f4(v, w), f4(u, v), f4(w, u), f4(w, v), f4(u, w), f4(v, u), f5(u, v, w), f5(w, u, v), f5(v, w, u), f5(u, w, v), f5(v, u, w), f5(w, v, u), f6(v, w), f6(u, v), f6(w, u), f10(u, v, w), f10(w, u, v), f10(v, w, u), f10(u, w, v), f10(v, u, w), f10(w, v, u), f15(u, v, w), f15b(u, v, w), f15(w, u, v), f15(v, u, w), f15b(w, u, v), f15b(v, u, w), f20a(u, v, w), f20b(u, v, w), f20c(u, v, w), f20c(w, u, v), f20c(v, w, u), f20c(u, w, v), f20c(v, u, w), f20c(w, v, u), f20d(u, v, w), f20d(w, u, v), f20d(v, w, u), f20d(u, w, v), f20d(v, u, w), f20d(w, v, u), f20a(v, u, w), f20a(w, u, v), f20b(w, u, v), f20b(v, u, w), f24(u, v, w), f24(w, u, v), f24(v, u, w), f30a(u, v, w), f30b(u, v, w), f30b(w, u, v), f30b(v, w, u), f30b(u, w, v), f30b(v, u, w), f30b(w, v, u), f30a(w, u, v), f30a(v, u, w), f36(u, v, w, E(3)), f36(w, u, v, E(3)), f36(v, u, w, E(3)), f36(u, v, w, E(3, 2)), f36(v, u, w, E(3, 2)), f36(w, u, v, E(3, 2)), f40(u, v, w), f40(w, u, v), f40(v, w, u), f40(u, w, v), f40(v, u, w), f40(w, v, u), f45(u, v, w, E(3)), f45(u, w, v, E(3)), f45(v, w, u, E(3)), f45(u, w, v, E(3, 2)), f45(u, v, w, E(3, 2)), f45(v, w, u, E(3, 2)), f60a(u, v, w), f60b(u, v, w), f60c(u, v, w), f60c(w, u, v), f60c(v, w, u), f60c(u, w, v), f60c(v, u, w), f60c(w, v, u), f60a(v, u, w), f60a(w, u, v), f60b(w, u, v), f60b(v, u, w), f64(u, v, w, GetRoot(v * w)), f64(u, v, w, -(GetRoot(v * w))), f64(w, u, v, GetRoot(u * v)), f64(v, u, w, GetRoot(u * w)), f64(v, u, w, -(GetRoot(u * w))), f64(w, u, v, -(GetRoot(u * v))), f80(u, v, w), f80(v, u, w), f80(w, u, v), f81(u, v, w, GetRoot(u * v * w, 3)), f81(u, v, w, E(3, 2) * GetRoot(u * v * w, 3)), f81(u, v, w, E(3) * GetRoot(u * v * w, 3))]
        res = ((CHEVIE[:compat])[:MakeCharacterTable])(res)
        return res
    end)
chevieset(:G32, :CharTable, function ()
        local res
        res = (chevieget(:G32, :HeckeCharTable))([[1, E(3), E(3, 2)]], [])
        res[:identifier] = "G32"
        res[:name] = "G32"
        res[:galomorphisms] = Group(#= none:19 =# @perm_str("(2,3)(4,7)(5,8)(6,9)(10,13)(11,14)(12,15)(17,18)(19,22)(20,23)(21,24)(27,28)(29,30)(33,36)(34,37)(35,38)(39,42)(40,43)(41,44)(45,46)(47,48)(50,51)(53,56)(54,57)(55,58)(59,60)(61,64)(62,65)(63,66)(67,70)(68,71)(69,72)(73,76)(74,77)(75,78)(81,84)(82,85)(83,86)(87,88)(89,90)(93,94)(95,96)(98,99)(101,102)"))
        return ((CHEVIE[:compat])[:MakeCharacterTable])(res)
    end)
chevieset(:G32, :SchurModels, Dict{Symbol, Any}(:f1_0 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[3, -2, -1], 1], [[3, -1, -2], 1], [[5, -2, -3], 1], [[5, -3, -2], 1], [[4, -3, -1], 2], [[4, -1, -3], 2], [[2, -1, -1], 2], [[2, -1, -1], 2], [[1, -1, 0], 6], [[1, 0, -1], 6], [[3, -2, -1], 6], [[3, -1, -2], 6], [[2, -1, -1], 6], [[2, -1, -1], 4], [[1, -1, 0], 4], [[1, 0, -1], 4], [[2, -1, -1], 3], [[1, -1, 0], 10], [[1, 0, -1], 10], [[2, -1, -1], 5]]), :f4_1 => Dict{Symbol, Any}(:vcyc => [[[4, -1, -3], 1], [[3, -1, -2], 1], [[3, -2, -1], 1], [[2, 1, -3], 1], [[-1, 1, 0], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[5, -1, -4], 2], [[3, 1, -4], 2], [[3, -1, -2], 2], [[2, -1, -1], 2], [[1, 0, -1], 2], [[1, 1, -2], 2], [[1, 0, -1], 6], [[1, -1, 0], 6], [[1, 0, -1], 4], [[2, -1, -1], 3], [[1, -1, 0], 10], [[1, 0, -1], 15]]), :f5_4 => Dict{Symbol, Any}(:vcyc => [[[3, 2, -5], 1], [[2, 1, -3], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[3, -1, -2], 2], [[1, 2, -3], 2], [[0, 1, -1], 2], [[2, -1, -1], 2], [[1, 1, -2], 2], [[4, 1, -5], 2], [[1, 0, -1], 2], [[1, 0, -1], 2], [[1, 0, -1], 6], [[1, 0, -1], 6], [[1, -1, 0], 6], [[1, -1, 0], 4], [[1, 1, -2], 3], [[1, 0, -1], 12]]), :f6_8 => Dict{Symbol, Any}(:factor => [2, -2, 0], :vcyc => [[[-1, 1, 0], 1], [[1, -1, 0], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[2, 1, -3], 1], [[1, 2, -3], 1], [[2, 1, -3], 2], [[1, 2, -3], 2], [[-1, 2, -1], 2], [[2, -1, -1], 2], [[1, 1, -2], 2], [[1, 1, -2], 2], [[1, 0, -1], 2], [[0, 1, -1], 2], [[1, 1, -2], 6], [[0, 1, -1], 6], [[1, 0, -1], 6], [[-1, 1, 0], 10], [[1, 1, -2], 5]]), :f10_2 => Dict{Symbol, Any}(:vcyc => [[[2, 1, -3], 1], [[3, -1, -2], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[-1, 1, 0], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[4, -3, -1], 2], [[3, -1, -2], 2], [[1, 1, -2], 2], [[1, -2, 1], 2], [[1, 0, -1], 2], [[1, 0, -1], 2], [[0, 1, -1], 2], [[2, -1, -1], 2], [[2, 1, -3], 6], [[1, 0, -1], 6], [[1, -1, 0], 6], [[1, 0, -1], 4], [[2, -1, -1], 3]]), :f15_6 => Dict{Symbol, Any}(:vcyc => [[[3, -2, -1], 1], [[3, -1, -2], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[-1, 1, 0], 1], [[1, -1, 0], 1], [[3, 1, -4], 2], [[3, -4, 1], 2], [[-1, -1, 2], 2], [[1, -2, 1], 2], [[1, -1, 0], 2], [[1, 0, -1], 2], [[2, -1, -1], 2], [[2, -1, -1], 2], [[2, -1, -1], 6], [[1, 0, -1], 6], [[1, -1, 0], 6], [[2, -1, -1], 4]]), :f15_8 => Dict{Symbol, Any}(:vcyc => [[[2, -3, 1], 1], [[-3, 2, 1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[1, -1, 0], 1], [[-1, 1, 0], 1], [[1, -2, 1], 2], [[-2, 1, 1], 2], [[1, 1, -2], 2], [[1, 1, -2], 2], [[1, 0, -1], 2], [[1, 0, -1], 2], [[0, 1, -1], 2], [[0, 1, -1], 2], [[0, 1, -1], 6], [[1, 0, -1], 6], [[1, 1, -2], 4]]), :f20_3 => Dict{Symbol, Any}(:vcyc => [[[2, -3, 1], 1], [[1, -1, 0], 1], [[1, -1, 0], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[4, -1, -3], 1], [[3, -1, -2], 1], [[0, 1, -1], 1], [[1, 2, -3], 2], [[-1, 2, -1], 2], [[2, -1, -1], 2], [[1, 1, -2], 2], [[1, 0, -1], 2], [[-1, 0, 1], 2], [[3, -2, -1], 6], [[1, 0, -1], 6], [[1, 0, -1], 4], [[1, 1, -2], 3]]), :f20_5 => Dict{Symbol, Any}(:coeff => -1, :vcyc => [[[3, -2, -1], 1], [[-2, 3, -1], 1], [[2, 1, -3], 1], [[1, 2, -3], 1], [[-1, 0, 1], 1], [[-1, 0, 1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[3, -1, -2], 2], [[-1, 3, -2], 2], [[1, 1, -2], 2], [[1, 1, -2], 2], [[1, 1, -2], 6], [[1, -1, 0], 6], [[1, 0, -1], 6], [[0, 1, -1], 6], [[1, 1, -2], 3]]), :f20_7 => Dict{Symbol, Any}(:vcyc => [[[3, 1, -4], 1], [[1, 2, -3], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 2], [[-1, 0, 1], 2], [[3, -4, 1], 2], [[1, 2, -3], 2], [[1, 1, -2], 2], [[-1, 2, -1], 2], [[1, 0, -1], 6], [[1, 0, -1], 6], [[0, 1, -1], 6], [[2, -1, -1], 3]]), :f20_12 => Dict{Symbol, Any}(:coeff => 2, :vcyc => [[[0, 1, -1], 1], [[0, -1, 1], 1], [[-1, 1, 0], 1], [[-1, 0, 1], 1], [[-1, 1, 0], 1], [[-1, 0, 1], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[1, -3, 2], 2], [[1, 2, -3], 2], [[2, -1, -1], 2], [[-2, 1, 1], 2], [[1, 0, -1], 2], [[1, -1, 0], 2], [[1, 0, -1], 2], [[1, -1, 0], 2], [[0, 1, -1], 6], [[0, -1, 1], 6], [[2, -1, -1], 3]]), :f24_6 => Dict{Symbol, Any}(:vcyc => [[[-2, -1, 3], 1], [[-2, 3, -1], 1], [[1, 0, -1], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[1, -1, 0], 1], [[0, 1, -1], 1], [[0, -1, 1], 1], [[1, 0, -1], 2], [[1, -1, 0], 2], [[1, 1, -2], 2], [[1, -2, 1], 2], [[1, 0, -1], 6], [[1, -1, 0], 6], [[1, 0, -1], 4], [[1, -1, 0], 4], [[2, -1, -1], 5]]), :f30_4 => Dict{Symbol, Any}(:vcyc => [[[5, -3, -2], 1], [[1, 0, -1], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[-1, 1, 0], 2], [[0, 1, -1], 2], [[-1, 0, 1], 2], [[5, -1, -4], 2], [[1, -3, 2], 2], [[1, 0, -1], 2], [[1, -2, 1], 2], [[2, -1, -1], 2], [[1, -1, 0], 6], [[0, 1, -1], 6], [[1, 0, -1], 6], [[1, 0, -1], 4]]), :f30_12p => Dict{Symbol, Any}(:vcyc => [[[2, -3, 1], 1], [[2, 1, -3], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[1, -1, 0], 1], [[-1, 0, 1], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[0, 1, -1], 2], [[0, -1, 1], 2], [[-1, 2, -1], 2], [[-1, -1, 2], 2], [[1, 0, -1], 2], [[1, 0, -1], 2], [[1, -1, 0], 2], [[1, -1, 0], 2], [[0, 1, -1], 6], [[0, -1, 1], 6], [[1, -1, 0], 6], [[1, 0, -1], 6]]), :f36_5 => Dict{Symbol, Any}(:rootUnity => E(3), :vcyc => [[[0, 0, 0, -1], 1], [[1, -1, 0], 1], [[-1, 0, 1], 1], [[2, -1, -1, 1], 1], [[1, 1, -2, 2], 1], [[-1, 2, -1, -2], 1], [[-2, 1, 1], 2], [[2, 1, -3, -1], 2], [[2, -3, 1, 2], 2], [[2, -1, -1], 6], [[1, 0, -1], 6], [[1, -1, 0], 6], [[0, -1, 1], 6], [[1, -1, 0, 1], 5], [[1, 0, -1, 1], 5]]), :f40_8 => Dict{Symbol, Any}(:vcyc => [[[3, 2, -5], 1], [[-1, 1, 0], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[-3, 2, 1], 1], [[0, -1, 1], 1], [[1, -1, 0], 2], [[1, 1, -2], 2], [[2, -1, -1], 2], [[1, 0, -1], 2], [[1, -1, 0], 6], [[0, 1, -1], 6], [[1, -1, 0], 4], [[1, 0, -1], 4], [[1, -2, 1], 3]]), :f45_6 => Dict{Symbol, Any}(:rootUnity => E(3), :vcyc => [[[0, 0, 0, 1], 1], [[-1, 2, -1, 2], 1], [[-2, 1, 1, 1], 1], [[1, 1, -2, 1], 1], [[0, -1, 1], 1], [[1, 0, -1], 1], [[-3, 2, 1, 2], 2], [[2, -3, 1, 2], 2], [[0, 1, -1, -2], 2], [[1, 0, -1, 1], 2], [[1, 1, -2], 2], [[1, -1, 0], 6], [[1, 0, -1], 6], [[0, 1, -1], 6], [[1, 1, -2], 6], [[0, 1, -1, 1], 4], [[1, 0, -1, 1], 4]]), :f60_7 => Dict{Symbol, Any}(:vcyc => [[[1, 2, -3], 1], [[1, -1, 0], 1], [[1, -1, 0], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[-3, 1, 2], 1], [[1, -1, 0], 2], [[4, 1, -5], 2], [[-1, 2, -1], 2], [[-2, 1, 1], 2], [[0, 1, -1], 2], [[0, 1, -1], 2], [[1, -1, 0], 6], [[0, -1, 1], 6], [[1, -1, 0], 4]]), :f60_11s => Dict{Symbol, Any}(:vcyc => [[[1, -4, 3], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[0, -1, 1], 1], [[0, -1, 1], 1], [[-4, 1, 3], 1], [[2, -1, -1], 2], [[1, 1, -2], 2], [[1, 1, -2], 2], [[-1, 2, -1], 2], [[-1, 1, 0], 2], [[-1, 1, 0], 2], [[1, 1, -2], 6], [[1, -1, 0], 6]]), :f60_12 => Dict{Symbol, Any}(:coeff => 2, :vcyc => [[[1, 2, -3], 1], [[1, -3, 2], 1], [[-1, 0, 1], 1], [[-1, 0, 1], 1], [[-1, 0, 1], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[0, 1, -1], 2], [[0, -1, 1], 2], [[2, -1, -1], 2], [[2, -1, -1], 2], [[2, -1, -1], 6], [[0, -1, 1], 6], [[0, 1, -1], 6], [[1, 0, -1], 4], [[1, -1, 0], 4]]), :f64_8 => Dict{Symbol, Any}(:coeff => 2, :root => [1, 1, 0] // 2, :vcyc => [[[1, 0, -2, 1], 1], [[0, -1, 2, -1], 1], [[0, 1, -1], 1], [[-1, 0, 1], 1], [[-1, 1, 0], 1], [[1, -1, 0], 1], [[-1, 3, -2], 1], [[-3, 1, 2], 1], [[-2, 2, -1, 1], 2], [[2, -2, -1, 1], 2], [[1, 1, -2], 3], [[0, 0, -1, 1], 10], [[0, -1, 0, 1], 15]]), :f80_9 => Dict{Symbol, Any}(:coeff => 2, :vcyc => [[[1, 2, -3], 1], [[1, -3, 2], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, -1, 0], 2], [[1, 0, -1], 2], [[-2, 1, 1], 4], [[1, 0, -1], 4], [[1, -1, 0], 4], [[2, -1, -1], 3], [[0, -1, 1], 12]]), :f81_10 => Dict{Symbol, Any}(:coeff => 3, :root => [1, 1, 1] // 3, :vcyc => [[[-2, 0, 1, 1], 2], [[0, -2, 1, 1], 2], [[1, 0, -2, 1], 2], [[1, -2, 0, 1], 2], [[-2, 1, 0, 1], 2], [[0, 1, -2, 1], 2], [[1, 1, -2], 2], [[1, -2, 1], 2], [[-2, 1, 1], 2], [[0, 0, -1, 1], 2], [[-1, 0, 0, 1], 2], [[0, -1, 0, 1], 2], [[-1, -1, 0, 2], 4], [[-1, 0, -1, 2], 4], [[0, -1, -1, 2], 4], [[-1, 0, 0, 1], 5], [[0, 0, -1, 1], 5], [[0, -1, 0, 1], 5]])))
chevieset(:G32, :SchurData, [Dict{Symbol, Any}(:name => "f1_0", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f1_0", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f4_1", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f4_1", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f4_1", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f4_1", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f4_1", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f4_1", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f5_4", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f5_4", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f5_4", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f5_4", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f5_4", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f5_4", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f6_8", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f6_8", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f6_8", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f10_2", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f10_2", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f10_2", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f10_2", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f10_2", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f10_2", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f15_8", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f15_6", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f15_8", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f15_8", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f15_6", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f15_6", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f20_5", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f20_12", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f20_3", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f20_3", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f20_3", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f20_3", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f20_3", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f20_3", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f20_7", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f20_7", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f20_7", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f20_7", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f20_7", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f20_7", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f20_5", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f20_5", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f20_12", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f20_12", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f24_6", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f24_6", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f24_6", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f30_12p", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f30_4", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f30_4", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f30_4", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f30_4", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f30_4", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f30_4", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f30_12p", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f30_12p", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f36_5", :order => [1, 3, 2], :rootUnityPower => 2), Dict{Symbol, Any}(:name => "f36_5", :order => [3, 2, 1], :rootUnityPower => 2), Dict{Symbol, Any}(:name => "f36_5", :order => [2, 1, 3], :rootUnityPower => 2), Dict{Symbol, Any}(:name => "f36_5", :order => [1, 3, 2], :rootUnityPower => 1), Dict{Symbol, Any}(:name => "f36_5", :order => [2, 1, 3], :rootUnityPower => 1), Dict{Symbol, Any}(:name => "f36_5", :order => [3, 2, 1], :rootUnityPower => 1), Dict{Symbol, Any}(:name => "f40_8", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f40_8", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f40_8", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f40_8", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f40_8", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f40_8", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f45_6", :order => [2, 1, 3], :rootUnityPower => 1), Dict{Symbol, Any}(:name => "f45_6", :order => [1, 3, 2], :rootUnityPower => 1), Dict{Symbol, Any}(:name => "f45_6", :order => [3, 2, 1], :rootUnityPower => 1), Dict{Symbol, Any}(:name => "f45_6", :order => [1, 3, 2], :rootUnityPower => 2), Dict{Symbol, Any}(:name => "f45_6", :order => [2, 1, 3], :rootUnityPower => 2), Dict{Symbol, Any}(:name => "f45_6", :order => [3, 2, 1], :rootUnityPower => 2), Dict{Symbol, Any}(:name => "f60_11s", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f60_12", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f60_7", :order => [1, 2, 3]), Dict{Symbol, Any}(:name => "f60_7", :order => [3, 1, 2]), Dict{Symbol, Any}(:name => "f60_7", :order => [2, 3, 1]), Dict{Symbol, Any}(:name => "f60_7", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f60_7", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f60_7", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f60_11s", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f60_11s", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f60_12", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f60_12", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f64_8", :order => [3, 2, 1], :rootPower => -1), Dict{Symbol, Any}(:name => "f64_8", :order => [3, 2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f64_8", :order => [2, 1, 3], :rootPower => -1), Dict{Symbol, Any}(:name => "f64_8", :order => [1, 3, 2], :rootPower => -1), Dict{Symbol, Any}(:name => "f64_8", :order => [1, 3, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f64_8", :order => [2, 1, 3], :rootPower => 1), Dict{Symbol, Any}(:name => "f80_9", :order => [1, 3, 2]), Dict{Symbol, Any}(:name => "f80_9", :order => [2, 1, 3]), Dict{Symbol, Any}(:name => "f80_9", :order => [3, 2, 1]), Dict{Symbol, Any}(:name => "f81_10", :order => [1, 2, 3], :rootPower => 1), Dict{Symbol, Any}(:name => "f81_10", :order => [1, 2, 3], :rootPower => E(3, 2)), Dict{Symbol, Any}(:name => "f81_10", :order => [1, 2, 3], :rootPower => E(3))])
chevieset(:G32, :sparseFakeDegrees, [[1, 0], [1, 80], [1, 40], [1, 61, 1, 67, 1, 73, 1, 79], [1, 21, 1, 27, 1, 33, 1, 39], [1, 11, 1, 17, 1, 23, 1, 29], [1, 41, 1, 47, 1, 53, 1, 59], [1, 51, 1, 57, 1, 63, 1, 69], [1, 1, 1, 7, 1, 13, 1, 19], [1, 36, 1, 42, 1, 48, 1, 54, 1, 60], [1, 44, 1, 50, 1, 56, 1, 62, 1, 68], [1, 4, 1, 10, 1, 16, 1, 22, 1, 28], [1, 12, 1, 18, 1, 24, 1, 30, 1, 36], [1, 52, 1, 58, 1, 64, 1, 70, 1, 76], [1, 20, 1, 26, 1, 32, 1, 38, 1, 44], [1, 48, 1, 54, 2, 60, 1, 66, 1, 72], [1, 8, 1, 14, 2, 20, 1, 26, 1, 32], [1, 28, 1, 34, 2, 40, 1, 46, 1, 52], [1, 30, 1, 36, 2, 42, 2, 48, 2, 54, 1, 60, 1, 66], [1, 2, 1, 8, 2, 14, 2, 20, 2, 26, 1, 32, 1, 38], [1, 34, 1, 40, 2, 46, 2, 52, 2, 58, 1, 64, 1, 70], [1, 42, 1, 48, 2, 54, 2, 60, 2, 66, 1, 72, 1, 78], [1, 10, 1, 16, 2, 22, 2, 28, 2, 34, 1, 40, 1, 46], [1, 14, 1, 20, 2, 26, 2, 32, 2, 38, 1, 44, 1, 50], [1, 24, 1, 30, 2, 36, 2, 42, 3, 48, 2, 54, 2, 60, 1, 66, 1, 72], [1, 6, 2, 12, 3, 18, 3, 24, 3, 30, 2, 36, 1, 42], [1, 8, 1, 14, 2, 20, 2, 26, 3, 32, 2, 38, 2, 44, 1, 50, 1, 56], [1, 16, 1, 22, 2, 28, 2, 34, 3, 40, 2, 46, 2, 52, 1, 58, 1, 64], [1, 38, 2, 44, 3, 50, 3, 56, 3, 62, 2, 68, 1, 74], [1, 22, 2, 28, 3, 34, 3, 40, 3, 46, 2, 52, 1, 58], [1, 33, 2, 39, 3, 45, 4, 51, 4, 57, 3, 63, 2, 69, 1, 75], [1, 12, 1, 18, 3, 24, 3, 30, 4, 36, 3, 42, 3, 48, 1, 54, 1, 60], [1, 13, 2, 19, 3, 25, 4, 31, 4, 37, 3, 43, 2, 49, 1, 55], [1, 9, 2, 15, 3, 21, 4, 27, 4, 33, 3, 39, 2, 45, 1, 51], [1, 35, 2, 41, 3, 47, 4, 53, 4, 59, 3, 65, 2, 71, 1, 77], [1, 29, 2, 35, 3, 41, 4, 47, 4, 53, 3, 59, 2, 65, 1, 71], [1, 3, 2, 9, 3, 15, 4, 21, 4, 27, 3, 33, 2, 39, 1, 45], [1, 25, 2, 31, 3, 37, 4, 43, 4, 49, 3, 55, 2, 61, 1, 67], [1, 31, 2, 37, 3, 43, 4, 49, 4, 55, 3, 61, 2, 67, 1, 73], [1, 9, 2, 15, 3, 21, 4, 27, 4, 33, 3, 39, 2, 45, 1, 51], [1, 17, 2, 23, 3, 29, 4, 35, 4, 41, 3, 47, 2, 53, 1, 59], [1, 29, 2, 35, 3, 41, 4, 47, 4, 53, 3, 59, 2, 65, 1, 71], [1, 21, 2, 27, 3, 33, 4, 39, 4, 45, 3, 51, 2, 57, 1, 63], [1, 7, 2, 13, 3, 19, 4, 25, 4, 31, 3, 37, 2, 43, 1, 49], [1, 19, 2, 25, 3, 31, 4, 37, 4, 43, 3, 49, 2, 55, 1, 61], [1, 5, 2, 11, 3, 17, 4, 23, 4, 29, 3, 35, 2, 41, 1, 47], [1, 20, 1, 26, 3, 32, 3, 38, 4, 44, 3, 50, 3, 56, 1, 62, 1, 68], [1, 16, 1, 22, 3, 28, 3, 34, 4, 40, 3, 46, 3, 52, 1, 58, 1, 64], [1, 6, 2, 12, 3, 18, 4, 24, 4, 30, 4, 36, 3, 42, 2, 48, 1, 54], [1, 26, 2, 32, 3, 38, 4, 44, 4, 50, 4, 56, 3, 62, 2, 68, 1, 74], [1, 16, 2, 22, 3, 28, 4, 34, 4, 40, 4, 46, 3, 52, 2, 58, 1, 64], [1, 12, 2, 18, 4, 24, 5, 30, 6, 36, 5, 42, 4, 48, 2, 54, 1, 60], [1, 12, 2, 18, 4, 24, 5, 30, 6, 36, 5, 42, 4, 48, 2, 54, 1, 60], [1, 8, 2, 14, 4, 20, 5, 26, 6, 32, 5, 38, 4, 44, 2, 50, 1, 56], [1, 28, 2, 34, 4, 40, 5, 46, 6, 52, 5, 58, 4, 64, 2, 70, 1, 76], [1, 24, 2, 30, 4, 36, 5, 42, 6, 48, 5, 54, 4, 60, 2, 66, 1, 72], [1, 4, 2, 10, 4, 16, 5, 22, 6, 28, 5, 34, 4, 40, 2, 46, 1, 52], [1, 20, 2, 26, 4, 32, 5, 38, 6, 44, 5, 50, 4, 56, 2, 62, 1, 68], [1, 20, 2, 26, 4, 32, 5, 38, 6, 44, 5, 50, 4, 56, 2, 62, 1, 68], [1, 16, 2, 22, 4, 28, 5, 34, 6, 40, 5, 46, 4, 52, 2, 58, 1, 64], [1, 7, 3, 13, 5, 19, 7, 25, 7, 31, 6, 37, 4, 43, 2, 49, 1, 55], [1, 27, 3, 33, 5, 39, 7, 45, 7, 51, 6, 57, 4, 63, 2, 69, 1, 75], [1, 17, 3, 23, 5, 29, 7, 35, 7, 41, 6, 47, 4, 53, 2, 59, 1, 65], [1, 5, 2, 11, 4, 17, 6, 23, 7, 29, 7, 35, 5, 41, 3, 47, 1, 53], [1, 15, 2, 21, 4, 27, 6, 33, 7, 39, 7, 45, 5, 51, 3, 57, 1, 63], [1, 25, 2, 31, 4, 37, 6, 43, 7, 49, 7, 55, 5, 61, 3, 67, 1, 73], [1, 24, 3, 30, 5, 36, 7, 42, 8, 48, 7, 54, 5, 60, 3, 66, 1, 72], [1, 14, 3, 20, 5, 26, 7, 32, 8, 38, 7, 44, 5, 50, 3, 56, 1, 62], [1, 10, 3, 16, 5, 22, 7, 28, 8, 34, 7, 40, 5, 46, 3, 52, 1, 58], [1, 18, 3, 24, 5, 30, 7, 36, 8, 42, 7, 48, 5, 54, 3, 60, 1, 66], [1, 22, 3, 28, 5, 34, 7, 40, 8, 46, 7, 52, 5, 58, 3, 64, 1, 70], [1, 8, 3, 14, 5, 20, 7, 26, 8, 32, 7, 38, 5, 44, 3, 50, 1, 56], [1, 6, 2, 12, 5, 18, 7, 24, 9, 30, 8, 36, 7, 42, 4, 48, 2, 54], [1, 14, 2, 20, 5, 26, 7, 32, 9, 38, 8, 44, 7, 50, 4, 56, 2, 62], [1, 22, 2, 28, 5, 34, 7, 40, 9, 46, 8, 52, 7, 58, 4, 64, 2, 70], [2, 18, 4, 24, 7, 30, 8, 36, 9, 42, 7, 48, 5, 54, 2, 60, 1, 66], [2, 10, 4, 16, 7, 22, 8, 28, 9, 34, 7, 40, 5, 46, 2, 52, 1, 58], [2, 26, 4, 32, 7, 38, 8, 44, 9, 50, 7, 56, 5, 62, 2, 68, 1, 74], [1, 15, 3, 21, 6, 27, 9, 33, 11, 39, 11, 45, 9, 51, 6, 57, 3, 63, 1, 69], [2, 12, 4, 18, 8, 24, 10, 30, 12, 36, 10, 42, 8, 48, 4, 54, 2, 60], [1, 7, 3, 13, 6, 19, 9, 25, 11, 31, 11, 37, 9, 43, 6, 49, 3, 55, 1, 61], [1, 15, 3, 21, 6, 27, 9, 33, 11, 39, 11, 45, 9, 51, 6, 57, 3, 63, 1, 69], [1, 17, 3, 23, 6, 29, 9, 35, 11, 41, 11, 47, 9, 53, 6, 59, 3, 65, 1, 71], [1, 11, 3, 17, 6, 23, 9, 29, 11, 35, 11, 41, 9, 47, 6, 53, 3, 59, 1, 65], [1, 9, 3, 15, 6, 21, 9, 27, 11, 33, 11, 39, 9, 45, 6, 51, 3, 57, 1, 63], [1, 19, 3, 25, 6, 31, 9, 37, 11, 43, 11, 49, 9, 55, 6, 61, 3, 67, 1, 73], [1, 13, 3, 19, 6, 25, 9, 31, 11, 37, 11, 43, 9, 49, 6, 55, 3, 61, 1, 67], [1, 11, 3, 17, 6, 23, 9, 29, 11, 35, 11, 41, 9, 47, 6, 53, 3, 59, 1, 65], [2, 20, 4, 26, 8, 32, 10, 38, 12, 44, 10, 50, 8, 56, 4, 62, 2, 68], [2, 16, 4, 22, 8, 28, 10, 34, 12, 40, 10, 46, 8, 52, 4, 58, 2, 64], [1, 18, 3, 24, 6, 30, 10, 36, 12, 42, 12, 48, 10, 54, 6, 60, 3, 66, 1, 72], [2, 21, 5, 27, 8, 33, 11, 39, 12, 45, 11, 51, 8, 57, 5, 63, 2, 69], [1, 8, 3, 14, 6, 20, 10, 26, 12, 32, 12, 38, 10, 44, 6, 50, 3, 56, 1, 62], [2, 16, 5, 22, 8, 28, 11, 34, 12, 40, 11, 46, 8, 52, 5, 58, 2, 64], [1, 13, 3, 19, 6, 25, 10, 31, 12, 37, 12, 43, 10, 49, 6, 55, 3, 61, 1, 67], [2, 11, 5, 17, 8, 23, 11, 29, 12, 35, 11, 41, 8, 47, 5, 53, 2, 59], [1, 9, 4, 15, 8, 21, 12, 27, 15, 33, 15, 39, 12, 45, 8, 51, 4, 57, 1, 63], [1, 13, 4, 19, 8, 25, 12, 31, 15, 37, 15, 43, 12, 49, 8, 55, 4, 61, 1, 67], [1, 17, 4, 23, 8, 29, 12, 35, 15, 41, 15, 47, 12, 53, 8, 59, 4, 65, 1, 71], [1, 12, 4, 18, 7, 24, 12, 30, 14, 36, 15, 42, 12, 48, 9, 54, 5, 60, 2, 66], [2, 14, 5, 20, 9, 26, 12, 32, 15, 38, 14, 44, 12, 50, 7, 56, 4, 62, 1, 68], [1, 10, 2, 16, 6, 22, 10, 28, 14, 34, 15, 40, 14, 46, 10, 52, 6, 58, 2, 64, 1, 70]])
chevieset(:G32, :HeckeRepresentation, function (para, root, i)
        local u, v, w, f1, f4, f5, f6, f10, f15a, f15b, rep
        u = (para[1])[1]
        v = (para[1])[2]
        w = (para[1])[3]
        f1 = (u->begin
                    [[[u]], [[u]], [[u]], [[u]]]
                end)
        f4 = function (w, v)
                return WGraph2Representation([[[1], [2], [3], [4]], [[1, 2, w, -v], [2, 3, w, -v], [3, 4, w, -v]]], [w, v])
            end
        f5 = function (u, w, v)
                return u ^ 0 * v ^ 0 * w ^ 0 * WGraph2Representation([[[1, 3], [1, 4], [2], [2, 4], [3]], [[1, 2, u, -w], [1, 3, u, -w], [1, 5, u, 0], [2, 4, u, -w], [3, 4, 0, -w], [4, 5, -w, u]]], [u, w])
            end
        f6 = function (v, w)
                return map((x->begin
                                ExteriorPower(x, 2) // w
                            end), f4(v, w) + 0 * v * w)
            end
        f10 = function (u, w, v)
                return WGraph2Representation([[[[2], []], [[], [1, 2]], [[1], []], [[], [2, 3]], [[3], []], [[], [1, 3]], [[], [2, 4]], [[], [1, 4]], [[], [3, 4]], [[4], []]], [[1, 2, -1, u * v + w ^ 2], [1, 3, w, w], [1, 4, 1, -u * v - w ^ 2], [1, 5, w, w], [1, 6, v, 0], [2, 3, -u * v - w ^ 2, 1], [2, 6, -v * w, 1], [4, 5, u * v + w ^ 2, -1], [4, 6, v * w, -1], [4, 7, -v * w, 1], [5, 7, v, 0], [5, 9, -1, u * v + w ^ 2], [5, 10, -w, -w], [6, 8, v, -w], [7, 8, -v, w], [7, 9, 1, -v * w], [9, 10, u * v + w ^ 2, -1]]], [u, w, v])
            end
        f15a = function (v, u, w)
                return WGraph2Representation([[[[2, 3], []], [[3], [1, 2]], [[1, 3], []], [[2], [1, 3, 4]], [[1], [2, 3, 4]], [[1, 2, 4], []], [[2], [3, 4]], [[3], [1, 2, 4]], [[1, 3], [4]], [[2, 4], [1]], [[1, 4], [2, 3]], [[], [1, 2, 3, 4]], [[2, 4], []], [[4], [1, 2, 3]], [[1, 3, 4], []]], [[1, 2, -v, v ^ -1 * w ^ 2 + u], [1, 3, w, w], [1, 7, v, -(v ^ -1) * w ^ 2 - u], [1, 13, w, w], [2, 3, -(v ^ -1) * w ^ 2 - u, v], [2, 4, v, [2, -w, 4, -u]], [2, 8, 0, -u], [2, 10, w, [2, 0, 4, w]], [2, 12, w, -w], [2, 14, 0, w], [3, 4, 0, [2, v ^ -1 * w ^ 2 + u, 4, 0]], [3, 5, v, -(v ^ -1) * w ^ 2 - u], [3, 6, w, w], [3, 9, 0, -(v ^ -1) * w ^ 2 - u], [3, 11, 0, [2, 0, 4, v ^ -1 * w ^ 2 + u]], [3, 15, 0, w], [4, 5, -w, v], [4, 7, u, 0], [4, 10, u, -v], [4, 12, w - u * v * w ^ -1, 0], [5, 6, v ^ -1 * w ^ 2 + u, -v], [5, 7, w, 0], [5, 11, 0, -w], [5, 12, w, 0], [6, 10, v, 0], [6, 13, w, 0], [7, 8, -v, [1, u, 3, w]], [7, 9, w, [1, w, 3, 0]], [7, 12, -w, w], [7, 13, v ^ -1 * w ^ 2 + u, -v], [8, 9, -u, v], [8, 12, w - u * v * w ^ -1, 0], [8, 13, [1, 0, 3, v ^ -1 * w ^ 2 + u], 0], [8, 14, w, -v], [9, 10, [1, 0, 3, w], [2, w, 4, 0]], [9, 11, v, [2, -u, 4, -w]], [9, 12, w, -w], [9, 15, 0, -v], [10, 11, -v, [1, w, 3, u]], [10, 12, -w, w], [10, 13, v ^ -1 * w ^ 2 + u, 0], [11, 12, w - u * v * w ^ -1, 0], [11, 13, [1, v ^ -1 * w ^ 2 + u, 3, 0], 0], [11, 14, w, 0], [12, 14, 0, -w], [13, 14, -v, v ^ -1 * w ^ 2 + u], [13, 15, w, w], [14, 15, -(v ^ -1) * w ^ 2 - u, v]]], [v, w, u])
            end
        f15b = function (v, w, u)
                return WGraph2Representation([[[[2], []], [[], [1, 2]], [[1], []], [[2], []], [[], [2, 3]], [[3], [1]], [[3], []], [[1], [3]], [[], [3, 4]], [[1], [4]], [[4], [1]], [[2], [4]], [[4], [2]], [[3], []], [[4], []]], [[1, 2, -1, u * v + w ^ 2], [1, 3, w, w], [1, 5, -1, u * v + v * w], [1, 6, 0, [1, 0, 3, v * w - v ^ 2]], [1, 7, 1, v * w], [1, 8, 1, 0], [2, 3, -u * v - w ^ 2, 1], [2, 4, u, 0], [2, 6, 0, v], [2, 8, -w, [1, 0, 3, u]], [3, 8, 0, u * v - u * w], [4, 5, v - w, w], [4, 6, u, [1, 0, 3, -v]], [4, 7, -v + w, w], [4, 8, -v, [1, u, 3, 0]], [4, 12, 0, -w], [5, 6, -u, [1, w, 3, 0]], [5, 7, -w - u * v * w ^ -1, w], [5, 8, 0, u], [5, 12, u, [2, 0, 4, -w]], [5, 13, 0, w], [5, 14, -u * v * w ^ -1, 0], [6, 7, v - w, 0], [6, 11, -v, u], [6, 14, v, 0], [7, 9, -v, u + w], [7, 12, u, 0], [7, 13, 0, [2, 0, 4, v - w]], [7, 15, v, w], [8, 10, u, -w], [9, 12, 0, v], [9, 13, u, [2, -w, 4, 0]], [9, 14, w, v - w], [9, 15, -w - u * v * w ^ -1, w], [10, 12, u, -v], [11, 13, u, -w], [12, 14, [2, v, 4, 0], -u], [13, 14, [2, 0, 4, v], -u], [13, 15, -v + w, 0], [14, 15, -v + w, w]]], [v, w, u])
            end
        rep = [[f1, u], [f1, w], [f1, v], [f4, v, w], [f4, u, v], [f4, w, u], [f4, w, v], [f4, u, w], [f4, v, u], [f5, u, w, v], [f5, w, v, u], [f5, v, u, w], [f5, u, v, w], [f5, v, w, u], [f5, w, u, v], [f6, v, w], [f6, u, v], [f6, w, u], [f10, u, w, v], [f10, w, v, u], [f10, v, u, w], [f10, u, v, w], [f10, v, w, u], [f10, w, u, v], [f15a, v, u, w], [f15b, v, w, u], [f15a, v, w, u], [f15a, u, v, w], [f15b, u, v, w], [f15b, w, u, v]]
        if rep[i] !== nothing
            return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])]) + 0 * Product(para[1])
        else
            return false
        end
    end)
chevieset(:G32, :CachedRepresentations, [])
chevieset(:G32, :Representation, function (i,)
        local para, r, f, expand, J, cached
        J = E(3)
        r = (chevieget(:G32, :HeckeRepresentation))(map((i->begin
                            [1, J, J ^ 2]
                        end), 1:4), [], i)
        if r != false
            return r
        end
        cached = chevieget(:G32, :CachedRepresentations)
        f = function (i,)
                InfoChevie("calling rep(", i, ")\n")
                if !(cached[i] !== nothing)
                    cached[i] = (chevieget(:G32, :Representation))(i)
                end
                return cached[i]
            end
        expand = function (l, n)
                local res
                res = fill(0, max(0, (1 + n) - 1))
                res[l[1:length(l) // 2]] = l[length(l) // 2 + 1:length(l)]
                return res
            end
        if i < 80
            if i == 31
                r = map(KroneckerProduct, f(4), f(15))
            elseif i == 32
                r = map((x->begin
                                SchurFunctor(x, [2, 2])
                            end), f(5))
            elseif i == 33
                r = J * f(34)
            elseif i == 34
                r = map((x->begin
                                SymmetricPower(x, 3)
                            end), f(4))
            elseif i == 35
                r = J ^ 2 * f(34)
            elseif i == 36
                r = ComplexConjugate(f(33))
            elseif i == 37
                r = J * f(36)
            elseif i == 38
                r = J ^ 2 * f(36)
            elseif i == 39
                r = map((x->begin
                                SchurFunctor(x, [2, 2, 1])
                            end), f(6))
            elseif i == 40
                r = J ^ 2 * f(39)
            elseif i == 41
                r = J * f(39)
            elseif i == 42
                r = ComplexConjugate(f(39))
            elseif i == 43
                r = J * f(42)
            elseif i == 44
                r = J ^ 2 * f(42)
            elseif i == 45
                r = J * f(31)
            elseif i == 46
                r = J ^ 2 * f(31)
            elseif i == 47
                r = J ^ 2 * f(32)
            elseif i == 48
                r = J * f(32)
            elseif i == 49
                r = map((x->begin
                                SchurFunctor(x, [2, 1, 1, 1])
                            end), f(10))
            elseif i == 50
                r = J ^ 2 * f(49)
            elseif i == 52
                r = map((x->begin
                                map((y->begin
                                            expand(y, 30)
                                        end), x)
                            end), [[[2, 1], [5, 1], [6, 1], [7, 1], [1, 1], [8, -1], [14, 1], [3, -1], [15, 1], [17, 1], [24, 1], [8, 10, 13, 14, 16, 21, 23, 25, -1, -1, 1, 1, 1, 1, 1, -1], [9, 1], [4, 1], [13, 1], [30, -1], [20, 1], [18, 1], [21, 1], [10, 1], [27, 1], [12, 1], [23, 1], [28, 1], [3, 4, 9, 17, 22, 23, 27, 30, 1, 1, 1, -1, -1, 1, 1, -1], [25, 1], [19, 1], [11, 1], [29, 1], [6, 7, 12, 15, 19, 20, 23, 26, 1, 1, -1, 1, 1, -1, 1, -1]], [[3, 1], [9, 1], [10, 1], [11, 1], [17, -1], [15, 1], [7, 1], [2, 1], [8, 1], [1, 1], [18, 1], [19, -1], [5, -1], [4, 6, 8, 9, 17, 22, 25, 26, 27, 29, 30, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1], [20, -1], [1, 2, 4, 5, 7, 9, 13, 14, 15, 18, 19, 21, 23, 27, 29, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1], [13, 1], [4, 1], [23, 1], [6, -1], [22, -1], [6, 7, 9, 10, 11, 12, 13, 16, 17, 18, 19, 24, 26, 28, 29, 30, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1], [12, -1], [14, 1], [6, 7, 10, 12, 15, 16, 17, 18, 19, 26, 30, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1], [26, 1], [27, 1], [28, 1], [30, 1], [2, 8, 9, 26, 27, 28, 29, 30, 1, 1, 1, 1, 1, -1, -1, -1]], [[4, 1], [7, 1], [3, 1], [6, 7, 12, 15, 19, 20, 23, 26, 1, 1, -1, 1, 1, -1, 1, -1], [14, 1], [6, 1], [16, -1], [8, 1], [3, 5, 6, 7, 11, 12, 20, 23, 25, 26, 29, -1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [27, 1], [10, 1], [13, 1], [2, 8, 9, 26, 27, 28, 29, 30, 1, 1, 1, 1, 1, -1, -1, -1], [30, 1], [1, 3, 4, 6, 9, 13, 16, 17, 21, 22, 23, 24, 27, 29, 30, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1], [2, -1], [19, 1], [18, 1], [24, 1], [21, 1], [28, 1], [15, 1], [29, 1], [17, 1], [26, 1], [3, 4, 9, 17, 22, 23, 27, 30, 1, 1, 1, -1, -1, 1, 1, -1], [11, 1], [20, 1], [4, 6, 8, 9, 17, 22, 25, 26, 27, 29, 30, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, -1], [5, 1]], [[6, -1], [8, 1], [15, -1], [12, 1], [3, -1], [13, -1], [8, 10, 13, 14, 16, 21, 23, 25, -1, -1, 1, 1, 1, 1, 1, -1], [9, 1], [2, 1], [20, 1], [19, -1], [5, 8, 14, 18, 20, 21, 28, 30, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1], [22, 1], [5, 1], [16, 1], [10, 1], [23, -1], [25, 1], [17, 1], [3, 4, 9, 17, 22, 23, 27, 30, 1, 1, 1, -1, -1, 1, 1, -1], [2, 6, 7, 16, 17, 18, 19, 24, 1, 1, 1, -1, 1, 1, 1, 1], [6, 7, 10, 12, 15, 16, 17, 18, 19, 26, 30, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1], [21, -1], [11, -1], [28, -1], [26, 1], [27, -1], [29, 1], [30, 1]]])
            elseif i == 51
                r = J * f(49)
            elseif i == 53
                r = map(KroneckerProduct, f(10), f(16))
            elseif i == 54
                r = J ^ 2 * f(53)
            elseif i == 55
                r = J * f(53)
            elseif i == 56
                r = ComplexConjugate(f(53))
            elseif i == 57
                r = J * f(56)
            elseif i == 58
                r = J ^ 2 * f(56)
            elseif i == 59
                r = J ^ 2 * f(52)
            elseif i == 60
                r = J * f(52)
            elseif i == 61
                r = map((x->begin
                                SchurFunctor(x, [3, 1, 1])
                            end), f(7))
            elseif i == 62
                r = J ^ 2 * f(61)
            elseif i == 63
                r = J * f(61)
            elseif i == 64
                r = ComplexConjugate(f(61))
            elseif i == 65
                r = J * f(64)
            elseif i == 66
                r = J ^ 2 * f(64)
            elseif i == 67
                r = map((x->begin
                                SchurFunctor(x, [2, 1])
                            end), f(13))
            elseif i == 68
                r = J ^ 2 * f(67)
            elseif i == 69
                r = J * f(67)
            elseif i == 70
                r = ComplexConjugate(f(67))
            elseif i == 71
                r = J * f(70)
            elseif i == 72
                r = J ^ 2 * f(70)
            elseif i == 73
                r = map((x->begin
                                ExteriorPower(x, 2)
                            end), f(22))
            elseif i == 74
                r = J ^ 2 * f(73)
            elseif i == 75
                r = J * f(73)
            elseif i == 76
                r = ComplexConjugate(f(73))
            elseif i == 77
                r = J * f(76)
            elseif i == 78
                r = J ^ 2 * f(76)
            elseif i == 79
                r = map((x->begin
                                SchurFunctor(x, [3, 2])
                            end), f(5))
            end
        else
            if i == 80
                r = map((x->begin
                                map((y->begin
                                            expand(y, 60)
                                        end), x)
                            end), [[[1, 8, 11, 14, 25, 57, 1, 1, 1, -1, 1, 1], [1, 14, 30, 42, 51, 57, 60, -1, 1, -1, 1, 1, 1, 2], [1, 6, 11, 14, 16, 25, 30, 33, 39, 52, 59, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1], [12, 29, 1, -1], [1, 3, 14, 16, 25, 31, 33, 59, 60, 1, -1, -1, 1, 2, -1, -1, -1, -1], [5, 11, 14, 16, 25, 30, 31, 39, 52, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 7, 30, 46, 51, 1, -1, 1, -1, -1], [11, 14, 25, 57, -1, 1, -2, -1], [1, 14, 25, 30, 31, 33, 39, 49, 54, 57, 59, 60, -1, 2, -2, -1, 1, 1, -1, 1, -1, 1, 1, 2], [7, 11, 14, 24, 33, 54, 57, 59, 1, 1, -1, 1, 1, 1, 1, 1], [1, 25, 34, 59, 60, -1, 1, -1, -1, 1], [12, 1], [1, 7, 10, 14, 30, 31, 39, 51, 52, 54, 59, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1], [14, 25, 1, -1], [59, -1], [16, 25, 50, 59, -1, -1, -1, 1], [14, 16, 25, 31, 33, 54, 56, 57, 60, 1, 1, -1, 1, 1, -1, -1, 1, 2], [14, 52, 54, 60, 1, 1, -1, 1], [7, 11, 33, 39, 45, 57, 59, 60, 1, 1, 1, -1, 1, 1, 1, 1], [54, 55, -1, 1], [14, 25, 30, 31, 33, 35, 51, 52, 54, 57, 59, 60, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1], [4, 12, 14, 31, 52, 53, 54, 60, 1, -1, 1, 1, 1, 1, -3, 2], [37, 1], [7, 13, 14, 33, 39, 51, 54, 1, -1, -1, -1, 1, 1, 1], [15, 25, 59, 1, -1, 1], [16, 17, 30, 39, 54, -1, -1, 1, 1, 1], [1, 7, 14, 19, 30, 31, 33, 51, 52, 60, 1, -1, -1, -1, 1, 1, 1, -2, 1, -1], [21, 39, 51, 54, -1, 1, 1, 1], [22, 53, 59, -1, 1, -1], [14, 25, 38, 51, 59, 60, 1, -1, -1, 1, 1, 1], [25, 31, -1, 1], [25, 31, 33, 39, 51, 1, -1, -1, 1, 1], [14, 30, 33, 36, 39, 51, 57, 1, -1, 1, 1, -1, -1, 1], [1, 11, 25, 59, 60, -1, -1, -1, -1, 1], [14, 28, 33, 39, 51, 54, 60, 1, -1, -1, 1, 1, -1, 1], [39, 1], [57, 58, 60, 1, -1, 1], [14, 25, 30, 51, 59, 60, 1, -1, -1, 1, 1, 1], [31, 32, 33, 51, 1, 1, 1, -1], [20, 31, 54, -1, -1, 1], [2, 11, 14, 51, 57, 60, -1, 1, 1, 1, 1, 2], [1, 11, 25, 30, 41, 1, 1, 1, 1, -1], [12, 47, 53, -1, 1, -1], [12, 25, 43, 59, 1, -1, 1, 1], [7, 14, 27, 31, 39, 52, 1, -1, -1, 1, 1, 1], [7, 11, 51, 57, 59, 60, 1, 1, 1, 1, 1, 2], [14, 25, 31, 44, 52, 53, 54, 60, 1, -1, 1, 1, 1, 1, -3, 2], [9, 11, 31, 33, 54, 57, 59, -1, 1, 1, 1, 1, 1, 1], [1, 11, 14, 25, 30, 31, 39, 48, 52, 54, 59, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, 1], [14, 16, 25, 59, 60, -1, 1, 1, -1, -1], [14, 30, 57, 1, -1, 1], [52, 1], [14, 25, 31, 52, 53, 54, 59, 60, 1, -1, 1, 1, 1, -3, 1, 2], [18, 25, 31, 54, 59, 60, 1, -1, 1, -1, 1, 1], [14, 25, 40, 52, 54, 59, 60, 1, -1, -1, 1, -1, 1, 2], [14, 16, 25, 26, 30, 33, 39, 52, 54, 57, 59, 60, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, 1], [57, 1], [23, 57, 60, -1, 1, 1], [25, 59, -1, 1], [60, 1]], [[8, 13, 14, 49, -1, 1, 1, -1], [6, 14, 18, 19, 28, 33, 37, 50, 57, 58, 60, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1], [6, 12, 13, 14, 18, 20, 40, 43, 49, 52, 54, 55, 60, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1], [18, 28, 30, 57, 58, 60, -1, -1, 1, 1, -1, 1], [11, 13, 14, 18, 23, 28, 30, 31, 36, 37, 40, 50, 53, 54, 57, 58, 1, 1, 1, -1, 1, -2, 1, 1, -1, 1, -1, -1, -1, -1, 1, -2], [13, 14, 31, 45, 49, 1, 1, -1, 1, -1], [7, 1], [13, 14, 18, 28, 37, 40, 46, 49, 54, 58, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1], [2, 13, 14, 18, 28, 31, 37, 40, 50, 53, 54, 57, 58, 60, -1, -1, -2, 1, 2, -1, -1, 1, 1, 1, 1, 1, 2, 1], [5, 7, 13, 14, 18, 20, 28, 33, 36, 37, 49, 53, 57, 1, -1, 1, 1, -2, 1, 1, 1, 1, 1, -1, 1, -1], [6, 10, 18, 20, 23, 28, 33, -1, 1, 1, -1, -1, -1, -1], [37, 57, 60, -1, 1, 1], [6, 7, 14, 31, 42, 1, 1, 1, -1, -1], [14, 18, 28, 37, 58, -1, 1, 1, -1, 1], [17, 18, 20, 22, 53, 54, 58, -1, 1, -1, 1, -1, 1, 1], [20, 23, 26, 28, 36, 1, -1, -1, 1, 1], [12, 14, 17, 18, 20, 28, 29, 31, 37, 40, 50, 54, 57, 58, 60, -1, -1, -1, 2, -1, 1, 1, -1, -1, 1, 1, 2, 1, 2, 1], [14, 18, 37, 51, 57, 58, -1, 1, -1, -1, 1, 1], [7, 9, 13, 18, 20, 28, 33, 49, 50, 52, 53, 55, 58, -1, -1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1], [20, 1], [14, 28, 31, 37, 40, 50, 53, 57, 58, 60, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1], [14, 17, 18, 28, 31, 32, 33, 37, 40, 50, 54, 57, 58, -1, -1, 3, 1, -1, -1, -1, -1, 1, 1, 1, 1, 2], [23, 1], [7, 13, 14, 40, 44, 52, 53, 55, -1, 1, 1, -1, -1, -1, -1, 1], [16, 20, 28, -1, 1, 1], [23, 25, 36, -1, 1, 1], [6, 7, 14, 17, 18, 20, 31, 33, 34, 53, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1], [28, 1], [17, 18, 20, 54, 58, -1, 1, -1, 1, 1], [14, 18, 28, 37, 40, 50, 54, 58, -1, 1, 1, -1, 1, 1, 1, 1], [18, 20, 28, 30, 31, 37, 54, 58, 1, -1, 1, -1, -1, -1, 1, 1], [15, 17, 20, 28, 31, 33, 40, 50, 53, 54, 57, 58, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1], [14, 18, 21, 33, 53, 57, 60, -1, -1, -1, 1, 1, 1, 1], [12, 13, 17, 18, 20, 47, 49, 53, 54, 58, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1], [14, 18, 33, 37, 53, 54, 57, 58, -1, 2, -1, -1, -1, 1, 1, 1], [36, 1], [12, 57, 60, -1, 1, 1], [14, 20, 28, 30, 50, 57, 60, -1, 1, 1, 1, 1, 1, 1], [20, 31, 40, 53, 55, 59, 60, -1, -1, 1, 1, -1, 1, 1], [18, 20, 31, 40, 52, 54, 55, -1, 1, 1, -1, -1, -1, 1], [3, 14, 18, 28, 37, 49, 50, 54, 58, 1, -1, 1, 1, -1, -1, 1, 1, 2], [13, 49, 1, -1], [30, 41, 57, 60, -1, 1, -1, -1], [6, 18, 30, 33, 48, 1, -1, 1, 1, -1], [7, 13, 14, 20, 31, -1, 1, 1, -1, -1], [1, 7, 13, 20, 28, 37, 49, 50, 52, 55, 58, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1], [13, 14, 17, 18, 27, 28, 31, 33, 37, 40, 50, 54, 57, 58, -1, -1, -1, 3, 1, 1, -1, -1, -2, 1, 1, 2, 1, 3], [13, 18, 24, 28, 31, 33, 49, 50, 53, 60, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1], [6, 13, 14, 31, 49, 1, 1, 1, -1, -1], [4, 12, 14, 20, 28, 37, 50, 52, 55, 58, 1, -1, 1, -1, -1, 1, -1, 1, -1, -1], [14, 57, 60, -1, 1, 1], [52, 1], [14, 18, 28, 31, 33, 35, 37, 40, 50, 54, 57, 58, -1, 3, 1, -1, -1, -1, -2, 1, 1, 1, 1, 2], [18, 28, 31, 37, 40, 50, 54, 58, 1, 1, -1, -1, 1, 1, 1, 1], [14, 20, 28, 30, 37, 38, 50, 55, 57, 58, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1], [14, 18, 20, 28, 33, 39, 50, 52, 53, 58, 60, -1, -1, 1, 2, 1, -1, 1, -1, 1, 1, 1], [57, 1], [58, 1], [18, 20, 28, 30, 33, 37, 56, -1, 1, 1, 1, 1, 1, -1], [37, 58, -1, 1]], [[23, 30, 37, 41, 42, 1, 1, 1, -1, 1], [1, 8, 23, 30, 37, 42, 51, 1, 1, 1, -1, 1, -1, 1], [1, 5, 16, 19, 25, 30, 36, 42, 50, 59, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1], [1, 8, 12, 29, 43, -1, -1, 1, 1, 1], [1, 6, 8, 16, 25, 27, 30, 39, 42, 51, 59, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1], [5, 6, 16, 30, 36, 39, 45, 1, 1, 1, 1, 1, 1, -1], [16, 23, 42, 1, -1, 1], [1, 2, 8, 23, 30, 37, 59, 1, 1, 1, -1, -1, -1, 1], [1, 6, 8, 23, 25, 30, 35, 36, 37, 39, 42, 49, 51, 59, 1, 1, 1, 1, 1, -2, 1, -1, 1, 1, -1, -1, 1, 1], [1, 8, 16, 23, 25, 30, 37, 49, 55, -2, -1, -1, 2, 1, 1, 1, 1, -1], [1, 23, 25, 42, 1, -1, -1, -1], [12, 1], [5, 6, 16, 20, 23, 25, 30, 36, 39, 42, 49, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1], [1, 8, 30, 38, 1, 1, -1, 1], [1, 8, 25, 59, 1, 1, -1, 1], [7, 16, 25, -1, -1, 1], [1, 6, 8, 10, 16, 23, 30, 37, 39, 49, 51, 59, 2, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 2], [1, 5, 6, 8, 9, 16, 30, 49, 1, 1, 1, 1, 1, 1, -1, -1], [1, 6, 23, 25, 36, 37, 50, 51, 52, -1, 1, 2, 1, -1, 1, 1, 1, -1], [6, 26, 49, 1, -1, -1], [5, 6, 8, 16, 23, 25, 30, 37, 39, 49, 51, 54, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1], [1, 5, 6, 8, 16, 22, 29, 30, 39, 44, 49, 51, 59, 3, 1, 2, 2, 1, 1, -1, -1, 1, 1, -3, 1, 1], [23, 1], [6, 30, 36, 40, 49, 50, -1, 1, 1, 1, 1, 1], [25, 1], [13, 23, 36, 49, -1, -1, 1, 1], [1, 5, 6, 16, 23, 30, 39, 42, -1, 1, 1, 2, -1, 1, 1, 1], [6, 36, 49, -1, 1, 1], [1, 8, 12, 22, 25, 47, 59, 1, 1, 1, 1, -1, -1, 1], [1, 8, 11, 23, 25, 30, 51, 59, 1, 1, 1, 1, 1, -1, 1, 1], [1, 8, 32, 39, 59, 1, 1, 1, 1, 1], [33, 36, 39, 51, 59, 1, 1, -1, -1, -1], [1, 23, 30, 31, 36, 37, -1, 1, -1, 1, -1, 1], [1, 14, 23, 25, 42, 59, 1, 1, -1, -1, -1, 1], [1, 8, 18, 30, 36, 49, 59, 2, 1, 1, -1, 1, -1, 1], [36, 1], [37, 1], [23, 25, 30, 34, 51, 1, 1, -1, 1, 1], [39, 1], [1, 39, 49, 50, 56, 59, -1, -1, 1, 1, 1, -1], [1, 8, 23, 30, 37, 51, 59, 1, 1, 1, -1, 1, 1, 1], [42, 1], [12, 22, 53, -1, -1, 1], [1, 8, 25, 29, -1, -1, 1, 1], [5, 16, 30, 36, 39, 1, 1, 1, 1, 1], [23, 25, 37, 50, 51, 2, 1, 1, 1, 1], [1, 5, 6, 8, 12, 16, 22, 29, 30, 39, 49, 51, 59, 3, 1, 2, 2, 1, 1, 1, -1, -1, 1, -3, 1, 2], [1, 21, 23, 25, 37, 39, 49, 51, -1, -1, 1, 1, 1, 1, 1, 1], [5, 6, 16, 25, 28, 30, 36, 39, 42, 49, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1], [8, 25, 30, 46, 50, 51, -1, -1, 1, -1, -1, -1], [8, 23, 30, 37, 1, 1, -1, 1], [3, 5, 6, 16, 50, -1, 1, 1, 1, -1], [1, 4, 5, 6, 8, 16, 22, 25, 29, 30, 39, 49, 51, 59, 3, 1, 1, 2, 2, 1, 1, 1, -1, -1, 1, -3, 1, 1], [1, 6, 25, 39, 48, 49, 51, 59, 1, 1, 1, 1, -1, -1, 1, 1], [5, 6, 16, 17, 25, 30, 49, 51, 1, 1, 2, 1, 1, -1, -1, 1], [1, 5, 6, 16, 23, 24, 25, 30, 36, 37, 49, 50, 51, -1, -1, -1, -1, 2, 1, 1, -1, -1, 1, 1, 1, 1], [23, 37, 58, 1, 1, -1], [23, 37, 60, 1, 1, -1], [1, 8, 15, 25, -1, -1, 1, 1], [57, 1]], [[1, 6, -1, 1], [1, 9, 20, 30, 32, 39, 46, 55, 57, 59, 1, -1, 1, 2, 1, 2, -1, 1, -1, 1], [1, 6, 24, 28, 37, 39, 50, 51, 55, 57, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1], [12, 20, 22, 29, 40, 55, 59, -1, 1, -1, 1, -1, 1, -1], [1, 7, 10, 16, 30, 32, 37, 39, 40, 57, 59, -1, -1, 1, -1, -1, -1, 1, -2, -1, 1, -2], [1, 6, 7, 13, 20, 28, -1, 1, 1, -1, 1, 1], [7, 20, -1, -1], [1, 6, 31, 32, 39, 57, 59, 1, -1, 1, 1, 1, -1, 1], [1, 19, 28, 30, 32, 37, 39, 40, 46, 55, 57, 59, 2, -1, -1, 2, 1, -1, 2, 1, -1, 1, -2, 2], [1, 6, 7, 11, 20, 25, 32, 37, 39, 40, 57, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1], [5, 16, 25, 30, 39, 1, 1, -1, 1, 1], [4, 20, 22, 29, 32, 39, 40, 55, 57, -1, 1, -1, 1, 1, 1, -1, 1, -1], [1, 28, -1, 1], [1, 8, 32, 39, 57, 59, 1, 1, 1, 1, -1, 1], [15, 32, 39, 59, 1, 1, 1, 1], [7, 16, 1, 1], [1, 15, 30, 32, 37, 39, 40, 46, 50, 55, 57, 59, 1, 1, 2, 2, -1, 3, 1, -1, 1, 1, -2, 2], [1, 30, 32, 39, 46, 57, 59, 60, 1, 1, 1, 1, -1, -1, 1, 1], [2, 6, 7, 28, 30, 37, 40, 46, 51, 59, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1], [7, 1], [1, 30, 32, 37, 39, 46, 55, 57, 59, 1, 1, 1, -1, 1, -1, 1, -2, 1], [1, 7, 12, 22, 30, 32, 39, 46, 53, 57, 59, 1, 1, 1, 1, 2, 2, 2, -1, -1, -2, 2], [16, 20, 25, 26, -1, 1, 1, 1], [1, 15, 20, 28, 34, 37, 51, 57, -1, 1, 1, 1, -1, 1, -1, 1], [25, 1], [16, 25, 28, 36, 1, -1, 1, -1], [1, 7, 20, 30, 37, 41, -1, -1, -1, -1, -1, 1], [20, 28, 1, 1], [29, 32, 39, 57, 59, 1, 1, 1, -1, 1], [1, 30, 32, 39, 40, 46, 54, 57, 59, 1, 1, 1, 1, 1, -1, 1, -1, 1], [14, 32, 39, 57, 59, 1, 1, 1, -1, 1], [20, 28, 35, 37, 39, 40, 59, 1, 1, -1, 1, -1, -1, -1], [1, 7, 20, 28, 37, 46, 55, 57, 58, 1, -1, -1, -1, -1, -1, 1, -1, 1], [3, 6, 15, 30, 32, 39, 50, 59, 1, -1, 1, 1, 1, 2, 1, 1], [1, 20, 28, 30, 32, 37, 39, 46, 57, 59, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1], [20, 23, 28, 1, -1, 1], [15, 17, 30, 39, 50, 55, 1, -1, 1, 1, 1, 1], [1, 18, 20, 30, 46, 55, 57, 1, -1, 1, 1, -1, 1, -1], [21, 37, 39, 51, 55, -1, -1, 1, 1, 1], [51, 57, -1, 1], [1, 6, 30, 32, 39, 40, 46, 48, 57, 59, 1, 1, 2, 1, 2, 1, -1, -1, -1, 2], [6, 49, 1, -1], [20, 22, 29, 40, 44, 55, 57, -1, 1, -1, 1, 1, -1, 1], [12, 22, 47, -1, -1, 1], [1, 20, 28, 42, -1, 1, 1, 1], [6, 7, 20, 30, 32, 39, 40, 46, 51, 59, 1, 1, 1, 2, 1, 1, 1, -1, -1, 1], [1, 7, 12, 29, 30, 32, 39, 43, 46, 57, 59, 1, 1, 1, 1, 2, 3, 3, 1, -1, -3, 3], [6, 27, 32, 37, 40, 46, 55, 1, -1, -1, -1, 1, -1, 1], [1, 6, 28, 45, -1, 1, 1, -1], [1, 30, 32, 39, 46, 50, 51, 59, -1, -1, -1, -1, 1, 1, 1, -1], [1, 7, 46, 55, 57, 1, -1, -1, 1, -1], [57, -1], [1, 7, 12, 30, 32, 39, 46, 57, 59, 1, 1, 1, 2, 2, 2, -1, -3, 2], [7, 30, 32, 39, 57, 59, 1, 1, 1, 1, -1, 1], [1, 30, 32, 39, 46, 51, 57, 59, 1, 2, 1, 1, -1, -1, -1, 1], [1, 28, 30, 33, 37, 39, 40, 46, 55, 59, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1], [52, 57, 1, -1], [30, 39, 40, 56, 59, 1, 1, 1, -1, 1], [32, 39, -1, -1], [30, 32, 38, 39, 59, 1, 1, -1, 1, 1]]])
            elseif i == 81
                r = map(KroneckerProduct, f(4), f(25))
            elseif i == 82
                r = J ^ 2 * f(81)
            elseif i == 83
                r = J * f(81)
            elseif i == 84
                r = ComplexConjugate(f(81))
            elseif i == 85
                r = J * f(84)
            elseif i == 86
                r = J ^ 2 * f(84)
            elseif i == 87
                r = J * f(79)
            elseif i == 88
                r = J ^ 2 * f(79)
            elseif i == 89
                r = J ^ 2 * f(80)
            elseif i == 90
                r = J * f(80)
            elseif i == 91
                r = map((x->begin
                                map((y->begin
                                            expand(y, 64)
                                        end), x)
                            end), [[[5, 20, 54, 61, 1, 1, 1, 1], [1, 10, 11, 20, 38, 39, 42, 46, 49, 51, 54, 55, 57, 58, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1], [6, 10, 19, 20, 33, 42, 45, 49, 51, 54, 55, 58, 61, 64, 1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1], [13, 38, 39, 61, -1, 1, 1, -1], [2, 18, 45, 64, 1, -1, 1, -1], [3, 6, 10, 38, 39, 41, 42, 49, 64, -1, -1, -1, -1, -1, 1, -1, 1, 1], [4, 10, 11, 42, 45, 46, 49, 51, 55, 57, 58, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [11, 20, 25, 38, 39, 41, 45, 54, 58, 64, -1, -1, -1, -1, -1, 1, 2, -1, 1, -1], [19, 38, 45, 54, 1, -1, 1, -1], [45, -1], [10, 11, 15, 29, 34, 41, 42, 45, 46, 51, 54, 57, -2, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1], [15, 27, 32, 34, 42, 45, 49, 58, 61, 64, -1, 1, 1, -1, -1, -1, 1, -1, -1, 2], [7, 10, 18, 45, 58, 1, 1, -1, 1, 1], [8, 10, 33, 42, 49, 51, 55, 64, 1, 1, -1, 1, 1, 1, -1, 1], [9, 33, 49, 51, 56, 58, 61, 64, 1, -1, 1, 1, -1, -1, -1, 1], [11, 12, 14, 18, 20, 33, 38, 39, 45, 46, 51, 55, 61, -1, -1, 1, 1, -1, -1, -2, -2, 1, -1, 1, 1, 1], [10, 17, 20, 23, 27, 42, 49, 54, 58, 64, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1], [10, 11, 38, 39, 42, 45, 46, 49, 51, 55, 57, 61, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, 1], [10, 19, 42, 45, 49, 58, 61, 64, -1, -1, -1, -1, 1, -1, -1, 1], [33, 49, 58, 1, -1, 1], [19, 45, 54, 61, 1, 1, -1, -1], [19, 33, 38, 39, 41, 45, 49, 53, 58, 61, 64, 1, 1, -2, -1, 1, 2, -2, 1, 2, 1, -1], [10, 15, 17, 27, 34, 38, 39, 49, 51, 54, 57, 64, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1], [33, 39, 51, 54, 61, 1, 1, -1, -1, -1], [10, 11, 14, 15, 29, 33, 34, 38, 39, 42, 46, 49, 51, 54, 55, 57, 58, 61, 3, 1, -1, -1, -1, -1, -1, -1, -1, 2, 1, 1, 2, -1, -1, 1, 1, 1], [11, 15, 19, 30, 33, 38, 39, 45, 49, 55, 58, 61, 64, -1, -1, 1, -1, 1, -1, -1, 2, -1, 1, 1, 1, -2], [10, 15, 19, 27, 34, 38, 39, 45, 49, 51, 54, 57, 64, -1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1], [10, 20, 38, 39, 42, 45, 49, 51, 54, 57, 58, 60, 64, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1], [11, 18, 19, 20, 29, 33, 38, 39, 45, 49, 51, 55, 58, 61, 64, -1, 1, 1, -1, -1, -1, -4, -4, 2, -1, 2, 1, 1, 3, -2], [10, 11, 15, 19, 29, 34, 38, 39, 42, 45, 46, 49, 51, 57, 58, 59, 61, 64, 2, 1, -1, 1, -1, -1, -2, -2, 1, 1, 1, -1, 2, 1, 2, 1, 2, -1], [34, 36, 39, 45, 49, -1, 1, 1, 1, -1], [10, 16, 25, 42, 45, 46, 51, 56, 57, 58, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1], [20, 21, 33, 45, 49, 51, 54, 56, 64, 1, 1, -1, 1, 1, 1, 1, -1, 1], [15, 24, 33, 34, 49, 51, 58, 1, -1, 1, 1, -1, -1, 1], [10, 18, 28, 29, 33, 38, 39, 42, 45, 49, 51, 58, 61, 64, 1, 1, 1, -1, -1, -2, -2, 1, 1, 1, 1, 1, 2, -1], [31, 33, 34, 36, 45, 61, 64, -1, 1, 1, -1, -1, -1, 1], [10, 15, 34, 49, 63, -1, 1, 1, -1, -1], [10, 34, 42, 49, 56, 64, 1, 1, 1, 1, -1, 1], [15, 33, 45, 1, -1, 1], [19, 45, -1, -1], [10, 20, 33, 42, 49, 51, 54, 55, 61, 64, 1, -1, -1, 1, 1, 1, -1, -1, -1, 1], [15, 19, 34, 45, 49, 51, -1, 1, -1, 1, -1, 1], [10, 33, 38, 39, 42, 45, 50, 51, 57, 58, 61, 64, 1, -1, -2, -2, 1, 1, 1, 2, 1, 1, 2, -1], [20, 49, -1, -1], [20, 54, 61, 1, 1, 1], [10, 18, 19, 20, 27, 29, 33, 38, 39, 42, 45, 49, 51, 54, 58, 61, 64, 2, 1, 1, -2, -1, -1, -2, -4, -4, 2, 2, -1, 3, -1, 1, 3, -2], [11, 18, 29, 33, 38, 39, 45, 51, 52, 55, 58, 61, 64, -1, 1, -1, -1, -3, -3, 2, 1, -1, 1, 1, 3, -2], [10, 19, 29, 33, 38, 39, 42, 45, 47, 51, 58, 61, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [33, 38, 39, 40, 49, 51, 56, 64, -1, -1, -1, -1, 1, 1, -1, 1], [20, 27, 43, 50, 51, 54, 57, 64, -1, -1, -1, -1, -1, -1, -1, -1], [10, 15, 33, 34, 42, 44, 45, 51, 54, 56, 58, 64, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1], [10, 42, 45, 48, 58, 61, 64, 1, 1, 1, -1, 1, 1, -1], [10, 22, 34, 38, 41, 42, 53, 55, 56, 1, -1, 1, 1, -1, 1, -1, 1, -1], [10, 15, 34, 42, 45, 56, 58, -1, -1, -1, -1, -1, 1, -1], [10, 19, 20, 33, 38, 39, 41, 42, 45, 49, 51, 54, 55, 58, 1, 1, -2, -1, -2, -2, 1, 1, 2, -1, 2, -1, -1, 1], [19, 20, 38, 39, 45, 49, 51, 1, -1, -1, -1, 1, -1, 1], [15, 19, 20, 27, 33, 34, 38, 39, 42, 45, 49, 51, 54, 58, 61, 64, -1, -1, 1, 1, 1, -1, 1, 1, -1, -2, 2, -1, -1, -1, -2, 2], [20, 38, 39, 54, -1, -1, -1, -1], [26, 33, 38, 41, 49, 51, 55, 64, -1, 1, 1, -1, -1, -1, 1, -1], [15, 20, 27, 33, 34, 35, 42, 46, 57, -1, 1, 1, 1, -1, -1, -1, 1, 1], [15, 33, 34, 42, 45, 49, 56, 1, -1, 1, 1, 1, 1, -1], [11, 15, 18, 19, 29, 34, 37, 38, 39, 45, 49, 51, 55, 58, 61, 64, -1, -1, 1, 1, -1, -1, 1, -2, -2, 2, -1, 1, 1, 1, 2, -2], [15, 29, 33, 34, 38, 39, 42, 45, 49, 51, 56, 61, 62, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1], [58, -1]], [[10, 15, 45, 49, 58, 64, 1, -1, -1, 1, -1, 1], [11, 15, 17, 23, 33, 37, 40, 45, 52, 58, 64, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1], [1, 4, 11, 15, 17, 37, 45, 49, 60, -1, -1, 1, 1, 1, -1, 1, -1, 1], [33, 49, 58, 64, 1, -1, 1, -1], [20, 1], [33, 61, -1, 1], [17, 29, 37, 40, 41, 45, 46, 52, 64, 1, 1, 1, 1, 1, 1, -1, 1, 1], [15, 33, 34, 42, 45, 56, 58, 1, -1, 1, 1, 1, -1, 1], [2, 4, 14, 17, 37, 40, 45, 60, 1, 1, 1, 1, 1, 1, 1, 1], [3, 17, 29, 45, 46, -1, -1, -1, -1, 1], [11, 14, 29, 37, 46, 52, 60, -1, 1, 1, 1, -1, 1, -1], [11, 40, 43, 49, 50, 56, 57, 58, 61, 1, 1, 1, -1, 1, 1, 1, -1, 1], [39, -1], [50, 60, 1, 1], [6, 17, 49, 60, 61, 1, 1, -1, 1, 1], [11, 14, 15, 25, 31, 33, 36, 45, 49, 56, 64, 1, -1, 1, 1, 1, -2, 1, 1, 1, -1, 1], [15, 61, 1, -1], [33, 37, 40, 49, 52, 58, 64, -1, 1, 1, 1, 1, -1, 1], [49, 61, -1, 1], [5, 20, -1, -1], [4, 7, 14, 17, 37, 40, 45, 58, 60, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 11, 31, 33, 36, 46, 49, 56, 57, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1], [9, 11, 14, 29, 33, 37, 40, 45, 46, 52, 60, 61, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1], [12, 17, 31, 33, 36, 37, 49, 1, 1, -1, 1, -1, 1, -1], [11, 14, 16, 25, 29, 31, 33, 36, 37, 46, 49, 52, 56, 60, 1, -1, -1, -1, -1, 1, -1, 1, -2, 2, 1, -1, -1, 2], [4, 26, 31, 33, 36, 37, 45, 49, 56, 58, 62, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1], [4, 11, 14, 29, 33, 37, 46, 52, 58, 60, 61, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1], [11, 14, 15, 29, 31, 33, 36, 37, 45, 46, 48, 52, 56, 58, 60, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, 1], [4, 11, 14, 15, 17, 29, 31, 33, 36, 45, 46, 49, 56, 60, 64, 1, 1, -1, 1, -1, -1, 3, -4, 3, 2, 2, 3, -3, 1, 1], [4, 11, 14, 17, 29, 31, 33, 36, 37, 46, 49, 52, 55, 56, 60, 1, 1, -1, -1, -1, 2, -2, 2, -1, 2, 2, -1, -1, -1, 1], [11, 17, 33, 40, 49, 54, 56, 57, 63, 1, 1, 1, 1, -1, -1, 1, 1, -1], [17, 34, 37, 52, 54, 60, 61, 1, 1, -1, -1, 1, 1, 1], [15, 17, 19, 60, 61, -1, 1, 1, 1, 1], [14, 53, 54, 1, 1, 1], [14, 17, 29, 31, 33, 36, 40, 46, 49, 56, 57, 60, 61, 64, -1, -1, -1, 1, -2, 1, -1, 1, 2, -2, -1, 1, -1, 1], [14, 54, 59, 61, 1, 1, 1, 1], [14, 1], [17, 54, 60, 61, 1, 1, 1, 1], [13, 39, 1, -1], [4, 14, 17, 18, 37, 40, 60, -1, -1, -1, -1, -1, -1, -1], [11, 15, 17, 21, 37, 40, 45, 49, 58, 60, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1], [4, 11, 17, 22, 29, 31, 36, 40, 45, 53, 54, 57, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1], [14, 17, 24, 29, 31, 33, 36, 37, 45, 46, 49, 52, 56, 57, 60, -1, -1, 1, -1, 1, -2, 1, -1, 1, 1, 2, -1, -1, -1, 1], [11, 15, 30, 49, 57, 60, 1, 1, 1, -1, 1, -1], [15, 45, 49, 58, -1, -1, 1, -1], [4, 11, 14, 15, 29, 31, 33, 36, 37, 45, 46, 49, 56, 60, 61, 64, 1, 2, -1, 2, -1, 3, -4, 3, -1, 2, 2, 3, -3, 2, -1, 1], [14, 17, 29, 31, 33, 36, 45, 46, 49, 56, 57, 60, 64, -1, -1, -1, 2, -3, 2, 1, 1, 3, -2, -1, 1, 1], [4, 28, 31, 33, 36, 46, 48, 49, 56, 60, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1], [33, 60, 61, -1, 1, 1], [15, 37, 52, 61, 1, 1, 1, -1], [17, 36, 37, 54, 60, 61, 1, 1, -1, 1, 1, 1], [61, -1], [32, 54, 1, 1], [17, 38, 54, 60, -1, -1, -1, -1], [4, 11, 15, 17, 31, 33, 36, 37, 40, 44, 45, 46, 56, 57, 58, 60, 1, 2, 2, 1, 2, -2, 2, -1, 1, -1, 2, 1, -1, 1, 1, 1], [4, 11, 14, 15, 17, 31, 33, 36, 40, 45, 47, 57, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [4, 15, 31, 33, 35, 36, 45, 49, 56, 58, 61, -1, -1, -2, 1, -1, -2, -1, -1, 1, -1, 1], [15, 33, 45, 1, -1, 1], [51, 54, 1, 1], [15, 52, 61, -1, -1, 1], [17, 60, 1, 1], [4, 11, 14, 26, 31, 33, 36, 45, 46, 49, 56, 60, 64, 1, 1, -1, -1, 2, -2, 2, 1, 1, 2, -2, 1, 1], [14, 17, 29, 31, 33, 36, 46, 49, 51, 54, 56, 57, 1, 2, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1], [11, 17, 27, 58, 1, 1, -1, -1]], [[12, 56, 57, -1, 1, 1], [7, 13, 16, 17, 20, 25, 27, 30, 43, 50, 51, 54, 57, 59, 61, 64, -1, 1, 1, -1, 1, 1, 2, -1, 1, 1, 1, 1, 1, 1, -1, 1], [17, 20, 27, 31, 33, 38, 43, 49, 50, 51, 54, 56, 64, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 2, -1, 1], [27, 28, 45, 57, 58, -1, -1, -1, -1, -1], [17, 32, 33, 1, -1, 1], [38, 39, 61, 1, 1, -1], [7, 13, 20, 23, 27, 30, 33, 35, 50, 51, 54, 59, 61, 64, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1], [2, 7, 17, 27, 33, 38, 39, 40, 51, 61, 1, -1, 1, 1, 2, 1, 1, 1, -1, -1], [9, 17, 20, 23, 24, 27, 31, 33, 39, 54, 64, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1], [17, 20, 23, 27, 33, 42, 54, 64, -1, -1, -1, -1, -1, 1, -1, -1], [4, 7, 30, 33, 37, 38, 45, 54, 56, 58, 59, 61, 63, -1, -1, -1, 1, -1, -1, -1, -2, 1, -1, 1, -1, -1], [17, 20, 25, 27, 30, 33, 38, 43, 51, 54, 61, 64, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1], [17, 33, 50, 51, 60, 1, 1, -1, -1, -1], [5, 13, 20, 38, 39, 54, 1, -1, 1, 1, 1, 1], [15, 17, 20, 34, 38, 39, 50, 51, 54, -1, -1, 1, -1, 1, 1, 1, 1, 1], [1, 7, 8, 27, 33, 38, 39, 40, 43, 50, 54, 56, 57, 58, 59, 1, -1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1], [6, 17, 38, 50, 51, 53, 61, 1, 1, -1, -1, -1, 1, 1], [7, 13, 27, 30, 33, 46, 57, 59, 61, -1, 1, 1, -1, 1, 1, 1, 1, -1], [17, 33, 36, 38, 51, 61, -1, -1, -1, 1, 1, -1], [50, 51, 54, -1, -1, -1], [17, 20, 23, 31, 33, 39, 43, 54, 56, 57, 64, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1], [17, 27, 31, 33, 39, 40, 50, 51, 54, 56, 57, 58, 2, 1, -1, 2, 1, 1, -1, -2, -1, 1, 1, 1], [3, 22, 27, 38, 39, 45, 54, 56, 58, 1, 1, 1, 2, 1, 1, 2, -1, 1], [9, 20, 23, 27, 64, -1, 1, 1, 1, 1], [1, 7, 17, 23, 30, 37, 38, 39, 45, 49, 51, 54, 56, 58, 59, 61, 63, -1, 1, 1, -1, 1, 1, 2, 1, 1, 1, -1, 3, -1, 1, -1, 1, 1], [7, 17, 18, 27, 31, 33, 39, 40, 45, 49, 51, 54, 56, 57, -1, 1, 1, 1, -1, 2, 1, 1, -1, -1, -1, -1, 1, 1], [17, 23, 27, 31, 33, 38, 43, 45, 54, 55, 56, 57, 58, 1, 1, -1, -1, 1, -2, -1, -1, -1, -1, 1, -1, -1], [11, 17, 27, 30, 33, 38, 39, 40, 51, 54, 57, 58, 61, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1], [7, 13, 17, 20, 23, 27, 31, 33, 38, 39, 40, 43, 50, 51, 54, 56, 57, 58, 62, 63, 64, -1, 1, 1, -1, -1, 2, -1, 2, 1, 2, 1, 1, 1, -1, 1, 1, 3, 2, 1, 1, -1], [7, 17, 20, 23, 30, 31, 33, 37, 38, 39, 50, 51, 54, 57, 58, 59, 61, 63, 64, 1, 2, -1, -1, 1, -1, 1, 1, 1, 1, -1, -2, 1, 1, 1, -1, 1, 1, -1], [17, 20, 23, 27, 31, 33, 54, 64, 1, 1, 1, 1, -1, 1, 1, 1], [14, 17, 20, 33, 38, 39, 51, 54, 59, 61, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1], [20, 33, 38, 39, 50, 54, 1, 1, 1, 1, 1, 1], [15, 17, 38, 50, 51, 54, 1, 1, -1, -1, -1, -1], [20, 23, 30, 33, 37, 38, 39, 50, 51, 54, 57, 58, 63, 64, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1], [19, 33, 36, 50, 54, 1, -1, -1, -1, -1], [37, 38, 52, 54, -1, -1, -1, -1], [20, 39, 54, 61, 1, 1, 1, 1], [17, 33, 54, 1, 1, 1], [17, 20, 31, 33, 39, 45, 54, 58, 64, -1, -1, 1, -1, -1, 1, -1, 1, -1], [20, 38, 39, 49, 54, 56, 57, 64, 1, 1, 1, 1, 2, -1, -1, 1], [10, 17, 20, 23, 27, 31, 33, 42, 54, 64, -1, 1, 1, 1, 1, -1, 1, -1, 1, 1], [17, 20, 22, 23, 33, 38, 39, 51, 54, 57, 58, 61, 64, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1], [27, 40, 43, 56, 57, 1, 1, 1, 1, 1], [21, 23, 27, 1, -1, -1], [17, 23, 26, 27, 30, 31, 33, 37, 38, 39, 40, 43, 49, 50, 51, 54, 57, 58, 61, 63, 2, -1, 1, 2, 1, -1, 2, 1, 1, 3, 1, 1, 1, 1, -1, 3, 3, 2, 1, 1], [7, 13, 17, 20, 23, 27, 29, 33, 38, 39, 50, 51, 54, 57, 58, 63, 64, -1, 1, 1, -1, -1, 1, 1, 2, 1, 1, 1, -1, 1, 2, 1, 1, -1], [17, 31, 33, 39, 49, 51, 54, 63, 1, -1, 1, 1, 1, -1, 1, 1], [38, 39, 54, 1, 1, 1], [38, 53, -1, 1], [17, 20, 33, 39, 49, 51, 54, 61, 1, 1, 1, 1, 1, -1, 1, 1], [17, 33, 37, 51, 1, 1, 1, -1], [38, 61, -1, 1], [17, 20, 33, 39, 51, 54, 61, -1, -1, -1, -1, 1, -1, -1], [17, 20, 27, 31, 33, 38, 39, 40, 43, 49, 51, 54, 57, 58, 64, 2, 1, 2, -1, 2, 1, 2, 1, 1, 1, -1, 2, 1, 1, 1], [17, 20, 27, 31, 33, 39, 43, 45, 54, 57, 64, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1], [17, 31, 33, 38, 39, 41, 45, 51, 56, 57, 61, 64, -2, 1, -2, 1, -1, 1, 1, 1, -1, -1, -1, 1], [27, 43, 44, 57, 1, 1, 1, 1], [13, 38, 39, 61, 1, -1, -1, 1], [38, 49, 59, 1, -1, -1], [20, 33, 39, 50, 54, 1, 1, 1, 1, 1], [7, 13, 17, 27, 31, 33, 38, 39, 40, 47, 50, 51, 54, 56, 57, 58, 63, -1, 1, 1, 2, -1, 2, 1, 1, 1, 1, 1, -1, 1, 1, 2, 1, 1], [17, 20, 23, 27, 33, 38, 48, 61, 63, 64, 1, 2, 1, 1, 1, -1, -1, 1, -1, 1], [20, 27, 43, 50, 51, 54, 57, 64, 1, 1, 1, 1, 1, 1, 1, 1]], [[4, 1], [4, 10, 18, 29, 36, 41, 46, 50, 1, 1, 1, -1, 1, -1, 1, -1], [3, 27, 50, -1, -1, 1], [1, 4, -1, -1], [13, -1], [17, 54, 61, -1, -1, -1], [2, 4, 10, 29, 36, 41, 46, 50, 1, 1, 1, -1, 1, -1, 1, -1], [17, 35, 46, 55, -1, -1, 1, -1], [3, 10, 40, 41, 1, 1, -1, -1], [10, 64, -1, -1], [17, 29, 36, 46, -1, -1, 1, 1], [10, 19, 29, 41, 47, 54, 55, 61, 1, 1, -1, -1, 1, -1, 1, -1], [5, 13, 1, -1], [50, 60, 1, 1], [49, 51, 54, 61, 1, -1, -1, -1], [4, 10, 13, 28, 42, 46, 48, 50, 55, 1, 1, 1, -1, 1, 1, -1, -1, -1], [19, 54, 61, -1, 1, 1], [4, 7, 10, 29, 36, 41, 46, 50, 1, 1, 1, -1, 1, -1, 1, -1], [6, 54, 61, 1, -1, -1], [39, 1], [3, 9, 10, 41, 1, 1, 1, -1], [3, 10, 17, 39, 42, 55, 57, 1, 1, -1, 1, 1, -1, -1], [19, 36, 41, 54, 61, 1, -1, -1, -1, -1], [42, 56, -1, 1], [28, 29, 36, 42, 46, 50, 55, 1, 1, -1, 1, -1, 1, -1], [3, 10, 16, 25, 39, 42, 46, 50, 55, 1, 1, -1, -1, 1, 1, 1, -1, -1], [3, 19, 36, 54, 61, 1, -1, 1, 1, 1], [29, 36, 42, 55, 62, 1, -1, 1, -1, -1], [3, 4, 10, 11, 13, 39, 42, 46, 50, 55, 1, 1, 2, 1, 1, 1, 3, 1, -1, -3], [3, 10, 12, 29, 36, 39, 42, 46, 55, 1, 1, -1, 1, -1, 1, 2, -1, -1], [10, 22, 41, 55, 1, -1, -1, 1], [36, 51, 52, 54, -1, -1, -1, -1], [15, 51, 54, 61, 1, -1, -1, -1], [61, 1], [4, 13, 29, 41, 42, 54, 55, 63, 1, 1, 1, 1, 1, 1, -2, 1], [53, 54, -1, -1], [14, 1], [51, 54, -1, -1], [20, 39, -1, -1], [3, 10, 21, 41, -1, -1, -1, 1], [23, 41, 50, 1, -1, 1], [3, 10, 39, 41, 42, 1, 2, 1, -1, 1], [36, 42, 55, -1, 1, -1], [24, -1], [45, 58, -1, -1], [3, 4, 10, 13, 19, 29, 39, 42, 54, 55, 61, 1, 1, 2, 1, -1, 1, 1, 3, 1, -3, 1], [4, 10, 13, 30, 42, 46, 50, 55, 1, 1, 1, -1, 2, 1, -1, -2], [3, 10, 26, 39, 42, 55, 1, 1, 1, 1, 1, -1], [33, 51, 54, 61, 1, -1, -1, -1], [19, 36, 54, 61, -1, 1, 1, 1], [34, 51, 54, -1, -1, -1], [54, 59, 61, 1, 1, 1], [17, 50, 51, 61, 1, -1, -1, 1], [51, 61, 1, -1], [3, 10, 17, 39, 41, 42, 43, 50, 55, 1, 2, -1, 1, -1, 2, 1, 1, -1], [3, 10, 39, 41, 42, 44, 1, 2, 1, -1, 1, -1], [3, 10, 19, 31, 39, 42, 54, 55, 61, -1, -1, 1, 1, -1, -2, -1, 1, -1], [45, 1], [17, 32, 50, 61, 1, -1, -1, 1], [19, 36, 37, 54, 61, 1, -1, 1, -1, -1], [38, 51, 1, -1], [3, 4, 10, 13, 25, 39, 42, 46, 50, 55, 1, 1, 2, 1, -1, 1, 2, 1, -1, -2], [8, 42, 51, 55, 61, -1, -1, -1, 1, 1], [10, 1]]])
            elseif i == 92
                r = map((x->begin
                                map((y->begin
                                            expand(y, 64)
                                        end), x)
                            end), [[[3, 8, 18, 19, 21, 23, 27, 38, 39, 42, 43, 45, 53, 62, 63, 1, 1, -J, 1, J ^ 2, -1, -1, 1, 1, -1, J ^ 2, 1, -1, J ^ 2, 2], [1, 6, 8, 18, 21, 23, 38, 45, 53, 62, 63, 1, -1, -(J ^ 2), 2, -J, -1, 1, 1, -1, J ^ 2, 2], [2, 8, 18, 24, 39, 42, 53, 62, 1, J, J ^ 2, -J, 1, 1, -J, J], [6, 8, 18, 19, 21, 24, 39, 42, 63, -1, J ^ 2, -(J ^ 2), -1, 1, 1, -1, J, 1], [7, 42, 45, 63, -1, -1, -1, J], [21, 24, 27, 39, 42, 45, 62, 63, J ^ 2, 1, -1, 1, J, 1, -1, 2], [5, 7, 8, 21, 53, 62, 63, 1, -1, 1, J ^ 2, -1, -J, 1], [8, 18, 63, J ^ 2, -1, J ^ 2], [8, 15, 18, 19, 21, 23, 24, 38, 39, 42, 53, 62, 63, J - J ^ 2, 1, -2J - J ^ 2, 1, -J, -1, -1, 1, 1, J ^ 2, -1, J ^ 2, J], [8, 18, 19, 24, 39, 42, 43, 45, 46, 56, 62, 63, J - J ^ 2, -J, J ^ 2, -1, J ^ 2, 1, -(J ^ 2), J ^ 2, -1, J, -(J ^ 2), -2], [8, 9, 18, 19, 21, 23, 24, 38, 39, 53, 63, J ^ 2, -1, J, -1, J, 1, J, -1, -1, -(J ^ 2), -1], [8, 10, 16, 18, 19, 23, 38, 39, 42, 53, 63, -J, 1, -(J ^ 2), J, J ^ 2, -(J ^ 2), J ^ 2, J ^ 2, J, J, 1], [8, 15, 21, 24, 28, 39, 53, 63, 1, -1, J, -(J ^ 2), 1, -1, -(J ^ 2), 1], [14, 18, 24, 53, 62, J, 1, J, J, J ^ 2], [8, 11, 19, 23, 38, 39, 42, 45, 53, 62, 63, 1, -1, 1, -1, 1, 1, J ^ 2, 1, -1, J ^ 2, 1], [8, 17, 18, 23, 38, 42, 43, 45, 56, 63, J + 2 * J ^ 2, -J, J - J ^ 2, 1, -1, J, -1, 1, J ^ 2, -J], [8, 18, 19, 35, 39, 40, 42, 43, 45, 62, 63, -2J - J ^ 2, J ^ 2, J ^ 2, 1, J ^ 2, J, 1, 1, -J, -(J ^ 2), -J + J ^ 2], [18, J], [8, 39, 45, 63, 1, -1, 1, 1], [8, 18, 24, 36, 39, 53, -1, J, -J, -1, 1, J ^ 2], [8, 18, 24, 42, 53, 62, J ^ 2, J ^ 2, 1, J, 1, J], [18, 22, 24, 53, 62, 1, J, J, J, J ^ 2], [8, 18, 19, 20, 24, 42, 45, 53, 62, 63, 2, -J, 1, 1, J, J ^ 2, 1, J, J ^ 2, 1], [8, 45, 63, 1, 1, -2J - J ^ 2], [8, 18, 21, 24, 32, 45, 53, 62, 63, -2J - J ^ 2, -1, -1, -(J ^ 2), -(J ^ 2), 1, J, J ^ 2, 2], [24, 42, 43, 50, 53, 62, 63, 1, J, J, 1, 1, J, 1], [4, 18, 19, 21, 23, 38, 42, 1, -1, -1, -1, 1, -1, 1], [8, 11, 18, 19, 24, 37, 39, 53, 63, -1, -1, J, 1, J ^ 2, 1, 1, J ^ 2, -1], [8, 18, 42, 43, 61, 63, -(J ^ 2), -1, -J, -(J ^ 2), -(J ^ 2), J], [8, 18, 24, 39, 53, 63, 2J + J ^ 2, J, -J, 1, J ^ 2, J], [8, 18, 19, 45, 63, J, 1, -1, -1, J], [8, 18, 21, 24, 25, 32, 42, 45, 53, 62, J, 1, -J, J ^ 2, J, -1, -(J ^ 2), J, J ^ 2, 1], [8, 19, 39, 42, 55, 63, J, -1, -1, 1, -1, J], [19, 39, 45, 56, 63, J, J, -1, 1, J], [8, 16, 18, 21, 23, 24, 38, 43, 53, 62, 63, -(J ^ 2), -(J ^ 2), J ^ 2, -1, -(J ^ 2), J, J ^ 2, J, J - J ^ 2, -1, J], [18, 21, 38, J, J, -1], [13, 19, 1, -1], [8, 20, 24, 30, 42, 53, 62, -J, 1, J, -1, J ^ 2, J, J ^ 2], [31, 45, 63, 1, -1, -1], [8, 18, 19, 34, 39, 42, 45, 63, -1, -J, J, 1, J, 1, -1, J + 2 * J ^ 2], [8, 18, 19, 21, 23, 24, 38, 39, 41, 42, 53, 62, 63, 2J + J ^ 2, -J - 3 * J ^ 2, J, 1, J ^ 2, -J + J ^ 2, -(J ^ 2), J ^ 2, J ^ 2, -(J ^ 2), J ^ 2, -(J ^ 2), -J], [8, 18, 58, 63, -1, -1, J ^ 2, -1], [8, 18, 42, -(J ^ 2), -J, -J], [18, 24, 44, 53, 62, 1, J, J, J, J ^ 2], [8, 18, 24, 45, 63, J, 1, -1, -1, -1], [8, 12, 18, 21, 23, 24, 35, 38, 40, 42, 43, 45, 53, 62, 63, J, -1, 1, 1, J ^ 2, J ^ 2, 1, -(J ^ 2), J, 1, 1, -1, -J + J ^ 2, -J - 2 * J ^ 2, -1], [18, 19, 39, 42, 48, 63, -1, 1, 1, J ^ 2, J ^ 2, -1], [19, 39, 60, J, J, -1], [8, 18, 19, 24, 26, 42, 43, 45, 53, 60, 62, 63, -1, J, -1, J ^ 2, 1, 1, 1, -1, J ^ 2, J ^ 2, 1, -1], [18, 19, 24, 42, 43, 48, 49, 53, 62, 63, -J, 1, J, J ^ 2, J ^ 2, J ^ 2, 1, J, J ^ 2, -1], [8, 18, 23, 33, 38, 39, 43, 52, J ^ 2, 2J, 1, -1, -1, 1, -(J ^ 2), -(J ^ 2)], [19, 39, 43, 55, 57, J, J, J, J, J], [18, 23, 38, 45, 63, J ^ 2, J, -J, -1, -1], [8, 18, 19, 39, 45, 54, 63, -J, -J, 1, J, -J, J ^ 2, -J + J ^ 2], [8, 18, 19, 39, 43, 51, 53, 62, 63, 64, J, J ^ 2, 1, 1, J, 1, 1, J, -1, 1], [8, 18, 19, 39, 40, 43, 45, -1, 1, J, J, 1, J ^ 2, -1], [8, 18, 19, 24, 42, 51, 53, 63, J ^ 2, J - J ^ 2, -1, -J, J, -1, J ^ 2, 1], [18, 43, J ^ 2, -1], [8, 18, 21, 23, 24, 38, 42, 53, 59, 62, 63, 2, 2 * J ^ 2, -1, J, J - J ^ 2, -J, J ^ 2, J - J ^ 2, J ^ 2, J ^ 2, -(J ^ 2)], [8, 19, 39, 43, 47, -(J ^ 2), -J, -J, -(J ^ 2), -J], [8, 18, 29, 42, 43, 61, 63, J ^ 2, 1, J, J, J ^ 2, -1, -J], [8, 18, 21, 23, 24, 38, 43, 53, 62, 63, -(J ^ 2), 2, -J, -1, -1, 1, -J, -1, -J, 1], [63, J], [8, 18, 19, 21, 23, 24, 38, 42, 43, 45, 52, 53, 62, 63, -J - 2 * J ^ 2, -2J, 1, J ^ 2, -1, J, 1, J ^ 2, J ^ 2, 1, J ^ 2, J, J ^ 2, 1]], [[1, 6, 20, 23, 36, 55, 57, -1, 1, 2, 1, J ^ 2, -1, -1], [9, 20, 36, 38, 42, 57, -1, 2, J ^ 2, -J - 2 * J ^ 2, J ^ 2, -1], [23, 25, 32, 38, 57, 1, -1, J ^ 2, J + 2 * J ^ 2, 1], [13, 20, 23, 38, 57, 1, 1, -1, 1, -1], [2, 19, 20, 36, 42, 1, -1, J, 1, 1], [1, 20, 23, 36, 38, 39, 55, 57, -1, 2, 1, -1, J ^ 2, -1, -1, -1], [4, 20, 38, 57, 1, 1, -(J ^ 2), -1], [20, 21, J ^ 2, 1], [5, 19, 20, 23, 36, 42, 57, -1, -1, J, 1, -J, -J, 1], [20, 23, 35, 36, 38, 39, 40, 42, 55, 57, -2, J ^ 2, J, 1, J, -(J ^ 2), J ^ 2, J ^ 2, -(J ^ 2), 1], [20, 23, 36, 37, 38, -1, -1, J, -1, 1], [20, 23, 38, 41, 57, 59, 1, J ^ 2, -(J ^ 2), 1, -1, 1], [7, 20, 23, 38, 42, 57, 1, 1, -1, 1, -1, -1], [8, 38, 42, 1, 1, J ^ 2], [20, 23, 27, 36, 1, 1, 1, J ^ 2], [12, 20, 35, 36, 39, 40, 42, 55, 57, -(J ^ 2), -J, J ^ 2, J, -1, 1, 1, -1, -1], [17, 19, 20, 23, 39, 42, 55, J ^ 2, -J - 2 * J ^ 2, -J + J ^ 2, J ^ 2, -(J ^ 2), 2J + J ^ 2, 1], [22, -1], [19, 20, 23, 38, 42, 57, 1, 1, -1, 1, -1, -1], [23, 38, 42, 1, -1, 1], [14, 38, 1, J ^ 2], [18, 22, 38, 1, -1, 1], [20, 38, 42, 1, 1, -1], [20, 36, 42, 55, 57, 62, -2J - J ^ 2, -1, -1, -1, -1, -1], [15, 19, 20, 36, 38, 42, 57, -1, 1, 2, -1, 1, -1, -1], [19, 20, 39, 55, 57, -1, 1, -1, -1, -1], [19, 25, 36, 1, -1, J], [3, 20, 23, 38, 42, 57, 1, -1, 1, -1, 1, 1], [20, 38, 47, 50, 55, 57, J, J, -1, 1, 1, 1], [20, 23, 38, 42, 43, J, 1, -1, 1, J], [20, 42, 44, 63, J, -J, -(J ^ 2), -1], [15, 19, 28, 36, 38, 42, -J, J, J, -J, J, -J], [19, 20, 23, 29, 38, 39, 42, 55, 1, J, -1, -1, -(J ^ 2), 1, J ^ 2, 1], [20, 23, 38, 39, 40, 55, J, J, 1, -J, J, 1], [20, 36, 38, 39, 41, 42, 54, J, J, 1, J ^ 2, 1, J ^ 2, -J], [36, J], [11, 36, 37, 1, -1, -1], [38, 1], [20, 55, 57, -1, 1, 1], [20, 23, 38, 39, 54, 55, 57, J + 2 * J ^ 2, J, -J, -J, 1, 1, -J - 2 * J ^ 2], [10, 20, 23, 36, 38, 39, 42, 57, J ^ 2, -J, J ^ 2, 1, J, J, -J, -1], [20, 38, -1, J ^ 2], [44, -(J ^ 2)], [20, 30, 38, 42, 1, -1, 1, -J], [19, 20, 31, 42, 43, 57, -1, -1, -1, -J, 1, 1], [20, 36, 38, 39, 46, 55, 57, -1, -2J - J ^ 2, -1, -(J ^ 2), J ^ 2, 1, 1], [19, 20, 23, 33, 38, 39, 42, 52, 57, -1, -1, 1, 1, -1, -1, -(J ^ 2), J ^ 2, 1], [23, 38, 39, 49, J, 1, -J, J], [20, 38, 39, 42, 48, 49, 55, 57, -1, J, 1, 1, -(J ^ 2), -1, 1, 1], [20, 52, 57, -1, J ^ 2, 1], [23, 36, 39, 42, 51, 64, 1, J, -1, 1, -1, -1], [23, 38, 57, 61, J, 1, J, 1], [20, 39, 53, 55, 57, -1, -J, J, 1, 1], [20, 23, 34, 38, 39, 42, 55, 57, -J + J ^ 2, J, J ^ 2, -J, -(J ^ 2), J, J, J - J ^ 2], [19, 20, 23, 26, 38, 39, 57, -1, -1, 1, -1, J + 2 * J ^ 2, -1, 1], [19, 23, 38, 39, 55, 56, -J + J ^ 2, J, -J, -J, J ^ 2, J ^ 2], [20, 26, 38, 42, 57, 60, 1, 1, -(J ^ 2), 1, -1, J ^ 2], [58, J], [16, 20, 36, 38, 39, 42, -J, -(J ^ 2), -1, 1, -J, -1], [19, 23, 38, 39, 42, 55, J, -J, J, J, -J, J], [20, 38, 50, 57, -J, -J, J, J], [20, 24, 36, 38, 39, 42, 62, 1, 1, J ^ 2, -(J ^ 2), 1, J ^ 2, -1], [19, 20, 45, 1, -(J ^ 2), 1], [20, 36, 42, 51, 55, 57, 1, J ^ 2, -1, 1, -1, -1]], [[12, 19, 23, 34, 36, 39, 48, 57, 58, 60, 61, J ^ 2, -(J ^ 2), -J, -(J ^ 2), -1, J ^ 2, -1, -J, -1, J, -1], [17, 19, 23, 36, 42, 48, 57, 58, 60, 61, J ^ 2, -J - 2 * J ^ 2, -J, -1, -1, -2, -J, -2, -1, 2 * J ^ 2], [16, 19, 23, 34, 38, 58, 60, 61, -J, -1, -J, -J, J, 1, J ^ 2, J], [19, 34, 36, 38, 46, 48, 58, 60, 61, -J, 1, -J, -1, J ^ 2, -1, -1, 1, -J], [5, 34, 36, 48, J ^ 2, -(J ^ 2), 1, J ^ 2], [12, 23, 34, 35, 36, 38, 40, 58, J ^ 2, -J, 1, -(J ^ 2), J ^ 2, -1, -1, -1], [7, 19, 36, 48, 58, 60, J ^ 2, -(J ^ 2), -1, J, -1, J], [8, 42, 47, 48, 58, 60, 61, -1, 1, -(J ^ 2), -(J ^ 2), 1, 1, -(J ^ 2)], [2, 4, 19, 23, 34, 36, 38, 42, 48, 57, 60, 61, J, -J, -(J ^ 2), -J, J, -(J ^ 2), 1, -1, 2 * J ^ 2, -J, J + 2 * J ^ 2, J + 2 * J ^ 2], [23, 34, 36, 37, 38, 39, 42, 48, 58, 60, 61, -1, J ^ 2, -(J ^ 2), -1, 1, -(J ^ 2), -1, J + 2 * J ^ 2, 1, J + 2 * J ^ 2, -1], [3, 19, 23, 27, 36, 38, 48, 57, 60, 61, -J, -J, J, J, 1, -J, 1, J, 1, 1], [15, 19, 23, 34, 48, 57, 58, 60, 61, 1, 1, -1, 1, J, -1, -1, -(J ^ 2), 1], [4, 19, 23, 36, 38, 42, 48, 58, 60, J, -J, J, -1, J ^ 2, J, J, -1, J], [19, 38, 44, 58, 61, 63, 1, -J, J, J, J ^ 2, J ^ 2], [1, 19, 23, 34, 36, 57, 60, J, -(J ^ 2), -J, J, J, -J, J], [11, 34, 36, 37, 39, 42, 48, 57, 58, 60, 61, J, 1, J ^ 2, -J, -1, -J, -2J - J ^ 2, J, -1, -2J - J ^ 2, -2J - J ^ 2], [9, 13, 19, 23, 34, 36, 39, 42, 48, 58, 60, 61, 1, 1, -J, -1, J ^ 2, J, 1, -(J ^ 2), J - J ^ 2, -(J ^ 2), J - J ^ 2, J], [29, 61, 1, 1], [36, 48, 58, 60, -1, J, -1, J], [19, 23, 38, 42, 48, 52, 60, 61, J, -J, J, -J, -J, 1, -J, 1], [19, 34, 36, 38, 42, 53, 58, 60, 61, 62, J ^ 2, 1, -J, -1, 1, -1, 1, 1, J, -J], [14, 19, 38, 58, 61, J, 1, -J, J, J ^ 2], [19, 34, 36, 38, 42, 48, 58, 60, 61, 64, 1, J, J, -J, J, J, J, 2J, -1, J], [20, 30, 36, 42, 48, 58, 60, -1, 1, -1, J, J, -1, J], [19, 25, 32, 36, 38, 48, 58, 60, 61, 1, -1, J ^ 2, -1, J ^ 2, J - J ^ 2, -1, J - J ^ 2, -(J ^ 2)], [26, 34, 38, 39, 42, 48, 58, J, 1, -1, J, J, -1, -1], [10, 34, 48, 57, 61, -(J ^ 2), -J, -(J ^ 2), J, -(J ^ 2)], [1, 6, 19, 23, 38, 42, 48, 58, 60, 61, J, -J, J, -J, -(J ^ 2), -J, -2J - J ^ 2, -2J - J ^ 2, -J, 1], [19, 34, 39, 58, 60, 61, 63, J, -1, -(J ^ 2), -J, -1, -(J ^ 2), 1], [19, 23, 33, 38, 42, 48, 52, 58, 60, 61, J, -J, J, J, -J + J ^ 2, -2J, 1, -J, -J + J ^ 2, 1], [36, 42, 43, 48, 60, 61, 1, -1, -1, J ^ 2, J ^ 2, J ^ 2], [19, 25, 34, 36, 38, 48, 60, 61, J, -J, -J, J ^ 2, -(J ^ 2), -1, J ^ 2, J ^ 2], [24, 34, 42, 48, 58, 60, J ^ 2, J ^ 2, J ^ 2, -1, -J, J ^ 2], [36, 48, 1, J], [19, 23, 28, 38, 39, 42, 48, 57, 60, 61, 1, -1, 1, -J, J, -1, J, -1, -1, J], [48, 55, 61, 1, -J, 1], [27, 36, J, 1], [19, 34, 36, 38, 51, 58, 60, 64, 1, J, -(J ^ 2), -J, J, J, -(J ^ 2), J], [36, 58, 1, 1], [19, 34, 36, 48, 58, 60, 61, J ^ 2, J ^ 2, 1, -(J ^ 2), -J - 2 * J ^ 2, -J, -1], [23, 34, 36, 38, 42, 48, 57, 58, 59, 60, 61, J ^ 2, -J, J ^ 2, J - J ^ 2, J ^ 2, 2 * J ^ 2, 1, -1, 1, -J + J ^ 2, -2J + J ^ 2], [19, 42, 48, 56, 58, 60, 61, J ^ 2, -J, 1, J ^ 2, 1, -J, -(J ^ 2)], [31, 34, 42, 43, 60, 61, 1, -1, J, -1, -1, -1], [18, 19, 22, 38, 58, 61, -J, 1, J, -J, J, J ^ 2], [21, 36, 38, 42, 48, 60, 61, -J, 1, 1, -1, J ^ 2, J ^ 2, J ^ 2], [13, 19, 34, 38, 39, 48, 57, 58, 60, 61, 1, -1, J ^ 2, -(J ^ 2), 1, J ^ 2, 1, 1, J ^ 2, J ^ 2], [8, 19, 34, 42, 48, 58, 61, J, J, J, 1, -2J - J ^ 2, -J, -(J ^ 2)], [48, J], [19, 34, 36, 38, 39, 42, 48, 49, 58, 60, 61, J, J ^ 2, 1, -(J ^ 2), 1, -J, 1, J, 1, -J, 1], [34, 38, 39, 48, 50, 58, 61, J, -J, J ^ 2, -J, J, 1, -1], [19, 39, 42, 48, 57, 60, 61, -(J ^ 2), -(J ^ 2), -J, 2, J, 1, 2], [39, 48, 53, 58, J, J, -J, J], [20, 36, 48, 57, 58, 61, -(J ^ 2), 1, J, J ^ 2, 1, J], [19, 36, 42, 48, 54, 58, 60, 61, J ^ 2, J, -(J ^ 2), -(J ^ 2), J, J - J ^ 2, -(J ^ 2), -1], [19, 39, 48, 58, 60, 61, -1, J, -J, 1, J ^ 2, J], [19, 36, 39, 42, 60, 61, J ^ 2, 1, J ^ 2, -1, -J, J ^ 2], [19, 23, 34, 38, 42, 58, 60, 61, -(J ^ 2), -J, 1, J, -J, -1, 1, -2J - J ^ 2], [39, 40, 48, 61, -1, 1, -1, J], [19, 23, 34, 38, 41, 42, 48, 57, 59, 60, 61, 1, J, J, -J + J ^ 2, -1, J, 2J, J ^ 2, -1, 2J, 2J], [19, 39, 48, 60, -(J ^ 2), -(J ^ 2), J ^ 2, -1], [19, 34, 39, 58, 60, 61, -J, 1, J ^ 2, J, 1, J ^ 2], [19, 20, 38, 39, 42, 45, 48, 57, 58, 60, 61, -(J ^ 2), J, 1, -J, -1, J, -2, -J, -1, -1, 2 * J ^ 2], [18, 1], [34, 36, 38, 39, 42, 48, 57, 58, 60, 61, J, -1, -J, J ^ 2, J, -1, -J, -1, 2J + J ^ 2, -2]], [[32, 38, 49, 52, 57, 58, 60, 61, -1, -1, -J, 1, J, -J, 1, 2], [20, 25, 32, 43, 44, 45, 49, 58, 60, 61, J, J, -1, 1, J ^ 2, J, -J, -2J, 1, 2], [23, 25, 32, 38, 57, J, -J, 1, 1, J], [20, 25, 32, 38, 52, 57, 58, 61, J, J, -1, J, -1, -J, -J, 1], [38, 44, 48, 58, 60, 61, 63, -1, 1, -1, 1, -1, J, J], [32, 36, 38, 48, 57, 60, 61, 64, -1, J, J, 1, J, 1, 2, J], [25, 32, 58, 61, J, -1, J ^ 2, 1], [42, 43, 58, 61, -1, -1, -1, J ^ 2], [25, 31, 32, 38, 43, 44, 48, 49, 52, 57, 58, 61, -J, J, 1, J ^ 2, 1, -J, -1, -J, 1, J, 2, J], [16, 25, 32, 34, 38, 43, 44, 48, 52, 57, 58, 60, 61, 64, 1, J ^ 2, 1, 1, 1, 1, J ^ 2, -1, J ^ 2, 1, -2J - J ^ 2, J ^ 2, -2, 1], [39, 48, 49, 52, 57, 58, 61, -J, 1, J, -1, -J, J, -1], [25, 32, 38, 40, 48, 49, 52, 57, 58, 61, J, -1, J, 1, J, -1, J ^ 2, 1, J ^ 2, 1], [25, 32, 43, 44, 57, 58, 61, J, -1, -J, -1, -J, J ^ 2, 1], [44, J ^ 2], [19, 38, 49, 52, 57, 60, 61, -J, J ^ 2, -J, 1, J, 1, 1], [16, 32, 38, 43, 44, 48, 49, 58, 60, 61, 64, J, -1, J, J, 1, 1, J, J - J ^ 2, 1, -J, J], [25, 38, 43, 44, 46, 52, 56, 57, 58, 60, 61, 64, J, 1, J ^ 2, 2J + J ^ 2, J, J ^ 2, 1, 1, J + 2 * J ^ 2, -J, -J + J ^ 2, 1], [18, J ^ 2], [25, 32, 44, 55, 58, 60, 61, J, -1, -1, J, J ^ 2, 1, 1], [43, 44, 50, 57, 58, J, 1, J, J, -(J ^ 2)], [38, 43, J, -1], [22, J ^ 2], [26, 38, 43, 44, 52, 58, 60, 61, J, J ^ 2, -J, -1, 1, J ^ 2, 1, 1], [24, 32, 43, 44, 48, 53, 58, 60, 61, 62, -1, -1, -J, -1, 1, J ^ 2, J ^ 2, 1, -2J - J ^ 2, 1], [25, 32, 44, 48, 58, 60, 61, J, -1, -1, 1, J + 2 * J ^ 2, 1, 2], [27, 32, 38, 43, 58, 61, 64, J, -1, J, -J, -J, 1, J], [23, 38, 48, 49, 52, 58, J, 1, 1, J, -1, -1], [25, 32, 43, 44, 52, 57, 58, 61, -J, 1, J, 1, 1, J, J - J ^ 2, -1], [5, 32, 38, 61, J, 1, -J, J], [8, 43, 44, 50, 57, 58, 61, 1, J - J ^ 2, 1, J, J, -2 * J ^ 2, J], [21, 33, 43, 44, 58, 60, 61, J ^ 2, J, 1, -J, 1, -1, J], [38, 44, 48, 58, 60, -(J ^ 2), -J, J, -J, J], [9, 25, 38, 43, 44, 52, 57, 58, 61, 64, J, J, 1, -(J ^ 2), J ^ 2, -1, -J, -J, J, -J], [10, 16, 25, 34, 52, 57, 58, 60, 61, 64, -1, J ^ 2, J, -1, J, J ^ 2, J ^ 2, -1, J, J ^ 2], [35, 43, 44, 49, 58, 61, 64, J, 1, J ^ 2, -1, J ^ 2, J, -1], [58, J], [48, 52, 1, -1], [38, J ^ 2], [32, 51, 60, 61, 64, 1, -J, -1, -1, -J], [12, 25, 32, 38, 40, 52, 57, 58, 60, 61, 64, -1, 1, -J - 2 * J ^ 2, 1, -1, J, J ^ 2, -1, -1, J + 2 * J ^ 2, J ^ 2], [25, 32, 38, 43, 44, 48, 49, 52, 54, 57, 58, 59, 61, 64, J, -1, -(J ^ 2), -(J ^ 2), -J, J ^ 2, 1, J, 1, 1, 2, -J, -J, -(J ^ 2)], [20, 30, 43, 58, 61, 1, -1, J, J, -1], [21, 38, 43, J ^ 2, -J, -J], [14, 44, -1, -J], [25, 32, 43, 44, 47, 58, 60, 61, -J, 1, 1, -J, -J, 1, -1, -1], [32, 38, 46, 48, 49, 58, 60, 61, 64, 1, 1, J, -1, 1, 1, -1, -1, 1], [2, 4, 25, 32, 38, 43, 44, 52, 57, 58, 61, 64, -J, J, -J, 1, J ^ 2, -1, -(J ^ 2), 1, J, J - J ^ 2, -1, J], [1, 52, 57, 58, 64, -(J ^ 2), J, J ^ 2, J ^ 2, J ^ 2], [1, 6, 32, 38, 43, 44, 52, 60, 61, 64, J, -J, 1, 1, J, 1, -1, -1, -1, -J], [4, 25, 32, 38, 52, 58, 61, J, -J, 1, J ^ 2, 1, -(J ^ 2), -1], [11, 37, 43, 44, 48, 49, 57, 58, 64, J, -J, J, 1, 1, J, J, 2J, J], [13, 25, 32, 52, 57, 58, J ^ 2, -(J ^ 2), J, J, J ^ 2, J ^ 2], [32, 48, 49, 53, 58, 60, 61, 64, 1, -1, J ^ 2, J, J ^ 2, -1, -1, J ^ 2], [25, 32, 41, 43, 44, 52, 54, 57, 58, 59, 60, 61, 64, 1, J - J ^ 2, -1, J ^ 2, J, 1, -1, J ^ 2, -1, -1, -J, -J + J ^ 2, 1], [15, 25, 32, 52, 57, 58, 61, 64, -J, -J, 1, 1, J, -(J ^ 2), -1, J], [17, 25, 43, 46, 52, 56, 57, 60, 64, -1, 1, 1, 1, J, -1, J ^ 2, -1, J ^ 2], [25, 28, 32, 38, 43, 44, 52, 61, J, J, -1, J, J, 1, -1, 1], [36, 58, -J, -J], [38, 43, 44, 49, 58, 59, 61, 64, J ^ 2, -J, -1, J ^ 2, 2 * J ^ 2, J, -(J ^ 2), J ^ 2], [3, 25, 27, 44, 52, 57, 58, 64, J ^ 2, J ^ 2, -(J ^ 2), -J, -J, -(J ^ 2), 1, -(J ^ 2)], [7, 25, 32, 38, 61, J ^ 2, -(J ^ 2), J, J, -J], [24, 43, 44, 49, 53, 58, 61, 64, -1, 1, J ^ 2, -J, -1, -2J, 1, -J], [29, 61, J, J], [32, 37, 38, 43, 44, 49, 52, 58, 60, 61, -1, J, J ^ 2, -J, -1, -J, 1, -J, 1, 1]]])
            elseif i == 93
                r = J ^ 2 * f(91)
            elseif i == 94
                r = J * f(91)
            elseif i == 95
                r = J * f(92)
            elseif i == 96
                r = J ^ 2 * f(92)
            elseif i == 97
                r = map((x->begin
                                map((y->begin
                                            expand(y, 80)
                                        end), x)
                            end), [[[29, J], [1, -J], [3, J], [32, -J], [19, -J], [3, 6, 7, 8, 12, 16, 19, 29, 30, 31, 33, 34, 35, 36, 38, 39, 42, 43, 50, 71, J ^ 2, -J, J, 1, J, -J, -1, J, J ^ 2, J, J, J, J, -(J ^ 2), J, -J, -J, J, -J, J], [49, J], [35, J ^ 2], [9, J], [10, J], [11, J], [3, 6, 8, 19, 34, 36, 39, 40, 42, 43, 71, J ^ 2, -J, 1, -1, J, -(J ^ 2), -J, J ^ 2, -J, J, J], [3, 4, 7, 9, 10, 13, 15, 18, 21, 25, 27, 30, 32, 34, 37, 40, 42, 43, 46, 50, 51, 53, 59, 61, 63, 64, 66, 75, 78, -J, -1, -1, -1, 1, 1, -(J ^ 2), 1, J, J, -(J ^ 2), -J, -J, J ^ 2, 1, 1, 1, J ^ 2, 1, 1, -J, J ^ 2, 1, 1, -J, -1, J, 1, -J], [14, J], [15, J], [2, 19, 37, 38, 47, 52, 1, J, J, -J, J, 1], [17, J], [14, 18, 36, 46, 61, 75, -(J ^ 2), -J, J ^ 2, J ^ 2, J ^ 2, J ^ 2], [31, -(J ^ 2)], [33, J], [21, J], [3, 6, 7, 8, 12, 16, 18, 19, 22, 29, 30, 31, 33, 34, 35, 38, 39, 42, 43, 46, 50, 61, 71, 75, J, J, 1, J ^ 2, 1, -1, -1, -(J ^ 2), 1, 1, J, 1, 1, 1, 1, 1, -1, -1, 1, J, -1, -1, 1, -1], [8, 15, 23, 25, 27, 35, 37, 64, J, -1, 1, 1, J ^ 2, -1, -1, 1], [3, 5, 19, 24, 25, 31, 36, 39, 46, 69, 74, 78, 1, 1, -1, -J, J, J, J, J ^ 2, -1, J ^ 2, -(J ^ 2), 1], [25, J], [27, 1], [37, 64, J, -J], [1, 2, 3, 10, 15, 16, 19, 20, 28, 37, 38, 41, 44, 47, 63, 71, 78, 1, J ^ 2, -1, -1, 1, 1, 1, 1, -J, 1, -1, -(J ^ 2), J ^ 2, 1, -(J ^ 2), -1, J ^ 2], [2, -J], [1, 2, 3, 11, 15, 25, 26, 27, 29, 30, 34, 37, 64, 75, -1, 1, -J, J ^ 2, -(J ^ 2), -1, -1, -(J ^ 2), -1, -J, -1, -(J ^ 2), J ^ 2, 1], [5, 1], [1, 2, 3, 4, 9, 15, 25, 26, 27, 29, 32, 37, 64, 78, 1, -1, -1, J, J, -J, -(J ^ 2), -(J ^ 2), -J, 1, -J, -J, J, J ^ 2], [37, -(J ^ 2)], [30, J ^ 2], [8, 15, 20, 21, 25, 26, 27, 33, 35, 37, 39, 64, 75, -1, -J, J ^ 2, -(J ^ 2), -(J ^ 2), -(J ^ 2), -J, J ^ 2, -J, J ^ 2, J, J, J ^ 2], [36, J], [20, -1], [38, 52, -J, 1], [39, J], [42, -1], [28, 1], [3, 36, 39, 40, 42, J ^ 2, -(J ^ 2), -J, J ^ 2, -J], [50, -J], [51, -1], [1, 5, 9, 10, 11, 16, 20, 29, 31, 33, 36, 38, 44, 45, 46, 47, 48, 59, 63, 71, -J, 1, J, J, J ^ 2, 1, -J, J ^ 2, J, J ^ 2, J, -1, J ^ 2, -J, -1, 1, -(J ^ 2), J, -(J ^ 2), -1], [46, J], [1, 20, 31, 44, 63, 71, -(J ^ 2), -(J ^ 2), J ^ 2, 1, -1, -J], [45, 1], [44, 63, 1, -1], [11, 17, 21, 43, 50, 1, -J, -(J ^ 2), J, -J], [7, 10, 14, 17, 25, 39, 49, 51, 59, 63, -1, -J, -J, -1, -(J ^ 2), -1, -1, -J, -J, J ^ 2], [38, -(J ^ 2)], [66, -(J ^ 2)], [7, 10, 14, 39, 44, 49, 51, 54, 57, 62, -(J ^ 2), J ^ 2, J ^ 2, J, J ^ 2, 1, J ^ 2, 1, -1, -J], [9, 46, 53, 55, 66, J, J ^ 2, J, 1, 1], [11, 21, 43, 50, 56, 1, J, -1, -J, 1], [7, 14, 25, 39, 44, 49, 57, 59, 62, 63, J, 1, 1, -1, 1, J, -J, -1, 1, -1], [65, 68, -J, -(J ^ 2)], [59, J], [1, 2, 4, 9, 11, 15, 25, 26, 27, 30, 32, 34, 37, 60, 64, 75, J, 1, J, -(J ^ 2), -1, 1, J, J, 1, J ^ 2, J ^ 2, -1, 1, 1, -1, 1], [18, -1], [57, -(J ^ 2)], [7, 51, -(J ^ 2), -1], [20, 26, -1, -(J ^ 2)], [3, 4, 6, 8, 12, 19, 22, 23, 34, 36, 39, 40, 42, 71, 76, 80, -1, -(J ^ 2), -J, 1, -1, -1, J ^ 2, J ^ 2, J, 1, J ^ 2, -1, J ^ 2, 1, J ^ 2, -1], [9, 10, 46, 53, 66, 1, -1, -1, 1, -J], [68, J ^ 2], [3, 8, 19, 34, 36, 39, 40, 42, 43, 71, 72, -1, -J, J, 1, 1, J ^ 2, -1, J ^ 2, 1, 1, 1], [36, 39, 40, 42, 69, -1, 1, 1, 1, 1], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 17, 19, 20, 22, 23, 25, 27, 30, 32, 33, 34, 35, 39, 43, 49, 50, 51, 56, 59, 60, 63, 65, 66, 68, 73, 77, 78, 79, -1, -(J ^ 2), J ^ 2, J, -J, 1, -(J ^ 2), J, J, -1, -1, J, 2, J ^ 2, -1, -1, -1, J ^ 2, 1, -(ER(-3)), J ^ 2, J ^ 2, -2, J ^ 2, (3 + ER(-3)) // 2, (-3 - ER(-3)) // 2, 1, 1, J, J, J, -(J ^ 2), -(J ^ 2), J, J ^ 2, -J, J, -J, -1, -1], [7, 16, 29, 33, 38, J, -J, J, J, J], [7, 16, 29, 30, 31, 33, 35, 38, 40, 50, 67, -J, J, -J, -(J ^ 2), 1, -J, 1, -J, -J, J, J], [2, 7, 9, 11, 14, 15, 16, 17, 19, 21, 29, 33, 37, 38, 43, 47, 49, 50, 56, 71, 73, 77, -J, -1, 1, J ^ 2, 1, 1, 1, -1, 1, 1, -1, -1, -(J ^ 2), -1, -(J ^ 2), 1, -1, -1, -J, -1, -J, J], [24, 36, 39, 40, 42, 69, 1, -1, 1, 1, 1, 1], [75, J], [3, 4, 9, 18, 20, 27, 31, 33, 35, 40, 42, 51, 53, 60, 61, 67, 70, 71, 73, 75, 1, 1, 1, -(J ^ 2), 1, -1, -1, -(J ^ 2), J, -(J ^ 2), -(J ^ 2), 1, 1, J ^ 2, -(J ^ 2), J ^ 2, 1, J ^ 2, 1, 1], [56, 73, 1, -J], [78, J], [80, -J], [4, 7, 9, 15, 16, 18, 19, 20, 22, 23, 25, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 43, 46, 51, 53, 58, 60, 61, 64, 67, 70, 73, J ^ 2, J, J ^ 2, -(J ^ 2), -J, 1, 1, J ^ 2, J ^ 2, J ^ 2, J ^ 2, ER(-3), J, 1, 1, -J, 1, -J, -(J ^ 2), J, J, -(J ^ 2), -J, 1, J ^ 2, J ^ 2, J ^ 2, J, 1, J ^ 2, -1, J ^ 2, J ^ 2]], [[30, J ^ 2], [11, 1], [1, 1], [4, J], [38, 1], [6, J], [5, 16, 29, 33, 38, 1, 1, J ^ 2, J ^ 2, -1], [8, J], [1, 2, 4, 9, 11, 29, 30, 32, 34, 75, 78, -1, 1, 1, 1, -1, -1, J ^ 2, -1, J, -J, J], [70, J], [1, 2, 3, 11, 15, 25, 26, 27, 29, 30, 34, 37, 64, 75, J ^ 2, -(J ^ 2), 1, -J, J, J ^ 2, J ^ 2, J, J ^ 2, 1, J ^ 2, J, -J, -(J ^ 2)], [19, -1], [13, 28, -J, J], [6, 14, 18, 22, 36, 46, 61, -1, 1, J ^ 2, J, J ^ 2, J ^ 2, J ^ 2], [8, 15, 23, 25, 26, 27, J ^ 2, 1, J, -1, -1, 1], [7, 1], [1, 2, 3, 5, 8, 12, 15, 17, 19, 20, 25, 26, 27, 29, 30, 33, 34, 35, 37, 39, 42, 43, 47, 49, 50, 64, 75, J, 1, J ^ 2, -1, 1, J, -(J ^ 2), -J, J, -(J ^ 2), -1, -1, -(J ^ 2), J, J ^ 2, -(J ^ 2), J, J, -(J ^ 2), -J, -J, J, J, -J, -J, J ^ 2, 1], [18, J], [43, -(J ^ 2)], [35, -1], [8, 15, 20, 21, 25, 26, 27, 33, 35, 37, 39, 64, 75, -(J ^ 2), -1, J, -J, -J, -J, -1, J, -1, J, 1, 1, J], [22, J], [23, J], [44, 1], [26, -1], [8, 15, 23, 25, 27, 37, 64, -J, 1, -1, -1, -(J ^ 2), 1, -1], [27, J], [13, -J], [29, J], [3, J], [31, 40, -J, J ^ 2], [78, J], [33, J], [34, J], [39, -J], [1, 20, 31, 52, 71, 1, -J, -1, 1, -1], [21, 1], [7, 16, 29, 33, 38, 1, -1, 1, 1, 1], [20, J ^ 2], [31, -1], [1, 3, 9, 10, 18, 35, 40, 41, 42, 44, 46, 51, 53, 60, 61, 63, 66, 67, 70, 73, 75, J ^ 2, -(J ^ 2), 1, J, J, -1, J, 1, J, -1, J, -(J ^ 2), 1, -J, J, 1, J ^ 2, -J, -(J ^ 2), -(J ^ 2), -(J ^ 2)], [52, -J], [12, J], [4, 7, 9, 15, 16, 18, 19, 20, 22, 23, 25, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 43, 46, 51, 53, 58, 60, 61, 64, 67, 70, 73, 1, J ^ 2, 1, -1, -(J ^ 2), J, J, 1, 1, 1, 1, (-3 - ER(-3)) // 2, J ^ 2, J, J, -(J ^ 2), J, -(J ^ 2), -1, J ^ 2, J ^ 2, -1, -(J ^ 2), J, 1, 1, 1, J ^ 2, J, 1, -J, 1, 1], [55, 1], [1, 20, 31, 52, 61, 71, -1, J, 1, -1, -1, 1], [56, J ^ 2], [2, 3, 4, 7, 9, 11, 15, 16, 18, 19, 20, 23, 25, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 43, 44, 46, 48, 51, 53, 58, 60, 61, 64, 67, 70, 73, 78, J ^ 2, 1, (3 - ER(-3)) // 2, J ^ 2, (3 - ER(-3)) // 2, -(J ^ 2), -1, -(J ^ 2), J, J, 1, 1, 1, (-3 - ER(-3)) // 2, -1, ER(-3), ER(-3), (3 + ER(-3)) // 2, J, -(J ^ 2), -1, J ^ 2, J ^ 2, -1, -(J ^ 2), -1, J, 1, 1, 1, 1, 2 * J ^ 2, J, 1, -J, 1, 1, 1], [11, 17, 43, 50, 56, J ^ 2, J, 1, J, J ^ 2], [5, 42, 1, J], [53, J], [7, 16, 29, 33, 38, 50, J, -J, J, J, J, -J], [2, 3, 4, 7, 9, 11, 16, 18, 27, 30, 32, 34, 38, 42, 50, 51, 52, 53, 60, 78, -1, -J, J ^ 2, -1, J ^ 2, 1, 1, 1, J, 1, 1, -J, -1, 1, 1, -J, -1, -J, -1, -J], [6, 22, 27, 33, 47, 54, 56, 66, 73, J ^ 2, J, J ^ 2, -1, 1, 1, -(J ^ 2), -1, 1], [45, 55, -(J ^ 2), -J], [1, 3, 8, 11, 12, 17, 19, 20, 29, 30, 33, 34, 35, 39, 43, 47, 49, 50, 68, J, J ^ 2, -(J ^ 2), J, J, 1, -1, J, J, J ^ 2, J, J, -1, 1, -1, -1, 1, 1, -J], [7, 10, 14, 17, 25, 39, 44, 49, 51, 54, 57, 62, 63, ER(-3), -J, -(ER(-3)), J, -J, J, -J, -(J ^ 2), J ^ 2, -(J ^ 2), J ^ 2, -J, -1], [74, -J], [1, 2, 4, 7, 9, 14, 16, 17, 19, 20, 23, 25, 26, 27, 29, 30, 32, 33, 34, 35, 38, 39, 43, 47, 49, 50, 51, 58, 60, 71, 73, 75, 77, -1, -(J ^ 2), J, (3 + ER(-3)) // 2, J, -1, -1, 1, -1, J, J, -1, -1, 1, 1, J ^ 2, J ^ 2, -(J ^ 2), -1, -1, 1, 1, -1, -1, 1, -J, J, J, 1, 1, J, -(J ^ 2), -J], [9, J ^ 2], [6, 18, 22, 36, 46, 61, 75, -1, -J, J, J ^ 2, J ^ 2, -J, -J], [1, 2, 4, 5, 7, 9, 10, 11, 15, 16, 18, 20, 23, 25, 27, 30, 32, 33, 34, 37, 38, 40, 43, 44, 46, 53, 58, 60, 61, 62, 63, 64, 66, 67, 71, 75, J, 1, J, -J, -(J ^ 2), J, 1, -1, 1, J ^ 2, 1, J, J, J, 1, J ^ 2, J ^ 2, J, -1, 1, -(J ^ 2), 1, J ^ 2, 1, 1, -1, J, 1, 1, 1, J ^ 2, -1, J, J, -J, 1], [3, 4, 6, 7, 8, 9, 12, 15, 16, 18, 20, 22, 23, 25, 27, 29, 30, 32, 33, 36, 37, 38, 42, 46, 50, 51, 53, 58, 60, 61, 64, 70, 71, 73, 1, 1, -(J ^ 2), -(ER(-3)), J, 1, J ^ 2, -1, ER(-3), J, 1, 1, 1, 1, (-3 - ER(-3)) // 2, -(ER(-3)), -(J ^ 2), J, -J, J, -1, -(ER(-3)), -(J ^ 2), J, J, 1, 1, 1, J ^ 2, J, 1, 1, J ^ 2, 1], [15, 21, 1, 1], [7, 10, 14, 17, 25, 39, 51, 59, 63, 1, J, J, 1, J ^ 2, 1, J, J, -(J ^ 2)], [73, 1], [69, -1], [49, -1], [1, 20, 44, 52, 63, 71, 1, 1, J ^ 2, -(J ^ 2), -(J ^ 2), -1], [3, 5, 6, 7, 8, 12, 16, 18, 22, 24, 25, 29, 30, 33, 34, 35, 36, 38, 39, 42, 43, 46, 50, 51, 60, 61, 69, 71, 74, 75, 78, 79, ER(-3), -(J ^ 2), J, 1, J ^ 2, 1, -1, -1, 1, 1, -1, 1, J, 1, 1, 1, -1, 1, J ^ 2, -1, 1, -1, -1, J, 1, -1, -J, 1, J, -1, -(J ^ 2), 1], [3, 6, 8, 12, 19, 34, 36, 39, 40, 42, 43, 71, -(J ^ 2), J, -1, -J, 1, -J, J ^ 2, J, -(J ^ 2), J, -J, -J], [3, 8, 19, 34, 36, 39, 40, 42, 43, 71, 72, -1, -J, J, 1, 1, J ^ 2, -1, J ^ 2, 1, 1, 1], [79, -1], [2, 4, 9, 10, 11, 15, 25, 27, 30, 32, 34, 37, 38, 40, 43, 46, 52, 53, 60, 61, 63, 64, 66, 75, J, J ^ 2, J ^ 2, J, -J, J, J ^ 2, J, 1, 1, -J, J, J, J, 1, J, J, -J, J, J, -(J ^ 2), -J, J ^ 2, J], [75, J], [3, 4, 6, 8, 12, 19, 22, 23, 34, 36, 39, 40, 42, 43, 71, 72, 76, 80, -J, J, 1, ER(-3), J ^ 2, -(ER(-3)), -J, -J, -2, J, 1, -J, 1, -1, J, -1, -J, J ^ 2], [65, -J], [1, 2, 4, 9, 11, 15, 25, 26, 27, 30, 32, 34, 37, 60, 64, 75, -1, 1, J, -(J ^ 2), -1, 1, J, J, 1, J ^ 2, J ^ 2, -1, 1, 1, -1, 1], [66, -1], [72, 76, J, -1]], [[1, J], [2, J], [9, J], [1, 2, 4, 9, 11, 29, 30, 32, 34, 75, 78, -1, 1, 1, 1, -1, -1, J ^ 2, -1, J, -J, J], [5, 16, 29, 33, 38, 1, 1, J ^ 2, J ^ 2, -1], [24, 36, 39, 40, 42, 69, 1, -1, 1, 1, 1, 1], [7, J], [1, 2, 3, 10, 15, 16, 19, 20, 28, 37, 38, 41, 44, 47, 63, 71, 78, -1, -(J ^ 2), 1, 1, -1, -1, -1, -1, J, -1, 1, J ^ 2, -(J ^ 2), -1, J ^ 2, 1, -(J ^ 2)], [75, J], [14, J], [15, 25, 26, 27, 37, 64, 1, J, J, 1, 1, -1], [5, 16, 28, 29, 32, 33, 38, 53, 64, 74, J ^ 2, J ^ 2, -1, J, -(J ^ 2), J, -(J ^ 2), -(J ^ 2), J ^ 2, -J], [11, 21, 43, 50, 56, J, J ^ 2, -J, -(J ^ 2), J], [39, 1], [15, 21, -J, -J], [7, 16, 29, 33, 38, J, -J, J, J, J], [25, 1], [42, J], [47, -1], [1, 20, 44, 52, 63, 71, -J, -J, -1, 1, 1, J], [15, J], [24, J ^ 2], [1, 2, 3, 4, 7, 9, 10, 13, 16, 18, 19, 20, 21, 25, 27, 28, 30, 32, 34, 37, 38, 40, 41, 42, 43, 44, 46, 47, 50, 51, 53, 59, 61, 63, 64, 66, 71, 75, J, 1, J ^ 2, -(J ^ 2), -(J ^ 2), -(J ^ 2), -(ER(-3)), J ^ 2, J, J ^ 2, J, J, 1, 1, -J, -(J ^ 2), -1, -1, J, -1, -J, J ^ 2, -1, J ^ 2, J, 1, J ^ 2, J, J ^ 2, -1, J, J ^ 2, J ^ 2, -2, -(J ^ 2), 1, -J, J ^ 2], [48, J], [59, 1], [2, 4, 9, 10, 11, 15, 25, 27, 30, 32, 34, 37, 38, 40, 43, 46, 52, 53, 60, 61, 63, 64, 66, 75, 1, J, J, 1, -1, 1, J, 1, J ^ 2, J ^ 2, -1, 1, 1, 1, J ^ 2, 1, 1, -1, 1, 1, -J, -1, J, 1], [2, 3, 4, 7, 9, 11, 18, 27, 30, 32, 34, 38, 42, 50, 51, 52, 53, 60, 78, 1, J, -(J ^ 2), 1, -(J ^ 2), -1, -1, -J, -1, -1, J, 1, -1, -1, J, 1, J, 1, J], [2, 7, 9, 11, 14, 15, 16, 17, 19, 21, 29, 33, 37, 38, 43, 47, 49, 50, 56, 71, 73, 77, J, 1, -1, -(J ^ 2), -1, -1, -1, 1, -1, -1, 1, 1, J ^ 2, 1, J ^ 2, -1, 1, 1, J, 1, J, -J], [29, J], [4, J], [1, 20, 31, 44, 63, 71, -1, -1, 1, J, -J, -(J ^ 2)], [4, 34, 1, J], [16, -J], [1, 2, 3, 4, 9, 15, 25, 26, 27, 29, 32, 37, 64, 78, -J, J, J, -(J ^ 2), -(J ^ 2), J ^ 2, 1, 1, J ^ 2, -J, J ^ 2, J ^ 2, -(J ^ 2), -1], [41, -J], [46, J], [2, 19, 37, 38, 47, 52, J ^ 2, 1, 1, -1, 1, J ^ 2], [38, J], [10, J ^ 2], [9, 10, 46, 53, 66, -J, J, J, -J, J ^ 2], [73, -1], [53, -(J ^ 2)], [26, -1], [44, J], [3, 6, 7, 8, 12, 16, 18, 19, 22, 29, 30, 31, 33, 34, 35, 38, 39, 42, 43, 46, 50, 61, 71, 75, J, J, 1, J ^ 2, 1, -1, -1, -(J ^ 2), 1, 1, J, 1, 1, 1, 1, 1, -1, -1, 1, J, -1, -1, 1, -1], [36, 46, -J, -J], [2, 19, 38, 47, 49, 52, -1, J ^ 2, -(J ^ 2), -J, J, J], [22, 1], [49, J], [27, J ^ 2], [51, J], [52, J], [18, -1], [57, -J], [6, 18, 22, 36, 46, 61, 75, 1, J, -J, -(J ^ 2), -(J ^ 2), J, J], [8, 15, 23, 25, 27, 37, 64, J, -1, 1, 1, J ^ 2, -1, 1], [7, 10, 14, 39, 44, 49, 51, 54, 57, -1, 1, 1, J ^ 2, 1, J, 1, J, -J], [1, 2, 4, 7, 9, 11, 13, 15, 20, 21, 23, 27, 28, 30, 32, 33, 34, 35, 39, 51, 58, 60, 64, 1, -1, -J, J ^ 2, J ^ 2, 1, -(J ^ 2), -1, 1, -1, 1, -1, J ^ 2, -(J ^ 2), -(J ^ 2), 1, 1, -(J ^ 2), J ^ 2, -J, 1, -1, -J], [17, 1], [60, J], [40, J], [7, 14, 25, 39, 44, 49, 54, 57, 59, 62, 63, J, 1, 1, -1, 1, J, -1, -J, -1, 1, -1], [63, J], [3, 7, 10, 11, 18, 19, 21, 25, 37, 38, 40, 42, 43, 46, 47, 50, 51, 59, 60, 61, 63, 64, 66, 75, J, 1, J, J ^ 2, -1, 1, -J, J ^ 2, -(J ^ 2), J, J, -1, 1, J, 1, -1, J, J, -(J ^ 2), J, -(J ^ 2), -J, J ^ 2, J], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 27, 30, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 46, 50, 51, 53, 60, 61, 63, 64, 65, 66, 68, 75, 78, 79, -J, -1, 2 + ER(-3), -(ER(-3)), -(J ^ 2), J ^ 2, -1, -(ER(-3)), J, 1, -J, J, J ^ 2, -1, -1, ER(-3), 1, -J, J ^ 2, -J, 1, (-3 + ER(-3)) // 2, 2 + ER(-3), (3 + ER(-3)) // 2, 1, 2 - ER(-3), J, (-3 + ER(-3)) // 2, ER(-3), 1, ER(-3), (3 - ER(-3)) // 2, -1, ER(-3), J, 1, (3 - ER(-3)) // 2, J ^ 2, ER(-3), 1, -J, -J, J ^ 2, J, ER(-3), 1, -J], [14, 18, 36, 46, 61, 75, -1, -(J ^ 2), 1, 1, 1, 1], [1, 3, 9, 10, 18, 35, 40, 41, 42, 44, 46, 51, 53, 60, 61, 63, 66, 67, 70, 73, 75, J ^ 2, -(J ^ 2), 1, J, J, -1, J, 1, J, -1, J, -(J ^ 2), 1, -J, J, 1, J ^ 2, -J, -(J ^ 2), -(J ^ 2), -(J ^ 2)], [2, 3, 4, 6, 8, 9, 11, 12, 14, 15, 16, 18, 19, 22, 23, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 42, 43, 46, 47, 49, 53, 61, 65, 71, 75, 78, 79, J, -(J ^ 2), J ^ 2, J, -1, J ^ 2, 1, 1, J ^ 2, -1, -1, J, J, 1, 1, -1, J, -(J ^ 2), -(J ^ 2), 1, -(J ^ 2), (3 - ER(-3)) // 2, -1, 1, -1, J, J, 1, J, -1, 1, 1, J, -J, 1, J, 1, 1], [9, 46, 53, 55, 66, J, J ^ 2, J, 1, 1], [67, 1], [20, -J], [76, -1], [35, J ^ 2], [1, 5, 9, 10, 11, 16, 20, 29, 31, 33, 36, 38, 44, 45, 46, 47, 48, 53, 55, 59, 63, 66, 71, -(J ^ 2), J, -1, J ^ 2, 1, J, -(J ^ 2), 1, J ^ 2, 1, J ^ 2, -J, 1, -(J ^ 2), -(ER(-3)), J, -1, J, 1, J ^ 2, -1, 1, -J], [3, J], [72, 76, J ^ 2, -J], [23, 1], [11, J ^ 2], [3, 5, 6, 7, 8, 12, 16, 18, 22, 24, 25, 29, 30, 33, 34, 35, 36, 38, 39, 42, 43, 46, 50, 51, 60, 61, 69, 71, 74, 75, 78, 79, ER(-3), -(J ^ 2), J, 1, J ^ 2, 1, -1, -1, 1, 1, -1, 1, J, 1, 1, 1, -1, 1, J ^ 2, -1, 1, -1, -1, J, 1, -1, -J, 1, J, -1, -(J ^ 2), 1], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 18, 19, 20, 22, 25, 26, 27, 29, 32, 33, 34, 35, 36, 37, 42, 43, 46, 47, 50, 51, 59, 60, 61, 63, 64, 69, 74, 80, J, -1, -(J ^ 2), J, 1, J ^ 2, J, J, J ^ 2, 1, 1, -1, 1, -J, -(J ^ 2), -1, J, 1, 1, -J, -J, -J, 1, -1, 1, -1, 1, -1, 1, -1, J, J, -(J ^ 2), -1, -(J ^ 2), -1, -J, J, 1]], [[1, 20, 31, 52, 71, -J, J ^ 2, J, -J, J], [2, 19, 38, 47, 49, 52, 1, -(J ^ 2), J ^ 2, J, -J, -J], [36, -J], [22, -J], [5, J], [8, -1], [16, 1], [34, J ^ 2], [14, 17, J, 1], [10, 59, -J, -J], [17, -(J ^ 2)], [12, J], [55, -(J ^ 2)], [15, J], [9, 11, J, J ^ 2], [5, 16, 29, 33, 38, 1, 1, J ^ 2, J ^ 2, -1], [21, J ^ 2], [27, J ^ 2], [19, J], [1, -1], [11, -(J ^ 2)], [23, J], [4, -J], [69, 74, J, J ^ 2], [3, 78, 1, 1], [2, 4, 9, 11, 15, 25, 26, 27, 30, 32, 34, 37, 60, 64, 75, -1, -J, J ^ 2, 1, -1, -J, -J, -1, -(J ^ 2), -(J ^ 2), 1, -1, -1, 1, -1], [2, 3, 4, 9, 11, 30, 32, 34, 60, 78, -1, -J, J ^ 2, J ^ 2, 1, 1, 1, -J, -1, -J], [45, 1], [5, 7, 16, 33, 38, 1, J, -J, -1, -1], [3, 6, 7, 8, 12, 16, 19, 29, 30, 31, 33, 34, 35, 36, 38, 39, 42, 43, 50, 71, -J, 1, -1, -(J ^ 2), -1, 1, J ^ 2, -1, -J, -1, -1, -1, -1, J, -1, 1, 1, -1, 1, -1], [31, J], [3, 6, 7, 8, 12, 16, 18, 19, 22, 29, 30, 31, 33, 34, 35, 38, 39, 42, 43, 46, 50, 61, 71, 75, J, J, 1, J ^ 2, 1, -1, -1, -(J ^ 2), 1, 1, J, 1, 1, 1, 1, 1, -1, -1, 1, J, -1, -1, 1, -1], [29, -1], [6, -J], [30, J ^ 2], [39, 1], [2, -(J ^ 2)], [38, J], [3, -(J ^ 2)], [40, J], [48, 1], [42, J], [43, J], [1, 2, 4, 9, 10, 11, 15, 20, 25, 27, 30, 32, 34, 37, 38, 40, 43, 44, 46, 53, 60, 61, 63, 64, 66, 71, 75, J, 1, J, J, 1, -1, 1, J, J, 1, J ^ 2, J ^ 2, -1, 1, 1, 1, J ^ 2, 1, 1, -1, 1, 1, J ^ 2, -1, J, -J, 1], [57, J ^ 2], [25, 39, -(J ^ 2), -1], [49, 1], [62, -1], [2, 19, 37, 38, 47, 52, J ^ 2, 1, 1, -1, 1, J ^ 2], [50, J], [2, 3, 4, 7, 9, 11, 16, 18, 27, 30, 32, 34, 38, 42, 50, 51, 52, 53, 60, 78, -1, -J, J ^ 2, -1, J ^ 2, 1, -(J ^ 2), 1, J, 1, 1, -J, -1, 1, 1, -J, -1, -J, -1, -J], [52, J], [7, 51, 1, J], [1, 2, 3, 4, 7, 9, 10, 13, 15, 16, 18, 19, 20, 21, 25, 27, 28, 30, 32, 34, 38, 40, 41, 42, 43, 44, 46, 47, 50, 51, 53, 59, 61, 63, 64, 66, 71, 75, 78, -1, -(J ^ 2), (3 - ER(-3)) // 2, -1, -1, -1, 2, 1, J, -1, 1, -1, -1, J, J, -(J ^ 2), J, -J, -J, J ^ 2, 1, 1, J ^ 2, 1, J ^ 2, -(J ^ 2), 1, -1, 1, -J, J ^ 2, 1, 1, -(ER(-3)), -1, J, 1, 1, 1], [7, 10, 14, 17, 25, 39, 44, 49, 51, 54, 57, 62, 63, (3 - ER(-3)) // 2, -1, (-3 + ER(-3)) // 2, 1, -1, 1, -1, -J, J, -J, J, -1, -(J ^ 2)], [11, 17, 43, 50, 56, 1, J ^ 2, J, J ^ 2, 1], [28, J], [3, 4, 7, 9, 16, 18, 20, 27, 29, 30, 31, 38, 42, 50, 51, 53, 60, 61, 70, 71, 73, 75, J, J, 1, J, -1, -1, J, -J, 1, J, 1, 1, -1, -1, J, J, 1, -1, J, 1, J, J], [10, J], [2, 14, 18, 19, 36, 38, 46, 47, 49, 52, 61, 75, -1, 1, J ^ 2, J ^ 2, -1, -(J ^ 2), -1, -J, J, J, -1, -1], [26, -(J ^ 2)], [41, -1], [2, 4, 9, 10, 11, 15, 25, 27, 30, 32, 34, 37, 38, 40, 43, 46, 52, 53, 60, 61, 63, 64, 66, 75, 1, J, J, 1, -1, 1, J, 1, J ^ 2, J ^ 2, -1, 1, 1, 1, J ^ 2, 1, 1, -1, 1, 1, -J, -1, J, 1], [60, J ^ 2], [2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 18, 19, 22, 23, 27, 30, 32, 34, 37, 39, 40, 42, 43, 46, 47, 49, 61, 64, 65, 71, 75, 78, 79, J, -(J ^ 2), J ^ 2, 1, J, -1, J ^ 2, 1, 1, J ^ 2, -1, J, J, 1, 1, -1, -(J ^ 2), -(J ^ 2), (3 - ER(-3)) // 2, -1, -1, J, J, 1, J, -1, 1, J, -J, -J, 1, J, 1, 1], [7, 10, 14, 17, 25, 39, 51, 59, 63, J ^ 2, 1, 1, J ^ 2, J, J ^ 2, 1, 1, -J], [7, 16, 29, 30, 31, 33, 35, 38, 40, 50, 67, -1, 1, -1, -J, J ^ 2, -1, J ^ 2, -1, -1, 1, 1], [1, 2, 3, 5, 8, 17, 19, 20, 21, 29, 30, 33, 34, 35, 37, 39, 42, 43, 47, 49, 50, 68, J ^ 2, J, 1, 1, -1, -(J ^ 2), J ^ 2, J ^ 2, J, J ^ 2, 1, J ^ 2, J ^ 2, -J, J ^ 2, J, J, J ^ 2, J ^ 2, -(J ^ 2), -(J ^ 2), 1], [3, 39, 40, 42, 69, J ^ 2, 1, -J, -J, 1], [1, 2, 4, 7, 9, 14, 16, 17, 19, 20, 23, 25, 26, 27, 29, 30, 32, 33, 34, 35, 38, 39, 43, 47, 49, 50, 51, 58, 60, 70, 71, 73, 75, 77, 1, J ^ 2, -J, (-3 - ER(-3)) // 2, -J, 1, 1, -1, 1, -J, -J, 1, 1, -1, -1, -(J ^ 2), -(J ^ 2), J ^ 2, 1, 1, -1, -1, 1, 1, -1, J, -J, -J, -1, -J, -1, -J, J ^ 2, J], [71, J], [3, 6, 19, 34, 36, 39, 40, 42, 43, 71, 72, J, J, -(J ^ 2), 1, -J, -1, J, -1, -J, -J, 1], [77, -J], [3, 5, 19, 24, 25, 31, 36, 39, 46, 69, 74, 78, J ^ 2, J ^ 2, -(J ^ 2), -1, 1, 1, 1, J, -(J ^ 2), J, -J, J ^ 2], [15, 25, 26, 27, 37, 64, J, J ^ 2, J ^ 2, J, J, -J], [80, -(J ^ 2)], [2, 7, 9, 11, 14, 15, 16, 17, 19, 21, 29, 33, 37, 38, 43, 47, 49, 50, 71, 73, 77, J, 1, -1, 1, -1, -1, -1, 1, -1, J, 1, 1, J ^ 2, 1, -1, -1, 1, -J, 1, J, -J], [46, -J], [65, -(J ^ 2)], [3, 4, 6, 8, 12, 19, 22, 23, 34, 36, 39, 40, 42, 71, 76, 80, -J, -1, -(J ^ 2), J, -J, -J, 1, 1, J ^ 2, J, 1, -J, 1, J, 1, -J]]])
            elseif i == 98
                r = J * f(97)
            elseif i == 99
                r = J ^ 2 * f(97)
            elseif i == 100
                r = map((x->begin
                                map((y->begin
                                            expand(y, 81)
                                        end), x)
                            end), [[[2, 1], [1, 2, 13, 18, 24, 28, 34, 36, 51, 53, 64, 65, 76, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1], [6, 1], [7, 1], [8, 1], [14, 1], [4, 7, 9, 42, 43, 45, 50, 59, 60, 62, 63, 69, 70, 72, 74, 78, 80, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 8, 25, 35, 41, 44, 52, 58, 61, 68, 71, 73, 75, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1], [15, 1], [16, 1], [17, 1], [30, 35, 77, -1, -1, 1], [18, 1], [3, 1], [26, 1], [27, 1], [46, 72, 81, -1, -1, 1], [28, 1], [29, 1], [30, 1], [31, 1], [32, 1], [33, 1], [34, 1], [35, 1], [9, 1], [10, 1], [13, 1], [46, 1], [47, 1], [48, 1], [49, 1], [50, 1], [51, 1], [52, 1], [53, 1], [54, 1], [55, -1], [56, 1], [57, 1], [58, -1], [59, 1], [60, -1], [61, 1], [62, 1], [19, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [25, 1], [76, -1], [10, 16, 19, 27, 29, 37, 46, 54, 73, -1, -1, -1, -1, -1, -1, -1, -1, 1], [38, 55, 64, 1, -1, -1], [66, 1], [67, 1], [68, 1], [69, 1], [70, 1], [71, 1], [72, 1], [15, 23, 78, -1, -1, 1], [64, 1], [65, 1], [39, 1], [40, 1], [41, -1], [42, 1], [43, -1], [44, 1], [45, 1], [73, 1], [74, 1], [75, 1], [36, -1], [79, 1], [80, 1], [12, 20, 25, 1, 1, 1], [9, 50, 63, 1, 1, 1], [11, 19, 45, 1, 1, 1]], [[3, 1], [9, 1], [10, 1], [11, 1], [12, 1], [15, 1], [19, 1], [20, 1], [21, 1], [1, 1], [22, 1], [23, 1], [76, -1], [38, -1], [6, 15, 18, -1, -1, -1], [26, 1], [29, 1], [18, 1], [39, 1], [40, 1], [2, 1], [4, 1], [5, 1], [24, 1], [41, -1], [55, 1], [48, 1], [64, 1], [17, 29, 62, -1, -1, -1], [77, -1], [14, 26, 28, -1, -1, -1], [46, 1], [47, 1], [65, 1], [35, 1], [28, 1], [39, 48, 57, -1, -1, -1], [16, 31, 36, 1, 1, 1], [7, 1], [8, 1], [25, 35, 41, 44, 52, 58, 61, 68, 71, 73, 75, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1], [42, 1], [9, 42, 43, 45, 50, 59, 60, 62, 63, 69, 70, 72, 74, 78, 80, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [44, 1], [43, -1], [80, -1], [10, 19, 27, 29, 37, 54, 73, 1, 1, 1, 1, 1, 1, -1], [27, 48, 53, -1, -1, -1], [66, 1], [67, 1], [34, 1], [73, 1], [53, 1], [1, 17, 29, 33, 57, 58, 62, -1, 1, 1, 1, 1, 1, 1], [16, 1], [81, -1], [79, -1], [52, 1], [74, 1], [72, 1], [75, 1], [62, 1], [21, 56, 67, -1, -1, -1], [36, 1], [51, 1], [49, 66, 70, -1, -1, -1], [50, 67, 68, -1, -1, -1], [68, 1], [59, 1], [70, 1], [61, 1], [9, 50, 63, 78, 80, 1, 1, 1, 1, 1], [58, 1], [69, 1], [71, 1], [13, 18, 24, 28, 34, 36, 51, 53, 64, 65, 76, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1], [30, 35, 77, 1, 1, -1], [32, 56, 60, 1, 1, 1], [19, 27, 37, 1, 1, 1], [32, -1], [9, 50, 63, 1, 1, 1]], [[4, 1], [7, 1], [13, 1], [1, 4, 5, 6, 15, 16, 17, 18, 20, 29, 31, 32, 33, 34, 36, 37, 38, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 77, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1], [18, 1], [2, 7, 8, 14, 15, 22, 23, 26, 27, 28, 30, 38, 48, 49, 50, 51, 53, 54, 66, 67, 68, 69, 70, 71, 78, 79, 81, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1], [3, 1], [10, 16, 19, 27, 29, 37, 46, 54, 73, -1, -1, -1, -1, -1, -1, -1, -1, 1], [76, -1], [24, 1], [9, 1], [28, 1], [6, 1], [37, 1], [36, 1], [15, 1], [10, 1], [42, 1], [32, 47, 55, -1, -1, -1], [43, -1], [12, 1], [23, 1], [44, 1], [14, 1], [54, 1], [26, 1], [16, 1], [59, 1], [20, 38, 49, 55, 64, -1, -1, -1, 1, 1], [60, 1], [30, 35, 77, -1, -1, 1], [33, 1], [61, 1], [63, 1], [29, 1], [43, 59, 72, -1, 1, 1], [22, 1], [20, 1], [25, -1], [40, 1], [39, -1], [41, -1], [21, 1], [27, 1], [69, 1], [22, 30, 38, -1, -1, 1], [70, 1], [47, 52, 79, -1, -1, 1], [50, 1], [71, 1], [15, 23, 78, -1, -1, 1], [46, 1], [45, 60, 69, -1, -1, -1], [32, 1], [30, 1], [35, 1], [57, 1], [56, 1], [58, 1], [31, 1], [17, 1], [42, 43, 45, 59, 60, 62, 69, 70, 72, 1, -1, 1, 1, 1, 1, 1, 1, 1], [74, 1], [49, 1], [47, 1], [52, 1], [67, 1], [66, 1], [68, 1], [48, 1], [73, 1], [65, 74, 75, -1, -1, -1], [75, 1], [26, 33, 80, 1, 1, -1], [34, 59, 61, 1, 1, 1], [6, 12, 46, 72, 81, 1, 1, -1, -1, 1], [51, 69, 71, 1, 1, 1], [11, 14, 30, 35, 77, 1, 1, -1, -1, 1], [27, 48, 53, 1, 1, 1]], [[5, 1], [8, 1], [12, 1], [1, 1], [4, 1], [30, 35, 77, -1, -1, 1], [2, 1], [7, 1], [20, 1], [23, 1], [3, 1], [11, 1], [25, 1], [47, 52, 79, -1, -1, 1], [30, 1], [33, 1], [6, 1], [35, 1], [9, 1], [19, 1], [40, 1], [10, 1], [22, 1], [44, 1], [45, 1], [47, 1], [50, 1], [52, 1], [15, 1], [29, 1], [57, 1], [16, 1], [32, 1], [61, 1], [62, 1], [58, 1], [63, 1], [10, 29, 54, 1, 1, 1], [21, 1], [39, 1], [43, 1], [24, 1], [76, 1], [42, 1], [13, 1], [26, 1], [46, 1], [67, 1], [27, 1], [49, 1], [71, 1], [72, 1], [68, 1], [15, 23, 78, -1, -1, 1], [10, 19, 27, 29, 37, 54, 73, 1, 1, 1, 1, 1, 1, -1], [31, 1], [56, 1], [60, 1], [34, 1], [36, 1], [59, 1], [18, 1], [20, 38, 49, 55, 64, -1, -1, -1, 1, 1], [73, 1], [75, 1], [48, 1], [66, 1], [70, 1], [51, 1], [53, 1], [69, 1], [28, 1], [9, 50, 63, 78, 80, 1, 1, 1, 1, 1], [65, 1], [74, 1], [41, 1], [17, 29, 62, 1, 1, 1], [38, 1], [81, 1], [55, -1], [14, 26, 28, 1, 1, 1]]])
            elseif i == 101
                r = J ^ 2 * f(100)
            elseif i == 102
                r = J * f(100)
            end
        end
        cached[i] = r
        return r
    end)
chevieset(:G32, :Invariants, [function (a, b, c, d)
            (((((((((return220 * a ^ 3 * b ^ 3 * c ^ 6 - 220 * a ^ 3 * b ^ 3 * d ^ 6) - 220 * a ^ 3 * c ^ 3 * d ^ 6) - 220 * b ^ 3 * c ^ 3 * d ^ 6) + 220 * a ^ 3 * b ^ 6 * c ^ 3) - 220 * a ^ 3 * b ^ 6 * d ^ 3) + 220 * a ^ 3 * c ^ 6 * d ^ 3) - 220 * b ^ 3 * c ^ 6 * d ^ 3) + 220 * a ^ 6 * b ^ 3 * c ^ 3 + 220 * a ^ 6 * b ^ 3 * d ^ 3) - 220 * a ^ 6 * c ^ 3 * d ^ 3) + 220 * b ^ 6 * c ^ 3 * d ^ 3 + 22 * a ^ 6 * b ^ 6 + 22 * a ^ 6 * c ^ 6 + 22 * a ^ 6 * d ^ 6 + 22 * b ^ 6 * c ^ 6 + 22 * b ^ 6 * d ^ 6 + 22 * c ^ 6 * d ^ 6 + a ^ 12 + b ^ 12 + c ^ 12 + d ^ 12
        end, function (a, b, c, d)
            return (((((((((((((((((((((((((((((((((((((((((((((-170 * a ^ 3 * b ^ 3 * c ^ 12 + 170 * a ^ 3 * b ^ 3 * d ^ 12 + 170 * a ^ 3 * c ^ 3 * d ^ 12 + 170 * b ^ 3 * c ^ 3 * d ^ 12) - 1870 * a ^ 3 * b ^ 6 * c ^ 9) + 1870 * a ^ 3 * b ^ 6 * d ^ 9) - 1870 * a ^ 3 * c ^ 6 * d ^ 9) + 1870 * b ^ 3 * c ^ 6 * d ^ 9) - 1870 * a ^ 3 * b ^ 9 * c ^ 6) + 1870 * a ^ 3 * b ^ 9 * d ^ 6 + 1870 * a ^ 3 * c ^ 9 * d ^ 6 + 1870 * b ^ 3 * c ^ 9 * d ^ 6) - 170 * a ^ 3 * b ^ 12 * c ^ 3) + 170 * a ^ 3 * b ^ 12 * d ^ 3) - 170 * a ^ 3 * c ^ 12 * d ^ 3) + 170 * b ^ 3 * c ^ 12 * d ^ 3) - 1870 * a ^ 6 * b ^ 3 * c ^ 9) - 1870 * a ^ 6 * b ^ 3 * d ^ 9) + 1870 * a ^ 6 * c ^ 3 * d ^ 9) - 1870 * b ^ 6 * c ^ 3 * d ^ 9) - 7854 * a ^ 6 * b ^ 6 * c ^ 6) - 7854 * a ^ 6 * b ^ 6 * d ^ 6) - 7854 * a ^ 6 * c ^ 6 * d ^ 6) - 7854 * b ^ 6 * c ^ 6 * d ^ 6) - 1870 * a ^ 6 * b ^ 9 * c ^ 3) - 1870 * a ^ 6 * b ^ 9 * d ^ 3) + 1870 * a ^ 6 * c ^ 9 * d ^ 3) - 1870 * b ^ 6 * c ^ 9 * d ^ 3) - 17 * a ^ 6 * b ^ 12) - 17 * a ^ 6 * c ^ 12) - 17 * a ^ 6 * d ^ 12) - 17 * b ^ 6 * c ^ 12) - 17 * b ^ 6 * d ^ 12) - 17 * c ^ 6 * d ^ 12) - 1870 * a ^ 9 * b ^ 3 * c ^ 6) + 1870 * a ^ 9 * b ^ 3 * d ^ 6 + 1870 * a ^ 9 * c ^ 3 * d ^ 6 + 1870 * b ^ 9 * c ^ 3 * d ^ 6) - 1870 * a ^ 9 * b ^ 6 * c ^ 3) + 1870 * a ^ 9 * b ^ 6 * d ^ 3) - 1870 * a ^ 9 * c ^ 6 * d ^ 3) + 1870 * b ^ 9 * c ^ 6 * d ^ 3) - 170 * a ^ 12 * b ^ 3 * c ^ 3) - 170 * a ^ 12 * b ^ 3 * d ^ 3) + 170 * a ^ 12 * c ^ 3 * d ^ 3) - 170 * b ^ 12 * c ^ 3 * d ^ 3) - 17 * a ^ 12 * b ^ 6) - 17 * a ^ 12 * c ^ 6) - 17 * a ^ 12 * d ^ 6) - 17 * b ^ 12 * c ^ 6) - 17 * b ^ 12 * d ^ 6) - 17 * c ^ 12 * d ^ 6) + a ^ 18 + b ^ 18 + c ^ 18 + d ^ 18
        end, function (a, b, c, d)
            return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((-230 * a ^ 3 * b ^ 3 * c ^ 6 * d ^ 12 + 230 * a ^ 3 * b ^ 3 * c ^ 12 * d ^ 6) - 230 * a ^ 3 * b ^ 6 * c ^ 3 * d ^ 12) + 230 * a ^ 3 * b ^ 6 * c ^ 12 * d ^ 3 + 46 * a ^ 3 * b ^ 6 * c ^ 15) - 46 * a ^ 3 * b ^ 6 * d ^ 15) + 46 * a ^ 3 * c ^ 6 * d ^ 15) - 46 * b ^ 3 * c ^ 6 * d ^ 15) + 230 * a ^ 3 * b ^ 9 * c ^ 12) - 230 * a ^ 3 * b ^ 9 * d ^ 12) - 230 * a ^ 3 * c ^ 9 * d ^ 12) - 230 * b ^ 3 * c ^ 9 * d ^ 12) + 230 * a ^ 3 * b ^ 12 * c ^ 3 * d ^ 6) - 230 * a ^ 3 * b ^ 12 * c ^ 6 * d ^ 3) + 230 * a ^ 3 * b ^ 12 * c ^ 9) - 230 * a ^ 3 * b ^ 12 * d ^ 9) + 230 * a ^ 3 * c ^ 12 * d ^ 9) - 230 * b ^ 3 * c ^ 12 * d ^ 9) + 46 * a ^ 3 * b ^ 15 * c ^ 6) - 46 * a ^ 3 * b ^ 15 * d ^ 6) - 46 * a ^ 3 * c ^ 15 * d ^ 6) - 46 * b ^ 3 * c ^ 15 * d ^ 6) - 230 * a ^ 6 * b ^ 3 * c ^ 3 * d ^ 12) - 230 * a ^ 6 * b ^ 3 * c ^ 12 * d ^ 3) + 46 * a ^ 6 * b ^ 3 * c ^ 15 + 46 * a ^ 6 * b ^ 3 * d ^ 15) - 46 * a ^ 6 * c ^ 3 * d ^ 15) + 46 * b ^ 6 * c ^ 3 * d ^ 15 + 1518 * a ^ 6 * b ^ 6 * c ^ 6 * d ^ 6 + 943 * a ^ 6 * b ^ 6 * c ^ 12 + 943 * a ^ 6 * b ^ 6 * d ^ 12 + 943 * a ^ 6 * c ^ 6 * d ^ 12 + 943 * b ^ 6 * c ^ 6 * d ^ 12 + 2530 * a ^ 6 * b ^ 9 * c ^ 9 + 2530 * a ^ 6 * b ^ 9 * d ^ 9) - 2530 * a ^ 6 * c ^ 9 * d ^ 9) + 2530 * b ^ 6 * c ^ 9 * d ^ 9 + 230 * a ^ 6 * b ^ 12 * c ^ 3 * d ^ 3 + 943 * a ^ 6 * b ^ 12 * c ^ 6 + 943 * a ^ 6 * b ^ 12 * d ^ 6 + 943 * a ^ 6 * c ^ 12 * d ^ 6 + 943 * b ^ 6 * c ^ 12 * d ^ 6 + 46 * a ^ 6 * b ^ 15 * c ^ 3 + 46 * a ^ 6 * b ^ 15 * d ^ 3) - 46 * a ^ 6 * c ^ 15 * d ^ 3) + 46 * b ^ 6 * c ^ 15 * d ^ 3 + 230 * a ^ 9 * b ^ 3 * c ^ 12) - 230 * a ^ 9 * b ^ 3 * d ^ 12) - 230 * a ^ 9 * c ^ 3 * d ^ 12) - 230 * b ^ 9 * c ^ 3 * d ^ 12) + 2530 * a ^ 9 * b ^ 6 * c ^ 9) - 2530 * a ^ 9 * b ^ 6 * d ^ 9) + 2530 * a ^ 9 * c ^ 6 * d ^ 9) - 2530 * b ^ 9 * c ^ 6 * d ^ 9) + 2530 * a ^ 9 * b ^ 9 * c ^ 6) - 2530 * a ^ 9 * b ^ 9 * d ^ 6) - 2530 * a ^ 9 * c ^ 9 * d ^ 6) - 2530 * b ^ 9 * c ^ 9 * d ^ 6) + 230 * a ^ 9 * b ^ 12 * c ^ 3) - 230 * a ^ 9 * b ^ 12 * d ^ 3) + 230 * a ^ 9 * c ^ 12 * d ^ 3) - 230 * b ^ 9 * c ^ 12 * d ^ 3) + 230 * a ^ 12 * b ^ 3 * c ^ 3 * d ^ 6 + 230 * a ^ 12 * b ^ 3 * c ^ 6 * d ^ 3 + 230 * a ^ 12 * b ^ 3 * c ^ 9 + 230 * a ^ 12 * b ^ 3 * d ^ 9) - 230 * a ^ 12 * c ^ 3 * d ^ 9) + 230 * b ^ 12 * c ^ 3 * d ^ 9) - 230 * a ^ 12 * b ^ 6 * c ^ 3 * d ^ 3) + 943 * a ^ 12 * b ^ 6 * c ^ 6 + 943 * a ^ 12 * b ^ 6 * d ^ 6 + 943 * a ^ 12 * c ^ 6 * d ^ 6 + 943 * b ^ 12 * c ^ 6 * d ^ 6 + 230 * a ^ 12 * b ^ 9 * c ^ 3 + 230 * a ^ 12 * b ^ 9 * d ^ 3) - 230 * a ^ 12 * c ^ 9 * d ^ 3) + 230 * b ^ 12 * c ^ 9 * d ^ 3 + 23 // 22 * a ^ 12 * b ^ 12 + 23 // 22 * a ^ 12 * c ^ 12 + 23 // 22 * a ^ 12 * d ^ 12 + 23 // 22 * b ^ 12 * c ^ 12 + 23 // 22 * b ^ 12 * d ^ 12 + 23 // 22 * c ^ 12 * d ^ 12 + 46 * a ^ 15 * b ^ 3 * c ^ 6) - 46 * a ^ 15 * b ^ 3 * d ^ 6) - 46 * a ^ 15 * c ^ 3 * d ^ 6) - 46 * b ^ 15 * c ^ 3 * d ^ 6) + 46 * a ^ 15 * b ^ 6 * c ^ 3) - 46 * a ^ 15 * b ^ 6 * d ^ 3) + 46 * a ^ 15 * c ^ 6 * d ^ 3) - 46 * b ^ 15 * c ^ 6 * d ^ 3) + 1 // 44 * a ^ 24 + 1 // 44 * b ^ 24 + 1 // 44 * c ^ 24 + 1 // 44 * d ^ 24
        end, function (a, b, c, d)
            return (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((-8700 * a ^ 3 * b ^ 3 * c ^ 6 * d ^ 18 + 8700 * a ^ 3 * b ^ 3 * c ^ 18 * d ^ 6) - 8700 * a ^ 3 * b ^ 6 * c ^ 3 * d ^ 18) + 73950 * a ^ 3 * b ^ 6 * c ^ 9 * d ^ 12) - 73950 * a ^ 3 * b ^ 6 * c ^ 12 * d ^ 9) + 8700 * a ^ 3 * b ^ 6 * c ^ 18 * d ^ 3) - 870 * a ^ 3 * b ^ 6 * c ^ 21) + 870 * a ^ 3 * b ^ 6 * d ^ 21) - 870 * a ^ 3 * c ^ 6 * d ^ 21) + 870 * b ^ 3 * c ^ 6 * d ^ 21 + 73950 * a ^ 3 * b ^ 9 * c ^ 6 * d ^ 12) - 73950 * a ^ 3 * b ^ 9 * c ^ 12 * d ^ 6) - 11600 * a ^ 3 * b ^ 9 * c ^ 18) + 11600 * a ^ 3 * b ^ 9 * d ^ 18 + 11600 * a ^ 3 * c ^ 9 * d ^ 18 + 11600 * b ^ 3 * c ^ 9 * d ^ 18 + 73950 * a ^ 3 * b ^ 12 * c ^ 6 * d ^ 9) - 73950 * a ^ 3 * b ^ 12 * c ^ 9 * d ^ 6) - 44370 * a ^ 3 * b ^ 12 * c ^ 15) + 44370 * a ^ 3 * b ^ 12 * d ^ 15) - 44370 * a ^ 3 * c ^ 12 * d ^ 15) + 44370 * b ^ 3 * c ^ 12 * d ^ 15) - 44370 * a ^ 3 * b ^ 15 * c ^ 12) + 44370 * a ^ 3 * b ^ 15 * d ^ 12 + 44370 * a ^ 3 * c ^ 15 * d ^ 12 + 44370 * b ^ 3 * c ^ 15 * d ^ 12 + 8700 * a ^ 3 * b ^ 18 * c ^ 3 * d ^ 6) - 8700 * a ^ 3 * b ^ 18 * c ^ 6 * d ^ 3) - 11600 * a ^ 3 * b ^ 18 * c ^ 9) + 11600 * a ^ 3 * b ^ 18 * d ^ 9) - 11600 * a ^ 3 * c ^ 18 * d ^ 9) + 11600 * b ^ 3 * c ^ 18 * d ^ 9) - 870 * a ^ 3 * b ^ 21 * c ^ 6) + 870 * a ^ 3 * b ^ 21 * d ^ 6 + 870 * a ^ 3 * c ^ 21 * d ^ 6 + 870 * b ^ 3 * c ^ 21 * d ^ 6) - 8700 * a ^ 6 * b ^ 3 * c ^ 3 * d ^ 18) + 73950 * a ^ 6 * b ^ 3 * c ^ 9 * d ^ 12 + 73950 * a ^ 6 * b ^ 3 * c ^ 12 * d ^ 9) - 8700 * a ^ 6 * b ^ 3 * c ^ 18 * d ^ 3) - 870 * a ^ 6 * b ^ 3 * c ^ 21) - 870 * a ^ 6 * b ^ 3 * d ^ 21) + 870 * a ^ 6 * c ^ 3 * d ^ 21) - 870 * b ^ 6 * c ^ 3 * d ^ 21) + 266220 * a ^ 6 * b ^ 6 * c ^ 6 * d ^ 12 + 266220 * a ^ 6 * b ^ 6 * c ^ 12 * d ^ 6) - 49590 * a ^ 6 * b ^ 6 * c ^ 18) - 49590 * a ^ 6 * b ^ 6 * d ^ 18) - 49590 * a ^ 6 * c ^ 6 * d ^ 18) - 49590 * b ^ 6 * c ^ 6 * d ^ 18) + 73950 * a ^ 6 * b ^ 9 * c ^ 3 * d ^ 12 + 73950 * a ^ 6 * b ^ 9 * c ^ 12 * d ^ 3) - 488070 * a ^ 6 * b ^ 9 * c ^ 15) - 488070 * a ^ 6 * b ^ 9 * d ^ 15) + 488070 * a ^ 6 * c ^ 9 * d ^ 15) - 488070 * b ^ 6 * c ^ 9 * d ^ 15) - 73950 * a ^ 6 * b ^ 12 * c ^ 3 * d ^ 9) + 266220 * a ^ 6 * b ^ 12 * c ^ 6 * d ^ 6) - 73950 * a ^ 6 * b ^ 12 * c ^ 9 * d ^ 3) - 1005720 * a ^ 6 * b ^ 12 * c ^ 12) - 1005720 * a ^ 6 * b ^ 12 * d ^ 12) - 1005720 * a ^ 6 * c ^ 12 * d ^ 12) - 1005720 * b ^ 6 * c ^ 12 * d ^ 12) - 488070 * a ^ 6 * b ^ 15 * c ^ 9) - 488070 * a ^ 6 * b ^ 15 * d ^ 9) + 488070 * a ^ 6 * c ^ 15 * d ^ 9) - 488070 * b ^ 6 * c ^ 15 * d ^ 9) + 8700 * a ^ 6 * b ^ 18 * c ^ 3 * d ^ 3) - 49590 * a ^ 6 * b ^ 18 * c ^ 6) - 49590 * a ^ 6 * b ^ 18 * d ^ 6) - 49590 * a ^ 6 * c ^ 18 * d ^ 6) - 49590 * b ^ 6 * c ^ 18 * d ^ 6) - 870 * a ^ 6 * b ^ 21 * c ^ 3) - 870 * a ^ 6 * b ^ 21 * d ^ 3) + 870 * a ^ 6 * c ^ 21 * d ^ 3) - 870 * b ^ 6 * c ^ 21 * d ^ 3) + 73950 * a ^ 9 * b ^ 3 * c ^ 6 * d ^ 12) - 73950 * a ^ 9 * b ^ 3 * c ^ 12 * d ^ 6) - 11600 * a ^ 9 * b ^ 3 * c ^ 18) + 11600 * a ^ 9 * b ^ 3 * d ^ 18 + 11600 * a ^ 9 * c ^ 3 * d ^ 18 + 11600 * b ^ 9 * c ^ 3 * d ^ 18 + 73950 * a ^ 9 * b ^ 6 * c ^ 3 * d ^ 12) - 73950 * a ^ 9 * b ^ 6 * c ^ 12 * d ^ 3) - 488070 * a ^ 9 * b ^ 6 * c ^ 15) + 488070 * a ^ 9 * b ^ 6 * d ^ 15) - 488070 * a ^ 9 * c ^ 6 * d ^ 15) + 488070 * b ^ 9 * c ^ 6 * d ^ 15) - 2637550 * a ^ 9 * b ^ 9 * c ^ 12) + 2637550 * a ^ 9 * b ^ 9 * d ^ 12 + 2637550 * a ^ 9 * c ^ 9 * d ^ 12 + 2637550 * b ^ 9 * c ^ 9 * d ^ 12) - 73950 * a ^ 9 * b ^ 12 * c ^ 3 * d ^ 6) + 73950 * a ^ 9 * b ^ 12 * c ^ 6 * d ^ 3) - 2637550 * a ^ 9 * b ^ 12 * c ^ 9) + 2637550 * a ^ 9 * b ^ 12 * d ^ 9) - 2637550 * a ^ 9 * c ^ 12 * d ^ 9) + 2637550 * b ^ 9 * c ^ 12 * d ^ 9) - 488070 * a ^ 9 * b ^ 15 * c ^ 6) + 488070 * a ^ 9 * b ^ 15 * d ^ 6 + 488070 * a ^ 9 * c ^ 15 * d ^ 6 + 488070 * b ^ 9 * c ^ 15 * d ^ 6) - 11600 * a ^ 9 * b ^ 18 * c ^ 3) + 11600 * a ^ 9 * b ^ 18 * d ^ 3) - 11600 * a ^ 9 * c ^ 18 * d ^ 3) + 11600 * b ^ 9 * c ^ 18 * d ^ 3) - 73950 * a ^ 12 * b ^ 3 * c ^ 6 * d ^ 9) - 73950 * a ^ 12 * b ^ 3 * c ^ 9 * d ^ 6) - 44370 * a ^ 12 * b ^ 3 * c ^ 15) - 44370 * a ^ 12 * b ^ 3 * d ^ 15) + 44370 * a ^ 12 * c ^ 3 * d ^ 15) - 44370 * b ^ 12 * c ^ 3 * d ^ 15) + 73950 * a ^ 12 * b ^ 6 * c ^ 3 * d ^ 9 + 266220 * a ^ 12 * b ^ 6 * c ^ 6 * d ^ 6 + 73950 * a ^ 12 * b ^ 6 * c ^ 9 * d ^ 3) - 1005720 * a ^ 12 * b ^ 6 * c ^ 12) - 1005720 * a ^ 12 * b ^ 6 * d ^ 12) - 1005720 * a ^ 12 * c ^ 6 * d ^ 12) - 1005720 * b ^ 12 * c ^ 6 * d ^ 12) - 73950 * a ^ 12 * b ^ 9 * c ^ 3 * d ^ 6) - 73950 * a ^ 12 * b ^ 9 * c ^ 6 * d ^ 3) - 2637550 * a ^ 12 * b ^ 9 * c ^ 9) - 2637550 * a ^ 12 * b ^ 9 * d ^ 9) + 2637550 * a ^ 12 * c ^ 9 * d ^ 9) - 2637550 * b ^ 12 * c ^ 9 * d ^ 9) - 1005720 * a ^ 12 * b ^ 12 * c ^ 6) - 1005720 * a ^ 12 * b ^ 12 * d ^ 6) - 1005720 * a ^ 12 * c ^ 12 * d ^ 6) - 1005720 * b ^ 12 * c ^ 12 * d ^ 6) - 44370 * a ^ 12 * b ^ 15 * c ^ 3) - 44370 * a ^ 12 * b ^ 15 * d ^ 3) + 44370 * a ^ 12 * c ^ 15 * d ^ 3) - 44370 * b ^ 12 * c ^ 15 * d ^ 3) - 145 * a ^ 12 * b ^ 18) - 145 * a ^ 12 * c ^ 18) - 145 * a ^ 12 * d ^ 18) - 145 * b ^ 12 * c ^ 18) - 145 * b ^ 12 * d ^ 18) - 145 * c ^ 12 * d ^ 18) - 44370 * a ^ 15 * b ^ 3 * c ^ 12) + 44370 * a ^ 15 * b ^ 3 * d ^ 12 + 44370 * a ^ 15 * c ^ 3 * d ^ 12 + 44370 * b ^ 15 * c ^ 3 * d ^ 12) - 488070 * a ^ 15 * b ^ 6 * c ^ 9) + 488070 * a ^ 15 * b ^ 6 * d ^ 9) - 488070 * a ^ 15 * c ^ 6 * d ^ 9) + 488070 * b ^ 15 * c ^ 6 * d ^ 9) - 488070 * a ^ 15 * b ^ 9 * c ^ 6) + 488070 * a ^ 15 * b ^ 9 * d ^ 6 + 488070 * a ^ 15 * c ^ 9 * d ^ 6 + 488070 * b ^ 15 * c ^ 9 * d ^ 6) - 44370 * a ^ 15 * b ^ 12 * c ^ 3) + 44370 * a ^ 15 * b ^ 12 * d ^ 3) - 44370 * a ^ 15 * c ^ 12 * d ^ 3) + 44370 * b ^ 15 * c ^ 12 * d ^ 3 + 8700 * a ^ 18 * b ^ 3 * c ^ 3 * d ^ 6 + 8700 * a ^ 18 * b ^ 3 * c ^ 6 * d ^ 3) - 11600 * a ^ 18 * b ^ 3 * c ^ 9) - 11600 * a ^ 18 * b ^ 3 * d ^ 9) + 11600 * a ^ 18 * c ^ 3 * d ^ 9) - 11600 * b ^ 18 * c ^ 3 * d ^ 9) - 8700 * a ^ 18 * b ^ 6 * c ^ 3 * d ^ 3) - 49590 * a ^ 18 * b ^ 6 * c ^ 6) - 49590 * a ^ 18 * b ^ 6 * d ^ 6) - 49590 * a ^ 18 * c ^ 6 * d ^ 6) - 49590 * b ^ 18 * c ^ 6 * d ^ 6) - 11600 * a ^ 18 * b ^ 9 * c ^ 3) - 11600 * a ^ 18 * b ^ 9 * d ^ 3) + 11600 * a ^ 18 * c ^ 9 * d ^ 3) - 11600 * b ^ 18 * c ^ 9 * d ^ 3) - 145 * a ^ 18 * b ^ 12) - 145 * a ^ 18 * c ^ 12) - 145 * a ^ 18 * d ^ 12) - 145 * b ^ 18 * c ^ 12) - 145 * b ^ 18 * d ^ 12) - 145 * c ^ 18 * d ^ 12) - 870 * a ^ 21 * b ^ 3 * c ^ 6) + 870 * a ^ 21 * b ^ 3 * d ^ 6 + 870 * a ^ 21 * c ^ 3 * d ^ 6 + 870 * b ^ 21 * c ^ 3 * d ^ 6) - 870 * a ^ 21 * b ^ 6 * c ^ 3) + 870 * a ^ 21 * b ^ 6 * d ^ 3) - 870 * a ^ 21 * c ^ 6 * d ^ 3) + 870 * b ^ 21 * c ^ 6 * d ^ 3 + a ^ 30 + b ^ 30 + c ^ 30 + d ^ 30
        end])
chevieset(:G32, :Discriminant, function ()
        return function (a, b, c, d)
                return (((((((((((((((((6388800 * a * b * d ^ 3 + 2662000000 * a * c ^ 2 * d ^ 2 + 45919500000 * a * b ^ 2 * c ^ 3) - 53240000000 * b * c ^ 3 * d) - 95832000 * a * b ^ 3 * c * d) + 1401543 // 20 * a * b ^ 6 + 59895000 * b ^ 2 * c * d ^ 2) - 3690500000 * a ^ 2 * b * c ^ 2 * d) - 5513970 * a ^ 2 * b ^ 2 * d ^ 2) - 544500000000 * a ^ 2 * c ^ 4) + 71628975 // 2 * a ^ 2 * b ^ 4 * c) - 21175000 * a ^ 3 * c * d ^ 2) + 1332966250 * a ^ 3 * b ^ 2 * c ^ 2 + 2108788 * a ^ 3 * b ^ 3 * d) - 2662000 * d ^ 4) + 26642000 * a ^ 4 * b * c * d + 22460625 * b ^ 4 * c ^ 2 + 10139250000 * a ^ 4 * c ^ 3 + -26003571 // 80 * a ^ 4 * b ^ 4 + 10648000000000 * c ^ 5) - 71874 * b ^ 5 * d) + 64570 * a ^ 5 * d ^ 2) - 9759475 * a ^ 5 * b ^ 2 * c) - 62764 * a ^ 6 * b * d) - 81614375 * a ^ 6 * c ^ 2) + 761263 // 40 * a ^ 7 * b ^ 2 + 5723475 // 22 * a ^ 8 * c + -2706867 // 9680 * a ^ 10
            end
    end)
(CHEVIE[:families])[:G4] = Dict{Symbol, Any}(:name => "Q(G_4)", :explanation => "DrinfeldDouble(G4)", :x => [Perm(), Perm(), Perm(), Perm(), Perm(), Perm(), Perm(), #= none:4 =# @perm_str("( 1,24)( 2,12)( 3,22)( 4,20)( 5,23)( 6,21)( 7,16)( 8,11)( 9,18)(10,13)(14,17)(15,19)"), #= none:5 =# @perm_str("( 1,24)( 2,12)( 3,22)( 4,20)( 5,23)( 6,21)( 7,16)( 8,11)( 9,18)(10,13)(14,17)(15,19)"), #= none:5 =# @perm_str("( 1,24)( 2,12)( 3,22)( 4,20)( 5,23)( 6,21)( 7,16)( 8,11)( 9,18)(10,13)(14,17)(15,19)"), #= none:5 =# @perm_str("( 1,24)( 2,12)( 3,22)( 4,20)( 5,23)( 6,21)( 7,16)( 8,11)( 9,18)(10,13)(14,17)(15,19)"), #= none:6 =# @perm_str("( 1,24)( 2,12)( 3,22)( 4,20)( 5,23)( 6,21)( 7,16)( 8,11)( 9,18)(10,13)(14,17)(15,19)"), #= none:6 =# @perm_str("( 1,24)( 2,12)( 3,22)( 4,20)( 5,23)( 6,21)( 7,16)( 8,11)( 9,18)(10,13)(14,17)(15,19)"), #= none:6 =# @perm_str("( 1,24)( 2,12)( 3,22)( 4,20)( 5,23)( 6,21)( 7,16)( 8,11)( 9,18)(10,13)(14,17)(15,19)"), #= none:7 =# @perm_str("( 1,12,24, 2)( 3,16,22, 7)( 4, 6,20,21)( 5,10,23,13)( 8,18,11, 9)(14,19,17,15)"), #= none:7 =# @perm_str("( 1,12,24, 2)( 3,16,22, 7)( 4, 6,20,21)( 5,10,23,13)( 8,18,11, 9)(14,19,17,15)"), #= none:7 =# @perm_str("( 1,12,24, 2)( 3,16,22, 7)( 4, 6,20,21)( 5,10,23,13)( 8,18,11, 9)(14,19,17,15)"), #= none:8 =# @perm_str("( 1,12,24, 2)( 3,16,22, 7)( 4, 6,20,21)( 5,10,23,13)( 8,18,11, 9)(14,19,17,15)"), #= none:8 =# @perm_str("( 1, 8,16,24,11, 7)( 2, 5, 6,12,23,21)( 3,15,10,22,19,13)( 4,14, 9,20,17,18)"), #= none:8 =# @perm_str("( 1, 8,16,24,11, 7)( 2, 5, 6,12,23,21)( 3,15,10,22,19,13)( 4,14, 9,20,17,18)"), #= none:9 =# @perm_str("( 1, 8,16,24,11, 7)( 2, 5, 6,12,23,21)( 3,15,10,22,19,13)( 4,14, 9,20,17,18)"), #= none:10 =# @perm_str("( 1, 8,16,24,11, 7)( 2, 5, 6,12,23,21)( 3,15,10,22,19,13)( 4,14, 9,20,17,18)"), #= none:10 =# @perm_str("( 1, 8,16,24,11, 7)( 2, 5, 6,12,23,21)( 3,15,10,22,19,13)( 4,14, 9,20,17,18)"), #= none:11 =# @perm_str("( 1, 8,16,24,11, 7)( 2, 5, 6,12,23,21)( 3,15,10,22,19,13)( 4,14, 9,20,17,18)"), #= none:12 =# @perm_str("( 1,11,16)( 2,23, 6)( 3,19,10)( 4,17, 9)( 5,21,12)( 7,24, 8)(13,22,15)(14,18,20)"), #= none:12 =# @perm_str("( 1,11,16)( 2,23, 6)( 3,19,10)( 4,17, 9)( 5,21,12)( 7,24, 8)(13,22,15)(14,18,20)"), #= none:12 =# @perm_str("( 1,11,16)( 2,23, 6)( 3,19,10)( 4,17, 9)( 5,21,12)( 7,24, 8)(13,22,15)(14,18,20)"), #= none:12 =# @perm_str("( 1,11,16)( 2,23, 6)( 3,19,10)( 4,17, 9)( 5,21,12)( 7,24, 8)(13,22,15)(14,18,20)"), #= none:13 =# @perm_str("( 1,11,16)( 2,23, 6)( 3,19,10)( 4,17, 9)( 5,21,12)( 7,24, 8)(13,22,15)(14,18,20)"), #= none:13 =# @perm_str("( 1,11,16)( 2,23, 6)( 3,19,10)( 4,17, 9)( 5,21,12)( 7,24, 8)(13,22,15)(14,18,20)"), #= none:13 =# @perm_str("( 1, 3, 5)( 2, 4,11)( 6,10,14)( 7, 9,19)( 8,12,20)(13,17,21)(15,16,18)(22,23,24)"), #= none:13 =# @perm_str("( 1, 3, 5)( 2, 4,11)( 6,10,14)( 7, 9,19)( 8,12,20)(13,17,21)(15,16,18)(22,23,24)"), #= none:14 =# @perm_str("( 1, 3, 5)( 2, 4,11)( 6,10,14)( 7, 9,19)( 8,12,20)(13,17,21)(15,16,18)(22,23,24)"), #= none:14 =# @perm_str("( 1, 3, 5)( 2, 4,11)( 6,10,14)( 7, 9,19)( 8,12,20)(13,17,21)(15,16,18)(22,23,24)"), #= none:14 =# @perm_str("( 1, 3, 5)( 2, 4,11)( 6,10,14)( 7, 9,19)( 8,12,20)(13,17,21)(15,16,18)(22,23,24)"), #= none:14 =# @perm_str("( 1, 3, 5)( 2, 4,11)( 6,10,14)( 7, 9,19)( 8,12,20)(13,17,21)(15,16,18)(22,23,24)"), #= none:15 =# @perm_str("( 1,22, 5,24, 3,23)( 2,20,11,12, 4, 8)( 6,13,14,21,10,17)( 7,18,19,16, 9,15)"), #= none:16 =# @perm_str("( 1,22, 5,24, 3,23)( 2,20,11,12, 4, 8)( 6,13,14,21,10,17)( 7,18,19,16, 9,15)"), #= none:16 =# @perm_str("( 1,22, 5,24, 3,23)( 2,20,11,12, 4, 8)( 6,13,14,21,10,17)( 7,18,19,16, 9,15)"), #= none:17 =# @perm_str("( 1,22, 5,24, 3,23)( 2,20,11,12, 4, 8)( 6,13,14,21,10,17)( 7,18,19,16, 9,15)"), #= none:18 =# @perm_str("( 1,22, 5,24, 3,23)( 2,20,11,12, 4, 8)( 6,13,14,21,10,17)( 7,18,19,16, 9,15)"), #= none:18 =# @perm_str("( 1,22, 5,24, 3,23)( 2,20,11,12, 4, 8)( 6,13,14,21,10,17)( 7,18,19,16, 9,15)")], :charLabels => ["(1,\\phi_{1,0})", "(1,\\phi_{1,4})", "(1,\\phi_{1,8})", "(1,\\phi_{2,5})", "(1,\\phi_{2,3})", "(1,\\phi_{2,1})", "(1,\\phi_{3,2})", "(z,\\phi_{1,0})", "(z,\\phi_{1,4})", "(z,\\phi_{1,8})", "(z,\\phi_{2,5})", "(z,\\phi_{2,3})", "(z,\\phi_{2,1})", "(z,\\phi_{3,2})", "(g_4,1)", "(g_4,-1)", "(g_4,i)", "(g_4,-i)", "(g_6,1)", "(g_6,-1)", "(g_6,\\zeta_3^2)", "(g_6,-\\zeta_3^2)", "(g_6,\\zeta_3)", "(g_6,-\\zeta_3)", "(g_6^4,1)", "(g_6^4,-1)", "(g_6^4,\\zeta_3^2)", "(g_6^4,-\\zeta_3^2)", "(g_6^4,\\zeta_3)", "(g_6^4,-\\zeta_3)", "(g_6^2,1)", "(g_6^2,-1)", "(g_6^2,\\zeta_3)", "(g_6^2,-\\zeta_3)", "(g_6^2,\\zeta_3^2)", "(g_6^2,-\\zeta_3^2)", "(g_6^5,1)", "(g_6^5,-1)", "(g_6^5,\\zeta_3)", "(g_6^5,-\\zeta_3)", "(g_6^5,\\zeta_3^2)", "(g_6^5,-\\zeta_3^2)"], :eigenvalues => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, -1, -(E(4)), E(4), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], :mellin => ApplyFunc(DiagonalMat, [[[1, 1, 1, 2, 2, 2, 3], [1, 1, 1, -2, -2, -2, 3], [1, 1, 1, 0, 0, 0, -1], [1, E(3), E(3, 2), 1, E(3), E(3, 2), 0], [1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0], [1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0], [1, E(3, 2), E(3), 1, E(3, 2), E(3), 0]], [[1, 1, 1, 2, 2, 2, 3], [1, 1, 1, -2, -2, -2, 3], [1, 1, 1, 0, 0, 0, -1], [1, E(3), E(3, 2), 1, E(3), E(3, 2), 0], [1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0], [1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0], [1, E(3, 2), E(3), 1, E(3, 2), E(3), 0]], [[1, 1, 1, 1], [1, -1, -(E(4)), E(4)], [1, -1, E(4), -(E(4))], [1, 1, -1, -1]], [[1, 1, 1, 1, 1, 1], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, 1, E(3, 2), E(3, 2), E(3), E(3)], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, 1, -1, 1, -1]], [[1, 1, 1, 1, 1, 1], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, 1, E(3, 2), E(3, 2), E(3), E(3)], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, 1, -1, 1, -1]], [[1, 1, 1, 1, 1, 1], [1, 1, E(3, 2), E(3, 2), E(3), E(3)], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, -1, 1, -1, 1, -1]], [[1, 1, 1, 1, 1, 1], [1, 1, E(3, 2), E(3, 2), E(3), E(3)], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, -1, 1, -1, 1, -1]]]), :group => ComplexReflectionGroup(4), :fourierMat => [[1 // 4, 1 // 4, 1 // 4, 1 // 2, 1 // 2, 1 // 2, 3 // 4, 1 // 4, 1 // 4, 1 // 4, 1 // 2, 1 // 2, 1 // 2, 3 // 4, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1 // 4, 1 // 4, 1 // 4, 1 // 2, 1 // 2, 1 // 2, 3 // 4, 1 // 4, 1 // 4, 1 // 4, 1 // 2, 1 // 2, 1 // 2, 3 // 4, 3 // 2, 3 // 2, 3 // 2, 3 // 2, E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3)], [1 // 4, 1 // 4, 1 // 4, 1 // 2, 1 // 2, 1 // 2, 3 // 4, 1 // 4, 1 // 4, 1 // 4, 1 // 2, 1 // 2, 1 // 2, 3 // 4, 3 // 2, 3 // 2, 3 // 2, 3 // 2, E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2)], [1 // 2, 1 // 2, 1 // 2, 1, 1, 1, 3 // 2, -1 // 2, -1 // 2, -1 // 2, -1, -1, -1, -3 // 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1], [1 // 2, 1 // 2, 1 // 2, 1, 1, 1, 3 // 2, -1 // 2, -1 // 2, -1 // 2, -1, -1, -1, -3 // 2, 0, 0, 0, 0, E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), E(3), E(3), E(3), E(3), E(3), E(3)], [1 // 2, 1 // 2, 1 // 2, 1, 1, 1, 3 // 2, -1 // 2, -1 // 2, -1 // 2, -1, -1, -1, -3 // 2, 0, 0, 0, 0, E(3), E(3), E(3), E(3), E(3), E(3), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2)], [3 // 4, 3 // 4, 3 // 4, 3 // 2, 3 // 2, 3 // 2, 9 // 4, 3 // 4, 3 // 4, 3 // 4, 3 // 2, 3 // 2, 3 // 2, 9 // 4, -3 // 2, -3 // 2, -3 // 2, -3 // 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 // 4, 1 // 4, 1 // 4, -1 // 2, -1 // 2, -1 // 2, 3 // 4, 1 // 4, 1 // 4, 1 // 4, -1 // 2, -1 // 2, -1 // 2, 3 // 4, 3 // 2, 3 // 2, -3 // 2, -3 // 2, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1], [1 // 4, 1 // 4, 1 // 4, -1 // 2, -1 // 2, -1 // 2, 3 // 4, 1 // 4, 1 // 4, 1 // 4, -1 // 2, -1 // 2, -1 // 2, 3 // 4, 3 // 2, 3 // 2, -3 // 2, -3 // 2, E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3))], [1 // 4, 1 // 4, 1 // 4, -1 // 2, -1 // 2, -1 // 2, 3 // 4, 1 // 4, 1 // 4, 1 // 4, -1 // 2, -1 // 2, -1 // 2, 3 // 4, 3 // 2, 3 // 2, -3 // 2, -3 // 2, E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2))], [1 // 2, 1 // 2, 1 // 2, -1, -1, -1, 3 // 2, -1 // 2, -1 // 2, -1 // 2, 1, 1, 1, -3 // 2, 0, 0, 0, 0, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1], [1 // 2, 1 // 2, 1 // 2, -1, -1, -1, 3 // 2, -1 // 2, -1 // 2, -1 // 2, 1, 1, 1, -3 // 2, 0, 0, 0, 0, E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3))], [1 // 2, 1 // 2, 1 // 2, -1, -1, -1, 3 // 2, -1 // 2, -1 // 2, -1 // 2, 1, 1, 1, -3 // 2, 0, 0, 0, 0, E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2))], [3 // 4, 3 // 4, 3 // 4, -3 // 2, -3 // 2, -3 // 2, 9 // 4, 3 // 4, 3 // 4, 3 // 4, -3 // 2, -3 // 2, -3 // 2, 9 // 4, -3 // 2, -3 // 2, 3 // 2, 3 // 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3 // 2, 3 // 2, 3 // 2, 0, 0, 0, -3 // 2, 3 // 2, 3 // 2, 3 // 2, 0, 0, 0, -3 // 2, 3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3 // 2, 3 // 2, 3 // 2, 0, 0, 0, -3 // 2, 3 // 2, 3 // 2, 3 // 2, 0, 0, 0, -3 // 2, -3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3 // 2, 3 // 2, 3 // 2, 0, 0, 0, -3 // 2, -3 // 2, -3 // 2, -3 // 2, 0, 0, 0, 3 // 2, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3 // 2, 3 // 2, 3 // 2, 0, 0, 0, -3 // 2, -3 // 2, -3 // 2, -3 // 2, 0, 0, 0, 3 // 2, 0, 0, 3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, E(3, 2), E(3), 1, E(3, 2), E(3), 0, 1, E(3, 2), E(3), 1, E(3, 2), E(3), 0, 0, 0, 0, 0, 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, E(3, 2), E(3), 1, E(3, 2), E(3), 0, -1, -(E(3, 2)), -(E(3)), -1, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, -1, 1, -(E(3)), E(3), -(E(3, 2)), E(3, 2), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), -1, 1, -(E(3, 2)), E(3, 2), -(E(3)), E(3)], [1, E(3, 2), E(3), 1, E(3, 2), E(3), 0, 1, E(3, 2), E(3), 1, E(3, 2), E(3), 0, 0, 0, 0, 0, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1], [1, E(3, 2), E(3), 1, E(3, 2), E(3), 0, -1, -(E(3, 2)), -(E(3)), -1, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, -(E(3)), E(3), -(E(3, 2)), E(3, 2), -1, 1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, -(E(3, 2)), E(3, 2), -(E(3)), E(3), -1, 1], [1, E(3, 2), E(3), 1, E(3, 2), E(3), 0, 1, E(3, 2), E(3), 1, E(3, 2), E(3), 0, 0, 0, 0, 0, E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2))], [1, E(3, 2), E(3), 1, E(3, 2), E(3), 0, -1, -(E(3, 2)), -(E(3)), -1, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, -(E(3, 2)), E(3, 2), -1, 1, -(E(3)), E(3), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), -(E(3)), E(3), -1, 1, -(E(3, 2)), E(3, 2)], [1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0, 1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3)], [1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0, -1, -(E(3, 2)), -(E(3)), 1, E(3, 2), E(3), 0, 0, 0, 0, 0, -1, -1, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3, 2), E(3, 2), E(3), E(3), -1, -1, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3))], [1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0, 1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1], [1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0, -1, -(E(3, 2)), -(E(3)), 1, E(3, 2), E(3), 0, 0, 0, 0, 0, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), -1, -1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), -1, -1], [1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0, 1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2)], [1, E(3, 2), E(3), -1, -(E(3, 2)), -(E(3)), 0, -1, -(E(3, 2)), -(E(3)), 1, E(3, 2), E(3), 0, 0, 0, 0, 0, -(E(3, 2)), -(E(3, 2)), -1, -1, -(E(3)), -(E(3)), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3), E(3), 1, 1, E(3, 2), E(3, 2), -(E(3)), -(E(3)), -1, -1, -(E(3, 2)), -(E(3, 2))], [1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0, 1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0, -1, -(E(3)), -(E(3, 2)), 1, E(3), E(3, 2), 0, 0, 0, 0, 0, -1, -1, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3), E(3), E(3, 2), E(3, 2), -1, -1, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2))], [1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0, 1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1], [1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0, -1, -(E(3)), -(E(3, 2)), 1, E(3), E(3, 2), 0, 0, 0, 0, 0, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), -1, -1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), -1, -1], [1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0, 1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3)], [1, E(3), E(3, 2), -1, -(E(3)), -(E(3, 2)), 0, -1, -(E(3)), -(E(3, 2)), 1, E(3), E(3, 2), 0, 0, 0, 0, 0, -(E(3)), -(E(3)), -1, -1, -(E(3, 2)), -(E(3, 2)), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3, 2), E(3, 2), 1, 1, E(3), E(3), -(E(3, 2)), -(E(3, 2)), -1, -1, -(E(3)), -(E(3))], [1, E(3), E(3, 2), 1, E(3), E(3, 2), 0, 1, E(3), E(3, 2), 1, E(3), E(3, 2), 0, 0, 0, 0, 0, 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, E(3), E(3, 2), 1, E(3), E(3, 2), 0, -1, -(E(3)), -(E(3, 2)), -1, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, -1, 1, -(E(3, 2)), E(3, 2), -(E(3)), E(3), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), -1, 1, -(E(3)), E(3), -(E(3, 2)), E(3, 2)], [1, E(3), E(3, 2), 1, E(3), E(3, 2), 0, 1, E(3), E(3, 2), 1, E(3), E(3, 2), 0, 0, 0, 0, 0, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1], [1, E(3), E(3, 2), 1, E(3), E(3, 2), 0, -1, -(E(3)), -(E(3, 2)), -1, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, -(E(3, 2)), E(3, 2), -(E(3)), E(3), -1, 1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, -(E(3)), E(3), -(E(3, 2)), E(3, 2), -1, 1], [1, E(3), E(3, 2), 1, E(3), E(3, 2), 0, 1, E(3), E(3, 2), 1, E(3), E(3, 2), 0, 0, 0, 0, 0, E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3))], [1, E(3), E(3, 2), 1, E(3), E(3, 2), 0, -1, -(E(3)), -(E(3, 2)), -1, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, -(E(3)), E(3), -1, 1, -(E(3, 2)), E(3, 2), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), -(E(3, 2)), E(3, 2), -1, 1, -(E(3)), E(3)]] // 6, :special => 1)
chevieset(:G32, :UnipotentCharacters, function ()
        local i3, I, J, cuspidal
        J = E(3)
        i3 = J - J ^ 2
        I = E(4)
        cuspidal = function (arg...,)
                local res, n
                n = "G_{32}"
                if length(arg) > 2 && IsInt(arg[3])
                    n *= SPrint("^", arg[3])
                end
                n *= SPrint("[", FormatTeX(arg[2]), "]")
                res = Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [arg[1]], :eigenvalue => arg[2], :cuspidalName => n)
                if length(arg) > 2 && !(IsInt(arg[length(arg)]))
                    res[:qEigen] = arg[length(arg)]
                end
                return res
            end
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:4, :rank => 4, :ST => 32), :levi => [], :parameterExponents => [1, 1, 1, 1], :charNumbers => 1:102, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 2:4, :rank => 3, :ST => 26), :levi => [1], :parameterExponents => [3, 1, 1], :charNumbers => [103, 171, 240, 241, 121, 120, 242, 117, 234, 105, 233, 104, 108, 238, 199, 126, 162, 109, 235, 173, 200, 127, 163, 110, 236, 172, 130, 203, 161, 226, 119, 175, 131, 204, 160, 225, 118, 174, 152, 153, 177, 179, 178, 176, 201, 128, 202, 129], :eigenvalue => J ^ 2, :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [4, 3], :rank => 2, :ST => 5), :levi => 1:2, :parameterExponents => [1, [0, 4, 4]], :charNumbers => [239, 113, 114, 246, 135, 132, 245, 133, 134, 136, 230, 229, 124, 208, 206, 123, 205, 207, 182, 181, 180], :eigenvalue => -1, :cuspidalName => "G_4"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2, 4], :rank => 2, :p => 6, :q => 1), :levi => [1, 3], :parameterExponents => [[3, 3, 2, 0, 0, 2], 3], :charNumbers => [188, 122, 137, 184, 190, 140, 187, 139, 189, 183, 138, 227, 212, 209, 164, 244, 237, 210, 243, 211, 228, 107, 106, 111, 185, 186, 112], :eigenvalue => J, :cuspidalName => Concatenation(ImprimitiveCuspidalName([[], [0, 1], [0, 1]]), "\\otimes ", ImprimitiveCuspidalName([[], [0, 1], [0, 1]]))), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [4], :rank => 1, :p => 6, :q => 1), :levi => 1:3, :parameterExponents => [[6, 4, 1, 0, 1, 4]], :charNumbers => [116, 143, 217, 232, 218, 144], :eigenvalue => J, :cuspidalName => "G_{25}[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [4], :rank => 1, :p => 6, :q => 1), :levi => 1:3, :parameterExponents => [[6, 1, 4, 0, 4, 1]], :charNumbers => [115, 216, 145, 231, 146, 215], :eigenvalue => -J, :cuspidalName => "G_{25}[-\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [3], :rank => 1, :p => 6, :q => 1), :levi => [1, 2, 4], :parameterExponents => [[9, 8, 5, 0, 5, 8]], :charNumbers => [125, 142, 213, 247, 214, 141], :eigenvalue => -(J ^ 2), :cuspidalName => Concatenation("G_4\\otimes ", ImprimitiveCuspidalName([[], [0, 1], [0, 1]]))), cuspidal(147, 1), cuspidal(148, 1, 2), cuspidal(219, 1, 3), cuspidal(149, -1), cuspidal(191, -1, 2), cuspidal(192, -1, 3), cuspidal(220, -1, 4), cuspidal(151, E(4)), cuspidal(154, E(4), 2, 1 // 2), cuspidal(155, E(4), 3, 1 // 2), cuspidal(150, -(E(4))), cuspidal(156, -(E(4)), 2, 1 // 2), cuspidal(157, -(E(4)), 3, 1 // 2), cuspidal(193, J ^ 2), cuspidal(194, J ^ 2, 2), cuspidal(197, -J), cuspidal(198, -J, 2), cuspidal(195, -(J ^ 2)), cuspidal(196, -(J ^ 2), 2), cuspidal(221, E(5)), cuspidal(222, E(5, 2)), cuspidal(223, E(5, 3)), cuspidal(224, E(5, 4)), cuspidal(165, E(9, 5), 2 // 3), cuspidal(170, E(9, 5), 2, 1 // 3), cuspidal(166, E(9, 2), 1 // 3), cuspidal(168, E(9, 2), 2, 2 // 3), cuspidal(167, E(9, 8), 2 // 3), cuspidal(169, E(9, 8), 2, 1 // 3), cuspidal(158, E(12, 11), 1 // 2), cuspidal(159, E(12, 5), 1 // 2)], :families => [Family("C1", [1]), Family(((CHEVIE[:families])[:X])(3), [9, 6, 103], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 2)), Family(((CHEVIE[:families])[:QZ])(3), [26, 20, 23, 15, 106, 104, 12, 105, 107], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, -1, 1, 1, 1], :special => 2, :cospecial => 3, :ennola => 2)), Family(((CHEVIE[:families])[:X])(3), [37, 34, 108], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1)), Family(((CHEVIE[:families])[:X])(6), [57, 64, 49, 61, 54, 111, 113, 109, 115, 17, 116, 110, 18, 114, 112], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1], :ennola => 5)), Family(((CHEVIE[:families])[:X])(3) * Family("X5"), [46, 72, 123, 119, 41, 44, 69, 124, 118, 45, 120, 117, 125, 122, 121], Dict{Symbol, Any}(:signs => [1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1], :ennola => 5)), Family("G4", [32, 13, 10, 97, 43, 40, 148, 147, 73, 76, 149, 133, 132, 80, 52, 136, 150, 151, 74, 135, 144, 145, 128, 141, 27, 84, 138, 139, 126, 130, 28, 81, 137, 140, 127, 131, 77, 134, 143, 146, 129, 142], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1], :special => 9, :cospecial => 10, :ennola => 1)), Family(((CHEVIE[:families])[:X])(3) * Family("C'\"2"), [93, 96, 154, 156, 94, 95, 155, 157, 153, 152, 158, 159], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1], :ennola => 8)), Family(((CHEVIE[:families])[:X])(3) * ((CHEVIE[:families])[:X])(3), [85, 87, 161, 88, 82, 160, 163, 162, 164], Dict{Symbol, Any}(:signs => [1, 1, -1, 1, 1, -1, -1, -1, 1], :ennola => 6)), Family("Z9", [100, 165, 166, 101, 167, 169, 102, 168, 170], Dict{Symbol, Any}(:special => 7, :ennola => 2)), Family(Family("X5") * ((CHEVIE[:families])[:QZ])(3), [53, 21, 59, 90, 185, 177, 47, 193, 187, 79, 33, 36, 98, 184, 179, 99, 178, 183, 180, 182, 181, 192, 198, 196, 191, 195, 197, 171, 172, 173, 174, 68, 189, 175, 190, 71, 56, 60, 24, 48, 188, 194, 89, 176, 186], Dict{Symbol, Any}(:signs => [1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1], :ennola => 41)), Family(Dict{Symbol, Any}(:fourierMat => [[-1, -1, 1, 1, 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5, 5, 5, -1, -5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5, 5, -5 * E(3, 2), -5 * E(3), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 1, 5, -6, -6, -6, -6], [-1, -1, 1, 1, 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5, 5, 5, -1, -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), 5, 5, -5 * E(3), -5 * E(3, 2), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), 1, 5, -6, -6, -6, -6], [1, 1, -1, -1, -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), 5, 5, 5, 1, 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5, 5, -5 * E(3, 2), -5 * E(3), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -1, 5, 6, 6, 6, 6], [1, 1, -1, -1, -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5, 5, 5, 1, 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), 5, 5, -5 * E(3), -5 * E(3, 2), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), -1, 5, 6, 6, 6, 6], [5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5, 5, 5, 5, 5, 5, 5 * E(3), 5 * E(3, 2), 5, 5, -5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5, -5, 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3), 5 * E(3, 2), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), -5, 5, 0, 0, 0, 0], [5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5, 5, 5, 5, 5, 5, 5 * E(3, 2), 5 * E(3), 5, 5, -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5, -5, 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3, 2), 5 * E(3), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5, 5, 0, 0, 0, 0], [5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5, 5, 5, 5, -5, -5, -5 * E(3), -5 * E(3, 2), -5, 5, -5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5, 5, -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3), -5 * E(3, 2), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5, -5, 0, 0, 0, 0], [5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5, 5, 5, 5, -5, -5, -5 * E(3, 2), -5 * E(3), -5, 5, -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5, 5, -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3, 2), -5 * E(3), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5, -5, 0, 0, 0, 0], [5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5, 5, -5, -5, 5, 5, 5 * E(3), 5 * E(3, 2), 5, 5, -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5, 5, 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3), -5 * E(3, 2), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5, -5, 0, 0, 0, 0], [5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5, 5, -5, -5, 5, 5, 5 * E(3, 2), 5 * E(3), 5, 5, -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), 5, 5, 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3, 2), -5 * E(3), -5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5, -5, 0, 0, 0, 0], [5, 5, 5, 5, 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5, 5, 5, 5, -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), -5, -5, 5 * E(3), 5 * E(3, 2), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5, -5, 0, 0, 0, 0], [5, 5, 5, 5, 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), 5, 5, 5, 5, -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5, -5, 5 * E(3, 2), 5 * E(3), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5, -5, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, -5, -5, 5, 5, 5, 5, 5, 5, -5, 5, 5, -5, 5, -5, -5, -5, 5, 5, 5, 5, 5, 5, 5, -5, -5, 5, -5, 5, 5, -5, 0, 0, 0, 0], [-1, -1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, -1, -5, 5, -5, 5, 5, -5, 5, 5, -5, -5, 5, 5, 5, 5, -5, 5, 5, -5, 5, -5, 1, 5, -6, -6, -6, -6], [-5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3, 2), -5 * E(3), -5, -5, 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3, 2), -5 * E(3), 5 * E(3), 5 * E(3, 2), -5, -5, -5, -5, 5 * E(3), -5 * E(3, 2), -5, 5, -5, 5, 5, -5, 0, 0, 0, 0], [5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3), 5 * E(3, 2), 5, 5, -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3), 5 * E(3, 2), -5 * E(3, 2), -5 * E(3), 5, 5, 5, 5, -5 * E(3, 2), 5 * E(3), 5, -5, 5, -5, -5, 5, 0, 0, 0, 0], [-5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3, 2), 5 * E(3), 5, -5, 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3, 2), 5 * E(3), -5 * E(3), -5 * E(3, 2), 5, 5, -5, -5, -5 * E(3), 5 * E(3, 2), 5, -5, -5, 5, 5, 5, 0, 0, 0, 0], [5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3), -5 * E(3, 2), -5, 5, -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3), -5 * E(3, 2), 5 * E(3, 2), 5 * E(3), -5, -5, 5, 5, 5 * E(3, 2), -5 * E(3), -5, 5, 5, -5, -5, -5, 0, 0, 0, 0], [5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3, 2), 5 * E(3), 5, 5, -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3, 2), -5 * E(3), 5 * E(3), 5 * E(3, 2), 5, 5, 5, 5, 5 * E(3), -5 * E(3, 2), -5, 5, -5, 5, 5, -5, 0, 0, 0, 0], [-5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3), -5 * E(3, 2), -5, -5, 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3), 5 * E(3, 2), -5 * E(3, 2), -5 * E(3), -5, -5, -5, -5, -5 * E(3, 2), 5 * E(3), 5, -5, 5, -5, -5, 5, 0, 0, 0, 0], [5, 5, 5, 5, 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5, -5, -5, 5, -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5, 5, -5 * E(3), -5 * E(3, 2), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5, 5, 0, 0, 0, 0], [5, 5, 5, 5, 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5, -5, -5, 5, -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5, 5, -5 * E(3, 2), -5 * E(3), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5, 5, 0, 0, 0, 0], [-5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5, -5, 5, 5, 5, 5, 5 * E(3), 5 * E(3, 2), 5, -5, 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5, 5, 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3), -5 * E(3, 2), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5, -5, 0, 0, 0, 0], [-5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5, -5, 5, 5, 5, 5, 5 * E(3, 2), 5 * E(3), 5, -5, 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), 5, 5, 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3, 2), -5 * E(3), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5, -5, 0, 0, 0, 0], [5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5, 5, -5, 5, 5, -5, 5, -5, -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5, -5, -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), 5 * E(3), 5, -5, 0, 0, 0, 0], [5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5, 5, -5, 5, 5, -5, 5, -5, -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5, -5, -5 * E(3), 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5, -5, 0, 0, 0, 0], [5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5, 5, -5, 5, -5, 5, 5, -5, 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), -5, 5, 5 * E(3, 2), -5 * E(3), 5 * E(3, 2), -5 * E(3), -5, 5, 0, 0, 0, 0], [5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5, 5, -5, 5, -5, 5, 5, -5, 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5, 5, 5 * E(3), -5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5, 5, 0, 0, 0, 0], [-5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3, 2), 5 * E(3), 5, -5, 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3, 2), -5 * E(3), 5 * E(3), 5 * E(3, 2), 5, 5, -5, -5, 5 * E(3), -5 * E(3, 2), -5, 5, 5, -5, -5, -5, 0, 0, 0, 0], [5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3), -5 * E(3, 2), -5, 5, -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3), 5 * E(3, 2), -5 * E(3, 2), -5 * E(3), -5, -5, 5, 5, -5 * E(3, 2), 5 * E(3), 5, -5, -5, 5, 5, 5, 0, 0, 0, 0], [5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5, 5, -5, 5, 5, -5, -5, 5, 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5, 5, 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5, 5, 0, 0, 0, 0], [-5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5, -5, 5, -5, -5, 5, 5, -5, -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5, -5, -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5, -5, 0, 0, 0, 0], [5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5, 5, -5, 5, -5, 5, -5, 5, -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), 5, -5, -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5, -5, 0, 0, 0, 0], [-5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5 * E(3), -5 * E(3), -5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5 * E(3), 5 * E(3, 2), 5, -5, 5, -5, 5, -5, 5, -5, 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), 5 * E(3), 5 * E(3, 2), -5 * E(3), -5 * E(3, 2), -5, 5, 5 * E(3), -5 * E(3, 2), -5 * E(3), 5 * E(3, 2), 5, 5, 0, 0, 0, 0], [1, 1, -1, -1, -5, -5, -5, -5, 5, 5, 5, 5, 5, 1, 5, -5, 5, -5, 5, -5, 5, 5, -5, -5, 5, 5, -5, -5, -5, 5, 5, -5, -5, 5, -1, 5, 6, 6, 6, 6], [5, 5, 5, 5, 5, 5, -5, -5, -5, -5, -5, -5, -5, 5, -5, 5, 5, -5, -5, 5, 5, 5, -5, -5, -5, -5, 5, 5, -5, 5, 5, -5, -5, 5, 5, 5, 0, 0, 0, 0], [-6, -6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9 - 3 * ER(5), -6 - 6 * ER(5), -6 + 6 * ER(5), 9 + 3 * ER(5)], [-6, -6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, -6 - 6 * ER(5), 9 + 3 * ER(5), 9 - 3 * ER(5), -6 + 6 * ER(5)], [-6, -6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, -6 + 6 * ER(5), 9 - 3 * ER(5), 9 + 3 * ER(5), -6 - 6 * ER(5)], [-6, -6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 9 + 3 * ER(5), -6 + 6 * ER(5), -6 - 6 * ER(5), 9 - 3 * ER(5)]] // 30, :eigenvalues => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, J ^ 2, J ^ 2, J ^ 2, J ^ 2, J ^ 2, J ^ 2, -1, -1, -1, -1, J, J, J, J, -(J ^ 2), -(J ^ 2), -J, -J, J, J, 1, -1, E(5), E(5, 2), E(5, 3), E(5, 4)], :explanation => "mystery G32", :name => "?40", :special => 3, :cospecial => 4, :ennola => 1), [8, 5, 65, 62, 86, 83, 66, 63, 51, 50, 67, 70, 91, 92, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])), Family(((CHEVIE[:families])[:X])(6), [58, 75, 25, 78, 55, 227, 229, 225, 231, 30, 232, 226, 29, 230, 228], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1], :ennola => 1)), Family(((CHEVIE[:families])[:X])(3) * ((CHEVIE[:families])[:X])(3), [38, 42, 234, 39, 35, 233, 236, 235, 237], Dict{Symbol, Any}(:signs => [1, 1, -1, 1, 1, -1, -1, -1, 1], :ennola => 2)), Family("X5", [19, 31, 239, 238, 22], Dict{Symbol, Any}(:signs => [1, 1, -1, -1, 1], :ennola => 1)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(6)), [14, 7, 16, 4, 11, 240, 246, 244, 247, 2, 242, 243, 3, 245, 241], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1], :special => 13, :cospecial => 10, :ennola => 1))], :a => [0, 40, 40, 40, 15, 1, 40, 15, 1, 6, 40, 2, 6, 40, 2, 40, 4, 4, 30, 2, 12, 30, 2, 12, 20, 2, 6, 6, 20, 20, 30, 6, 12, 3, 25, 12, 3, 25, 25, 6, 5, 25, 6, 5, 5, 5, 12, 12, 4, 15, 15, 6, 12, 4, 20, 12, 4, 20, 12, 12, 4, 15, 15, 4, 15, 15, 15, 12, 5, 15, 12, 5, 6, 6, 20, 6, 6, 20, 12, 6, 6, 9, 15, 6, 9, 15, 9, 9, 12, 12, 15, 15, 8, 8, 8, 8, 6, 12, 12, 10, 10, 10, 1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 25, 25, 25, 25, 25, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40], :A => [0, 80, 80, 80, 75, 29, 80, 75, 29, 66, 80, 46, 66, 80, 46, 80, 56, 56, 78, 46, 72, 78, 46, 72, 76, 46, 66, 66, 76, 76, 78, 66, 72, 51, 77, 72, 51, 77, 77, 66, 61, 77, 66, 61, 61, 61, 72, 72, 56, 75, 75, 66, 72, 56, 76, 72, 56, 76, 72, 72, 56, 75, 75, 56, 75, 75, 75, 72, 61, 75, 72, 61, 66, 66, 76, 66, 66, 76, 72, 66, 66, 69, 75, 66, 69, 75, 69, 69, 72, 72, 75, 75, 67, 67, 67, 67, 66, 72, 72, 70, 70, 70, 29, 46, 46, 46, 46, 51, 56, 56, 56, 56, 56, 56, 56, 56, 61, 61, 61, 61, 61, 61, 61, 61, 61, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 80, 80, 80, 80, 80, 80, 80, 80])
    end)
chevieset(:G33, :PrintDiagram, function (indices, title)
        local s
        print(title, " ")
        s = pad("", length(title) - 5)
        print("    ", indices[3], "\n       /^\\\n", s, indices[1], "---", indices[2], "---", indices[4], "---", indices[5], " ", IntListToString(indices[[4, 2, 3, 4, 2, 3]]), "==", IntListToString(indices[[3, 4, 2, 3, 4, 2]]), "\n")
    end)
chevieset(:G33, :BraidRelations, [[[1, 2, 1], [2, 1, 2]], [[3, 2, 3], [2, 3, 2]], [[4, 2, 4], [2, 4, 2]], [[4, 3, 4], [3, 4, 3]], [[4, 5, 4], [5, 4, 5]], [[1, 3], [3, 1]], [[1, 4], [4, 1]], [[1, 5], [5, 1]], [[2, 5], [5, 2]], [[3, 5], [5, 3]], [[4, 2, 3, 4, 2, 3], [3, 4, 2, 3, 4, 2]]])
chevieset(:G33, :AltPres, [Dict{Symbol, Any}(:gens => [[1], [2], [-4, 3, 4], [5, 4, -5], [5]], :rels => [[[1, 2, 1], [2, 1, 2]], [[3, 2, 3], [2, 3, 2]], [[4, 2, 4], [2, 4, 2]], [[4, 5, 4], [5, 4, 5]], [[3, 5, 3], [5, 3, 5]], [[1, 3], [3, 1]], [[1, 4], [4, 1]], [[1, 5], [5, 1]], [[2, 5], [5, 2]], [[3, 4], [4, 3]], [[4, 5, 3, 2, 4, 5, 3, 2, 4], [2, 4, 5, 3, 2, 4, 5, 3, 2]]]), Dict{Symbol, Any}(:gens => [[1], [2], [3], [-3, -2, 4, 2, 3], [5]], :rels => [[[4, 2, 4], [2, 4, 2]], [[4, 5, 4], [5, 4, 5]], [[4, 3, 4], [3, 4, 3]], [[4, 1, 4], [1, 4, 1]], [[3, 2, 3], [2, 3, 2]], [[1, 2, 1], [2, 1, 2]], [[1, 3], [3, 1]], [[3, 5], [5, 3]], [[1, 5], [5, 1]], [[2, 5], [5, 2]], [[1, 2, 3, 4, 1, 2], [2, 3, 4, 1, 2, 3]]])])
chevieset(:G33, :GeneratingRoots, [[ER(-3), -(ER(-3)), 0, 0, 0], [0, ER(-3), 0, 0, -(ER(-3))], [0, 0, 0, -(ER(-3)), ER(-3)], [0, 0, 0, (3 + ER(-3)) // 2, (3 - ER(-3)) // 2], [-1, -1, 2, -1, -1]])
chevieset(:G33, :GeneratingCoRoots, [[-(ER(-3)), ER(-3), 0, 0, 0], [0, -(ER(-3)), 0, 0, ER(-3)], [0, 0, 0, ER(-3), -(ER(-3))], [0, 0, 0, (3 - ER(-3)) // 2, (3 + ER(-3)) // 2], [-1, -1, 1, -1, -1]] // 3)
chevieset(:G33, :CartanMat, function ()
        return chevieget(:G33, :GeneratingCoRoots) * TransposedMat(chevieget(:G33, :GeneratingRoots))
    end)
chevieset(:G33, :EigenvaluesGeneratingReflections, [1 // 2, 1 // 2, 1 // 2, 1 // 2, 1 // 2])
chevieset(:G33, :Size, 51840)
chevieset(:G33, :ReflectionDegrees, [4, 6, 10, 12, 18])
chevieset(:G33, :NrConjugacyClasses, 40)
chevieset(:G33, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3]], [1:3, [1, 3, 5], [1, 3, 4], 2:4], [[1, 2, 3, 5], [1, 3, 5, 10], 1:4, [1, 2, 4, 5]], [1:5]]
        return t[s + 1]
    end)
chevieset(:G33, :ClassNames, [".", "1", "31", "12", "123", "234", "243", "341", "531", "1245", "1234", "1243", "5123", "ccccc", "c", "125z", "342312", "342342", "432432", "c4213", "5432412", "3452412", "3423412", "2431243", "34523412", "52431243", "453423121", "3124512342", "5342312432", "5423124321", "423124123121", "3245124324524", "32451243245124", "23452412345241", "z342342", "345243124532412", "ccc", "12z", "1z", "z"])
chevieset(:G33, :WordsClassRepresentatives, map((x->begin
                Replace(x, ".", [], "1", [1], "2", [2], "3", [3], "4", [4], "5", [5], "z", "ccccccccc", "c", [5, 4, 2, 1, 3])
            end), chevieget(:G33, :ClassNames)))
chevieset(:G33, :PowerMaps, [nothing, [1, 1, 1, 4, 3, 18, 19, 4, 1, 10, 12, 11, 3, 12, 11, 4, 31, 19, 18, 10, 33, 34, 31, 31, 34, 33, 31, 31, 39, 31, 31, 31, 19, 18, 19, 39, 18, 4, 1, 1], [1, 2, 3, 1, 5, 2, 2, 2, 9, 10, 18, 19, 13, 35, 37, 39, 3, 1, 1, 20, 36, 36, 2, 2, 29, 29, 40, 39, 29, 39, 1, 9, 39, 39, 40, 36, 40, 40, 39, 40], nothing, [1, 2, 3, 4, 5, 7, 6, 8, 9, 1, 12, 11, 13, 15, 14, 16, 17, 19, 18, 40, 22, 21, 24, 23, 26, 25, 27, 30, 29, 28, 31, 32, 34, 33, 37, 36, 35, 38, 39, 40], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], nothing, nothing, nothing, [1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 12, 11, 13, 15, 14, 16, 17, 19, 18, 20, 22, 21, 24, 23, 26, 25, 27, 30, 29, 28, 31, 32, 34, 33, 37, 36, 35, 38, 39, 40], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], nothing, nothing, nothing, [1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 12, 11, 13, 15, 14, 16, 17, 19, 18, 20, 22, 21, 24, 23, 26, 25, 27, 30, 29, 28, 31, 32, 34, 33, 37, 36, 35, 38, 39, 40]])
chevieset(:G33, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G33, :WordsClassRepresentatives), :classnames => chevieget(:G33, :ClassNames), :classparams => chevieget(:G33, :ClassNames), :orders => [1, 2, 2, 3, 4, 6, 6, 6, 2, 5, 9, 9, 4, 18, 18, 6, 6, 3, 3, 10, 12, 12, 6, 6, 12, 12, 6, 6, 4, 6, 3, 6, 6, 6, 6, 4, 6, 6, 2, 2], :classes => [1, 45, 270, 480, 3240, 360, 360, 1440, 270, 5184, 2880, 2880, 3240, 2880, 2880, 1440, 2160, 40, 40, 5184, 2160, 2160, 720, 720, 2160, 2160, 240, 720, 540, 720, 240, 2160, 360, 360, 40, 540, 40, 480, 45, 1]))
chevieset(:G33, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 45], [5, 28], [5, 1], [5, 30], [5, 3], [6, 20], [6, 5], [10, 8, 2], [10, 17, 2], [10, 8, 1], [10, 17, 1], [15, 12], [15, 9], [15, 2], [15, 23], [20, 6], [20, 15], [24, 4], [24, 19], [30, 18], [30, 3], [30, 6], [30, 15], [30, 4], [30, 13], [40, 14, 1], [40, 5, 1], [40, 14, 2], [40, 5, 2], [45, 12], [45, 9], [45, 10], [45, 7], [60, 10], [60, 7], [64, 8], [64, 9], [81, 6], [81, 11]], :opdam => #= none:14 =# @perm_str("(37,38)"), :extRefl => [1, 4, 9, 12, 5, 2])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G33, :CycPolSchurElements, [[1, 0, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 9, 10, 12, 18], [1, -45, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 9, 10, 12, 18], [(3 + ER(-3)) // 2, -28, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 7 // 12, 5 // 18, 11 // 18, 17 // 18], [(3 - ER(-3)) // 2, -1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 11 // 12, 1 // 18, 7 // 18, 13 // 18], [(3 - ER(-3)) // 2, -28, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 11 // 12, 1 // 18, 7 // 18, 13 // 18], [(3 + ER(-3)) // 2, -1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 7 // 12, 5 // 18, 11 // 18, 17 // 18], [2, -18, 2, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6, 6], [2, -3, 2, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6, 6], [6 * E(3, 2), -4, 2, 2, 2, 2, 2, 3, 3, 3, 5 // 6, 5 // 6, 5 // 6, 1 // 18, 7 // 18, 13 // 18], [6 * E(3), -13, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 6, 1 // 6, 1 // 6, 5 // 18, 11 // 18, 17 // 18], [6 * E(3), -4, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 6, 1 // 6, 1 // 6, 5 // 18, 11 // 18, 17 // 18], [6 * E(3, 2), -13, 2, 2, 2, 2, 2, 3, 3, 3, 5 // 6, 5 // 6, 5 // 6, 1 // 18, 7 // 18, 13 // 18], [1, -12, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6], [1, -9, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6], [1, -2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 12], [1, -23, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 12], [3, -4, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6], [3, -13, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6], [2, -3, 2, 3, 3, 3, 4, 4, 5, 6, 12], [2, -18, 2, 3, 3, 3, 4, 4, 5, 6, 12], [2, -18, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 10], [2, -3, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 10], [-6 * E(3, 2), -4, 2, 2, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 6, 6, 6, 2 // 9, 5 // 9, 8 // 9], [-6 * E(3), -13, 2, 2, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 6, 6, 6, 1 // 9, 4 // 9, 7 // 9], [-6 * E(3), -4, 2, 2, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 6, 6, 6, 1 // 9, 4 // 9, 7 // 9], [-6 * E(3, 2), -13, 2, 2, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 6, 6, 6, 2 // 9, 5 // 9, 8 // 9], [3 - ER(-3), -13, 2, 3, 3, 3, 4, 4, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 12, 7 // 12], [3 + ER(-3), -4, 2, 3, 3, 3, 4, 4, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 5 // 12, 11 // 12], [3 + ER(-3), -13, 2, 3, 3, 3, 4, 4, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 5 // 12, 11 // 12], [3 - ER(-3), -4, 2, 3, 3, 3, 4, 4, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 12, 7 // 12], [(3 - ER(-3)) // 2, -10, 2, 2, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5 // 6, 5 // 6, 5 // 6, 1 // 12, 7 // 12], [(3 + ER(-3)) // 2, -7, 2, 2, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 4, 4, 1 // 6, 1 // 6, 1 // 6, 5 // 12, 11 // 12], [(3 + ER(-3)) // 2, -10, 2, 2, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 4, 4, 1 // 6, 1 // 6, 1 // 6, 5 // 12, 11 // 12], [(3 - ER(-3)) // 2, -7, 2, 2, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5 // 6, 5 // 6, 5 // 6, 1 // 12, 7 // 12], [1, -10, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6], [1, -7, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6], [2, -8, 3, 3, 3, 5, 9], [2, -8, 3, 3, 3, 5, 9], [1, -6, 2, 2, 2, 2, 2, 4, 4, 5, 10], [1, -11, 2, 2, 2, 2, 2, 4, 4, 5, 10]])
chevieset(:G33, :sparseFakeDegrees, [[1, 0], [1, 45], [1, 28, 1, 34, 1, 36, 1, 40, 1, 42], [1, 1, 1, 7, 1, 9, 1, 13, 1, 15], [1, 30, 1, 32, 1, 36, 1, 38, 1, 44], [1, 3, 1, 5, 1, 9, 1, 11, 1, 17], [1, 20, 1, 26, 1, 28, 1, 32, 1, 34, 1, 40], [1, 5, 1, 11, 1, 13, 1, 17, 1, 19, 1, 25], [1, 8, 1, 10, 1, 14, 2, 16, 1, 20, 2, 22, 1, 24, 1, 28], [1, 17, 1, 19, 1, 23, 2, 25, 1, 29, 2, 31, 1, 33, 1, 37], [1, 8, 1, 12, 2, 14, 1, 16, 2, 20, 1, 22, 1, 26, 1, 28], [1, 17, 1, 21, 2, 23, 1, 25, 2, 29, 1, 31, 1, 35, 1, 37], [1, 12, 1, 16, 2, 18, 1, 20, 1, 22, 3, 24, 1, 26, 1, 28, 2, 30, 1, 32, 1, 36], [1, 9, 1, 13, 2, 15, 1, 17, 1, 19, 3, 21, 1, 23, 1, 25, 2, 27, 1, 29, 1, 33], [1, 2, 1, 4, 1, 6, 2, 8, 2, 10, 1, 12, 2, 14, 2, 16, 1, 18, 1, 20, 1, 22], [1, 23, 1, 25, 1, 27, 2, 29, 2, 31, 1, 33, 2, 35, 2, 37, 1, 39, 1, 41, 1, 43], [1, 6, 1, 8, 1, 10, 2, 12, 2, 14, 2, 16, 2, 18, 2, 20, 2, 22, 2, 24, 1, 26, 1, 28, 1, 30], [1, 15, 1, 17, 1, 19, 2, 21, 2, 23, 2, 25, 2, 27, 2, 29, 2, 31, 2, 33, 1, 35, 1, 37, 1, 39], [1, 4, 2, 6, 1, 8, 2, 10, 4, 12, 2, 14, 2, 16, 4, 18, 2, 20, 1, 22, 2, 24, 1, 26], [1, 19, 2, 21, 1, 23, 2, 25, 4, 27, 2, 29, 2, 31, 4, 33, 2, 35, 1, 37, 2, 39, 1, 41], [1, 18, 1, 20, 2, 22, 3, 24, 3, 26, 3, 28, 4, 30, 3, 32, 3, 34, 3, 36, 2, 38, 1, 40, 1, 42], [1, 3, 1, 5, 2, 7, 3, 9, 3, 11, 3, 13, 4, 15, 3, 17, 3, 19, 3, 21, 2, 23, 1, 25, 1, 27], [1, 6, 2, 8, 1, 10, 3, 12, 4, 14, 2, 16, 3, 18, 5, 20, 2, 22, 2, 24, 3, 26, 1, 28, 1, 32], [1, 15, 2, 17, 1, 19, 3, 21, 4, 23, 2, 25, 3, 27, 5, 29, 2, 31, 2, 33, 3, 35, 1, 37, 1, 41], [1, 4, 1, 8, 3, 10, 2, 12, 2, 14, 5, 16, 3, 18, 2, 20, 4, 22, 3, 24, 1, 26, 2, 28, 1, 30], [1, 13, 1, 17, 3, 19, 2, 21, 2, 23, 5, 25, 3, 27, 2, 29, 4, 31, 3, 33, 1, 35, 2, 37, 1, 39], [1, 14, 2, 16, 1, 18, 3, 20, 5, 22, 3, 24, 4, 26, 6, 28, 4, 30, 3, 32, 4, 34, 2, 36, 1, 38, 1, 40], [1, 5, 2, 7, 1, 9, 3, 11, 5, 13, 3, 15, 4, 17, 6, 19, 4, 21, 3, 23, 4, 25, 2, 27, 1, 29, 1, 31], [1, 14, 1, 16, 2, 18, 4, 20, 3, 22, 4, 24, 6, 26, 4, 28, 3, 30, 5, 32, 3, 34, 1, 36, 2, 38, 1, 40], [1, 5, 1, 7, 2, 9, 4, 11, 3, 13, 4, 15, 6, 17, 4, 19, 3, 21, 5, 23, 3, 25, 1, 27, 2, 29, 1, 31], [2, 12, 2, 14, 2, 16, 5, 18, 5, 20, 3, 22, 6, 24, 6, 26, 3, 28, 4, 30, 4, 32, 1, 34, 1, 36, 1, 38], [2, 9, 2, 11, 2, 13, 5, 15, 5, 17, 3, 19, 6, 21, 6, 23, 3, 25, 4, 27, 4, 29, 1, 31, 1, 33, 1, 35], [1, 10, 1, 12, 1, 14, 4, 16, 4, 18, 3, 20, 6, 22, 6, 24, 3, 26, 5, 28, 5, 30, 2, 32, 2, 34, 2, 36], [1, 7, 1, 9, 1, 11, 4, 13, 4, 15, 3, 17, 6, 19, 6, 21, 3, 23, 5, 25, 5, 27, 2, 29, 2, 31, 2, 33], [1, 10, 2, 12, 2, 14, 4, 16, 6, 18, 5, 20, 6, 22, 8, 24, 6, 26, 5, 28, 6, 30, 4, 32, 2, 34, 2, 36, 1, 38], [1, 7, 2, 9, 2, 11, 4, 13, 6, 15, 5, 17, 6, 19, 8, 21, 6, 23, 5, 25, 6, 27, 4, 29, 2, 31, 2, 33, 1, 35], [1, 8, 1, 10, 2, 12, 5, 14, 5, 16, 5, 18, 8, 20, 8, 22, 5, 24, 7, 26, 7, 28, 3, 30, 3, 32, 3, 34, 1, 36], [1, 9, 3, 11, 3, 13, 3, 15, 7, 17, 7, 19, 5, 21, 8, 23, 8, 25, 5, 27, 5, 29, 5, 31, 2, 33, 1, 35, 1, 37], [1, 6, 2, 8, 4, 10, 5, 12, 7, 14, 8, 16, 9, 18, 9, 20, 9, 22, 8, 24, 7, 26, 5, 28, 4, 30, 2, 32, 1, 34], [1, 11, 2, 13, 4, 15, 5, 17, 7, 19, 8, 21, 9, 23, 9, 25, 9, 27, 8, 29, 7, 31, 5, 33, 4, 35, 2, 37, 1, 39]])
chevieset(:G33, :HeckeCharTable, function (para, root)
        local x, y, tbl, f1, f3, f7, f9, f13, f15, f17, f19, f21, f23, f27, f31, f35, f37, f39
        x = (para[1])[1]
        y = (para[1])[2]
        tbl = Dict{Symbol, Any}(:identifier => "H(G33)", :size => 51840, :order => 51840, :powermap => chevieget(:G33, :PowerMaps))
        Inherit(tbl, chevieget(:G33, :ClassInfo))
        f1 = function (x,)
                return [1, x, x ^ 2, x ^ 2, x ^ 3, x ^ 3, x ^ 3, x ^ 3, x ^ 3, x ^ 4, x ^ 4, x ^ 4, x ^ 4, x ^ 25, x ^ 5, x ^ 48, x ^ 6, x ^ 6, x ^ 6, x ^ 9, x ^ 7, x ^ 7, x ^ 7, x ^ 7, x ^ 8, x ^ 8, x ^ 9, x ^ 10, x ^ 10, x ^ 10, x ^ 12, x ^ 13, x ^ 14, x ^ 14, x ^ 51, x ^ 15, x ^ 15, x ^ 47, x ^ 46, x ^ 45]
            end
        f3 = function (x, y, j)
                return [5, x + 4y, 2 * x * y + 3 * y ^ 2, x * y + 3 * y ^ 2, x * y ^ 2 + 2 * y ^ 3, -(j ^ 2) * x * y ^ 2 + 2 * y ^ 3, j * x ^ 2 * y + 2 * y ^ 3, 2 * x * y ^ 2 + 2 * y ^ 3, 3 * x * y ^ 2 + 2 * y ^ 3, x * y ^ 3 + y ^ 4, -(j ^ 2) * x * y ^ 3 + y ^ 4, j * x ^ 2 * y ^ 2 + y ^ 4, 2 * x * y ^ 3 + y ^ 4, -j * x ^ 5 * y ^ 20, -(j ^ 2) * x * y ^ 4, 2 * x ^ 9 * y ^ 39 + 2 * x ^ 10 * y ^ 38, j * x * y ^ 5 + j * x ^ 2 * y ^ 4 + y ^ 6, 3 * j * x ^ 2 * y ^ 4 + 2 * y ^ 6, -2 * j ^ 2 * x * y ^ 5 + j ^ 2 * x ^ 4 * y ^ 2 + 2 * y ^ 6, 0, (j * x * y ^ 6 - j ^ 2 * x ^ 2 * y ^ 5) - j * x ^ 3 * y ^ 4, j * x * y ^ 6, 2 * j * x ^ 2 * y ^ 5 + y ^ 7, ((-2 * j ^ 2 * x * y ^ 6 + x ^ 2 * y ^ 5) - j * x ^ 3 * y ^ 4) + j ^ 2 * x ^ 4 * y ^ 3 + y ^ 7, j * x ^ 2 * y ^ 6, ((-2 * j ^ 2 * x * y ^ 7 + 2 * x ^ 2 * y ^ 6) - 2 * j * x ^ 3 * y ^ 5) + j ^ 2 * x ^ 4 * y ^ 4, j * x * y ^ 8 + j ^ 2 * x ^ 3 * y ^ 6, (j ^ 2 - j) * x ^ 3 * y ^ 7, (-(j ^ 2) - 2j) * x ^ 2 * y ^ 8 + (j ^ 2 - j) * x ^ 3 * y ^ 7 + j ^ 2 * x ^ 4 * y ^ 6, (-(j ^ 2) * x * y ^ 9 - 2 * j * x ^ 2 * y ^ 8) + (j ^ 2 - j) * x ^ 3 * y ^ 7 + j ^ 2 * x ^ 4 * y ^ 6, (j ^ 2 * x ^ 2 * y ^ 10 - 2 * j * x ^ 3 * y ^ 9) + j ^ 2 * x ^ 4 * y ^ 8 + y ^ 12, ((j ^ 2 - j) * x ^ 2 * y ^ 11 + (j ^ 2 - j) * x ^ 3 * y ^ 10 + j * x ^ 4 * y ^ 9) - j ^ 2 * x ^ 5 * y ^ 8, (3 * j ^ 2 * x ^ 2 * y ^ 12 - 2 * x ^ 3 * y ^ 11) + (-2 * j ^ 2 + j) * x ^ 4 * y ^ 10 + 2 * x ^ 5 * y ^ 9 + j ^ 2 * x ^ 6 * y ^ 8, j ^ 2 * x ^ 2 * y ^ 12 - 2 * j * x ^ 3 * y ^ 11, 2 * x ^ 9 * y ^ 42 + 3 * j * x ^ 11 * y ^ 40, ((3 * j ^ 2 + j) * x ^ 2 * y ^ 13 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 12 + (-(j ^ 2) + j) * x ^ 4 * y ^ 11) - j ^ 2 * x ^ 5 * y ^ 10, (j ^ 2 - 2j) * x ^ 3 * y ^ 12, 3 * x ^ 9 * y ^ 38 + x ^ 10 * y ^ 37, 4 * x ^ 9 * y ^ 37 + x ^ 10 * y ^ 36, 5 * x ^ 9 * y ^ 36]
            end
        f7 = function (x, y)
                return [6, 2x + 4y, 2 * x * y + x ^ 2 + 3 * y ^ 2, 2 * x * y + 2 * y ^ 2, x * y ^ 2 + y ^ 3, x * y ^ 2, -(x ^ 2) * y, x * y ^ 2 + x ^ 2 * y + 2 * y ^ 3, 3 * x * y ^ 2 + x ^ 3 + 2 * y ^ 3, y ^ 4, 0, -x * y ^ 3 - x ^ 2 * y ^ 2, x * y ^ 3 + y ^ 4, 0, 0, 2 * x ^ 15 * y ^ 33 + x ^ 16 * y ^ 32 + x ^ 17 * y ^ 31, -(x ^ 2) * y ^ 4, -3 * x ^ 2 * y ^ 4, 2 * x * y ^ 5 - x ^ 4 * y ^ 2, x ^ 3 * y ^ 6, (x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4) - x ^ 5 * y ^ 2, x ^ 2 * y ^ 5, -(x ^ 2) * y ^ 5, ((2 * x * y ^ 6 + 2 * x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, x ^ 3 * y ^ 5, ((2 * x * y ^ 7 + 3 * x ^ 2 * y ^ 6 + 3 * x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3, x * y ^ 8 + 2 * x ^ 3 * y ^ 6, -(x ^ 5) * y ^ 5, (x ^ 2 * y ^ 8 - x ^ 4 * y ^ 6) - 2 * x ^ 5 * y ^ 5, ((x * y ^ 9 + x ^ 2 * y ^ 8) - x ^ 4 * y ^ 6) - 2 * x ^ 5 * y ^ 5, (-2 * x ^ 3 * y ^ 9 - x ^ 4 * y ^ 8) - 2 * x ^ 5 * y ^ 7, ((-2 * x ^ 3 * y ^ 10 - 2 * x ^ 4 * y ^ 9) - x ^ 5 * y ^ 8) + x ^ 6 * y ^ 7 + x ^ 7 * y ^ 6, (((-2 * x ^ 3 * y ^ 11 - x ^ 4 * y ^ 10) + 2 * x ^ 5 * y ^ 9 + 3 * x ^ 6 * y ^ 8) - 2 * x ^ 8 * y ^ 6) + x ^ 10 * y ^ 4, -(x ^ 4) * y ^ 10 - 2 * x ^ 5 * y ^ 9, -3 * x ^ 17 * y ^ 34, -(x ^ 4) * y ^ 11 + 3 * x ^ 5 * y ^ 10 + 3 * x ^ 6 * y ^ 9 + x ^ 7 * y ^ 8, -3 * x ^ 5 * y ^ 10, 2 * x ^ 15 * y ^ 32 + 2 * x ^ 16 * y ^ 31, 4 * x ^ 15 * y ^ 31 + 2 * x ^ 16 * y ^ 30, 6 * x ^ 15 * y ^ 30]
            end
        f9 = function (x, y, j)
                return [10, 6x + 4y, 6 * x * y + 3 * x ^ 2 + y ^ 2, 3 * x * y + 3 * x ^ 2 + y ^ 2, x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, (-j * x * y ^ 2 - 2 * j ^ 2 * x ^ 2 * y) + x ^ 3, 2 * j * x * y ^ 2 + j ^ 2 * x ^ 2 * y + x ^ 3, 2 * x * y ^ 2 + 4 * x ^ 2 * y + x ^ 3, 3 * x * y ^ 2 + 6 * x ^ 2 * y + x ^ 3, x ^ 2 * y ^ 2 + x ^ 3 * y, -(j ^ 2) * x ^ 3 * y, j * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, j ^ 2 * x ^ 15 * y ^ 10, j * x ^ 3 * y ^ 2, 2 * x ^ 28 * y ^ 20 + 4 * x ^ 29 * y ^ 19 + x ^ 30 * y ^ 18, -(x ^ 3) * y ^ 3 + j * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 3 * j ^ 2 * x ^ 2 * y ^ 4 + 6 * j * x ^ 4 * y ^ 2 + x ^ 6, ((-2 * j * x * y ^ 5 + 2 * j ^ 2 * x ^ 2 * y ^ 4 + j * x ^ 4 * y ^ 2) - 4 * j ^ 2 * x ^ 5 * y) + x ^ 6, 0, -(j ^ 2) * x ^ 5 * y ^ 2, j * x ^ 4 * y ^ 3, j ^ 2 * x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3 + 2 * j * x ^ 5 * y ^ 2, ((((j ^ 2 - j) * x ^ 2 * y ^ 5 - 2 * j * x ^ 3 * y ^ 4) + 2 * x ^ 4 * y ^ 3) - 2 * j ^ 2 * x ^ 5 * y ^ 2) - 2 * j ^ 2 * x ^ 6 * y, j * x ^ 5 * y ^ 3, (2 * j ^ 2 - j) * x ^ 3 * y ^ 5 + (-2 * j ^ 2 - 5j) * x ^ 4 * y ^ 4 + (-5 * j ^ 2 - 3j) * x ^ 5 * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 6 * y ^ 2, x ^ 5 * y ^ 4, -(x ^ 4) * y ^ 6 + j ^ 2 * x ^ 6 * y ^ 4 + j ^ 2 * x ^ 7 * y ^ 3, (2 * j ^ 2 + j) * x ^ 5 * y ^ 5 + (j ^ 2 - j) * x ^ 6 * y ^ 4 + j ^ 2 * x ^ 7 * y ^ 3, (-(x ^ 5) * y ^ 5 + 2 * j ^ 2 * x ^ 6 * y ^ 4) - 2 * j * x ^ 7 * y ^ 3, ((((-2 * x ^ 5 * y ^ 7 - x ^ 6 * y ^ 6) - 2 * x ^ 7 * y ^ 5) + j ^ 2 * x ^ 8 * y ^ 4) - 2 * j * x ^ 9 * y ^ 3) + j ^ 2 * x ^ 10 * y ^ 2, (x ^ 5 * y ^ 8 + 2 * j ^ 2 * x ^ 7 * y ^ 6 + (2 * j ^ 2 + j) * x ^ 8 * y ^ 5 + (j ^ 2 + 2j) * x ^ 9 * y ^ 4) - x ^ 10 * y ^ 3, (((-2 * j ^ 2 * x ^ 6 * y ^ 8 - 2 * x ^ 7 * y ^ 7) + 4 * j ^ 2 * x ^ 8 * y ^ 6) - 2 * j * x ^ 9 * y ^ 5) + (-2 * j ^ 2 + j) * x ^ 10 * y ^ 4, 3 * j ^ 2 * x ^ 8 * y ^ 6 - 2 * x ^ 9 * y ^ 5, 3 * j ^ 2 * x ^ 29 * y ^ 22 + 6 * j * x ^ 31 * y ^ 20 + x ^ 33 * y ^ 18, ((2 * x ^ 7 * y ^ 8 - j * x ^ 8 * y ^ 7) + 2 * j ^ 2 * x ^ 9 * y ^ 6 + j * x ^ 10 * y ^ 5) - 2 * j ^ 2 * x ^ 11 * y ^ 4, (5 * j ^ 2 + 2j) * x ^ 9 * y ^ 6, x ^ 27 * y ^ 20 + 3 * x ^ 28 * y ^ 19 + 3 * x ^ 29 * y ^ 18, 4 * x ^ 27 * y ^ 19 + 6 * x ^ 28 * y ^ 18, 10 * x ^ 27 * y ^ 18]
            end
        f13 = function (x, y)
                return [15, 7x + 8y, 8 * x * y + 3 * x ^ 2 + 4 * y ^ 2, 5 * x * y + 2 * x ^ 2 + 3 * y ^ 2, 2 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, x * y ^ 2 + x ^ 3, -(x ^ 2) * y - y ^ 3, 5 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 6 * x * y ^ 2 + 6 * x ^ 2 * y + x ^ 3 + 2 * y ^ 3, x * y ^ 3 + x ^ 2 * y ^ 2, 0, ((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 0, 0, x ^ 21 * y ^ 27 + 5 * x ^ 22 * y ^ 26 + 3 * x ^ 23 * y ^ 25 + x ^ 24 * y ^ 24, (-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, (-3 * x ^ 2 * y ^ 4 - 8 * x ^ 3 * y ^ 3) + x ^ 6, ((2 * x * y ^ 5 - 6 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) + 2 * x ^ 6 + y ^ 6, 0, x * y ^ 6 + x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3, 0, -2 * x ^ 3 * y ^ 4 - x ^ 4 * y ^ 3, (((2 * x * y ^ 6 + 3 * x ^ 2 * y ^ 5) - 2 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) + y ^ 7, 0, ((((2 * x * y ^ 7 + 3 * x ^ 2 * y ^ 6 + 2 * x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + y ^ 8, x ^ 3 * y ^ 6 + x ^ 5 * y ^ 4 + x ^ 7 * y ^ 2, x ^ 7 * y ^ 3, ((x ^ 2 * y ^ 8 + x ^ 4 * y ^ 6) - x ^ 5 * y ^ 5) + x ^ 7 * y ^ 3 + x ^ 8 * y ^ 2, (-2 * x ^ 4 * y ^ 6 - x ^ 5 * y ^ 5) + x ^ 7 * y ^ 3 + x ^ 8 * y ^ 2, ((-(x ^ 4) * y ^ 8 - 2 * x ^ 5 * y ^ 7) - x ^ 6 * y ^ 6) + 3 * x ^ 8 * y ^ 4, x ^ 4 * y ^ 9 + 4 * x ^ 5 * y ^ 8 + 6 * x ^ 6 * y ^ 7 + 3 * x ^ 7 * y ^ 6 + x ^ 8 * y ^ 5, ((x ^ 2 * y ^ 12 + 2 * x ^ 3 * y ^ 11 + 3 * x ^ 4 * y ^ 10 + 6 * x ^ 5 * y ^ 9 + 9 * x ^ 6 * y ^ 8 + 4 * x ^ 7 * y ^ 7) - x ^ 8 * y ^ 6) - 2 * x ^ 9 * y ^ 5, 4 * x ^ 6 * y ^ 8 + 2 * x ^ 7 * y ^ 7, (-3 * x ^ 23 * y ^ 28 - 8 * x ^ 24 * y ^ 27) + x ^ 27 * y ^ 24, (((-(x ^ 4) * y ^ 11 + x ^ 5 * y ^ 10 + 4 * x ^ 6 * y ^ 9 + 5 * x ^ 7 * y ^ 8) - 2 * x ^ 8 * y ^ 7) - 3 * x ^ 9 * y ^ 6) - x ^ 10 * y ^ 5, 6 * x ^ 7 * y ^ 8, 3 * x ^ 21 * y ^ 26 + 5 * x ^ 22 * y ^ 25 + 2 * x ^ 23 * y ^ 24, 8 * x ^ 21 * y ^ 25 + 7 * x ^ 22 * y ^ 24, 15 * x ^ 21 * y ^ 24]
            end
        f15 = function (x, y)
                return [15, 11x + 4y, 6 * x * y + 8 * x ^ 2 + y ^ 2, 4 * x * y + 7 * x ^ 2, 3 * x ^ 2 * y + 4 * x ^ 3, 2 * x ^ 2 * y + 3 * x ^ 3, -2 * x * y ^ 2 + 3 * x ^ 3, x * y ^ 2 + 5 * x ^ 2 * y + 5 * x ^ 3, 3 * x * y ^ 2 + 6 * x ^ 2 * y + 6 * x ^ 3, 2 * x ^ 3 * y + 2 * x ^ 4, x ^ 3 * y + x ^ 4, (-2 * x ^ 2 * y ^ 2 - x ^ 3 * y) + x ^ 4, x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + 3 * x ^ 4, 0, 0, x ^ 34 * y ^ 14 + 5 * x ^ 35 * y ^ 13 + 5 * x ^ 36 * y ^ 12, (-2 * x ^ 4 * y ^ 2 - x ^ 5 * y) + x ^ 6, -6 * x ^ 4 * y ^ 2 + 3 * x ^ 6, -2 * x ^ 2 * y ^ 4 + 4 * x ^ 5 * y + 3 * x ^ 6, 0, -(x ^ 3) * y ^ 4 + x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, -(x ^ 5) * y ^ 2, -3 * x ^ 5 * y ^ 2 + x ^ 7, (-(x ^ 2) * y ^ 5 - 2 * x ^ 3 * y ^ 4) + 2 * x ^ 4 * y ^ 3 + 4 * x ^ 5 * y ^ 2 + 4 * x ^ 6 * y + x ^ 7, -(x ^ 6) * y ^ 2, (-(x ^ 3) * y ^ 5 - 2 * x ^ 4 * y ^ 4) + 3 * x ^ 5 * y ^ 3 + 7 * x ^ 6 * y ^ 2 + 4 * x ^ 7 * y, -(x ^ 5) * y ^ 4 + x ^ 7 * y ^ 2, -2 * x ^ 6 * y ^ 4, (-(x ^ 5) * y ^ 5 - 3 * x ^ 6 * y ^ 4) + x ^ 7 * y ^ 3 + 2 * x ^ 8 * y ^ 2, (-(x ^ 5) * y ^ 5 - 3 * x ^ 6 * y ^ 4) + 2 * x ^ 8 * y ^ 2 + 2 * x ^ 9 * y, ((-2 * x ^ 7 * y ^ 5 - 2 * x ^ 8 * y ^ 4) - x ^ 10 * y ^ 2) + x ^ 12, (((2 * x ^ 7 * y ^ 6 + 2 * x ^ 8 * y ^ 5) - 2 * x ^ 9 * y ^ 4) - 4 * x ^ 10 * y ^ 3) - 2 * x ^ 11 * y ^ 2, ((((x ^ 6 * y ^ 8 - 2 * x ^ 7 * y ^ 7) - x ^ 8 * y ^ 6) + 4 * x ^ 9 * y ^ 5 + 3 * x ^ 10 * y ^ 4) - 4 * x ^ 11 * y ^ 3) - 4 * x ^ 12 * y ^ 2, -(x ^ 10) * y ^ 4 - 2 * x ^ 11 * y ^ 3, -6 * x ^ 37 * y ^ 14 + 3 * x ^ 39 * y ^ 12, ((x ^ 9 * y ^ 6 + 3 * x ^ 10 * y ^ 5) - 3 * x ^ 12 * y ^ 3) - 2 * x ^ 13 * y ^ 2, -3 * x ^ 11 * y ^ 4, 4 * x ^ 34 * y ^ 13 + 7 * x ^ 35 * y ^ 12, 4 * x ^ 33 * y ^ 13 + 11 * x ^ 34 * y ^ 12, 15 * x ^ 33 * y ^ 12]
            end
        f17 = function (x, y)
                return [20, 12x + 8y, 8 * x * y + 8 * x ^ 2 + 4 * y ^ 2, 7 * x * y + 5 * x ^ 2 + y ^ 2, x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3, 2 * x ^ 2 * y, (-2 * x * y ^ 2 - x ^ 3) - y ^ 3, 3 * x * y ^ 2 + 5 * x ^ 2 * y + 4 * x ^ 3 + y ^ 3, 6 * x * y ^ 2 + 6 * x ^ 2 * y + 6 * x ^ 3 + 2 * y ^ 3, x ^ 3 * y + x ^ 4, -(x ^ 2) * y ^ 2, ((-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + 2 * x ^ 4, -(x ^ 15) * y ^ 10, -(x ^ 3) * y ^ 2, x ^ 27 * y ^ 21 + 3 * x ^ 28 * y ^ 20 + 5 * x ^ 29 * y ^ 19 + 4 * x ^ 30 * y ^ 18, -3 * x ^ 3 * y ^ 3 - 2 * x ^ 4 * y ^ 2, -8 * x ^ 3 * y ^ 3 - 6 * x ^ 4 * y ^ 2, (-2 * x ^ 2 * y ^ 4 - 6 * x ^ 3 * y ^ 3) + 4 * x ^ 5 * y + x ^ 6 + y ^ 6, 0, x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 0, (-(x ^ 3) * y ^ 4 - 3 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, (-2 * x ^ 2 * y ^ 5 - 3 * x ^ 3 * y ^ 4) + 5 * x ^ 5 * y ^ 2 + 4 * x ^ 6 * y + x ^ 7, 0, ((-(x ^ 2) * y ^ 6 - 3 * x ^ 3 * y ^ 5) - 2 * x ^ 4 * y ^ 4) + 3 * x ^ 5 * y ^ 3 + 6 * x ^ 6 * y ^ 2 + 4 * x ^ 7 * y + x ^ 8, x ^ 3 * y ^ 6 + 2 * x ^ 5 * y ^ 4 + 2 * x ^ 7 * y ^ 2, (x ^ 4 * y ^ 6 - x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3, (((x ^ 3 * y ^ 7 + x ^ 4 * y ^ 6) - 2 * x ^ 5 * y ^ 5) - 2 * x ^ 6 * y ^ 4) + x ^ 7 * y ^ 3 + x ^ 8 * y ^ 2, ((((x ^ 3 * y ^ 7 + x ^ 4 * y ^ 6) - 2 * x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3) + x ^ 8 * y ^ 2, ((x ^ 6 * y ^ 6 - 4 * x ^ 7 * y ^ 5) - 2 * x ^ 8 * y ^ 4) - 2 * x ^ 9 * y ^ 3, 2 * x ^ 6 * y ^ 7 + 4 * x ^ 7 * y ^ 6 + 3 * x ^ 8 * y ^ 5 + 2 * x ^ 9 * y ^ 4, -2 * x ^ 6 * y ^ 8 + 5 * x ^ 8 * y ^ 6 + 8 * x ^ 9 * y ^ 5 + 6 * x ^ 10 * y ^ 4 + 4 * x ^ 11 * y ^ 3 + x ^ 12 * y ^ 2, 2 * x ^ 9 * y ^ 5, -8 * x ^ 30 * y ^ 21 - 6 * x ^ 31 * y ^ 20, (-(x ^ 6) * y ^ 9 - 2 * x ^ 7 * y ^ 8) + 4 * x ^ 9 * y ^ 6 + 5 * x ^ 10 * y ^ 5 + 2 * x ^ 11 * y ^ 4, 2 * x ^ 9 * y ^ 6, x ^ 27 * y ^ 20 + 7 * x ^ 28 * y ^ 19 + 5 * x ^ 29 * y ^ 18, 8 * x ^ 27 * y ^ 19 + 12 * x ^ 28 * y ^ 18, 20 * x ^ 27 * y ^ 18]
            end
        f19 = function (x, y)
                return [24, 16x + 8y, 12 * x * y + 10 * x ^ 2 + 2 * y ^ 2, 7 * x * y + 9 * x ^ 2 + y ^ 2, x * y ^ 2 + 5 * x ^ 2 * y + 4 * x ^ 3, 2 * x ^ 2 * y + 4 * x ^ 3, (-2 * x * y ^ 2 + 3 * x ^ 3) - y ^ 3, 3 * x * y ^ 2 + 9 * x ^ 2 * y + 5 * x ^ 3, 6 * x * y ^ 2 + 12 * x ^ 2 * y + 6 * x ^ 3, x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, x ^ 3 * y + x ^ 4, (-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 3 * x ^ 2 * y ^ 2 + 5 * x ^ 3 * y + 2 * x ^ 4, 0, 0, (-3 * x ^ 31 * y ^ 17 - 9 * x ^ 32 * y ^ 16) - 5 * x ^ 33 * y ^ 15, ((-(x ^ 3) * y ^ 3 - 3 * x ^ 4 * y ^ 2) - x ^ 5 * y) + x ^ 6, (-8 * x ^ 3 * y ^ 3 - 6 * x ^ 4 * y ^ 2) + 4 * x ^ 6, (-2 * x ^ 2 * y ^ 4 - 6 * x ^ 3 * y ^ 3) + 4 * x ^ 5 * y + 5 * x ^ 6 + y ^ 6, x ^ 6 * y ^ 3, -(x ^ 2) * y ^ 5 + x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2 + x ^ 6 * y, 0, (-3 * x ^ 4 * y ^ 3 - 2 * x ^ 5 * y ^ 2) + x ^ 7, (-(x ^ 2) * y ^ 5 - 2 * x ^ 3 * y ^ 4) + 5 * x ^ 5 * y ^ 2 + 4 * x ^ 6 * y + 2 * x ^ 7, 0, (-2 * x ^ 3 * y ^ 5 - 2 * x ^ 4 * y ^ 4) + 4 * x ^ 5 * y ^ 3 + 7 * x ^ 6 * y ^ 2 + 4 * x ^ 7 * y + x ^ 8, -(x ^ 4) * y ^ 5 + x ^ 6 * y ^ 3, (-2 * x ^ 5 * y ^ 5 - x ^ 7 * y ^ 3) - x ^ 8 * y ^ 2, ((-(x ^ 4) * y ^ 6 - 3 * x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3, (((-(x ^ 4) * y ^ 6 - 3 * x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4) - 2 * x ^ 7 * y ^ 3) + x ^ 8 * y ^ 2, (((-(x ^ 6) * y ^ 6 - 2 * x ^ 7 * y ^ 5) + x ^ 8 * y ^ 4 + 2 * x ^ 9 * y ^ 3) - x ^ 10 * y ^ 2) + x ^ 12, ((((x ^ 6 * y ^ 7 + 2 * x ^ 7 * y ^ 6) - x ^ 8 * y ^ 5) - 4 * x ^ 9 * y ^ 4) - 3 * x ^ 10 * y ^ 3) - x ^ 11 * y ^ 2, (x ^ 4 * y ^ 10 - 2 * x ^ 7 * y ^ 7) + x ^ 8 * y ^ 6 + 4 * x ^ 9 * y ^ 5 + x ^ 10 * y ^ 4 + x ^ 12 * y ^ 2, -4 * x ^ 9 * y ^ 5 - 2 * x ^ 10 * y ^ 4, (8 * x ^ 33 * y ^ 18 + 6 * x ^ 34 * y ^ 17) - 4 * x ^ 36 * y ^ 15, x ^ 8 * y ^ 7 + 2 * x ^ 9 * y ^ 6 + x ^ 10 * y ^ 5 + x ^ 11 * y ^ 4 + 2 * x ^ 12 * y ^ 3 + x ^ 13 * y ^ 2, -6 * x ^ 10 * y ^ 5, (-(x ^ 30) * y ^ 17 - 7 * x ^ 31 * y ^ 16) - 9 * x ^ 32 * y ^ 15, -8 * x ^ 30 * y ^ 16 - 16 * x ^ 31 * y ^ 15, -24 * x ^ 30 * y ^ 15]
            end
        f21 = function (x, y)
                return [30, 10x + 20y, 14 * x * y + 3 * x ^ 2 + 13 * y ^ 2, 9 * x * y + x ^ 2 + 11 * y ^ 2, 6 * x * y ^ 2 + x ^ 2 * y + 5 * y ^ 3, 3 * x * y ^ 2 + 4 * y ^ 3, (-3 * x ^ 2 * y - x ^ 3) + 3 * y ^ 3, 10 * x * y ^ 2 + 4 * x ^ 2 * y + 7 * y ^ 3, 15 * x * y ^ 2 + 6 * x ^ 2 * y + x ^ 3 + 8 * y ^ 3, 3 * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * y ^ 4, x * y ^ 3 + y ^ 4, (-2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y, 6 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 3 * y ^ 4, 0, 0, 7 * x ^ 15 * y ^ 33 + 10 * x ^ 16 * y ^ 32 + 4 * x ^ 17 * y ^ 31, ((-x * y ^ 5 - 4 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + y ^ 6, (-9 * x ^ 2 * y ^ 4 - 8 * x ^ 3 * y ^ 3) + 4 * y ^ 6, ((6 * x * y ^ 5 - 6 * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2) + x ^ 6 + 5 * y ^ 6, 0, x * y ^ 6 + 2 * x ^ 2 * y ^ 5 + 2 * x ^ 3 * y ^ 4, -(x ^ 2) * y ^ 5, (-3 * x ^ 2 * y ^ 5 - 3 * x ^ 3 * y ^ 4) + y ^ 7, (((6 * x * y ^ 6 + 7 * x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4) - 3 * x ^ 4 * y ^ 3) - 2 * x ^ 5 * y ^ 2) + 2 * y ^ 7, -(x ^ 3) * y ^ 5, (((6 * x * y ^ 7 + 10 * x ^ 2 * y ^ 6 + 3 * x ^ 3 * y ^ 5) - 3 * x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3) + y ^ 8, x * y ^ 8 + x ^ 3 * y ^ 6 + x ^ 5 * y ^ 4, (-(x ^ 2) * y ^ 8 - x ^ 3 * y ^ 7) + x ^ 5 * y ^ 5, ((x ^ 2 * y ^ 8 + x ^ 3 * y ^ 7) - 2 * x ^ 4 * y ^ 6) + x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4, ((x * y ^ 9 - 2 * x ^ 3 * y ^ 7) - 2 * x ^ 4 * y ^ 6) + x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4, ((-(x ^ 2) * y ^ 10 - 4 * x ^ 5 * y ^ 7) - x ^ 6 * y ^ 6) + y ^ 12, (-(x ^ 2) * y ^ 11 - x ^ 3 * y ^ 10) + 4 * x ^ 4 * y ^ 9 + 6 * x ^ 5 * y ^ 8 + 3 * x ^ 6 * y ^ 7, ((((x ^ 2 * y ^ 12 + 6 * x ^ 3 * y ^ 11 + 12 * x ^ 4 * y ^ 10 + 6 * x ^ 5 * y ^ 9) - 4 * x ^ 6 * y ^ 8) - 2 * x ^ 7 * y ^ 7) + 2 * x ^ 8 * y ^ 6) - 2 * x ^ 10 * y ^ 4, x ^ 4 * y ^ 10 + 2 * x ^ 5 * y ^ 9, (4 * x ^ 15 * y ^ 36 - 9 * x ^ 17 * y ^ 34) - 8 * x ^ 18 * y ^ 33, ((x ^ 2 * y ^ 13 + 2 * x ^ 3 * y ^ 12 + 4 * x ^ 4 * y ^ 11) - 3 * x ^ 6 * y ^ 9) - 2 * x ^ 7 * y ^ 8, 3 * x ^ 5 * y ^ 10, 11 * x ^ 15 * y ^ 32 + 9 * x ^ 16 * y ^ 31 + x ^ 17 * y ^ 30, 20 * x ^ 15 * y ^ 31 + 10 * x ^ 16 * y ^ 30, 30 * x ^ 15 * y ^ 30]
            end
        f23 = function (x, y, j)
                return [30, 18x + 12y, 14 * x * y + 11 * x ^ 2 + 5 * y ^ 2, 10 * x * y + 8 * x ^ 2 + 2 * y ^ 2, 2 * x * y ^ 2 + 5 * x ^ 2 * y + 3 * x ^ 3, -j * x * y ^ 2 + (-2 * j ^ 2 - 4j) * x ^ 2 * y + x ^ 3, ((4 * j ^ 2 + 2j) * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - y ^ 3, 5 * x * y ^ 2 + 9 * x ^ 2 * y + 5 * x ^ 3 + y ^ 3, 9 * x * y ^ 2 + 12 * x ^ 2 * y + 7 * x ^ 3 + 2 * y ^ 3, x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, -j * x ^ 2 * y ^ 2 - j * x ^ 3 * y, ((2 * j ^ 2 + j) * x * y ^ 3 + (4 * j ^ 2 + 2j) * x ^ 2 * y ^ 2 + (3 * j ^ 2 + 2j) * x ^ 3 * y) - x ^ 4, x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + 2 * x ^ 4, 0, 0, x ^ 27 * y ^ 21 + 5 * x ^ 28 * y ^ 20 + 9 * x ^ 29 * y ^ 19 + 5 * x ^ 30 * y ^ 18, -(x ^ 3) * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, (3 * j ^ 2 * x ^ 2 * y ^ 4 - 8 * x ^ 3 * y ^ 3) + (12 * j ^ 2 + 6j) * x ^ 4 * y ^ 2 + x ^ 6, ((-2 * j * x * y ^ 5 + (2 * j ^ 2 + 4j) * x ^ 2 * y ^ 4) - 6 * x ^ 3 * y ^ 3) + j * x ^ 4 * y ^ 2 + (-4 * j ^ 2 - 8j) * x ^ 5 * y + 2 * x ^ 6 + y ^ 6, 0, (((2 * j ^ 2 + j) * x ^ 2 * y ^ 5 + (j ^ 2 + 2j) * x ^ 3 * y ^ 4 + (-(j ^ 2) + 2j) * x ^ 4 * y ^ 3) - 2 * j ^ 2 * x ^ 5 * y ^ 2) + x ^ 6 * y, j * x ^ 4 * y ^ 3, -2 * x ^ 4 * y ^ 3 + (3 * j ^ 2 + j) * x ^ 5 * y ^ 2, (j ^ 2 + 3j) * x ^ 2 * y ^ 5 + (j ^ 2 + 6j) * x ^ 3 * y ^ 4 + (-3 * j ^ 2 + 2j) * x ^ 4 * y ^ 3 + (-7 * j ^ 2 - 5j) * x ^ 5 * y ^ 2 + (-4 * j ^ 2 - 6j) * x ^ 6 * y + x ^ 7, j * x ^ 5 * y ^ 3, -(x ^ 2) * y ^ 6 + (7 * j ^ 2 + 6j) * x ^ 3 * y ^ 5 + (10 * j ^ 2 + 11j) * x ^ 4 * y ^ 4 + (2 * j ^ 2 + 8j) * x ^ 5 * y ^ 3 + (-6 * j ^ 2 - j) * x ^ 6 * y ^ 2 + 4 * x ^ 7 * y + x ^ 8, (j * x ^ 3 * y ^ 6 + (2 * j ^ 2 + j) * x ^ 5 * y ^ 4) - x ^ 7 * y ^ 2, (-(j ^ 2) + j) * x ^ 4 * y ^ 6, ((j * x ^ 3 * y ^ 7 + j * x ^ 4 * y ^ 6 + (4 * j ^ 2 + 3j) * x ^ 5 * y ^ 5 + (4 * j ^ 2 + 3j) * x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3) + x ^ 8 * y ^ 2, j * x ^ 3 * y ^ 7 + j * x ^ 4 * y ^ 6 + (2 * j ^ 2 + j) * x ^ 5 * y ^ 5 + 5 * j ^ 2 * x ^ 6 * y ^ 4 + 3 * j ^ 2 * x ^ 7 * y ^ 3 + j ^ 2 * x ^ 8 * y ^ 2, -2 * j * x ^ 5 * y ^ 7 + (5 * j ^ 2 + j) * x ^ 6 * y ^ 6 + (4 * j ^ 2 + 2j) * x ^ 7 * y ^ 5 + (2 * j ^ 2 + 3j) * x ^ 8 * y ^ 4 + 2 * j * x ^ 9 * y ^ 3 + j * x ^ 10 * y ^ 2, (j ^ 2 * x ^ 5 * y ^ 8 + 2 * j * x ^ 6 * y ^ 7 + (-5 * j ^ 2 + 5j) * x ^ 7 * y ^ 6 + (-9 * j ^ 2 + 3j) * x ^ 8 * y ^ 5 + (-5 * j ^ 2 + j) * x ^ 9 * y ^ 4) - j ^ 2 * x ^ 10 * y ^ 3, ((-3 * j ^ 2 * x ^ 4 * y ^ 10 + (-8 * j ^ 2 - 4j) * x ^ 5 * y ^ 9 + (-2 * j ^ 2 - 11j) * x ^ 6 * y ^ 8 + (16 * j ^ 2 - 6j) * x ^ 7 * y ^ 7 + (26 * j ^ 2 + 13j) * x ^ 8 * y ^ 6 + (16 * j ^ 2 + 20j) * x ^ 9 * y ^ 5 + (4 * j ^ 2 + 10j) * x ^ 10 * y ^ 4) - 2 * j ^ 2 * x ^ 11 * y ^ 3) + x ^ 12 * y ^ 2, (-(j ^ 2) + 4j) * x ^ 8 * y ^ 6 + (-2 * j ^ 2 + 2j) * x ^ 9 * y ^ 5, (3 * j ^ 2 * x ^ 29 * y ^ 22 - 8 * x ^ 30 * y ^ 21) + (12 * j ^ 2 + 6j) * x ^ 31 * y ^ 20 + x ^ 33 * y ^ 18, -j * x ^ 6 * y ^ 9 + (j ^ 2 - 4j) * x ^ 7 * y ^ 8 + (7 * j ^ 2 - 2j) * x ^ 8 * y ^ 7 + (10 * j ^ 2 + 2j) * x ^ 9 * y ^ 6 + (8 * j ^ 2 + 4j) * x ^ 10 * y ^ 5 + 3 * j ^ 2 * x ^ 11 * y ^ 4 + (j ^ 2 - j) * x ^ 12 * y ^ 3, (-3 * j ^ 2 + 6j) * x ^ 9 * y ^ 6, 2 * x ^ 27 * y ^ 20 + 10 * x ^ 28 * y ^ 19 + 8 * x ^ 29 * y ^ 18, 12 * x ^ 27 * y ^ 19 + 18 * x ^ 28 * y ^ 18, 30 * x ^ 27 * y ^ 18]
            end
        f27 = function (x, y, j)
                return [40, 16x + 24y, 20 * x * y + 6 * x ^ 2 + 14 * y ^ 2, 13 * x * y + 3 * x ^ 2 + 11 * y ^ 2, 7 * x * y ^ 2 + 3 * x ^ 2 * y + 4 * y ^ 3, (4 * x * y ^ 2 - 2 * j ^ 2 * x ^ 2 * y) + 2 * y ^ 3, ((2 * j * x * y ^ 2 - 4 * x ^ 2 * y) - x ^ 3) + y ^ 3, 13 * x * y ^ 2 + 7 * x ^ 2 * y + x ^ 3 + 6 * y ^ 3, 18 * x * y ^ 2 + 12 * x ^ 2 * y + 2 * x ^ 3 + 8 * y ^ 3, 3 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + y ^ 4, x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, (((2 * j ^ 2 + 4j) * x * y ^ 3 + (4 * j ^ 2 + 5j) * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - y ^ 4, 6 * x * y ^ 3 + 5 * x ^ 2 * y ^ 2 + x ^ 3 * y + 2 * y ^ 4, -j * x ^ 10 * y ^ 15, -(j ^ 2) * x ^ 2 * y ^ 3, ((-6 * x ^ 18 * y ^ 30 - 13 * x ^ 19 * y ^ 29) - 7 * x ^ 20 * y ^ 28) - x ^ 21 * y ^ 27, (-x * y ^ 5 - 3 * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3, (-12 * x ^ 2 * y ^ 4 - 8 * x ^ 3 * y ^ 3) + 6 * j * x ^ 4 * y ^ 2 + 2 * y ^ 6, ((((8 * x * y ^ 5 + 2 * j ^ 2 * x ^ 2 * y ^ 4) - 6 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) - 4 * j ^ 2 * x ^ 5 * y) + x ^ 6 + 3 * y ^ 6, 0, ((x * y ^ 6 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 4) - j * x ^ 4 * y ^ 3) + j ^ 2 * x ^ 5 * y ^ 2, 0, -3 * x ^ 2 * y ^ 5 + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3, ((((6 * x * y ^ 6 + (-5 * j ^ 2 - 9j) * x ^ 2 * y ^ 5) - 5 * j * x ^ 3 * y ^ 4) + (4 * j ^ 2 + j) * x ^ 4 * y ^ 3) - 2 * x ^ 5 * y ^ 2) + y ^ 7, 0, ((4 * x * y ^ 7 + (-4 * j ^ 2 - 8j) * x ^ 2 * y ^ 6 + (j ^ 2 - 7j) * x ^ 3 * y ^ 5 + 6 * j ^ 2 * x ^ 4 * y ^ 4 + (5 * j ^ 2 + 3j) * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + y ^ 8, (x ^ 2 * y ^ 7 - j * x ^ 4 * y ^ 5) - j ^ 2 * x ^ 6 * y ^ 3, (j * x ^ 3 * y ^ 7 + j * x ^ 4 * y ^ 6) - 2 * j ^ 2 * x ^ 6 * y ^ 4, ((((x ^ 2 * y ^ 8 - j ^ 2 * x ^ 3 * y ^ 7) + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 6) - 2 * x ^ 5 * y ^ 5) - j ^ 2 * x ^ 6 * y ^ 4) - j ^ 2 * x ^ 7 * y ^ 3, ((-j * x ^ 2 * y ^ 8 + (2 * j ^ 2 + 3j) * x ^ 3 * y ^ 7 + (4 * j ^ 2 + 5j) * x ^ 4 * y ^ 6 + (2 * j ^ 2 + 3j) * x ^ 5 * y ^ 5) - j ^ 2 * x ^ 6 * y ^ 4) - j ^ 2 * x ^ 7 * y ^ 3, (-(x ^ 2) * y ^ 10 - 3 * x ^ 4 * y ^ 8) + (4 * j ^ 2 + 6j) * x ^ 5 * y ^ 7 + (2 * j ^ 2 + 6j) * x ^ 6 * y ^ 6 + 2 * j * x ^ 7 * y ^ 5, -(j ^ 2) * x ^ 3 * y ^ 10 + (-5 * j ^ 2 - 2j) * x ^ 4 * y ^ 9 + (-10 * j ^ 2 - 7j) * x ^ 5 * y ^ 8 + (-9 * j ^ 2 - 7j) * x ^ 6 * y ^ 7 + 2 * x ^ 7 * y ^ 6 + j ^ 2 * x ^ 8 * y ^ 5, ((x ^ 2 * y ^ 12 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 11 + (-9 * j ^ 2 - 2j) * x ^ 4 * y ^ 10) - 6 * j ^ 2 * x ^ 5 * y ^ 9) + (j ^ 2 + 6j) * x ^ 6 * y ^ 8 + (8 * j ^ 2 + 10j) * x ^ 7 * y ^ 7 + (5 * j ^ 2 + 4j) * x ^ 8 * y ^ 6 + j * x ^ 10 * y ^ 4, -4 * j ^ 2 * x ^ 5 * y ^ 9 + (-4 * j ^ 2 - 2j) * x ^ 6 * y ^ 8, (-2 * x ^ 18 * y ^ 33 + 12 * x ^ 20 * y ^ 31 + 8 * x ^ 21 * y ^ 30) - 6 * j * x ^ 22 * y ^ 29, -(x ^ 3) * y ^ 12 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 11 + (j ^ 2 + 4j) * x ^ 5 * y ^ 10 + (2 * j ^ 2 + 4j) * x ^ 6 * y ^ 9 + (5 * j ^ 2 + 3j) * x ^ 7 * y ^ 8 + (4 * j ^ 2 + j) * x ^ 8 * y ^ 7 + j ^ 2 * x ^ 9 * y ^ 6, (-8 * j ^ 2 - 2j) * x ^ 6 * y ^ 9, (-11 * x ^ 18 * y ^ 29 - 13 * x ^ 19 * y ^ 28) - 3 * x ^ 20 * y ^ 27, -24 * x ^ 18 * y ^ 28 - 16 * x ^ 19 * y ^ 27, -40 * x ^ 18 * y ^ 27]
            end
        f31 = function (x, y, j)
                return [45, 21x + 24y, 24 * x * y + 9 * x ^ 2 + 12 * y ^ 2, 15 * x * y + 6 * x ^ 2 + 9 * y ^ 2, 7 * x * y ^ 2 + 5 * x ^ 2 * y + x ^ 3 + 2 * y ^ 3, (-(j ^ 2) - 4j) * x * y ^ 2 + 2 * x ^ 2 * y + 2 * y ^ 3, (-2 * x * y ^ 2 + (4 * j ^ 2 + j) * x ^ 2 * y) - 2 * x ^ 3, 13 * x * y ^ 2 + 11 * x ^ 2 * y + 2 * x ^ 3 + 4 * y ^ 3, 18 * x * y ^ 2 + 18 * x ^ 2 * y + 3 * x ^ 3 + 6 * y ^ 3, 2 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y, -j * x * y ^ 3 - j * x ^ 2 * y ^ 2, ((-3 * x * y ^ 3 + (5 * j ^ 2 + 3j) * x ^ 2 * y ^ 2 + (4 * j ^ 2 + 2j) * x ^ 3 * y) - x ^ 4) - y ^ 4, 4 * x * y ^ 3 + 7 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + y ^ 4, 0, 0, 4 * x ^ 21 * y ^ 27 + 13 * x ^ 22 * y ^ 26 + 11 * x ^ 23 * y ^ 25 + 2 * x ^ 24 * y ^ 24, ((j ^ 2 * x * y ^ 5 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 4) - 3 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, (((12 * j ^ 2 + 3j) * x ^ 2 * y ^ 4 - 16 * x ^ 3 * y ^ 3) - 6 * x ^ 4 * y ^ 2) + 2 * y ^ 6, (((-2 * j ^ 2 - 8j) * x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - 12 * x ^ 3 * y ^ 3) + (j ^ 2 + 4j) * x ^ 4 * y ^ 2 + 4 * x ^ 5 * y + 2 * x ^ 6 + 4 * y ^ 6, 0, (-(j ^ 2) * x ^ 2 * y ^ 5 - 2 * j ^ 2 * x ^ 3 * y ^ 4) - 2 * j ^ 2 * x ^ 4 * y ^ 3, j * x ^ 3 * y ^ 4, 2 * j ^ 2 * x ^ 2 * y ^ 5 + (4 * j ^ 2 + 3j) * x ^ 3 * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 3, (((-2 * j ^ 2 - 4j) * x * y ^ 6 + 3 * x ^ 2 * y ^ 5 + (-(j ^ 2) + 3j) * x ^ 3 * y ^ 4 + (-2 * j ^ 2 + 4j) * x ^ 4 * y ^ 3) - 4 * j ^ 2 * x ^ 5 * y ^ 2) + 2 * x ^ 6 * y + x ^ 7 + y ^ 7, j * x ^ 4 * y ^ 4, -(x ^ 2) * y ^ 6 + (2 * j ^ 2 + 4j) * x ^ 3 * y ^ 5 + (2 * j ^ 2 + 6j) * x ^ 4 * y ^ 4 + 4 * j * x ^ 5 * y ^ 3 + j * x ^ 6 * y ^ 2, 0, -(j ^ 2) * x ^ 2 * y ^ 8 - j ^ 2 * x ^ 7 * y ^ 3, -2 * x ^ 4 * y ^ 6 - 3 * x ^ 5 * y ^ 5, j ^ 2 * x ^ 3 * y ^ 7 + (4 * j ^ 2 + 2j) * x ^ 4 * y ^ 6 + (5 * j ^ 2 + 2j) * x ^ 5 * y ^ 5 + 2 * j ^ 2 * x ^ 6 * y ^ 4, ((j * x ^ 2 * y ^ 10 - 2 * j ^ 2 * x ^ 3 * y ^ 9) + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 8 + (4 * j ^ 2 + 2j) * x ^ 5 * y ^ 7 + (7 * j ^ 2 + 3j) * x ^ 6 * y ^ 6 + (4 * j ^ 2 + 2j) * x ^ 7 * y ^ 5) - x ^ 8 * y ^ 4, (-2 * j ^ 2 * x ^ 4 * y ^ 9 + (-7 * j ^ 2 - j) * x ^ 5 * y ^ 8 + (-12 * j ^ 2 - 2j) * x ^ 6 * y ^ 7 + (-10 * j ^ 2 - j) * x ^ 7 * y ^ 6) - 3 * j ^ 2 * x ^ 8 * y ^ 5, ((-2 * j * x ^ 3 * y ^ 11 + (2 * j ^ 2 - j) * x ^ 4 * y ^ 10 + (4 * j ^ 2 + 2j) * x ^ 5 * y ^ 9) - 6 * x ^ 6 * y ^ 8) + (8 * j ^ 2 + 4j) * x ^ 7 * y ^ 7 + 6 * j ^ 2 * x ^ 8 * y ^ 6 + (2 * j ^ 2 - 4j) * x ^ 9 * y ^ 5 + (-2 * j ^ 2 - 4j) * x ^ 10 * y ^ 4 + 2 * x ^ 11 * y ^ 3, -3 * j ^ 2 * x ^ 6 * y ^ 8 - 6 * j ^ 2 * x ^ 7 * y ^ 7, ((2 * x ^ 21 * y ^ 30 + (12 * j ^ 2 + 3j) * x ^ 23 * y ^ 28) - 16 * x ^ 24 * y ^ 27) - 6 * x ^ 25 * y ^ 26, 2 * j ^ 2 * x ^ 4 * y ^ 11 + (5 * j ^ 2 - j) * x ^ 5 * y ^ 10 + (6 * j ^ 2 - j) * x ^ 6 * y ^ 9 + (4 * j ^ 2 - j) * x ^ 7 * y ^ 8 + (5 * j ^ 2 - j) * x ^ 8 * y ^ 7 + (4 * j ^ 2 - j) * x ^ 9 * y ^ 6 + j ^ 2 * x ^ 10 * y ^ 5, -9 * j ^ 2 * x ^ 7 * y ^ 8, 9 * x ^ 21 * y ^ 26 + 15 * x ^ 22 * y ^ 25 + 6 * x ^ 23 * y ^ 24, 24 * x ^ 21 * y ^ 25 + 21 * x ^ 22 * y ^ 24, 45 * x ^ 21 * y ^ 24]
            end
        f35 = function (x, y)
                return [60, 28x + 32y, 28 * x * y + 14 * x ^ 2 + 18 * y ^ 2, 21 * x * y + 7 * x ^ 2 + 11 * y ^ 2, 8 * x * y ^ 2 + 6 * x ^ 2 * y + x ^ 3 + 3 * y ^ 3, 4 * x * y ^ 2 + 2 * x ^ 2 * y, ((-2 * x * y ^ 2 - 4 * x ^ 2 * y) - 3 * x ^ 3) - 3 * y ^ 3, 15 * x * y ^ 2 + 13 * x ^ 2 * y + 4 * x ^ 3 + 7 * y ^ 3, 24 * x * y ^ 2 + 18 * x ^ 2 * y + 8 * x ^ 3 + 10 * y ^ 3, 2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 0, (((-5 * x * y ^ 3 - 6 * x ^ 2 * y ^ 2) - 4 * x ^ 3 * y) - x ^ 4) - 2 * y ^ 4, 6 * x * y ^ 3 + 6 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4 + 2 * y ^ 4, 0, 0, 7 * x ^ 21 * y ^ 27 + 15 * x ^ 22 * y ^ 26 + 13 * x ^ 23 * y ^ 25 + 4 * x ^ 24 * y ^ 24, (-3 * x ^ 2 * y ^ 4 - 5 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, (-12 * x ^ 2 * y ^ 4 - 24 * x ^ 3 * y ^ 3) - 6 * x ^ 4 * y ^ 2, (((8 * x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - 18 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) + 4 * x ^ 5 * y + 3 * x ^ 6 + 3 * y ^ 6, 0, ((x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4) - x ^ 5 * y ^ 2) - x ^ 6 * y, 0, (-(x ^ 2) * y ^ 5 - 5 * x ^ 3 * y ^ 4) - 3 * x ^ 4 * y ^ 3, (((6 * x * y ^ 6 + 7 * x ^ 2 * y ^ 5) - 3 * x ^ 3 * y ^ 4) - 6 * x ^ 4 * y ^ 3) + 2 * x ^ 6 * y + x ^ 7 + 2 * y ^ 7, 0, (((((2 * x * y ^ 7 + x ^ 2 * y ^ 6) - 7 * x ^ 3 * y ^ 5) - 16 * x ^ 4 * y ^ 4) - 13 * x ^ 5 * y ^ 3) - 4 * x ^ 6 * y ^ 2) + y ^ 8, -(x ^ 3) * y ^ 6 - 2 * x ^ 5 * y ^ 4, x ^ 4 * y ^ 6 + x ^ 5 * y ^ 5 + x ^ 7 * y ^ 3, (-3 * x ^ 4 * y ^ 6 - 6 * x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4, ((-2 * x ^ 3 * y ^ 7 - 5 * x ^ 4 * y ^ 6) - 5 * x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4, (((-2 * x ^ 3 * y ^ 9 - 3 * x ^ 4 * y ^ 8) - 4 * x ^ 5 * y ^ 7) - 5 * x ^ 6 * y ^ 6) - x ^ 8 * y ^ 4, (2 * x ^ 4 * y ^ 9 + 8 * x ^ 5 * y ^ 8 + 10 * x ^ 6 * y ^ 7 + 7 * x ^ 7 * y ^ 6 + x ^ 8 * y ^ 5) - x ^ 9 * y ^ 4, (((((-3 * x ^ 4 * y ^ 10 - 6 * x ^ 5 * y ^ 9) - 11 * x ^ 6 * y ^ 8) - 16 * x ^ 7 * y ^ 7) - 10 * x ^ 8 * y ^ 6) - 2 * x ^ 9 * y ^ 5) + 3 * x ^ 10 * y ^ 4 + 2 * x ^ 11 * y ^ 3 + x ^ 12 * y ^ 2, 4 * x ^ 6 * y ^ 8 + 2 * x ^ 7 * y ^ 7, (-12 * x ^ 23 * y ^ 28 - 24 * x ^ 24 * y ^ 27) - 6 * x ^ 25 * y ^ 26, (((((-(x ^ 4) * y ^ 11 - 3 * x ^ 5 * y ^ 10) - 5 * x ^ 6 * y ^ 9) - 6 * x ^ 7 * y ^ 8) - 5 * x ^ 8 * y ^ 7) - 3 * x ^ 9 * y ^ 6) - x ^ 10 * y ^ 5, 6 * x ^ 7 * y ^ 8, 11 * x ^ 21 * y ^ 26 + 21 * x ^ 22 * y ^ 25 + 7 * x ^ 23 * y ^ 24, 32 * x ^ 21 * y ^ 25 + 28 * x ^ 22 * y ^ 24, 60 * x ^ 21 * y ^ 24]
            end
        f37 = function (x, y, s)
                local v
                v = s * GetRoot(-x * y, 2)
                return [64, 32x + 32y, 32 * x * y + 16 * x ^ 2 + 16 * y ^ 2, 22 * x * y + 10 * x ^ 2 + 10 * y ^ 2, 8 * x * y ^ 2 + 8 * x ^ 2 * y + 2 * x ^ 3 + 2 * y ^ 3, 4 * x * y ^ 2 + 4 * x ^ 2 * y, ((-4 * x * y ^ 2 - 4 * x ^ 2 * y) - 2 * x ^ 3) - 2 * y ^ 3, 16 * x * y ^ 2 + 16 * x ^ 2 * y + 5 * x ^ 3 + 5 * y ^ 3, 24 * x * y ^ 2 + 24 * x ^ 2 * y + 8 * x ^ 3 + 8 * y ^ 3, 2 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, x ^ 2 * y ^ 2, (((-5 * x * y ^ 3 - 7 * x ^ 2 * y ^ 2) - 5 * x ^ 3 * y) - x ^ 4) - y ^ 4, 5 * x * y ^ 3 + 8 * x ^ 2 * y ^ 2 + 5 * x ^ 3 * y + x ^ 4 + y ^ 4, -(v ^ 25), -(v ^ 5), (-5 * v ^ 45 * y ^ 3 + 16 * y * v ^ 47 + 16 * x * v ^ 47) - 5 * x ^ 3 * v ^ 45, (-2 * x ^ 2 * y ^ 4 - 4 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2, (-12 * x ^ 2 * y ^ 4 - 16 * x ^ 3 * y ^ 3) - 12 * x ^ 4 * y ^ 2, (((8 * x * y ^ 5 - 4 * x ^ 2 * y ^ 4) - 12 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) + 8 * x ^ 5 * y + 2 * x ^ 6 + 2 * y ^ 6, v ^ 9, x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3, 0, ((-(x ^ 2) * y ^ 5 - 3 * x ^ 3 * y ^ 4) - 3 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 4 * x * y ^ 6 + 3 * x ^ 2 * y ^ 5 + 3 * x ^ 5 * y ^ 2 + 4 * x ^ 6 * y + x ^ 7 + y ^ 7, 0, (((((2 * v * x ^ 2 * y ^ 5 + 4 * v * x ^ 3 * y ^ 4 + 4 * v * x ^ 4 * y ^ 3 + 2 * v * x ^ 5 * y ^ 2) - 3 * x ^ 2 * y ^ 6) - 7 * x ^ 3 * y ^ 5) - 8 * x ^ 4 * y ^ 4) - 7 * x ^ 5 * y ^ 3) - 3 * x ^ 6 * y ^ 2, 2 * v * x ^ 3 * y ^ 5 + 2 * v * x ^ 5 * y ^ 3, ((-v * x ^ 2 * y ^ 7 - v * x ^ 4 * y ^ 5) - v * x ^ 5 * y ^ 4) - v * x ^ 7 * y ^ 2, (-3 * x ^ 4 * y ^ 6 - 6 * x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4, (((v * x ^ 3 * y ^ 6 + v * x ^ 4 * y ^ 5 + v * x ^ 5 * y ^ 4 + v * x ^ 6 * y ^ 3) - 3 * x ^ 4 * y ^ 6) - 6 * x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4, (((((-2 * x ^ 3 * y ^ 9 - 2 * x ^ 4 * y ^ 8) - 6 * x ^ 5 * y ^ 7) - 8 * x ^ 6 * y ^ 6) - 6 * x ^ 7 * y ^ 5) - 2 * x ^ 8 * y ^ 4) - 2 * x ^ 9 * y ^ 3, ((((-2 * v * x ^ 4 * y ^ 8 - 6 * v * x ^ 5 * y ^ 7) - 8 * v * x ^ 6 * y ^ 6) - 6 * v * x ^ 7 * y ^ 5) - 2 * v * x ^ 8 * y ^ 4) + 2 * x ^ 5 * y ^ 8 + 5 * x ^ 6 * y ^ 7 + 5 * x ^ 7 * y ^ 6 + 2 * x ^ 8 * y ^ 5, ((((((2 * v * x ^ 3 * y ^ 10 + 6 * v * x ^ 4 * y ^ 9 + 12 * v * x ^ 5 * y ^ 8 + 14 * v * x ^ 6 * y ^ 7 + 14 * v * x ^ 7 * y ^ 6 + 12 * v * x ^ 8 * y ^ 5 + 6 * v * x ^ 9 * y ^ 4 + 2 * v * x ^ 10 * y ^ 3 + 2 * x ^ 3 * y ^ 11 + 4 * x ^ 4 * y ^ 10) - 2 * x ^ 5 * y ^ 9) - 11 * x ^ 6 * y ^ 8) - 14 * x ^ 7 * y ^ 7) - 11 * x ^ 8 * y ^ 6) - 2 * x ^ 9 * y ^ 5) + 4 * x ^ 10 * y ^ 4 + 2 * x ^ 11 * y ^ 3, -4 * v * x ^ 6 * y ^ 7 - 4 * v * x ^ 7 * y ^ 6, 12 * v * x ^ 24 * y ^ 26 + 16 * v * x ^ 25 * y ^ 25 + 12 * v * x ^ 26 * y ^ 24, ((((v * x ^ 4 * y ^ 10 + 4 * v * x ^ 5 * y ^ 9 + 7 * v * x ^ 6 * y ^ 8 + 8 * v * x ^ 7 * y ^ 7 + 7 * v * x ^ 8 * y ^ 6 + 4 * v * x ^ 9 * y ^ 5 + v * x ^ 10 * y ^ 4) - x ^ 6 * y ^ 9) - 3 * x ^ 7 * y ^ 8) - 3 * x ^ 8 * y ^ 7) - x ^ 9 * y ^ 6, 8 * v ^ 15, (-10 * y ^ 2 * v ^ 45 + 22 * v ^ 47) - 10 * x ^ 2 * v ^ 45, -32 * y * v ^ 45 - 32 * x * v ^ 45, -64 * v ^ 45]
            end
        f39 = function (x, y)
                return [81, 45x + 36y, 42 * x * y + 24 * x ^ 2 + 15 * y ^ 2, 27 * x * y + 18 * x ^ 2 + 9 * y ^ 2, 8 * x * y ^ 2 + 13 * x ^ 2 * y + 5 * x ^ 3 + y ^ 3, 3 * x * y ^ 2 + 6 * x ^ 2 * y + 3 * x ^ 3, (-6 * x * y ^ 2 - 3 * x ^ 2 * y) - 3 * y ^ 3, 18 * x * y ^ 2 + 24 * x ^ 2 * y + 9 * x ^ 3 + 3 * y ^ 3, 27 * x * y ^ 2 + 36 * x ^ 2 * y + 12 * x ^ 3 + 6 * y ^ 3, x * y ^ 3 + 5 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + x ^ 4, x ^ 2 * y ^ 2 + x ^ 3 * y, (((-5 * x * y ^ 3 - 8 * x ^ 2 * y ^ 2) - 6 * x ^ 3 * y) - 2 * x ^ 4) - y ^ 4, 4 * x * y ^ 3 + 11 * x ^ 2 * y ^ 2 + 10 * x ^ 3 * y + 2 * x ^ 4, 0, 0, 3 * x ^ 25 * y ^ 23 + 18 * x ^ 26 * y ^ 22 + 24 * x ^ 27 * y ^ 21 + 9 * x ^ 28 * y ^ 20, ((-(x ^ 2) * y ^ 4 - 5 * x ^ 3 * y ^ 3) - 5 * x ^ 4 * y ^ 2) - x ^ 5 * y, ((-9 * x ^ 2 * y ^ 4 - 24 * x ^ 3 * y ^ 3) - 18 * x ^ 4 * y ^ 2) + 3 * x ^ 6, (((6 * x * y ^ 5 - 6 * x ^ 2 * y ^ 4) - 18 * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2) + 12 * x ^ 5 * y + 6 * x ^ 6 + 3 * y ^ 6, x ^ 5 * y ^ 4, (-x * y ^ 6 - x ^ 2 * y ^ 5) + 2 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2, 0, (-3 * x ^ 3 * y ^ 4 - 6 * x ^ 4 * y ^ 3) - 3 * x ^ 5 * y ^ 2, (2 * x * y ^ 6 - 3 * x ^ 3 * y ^ 4) + x ^ 4 * y ^ 3 + 9 * x ^ 5 * y ^ 2 + 8 * x ^ 6 * y + 2 * x ^ 7 + y ^ 7, 0, (((-4 * x ^ 2 * y ^ 6 - 9 * x ^ 3 * y ^ 5) - 9 * x ^ 4 * y ^ 4) - 3 * x ^ 5 * y ^ 3) + 2 * x ^ 6 * y ^ 2 + 2 * x ^ 7 * y + x ^ 8, 0, 0, (-3 * x ^ 4 * y ^ 6 - 6 * x ^ 5 * y ^ 5) - 6 * x ^ 6 * y ^ 4, ((-2 * x ^ 4 * y ^ 6 - 6 * x ^ 5 * y ^ 5) - 6 * x ^ 6 * y ^ 4) - 2 * x ^ 7 * y ^ 3, ((((-(x ^ 4) * y ^ 8 - 4 * x ^ 5 * y ^ 7) - 9 * x ^ 6 * y ^ 6) - 8 * x ^ 7 * y ^ 5) - x ^ 8 * y ^ 4) - x ^ 10 * y ^ 2, 4 * x ^ 6 * y ^ 7 + 8 * x ^ 7 * y ^ 6 + 6 * x ^ 8 * y ^ 5 + 2 * x ^ 9 * y ^ 4, (((((x ^ 2 * y ^ 12 + 2 * x ^ 3 * y ^ 11 + 5 * x ^ 4 * y ^ 10 + 4 * x ^ 5 * y ^ 9) - 6 * x ^ 6 * y ^ 8) - 16 * x ^ 7 * y ^ 7) - 20 * x ^ 8 * y ^ 6) - 12 * x ^ 9 * y ^ 5) - 2 * x ^ 10 * y ^ 4, 0, ((-9 * x ^ 27 * y ^ 24 - 24 * x ^ 28 * y ^ 23) - 18 * x ^ 29 * y ^ 22) + 3 * x ^ 31 * y ^ 20, ((((x ^ 6 * y ^ 9 - 3 * x ^ 7 * y ^ 8) - 6 * x ^ 8 * y ^ 7) - 7 * x ^ 9 * y ^ 6) - 3 * x ^ 10 * y ^ 5) - x ^ 11 * y ^ 4, 0, 9 * x ^ 25 * y ^ 22 + 27 * x ^ 26 * y ^ 21 + 18 * x ^ 27 * y ^ 20, 36 * x ^ 25 * y ^ 21 + 45 * x ^ 26 * y ^ 20, 81 * x ^ 25 * y ^ 20]
            end
        tbl[:irreducibles] = [f1(x), f1(y), f3(x, y, E(3)), f3(y, x, E(3)), f3(x, y, E(3, 2)), f3(y, x, E(3, 2)), f7(x, y), f7(y, x), f9(x, y, E(3)), f9(y, x, E(3)), f9(x, y, E(3, 2)), f9(y, x, E(3, 2)), f13(x, y), f13(y, x), f15(x, y), f15(y, x), f17(x, y), f17(y, x), f19(x, y), f19(y, x), f21(x, y), f21(y, x), f23(x, y, E(3)), f23(y, x, E(3)), f23(x, y, E(3, 2)), f23(y, x, E(3, 2)), f27(x, y, E(3)), f27(y, x, E(3)), f27(x, y, E(3, 2)), f27(y, x, E(3, 2)), f31(x, y, E(3)), f31(y, x, E(3)), f31(x, y, E(3, 2)), f31(y, x, E(3, 2)), f35(x, y), f35(y, x), f37(x, y, -1), f37(x, y, 1), f39(x, y), f39(y, x)]
        tbl[:centralizers] = map((x->begin
                        tbl[:order] // x
                    end), tbl[:classes])
        tbl[:irredinfo] = chevieget(:G33, :IrredInfo)
        return ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
    end)
chevieset(:G33, :CharTable, function ()
        local res
        res = (chevieget(:G33, :HeckeCharTable))(map((x->begin
                            [1, -1]
                        end), 1:5), [])
        res[:identifier] = "G33"
        res[:name] = "G33"
        res[:powermap] = chevieget(:G33, :PowerMaps)
        res[:galomorphisms] = Group(#= none:12 =# @perm_str("(4,5)(6,7)(10,11)(12,13)(14,15)(16,17)(18,19)(20,21)(25,26)(28,29)"))
        res[:text] = "origin: HeckeCharTable"
        return res
    end)
chevieset(:G33, :HeckeRepresentation, function (para, root, i)
        local p, r, rep, f1, f5, f7, f10, f13, f15, f17, f19, f21, f23, f27, f31, f35, f37, f39, dec
        dec = function (d, l)
                local m, v, i, j, k
                m = map((i->begin
                                map((y->begin
                                            fill(0, max(0, (1 + d) - 1))
                                        end), 1:d)
                            end), 1:5)
                for v = l
                    for k = v[2:length(v)]
                        i = div(k, d ^ 2)
                        k = mod(k, d ^ 2)
                        j = div(k, d)
                        k = mod(k, d)
                        ((m[i + 1])[j + 1])[k + 1] = v[1]
                    end
                end
                return m
            end
        p = (para[1])[2]
        r = (para[1])[1]
        f1 = (r->begin
                    map((x->begin
                                [[r]]
                            end), 1:5)
                end)
        f5 = function (x, y, j)
                return WGraph2Representation([[[2, 3, 4, 5], [1, 3, 4, 5], [1, 2, 4, 5], [1, 2, 3, 5], [1, 2, 3, 4]], [[1, 2, x, -y], [2, 3, -j * y, j ^ 2 * x], [2, 4, -y, x], [3, 4, x, -y], [4, 5, x, -y]]], [x, y]) * y ^ 0 * x ^ 0
            end
        f7 = function (y, x)
                local rep
                rep = WGraph2Representation([[[1, 5], [1, 3, 4], [2], [2, 5], [3], [4]], [[1, 2, -y, x], [1, 4, -y, x], [2, 3, -y, x], [2, 5, -y, 0], [2, 6, -y, 0], [3, 4, 0, -y], [4, 5, -y, x], [4, 6, -y, x]]], [x, y]) * y ^ 0 * x ^ 0
                rep[4] = rep[4] ^ rep[5]
                rep[3] = (rep[4] * rep[3]) // rep[4]
                return rep
            end
        f10 = function (r, p, a)
                return map((x->begin
                                ExteriorPower(x, 2) // r
                            end), f5(r, p, a))
            end
        f13 = function (x, y)
                return dec(15, [[-1, 91, 108, 129, 709, 729, 788], [-x, 388, 418, 451, 483, 635, 676, 969, 986], [-y, 190, 226, 258, 290, 371, 520, 629, 650, 656, 659, 761, 868, 897, 898, 902, 918, 997, 1104, 1106], [-x * y, 165, 167, 195, 968], [-(x ^ 2), 983, 1088], [-(y ^ 2), 886], [-(x ^ 2) * y, 81, 202, 382, 831, 832, 981, 982, 1056, 1057], [-(x ^ 3), 411, 651], [-x - y, 219, 728], [-x * y - y ^ 2, 218, 368, 1103], [-x * y ^ 2 - x ^ 2 * y, 82, 817], [-x * y ^ 2 - y ^ 3, 366, 367, 591, 592], [-(x ^ 2) * y - x ^ 3, 201, 381, 1086, 1087], [(-x * y - x ^ 2) - y ^ 2, 211, 213], [x, 0, 32, 64, 160, 204, 240, 272, 304, 321, 337, 384, 386, 399, 409, 410, 414, 416, 433, 466, 498, 546, 562, 604, 671, 691, 771, 834, 845, 882, 930, 946, 1011, 1028, 1044, 1059, 1076, 1094, 1124], [y, 79, 80, 176, 192, 205, 208, 224, 353, 385, 417, 449, 450, 482, 537, 578, 594, 657, 658, 675, 835, 890, 896, 899, 964, 980, 1060, 1092, 1108], [x * y, 21, 52, 75, 76, 143, 180, 198, 203, 210, 212, 377, 378, 407, 408, 435, 436, 437, 438, 737, 802, 813, 826, 828, 833, 1051, 1053, 1058], [x ^ 2, 456, 487, 681], [y ^ 2, 351, 352, 576, 577, 586, 588, 646], [x ^ 3, 441, 442, 891], [x + y, 96, 112, 144, 174, 199, 241, 273, 305, 379, 380, 401, 610, 642, 674, 739, 803, 819, 851, 883, 932, 948, 1012], [x * y + x ^ 2, 196, 383, 398, 413], [x * y + y ^ 2, 77, 78, 173, 182], [x * y ^ 2 + x ^ 2 * y + x ^ 3, 216, 217]]) * x ^ 0 * y ^ 0
            end
        f15 = function (x, y)
                return dec(15, [[-(x ^ -1) * y ^ 2, 1002], [-x, 331, 388, 418, 943], [-y, 15, 41, 55, 85, 286, 302, 318, 373, 505, 509, 544, 565, 569, 575, 580, 659, 716, 821, 836, 866, 878, 1014, 1019], [-(x ^ 2) * y ^ -1, 816], [-(x ^ -1) * y ^ 2 + y, 116], [-x + y, 818, 958], [x ^ -1 * y ^ 2, 999], [x, 16, 32, 48, 64, 80, 96, 112, 128, 144, 208, 224, 225, 226, 289, 305, 321, 337, 353, 358, 369, 378, 385, 392, 401, 417, 448, 449, 450, 466, 469, 482, 485, 498, 546, 559, 562, 574, 578, 594, 625, 626, 642, 658, 675, 691, 707, 723, 726, 739, 741, 755, 758, 819, 835, 867, 883, 892, 899, 900, 916, 932, 948, 964, 980, 996, 1012, 1028, 1033, 1060, 1076, 1077], [y, 0, 57, 131, 160, 176, 192, 207, 241, 257, 273, 433, 514, 530, 610, 674, 697, 761, 771, 787, 803, 851, 896, 989, 1044, 1092, 1108, 1124], [x ^ 2 * y ^ -1, 756, 891], [x ^ -1 * y ^ 2 - y, 27, 912, 974, 1003], [x - y, 238, 928, 1018]]) * x ^ 0 * y ^ 0
            end
        f17 = function (x, y)
                return dec(20, [[-(x ^ -2) * y ^ 3, 880], [-(x ^ -1) * y ^ 2, 120, 122, 125, 1140, 1142, 1145, 1580, 1582, 1585], [-x, 45, 140, 142, 145, 151, 316, 396, 402, 466, 481, 569, 614, 645, 649, 667, 746, 751, 786, 796, 911, 1049, 1053, 1107, 1116, 1196, 1231, 1232, 1253, 1276, 1291, 1336, 1352, 1506, 1516, 1560, 1565, 1569, 1573, 1643, 1706, 1787, 1884, 1973], [-y, 271, 382, 385, 460, 462, 465, 551, 716, 825, 831, 833, 1042, 1087, 1097, 1146, 1169, 1311, 1322, 1325, 1387, 1444, 1586, 1630, 1634, 1660, 1690, 1763, 1786, 1877, 1967, 1977], [-(x ^ 2) * y ^ -1, 264, 350, 364, 661, 750, 754, 761, 853, 870, 930, 964, 984, 1208, 1550], [-(x ^ 3) * y ^ -2, 904], [-x - 2y, 785, 1505], [(-(x ^ -2) * y ^ 3 - 2 * x ^ -1 * y ^ 2) + 2x + x ^ 2 * y ^ -1, 1120], [-(x ^ -1) * y ^ 2 - y, 822, 1300], [-x - y, 640, 642, 740, 742, 745, 767, 781, 789, 791, 1106, 1186, 1308, 1384, 1464, 1501, 1509, 1511, 1562], [-x - x ^ 2 * y ^ -1, 1118, 1471, 1571], [(-(x ^ -1) * y ^ 2 - x) - 3y, 780, 782, 1500, 1502], [(-(x ^ -2) * y ^ 3 - x ^ -1 * y ^ 2) - y, 820], [(-(x ^ -1) * y ^ 2 - x) - y, 1990], [(-x - y) - x ^ 2 * y ^ -1, 1304, 1984], [(-(x ^ -3) * y ^ 4 - x ^ -2 * y ^ 3) + 3x + 2y + x ^ 2 * y ^ -1, 1180], [-(x ^ -1) * y ^ 2 + x, 1780, 1782], [-y + x ^ 2 * y ^ -1, 1128], [(-(x ^ -1) * y ^ 2 + x) - y, 1105, 1785], [x ^ -1 * y ^ 2, 384, 388, 391, 1003, 1062, 1324, 1328, 1331, 1360], [x, 21, 126, 147, 189, 251, 252, 273, 290, 294, 300, 302, 305, 315, 357, 362, 365, 368, 371, 378, 399, 463, 484, 568, 627, 652, 665, 671, 673, 735, 747, 757, 765, 778, 795, 799, 821, 937, 962, 965, 968, 971, 982, 985, 988, 991, 998, 1047, 1048, 1052, 1058, 1090, 1094, 1111, 1115, 1193, 1199, 1242, 1305, 1313, 1339, 1345, 1349, 1490, 1494, 1515, 1519, 1557, 1567, 1568, 1572, 1578, 1603, 1646, 1762, 1765, 1768, 1771, 1789, 1791, 1804, 1851, 1852, 1881, 1900, 1902, 1905, 1915, 1936, 1953, 1978, 1993, 1999], [y, 0, 24, 63, 84, 102, 123, 168, 188, 210, 231, 336, 351, 421, 440, 505, 526, 589, 690, 827, 931, 947, 1020, 1022, 1025, 1086, 1091, 1136, 1143, 1168, 1381, 1385, 1391, 1393, 1410, 1424, 1441, 1473, 1523, 1583, 1640, 1642, 1645, 1725, 1747, 1831, 1971, 1997], [x ^ 2 * y ^ -1, 913, 1553, 1907, 1920, 1922, 1925, 1931], [x ^ 3 * y ^ -2, 804], [x ^ -2 * y ^ 3 - y, 380, 1320], [x ^ -1 * y ^ 2 + y, 1080, 1082, 1085, 1123, 1380, 1382], [x + y, 105, 360, 442, 547, 660, 662, 694, 715, 760, 762, 771, 787, 824, 884, 960, 980, 1010, 1031, 1073, 1117, 1157, 1178, 1197, 1240, 1340, 1342, 1368, 1389, 1404, 1431, 1452, 1507, 1536, 1599, 1663, 1726, 1760, 1810, 1894, 1957], [x + x ^ 2 * y ^ -1, 1109, 1122, 1124, 1125, 1130, 1131, 1188, 1244, 1248, 1411, 1481, 1492, 1980, 1982, 1985], [(x + y) - x ^ 3 * y ^ -2, 1544], [x ^ -1 * y ^ 2 + x + y, 1184], [x ^ -1 * y ^ 2 + x + x ^ 2 * y ^ -1, 1991], [x + y + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1551], [x ^ -1 * y ^ 2 + 2x + y + x ^ 2 * y ^ -1, 1191], [2x + y, 1100, 1102], [2x + x ^ 2 * y ^ -1, 1185], [2x + y + x ^ 2 * y ^ -1, 1113, 1182]]) * x ^ 0 * y ^ 0
            end
        f19 = function (x, y)
                return dec(24, [[-1, 77, 154, 231, 403, 521, 604, 609, 1676, 1754, 1962, 2249], [-x, 579, 628, 1153, 1232, 1303, 1370, 1440, 1441, 1806, 1858, 1932, 2524, 2773, 2855], [-y, 451, 494, 794, 1574, 1997, 2002, 2107, 2201, 2631], [-x * y, 271, 316, 542, 922, 972, 1067, 1118, 2232, 2240, 2244, 2276], [-x * y ^ 2, 1713], [-x * y ^ 3, 1688, 1710], [-(x ^ 2), 2544, 2846], [-(y ^ 2), 1600, 1697, 1722], [-(x ^ 2) * y, 1044, 1706], [-(x ^ 3), 1106, 1137, 1144, 1512, 1513, 2837], [-(y ^ 3), 1696], [-(x ^ 4), 1116, 1129, 2835], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 1131], [((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 1128], [-x - y, 2592], [-x * y - x ^ 2, 1700], [-x * y ^ 2 - x ^ 2 * y, 1725], [-x * y ^ 3 - x ^ 2 * y ^ 2, 2280], [-(x ^ 2) * y - x ^ 3, 1584, 1585], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) + x ^ 4, 1134], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 1704, 1705], [-(x ^ 2) + y ^ 2, 1721], [1, 109, 179, 197, 298, 398, 772, 777, 830, 860, 880, 1442, 2130, 2230, 2250, 2251], [x, 0, 25, 50, 168, 169, 171, 176, 195, 200, 294, 300, 400, 447, 450, 500, 525, 550, 575, 603, 701, 751, 768, 769, 776, 901, 951, 1001, 1026, 1051, 1126, 1151, 1250, 1252, 1277, 1296, 1297, 1299, 1302, 1304, 1377, 1402, 1403, 1447, 1452, 1477, 1505, 1527, 1538, 1627, 1702, 1727, 1752, 1753, 1826, 1828, 1903, 1994, 2003, 2053, 2078, 2103, 2106, 2121, 2128, 2155, 2241, 2253, 2303, 2354, 2448, 2451, 2454, 2479, 2549, 2554, 2579, 2600, 2604, 2654, 2677, 2692, 2697, 2704, 2729, 2754, 2775, 2779, 2804, 2829], [y, 350, 425, 449, 475, 648, 674, 726, 744, 747, 750, 1101, 1176, 1202, 1327, 1347, 1427, 1728, 1778, 1875, 1896, 1899, 1902, 1973, 2024, 2105, 2304, 2329, 2379, 2409, 2429, 2472, 2473, 2475, 2480, 2504, 2878], [x * y ^ -1, 1554], [x * y, 123, 246, 264, 265, 267, 272, 369, 437, 442, 792, 793, 1005, 1010, 1012, 1048, 1593, 1653, 2093, 2098, 2115, 2118, 2169, 2352, 2353, 2870], [x * y ^ 2, 1587, 1590, 1689], [x * y ^ 3, 1686], [x ^ 2, 441, 566, 1275, 1280, 1368, 1369, 1466, 1514, 1539, 1542, 1995, 1998, 2000, 2004, 2042, 2097, 2568, 2569, 2571, 2576, 2645, 2688, 2689, 2696, 2717, 2764, 2769, 2808, 2811], [y ^ 2, 1694, 1698], [x ^ 2 * y ^ -1, 1545], [x ^ 2 * y, 435, 438, 1014, 1114, 1591, 1682, 2091, 2094, 2737], [x ^ 2 * y ^ 2, 1680, 1681], [x ^ 3, 557, 1113, 1120, 1130, 2282, 2285, 2290, 2643, 2715, 2785, 2792], [y ^ 3, 1720], [x ^ 4, 555, 1105, 1140, 2288, 2292], [x ^ 2 - y ^ 2, 1718], [x + y, 125, 250, 275, 325, 375, 651, 676, 801, 926, 976, 1076, 1177, 1352, 1577, 1602, 1677, 1878, 1978, 2028, 2178, 2203, 2278, 2404, 2629, 2879], [x * y + x ^ 2, 1586, 1724, 2691, 2740, 2745, 2765], [x * y ^ 2 + x ^ 2 * y, 1701], [x ^ 2 * y + x ^ 3, 2763, 2784, 2787], [x ^ 2 * y ^ 2 + x ^ 3 * y, 1107], [(x ^ 2 * y ^ 2 + x ^ 3 * y) - x ^ 4, 1110], [x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 1104], [x ^ 3 * y + x ^ 4 + y ^ 4, 1707], [x * y ^ 3 + x ^ 3 * y + x ^ 4 + y ^ 4, 1712], [x ^ 3 * y + 2 * x ^ 4, 2283, 2286]]) * x ^ 0 * y ^ 0
            end
        f21 = function (x, y)
                return dec(30, [[((-3 * x * y ^ 3 - x ^ 2 * y ^ 2) + 2 * x ^ 3 * y) - y ^ 4, 4387], [(-3 * x * y ^ 3 + x ^ 3 * y) - 2 * y ^ 4, 4386], [(-3 * x * y ^ 2 + x ^ 2 * y + 2 * x ^ 3) - y ^ 3, 4308], [(-2 * x ^ 3 * y ^ 2 - 3 * x ^ 4 * y) - x ^ 5, 768], [-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3, 4356], [-2 * x * y - x ^ 2, 3394], [(-2 * x * y - x ^ 2) - y ^ 2, 3349], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 4392], [(-2 * x * y ^ 2 - x ^ 2 * y) + y ^ 3, 3933], [(-2 * x * y ^ 5 - x ^ 2 * y ^ 4) + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 4326], [-2 * x ^ 2 * y + y ^ 3, 4400], [-2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 3950], [-2 * x ^ 2 * y ^ 4 + x ^ 4 * y ^ 2 + y ^ 6, 4429], [-1, 716, 901, 1150, 1612, 1767, 1804, 2485, 2547, 2753, 3401, 3700, 3824, 4160], [-(x ^ -2), 3238], [-(x ^ -1) * y, 1366], [-x, 254, 378, 571, 878, 883, 890, 964, 1051, 1064, 1252, 1304, 1364, 1790, 1861, 1874, 1951, 2075, 2253, 2347, 2414, 2744, 3104, 3203, 3275, 3590, 4174, 4190, 4484], [-y, 69, 151, 216, 574, 578, 583, 590, 613, 671, 1299, 1353, 1426, 1502, 1519, 1992, 2053, 2117, 2706, 2733, 3094, 3119, 3252, 4474], [-x * y ^ -1, 1191, 1311], [-x * y, 120, 570, 588, 631, 996, 1296, 1302, 1413, 1703, 2284, 2295, 2495, 2510, 2742, 2827, 3090, 3185, 3846, 4002, 4089, 4125, 4470], [-x * y ^ 2, 1683, 2280, 2286, 2292, 2581, 2588, 2593, 3390, 3396, 3402, 3483, 3509, 3934, 4263, 4265, 4268, 4273], [-x * y ^ 3, 821, 1756, 4351], [-x * y ^ 4, 4329], [-(x ^ 2), 683, 888, 1057, 1246, 1297, 1357, 1488, 1867, 2076, 2082, 2300, 2737, 3096, 3097, 3102, 3181, 3194, 3410, 4094, 4170, 4188, 4476, 4477, 4482], [-(y ^ 2), 488, 493, 500, 1770, 1776, 1782, 2431, 4276, 4298, 4303, 4376], [-(x ^ 2) * y ^ -1, 4101, 4171, 4311], [-(x ^ 2) * y, 663, 742, 766, 835, 1234, 1392, 1694, 3033, 3365, 3473, 4086, 4092, 4264], [-(x ^ 2) * y ^ 2, 1230, 1236, 1651, 1692, 3453], [-(x ^ 2) * y ^ 3, 1650, 1668, 1769], [-(x ^ 2) * y ^ 4, 3513], [-(x ^ 3), 674, 1250, 2298, 4087], [-(y ^ 3), 4373], [-(x ^ 3) * y, 672, 736, 755, 770, 1687, 3441, 3451, 3464, 4341], [-(x ^ 3) * y ^ 2, 724, 833, 1742, 1754, 3526], [-(x ^ 3) * y ^ 3, 720, 726], [-(x ^ 4), 667], [-(y ^ 4), 4369], [-(x ^ 4) * y, 740, 2648, 2653], [-(x ^ 4) * y ^ 2, 811, 824, 3515, 3530], [-(x ^ 5), 2660], [-(x ^ 6), 2658], [(-(x ^ 4) * y ^ 2 - 3 * x ^ 5 * y) - 2 * x ^ 6, 1638], [-x * y ^ 2 - 2 * x ^ 2 * y, 3397], [-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3, 1758], [-(x ^ 3) * y - 2 * x ^ 4, 1248], [-(x ^ 4) * y ^ 2 - 2 * x ^ 5 * y, 738], [-(x ^ 5) * y ^ 2 - 2 * x ^ 6 * y, 1717], [(((-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2) - 3 * x ^ 5 * y) - x ^ 6, 1714], [(((-(x ^ 2) * y ^ 5 - 2 * x ^ 3 * y ^ 4) - 2 * x ^ 4 * y ^ 3) - 3 * x ^ 5 * y ^ 2) - x ^ 6 * y, 1710], [((-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 1729], [((-(x ^ 2) * y ^ 5 - 2 * x ^ 3 * y ^ 4) - 2 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 1716, 1722], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 3192], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 4330], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 1755, 3462, 4427], [(-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 825], [(-(x ^ 2) * y ^ 5 - 2 * x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3, 3522], [(-(x ^ 3) * y ^ 2 - 2 * x ^ 4 * y) - x ^ 5, 3457], [(-(x ^ 3) * y ^ 4 - 2 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 822], [(-(x ^ 4) * y ^ 3 - 2 * x ^ 5 * y ^ 2) - x ^ 6 * y, 817], [(-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3, 4327], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2 + x ^ 4 * y, 4357], [-(x ^ -1) * y ^ 2 - y, 1789], [-x - y, 1764, 1774, 2749, 2764, 3353], [-x * y - x ^ 2, 481, 2767, 2970, 2976, 3168, 3199, 3282, 3344, 3940], [-x * y - y ^ 2, 484, 3333, 4319], [-x * y ^ 2 - x ^ 2 * y, 480, 1673, 1699, 2133, 2508, 3342, 4289], [-x * y ^ 2 - y ^ 3, 4389], [-x * y ^ 3 - x ^ 2 * y ^ 2, 4278, 4352, 4359], [-x * y ^ 4 - x ^ 2 * y ^ 3, 4362], [-(x ^ 2) * y - x ^ 3, 679, 1642, 2134, 3337], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 754, 2130, 3469], [-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2, 750], [-(x ^ 3) * y - x ^ 4, 1636, 1721, 3454], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 1624, 1733, 3423, 3450, 3456, 4448, 4453, 4460], [-(x ^ 3) * y ^ 3 - x ^ 4 * y ^ 2, 829, 1620, 1626, 3514], [-(x ^ 3) * y ^ 4 - x ^ 4 * y ^ 3, 3510, 3516], [-(x ^ 4) * y - x ^ 5, 1640], [-(x ^ 4) * y ^ 2 - x ^ 5 * y, 4458], [-(x ^ 4) * y ^ 3 - x ^ 5 * y ^ 2, 816], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 4384], [(-x * y ^ 2 - x ^ 3) - y ^ 3, 4381], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 753], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 5 * y, 1711], [((-x * y ^ 3 - x ^ 3 * y) - x ^ 4) - y ^ 4, 4380], [(-x * y - x ^ 2) + y ^ 2, 4292], [(-(x ^ 3) * y ^ 3 - x ^ 4 * y ^ 2) + x ^ 5 * y, 1730], [(-x * y ^ 2 - x ^ 2 * y) + 2 * x ^ 3, 3018], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + 2 * x ^ 3 * y, 3498], [(-x * y ^ 6 - x ^ 2 * y ^ 5) + 4 * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3, 4428], [-(x ^ -1) * y ^ 2 + x, 4406], [-(x ^ -1) * y ^ 2 + y, 3956], [-(x ^ -1) * y ^ 3 + y ^ 2, 3953], [-x + y, 1291, 1351, 1775, 2731, 3023, 3092, 3099, 3406, 4472, 4479], [-x * y + x ^ 2, 2281, 3005, 3013, 3020, 3029, 3391, 3404, 4085], [-x * y + y ^ 2, 3003, 3503], [-x * y ^ 2 + x ^ 2 * y, 1685, 3485, 3493], [-x * y ^ 2 + y ^ 3, 3935, 3938, 3943, 3959], [-x * y ^ 3 + y ^ 4, 4336], [-x * y ^ 4 + x ^ 3 * y ^ 2, 4350], [-x * y ^ 5 + x ^ 2 * y ^ 4, 4320, 4413, 4415, 4439], [-x * y ^ 5 + x ^ 3 * y ^ 3, 4332], [-(x ^ 2) + y ^ 2, 3019, 3331, 4304], [-(x ^ 2) * y + x ^ 3, 665, 1231], [-(x ^ 2) * y + y ^ 3, 3499, 4388], [-(x ^ 2) * y ^ 2 + y ^ 4, 4436], [-(x ^ 2) * y ^ 3 + x ^ 4 * y, 4442, 4449], [-(x ^ 2) * y ^ 3 + y ^ 5, 4433], [-(x ^ 3) * y ^ 2 + x ^ 4 * y, 721, 2645], [-(x ^ 3) * y ^ 2 + x ^ 5, 1621], [(-(x ^ -1) * y ^ 2 + x) - y, 4306], [(-(x ^ -1) * y ^ 3 + x * y) - y ^ 2, 4403], [(-x * y + x ^ 2) - y ^ 2, 4293, 4295], [((-x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y, 4322, 4334], [-x * y ^ 2 + x ^ 2 * y + x ^ 3, 4280], [-x * y ^ 5 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 4418, 4423], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 1745], [(-(x ^ -1) * y ^ 4 + x * y ^ 2 + x ^ 2 * y) - 2 * y ^ 3, 4399], [-x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 4 * y + x ^ 5, 4321], [-x * y ^ 5 + x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 4430], [-x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 4364], [-x * y ^ 2 + 2 * x ^ 2 * y, 3500], [(-(x ^ -1) * y ^ 4 + 2 * x * y ^ 2) - x ^ 2 * y, 3949], [(-x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - y ^ 4, 3937], [1, 4, 51, 171, 1083, 1300, 1306, 2746, 2914, 3788, 3973, 4067], [x ^ -2, 3354], [x ^ -1, 596, 684, 777, 1276, 2741, 2752, 2801, 2872], [y ^ -1, 3292], [x ^ -1 * y, 506, 593, 1459, 1786, 4316], [x ^ -1 * y ^ 2, 503], [x, 187, 272, 410, 884, 1055, 1070, 1293, 1310, 1370, 1431, 1501, 1772, 1784, 1865, 1880, 2071, 2078, 2083, 2166, 2198, 2320, 2750, 2880, 3078, 3098, 3103, 3110, 3274, 3413, 4090, 4096, 4172, 4189, 4478, 4483, 4490, 4499], [y, 93, 155, 310, 341, 428, 465, 496, 527, 552, 572, 579, 584, 589, 868, 874, 899, 1022, 1052, 1117, 1241, 1294, 1298, 1303, 1334, 1354, 1365, 1427, 1504, 1520, 1644, 1675, 1702, 1706, 1773, 1799, 1835, 1862, 1905, 2028, 2079, 2141, 2240, 2296, 2389, 2451, 2513, 2606, 2668, 2699, 2734, 2762, 2948, 2979, 3010, 3134, 3165, 3289, 3329, 3475, 3491, 3506, 3537, 3600, 3631, 3662, 3724, 3755, 3879, 3941, 4251, 4282, 4286, 4344, 4375, 4437, 4468], [x * y ^ -1, 591], [x * y, 582, 803, 870, 930, 1208, 1500, 1518, 1583, 1696, 1738, 1920, 2283, 2491, 2504, 2572, 2634, 3393, 3419, 3461, 3903, 4027, 4084, 4088, 4093, 4218], [x * y ^ 2, 731, 1416, 1422, 1684, 2585, 4080, 4261, 4274], [x * y ^ 3, 1669, 1680, 1686, 3521, 4353, 4355], [x * y ^ 5, 4419], [x ^ 2, 676, 876, 877, 882, 1068, 1253, 1308, 1368, 1777, 1878, 2294, 3008, 3108, 3200, 3277, 4083, 4100, 4488], [y ^ 2, 494, 761, 1290, 1350, 1356, 1362, 1419, 1539, 2435, 2730, 2736, 4283, 4299], [x ^ 2 * y, 664, 773, 1233, 1700, 3466, 3488], [x ^ 2 * y ^ 2, 660, 666, 4354], [x ^ 2 * y ^ 4, 1746, 1752], [x ^ 3, 680, 1244, 2287, 4098], [y ^ 3, 4279, 4366], [x ^ 3 * y, 743, 751, 764, 1242, 3455, 3470, 3557], [x ^ 3 * y ^ 2, 723, 826, 1760, 2644, 3533, 4431], [x ^ 3 * y ^ 3, 1739, 2640], [x ^ 4, 1237, 1761], [x ^ 4 * y, 734], [x ^ 4 * y ^ 2, 732, 815, 830, 1719, 3511, 3524], [x ^ 5, 2654], [x ^ 5 * y, 727, 2646, 2652], [x ^ 6, 2647], [(x * y ^ 3 - 3 * x ^ 2 * y ^ 2) + x ^ 3 * y + y ^ 4, 3948], [x * y - 2 * x ^ 2, 3014], [x * y ^ 2 - 2 * x ^ 2 * y, 3494], [x ^ 2 * y ^ 4 - 2 * x ^ 4 * y ^ 2, 1715], [((x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, 4370], [((x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 4323], [(x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 3480], [(x * y ^ 4 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 4368], [1 - x ^ -1 * y, 3011], [x ^ -1 * y ^ 3 - y ^ 2, 3946], [x - y, 872, 879, 1295, 1355, 1771, 2735, 3016], [x * y - x ^ 2, 2285, 3001, 3002, 3009, 3395, 4081], [x * y - y ^ 2, 3496], [x * y ^ 2 - x ^ 2 * y, 1681, 3000, 3481, 3482, 3489], [x * y ^ 2 - x ^ 3, 3006, 3012], [x * y ^ 2 - y ^ 3, 3939], [x * y ^ 3 - x ^ 3 * y, 3492, 4260, 4358, 4363], [x * y ^ 4 - x ^ 2 * y ^ 3, 4325, 4340, 4349], [x * y ^ 4 - x ^ 3 * y ^ 2, 4328, 4333], [x * y ^ 4 - y ^ 5, 4426], [x * y ^ 6 - x ^ 2 * y ^ 5, 4410], [x ^ 2 - y ^ 2, 3335, 3409], [x ^ 2 * y - x ^ 3, 661, 1235], [x ^ 2 * y - y ^ 3, 4346, 4382], [x ^ 2 * y ^ 2 - y ^ 4, 3942, 4343], [x ^ 2 * y ^ 3 - x ^ 4 * y, 4469], [x ^ 3 * y ^ 2 - x ^ 4 * y, 725, 2641], [x ^ 3 * y ^ 2 - x ^ 5, 1625], [(x * y ^ 3 - x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 3486], [((x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 1741], [(x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 3930], [(x * y ^ 6 - x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3, 4422], [((x * y ^ 5 - x ^ 2 * y ^ 4) - x ^ 4 * y ^ 2) - x ^ 5 * y, 4411, 4424], [((x ^ -1 * y ^ 3 - x * y) - x ^ 2) + 2 * y ^ 2, 4309], [(x ^ -1 * y ^ 3 - x * y) + y ^ 2, 4396], [(x * y - x ^ 2) + y ^ 2, 1788], [(x * y ^ 2 - x ^ 2 * y) + y ^ 3, 4383, 4385], [((x * y ^ 2 - x ^ 2 * y) + x ^ 3) - y ^ 3, 3931], [(x * y ^ 5 - x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 4412], [1 + x ^ -1 * y, 3352], [1 + x * y ^ -1, 3202], [x ^ -1 * y ^ 2 + y, 4313], [x + y, 0, 186, 248, 279, 372, 403, 651, 682, 775, 806, 931, 962, 993, 1210, 1396, 1489, 1551, 1613, 1737, 1924, 1955, 2172, 2203, 2265, 2327, 2358, 2420, 2575, 2637, 2886, 2917, 3041, 3196, 3258, 3346, 3382, 3444, 3568, 3599, 3848, 3910, 4003, 4034, 4127, 4220], [x + x ^ 2 * y ^ -1, 501], [x * y + x ^ 2, 1734, 3184, 3350], [x * y + y ^ 2, 482, 489, 576, 577, 1672, 3162, 3334], [x * y ^ 2 + x ^ 2 * y, 2145, 2497, 4262, 4269], [x * y ^ 2 + y ^ 3, 486, 487, 3330, 3336, 4393, 4409], [x * y ^ 3 + x ^ 2 * y ^ 2, 2586, 2592, 4379], [x * y ^ 4 + x ^ 2 * y ^ 3, 1759], [x ^ 2 + x ^ 3 * y ^ -1, 3288], [x ^ 2 * y + x ^ 3, 1249, 1751], [x ^ 2 * y ^ 2 + x ^ 3 * y, 769, 1732], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 4444], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 1713], [x ^ 3 * y + x ^ 4, 1643], [x ^ 3 * y ^ 2 + x ^ 4 * y, 739, 756, 1623, 3421, 4454], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 814, 3529, 4440], [x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3, 810, 3528], [x ^ 4 * y + x ^ 5, 1634], [x ^ 4 * y ^ 2 + x ^ 5 * y, 1632, 4446, 4447, 4452], [x ^ 5 * y + x ^ 6, 1627], [((x * y ^ 5 + x ^ 2 * y ^ 4) - 3 * x ^ 3 * y ^ 3) + x ^ 5 * y, 4338], [(x * y ^ 2 + x ^ 2 * y) - 2 * x ^ 3, 3007], [(x * y ^ 3 + x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 3487], [(x * y ^ 2 + x ^ 2 * y) - x ^ 3, 3408], [(x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y, 1724], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 4272], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 813, 1740], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 1747], [x * y + x ^ 2 + y ^ 2 + x ^ 3 * y ^ -1, 4291], [x * y ^ 2 + x ^ 2 * y + x ^ 3 + y ^ 3, 4290], [x * y + 2 * x ^ 2, 2748], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 1698], [x ^ 3 * y + 2 * x ^ 4, 678], [(((x * y ^ 6 + 2 * x ^ 2 * y ^ 5) - 2 * x ^ 3 * y ^ 4) - 2 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 4417], [(x * y + 2 * x ^ 2) - y ^ 2, 4310], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 765], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 762], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 4425], [x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 757, 1639], [x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 1725], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 1726], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 1744], [x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 1728], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y, 4267], [x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2 + x ^ 5 * y, 1712], [x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3, 3348], [2 * x ^ 2 * y ^ 2 - 2 * y ^ 4, 3936], [2 * x ^ 2 * y - y ^ 3, 4394], [(2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 3932, 3944], [(2 * x ^ 2 * y ^ 3 - x ^ 4 * y) - y ^ 5, 4339], [2 * x * y + x ^ 2, 4294], [2 * x * y ^ 2 + y ^ 3, 4302], [2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 1743], [((2 * x * y ^ 6 + x ^ 2 * y ^ 5) - 2 * x ^ 3 * y ^ 4) - 2 * x ^ 4 * y ^ 3, 4416], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 4266], [2 * x ^ 2 * y + 3 * x ^ 3 + x ^ 4 * y ^ -1, 3198], [2 * x ^ 3 * y ^ 2 + 3 * x ^ 4 * y + x ^ 5, 3468], [2 * x ^ 4 * y ^ 3 + 3 * x ^ 5 * y ^ 2 + x ^ 6 * y, 828], [(3 * x * y ^ 3 - 2 * x ^ 3 * y) + y ^ 4, 4398], [((3 * x * y ^ 2 + x ^ 2 * y) - x ^ 3) + y ^ 3, 4297], [3 * x * y ^ 2 + 2 * y ^ 3, 4296]]) * x ^ 0 * y ^ 0
            end
        f23 = function (x, y, j)
                return dec(30, [[((-2 * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + (-(j ^ 2) + j) * x ^ 3) - y ^ 3, 1074], [-1, 710, 930, 1481, 1668, 1761, 1983, 2014, 2075, 2264, 2310, 2480, 2757, 2822, 3222, 3844, 4290], [-y, 14, 49, 153, 276, 340, 525, 556, 742, 805, 867, 1330, 1516, 1703, 2543, 3006, 3039, 3343, 4090, 4151, 4214, 4275, 4337, 4369, 4381, 4469], [-x * y, 1981, 2095, 2101, 2306, 2659], [-x * y ^ 2, 1891, 1975, 2191, 2215], [-(y ^ 2), 1299, 3559], [-(x ^ 2) * y, 963], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 967], [(-(x ^ 3) * y ^ 2 - 2 * x ^ 4 * y) - x ^ 5, 2782, 2784], [-1 - x ^ -1 * y, 994], [-x * y - x ^ 2, 102, 1027, 3084], [-x * y ^ 2 - x ^ 2 * y, 2805, 2874], [-(x ^ 2) * y - x ^ 3, 968], [-(x ^ 3) * y - x ^ 4, 2842, 2844], [-x * y - j * y ^ 2, 2870], [-x * y ^ 2 - j * x ^ 2 * y, 1007], [(-x * y - j ^ 2 * x ^ 2) - y ^ 2, 1284], [(-x * y ^ 2 - j ^ 2 * x ^ 2 * y) - y ^ 3, 1134], [-x * y ^ 2 + j * y ^ 3, 1951], [x ^ -1, 992], [x, 62, 95, 124, 189, 217, 248, 311, 403, 420, 467, 498, 571, 651, 684, 776, 838, 1024, 1055, 1086, 1148, 1214, 1272, 1365, 1400, 1582, 1616, 1737, 1862, 2110, 2141, 2172, 2203, 2296, 2358, 2514, 2637, 2668, 2699, 2700, 2793, 2855, 2890, 2917, 2948, 2981, 3111, 3134, 3196, 3258, 3656, 3662, 3693, 3755, 3786, 3879, 3916, 3948, 4003, 4040, 4072, 4134, 4195, 4498], [y, 1367, 1427, 1584, 1644, 1831, 2389, 2575, 2606, 2900, 3020, 3140, 3200, 3320, 3413], [x * y ^ -1, 1183, 3298], [x * y, 623, 901, 1249, 1465, 1558, 1817, 1896, 1927, 1959, 2235, 2422, 2764, 3077, 3511, 3623, 3728], [x ^ 2, 2006, 2611], [y ^ 2, 1277, 2089, 2149, 2365, 2723], [x ^ 2 * y, 1916, 2216, 2431, 2449], [y ^ 3, 1127, 1969, 2209], [x + y, 0, 31, 155, 279, 341, 372, 527, 558, 713, 744, 806, 837, 931, 993, 997, 998, 1303, 1334, 1489, 1520, 1551, 1675, 1706, 1799, 1800, 1986, 2017, 2018, 2048, 2079, 2082, 2114, 2130, 2234, 2300, 2420, 2513, 2824, 3010, 3041, 3165, 3227, 3351, 3382, 3444, 3537, 3568, 3817, 3847, 3848, 3972, 4096, 4158, 4220, 4282, 4313, 4344, 4375, 4406, 4499], [x * y + x ^ 2, 658, 964, 1962, 2115, 2147, 2302, 2364, 2457, 3118], [x * y + y ^ 2, 657, 2363, 2458, 3762, 4259], [x * y ^ 2 + y ^ 3, 1868, 3349, 3667], [x ^ 2 + x ^ 3 * y ^ -1, 3852], [x ^ 2 * y + x ^ 3, 132, 2812], [x ^ 2 * y ^ 2 + x ^ 3 * y, 2835], [x ^ 2 * y + 2 * x ^ 3 + x ^ 4 * y ^ -1, 3732], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 72, 3672], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 2775], [((x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2) - j * x ^ 4 * y) - j ^ 2 * y ^ 5, 1879], [(((x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y) - j * x ^ 4) - j ^ 2 * y ^ 4, 1939], [x * y + (-2 * j ^ 2 - j) * x ^ 2, 2096], [((x * y ^ 2 - j * x ^ 2 * y) - x ^ 3) + y ^ 3, 1164], [x ^ 2 * y + j ^ 2 * x ^ 3, 2963], [x ^ 2 * y + j * x ^ 3, 1014], [2 * x * y + x ^ 2 + y ^ 2, 1928, 3727], [(-2 * j * x * y - j * x ^ 2) - j * y ^ 2, 1041], [(-2 * j * x * y ^ 2 - j * x ^ 2 * y) - j * y ^ 3, 147, 981, 1948, 3749], [(-2 * j * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j * y ^ 4, 87, 1888, 2839, 3689], [(-2 * j * x * y ^ 4 - j * x ^ 2 * y ^ 3) - j * y ^ 5, 2779], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y + j ^ 2 * x ^ 4, 2843], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2 + 2 * j ^ 2 * x ^ 4 * y, 2783], [-j, 3179, 3290, 3470], [-j * y, 389, 2753, 2990, 3050, 3260, 3385, 3446, 3503, 3560, 3987], [-j * x ^ 2, 1104, 1194, 1727], [-j * y ^ 2, 2665, 2689, 3110], [-j * x ^ 2 * y, 1314, 1547], [-j * x ^ 2 * y + y ^ 3, 1067], [(((-j * x * y ^ 4 - 3 * j * x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2 + j * x ^ 4 * y) - j ^ 2 * x ^ 5) + y ^ 5, 977], [(-j * x * y ^ 2 - 2 * j * x ^ 2 * y) - j * x ^ 3, 148, 1048, 1947], [(-j * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 88, 988, 1887], [(-j * x ^ 2 * y ^ 2 - 2 * j * x ^ 3 * y) - j * x ^ 4, 89, 3687], [(-j * x * y ^ 3 + (j ^ 2 - 2j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y + j * x ^ 4 + y ^ 4) - j ^ 2 * x ^ 5 * y ^ -1, 1037], [-j * x - j * y, 1161, 3175, 3236], [-j * x * y - j * x ^ 2, 268, 1168, 2067], [-j * x * y - j * y ^ 2, 179, 267, 2068, 3777, 3869], [-j * x * y ^ 2 - j * y ^ 3, 2959], [-j * x ^ 2 * y - j * x ^ 3, 149, 3747], [-j * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 2789], [-j * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2, 2785], [(-j * x * y ^ 2 - j * x ^ 2 * y) - j * x ^ 3, 2059], [((j ^ 2 - j) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j * x ^ 3 + j ^ 2 * y ^ 3, 1976], [-(j ^ 2), 1777, 3170, 3380], [-(j ^ 2) * y, 2269, 2311, 2438, 2485, 2546, 3233, 3443, 4237], [-(j ^ 2) * x * y, 1734], [-(j ^ 2) * x * y ^ 2, 1554], [-(j ^ 2) * x ^ 2, 2005], [-(j ^ 2) * y ^ 2, 2161], [-(j ^ 2) * x ^ 2 * y, 1915, 2933], [-(j ^ 2) * y ^ 3, 2029], [(-(j ^ 2) * x * y - j * x ^ 2) - j ^ 2 * y ^ 2, 1794], [-(j ^ 2) * x * y - j ^ 2 * x ^ 2, 3592], [(-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j * x ^ 3, 2036], [(-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + (j ^ 2 - j) * x ^ 3 * y + j ^ 2 * x ^ 4, 1946], [(-(j ^ 2) * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y + j * x ^ 5, 1886], [(-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j ^ 2 * y ^ 3, 2065], [j ^ 2 * x, 882, 2516, 3472, 3504, 4422], [j ^ 2 * x * y, 1801, 1999, 2119, 2239, 2305, 2425, 2930, 3083, 3585], [j ^ 2 * x * y ^ 2, 1909, 2011], [j ^ 2 * y ^ 2, 1764, 1787], [j ^ 2 * x ^ 3, 2066], [j ^ 2 * x * y + x ^ 2, 2810], [j ^ 2 * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y + j * y ^ 3, 2873], [((j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - x ^ 3) - j ^ 2 * x ^ 4 * y ^ -1, 1157], [j ^ 2 * x * y + j * x ^ 2 + j ^ 2 * y ^ 2, 2186], [j ^ 2 * x * y ^ 2 + j * x ^ 2 * y + j ^ 2 * y ^ 3, 2035], [j ^ 2 * x * y ^ 3 + j * x ^ 4 + j * x ^ 5 * y ^ -1, 1921], [j ^ 2 * x * y ^ 4 + j * x ^ 4 * y + j * x ^ 5, 1861], [j * x, 947, 1487, 1614, 1674, 1704, 2061, 3590, 3831], [j * x * y, 917, 1097, 1139, 1187, 1217, 1247, 1337, 1404, 1464, 1524, 1757, 2636, 2903, 3023, 3203, 3350, 3533], [j * x * y ^ 2, 1307, 2455, 2456, 3113, 3353], [j * x ^ 4 * y ^ -1, 2041], [j * x * y ^ 2 + x ^ 2 * y, 2813], [j * x * y + x ^ 2 + j * y ^ 2, 2695], [((j * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) + j ^ 2 * x ^ 4) - j ^ 2 * y ^ 4, 2780], [j * x * y - j ^ 2 * y ^ 2, 2993, 3053, 3263], [(j * x * y - j ^ 2 * x ^ 2) - j ^ 2 * y ^ 2, 2960], [(j * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j ^ 2 * y ^ 3, 2840], [j * x * y + j * x ^ 2, 1941, 2039, 2819, 3741, 3838], [j * x * y + j * y ^ 2, 2968], [j * x * y ^ 2 + j * x ^ 2 * y, 1049, 1881, 2815, 2876, 3681], [j * x * y ^ 3 + j * x ^ 2 * y ^ 2, 989], [j * x ^ 2 * y + j * x ^ 3, 1949, 3748], [j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 2786], [j * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j * x ^ 4, 1945], [((j * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2) - x ^ 4 * y) + j * x ^ 5, 1885], [(j * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y) - j ^ 2 * x ^ 4, 1044], [j * x ^ 2 * y ^ 3 + (3 * j ^ 2 + 5j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y + (-2 * j ^ 2 - j) * x ^ 5, 984], [(2 * j ^ 2 + j) * x * y - y ^ 2, 2071, 2131, 2366], [2 * j * x * y ^ 2 + j * x ^ 2 * y + j * y ^ 3, 2848], [2 * j * x * y ^ 3 + j * x ^ 2 * y ^ 2 + j * y ^ 4, 2788]]) * x ^ 0 * y ^ 0
            end
        f27 = function (x, y, j)
                return dec(40, [[((-3 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 3184], [(-3 * x * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - y ^ 5, 3179], [(-3 * x * y ^ 4 + (3 * j ^ 2 + 4j) * x ^ 2 * y ^ 3 + (j ^ 2 + 5j) * x ^ 3 * y ^ 2 + 3 * j * x ^ 4 * y + j * x ^ 5) - y ^ 5, 3167], [-2 * x * y ^ 2 - x ^ 2 * y, 3723], [-2 * x * y ^ 2 - y ^ 3, 2761], [(-2 * x * y - x ^ 2) - y ^ 2, 3018, 3144, 4380, 4386], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 3729, 7827], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 3139, 7817, 7972], [(-2 * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 7931], [(-2 * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2, 7971], [(-2 * x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y + j * x ^ 3) - y ^ 3, 5527], [(-2 * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y) - y ^ 4, 3172, 7767], [(-2 * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y + j * x ^ 4) - y ^ 4, 3127], [-1, 44, 86, 412, 1031, 1235, 2302, 2425, 2752, 3287, 3972, 4639, 5455, 5492, 5830, 5852, 6075, 6614, 6694, 7187], [-(x ^ -1), 1981], [-(y ^ -1), 2378], [-(x ^ -1) * y ^ 4, 3141], [-(x ^ -1) * y ^ 5, 3181], [-x, 1047, 1896, 1924, 2056, 3240, 3243, 3886, 4008, 4053, 4055, 4095, 4178, 4213, 4673, 4840, 4842, 4966, 5207, 5335, 5571, 5695, 5932, 5988, 7332, 7711, 7738, 7864], [-y, 80, 219, 300, 457, 460, 549, 587, 628, 1810, 1961, 1962, 2368, 2648, 3203, 3386, 3451, 3607, 4221, 4294, 4381, 4929, 5245, 5485, 5499, 5734, 5747, 5813, 5822, 6442, 6566, 6685, 6691, 6726, 6935, 7217, 7422, 7451, 7588], [-x * y, 640, 1598, 2127, 2332, 2990, 3112, 3197, 3640, 3641, 3642, 3880, 3881, 3882, 4045, 4051, 4088, 4091, 4204, 4216, 4220, 4226, 4328, 4330, 4469, 4667, 4750, 5300, 5325, 5331, 5686, 5804, 5939, 5977, 6147, 6178, 6232, 6255, 6927, 7571, 7693, 7705, 7709], [-x * y ^ 2, 728, 980, 986, 6048, 6215, 6222, 6248, 6920, 7611, 7616, 7685, 7728], [-x * y ^ 3, 6211, 7925, 7936], [-(x ^ 2), 4047, 4207, 4326, 5327, 5687, 5811, 5816, 7016], [-(y ^ 2), 732, 972, 2528, 3032, 4285, 4543, 6069, 6560, 6720, 6721, 6722, 7443, 7832], [-(x ^ 2) * y, 1447, 2443, 6016], [-(x ^ 2) * y ^ 2, 960, 963, 1366, 4566, 6042, 7766], [-(x ^ 2) * y ^ 3, 1360, 1362], [-(y ^ 3), 7128, 7815, 7822, 7991], [-(x ^ 3) * y ^ 2, 6281], [-(y ^ 4), 1380], [-x * y ^ 2 - 2 * y ^ 3, 1328], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 4289, 4369], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 3020, 3026], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 7966], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 7929], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y, 6040], [-x - y, 2772, 2824, 3034, 3118, 3249, 5544, 5812], [-x * y - x ^ 2, 2984, 3098, 3198, 4578, 5979], [-x * y - y ^ 2, 1334, 1347, 2764, 2770, 2812, 3150, 5817, 5819, 7784], [-x * y ^ 2 - x ^ 2 * y, 1326, 4361, 4362, 5643, 5649, 5680, 6046, 6096, 6246, 6247, 7699, 7814], [-x * y ^ 2 - y ^ 3, 2819, 3132, 3769, 7932, 7934], [-x * y ^ 3 - x ^ 2 * y ^ 2, 969, 1320, 1322, 2979, 3006, 6240, 7805, 7819, 7926], [-x * y ^ 3 - y ^ 4, 2801, 7974], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 1487, 4580, 4586, 6080, 7946], [(-x * y - x ^ 2) - y ^ 2, 4300, 4306, 5805], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 2682], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 4443], [(-x * y ^ 2 - x ^ 2 * y) + j * x ^ 3, 5767, 7847], [(-x * y ^ 2 + x ^ 2 * y + x ^ 3) - y ^ 3, 3190], [((((-x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3) - 4 * j * x ^ 3 * y ^ 2) - 3 * j * x ^ 4 * y) - j * x ^ 5) - y ^ 5, 3176], [-x * y - j * x ^ 2, 888], [-x * y ^ 2 - j * x ^ 2 * y, 7648], [-x * y ^ 4 - j * x ^ 2 * y ^ 3, 7801], [-(x ^ 2) * y ^ 3 - j * x ^ 3 * y ^ 2, 6201], [(((-x * y ^ 3 - j * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y) - j * x ^ 4) - y ^ 4, 3136], [((-x * y ^ 4 - j * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2) - y ^ 5, 7965], [((-(x ^ 2) * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y) + x ^ 5, 7880], [-(x ^ 2) * y ^ 2 - j ^ 2 * x ^ 3 * y, 4440], [(-x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 4568], [-x * y ^ 2 + j ^ 2 * x ^ 2 * y, 4202, 4323, 7901], [(-x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (j ^ 2 - j) * x ^ 3 * y) - j * x ^ 4, 2976], [-(x ^ 2) * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y, 4560], [-x * y + j * x ^ 2, 5980], [-x * y ^ 2 + j * x ^ 2 * y, 7700], [-(x ^ 3) * y + j * x ^ 4, 7896], [-x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3, 4083], [-(x ^ 2) * y ^ 2 + j * x ^ 3 * y + j * x ^ 4, 2967], [(-x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3) - y ^ 3, 2807], [-x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y, 4320], [(-x * y ^ 4 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 7800], [-(x ^ 2) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y + j ^ 2 * x ^ 5, 7882], [-(x ^ 2) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 4569, 7881], [-(x ^ 2) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + 2 * j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 4562], [-x * y ^ 4 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 3 + 3 * j ^ 2 * x ^ 3 * y ^ 2 + 3 * j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 3002], [-x * y ^ 4 + (3 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y, 3000], [(-x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y + j * x ^ 3) - y ^ 3, 7367], [-x * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 3009], [1, 84, 292, 652, 912, 1559, 1893, 2053, 2055, 2098, 2372, 2553, 2653, 2665, 2713, 2791, 2834, 3119, 3247, 3291, 4438, 5554, 5612, 6814], [x ^ -1, 1741], [x ^ -1 * y, 2661], [x, 328, 492, 697, 765, 820, 943, 1094, 1135, 1173, 1312, 1641, 1682, 1960, 2005, 2047, 2215, 2647, 2871, 2953, 3280, 3320, 3490, 3569, 3888, 4244, 4800, 4882, 5011, 5087, 5163, 5374, 5577, 5580, 5815, 5907, 6400, 6481, 6523, 6646, 6851, 7013, 7100, 7261, 7305, 7549], [y, 0, 123, 287, 369, 408, 410, 451, 659, 738, 861, 895, 902, 908, 984, 1353, 1394, 1476, 1517, 1600, 1601, 1602, 1768, 1846, 1885, 2045, 2051, 2174, 2364, 2379, 2543, 2584, 2644, 2656, 2660, 2666, 2707, 2789, 3035, 3076, 3158, 3457, 3460, 3540, 3692, 3741, 3774, 3944, 4102, 4143, 4225, 4303, 4471, 4512, 4556, 4594, 4717, 4841, 5044, 5128, 5210, 5333, 5661, 5702, 5743, 5784, 5989, 6072, 6112, 6153, 6358, 6399, 6564, 6687, 6728, 6760, 6763, 6769, 6805, 6810, 6903, 7056, 7153, 7396, 7457, 7460, 7466, 7630, 7672, 7794, 7835, 7917, 7958, 7999], [x * y, 161, 240, 241, 242, 1265, 1430, 2497, 2620, 2908, 3403, 4084, 4100, 4106, 4208, 4795, 5416, 5684, 5806, 5971, 6013, 6015, 6022, 6025, 6231, 6925, 6931, 6936, 6965, 7005, 7499, 7577, 7732], [x * y ^ 2, 724, 967, 2806, 3022, 6005, 6011, 6229, 6260, 6266, 7607, 7724], [x * y ^ 3, 721, 7811], [x ^ 2, 1040, 1043, 3963, 4056, 5336, 5691, 5696, 5807, 5843, 7007], [y ^ 2, 897, 1343, 2130, 2165, 2170, 2524, 4461, 4534, 6055, 6062, 6262, 7143, 7374, 7613, 7615, 7622, 7625, 7655, 7662, 7668, 7831], [x ^ 2 * y, 1460, 1466, 3102, 5780, 5786, 5920, 6007, 6051, 6251, 6309, 7696, 7860, 7866], [x ^ 2 * y ^ 2, 2966, 6243], [x ^ 2 * y ^ 3, 3083], [y ^ 3, 2973, 7124, 7365, 7605, 7657, 7829, 7933, 7935, 7942, 7945, 7992], [x ^ 3 * y, 1440, 1443, 5763, 7843], [y ^ 4, 7982], [(x * y ^ 2 - x ^ 2 * y) - x ^ 3, 4363], [((x * y ^ 4 - x ^ 3 * y ^ 2) - x ^ 4 * y) + y ^ 5, 7920], [1 + x * y ^ -1, 2778], [x + y, 164, 246, 779, 1066, 1107, 1148, 1189, 1271, 1435, 1599, 1887, 1928, 1963, 1969, 2010, 2338, 2365, 2370, 2461, 2502, 2625, 2773, 2785, 2818, 2912, 2994, 3115, 3154, 3199, 3283, 3289, 3323, 3487, 3651, 3733, 3815, 3897, 3980, 3986, 4020, 4184, 4266, 4348, 4389, 4676, 4758, 4799, 4964, 5005, 5169, 5292, 5456, 5538, 5579, 5692, 5860, 5866, 6030, 6235, 6317, 6482, 6934, 6974, 7015, 7097, 7302, 7343, 7507, 7548, 7587, 7712, 7753, 7876], [x * y + x ^ 2, 846, 1049, 2767, 3195, 3969, 4096, 4324, 4584, 5849, 6052, 6092, 7539], [x * y + y ^ 2, 2361, 2525, 2530, 2768, 2780, 3030, 3138, 3409, 5697, 5699, 6068, 6095, 6108, 6184, 7627, 7796], [x * y ^ 2 + x ^ 2 * y, 840, 841, 842, 2820, 2826, 3800, 3803, 3809, 4444, 4572, 5540, 5546, 5642, 5800, 6045, 6059, 6099, 6256, 7380, 7386, 7725, 7730, 7908, 7909], [x * y ^ 2 + y ^ 3, 6057, 6257, 7125, 7130, 7617, 7619, 7620, 7943], [x * y ^ 3 + x ^ 2 * y ^ 2, 3126, 4579, 6219, 6249, 7786], [x * y ^ 4 + x ^ 2 * y ^ 3, 3089, 4561], [x ^ 2 * y ^ 2 + x ^ 3 * y, 1449, 1500, 1506, 2980, 2986, 5523, 5769, 6299, 7849], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 7763, 7883], [x ^ 3 * y + x ^ 4, 6291], [x ^ 3 * y ^ 2 + x ^ 4 * y, 1483, 2963], [x * y + x ^ 2 + y ^ 2, 5685], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 4540, 4546], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 4642, 6122, 7600], [((x * y ^ 3 + x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j * x ^ 4, 4567], [(x * y ^ 2 + x ^ 2 * y) - j ^ 2 * y ^ 3, 3721], [(x * y ^ 3 + x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 4442, 4522], [x * y ^ 3 + 2 * y ^ 4, 1321], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 3140, 3146, 5529, 7369], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 7769], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 1489, 2969], [((x * y ^ 4 + 2 * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2) + j ^ 2 * x ^ 4 * y, 3166], [x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 3180, 3186], [x + (-(j ^ 2) - 2j) * y, 2645], [x * y + (-(j ^ 2) - 2j) * y ^ 2, 2641], [x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2, 4441], [((x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 2802], [(x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 2809, 4570], [(x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 2960], [x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y + j * x ^ 4, 4565], [x - j * y, 2650], [x * y ^ 3 - j * x ^ 2 * y ^ 2, 6220], [x ^ 2 * y - j * x ^ 3, 7893, 7895], [x ^ 2 * y ^ 2 - j * x ^ 3 * y, 6300], [(x * y ^ 4 - j * x ^ 2 * y ^ 3) + y ^ 5, 3001], [(x * y ^ 2 - j * x ^ 2 * y) - j * x ^ 3, 4203], [(x * y ^ 3 - j * x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y, 4564], [(x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) + (-(j ^ 2) + j) * x ^ 3 * y, 2800], [x * y ^ 2 - j ^ 2 * x ^ 2 * y, 7560], [(x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 7927], [(x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j * x ^ 3, 4082], [x * y + j * x ^ 2, 884], [x * y ^ 2 + j * x ^ 2 * y, 881, 7644], [x * y ^ 3 + j * x ^ 2 * y ^ 2, 6041, 7641], [x ^ 2 * y ^ 2 + j * x ^ 3 * y, 7681], [x ^ 2 * y ^ 2 + j * x ^ 4, 7891], [((((x * y ^ 5 + j * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) - x ^ 5 * y) + y ^ 6, 7960], [x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3, 1492], [(2 * x * y ^ 3 - x ^ 3 * y) + y ^ 4, 7940], [2 * x * y ^ 2 + x ^ 2 * y, 6044, 6244], [2 * x * y + x ^ 2 + y ^ 2, 3024, 3110, 3194], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 3012, 3178], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 3019, 7983], [2 * x * y ^ 2 + x ^ 2 * y + 2 * y ^ 3, 1324], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 7780], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 7721], [(((2 * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y) - j * x ^ 4) + y ^ 4, 3007], [(2 * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y + y ^ 4, 7937], [3 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + y ^ 4, 4529], [3 * x * y ^ 4 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y + y ^ 5, 7977], [((-3 * j * x * y ^ 2 - 3 * j * x ^ 2 * y) - j * x ^ 3) + j ^ 2 * y ^ 3, 3015], [(((-3 * j ^ 2 - 2j) * x * y ^ 4 + 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y, 7980], [(-(j ^ 2) - 2j) * x * y ^ 2 + x ^ 2 * y, 4081], [((-(j ^ 2) - 2j) * x * y + x ^ 2) - j * y ^ 2, 4379], [((-(j ^ 2) - 2j) * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y) - y ^ 4, 4520], [(-(j ^ 2) - 2j) * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 3120], [(((-(j ^ 2) - 2j) * x * y ^ 5 + 3 * x ^ 2 * y ^ 4) - 3 * j ^ 2 * x ^ 3 * y ^ 3) + 2 * j * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 3160], [(-(j ^ 2) - 2j) * x * y ^ 5 + (-4 * j ^ 2 - 5j) * x ^ 2 * y ^ 4 + 4 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 3169], [(-(j ^ 2) - 2j) * x * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 3129], [(-(j ^ 2) - 2j) * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2, 7777], [(-(j ^ 2) - 2j) * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y + y ^ 3, 6245], [(((-(j ^ 2) - 2j) * x * y ^ 2 - 2 * j * x ^ 2 * y) - j * x ^ 3) + 2 * y ^ 3, 2521], [(((-(j ^ 2) - 2j) * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) - j * x ^ 3 * y) + 2 * y ^ 4, 7121], [(-2 * j * x * y ^ 2 - j * x ^ 2 * y) + j ^ 2 * y ^ 3, 3028], [(-2 * j ^ 2 - j) * x * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 4523], [(((((-2 * j ^ 2 - j) * x ^ 2 * y ^ 4 - 3 * j ^ 2 * x ^ 3 * y ^ 3) - 4 * j ^ 2 * x ^ 4 * y ^ 2) - 3 * j ^ 2 * x ^ 5 * y) - j ^ 2 * x ^ 6) - y ^ 6, 3162], [((((-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 - 2 * j ^ 2 * x ^ 3 * y ^ 2) - 2 * j ^ 2 * x ^ 4 * y) - j ^ 2 * x ^ 5) - y ^ 5, 3122], [(((-2 * j ^ 2 - j) * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) + y ^ 4, 3010], [((-2 * j ^ 2 - j) * x * y - j ^ 2 * x ^ 2) + y ^ 2, 4367], [(-2 * j ^ 2 - j) * x * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 3 * y + j * x ^ 4 + y ^ 4, 3005], [(-2 * j ^ 2 - j) * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 3017], [-j, 3285, 3296, 3855, 6821], [-j * x, 1045, 1056, 3071, 3411, 3773, 3977, 4309, 5857], [-j * y, 2181, 3781], [-j * x * y, 2240, 2243, 2249, 4340, 4346, 5928, 5930, 7567, 7568, 7570], [-j * x * y ^ 3, 6241], [-j * x ^ 2, 2042, 5200, 5203, 5209, 5926, 5967, 5968, 5970, 7040, 7524, 7540], [-j * y ^ 2, 4541, 7381], [-j * x ^ 2 * y, 1456, 2120, 2123, 2129, 4450, 4456, 5777, 7690, 7857], [-j * x ^ 2 * y ^ 2, 3091, 7602], [-j * x ^ 3, 5771, 5802, 7002, 7851], [-j * x ^ 3 * y, 6002], [-j * x * y + x ^ 2, 3960, 4085, 4090, 5840], [-j * x * y ^ 2 + x ^ 2 * y, 4466], [-j * x ^ 2 + y ^ 2, 6680], [(-j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 2962], [((-j * x * y ^ 3 + x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 7362], [(-j * x * y ^ 2 + x ^ 2 * y) - j ^ 2 * x ^ 3, 3048], [-j * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y, 7771], [-j * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + x ^ 3 * y, 7899], [(-j * x * y ^ 2 - 2 * j * x ^ 2 * y) - j * x ^ 3, 2816, 4575, 5525, 5536, 6084, 7376], [(-j * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 7765, 7776, 7939, 7988], [((-j * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - y ^ 4, 7989], [-j * x * y ^ 3 + (j ^ 2 - 2j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y + y ^ 4, 3004], [-j * x - j * y, 644, 2541, 3405, 3416, 3735, 3775, 4308, 4372, 4388], [-j * x * y - j * x ^ 2, 3062, 3065, 3727, 3767, 3840, 3843, 3849, 4291, 4299, 4371, 6683, 7043], [-j * x * y - j * y ^ 2, 7141], [-j * x * y ^ 2 - j * x ^ 2 * y, 3057, 3060, 4537, 4588, 5537, 7377, 7892, 7948, 7949], [-j * x * y ^ 3 - j * x ^ 2 * y ^ 2, 1377, 2968, 3096, 7361], [-j * x ^ 2 * y - j * x ^ 3, 4200, 4209, 5531, 5765, 5776, 7845, 7856], [-j * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 1496, 7884, 7973], [-j * x ^ 3 * y ^ 2 - j * x ^ 4 * y, 1480, 3082], [(-j * x * y - j * x ^ 2) + y ^ 2, 6801, 6802], [(-j * x * y ^ 2 - j * x ^ 2 * y) + y ^ 3, 1457, 2161, 2162], [(-j * x * y ^ 4 - j * x ^ 2 * y ^ 3) + y ^ 5, 3123], [(-j * x ^ 2 * y - j * x ^ 3) + y ^ 3, 7371], [(-j * x ^ 2 * y ^ 2 - j * x ^ 3 * y) + y ^ 4, 7975], [(-j * x * y ^ 5 - j * x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + y ^ 6, 3163], [(-j * x * y ^ 2 - j * x ^ 2 * y) + (-(j ^ 2) - 2j) * y ^ 3, 4525], [(-j * x * y ^ 2 - j * x ^ 2 * y) - j * y ^ 3, 4536], [(-j * x * y ^ 2 - j * x ^ 2 * y) - j ^ 2 * y ^ 3, 3761], [((((-j * x * y ^ 5 - j * x ^ 2 * y ^ 4) + (2 * j ^ 2 + j) * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) - x ^ 5 * y) + y ^ 6, 7963], [-j * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y + j ^ 2 * x ^ 3, 3722], [((-j * x * y ^ 4 + (j ^ 2 - j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2) - x ^ 4 * y) + y ^ 5, 7923], [-j * x ^ 2 * y - j ^ 2 * y ^ 3, 4445], [(-j * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 7967], [((-j * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) - 2 * j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 7970], [((-j * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - x ^ 3) + y ^ 3, 4283], [(j ^ 2 - j) * x * y ^ 4 + (3 * j ^ 2 - 2j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + y ^ 5, 3168], [(j ^ 2 - j) * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2 + y ^ 4, 3128], [(j ^ 2 - j) * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y + j ^ 2 * x ^ 3, 3762], [(j ^ 2 - j) * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2 + j ^ 2 * y ^ 4, 4521], [-2 * j ^ 2 * x * y - j ^ 2 * x ^ 2, 4368, 4370], [-(j ^ 2), 3250], [-(j ^ 2) * x, 3282, 3964, 4332, 5844], [-(j ^ 2) * y, 647, 852, 854, 867, 3241, 4383], [-(j ^ 2) * x * y, 1512, 3400, 4339, 5647, 5940, 5946, 7580, 7586], [-(j ^ 2) * x * y ^ 2, 970, 4447], [-(j ^ 2) * x * y ^ 3, 961, 1441], [-(j ^ 2) * x ^ 2, 1042, 5986, 6316], [-(j ^ 2) * y ^ 2, 845, 859, 3730, 3765, 3770, 4454, 4467], [-(j ^ 2) * x ^ 2 * y, 5764, 5923, 7563, 7706, 7844, 7902, 7905], [-(j ^ 2) * x ^ 2 * y ^ 2, 3097], [-(j ^ 2) * x ^ 3, 5960, 5963], [-(j ^ 2) * x ^ 3 * y, 1442, 5760, 6288, 7680, 7683, 7840], [((-(j ^ 2) * x * y ^ 4 - x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 7986], [(-(j ^ 2) * x * y ^ 4 - x ^ 2 * y ^ 3) + 2 * j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 7964], [-(j ^ 2) * x * y + y ^ 2, 2642], [-(j ^ 2) * x * y ^ 2 + x ^ 3, 5640], [(-(j ^ 2) * x ^ 2 * y ^ 2 - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 1484, 5522], [(-(j ^ 2) * x ^ 2 * y ^ 3 - 2 * j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 7762], [-(j ^ 2) * x * y - j ^ 2 * x ^ 2, 3402, 4288, 4290], [-(j ^ 2) * x * y - j ^ 2 * y ^ 2, 4452, 6252], [-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 1444, 1495, 1508, 3092, 4524, 5524, 5929, 6087, 7364, 7569], [-(j ^ 2) * x * y ^ 2 - j ^ 2 * y ^ 3, 6259], [-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 1364, 3099, 7764], [-(j ^ 2) * x ^ 2 * y - j ^ 2 * x ^ 3, 5969], [-(j ^ 2) * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 2803, 5520, 7689, 7928, 7930], [-(j ^ 2) * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2, 7760], [-(j ^ 2) * x ^ 3 * y - j ^ 2 * x ^ 4, 5762, 7842], [(-(j ^ 2) * x * y - j ^ 2 * x ^ 2) + y ^ 2, 4287], [(-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + y ^ 3, 4531], [(-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + x ^ 3 * y, 3084], [(-(j ^ 2) * x * y - j ^ 2 * x ^ 2) - j ^ 2 * y ^ 2, 3725], [((-(j ^ 2) * x * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) - y ^ 4, 3008], [-(j ^ 2) * x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y + j * x ^ 4, 3011], [-(j ^ 2) * x * y ^ 3 + j * x ^ 2 * y ^ 2, 7808], [-(j ^ 2) * x * y ^ 4 + j * x ^ 2 * y ^ 3, 1361], [-(j ^ 2) * x ^ 2 * y + j * x ^ 3, 7684], [-(j ^ 2) * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 4577, 6208], [-(j ^ 2) * x ^ 3 * y + j * x ^ 4, 4571], [(((-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4) - 3 * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2) - x ^ 5 * y, 7969], [-(j ^ 2) * x * y ^ 5 + (j ^ 2 + 4j) * x ^ 2 * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3, 7961], [j ^ 2, 1976, 3290], [j ^ 2 * x, 1050, 3242, 3968, 3970, 5654, 5848, 5850], [j ^ 2 * y, 660, 666, 863, 3281, 3410, 4374, 4387], [j ^ 2 * x * y, 643, 1041, 3816, 5645, 5651, 5927], [j ^ 2 * x * y ^ 2, 4460, 6250], [j ^ 2 * x * y ^ 3, 7826], [j ^ 2 * x ^ 2, 7546], [j ^ 2 * y ^ 2, 3401, 4365, 4463], [j ^ 2 * x ^ 2 * y, 1450, 5768, 5770, 6060, 6066, 6295, 6302, 7687, 7848, 7850], [j ^ 2 * x ^ 2 * y ^ 2, 962, 6226], [j ^ 2 * x ^ 2 * y ^ 3, 7803], [j ^ 2 * x ^ 3, 7520, 7523], [j ^ 2 * x ^ 3 * y, 6043, 6284, 6306], [j ^ 2 * x ^ 3 * y ^ 2, 3080, 6200, 6203], [j ^ 2 * x ^ 4 * y, 6280, 6283], [j ^ 2 * x - y, 3967, 5847], [j ^ 2 * x * y ^ 2 - y ^ 3, 3760], [((j ^ 2 * x * y ^ 4 + x ^ 2 * y ^ 3) - 2 * j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 7968], [(((j ^ 2 * x * y ^ 4 - 3 * j * x ^ 2 * y ^ 3) - 3 * j * x ^ 3 * y ^ 2) - j * x ^ 4 * y) - y ^ 5, 7979], [(j ^ 2 * x ^ 2 * y ^ 3 + (2 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (j ^ 2 - 2j) * x ^ 4 * y) - j * x ^ 5, 3171], [j ^ 2 * x * y ^ 2 - j * x ^ 2 * y, 2817, 2982, 3142], [j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2, 1368, 7804], [j ^ 2 * x ^ 2 * y - j * x ^ 3, 2811, 7688], [j ^ 2 * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 6204], [j ^ 2 * x ^ 3 * y - j * x ^ 4, 2971], [(j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y, 7885], [(j ^ 2 * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y) - j * x ^ 3, 2522], [(j ^ 2 * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 2977, 7122], [(j ^ 2 * x ^ 2 * y ^ 2 + (j ^ 2 - j) * x ^ 3 * y) - j * x ^ 4, 3131], [((j ^ 2 * x ^ 2 * y ^ 2 + (j ^ 2 - j) * x ^ 3 * y) - j * x ^ 4) + y ^ 4, 2965], [j ^ 2 * x * y ^ 3 - j ^ 2 * x ^ 3 * y, 4449], [j ^ 2 * x * y + j ^ 2 * x ^ 2, 4284], [j ^ 2 * x * y + j ^ 2 * y ^ 2, 649], [j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y, 1448, 3720, 4329, 4528, 5528, 5530, 6100, 6106, 7368, 7370, 7907], [j ^ 2 * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 7768, 7770], [j ^ 2 * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3, 7809], [j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3, 7529], [j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 1488, 1490, 2970, 3086, 6049, 6083, 7906, 7924], [j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 6209], [j ^ 2 * x ^ 3 * y + j ^ 2 * x ^ 4, 1486, 7886], [j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 4563, 6289], [(j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - x ^ 3, 7894], [j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y + y ^ 3, 2808], [j ^ 2 * x * y ^ 3 + 2 * j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 6089], [j ^ 2 * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 3003, 7889], [j ^ 2 * x * y ^ 3 + j * x ^ 3 * y, 3088], [j ^ 2 * x * y ^ 3 + j * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 3090], [(2 * j ^ 2 * x * y ^ 3 + (j ^ 2 - 2j) * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 3137], [2 * j ^ 2 * x * y + j ^ 2 * x ^ 2, 4364], [2 * j ^ 2 * x * y ^ 2 + 2 * j ^ 2 * x ^ 2 * y + j ^ 2 * y ^ 3, 4530], [((-(j ^ 2) + j) * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y) - y ^ 4, 7360], [((-(j ^ 2) + j) * x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * y ^ 3, 3192], [j, 3245, 3256, 3415, 3988, 5868, 6701, 7061], [j * x ^ -1 * y, 6277], [j * x, 646, 3407, 3971, 5851], [j * y, 648, 650, 4301], [j * x * y, 1453, 1469, 4327, 4549, 5788, 6803, 7041, 7042, 7389, 7564, 7868], [j * x * y ^ 2, 965, 976, 1445, 2163], [j * x * y ^ 3, 7807, 7810], [j * x ^ 2, 5964, 7527, 7528, 7530], [j * y ^ 2, 6269], [j * x ^ 2 * y, 6047, 6050, 6922], [j * x ^ 2 * y ^ 2, 3087, 6207, 6210], [j * x ^ 2 * y ^ 3, 3081], [j * x ^ 3, 4042, 5322, 5682], [j * x ^ 3 * y, 6287, 6290, 7682], [j * x * y - x ^ 2, 4210], [((j * x * y ^ 2 - x ^ 2 * y) - x ^ 3) + y ^ 3, 4280], [(j * x * y ^ 2 - x ^ 2 * y) - j ^ 2 * y ^ 3, 4459], [(j * x * y ^ 2 - x ^ 2 * y) + j ^ 2 * x ^ 3, 3044], [(j * x * y ^ 3 - x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y, 3041], [(j * x * y ^ 4 - x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2, 2961], [j * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 3095], [(j * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - y ^ 3, 2804], [(j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + x ^ 3 * y, 7363], [(j * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y) - j * x ^ 4, 7887], [j * x + j * y, 3072], [j * x * y + j * x ^ 2, 2640, 2649, 3731, 3771, 4297, 4377, 5775, 5924, 6681, 6682, 7373, 7855], [j * x * y + j * y ^ 2, 1455, 1468, 2828, 2992, 3068, 3152, 4548, 5548, 7388], [j * x * y ^ 2 + j * x ^ 2 * y, 1459, 2523, 4281, 4282, 4539, 6088, 6090, 7379, 7903], [j * x * y ^ 2 + j * y ^ 3, 1375, 1388, 7788, 7941], [j * x * y ^ 3 + j * x ^ 2 * y ^ 2, 7123], [j * x * y ^ 3 + j * y ^ 4, 7981], [j * x ^ 2 * y + j * x ^ 3, 2760, 2763, 2769, 4080, 4089, 6086], [j * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 1499, 3085, 6242, 7888, 7890, 7897], [j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 7976], [(j * x * y + j * x ^ 2) - y ^ 2, 2643], [j * x * y + j * x ^ 2 + j * y ^ 2, 3776], [j * x * y ^ 4 + j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 7922], [j * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 7921], [j * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y + j * x ^ 4, 4576], [j * x * y + (j ^ 2 + 2j) * y ^ 2, 3055], [j * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2, 2964], [(j * x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y) - x ^ 3, 4360], [j * x * y ^ 3 + 3 * j * x ^ 2 * y ^ 2 + 3 * j * x ^ 3 * y + j * x ^ 4, 3016], [j * x * y ^ 5 + (j ^ 2 + 3j) * x ^ 2 * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 7962], [(2 * j ^ 2 + j) * x * y ^ 3 - x ^ 2 * y ^ 2, 7820], [((((2 * j ^ 2 + j) * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y) - j * x ^ 4) + j * y ^ 4, 3125], [(((2 * j ^ 2 + j) * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y) - j * x ^ 3) - y ^ 3, 2805], [((((2 * j ^ 2 + j) * x * y ^ 4 + (2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (j ^ 2 - 3j) * x ^ 3 * y ^ 2) - 3 * j * x ^ 4 * y) - j * x ^ 5) + j * y ^ 5, 3165], [((2 * j ^ 2 + j) * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - y ^ 3, 2810], [((2 * j ^ 2 + j) * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 3182], [(2 * j ^ 2 + j) * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + j * y ^ 4, 3130], [(2 * j ^ 2 + j) * x * y ^ 4 + 3 * j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2 + j * y ^ 5, 3170], [((2 * j ^ 2 + j) * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y) - 2 * y ^ 3, 4527], [((3 * j ^ 2 + j) * x * y ^ 4 + (3 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (j ^ 2 - 2j) * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 3177], [2 * j * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + j * x ^ 3 + j * y ^ 3, 2975], [2 * j * x * y + j * x ^ 2 + j * y ^ 2, 2815, 3736, 5535, 7375], [2 * j * x * y ^ 2 + j * x ^ 2 * y + j * y ^ 3, 2988, 7775], [(2 * j * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2) - y ^ 4, 3124], [((2 * j * x * y ^ 4 + (-(j ^ 2) + 4j) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 + 2j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y) - y ^ 5, 3164], [(j ^ 2 + 2j) * x * y - x ^ 2, 4205], [(j ^ 2 + 2j) * x * y ^ 2 - x ^ 2 * y, 4201], [((j ^ 2 + 2j) * x * y ^ 2 + j * x ^ 2 * y) - y ^ 3, 3763], [(j ^ 2 + 2j) * x * y ^ 4 + j * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * y ^ 5, 3121], [(j ^ 2 + 2j) * x * y ^ 5 + 2 * j * x ^ 2 * y ^ 4 + (-(j ^ 2) + j) * x ^ 3 * y ^ 3 + (j ^ 2 + 2j) * y ^ 6, 3161], [3 * j * x * y ^ 2 + j * x ^ 2 * y + 2 * j * y ^ 3, 3148], [(j ^ 2 + 3j) * x * y ^ 2 + 2 * j * x ^ 2 * y + j * x ^ 3 + j * y ^ 3, 3135], [(-(j ^ 2) + 4j) * x * y ^ 3 + (-(j ^ 2) + 3j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y + (-(j ^ 2) + j) * y ^ 4, 3188], [(4 * j * x * y ^ 3 + 6 * j * x ^ 2 * y ^ 2 + 3 * j * x ^ 3 * y + j * x ^ 4) - j ^ 2 * y ^ 4, 3175]]) * x ^ 0 * y ^ 0
            end
        f31 = function (x, y, j)
                return dec(45, [[(-2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) + j ^ 2 * x ^ 4, 3809], [(-2 * x ^ 2 * y ^ 2 - x ^ 3 * y) + j ^ 2 * x ^ 4 + y ^ 4, 3806], [((((-2 * x * y ^ 5 - j * x ^ 2 * y ^ 4) + j ^ 2 * x ^ 4 * y ^ 2) - 3 * j * x ^ 5 * y) - j ^ 2 * x ^ 6) - y ^ 6, 3781], [(-2 * x * y ^ 2 + (2 * j ^ 2 - j) * x ^ 2 * y) - 2 * j * x ^ 3, 1669], [-2 * x * y ^ 2 + j * x ^ 2 * y + j * y ^ 3, 7765], [-1, 11, 57, 1042, 1124, 1166, 1309, 1528, 1545, 2960, 3570, 3772, 4800, 4892, 4941, 4986, 5017, 5110, 6545, 6628, 7374, 7466, 7595, 8838, 9436, 9482, 9849, 9981, 10033, 10123], [-x, 919, 1175, 1292, 1321, 1413, 2357, 2440, 2636, 4047, 5289, 5750, 5754, 6025, 6316, 6712, 6758, 7104, 7274, 7911, 8097, 10122], [-y, 1843, 3248, 3346, 3438, 3529, 4435, 5606, 6072, 6891, 7144, 7775, 7779, 8145, 8328, 8374, 8512, 8567, 8651, 8789, 9379], [-x * y, 587, 954, 1031, 1740, 1787, 1842, 1917, 1997, 2007, 2171, 2262, 4683, 4730, 4930, 5903, 6166, 6258, 6939, 7778, 7810, 7916, 8963, 9367, 9374, 9612, 9970], [-x * y ^ 2, 7072, 7079, 9068, 9115, 9917, 9927], [-(x ^ 2), 2116, 4012, 4019, 4022, 4141, 4646, 4936, 6029, 7103, 7919, 8062, 8069, 8072, 9385, 9976], [-(y ^ 2), 3128, 3844, 5883, 7084], [-(x ^ 2) * y, 3676, 6009, 7090, 7528, 7899], [-(x ^ 3), 1651, 1692, 3649, 4931, 4934, 5649, 9383, 9971, 9974], [-(x ^ 3) * y, 1271, 3297, 3674, 5998, 7088, 7527], [-(x ^ 4), 1646, 1649], [-x * y - 2 * x ^ 2, 5753], [((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + (j ^ 2 - j) * x ^ 3 * y) - j * x ^ 4, 1670], [((-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) + (j ^ 2 - j) * x ^ 4 * y) - j * x ^ 5, 1676], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y, 7769], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) + j ^ 2 * x ^ 4, 5744], [-x - y, 1133, 4437, 4925, 7433, 9965], [-x * y - x ^ 2, 1278, 1640, 3048, 3309, 3496, 3818, 4914, 4915, 4920, 5919, 7521, 7895, 7947, 9954, 9955], [-x * y - y ^ 2, 1009, 3878, 4433, 7935], [-x * y ^ 2 - x ^ 2 * y, 997, 1007, 3654, 3655, 3769, 4928, 9796, 9968], [-x * y ^ 2 - y ^ 3, 7954], [-(x ^ 2) * y - x ^ 3, 1265, 1602, 1628, 1629, 1630, 1635, 3025, 3494, 7518, 8037], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 1699, 9794], [(-x * y ^ 4 - x ^ 4 * y) - j * x ^ 5, 1260, 3286, 7516], [(-x * y ^ 2 - x ^ 2 * y) + j ^ 2 * x ^ 3, 3811], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y, 7766], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) + j ^ 2 * x ^ 4, 5741], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + j * x ^ 4, 3476], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + j * x ^ 4 * y, 9776], [-(x ^ 2) * y + y ^ 3, 3478, 3491], [-(x ^ 2) * y ^ 2 + y ^ 4, 9778, 9791], [(-x * y ^ 4 + x ^ 3 * y ^ 2) - j * x ^ 5, 3466], [(-x * y ^ 5 + x ^ 3 * y ^ 3) - j * x ^ 5 * y, 9766], [-x * y ^ 4 + x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 3791], [-x * y - j * x ^ 2, 1697], [(-x * y - j * x ^ 2) - y ^ 2, 3765], [(-(x ^ 3) * y - j * x ^ 4) - y ^ 4, 1262, 10082], [(-(x ^ 3) * y ^ 2 - j * x ^ 4 * y) - y ^ 5, 1802], [(((-x * y ^ 5 - j * x ^ 2 * y ^ 4) - x ^ 4 * y ^ 2) - 2 * j * x ^ 5 * y) - j ^ 2 * x ^ 6, 5716], [(-(x ^ 2) * y ^ 2 - j * x ^ 3 * y) + y ^ 4, 3793], [(-x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y, 7743], [(-(x ^ 2) * y ^ 2 + (j ^ 2 - j) * x ^ 3 * y) - 2 * j * x ^ 4, 5718], [(-x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y) - j * x ^ 3, 3740, 5721], [-x - j ^ 2 * y, 3815], [-x * y - j ^ 2 * y ^ 2, 7773], [-x + j ^ 2 * y, 1301], [-x * y + j ^ 2 * x ^ 2, 4932, 9972, 10098], [-x * y + j ^ 2 * y ^ 2, 7540], [-x * y ^ 2 + j ^ 2 * x ^ 2 * y, 1818, 7771], [-(x ^ 2) * y + j ^ 2 * x ^ 3, 5746, 10096], [-(x ^ 2) * y ^ 2 + j ^ 2 * x ^ 3 * y, 1816], [((-x * y ^ 5 + j ^ 2 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2 + (j ^ 2 - 2j) * x ^ 5 * y + x ^ 6, 1665], [-x * y + j ^ 2 * x ^ 2 + y ^ 2, 3471], [-x * y ^ 2 + j ^ 2 * x ^ 2 * y + y ^ 3, 9771], [(-x * y ^ 2 + j ^ 2 * x ^ 2 * y) - j * x ^ 3, 1683, 3751], [(-(x ^ 2) * y ^ 2 + j ^ 2 * x ^ 3 * y) - j * x ^ 4, 1681], [-x * y + j ^ 2 * x ^ 2 + j * y ^ 2, 1686], [-x * y + j * x ^ 2, 9377], [-x * y ^ 2 + j * x ^ 2 * y, 7082], [-x * y ^ 3 + j * x ^ 3 * y, 3747], [(-x * y ^ 2 + j * x ^ 3) - y ^ 3, 3470], [(-x * y ^ 3 + j * x ^ 3 * y) - y ^ 4, 9770], [1, 103, 1043, 1122, 1257, 1544, 2523, 2570, 3569, 3770, 3774, 4199, 4290, 4451, 6122, 6214, 6499, 7238, 8479, 9213, 9348, 9967, 10120], [x, 459, 460, 465, 772, 779, 782, 920, 966, 1012, 1058, 1087, 1094, 1097, 1173, 1196, 1288, 1334, 1401, 1426, 1564, 1618, 1704, 1748, 1794, 2117, 2412, 2774, 2866, 2913, 3003, 3497, 3589, 3681, 3817, 3911, 4049, 4142, 4648, 4946, 5254, 5282, 5292, 5752, 5984, 6028, 6363, 7087, 7179, 7547, 7628, 7897, 8053, 8099, 8101, 8240, 8286, 8424, 8607, 8745, 8875, 9190, 9388, 9802, 9986, 10124], [y, 138, 184, 230, 276, 322, 368, 414, 644, 690, 736, 828, 874, 964, 1026, 1380, 1472, 1702, 1840, 2025, 2071, 2209, 2301, 2484, 2669, 2715, 2797, 3037, 3175, 3208, 3957, 4003, 4050, 4096, 4510, 4556, 4602, 4832, 5154, 5338, 6075, 6404, 6450, 6581, 6800, 6857, 7041, 7172, 7182, 7317, 7406, 7450, 7501, 7731, 7958, 8007, 8192, 8698, 9020, 9296, 9664, 9710, 9756], [x * y, 495, 541, 1844, 1870, 1968, 2004, 3620, 5061, 5198, 5416, 5508, 5690, 5902, 6672, 6985, 7093, 7683, 7858, 7950, 8926, 9368, 9369, 9375, 9524, 9570, 9797, 9893, 10077, 10104], [x * y ^ 2, 1015, 1824, 3720, 3834, 5789, 5836, 5918, 7073, 7074, 7080, 9924], [x ^ 2, 908, 1617, 2115, 2980, 3495, 4140, 4647, 6027, 7086, 8052], [y ^ 2, 3846, 3895], [x ^ 2 * y, 1021, 1273, 3663, 9795, 10093], [x ^ 2 * y ^ 2, 1813], [x ^ 3, 3651, 5652, 9394], [x ^ 3 * y, 1016, 1019, 1272, 3661, 7099, 7526], [x ^ 2 * y ^ 2 - y ^ 4, 7774], [(x * y ^ 4 - x ^ 3 * y ^ 2) + j * x ^ 5, 3465], [(x * y ^ 5 - x ^ 3 * y ^ 3) + j * x ^ 5 * y, 9765], [x + y, 506, 552, 598, 1132, 1150, 1152, 1610, 1887, 1932, 1978, 2024, 2163, 2255, 2485, 2807, 3129, 3221, 3267, 3359, 3451, 3543, 3635, 3727, 3865, 4372, 4418, 4464, 4694, 4740, 4924, 5062, 5200, 5430, 5522, 5614, 5706, 5798, 5844, 5890, 6074, 6167, 6259, 6397, 6443, 6673, 6811, 6903, 6949, 6995, 7133, 7225, 7363, 7409, 7452, 7685, 7777, 7961, 8045, 8146, 8330, 8376, 8514, 8560, 8652, 8790, 8928, 8974, 9066, 9112, 9526, 9572, 9618, 9894, 9940, 9966, 10078], [x * y + x ^ 2, 1266, 1608, 1639, 1703, 3483, 4912, 4922, 5912, 5922, 7533, 7896, 7917, 8043, 9952, 9962], [x * y + y ^ 2, 1010, 1148, 3036, 3173, 3897, 7448], [x * y ^ 2 + x ^ 2 * y, 1000, 1868, 3652, 3662, 9783], [x * y ^ 2 + y ^ 3, 3893], [x * y ^ 3 + x ^ 2 * y ^ 2, 1013], [x ^ 2 * y + x ^ 3, 1263, 1627, 1634, 1637, 3481, 7520, 7531], [x ^ 2 * y ^ 2 + x ^ 3 * y, 3814, 5749, 9781], [(x * y ^ 3 + x ^ 2 * y ^ 2) - j * x ^ 4, 3477], [(x * y ^ 4 + x ^ 2 * y ^ 3) - j * x ^ 4 * y, 9777], [(x * y ^ 2 + x ^ 2 * y) - j ^ 2 * x ^ 3, 1696, 3761], [(x * y ^ 4 + x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y, 3792], [x * y ^ 2 + x ^ 2 * y + j * x ^ 3, 3810, 5745], [x * y ^ 4 + x ^ 4 * y + j * x ^ 5, 1261, 5987, 7515], [(x * y ^ 2 + 2 * x ^ 2 * y) - j ^ 2 * x ^ 3, 3764], [(x ^ 2 * y ^ 2 + 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 1694], [x * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 2 + (-2 * j ^ 2 + j) * x ^ 3 * y + 2 * j * x ^ 4, 1668], [x * y - j * x ^ 2, 9370], [x * y - j * y ^ 2, 7781], [x * y ^ 2 - j * x ^ 2 * y, 7075], [x * y ^ 4 - j * x ^ 3 * y ^ 2, 7752], [x ^ 2 * y ^ 3 - j * x ^ 4 * y, 5727], [(x * y ^ 2 - j * x ^ 3) + y ^ 3, 3468], [(x * y ^ 3 - j * x ^ 3 * y) + y ^ 4, 9768], [(x * y - j * x ^ 2) + j ^ 2 * y ^ 2, 3760], [x - j ^ 2 * y, 7556], [x * y - j ^ 2 * x ^ 2, 3766, 6018], [x * y - j ^ 2 * y ^ 2, 1285], [x * y ^ 2 - j ^ 2 * x ^ 2 * y, 1017], [x ^ 2 * y - j ^ 2 * x ^ 3, 6003], [x ^ 3 * y - j ^ 2 * x ^ 4, 6001], [(x * y - j ^ 2 * x ^ 2) - y ^ 2, 3469], [(x * y ^ 2 - j ^ 2 * x ^ 2 * y) - y ^ 3, 9769], [((x * y ^ 5 - j ^ 2 * x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + 2 * j * x ^ 5 * y) - x ^ 6, 5715], [(x * y - j ^ 2 * x ^ 2) - j * y ^ 2, 3801], [(x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j * x ^ 3, 3798], [(x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y, 7756], [(x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y) + j * x ^ 4, 5731], [x + j ^ 2 * y, 1700, 3317, 3768], [x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 7745], [x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y + j * x ^ 4, 5720], [x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + 2 * j * x ^ 3, 3738], [x * y + j * x ^ 2, 3812, 5747, 7908], [x ^ 3 * y ^ 2 + j * x ^ 4 * y, 1677], [(x ^ 2 * y ^ 2 + j * x ^ 3 * y) - y ^ 4, 1678], [x ^ 3 * y + j * x ^ 4 + y ^ 4, 3287, 7517], [x * y ^ 5 + j * x ^ 2 * y ^ 4 + x ^ 4 * y ^ 2 + 2 * j * x ^ 5 * y + j ^ 2 * x ^ 6, 1666], [x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 7751], [2x + y, 3773], [2 * x ^ 3 * y + x ^ 4, 3296], [((2 * x ^ 2 * y ^ 2 + x ^ 3 * y) - j ^ 2 * x ^ 4) - y ^ 4, 1691], [2 * x * y ^ 2 + 2 * x ^ 2 * y, 999], [(2 * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y) - j * y ^ 3, 7747], [(2 * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + y ^ 3, 7770], [(((((2 * x * y ^ 5 - j ^ 2 * x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2) + 3 * j * x ^ 5 * y) - x ^ 6) + y ^ 6, 3780], [(2 * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y) + j * x ^ 4, 3796], [2 * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + j * x ^ 3, 1671], [2 * x * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 2 * y + 2 * j * x ^ 3, 3784], [((-3 * j ^ 2 - 4j) * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y) - 2 * j * y ^ 3, 7754], [(-2 * j ^ 2 - 3j) * x * y + 2 * x ^ 2 + j ^ 2 * y ^ 2, 3289], [((-(j ^ 2) - 3j) * x * y + 2 * x ^ 2) - j * y ^ 2, 10095], [((-(j ^ 2) - 3j) * x * y ^ 2 + 2 * x ^ 2 * y) - j * y ^ 3, 1815], [(-(j ^ 2) - 2j) * x * y + x ^ 2, 4919, 9959], [(-(j ^ 2) - 2j) * x * y ^ 2 + x ^ 2 * y, 1005], [(-(j ^ 2) - 2j) * x * y + 2 * x ^ 2, 10089], [(-(j ^ 2) - 2j) * x * y ^ 2 + 2 * x ^ 2 * y, 1809], [(-(j ^ 2) - 2j) * x ^ 2 * y + 2 * x ^ 3, 5992], [(((-(j ^ 2) - 2j) * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y) - 2 * j ^ 2 * x ^ 3) - j * y ^ 3, 3787, 3797], [((((-(j ^ 2) - 2j) * x * y ^ 4 - j * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 4 * y + (-(j ^ 2) + j) * x ^ 5) - j * y ^ 5, 10081], [((((-(j ^ 2) - 2j) * x * y ^ 5 - j * x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3) + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2 + (-(j ^ 2) + j) * x ^ 5 * y) - j * y ^ 6, 1801], [(-(j ^ 2) - 2j) * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + 2 * j * x ^ 3, 5719], [(((((-2 * j * x * y ^ 5 + x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2) - 3 * j ^ 2 * x ^ 5 * y) + j * x ^ 6) - j * y ^ 6, 7875], [((-2 * j * x * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 2 * y) - 2 * j ^ 2 * x ^ 3) - j * y ^ 3, 7879], [(-2 * j * x * y - j * x ^ 2) + y ^ 2, 7529], [((-2 * j ^ 2 - j) * x * y ^ 2 + x ^ 2 * y) - j ^ 2 * y ^ 3, 1283], [(-2 * j ^ 2 - j) * x * y + x ^ 2 + j * y ^ 2, 7519], [((-2 * j ^ 2 - j) * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y) - j * y ^ 3, 7757], [((-2 * j ^ 2 - j) * x * y + (-2 * j ^ 2 - j) * x ^ 2) - j ^ 2 * y ^ 2, 1287], [(-2 * j ^ 2 - j) * x * y - 2 * j ^ 2 * x ^ 2, 10086], [(-2 * j ^ 2 - j) * x * y ^ 2 - 2 * j ^ 2 * x ^ 2 * y, 1806], [(-2 * j ^ 2 - j) * x ^ 2 * y - 2 * j ^ 2 * x ^ 3, 5989], [((-2 * j ^ 2 - j) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + y ^ 3, 3308], [((-2 * j ^ 2 - j) * x * y - j ^ 2 * x ^ 2) - j * y ^ 2, 3744, 3750], [((-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 3 * y + j * x ^ 4) - y ^ 4, 3785], [-j, 1296, 3307, 3487, 9395, 9396], [-j * x, 6007, 7912, 9393], [-j * y, 1025, 4379, 4424, 4470, 7100, 7101, 9787, 10100], [-j * x * y, 1023, 6004, 7098, 7768, 7927, 10088, 10105], [-j * x * y ^ 2, 1808, 1825], [-j * x ^ 2, 1291, 3808, 5743, 6006], [-j * y ^ 2, 1820], [-j * x ^ 2 * y, 1764, 10103], [-j * x ^ 2 * y ^ 2, 1823, 7753], [-j * x ^ 3, 1286, 1289, 1647, 1695, 7902], [-j * x ^ 3 * y, 5638, 5728], [-j * x - y, 3767], [(((-j * x * y ^ 5 - x ^ 3 * y ^ 3) - 2 * j * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y) - y ^ 6, 7741], [-j * x + y, 9380], [-j * x * y + x ^ 2, 10111], [-j * x * y + y ^ 2, 7085], [-j * x * y ^ 2 + x ^ 2 * y, 1831], [-j * x ^ 2 * y + x ^ 3, 10109], [-j * x ^ 2 * y ^ 2 + x ^ 3 * y, 1829], [(-j * x * y ^ 2 + x ^ 2 * y) - j * x ^ 3, 1690], [(-j * x * y ^ 2 + x ^ 2 * y) - j ^ 2 * x ^ 3, 1674, 7893], [-j * x * y + x ^ 2 + j ^ 2 * y ^ 2, 3303, 10090], [-j * x * y ^ 2 + x ^ 2 * y + j ^ 2 * y ^ 3, 1810], [-j * x ^ 2 * y + x ^ 3 + j * y ^ 3, 10106], [-j * x ^ 2 * y ^ 2 + x ^ 3 * y + j * y ^ 4, 1826], [(-j * x * y ^ 2 + 2 * x ^ 2 * y) - 2 * j ^ 2 * x ^ 3, 10083], [(-j * x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y, 1803], [(-j * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y) - 2 * j ^ 2 * x ^ 4, 5990], [((-j * x * y ^ 4 + 2 * x ^ 4 * y) - j ^ 2 * x ^ 5) + j ^ 2 * y ^ 5, 3285], [-j * x * y ^ 2 + (-(j ^ 2) - 3j) * x ^ 2 * y + 2 * x ^ 3, 5999], [(-j * x * y ^ 2 + (-3 * j ^ 2 - 2j) * x ^ 2 * y) - 2 * j ^ 2 * x ^ 3, 3794], [(((-j * x * y ^ 5 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 5 * y + (-(j ^ 2) + j) * x ^ 6, 5985], [((-j * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) + x ^ 3 * y) - j ^ 2 * x ^ 4, 7891], [((-j * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 3 * y) - j ^ 2 * x ^ 4, 7880], [(-j * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y) - 2 * j ^ 2 * x ^ 3, 5722, 5732], [-j * x - j * y, 1280, 3306, 3327, 3486, 7534], [-j * x * y - j * x ^ 2, 1269, 1270, 1275, 3472, 3482, 3664, 7522, 7532], [-j * x * y - j * y ^ 2, 7934, 9786], [-j * x * y ^ 2 - j * x ^ 2 * y, 5631, 9772, 9782], [-j * x * y ^ 2 - j * y ^ 3, 7748], [-j * x ^ 2 * y - j * x ^ 3, 3672], [-j * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 5628, 7909], [-j * x ^ 3 * y ^ 2 - j * x ^ 4 * y, 5637], [((-j * x * y ^ 3 - j * x ^ 2 * y ^ 2) + x ^ 3 * y) - j * x ^ 4, 1688], [(((-j * x * y ^ 3 - j * x ^ 2 * y ^ 2) + x ^ 3 * y) - j ^ 2 * x ^ 4) - j * y ^ 4, 10092], [(((-j * x * y ^ 4 - j * x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y) - j * y ^ 5, 1812], [(((-j * x * y ^ 4 - j * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2) + x ^ 4 * y) - j ^ 2 * x ^ 5, 5996], [(((-j * x * y ^ 5 - j * x ^ 2 * y ^ 4) - j * x ^ 4 * y ^ 2) + x ^ 5 * y) - j ^ 2 * x ^ 6, 5626], [((-j * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) - 2 * j ^ 2 * x ^ 4 * y) - j ^ 2 * x ^ 5, 7886], [(-j * x * y ^ 2 - j * x ^ 2 * y) - j ^ 2 * x ^ 3, 7905], [(-j * x * y ^ 4 - j * x ^ 4 * y) - j ^ 2 * x ^ 5, 1667], [((-j * x * y ^ 5 - j * x ^ 2 * y ^ 4) - j ^ 2 * x ^ 5 * y) - j ^ 2 * x ^ 6, 1575, 8010], [-j * x * y - j ^ 2 * x ^ 2, 1838, 7907], [-j * x * y ^ 4 - j ^ 2 * x ^ 5, 1586, 8021], [(-j * x ^ 3 * y - j ^ 2 * x ^ 4) - j * y ^ 4, 3737], [(-j * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3, 1675], [((-j * x * y ^ 4 - j ^ 2 * x ^ 4 * y) - j ^ 2 * x ^ 5) - j * y ^ 5, 1577, 8012], [(-j * x * y ^ 3 + j * x ^ 3 * y) - x ^ 4, 6011], [-j * x ^ 3 * y ^ 2 + j * x ^ 4 * y + j * x ^ 5, 5726], [((j ^ 2 - j) * x * y ^ 2 + x ^ 2 * y) - j ^ 2 * x ^ 3, 1680], [((j ^ 2 - j) * x * y - 2 * j * x ^ 2) - y ^ 2, 3292, 3302], [((j ^ 2 - j) * x * y - 2 * j * x ^ 2) + (j ^ 2 + 2j) * y ^ 2, 3739], [((j ^ 2 - j) * x * y ^ 2 - j * x ^ 2 * y) - y ^ 3, 7746], [((2 * j ^ 2 - j) * x * y - 2 * j * x ^ 2) - y ^ 2, 3299], [(-2 * j ^ 2 * x * y - x ^ 2) - j ^ 2 * y ^ 2, 3813], [((-2 * j ^ 2 * x * y ^ 2 - 2 * j ^ 2 * x ^ 2 * y) + j * x ^ 3) - j ^ 2 * y ^ 3, 3314], [-2 * j ^ 2 * x * y - j ^ 2 * x ^ 2, 4909, 9949], [-2 * j ^ 2 * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 996], [(-2 * j ^ 2 * x * y - j ^ 2 * x ^ 2) - j ^ 2 * y ^ 2, 7523], [((-2 * j ^ 2 * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j * x ^ 3) - j ^ 2 * y ^ 3, 3311], [-2 * j ^ 2 * x * y + j * x ^ 2 + y ^ 2, 3300], [(-2 * j ^ 2 * x * y ^ 2 + 2 * j * x ^ 2 * y) - x ^ 3, 7890], [-(j ^ 2), 3320, 3324, 3500, 3508, 3771, 3775, 7550], [-(j ^ 2) * x, 456, 769, 1084, 1701, 3485, 3498, 3507, 3779, 4937, 5737, 6020, 7548, 9977], [-(j ^ 2) * y, 1611, 3776, 3823, 4369, 4414, 4461, 7762, 8046, 9800, 9808], [-(j ^ 2) * x * y, 1706, 3759, 5644, 5734, 7761, 7782, 9366, 9785, 9798, 9807], [-(j ^ 2) * x * y ^ 2, 7071, 7923], [-(j ^ 2) * x ^ 2, 1685, 1709, 3473, 4935, 5736, 5757, 6017, 9975, 10107], [-(j ^ 2) * y ^ 2, 7759], [-(j ^ 2) * x ^ 2 * y, 1606, 1689, 1827, 8041, 9363, 9373, 9773], [-(j ^ 2) * x ^ 2 * y ^ 2, 1003, 1760, 7068, 7078], [-(j ^ 2) * x ^ 3, 462, 776, 913, 1091, 1579, 1593, 4008, 6015, 8014, 8028, 8058], [-(j ^ 2) * x ^ 3 * y, 1601, 1604, 4916, 8036, 8039, 9372, 9956], [-(j ^ 2) * x ^ 3 * y ^ 2, 1002, 7077], [-(j ^ 2) * x ^ 4, 451, 765, 1080, 1580, 1591, 8015, 8026], [-(j ^ 2) * x * y - x ^ 2, 5748], [-(j ^ 2) * x * y ^ 3 - x ^ 3 * y, 3658, 3671], [(-(j ^ 2) * x * y ^ 2 - x ^ 2 * y) - x ^ 3, 7885], [(-(j ^ 2) * x * y ^ 2 - x ^ 2 * y) - j ^ 2 * y ^ 3, 3298], [(-(j ^ 2) * x ^ 3 * y - x ^ 4) - j ^ 2 * y ^ 4, 4907, 9947], [(-(j ^ 2) * x * y ^ 2 - x ^ 2 * y) + j * x ^ 3, 5740], [-(j ^ 2) * x + y, 3802, 9978], [-(j ^ 2) * x * y + x ^ 2, 7545], [-(j ^ 2) * x * y + y ^ 2, 3310], [-(j ^ 2) * x * y ^ 2 + x ^ 3, 3807], [-(j ^ 2) * x * y ^ 3 + x ^ 4, 3648], [-(j ^ 2) * x ^ 2 * y ^ 3 + x ^ 5, 3657], [((-(j ^ 2) * x * y ^ 5 + x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + 2 * j * x ^ 4 * y ^ 2) - x ^ 5 * y) + y ^ 6, 7740], [-(j ^ 2) * x - j * y, 1839, 3318], [-(j ^ 2) * x - j ^ 2 * y, 3323, 3680, 3755, 4244, 4335], [-(j ^ 2) * x * y - j ^ 2 * x ^ 2, 3665, 3822, 4923, 9963], [-(j ^ 2) * x * y - j ^ 2 * y ^ 2, 1595, 1724, 3743, 8030], [-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 1585, 5632, 5639, 8020], [-(j ^ 2) * x ^ 2 * y - j ^ 2 * x ^ 3, 1624, 1638, 4910, 4921, 9950, 9961], [-(j ^ 2) * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 993], [-(j ^ 2) * x ^ 3 * y - j ^ 2 * x ^ 4, 1625, 1636], [-(j ^ 2) * x ^ 4 * y - j ^ 2 * x ^ 5, 1631], [(-(j ^ 2) * x * y ^ 4 - j ^ 2 * x ^ 4 * y) - x ^ 5, 4905, 7877, 9361, 9945], [(-(j ^ 2) * x * y ^ 5 - j ^ 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 991, 7066], [((-(j ^ 2) * x * y ^ 5 - j ^ 2 * x ^ 2 * y ^ 4) - x ^ 5 * y) - x ^ 6, 3645], [((-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) + j * x ^ 4, 5738], [(-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + x ^ 3, 5642, 5742], [(-(j ^ 2) * x * y - j ^ 2 * x ^ 2) - j * y ^ 2, 3745], [(-(j ^ 2) * x * y ^ 4 - j ^ 2 * x ^ 4 * y) + j * x ^ 5, 1622], [(-(j ^ 2) * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 5 * y) + j * x ^ 6, 1620], [((-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y) - j ^ 2 * x ^ 4, 7898], [-(j ^ 2) * x * y + j * x ^ 2, 3294], [-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y, 7758], [-(j ^ 2) * x ^ 2 * y + j * x ^ 3, 5733], [(-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y) - x ^ 3, 5995, 7884], [(-(j ^ 2) * x * y + j * x ^ 2) - j * y ^ 2, 3480], [(-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y) - j * y ^ 3, 9780], [(-(j ^ 2) * x * y + j * x ^ 2) - j ^ 2 * y ^ 2, 3316], [(-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * x ^ 3, 7900], [j ^ 2, 1295, 3322, 3757, 10115], [j ^ 2 * x, 1293, 3484, 3756, 3777, 3816, 5751, 5755, 10112], [j ^ 2 * y, 1835, 3754, 7429, 7776, 7780], [j ^ 2 * x * y, 1022, 1832, 3821, 4233, 4325, 5645, 5756, 7784, 9364, 9378, 9784], [j ^ 2 * x * y ^ 2, 1713, 3788, 7069, 7083, 7764], [j ^ 2 * x ^ 2, 455, 768, 918, 1083, 3312, 3492, 3800, 3824, 4009, 5759, 7903, 8059, 10110], [j ^ 2 * y ^ 2, 3874], [j ^ 2 * x ^ 2 * y, 1020, 1830, 4918, 5633, 5739, 9365, 9376, 9792, 9958], [j ^ 2 * x ^ 2 * y ^ 2, 7070, 7081], [j ^ 2 * x ^ 3, 916, 1581, 6012, 8016], [j ^ 2 * x ^ 3 * y, 4917, 9371, 9957], [j ^ 2 * x ^ 3 * y ^ 2, 1001, 7076], [j ^ 2 * x ^ 4, 902, 1578, 4016, 5659, 8013, 8066], [j ^ 2 * x ^ 5, 4005, 8055], [j ^ 2 * x - y, 10113], [j ^ 2 * x * y - x ^ 2, 1290], [j ^ 2 * x * y - y ^ 2, 1833], [j ^ 2 * x * y ^ 3 - x ^ 4, 3650], [j ^ 2 * x ^ 2 * y ^ 3 - x ^ 5, 3656], [((((j ^ 2 * x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y) + x ^ 5) - y ^ 5, 3735], [(j ^ 2 * x * y - x ^ 2) + j ^ 2 * y ^ 2, 3762], [j ^ 2 * x * y + x ^ 2, 1698], [((j ^ 2 * x * y ^ 2 + x ^ 2 * y) - j * x ^ 3) + j ^ 2 * y ^ 3, 3758], [j ^ 2 * x * y + x ^ 2 + j ^ 2 * y ^ 2, 3315], [j ^ 2 * x ^ 3 * y + x ^ 4 + j ^ 2 * y ^ 4, 9362], [j ^ 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + j ^ 2 * y ^ 5, 992, 7067], [j ^ 2 * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y + x ^ 3, 6002], [j ^ 2 * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y + x ^ 3 + j ^ 2 * y ^ 3, 3290], [(j ^ 2 * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y) - 2 * j ^ 2 * x ^ 3, 5729], [j ^ 2 * x * y - j * x ^ 2, 3753], [(j ^ 2 * x * y - j * x ^ 2) + j * y ^ 2, 3479], [(j ^ 2 * x * y ^ 2 - j * x ^ 2 * y) + j * y ^ 3, 9779], [j ^ 2 * x + j ^ 2 * y, 3820], [j ^ 2 * x * y + j ^ 2 * x ^ 2, 1707, 4911, 5735], [j ^ 2 * x * y + j ^ 2 * y ^ 2, 1268, 7760], [j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y, 1008, 1592, 1770, 3319, 3804, 5634, 5635, 5640, 5723, 8027], [j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3, 1626, 4908, 9948], [j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 995, 1006], [j ^ 2 * x ^ 3 * y + j ^ 2 * x ^ 4, 1623, 1633], [j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 1632], [j ^ 2 * x * y ^ 4 + j ^ 2 * x ^ 4 * y + x ^ 5, 4906, 9360, 9946], [j ^ 2 * x * y ^ 5 + j ^ 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 990, 7065], [j ^ 2 * x * y ^ 5 + j ^ 2 * x ^ 2 * y ^ 4 + x ^ 5 * y + x ^ 6, 3646], [(j ^ 2 * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 5 * y) - j * x ^ 6, 1621], [j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y + j * y ^ 3, 7750], [j ^ 2 * x + j * y, 1687], [j ^ 2 * x ^ 4 + j * y ^ 4, 1588, 8023], [2 * j ^ 2 * x * y ^ 2 + (-(j ^ 2) - 3j) * x ^ 2 * y + 2 * x ^ 3 + j ^ 2 * y ^ 3, 7889], [2 * j ^ 2 * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y + 2 * x ^ 3 + j ^ 2 * y ^ 3, 7882, 7892], [(2 * j ^ 2 * x * y ^ 2 - j * x ^ 2 * y) + x ^ 3 + j ^ 2 * y ^ 3, 3301], [2 * j ^ 2 * x * y + j ^ 2 * x ^ 2, 9951], [2 * j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y, 994], [(-2 * j ^ 2 + j) * x * y ^ 2 + 2 * j * x ^ 2 * y + 2 * y ^ 3, 7744], [(((-(j ^ 2) + j) * x * y ^ 3 + j * x ^ 2 * y ^ 2) - x ^ 3 * y) + j * x ^ 4, 3803], [(-(j ^ 2) + j) * x * y + j * x ^ 2 + y ^ 2, 3741], [j, 3321, 4940, 7551, 9980, 10102], [j * x, 1655, 3329, 3688, 3763, 4237, 4329, 4938, 7910, 7914, 10101], [j * y, 1279, 1822, 3326, 7439, 10099], [j * x * y, 1717, 1821, 3490, 6005], [j * x * y ^ 2, 9790], [j * x ^ 2, 1653, 1693, 3687, 7546, 9387], [j * y ^ 2, 1819, 3884], [j * x ^ 2 * y, 3748, 5643, 5993, 6010, 7092], [j * x ^ 3, 7541, 7544], [j * x ^ 3 * y, 5641, 6008], [(j * x * y ^ 2 - 2 * x ^ 2 * y) + 2 * j ^ 2 * x ^ 3, 10085], [(j * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + 2 * j ^ 2 * x ^ 3 * y, 1805], [(j * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) + 2 * j ^ 2 * x ^ 4, 5988], [j * x ^ 2 * y - x ^ 3, 6016], [j * x ^ 3 * y - x ^ 4, 6014], [(j * x * y ^ 2 - x ^ 2 * y) + j * x ^ 3, 3805], [j * x * y + y ^ 2, 7772], [j * x * y ^ 4 + x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j ^ 2 * x ^ 5 + y ^ 5, 3736], [(j * x ^ 2 * y ^ 2 - j * x ^ 3 * y) - j * x ^ 4, 3746], [(j * x * y ^ 3 - j * x ^ 3 * y) - j ^ 2 * x ^ 4, 6019], [j * x * y ^ 4 + j ^ 2 * x ^ 5, 1587, 8022], [j * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 7887], [(j * x ^ 2 * y + j ^ 2 * x ^ 3) - j * y ^ 3, 10114], [(j * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y) - j * y ^ 4, 1834], [j * x * y ^ 2 + j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3, 5725], [j * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y + j * y ^ 5, 7742], [j * x * y ^ 5 + j ^ 2 * x ^ 2 * y ^ 4 + j * x ^ 4 * y ^ 2 + 2 * j ^ 2 * x ^ 5 * y + x ^ 6, 7876], [j * x + j * y, 3305, 7535], [j * x * y + j * x ^ 2, 1267, 1277, 3295, 3474, 3475, 3678, 7524, 7525, 7530, 7913], [j * x * y ^ 2 + j * x ^ 2 * y, 3488, 5629, 9774, 9775], [j * x * y ^ 3 + j * x ^ 2 * y ^ 2, 9788], [j * x ^ 2 * y + j * x ^ 3, 3653], [j * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 5630], [j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 5636], [(j * x * y ^ 2 + j * x ^ 2 * y) - x ^ 3, 7906], [((j * x * y ^ 3 + j * x ^ 2 * y ^ 2) - x ^ 3 * y) + j ^ 2 * x ^ 4 + j * y ^ 4, 10091], [((j * x * y ^ 4 + j * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + j ^ 2 * x ^ 4 * y + j * y ^ 5, 1811], [j * x * y ^ 3 + j * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 7888], [j * x * y ^ 4 + j * x ^ 4 * y + j ^ 2 * x ^ 5, 3782, 5627, 5717], [j * x * y ^ 5 + j * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 5 * y + j ^ 2 * x ^ 6, 1576, 8011], [((j * x * y ^ 4 + j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - x ^ 4 * y) + j ^ 2 * x ^ 5, 5997], [((j * x * y ^ 5 + j * x ^ 2 * y ^ 4 + j * x ^ 4 * y ^ 2) - x ^ 5 * y) + j ^ 2 * x ^ 6, 5625], [j * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y + j ^ 2 * x ^ 3, 5724, 5730], [j * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y + 2 * j ^ 2 * x ^ 3, 1672, 1682], [(j * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2 + j * x ^ 3 * y) - x ^ 4, 7901], [(j * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y) - x ^ 4, 7904], [j * x * y ^ 5 + (j ^ 2 + 2j) * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 5 * y + (j ^ 2 - j) * x ^ 6, 5986], [j * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + (3 * j ^ 2 + j) * x ^ 3 * y + 2 * j ^ 2 * x ^ 4, 7878], [j * x * y ^ 2 + (3 * j ^ 2 + 2j) * x ^ 2 * y + 2 * j ^ 2 * x ^ 3, 1679], [(j * x * y ^ 2 + (j ^ 2 + 3j) * x ^ 2 * y) - 2 * x ^ 3, 6000], [(j * x * y ^ 2 + (2 * j ^ 2 + 3j) * x ^ 2 * y) - 2 * x ^ 3, 3288], [(2 * j ^ 2 + j) * x ^ 2 * y - x ^ 3, 1276], [((2 * j ^ 2 + j) * x * y - x ^ 2) - j * y ^ 2, 1264], [((2 * j ^ 2 + j) * x * y ^ 2 - x ^ 2 * y) + j ^ 2 * y ^ 3, 7538], [(((2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (j ^ 2 - 2j) * x ^ 3 * y) - 2 * j * x ^ 4) + y ^ 4, 3783], [((2 * j ^ 2 + j) * x * y ^ 2 + (j ^ 2 - 2j) * x ^ 2 * y) - j * x ^ 3, 3786], [(2 * j ^ 2 + j) * x * y ^ 2 + j ^ 2 * x ^ 2 * y + j * y ^ 3, 7749], [(2 * j ^ 2 + j) * x * y + 2 * j ^ 2 * x ^ 2, 10084], [(2 * j ^ 2 + j) * x * y ^ 2 + 2 * j ^ 2 * x ^ 2 * y, 1804], [(2 * j ^ 2 + j) * x ^ 2 * y + 2 * j ^ 2 * x ^ 3, 5991], [((2 * j ^ 2 + j) * x * y + 2 * j ^ 2 * x ^ 2) - j ^ 2 * y ^ 2, 3749], [(2 * j ^ 2 + j) * x * y + 2 * j ^ 2 * x ^ 2 + j * y ^ 2, 3742, 3752], [(2 * j ^ 2 + j) * x * y + (2 * j ^ 2 + j) * x ^ 2 + j ^ 2 * y ^ 2, 7542], [2 * j * x * y ^ 2 + j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3 + j * y ^ 3, 3790], [(2 * j * x * y + j * x ^ 2) - y ^ 2, 1274], [2 * j * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y + j ^ 2 * x ^ 3, 7881], [(j ^ 2 + 2j) * x * y - 2 * x ^ 2, 10087], [(j ^ 2 + 2j) * x * y ^ 2 - 2 * x ^ 2 * y, 1807], [(j ^ 2 + 2j) * x ^ 2 * y - 2 * x ^ 3, 5994], [((j ^ 2 + 2j) * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y + j * y ^ 4, 7763], [(j ^ 2 + 2j) * x * y - x ^ 2, 9960], [(j ^ 2 + 2j) * x * y ^ 2 - x ^ 2 * y, 1004], [((j ^ 2 + 2j) * x * y - x ^ 2) - j ^ 2 * y ^ 2, 3291, 10097], [((j ^ 2 + 2j) * x * y ^ 2 - x ^ 2 * y) - j ^ 2 * y ^ 3, 1817], [(j ^ 2 + 2j) * x * y ^ 2 + j * y ^ 3, 7767], [(j ^ 2 + 2j) * x * y ^ 4 + j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y + (j ^ 2 - j) * x ^ 5 + j * y ^ 5, 10080], [(j ^ 2 + 2j) * x * y ^ 5 + j * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2 + (j ^ 2 - j) * x ^ 5 * y + j * y ^ 6, 1800], [(j ^ 2 + 2j) * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y + j ^ 2 * x ^ 3 + j * y ^ 3, 3789], [(j ^ 2 + 2j) * x * y ^ 2 + (3 * j ^ 2 + 2j) * x ^ 2 * y + j ^ 2 * x ^ 3, 3795], [((j ^ 2 + 3j) * x * y - 2 * x ^ 2) + j * y ^ 2, 10094], [((j ^ 2 + 3j) * x * y ^ 2 - 2 * x ^ 2 * y) + j * y ^ 3, 1814], [(4 * j ^ 2 + 3j) * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y + (j ^ 2 + 2j) * y ^ 3, 7755], [-1 // y, 3412, 5393, 5484, 9220], [-x // y, 3010, 9399], [-(x ^ 2) // y, 5665, 9398], [(-x * y - x ^ 2) // y, 3174], [1 // y, 9156, 9247], [x // y, 3084, 3502, 5575, 9382], [x ^ 2 // y, 9381], [(x * y + x ^ 2) // y, 3055], [(-j * x * y - j ^ 2 * x ^ 2) // y, 10118], [(-(j ^ 2) * x ^ 2) // y, 5664], [(-(j ^ 2) * x ^ 3) // y, 5663], [(-(j ^ 2) * x - j * y) // y, 10119], [(j * x * y + j ^ 2 * x ^ 2) // y, 6024], [(j * x ^ 2 * y + j ^ 2 * x ^ 3) // y, 6023]]) * x ^ 0 * y ^ 0
            end
        f35 = function (x, y)
                return dec(60, [[((-4 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 7146], [((-3 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - 2 * y ^ 3, 9246], [(-3 * x ^ 2 * y - 2 * x ^ 3) + y ^ 3, 13982], [-3 * x * y ^ 3 + x ^ 4, 7086], [-2y, 9382], [-2 * x * y, 9202], [-2 * x * y ^ 2, 3584, 6862], [-2 * y ^ 2, 12802], [-2 * x ^ 2 * y ^ 2, 16440], [(((-2 * x * y ^ 4 - 5 * x ^ 2 * y ^ 3) - 5 * x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5, 10444], [((-2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, 7141], [(((-2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4) + y ^ 4, 3546], [(-2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y, 10445, 17642, 17645], [-2 * x * y ^ 2 - 2 * y ^ 3, 17662], [-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 3245], [(-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 6605, 10457], [((-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 12481], [((-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 10458, 10686, 17946], [-2 * x * y - x ^ 2, 7154, 7155], [-2 * x * y - y ^ 2, 7182, 14002], [-2 * x * y ^ 2 - x ^ 2 * y, 12785], [-2 * x * y ^ 2 - y ^ 3, 17648], [-2 * x * y ^ 3 - y ^ 4, 12483], [-2 * x ^ 2 * y - x ^ 3, 9182, 9185], [-2 * x ^ 2 * y ^ 2 - x ^ 3 * y, 6845], [(-2 * x * y ^ 2 - x ^ 2 * y) - 2 * y ^ 3, 10462, 12486], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 3486], [((-2 * x * y ^ 2 - x ^ 2 * y) - x ^ 3) - y ^ 3, 13626], [((-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 10746, 17886], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + 2 * x ^ 4, 9240], [-2 * x * y + x ^ 2, 7122], [-2 * x ^ 2 + y ^ 2, 14001], [-2 * x ^ 2 * y + x ^ 3, 7117], [-2 * x * y ^ 3 + x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + 2 * x ^ 4, 9243], [(-2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y) - x ^ 5, 7080], [-1, 626, 1425, 3668, 3790, 4829, 5259, 5802, 6042, 6045, 6654, 7451, 7695, 7939, 8550, 8738, 9106, 9298, 9346, 9350, 9417, 10982, 11232, 11348, 11421, 11477, 11605, 11920, 12022, 13062, 13794, 14039, 14158, 14219, 15942], [-x, 66, 433, 502, 560, 678, 745, 930, 997, 1060, 1178, 1722, 1727, 2922, 2925, 3402, 3407, 3731, 3907, 4877, 4944, 4996, 5131, 5433, 5785, 5797, 5800, 5929, 6025, 6037, 6351, 6413, 6628, 6641, 6645, 7048, 7061, 7203, 7629, 8000, 8082, 8087, 8307, 9226, 9237, 9254, 9273, 9287, 9295, 9331, 9377, 9381, 9383, 9883, 10121, 10193, 10376, 11955, 12528, 12575, 12756, 13110, 13184, 13610, 13634, 13635, 13650, 13653, 13912, 14014, 14036, 14037, 14262, 14525, 15067, 15436, 15493, 15683, 16040, 16276, 16277, 16281, 16283, 16536, 16769, 16837, 17072, 17217, 17331, 17388, 17391, 17608, 17621], [-y, 1282, 2954, 2973, 3347, 3406, 3417, 4755, 5294, 5295, 5310, 5313, 5322, 5327, 5846, 5849, 5852, 6039, 6044, 6522, 6525, 6988, 7001, 7006, 7017, 8477, 8596, 9259, 9281, 9290, 9368, 9384, 9389, 9399, 9750, 10634, 10662, 10798, 11768, 12382, 12510, 12522, 12530, 12837, 13302, 13305, 14025, 15128, 15555, 16282, 16284, 16488, 16491, 16492, 16710, 17142, 17354, 17373, 17741], [-x * y ^ -2, 3974], [-x * y ^ -1, 5794, 9407], [-x * y, 1262, 1265, 1280, 1287, 2048, 2052, 2062, 2064, 2065, 2069, 2071, 2075, 2503, 2504, 2532, 2536, 2537, 2541, 2543, 2919, 2924, 2964, 3086, 3089, 3092, 3155, 3156, 3494, 3495, 3510, 3513, 3522, 5304, 5305, 5317, 5320, 5829, 5830, 5840, 6011, 6142, 6144, 6452, 6505, 6506, 6517, 6520, 6897, 6981, 6983, 7052, 7094, 7095, 7113, 7127, 7130, 7170, 7190, 8587, 8590, 9188, 9209, 9219, 9223, 9252, 9271, 9378, 9926, 9937, 10106, 10119, 10289, 10292, 10468, 10645, 10651, 10754, 10755, 10770, 10773, 10792, 11648, 11652, 11662, 11664, 11665, 11669, 11671, 11675, 11769, 11771, 12362, 12365, 12380, 12387, 12517, 12797, 12801, 12803, 13285, 13297, 13300, 13303, 14012, 14016, 14019, 14023, 15129, 15131, 16273, 16278, 16464, 16469, 16472, 16475, 16476, 16479, 16484, 16892, 17125, 17126, 17137, 17140, 17408, 17422, 17612, 17668, 17894, 17895, 17910, 17913, 17932], [-x * y ^ 2, 1686, 2470, 2886, 3121, 3140, 3147, 3182, 3185, 3187, 3191, 3193, 3198, 3207, 3257, 3261, 3263, 3284, 3310, 3367, 3371, 3557, 3572, 3575, 3583, 6430, 6613, 6618, 6620, 6627, 6848, 6869, 6962, 6965, 6980, 6987, 7022, 7025, 7033, 7038, 7040, 7047, 7172, 8046, 9300, 9303, 10629, 12787, 12798, 12800, 13271, 16442, 16445, 16870, 17582, 17585, 17593, 17598, 17600, 17607, 17710], [-x * y ^ 3, 3253, 3258, 12480], [-(x ^ 2), 1705, 1717, 1720, 2905, 2917, 3136, 3137, 3385, 3397, 3400, 3573, 5773, 5778, 6013, 6136, 6137, 6141, 6143, 7114, 8065, 8077, 8080, 9201, 9203, 9280, 9370, 10694, 10695, 10710, 10713, 10727, 12497, 13644, 14245, 14257, 14260, 15561, 15563, 16270, 17954, 17955, 17970, 17973, 17987], [-(y ^ 2), 864, 1624, 2486, 3188, 3202, 3219, 3297, 3326, 3368, 3384, 3386, 5675, 5766, 6006, 6103, 6446, 6968, 6982, 6989, 6999, 7028, 7042, 8904, 9302, 9369, 10052, 10652, 10664, 12788, 12809, 12864, 14242, 14944, 16886, 17263, 17588, 17602, 17726], [-(x ^ 2) * y, 1263, 1689, 2045, 2047, 2049, 2053, 2060, 2522, 2525, 2527, 2530, 2891, 2947, 2953, 3069, 3070, 3080, 3265, 3271, 3504, 3505, 3517, 3520, 5823, 6133, 6138, 6493, 6498, 6611, 6857, 6861, 6863, 7166, 8049, 8580, 8583, 9187, 9191, 9200, 9207, 9249, 9740, 9747, 9905, 9913, 10090, 10091, 10269, 10764, 11645, 11647, 11649, 11653, 11660, 12363, 12790, 13273, 13278, 16700, 16707, 17113, 17118, 17904], [-(x ^ 2) * y ^ 2, 2460, 2463, 3249, 3250, 3300, 3303, 6420, 6423, 6847, 6858, 6860, 10749, 16443, 16860, 16863, 17340, 17700, 17703, 17889], [-(x ^ 3), 1693, 1698, 2893, 3127, 3130, 6130, 8053, 8058, 9190, 10483, 10704, 13633, 13638, 14233, 14238, 15550, 16263, 17964], [-(y ^ 3), 2521, 6486, 10464, 10626, 13266, 17106], [-(x ^ 3) * y, 2523, 3063, 6850, 7020, 10080, 10083, 10753, 10758, 17580, 17893, 17898], [-(x ^ 3) * y ^ 2, 3244], [-(x ^ 4), 6123, 10693, 10698, 15540, 17953, 17958], [(-x * y ^ 2 - 3 * x ^ 2 * y) - 2 * x ^ 3, 13985], [-x * y - 2 * x ^ 2, 14003], [-x * y - 2 * y ^ 2, 6622], [-x * y ^ 2 - 2 * x ^ 2 * y, 7177], [-x * y ^ 2 - 2 * y ^ 3, 3262], [((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 3541], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 7081], [((-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 9241], [-x - y, 6657, 9255, 9270, 9282, 12494, 12495, 12513, 12527, 13662], [-x - x ^ 2 * y ^ -1, 1994, 9208, 12814], [-x * y - x ^ 2, 1038, 3141, 3143, 3554, 3555, 3570, 5424, 6623, 6635, 7173, 7174, 7187, 7192, 7681, 8526, 9264, 9265, 9277, 9365, 10481, 10722, 11464, 12504, 13645, 13657, 13660, 15427, 16262, 16265, 16267, 17982], [-x * y - y ^ 2, 2079, 2084, 2411, 3142, 3209, 5602, 5761, 6608, 6629, 6639, 7046, 7049, 7059, 9311, 9327, 9380, 10497, 10782, 11679, 11684, 13988, 14228, 15371, 16448, 16462, 17606, 17609, 17619, 17686, 17697, 17922], [-x * y ^ 2 - x ^ 2 * y, 2067, 3189, 3200, 3252, 5764, 6607, 7031, 7180, 8101, 9006, 10461, 10463, 10765, 10777, 10780, 11667, 11824, 13991, 16449, 16460, 16467, 17591, 17661, 17663, 17905, 17917, 17920], [-x * y ^ 2 - x ^ 3, 3373, 3378], [-x * y ^ 2 - y ^ 3, 3248, 3269, 3279, 10448, 10469, 17669, 17679, 17683], [-x * y ^ 3 - x ^ 2 * y ^ 2, 2040, 3247, 3260, 3267, 6964, 10447, 11640, 17647, 17651, 17660, 17667], [-(x ^ 2) - x ^ 3 * y ^ -1, 1047, 6874, 15429], [-(x ^ 2) * y - x ^ 3, 3580, 4501, 4864, 6122, 6125, 6127, 8224, 10705, 10717, 10720, 11941, 13086, 15542, 15545, 17965, 17977, 17980], [-(x ^ 2) * y - y ^ 3, 9726, 16686], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 7023, 7149, 10741, 17583, 17650, 17881], [-(x ^ 2) * y ^ 2 - x ^ 4, 3123], [-(x ^ 3) * y - x ^ 4, 15543], [-(x ^ 3) * y ^ 2 - x ^ 5, 7084], [(-x * y ^ 2 - x ^ 2 * y) - 2 * y ^ 3, 5286], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 3122, 3125, 9364, 10480, 13621, 16264], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 4741, 5281, 7030, 8464, 15541, 17590], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 2524, 3481, 12784], [(-x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 3544], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) - x ^ 4, 3124, 6124, 10681, 17941], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 6844], [((-x * y ^ 2 - x ^ 2 * y) - x ^ 3) - y ^ 3, 10479], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 12484], [(-x * y - x ^ 2) + y ^ 2, 3582, 9362], [(-x * y ^ 2 - x ^ 2 * y) + y ^ 3, 12782], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + y ^ 4, 3242], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) + y ^ 4, 10442], [((-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2) - x ^ 5, 7083], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 10460, 13620], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + y ^ 4, 10620], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4 + y ^ 4, 3363], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + 2 * x ^ 4 * y, 10740, 17880], [-x * y + x ^ 2, 7110, 7125, 14009], [-x * y ^ 2 + x ^ 2 * y, 6973, 6978, 12793], [-x * y ^ 2 + x ^ 3, 3275, 3370, 6000, 7027, 17587], [-x * y ^ 3 + x ^ 2 * y ^ 2, 6480, 17100], [-x * y ^ 3 + x ^ 3 * y, 5280, 7151, 13260, 17653, 17658], [-(x ^ 2) * y + x ^ 3, 7120, 9193, 9198, 11760, 13998, 15120], [-(x ^ 2) * y ^ 2 + x ^ 3 * y, 6853], [-(x ^ 2) * y ^ 2 + x ^ 4, 1680, 2880, 3360, 8040, 14220], [-(x ^ 2) * y ^ 2 + y ^ 4, 6963], [-(x ^ 2) * y ^ 3 + x ^ 5, 7140], [-(x ^ 3) + y ^ 3, 9363], [(-x * y + x ^ 2) - y ^ 2, 7185], [-x * y ^ 2 + x ^ 2 * y + x ^ 3, 3362, 3365, 3561, 14225], [-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 3560], [-x * y ^ 3 + x ^ 3 * y + x ^ 4, 1683, 8043], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 3480], [(-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y) - x ^ 4, 6120], [-(x ^ 2) * y ^ 3 + x ^ 4 * y + 2 * x ^ 5, 10680, 17940], [-x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 13623], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 3543], [-x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 10743, 17883], [-x * y ^ 3 + x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4 + y ^ 4, 3542], [-(x ^ 2) * y + 2 * x ^ 3, 7105], [(-x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - x ^ 4, 7082], [-x * y ^ 3 + 2 * x ^ 3 * y + x ^ 4, 10453], [-x * y ^ 4 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 3483], [-x * y ^ 4 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 7143], [-x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 3545], [-(x ^ 2) * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 3 * x ^ 4 * y + 2 * x ^ 5, 10683, 17943], [1, 1302, 1305, 5808, 5811, 5812, 5865, 5871, 6048, 9299, 9374, 9375, 9390, 9402, 9410, 12402, 12405, 12534, 14034, 14038, 16274, 16302], [x, 1285, 1286, 1297, 1300, 1708, 1726, 1737, 2054, 2074, 2501, 2928, 2989, 3105, 3111, 3172, 3226, 3233, 3294, 3355, 3416, 3538, 3599, 4759, 5784, 5789, 5792, 5795, 5796, 5799, 5804, 5836, 5843, 5857, 6017, 6021, 6134, 6162, 6467, 6475, 6648, 6653, 7012, 7016, 7067, 7068, 7071, 7073, 7075, 7134, 7138, 7194, 7199, 8068, 8086, 8097, 8481, 8603, 9194, 9195, 9210, 9213, 9222, 9227, 9268, 9274, 9296, 9297, 9329, 9335, 9339, 9343, 9344, 9385, 9391, 9396, 9758, 9762, 9945, 10128, 10307, 10311, 10315, 10494, 10739, 11654, 11674, 11772, 11776, 11777, 11781, 11783, 12385, 12386, 12397, 12400, 12508, 12518, 12525, 12526, 12529, 13301, 13666, 13677, 13994, 14013, 14022, 14027, 14029, 14033, 14035, 14277, 15132, 15136, 15137, 15141, 15143, 15559, 16285, 16291, 16474, 16718, 16722, 16907, 16915, 17145, 17389, 17415, 17430, 17450, 17627, 17628, 17631, 17633, 17635, 17694, 17938, 17999], [y, 0, 122, 183, 305, 361, 787, 1091, 1209, 1328, 1512, 1769, 1815, 1891, 1952, 2013, 2135, 2196, 2236, 2299, 2379, 2417, 2623, 2684, 2806, 2867, 3050, 3194, 3195, 3210, 3213, 3374, 3375, 3390, 3477, 3600, 3844, 4025, 4149, 4262, 4332, 4393, 4515, 4583, 4641, 4698, 5062, 5186, 5326, 5337, 5485, 5552, 5610, 6022, 6284, 6578, 6630, 6642, 6705, 6772, 6826, 6955, 6974, 6975, 7002, 7007, 7015, 7034, 7035, 7050, 7053, 7261, 7322, 7380, 7505, 7566, 7747, 7810, 8176, 8237, 8413, 8786, 8838, 8969, 9289, 9293, 9376, 9404, 9457, 9579, 9640, 9701, 9824, 10250, 10429, 10555, 10612, 10800, 10861, 11044, 11105, 11166, 11719, 12203, 12447, 12638, 12691, 12794, 12795, 12810, 12822, 12827, 12830, 12929, 12992, 13308, 13423, 13479, 13545, 13728, 13846, 13971, 13999, 14026, 14028, 14235, 14239, 14250, 14258, 14400, 14461, 14583, 14702, 14766, 14831, 14888, 15010, 15198, 15254, 15315, 15377, 15627, 15742, 15801, 15864, 15986, 16108, 16179, 16230, 16292, 16304, 16364, 16413, 16482, 16595, 16660, 17508, 17572, 17594, 17595, 17610, 17613, 17816, 17866], [x * y ^ -1, 267, 1454, 5734, 6221, 8668, 9167, 12274, 14649, 17027], [x * y, 1570, 1702, 1723, 2723, 2902, 3146, 3157, 3160, 3204, 3395, 3396, 3403, 3526, 3537, 4081, 4203, 5301, 5303, 5360, 5762, 5765, 5967, 6005, 6020, 6152, 6164, 6637, 6854, 6855, 6870, 6882, 6887, 6890, 6985, 6997, 7000, 7044, 7137, 7193, 7864, 8062, 8083, 8108, 8352, 9022, 9272, 9275, 9276, 9283, 9284, 9505, 9991, 10636, 10637, 10641, 10643, 10786, 10797, 10923, 11289, 11527, 11831, 12070, 12140, 12313, 12523, 12524, 12805, 12811, 12817, 13218, 13277, 13281, 13357, 13628, 13649, 13659, 13992, 13997, 14089, 14335, 14396, 16269, 16465, 16477, 16480, 16945, 17366, 17604, 17926, 17937], [x * y ^ 2, 2041, 2046, 2529, 2531, 3277, 3488, 3506, 3509, 3516, 3519, 3566, 3571, 5287, 5291, 5300, 5307, 6126, 6482, 6485, 6500, 6507, 6610, 6884, 7152, 9722, 9725, 9920, 10633, 10638, 10748, 10769, 10775, 10776, 10779, 11641, 11646, 13265, 13280, 13287, 16682, 16685, 17102, 17105, 17120, 17127, 17402, 17405, 17888, 17909, 17915, 17916, 17919], [x * y ^ 3, 3184, 6960], [x ^ 2, 1273, 1278, 1701, 1703, 2897, 2901, 2969, 2971, 3076, 3083, 3097, 3381, 3383, 4752, 5825, 5827, 5833, 6010, 6145, 6151, 6617, 7036, 7037, 7118, 7129, 7135, 7168, 8061, 8063, 8462, 8470, 8585, 9204, 9205, 9217, 9220, 9373, 9745, 9757, 9760, 10097, 10276, 10726, 10736, 10737, 11762, 11765, 11767, 11770, 12373, 12378, 12505, 12511, 14015, 14017, 14020, 14241, 14243, 15122, 15125, 15127, 15130, 16705, 16717, 16720, 17596, 17597, 17986, 17996, 17997], [y ^ 2, 1266, 2528, 3255, 3270, 3282, 3287, 3290, 3332, 3525, 3585, 3590, 4748, 5288, 5309, 5319, 5323, 6502, 7004, 8471, 8589, 9742, 10642, 10644, 11761, 12366, 12824, 13282, 15121, 16266, 16702, 17122, 17743, 17744], [x ^ 2 * y, 2885, 2900, 3129, 3131, 3133, 3138, 3380, 3387, 3501, 3569, 3579, 5290, 5763, 6129, 6865, 6871, 6877, 6967, 6971, 7103, 7183, 9251, 10630, 10688, 10712, 10715, 10716, 10723, 10724, 10756, 10757, 13270, 13627, 13631, 13989, 14240, 16453, 16458, 17896, 17897, 17948, 17972, 17975, 17976, 17983, 17984], [x ^ 2 * y ^ 2, 1684, 3487, 3491, 3500, 3507, 6483, 7087, 7158, 8044, 9720, 9723, 9900, 9903, 14224, 16680, 16683, 17103], [x ^ 3, 1690, 2890, 3065, 3067, 3073, 4745, 4747, 4749, 7111, 7165, 8050, 8460, 8463, 9733, 9738, 10267, 11763, 14230, 15123, 16693, 16698], [y ^ 3, 3126, 4446, 6602, 16446], [x ^ 3 * y, 7089, 7091, 10623, 10687, 10691, 13984, 17947, 17951], [x * y ^ 2 - 2 * x ^ 3, 13990], [x - y, 9286], [x * y - x ^ 2, 7128], [x * y - y ^ 2, 3382, 3389, 3399, 6986], [x * y ^ 2 - x ^ 2 * y, 1260, 5293, 5298, 5820, 12360], [x * y ^ 2 - x ^ 3, 3564, 9253], [x * y ^ 3 - x ^ 3 * y, 10450], [x * y ^ 4 - x ^ 3 * y ^ 2, 3240], [x ^ 2 * y - x ^ 3, 7097, 7101], [x ^ 2 * y ^ 2 - x ^ 3 * y, 2520, 3060, 3493, 3498], [x ^ 2 * y ^ 2 - x ^ 4, 3558, 9180], [x ^ 3 * y - x ^ 4, 3120, 7090], [(((x * y ^ 4 - x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y) + y ^ 5, 17643], [(x * y ^ 2 - x ^ 2 * y) - x ^ 3, 3565, 3577, 7164], [(x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 6842], [(x * y ^ 3 - x ^ 3 * y) - x ^ 4, 9183], [(x * y - x ^ 2) + y ^ 2, 7188, 17654], [(x * y ^ 2 - x ^ 3) + y ^ 3, 10484], [(x * y ^ 3 - x ^ 3 * y) + y ^ 4, 12783], [(x * y ^ 4 - x ^ 3 * y ^ 2) + y ^ 5, 3243], [(x ^ 2 * y ^ 2 - x ^ 3 * y) + x ^ 4, 7098], [(x ^ 2 * y ^ 2 - x ^ 3 * y) + 2 * x ^ 4, 7093], [x + y, 366, 793, 854, 1098, 1220, 1342, 1525, 1586, 1647, 1830, 2257, 2318, 2440, 2562, 2745, 3162, 3661, 4027, 4210, 4271, 4454, 4576, 4637, 5064, 5308, 5369, 5491, 5613, 5674, 5768, 5782, 5979, 6101, 6528, 6589, 6614, 6615, 6633, 6647, 6650, 6711, 6833, 7383, 7444, 7688, 7749, 8359, 8420, 8542, 8847, 8908, 9317, 9340, 9392, 9397, 9518, 9823, 10006, 10067, 10433, 10616, 10677, 10799, 10922, 11288, 11471, 11532, 11715, 12081, 12142, 12325, 12537, 12630, 12813, 12874, 12935, 12996, 13240, 13362, 13484, 13850, 13972, 13995, 14018, 14030, 14094, 14266, 14270, 14338, 14399, 14705, 14827, 14949, 15193, 15376, 15620, 15803, 16169, 16352, 16596, 16657, 16962, 17267, 17511, 17755, 17877], [x * y + x ^ 2, 3145, 3597, 4508, 4871, 5769, 5780, 5787, 6002, 6624, 6873, 7178, 7186, 7189, 7197, 8169, 8231, 9318, 9361, 9440, 9627, 10478, 10489, 10493, 11948, 12503, 12515, 13102, 13641, 13643, 14004, 14011], [x * y + y ^ 2, 2004, 3254, 3273, 3392, 3404, 4622, 8167, 9248, 9257, 9433, 9618, 10454, 10455, 10482, 10487, 12488, 15548, 17655, 17673, 17682, 17687], [x * y ^ 2 + x ^ 2 * y, 2404, 3264, 3503, 3548, 5586, 6969, 7088, 9267, 10477, 10622, 10625, 10627, 11709, 12487, 12498, 12507, 12620, 13262, 13640, 13647, 15364, 17347, 17350, 17351, 17664, 17665, 17677, 17680], [x * y ^ 2 + y ^ 3, 16441], [x * y ^ 3 + x ^ 2 * y ^ 2, 2044, 6600, 10760, 10767, 11644, 16444, 17900, 17907], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 5414], [x ^ 2 * y + x ^ 3, 1682, 1685, 2882, 3563, 4624, 6003, 7156, 8042, 8045, 11701, 12606, 13630, 14000, 14222, 17401, 17406, 17675, 17676], [x ^ 2 * y + y ^ 3, 3366, 14226], [x ^ 2 * y ^ 2 + x ^ 3 * y, 3490, 3547, 3567, 10467, 10700, 10707, 10747, 13263, 17887, 17960, 17967], [x ^ 3 * y + x ^ 4, 2883, 3550, 6604, 7024, 14223, 17584], [(x * y ^ 2 + x ^ 2 * y) - x ^ 3, 9258, 9360], [(x * y ^ 2 + x ^ 2 * y) - y ^ 3, 12482], [(x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 4 * y, 6843], [(x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 5283], [((x * y ^ 2 + x ^ 2 * y) - x ^ 3) - y ^ 3, 16260], [((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y, 17640], [x * y + x ^ 2 + y ^ 2, 3586, 9366, 10470, 10490, 17670], [x * y ^ 2 + x ^ 2 * y + x ^ 3, 6004, 7171, 9181, 11764, 12493, 12500, 15124], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 3181, 3186, 3361, 6961, 7021, 7026, 12781, 14221, 17581, 17586], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 3551, 6841, 10624, 13264], [x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 2884, 10084], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 10744, 17884], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 7150], [x * y ^ 2 + x ^ 2 * y + 2 * y ^ 3, 12786], [x * y + 2 * x ^ 2, 9261, 9263, 10486, 14005], [x * y + 2 * y ^ 2, 12502], [x * y ^ 2 + 2 * x ^ 2 * y, 7119, 7157, 10702, 10761, 10763, 12491, 17901, 17903, 17962], [x ^ 2 * y + 2 * x ^ 3, 10701, 10703, 17961, 17963], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 10750, 17890], [x ^ 3 * y + 2 * x ^ 4, 10690, 17950], [(x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - 2 * x ^ 4, 13980], [x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 7109, 7161, 7175, 10465], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 9244, 10451], [x ^ 2 * y + 2 * x ^ 3 + y ^ 3, 9250], [x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 13981], [x * y ^ 2 + 2 * x ^ 2 * y + 2 * x ^ 3, 10471], [x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3, 13622, 13625], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y, 7167], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 10742, 10745, 17882, 17885], [x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 7144], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 7160], [x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + 2 * x ^ 4, 7145], [2 * x * y, 9279], [2 * x * y ^ 2, 3502], [2 * y ^ 2, 5302], [2 * x ^ 2 * y, 5760, 7124, 7184, 10709, 10719, 17969, 17979], [2 * x ^ 3, 13993], [2 * y ^ 3, 6966], [(2 * x * y ^ 3 - 2 * x ^ 3 * y) - 2 * x ^ 4, 13983], [2 * x ^ 2 * y ^ 2 - x ^ 4, 3553], [((2 * x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + x ^ 4 * y + x ^ 5, 3540], [2x + y, 14010], [2 * x * y + x ^ 2, 12804], [2 * x * y + y ^ 2, 12519, 13642], [2 * x * y ^ 2 + x ^ 2 * y, 5282, 5285, 7148, 9260], [2 * x * y ^ 2 + y ^ 3, 10762, 17902], [2 * x ^ 2 * y + x ^ 3, 6864, 7115], [2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 3482, 7107], [(2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y, 12780], [(2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y, 6840], [2 * x * y + x ^ 2 + y ^ 2, 12509], [2 * x * y ^ 2 + x ^ 2 * y + x ^ 3, 9186], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 6846], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 3241, 6603], [2 * x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 7100, 7153], [2 * x * y ^ 2 + x ^ 2 * y + 2 * y ^ 3, 6606], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * y ^ 4, 3246], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4 + 2 * y ^ 4, 17646], [2 * x * y + 2 * y ^ 2, 9262], [2 * x * y ^ 2 + 2 * x ^ 2 * y, 7179], [2 * x ^ 2 * y + 2 * x ^ 3, 7163], [(2 * x * y ^ 2 + 2 * x ^ 2 * y) - y ^ 3, 3562], [((2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3) - x ^ 4 * y) + y ^ 5, 10443], [2 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 12485], [2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 7147], [2 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 6601, 9304], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 10441, 17641], [2 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3, 7169], [2 * x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3, 9245], [(2 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y, 10440], [2 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + 2 * x ^ 4, 10682, 10685, 17942, 17945], [(2 * x * y ^ 2 + 4 * x ^ 2 * y + 2 * x ^ 3) - y ^ 3, 9242], [3 * x * y ^ 2, 7102], [3 * x ^ 2 * y ^ 2, 7085], [3 * x * y + y ^ 2, 9269], [3 * x ^ 2 * y ^ 2 + x ^ 3 * y, 3485], [3 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4 + 2 * y ^ 4, 10446], [3 * x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3 + y ^ 3, 13986], [4 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 7162], [4 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 7142]]) * x ^ 0 * y ^ 0
            end
        f37 = function (x, y, s)
                local v
                v = s * GetRoot(-x * y, 2)
                return dec(64, [[((-5x - 2y) - 5 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 6711], [(((-4x - y) - 6 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 6263], [((-4x - y) - 4 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 6455], [((-3x - y) - 3 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 6253, 6647, 7307], [(-2x - 4 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 13343], [(-2x - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 19597], [-2 * x ^ 2 * y ^ -1 - 2 * x ^ 3 * y ^ -2, 9781], [(((-2x - y) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 9771, 15117, 15501], [(((((-2x - y) - v * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 14861], [(((((((-2x - y) - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 14413], [(-2x - y) - x ^ 2 * y ^ -1, 2876, 3322, 5466, 6210, 6445, 6637, 6701, 6903, 6967, 7223, 7287, 7479, 7819, 9758, 9953, 9954, 11510, 12196, 12197, 19254, 19573], [(((((v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - 6 * x ^ 3 * y ^ -2) - 8 * x ^ 4 * y ^ -3) - 6 * x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5, 5198], [-x, 177, 243, 393, 909, 3132, 3196, 3259, 3662, 4399, 8132, 10671, 10863, 10927, 11067, 11191, 12266, 12942, 16556, 16688, 16757, 16907, 17035, 17165, 18861, 19053, 19117, 19253, 19510, 19574, 19765, 19851, 20044, 20107, 20235, 20457], [-y, 129, 324, 712, 826, 1039, 1233, 1298, 1622, 1687, 1948, 2013, 2337, 2402, 2467, 2791, 2856, 2921, 3050, 3440, 3508, 3925, 3995, 4940, 5199, 5456, 5910, 6168, 6233, 6301, 6430, 6623, 6691, 6721, 6885, 7206, 7274, 7299, 7426, 7532, 7597, 7750, 7918, 7941, 8019, 8385, 8580, 8711, 9014, 9148, 9231, 9618, 9747, 9812, 9941, 10071, 10202, 10851, 11110, 11432, 11889, 11956, 12221, 12352, 12869, 13134, 13455, 13584, 13910, 13975, 14556, 14750, 14881, 15140, 15269, 15655, 15728, 15787, 15855, 16109, 16177, 16349, 16641, 16706, 16771, 17011, 17031, 17227, 17338, 17423, 17745, 17874, 18068, 18262, 18393, 18588, 18782, 18913, 19107, 19172, 19430, 19560, 19950, 20082, 20276, 20307, 20376], [-(x ^ 2) * y ^ -1, 4216, 6199, 8266, 11277, 12430, 12494, 16456, 16587], [(((((-x - 4 * x ^ 2 * y ^ -1) - 7 * x ^ 3 * y ^ -2) - 8 * x ^ 4 * y ^ -3) - 7 * x ^ 5 * y ^ -4) - 4 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 5259], [((((-x - 4 * x ^ 2 * y ^ -1) - 7 * x ^ 3 * y ^ -2) - 7 * x ^ 4 * y ^ -3) - 4 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 5387], [((((-x - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 5579], [(((-x - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4108, 5771], [((-x - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5357, 5445, 13279, 14220], [((-(x ^ 2) * y ^ -1 - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4109, 13707, 17525], [(((((-x - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 5367], [((((-x + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 17781], [(((-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 17547], [((-x - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 14350, 18507], [((-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 17675, 17867], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4143, 5748, 6070, 6071, 6217, 6731, 8239, 12360, 13471, 14604, 14668, 16429, 16432, 18891, 18955], [(-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 12, 5300, 5386, 13838, 13899, 14155, 16203, 16398, 18059, 18251, 20299], [(-(x ^ 3) * y ^ -2 - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 5110], [-x - y, 3452, 3834, 6594, 6658, 6893, 6957, 7022, 7237, 7469, 7607, 7992, 8821, 12021, 12022, 12521, 12858, 12920, 12921, 12985, 13004, 16755, 17291, 19830, 20277], [-x - x ^ 2 * y ^ -1, 2161, 2364, 2620, 3214, 4207, 4278, 4346, 5079, 5210, 6132, 6388, 6518, 6778, 6844, 9308, 10479, 10615, 12537, 12877, 13599, 13727, 13791, 15052, 15693, 16496, 16521, 16843, 18540, 18669, 18742, 18933, 18997, 18998, 19147, 19211, 19531, 19596, 19723, 20045, 20109], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 59, 4152, 5358, 5620, 5687, 5897, 6155, 8139, 9783, 10318, 12106, 12366, 13881, 14074, 14283, 14348, 16248, 17976, 17979, 18315, 18379, 20296, 20363], [-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3, 5258], [(-x - y) - x ^ 2 * y ^ -1, 7288, 11509, 13069], [(-x - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 15373], [((-x - y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 15757, 16013], [((-x - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 8075, 9975], [(((-x - y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 15629], [((((-x - y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 14797], [((((-x + v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 13646], [(((-x + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 16395], [(((((((((-x - 2 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 4 * v * x ^ 4 * y ^ -4) - 2 * v * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 13369, 13497], [(((((((((((-x - 2 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - 4 * v * x ^ 5 * y ^ -5) - 2 * v * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 13305], [(((-x - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 8047, 10250, 12279, 18440, 20336], [(((-2 * v * x ^ 2 * y ^ -2 - 2 * v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 9263, 9464, 17453], [((((((-x - 2 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 13625], [(((((((-x - v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - 4 * x ^ 2 * y ^ -1) - 6 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 5499], [(((((((((-x - v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 5107], [(((((((-x - v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 5171, 5299], [(((((-x - v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5427], [(((((((-x - v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 5496], [(((((-v * x ^ 2 * y ^ -2 - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 14029], [(((((((-x - v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 13817], [(((((-x - v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5619, 8059], [(((((-v * x ^ 2 * y ^ -2 - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 17803], [(((-x - v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5811, 12338, 12621, 15565], [(((-v * x ^ 2 * y ^ -2 - v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5189, 12108, 13835, 17995], [(-x - v * x * y ^ -1) - x ^ 2 * y ^ -1, 265, 2683, 10683, 12291, 14968, 16077], [(-v * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 9738, 14201, 17928], [(((((-x - v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 14009], [(((((-v * x ^ 2 * y ^ -2 - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 9199, 17389], [(((((((-x - v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 12302], [(((-v * x ^ 2 * y ^ -2 - v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 13753], [((((((-x - v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1276, 17654], [((((((-x + v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + 3 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6) - 5 * x ^ 2 * y ^ -1) - 11 * x ^ 3 * y ^ -2) - 14 * x ^ 4 * y ^ -3) - 11 * x ^ 5 * y ^ -4) - 5 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 5131], [(((((((-x + v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + 3 * v * x ^ 5 * y ^ -5 + 3 * v * x ^ 6 * y ^ -6 + v * x ^ 7 * y ^ -7) - 5 * x ^ 2 * y ^ -1) - 10 * x ^ 3 * y ^ -2) - 13 * x ^ 4 * y ^ -3) - 13 * x ^ 5 * y ^ -4) - 10 * x ^ 6 * y ^ -5) - 5 * x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 5067], [(((-x + v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5428], [((((v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 12301], [((-x + v * x * y ^ -1 + v * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5812, 10423, 18699], [(((v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 13688], [(((v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 5066], [(((-x + v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 10039], [((((v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 5130, 17739], [(((((v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 17419], [(((((v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 17483], [((((((v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 6 * v * x ^ 4 * y ^ -4 + 4 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 17355], [(((((((-x + v * x * y ^ -1 + v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6) - x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 13517], [(((-x + v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 16206], [(((2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5643], [((((-x + 2 * v * x * y ^ -1 + 5 * v * x ^ 2 * y ^ -2 + 5 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 14221], [(((-x + 2 * v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 14669], [((((2 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 13433], [x ^ -1 * y ^ 2, 9072], [x, 66, 261, 523, 976, 1107, 1172, 1405, 1433, 1498, 1790, 1822, 1887, 2148, 2213, 2278, 2539, 2604, 2669, 2735, 3125, 3382, 3724, 4201, 4276, 4338, 4476, 4537, 4877, 5073, 5141, 5373, 5532, 5664, 5729, 5986, 6052, 6119, 6376, 6507, 6576, 6833, 6965, 7030, 7099, 7224, 7630, 7691, 8259, 8454, 8648, 9168, 9366, 9432, 9497, 9563, 9693, 9887, 10473, 10669, 10802, 11274, 11338, 11385, 11578, 11660, 12046, 12158, 12289, 12617, 12792, 13197, 13266, 13332, 13721, 13786, 14115, 14207, 14246, 14440, 14636, 14702, 14836, 15094, 15227, 15289, 15351, 15352, 15413, 15484, 15694, 15950, 16452, 16517, 16582, 16842, 17360, 17493, 17559, 17661, 17690, 17821, 17982, 18015, 18210, 18341, 18535, 18666, 18731, 18863, 18993, 19383, 19464, 19528, 19641, 19657, 19772, 20043, 20110], [y, 582, 846, 3267, 3441, 3826, 3889, 4939, 5394, 5783, 6980, 7108, 7599, 8773, 8906, 8970, 9098, 9141, 10332, 10526, 10722, 10981, 11114, 11242, 11458, 12012, 12676, 13649, 15529, 16211, 17096, 17160, 17228, 17288, 19305, 19433, 19820, 19888, 20268], [x ^ 2 * y ^ -1, 49, 124, 206, 4235, 16428, 16502, 16588, 16781], [x + y, 130, 325, 585, 633, 715, 780, 910, 1040, 1235, 1237, 1300, 1560, 1563, 1625, 1690, 1950, 2015, 2080, 2340, 2405, 2470, 2795, 2860, 2865, 2925, 2990, 3055, 3185, 3314, 3315, 3445, 3510, 3575, 3640, 3835, 3965, 4030, 4161, 4291, 4356, 4486, 4551, 4746, 4811, 4876, 5138, 5201, 5202, 5331, 5460, 5461, 5463, 5851, 5916, 6176, 6241, 6306, 6436, 6532, 6631, 6696, 6724, 6788, 6891, 6894, 6895, 6959, 7086, 7214, 7215, 7216, 7279, 7281, 7471, 7476, 7541, 7542, 7606, 7611, 7671, 7816, 7945, 7996, 8191, 8192, 8387, 8582, 8712, 8714, 8842, 8907, 8972, 9037, 9102, 9232, 9622, 9752, 9817, 9947, 9948, 10077, 10207, 10272, 10666, 10857, 10858, 10922, 11117, 11442, 11500, 11658, 11832, 11897, 11900, 11914, 11962, 12027, 12190, 12222, 12353, 12418, 12483, 12743, 12873, 12938, 13070, 13133, 13458, 13588, 13913, 13917, 13978, 13981, 14173, 14303, 14563, 14758, 14888, 15148, 15278, 15603, 15668, 15733, 15798, 15863, 15993, 16123, 16188, 16644, 16709, 16774, 16904, 16969, 17032, 17034, 17229, 17292, 17294, 17424, 17619, 17749, 17879, 17944, 18074, 18139, 18269, 18399, 18464, 18594, 18789, 18857, 18919, 19049, 19113, 19114, 19179, 19184, 19244, 19248, 19439, 19504, 19564, 19568, 19569, 19760, 19848, 19959, 20024, 20089, 20090, 20104, 20284], [x + x ^ 2 * y ^ -1, 188, 251, 589, 1149, 3212, 3789, 4407, 6213, 6323, 6387, 6523, 6587, 6712, 6793, 6859, 6990, 7054, 7118, 7821, 10570, 10956, 11020, 11342, 12329, 12472, 13759, 13823, 14713, 15032, 15051, 15374, 15563, 16566, 16568, 18760, 19598], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 5491, 5575, 5614, 5756, 5814, 8078, 8252, 12429, 12493, 14008, 14286, 16442, 16589], [x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5063, 5308], [x + y + x ^ 2 * y ^ -1, 6340, 8650, 10474, 11530, 15758, 16014, 16840, 18665, 19720], [x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 3277, 14521], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 12365], [x + y + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 15630], [x + y + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 14798], [-v * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 13837], [x + v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 13645], [x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 4215, 5767, 5939, 6075, 6264, 6411, 6542, 6732, 6734, 6798, 7309, 10508, 13375, 13503, 14603, 14667], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5166, 5255, 5294, 5430, 9528, 13836, 13902], [x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 13323], [x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 14349], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6350, 9866, 9930, 12296, 13311, 18056, 18120], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 9272, 9400], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 9674, 17864], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 9208], [((((((x - 2 * v * x ^ 2 * y ^ -2) - 5 * v * x ^ 3 * y ^ -3) - 5 * v * x ^ 4 * y ^ -4) - 2 * v * x ^ 5 * y ^ -5) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 9162, 17352], [(((x - 2 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 9226, 17416], [((x - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 9418, 17608], [x + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1393, 5359, 5383, 14219, 17648, 17772], [x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5102, 9420, 9550, 13516], [x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 13259], [x + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + 3 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5371, 5449], [(((((x - 2 * v * x * y ^ -1) - 7 * v * x ^ 2 * y ^ -2) - 10 * v * x ^ 3 * y ^ -3) - 7 * v * x ^ 4 * y ^ -4) - 2 * v * x ^ 5 * y ^ -5) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 9290, 17480], [((x - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 14670], [(-2 * v * x ^ 2 * y ^ -2 - 2 * v * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 13560, 17653], [(((x - 2 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 14222], [(((((x - v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 16205], [((((((((x - v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 13518], [((((x - v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5902], [(((x - v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6286], [((x - v * x * y ^ -1) - v * x ^ 2 * y ^ -2) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 10122, 10295, 18312], [(-v * x ^ 2 * y ^ -2 - v * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5127, 5436], [x + v * x * y ^ -1 + x ^ 2 * y ^ -1, 14777, 18875, 19067, 19131], [v * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 17611], [x + v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 14, 5060, 9194, 16396, 17385], [x + v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5124, 8142, 9258, 12152, 17449], [x + v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 333, 2893, 5442, 6603, 8045, 10186, 12170, 14265, 14585, 16312, 16377, 18376, 18683, 20360], [v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4110, 5366], [v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 9294], [x + v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 14137], [x + v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 16397], [x + v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 10058, 14072, 18248], [v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5193], [x + v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 9482, 17672], [x + v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 9354, 17544], [x + v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4151, 5485, 6219, 16443], [x + v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + 3 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 4107], [x + 2 * v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 8055], [2 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + 2 * v * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 17403], [2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1137, 17516], [x + 2 * v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 9802, 17992], [x + 2 * v * x * y ^ -1 + 5 * v * x ^ 2 * y ^ -2 + 5 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 9610, 17800], [3 * v * x ^ 2 * y ^ -2 + 6 * v * x ^ 3 * y ^ -3 + 3 * v * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 17467], [2x + y + x ^ 2 * y ^ -1, 6446, 6447, 6510, 6574, 6639, 6907, 6966, 6971, 7159, 7241, 7304, 7483, 11018, 11402, 13597, 13725, 13789, 18736, 18928, 19208, 19592], [2x + y + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 4100, 8234, 9764, 9765, 9959, 10698, 12203, 13469, 16425, 18888], [2x + y + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 13277, 14862], [2x + y + v * x ^ 2 * y ^ -2 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 14414], [((2x + y) - v * x * y ^ -1) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 15118], [2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1549], [v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 13624], [3x + y + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 6062, 6255, 6459, 6651, 6715, 10762, 13341, 15502, 18544, 18952], [3x + y + v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + 4 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 10314, 18504], [3x + 2y + 2 * x ^ 2 * y ^ -1, 6703, 18992], [4x + y + 6 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6267], [(((((-2 * v * x * y ^ -1 - 4 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 9546, 17736], [((-2 * v * x * y ^ -1 - 4 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4, 16269], [-v * x ^ -1 * y, 12507], [-v, 24, 494, 695, 1536, 2111, 2951, 3530, 3641, 3704, 4064, 4123, 4595, 4682, 4745, 4814, 4878, 5003, 5396, 5786, 5824, 7367, 8127, 8190, 8777, 10303, 10337, 10532, 10727, 10987, 11895, 12256, 12678, 12984, 13068, 13653, 14304, 14367, 15538, 15865, 16058, 16411, 18112, 18495, 20448], [-v * x * y ^ -1, 115, 3597, 7182, 7246, 8111, 8376, 10287, 14019, 15310, 18477, 19339, 20400], [-v * x ^ 2 * y ^ -2, 141, 5688], [-v * x ^ 3 * y ^ -3, 1230, 9333, 17612, 20301], [(((((-v - 2x) - y) - 2 * v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 12538], [(((-v - 2x) - y) - v * x * y ^ -1) - x ^ 2 * y ^ -1, 2938, 8565, 11125, 11126, 12665, 15225, 15609], [((((((((-v - 2x) - y) - v * x * y ^ -1) - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 12345], [(((((-v - 2x) - 3 * v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - 4 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 15181], [(((-v * x ^ 2 * y ^ -2 - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 13432], [(((((-v * x * y ^ -1 - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 13561], [(-v - x) - y, 16121], [(((((((((((-v * x * y ^ -1 - 5 * v * x ^ 2 * y ^ -2) - 8 * v * x ^ 3 * y ^ -3) - 8 * v * x ^ 4 * y ^ -4) - 8 * v * x ^ 5 * y ^ -5) - 5 * v * x ^ 6 * y ^ -6) - v * x ^ 7 * y ^ -7) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 13262], [(((((((((-v * x * y ^ -1 - 5 * v * x ^ 2 * y ^ -2) - 7 * v * x ^ 3 * y ^ -3) - 7 * v * x ^ 4 * y ^ -4) - 5 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 13326], [(((((((((-v * x * y ^ -1 - 5 * v * x ^ 2 * y ^ -2) - 8 * v * x ^ 3 * y ^ -3) - 8 * v * x ^ 4 * y ^ -4) - 5 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 13454], [(((((-v - x) - 3 * v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 6414], [(((((((-v * x * y ^ -1 - 3 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 13774], [(((((((((((-v - x) - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - 2 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 14093], [(((((((((-v - x) - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 14541], [(((((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 18187], [(((((((-v - x) - 2 * v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 14733, 14925], [(((-v - x) - 2 * v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 6862, 9438, 9570, 12133], [(((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 6030, 8056, 18571], [((((((((-v * x * y ^ -1 - v * x ^ 2 * y ^ -2) + 3 * v * x ^ 3 * y ^ -3 + 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 13390], [(((((-v - x) - v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 15245], [(((((((((-v - x) - v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 14477], [-v + x + y, 4616, 11507, 13006, 16253], [(((-v + x + y) - 2 * v * x * y ^ -1) - v * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 12750, 15054], [((-v + x + y) - v * x * y ^ -1) + x ^ 2 * y ^ -1, 12814], [((((-v * x * y ^ -1 - 4 * v * x ^ 2 * y ^ -2) - 6 * v * x ^ 3 * y ^ -3) - 4 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 13708], [((((((-v + x) - 3 * v * x * y ^ -1) - 6 * v * x ^ 2 * y ^ -2) - 6 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5231, 17520], [(((-v * x * y ^ -1 - 3 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5710, 13900, 14156], [(((((-v + x) - 3 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6027], [((((-v * x * y ^ -1 - 3 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5129, 5518], [((((((-v + x) - 3 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + 3 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5899], [(((((-v * x * y ^ -1 - 3 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 4 * v * x ^ 4 * y ^ -4) - 3 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) + x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 5065], [(((((((-v + x) - 3 * v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - 3 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) + 3 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 5515], [((((((-v + x) - 3 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + 4 * x ^ 2 * y ^ -1 + 6 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5707], [(((((-v + x) - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 12344], [((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 6094, 14284], [((((-v + x) - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 6475, 16313], [(((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5385, 5966], [(((((-v + x) - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6283, 14073], [((((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5257, 5390], [(((((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - 2 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 5262], [((((((-v + x) - 2 * v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5963], [(((((-v + x) - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6091], [(-v + x) - v * x * y ^ -1, 15224], [(-v * x ^ 2 * y ^ -2 - v * x ^ 3 * y ^ -3) + x ^ 3 * y ^ -2, 9463], [(((((((-v * x * y ^ -1 - v * x ^ 2 * y ^ -2) + 2 * v * x ^ 3 * y ^ -3 + 5 * v * x ^ 4 * y ^ -4 + 2 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) - v * x ^ 7 * y ^ -7) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 5070], [((((-v * x * y ^ -1 - v * x ^ 2 * y ^ -2) + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 5134], [((((-v + x) - v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 3953, 12213, 20332], [(((-v * x * y ^ -1 - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 13816], [((((-v + 2x + y) - 3 * v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 14606], [((-v + 2x + y) - v * x * y ^ -1) + x ^ 2 * y ^ -1, 7820, 10954, 19144], [((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 20427], [(((((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - 2 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 4 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5, 13304], [((((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + 2 * x ^ 2 * y ^ -1 + 5 * x ^ 3 * y ^ -2 + 5 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4, 13368], [(((-v * x * y ^ -1 - v * x ^ 2 * y ^ -2) - v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4, 13496], [(((-v * x * y ^ -1 - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 14030], [(((-v + 3x + y) - 2 * v * x * y ^ -1) - v * x ^ 2 * y ^ -2) + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 7308, 10506, 18696], [((((-v * x * y ^ -1 - 5 * v * x ^ 2 * y ^ -2) - 8 * v * x ^ 3 * y ^ -3) - 5 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 13582], [(((-v * x ^ 2 * y ^ -2 - 4 * v * x ^ 3 * y ^ -3) - 4 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) + x ^ 4 * y ^ -3, 13709], [(((((((-v - 4 * v * x * y ^ -1) - 7 * v * x ^ 2 * y ^ -2) - 8 * v * x ^ 3 * y ^ -3) - 7 * v * x ^ 4 * y ^ -4) - 4 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5303], [(((((-v * x * y ^ -1 - 4 * v * x ^ 2 * y ^ -2) - 7 * v * x ^ 3 * y ^ -3) - 8 * v * x ^ 4 * y ^ -4) - 7 * v * x ^ 5 * y ^ -5) - 4 * v * x ^ 6 * y ^ -6) - v * x ^ 7 * y ^ -7, 5068], [((((-v - 4 * v * x * y ^ -1) - 7 * v * x ^ 2 * y ^ -2) - 7 * v * x ^ 3 * y ^ -3) - 4 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5, 5431], [((((-v * x * y ^ -1 - 4 * v * x ^ 2 * y ^ -2) - 7 * v * x ^ 3 * y ^ -3) - 7 * v * x ^ 4 * y ^ -4) - 4 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6, 5132, 5196, 13452, 17805], [((((-v * x ^ 2 * y ^ -2 - 4 * v * x ^ 3 * y ^ -3) - 7 * v * x ^ 4 * y ^ -4) - 7 * v * x ^ 5 * y ^ -5) - 4 * v * x ^ 6 * y ^ -6) - v * x ^ 7 * y ^ -7, 5069], [(((-v * x * y ^ -1 - 4 * v * x ^ 2 * y ^ -2) - 6 * v * x ^ 3 * y ^ -3) - 4 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5, 5243, 5452, 13580, 17997, 18189], [(((-v * x ^ 2 * y ^ -2 - 4 * v * x ^ 3 * y ^ -3) - 6 * v * x ^ 4 * y ^ -4) - 4 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6, 5133, 5197], [(((((-v - 3 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 5487, 17776], [(((((-v * x * y ^ -1 - 3 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 5240, 5326], [(((((((-v * x * y ^ -1 - 3 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 4 * v * x ^ 4 * y ^ -4) - 3 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 13324], [(((((((((-v * x * y ^ -1 - 3 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - 3 * v * x ^ 5 * y ^ -5) - 3 * v * x ^ 6 * y ^ -6) - v * x ^ 7 * y ^ -7) - x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 13260], [(((((-v - 3 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 4 * v * x ^ 4 * y ^ -4) - 3 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6, 5101], [((((-v - 3 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5, 5058, 5165, 5293, 5623], [(((-v - 3 * v * x * y ^ -1) - 4 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4, 5122, 5250, 5421, 5815, 6222], [(((-v * x * y ^ -1 - 3 * v * x ^ 2 * y ^ -2) - 4 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5, 13772, 18253], [(((-v * x ^ 2 * y ^ -2 - 3 * v * x ^ 3 * y ^ -3) - 4 * v * x ^ 4 * y ^ -4) - 3 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6, 972, 9164, 9166, 17358], [(((((((((-v - 3 * v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - 3 * v * x ^ 5 * y ^ -5) - 3 * v * x ^ 6 * y ^ -6) - v * x ^ 7 * y ^ -7) - 2 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4, 5111], [(((((((-v - 3 * v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - 3 * v * x ^ 5 * y ^ -5) - v * x ^ 6 * y ^ -6) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 5175], [((-v - 3 * v * x * y ^ -1) - 3 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3, 5378, 6670, 14732], [((-v * x * y ^ -1 - 3 * v * x ^ 2 * y ^ -2) - 3 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4, 1466, 5836, 9654, 13964, 13966, 16204, 18381, 18509, 18573], [((-v * x ^ 2 * y ^ -2 - 3 * v * x ^ 3 * y ^ -3) - 3 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5, 1036, 1100, 5453, 9228, 9230, 9356, 17422, 17486], [(-v * x ^ 2 * y ^ -2 - 3 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4, 14157], [(((((-v - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 8202, 16392], [(((-v - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4, 5613], [(((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5, 1009, 5582, 17388], [((-v - 2 * v * x * y ^ -1) - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3, 5570, 5805, 6606, 12410], [((-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4, 1073, 1201, 5774, 9327, 9660, 17452, 17517, 17580, 17850, 17909], [((-v * x ^ 2 * y ^ -2 - 2 * v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5, 9358], [(-v - 2 * v * x * y ^ -1) - v * x ^ 2 * y ^ -2, 5076, 5762, 6926, 7310, 8231, 8379, 13600, 15116, 15180, 15244], [(-v * x * y ^ -1 - 2 * v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3, 1329, 1594, 1658, 1914, 3962, 5511, 8054, 9451, 9583, 9782, 9846, 9852, 10044, 10102, 12150, 16268, 17708, 17773, 18042, 18101, 18234, 18893], [(-v * x ^ 2 * y ^ -2 - 2 * v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4, 1356, 5180, 5451, 5837, 9484, 9486, 9676, 17742], [(-v * x ^ 3 * y ^ -3 - 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5, 974, 17356], [((((-v - 2 * v * x * y ^ -1) - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - 2 * v * x ^ 4 * y ^ -4) - v * x ^ 5 * y ^ -5, 16333], [-v - v * x * y ^ -1, 62, 4426, 4471, 4620, 4622, 4750, 5140, 5268, 5594, 7566, 7822, 8521, 10017, 10148, 10407, 10603, 12393, 12550, 12664, 12793, 13397, 13920, 13984, 14962, 15353, 15608, 15756, 16763], [-v * x * y ^ -1 - v * x ^ 2 * y ^ -2, 2042, 4026, 4168, 5316, 5678, 5871, 5959, 6072, 6478, 9314, 9450, 9775, 9967, 10230, 10360, 10364, 12143, 12214, 14066, 14990, 17641, 17965, 18157, 18160, 18554, 18763, 20333], [-v * x ^ 2 * y ^ -2 - v * x ^ 3 * y ^ -3, 1740, 9467, 9868, 17931, 18126], [-v * x ^ 3 * y ^ -3 - v * x ^ 4 * y ^ -4, 1038, 1102, 5116, 9205, 17420, 17484], [(-v + y) - v * x ^ -1 * y, 12379], [(-v - v * x * y ^ -1) - v * x ^ 2 * y ^ -2, 4558, 7438, 15033], [((-v * x * y ^ -1 - v * x ^ 2 * y ^ -2) - v * x ^ 3 * y ^ -3) - v * x ^ 4 * y ^ -4, 18123], [v * x ^ -1 * y, 8209, 8942, 9079, 12440, 12770, 12970, 15614], [v, 131, 4666, 7672, 7735, 7866, 8322, 8759, 8887, 11640, 11703, 11722, 11829, 11959, 12087, 12088, 13067, 13523, 15929, 15992, 16008, 19912, 20027, 20216], [v * x * y ^ -1, 6583, 6775, 6839, 8373, 8439, 9280, 11147, 13826, 14471, 14712, 14986, 15885, 16307], [v * x ^ 2 * y ^ -2, 1596, 4174, 8248, 17974, 18165], [v * x ^ 4 * y ^ -4, 1101], [((((((v - 2x) - y) + 3 * v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 14605], [((v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 1265, 6158, 17644, 20341], [((v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 9336], [((((v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 3 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4, 5454], [(((v - x) - y) + v * x * y ^ -1) - x ^ 2 * y ^ -1, 13005], [((((v - x) - y) + v * x * y ^ -1 + v * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 12813], [(((((v - x) - y) + v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 12749], [(((((v - x) - y) + 2 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 15053], [(v - x) + v * x * y ^ -1, 15544, 19320], [(v * x * y ^ -1 + v * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 14264, 14328, 14393, 14584, 16376, 18491], [(v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2, 5646], [(((v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1404, 1742, 3981, 17782, 18124], [((((v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1148, 17526], [((v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 13944], [(((v - x) + 2 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 12234, 20424], [(((v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 9655], [((v - x) + 2 * v * x * y ^ -1 + v * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 4427, 12488, 15179], [((v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5879, 9847, 14136, 16267, 18171, 20347], [((((v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 18125], [(((v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5835, 17787], [((((v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 3 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 17531], [((((((v - x) + 4 * v * x * y ^ -1 + 9 * v * x ^ 2 * y ^ -2 + 12 * v * x ^ 3 * y ^ -3 + 9 * v * x ^ 4 * y ^ -4 + 4 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6) - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 5239], [v + x + y, 326, 2930, 5266, 5591, 8517, 10012, 10142, 10402, 10597, 11116, 12548, 12808, 13003, 13393, 14953], [(((v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 6 * y ^ -6 + v * x ^ 7 * y ^ -7 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 13389], [v + x + v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 15246], [v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5368], [v + x + v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 14478], [v + x + v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 14734], [v + x + 2 * v * x * y ^ -1 + v * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 6728, 10551, 15182], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 16249, 16270, 18443], [v + x + 2 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 9445, 10378, 14926, 18568], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 9591, 13689], [v + x + 2 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 14542], [v + x + 2 * v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 14094], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + 2 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6 + x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 6 * x ^ 4 * y ^ -3 + 4 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 9207], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 9335], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 9271], [v + x + 3 * v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 9994, 18184], [v + 2x + y + v * x * y ^ -1 + x ^ 2 * y ^ -1, 377, 5074, 12530, 15545], [v + v * x ^ -1 * y, 9143], [v + v * x * y ^ -1, 440, 2810, 4619, 4683, 5143, 6663, 7160, 7242, 7354, 7563, 7883, 8068, 8225, 8226, 8371, 8568, 8695, 9564, 10998, 10999, 11063, 11064, 11146, 11383, 11384, 11515, 11575, 12126, 12202, 13565, 16075, 19336, 20393], [v * x * y ^ -1 + v * x ^ 2 * y ^ -2, 123, 1586, 2508, 5082, 6203, 6391, 8046, 8119, 9313, 9444, 9575, 9772, 10167, 10231, 12139, 12215, 12427, 13344, 14520, 18894, 20411], [v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3, 1340, 5172, 5235, 5514, 14158, 17718], [v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 973], [v + v * x * y ^ -1 + v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 8247], [v + v * x * y ^ -1 + v * x ^ 2 * y ^ -2, 7371], [v + 2 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 16334], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5304], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + 2 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5112], [v + 2 * v * x * y ^ -1 + v * x ^ 2 * y ^ -2, 2362, 2426, 5828, 6343, 6794, 6923, 7435, 8004, 9962, 10550, 10614, 10743, 10807, 12138, 12402, 18153, 20329], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3, 1996, 2124, 2188, 5186, 5381, 6605, 9911, 10103, 12151, 12346, 13280, 14024, 16332, 18382, 18510, 18574], [v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4, 1082, 1084, 1212, 9270, 9276, 9340, 13710, 17461, 17462, 17466, 17530, 17590], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + 2 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6, 13773], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 13965], [v + 2 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3, 5444, 5807, 9578, 10359, 17769, 18096], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4, 1868, 5253, 5432, 9527, 9719, 18254], [v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 1020, 17397, 17398, 17741], [v + 2 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4, 3964, 5188, 5615, 9322, 17513, 17904, 20342], [v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 5176, 9399], [v + 2 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 5167, 17456], [v + 2 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2 + 2 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + 2 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6, 5103, 17392], [v + 3 * v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 5819], [v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + 3 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5195], [v + 3 * v * x * y ^ -1 + 5 * v * x ^ 2 * y ^ -2 + 5 * v * x ^ 3 * y ^ -3 + 3 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5627], [v + 3 * v * x * y ^ -1 + v * x ^ 2 * y ^ -2, 14969], [v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + 2 * v * x ^ 4 * y ^ -4 + 3 * v * x ^ 5 * y ^ -5 + 3 * v * x ^ 6 * y ^ -6 + v * x ^ 7 * y ^ -7 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 13325, 13453], [v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + 3 * v * x ^ 4 * y ^ -4 + 3 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6 + x ^ 4 * y ^ -3, 13581], [v + 3 * v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + v * x ^ 3 * y ^ -3, 1978, 6604, 6667, 10166], [v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4, 1612, 1804, 5125, 5229, 6093, 6221, 6285, 9592, 17998, 18190], [v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + 3 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 1018, 9206, 9212, 17402], [v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 5 * v * x ^ 4 * y ^ -4 + 5 * v * x ^ 5 * y ^ -5 + 4 * v * x ^ 6 * y ^ -6 + 3 * v * x ^ 7 * y ^ -7 + v * x ^ 8 * y ^ -8 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 13261], [v + 3 * v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4, 5423, 6092, 6284, 17712], [v * x * y ^ -1 + 3 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 3 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 1420, 5061, 5323, 5965, 17806], [v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + 3 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6, 17421, 17485], [v + 3 * v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + 3 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 5295, 5964, 17584], [v * x ^ 2 * y ^ -2 + 3 * v * x ^ 3 * y ^ -3 + 5 * v * x ^ 4 * y ^ -4 + 5 * v * x ^ 5 * y ^ -5 + 3 * v * x ^ 6 * y ^ -6 + v * x ^ 7 * y ^ -7, 17357], [v + 4 * v * x * y ^ -1 + 7 * v * x ^ 2 * y ^ -2 + 7 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5435, 5495], [v + 4 * v * x * y ^ -1 + 8 * v * x ^ 2 * y ^ -2 + 10 * v * x ^ 3 * y ^ -3 + 8 * v * x ^ 4 * y ^ -4 + 4 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6 + x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5179, 5307], [v + 4 * v * x * y ^ -1 + 8 * v * x ^ 2 * y ^ -2 + 11 * v * x ^ 3 * y ^ -3 + 11 * v * x ^ 4 * y ^ -4 + 8 * v * x ^ 5 * y ^ -5 + 4 * v * x ^ 6 * y ^ -6 + v * x ^ 7 * y ^ -7 + x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 5115], [v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4, 8014], [v + 4 * v * x * y ^ -1 + 6 * v * x ^ 2 * y ^ -2 + 4 * v * x ^ 3 * y ^ -3 + v * x ^ 4 * y ^ -4, 6220], [v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 6 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 5709, 5901], [v + 4 * v * x * y ^ -1 + 7 * v * x ^ 2 * y ^ -2 + 7 * v * x ^ 3 * y ^ -3 + 4 * v * x ^ 4 * y ^ -4 + v * x ^ 5 * y ^ -5, 5708, 5900], [v * x * y ^ -1 + 4 * v * x ^ 2 * y ^ -2 + 7 * v * x ^ 3 * y ^ -3 + 7 * v * x ^ 4 * y ^ -4 + 4 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6, 5517], [v + 4 * v * x * y ^ -1 + 7 * v * x ^ 2 * y ^ -2 + 8 * v * x ^ 3 * y ^ -3 + 7 * v * x ^ 4 * y ^ -4 + 4 * v * x ^ 5 * y ^ -5 + v * x ^ 6 * y ^ -6, 5516], [((2v - x) + 4 * v * x * y ^ -1 + 2 * v * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 6987]]) * x ^ 0 * y ^ 0 * v ^ 0
            end
        f39 = function (x, y)
                return dec(81, [[-1, 29, 84, 192, 362, 981, 1157, 1160, 1233, 1566, 1583, 1593, 2707, 3634, 3782, 3875, 5819, 6074, 6307, 6972, 9778, 10334, 13124, 13453, 14036, 14039, 15501, 15946, 17309, 18024, 18350, 18360, 19183, 19850, 20661, 20945, 21209, 21463, 21703, 22418, 22562, 22572, 22883, 24349, 24504, 24792, 24848, 25705, 27077, 27080, 27804, 27902, 28986, 29772, 30342, 30430, 30511, 31400], [1, 337, 999, 1548, 1557, 1581, 1595, 3279, 4444, 5821, 6305, 6317, 7215, 7278, 10827, 14440, 14441, 14444, 15864, 15866, 15944, 16394, 16487, 16497, 16996, 18348, 18362, 20773, 20904, 21269, 21319, 22311, 22798, 23739, 23795, 26579, 26584, 27480, 27483, 27643, 27644, 27647, 30347, 30349, 30504, 30528, 31149, 31152, 31226], [((-9 * x * y ^ 4 - 5 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - y ^ 5, 12718], [(-7 * x * y ^ 4 - 5 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 12717], [((-7 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + 2 * x ^ 3 * y ^ 2) - y ^ 5, 25839], [((-7 * x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y) - x ^ 4, 19280], [-7 * x * y ^ 4 + 4 * x ^ 3 * y ^ 2, 19278], [((-5 * x * y ^ 3 - 5 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - y ^ 4, 6172], [-5 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y, 6241], [(((-4 * x * y ^ 3 - 5 * x ^ 2 * y ^ 2) - x ^ 3 * y) + x ^ 4) - y ^ 4, 18646], [((-4 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - 2 * y ^ 3, 26006], [((-4 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y) - 2 * y ^ 4, 6167], [((-4 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + x ^ 3 * y) - y ^ 4, 5752], [-3 * y ^ 3, 6239], [(-3 * x * y ^ 3 - 4 * x ^ 2 * y ^ 2) - x ^ 3 * y, 19609], [-3 * x * y ^ 2 - 3 * x ^ 2 * y, 19132], [(-3 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y, 31953], [(-3 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - y ^ 4, 19663], [((-3 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 19616], [(-3 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) + 7 * x ^ 3 * y ^ 2 + 3 * x ^ 4 * y, 19606], [-3 * x * y ^ 2 - 2 * y ^ 3, 15402], [((-3 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - 2 * y ^ 4, 26003], [((-3 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 5456], [-3 * x * y ^ 2 - x ^ 2 * y, 17587, 30790], [-3 * x ^ 2 * y ^ 2 - x ^ 3 * y, 6328, 15422], [(-3 * x * y - x ^ 2) - 2 * y ^ 2, 11761], [((-3 * x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y) - y ^ 4, 11098], [(-3 * x * y ^ 4 - x ^ 2 * y ^ 3) + 5 * x ^ 3 * y ^ 2 + x ^ 4 * y, 15394], [-3 * x * y ^ 2 + x ^ 3, 6240], [(-3 * x * y ^ 4 + x ^ 3 * y ^ 2) - y ^ 5, 31915], [(-3 * x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - 2 * y ^ 5, 12231], [-3 * x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + y ^ 5, 31914], [(-3 * x * y ^ 4 + x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2) - 2 * y ^ 5, 12232], [(-3 * x * y ^ 4 + 5 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - 3 * y ^ 5, 12235], [-2y, 5760, 23253], [-2 * x * y, 3443, 10166, 15913, 18323, 18636, 31550], [-2 * x * y ^ 2, 1961, 15405, 17594, 30797], [-2 * y ^ 2, 5782, 5797], [-2 * x ^ 2 * y, 5789, 21643], [-2 * x ^ 2 * y ^ 2, 2042, 6335, 15400, 25370, 32407], [-2 * y ^ 3, 12262], [-2 * x ^ 3 * y, 18643, 32411], [((-2 * x * y ^ 3 - 4 * x ^ 2 * y ^ 2) - 8 * x ^ 3 * y) - 2 * x ^ 4, 19605], [(-2 * x ^ 2 * y ^ 2 - 4 * x ^ 3 * y) - x ^ 4, 19634], [-2 * x ^ 2 * y ^ 2 - 3 * x ^ 3 * y, 15393], [(-2 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2, 5427], [(-2 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3, 6250], [(-2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y, 25364], [((-2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 18144, 19604], [((-2 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + 2 * x ^ 4 * y, 19603], [(-2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) + x ^ 3 * y, 15397], [(-2 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, 12721], [-2 * x * y ^ 2 - 2 * x ^ 2 * y, 15892, 31269], [-2 * x * y ^ 2 - 2 * y ^ 3, 6192, 9979, 22519], [-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 5269, 9983, 19285, 29650], [-2 * x * y ^ 3 - 2 * y ^ 4, 17577, 30780], [-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3, 6318], [-2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y, 5771, 18145, 26017], [(-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y, 19619], [((-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 19659], [(-2 * x * y - 2 * x ^ 2) - y ^ 2, 19656], [(-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 17597, 30800], [(-2 * x ^ 2 * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 6338], [((-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 25115], [((-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 6460], [(-2 * x * y ^ 2 - 2 * x ^ 2 * y) + x ^ 3, 19651], [((-2 * x * y ^ 2 - 2 * x ^ 2 * y) + x ^ 3) - y ^ 3, 18667], [(-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 18641], [(-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 15390], [-2x - y, 19140], [-2 * x * y - y ^ 2, 6198], [-2 * x * y ^ 2 - x ^ 2 * y, 6104, 6348, 17615, 25389, 30818, 31298], [-2 * x * y ^ 2 - y ^ 3, 1717, 6193, 6208, 19208, 19213, 32458], [-2 * x * y ^ 3 - x ^ 2 * y ^ 2, 6075, 6320, 6347, 15392], [-2 * x * y ^ 3 - y ^ 4, 31975, 32439], [-2 * x ^ 2 * y - x ^ 3, 6266, 30476], [-2 * x ^ 2 * y ^ 2 - x ^ 3 * y, 5852, 6356, 17435, 19363, 31306, 31917], [(-2 * x * y - x ^ 2) - 2 * y ^ 2, 21632], [(-2 * x * y ^ 2 - x ^ 2 * y) - 2 * y ^ 3, 22522], [(-2 * x * y ^ 3 - x ^ 3 * y) - 2 * y ^ 4, 32402], [(-2 * x * y - x ^ 2) - y ^ 2, 2838, 10789, 11351, 11356, 11756, 16041, 18498, 22525, 26007, 30467, 30472, 31026], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 3809, 3821, 3868, 5184, 5185, 5188, 5843, 5848, 15887, 17426, 17431, 18497, 18682, 19617, 19666, 24068, 24073, 25445, 25450, 30294, 30295], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 6401, 6413, 6438], [(-2 * x * y ^ 4 - x ^ 2 * y ^ 3) - y ^ 5, 26002], [((-2 * x * y ^ 2 - x ^ 2 * y) - x ^ 3) - y ^ 3, 5457], [((-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 4) + 2 * y ^ 4, 6185], [(-2 * x * y ^ 2 - x ^ 2 * y) + x ^ 3, 19127], [(-2 * x * y ^ 2 - x ^ 2 * y) + y ^ 3, 5790, 31972], [(-2 * x ^ 2 * y - x ^ 3) + y ^ 3, 11765], [(-2 * x ^ 2 * y ^ 2 - x ^ 3 * y) + x ^ 4, 31286], [(-2 * x ^ 2 * y ^ 2 - x ^ 3 * y) + y ^ 4, 9964], [(-2 * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y, 25373], [((-2 * x * y ^ 2 - x ^ 2 * y) + x ^ 3) - y ^ 3, 19643], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) + 3 * x ^ 3 * y + x ^ 4, 16933], [(-2 * x * y ^ 4 - x ^ 2 * y ^ 3) + 4 * x ^ 3 * y ^ 2 + x ^ 4 * y, 19525], [-2 * x * y ^ 2 + x ^ 2 * y, 6254, 15893], [-2 * x * y ^ 2 + y ^ 3, 15886], [-2 * x * y ^ 3 + y ^ 4, 31916], [-2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 25391], [(-2 * x * y ^ 2 + x ^ 2 * y) - y ^ 3, 19614], [-2 * x ^ 2 * y ^ 3 + 3 * x ^ 4 * y + x ^ 5, 18650], [(-2 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 5755], [(-2 * x * y ^ 4 + 3 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y) - y ^ 5, 25110], [-(x ^ -2) * y, 8449], [-(x ^ -1), 9463, 11550, 14764, 18128, 22983, 30048], [-(x ^ -1) * y, 7140, 7386, 7957, 8367, 10030, 10835, 11751, 11807, 12541, 16845], [-(x ^ -1) * y ^ 2, 8679, 8682, 11778, 11795], [-x, 907, 2965, 3446, 3456, 4248, 4249, 4348, 4809, 4814, 5352, 5415, 5805, 5978, 6279, 6302, 8046, 10179, 10254, 10809, 11141, 13878, 13945, 14267, 14272, 14847, 15415, 15468, 15918, 16006, 16973, 16983, 17850, 17937, 18342, 18477, 18700, 19007, 19009, 19122, 19158, 19172, 19178, 19185, 19187, 19407, 19424, 19431, 19546, 19670, 20739, 21568, 21572, 23776, 23782, 24126, 24128, 24827, 24837, 24846, 24850, 25278, 25926, 27148, 28588, 28591, 29109, 31311, 31314, 31553, 31563, 32064, 32199, 32244], [-y, 436, 495, 577, 1002, 1003, 1147, 1150, 1574, 1580, 1589, 1603, 1710, 1719, 1743, 1757, 1988, 1998, 3381, 3534, 3700, 3834, 4113, 4383, 4430, 4649, 5310, 5313, 5769, 5798, 5807, 5817, 5887, 6226, 6243, 6264, 6285, 6306, 6467, 6562, 6836, 7324, 7468, 7706, 7711, 8782, 8967, 9105, 9514, 9932, 9969, 10019, 10025, 10032, 10034, 10909, 11464, 11540, 11715, 11782, 11850, 11879, 11881, 12470, 12498, 12516, 12530, 12536, 12545, 12548, 12684, 14026, 14029, 14192, 14356, 14421, 14425, 14428, 14456, 14607, 14624, 14634, 15011, 15882, 15903, 15945, 15947, 16207, 16210, 16217, 16479, 16480, 16495, 16651, 16740, 17083, 17177, 17202, 17203, 17213, 17215, 17221, 17223, 17232, 17236, 17470, 17621, 17631, 17650, 17778, 18213, 18215, 18277, 18321, 18325, 18336, 18341, 18697, 19262, 19768, 19964, 20660, 20828, 20833, 20944, 21491, 21680, 21682, 22144, 22533, 22537, 22548, 22559, 22561, 22567, 22568, 22569, 22578, 22582, 23309, 23376, 23421, 23424, 23428, 24021, 24024, 24263, 24273, 24819, 25503, 25590, 26080, 26657, 26825, 27039, 27067, 27070, 27313, 27471, 27624, 27628, 27631, 27659, 27723, 27726, 28133, 28440, 28497, 28922, 28925, 28947, 28975, 29691, 29694, 29832, 29861, 29863, 30125, 30492, 30493, 30514, 30695, 30824, 30834, 30853, 31486, 31832, 31982, 31994, 32479, 32721], [-x * y, 1542, 1556, 1723, 1724, 1727, 2069, 2079, 2199, 2837, 2945, 2973, 3199, 3407, 3417, 3421, 3432, 3433, 3445, 3451, 3452, 3453, 3462, 3466, 3929, 4334, 4343, 4344, 4351, 4356, 4818, 5273, 5351, 5354, 5514, 5792, 6105, 6273, 6289, 6362, 6372, 6391, 7618, 7696, 7715, 8678, 8994, 9023, 10014, 10026, 10130, 10140, 10144, 10155, 10156, 10168, 10174, 10175, 10176, 10185, 10189, 10249, 10266, 10786, 10805, 10971, 10972, 10987, 11132, 11147, 11342, 11588, 11614, 11632, 11758, 11848, 12275, 12496, 12525, 12534, 12537, 12953, 13936, 15434, 15437, 15444, 15463, 15754, 15928, 15986, 16014, 16040, 16959, 16960, 16972, 16978, 16979, 17822, 17849, 17859, 17877, 17933, 18156, 18175, 18185, 18190, 18195, 18204, 18208, 18309, 18313, 18338, 18664, 18692, 18699, 18701, 18716, 18719, 18906, 18995, 19004, 19005, 19012, 19017, 19153, 19162, 19168, 19174, 19175, 19205, 19371, 19565, 19568, 19575, 19620, 19649, 20737, 20837, 20999, 21559, 21562, 21755, 22275, 22528, 22535, 22718, 23259, 23278, 23284, 23288, 23293, 23298, 23307, 23311, 23790, 24115, 24179, 24410, 24825, 25157, 25277, 25280, 25422, 25424, 25887, 25904, 25911, 25916, 27139, 27227, 27232, 27461, 27466, 27473, 27732, 27760, 28033, 28036, 28043, 28200, 28203, 28207, 28565, 28567, 29118, 29192, 29626, 29654, 29830, 30332, 31025, 31309, 31514, 31524, 31528, 31539, 31540, 31552, 31558, 31559, 31560, 31569, 31573, 31958, 32053, 32112, 32113, 32128, 32217, 32243, 32444, 32688, 32691], [-x * y ^ 2, 1951, 1982, 2040, 2044, 2055, 2060, 2089, 3404, 3431, 3441, 3459, 3927, 3969, 4332, 5348, 5513, 6077, 6088, 6091, 6107, 6132, 6168, 6215, 6269, 6323, 6333, 6337, 6349, 6359, 6367, 6368, 6382, 6457, 8751, 8992, 10001, 10002, 10127, 10154, 10164, 10182, 12081, 12513, 12665, 12674, 12693, 12777, 12781, 12891, 12982, 12986, 14583, 14597, 15169, 15173, 15409, 15420, 15421, 15439, 15440, 16958, 16986, 17042, 17212, 17584, 17609, 17820, 18173, 18649, 18663, 18688, 18993, 19286, 19551, 19552, 19570, 19571, 20899, 21754, 22558, 23276, 24177, 24236, 24381, 25141, 25159, 25274, 25372, 25411, 25851, 27459, 27463, 27713, 27731, 27741, 28281, 28284, 28542, 28543, 28553, 28561, 28562, 28563, 28570, 28575, 30058, 30787, 30812, 31511, 31538, 31548, 31566, 31964, 32034, 32240, 32415, 32686], [-x * y ^ 3, 1964, 2064, 3406, 5305, 5429, 5510, 6379, 6416, 8749, 10129, 11137, 12746, 12756, 12774, 12973, 13609, 15160, 15419, 15447, 19316, 19339, 19550, 19578, 24016, 25139, 25167, 28551, 29686, 31513, 31921, 32238, 32656], [-x * y ^ 4, 5508], [-(x ^ 2), 911, 1010, 1552, 2313, 2316, 4250, 5059, 5921, 8284, 8285, 8288, 10811, 11619, 14276, 15435, 16965, 18194, 19138, 19167, 19176, 19179, 22474, 23736, 24799, 25395, 26208, 26211, 28518, 32250], [-(y ^ 2), 1001, 1578, 1713, 1732, 1738, 1747, 1753, 1760, 1959, 1963, 1974, 1979, 1985, 1994, 2008, 4386, 4405, 4411, 4420, 4433, 5308, 5325, 5594, 5597, 5868, 5869, 5890, 6225, 6252, 6256, 6272, 6297, 6300, 6426, 6446, 8680, 8699, 8781, 10000, 10015, 10021, 10022, 11128, 11138, 11148, 11157, 11161, 11867, 11876, 11877, 11884, 11889, 12249, 12278, 12511, 12520, 12526, 12532, 12533, 12765, 12779, 13007, 13047, 13050, 13075, 14419, 14438, 14615, 14621, 14630, 14644, 15194, 15895, 15934, 15939, 17174, 17201, 17211, 17229, 17451, 17452, 17473, 17582, 17592, 17596, 17608, 17618, 17626, 17627, 17641, 18202, 18345, 18473, 18476, 18639, 18801, 18848, 19233, 19234, 19249, 19629, 20657, 21657, 21658, 21668, 21676, 21677, 21678, 21685, 21690, 22520, 22547, 22557, 22575, 23280, 24019, 24036, 24249, 24254, 24260, 24269, 24283, 24953, 24978, 24979, 25034, 25037, 25116, 25362, 25492, 26022, 27622, 27641, 28946, 28956, 29689, 29706, 29849, 29858, 29859, 29866, 29871, 30063, 30495, 30785, 30795, 30799, 30811, 30821, 30829, 30830, 30844, 31923, 31961, 31980, 31986, 31988, 31991, 32421, 32690, 32717], [-(x ^ 2) * y, 2061, 2194, 2311, 2328, 2332, 3412, 3419, 3949, 4354, 4381, 5520, 5974, 6459, 8022, 8029, 8275, 8278, 8687, 8761, 9031, 9976, 9980, 10135, 10142, 10973, 11100, 11114, 11615, 11936, 11964, 12487, 14593, 14834, 14839, 15436, 18642, 18876, 18905, 19015, 19155, 19314, 19315, 19361, 19366, 19397, 19557, 20659, 21638, 21730, 21734, 21873, 21880, 23260, 24199, 24786, 24826, 25390, 25412, 26206, 26223, 26227, 27217, 27236, 29027, 29055, 31304, 31519, 31526, 32114, 32436, 32437, 32452], [-(x ^ 2) * y ^ 2, 1702, 2028, 2032, 2057, 2188, 2329, 3442, 6115, 6325, 6350, 8788, 10003, 10165, 10246, 11908, 12076, 12263, 12640, 12730, 12886, 12971, 15158, 17050, 18184, 18799, 19217, 19291, 19295, 19553, 21721, 23287, 25841, 25846, 25877, 26224, 27722, 28282, 28301, 28526, 28999, 31549, 31931], [-(x ^ 2) * y ^ 3, 12073, 13081], [-(x ^ 3), 8032, 11621, 16932, 18147, 21883, 32245], [-(y ^ 3), 1730, 1983, 4403, 5591, 5871, 11865, 12127, 12295, 13006, 13046, 13072, 13074, 14619, 17454, 17638, 18470, 18804, 18823, 18829, 18838, 18851, 20655, 21666, 24258, 24950, 24977, 25031, 26020, 29847, 30841, 31960, 32655], [-(x ^ 3) * y, 1741, 5459, 5466, 5515, 8023, 11947, 14824, 14843, 18913, 19524, 21719, 21874, 25113, 28280, 29038, 31674, 31703, 32242], [-(x ^ 3) * y ^ 2, 2308, 5428, 5512, 13061, 26203], [-(x ^ 4), 18712], [-(y ^ 4), 5589, 12071, 12108, 12749, 18468, 18821, 21628, 24948, 25029], [-(x ^ 4) * y, 28289, 31711], [-(y ^ 5), 12069], [(-x * y ^ 4 - 4 * x ^ 2 * y ^ 3) + 2 * x ^ 4 * y, 19602], [-x * y ^ 3 - 3 * x ^ 2 * y ^ 2, 18148], [-x * y ^ 3 - 3 * y ^ 4, 12260], [-(x ^ 3) * y ^ 2 - 3 * x ^ 4 * y, 15410], [((-x * y ^ 4 - 3 * x ^ 3 * y ^ 2) - 6 * x ^ 4 * y) - 2 * x ^ 5, 19622], [((-x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - 3 * x ^ 3 * y ^ 2) - x ^ 4 * y, 31934], [(-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 4394, 17030], [(-x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2, 18812], [(-(x ^ 2) * y ^ 2 - 3 * x ^ 3 * y) - 2 * x ^ 4, 25616], [(-(x ^ 2) * y ^ 3 - 3 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 26021], [(-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y, 19359, 31924, 31952], [(-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 23251], [(-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) + x ^ 4 + y ^ 4, 12475], [(-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4 + 2 * y ^ 4, 12478], [-(x ^ -1) * y ^ 3 - 2 * y ^ 2, 11784], [-x * y - 2 * y ^ 2, 17607, 19343, 28919, 30810], [-x * y ^ 2 - 2 * x ^ 2 * y, 4412, 15889, 24790], [-x * y ^ 2 - 2 * y ^ 3, 12261, 17579, 17606, 30782, 30809], [-x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 18830, 19360, 32410, 32414, 32417], [-x * y ^ 3 - 2 * y ^ 4, 12288], [-x * y ^ 4 - 2 * x ^ 2 * y ^ 3, 31954], [-(x ^ 2) * y - 2 * x ^ 3, 19129], [-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y, 15428], [-(x ^ 3) * y ^ 2 - 2 * x ^ 4 * y, 32420], [((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 5 * x ^ 3 * y) - 2 * x ^ 4, 19640], [(((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 4 * x ^ 3 * y) - x ^ 4) + y ^ 4, 19612], [((-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5, 19642], [((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - 3 * y ^ 4, 6237], [(-x * y - 2 * x ^ 2) - y ^ 2, 19646], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 3904, 5812, 17921, 18326, 24154, 29180], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 6169, 20432, 24077, 25454, 28451, 32161], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 28513], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 18488, 19289, 19294, 31995], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 5447], [((-x * y ^ 2 - 2 * x ^ 2 * y) + x ^ 3) - y ^ 3, 19652], [-1 - x ^ -1 * y, 5229, 5232, 10779, 11798, 11800], [-(x ^ -1) * y ^ 2 - y, 5227, 5244, 10806, 11505, 11531, 11534, 11559, 11786, 11796, 11803, 11808], [-x - y, 344, 3851, 3861, 4952, 4957, 10810, 11151, 11376, 11377, 16141, 16142, 16145, 21633, 22288, 26077, 31469], [-x * y - x ^ 2, 4223, 4228, 4781, 4786, 4793, 4961, 5815, 10784, 17904, 17912, 17939, 18187, 18193, 18317, 18344, 19124, 19675, 21229, 21232, 21239, 24847, 25925, 29081, 29086, 29093, 29163, 29171, 29198, 29254, 29257, 31115, 31120, 31489, 32253, 32257], [-x * y - y ^ 2, 1541, 1553, 1600, 2842, 2849, 2873, 3837, 3842, 3848, 3857, 3871, 3982, 5436, 5794, 5800, 5802, 6221, 6443, 6453, 8683, 9978, 9982, 11127, 11140, 11146, 11506, 11542, 11806, 12285, 15912, 16045, 16052, 16076, 16132, 16454, 16459, 17233, 18149, 18308, 18320, 18499, 19946, 22279, 22532, 22579, 23252, 24093, 24094, 24109, 25470, 25471, 25486, 26025, 26054, 26056, 30224, 30229, 30297, 30323, 30326, 30351, 31030, 31037, 31061, 31467, 31968, 31987, 32406, 32424, 32453, 32455, 32469], [-x * y ^ 2 - x ^ 2 * y, 2916, 2917, 2920, 3463, 3901, 5278, 5450, 5453, 5476, 5486, 5523, 5527, 10186, 10946, 10951, 11111, 11837, 11842, 11910, 11939, 13854, 15312, 15319, 15957, 15958, 15961, 16931, 16943, 17013, 17020, 17021, 17026, 17048, 17092, 17580, 18201, 18205, 19362, 19388, 19391, 19416, 19632, 20450, 23263, 23308, 23734, 24095, 24151, 25156, 25405, 25472, 25922, 28442, 28469, 29001, 29030, 29659, 29819, 29824, 30233, 30298, 30334, 30783, 31570, 32087, 32092, 32164, 32171], [-x * y ^ 2 - y ^ 3, 1946, 1958, 2005, 2836, 2855, 3846, 3973, 4390, 5224, 5439, 5458, 5808, 6251, 6429, 6434, 6449, 11126, 11154, 11158, 12084, 12088, 12639, 12668, 12729, 14582, 14594, 14641, 15193, 15878, 16039, 16058, 17172, 17173, 17176, 17616, 17634, 18146, 18183, 19313, 22518, 24221, 24233, 24280, 26031, 26032, 26042, 26050, 26051, 26052, 26059, 26064, 30819, 30837, 31024, 31043, 31944, 31945, 31955, 31957, 31963, 31965, 31978, 32419, 32450, 32463, 32689], [-x * y ^ 3 - x ^ 2 * y ^ 2, 2027, 2039, 2086, 3402, 3403, 4375, 5265, 5266, 5791, 6163, 6357, 6375, 10125, 10126, 12079, 12086, 12245, 12637, 12676, 12724, 12778, 12976, 15163, 15404, 17617, 19523, 19535, 20173, 23976, 23977, 23980, 25355, 25842, 25868, 25871, 25896, 26011, 26018, 29646, 29647, 30820, 31509, 31510, 32158], [-x * y ^ 3 - x ^ 4, 5346, 25272], [-x * y ^ 3 - y ^ 4, 6188, 12238, 12292, 17578, 18808, 19292, 26040, 30781, 31971], [-x * y ^ 4 - x ^ 2 * y ^ 3, 5431, 6319, 12757, 18793], [-(x ^ 2) - y ^ 2, 6245], [-(x ^ 2) * y - x ^ 3, 992, 3899, 4232, 4304, 4309, 5038, 5602, 5920, 10793, 11586, 11594, 13864, 18506, 18965, 18970, 20415, 22453, 23507, 24149, 25042, 25599, 25606, 25607, 25612, 25634, 28921, 31124, 31844, 31849, 31997, 32170, 32248, 32255], [-(x ^ 2) * y - y ^ 3, 4384, 18676, 19637], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 2036, 2063, 5437, 5465, 5518, 5525, 5593, 5914, 5917, 6321, 10206, 10207, 10210, 10955, 13855, 19399, 20170, 21724, 25033, 25121, 25126, 25369, 28285, 31267, 31682, 31687, 32096], [-(x ^ 2) * y ^ 2 - y ^ 4, 18640, 18802], [-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2, 6358, 25879], [-(x ^ 3) * y - x ^ 4, 5350, 11603, 25276, 31853, 31999], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 2269, 2272, 26164, 26167, 31691], [(-(x ^ -1) * y ^ 3 - x * y) - 2 * y ^ 2, 11502, 11503], [(-x * y ^ 2 - x ^ 2 * y) - 2 * y ^ 3, 21629], [(((-x * y ^ 3 - x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4) - y ^ 4, 19641], [(-x * y - x ^ 2) - y ^ 2, 18672, 18686], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 5035, 18693, 22450, 28517], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 6164, 6440, 6463, 9973, 18689, 19290, 19621], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 5484, 26012, 28514], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 12233], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 2045, 5467, 15430], [((-x * y ^ 2 - x ^ 2 * y) - x ^ 3) - 2 * y ^ 3, 28917], [(-x * y ^ 2 - x ^ 2 * y) + x ^ 3, 16936, 19645, 31277], [(-x * y ^ 2 - x ^ 2 * y) + y ^ 3, 19633], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y, 19528], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + y ^ 4, 19631], [(-(x ^ 2) * y - x ^ 3) + y ^ 3, 19283], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 25920], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2 + x ^ 4 * y, 19318], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + 2 * x ^ 3 * y + x ^ 4, 16929], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, 19282], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 19521], [-x + y, 5795, 18343], [-x * y + x ^ 2, 16970, 16989, 16993, 25397], [-x * y + y ^ 2, 1549, 5786, 5801, 5809, 6249, 6274, 10004, 10023, 10027, 12515, 12538, 15888, 15935, 18316, 19202, 25359], [-x * y ^ 2 + x ^ 2 * y, 1714, 2066, 2075, 12281, 15431, 15454, 15879, 19562, 19585, 25388, 25403], [-x * y ^ 2 + x ^ 3, 3824, 5592, 7210, 16990, 18666, 19653, 25032, 31282], [-x * y ^ 2 + y ^ 3, 1954, 12266, 12758, 14590, 31919], [-x * y ^ 3 + x ^ 2 * y ^ 2, 1705, 12755, 28541], [-x * y ^ 3 + x ^ 3 * y, 12636, 12656, 15451, 19582, 25367, 26731, 30052], [-x * y ^ 4 + x ^ 2 * y ^ 3, 12271, 32647], [-(x ^ 2) + y ^ 2, 18322, 19331, 19333], [-(x ^ 2) * y + y ^ 3, 5765, 6253, 10024, 12267, 12535, 19336, 31295], [-(x ^ 2) * y ^ 2 + x ^ 3 * y, 15407, 19534], [-(x ^ 2) * y ^ 2 + x ^ 4, 18874], [-(x ^ 2) * y ^ 2 + y ^ 4, 19317], [-(x ^ 2) * y ^ 3 + x ^ 4 * y, 12880], [(-x * y ^ 2 + x ^ 2 * y) - 2 * y ^ 3, 12280, 12490], [(-(x ^ -1) * y ^ 4 + x * y ^ 2) - y ^ 3, 12243], [(-x * y ^ 2 + x ^ 2 * y) - y ^ 3, 19533, 32430, 32451], [(-x * y ^ 3 + x ^ 3 * y) - y ^ 4, 19310], [(-x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 4 * y, 6176], [-x * y ^ 2 + x ^ 2 * y + x ^ 3, 30314], [-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 11097, 30055], [-x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 6322], [-(x ^ 2) * y ^ 2 + x ^ 3 * y + x ^ 4, 2284, 26179], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 12883], [-(x ^ 3) * y ^ 2 + x ^ 4 * y + x ^ 5, 2288, 26183], [((-x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 19298], [(-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 19281, 25112], [-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 5751], [-x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 12737], [-x * y ^ 4 + x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 15391, 19522], [-x * y ^ 4 + 2 * x ^ 3 * y ^ 2, 28516], [(-x * y ^ 2 + 2 * x ^ 2 * y) - 2 * y ^ 3, 32405], [-x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 19126], [-x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 6166, 6194], [-x * y ^ 3 + 2 * x ^ 3 * y + x ^ 4, 16930], [-(x ^ 2) * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 18668, 19379], [-(x ^ 2) * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 25859], [(-x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 31943], [(-x * y ^ 3 + 2 * x ^ 3 * y + x ^ 4) - y ^ 4, 23247], [-x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 6247], [(-x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 11101], [(-x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - y ^ 5, 31918], [x ^ -2 * y, 8692], [x ^ -1, 4986, 4989, 11555, 11557], [x ^ -1 * y, 4984, 5001, 7707, 8688, 8691, 11543, 11552, 11553, 11560, 11565, 17088, 17655, 30129, 30858], [x ^ -1 * y ^ 2, 11541, 12298, 12985], [x, 735, 817, 1066, 1312, 1394, 1640, 1804, 1886, 2132, 2193, 2516, 2649, 3034, 3116, 4174, 4217, 4242, 4243, 4253, 4255, 4261, 4263, 4272, 4276, 4341, 4500, 4756, 4901, 5153, 5248, 5793, 6291, 6310, 6642, 6725, 6889, 7652, 7868, 8028, 8201, 9156, 9265, 9324, 9594, 9677, 9841, 10104, 10497, 10579, 10652, 10755, 10833, 10836, 11069, 11139, 11207, 12219, 12383, 12480, 12543, 12629, 12870, 13204, 13368, 13532, 13778, 13970, 14106, 14512, 14676, 15090, 15251, 15469, 15664, 15930, 16338, 16891, 16935, 16985, 16991, 16998, 17000, 17397, 17540, 18206, 18349, 18355, 18357, 18366, 18369, 18370, 18495, 18616, 18942, 19002, 19108, 19160, 19170, 19189, 19383, 19412, 19414, 19672, 19683, 20008, 20175, 20257, 20339, 20421, 20503, 20585, 20910, 21702, 21787, 21811, 21879, 22061, 22224, 22523, 22635, 23209, 23316, 23318, 23616, 23770, 23865, 23947, 24445, 24685, 24822, 24931, 25421, 25440, 25641, 25644, 25830, 26244, 26326, 26408, 26490, 26588, 26897, 27173, 27385, 27553, 28373, 28622, 28704, 28868, 29442, 29524, 30180, 30918, 31000, 31319, 31321, 31599, 31902, 32285, 32394, 32535, 32792], [y, 328, 653, 656, 678, 679, 902, 1137, 1141, 1144, 1148, 1172, 1551, 1570, 1576, 1585, 1591, 1598, 1722, 1728, 1745, 1755, 1968, 1986, 2000, 2050, 2296, 2348, 2894, 3943, 4005, 4264, 4346, 4401, 4418, 4428, 5028, 5031, 5056, 5084, 5338, 5494, 5598, 5655, 5757, 5778, 5820, 5822, 5880, 5904, 6120, 6130, 6150, 6224, 6232, 6236, 6284, 6292, 6293, 6303, 6311, 6314, 6396, 6478, 7214, 7217, 7627, 7697, 7702, 7709, 8766, 8857, 9021, 9049, 10007, 10010, 10017, 10169, 10251, 10803, 11159, 11166, 11168, 11399, 11563, 11788, 11794, 11874, 11891, 11898, 11903, 11916, 11941, 11973, 12137, 12301, 12518, 12528, 12547, 12689, 12691, 12711, 12793, 12957, 13039, 13121, 13614, 14016, 14020, 14023, 14027, 14051, 14431, 14434, 14589, 14598, 14622, 14636, 14844, 15226, 15318, 15418, 15457, 15853, 15885, 15894, 15923, 15932, 16097, 16156, 16448, 16458, 16462, 16473, 16474, 16486, 16492, 16493, 16494, 16503, 16507, 16976, 17052, 17055, 17058, 17121, 17126, 17208, 17209, 17224, 17463, 17487, 17619, 17622, 17632, 17633, 17642, 17878, 18352, 18358, 18365, 18534, 18780, 18862, 19190, 19241, 19251, 19272, 19354, 19436, 19588, 19669, 19682, 19939, 20667, 20824, 20831, 20903, 21067, 21070, 21077, 21569, 21675, 21692, 21704, 21733, 21897, 22307, 22443, 22446, 22471, 22499, 22554, 22555, 22570, 23766, 23783, 24029, 24193, 24261, 24275, 24439, 24849, 25013, 25038, 25095, 25177, 25341, 25423, 25488, 25669, 25997, 26029, 26079, 26191, 26243, 26736, 26799, 27057, 27061, 27064, 27068, 27092, 27228, 27634, 27637, 27720, 28294, 28458, 28760, 28763, 28785, 28786, 28950, 29007, 29032, 29064, 29114, 29196, 29278, 29719, 29856, 29873, 29880, 29885, 30057, 30120, 30262, 30335, 30344, 30345, 30352, 30357, 30461, 30487, 30499, 30505, 30516, 30520, 30822, 30825, 30835, 30836, 30845, 31082, 31147, 31164, 31328, 31492, 31738, 31984, 32066, 32428, 32478, 32722], [x * y, 244, 975, 982, 1473, 1759, 1966, 2067, 2081, 2192, 2349, 2432, 2787, 3438, 3439, 3454, 4214, 4241, 4251, 4269, 4582, 5063, 5082, 5086, 5555, 5714, 5803, 5918, 5943, 5944, 6162, 6204, 6267, 6278, 6280, 6286, 6360, 6363, 6373, 6374, 6383, 6554, 7052, 8049, 8050, 9999, 10161, 10162, 10177, 10414, 10940, 10965, 10966, 10976, 10978, 10984, 10986, 10995, 10999, 11109, 11143, 11156, 11298, 11641, 11965, 12273, 12287, 12510, 12786, 12885, 12948, 13284, 13620, 13693, 14835, 15396, 15411, 15432, 15446, 15452, 15459, 15461, 15581, 15917, 16453, 16460, 16584, 16966, 16981, 16987, 16988, 17018, 17210, 17585, 17599, 17709, 18177, 18179, 18180, 18196, 18648, 18677, 18878, 18881, 18903, 18931, 19131, 19135, 19146, 19147, 19165, 19166, 19334, 19400, 19409, 19410, 19417, 19422, 19527, 19542, 19545, 19563, 19577, 19583, 19590, 19592, 19636, 19664, 19671, 19673, 20090, 20662, 21549, 21553, 21556, 21584, 21635, 21653, 21691, 21729, 21900, 21901, 22025, 22478, 22497, 22501, 23043, 23144, 23282, 23283, 23297, 23299, 23305, 23709, 24738, 24956, 25179, 25181, 25209, 25371, 25400, 25442, 25639, 25656, 25863, 25892, 25894, 25984, 26046, 26103, 27218, 27223, 27230, 27470, 27475, 27964, 28290, 28293, 28560, 28577, 28589, 28920, 28949, 29056, 29342, 29932, 30355, 30459, 30488, 30600, 30750, 30788, 30802, 31307, 31317, 31329, 31457, 31545, 31546, 31561, 31979, 32081, 32106, 32107, 32117, 32119, 32125, 32127, 32136, 32140, 32284, 32445], [x * y ^ 2, 1708, 2071, 2077, 2084, 2189, 2273, 2298, 2299, 2305, 2875, 4377, 5061, 5554, 5835, 5864, 5915, 5942, 6171, 6175, 6191, 6354, 6355, 6364, 6370, 6422, 8048, 8667, 8671, 8865, 8866, 10937, 10964, 10974, 10992, 11107, 11135, 11380, 11828, 11833, 11864, 11909, 11946, 12290, 12753, 12884, 12972, 12975, 13003, 13020, 15207, 15427, 15442, 15448, 16078, 16483, 17418, 17447, 18902, 18912, 19145, 19173, 19204, 19207, 19211, 19214, 19324, 19398, 19547, 19558, 19573, 19579, 19580, 19635, 19660, 20656, 21547, 21566, 21665, 21684, 21899, 22476, 25009, 25168, 25413, 25880, 25889, 25890, 25897, 25902, 25981, 26044, 26168, 26193, 26194, 26200, 27216, 27220, 27709, 27715, 27716, 28434, 29000, 29037, 29810, 29815, 29846, 31063, 31144, 31428, 32078, 32105, 32115, 32133], [x * y ^ 3, 1948, 2187, 2270, 5913, 11907, 12881, 12963, 12998, 15150, 15185, 15916, 18795, 19237, 24223, 25878, 26014, 26165, 27706, 28998, 32646, 32681], [x * y ^ 4, 12070], [x ^ 2, 985, 1577, 7540, 7786, 8117, 8527, 11624, 11643, 11647, 16980, 16992, 17823, 17852, 18181, 19152, 19381, 19485, 19667, 20905, 23746, 24789, 24824, 25164, 25407, 25604, 28587, 29244, 32162, 32475], [y ^ 2, 650, 677, 1135, 1154, 1568, 1720, 1736, 1742, 1751, 1765, 1981, 1990, 1996, 2003, 2342, 3939, 4001, 4409, 4415, 4424, 4434, 4437, 4438, 4981, 5055, 5756, 5759, 5770, 5814, 5837, 5863, 5875, 5881, 5892, 5896, 6118, 6126, 6133, 6203, 6211, 6222, 6230, 6296, 6455, 7211, 7695, 7699, 8763, 8778, 8806, 8903, 8993, 9020, 9030, 9048, 9993, 9994, 10006, 10012, 10013, 11130, 11133, 11155, 11838, 12078, 12103, 12116, 12258, 12265, 12293, 12300, 12302, 12493, 12504, 12505, 12523, 12524, 12687, 12694, 12699, 12770, 12772, 12981, 13115, 13613, 14014, 14033, 14592, 14611, 14617, 14626, 14632, 14639, 15168, 15834, 16445, 16472, 16482, 16500, 17053, 17056, 17070, 17130, 17420, 17446, 17458, 17464, 17475, 17479, 17613, 17614, 17623, 17629, 18657, 18819, 18836, 18846, 19212, 19216, 19228, 19238, 19240, 19246, 19247, 19248, 19257, 19261, 19611, 19930, 20818, 20821, 20900, 21639, 22470, 23509, 24012, 24189, 24231, 24256, 24265, 24271, 24278, 25415, 25475, 25498, 26048, 26075, 26237, 26735, 26738, 27055, 27074, 27714, 27717, 28436, 28439, 28757, 28784, 29820, 30056, 30242, 30270, 30333, 30517, 30816, 30817, 30826, 30832, 31296, 31920, 31938, 31967, 31983, 32447, 32474, 32649, 32664, 32712], [x ^ 2 * y, 976, 2048, 2068, 2074, 2076, 2085, 2088, 4252, 4331, 6182, 6326, 6340, 8265, 8269, 8272, 8300, 9966, 10777, 11110, 12023, 12638, 12647, 12652, 13615, 14618, 14825, 14830, 14837, 14924, 15398, 15412, 15413, 15441, 15453, 16967, 16968, 17821, 17901, 18161, 18182, 18306, 18448, 18992, 19338, 19342, 19536, 19564, 19572, 19584, 20902, 21720, 21723, 21751, 21768, 23250, 23264, 23285, 23737, 24583, 25140, 25151, 25170, 25174, 25861, 26009, 27460, 27479, 27705, 28520, 28538, 28576, 28957, 29160, 29242, 31279, 31327, 31701, 32423, 32460, 32608], [x ^ 2 * y ^ 2, 2306, 4378, 5062, 6277, 6406, 6428, 8263, 8282, 8867, 10975, 12107, 12733, 13044, 13070, 13073, 13098, 13612, 14823, 14827, 15429, 19560, 21711, 21746, 22477, 25148, 25392, 25636, 26039, 26201, 28523, 28550, 28569, 31700, 31710, 31728, 32116, 32239, 32438, 32650], [x ^ 2 * y ^ 3, 5509, 6399, 12109, 12960, 12964, 13000, 13041, 13042, 15147, 15151, 15187, 18796, 25393], [x ^ 3, 5025, 5618, 8057, 8609, 11596, 16942, 16946, 17860, 18157, 21908, 22440, 25058], [y ^ 3, 648, 4413, 5893, 6114, 6202, 8750, 8777, 8787, 8991, 9992, 10020, 12100, 12102, 12115, 12250, 12264, 12289, 12503, 12531, 12675, 12748, 12766, 12767, 12768, 12780, 13099, 13610, 14609, 15166, 16447, 17476, 18827, 18833, 18842, 18852, 18855, 18856, 19236, 19254, 19258, 19308, 19309, 19319, 19328, 19341, 20898, 24096, 24229, 25386, 26732, 28433, 28755, 30053, 31977, 32412, 32648, 32662], [x ^ 3 * y, 2191, 5023, 11583, 16969, 18662, 19538, 22438, 25123, 27742, 28519], [x ^ 3 * y ^ 2, 2025, 19561, 21708, 21712, 21748, 25150, 28269, 28273], [y ^ 4, 8748, 13080, 13608, 18831, 28431, 32645], [y ^ 5, 32643], [((x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y) + 2 * y ^ 4, 9967], [x * y - 2 * y ^ 2, 6242], [x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 12234], [x * y ^ 3 - 2 * x ^ 3 * y, 19532], [(x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 11846, 29828], [(x * y ^ 4 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 2268, 26163], [((x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 9963], [x ^ -1 * y ^ 3 - x * y, 9975], [x - y, 6281, 15920, 18150, 18347, 18356], [x * y - x ^ 2, 19157, 19180], [x * y - y ^ 2, 5763, 5810, 6287, 6301, 15911, 15926], [x * y ^ 2 - x ^ 2 * y, 1543, 1739, 2062, 4391, 15426, 19607, 25365], [x * y ^ 2 - x ^ 3, 16940, 18673, 19177, 28918], [x * y ^ 2 - y ^ 3, 6298, 12277, 15915, 18661, 21656, 25384, 31926], [x * y ^ 3 - x ^ 2 * y ^ 2, 2035, 12248, 12269, 14584, 18809, 25363], [x * y ^ 3 - x ^ 3 * y, 2041, 2297, 6238, 17011, 23248, 26192, 32413], [x * y ^ 4 - x ^ 3 * y ^ 2, 12980, 15167], [x ^ 2 - y ^ 2, 5781, 16941, 19326, 19350], [x ^ 2 * y - y ^ 3, 9974, 12272, 12274, 15890, 25383, 32431, 32441, 32449], [x ^ 2 * y ^ 2 - x ^ 3 * y, 19559, 25366, 28528], [x ^ 2 * y ^ 2 - x ^ 4, 5347, 25273], [x ^ 2 * y ^ 2 - y ^ 4, 12720, 26030], [x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2, 18670], [x ^ 2 * y ^ 3 - x ^ 4 * y, 21728, 25130, 28532, 32401], [(x * y ^ 3 - x ^ 2 * y ^ 2) - 3 * x ^ 3 * y, 32416], [((x * y ^ 3 - x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, 19117], [(x * y ^ 3 - x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 21647], [((x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 31672], [(x * y ^ 2 - x ^ 2 * y) - x ^ 3, 18681, 18690], [(x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 1721, 15876], [(x ^ 2 * y ^ 2 - x ^ 3 * y) - x ^ 4, 4313, 18974], [((x * y ^ 2 - x ^ 2 * y) - x ^ 3) + y ^ 3, 24059], [(x * y ^ 2 - x ^ 2 * y) + y ^ 3, 9970], [(x * y ^ 3 - x ^ 2 * y ^ 2) + y ^ 4, 19198], [(x * y ^ 3 - x ^ 3 * y) + y ^ 4, 31266], [1 + x ^ -1 * y, 11793, 16222, 18371], [x ^ -1 * y ^ 2 + y, 11355], [x ^ -1 * y ^ 3 + y ^ 2, 12486], [x + y, 246, 738, 820, 1476, 2214, 2378, 2460, 2542, 2624, 2788, 2858, 2861, 2952, 3280, 3444, 3849, 3933, 3936, 4182, 4510, 4592, 4838, 4920, 5166, 5412, 5576, 5740, 5986, 6560, 6643, 7053, 7545, 7791, 7873, 8037, 8119, 8283, 8529, 8611, 9185, 9267, 9349, 9595, 10087, 10415, 10661, 10743, 10816, 10822, 10824, 10989, 11071, 11153, 11235, 11317, 11513, 11518, 11645, 12055, 12875, 13286, 13696, 13860, 13942, 14270, 14516, 14680, 14926, 15254, 15582, 15992, 16061, 16064, 16320, 16402, 16566, 16894, 17386, 17550, 17714, 17960, 18452, 18698, 18944, 19026, 19518, 19600, 20011, 20093, 20749, 20752, 20913, 20917, 21268, 21323, 21699, 21815, 21979, 22225, 22278, 22286, 22313, 22799, 23045, 23127, 23291, 23537, 23619, 23701, 24111, 24183, 24186, 24422, 24603, 24767, 25259, 25833, 25915, 25992, 25995, 26161, 26900, 27146, 27392, 27556, 27966, 28048, 28212, 28376, 28540, 29360, 29934, 30075, 30486, 30590, 30754, 31046, 31049, 31246, 31574, 31656, 32148, 32230, 32312, 32558, 32640, 32804], [x * y + x ^ 2, 2927, 2932, 4273, 4737, 5245, 6723, 7634, 12903, 13952, 15797, 15940, 15968, 15973, 16944, 16948, 17914, 18367, 20908, 20915, 23749, 24442, 24797, 25154, 26076, 27155, 28584, 29173, 30073, 30305, 30310, 32180, 32183], [x * y + y ^ 2, 1555, 2848, 2851, 3819, 3844, 3853, 3859, 3866, 3931, 3972, 3980, 4007, 4941, 4942, 4945, 5454, 5787, 5862, 6201, 6229, 6268, 6288, 6441, 6724, 10775, 10802, 10830, 11149, 11350, 11783, 12479, 13881, 13882, 15339, 15340, 15906, 15919, 15925, 15927, 16051, 16054, 16126, 16129, 16157, 16504, 17093, 17098, 17105, 17183, 17188, 17445, 19302, 23502, 23505, 24062, 24087, 24088, 24098, 24100, 24106, 24108, 24117, 24121, 24181, 24420, 25464, 25465, 25477, 25483, 25485, 25494, 26066, 26078, 30458, 30513, 31036, 31039, 31324, 31956, 32465, 32477, 32667], [x * y ^ 2 + x ^ 2 * y, 1540, 3413, 3418, 3891, 3917, 3926, 4212, 4213, 4216, 4296, 4322, 4325, 4350, 4387, 4738, 5060, 5083, 5268, 5275, 5276, 5281, 5303, 5462, 5463, 10136, 10141, 10996, 11341, 11622, 12282, 17012, 17017, 17023, 17024, 17192, 17590, 17905, 18151, 18155, 18158, 18957, 18983, 18986, 19011, 19300, 19321, 19540, 19544, 19625, 19628, 20425, 21727, 22475, 22498, 22538, 23254, 23258, 23261, 23992, 24141, 24167, 24176, 24955, 25125, 25145, 25160, 25394, 25396, 25402, 26027, 26065, 28444, 29164, 29649, 29656, 29657, 29662, 29684, 30062, 30067, 30496, 30793, 31104, 31105, 31108, 31520, 31525, 31936, 32137, 32168, 32173, 32426, 32443, 32464], [x * y ^ 2 + y ^ 3, 1703, 1715, 1740, 1762, 1960, 4376, 4388, 4435, 5834, 5889, 6216, 6411, 6436, 6451, 6458, 8668, 9965, 9977, 11108, 11829, 11855, 11858, 11883, 12283, 12488, 12979, 13880, 14596, 15338, 15933, 16139, 16443, 16444, 17417, 17472, 17588, 17593, 19329, 21630, 21659, 24086, 24114, 24235, 25491, 25495, 26013, 26047, 29811, 29837, 29840, 29865, 30213, 30214, 30217, 30791, 30796, 31268, 31950, 31951, 31966, 32446], [x * y ^ 3 + x ^ 2 * y ^ 2, 1945, 3811, 5872, 6170, 6329, 6334, 10935, 10936, 10939, 11117, 11866, 12967, 12970, 12977, 14581, 15154, 15157, 15164, 17010, 17455, 18637, 18805, 20416, 21667, 24097, 24220, 24949, 24952, 25149, 25410, 25474, 26058, 28435, 28515, 28544, 29848, 32076, 32077, 32080, 32653, 32660], [x * y ^ 3 + x ^ 3 * y, 18647, 25356], [x * y ^ 3 + y ^ 4, 6213, 12719, 18669, 18794, 18806, 18853, 19201], [x * y ^ 4 + x ^ 2 * y ^ 3, 6403, 12961, 15148], [x * y ^ 4 + x ^ 4 * y, 12879], [x ^ 2 * y + x ^ 3, 1559, 2936, 3814, 4780, 5627, 7213, 10217, 10222, 11644, 12901, 13889, 15799, 15977, 18160, 18481, 18713, 18718, 19370, 19375, 19662, 24806, 25067, 25609, 29080, 32167, 32195], [x ^ 2 * y + y ^ 3, 18665, 19648], [x ^ 2 * y ^ 2 + x ^ 3 * y, 3892, 4297, 4333, 5440, 6331, 11587, 12514, 12890, 12895, 14600, 18164, 18472, 18711, 18715, 18958, 18994, 19335, 21715, 21718, 21725, 23267, 23996, 24142, 25120, 25171, 25596, 25597, 25850, 25855, 25921, 26734, 30071, 31678, 31685, 32659], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 12089, 21709, 28270, 28552, 31675], [x ^ 3 + y ^ 3, 7209], [x ^ 3 * y + x ^ 4, 2279, 8039, 10226, 18877, 19156, 21890, 26174, 31837], [x ^ 3 * y + y ^ 4, 26730, 30051], [x ^ 3 * y ^ 2 + x ^ 4 * y, 12899], [((x * y ^ 4 + x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - 3 * x ^ 4 * y, 18631], [(x * y + x ^ 2) - y ^ 2, 11522], [(x * y ^ 2 + x ^ 2 * y) - x ^ 3, 19638], [(x * y ^ 2 + x ^ 2 * y) - y ^ 3, 12291], [(x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y, 31270], [(x * y ^ 3 + x ^ 2 * y ^ 2) - y ^ 4, 17581, 25382, 30784], [((x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 3908, 24158], [((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 4 * y) - y ^ 5, 32404], [((x * y ^ 2 + x ^ 2 * y) - x ^ 3) + y ^ 3, 18680], [x * y + x ^ 2 + y ^ 2, 16122, 18674, 19658], [x * y ^ 2 + x ^ 2 * y + x ^ 3, 16939, 19610, 19665, 25417], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 11749, 12294, 16120, 19327, 19661, 23987, 31922], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 19531, 32654], [x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 6409, 26004, 32403], [x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 19307], [x * y ^ 2 + x ^ 2 * y + x ^ 3 + y ^ 3, 3817], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 32663], [x ^ -1 * y ^ 3 + x * y + 2 * y ^ 2, 11774, 11777, 11802], [x + 2y, 3863], [x * y + 2 * y ^ 2, 6165, 12489], [x * y ^ 2 + 2 * x ^ 2 * y, 5764, 18307, 32408], [x * y ^ 2 + 2 * y ^ 3, 5753, 15905], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 12728, 32457], [x * y ^ 3 + 2 * x ^ 3 * y, 18633], [x * y ^ 3 + 2 * y ^ 4, 19197], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3, 6196], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 2026], [x ^ 3 * y + 2 * x ^ 4, 19136], [(x * y ^ 2 + 2 * x ^ 2 * y) - y ^ 3, 12485], [x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 5204, 15795, 15937, 19624], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 3808, 3888, 3889, 4293, 4294, 5042, 5438, 5441, 18954, 18955, 22457, 24138, 24139, 25124], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 6400, 25111, 26041], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 5609, 13871, 25049], [x ^ -1 * y ^ 3 + 2 * x * y + 2 * y ^ 2, 11748], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 12494, 26008], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 32440], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 25414], [x ^ -1 * y ^ 4 + 3 * x * y ^ 2 + x ^ 2 * y + 3 * y ^ 3, 11745], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 5285, 29666], [x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, 19279], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y, 25117], [x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + x ^ 4, 19615], [x ^ -1 * y ^ 4 + 4 * x * y ^ 2 + x ^ 2 * y + 3 * y ^ 3, 11746], [x ^ 2 * y ^ 3 + 4 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 25114], [(x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 25354], [(x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2) - y ^ 5, 26005], [2y, 6246, 11103, 16484], [2 * x * y, 5788, 6200, 19608], [2 * x * y ^ 2, 1704, 1718, 12491, 25399], [2 * x * y ^ 3, 12241], [2 * y ^ 2, 6283, 12237, 15907, 15922, 19227], [2 * x ^ 2 * y, 15450, 15914, 19133, 19581], [2 * x ^ 2 * y ^ 2, 6173, 12244], [2 * y ^ 3, 19199, 19226], [2 * x ^ 3 * y, 15403], [((2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 15880], [((2 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + 2 * y ^ 5, 6160], [2 * x ^ 2 * y - 2 * y ^ 3, 5780], [((2 * x * y ^ 3 - 2 * x ^ 3 * y) - x ^ 4) + y ^ 4, 24057], [(2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + x ^ 4 + 2 * y ^ 4, 12474], [2 * x * y ^ 2 - x ^ 2 * y, 5768], [2 * x * y ^ 2 - y ^ 3, 1711, 5761], [2 * x ^ 2 * y ^ 3 - x ^ 4 * y, 6156], [(2 * x * y ^ 2 - x ^ 2 * y) - x ^ 3, 5754], [(2 * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 25353], [((2 * x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) + 2 * y ^ 4, 12242], [(2 * x * y ^ 2 - x ^ 2 * y) + y ^ 3, 12268], [(2 * x * y ^ 2 - x ^ 3) + y ^ 3, 18671], [(2 * x * y ^ 3 - x ^ 3 * y) + y ^ 4, 25435, 25438], [2 * x * y + x ^ 2, 6295], [2 * x * y + y ^ 2, 6210, 11134, 12723, 19626, 26049, 32448], [2 * x * y ^ 2 + x ^ 2 * y, 6214, 18310, 18660, 18875, 21688, 25129, 25404], [2 * x * y ^ 2 + y ^ 3, 6206, 12481, 18694, 25436, 25463, 31305], [2 * x * y ^ 3 + x ^ 2 * y ^ 2, 11830, 18687, 29812], [2 * x * y ^ 3 + y ^ 4, 11827, 29809], [2 * x ^ 2 * y + x ^ 3, 18471, 19148], [2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 28573], [2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 2029], [(2 * x * y ^ 3 + x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 15401], [(2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 19541], [(2 * x * y ^ 2 + x ^ 2 * y) - x ^ 3, 18679], [(2 * x * y ^ 2 + x ^ 2 * y) - y ^ 3, 12484], [(2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y, 15406, 19537], [(2 * x * y ^ 3 + x ^ 2 * y ^ 2) - y ^ 4, 18659], [(2 * x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 12251], [(2 * x ^ 2 * y + x ^ 3) - y ^ 3, 23249], [(((2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4) + y ^ 4, 24061], [2 * x * y + x ^ 2 + y ^ 2, 5195, 5200, 18684, 22295, 23536, 26073, 32472], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 3823, 3989, 5762, 6220, 10774, 11785, 24118, 30460], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 5836, 6415, 17419, 24058, 26033, 31925, 32432], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 18873], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 6217], [2 * x * y + 2 * y ^ 2, 19128, 22529, 22534, 30485], [2 * x * y ^ 2 + 2 * x ^ 2 * y, 5767, 12512, 16945, 19118, 19130, 21634], [2 * x * y ^ 2 + 2 * y ^ 3, 5861, 6197, 6205, 6207, 12476, 12722, 17444], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 17014], [2 * x ^ 2 * y + 2 * x ^ 3, 19154], [2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 15896, 16949, 25127, 25600], [((2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3) - 5 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 18634], [((2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 19116], [2 * x * y + 2 * x ^ 2 + y ^ 2, 19644], [2 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 10773, 19654], [2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 31673], [2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 31671], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 18644], [2 * x * y ^ 2 + 3 * x ^ 2 * y, 19123], [(2 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2) - y ^ 4, 21631], [((2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 18630], [((2 * x * y ^ 2 + 3 * x ^ 2 * y) - x ^ 3) + y ^ 3, 19639], [2 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y, 26062, 31927, 32461], [2 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 32177], [2 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 5430], [((2 * x * y ^ 4 + 5 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 25357], [(3 * x * y ^ 3 - 4 * x ^ 3 * y) - x ^ 4, 19120], [3 * x ^ 2 * y ^ 2 - y ^ 4, 32429], [3 * x ^ 2 * y + x ^ 3, 6275], [3 * x ^ 2 * y ^ 2 + x ^ 3 * y, 6159], [3 * x * y + x ^ 2 + y ^ 2, 15414, 25439], [3 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 30457], [3 * x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 5833, 11826, 17416, 29808], [3 * x * y ^ 2 + 2 * x ^ 2 * y, 12506], [3 * x * y ^ 2 + 2 * y ^ 3, 6199], [3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 11113], [3 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + y ^ 4, 18691, 31930], [3 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + y ^ 5, 25843], [3 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 18632], [3 * x * y ^ 2 + 3 * x ^ 2 * y, 12477], [3 * x ^ 2 * y + 3 * x ^ 3, 19119], [3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3, 6276], [(3 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2) - x ^ 4, 19613], [3 * x * y ^ 4 + 5 * x ^ 2 * y ^ 3 + 5 * x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, 25840], [(4 * x * y ^ 3 - 2 * x ^ 3 * y) + y ^ 4, 25434], [((4 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) + 2 * y ^ 4, 12247], [4 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 6161], [4 * x * y ^ 2 + x ^ 2 * y + 2 * y ^ 3, 30456], [4 * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * y ^ 4, 5832, 17415], [4 * x * y ^ 2 + x ^ 2 * y + 3 * y ^ 3, 6187], [((4 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 15877], [4 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 6195], [5 * x * y ^ 2 + x ^ 2 * y + 3 * y ^ 3, 6186], [5 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + y ^ 4, 6158], [((5 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + 2 * y ^ 5, 6157], [5 * x ^ 2 * y ^ 2 + 5 * x ^ 3 * y + x ^ 4, 6257], [((((5 * x * y ^ 4 + 6 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y) + x ^ 5) - y ^ 5, 26001], [((5 * x * y ^ 3 + 7 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y) - x ^ 4) + y ^ 4, 19618], [((6 * x * y ^ 3 - 2 * x ^ 3 * y) + x ^ 4) - y ^ 4, 21627], [((6 * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) + x ^ 5, 28512], [((9 * x ^ 2 * y ^ 3 - 3 * x ^ 4 * y) + x ^ 5) - 2 * y ^ 5, 32400]]) * x ^ 0 * y ^ 0
            end
        rep = [[f1, r], [f1, p], [f5, p, r, E(3, 2)], [f5, r, p, E(3, 2)], [f5, p, r, E(3)], [f5, r, p, E(3)], [f7, p, r], [f7, r, p], [f10, r, p, E(3, 2)], [f10, p, r, E(3, 2)], [f10, r, p, E(3)], [f10, p, r, E(3)], [f13, r, p], [f13, p, r], [f15, r, p], [f15, p, r], [f17, r, p], [f17, p, r], [f19, r, p], [f19, p, r], [f21, r, p], [f21, p, r], [f23, r, p, E(3)], [f23, p, r, E(3)], [f23, r, p, E(3, 2)], [f23, p, r, E(3, 2)], [f27, r, p, E(3)], [f27, p, r, E(3)], [f27, r, p, E(3, 2)], [f27, p, r, E(3, 2)], [f31, r, p, E(3)], [f31, p, r, E(3)], [f31, r, p, E(3, 2)], [f31, p, r, E(3, 2)], [f35, r, p], [f35, p, r], [f37, r, p, -1], [f37, r, p, 1], [f39, p, r], [f39, r, p]]
        return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])]) + 0 * Product(para[1])
    end)
chevieset(:G33, :Representation, (i->begin
            (chevieget(:G33, :HeckeRepresentation))(map((i->begin
                            [1, -1]
                        end), 1:5), [], i)
        end))
chevieset(:G33, :UnipotentCharacters, function ()
        local J
        J = E(3)
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:5, :rank => 5, :ST => 33), :levi => [], :parameterExponents => [1, 1, 1, 1, 1], :charNumbers => 1:40, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1, 5], :rank => 2, :ST => 4), :levi => 2:4, :parameterExponents => [3, 3], :charNumbers => [41, 58, 57, 59, 43, 44, 51], :eigenvalue => J, :cuspidalName => "G_{3,3,3}[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1, 5], :rank => 2, :ST => 4), :levi => 2:4, :parameterExponents => [[3, 3, 0], [3, 3, 0]], :charNumbers => [46, 45, 64, 55, 56, 47, 54], :eigenvalue => J ^ 2, :cuspidalName => "G_{3,3,3}[\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [4], :rank => 1, :p => 6, :q => 1), :levi => [1, 2, 3, 209], :parameterExponents => [[5, 4, 1, 0, 1, 4]], :charNumbers => [42, 49, 60, 63, 61, 48], :eigenvalue => -1, :cuspidalName => "D_4"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:5, :parameterExponents => [], :charNumbers => [52], :eigenvalue => E(4), :cuspidalName => "G_{33}[i]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:5, :parameterExponents => [], :charNumbers => [53], :eigenvalue => -(E(4)), :cuspidalName => "G_{33}[-i]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:5, :parameterExponents => [], :charNumbers => [62], :eigenvalue => -J, :cuspidalName => "G_{33}[-\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:5, :parameterExponents => [], :charNumbers => [50], :eigenvalue => -(J ^ 2), :cuspidalName => "G_{33}[-\\zeta_3^2]")], :families => [Family("C1", [1]), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [4, 6, 41], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => -1)), Family("C1", [15]), Family("C2", [22, 8, 19, 42], Dict{Symbol, Any}(:ennola => -2)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(6)), [25, 30, 17, 28, 23, 45, 48, 43, 50, 9, 47, 44, 11, 49, 46], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1], :ennola => -13)), Family("C1", [39]), Family("C1", [36], Dict{Symbol, Any}(:ennola => -1)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [34, 32, 51], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => -1)), Family("C'\"2", [37, 38, 52, 53], Dict{Symbol, Any}(:ennola => -3)), Family("C1", [14], Dict{Symbol, Any}(:ennola => -1)), Family(((CHEVIE[:families])[:X])(3), [33, 31, 54], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1)), Family("C1", [40], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [35]), Family("C1", [13]), Family(((CHEVIE[:families])[:X])(6), [26, 29, 18, 27, 24, 57, 60, 55, 62, 10, 59, 56, 12, 61, 58], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1], :ennola => 13)), Family("C2", [21, 7, 20, 63], Dict{Symbol, Any}(:ennola => 2)), Family("C1", [16], Dict{Symbol, Any}(:ennola => -1)), Family(((CHEVIE[:families])[:X])(3), [3, 5, 64], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1)), Family("C1", [2], Dict{Symbol, Any}(:ennola => -1))], :a => [0, 45, 28, 1, 28, 1, 18, 3, 4, 13, 4, 13, 12, 9, 2, 23, 4, 13, 3, 18, 18, 3, 4, 13, 4, 13, 13, 4, 13, 4, 10, 7, 10, 7, 10, 7, 8, 8, 6, 11, 1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 7, 8, 8, 10, 13, 13, 13, 13, 13, 13, 13, 13, 18, 28], :A => [0, 45, 44, 17, 44, 17, 42, 27, 32, 41, 32, 41, 36, 33, 22, 43, 32, 41, 27, 42, 42, 27, 32, 41, 32, 41, 41, 32, 41, 32, 38, 35, 38, 35, 38, 35, 37, 37, 34, 39, 17, 27, 32, 32, 32, 32, 32, 32, 32, 32, 35, 37, 37, 38, 41, 41, 41, 41, 41, 41, 41, 41, 42, 44], :curtis => [2, 1, 6, 5, 4, 3, 8, 7, 12, 11, 10, 9, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 26, 25, 24, 23, 30, 29, 28, 27, 34, 33, 32, 31, 36, 35, 38, 37, 40, 39, -64, 63, -56, -55, -58, -57, -59, 61, 60, -62, -54, -53, -52, -51, -44, -43, -46, -45, -47, 49, 48, -50, 42, -41])
    end)
chevieset(:G33, :Invariants, [function (x, y, z, t, u)
            local a1, a4
            a1 = -((y ^ 3 + u ^ 3 + t ^ 3 + x ^ 3))
            a4 = y * u * t * x
            return (z ^ 4 - 8 * a1 * z) + 48a4
        end, function (x, y, z, t, u)
            local a1, a2, a4
            a1 = -((y ^ 3 + u ^ 3 + t ^ 3 + x ^ 3))
            a2 = (y * u) ^ 3 + (y * t) ^ 3 + (y * x) ^ 3 + (u * t) ^ 3 + (u * x) ^ 3 + (t * x) ^ 3
            a4 = y * u * t * x
            return ((z ^ 6 + 20 * a1 * z ^ 3 + 96a2) - 8 * a1 ^ 2) + 360 * a4 * z ^ 2
        end, function (x, y, z, t, u)
            local a1, a2, a3, a4
            a1 = -((y ^ 3 + u ^ 3 + t ^ 3 + x ^ 3))
            a2 = (y * u) ^ 3 + (y * t) ^ 3 + (y * x) ^ 3 + (u * t) ^ 3 + (u * x) ^ 3 + (t * x) ^ 3
            a3 = -(((y * u * t) ^ 3 + (u * t * x) ^ 3 + (y * t * x) ^ 3 + (y * u * x) ^ 3))
            a4 = y * u * t * x
            return -(z ^ 4) * a2 + (9a3 - a1 * a2) * z + a4 * (((z ^ 6 - a1 * z ^ 3) + 6a2) - 2 * a1 ^ 2) + 9 * a4 ^ 2 * z ^ 2
        end, function (x, y, z, t, u)
            local a1, a2, a3, a4
            a1 = -((y ^ 3 + u ^ 3 + t ^ 3 + x ^ 3))
            a2 = (y * u) ^ 3 + (y * t) ^ 3 + (y * x) ^ 3 + (u * t) ^ 3 + (u * x) ^ 3 + (t * x) ^ 3
            a3 = -(((y * u * t) ^ 3 + (u * t * x) ^ 3 + (y * t * x) ^ 3 + (y * u * x) ^ 3))
            a4 = y * u * t * x
            return ((((5 * a2 * z ^ 6 + (99a3 + a1 * a2) * z ^ 3 + 216 * a4 ^ 3) - 36 * a1 * a3) + 24 * a2 ^ 2) - 4 * a1 ^ 2 * a2) + a4 * (3 * z ^ 8 + 33 * a1 * z ^ 5 + (18a2 + 30 * a1 ^ 2) * z ^ 2) + a4 ^ 2 * (243 * z ^ 4 + 108 * a1 * z)
        end, function (x, y, z, t, u)
            local a1, a2, a3, a4
            a1 = -((y ^ 3 + u ^ 3 + t ^ 3 + x ^ 3))
            a2 = (y * u) ^ 3 + (y * t) ^ 3 + (y * x) ^ 3 + (u * t) ^ 3 + (u * x) ^ 3 + (t * x) ^ 3
            a3 = -(((y * u * t) ^ 3 + (u * t * x) ^ 3 + (y * t * x) ^ 3 + (y * u * x) ^ 3))
            a4 = y * u * t * x
            return 4 * a3 * z ^ 9 + ((54 * a4 ^ 3 + 12 * a1 * a3) - a2 ^ 2) * z ^ 6 + (((162 * a1 * a4 ^ 3 - 18 * a2 * a3) + 12 * a1 ^ 2 * a3) - 2 * a1 * a2 ^ 2) * z ^ 3 + (((27 * a3 ^ 2 - 18 * a1 * a2 * a3) + 4 * a1 ^ 3 * a3 + 4 * a2 ^ 3) - a1 ^ 2 * a2 ^ 2) + a4 * (6 * a2 * z ^ 8 + (54a3 + 12 * a1 * a2) * z ^ 5 + (((243 * a4 ^ 3 + 54 * a1 * a3) - 36 * a2 ^ 2) + 6 * a1 ^ 2 * a2) * z ^ 2) + a4 ^ 2 * (3 * z ^ 10 + 18 * a1 * z ^ 7 + (54a2 + 27 * a1 ^ 2) * z ^ 4 + ((162a3 - 54 * a1 * a2) + 12 * a1 ^ 3) * z)
        end])
chevieset(:G33, :BasicDerivations, function ()
        return function (x, y, z, t, u)
                return [[4x, 6 * y * z, 10z - 1 // 96 * x * y, 12t - 1 // 32 * y ^ 2, 18u - 1 // 32 * t * y], [6y, -5184u + 9 * x ^ 2 * z, 6t - 1 // 64 * x ^ 3, 63 * x * z - 3 // 64 * x ^ 2 * y, -3 // 64 * t * x ^ 2 + 180 * z ^ 2], [10z, 6 * t * z - 9 * u * x, -1 // 384 * t * x + 3 // 128 * y * z, (9 // 2 * u - 1 // 128 * t * y) + 9 // 128 * x ^ 2 * z, (3 // 64 * u * y + 9 // 32 * x * z ^ 2) - 1 // 32 * t ^ 2], [12t, -27 * u * y + 63 * x * z ^ 2, (9 // 2 * u + 3 // 128 * t * y) - 5 // 128 * x ^ 2 * z, -15 // 128 * x * y * z + 9 // 128 * t * x ^ 2 + 90 * z ^ 2, -21 // 64 * t * x * z + 9 // 64 * u * x ^ 2 + 27 // 32 * y * z ^ 2], [18u, -27 * t * u + 180 * z ^ 3, 3 // 64 * u * y - 1 // 32 * x * z ^ 2, 9 // 64 * u * x ^ 2 - 3 // 32 * y * z ^ 2, 45 // 64 * u * x * z - 3 // 8 * t * z ^ 2]]
            end
    end)
chevieset(:G33, :Discriminant, function ()
        return function (x, y, z, t, u)
                return (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((243302400 * t * u * x * y * z ^ 5 - 483072 * t * u * x ^ 2 * y ^ 2 * z ^ 4) + 144 * t * u * x ^ 3 * y ^ 3 * z ^ 3) - 11520 * u * x * y ^ 3 * z ^ 5) - 108 * t * x * y ^ 4 * z ^ 5) - 72 * t * u * y ^ 5 * z ^ 3) - 14592 * t * u * x ^ 5 * z ^ 4) - 47185920000 * t * u * z ^ 6) - 72 * t * u * x ^ 6 * y * z ^ 3) - 737280000 * x * y * z ^ 8) - 34560 * t * u ^ 2 * x * y ^ 3 * z ^ 2) - 6635520 * t * u ^ 2 * y ^ 2 * z ^ 3) - 24 * t * u ^ 2 * x ^ 2 * y ^ 4 * z) + 57360384 * t * u ^ 2 * x ^ 3 * z ^ 3) - 186624 * t * u ^ 2 * x ^ 4 * y * z ^ 2) + 27 * u * x ^ 2 * y ^ 4 * z ^ 4 + 48 * t * u ^ 2 * x ^ 5 * y ^ 2 * z + 24576000 * u * y ^ 2 * z ^ 6 + 270336000 * t * x ^ 2 * z ^ 7) - 24 * t * u ^ 2 * x ^ 8 * z) - 3822059520 * t * u ^ 3 * x * z ^ 2) - 875520 * t * x ^ 3 * y * z ^ 6) + 2654208 * t * u ^ 3 * x ^ 2 * y * z + 4608 * t * u ^ 3 * y ^ 4) - 4608 * t * u ^ 3 * x ^ 6) - 230400 * t * y ^ 3 * z ^ 6) - 57753600 * u * x ^ 3 * z ^ 6) + 254803968 * t * u ^ 4 * y + 177408 * u * x ^ 4 * y * z ^ 5 + 216 * t * x ^ 4 * y ^ 2 * z ^ 5) - 54 * u * x ^ 5 * y ^ 2 * z ^ 4) - 108 * t * x ^ 7 * z ^ 5) + 27 * u * x ^ 8 * z ^ 4 + 30 * t ^ 2 * u * x * y ^ 4 * z ^ 2) - 65617920 * t ^ 2 * u * x ^ 2 * z ^ 4) + 107520 * t ^ 2 * x * y ^ 2 * z ^ 5 + 254720 * t ^ 2 * u * x ^ 3 * y * z ^ 3 + 77056 * t ^ 2 * u * y ^ 3 * z ^ 3) - 60 * t ^ 2 * u * x ^ 4 * y ^ 2 * z ^ 2) + 21233664000 * u ^ 2 * x * z ^ 5 + 36 * u ^ 2 * x * y ^ 5 * z ^ 2 + 65536000 * t ^ 2 * y * z ^ 6 + 30 * t ^ 2 * u * x ^ 7 * z ^ 2) - 2654208 * t ^ 2 * u ^ 2 * x * y * z ^ 2) - 128286720 * u ^ 2 * x ^ 2 * y * z ^ 4) + 48384 * t ^ 2 * u ^ 2 * x ^ 2 * y ^ 2 * z + 5662310400 * t ^ 2 * u ^ 2 * z ^ 3) - 8 * t ^ 2 * u ^ 2 * x ^ 3 * y ^ 3) + 4 * t ^ 2 * u ^ 2 * y ^ 5 + 25344 * t ^ 2 * u ^ 2 * x ^ 5 * z + 4 * t ^ 2 * u ^ 2 * x ^ 6 * y + 1382400 * x ^ 2 * y ^ 2 * z ^ 7) - 1105920 * t ^ 2 * u ^ 3 * y ^ 2) + 231168 * u ^ 2 * x ^ 3 * y ^ 2 * z ^ 3 + 1548288 * t ^ 2 * u ^ 3 * x ^ 3) - 1536 * u ^ 2 * y ^ 4 * z ^ 3) - 72 * u ^ 2 * x ^ 4 * y ^ 3 * z ^ 2) + 113664 * t ^ 2 * x ^ 4 * z ^ 5) - 8448 * u ^ 2 * x ^ 6 * z ^ 3) + 36 * u ^ 2 * x ^ 7 * y * z ^ 2) - 29952 * t ^ 3 * u * x * y ^ 2 * z ^ 2) - 21626880 * t ^ 3 * u * y * z ^ 3) + 17915904 * u ^ 3 * x * y ^ 2 * z ^ 2) - 2123366400 * u ^ 3 * y * z ^ 3) - 31488 * t ^ 3 * u * x ^ 4 * z ^ 2) - 39321600 * t ^ 3 * x * z ^ 5) + 24576 * t ^ 3 * x ^ 2 * y * z ^ 4) - 7077888 * t ^ 3 * u ^ 2 * x ^ 2 * z) - 4352 * t ^ 3 * u ^ 2 * y ^ 3) - 3840 * t ^ 3 * u ^ 2 * x ^ 3 * y) - 27648 * u ^ 3 * x ^ 2 * y ^ 3 * z) - 113246208 * t ^ 3 * u ^ 3) - 8 * t ^ 3 * x ^ 3 * y ^ 2 * z ^ 3) + 12 * u ^ 3 * x ^ 3 * y ^ 4) - 432 * x ^ 3 * y ^ 3 * z ^ 6) - 8626176 * u ^ 3 * x ^ 4 * z ^ 2) + 4 * t ^ 3 * y ^ 4 * z ^ 3 + 27648 * u ^ 3 * x ^ 5 * y * z) - 4 * u ^ 3 * y ^ 6) - 12 * u ^ 3 * x ^ 6 * y ^ 2) + 4 * t ^ 3 * x ^ 6 * z ^ 3 + 4 * u ^ 3 * x ^ 9 + 10616832 * t ^ 4 * u * x * z ^ 2) - 6144 * t ^ 4 * u * x ^ 2 * y * z) + 2 * t ^ 4 * u * x ^ 3 * y ^ 2) - t ^ 4 * u * y ^ 4) - t ^ 4 * u * x ^ 6) + 1179648 * t ^ 4 * u ^ 2 * y + 764411904 * u ^ 4 * x ^ 2 * z) - 4096 * t ^ 4 * y ^ 2 * z ^ 3) - 442368 * u ^ 4 * y ^ 3) - 1327104 * u ^ 4 * x ^ 3 * y) - 4096 * t ^ 4 * x ^ 3 * z ^ 3) - 12230590464 * u ^ 5) + 1024 * t ^ 5 * u * y ^ 2 + 1024 * t ^ 5 * u * x ^ 3 + 1048576 * t ^ 5 * z ^ 3 + 216 * y ^ 5 * z ^ 6) - 55296 * x ^ 5 * z ^ 7) - 262144 * t ^ 6 * u) + 216 * x ^ 6 * y * z ^ 6 + 104857600000 * z ^ 9
            end
    end)
chevieset(:G34, :PrintDiagram, function (indices, title)
        local s
        print(title, " ")
        s = pad("", length(title) - 5)
        print(s, "  ", indices[3], "\n       /^\\\n", s, indices[1], "---", indices[2], "---", indices[4], "---", indices[5], "---", indices[6], " ", IntListToString(indices[[4, 2, 3, 4, 2, 3]]), "==", IntListToString(indices[[3, 4, 2, 3, 4, 2]]), "\n")
    end)
chevieset(:G34, :BraidRelations, [[[1, 2, 1], [2, 1, 2]], [[3, 2, 3], [2, 3, 2]], [[4, 2, 4], [2, 4, 2]], [[4, 3, 4], [3, 4, 3]], [[4, 5, 4], [5, 4, 5]], [[1, 3], [3, 1]], [[1, 4], [4, 1]], [[1, 5], [5, 1]], [[2, 5], [5, 2]], [[3, 5], [5, 3]], [[5, 6, 5], [6, 5, 6]], [[1, 6], [6, 1]], [[2, 6], [6, 2]], [[3, 6], [6, 3]], [[4, 6], [6, 4]], [[4, 2, 3, 4, 2, 3], [3, 4, 2, 3, 4, 2]]])
chevieset(:G34, :GeneratingRoots, [[ER(-3), -(ER(-3)), 0, 0, 0, 0], [0, ER(-3), 0, 0, 0, -(ER(-3))], [0, 0, 0, 0, -(ER(-3)), ER(-3)], [0, 0, 0, 0, (3 + ER(-3)) // 2, (3 - ER(-3)) // 2], [-1, -1, -(E(3)), -(E(3, 2)), -1, -1], [0, 0, (-3 + ER(-3)) // 2, (-3 - ER(-3)) // 2, 0, 0]])
chevieset(:G34, :EigenvaluesGeneratingReflections, [1 // 2, 1 // 2, 1 // 2, 1 // 2, 1 // 2, 1 // 2])
chevieset(:G34, :Size, 39191040)
chevieset(:G34, :ReflectionDegrees, [6, 12, 18, 24, 30, 42])
chevieset(:G34, :NrConjugacyClasses, 169)
chevieset(:G34, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3]], [1:3, [1, 3, 4], [1, 3, 5]], [1:4, 2:4, [1, 2, 3, 348], [1, 3, 5, 6], [1, 2, 3, 5], [2, 3, 4, 6], [2, 4, 5, 6], [1, 2, 5, 6]], [1:5, [1, 3, 4, 5, 6], [1, 2, 4, 5, 107], [1, 2, 3, 4, 6], [1, 2, 3, 5, 6], [1, 2, 4, 5, 6], [1, 2, 3, 481, 180], 2:6], [1:6]]
        return t[s + 1]
    end)
chevieset(:G34, :ClassNames, [".", "1", "21", "31", "521", "321", "342", "531", "432", "6432", "6521", "5421", "3421", "4321", "5321", "6342", "6431", "65431", "64321", "65342", "54321", "65432", "53421", "65321", "65421", "63421", "342342", "c", "532421", "423121", "ccccc", "432432", "6532421", "5423121", "6342342", "6345242", "6432432", "6452432", "6423121", "3423421", "6542321", "4324321", "5423421", "4524321", "65432432", "65342342", "1245zzzzz", "1245z", "63423421", "63452421", "53423421", "64324321", "54324321", "65423121", "64534321", "13456z", "4534321zz", "453423121", "5645432432", "cc", "4523423121", "3245324121", "cccc", "5645342342", "4524123121", "52431243z", "5432412zzzz", "13456zz", "56454324321", "4534321z", "12356zzz", "56453423421", "5432412z", "423124123121", "ccc", "1243zzzzz", "12356zzzzz", "4321cc", "542135421354213", "1243z", "34523412zz", "1235zz", "54213zz", "54321z", "1326cccc", "1245zz", "345243124532412zz", "z", "1234z", "31z", "5342312432z", "321z", "531z", "6521z", "23452412345241", "6342z", "6431z", "64321z", "342342z", "432432z", "3423421z", "6342342z", "6432432z", "3245124324524", "63423421z", "65342342z", "5645342342z", "1z", "423124123121z", "234z", "12z", "54321zzzz", "156z", "542135421354213z", "34523412zzz", "54321zz", "1245zzz", "34523412z", "cccccc", "1235z", "345243124532412", "zz", "5342312432zz", "31zz", "321zz", "531zz", "6432zz", "64321zz", "5432412zz", "342342zz", "6342342zz", "3423421zz", "65342342zz", "1zz", "12zz", "156zz", "542135421354213zz", "1243zz", "1245zzzz", "345243124532412z", "zzz", "1542135421354213542135421354213542135421354213", "5342312432zzz", "321zzz", "32451243245124", "5432412zzz", "342342zzz", "512431245431243", "3423421zzz", "65342342zzz", "542135421354213542135421354213542135421354213", "12zzz", "53242312454231241", "1243zzz", "zzzz", "5342312432zzzz", "31zzzz", "12356z", "1zzzz", "12zzzz", "53242312454231241z", "123zzzz", "zzzzz", "5342312432zzzzz", "31zzzzz", "1zzzzz", "12zzzzz", "53242312454231241zz", "123zzzzz"])
chevieset(:G34, :WordsClassRepresentatives, map((x->begin
                Replace(x, ".", [], "1", [1], "2", [2], "3", [3], "4", [4], "5", [5], "6", [6], "z", "ccccccc", "c", [6, 5, 3, 4, 2, 1])
            end), chevieget(:G34, :ClassNames)))
chevieset(:G34, :PowerMaps, [nothing, [1, 1, 3, 1, 3, 4, 27, 1, 32, 32, 11, 12, 14, 13, 4, 27, 3, 12, 13, 64, 14, 59, 13, 17, 11, 14, 32, 60, 3, 74, 63, 27, 65, 12, 32, 45, 27, 46, 74, 74, 11, 74, 95, 145, 46, 45, 139, 86, 74, 164, 95, 74, 145, 78, 91, 86, 139, 74, 160, 63, 74, 74, 60, 135, 142, 96, 96, 139, 156, 86, 17, 123, 96, 74, 119, 133, 64, 78, 27, 46, 96, 157, 133, 138, 143, 139, 90, 122, 138, 122, 165, 124, 122, 11, 27, 130, 135, 46, 27, 130, 74, 27, 130, 74, 74, 14, 160, 122, 74, 130, 135, 138, 135, 130, 95, 45, 12, 145, 119, 124, 142, 155, 90, 155, 157, 155, 130, 133, 95, 130, 130, 74, 138, 155, 160, 160, 32, 133, 86, 165, 1, 1, 142, 4, 32, 145, 32, 32, 74, 45, 1, 3, 3, 13, 122, 165, 122, 59, 122, 135, 135, 124, 155, 90, 155, 155, 160, 160, 157], [1, 2, 1, 4, 2, 6, 2, 8, 2, 4, 1, 12, 27, 32, 15, 4, 4, 18, 37, 6, 148, 6, 79, 6, 8, 35, 1, 75, 142, 4, 75, 1, 33, 34, 2, 35, 2, 37, 8, 2, 8, 2, 121, 121, 32, 27, 117, 117, 4, 85, 65, 4, 65, 100, 85, 34, 34, 151, 4, 119, 142, 142, 119, 4, 65, 143, 121, 18, 33, 18, 144, 33, 121, 1, 75, 99, 144, 130, 151, 99, 65, 15, 79, 35, 85, 12, 121, 141, 147, 142, 143, 144, 8, 141, 142, 142, 142, 79, 141, 141, 151, 151, 151, 8, 142, 147, 142, 151, 141, 151, 141, 148, 151, 2, 143, 148, 117, 143, 119, 15, 121, 1, 65, 4, 6, 8, 4, 37, 121, 1, 2, 2, 27, 2, 1, 2, 151, 32, 12, 121, 141, 142, 143, 144, 142, 121, 141, 151, 151, 147, 151, 141, 151, 99, 1, 65, 4, 144, 2, 1, 2, 6, 141, 143, 142, 151, 141, 151, 144], nothing, [1, 2, 3, 4, 5, 6, 9, 8, 7, 16, 11, 1, 14, 13, 15, 10, 17, 2, 26, 22, 23, 20, 21, 24, 25, 19, 32, 31, 29, 30, 28, 27, 33, 151, 37, 38, 35, 36, 39, 42, 41, 40, 44, 43, 46, 45, 88, 163, 52, 55, 53, 49, 51, 54, 50, 166, 108, 58, 64, 63, 62, 61, 60, 59, 65, 66, 73, 159, 72, 134, 71, 69, 67, 74, 75, 89, 158, 78, 148, 150, 81, 120, 112, 128, 85, 155, 140, 163, 76, 165, 164, 169, 126, 94, 145, 96, 107, 116, 147, 100, 149, 137, 110, 104, 105, 154, 97, 166, 109, 103, 167, 83, 168, 131, 118, 98, 141, 115, 119, 82, 121, 155, 156, 157, 162, 93, 127, 84, 146, 130, 114, 132, 138, 159, 160, 161, 102, 133, 122, 87, 141, 142, 143, 144, 95, 129, 99, 79, 101, 80, 151, 152, 153, 106, 122, 123, 124, 77, 134, 135, 136, 125, 88, 91, 90, 108, 111, 113, 92], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 88, 29, 30, 163, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 122, 61, 62, 155, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 141, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 1, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 9, 8, 7, 16, 11, 12, 14, 13, 15, 10, 17, 18, 26, 22, 23, 20, 21, 24, 25, 19, 32, 31, 29, 30, 28, 27, 33, 34, 37, 38, 35, 36, 39, 42, 41, 40, 44, 43, 46, 45, 48, 47, 52, 55, 53, 49, 51, 54, 50, 57, 56, 58, 64, 63, 62, 61, 60, 59, 65, 66, 73, 70, 72, 68, 71, 69, 67, 74, 75, 89, 158, 78, 148, 150, 81, 120, 112, 128, 85, 139, 140, 163, 76, 165, 164, 169, 126, 94, 145, 96, 107, 116, 147, 100, 149, 137, 110, 104, 105, 154, 97, 166, 109, 103, 167, 83, 168, 131, 118, 98, 117, 115, 119, 82, 121, 155, 156, 157, 162, 93, 127, 84, 146, 130, 114, 132, 138, 159, 160, 161, 102, 133, 86, 87, 141, 142, 143, 144, 95, 129, 99, 79, 101, 80, 151, 152, 153, 106, 122, 123, 124, 77, 134, 135, 136, 125, 88, 91, 90, 108, 111, 113, 92], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 9, 8, 7, 16, 11, 12, 14, 13, 15, 10, 17, 18, 26, 22, 23, 20, 21, 24, 25, 19, 32, 31, 29, 30, 28, 27, 33, 34, 37, 38, 35, 36, 39, 42, 41, 40, 44, 43, 46, 45, 48, 47, 52, 55, 53, 49, 51, 54, 50, 57, 56, 58, 64, 63, 62, 61, 60, 59, 65, 66, 73, 70, 72, 68, 71, 69, 67, 74, 75, 89, 158, 78, 148, 150, 81, 120, 112, 128, 85, 139, 140, 163, 76, 165, 164, 169, 126, 94, 145, 96, 107, 116, 147, 100, 149, 137, 110, 104, 105, 154, 97, 166, 109, 103, 167, 83, 168, 131, 118, 98, 117, 115, 119, 82, 121, 155, 156, 157, 162, 93, 127, 84, 146, 130, 114, 132, 138, 159, 160, 161, 102, 133, 86, 87, 141, 142, 143, 144, 95, 129, 99, 79, 101, 80, 151, 152, 153, 106, 122, 123, 124, 77, 134, 135, 136, 125, 88, 91, 90, 108, 111, 113, 92], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 9, 8, 7, 16, 11, 12, 14, 13, 15, 10, 17, 18, 26, 22, 23, 20, 21, 24, 25, 19, 32, 31, 29, 30, 28, 27, 33, 34, 37, 38, 35, 36, 39, 42, 41, 40, 44, 43, 46, 45, 48, 47, 52, 55, 53, 49, 51, 54, 50, 57, 56, 58, 64, 63, 62, 61, 60, 59, 65, 66, 73, 70, 72, 68, 71, 69, 67, 74, 75, 89, 158, 78, 148, 150, 81, 120, 112, 128, 85, 139, 140, 163, 76, 165, 164, 169, 126, 94, 145, 96, 107, 116, 147, 100, 149, 137, 110, 104, 105, 154, 97, 166, 109, 103, 167, 83, 168, 131, 118, 98, 117, 115, 119, 82, 121, 155, 156, 157, 162, 93, 127, 84, 146, 130, 114, 132, 138, 159, 160, 161, 102, 133, 86, 87, 141, 142, 143, 144, 95, 129, 99, 79, 101, 80, 151, 152, 153, 106, 122, 123, 124, 77, 134, 135, 136, 125, 88, 91, 90, 108, 111, 113, 92], nothing, nothing, nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 9, 8, 7, 16, 11, 12, 14, 13, 15, 10, 17, 18, 26, 22, 23, 20, 21, 24, 25, 19, 32, 31, 29, 30, 28, 27, 33, 34, 37, 38, 35, 36, 39, 42, 41, 40, 44, 43, 46, 45, 48, 47, 52, 55, 53, 49, 51, 54, 50, 57, 56, 58, 64, 63, 62, 61, 60, 59, 65, 66, 73, 70, 72, 68, 71, 69, 67, 74, 75, 89, 158, 78, 148, 150, 81, 120, 112, 128, 85, 139, 140, 163, 76, 165, 164, 169, 126, 94, 145, 96, 107, 116, 147, 100, 149, 137, 110, 104, 105, 154, 97, 166, 109, 103, 167, 83, 168, 131, 118, 98, 117, 115, 119, 82, 121, 155, 156, 157, 162, 93, 127, 84, 146, 130, 114, 132, 138, 159, 160, 161, 102, 133, 86, 87, 141, 142, 143, 144, 95, 129, 99, 79, 101, 80, 151, 152, 153, 106, 122, 123, 124, 77, 134, 135, 136, 125, 88, 91, 90, 108, 111, 113, 92], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], nothing, nothing, nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 9, 8, 7, 16, 11, 12, 14, 13, 15, 10, 17, 18, 26, 22, 23, 20, 21, 24, 25, 19, 32, 31, 29, 30, 28, 27, 33, 34, 37, 38, 35, 36, 39, 42, 41, 40, 44, 43, 46, 45, 48, 47, 52, 55, 53, 49, 51, 54, 50, 57, 56, 58, 64, 63, 62, 61, 60, 59, 65, 66, 73, 70, 72, 68, 71, 69, 67, 74, 75, 89, 158, 78, 148, 150, 81, 120, 112, 128, 85, 139, 140, 163, 76, 165, 164, 169, 126, 94, 145, 96, 107, 116, 147, 100, 149, 137, 110, 104, 105, 154, 97, 166, 109, 103, 167, 83, 168, 131, 118, 98, 117, 115, 119, 82, 121, 155, 156, 157, 162, 93, 127, 84, 146, 130, 114, 132, 138, 159, 160, 161, 102, 133, 86, 87, 141, 142, 143, 144, 95, 129, 99, 79, 101, 80, 151, 152, 153, 106, 122, 123, 124, 77, 134, 135, 136, 125, 88, 91, 90, 108, 111, 113, 92]])
chevieset(:G34, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G34, :WordsClassRepresentatives), :classnames => chevieget(:G34, :ClassNames), :classparams => chevieget(:G34, :ClassNames), :orders => [1, 2, 3, 2, 6, 4, 6, 2, 6, 6, 3, 5, 9, 9, 4, 6, 6, 10, 18, 12, 18, 12, 18, 12, 6, 18, 3, 42, 6, 6, 42, 3, 8, 10, 6, 18, 6, 18, 6, 6, 6, 6, 12, 12, 9, 9, 30, 30, 6, 24, 12, 6, 12, 18, 24, 30, 30, 6, 6, 21, 6, 6, 21, 6, 4, 12, 12, 30, 24, 30, 12, 24, 12, 3, 14, 18, 12, 9, 6, 18, 12, 12, 18, 18, 8, 15, 12, 6, 18, 6, 12, 12, 6, 6, 6, 6, 6, 18, 6, 6, 6, 6, 6, 6, 6, 18, 6, 6, 6, 6, 6, 18, 6, 6, 12, 18, 10, 12, 7, 12, 4, 3, 12, 6, 12, 6, 6, 18, 12, 3, 6, 6, 9, 6, 3, 6, 6, 9, 15, 12, 2, 2, 4, 4, 6, 12, 6, 6, 6, 18, 2, 6, 6, 18, 3, 12, 6, 12, 6, 3, 6, 12, 6, 12, 6, 6, 6, 6, 12], :classes => [1, 126, 3360, 2835, 60480, 68040, 5040, 11340, 5040, 45360, 120960, 653184, 120960, 120960, 408240, 45360, 90720, 653184, 362880, 544320, 362880, 544320, 362880, 544320, 1088640, 362880, 560, 933120, 90720, 90720, 933120, 560, 816480, 653184, 5040, 362880, 5040, 362880, 272160, 30240, 1088640, 30240, 272160, 272160, 120960, 120960, 653184, 653184, 90720, 816480, 272160, 90720, 272160, 725760, 816480, 653184, 653184, 30240, 90720, 933120, 90720, 90720, 933120, 90720, 34020, 272160, 272160, 653184, 816480, 653184, 544320, 816480, 272160, 10080, 933120, 120960, 544320, 725760, 5040, 120960, 272160, 408240, 362880, 362880, 816480, 653184, 68040, 1, 120960, 2835, 34020, 68040, 11340, 120960, 45360, 45360, 90720, 362880, 560, 560, 30240, 5040, 5040, 272160, 90720, 120960, 90720, 126, 10080, 5040, 3360, 362880, 60480, 5040, 272160, 362880, 653184, 272160, 933120, 408240, 68040, 1, 34020, 2835, 68040, 11340, 45360, 362880, 272160, 560, 5040, 30240, 120960, 126, 3360, 60480, 5040, 120960, 653184, 68040, 1, 2835, 34020, 68040, 45360, 272160, 560, 5040, 30240, 120960, 126, 3360, 60480, 120960, 1, 34020, 2835, 544320, 126, 3360, 60480, 68040, 1, 34020, 2835, 126, 3360, 60480, 68040]))
chevieset(:G34, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 126], [6, 5], [6, 89], [6, 1], [6, 85], [15, 58], [15, 16], [15, 56], [15, 14], [20, 33, 1], [20, 33, 2], [21, 60], [21, 6], [21, 4], [21, 70], [21, 2], [21, 68], [35, 60], [35, 6], [35, 36], [35, 18], [56, 57], [56, 3], [56, 45], [56, 9], [70, 45, 1], [70, 9, 1], [70, 45, 3], [70, 45, 2], [70, 9, 2], [70, 9, 3], [84, 17], [84, 37], [84, 13], [84, 41], [90, 6], [90, 48], [105, 10], [105, 46], [105, 40], [105, 4], [105, 50], [105, 38], [105, 8, 2], [105, 8, 1], [105, 22], [105, 28], [105, 20], [105, 26], [120, 21, 1], [120, 21, 2], [120, 5], [120, 47], [120, 7], [120, 49], [126, 5], [126, 41], [126, 7], [126, 43], [140, 21], [140, 30], [140, 12], [189, 24], [189, 18], [210, 30], [210, 12], [210, 10], [210, 40], [210, 38], [210, 8], [210, 17], [210, 29], [210, 13], [210, 25], [280, 30, 2], [280, 30, 1], [280, 12, 2], [280, 12, 1], [315, 36], [315, 6], [315, 24], [315, 18], [315, 10], [315, 28], [315, 14], [315, 32], [336, 34], [336, 10], [336, 32], [336, 8], [336, 17], [336, 25], [336, 19], [336, 23], [384, 11], [384, 29], [384, 13], [384, 31], [384, 34], [384, 10], [384, 32], [384, 8], [420, 30], [420, 12], [420, 21], [420, 11], [420, 31], [420, 7], [420, 35], [420, 16], [420, 22], [420, 14], [420, 20], [504, 33], [504, 9], [504, 21], [504, 15], [540, 17], [540, 19], [540, 21, 1], [540, 21, 2], [560, 27], [560, 9], [560, 18, 1], [560, 18, 3], [560, 18, 2], [630, 27], [630, 15], [630, 16], [630, 22], [630, 14], [630, 20], [630, 11], [630, 25], [630, 13], [630, 23], [720, 16], [720, 20], [729, 24], [729, 12], [729, 28], [729, 10], [729, 26], [729, 14], [756, 16], [756, 22], [756, 14], [756, 20], [840, 17], [840, 19], [840, 13, 2], [840, 23, 1], [840, 11], [840, 25], [840, 13, 1], [840, 23, 2], [896, 24], [896, 12], [896, 21], [896, 15], [945, 16], [945, 22], [945, 14], [945, 20], [1260, 17], [1260, 19], [1280, 18], [1280, 15]], :opdam => #= none:37 =# @perm_str("(96,103)(97,102)(98,101)(99,100)(140,144,142)(141,143,145)(158,160)(159,161)"), :extRefl => [1, 5, 10, 11, 7, 4, 2])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:G34, :CycPolSchurElements, [[1, 0, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 12, 12, 14, 15, 18, 21, 24, 30, 42], [1, -126, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 12, 12, 14, 15, 18, 21, 24, 30, 42], [(3 + ER(-3)) // 2, -1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 7, 9, 10, 12, 1 // 12, 7 // 12, 14, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 18, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21, 1 // 30, 7 // 30, 13 // 30, 19 // 30, 5 // 42, 11 // 42, 17 // 42, 23 // 42, 29 // 42, 41 // 42], [(3 - ER(-3)) // 2, -85, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 5, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 7, 9, 10, 12, 5 // 12, 11 // 12, 14, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 18, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21, 11 // 30, 17 // 30, 23 // 30, 29 // 30, 1 // 42, 13 // 42, 19 // 42, 25 // 42, 31 // 42, 37 // 42], [(3 - ER(-3)) // 2, -1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 5, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 7, 9, 10, 12, 5 // 12, 11 // 12, 14, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 18, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21, 11 // 30, 17 // 30, 23 // 30, 29 // 30, 1 // 42, 13 // 42, 19 // 42, 25 // 42, 31 // 42, 37 // 42], [(3 + ER(-3)) // 2, -85, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 7, 9, 10, 12, 1 // 12, 7 // 12, 14, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 18, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21, 1 // 30, 7 // 30, 13 // 30, 19 // 30, 5 // 42, 11 // 42, 17 // 42, 23 // 42, 29 // 42, 41 // 42], [6 * E(3, 2), -46, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 7, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 5 // 18, 11 // 18, 17 // 18, 1 // 42, 13 // 42, 19 // 42, 25 // 42, 31 // 42, 37 // 42], [6 * E(3), -4, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 7, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 1 // 18, 7 // 18, 13 // 18, 5 // 42, 11 // 42, 17 // 42, 23 // 42, 29 // 42, 41 // 42], [6 * E(3), -46, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 7, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 1 // 18, 7 // 18, 13 // 18, 5 // 42, 11 // 42, 17 // 42, 23 // 42, 29 // 42, 41 // 42], [6 * E(3, 2), -4, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 7, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 5 // 18, 11 // 18, 17 // 18, 1 // 42, 13 // 42, 19 // 42, 25 // 42, 31 // 42, 37 // 42], [42, -15, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 1 // 42, 13 // 42, 19 // 42, 25 // 42, 31 // 42, 37 // 42], [42, -15, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 5 // 42, 11 // 42, 17 // 42, 23 // 42, 29 // 42, 41 // 42], [2, -57, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6, 12, 12, 15, 18], [2, -3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6, 12, 12, 15, 18], [(3 + ER(-3)) // 2, -2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 5, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 8, 9, 10, 12, 5 // 12, 11 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 18, 1 // 24, 7 // 24, 13 // 24, 19 // 24, 11 // 30, 17 // 30, 23 // 30, 29 // 30], [(3 - ER(-3)) // 2, -68, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 8, 9, 10, 12, 1 // 12, 7 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 18, 5 // 24, 11 // 24, 17 // 24, 23 // 24, 1 // 30, 7 // 30, 13 // 30, 19 // 30], [(3 - ER(-3)) // 2, -2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 8, 9, 10, 12, 1 // 12, 7 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 18, 5 // 24, 11 // 24, 17 // 24, 23 // 24, 1 // 30, 7 // 30, 13 // 30, 19 // 30], [(3 + ER(-3)) // 2, -68, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 5, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 8, 9, 10, 12, 5 // 12, 11 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 18, 1 // 24, 7 // 24, 13 // 24, 19 // 24, 11 // 30, 17 // 30, 23 // 30, 29 // 30], [2, -57, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 9, 10, 12, 12, 30], [2, -3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 9, 10, 12, 12, 30], [3, -28, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 8], [3, -10, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 8], [2, -57, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 6, 6, 8, 9, 12, 12, 15, 24], [2, -3, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 6, 6, 8, 9, 12, 12, 15, 24], [3, -41, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 5, 6, 6, 6, 6, 6, 6, 10, 12, 12], [3, -5, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 5, 6, 6, 6, 6, 6, 6, 10, 12, 12], [1, -45, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 9, 12, 12, 18], [1, -9, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 9, 12, 12, 18], [-3 * E(3), -41, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 30, 7 // 30, 13 // 30, 19 // 30], [-3 * E(3, 2), -41, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 11 // 30, 17 // 30, 23 // 30, 29 // 30], [-3 * E(3), -5, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 30, 7 // 30, 13 // 30, 19 // 30], [-3 * E(3, 2), -5, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 11 // 30, 17 // 30, 23 // 30, 29 // 30], [-6 * E(3, 2), -7, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 5, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 1 // 18, 7 // 18, 13 // 18, 11 // 30, 17 // 30, 23 // 30, 29 // 30], [-6 * E(3, 2), -31, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 5, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 1 // 18, 7 // 18, 13 // 18, 11 // 30, 17 // 30, 23 // 30, 29 // 30], [-6 * E(3), -7, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 5, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 5 // 18, 11 // 18, 17 // 18, 1 // 30, 7 // 30, 13 // 30, 19 // 30], [-6 * E(3), -31, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 5, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 5 // 18, 11 // 18, 17 // 18, 1 // 30, 7 // 30, 13 // 30, 19 // 30], [3, -4, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 7, 9, 12, 14, 18], [3, -46, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 7, 9, 12, 14, 18], [3, -6, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 8, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 18, 7 // 18, 13 // 18], [-6 * E(3, 2), -46, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 14, 1 // 18, 7 // 18, 13 // 18, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21], [3, -36, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 8, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 18, 11 // 18, 17 // 18], [-6 * E(3), -4, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 14, 5 // 18, 11 // 18, 17 // 18, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21], [-6 * E(3), -46, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 14, 5 // 18, 11 // 18, 17 // 18, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21], [3, -36, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 8, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 18, 7 // 18, 13 // 18], [3, -6, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 8, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 18, 11 // 18, 17 // 18], [-6 * E(3, 2), -4, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 14, 1 // 18, 7 // 18, 13 // 18, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21], [-6, -13, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 30, 7 // 30, 13 // 30, 19 // 30], [-6, -19, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 11 // 30, 17 // 30, 23 // 30, 29 // 30], [-6, -13, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 11 // 30, 17 // 30, 23 // 30, 29 // 30], [-6, -19, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 30, 7 // 30, 13 // 30, 19 // 30], [7, -15, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6], [7, -15, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6], [3 - ER(-3), -4, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 1 // 6, 7, 8, 9, 12, 5 // 12, 11 // 12, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21, 1 // 24, 7 // 24, 13 // 24, 19 // 24], [3 + ER(-3), -46, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 5 // 6, 7, 8, 9, 12, 1 // 12, 7 // 12, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21, 5 // 24, 11 // 24, 17 // 24, 23 // 24], [3 + ER(-3), -4, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 5 // 6, 7, 8, 9, 12, 1 // 12, 7 // 12, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21, 5 // 24, 11 // 24, 17 // 24, 23 // 24], [3 - ER(-3), -46, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 1 // 6, 7, 8, 9, 12, 5 // 12, 11 // 12, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21, 1 // 24, 7 // 24, 13 // 24, 19 // 24], [3, -5, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 9, 10, 12, 18], [3, -41, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 9, 10, 12, 18], [3, -5, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 9, 10, 12, 18], [3, -41, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 9, 10, 12, 18], [2, -18, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 9], [2, -27, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 9], [2, -9, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 9], [6, -19, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 18], [6, -13, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 18], [1, -30, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 12, 12], [1, -12, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 6, 12, 12], [3, -6, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 5 // 18, 11 // 18, 17 // 18, 1 // 24, 7 // 24, 13 // 24, 19 // 24], [3, -36, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 1 // 18, 7 // 18, 13 // 18, 5 // 24, 11 // 24, 17 // 24, 23 // 24], [3, -36, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 5 // 18, 11 // 18, 17 // 18, 1 // 24, 7 // 24, 13 // 24, 19 // 24], [3, -6, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 1 // 18, 7 // 18, 13 // 18, 5 // 24, 11 // 24, 17 // 24, 23 // 24], [-3 * E(3), -11, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 18, 7 // 18, 13 // 18], [-3 * E(3, 2), -23, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 5 // 18, 11 // 18, 17 // 18], [-3 * E(3, 2), -11, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 9, 4 // 9, 7 // 9, 5 // 18, 11 // 18, 17 // 18], [-3 * E(3), -23, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 9, 5 // 9, 8 // 9, 1 // 18, 7 // 18, 13 // 18], [-3 * E(3), -28, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 24, 7 // 24, 13 // 24, 19 // 24], [-3 * E(3, 2), -28, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 24, 11 // 24, 17 // 24, 23 // 24], [-3 * E(3, 2), -10, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 24, 11 // 24, 17 // 24, 23 // 24], [-3 * E(3), -10, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 24, 7 // 24, 13 // 24, 19 // 24], [3, -36, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8, 9, 12, 18], [3, -6, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8, 9, 12, 18], [6, -19, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 9, 10], [6, -13, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 9, 10], [3, -10, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8, 9, 18], [3, -28, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8, 9, 18], [3, -10, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8, 9, 18], [3, -28, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8, 9, 18], [3 - ER(-3), -31, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 5, 6, 1 // 6, 9, 12, 5 // 12, 11 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15], [3 + ER(-3), -7, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5, 6, 5 // 6, 9, 12, 1 // 12, 7 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15], [3 + ER(-3), -31, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5, 6, 5 // 6, 9, 12, 1 // 12, 7 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15], [3 - ER(-3), -7, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 5, 6, 1 // 6, 9, 12, 5 // 12, 11 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15], [-6 * E(3), -13, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 5, 1 // 6, 1 // 6, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 24, 7 // 24, 13 // 24, 19 // 24], [-6 * E(3), -19, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 5, 1 // 6, 1 // 6, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 24, 7 // 24, 13 // 24, 19 // 24], [-6 * E(3, 2), -13, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5, 5 // 6, 5 // 6, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 24, 11 // 24, 17 // 24, 23 // 24], [-6 * E(3, 2), -19, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5, 5 // 6, 5 // 6, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 24, 11 // 24, 17 // 24, 23 // 24], [3 - ER(-3), -8, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 5, 5 // 6, 7, 9, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21], [3 + ER(-3), -29, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 5, 1 // 6, 7, 9, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21], [3 + ER(-3), -8, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 5, 1 // 6, 7, 9, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21], [3 - ER(-3), -29, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 5, 5 // 6, 7, 9, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21], [3 - ER(-3), -29, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 5, 5 // 6, 7, 9, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21], [3 + ER(-3), -8, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 5, 1 // 6, 7, 9, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21], [3 + ER(-3), -29, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 5, 1 // 6, 7, 9, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21], [3 - ER(-3), -8, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 5, 5 // 6, 7, 9, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21], [2, -27, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 18], [2, -9, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 18], [2, -18, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 18], [-6 * E(3, 2), -7, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 2 // 9, 5 // 9, 8 // 9, 10, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 5 // 18, 11 // 18, 17 // 18], [-6 * E(3, 2), -31, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 2 // 9, 5 // 9, 8 // 9, 10, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 5 // 18, 11 // 18, 17 // 18], [-6 * E(3), -7, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 1 // 9, 4 // 9, 7 // 9, 10, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 18, 7 // 18, 13 // 18], [-6 * E(3), -31, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 1 // 9, 4 // 9, 7 // 9, 10, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 18, 7 // 18, 13 // 18], [6 * E(3, 2), -13, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 1 // 9, 4 // 9, 7 // 9, 10, 1 // 12, 1 // 12, 7 // 12, 7 // 12], [6 * E(3), -19, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 2 // 9, 5 // 9, 8 // 9, 10, 5 // 12, 5 // 12, 11 // 12, 11 // 12], [6 * E(3), -13, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 1 // 6, 2 // 9, 5 // 9, 8 // 9, 10, 5 // 12, 5 // 12, 11 // 12, 11 // 12], [6 * E(3, 2), -19, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 5 // 6, 1 // 9, 4 // 9, 7 // 9, 10, 1 // 12, 1 // 12, 7 // 12, 7 // 12], [3, -31, 2, 2, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6, 6, 9, 10, 18], [3, -7, 2, 2, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6, 6, 9, 10, 18], [6, -19, 2, 2, 3, 3, 3, 4, 4, 5, 6, 8, 9, 12], [6, -13, 2, 2, 3, 3, 3, 4, 4, 5, 6, 8, 9, 12], [6, -15, 2, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 18], [6, -15, 2, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 18], [-42, -15, 2, 2, 2, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 6, 6, 6, 6, 6, 6, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21], [-42, -15, 2, 2, 2, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 6, 6, 6, 6, 6, 6, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21], [2, -27, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 9, 12, 12], [2, -9, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 9, 12, 12], [2, -18, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 6, 6, 9, 12, 12], [6, -15, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 1 // 6, 1 // 6, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 21, 4 // 21, 10 // 21, 13 // 21, 16 // 21, 19 // 21], [6, -15, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5 // 6, 5 // 6, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 2 // 21, 5 // 21, 8 // 21, 11 // 21, 17 // 21, 20 // 21], [3, -23, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 9, 18], [3, -11, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 9, 18], [(3 - ER(-3)) // 2, -14, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 12, 1 // 12, 7 // 12], [(3 + ER(-3)) // 2, -20, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 12, 5 // 12, 11 // 12], [(3 + ER(-3)) // 2, -14, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 12, 5 // 12, 11 // 12], [(3 - ER(-3)) // 2, -20, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 12, 1 // 12, 7 // 12], [(3 - ER(-3)) // 2, -11, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 12, 1 // 12, 7 // 12], [(3 - ER(-3)) // 2, -23, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 12, 1 // 12, 7 // 12], [(3 + ER(-3)) // 2, -11, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 12, 5 // 12, 11 // 12], [(3 + ER(-3)) // 2, -23, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 12, 5 // 12, 11 // 12], [6, -15, 2, 2, 3, 3, 3, 4, 4, 6, 7, 9, 12], [6, -15, 2, 2, 3, 3, 3, 4, 4, 6, 7, 9, 12], [3, -24, 2, 2, 2, 2, 2, 2, 4, 4, 5, 7, 8, 10, 14], [3, -10, 2, 2, 2, 2, 2, 2, 4, 4, 5, 7, 8, 10, 14], [3, -24, 2, 2, 2, 2, 2, 2, 4, 4, 5, 7, 8, 10, 14], [3, -10, 2, 2, 2, 2, 2, 2, 4, 4, 5, 7, 8, 10, 14], [3, -24, 2, 2, 2, 2, 2, 2, 4, 4, 5, 7, 8, 10, 14], [3, -10, 2, 2, 2, 2, 2, 2, 4, 4, 5, 7, 8, 10, 14], [-6 * E(3, 2), -13, 2, 2, 2, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 5, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 18, 11 // 18, 17 // 18], [-6 * E(3), -19, 2, 2, 2, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 5, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 18, 7 // 18, 13 // 18], [-6 * E(3), -13, 2, 2, 2, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 5, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 18, 7 // 18, 13 // 18], [-6 * E(3, 2), -19, 2, 2, 2, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 5, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 18, 11 // 18, 17 // 18], [6, -13, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 1 // 6, 1 // 6, 8, 1 // 9, 4 // 9, 7 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15], [6, -19, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 1 // 6, 1 // 6, 8, 1 // 9, 4 // 9, 7 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 15, 4 // 15, 7 // 15, 13 // 15], [6, -13, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5 // 6, 5 // 6, 8, 2 // 9, 5 // 9, 8 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15], [6, -19, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 5 // 6, 5 // 6, 8, 2 // 9, 5 // 9, 8 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 2 // 15, 8 // 15, 11 // 15, 14 // 15], [3, -11, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 18, 11 // 18, 17 // 18], [3, -23, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1 // 3, 1 // 3, 1 // 3, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 1 // 9, 4 // 9, 7 // 9, 1 // 12, 1 // 12, 7 // 12, 7 // 12, 5 // 18, 11 // 18, 17 // 18], [3, -11, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 18, 7 // 18, 13 // 18], [3, -23, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2 // 3, 2 // 3, 2 // 3, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 2 // 9, 5 // 9, 8 // 9, 5 // 12, 5 // 12, 11 // 12, 11 // 12, 1 // 18, 7 // 18, 13 // 18], [2, -21, 2, 3, 3, 3, 3, 3, 3, 5, 6, 9, 15], [2, -12, 2, 3, 3, 3, 3, 3, 3, 5, 6, 9, 15], [2, -21, 2, 3, 3, 3, 3, 3, 3, 5, 6, 9, 15], [2, -12, 2, 3, 3, 3, 3, 3, 3, 5, 6, 9, 15], [6, -13, 2, 2, 2, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 18, 7 // 18, 13 // 18], [6, -19, 2, 2, 2, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 5 // 18, 11 // 18, 17 // 18], [6, -13, 2, 2, 2, 2, 2, 2, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 2 // 3, 4, 4, 6, 6, 6, 1 // 6, 1 // 6, 1 // 6, 1 // 15, 4 // 15, 7 // 15, 13 // 15, 5 // 18, 11 // 18, 17 // 18], [6, -19, 2, 2, 2, 2, 2, 2, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 1 // 3, 4, 4, 6, 6, 6, 5 // 6, 5 // 6, 5 // 6, 2 // 15, 8 // 15, 11 // 15, 14 // 15, 1 // 18, 7 // 18, 13 // 18], [6, -15, 2, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 9, 14], [6, -15, 2, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 9, 14], [6, -15, 3, 3, 3, 3, 3, 3, 6, 6, 7, 12, 12], [42, -15, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 14]])
chevieset(:G34, :HeckeCharTable, function (para, root)
        local x, y, q, adj, l, tbl, j, f3, f7, f11, f13, f15, f19, f21, f23, f25, f27, f29, f33, f37, f39, f40, f47, f51, f53, f57, f61, f62, f64, f66, f68, f72, f76, f80, f82, f84, f88, f92, f96, f100, f104, f106, f107, f111, f115, f117, f119, f121, f123, f125, f126, f128, f130, f134, f138, f140, f146, f150, f154, f158, f162, f166, f168, f169
        x = (para[1])[1]
        y = (para[1])[2]
        q = -x // y
        j = E(3)
        tbl = Dict{Symbol, Any}(:identifier => "H(G34)", :size => 39191040, :order => 39191040, :powermap => chevieget(:G34, :PowerMaps))
        Inherit(tbl, chevieget(:G34, :ClassInfo))
        l = map(length, tbl[:classtext])
        adj = function (arg...,)
                local f, x, y
                f = arg[1]
                x = arg[2]
                y = arg[3]
                arg = arg[4:length(arg)]
                return map(function (a, b)
                            return a * (-y) ^ b
                        end, ApplyFunc(f, Concatenation([-x // y], arg)), l)
            end
        f3 = function (q, j)
                return [6, -1 + 5q, -q + 4 * q ^ 2, -2q + 4 * q ^ 2, -2 * q ^ 2 + 3 * q ^ 3, -(q ^ 2) + 3 * q ^ 3, j * q ^ 2 + 3 * q ^ 3, -3 * q ^ 2 + 3 * q ^ 3, j ^ 2 * q + 3 * q ^ 3, (j ^ 2 * q ^ 2 - q ^ 3) + 2 * q ^ 4, -2 * q ^ 3 + 2 * q ^ 4, -(q ^ 3) + 2 * q ^ 4, j * q ^ 3 + 2 * q ^ 4, j ^ 2 * q ^ 2 + 2 * q ^ 4, -2 * q ^ 3 + 2 * q ^ 4, (j ^ 2 + 2j) * q ^ 3 + 2 * q ^ 4, -3 * q ^ 3 + 2 * q ^ 4, -2 * q ^ 4 + q ^ 5, (j ^ 2 * q ^ 3 - q ^ 4) + q ^ 5, j * q ^ 4 + q ^ 5, j ^ 2 * q ^ 3 + q ^ 5, j ^ 2 * q ^ 3 + q ^ 5, j * q ^ 4 + q ^ 5, -2 * q ^ 4 + q ^ 5, -(q ^ 4) + q ^ 5, (j ^ 2 + 2j) * q ^ 4 + q ^ 5, 3 * j ^ 2 * q ^ 4 + 3 * q ^ 6, j * q ^ 5, (j ^ 2 * q ^ 4 - j ^ 2 * q ^ 5) + q ^ 6, (j ^ 2 * q ^ 4 - j ^ 2 * q ^ 5) + 2 * q ^ 6, j ^ 2 * q ^ 25, j * q ^ 2 + 2 * j * q ^ 5 + 3 * q ^ 6, j ^ 2 * q ^ 5 - j ^ 2 * q ^ 6, (j ^ 2 * q ^ 5 - j ^ 2 * q ^ 6) + q ^ 7, (3 * j ^ 2 * q ^ 5 - q ^ 6) + 2 * q ^ 7, (j ^ 2 * q ^ 5 - j ^ 2 * q ^ 6) + q ^ 7, j * q ^ 3 + (j ^ 2 + 3j) * q ^ 6 + 2 * q ^ 7, (j ^ 2 * q ^ 5 - j ^ 2 * q ^ 6) + q ^ 7, j ^ 2 * q ^ 5 + j * q ^ 6 + q ^ 7, 2 * j ^ 2 * q ^ 5 + 2 * q ^ 7, j ^ 2 * q ^ 5 - j ^ 2 * q ^ 6, j * q ^ 3 + j ^ 2 * q ^ 4 + q ^ 5 + 2 * j * q ^ 6 + 2 * q ^ 7, -(j ^ 2) * q ^ 6 + q ^ 7, ((j ^ 2 * q ^ 4 - j * q ^ 5) - j ^ 2 * q ^ 6) + q ^ 7, j * q ^ 4 + j ^ 2 * q ^ 5 + q ^ 6 + 2 * j * q ^ 7 + q ^ 8, 2 * j ^ 2 * q ^ 6 + q ^ 8, j ^ 2 * q ^ 178 - 2 * j ^ 2 * q ^ 179, j * q ^ 38 - 2 * j * q ^ 39, (2 * j ^ 2 * q ^ 6 - q ^ 7) + q ^ 8, j ^ 2 * q ^ 6 - j ^ 2 * q ^ 7, j ^ 2 * q ^ 6 + q ^ 8, j * q ^ 4 + j ^ 2 * q ^ 5 + q ^ 6 + (j ^ 2 + 3j) * q ^ 7 + q ^ 8, j * q ^ 4 + 2 * j ^ 2 * q ^ 5 + 2 * q ^ 6 + 2 * j * q ^ 7 + q ^ 8, j ^ 2 * q ^ 6 - j ^ 2 * q ^ 7, j ^ 2 * q ^ 6 - j ^ 2 * q ^ 7, 2 * j * q ^ 39 - j * q ^ 40, (j * q ^ 75 - j * q ^ 76) + j ^ 2 * q ^ 77, (-j * q ^ 6 - j ^ 2 * q ^ 8) + q ^ 9, j * q ^ 6 + 2 * j ^ 2 * q ^ 7 + 2 * q ^ 8 + 2 * j * q ^ 9 + q ^ 10, -(j ^ 2) * q ^ 10, (j ^ 2 - j) * q ^ 7 + q ^ 10, ((j * q ^ 6 + (j ^ 2 - j) * q ^ 7) - 2 * j ^ 2 * q ^ 8) + j * q ^ 9 + q ^ 10, -j * q ^ 20, j ^ 2 * q ^ 8 + q ^ 10, ((j ^ 2 * q ^ 7 + q ^ 8) - j ^ 2 * q ^ 9) + q ^ 10, (((-(j ^ 2) * q ^ 39 - 2 * q ^ 40) - 2 * j * q ^ 41) - 2 * j ^ 2 * q ^ 42) - j * q ^ 43, ((q ^ 144 - j ^ 2 * q ^ 145) - q ^ 146) + j * q ^ 147, -2 * j ^ 2 * q ^ 74 + j ^ 2 * q ^ 75, j * q ^ 7 + 3 * j ^ 2 * q ^ 8 + 3 * q ^ 9 + 2 * j * q ^ 10, (-(q ^ 40) + q ^ 41) - j * q ^ 42, 2 * q ^ 109 - q ^ 110, 0, (-(q ^ 39) + j ^ 2 * q ^ 40 + q ^ 41) - j * q ^ 42, j * q ^ 8 + 2 * j ^ 2 * q ^ 9 + j * q ^ 10 + 2 * q ^ 12, q ^ 15, -j * q ^ 177 - 2 * j ^ 2 * q ^ 179, 2 * j ^ 2 * q ^ 179 - j ^ 2 * q ^ 180, j * q ^ 12 + (2 * j ^ 2 - 2j) * q ^ 13 + (-2 * j ^ 2 + j) * q ^ 14, (2 * j ^ 2 - j) * q ^ 12 + q ^ 15, -(q ^ 37) - 2 * j * q ^ 39, j * q ^ 76 + j ^ 2 * q ^ 78, -2 * j ^ 2 * q ^ 73 + 2 * j ^ 2 * q ^ 74, q ^ 74 + j ^ 2 * q ^ 75, -(q ^ 38) - j * q ^ 40, j ^ 2 * q ^ 23 - j ^ 2 * q ^ 24, -(j ^ 2) * q ^ 73 + 2 * j ^ 2 * q ^ 74, q ^ 80 + (j ^ 2 + 2j) * q ^ 81 + (2 * j ^ 2 + j) * q ^ 82 + (-3 * j ^ 2 - 2j) * q ^ 83 + j ^ 2 * q ^ 85, -6 * j * q ^ 35, -(j ^ 2) * q ^ 38 - 2 * j * q ^ 39, 2 * j * q ^ 36 - 4 * j * q ^ 37, (-(j ^ 2) * q ^ 41 + (2 * j ^ 2 + j) * q ^ 42 + (-(j ^ 2) - 2j) * q ^ 43) - j * q ^ 45, j * q ^ 37 - 3 * j * q ^ 38, 3 * j * q ^ 37 - 3 * j * q ^ 38, 2 * j * q ^ 38 - 2 * j * q ^ 39, 2 * j ^ 2 * q ^ 11 + j * q ^ 12 + q ^ 14, (-(j ^ 2) + j) * q ^ 38 - 2 * j * q ^ 39, 3 * j * q ^ 38 - 2 * j * q ^ 39, (-(q ^ 38) + j * q ^ 39) - j * q ^ 40, -3 * q ^ 39 - 3 * j * q ^ 41, (-(j ^ 2) * q ^ 37 - 2 * j ^ 2 * q ^ 40) - 3 * j * q ^ 41, -2 * q ^ 40 - 2 * j * q ^ 42, (-3 * q ^ 40 + j * q ^ 41) - 2 * j * q ^ 42, (-(j ^ 2) * q ^ 38 + (-2 * j ^ 2 + j) * q ^ 41) - 2 * j * q ^ 42, j * q ^ 8 + j ^ 2 * q ^ 9 + (j ^ 2 - j) * q ^ 10 + (-(j ^ 2) + j) * q ^ 11 + q ^ 13, (-2 * q ^ 41 + j * q ^ 42) - j * q ^ 43, -2 * q ^ 41 - j * q ^ 43, -(q ^ 43) - j * q ^ 45, j * q ^ 35 - 5 * j * q ^ 36, ((-(j ^ 2) * q ^ 43 - 2 * q ^ 44) - j ^ 2 * q ^ 45) - 2 * j * q ^ 47, -(j ^ 2) * q ^ 37 - 3 * j * q ^ 38, j * q ^ 36 - 4 * j * q ^ 37, q ^ 143 + j * q ^ 145, 2 * j * q ^ 37 - 3 * j * q ^ 38, (3 * j ^ 2 + 2j) * q ^ 47 - j * q ^ 50, -(j ^ 2) * q ^ 111 - q ^ 113, j * q ^ 73 + j ^ 2 * q ^ 75, q ^ 108 - 2 * q ^ 109, -(q ^ 41) - j * q ^ 43, -(q ^ 30), 2 * j * q ^ 38 - 2 * j * q ^ 39, j * q ^ 10 + (j ^ 2 - j) * q ^ 11 + (-(j ^ 2) - 2j) * q ^ 12 + (j ^ 2 + 3j) * q ^ 13 + q ^ 15, 6 * j ^ 2 * q ^ 70, q ^ 76 + (j ^ 2 + 2j) * q ^ 77 + (j ^ 2 - j) * q ^ 78 + j ^ 2 * q ^ 80, -2 * j ^ 2 * q ^ 71 + 4 * j ^ 2 * q ^ 72, -(j ^ 2) * q ^ 72 + 3 * j ^ 2 * q ^ 73, -3 * j ^ 2 * q ^ 72 + 3 * j ^ 2 * q ^ 73, (j * q ^ 72 - j ^ 2 * q ^ 73) + 2 * j ^ 2 * q ^ 74, (j * q ^ 73 - j ^ 2 * q ^ 74) + j ^ 2 * q ^ 75, ((j * q ^ 74 - q ^ 75) - j * q ^ 76) + j ^ 2 * q ^ 77, 3 * j * q ^ 74 + 3 * j ^ 2 * q ^ 76, (3 * j * q ^ 75 - j ^ 2 * q ^ 76) + 2 * j ^ 2 * q ^ 77, 2 * j * q ^ 75 + 2 * j ^ 2 * q ^ 77, 2 * j * q ^ 76 + j ^ 2 * q ^ 78, -(j ^ 2) * q ^ 70 + 5 * j ^ 2 * q ^ 71, -(j ^ 2) * q ^ 71 + 4 * j ^ 2 * q ^ 72, -2 * j ^ 2 * q ^ 72 + 3 * j ^ 2 * q ^ 73, (j ^ 2 + 3j) * q ^ 82 + j ^ 2 * q ^ 85, j * q ^ 72 + 2 * j ^ 2 * q ^ 74, -j * q ^ 143 + 2 * j * q ^ 144, (-(j ^ 2) * q ^ 45 + (2 * j ^ 2 + j) * q ^ 46 + (j ^ 2 - j) * q ^ 47 + (-2 * j ^ 2 + j) * q ^ 48) - j * q ^ 50, -6 * q ^ 105, (q ^ 36 - 4 * q ^ 37) + q ^ 46, (-j * q ^ 111 + (-(j ^ 2) + j) * q ^ 112 + (2 * j ^ 2 + j) * q ^ 113) - q ^ 115, q ^ 107 - 3 * q ^ 108, (j * q ^ 8 - 2 * q ^ 9) + (j ^ 2 - 2j) * q ^ 10 + 2 * q ^ 11 + 3 * j * q ^ 12 + q ^ 14, (-(j ^ 2) * q ^ 109 + j * q ^ 110 + j ^ 2 * q ^ 111) - q ^ 112, -3 * j ^ 2 * q ^ 109 - 3 * q ^ 111, q ^ 9 + 6 * j * q ^ 10 + 9 * j ^ 2 * q ^ 11 + 9 * q ^ 12 + 6 * j * q ^ 13 + q ^ 15, -2 * j ^ 2 * q ^ 110 - 2 * q ^ 112, -2 * j ^ 2 * q ^ 111 - q ^ 113, -5 * q ^ 36 + q ^ 45, q ^ 106 - 4 * q ^ 107, q ^ 11 + (2 * j ^ 2 + 6j) * q ^ 12 + (6 * j ^ 2 - 2j) * q ^ 13 + (-6 * j ^ 2 - 4j) * q ^ 14 + (j ^ 2 + 3j) * q ^ 15 + q ^ 17, -(j ^ 2) * q ^ 107 - 2 * q ^ 109, 6 * j * q ^ 140, j ^ 2 * q ^ 146 + (-2 * j ^ 2 - j) * q ^ 147 + (j ^ 2 + 2j) * q ^ 148 + j * q ^ 150, -2 * j * q ^ 141 + 4 * j * q ^ 142, 2 * j * q ^ 39 - j * q ^ 40, -j * q ^ 140 + 5 * j * q ^ 141, -j * q ^ 141 + 4 * j * q ^ 142, (-j * q ^ 46 + (-4 * j ^ 2 + 2j) * q ^ 47 + (8 * j ^ 2 + 6j) * q ^ 48 + (-2 * j ^ 2 - 6j) * q ^ 49 + (-2 * j ^ 2 + j) * q ^ 50) - j * q ^ 52, -j * q ^ 142 + 3 * j * q ^ 143, -6 * j ^ 2 * q ^ 175, (-(q ^ 181) + (-(j ^ 2) - 2j) * q ^ 182 + (-(j ^ 2) + j) * q ^ 183) - j ^ 2 * q ^ 185, 2 * j ^ 2 * q ^ 176 - 4 * j ^ 2 * q ^ 177, j ^ 2 * q ^ 175 - 5 * j ^ 2 * q ^ 176, j ^ 2 * q ^ 176 - 4 * j ^ 2 * q ^ 177, j ^ 2 * q ^ 81 + (-6 * j ^ 2 - 4j) * q ^ 82 + (2 * j ^ 2 + 8j) * q ^ 83 + (4 * j ^ 2 - 2j) * q ^ 84 + (-3 * j ^ 2 - 2j) * q ^ 85 + j ^ 2 * q ^ 87, j ^ 2 * q ^ 177 - 3 * j ^ 2 * q ^ 178]
            end
        f7 = function (q, j)
                return [15, -10 + 5q, (6 - 4q) + q ^ 2, (6 - 8q) + q ^ 2, (-3 + 6q) - 2 * q ^ 2, (-3 + 3q) - q ^ 2, (-3 - 3 * j * q) + j ^ 2 * q ^ 2, (-3 + 9q) - 3 * q ^ 2, (-3 + j * q) - 3 * j ^ 2 * q ^ 2, (1 + (2 * j ^ 2 + j) * q + 2 * j ^ 2 * q ^ 2) - j ^ 2 * q ^ 3, (1 - 4q) + 3 * q ^ 2, (1 - 2q) + q ^ 2, 1 + 2 * j * q, ((1 - j * q) + (3 * j ^ 2 + j) * q ^ 2) - j ^ 2 * q ^ 3, (1 - 4q) + 2 * q ^ 2, 1 + (2 * j ^ 2 + 4j) * q + q ^ 2, (1 - 6q) + 4 * q ^ 2, 2q - 2 * q ^ 2, -(j ^ 2) * q + (-2 * j ^ 2 - j) * q ^ 2 + 2 * j ^ 2 * q ^ 3, -j * q, j * q + (-3 * j ^ 2 - 2j) * q ^ 2 + 2 * j ^ 2 * q ^ 3, j * q + (-2 * j ^ 2 - j) * q ^ 2 + j ^ 2 * q ^ 3, -j * q - j ^ 2 * q ^ 2, 2q - 3 * q ^ 2, q - q ^ 2, (-(j ^ 2) - 2j) * q + j * q ^ 2, 3 + 9 * j ^ 2 * q ^ 2 + 3 * j * q ^ 4, j ^ 2 * q ^ 2, (-(j ^ 2) * q + (3 * j ^ 2 + j) * q ^ 2) - j ^ 2 * q ^ 3, (1 - 2 * j ^ 2 * q) + 2 * j ^ 2 * q ^ 2 + q ^ 3, j * q ^ 10, 3 + 6 * j * q + j ^ 2 * q ^ 2 + 3 * j * q ^ 4 + 2 * j ^ 2 * q ^ 5, (-2 * j ^ 2 - j) * q ^ 2 + j ^ 2 * q ^ 3, (j ^ 2 * q - 2 * j ^ 2 * q ^ 2) + j ^ 2 * q ^ 3, (((-1 + 2q) - 6 * j ^ 2 * q ^ 2) + 3 * j ^ 2 * q ^ 3) - 3 * j * q ^ 4, (j ^ 2 * q - j ^ 2 * q ^ 2) + j * q ^ 3, ((-1 + (-2 * j ^ 2 - 6j) * q + (-(j ^ 2) + 2j) * q ^ 2) - 2 * j * q ^ 4) + (-2 * j ^ 2 + j) * q ^ 5, (j ^ 2 * q - j ^ 2 * q ^ 2) + j ^ 2 * q ^ 4, (-j * q - 2 * j ^ 2 * q ^ 2) + (2 * j ^ 2 + j) * q ^ 3, ((-1 - 4 * j ^ 2 * q ^ 2) + j ^ 2 * q ^ 3) - j * q ^ 4, (-2 * j ^ 2 - j) * q ^ 2 + (2 * j ^ 2 + j) * q ^ 3, (-1 - 4 * j * q) + (j ^ 2 + 3j) * q ^ 2 + (-3 * j ^ 2 - 2j) * q ^ 3 + (2 * j ^ 2 - j) * q ^ 4 + (-(j ^ 2) + j) * q ^ 5, j ^ 2 * q + j ^ 2 * q ^ 3, (j ^ 2 * q + 2 * j * q ^ 2) - j ^ 2 * q ^ 3, (((2 * j * q - 2 * j * q ^ 2) - 3 * q ^ 3) - 3 * j ^ 2 * q ^ 4) + (j ^ 2 - j) * q ^ 5, 2 * j ^ 2 * q ^ 2 + j * q ^ 4, (j * q ^ 70 - 2 * j * q ^ 71) + j * q ^ 72, (j ^ 2 * q ^ 14 - 2 * j ^ 2 * q ^ 15) + j ^ 2 * q ^ 16, ((-q + 2 * j ^ 2 * q ^ 2) - 3 * j ^ 2 * q ^ 3) + j * q ^ 4, j ^ 2 * q ^ 2, j ^ 2 * q ^ 2 - j ^ 2 * q ^ 3, ((((j ^ 2 + 3j) * q - 4 * j * q ^ 2) - 3 * q ^ 3) - 3 * j ^ 2 * q ^ 4) + (j ^ 2 - 2j) * q ^ 5, ((2 * j * q + (-(j ^ 2) - 4j) * q ^ 2) - 5 * q ^ 3) + (-5 * j ^ 2 - j) * q ^ 4 + (j ^ 2 - 2j) * q ^ 5, j ^ 2 * q ^ 2 - j ^ 2 * q ^ 3, (j ^ 2 * q ^ 2 + j * q ^ 3) - j ^ 2 * q ^ 4, 2 * j ^ 2 * q ^ 15 - 2 * j ^ 2 * q ^ 16, (q ^ 29 - 2 * q ^ 30) + q ^ 31, (j ^ 2 * q + j * q ^ 3) - q ^ 4, ((2 * j * q + (-(j ^ 2) - 2j) * q ^ 2 + 2 * j ^ 2 * q ^ 3) - j ^ 2 * q ^ 4) - j * q ^ 6, j * q ^ 4, ((j ^ 2 - 2j) * q ^ 3 + j * q ^ 4) - q ^ 6, (j * q - 2 * j ^ 2 * q ^ 2) + (3 * j ^ 2 - j) * q ^ 3 + 3 * j * q ^ 4 + q ^ 5, j ^ 2 * q ^ 8, j ^ 2 * q ^ 2 - 2 * j ^ 2 * q ^ 4, (((-(j ^ 2) * q + q ^ 2) - q ^ 3) + 2 * q ^ 4) - j * q ^ 5, ((2 * q ^ 15 + (4 * j ^ 2 + 3j) * q ^ 16) - 5 * j ^ 2 * q ^ 17) + (j ^ 2 - 4j) * q ^ 18 + (2 * j ^ 2 + 3j) * q ^ 19, (j * q ^ 57 + 2 * q ^ 58) - j * q ^ 59, 2 * j * q ^ 29 - 2 * j * q ^ 30, (((-(j ^ 2) + j) * q ^ 2 + 2 * q ^ 3 + 2 * j ^ 2 * q ^ 4) - q ^ 5) + j * q ^ 6, (j * q ^ 15 - 2 * j * q ^ 16) + j * q ^ 17, 2 * q ^ 43 - 3 * q ^ 44, j ^ 2 * q ^ 4, (j * q ^ 15 + 2 * q ^ 16) - j * q ^ 17, ((1 + 2 * j * q ^ 2 + 4 * j ^ 2 * q ^ 3 + 2 * j * q ^ 4 + 2 * q ^ 5) - q ^ 6) + 2 * q ^ 7, q ^ 6, ((j * q ^ 70 - j ^ 2 * q ^ 71) + (-2 * j ^ 2 - 3j) * q ^ 72) - q ^ 73, 2 * j * q ^ 71 - 3 * j * q ^ 72, (-j * q ^ 4 - 2 * j * q ^ 5) + (2 * j ^ 2 + 5j) * q ^ 6 + 2 * q ^ 7, (-2 * j ^ 2 + j) * q ^ 3 + (-2 * j ^ 2 - 5j) * q ^ 6, ((j ^ 2 * q ^ 14 - q ^ 15) + (-(j ^ 2) + 2j) * q ^ 16) - j * q ^ 17, q ^ 30 - q ^ 31, (j * q ^ 28 - 4 * j * q ^ 29) + 2 * j * q ^ 30, -(j ^ 2) * q ^ 29 - q ^ 30, q ^ 15 + (2 * j ^ 2 - j) * q ^ 16 + 2 * j * q ^ 17, (q ^ 8 + j ^ 2 * q ^ 9) - j ^ 2 * q ^ 10, (j * q ^ 28 - 2 * j * q ^ 29) + j * q ^ 30, ((((-2 * j ^ 2 + j) * q ^ 30 + (j ^ 2 - j) * q ^ 31 + (4 * j ^ 2 + j) * q ^ 32 + (-2 * j ^ 2 - j) * q ^ 33) - 2 * j ^ 2 * q ^ 34) - q ^ 35) - 2 * j * q ^ 36, 15 * j ^ 2 * q ^ 14, j ^ 2 * q ^ 14 + 2 * q ^ 15, (6 * j ^ 2 * q ^ 14 - 8 * j ^ 2 * q ^ 15) + j ^ 2 * q ^ 16, (j ^ 2 - j) * q ^ 16 + (2 * j ^ 2 + 3j) * q ^ 17 + (-2 * j ^ 2 - 3j) * q ^ 18 + (2 * j ^ 2 + j) * q ^ 19, (-3 * j ^ 2 * q ^ 14 + 3 * j ^ 2 * q ^ 15) - j ^ 2 * q ^ 16, (-3 * j ^ 2 * q ^ 14 + 9 * j ^ 2 * q ^ 15) - 3 * j ^ 2 * q ^ 16, (j ^ 2 * q ^ 14 - 4 * j ^ 2 * q ^ 15) + 3 * j ^ 2 * q ^ 16, j * q ^ 2 + 2 * j ^ 2 * q ^ 3 + 2 * q ^ 5 + 3 * j * q ^ 6, j ^ 2 * q ^ 14 + (-4 * j ^ 2 - 2j) * q ^ 15 + j ^ 2 * q ^ 16, (j ^ 2 * q ^ 14 - 6 * j ^ 2 * q ^ 15) + 4 * j ^ 2 * q ^ 16, -j * q ^ 15 + (j ^ 2 - j) * q ^ 16 + 2 * j * q ^ 17, 3 * j ^ 2 * q ^ 14 + 9 * j * q ^ 16 + 3 * q ^ 18, 3 * j ^ 2 * q ^ 14 + 6 * q ^ 15 + j * q ^ 16 + 3 * q ^ 18 + 2 * j * q ^ 19, ((-(j ^ 2) * q ^ 14 - 4 * j * q ^ 16) + j * q ^ 17) - q ^ 18, (((-(j ^ 2) * q ^ 14 + 2 * j ^ 2 * q ^ 15) - 6 * j * q ^ 16) + 3 * j * q ^ 17) - 3 * q ^ 18, ((-(j ^ 2) * q ^ 14 + (6 * j ^ 2 + 4j) * q ^ 15 + (-2 * j ^ 2 - 3j) * q ^ 16) - 2 * q ^ 18) + (-(j ^ 2) - 3j) * q ^ 19, ((((j ^ 2 - j) * q ^ 2 + 2 * j * q ^ 3 + (-3 * j ^ 2 - j) * q ^ 4) - q ^ 5) - 2 * j * q ^ 6) - q ^ 8, ((-(j ^ 2) * q ^ 15 + 2 * j * q ^ 16) - 3 * j * q ^ 17) + q ^ 18, 2 * j * q ^ 16 + q ^ 18, j * q ^ 16 - 2 * j * q ^ 18, -10 * j ^ 2 * q ^ 14 + 5 * j ^ 2 * q ^ 15, ((j ^ 2 * q ^ 14 + 2 * q ^ 16 + 4 * j * q ^ 17 + 2 * q ^ 18 + 2 * j ^ 2 * q ^ 19) - j ^ 2 * q ^ 20) + 2 * j ^ 2 * q ^ 21, (-3 * j ^ 2 * q ^ 14 - 3 * q ^ 15) + j * q ^ 16, (6 * j ^ 2 * q ^ 14 - 4 * j ^ 2 * q ^ 15) + j ^ 2 * q ^ 16, q ^ 57 + (2 * j ^ 2 - j) * q ^ 58 + 2 * j * q ^ 59, (-3 * j ^ 2 * q ^ 14 + 6 * j ^ 2 * q ^ 15) - 2 * j ^ 2 * q ^ 16, (-(j ^ 2) - 3j) * q ^ 17 + (5 * j ^ 2 + 3j) * q ^ 20, j ^ 2 * q ^ 44 - j ^ 2 * q ^ 45, j ^ 2 * q ^ 29 + (j ^ 2 + 3j) * q ^ 30 + 2 * q ^ 31, (q ^ 42 - 2 * q ^ 43) + q ^ 44, j * q ^ 16 - j * q ^ 17, q ^ 12, (j ^ 2 * q ^ 14 - 4 * j ^ 2 * q ^ 15) + 2 * j ^ 2 * q ^ 16, ((((-(j ^ 2) - 3j) * q ^ 2 + (j ^ 2 + 2j) * q ^ 3 + (-(j ^ 2) + 3j) * q ^ 4 + (j ^ 2 - j) * q ^ 5) - 2 * j * q ^ 6) - j ^ 2 * q ^ 7) - 2 * q ^ 8, 15 * j * q ^ 28, (j ^ 2 + 2j) * q ^ 30 + (-3 * j ^ 2 - j) * q ^ 31 + (3 * j ^ 2 + j) * q ^ 32 + (-(j ^ 2) + j) * q ^ 33, (6 * j * q ^ 28 - 8 * j * q ^ 29) + j * q ^ 30, (-3 * j * q ^ 28 + 3 * j * q ^ 29) - j * q ^ 30, (-3 * j * q ^ 28 + 9 * j * q ^ 29) - 3 * j * q ^ 30, (j * q ^ 28 + (-(j ^ 2) - 2j) * q ^ 29 + 2 * q ^ 30) - q ^ 31, -(q ^ 29) + (j ^ 2 + 2j) * q ^ 30 + 2 * q ^ 31, (q ^ 29 + 2 * j ^ 2 * q ^ 30) - q ^ 31, 3 * j * q ^ 28 + 9 * q ^ 30 + 3 * j ^ 2 * q ^ 32, (((-j * q ^ 28 + 2 * j * q ^ 29) - 6 * q ^ 30) + 3 * q ^ 31) - 3 * j ^ 2 * q ^ 32, ((-j * q ^ 28 - 4 * q ^ 30) + q ^ 31) - j ^ 2 * q ^ 32, 2 * q ^ 30 + j ^ 2 * q ^ 32, -10 * j * q ^ 28 + 5 * j * q ^ 29, (6 * j * q ^ 28 - 4 * j * q ^ 29) + j * q ^ 30, (-3 * j * q ^ 28 + 6 * j * q ^ 29) - 2 * j * q ^ 30, (3 * j ^ 2 + 2j) * q ^ 31 + (-3 * j ^ 2 + 2j) * q ^ 34, ((j * q ^ 28 - j ^ 2 * q ^ 29) + (-2 * j ^ 2 - 3j) * q ^ 30) - q ^ 31, (j ^ 2 * q ^ 56 - 2 * j ^ 2 * q ^ 57) + j ^ 2 * q ^ 58, ((((3 * j ^ 2 + 2j) * q ^ 16 + (-2 * j ^ 2 - j) * q ^ 17 + (-3 * j ^ 2 - 4j) * q ^ 18 + (j ^ 2 + 2j) * q ^ 19) - 2 * q ^ 20) - j * q ^ 21) - 2 * j ^ 2 * q ^ 22, 15 * q ^ 42, (-4 * q ^ 9 + q ^ 10 + 6 * q ^ 18) - 4 * q ^ 19, (-2 * j ^ 2 - j) * q ^ 44 + (j ^ 2 - 2j) * q ^ 45 + (-(j ^ 2) + 2j) * q ^ 46 + (-(j ^ 2) - 2j) * q ^ 47, (-3 * q ^ 42 + 3 * q ^ 43) - q ^ 44, (3 * j * q ^ 2 + 2 * q ^ 3 + (2 * j ^ 2 - 4j) * q ^ 4 + (4 * j ^ 2 + 2j) * q ^ 5 + 5 * j * q ^ 6 + 2 * q ^ 7) - 2 * j * q ^ 8, (j ^ 2 * q ^ 43 + 2 * j * q ^ 44) - j ^ 2 * q ^ 45, 3 * q ^ 42 + 9 * j ^ 2 * q ^ 44 + 3 * j * q ^ 46, (((((-6 * j * q ^ 2 - 8 * q ^ 3) - 12 * j ^ 2 * q ^ 4) - 12 * j * q ^ 5) - 5 * q ^ 6) - 3 * j ^ 2 * q ^ 7) + 3 * j * q ^ 8 + 2 * q ^ 9, ((-(q ^ 42) - 4 * j ^ 2 * q ^ 44) + j ^ 2 * q ^ 45) - j * q ^ 46, 2 * j ^ 2 * q ^ 44 + j * q ^ 46, 5 * q ^ 9 - 10 * q ^ 18, (6 * q ^ 42 - 4 * q ^ 43) + q ^ 44, (-(j ^ 2) - 3j) * q ^ 2 + (6 * j ^ 2 + 4j) * q ^ 3 + (-6 * j ^ 2 + 2j) * q ^ 4 + (2 * j ^ 2 - 4j) * q ^ 5 + (-5 * j ^ 2 + 7j) * q ^ 6 + (-8 * j ^ 2 - 16j) * q ^ 7 + (13 * j ^ 2 + 7j) * q ^ 8 + (-2 * j ^ 2 + 2j) * q ^ 9, ((q ^ 42 - j * q ^ 43) + (3 * j ^ 2 + j) * q ^ 44) - j ^ 2 * q ^ 45, 15 * j ^ 2 * q ^ 56, (j ^ 2 - j) * q ^ 58 + (2 * j ^ 2 + 3j) * q ^ 59 + (-2 * j ^ 2 - 3j) * q ^ 60 + (2 * j ^ 2 + j) * q ^ 61, (6 * j ^ 2 * q ^ 56 - 8 * j ^ 2 * q ^ 57) + j ^ 2 * q ^ 58, 2 * j ^ 2 * q ^ 15 - 3 * j ^ 2 * q ^ 16, -10 * j ^ 2 * q ^ 56 + 5 * j ^ 2 * q ^ 57, (6 * j ^ 2 * q ^ 56 - 4 * j ^ 2 * q ^ 57) + j ^ 2 * q ^ 58, (3 * j ^ 2 + 2j) * q ^ 16 + (-4 * j ^ 2 + 2j) * q ^ 17 + (-2 * j ^ 2 - 8j) * q ^ 18 + (4 * j ^ 2 + 6j) * q ^ 19 + (-7 * j ^ 2 - 12j) * q ^ 20 + (16 * j ^ 2 + 8j) * q ^ 21 + (-7 * j ^ 2 + 6j) * q ^ 22 + (-2 * j ^ 2 - 4j) * q ^ 23, (-3 * j ^ 2 * q ^ 56 + 3 * j ^ 2 * q ^ 57) - j ^ 2 * q ^ 58, 15 * j * q ^ 70, (j ^ 2 + 2j) * q ^ 72 + (-3 * j ^ 2 - j) * q ^ 73 + (3 * j ^ 2 + j) * q ^ 74 + (-(j ^ 2) + j) * q ^ 75, (6 * j * q ^ 70 - 8 * j * q ^ 71) + j * q ^ 72, -10 * j * q ^ 70 + 5 * j * q ^ 71, (6 * j * q ^ 70 - 4 * j * q ^ 71) + j * q ^ 72, (-2 * j ^ 2 + j) * q ^ 30 + (-2 * j ^ 2 - 6j) * q ^ 31 + (8 * j ^ 2 + 6j) * q ^ 32 + (-6 * j ^ 2 - 2j) * q ^ 33 + (12 * j ^ 2 + 5j) * q ^ 34 + (-8 * j ^ 2 + 8j) * q ^ 35 + (-6 * j ^ 2 - 13j) * q ^ 36 + (4 * j ^ 2 + 2j) * q ^ 37, (-3 * j * q ^ 70 + 3 * j * q ^ 71) - j * q ^ 72]
            end
        f11 = function (q, j)
                return [20, -10 + 10q, (4 - 6q) + 4 * q ^ 2, (4 - 12q) + 4 * q ^ 2, ((-1 + 6q) - 6 * q ^ 2) + q ^ 3, ((-1 + 3q) - 3 * q ^ 2) + q ^ 3, (-1 - 3 * j * q) + 3 * j ^ 2 * q ^ 2 + q ^ 3, ((-1 + 9q) - 9 * q ^ 2) + q ^ 3, ((-1 + 3 * j * q) - 3 * j ^ 2 * q ^ 2) + q ^ 3, ((j ^ 2 - j) * q - q ^ 2) + (-(j ^ 2) + j) * q ^ 3, (-2q + 6 * q ^ 2) - 2 * q ^ 3, (-q + 2 * q ^ 2) - q ^ 3, j * q + j ^ 2 * q ^ 3, (-2 * j * q - 3 * q ^ 2) - 2 * j ^ 2 * q ^ 3, (-2q + 4 * q ^ 2) - 2 * q ^ 3, (j ^ 2 + 2j) * q + 2 * q ^ 2 + (2 * j ^ 2 + j) * q ^ 3, (-3q + 8 * q ^ 2) - 3 * q ^ 3, -2 * q ^ 2 + 2 * q ^ 3, (j * q + (-(j ^ 2) - 3j) * q ^ 2 + (3 * j ^ 2 + j) * q ^ 3) - j ^ 2 * q ^ 4, 0, (j * q + (-2 * j ^ 2 - 4j) * q ^ 2 + (4 * j ^ 2 + 2j) * q ^ 3) - j ^ 2 * q ^ 4, (j * q + (-(j ^ 2) - 2j) * q ^ 2 + (2 * j ^ 2 + j) * q ^ 3) - j ^ 2 * q ^ 4, -(j ^ 2) * q ^ 2 + j * q ^ 3, -3 * q ^ 2 + 3 * q ^ 3, -(q ^ 2) + q ^ 3, j * q ^ 2 - j ^ 2 * q ^ 3, 1 + 9 * j ^ 2 * q ^ 2 + 9 * j * q ^ 4 + q ^ 6, q ^ 3, (2 * j ^ 2 + j) * q ^ 2 + q ^ 3 + (j ^ 2 + 2j) * q ^ 4, (-(j ^ 2) * q + j ^ 2 * q ^ 2 + 2 * q ^ 3 + j * q ^ 4) - j * q ^ 5, q ^ 15, 1 + 6 * j * q + 3 * j ^ 2 * q ^ 2 + 3 * j * q ^ 4 + 6 * j ^ 2 * q ^ 5 + q ^ 6, -(q ^ 3) + q ^ 4, ((-(j ^ 2) * q ^ 2 + j ^ 2 * q ^ 3) - j * q ^ 4) + j * q ^ 5, ((((q - 3 * j ^ 2 * q ^ 2) + 6 * j ^ 2 * q ^ 3) - 6 * j * q ^ 4) + 3 * j * q ^ 5) - q ^ 6, j * q ^ 3 - j ^ 2 * q ^ 4, (((-(j ^ 2) - 3j) * q + (-2 * j ^ 2 + 4j) * q ^ 2 + j ^ 2 * q ^ 3) - j * q ^ 4) + (-4 * j ^ 2 + 2j) * q ^ 5 + (3 * j ^ 2 + j) * q ^ 6, -j * q ^ 3 + j ^ 2 * q ^ 4, -(j ^ 2) * q ^ 2 + (2 * j ^ 2 + j) * q ^ 3 + (-(j ^ 2) - 2j) * q ^ 4 + j * q ^ 5, ((-2 * j ^ 2 * q ^ 2 + 2 * j ^ 2 * q ^ 3) - 2 * j * q ^ 4) + 2 * j * q ^ 5, -2 * q ^ 3 + 2 * q ^ 4, -2 * j * q + (-(j ^ 2) + 3j) * q ^ 2 + (-2 * j ^ 2 - 4j) * q ^ 3 + (4 * j ^ 2 + 2j) * q ^ 4 + (-3 * j ^ 2 + j) * q ^ 5 + 2 * j ^ 2 * q ^ 6, j ^ 2 * q ^ 3 - j * q ^ 4, j * q ^ 2 - j ^ 2 * q ^ 5, (j ^ 2 - j) * q ^ 2 + (j ^ 2 + 4j) * q ^ 3 + 4 * q ^ 4 + (4 * j ^ 2 + j) * q ^ 5 + (-(j ^ 2) + j) * q ^ 6, -(q ^ 4), (q ^ 106 - 2 * q ^ 107) + q ^ 108, (q ^ 22 - 2 * q ^ 23) + q ^ 24, (-3 * j ^ 2 * q ^ 3 - q ^ 4) - 3 * j * q ^ 5, 0, -(j ^ 2) * q ^ 3 - j * q ^ 5, (j ^ 2 - 3j) * q ^ 2 + 4 * j * q ^ 3 + 4 * q ^ 4 + 4 * j ^ 2 * q ^ 5 + (-3 * j ^ 2 + j) * q ^ 6, (j ^ 2 - 2j) * q ^ 2 + (j ^ 2 + 6j) * q ^ 3 + 7 * q ^ 4 + (6 * j ^ 2 + j) * q ^ 5 + (-2 * j ^ 2 + j) * q ^ 6, -(j ^ 2) * q ^ 3 - j * q ^ 5, j * q ^ 3 + q ^ 4 + j ^ 2 * q ^ 5, 2 * q ^ 23 - 2 * q ^ 24, ((-(j ^ 2) * q ^ 44 + j ^ 2 * q ^ 45) - j * q ^ 46) + j * q ^ 47, -(q ^ 4) + q ^ 5, j ^ 2 * q ^ 2 + (-2 * j ^ 2 - j) * q ^ 4 + (-(j ^ 2) - 2j) * q ^ 6 + j * q ^ 8, -(q ^ 6), (-j * q ^ 3 + (j ^ 2 + 2j) * q ^ 4 + (2 * j ^ 2 + j) * q ^ 6) - j ^ 2 * q ^ 7, 2 * j ^ 2 * q ^ 3 + 2 * j * q ^ 4 + 2 * q ^ 5 + 2 * j ^ 2 * q ^ 6 + 2 * j * q ^ 7, -(q ^ 12), -2 * j ^ 2 * q ^ 4 - 2 * j * q ^ 6, j * q ^ 3 + 2 * q ^ 4 + q ^ 5 + 2 * q ^ 6 + j ^ 2 * q ^ 7, (((-(j ^ 2) + 2j) * q ^ 23 + (-(j ^ 2) - 6j) * q ^ 24) - 7 * q ^ 25) + (-6 * j ^ 2 - j) * q ^ 26 + (2 * j ^ 2 - j) * q ^ 27, j * q ^ 86 - j ^ 2 * q ^ 89, -2 * q ^ 44 + 2 * q ^ 45, ((((j ^ 2 * q ^ 3 - q ^ 4) + j * q ^ 5) - j ^ 2 * q ^ 6) + q ^ 7) - j * q ^ 8, ((j ^ 2 * q ^ 23 - j ^ 2 * q ^ 24) + j * q ^ 25) - j * q ^ 26, 3 * q ^ 65 - 3 * q ^ 66, 0, -j * q ^ 23 + j ^ 2 * q ^ 26, ((j * q ^ 2 + 2 * j ^ 2 * q ^ 3 + j * q ^ 4 + 4 * q ^ 5) - 2 * q ^ 6) + 4 * q ^ 7 + j ^ 2 * q ^ 8 + 2 * j * q ^ 9 + j ^ 2 * q ^ 10, q ^ 9, 2 * j * q ^ 106 + 3 * q ^ 107 + 2 * j ^ 2 * q ^ 108, 3 * q ^ 107 - 3 * q ^ 108, j * q ^ 6 + j ^ 2 * q ^ 10, (-2 * j ^ 2 - 5j) * q ^ 6 + (5 * j ^ 2 + 2j) * q ^ 9, 2 * j * q ^ 22 + 3 * q ^ 23 + 2 * j ^ 2 * q ^ 24, -(j ^ 2) * q ^ 45 - j * q ^ 47, (-2 * q ^ 43 + 4 * q ^ 44) - 2 * q ^ 45, -(j ^ 2) * q ^ 44 + j * q ^ 45, -j * q ^ 22 + (2 * j ^ 2 + 4j) * q ^ 23 + (-4 * j ^ 2 - 2j) * q ^ 24 + j ^ 2 * q ^ 25, (-(j ^ 2) * q ^ 13 - q ^ 14) - j * q ^ 15, (-(q ^ 43) + 2 * q ^ 44) - q ^ 45, ((((2 * j * q ^ 46 + j ^ 2 * q ^ 47) - 2 * j * q ^ 48) + (-3 * j ^ 2 - 2j) * q ^ 49 + (2 * j ^ 2 + 3j) * q ^ 50 + 2 * j ^ 2 * q ^ 51) - j * q ^ 52) - 2 * j ^ 2 * q ^ 53, -20 * q ^ 21, -j * q ^ 22 - j ^ 2 * q ^ 24, (-4 * q ^ 21 + 12 * q ^ 22) - 4 * q ^ 23, ((j * q ^ 24 + (j ^ 2 - j) * q ^ 25) - 3 * q ^ 26) + (-(j ^ 2) + j) * q ^ 27 + j ^ 2 * q ^ 28, ((q ^ 21 - 3 * q ^ 22) + 3 * q ^ 23) - q ^ 24, ((q ^ 21 - 9 * q ^ 22) + 9 * q ^ 23) - q ^ 24, (2 * q ^ 22 - 6 * q ^ 23) + 2 * q ^ 24, 2 * q ^ 5 + 3 * j * q ^ 6 + 3 * j ^ 2 * q ^ 8 + 2 * q ^ 9, ((-(j ^ 2) - 2j) * q ^ 22 - 2 * q ^ 23) + (-2 * j ^ 2 - j) * q ^ 24, (3 * q ^ 22 - 8 * q ^ 23) + 3 * q ^ 24, -j * q ^ 22 + (j ^ 2 + 3j) * q ^ 23 + (-3 * j ^ 2 - j) * q ^ 24 + j ^ 2 * q ^ 25, ((-(q ^ 21) - 9 * j ^ 2 * q ^ 23) - 9 * j * q ^ 25) - q ^ 27, ((((-(q ^ 21) - 6 * j * q ^ 22) - 3 * j ^ 2 * q ^ 23) - 3 * j * q ^ 25) - 6 * j ^ 2 * q ^ 26) - q ^ 27, ((2 * j ^ 2 * q ^ 23 - 2 * j ^ 2 * q ^ 24) + 2 * j * q ^ 25) - 2 * j * q ^ 26, ((((-(q ^ 22) + 3 * j ^ 2 * q ^ 23) - 6 * j ^ 2 * q ^ 24) + 6 * j * q ^ 25) - 3 * j * q ^ 26) + q ^ 27, (((j ^ 2 + 3j) * q ^ 22 + (2 * j ^ 2 - 4j) * q ^ 23) - j ^ 2 * q ^ 24) + j * q ^ 25 + (4 * j ^ 2 - 2j) * q ^ 26 + (-3 * j ^ 2 - j) * q ^ 27, ((((-(q ^ 3) + (-2 * j ^ 2 - j) * q ^ 4 + j * q ^ 5) - 2 * j * q ^ 6) + 2 * j ^ 2 * q ^ 7) - j ^ 2 * q ^ 8) + (j ^ 2 + 2j) * q ^ 9 + q ^ 10, 3 * j ^ 2 * q ^ 24 + q ^ 25 + 3 * j * q ^ 26, q ^ 25, 2 * j ^ 2 * q ^ 25 + 2 * j * q ^ 27, 10 * q ^ 21 - 10 * q ^ 22, (((((((-j * q ^ 23 - 2 * j ^ 2 * q ^ 24) - j * q ^ 25) - 4 * q ^ 26) + 2 * q ^ 27) - 4 * q ^ 28) - j ^ 2 * q ^ 29) - 2 * j * q ^ 30) - j ^ 2 * q ^ 31, ((q ^ 21 + 3 * j * q ^ 22) - 3 * j ^ 2 * q ^ 23) - q ^ 24, (-4 * q ^ 21 + 6 * q ^ 22) - 4 * q ^ 23, (j * q ^ 85 + (-2 * j ^ 2 - 4j) * q ^ 86 + (4 * j ^ 2 + 2j) * q ^ 87) - j ^ 2 * q ^ 88, ((q ^ 21 - 6 * q ^ 22) + 6 * q ^ 23) - q ^ 24, (2 * j ^ 2 + 5j) * q ^ 27 + (-5 * j ^ 2 - 2j) * q ^ 30, j ^ 2 * q ^ 66 + j * q ^ 68, (j * q ^ 43 + (-2 * j ^ 2 - 4j) * q ^ 44 + (4 * j ^ 2 + 2j) * q ^ 45) - j ^ 2 * q ^ 46, (q ^ 64 - 2 * q ^ 65) + q ^ 66, j ^ 2 * q ^ 24 + j * q ^ 26, -(q ^ 18), (2 * q ^ 22 - 4 * q ^ 23) + 2 * q ^ 24, ((((2 * j * q ^ 4 + j ^ 2 * q ^ 5) - 2 * j * q ^ 6) + (-3 * j ^ 2 - 2j) * q ^ 7 + (2 * j ^ 2 + 3j) * q ^ 8 + 2 * j ^ 2 * q ^ 9) - j * q ^ 10) - 2 * j ^ 2 * q ^ 11, 20 * q ^ 42, (-j * q ^ 45 + (-(j ^ 2) + j) * q ^ 46 + 3 * q ^ 47 + (j ^ 2 - j) * q ^ 48) - j ^ 2 * q ^ 49, (4 * q ^ 42 - 12 * q ^ 43) + 4 * q ^ 44, ((-(q ^ 42) + 3 * q ^ 43) - 3 * q ^ 44) + q ^ 45, ((-(q ^ 42) + 9 * q ^ 43) - 9 * q ^ 44) + q ^ 45, ((j ^ 2 - j) * q ^ 43 - q ^ 44) + (-(j ^ 2) + j) * q ^ 45, (j * q ^ 43 + (-(j ^ 2) - 3j) * q ^ 44 + (3 * j ^ 2 + j) * q ^ 45) - j ^ 2 * q ^ 46, j * q ^ 44 - j ^ 2 * q ^ 47, q ^ 42 + 9 * j ^ 2 * q ^ 44 + 9 * j * q ^ 46 + q ^ 48, ((((q ^ 43 - 3 * j ^ 2 * q ^ 44) + 6 * j ^ 2 * q ^ 45) - 6 * j * q ^ 46) + 3 * j * q ^ 47) - q ^ 48, ((-2 * j ^ 2 * q ^ 44 + 2 * j ^ 2 * q ^ 45) - 2 * j * q ^ 46) + 2 * j * q ^ 47, -(q ^ 46), -10 * q ^ 42 + 10 * q ^ 43, (4 * q ^ 42 - 6 * q ^ 43) + 4 * q ^ 44, ((-(q ^ 42) + 6 * q ^ 43) - 6 * q ^ 44) + q ^ 45, (-2 * j ^ 2 - 5j) * q ^ 48 + (5 * j ^ 2 + 2j) * q ^ 51, (-2 * j * q ^ 43 - 3 * q ^ 44) - 2 * j ^ 2 * q ^ 45, (-(q ^ 85) + 2 * q ^ 86) - q ^ 87, (((-2 * j * q ^ 25 - j ^ 2 * q ^ 26) + 2 * j * q ^ 27 + (3 * j ^ 2 + 2j) * q ^ 28 + (-2 * j ^ 2 - 3j) * q ^ 29) - 2 * j ^ 2 * q ^ 30) + j * q ^ 31 + 2 * j ^ 2 * q ^ 32, -20 * q ^ 63, ((6 * q ^ 18 - 4 * q ^ 19) - 4 * q ^ 27) + 6 * q ^ 28, ((j * q ^ 66 + (j ^ 2 - j) * q ^ 67) - 3 * q ^ 68) + (-(j ^ 2) + j) * q ^ 69 + j ^ 2 * q ^ 70, ((q ^ 63 - 3 * q ^ 64) + 3 * q ^ 65) - q ^ 66, (j ^ 2 - 2j) * q ^ 4 + 2 * j ^ 2 * q ^ 5 + (-2 * j ^ 2 + 4j) * q ^ 6 + 4 * q ^ 7 + (4 * j ^ 2 - 2j) * q ^ 8 + 2 * j * q ^ 9 + (-2 * j ^ 2 + j) * q ^ 10, -j * q ^ 65 + j ^ 2 * q ^ 68, ((-(q ^ 63) - 9 * j ^ 2 * q ^ 65) - 9 * j * q ^ 67) - q ^ 69, (((((q ^ 3 - 3 * j ^ 2 * q ^ 4) - 6 * j * q ^ 5) - 6 * q ^ 6) - 6 * j ^ 2 * q ^ 7) + 6 * j * q ^ 8 + 6 * q ^ 9 + 6 * j ^ 2 * q ^ 10 + 3 * j * q ^ 11) - q ^ 12, ((2 * j ^ 2 * q ^ 65 - 2 * j ^ 2 * q ^ 66) + 2 * j * q ^ 67) - 2 * j * q ^ 68, q ^ 67, -10 * q ^ 18 + 10 * q ^ 27, (-4 * q ^ 63 + 6 * q ^ 64) - 4 * q ^ 65, (4 * j ^ 2 + 2j) * q ^ 5 + (-6 * j ^ 2 + 6j) * q ^ 6 + (-8 * j ^ 2 - 16j) * q ^ 7 + (11 * j ^ 2 + 9j) * q ^ 8 + (-9 * j ^ 2 - 11j) * q ^ 9 + (16 * j ^ 2 + 8j) * q ^ 10 + (-6 * j ^ 2 + 6j) * q ^ 11 + (-2 * j ^ 2 - 4j) * q ^ 12, 2 * j * q ^ 64 + 3 * q ^ 65 + 2 * j ^ 2 * q ^ 66, 20 * q ^ 84, (-j * q ^ 87 + (-(j ^ 2) + j) * q ^ 88 + 3 * q ^ 89 + (j ^ 2 - j) * q ^ 90) - j ^ 2 * q ^ 91, (4 * q ^ 84 - 12 * q ^ 85) + 4 * q ^ 86, 3 * q ^ 23 - 3 * q ^ 24, -10 * q ^ 84 + 10 * q ^ 85, (4 * q ^ 84 - 6 * q ^ 85) + 4 * q ^ 86, (-4 * j ^ 2 - 2j) * q ^ 26 + (6 * j ^ 2 - 6j) * q ^ 27 + (8 * j ^ 2 + 16j) * q ^ 28 + (-11 * j ^ 2 - 9j) * q ^ 29 + (9 * j ^ 2 + 11j) * q ^ 30 + (-16 * j ^ 2 - 8j) * q ^ 31 + (6 * j ^ 2 - 6j) * q ^ 32 + (2 * j ^ 2 + 4j) * q ^ 33, ((-(q ^ 84) + 3 * q ^ 85) - 3 * q ^ 86) + q ^ 87, -20 * q ^ 105, ((j * q ^ 108 + (j ^ 2 - j) * q ^ 109) - 3 * q ^ 110) + (-(j ^ 2) + j) * q ^ 111 + j ^ 2 * q ^ 112, (-4 * q ^ 105 + 12 * q ^ 106) - 4 * q ^ 107, 10 * q ^ 105 - 10 * q ^ 106, (-4 * q ^ 105 + 6 * q ^ 106) - 4 * q ^ 107, (4 * j ^ 2 + 2j) * q ^ 47 + (-6 * j ^ 2 + 6j) * q ^ 48 + (-8 * j ^ 2 - 16j) * q ^ 49 + (11 * j ^ 2 + 9j) * q ^ 50 + (-9 * j ^ 2 - 11j) * q ^ 51 + (16 * j ^ 2 + 8j) * q ^ 52 + (-6 * j ^ 2 + 6j) * q ^ 53 + (-2 * j ^ 2 - 4j) * q ^ 54, ((q ^ 105 - 3 * q ^ 106) + 3 * q ^ 107) - q ^ 108]
            end
        f13 = (q->begin
                    [21, -15 + 6q, 9 - 6q, (11 - 8q) + 2 * q ^ 2, (-7 + 6q) - 2 * q ^ 2, -5 + 4q, -3 + 3q, ((-8 + 9q) - 3 * q ^ 2) + q ^ 3, -3 + 3 * q ^ 2, (3 - 2 * q ^ 2) + q ^ 3, (5 - 4q) + 2 * q ^ 2, 3 - 2q, 1 - q, (1 + 2q) - 3 * q ^ 2, (4 - 4q) + q ^ 2, (3 - 2q) + q ^ 2, ((5 - 7q) + 2 * q ^ 2) - q ^ 3, -2 + 3q, ((-1 - q) + 3 * q ^ 2) - q ^ 3, -1, -3q + 3 * q ^ 2, (-1 - 2q) + 2 * q ^ 2, 0, (-3 + 3q) - q ^ 2, -2 + q, -1 + q, 3 - 9 * q ^ 2, 0, (2q - 2 * q ^ 2) - q ^ 3, (1 + q) - 3 * q ^ 2, 0, (3 - 6q) - 3 * q ^ 4, -q + q ^ 2 + q ^ 3, -q + q ^ 2 + q ^ 3, (-3 + 6 * q ^ 2) - 3 * q ^ 3, -1 + q ^ 2, (((-3 + 4q) - 2 * q ^ 2) + 2 * q ^ 4) - q ^ 5, -1 + q ^ 3, ((-1 - q) + 2 * q ^ 2) - q ^ 3, -1 + 4 * q ^ 2, -2q + q ^ 2, (((-1 + 6q) - 6 * q ^ 2) + 3 * q ^ 3 + 3 * q ^ 4) - 2 * q ^ 5, 0, (-2 * q ^ 2 + 2 * q ^ 3 + q ^ 4) - q ^ 5, ((((1 - 4q) + 6 * q ^ 2) - 3 * q ^ 3) - 2 * q ^ 4) + 2 * q ^ 5, 1 - q ^ 2, 3 * q ^ 60 - 2 * q ^ 61, 3 * q ^ 12 - 2 * q ^ 13, (1 - 3 * q ^ 2) + q ^ 3, -(q ^ 3), -(q ^ 2) - q ^ 3, (((((1 - 4q) + 6 * q ^ 2) - 4 * q ^ 3) - q ^ 4) + 2 * q ^ 5) - q ^ 6, (((-6q + 10 * q ^ 2) - 6 * q ^ 3) - 3 * q ^ 4) + 3 * q ^ 5, q - q ^ 3, q ^ 2 - 2 * q ^ 3, -2 * q ^ 12 + 3 * q ^ 13, -(q ^ 25) + q ^ 26 + q ^ 27, (q - q ^ 2) + 2 * q ^ 3 + q ^ 4, (((1 - 4q) + 4 * q ^ 2) - 4 * q ^ 4) + 2 * q ^ 5, 0, -2 * q ^ 4 + q ^ 5, ((-3q + 3 * q ^ 2) - 4 * q ^ 4) + 3 * q ^ 5, 0, 1 - 2 * q ^ 3, (3 * q ^ 2 - 3 * q ^ 3) + q ^ 5, (((-6 * q ^ 13 + 10 * q ^ 14) - 6 * q ^ 15) - 3 * q ^ 16) + 3 * q ^ 17, (-2 * q ^ 50 + 2 * q ^ 51 + q ^ 52) - q ^ 53, -2 * q ^ 24 + 3 * q ^ 25, ((((4q - 5 * q ^ 2) - q ^ 3) + 6 * q ^ 4) - 2 * q ^ 5) - q ^ 6, -(q ^ 13) + q ^ 14 + q ^ 15, (-3 * q ^ 36 + 3 * q ^ 37) - q ^ 38, q ^ 3, (-2 * q ^ 14 + 2 * q ^ 15 + q ^ 16) - q ^ 17, (((1 - q ^ 2) + 2 * q ^ 3) - 3 * q ^ 4) + 4 * q ^ 5, 0, (q ^ 60 + 2 * q ^ 61) - 3 * q ^ 62, (-3 * q ^ 60 + 3 * q ^ 61) - q ^ 62, ((-(q ^ 2) + 2 * q ^ 3) - 2 * q ^ 5) + q ^ 6, 3 * q ^ 4 - 3 * q ^ 5, (q ^ 12 + 2 * q ^ 13) - 3 * q ^ 14, -(q ^ 26) - q ^ 27, (4 * q ^ 24 - 4 * q ^ 25) + q ^ 26, 0, -3 * q ^ 13 + 3 * q ^ 14, -(q ^ 8), 3 * q ^ 24 - 2 * q ^ 25, (((2 * q ^ 26 - 3 * q ^ 27) + q ^ 28 + 6 * q ^ 29) - 4 * q ^ 30) + q ^ 31, 21 * q ^ 12, q ^ 12 - q ^ 13, (11 * q ^ 12 - 8 * q ^ 13) + 2 * q ^ 14, ((3 * q ^ 14 - q ^ 15) - 4 * q ^ 16) + 3 * q ^ 17, -5 * q ^ 12 + 4 * q ^ 13, ((-8 * q ^ 12 + 9 * q ^ 13) - 3 * q ^ 14) + q ^ 15, (5 * q ^ 12 - 4 * q ^ 13) + 2 * q ^ 14, (2 * q ^ 3 - 2 * q ^ 4) + 2 * q ^ 5, (3 * q ^ 12 - 2 * q ^ 13) + q ^ 14, ((5 * q ^ 12 - 7 * q ^ 13) + 2 * q ^ 14) - q ^ 15, ((-(q ^ 12) - q ^ 13) + 3 * q ^ 14) - q ^ 15, 3 * q ^ 12 - 9 * q ^ 14, (3 * q ^ 12 - 6 * q ^ 13) - 3 * q ^ 16, -(q ^ 12) + 4 * q ^ 14, (-3 * q ^ 12 + 6 * q ^ 14) - 3 * q ^ 15, (((-3 * q ^ 12 + 4 * q ^ 13) - 2 * q ^ 14) + 2 * q ^ 16) - q ^ 17, (((2 * q ^ 2 - 6 * q ^ 3) + 4 * q ^ 4 + q ^ 5) - 3 * q ^ 6) + q ^ 7, (q ^ 12 - 3 * q ^ 14) + q ^ 15, q ^ 12 - q ^ 14, q ^ 12 - 2 * q ^ 15, -15 * q ^ 12 + 6 * q ^ 13, (((q ^ 12 - q ^ 14) + 2 * q ^ 15) - 3 * q ^ 16) + 4 * q ^ 17, -3 * q ^ 12 + 3 * q ^ 13, 9 * q ^ 12 - 6 * q ^ 13, -3 * q ^ 49 + 3 * q ^ 50, (-7 * q ^ 12 + 6 * q ^ 13) - 2 * q ^ 14, 3 * q ^ 16 - 3 * q ^ 17, -(q ^ 38) - q ^ 39, -3 * q ^ 25 + 3 * q ^ 26, 3 * q ^ 36 - 2 * q ^ 37, -(q ^ 14) - q ^ 15, 0, (4 * q ^ 12 - 4 * q ^ 13) + q ^ 14, (((2 * q ^ 2 - 3 * q ^ 3) + q ^ 4 + 6 * q ^ 5) - 4 * q ^ 6) + q ^ 7, 21 * q ^ 24, ((3 * q ^ 26 - q ^ 27) - 4 * q ^ 28) + 3 * q ^ 29, (11 * q ^ 24 - 8 * q ^ 25) + 2 * q ^ 26, -5 * q ^ 24 + 4 * q ^ 25, ((-8 * q ^ 24 + 9 * q ^ 25) - 3 * q ^ 26) + q ^ 27, (3 * q ^ 24 - 2 * q ^ 26) + q ^ 27, ((-(q ^ 24) - q ^ 25) + 3 * q ^ 26) - q ^ 27, (-2 * q ^ 26 + 2 * q ^ 27 + q ^ 28) - q ^ 29, 3 * q ^ 24 - 9 * q ^ 26, (-3 * q ^ 24 + 6 * q ^ 26) - 3 * q ^ 27, -(q ^ 24) + 4 * q ^ 26, q ^ 24 - q ^ 26, -15 * q ^ 24 + 6 * q ^ 25, 9 * q ^ 24 - 6 * q ^ 25, (-7 * q ^ 24 + 6 * q ^ 25) - 2 * q ^ 26, 3 * q ^ 28 - 3 * q ^ 29, (q ^ 24 + 2 * q ^ 25) - 3 * q ^ 26, 3 * q ^ 48 - 2 * q ^ 49, (((2 * q ^ 14 - 3 * q ^ 15) + q ^ 16 + 6 * q ^ 17) - 4 * q ^ 18) + q ^ 19, 21 * q ^ 36, ((11 * q ^ 12 - 4 * q ^ 13) - 4 * q ^ 15) + 2 * q ^ 16, ((3 * q ^ 38 - q ^ 39) - 4 * q ^ 40) + 3 * q ^ 41, -5 * q ^ 36 + 4 * q ^ 37, ((((-4 * q ^ 2 + 6 * q ^ 3 + 2 * q ^ 4) - 6 * q ^ 5) + 2 * q ^ 6 + 2 * q ^ 7) - q ^ 8) + q ^ 10, (-2 * q ^ 38 + 2 * q ^ 39 + q ^ 40) - q ^ 41, 3 * q ^ 36 - 9 * q ^ 38, ((((15 * q ^ 2 - 24 * q ^ 3) + 27 * q ^ 5) - 24 * q ^ 6) + 9 * q ^ 7) - 3 * q ^ 8, -(q ^ 36) + 4 * q ^ 38, q ^ 36 - q ^ 38, -15 * q ^ 12 + 6 * q ^ 15, 9 * q ^ 36 - 6 * q ^ 37, (((((4 * q ^ 2 - 7 * q ^ 3) - 9 * q ^ 4) + 25 * q ^ 5) - 17 * q ^ 6) + 2 * q ^ 7 + q ^ 8) - 2 * q ^ 9, (q ^ 36 + 2 * q ^ 37) - 3 * q ^ 38, 21 * q ^ 48, ((3 * q ^ 50 - q ^ 51) - 4 * q ^ 52) + 3 * q ^ 53, (11 * q ^ 48 - 8 * q ^ 49) + 2 * q ^ 50, (-3 * q ^ 12 + 3 * q ^ 13) - q ^ 14, -15 * q ^ 48 + 6 * q ^ 49, 9 * q ^ 48 - 6 * q ^ 49, (((((4 * q ^ 14 - 7 * q ^ 15) - 9 * q ^ 16) + 25 * q ^ 17) - 17 * q ^ 18) + 2 * q ^ 19 + q ^ 20) - 2 * q ^ 21, -5 * q ^ 48 + 4 * q ^ 49, 21 * q ^ 60, ((3 * q ^ 62 - q ^ 63) - 4 * q ^ 64) + 3 * q ^ 65, (11 * q ^ 60 - 8 * q ^ 61) + 2 * q ^ 62, -15 * q ^ 60 + 6 * q ^ 61, 9 * q ^ 60 - 6 * q ^ 61, (((((4 * q ^ 26 - 7 * q ^ 27) - 9 * q ^ 28) + 25 * q ^ 29) - 17 * q ^ 30) + 2 * q ^ 31 + q ^ 32) - 2 * q ^ 33, -5 * q ^ 60 + 4 * q ^ 61]
                end)
        f15 = function (q, j)
                return [21, -5 + 16q, -5q + 11 * q ^ 2, (1 - 8q) + 12 * q ^ 2, (q - 7 * q ^ 2) + 8 * q ^ 3, -4 * q ^ 2 + 7 * q ^ 3, (2 * j ^ 2 + 3j) * q ^ 2 + 6 * q ^ 3, (3q - 9 * q ^ 2) + 9 * q ^ 3, (3 * j ^ 2 + 2j) * q + 6 * q ^ 3, ((-(j ^ 2) * q - 2 * q ^ 2) - 2 * q ^ 3) + 4 * q ^ 4, (q ^ 2 - 6 * q ^ 3) + 5 * q ^ 4, -3 * q ^ 3 + 4 * q ^ 4, (j ^ 2 + 2j) * q ^ 3 + 3 * q ^ 4, (3 * j ^ 2 + 2j) * q ^ 2 + q ^ 3 + 3 * q ^ 4, (q ^ 2 - 5 * q ^ 3) + 5 * q ^ 4, (-j * q ^ 2 - 4 * q ^ 3) + 4 * q ^ 4, (3 * q ^ 2 - 7 * q ^ 3) + 6 * q ^ 4, (q ^ 3 - 3 * q ^ 4) + 3 * q ^ 5, (-(j ^ 2) * q ^ 2 - 2 * q ^ 3) + 2 * q ^ 5, -(q ^ 4) + q ^ 5, (3 * j ^ 2 + 2j) * q ^ 3 + 2 * q ^ 4 + q ^ 5, -2 * q ^ 3 + q ^ 4 + q ^ 5, j * q ^ 4 + q ^ 5, (q ^ 3 - 4 * q ^ 4) + 3 * q ^ 5, -2 * q ^ 4 + 2 * q ^ 5, (-j * q ^ 3 - 2 * q ^ 4) + 2 * q ^ 5, (9 * j ^ 2 + 6j) * q ^ 4 + 6 * q ^ 6, 0, (2 * j ^ 2 + j) * q ^ 4 + (-3 * j ^ 2 - 2j) * q ^ 5 + q ^ 6, (3 * j ^ 2 + 2j) * q ^ 4 + (-2 * j ^ 2 - j) * q ^ 5 + 3 * q ^ 6, 0, (2 * j ^ 2 + 3j) * q ^ 2 + (4 * j ^ 2 + 6j) * q ^ 5 + 6 * q ^ 6, -(q ^ 5) + 2 * q ^ 6, (2 * j ^ 2 + j) * q ^ 5 + (-2 * j ^ 2 - j) * q ^ 6 + q ^ 7, ((-3 * j ^ 2 * q ^ 4 - 6 * q ^ 5) - 2 * q ^ 6) + 4 * q ^ 7, (j ^ 2 + 2j) * q ^ 5 + q ^ 6 + q ^ 7, (((-j * q ^ 2 - 2 * q ^ 3) - 2 * j * q ^ 5) - 6 * q ^ 6) + 4 * q ^ 7, (j ^ 2 * q ^ 4 - q ^ 5) + q ^ 6 + q ^ 7, -(j ^ 2) * q ^ 4 + (3 * j ^ 2 + 2j) * q ^ 5 + 2 * q ^ 7, (5 * j ^ 2 + 3j) * q ^ 5 + 3 * q ^ 7, -2 * q ^ 5 + 2 * q ^ 6, q ^ 2 + (2 * j ^ 2 + 3j) * q ^ 3 + (3 * j ^ 2 + 2j) * q ^ 4 + 5 * q ^ 5 + (4 * j ^ 2 + 6j) * q ^ 6 + 3 * q ^ 7, (-(q ^ 5) - j ^ 2 * q ^ 6) + q ^ 7, ((-(q ^ 3) + (2 * j ^ 2 + j) * q ^ 4 + (-(j ^ 2) - 2j) * q ^ 5) - j ^ 2 * q ^ 6) + q ^ 7, (((q ^ 3 - 2 * q ^ 4) + (3 * j ^ 2 + 2j) * q ^ 5 + 5 * q ^ 6) - 4 * q ^ 7) + q ^ 8, (2 * j ^ 2 + 3j) * q ^ 6 + q ^ 8, -3 * j * q ^ 163 + 4 * j * q ^ 164, -3 * j ^ 2 * q ^ 35 + 4 * j ^ 2 * q ^ 36, ((-2 * j ^ 2 * q ^ 5 - 3 * q ^ 6) - q ^ 7) + 2 * q ^ 8, j * q ^ 6 + q ^ 7, (2 * j ^ 2 + j) * q ^ 6 + q ^ 8, (((((-(j ^ 2) - 2j) * q ^ 3 + (j ^ 2 + 2j) * q ^ 4) - 3 * q ^ 5) + (-4 * j ^ 2 - 6j) * q ^ 6) - 5 * q ^ 7) + 2 * q ^ 8, q ^ 3 + (2 * j ^ 2 + 3j) * q ^ 4 + (5 * j ^ 2 + 3j) * q ^ 5 + 9 * q ^ 6 + (4 * j ^ 2 + 6j) * q ^ 7 + q ^ 8, -(q ^ 6) + q ^ 7, j ^ 2 * q ^ 5 + q ^ 7, (j ^ 2 * q ^ 35 - 3 * j ^ 2 * q ^ 36) + 3 * j ^ 2 * q ^ 37, (-(j ^ 2) - 2j) * q ^ 69 + (j ^ 2 + 2j) * q ^ 70 + j * q ^ 71, (((-(q ^ 5) - j * q ^ 6) + q ^ 7) - j ^ 2 * q ^ 8) + q ^ 9, ((((-2 * j ^ 2 * q ^ 5 + (4 * j ^ 2 + 2j) * q ^ 6) - 2 * q ^ 7) + (-7 * j ^ 2 - 5j) * q ^ 8) - 4 * q ^ 9) + q ^ 10, 0, -2 * q ^ 6 + (j ^ 2 - j) * q ^ 7 + q ^ 10, q ^ 5 + (3 * j ^ 2 + 4j) * q ^ 6 + (j ^ 2 - j) * q ^ 7 + (-4 * j ^ 2 - 2j) * q ^ 8 + (2 * j ^ 2 + 3j) * q ^ 9 + q ^ 10, 0, (2 * j ^ 2 * q ^ 7 - q ^ 8) + q ^ 10, ((-(q ^ 6) + (3 * j ^ 2 + 2j) * q ^ 7 + 3 * q ^ 8) - j ^ 2 * q ^ 9) + q ^ 10, j ^ 2 * q ^ 35 + (-3 * j ^ 2 - j) * q ^ 36 + (-3 * j ^ 2 + 2j) * q ^ 37 + 9 * j ^ 2 * q ^ 38 + (-6 * j ^ 2 - 2j) * q ^ 39 + j ^ 2 * q ^ 40, ((-(j ^ 2) * q ^ 131 + (-(j ^ 2) + j) * q ^ 132 + (2 * j ^ 2 + j) * q ^ 133) - j * q ^ 134) + j ^ 2 * q ^ 135, (j * q ^ 67 - 3 * j * q ^ 68) + 3 * j * q ^ 69, (((-2 * j ^ 2 * q ^ 6 + (6 * j ^ 2 + 3j) * q ^ 7) - q ^ 8) + (-9 * j ^ 2 - 7j) * q ^ 9) - 4 * q ^ 10, (-(j ^ 2) + j) * q ^ 37 + (j ^ 2 - j) * q ^ 38 + j ^ 2 * q ^ 39, (q ^ 99 - 4 * q ^ 100) + 3 * q ^ 101, j ^ 2 * q ^ 8, ((-(j ^ 2) * q ^ 35 + (-(j ^ 2) + j) * q ^ 36 + (2 * j ^ 2 + j) * q ^ 37) - j * q ^ 38) + j ^ 2 * q ^ 39, 2 * q ^ 7 + (2 * j ^ 2 + 3j) * q ^ 8 + 2 * j ^ 2 * q ^ 9 + (j ^ 2 + 2j) * q ^ 10 + 3 * q ^ 12, 0, (-(j ^ 2) - 3j) * q ^ 162 + j * q ^ 163 + 3 * j * q ^ 164, (j * q ^ 163 - 4 * j * q ^ 164) + 3 * j * q ^ 165, ((3 * j ^ 2 + j) * q ^ 12 + (-4 * j ^ 2 - 2j) * q ^ 13) - q ^ 14, -3 * q ^ 11 + (2 * j ^ 2 - j) * q ^ 12 + q ^ 15, (-2 * j ^ 2 + j) * q ^ 34 + j ^ 2 * q ^ 35 + 3 * j ^ 2 * q ^ 36, (-(j ^ 2) - 2j) * q ^ 70 + j * q ^ 72, (j * q ^ 66 - 5 * j * q ^ 67) + 5 * j * q ^ 68, j ^ 2 * q ^ 68 + j * q ^ 69, (-2 * j ^ 2 + j) * q ^ 35 + 2 * j ^ 2 * q ^ 36 + j ^ 2 * q ^ 37, (-(q ^ 21) + q ^ 22) - q ^ 23, -3 * j * q ^ 67 + 4 * j * q ^ 68, j * q ^ 73 + (j ^ 2 - 3j) * q ^ 74 + (-2 * j ^ 2 - j) * q ^ 75 + (-(j ^ 2) + 4j) * q ^ 76 + (2 * j ^ 2 - 3j) * q ^ 77 + j * q ^ 79, 21 * j ^ 2 * q ^ 32, (-2 * j ^ 2 - j) * q ^ 35 + 3 * j ^ 2 * q ^ 36, (j ^ 2 * q ^ 32 - 8 * j ^ 2 * q ^ 33) + 12 * j ^ 2 * q ^ 34, j ^ 2 * q ^ 37 + (-4 * j ^ 2 - j) * q ^ 38 + 2 * j * q ^ 39 + (3 * j ^ 2 - j) * q ^ 40 + j ^ 2 * q ^ 42, -4 * j ^ 2 * q ^ 34 + 7 * j ^ 2 * q ^ 35, (3 * j ^ 2 * q ^ 33 - 9 * j ^ 2 * q ^ 34) + 9 * j ^ 2 * q ^ 35, (j ^ 2 * q ^ 34 - 6 * j ^ 2 * q ^ 35) + 5 * j ^ 2 * q ^ 36, (-(q ^ 10) - 2 * j * q ^ 11) + j * q ^ 12 + q ^ 14, (-(q ^ 34) - 4 * j ^ 2 * q ^ 35) + 4 * j ^ 2 * q ^ 36, (3 * j ^ 2 * q ^ 34 - 7 * j ^ 2 * q ^ 35) + 6 * j ^ 2 * q ^ 36, (-j * q ^ 34 - 2 * j ^ 2 * q ^ 35) + 2 * j ^ 2 * q ^ 37, (-6 * j ^ 2 + 3j) * q ^ 36 + 6 * j ^ 2 * q ^ 38, (-3 * j ^ 2 - j) * q ^ 34 + (-6 * j ^ 2 - 2j) * q ^ 37 + 6 * j ^ 2 * q ^ 38, (-3 * j ^ 2 + 2j) * q ^ 37 + 3 * j ^ 2 * q ^ 39, ((-3 * j * q ^ 36 - 6 * j ^ 2 * q ^ 37) - 2 * j ^ 2 * q ^ 38) + 4 * j ^ 2 * q ^ 39, (((-(q ^ 34) - 2 * j ^ 2 * q ^ 35) - 2 * q ^ 37) - 6 * j ^ 2 * q ^ 38) + 4 * j ^ 2 * q ^ 39, 2 * q ^ 7 + (2 * j ^ 2 + 3j) * q ^ 8 + (3 * j ^ 2 + 2j) * q ^ 9 + (-3 * j ^ 2 - 5j) * q ^ 10 + (j ^ 2 + 3j) * q ^ 11 + q ^ 13, ((-2 * j * q ^ 37 - 3 * j ^ 2 * q ^ 38) - j ^ 2 * q ^ 39) + 2 * j ^ 2 * q ^ 40, (-3 * j ^ 2 - j) * q ^ 38 + j ^ 2 * q ^ 40, (2 * j * q ^ 39 - j ^ 2 * q ^ 40) + j ^ 2 * q ^ 42, -5 * j ^ 2 * q ^ 32 + 16 * j ^ 2 * q ^ 33, 2 * j ^ 2 * q ^ 39 + (-3 * j ^ 2 - j) * q ^ 40 + 2 * j * q ^ 41 + (-2 * j ^ 2 - j) * q ^ 42 + 3 * j ^ 2 * q ^ 44, (-3 * j ^ 2 - j) * q ^ 34 + 6 * j ^ 2 * q ^ 35, -5 * j ^ 2 * q ^ 33 + 11 * j ^ 2 * q ^ 34, (-2 * j ^ 2 + j) * q ^ 131 + 2 * j ^ 2 * q ^ 132 + j ^ 2 * q ^ 133, (j ^ 2 * q ^ 33 - 7 * j ^ 2 * q ^ 34) + 8 * j ^ 2 * q ^ 35, -3 * j ^ 2 * q ^ 43 + (j ^ 2 + 3j) * q ^ 44 + j ^ 2 * q ^ 47, (2 * j ^ 2 + j) * q ^ 102 + q ^ 104, (-(j ^ 2) - 3j) * q ^ 67 + 2 * j * q ^ 68 + j * q ^ 69, -3 * q ^ 99 + 4 * q ^ 100, (-(j ^ 2) + j) * q ^ 38 + j ^ 2 * q ^ 40, 0, (j ^ 2 * q ^ 34 - 5 * j ^ 2 * q ^ 35) + 5 * j ^ 2 * q ^ 36, q ^ 9 + (3 * j ^ 2 + 4j) * q ^ 10 + (j ^ 2 - j) * q ^ 11 + (-4 * j ^ 2 - 5j) * q ^ 12 + (3 * j ^ 2 + 5j) * q ^ 13 + q ^ 15, 21 * j * q ^ 64, j * q ^ 69 + (j ^ 2 - 3j) * q ^ 70 + 2 * q ^ 71 + (j ^ 2 + 4j) * q ^ 72 + j * q ^ 74, (j * q ^ 64 - 8 * j * q ^ 65) + 12 * j * q ^ 66, -4 * j * q ^ 66 + 7 * j * q ^ 67, (3 * j * q ^ 65 - 9 * j * q ^ 66) + 9 * j * q ^ 67, ((-(q ^ 65) - 2 * j * q ^ 66) - 2 * j * q ^ 67) + 4 * j * q ^ 68, (-(q ^ 66) - 2 * j * q ^ 67) + 2 * j * q ^ 69, ((-j * q ^ 67 + (-(j ^ 2) - 2j) * q ^ 68 + (-(j ^ 2) + j) * q ^ 69) - q ^ 70) + j * q ^ 71, (-3 * j ^ 2 - 9j) * q ^ 68 + 6 * j * q ^ 70, ((-3 * q ^ 68 - 6 * j * q ^ 69) - 2 * j * q ^ 70) + 4 * j * q ^ 71, (-2 * j ^ 2 - 5j) * q ^ 69 + 3 * j * q ^ 71, (j ^ 2 - 2j) * q ^ 70 + j * q ^ 72, -5 * j * q ^ 64 + 16 * j * q ^ 65, -5 * j * q ^ 65 + 11 * j * q ^ 66, (j * q ^ 65 - 7 * j * q ^ 66) + 8 * j * q ^ 67, -3 * j * q ^ 75 + (-3 * j ^ 2 - 2j) * q ^ 76 + j * q ^ 79, (-(j ^ 2) - 3j) * q ^ 66 + j * q ^ 67 + 3 * j * q ^ 68, -3 * j ^ 2 * q ^ 131 + 4 * j ^ 2 * q ^ 132, j ^ 2 * q ^ 41 + (-4 * j ^ 2 - j) * q ^ 42 + (j ^ 2 + 2j) * q ^ 43 + (5 * j ^ 2 + j) * q ^ 44 + (-5 * j ^ 2 - 2j) * q ^ 45 + j ^ 2 * q ^ 47, 21 * q ^ 96, ((-4 * q ^ 33 + 11 * q ^ 34 + q ^ 36) - 4 * q ^ 37) + q ^ 46, q ^ 101 + (3 * j ^ 2 + 4j) * q ^ 102 + 2 * j ^ 2 * q ^ 103 + (-4 * j ^ 2 - 3j) * q ^ 104 + q ^ 106, -4 * q ^ 98 + 7 * q ^ 99, ((q ^ 6 + 2 * q ^ 7 + (j ^ 2 + 2j) * q ^ 8) - 6 * q ^ 9) + (-2 * j ^ 2 - 5j) * q ^ 10 + 6 * q ^ 11 + (4 * j ^ 2 + 7j) * q ^ 12 + q ^ 14, ((-(q ^ 99) + (2 * j ^ 2 + j) * q ^ 100 + (-(j ^ 2) - 2j) * q ^ 101) - j ^ 2 * q ^ 102) + q ^ 103, (9 * j ^ 2 + 6j) * q ^ 100 + 6 * q ^ 102, 11 * q ^ 9 + (18 * j ^ 2 + 24j) * q ^ 10 + 9 * j ^ 2 * q ^ 11 + 26 * q ^ 12 + (12 * j ^ 2 + 18j) * q ^ 13 + q ^ 15, (5 * j ^ 2 + 3j) * q ^ 101 + 3 * q ^ 103, (2 * j ^ 2 + 3j) * q ^ 102 + q ^ 104, (15 * q ^ 33 - 5 * q ^ 36) + q ^ 45, -5 * q ^ 97 + 11 * q ^ 98, 3 * q ^ 10 + 7 * q ^ 11 + (17 * j ^ 2 + 21j) * q ^ 12 + (-(j ^ 2) - 9j) * q ^ 13 + (-12 * j ^ 2 - 10j) * q ^ 14 + (5 * j ^ 2 + 7j) * q ^ 15 + q ^ 17, (3 * j ^ 2 + 2j) * q ^ 98 + q ^ 99 + 3 * q ^ 100, 21 * j ^ 2 * q ^ 128, j ^ 2 * q ^ 133 + (-4 * j ^ 2 - j) * q ^ 134 + 2 * j * q ^ 135 + (3 * j ^ 2 - j) * q ^ 136 + j ^ 2 * q ^ 138, (j ^ 2 * q ^ 128 - 8 * j ^ 2 * q ^ 129) + 12 * j ^ 2 * q ^ 130, (j ^ 2 * q ^ 35 - 4 * j ^ 2 * q ^ 36) + 3 * j ^ 2 * q ^ 37, -5 * j ^ 2 * q ^ 128 + 16 * j ^ 2 * q ^ 129, -5 * j ^ 2 * q ^ 129 + 11 * j ^ 2 * q ^ 130, 3 * j ^ 2 * q ^ 42 + 7 * j ^ 2 * q ^ 43 + (-21 * j ^ 2 - 4j) * q ^ 44 + (9 * j ^ 2 + 8j) * q ^ 45 + (10 * j ^ 2 - 2j) * q ^ 46 + (-7 * j ^ 2 - 2j) * q ^ 47 + j ^ 2 * q ^ 49, -4 * j ^ 2 * q ^ 130 + 7 * j ^ 2 * q ^ 131, 21 * j * q ^ 160, j * q ^ 165 + (j ^ 2 - 3j) * q ^ 166 + 2 * q ^ 167 + (j ^ 2 + 4j) * q ^ 168 + j * q ^ 170, (j * q ^ 160 - 8 * j * q ^ 161) + 12 * j * q ^ 162, -5 * j * q ^ 160 + 16 * j * q ^ 161, -5 * j * q ^ 161 + 11 * j * q ^ 162, 3 * j * q ^ 74 + 7 * j * q ^ 75 + (4 * j ^ 2 - 17j) * q ^ 76 + (-8 * j ^ 2 + j) * q ^ 77 + (2 * j ^ 2 + 12j) * q ^ 78 + (2 * j ^ 2 - 5j) * q ^ 79 + j * q ^ 81, -4 * j * q ^ 162 + 7 * j * q ^ 163]
            end
        f19 = function (x, y)
                return [35, 10x + 25y, 9 * x * y + x ^ 2 + 16 * y ^ 2, 16 * x * y + 2 * x ^ 2 + 17 * y ^ 2, 13 * x * y ^ 2 + 3 * x ^ 2 * y + 10 * y ^ 3, 7 * x * y ^ 2 + x ^ 2 * y + 9 * y ^ 3, 3 * x * y ^ 2 + 9 * y ^ 3, 18 * x * y ^ 2 + 6 * x ^ 2 * y + 11 * y ^ 3, (-3 * x ^ 2 * y - x ^ 3) + 8 * y ^ 3, ((4 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) + 4 * y ^ 4, 10 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 5 * y ^ 4, 5 * x * y ^ 3 + x ^ 2 * y ^ 2 + 4 * y ^ 4, 2 * x * y ^ 3 + 4 * y ^ 4, ((-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y) + 3 * y ^ 4, 9 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 5 * y ^ 4, 6 * x * y ^ 3 + x ^ 2 * y ^ 2 + 5 * y ^ 4, 13 * x * y ^ 3 + 7 * x ^ 2 * y ^ 2 + 6 * y ^ 4, 5 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * y ^ 5, ((x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) + y ^ 5, x * y ^ 4 + y ^ 5, (-2 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, (-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, x * y ^ 4 + y ^ 5, 6 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 2 * y ^ 5, 3 * x * y ^ 4 + x ^ 2 * y ^ 3 + y ^ 5, 3 * x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * y ^ 5, (-9 * x ^ 2 * y ^ 4 - 8 * x ^ 3 * y ^ 3) + 9 * y ^ 6, 0, (-2 * x * y ^ 5 - 3 * x ^ 2 * y ^ 4) + y ^ 6, ((-2 * x * y ^ 5 - 4 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + 4 * y ^ 6, 0, ((6 * x * y ^ 5 - 6 * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2) + x ^ 6 + 10 * y ^ 6, -x * y ^ 6 - 2 * x ^ 2 * y ^ 5, (-x * y ^ 6 - 2 * x ^ 2 * y ^ 5) + y ^ 7, ((4 * x * y ^ 6 - 6 * x ^ 2 * y ^ 5) - 11 * x ^ 3 * y ^ 4) + 5 * y ^ 7, ((-x * y ^ 6 - 3 * x ^ 2 * y ^ 5) - x ^ 3 * y ^ 4) + y ^ 7, ((((8 * x * y ^ 6 + 2 * x ^ 2 * y ^ 5) - 6 * x ^ 3 * y ^ 4) - 2 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) + x ^ 6 * y + 6 * y ^ 7, (-x * y ^ 6 - 2 * x ^ 2 * y ^ 5) + y ^ 7, ((x * y ^ 6 - 4 * x ^ 2 * y ^ 5) - 2 * x ^ 3 * y ^ 4) + 2 * y ^ 7, (-4 * x ^ 2 * y ^ 5 - 3 * x ^ 3 * y ^ 4) + 4 * y ^ 7, (-x * y ^ 6 - 3 * x ^ 2 * y ^ 5) - x ^ 3 * y ^ 4, (((6 * x * y ^ 6 + 7 * x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4) - 3 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) + 5 * y ^ 7, -x * y ^ 6 + y ^ 7, ((2 * x ^ 2 * y ^ 5 + 2 * x ^ 3 * y ^ 4) - x ^ 5 * y ^ 2) + y ^ 7, (((4 * x * y ^ 7 + 6 * x ^ 2 * y ^ 6 + x ^ 3 * y ^ 5) - 2 * x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3) + 2 * y ^ 8, (-2 * x ^ 2 * y ^ 6 - 3 * x ^ 3 * y ^ 5) + y ^ 8, 4 * x ^ 60 * y ^ 154 + 5 * x ^ 61 * y ^ 153 + x ^ 62 * y ^ 152, 4 * x ^ 12 * y ^ 34 + 5 * x ^ 13 * y ^ 33 + x ^ 14 * y ^ 32, ((2 * x * y ^ 7 - 2 * x ^ 2 * y ^ 6) - 5 * x ^ 3 * y ^ 5) + 2 * y ^ 8, -(x ^ 2) * y ^ 6, -(x ^ 2) * y ^ 6 + y ^ 8, (((6 * x * y ^ 7 + 7 * x ^ 2 * y ^ 6 + 2 * x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3) + 3 * y ^ 8, (((6 * x * y ^ 7 + 11 * x ^ 2 * y ^ 6 + 6 * x ^ 3 * y ^ 5) - 3 * x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3) + 2 * y ^ 8, -(x ^ 2) * y ^ 6, x ^ 3 * y ^ 5, 2 * x ^ 12 * y ^ 35 + 5 * x ^ 13 * y ^ 34 + 3 * x ^ 14 * y ^ 33, (x ^ 24 * y ^ 67 - x ^ 25 * y ^ 66) - 2 * x ^ 26 * y ^ 65, (-x * y ^ 8 - x ^ 5 * y ^ 4) + y ^ 9, ((4 * x * y ^ 9 + 5 * x ^ 2 * y ^ 8) - 4 * x ^ 4 * y ^ 6) + x ^ 6 * y ^ 4 + 2 * y ^ 10, 0, ((-(x ^ 2) * y ^ 8 - x ^ 3 * y ^ 7) - 2 * x ^ 5 * y ^ 5) + y ^ 10, (((((x * y ^ 9 + 3 * x ^ 2 * y ^ 8) - 2 * x ^ 3 * y ^ 7) - 4 * x ^ 4 * y ^ 6) - 3 * x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) + y ^ 10, 0, -(x ^ 2) * y ^ 8 + y ^ 10, ((-x * y ^ 9 + 4 * x ^ 2 * y ^ 8 + 4 * x ^ 3 * y ^ 7) - x ^ 5 * y ^ 5) + y ^ 10, ((2 * x ^ 12 * y ^ 38 + 6 * x ^ 13 * y ^ 37 + 11 * x ^ 14 * y ^ 36 + 6 * x ^ 15 * y ^ 35) - 3 * x ^ 16 * y ^ 34) - 2 * x ^ 17 * y ^ 33, (x ^ 48 * y ^ 127 + 2 * x ^ 50 * y ^ 125 + 2 * x ^ 51 * y ^ 124) - x ^ 53 * y ^ 122, 2 * x ^ 24 * y ^ 65 + 5 * x ^ 25 * y ^ 64 + 3 * x ^ 26 * y ^ 63, (((4 * x * y ^ 10 + 5 * x ^ 2 * y ^ 9) - 6 * x ^ 4 * y ^ 7) - 2 * x ^ 5 * y ^ 6) + x ^ 6 * y ^ 5 + y ^ 11, (x ^ 12 * y ^ 37 - x ^ 13 * y ^ 36) - 2 * x ^ 14 * y ^ 35, 2 * x ^ 36 * y ^ 95 + 6 * x ^ 37 * y ^ 94 + 4 * x ^ 38 * y ^ 93, x ^ 3 * y ^ 8, (x ^ 12 * y ^ 37 + 2 * x ^ 14 * y ^ 35 + 2 * x ^ 15 * y ^ 34) - x ^ 17 * y ^ 32, (((-2 * x ^ 2 * y ^ 10 + 4 * x ^ 3 * y ^ 9) - 2 * x ^ 5 * y ^ 7) - x ^ 6 * y ^ 6) + 4 * y ^ 12, 0, ((3 * x ^ 60 * y ^ 154 - x ^ 61 * y ^ 153) - 3 * x ^ 62 * y ^ 152) - x ^ 63 * y ^ 151, 2 * x ^ 60 * y ^ 155 + 6 * x ^ 61 * y ^ 154 + 4 * x ^ 62 * y ^ 153, -(x ^ 4) * y ^ 12, (x ^ 3 * y ^ 12 - 6 * x ^ 5 * y ^ 10) + y ^ 15, ((3 * x ^ 12 * y ^ 34 - x ^ 13 * y ^ 33) - 3 * x ^ 14 * y ^ 32) - x ^ 15 * y ^ 31, x ^ 24 * y ^ 68 - x ^ 26 * y ^ 66, 5 * x ^ 24 * y ^ 64 + 9 * x ^ 25 * y ^ 63 + 3 * x ^ 26 * y ^ 62, x ^ 24 * y ^ 65 + x ^ 25 * y ^ 64, (-2 * x ^ 13 * y ^ 34 - 3 * x ^ 14 * y ^ 33) - x ^ 15 * y ^ 32, -(x ^ 8) * y ^ 20, 4 * x ^ 24 * y ^ 64 + 5 * x ^ 25 * y ^ 63 + x ^ 26 * y ^ 62, ((x ^ 24 * y ^ 75 - 3 * x ^ 26 * y ^ 73) - x ^ 27 * y ^ 72) + x ^ 28 * y ^ 71 + 2 * x ^ 29 * y ^ 70 + 2 * x ^ 30 * y ^ 69 + x ^ 31 * y ^ 68, 35 * x ^ 12 * y ^ 30, 4 * x ^ 12 * y ^ 34 + 2 * x ^ 13 * y ^ 33, 17 * x ^ 12 * y ^ 32 + 16 * x ^ 13 * y ^ 31 + 2 * x ^ 14 * y ^ 30, ((((x ^ 12 * y ^ 40 + 3 * x ^ 14 * y ^ 38) - x ^ 15 * y ^ 37) - 4 * x ^ 16 * y ^ 36) - 3 * x ^ 17 * y ^ 35) - x ^ 18 * y ^ 34, 9 * x ^ 12 * y ^ 33 + 7 * x ^ 13 * y ^ 32 + x ^ 14 * y ^ 31, 11 * x ^ 12 * y ^ 33 + 18 * x ^ 13 * y ^ 32 + 6 * x ^ 14 * y ^ 31, 5 * x ^ 12 * y ^ 34 + 10 * x ^ 13 * y ^ 33 + 4 * x ^ 14 * y ^ 32, (((-(x ^ 2) * y ^ 12 + 2 * x ^ 3 * y ^ 11) - 2 * x ^ 4 * y ^ 10) - 4 * x ^ 5 * y ^ 9) + y ^ 14, 5 * x ^ 12 * y ^ 34 + 6 * x ^ 13 * y ^ 33 + x ^ 14 * y ^ 32, 6 * x ^ 12 * y ^ 34 + 13 * x ^ 13 * y ^ 33 + 7 * x ^ 14 * y ^ 32, ((x ^ 12 * y ^ 35 + x ^ 13 * y ^ 34) - 2 * x ^ 14 * y ^ 33) - 2 * x ^ 15 * y ^ 32, (9 * x ^ 12 * y ^ 36 - 9 * x ^ 14 * y ^ 34) - 8 * x ^ 15 * y ^ 33, (((10 * x ^ 12 * y ^ 36 + 6 * x ^ 13 * y ^ 35) - 6 * x ^ 15 * y ^ 33) - 3 * x ^ 16 * y ^ 32) + x ^ 18 * y ^ 30, (4 * x ^ 12 * y ^ 37 - 4 * x ^ 14 * y ^ 35) - 3 * x ^ 15 * y ^ 34, ((5 * x ^ 12 * y ^ 37 + 4 * x ^ 13 * y ^ 36) - 6 * x ^ 14 * y ^ 35) - 11 * x ^ 15 * y ^ 34, ((((6 * x ^ 12 * y ^ 37 + 8 * x ^ 13 * y ^ 36 + 2 * x ^ 14 * y ^ 35) - 6 * x ^ 15 * y ^ 34) - 2 * x ^ 16 * y ^ 33) - x ^ 17 * y ^ 32) + x ^ 18 * y ^ 31, ((-(x ^ 2) * y ^ 11 - 3 * x ^ 3 * y ^ 10) - 5 * x ^ 4 * y ^ 9) + 2 * x ^ 6 * y ^ 7 + x ^ 7 * y ^ 6 + y ^ 13, ((2 * x ^ 12 * y ^ 38 + 2 * x ^ 13 * y ^ 37) - 2 * x ^ 14 * y ^ 36) - 5 * x ^ 15 * y ^ 35, (x ^ 12 * y ^ 38 - 2 * x ^ 14 * y ^ 36) - 3 * x ^ 15 * y ^ 35, x ^ 12 * y ^ 40 - x ^ 14 * y ^ 38, 25 * x ^ 12 * y ^ 31 + 10 * x ^ 13 * y ^ 30, (((4 * x ^ 12 * y ^ 42 - 2 * x ^ 14 * y ^ 40) + 4 * x ^ 15 * y ^ 39) - 2 * x ^ 17 * y ^ 37) - x ^ 18 * y ^ 36, 9 * x ^ 12 * y ^ 33 + 3 * x ^ 13 * y ^ 32, 16 * x ^ 12 * y ^ 32 + 9 * x ^ 13 * y ^ 31 + x ^ 14 * y ^ 30, (-2 * x ^ 49 * y ^ 124 - 3 * x ^ 50 * y ^ 123) - x ^ 51 * y ^ 122, 10 * x ^ 12 * y ^ 33 + 13 * x ^ 13 * y ^ 32 + 3 * x ^ 14 * y ^ 31, (x ^ 12 * y ^ 45 + x ^ 15 * y ^ 42) - 6 * x ^ 17 * y ^ 40, x ^ 36 * y ^ 98 - x ^ 38 * y ^ 96, (-2 * x ^ 25 * y ^ 64 - 3 * x ^ 26 * y ^ 63) - x ^ 27 * y ^ 62, 4 * x ^ 36 * y ^ 94 + 5 * x ^ 37 * y ^ 93 + x ^ 38 * y ^ 92, x ^ 12 * y ^ 38 - x ^ 14 * y ^ 36, 0, 5 * x ^ 12 * y ^ 34 + 9 * x ^ 13 * y ^ 33 + 3 * x ^ 14 * y ^ 32, (-3 * x ^ 2 * y ^ 13 - x ^ 3 * y ^ 12) + x ^ 4 * y ^ 11 + 2 * x ^ 5 * y ^ 10 + 2 * x ^ 6 * y ^ 9 + x ^ 7 * y ^ 8 + y ^ 15, 35 * x ^ 24 * y ^ 60, ((((x ^ 24 * y ^ 70 + 3 * x ^ 26 * y ^ 68) - x ^ 27 * y ^ 67) - 4 * x ^ 28 * y ^ 66) - 3 * x ^ 29 * y ^ 65) - x ^ 30 * y ^ 64, 17 * x ^ 24 * y ^ 62 + 16 * x ^ 25 * y ^ 61 + 2 * x ^ 26 * y ^ 60, 9 * x ^ 24 * y ^ 63 + 7 * x ^ 25 * y ^ 62 + x ^ 26 * y ^ 61, 11 * x ^ 24 * y ^ 63 + 18 * x ^ 25 * y ^ 62 + 6 * x ^ 26 * y ^ 61, ((4 * x ^ 24 * y ^ 64 + 4 * x ^ 25 * y ^ 63) - 2 * x ^ 26 * y ^ 62) - 2 * x ^ 27 * y ^ 61, ((x ^ 24 * y ^ 65 + x ^ 25 * y ^ 64) - 2 * x ^ 26 * y ^ 63) - 2 * x ^ 27 * y ^ 62, (x ^ 24 * y ^ 67 + 2 * x ^ 26 * y ^ 65 + 2 * x ^ 27 * y ^ 64) - x ^ 29 * y ^ 62, (9 * x ^ 24 * y ^ 66 - 9 * x ^ 26 * y ^ 64) - 8 * x ^ 27 * y ^ 63, ((5 * x ^ 24 * y ^ 67 + 4 * x ^ 25 * y ^ 66) - 6 * x ^ 26 * y ^ 65) - 11 * x ^ 27 * y ^ 64, (4 * x ^ 24 * y ^ 67 - 4 * x ^ 26 * y ^ 65) - 3 * x ^ 27 * y ^ 64, (x ^ 24 * y ^ 68 - 2 * x ^ 26 * y ^ 66) - 3 * x ^ 27 * y ^ 65, 25 * x ^ 24 * y ^ 61 + 10 * x ^ 25 * y ^ 60, 16 * x ^ 24 * y ^ 62 + 9 * x ^ 25 * y ^ 61 + x ^ 26 * y ^ 60, 10 * x ^ 24 * y ^ 63 + 13 * x ^ 25 * y ^ 62 + 3 * x ^ 26 * y ^ 61, (x ^ 24 * y ^ 75 + x ^ 27 * y ^ 72) - 6 * x ^ 29 * y ^ 70, ((3 * x ^ 24 * y ^ 64 - x ^ 25 * y ^ 63) - 3 * x ^ 26 * y ^ 62) - x ^ 27 * y ^ 61, 4 * x ^ 48 * y ^ 124 + 5 * x ^ 49 * y ^ 123 + x ^ 50 * y ^ 122, ((x ^ 12 * y ^ 45 - 3 * x ^ 14 * y ^ 43) - x ^ 15 * y ^ 42) + x ^ 16 * y ^ 41 + 2 * x ^ 17 * y ^ 40 + 2 * x ^ 18 * y ^ 39 + x ^ 19 * y ^ 38, 35 * x ^ 36 * y ^ 90, (((8 * x ^ 9 * y ^ 37 + 2 * x ^ 10 * y ^ 36) - 16 * x ^ 15 * y ^ 31) - 8 * x ^ 16 * y ^ 30) + y ^ 46, ((((x ^ 36 * y ^ 100 + 3 * x ^ 38 * y ^ 98) - x ^ 39 * y ^ 97) - 4 * x ^ 40 * y ^ 96) - 3 * x ^ 41 * y ^ 95) - x ^ 42 * y ^ 94, 9 * x ^ 36 * y ^ 93 + 7 * x ^ 37 * y ^ 92 + x ^ 38 * y ^ 91, (((-2 * x ^ 2 * y ^ 12 - 4 * x ^ 3 * y ^ 11) + 2 * x ^ 4 * y ^ 10 + 8 * x ^ 5 * y ^ 9) - 2 * x ^ 7 * y ^ 7) + x ^ 10 * y ^ 4 + y ^ 14, (x ^ 36 * y ^ 97 + 2 * x ^ 38 * y ^ 95 + 2 * x ^ 39 * y ^ 94) - x ^ 41 * y ^ 92, (9 * x ^ 36 * y ^ 96 - 9 * x ^ 38 * y ^ 94) - 8 * x ^ 39 * y ^ 93, ((((-6 * x * y ^ 14 - 15 * x ^ 2 * y ^ 13) - 29 * x ^ 3 * y ^ 12) - 6 * x ^ 4 * y ^ 11) + 21 * x ^ 5 * y ^ 10 + 15 * x ^ 6 * y ^ 9 + 6 * x ^ 7 * y ^ 8) - 4 * x ^ 9 * y ^ 6, (4 * x ^ 36 * y ^ 97 - 4 * x ^ 38 * y ^ 95) - 3 * x ^ 39 * y ^ 94, (x ^ 36 * y ^ 98 - 2 * x ^ 38 * y ^ 96) - 3 * x ^ 39 * y ^ 95, (10 * x ^ 9 * y ^ 36 - 24 * x ^ 15 * y ^ 30) + y ^ 45, 16 * x ^ 36 * y ^ 92 + 9 * x ^ 37 * y ^ 91 + x ^ 38 * y ^ 90, (((((-5 * x ^ 2 * y ^ 15 - 11 * x ^ 3 * y ^ 14) + 3 * x ^ 4 * y ^ 13 + 24 * x ^ 5 * y ^ 12 + 9 * x ^ 6 * y ^ 11) - 3 * x ^ 7 * y ^ 10) - x ^ 8 * y ^ 9) - 3 * x ^ 9 * y ^ 8) + y ^ 17, ((3 * x ^ 36 * y ^ 94 - x ^ 37 * y ^ 93) - 3 * x ^ 38 * y ^ 92) - x ^ 39 * y ^ 91, 35 * x ^ 48 * y ^ 120, ((((x ^ 48 * y ^ 130 + 3 * x ^ 50 * y ^ 128) - x ^ 51 * y ^ 127) - 4 * x ^ 52 * y ^ 126) - 3 * x ^ 53 * y ^ 125) - x ^ 54 * y ^ 124, 17 * x ^ 48 * y ^ 122 + 16 * x ^ 49 * y ^ 121 + 2 * x ^ 50 * y ^ 120, 2 * x ^ 12 * y ^ 35 + 6 * x ^ 13 * y ^ 34 + 4 * x ^ 14 * y ^ 33, 25 * x ^ 48 * y ^ 121 + 10 * x ^ 49 * y ^ 120, 16 * x ^ 48 * y ^ 122 + 9 * x ^ 49 * y ^ 121 + x ^ 50 * y ^ 120, (((((x ^ 12 * y ^ 47 - 5 * x ^ 14 * y ^ 45) - 11 * x ^ 15 * y ^ 44) + 3 * x ^ 16 * y ^ 43 + 24 * x ^ 17 * y ^ 42 + 9 * x ^ 18 * y ^ 41) - 3 * x ^ 19 * y ^ 40) - x ^ 20 * y ^ 39) - 3 * x ^ 21 * y ^ 38, 9 * x ^ 48 * y ^ 123 + 7 * x ^ 49 * y ^ 122 + x ^ 50 * y ^ 121, 35 * x ^ 60 * y ^ 150, ((((x ^ 60 * y ^ 160 + 3 * x ^ 62 * y ^ 158) - x ^ 63 * y ^ 157) - 4 * x ^ 64 * y ^ 156) - 3 * x ^ 65 * y ^ 155) - x ^ 66 * y ^ 154, 17 * x ^ 60 * y ^ 152 + 16 * x ^ 61 * y ^ 151 + 2 * x ^ 62 * y ^ 150, 25 * x ^ 60 * y ^ 151 + 10 * x ^ 61 * y ^ 150, 16 * x ^ 60 * y ^ 152 + 9 * x ^ 61 * y ^ 151 + x ^ 62 * y ^ 150, (((((x ^ 24 * y ^ 77 - 5 * x ^ 26 * y ^ 75) - 11 * x ^ 27 * y ^ 74) + 3 * x ^ 28 * y ^ 73 + 24 * x ^ 29 * y ^ 72 + 9 * x ^ 30 * y ^ 71) - 3 * x ^ 31 * y ^ 70) - x ^ 32 * y ^ 69) - 3 * x ^ 33 * y ^ 68, 9 * x ^ 60 * y ^ 153 + 7 * x ^ 61 * y ^ 152 + x ^ 62 * y ^ 151] * x ^ 0 * y ^ 0
            end
        f21 = function (x, y)
                return [35, 15x + 20y, 12 * x * y + 3 * x ^ 2 + 8 * y ^ 2, 16 * x * y + 7 * x ^ 2 + 12 * y ^ 2, 10 * x * y ^ 2 + 6 * x ^ 2 * y + 2 * x ^ 3 + 5 * y ^ 3, 5 * x * y ^ 2 + 3 * x ^ 2 * y + 3 * y ^ 3, 3 * x * y ^ 2 + x ^ 3, 12 * x * y ^ 2 + 12 * x ^ 2 * y + 3 * x ^ 3 + 8 * y ^ 3, (-3 * x ^ 2 * y - x ^ 3) - 2 * y ^ 3, ((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - y ^ 4, 6 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4 + 2 * y ^ 4, 2 * x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, -(x ^ 2) * y ^ 2, ((-3 * x * y ^ 3 - 4 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - 2 * y ^ 4, 4 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + 2 * y ^ 4, 2 * x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 4, 6 * x * y ^ 3 + 8 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + x ^ 4 + 4 * y ^ 4, x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + y ^ 5, (((-3 * x * y ^ 4 - 4 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y) - y ^ 5, -(x ^ 3) * y ^ 2, ((-3 * x * y ^ 4 - 4 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - 2 * y ^ 5, ((-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - y ^ 5, -(x ^ 2) * y ^ 3, 2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, x * y ^ 4, -(x ^ 2) * y ^ 3, (-9 * x ^ 2 * y ^ 4 - 16 * x ^ 3 * y ^ 3) + x ^ 6, 0, (-2 * x * y ^ 5 - x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3, (-3 * x ^ 2 * y ^ 4 - 4 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 0, ((6 * x * y ^ 5 - 12 * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2) + 3 * x ^ 6 + 2 * y ^ 6, -x * y ^ 6, 0, ((-6 * x ^ 2 * y ^ 5 - 11 * x ^ 3 * y ^ 4) - 8 * x ^ 4 * y ^ 3) + x ^ 7, -(x ^ 4) * y ^ 3, ((((5 * x * y ^ 6 + 2 * x ^ 2 * y ^ 5) - 6 * x ^ 3 * y ^ 4) - 8 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) + x ^ 6 * y + 2 * x ^ 7 + y ^ 7, x * y ^ 6 + x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4, ((-2 * x ^ 2 * y ^ 5 - 4 * x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, (-(x ^ 2) * y ^ 5 - 5 * x ^ 3 * y ^ 4) - 2 * x ^ 4 * y ^ 3, -(x ^ 2) * y ^ 5, (((6 * x * y ^ 6 + 8 * x ^ 2 * y ^ 5) - 5 * x ^ 4 * y ^ 3) - 3 * x ^ 5 * y ^ 2) + 2 * y ^ 7, 0, 2 * x * y ^ 6 + 3 * x ^ 2 * y ^ 5 + 2 * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3, ((((4 * x * y ^ 7 + 6 * x ^ 2 * y ^ 6 + 3 * x ^ 3 * y ^ 5) - 3 * x ^ 4 * y ^ 4) - 3 * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + y ^ 8, -(x ^ 4) * y ^ 4, x ^ 90 * y ^ 124 + 2 * x ^ 91 * y ^ 123 + x ^ 92 * y ^ 122, x ^ 18 * y ^ 28 + 2 * x ^ 19 * y ^ 27 + x ^ 20 * y ^ 26, ((-(x ^ 2) * y ^ 6 - 3 * x ^ 3 * y ^ 5) - 3 * x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, x ^ 3 * y ^ 5, 0, ((((5 * x * y ^ 7 + 7 * x ^ 2 * y ^ 6 + 3 * x ^ 3 * y ^ 5) - 3 * x ^ 4 * y ^ 4) - 4 * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + y ^ 8, ((((6 * x * y ^ 7 + 9 * x ^ 2 * y ^ 6 + 5 * x ^ 3 * y ^ 5) - 3 * x ^ 4 * y ^ 4) - 5 * x ^ 5 * y ^ 3) - 2 * x ^ 6 * y ^ 2) + 2 * y ^ 8, x ^ 2 * y ^ 6 + x ^ 4 * y ^ 4, x * y ^ 7 + x ^ 2 * y ^ 6 + 2 * x ^ 3 * y ^ 5 + x ^ 4 * y ^ 4, x ^ 18 * y ^ 29 + x ^ 19 * y ^ 28 + x ^ 20 * y ^ 27 + x ^ 21 * y ^ 26, 0, 2 * x ^ 2 * y ^ 7 + x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, ((((2 * x * y ^ 9 + 2 * x ^ 2 * y ^ 8) - 2 * x ^ 3 * y ^ 7) - 4 * x ^ 4 * y ^ 6) - 4 * x ^ 5 * y ^ 5) + y ^ 10, 0, (-(x ^ 3) * y ^ 7 - x ^ 4 * y ^ 6) + x ^ 6 * y ^ 4 + x ^ 7 * y ^ 3, (((x ^ 2 * y ^ 8 - x ^ 3 * y ^ 7) - 5 * x ^ 4 * y ^ 6) - 3 * x ^ 5 * y ^ 5) + x ^ 6 * y ^ 4 + 2 * x ^ 7 * y ^ 3 + x ^ 8 * y ^ 2, 0, 2 * x ^ 4 * y ^ 6 + x ^ 6 * y ^ 4, ((2 * x ^ 2 * y ^ 8 + x ^ 3 * y ^ 7) - x ^ 4 * y ^ 6) - 3 * x ^ 5 * y ^ 5, (((2 * x ^ 18 * y ^ 32 + 6 * x ^ 19 * y ^ 31 + 9 * x ^ 20 * y ^ 30 + 5 * x ^ 21 * y ^ 29) - 3 * x ^ 22 * y ^ 28) - 5 * x ^ 23 * y ^ 27) - 2 * x ^ 24 * y ^ 26, 2 * x ^ 73 * y ^ 102 + 3 * x ^ 74 * y ^ 101 + 2 * x ^ 75 * y ^ 100 + x ^ 76 * y ^ 99, x ^ 36 * y ^ 53 + x ^ 37 * y ^ 52 + x ^ 38 * y ^ 51 + x ^ 39 * y ^ 50, ((((2 * x * y ^ 10 + 2 * x ^ 2 * y ^ 9) - 2 * x ^ 3 * y ^ 8) - 6 * x ^ 4 * y ^ 7) - 5 * x ^ 5 * y ^ 6) + 2 * x ^ 7 * y ^ 4 + x ^ 8 * y ^ 3 + y ^ 11, 0, x ^ 54 * y ^ 77 + 2 * x ^ 55 * y ^ 76 + 2 * x ^ 56 * y ^ 75 + x ^ 57 * y ^ 74 + x ^ 58 * y ^ 73, -(x ^ 5) * y ^ 6, 2 * x ^ 19 * y ^ 30 + 3 * x ^ 20 * y ^ 29 + 2 * x ^ 21 * y ^ 28 + x ^ 22 * y ^ 27, ((-2 * x ^ 3 * y ^ 9 - 3 * x ^ 4 * y ^ 8) - 6 * x ^ 5 * y ^ 7) + 3 * x ^ 8 * y ^ 4, 0, ((-2 * x ^ 90 * y ^ 124 - 3 * x ^ 91 * y ^ 123) - 4 * x ^ 92 * y ^ 122) - 2 * x ^ 93 * y ^ 121, x ^ 90 * y ^ 125 + 2 * x ^ 91 * y ^ 124 + 2 * x ^ 92 * y ^ 123 + x ^ 93 * y ^ 122 + x ^ 94 * y ^ 121, x ^ 4 * y ^ 12 + 2 * x ^ 5 * y ^ 11 + 4 * x ^ 6 * y ^ 10 + 4 * x ^ 7 * y ^ 9 + 3 * x ^ 8 * y ^ 8, 2 * x ^ 6 * y ^ 9 + 6 * x ^ 7 * y ^ 8, ((-2 * x ^ 18 * y ^ 28 - 3 * x ^ 19 * y ^ 27) - 4 * x ^ 20 * y ^ 26) - 2 * x ^ 21 * y ^ 25, 0, 2 * x ^ 36 * y ^ 52 + 4 * x ^ 37 * y ^ 51 + 3 * x ^ 38 * y ^ 50 + 2 * x ^ 39 * y ^ 49, -(x ^ 38) * y ^ 51, ((-2 * x ^ 18 * y ^ 29 - 3 * x ^ 19 * y ^ 28) - 4 * x ^ 20 * y ^ 27) - 2 * x ^ 21 * y ^ 26, x ^ 11 * y ^ 17 + x ^ 12 * y ^ 16 + x ^ 13 * y ^ 15, x ^ 36 * y ^ 52 + 2 * x ^ 37 * y ^ 51 + x ^ 38 * y ^ 50, (((x ^ 40 * y ^ 59 + 6 * x ^ 41 * y ^ 58 + 8 * x ^ 42 * y ^ 57 + 5 * x ^ 43 * y ^ 56) - 4 * x ^ 44 * y ^ 55) - 4 * x ^ 45 * y ^ 54) - x ^ 46 * y ^ 53, 35 * x ^ 18 * y ^ 24, -(x ^ 20) * y ^ 26, 12 * x ^ 18 * y ^ 26 + 16 * x ^ 19 * y ^ 25 + 7 * x ^ 20 * y ^ 24, (((2 * x ^ 20 * y ^ 32 + x ^ 21 * y ^ 31) - x ^ 22 * y ^ 30) - 3 * x ^ 23 * y ^ 29) + x ^ 24 * y ^ 28 + 2 * x ^ 25 * y ^ 27 + x ^ 26 * y ^ 26, 3 * x ^ 18 * y ^ 27 + 5 * x ^ 19 * y ^ 26 + 3 * x ^ 20 * y ^ 25, 8 * x ^ 18 * y ^ 27 + 12 * x ^ 19 * y ^ 26 + 12 * x ^ 20 * y ^ 25 + 3 * x ^ 21 * y ^ 24, 2 * x ^ 18 * y ^ 28 + 6 * x ^ 19 * y ^ 27 + 4 * x ^ 20 * y ^ 26 + 2 * x ^ 21 * y ^ 25 + x ^ 22 * y ^ 24, 2 * x ^ 5 * y ^ 9 + 4 * x ^ 6 * y ^ 8 + 2 * x ^ 7 * y ^ 7, 2 * x ^ 19 * y ^ 27 + x ^ 20 * y ^ 26 + x ^ 22 * y ^ 24, 4 * x ^ 18 * y ^ 28 + 6 * x ^ 19 * y ^ 27 + 8 * x ^ 20 * y ^ 26 + 4 * x ^ 21 * y ^ 25 + x ^ 22 * y ^ 24, (((-(x ^ 18) * y ^ 29 - 3 * x ^ 19 * y ^ 28) - 4 * x ^ 20 * y ^ 27) - 2 * x ^ 21 * y ^ 26) - x ^ 22 * y ^ 25, (-9 * x ^ 20 * y ^ 28 - 16 * x ^ 21 * y ^ 27) + x ^ 24 * y ^ 24, (((2 * x ^ 18 * y ^ 30 + 6 * x ^ 19 * y ^ 29) - 12 * x ^ 21 * y ^ 27) - 3 * x ^ 22 * y ^ 26) + 3 * x ^ 24 * y ^ 24, (-(x ^ 20) * y ^ 29 - 5 * x ^ 21 * y ^ 28) - 2 * x ^ 22 * y ^ 27, ((-6 * x ^ 20 * y ^ 29 - 11 * x ^ 21 * y ^ 28) - 8 * x ^ 22 * y ^ 27) + x ^ 25 * y ^ 24, ((((x ^ 18 * y ^ 31 + 5 * x ^ 19 * y ^ 30 + 2 * x ^ 20 * y ^ 29) - 6 * x ^ 21 * y ^ 28) - 8 * x ^ 22 * y ^ 27) - x ^ 23 * y ^ 26) + x ^ 24 * y ^ 25 + 2 * x ^ 25 * y ^ 24, 3 * x ^ 4 * y ^ 9 + 7 * x ^ 5 * y ^ 8 + 10 * x ^ 6 * y ^ 7 + 5 * x ^ 7 * y ^ 6 + x ^ 8 * y ^ 5, ((-(x ^ 20) * y ^ 30 - 3 * x ^ 21 * y ^ 29) - 3 * x ^ 22 * y ^ 28) - x ^ 23 * y ^ 27, -(x ^ 22) * y ^ 28, 2 * x ^ 22 * y ^ 30 + x ^ 24 * y ^ 28, 20 * x ^ 18 * y ^ 25 + 15 * x ^ 19 * y ^ 24, ((-2 * x ^ 21 * y ^ 33 - 3 * x ^ 22 * y ^ 32) - 6 * x ^ 23 * y ^ 31) + 3 * x ^ 26 * y ^ 28, 3 * x ^ 19 * y ^ 26 + x ^ 21 * y ^ 24, 8 * x ^ 18 * y ^ 26 + 12 * x ^ 19 * y ^ 25 + 3 * x ^ 20 * y ^ 24, ((-2 * x ^ 72 * y ^ 101 - 3 * x ^ 73 * y ^ 100) - 4 * x ^ 74 * y ^ 99) - 2 * x ^ 75 * y ^ 98, 5 * x ^ 18 * y ^ 27 + 10 * x ^ 19 * y ^ 26 + 6 * x ^ 20 * y ^ 25 + 2 * x ^ 21 * y ^ 24, 2 * x ^ 24 * y ^ 33 + 6 * x ^ 25 * y ^ 32, 0, ((-2 * x ^ 36 * y ^ 53 - 3 * x ^ 37 * y ^ 52) - 4 * x ^ 38 * y ^ 51) - 2 * x ^ 39 * y ^ 50, x ^ 54 * y ^ 76 + 2 * x ^ 55 * y ^ 75 + x ^ 56 * y ^ 74, 0, 0, 2 * x ^ 18 * y ^ 28 + 4 * x ^ 19 * y ^ 27 + 3 * x ^ 20 * y ^ 26 + 2 * x ^ 21 * y ^ 25, (((x ^ 4 * y ^ 11 + 6 * x ^ 5 * y ^ 10 + 8 * x ^ 6 * y ^ 9 + 5 * x ^ 7 * y ^ 8) - 4 * x ^ 8 * y ^ 7) - 4 * x ^ 9 * y ^ 6) - x ^ 10 * y ^ 5, 35 * x ^ 36 * y ^ 48, (((2 * x ^ 38 * y ^ 56 + x ^ 39 * y ^ 55) - x ^ 40 * y ^ 54) - 3 * x ^ 41 * y ^ 53) + x ^ 42 * y ^ 52 + 2 * x ^ 43 * y ^ 51 + x ^ 44 * y ^ 50, 12 * x ^ 36 * y ^ 50 + 16 * x ^ 37 * y ^ 49 + 7 * x ^ 38 * y ^ 48, 3 * x ^ 36 * y ^ 51 + 5 * x ^ 37 * y ^ 50 + 3 * x ^ 38 * y ^ 49, 8 * x ^ 36 * y ^ 51 + 12 * x ^ 37 * y ^ 50 + 12 * x ^ 38 * y ^ 49 + 3 * x ^ 39 * y ^ 48, ((-(x ^ 36) * y ^ 52 - x ^ 37 * y ^ 51) - 2 * x ^ 38 * y ^ 50) - 2 * x ^ 39 * y ^ 49, (((-(x ^ 36) * y ^ 53 - 3 * x ^ 37 * y ^ 52) - 4 * x ^ 38 * y ^ 51) - 2 * x ^ 39 * y ^ 50) - x ^ 40 * y ^ 49, 2 * x ^ 37 * y ^ 54 + 3 * x ^ 38 * y ^ 53 + 2 * x ^ 39 * y ^ 52 + x ^ 40 * y ^ 51, (-9 * x ^ 38 * y ^ 52 - 16 * x ^ 39 * y ^ 51) + x ^ 42 * y ^ 48, ((-6 * x ^ 38 * y ^ 53 - 11 * x ^ 39 * y ^ 52) - 8 * x ^ 40 * y ^ 51) + x ^ 43 * y ^ 48, (-(x ^ 38) * y ^ 53 - 5 * x ^ 39 * y ^ 52) - 2 * x ^ 40 * y ^ 51, -(x ^ 40) * y ^ 52, 20 * x ^ 36 * y ^ 49 + 15 * x ^ 37 * y ^ 48, 8 * x ^ 36 * y ^ 50 + 12 * x ^ 37 * y ^ 49 + 3 * x ^ 38 * y ^ 48, 5 * x ^ 36 * y ^ 51 + 10 * x ^ 37 * y ^ 50 + 6 * x ^ 38 * y ^ 49 + 2 * x ^ 39 * y ^ 48, 2 * x ^ 42 * y ^ 57 + 6 * x ^ 43 * y ^ 56, ((-2 * x ^ 36 * y ^ 52 - 3 * x ^ 37 * y ^ 51) - 4 * x ^ 38 * y ^ 50) - 2 * x ^ 39 * y ^ 49, x ^ 72 * y ^ 100 + 2 * x ^ 73 * y ^ 99 + x ^ 74 * y ^ 98, (((x ^ 22 * y ^ 35 + 6 * x ^ 23 * y ^ 34 + 8 * x ^ 24 * y ^ 33 + 5 * x ^ 25 * y ^ 32) - 4 * x ^ 26 * y ^ 31) - 4 * x ^ 27 * y ^ 30) - x ^ 28 * y ^ 29, 35 * x ^ 54 * y ^ 72, 12 * x ^ 18 * y ^ 28 + 8 * x ^ 19 * y ^ 27 + 8 * x ^ 21 * y ^ 25 + 7 * x ^ 22 * y ^ 24, (((2 * x ^ 56 * y ^ 80 + x ^ 57 * y ^ 79) - x ^ 58 * y ^ 78) - 3 * x ^ 59 * y ^ 77) + x ^ 60 * y ^ 76 + 2 * x ^ 61 * y ^ 75 + x ^ 62 * y ^ 74, 3 * x ^ 54 * y ^ 75 + 5 * x ^ 55 * y ^ 74 + 3 * x ^ 56 * y ^ 73, ((2 * x ^ 2 * y ^ 12 + 6 * x ^ 3 * y ^ 11 + 9 * x ^ 4 * y ^ 10 + 14 * x ^ 5 * y ^ 9 + 14 * x ^ 6 * y ^ 8 + 4 * x ^ 7 * y ^ 7) - 3 * x ^ 8 * y ^ 6) - 2 * x ^ 9 * y ^ 5, 2 * x ^ 55 * y ^ 78 + 3 * x ^ 56 * y ^ 77 + 2 * x ^ 57 * y ^ 76 + x ^ 58 * y ^ 75, (-9 * x ^ 56 * y ^ 76 - 16 * x ^ 57 * y ^ 75) + x ^ 60 * y ^ 72, ((((((((-9 * x * y ^ 14 - 15 * x ^ 2 * y ^ 13) - 12 * x ^ 3 * y ^ 12) - 3 * x ^ 4 * y ^ 11) + 9 * x ^ 5 * y ^ 10 + 14 * x ^ 6 * y ^ 9 + 3 * x ^ 7 * y ^ 8) - 21 * x ^ 8 * y ^ 7) - 26 * x ^ 9 * y ^ 6) - 15 * x ^ 10 * y ^ 5) - 3 * x ^ 11 * y ^ 4) - 2 * y ^ 15, (-(x ^ 56) * y ^ 77 - 5 * x ^ 57 * y ^ 76) - 2 * x ^ 58 * y ^ 75, -(x ^ 58) * y ^ 76, 20 * x ^ 18 * y ^ 27 + 15 * x ^ 21 * y ^ 24, 8 * x ^ 54 * y ^ 74 + 12 * x ^ 55 * y ^ 73 + 3 * x ^ 56 * y ^ 72, (((((((-2 * x ^ 2 * y ^ 15 - 2 * x ^ 3 * y ^ 14) + 2 * x ^ 4 * y ^ 13 + 6 * x ^ 5 * y ^ 12) - x ^ 6 * y ^ 11) - 17 * x ^ 7 * y ^ 10) - 26 * x ^ 8 * y ^ 9) - 23 * x ^ 9 * y ^ 8) - 14 * x ^ 10 * y ^ 7) - 4 * x ^ 11 * y ^ 6, ((-2 * x ^ 54 * y ^ 76 - 3 * x ^ 55 * y ^ 75) - 4 * x ^ 56 * y ^ 74) - 2 * x ^ 57 * y ^ 73, 35 * x ^ 72 * y ^ 96, (((2 * x ^ 74 * y ^ 104 + x ^ 75 * y ^ 103) - x ^ 76 * y ^ 102) - 3 * x ^ 77 * y ^ 101) + x ^ 78 * y ^ 100 + 2 * x ^ 79 * y ^ 99 + x ^ 80 * y ^ 98, 12 * x ^ 72 * y ^ 98 + 16 * x ^ 73 * y ^ 97 + 7 * x ^ 74 * y ^ 96, x ^ 18 * y ^ 29 + 2 * x ^ 19 * y ^ 28 + 2 * x ^ 20 * y ^ 27 + x ^ 21 * y ^ 26 + x ^ 22 * y ^ 25, 20 * x ^ 72 * y ^ 97 + 15 * x ^ 73 * y ^ 96, 8 * x ^ 72 * y ^ 98 + 12 * x ^ 73 * y ^ 97 + 3 * x ^ 74 * y ^ 96, (((((((-2 * x ^ 20 * y ^ 39 - 2 * x ^ 21 * y ^ 38) + 2 * x ^ 22 * y ^ 37 + 6 * x ^ 23 * y ^ 36) - x ^ 24 * y ^ 35) - 17 * x ^ 25 * y ^ 34) - 26 * x ^ 26 * y ^ 33) - 23 * x ^ 27 * y ^ 32) - 14 * x ^ 28 * y ^ 31) - 4 * x ^ 29 * y ^ 30, 3 * x ^ 72 * y ^ 99 + 5 * x ^ 73 * y ^ 98 + 3 * x ^ 74 * y ^ 97, 35 * x ^ 90 * y ^ 120, (((2 * x ^ 92 * y ^ 128 + x ^ 93 * y ^ 127) - x ^ 94 * y ^ 126) - 3 * x ^ 95 * y ^ 125) + x ^ 96 * y ^ 124 + 2 * x ^ 97 * y ^ 123 + x ^ 98 * y ^ 122, 12 * x ^ 90 * y ^ 122 + 16 * x ^ 91 * y ^ 121 + 7 * x ^ 92 * y ^ 120, 20 * x ^ 90 * y ^ 121 + 15 * x ^ 91 * y ^ 120, 8 * x ^ 90 * y ^ 122 + 12 * x ^ 91 * y ^ 121 + 3 * x ^ 92 * y ^ 120, (((((((-2 * x ^ 38 * y ^ 63 - 2 * x ^ 39 * y ^ 62) + 2 * x ^ 40 * y ^ 61 + 6 * x ^ 41 * y ^ 60) - x ^ 42 * y ^ 59) - 17 * x ^ 43 * y ^ 58) - 26 * x ^ 44 * y ^ 57) - 23 * x ^ 45 * y ^ 56) - 14 * x ^ 46 * y ^ 55) - 4 * x ^ 47 * y ^ 54, 3 * x ^ 90 * y ^ 123 + 5 * x ^ 91 * y ^ 122 + 3 * x ^ 92 * y ^ 121] * x ^ 0 * y ^ 0
            end
        f23 = (q->begin
                    [56, -40 + 16q, (25 - 15q) + q ^ 2, (28 - 24q) + 4 * q ^ 2, (-17 + 19q) - 5 * q ^ 2, (-14 + 11q) - q ^ 2, -12 + 6q, ((-19 + 27q) - 9 * q ^ 2) + q ^ 3, (-11 + 6 * q ^ 2) - q ^ 3, ((7 - 4q) - 4 * q ^ 2) + 3 * q ^ 3, (10 - 14q) + 6 * q ^ 2, (7 - 7q) + q ^ 2, 5 - 3q, ((4 + 3q) - 6 * q ^ 2) + q ^ 3, (9 - 13q) + 4 * q ^ 2, (8 - 8q) + 2 * q ^ 2, ((11 - 20q) + 9 * q ^ 2) - q ^ 3, (-4 + 8q) - 3 * q ^ 2, (-2 + 5 * q ^ 2) - 3 * q ^ 3, -2 + q, (-5q + 6 * q ^ 2) - q ^ 3, ((-1 - 3q) + 4 * q ^ 2) - q ^ 3, -1 + q, (-5 + 9q) - 5 * q ^ 2, (-3 + 4q) - q ^ 2, (-3 + 4q) - q ^ 2, (12 - 18 * q ^ 2) + 8 * q ^ 3, 0, ((1 + 4q) - 5 * q ^ 2) + q ^ 3, ((5 + 3q) - 7 * q ^ 2) + q ^ 3, 0, (((13 - 12q) + 6 * q ^ 3) - 6 * q ^ 4) + q ^ 6, (-2q + 3 * q ^ 2) - q ^ 3, ((-1 - 2q) + 3 * q ^ 2) - q ^ 3, (-8 + 4q + 12 * q ^ 2) - 14 * q ^ 3, ((-2 - q) + 4 * q ^ 2) - q ^ 3, (((((-9 + 12q) - 4 * q ^ 2) - 6 * q ^ 3) + 4 * q ^ 4) - 2 * q ^ 5) - q ^ 6, (-2 - q) + 2 * q ^ 2 + q ^ 3, (-3 + 6 * q ^ 2) - 3 * q ^ 3, (-5 + 8 * q ^ 2) - 3 * q ^ 3, (-3q + 4 * q ^ 2) - q ^ 3, (((-6 + 12q) - 13 * q ^ 2) + 4 * q ^ 3 + 6 * q ^ 4) - 3 * q ^ 5, (-1 - q) + 2 * q ^ 2, (-1 - 4 * q ^ 2) + 4 * q ^ 3 + q ^ 4, ((((3 - 8q) + 12 * q ^ 2) - 4 * q ^ 3) - 4 * q ^ 4) + 3 * q ^ 5, (2 - 3 * q ^ 2) + 3 * q ^ 3, (-7 * q ^ 60 + 7 * q ^ 61) - q ^ 62, (-7 * q ^ 12 + 7 * q ^ 13) - q ^ 14, ((3 - 2q) - 5 * q ^ 2) + 6 * q ^ 3, -(q ^ 2) + q ^ 3, (1 - 2 * q ^ 2) + q ^ 3, (((((4 - 10q) + 13 * q ^ 2) - 6 * q ^ 3) - 2 * q ^ 4) + 4 * q ^ 5) - q ^ 6, ((((2 - 12q) + 21 * q ^ 2) - 8 * q ^ 3) - 6 * q ^ 4) + 3 * q ^ 5, (q - q ^ 2) + q ^ 3, q ^ 2 - q ^ 3, (4 * q ^ 12 - 8 * q ^ 13) + 3 * q ^ 14, ((-(q ^ 24) - 2 * q ^ 25) + 3 * q ^ 26) - q ^ 27, (-1 - q ^ 2) + q ^ 4 + q ^ 5, (((3 - 8q) + 9 * q ^ 2) - 8 * q ^ 4) + 2 * q ^ 5 + q ^ 6, 0, (((1 - q ^ 2) + q ^ 3) - 2 * q ^ 4) - q ^ 5, (((1 - 4q) + 4 * q ^ 2 + 2 * q ^ 3) - 6 * q ^ 4) + q ^ 6, 0, (2 - q ^ 2) - 2 * q ^ 3, ((1 + q + 5 * q ^ 2) - 5 * q ^ 3) - 2 * q ^ 4, (((-2 * q ^ 12 + 12 * q ^ 13) - 21 * q ^ 14) + 8 * q ^ 15 + 6 * q ^ 16) - 3 * q ^ 17, (-(q ^ 48) - 4 * q ^ 50) + 4 * q ^ 51 + q ^ 52, (-4 * q ^ 24 + 8 * q ^ 25) - 3 * q ^ 26, ((((-1 + 8q) - 10 * q ^ 2) - 5 * q ^ 3) + 10 * q ^ 4) - 2 * q ^ 6, ((q ^ 12 + 2 * q ^ 13) - 3 * q ^ 14) + q ^ 15, (5 * q ^ 36 - 9 * q ^ 37) + 5 * q ^ 38, 0, ((q ^ 12 + 4 * q ^ 14) - 4 * q ^ 15) - q ^ 16, ((((5 - 3 * q ^ 2) - 2 * q ^ 3) - 3 * q ^ 4) + 6 * q ^ 5) - q ^ 6, 0, ((-4 * q ^ 60 - 3 * q ^ 61) + 6 * q ^ 62) - q ^ 63, (5 * q ^ 60 - 9 * q ^ 61) + 5 * q ^ 62, (((-(q ^ 2) - 2 * q ^ 3) + 7 * q ^ 4) - 6 * q ^ 5) + q ^ 6, -1 + q ^ 3 + 3 * q ^ 4 + 3 * q ^ 5, ((-4 * q ^ 12 - 3 * q ^ 13) + 6 * q ^ 14) - q ^ 15, (q ^ 24 - 2 * q ^ 26) + q ^ 27, (9 * q ^ 24 - 13 * q ^ 25) + 4 * q ^ 26, -(q ^ 24) + q ^ 25, (5 * q ^ 13 - 6 * q ^ 14) + q ^ 15, 0, (7 * q ^ 24 - 7 * q ^ 25) + q ^ 26, ((((-(q ^ 24) + 5 * q ^ 26) - 4 * q ^ 27) - 4 * q ^ 28) + 4 * q ^ 29 + 2 * q ^ 30) - 2 * q ^ 31, -56 * q ^ 12, -5 * q ^ 12 + 3 * q ^ 13, (-28 * q ^ 12 + 24 * q ^ 13) - 4 * q ^ 14, ((-(q ^ 12) - 6 * q ^ 14) + 2 * q ^ 15 + 6 * q ^ 16) - q ^ 18, (14 * q ^ 12 - 11 * q ^ 13) + q ^ 14, ((19 * q ^ 12 - 27 * q ^ 13) + 9 * q ^ 14) - q ^ 15, (-10 * q ^ 12 + 14 * q ^ 13) - 6 * q ^ 14, (1 - q ^ 2) - 2 * q ^ 5, (-8 * q ^ 12 + 8 * q ^ 13) - 2 * q ^ 14, ((-11 * q ^ 12 + 20 * q ^ 13) - 9 * q ^ 14) + q ^ 15, (2 * q ^ 12 - 5 * q ^ 14) + 3 * q ^ 15, (-12 * q ^ 12 + 18 * q ^ 14) - 8 * q ^ 15, (((-13 * q ^ 12 + 12 * q ^ 13) - 6 * q ^ 15) + 6 * q ^ 16) - q ^ 18, (5 * q ^ 12 - 8 * q ^ 14) + 3 * q ^ 15, ((8 * q ^ 12 - 4 * q ^ 13) - 12 * q ^ 14) + 14 * q ^ 15, (((9 * q ^ 12 - 12 * q ^ 13) + 4 * q ^ 14 + 6 * q ^ 15) - 4 * q ^ 16) + 2 * q ^ 17 + q ^ 18, ((((-1 + 3 * q ^ 2) - 5 * q ^ 3) - q ^ 4) + 9 * q ^ 5) - 5 * q ^ 6, (-3 * q ^ 12 + 2 * q ^ 13 + 5 * q ^ 14) - 6 * q ^ 15, (-2 * q ^ 12 + 3 * q ^ 14) - 3 * q ^ 15, -2 * q ^ 12 + q ^ 14 + 2 * q ^ 15, 40 * q ^ 12 - 16 * q ^ 13, ((-5 * q ^ 12 + 3 * q ^ 14 + 2 * q ^ 15 + 3 * q ^ 16) - 6 * q ^ 17) + q ^ 18, 12 * q ^ 12 - 6 * q ^ 13, (-25 * q ^ 12 + 15 * q ^ 13) - q ^ 14, (-5 * q ^ 49 + 6 * q ^ 50) - q ^ 51, (17 * q ^ 12 - 19 * q ^ 13) + 5 * q ^ 14, ((q ^ 12 - q ^ 15) - 3 * q ^ 16) - 3 * q ^ 17, (-(q ^ 36) + 2 * q ^ 38) - q ^ 39, (-5 * q ^ 25 + 6 * q ^ 26) - q ^ 27, (-7 * q ^ 36 + 7 * q ^ 37) - q ^ 38, (-(q ^ 12) + 2 * q ^ 14) - q ^ 15, 0, (-9 * q ^ 12 + 13 * q ^ 13) - 4 * q ^ 14, ((((-1 + 5 * q ^ 2) - 4 * q ^ 3) - 4 * q ^ 4) + 4 * q ^ 5 + 2 * q ^ 6) - 2 * q ^ 7, 56 * q ^ 24, (((q ^ 24 + 6 * q ^ 26) - 2 * q ^ 27) - 6 * q ^ 28) + q ^ 30, (28 * q ^ 24 - 24 * q ^ 25) + 4 * q ^ 26, (-14 * q ^ 24 + 11 * q ^ 25) - q ^ 26, ((-19 * q ^ 24 + 27 * q ^ 25) - 9 * q ^ 26) + q ^ 27, ((7 * q ^ 24 - 4 * q ^ 25) - 4 * q ^ 26) + 3 * q ^ 27, (-2 * q ^ 24 + 5 * q ^ 26) - 3 * q ^ 27, (-(q ^ 24) - 4 * q ^ 26) + 4 * q ^ 27 + q ^ 28, (12 * q ^ 24 - 18 * q ^ 26) + 8 * q ^ 27, (-8 * q ^ 24 + 4 * q ^ 25 + 12 * q ^ 26) - 14 * q ^ 27, (-5 * q ^ 24 + 8 * q ^ 26) - 3 * q ^ 27, (2 * q ^ 24 - 3 * q ^ 26) + 3 * q ^ 27, -40 * q ^ 24 + 16 * q ^ 25, (25 * q ^ 24 - 15 * q ^ 25) + q ^ 26, (-17 * q ^ 24 + 19 * q ^ 25) - 5 * q ^ 26, -(q ^ 24) + q ^ 27 + 3 * q ^ 28 + 3 * q ^ 29, ((4 * q ^ 24 + 3 * q ^ 25) - 6 * q ^ 26) + q ^ 27, (7 * q ^ 48 - 7 * q ^ 49) + q ^ 50, ((((q ^ 12 - 5 * q ^ 14) + 4 * q ^ 15 + 4 * q ^ 16) - 4 * q ^ 17) - 2 * q ^ 18) + 2 * q ^ 19, -56 * q ^ 36, ((((1 - 8 * q ^ 9) + 2 * q ^ 10 + 11 * q ^ 12) - 4 * q ^ 13) - 20 * q ^ 15) + 10 * q ^ 16, ((-(q ^ 36) - 6 * q ^ 38) + 2 * q ^ 39 + 6 * q ^ 40) - q ^ 42, (14 * q ^ 36 - 11 * q ^ 37) + q ^ 38, (((((1 - 6 * q ^ 2) + 2 * q ^ 3 + 16 * q ^ 4) - 14 * q ^ 5) - 6 * q ^ 6) + 4 * q ^ 7 + 3 * q ^ 8) - 2 * q ^ 10, ((q ^ 36 + 4 * q ^ 38) - 4 * q ^ 39) - q ^ 40, (-12 * q ^ 36 + 18 * q ^ 38) - 8 * q ^ 39, (((((-6q + 36 * q ^ 2) - 47 * q ^ 3) - 6 * q ^ 4) + 42 * q ^ 5 + 3 * q ^ 6) - 27 * q ^ 7) + 9 * q ^ 8 + 2 * q ^ 9, (5 * q ^ 36 - 8 * q ^ 38) + 3 * q ^ 39, (-2 * q ^ 36 + 3 * q ^ 38) - 3 * q ^ 39, ((-1 + 10 * q ^ 9) - 15 * q ^ 12) + 30 * q ^ 15, (-25 * q ^ 36 + 15 * q ^ 37) - q ^ 38, (((((-1 + 9 * q ^ 2) - 16 * q ^ 3) - 10 * q ^ 4) + 23 * q ^ 5 + 14 * q ^ 6) - 25 * q ^ 7) + 4 * q ^ 8 + 5 * q ^ 9, ((-4 * q ^ 36 - 3 * q ^ 37) + 6 * q ^ 38) - q ^ 39, 56 * q ^ 48, (((q ^ 48 + 6 * q ^ 50) - 2 * q ^ 51) - 6 * q ^ 52) + q ^ 54, (28 * q ^ 48 - 24 * q ^ 49) + 4 * q ^ 50, (5 * q ^ 12 - 9 * q ^ 13) + 5 * q ^ 14, -40 * q ^ 48 + 16 * q ^ 49, (25 * q ^ 48 - 15 * q ^ 49) + q ^ 50, ((((((q ^ 12 - 9 * q ^ 14) + 16 * q ^ 15 + 10 * q ^ 16) - 23 * q ^ 17) - 14 * q ^ 18) + 25 * q ^ 19) - 4 * q ^ 20) - 5 * q ^ 21, (-14 * q ^ 48 + 11 * q ^ 49) - q ^ 50, -56 * q ^ 60, ((-(q ^ 60) - 6 * q ^ 62) + 2 * q ^ 63 + 6 * q ^ 64) - q ^ 66, (-28 * q ^ 60 + 24 * q ^ 61) - 4 * q ^ 62, 40 * q ^ 60 - 16 * q ^ 61, (-25 * q ^ 60 + 15 * q ^ 61) - q ^ 62, (((((-(q ^ 24) + 9 * q ^ 26) - 16 * q ^ 27) - 10 * q ^ 28) + 23 * q ^ 29 + 14 * q ^ 30) - 25 * q ^ 31) + 4 * q ^ 32 + 5 * q ^ 33, (14 * q ^ 60 - 11 * q ^ 61) + q ^ 62]
                end)
        f25 = (q->begin
                    [56, 20q - 36, (2 * q ^ 2 - 18q) + 18, (8 * q ^ 2 - 24q) + 24, ((q ^ 3 - 8 * q ^ 2) + 16q) - 13, (-2 * q ^ 2 + 10q) - 8, 6q - 4, ((4 * q ^ 3 - 12 * q ^ 2) + 24q) - 16, (-2 * q ^ 3 + 6 * q ^ 2) - 2, ((-(q ^ 4) + 3 * q ^ 3) - 4 * q ^ 2) + q + 3, ((-2 * q ^ 3 + 6 * q ^ 2) - 10q) + 8, (q ^ 2 - 4q) + 4, (-(q ^ 2) - q) + 1, ((2 * q ^ 3 - 7 * q ^ 2) + 5q) - 1, ((-(q ^ 3) + 4 * q ^ 2) - 9q) + 6, (2 * q ^ 2 - 4q) + 4, (((q ^ 4 - 3 * q ^ 3) + 10 * q ^ 2) - 15q) + 9, (-2 * q ^ 2 + 4q) - 3, ((q ^ 4 - 4 * q ^ 3) + 6 * q ^ 2) - 4q, q ^ 2 - 1, ((-2 * q ^ 3 + 7 * q ^ 2) - 6q) + 2, (-(q ^ 3) + 5 * q ^ 2) - 4q, q ^ 2, ((q ^ 3 - 3 * q ^ 2) + 6q) - 4, 2q - 2, (-(q ^ 3) + q) - 1, (16 * q ^ 3 - 18 * q ^ 2) + 4, 0, (q ^ 3 - 5 * q ^ 2) + 2q, (4 * q ^ 3 - 7 * q ^ 2) + q + 1, 0, (((2 * q ^ 6 - 6 * q ^ 4) + 12 * q ^ 3) - 12q) + 6, q ^ 2 - q, q ^ 2, ((8 * q ^ 4 - 14 * q ^ 3) + 12 * q ^ 2) - 4, (-(q ^ 3) + q ^ 2) - 1, ((((((q ^ 7 - q ^ 6) - 2 * q ^ 5) + 10 * q ^ 4) - 6 * q ^ 3) - 4 * q ^ 2) + 9q) - 5, (((-(q ^ 4) + q ^ 3) - q ^ 2) + q) - 1, (((3 * q ^ 4 - 3 * q ^ 3) + 5 * q ^ 2) - q) - 1, ((q ^ 4 - 6 * q ^ 3) + 5 * q ^ 2) - 1, 2 * q ^ 2 - 2q, (((-5 * q ^ 5 + 7 * q ^ 4 + 2 * q ^ 3) - 14 * q ^ 2) + 12q) - 3, 0, ((-(q ^ 5) + 4 * q ^ 3) - 5 * q ^ 2) + 2q, (((((-(q ^ 6) + 5 * q ^ 5) - 5 * q ^ 4) - 6 * q ^ 3) + 12 * q ^ 2) - 8q) + 2, (-(q ^ 4) - q ^ 2) + 1, (-(q ^ 77) + 4 * q ^ 76) - 4 * q ^ 75, (-(q ^ 17) + 4 * q ^ 16) - 4 * q ^ 15, (((q ^ 5 - 3 * q ^ 4) + 4 * q ^ 3) - 4 * q ^ 2) + 1, -(q ^ 3) + q ^ 2, 0, (((((-2 * q ^ 6 + 6 * q ^ 5) - 4 * q ^ 4) - 7 * q ^ 3) + 13 * q ^ 2) - 9q) + 2, (((((-(q ^ 6) + 7 * q ^ 5) - 6 * q ^ 4) - 9 * q ^ 3) + 19 * q ^ 2) - 12q) + 2, -2 * q ^ 3, ((q ^ 4 - 3 * q ^ 3) + 3 * q ^ 2) - q, (2 * q ^ 17 - 4 * q ^ 16) + 3 * q ^ 15, q ^ 32, ((((-(q ^ 6) + q ^ 5) - 2 * q ^ 4) + 3 * q ^ 3) - 2 * q ^ 2) + 2q, ((((-(q ^ 6) + 6 * q ^ 5) - 7 * q ^ 4) + 2 * q ^ 3 + 6 * q ^ 2) - 6q) + 2, 0, ((q ^ 6 - q ^ 4) + 2 * q ^ 3) - q ^ 2, (((-(q ^ 7) + 2 * q ^ 6 + 3 * q ^ 5) - 6 * q ^ 4) + 3 * q ^ 3 + 2 * q ^ 2) - 2q, 0, (3 * q ^ 4 - 2 * q ^ 3) + 1, ((2 * q ^ 5 - q ^ 4) - 4 * q ^ 3) + 3 * q ^ 2, ((((q ^ 21 - 7 * q ^ 20) + 6 * q ^ 19 + 9 * q ^ 18) - 19 * q ^ 17) + 12 * q ^ 16) - 2 * q ^ 15, ((-(q ^ 65) + 4 * q ^ 63) - 5 * q ^ 62) + 2 * q ^ 61, (-2 * q ^ 32 + 4 * q ^ 31) - 3 * q ^ 30, ((((((q ^ 7 - 2 * q ^ 6) - 4 * q ^ 5) + 11 * q ^ 4) - 5 * q ^ 3) - 6 * q ^ 2) + 6q) - 1, -(q ^ 17), ((-(q ^ 48) + 3 * q ^ 47) - 6 * q ^ 46) + 4 * q ^ 45, 0, ((q ^ 20 - 4 * q ^ 18) + 5 * q ^ 17) - 2 * q ^ 16, (((10 * q ^ 5 - 3 * q ^ 4) + 4 * q ^ 3) - q ^ 2) + 1, 0, ((-2 * q ^ 78 + 7 * q ^ 77) - 5 * q ^ 76) + q ^ 75, ((-(q ^ 78) + 3 * q ^ 77) - 6 * q ^ 76) + 4 * q ^ 75, (4 * q ^ 6 - 6 * q ^ 5) + 4 * q ^ 4, -2 * q ^ 6, ((-2 * q ^ 18 + 7 * q ^ 17) - 5 * q ^ 16) + q ^ 15, 0, ((-(q ^ 33) + 4 * q ^ 32) - 9 * q ^ 31) + 6 * q ^ 30, q ^ 32, ((2 * q ^ 18 - 7 * q ^ 17) + 6 * q ^ 16) - 2 * q ^ 15, q ^ 10 - q ^ 9, (q ^ 32 - 4 * q ^ 31) + 4 * q ^ 30, ((((((-(q ^ 39) + 2 * q ^ 38) - q ^ 37) - 4 * q ^ 36) + 8 * q ^ 35) - 5 * q ^ 34) + 2 * q ^ 33) - q ^ 32, -56 * q ^ 15, (q ^ 17 + q ^ 16) - q ^ 15, (-8 * q ^ 17 + 24 * q ^ 16) - 24 * q ^ 15, (((q ^ 22 - 2 * q ^ 21) - 3 * q ^ 20) + 5 * q ^ 19 + 2 * q ^ 18) - 3 * q ^ 17, (2 * q ^ 17 - 10 * q ^ 16) + 8 * q ^ 15, ((-4 * q ^ 18 + 12 * q ^ 17) - 24 * q ^ 16) + 16 * q ^ 15, ((2 * q ^ 18 - 6 * q ^ 17) + 10 * q ^ 16) - 8 * q ^ 15, -2 * q ^ 5, (-2 * q ^ 17 + 4 * q ^ 16) - 4 * q ^ 15, (((-(q ^ 19) + 3 * q ^ 18) - 10 * q ^ 17) + 15 * q ^ 16) - 9 * q ^ 15, ((-(q ^ 19) + 4 * q ^ 18) - 6 * q ^ 17) + 4 * q ^ 16, (-16 * q ^ 18 + 18 * q ^ 17) - 4 * q ^ 15, (((-2 * q ^ 21 + 6 * q ^ 19) - 12 * q ^ 18) + 12 * q ^ 16) - 6 * q ^ 15, ((-(q ^ 19) + 6 * q ^ 18) - 5 * q ^ 17) + q ^ 15, ((-8 * q ^ 19 + 14 * q ^ 18) - 12 * q ^ 17) + 4 * q ^ 15, ((((-(q ^ 22) + q ^ 21 + 2 * q ^ 20) - 10 * q ^ 19) + 6 * q ^ 18 + 4 * q ^ 17) - 9 * q ^ 16) + 5 * q ^ 15, ((((3 * q ^ 7 - 8 * q ^ 6) + 8 * q ^ 5) - 4 * q ^ 4) - 3 * q ^ 3) + q ^ 2, (((-(q ^ 20) + 3 * q ^ 19) - 4 * q ^ 18) + 4 * q ^ 17) - q ^ 15, (q ^ 19 + q ^ 17) - q ^ 15, (-3 * q ^ 19 + 2 * q ^ 18) - q ^ 15, -20 * q ^ 16 + 36 * q ^ 15, (((-10 * q ^ 20 + 3 * q ^ 19) - 4 * q ^ 18) + q ^ 17) - q ^ 15, -6 * q ^ 16 + 4 * q ^ 15, (-2 * q ^ 17 + 18 * q ^ 16) - 18 * q ^ 15, ((-2 * q ^ 63 + 7 * q ^ 62) - 6 * q ^ 61) + 2 * q ^ 60, ((-(q ^ 18) + 8 * q ^ 17) - 16 * q ^ 16) + 13 * q ^ 15, 2 * q ^ 21, 0, ((-2 * q ^ 33 + 7 * q ^ 32) - 6 * q ^ 31) + 2 * q ^ 30, (-(q ^ 47) + 4 * q ^ 46) - 4 * q ^ 45, 0, 0, ((q ^ 18 - 4 * q ^ 17) + 9 * q ^ 16) - 6 * q ^ 15, ((((((-(q ^ 9) + 2 * q ^ 8) - q ^ 7) - 4 * q ^ 6) + 8 * q ^ 5) - 5 * q ^ 4) + 2 * q ^ 3) - q ^ 2, 56 * q ^ 30, (((-(q ^ 37) + 2 * q ^ 36 + 3 * q ^ 35) - 5 * q ^ 34) - 2 * q ^ 33) + 3 * q ^ 32, (8 * q ^ 32 - 24 * q ^ 31) + 24 * q ^ 30, (-2 * q ^ 32 + 10 * q ^ 31) - 8 * q ^ 30, ((4 * q ^ 33 - 12 * q ^ 32) + 24 * q ^ 31) - 16 * q ^ 30, ((-(q ^ 34) + 3 * q ^ 33) - 4 * q ^ 32) + q ^ 31 + 3 * q ^ 30, ((q ^ 34 - 4 * q ^ 33) + 6 * q ^ 32) - 4 * q ^ 31, ((-(q ^ 35) + 4 * q ^ 33) - 5 * q ^ 32) + 2 * q ^ 31, (16 * q ^ 33 - 18 * q ^ 32) + 4 * q ^ 30, ((8 * q ^ 34 - 14 * q ^ 33) + 12 * q ^ 32) - 4 * q ^ 30, ((q ^ 34 - 6 * q ^ 33) + 5 * q ^ 32) - q ^ 30, (-(q ^ 34) - q ^ 32) + q ^ 30, 20 * q ^ 31 - 36 * q ^ 30, (2 * q ^ 32 - 18 * q ^ 31) + 18 * q ^ 30, ((q ^ 33 - 8 * q ^ 32) + 16 * q ^ 31) - 13 * q ^ 30, -2 * q ^ 36, ((2 * q ^ 33 - 7 * q ^ 32) + 5 * q ^ 31) - q ^ 30, (q ^ 62 - 4 * q ^ 61) + 4 * q ^ 60, (((((q ^ 24 - 2 * q ^ 23) + q ^ 22 + 4 * q ^ 21) - 8 * q ^ 20) + 5 * q ^ 19) - 2 * q ^ 18) + q ^ 17, -56 * q ^ 45, (-8 * q ^ 19 + 12 * q ^ 18 + 12 * q ^ 16) - 24 * q ^ 15, (((q ^ 52 - 2 * q ^ 51) - 3 * q ^ 50) + 5 * q ^ 49 + 2 * q ^ 48) - 3 * q ^ 47, (2 * q ^ 47 - 10 * q ^ 46) + 8 * q ^ 45, (((((-(q ^ 10) - 2 * q ^ 8) + 2 * q ^ 7 + 4 * q ^ 6) - 16 * q ^ 5) + 17 * q ^ 4) - 8 * q ^ 3) + 2 * q ^ 2, ((q ^ 50 - 4 * q ^ 48) + 5 * q ^ 47) - 2 * q ^ 46, (-16 * q ^ 48 + 18 * q ^ 47) - 4 * q ^ 45, (((((((((3 * q ^ 10 - 8 * q ^ 9) + 18 * q ^ 8) - 18 * q ^ 7) - 11 * q ^ 6) + 36 * q ^ 5) - 15 * q ^ 4) - 27 * q ^ 3) + 30 * q ^ 2) - 12q) + 2, ((-(q ^ 49) + 6 * q ^ 48) - 5 * q ^ 47) + q ^ 45, (q ^ 49 + q ^ 47) - q ^ 45, -20 * q ^ 18 + 36 * q ^ 15, (-2 * q ^ 47 + 18 * q ^ 46) - 18 * q ^ 45, ((((((3 * q ^ 10 - 6 * q ^ 9) + 19 * q ^ 8) - 26 * q ^ 7) + 10 * q ^ 6 + 15 * q ^ 5) - 11 * q ^ 4) - 2 * q ^ 3) + 2 * q ^ 2, ((-2 * q ^ 48 + 7 * q ^ 47) - 5 * q ^ 46) + q ^ 45, 56 * q ^ 60, (((-(q ^ 67) + 2 * q ^ 66 + 3 * q ^ 65) - 5 * q ^ 64) - 2 * q ^ 63) + 3 * q ^ 62, (8 * q ^ 62 - 24 * q ^ 61) + 24 * q ^ 60, ((-(q ^ 18) + 3 * q ^ 17) - 6 * q ^ 16) + 4 * q ^ 15, 20 * q ^ 61 - 36 * q ^ 60, (2 * q ^ 62 - 18 * q ^ 61) + 18 * q ^ 60, ((((((-3 * q ^ 25 + 6 * q ^ 24) - 19 * q ^ 23) + 26 * q ^ 22) - 10 * q ^ 21) - 15 * q ^ 20) + 11 * q ^ 19 + 2 * q ^ 18) - 2 * q ^ 17, (-2 * q ^ 62 + 10 * q ^ 61) - 8 * q ^ 60, -56 * q ^ 75, (((q ^ 82 - 2 * q ^ 81) - 3 * q ^ 80) + 5 * q ^ 79 + 2 * q ^ 78) - 3 * q ^ 77, (-8 * q ^ 77 + 24 * q ^ 76) - 24 * q ^ 75, -20 * q ^ 76 + 36 * q ^ 75, (-2 * q ^ 77 + 18 * q ^ 76) - 18 * q ^ 75, ((((((3 * q ^ 40 - 6 * q ^ 39) + 19 * q ^ 38) - 26 * q ^ 37) + 10 * q ^ 36 + 15 * q ^ 35) - 11 * q ^ 34) - 2 * q ^ 33) + 2 * q ^ 32, (2 * q ^ 77 - 10 * q ^ 76) + 8 * q ^ 75]
                end)
        f27 = (q->begin
                    [70, 25q - 45, (4 * q ^ 2 - 21q) + 24, (8 * q ^ 2 - 34q) + 28, ((q ^ 3 - 10 * q ^ 2) + 24q) - 14, (-4 * q ^ 2 + 13q) - 11, (q ^ 3 + 6q) - 9, ((2 * q ^ 3 - 18 * q ^ 2) + 33q) - 17, (-2 * q ^ 3 + 6 * q ^ 2) - 6, (((-(q ^ 4) + 3 * q ^ 3) - 4 * q ^ 2) - 4q) + 2, ((-2 * q ^ 3 + 10 * q ^ 2) - 16q) + 6, (3 * q ^ 2 - 7q) + 4, -2q + 3, (3 * q ^ 3 - 6 * q ^ 2) + 4q, ((-(q ^ 3) + 8 * q ^ 2) - 13q) + 6, ((-(q ^ 3) + 2 * q ^ 2) - 9q) + 4, ((-4 * q ^ 3 + 16 * q ^ 2) - 21q) + 8, ((q ^ 3 - 5 * q ^ 2) + 6q) - 2, (((q ^ 4 - 4 * q ^ 3) + 5 * q ^ 2) - 2q) + 1, q, ((-3 * q ^ 3 + 6 * q ^ 2) - 6q) + 2, ((-2 * q ^ 3 + 4 * q ^ 2) - 3q) + 2, -1, ((2 * q ^ 3 - 7 * q ^ 2) + 8q) - 2, (-2 * q ^ 2 + 3q) - 1, (-(q ^ 2) + 3q) - 1, ((q ^ 6 + 24 * q ^ 3) - 18 * q ^ 2) + 9, 0, (2 * q ^ 3 - 5 * q ^ 2) + 3q + 1, ((-(q ^ 4) + 3 * q ^ 3) - 8 * q ^ 2) + 2q + 3, 0, (((4 * q ^ 6 - 6 * q ^ 4) + 18 * q ^ 3) - 12q) + 12, (-(q ^ 3) + 2 * q ^ 2) - q, (-(q ^ 3) + 2 * q ^ 2) - 1, (((-(q ^ 6) + 8 * q ^ 4) - 22 * q ^ 3) + 12 * q ^ 2 + 5q) - 4, (-(q ^ 3) + 3 * q ^ 2) - q, ((((((q ^ 7 - 3 * q ^ 6) - 2 * q ^ 5) + 10 * q ^ 4) - 12 * q ^ 3) - 4 * q ^ 2) + 14q) - 6, -(q ^ 4) + q ^ 3 + q ^ 2, ((2 * q ^ 4 - 5 * q ^ 3) + 6 * q ^ 2 + q) - 1, ((q ^ 4 - 8 * q ^ 3) + 5 * q ^ 2) - 3, (-2 * q ^ 3 + 3 * q ^ 2) - q, (((-4 * q ^ 5 + 7 * q ^ 4 + q ^ 3) - 15 * q ^ 2) + 12q) - 6, q ^ 2 - 1, ((((-(q ^ 5) - q ^ 4) + 4 * q ^ 3) - 4 * q ^ 2) + 3q) - 1, (((((-(q ^ 6) + 4 * q ^ 5) - 4 * q ^ 4) - 4 * q ^ 3) + 12 * q ^ 2) - 8q) + 2, 3 * q ^ 3 - 2 * q ^ 2, (-3 * q ^ 77 + 7 * q ^ 76) - 4 * q ^ 75, (-3 * q ^ 17 + 7 * q ^ 16) - 4 * q ^ 15, (((-4 * q ^ 4 + 7 * q ^ 3) - 3 * q ^ 2) - 2q) + 1, 0, q ^ 3 + 1, (((((-(q ^ 6) + 5 * q ^ 5) - 5 * q ^ 4) - 6 * q ^ 3) + 14 * q ^ 2) - 11q) + 3, (((((-(q ^ 6) + 6 * q ^ 5) - 6 * q ^ 4) - 9 * q ^ 3) + 20 * q ^ 2) - 12q) + 4, -q, ((q ^ 4 - 2 * q ^ 3) + 2 * q ^ 2) - q, ((-(q ^ 18) + 5 * q ^ 17) - 6 * q ^ 16) + 2 * q ^ 15, (-(q ^ 33) + 2 * q ^ 32) - q ^ 30, (q ^ 7 + q ^ 5 + 3 * q ^ 3 + q) - 1, (((2 * q ^ 5 - 8 * q ^ 4) + 2 * q ^ 3 + 7 * q ^ 2) - 6q) + 2, 0, ((-(q ^ 7) + q ^ 5 + 2 * q ^ 3) - 2 * q ^ 2) + 1, (((((q ^ 8 - q ^ 7) + 3 * q ^ 5) - 7 * q ^ 4) + 4 * q ^ 3 + q ^ 2) - q) + 1, 0, (-2 * q ^ 5 + 2 * q ^ 4) - q ^ 2, ((3 * q ^ 5 - q ^ 4) - 5 * q ^ 3) + 4 * q ^ 2 + 1, ((((q ^ 21 - 6 * q ^ 20) + 6 * q ^ 19 + 9 * q ^ 18) - 20 * q ^ 17) + 12 * q ^ 16) - 4 * q ^ 15, ((((-(q ^ 65) - q ^ 64) + 4 * q ^ 63) - 4 * q ^ 62) + 3 * q ^ 61) - q ^ 60, ((q ^ 33 - 5 * q ^ 32) + 6 * q ^ 31) - 2 * q ^ 30, ((((((q ^ 7 - 2 * q ^ 6) - 4 * q ^ 5) + 11 * q ^ 4) - 4 * q ^ 3) - 6 * q ^ 2) + 6q) - 2, (q ^ 18 - 2 * q ^ 17) + q ^ 15, ((-2 * q ^ 48 + 7 * q ^ 47) - 8 * q ^ 46) + 2 * q ^ 45, 0, ((((q ^ 20 + q ^ 19) - 4 * q ^ 18) + 4 * q ^ 17) - 3 * q ^ 16) + q ^ 15, ((((3 * q ^ 8 - 3 * q ^ 6) + 8 * q ^ 5) - 2 * q ^ 3) - 2 * q ^ 2) + 3, 0, (-3 * q ^ 78 + 6 * q ^ 77) - 4 * q ^ 76, ((-2 * q ^ 78 + 7 * q ^ 77) - 8 * q ^ 76) + 2 * q ^ 75, (((2 * q ^ 6 - 4 * q ^ 5) + 4 * q ^ 4) - 2 * q ^ 3) + q ^ 2, (6 * q ^ 7 - 3 * q ^ 5) - 1, (-3 * q ^ 18 + 6 * q ^ 17) - 4 * q ^ 16, q ^ 33 + q ^ 30, ((-(q ^ 33) + 8 * q ^ 32) - 13 * q ^ 31) + 6 * q ^ 30, -(q ^ 30), ((3 * q ^ 18 - 6 * q ^ 17) + 6 * q ^ 16) - 2 * q ^ 15, -(q ^ 11) + q ^ 10, (3 * q ^ 32 - 7 * q ^ 31) + 4 * q ^ 30, (((((((q ^ 40 - 3 * q ^ 39) + 2 * q ^ 38 + 4 * q ^ 37) - 3 * q ^ 36) + 2 * q ^ 35) - 4 * q ^ 34) + 4 * q ^ 33) - 2 * q ^ 32) - q ^ 30, -70 * q ^ 15, 2 * q ^ 16 - 3 * q ^ 15, (-8 * q ^ 17 + 34 * q ^ 16) - 28 * q ^ 15, ((((-(q ^ 23) + q ^ 22) - 3 * q ^ 20) + 4 * q ^ 19) - 2 * q ^ 17) - q ^ 15, (4 * q ^ 17 - 13 * q ^ 16) + 11 * q ^ 15, ((-2 * q ^ 18 + 18 * q ^ 17) - 33 * q ^ 16) + 17 * q ^ 15, ((2 * q ^ 18 - 10 * q ^ 17) + 16 * q ^ 16) - 6 * q ^ 15, ((-2 * q ^ 7 + 4 * q ^ 6 + 2 * q ^ 5) - q ^ 4) + 1, ((q ^ 18 - 2 * q ^ 17) + 9 * q ^ 16) - 4 * q ^ 15, ((4 * q ^ 18 - 16 * q ^ 17) + 21 * q ^ 16) - 8 * q ^ 15, (((-(q ^ 19) + 4 * q ^ 18) - 5 * q ^ 17) + 2 * q ^ 16) - q ^ 15, ((-(q ^ 21) - 24 * q ^ 18) + 18 * q ^ 17) - 9 * q ^ 15, (((-4 * q ^ 21 + 6 * q ^ 19) - 18 * q ^ 18) + 12 * q ^ 16) - 12 * q ^ 15, ((-(q ^ 19) + 8 * q ^ 18) - 5 * q ^ 17) + 3 * q ^ 15, ((((q ^ 21 - 8 * q ^ 19) + 22 * q ^ 18) - 12 * q ^ 17) - 5 * q ^ 16) + 4 * q ^ 15, ((((-(q ^ 22) + 3 * q ^ 21 + 2 * q ^ 20) - 10 * q ^ 19) + 12 * q ^ 18 + 4 * q ^ 17) - 14 * q ^ 16) + 6 * q ^ 15, ((((((-(q ^ 8) + 4 * q ^ 7) - 11 * q ^ 6) + 9 * q ^ 5) - q ^ 4) - 4 * q ^ 3) + 2 * q ^ 2) - 1, ((4 * q ^ 19 - 7 * q ^ 18) + 3 * q ^ 17 + 2 * q ^ 16) - q ^ 15, -3 * q ^ 18 + 2 * q ^ 17, (2 * q ^ 20 - 2 * q ^ 19) + q ^ 17, -25 * q ^ 16 + 45 * q ^ 15, (((-3 * q ^ 23 + 3 * q ^ 21) - 8 * q ^ 20) + 2 * q ^ 18 + 2 * q ^ 17) - 3 * q ^ 15, (-(q ^ 18) - 6 * q ^ 16) + 9 * q ^ 15, (-4 * q ^ 17 + 21 * q ^ 16) - 24 * q ^ 15, ((-3 * q ^ 63 + 6 * q ^ 62) - 6 * q ^ 61) + 2 * q ^ 60, ((-(q ^ 18) + 10 * q ^ 17) - 24 * q ^ 16) + 14 * q ^ 15, -6 * q ^ 22 + 3 * q ^ 20 + q ^ 15, -(q ^ 48) - q ^ 45, ((-3 * q ^ 33 + 6 * q ^ 32) - 6 * q ^ 31) + 2 * q ^ 30, (-3 * q ^ 47 + 7 * q ^ 46) - 4 * q ^ 45, -(q ^ 18) - q ^ 15, 0, ((q ^ 18 - 8 * q ^ 17) + 13 * q ^ 16) - 6 * q ^ 15, (((((((q ^ 10 - 3 * q ^ 9) + 2 * q ^ 8 + 4 * q ^ 7) - 3 * q ^ 6) + 2 * q ^ 5) - 4 * q ^ 4) + 4 * q ^ 3) - 2 * q ^ 2) - 1, 70 * q ^ 30, (((q ^ 38 - q ^ 37) + 3 * q ^ 35) - 4 * q ^ 34) + 2 * q ^ 32 + q ^ 30, (8 * q ^ 32 - 34 * q ^ 31) + 28 * q ^ 30, (-4 * q ^ 32 + 13 * q ^ 31) - 11 * q ^ 30, ((2 * q ^ 33 - 18 * q ^ 32) + 33 * q ^ 31) - 17 * q ^ 30, (((-(q ^ 34) + 3 * q ^ 33) - 4 * q ^ 32) - 4 * q ^ 31) + 2 * q ^ 30, (((q ^ 34 - 4 * q ^ 33) + 5 * q ^ 32) - 2 * q ^ 31) + q ^ 30, ((((-(q ^ 35) - q ^ 34) + 4 * q ^ 33) - 4 * q ^ 32) + 3 * q ^ 31) - q ^ 30, ((q ^ 36 + 24 * q ^ 33) - 18 * q ^ 32) + 9 * q ^ 30, (((-(q ^ 36) + 8 * q ^ 34) - 22 * q ^ 33) + 12 * q ^ 32 + 5 * q ^ 31) - 4 * q ^ 30, ((q ^ 34 - 8 * q ^ 33) + 5 * q ^ 32) - 3 * q ^ 30, 3 * q ^ 33 - 2 * q ^ 32, 25 * q ^ 31 - 45 * q ^ 30, (4 * q ^ 32 - 21 * q ^ 31) + 24 * q ^ 30, ((q ^ 33 - 10 * q ^ 32) + 24 * q ^ 31) - 14 * q ^ 30, (6 * q ^ 37 - 3 * q ^ 35) - q ^ 30, (3 * q ^ 33 - 6 * q ^ 32) + 4 * q ^ 31, (3 * q ^ 62 - 7 * q ^ 61) + 4 * q ^ 60, (((((((-(q ^ 25) + 3 * q ^ 24) - 2 * q ^ 23) - 4 * q ^ 22) + 3 * q ^ 21) - 2 * q ^ 20) + 4 * q ^ 19) - 4 * q ^ 18) + 2 * q ^ 17 + q ^ 15, -70 * q ^ 45, (((7 * q ^ 22 - 8 * q ^ 21) + 2 * q ^ 16) - 4 * q ^ 15) + 1, ((((-(q ^ 53) + q ^ 52) - 3 * q ^ 50) + 4 * q ^ 49) - 2 * q ^ 47) - q ^ 45, (4 * q ^ 47 - 13 * q ^ 46) + 11 * q ^ 45, ((((-(q ^ 10) + 2 * q ^ 9 + q ^ 8 + 6 * q ^ 6) - 16 * q ^ 5) + 16 * q ^ 4) - 8 * q ^ 3) + 3 * q ^ 2 + 1, ((((q ^ 50 + q ^ 49) - 4 * q ^ 48) + 4 * q ^ 47) - 3 * q ^ 46) + q ^ 45, ((-(q ^ 51) - 24 * q ^ 48) + 18 * q ^ 47) - 9 * q ^ 45, (((((((((-3 * q ^ 11 + 12 * q ^ 10) - 18 * q ^ 9) + 18 * q ^ 8) - 18 * q ^ 7) + 33 * q ^ 5) - 15 * q ^ 4) - 27 * q ^ 3) + 33 * q ^ 2) - 15q) + 2, ((-(q ^ 49) + 8 * q ^ 48) - 5 * q ^ 47) + 3 * q ^ 45, -3 * q ^ 48 + 2 * q ^ 47, (15 * q ^ 21 + 6 * q ^ 15) - 1, (-4 * q ^ 47 + 21 * q ^ 46) - 24 * q ^ 45, ((((((((-4 * q ^ 11 + 11 * q ^ 10) - 12 * q ^ 9) + 17 * q ^ 8) - 33 * q ^ 7) + 17 * q ^ 6 + 17 * q ^ 5) - 14 * q ^ 4) - 2 * q ^ 3) + 3 * q ^ 2) - 1, (-3 * q ^ 48 + 6 * q ^ 47) - 4 * q ^ 46, 70 * q ^ 60, (((q ^ 68 - q ^ 67) + 3 * q ^ 65) - 4 * q ^ 64) + 2 * q ^ 62 + q ^ 60, (8 * q ^ 62 - 34 * q ^ 61) + 28 * q ^ 60, ((-2 * q ^ 18 + 7 * q ^ 17) - 8 * q ^ 16) + 2 * q ^ 15, 25 * q ^ 61 - 45 * q ^ 60, (4 * q ^ 62 - 21 * q ^ 61) + 24 * q ^ 60, ((((((((4 * q ^ 26 - 11 * q ^ 25) + 12 * q ^ 24) - 17 * q ^ 23) + 33 * q ^ 22) - 17 * q ^ 21) - 17 * q ^ 20) + 14 * q ^ 19 + 2 * q ^ 18) - 3 * q ^ 17) + q ^ 15, (-4 * q ^ 62 + 13 * q ^ 61) - 11 * q ^ 60, -70 * q ^ 75, ((((-(q ^ 83) + q ^ 82) - 3 * q ^ 80) + 4 * q ^ 79) - 2 * q ^ 77) - q ^ 75, (-8 * q ^ 77 + 34 * q ^ 76) - 28 * q ^ 75, -25 * q ^ 76 + 45 * q ^ 75, (-4 * q ^ 77 + 21 * q ^ 76) - 24 * q ^ 75, ((((((((-4 * q ^ 41 + 11 * q ^ 40) - 12 * q ^ 39) + 17 * q ^ 38) - 33 * q ^ 37) + 17 * q ^ 36 + 17 * q ^ 35) - 14 * q ^ 34) - 2 * q ^ 33) + 3 * q ^ 32) - q ^ 30, (4 * q ^ 77 - 13 * q ^ 76) + 11 * q ^ 75]
                end)
        f29 = function (q, j)
                return [70, 25q - 45, (4 * q ^ 2 - 21q) + 24, (8 * q ^ 2 - 34q) + 28, ((q ^ 3 - 10 * q ^ 2) + 24q) - 14, (-4 * q ^ 2 + 13q) - 11, ((3 * j ^ 2 * q ^ 2 - 9j) - 6 * j ^ 2 * q) - 8, (q - 1) * ((2 * q ^ 2 - 16q) + 17), (((-(q ^ 3) - 6j) - 9 * j ^ 2 * q ^ 2) + 3 * j * q) - 7, ((-j - 5 * j ^ 2 * q ^ 3) - 5 * q ^ 2) + 4 * j ^ 2 * q + 3, ((-2 * q ^ 3 + 10 * q ^ 2) - 16q) + 6, (q - 1) * (3q - 4), -(j ^ 2) * q ^ 2 + 4j + 2 * j ^ 2 * q + 2, ((-3 * j ^ 2 * q ^ 3 + 9 * j ^ 2 * q ^ 2) - 3 * j ^ 2 * q) + 1, -((q - 6)) * (q - 1) ^ 2, j ^ 2 * q ^ 3 + 4 * q ^ 2 + 9j + 8 * j ^ 2 * q + 4, ((-4 * q ^ 3 + 16 * q ^ 2) - 21q) + 8, (q - 1) * ((q ^ 2 - 4q) + 2), -j * ((((j * q ^ 4 - 1) - 6 * j * q ^ 3) + 6 * j * q ^ 2) - j * q), q, ((j + 4 * j ^ 2 * q ^ 3) - 8 * j ^ 2 * q ^ 2) + 4 * j ^ 2 * q + 1, (3 * j ^ 2 * q ^ 3 - 5 * j ^ 2 * q ^ 2) + 2 * j ^ 2 * q + 1, -j * q, ((2 * q ^ 3 - 7 * q ^ 2) + 8q) - 2, -((2q - 1)) * (q - 1), ((-2 * q ^ 2 - 3j) - 2 * j ^ 2 * q) - 1, 9 * j * q ^ 4 + 8 * q ^ 3 + 18j + 27 * j ^ 2 * q ^ 2 + 8, 0, (2 * q ^ 3 + j + 5 * j ^ 2 * q ^ 2) - 4 * j ^ 2 * q, ((3 * q ^ 3 + 3j + 7 * j ^ 2 * q ^ 2) - 4 * j ^ 2 * q) + 2, 0, q ^ 6 + 6 * j ^ 2 * q ^ 5 + 27j + 6 * j ^ 2 * q ^ 4 + 6 * q ^ 3 + 3 * j ^ 2 * q ^ 2 + 12 * j ^ 2 * q + 9, -q * (q - 1) ^ 2, j ^ 2 * q * (q - 1) * (q - 2), ((((3 * j * q ^ 5 - 6 * j * q ^ 4) + 2j + 20 * j ^ 2 * q ^ 3) - 15 * j ^ 2 * q ^ 2) + 4q) - 4, ((-2 * q ^ 3 - 3j) - 2 * j ^ 2 * q ^ 2) - q, ((((3 * j ^ 2 * q ^ 6 - 2 * j ^ 2 * q ^ 5) - 4 * j ^ 2 * q ^ 4) + 7 * j ^ 2 * q ^ 3 + 2 * j ^ 2 * q ^ 2) - 12 * j ^ 2 * q) - 5, -q * ((q ^ 3 - q ^ 2) + j ^ 2 * q + 1), (q - 1) * (((q ^ 3 + 5 * j ^ 2 * q ^ 2 + q ^ 2) - j ^ 2 * q) + q + 1), (((-2 * j * q ^ 4 - 4j) + 4 * j ^ 2 * q ^ 3) - 10 * j ^ 2 * q ^ 2) - 2, -q * (2q - 1) * (q - 1), ((((-3j + 2 * j ^ 2 * q ^ 5 + 4 * q ^ 4) - 5 * j ^ 2 * q ^ 3) + 10 * j ^ 2 * q ^ 2) - 10 * j ^ 2 * q) - 3, q * (j ^ 2 * q ^ 2 + q + j ^ 2), ((j ^ 2 * q ^ 5 - j ^ 2 * q ^ 4) + 4 * q ^ 3 + 6j + 3 * j ^ 2 * q ^ 2) - j * q, (((((-(q ^ 6) - 7j) - 3 * j ^ 2 * q ^ 5) + 2 * j ^ 2 * q ^ 4 + 4 * j ^ 2 * q ^ 3) - 7 * j ^ 2 * q ^ 2) - 6q) + 1, ((j * q ^ 4 + j) - 3 * j ^ 2 * q ^ 3) + 2 * j ^ 2 * q ^ 2, -(q ^ 75) * (q - 1) * (3q - 4), -(q ^ 15) * (q - 1) * (3q - 4), (((((-j * q ^ 5 - q ^ 4) - 2j) - 8 * j ^ 2 * q ^ 3) + 5 * j ^ 2 * q ^ 2) - q) + 1, 0, -j * ((j * q ^ 3 - 1) - 2 * j * q ^ 2), ((((2 * j * q ^ 6 - 2 * j ^ 2 * q ^ 5) - 2 * j * q ^ 4) + 5 * j ^ 2 * q ^ 3) - 10 * j ^ 2 * q ^ 2) + 7 * j ^ 2 * q + 2, ((((-(q ^ 6) + j) - 5 * j ^ 2 * q ^ 5) + 3 * j ^ 2 * q ^ 4 + 7 * j ^ 2 * q ^ 3) - 12 * j ^ 2 * q ^ 2) + 8 * j ^ 2 * q + 1, j * q ^ 3 + j ^ 2 * q ^ 2, (q ^ 4 + j + 2 * j ^ 2 * q ^ 3) - j ^ 2 * q ^ 2, -(q ^ 15) * (q - 1) * ((q ^ 2 - 4q) + 2), j ^ 2 * q ^ 31 * (q - 1) * (q - 2), ((j ^ 2 * q ^ 6 + j * q ^ 4 + j * q ^ 3) - 2 * q ^ 2) + j ^ 2 * q, ((-j * q ^ 6 + 4 * q ^ 5 + 9j + 8 * j ^ 2 * q ^ 4 + 2 * q ^ 3 + 6 * q ^ 2) - 6q) + 1, 0, -j * (((-2 + j * q ^ 6) - 2 * j * q ^ 4) - j * q ^ 3), j * ((((((j * q ^ 7 - j * q ^ 6) + 2) - 4 * j * q ^ 5) + 7 * j * q ^ 4 + j * q ^ 3) - 4 * j * q ^ 2) + 2 * j * q), 0, -(q ^ 2) * ((2 * j ^ 2 * q ^ 2 - 2 * j ^ 2 * q) + 1), (2 * q ^ 5 + 2 * j ^ 2 * q ^ 4 + 4j + 3 * j ^ 2 * q ^ 3 + 4 * q ^ 2) - j ^ 2 * q, ((((((q ^ 21 - j) + 5 * j ^ 2 * q ^ 20) - 3 * j ^ 2 * q ^ 19) - 7 * j ^ 2 * q ^ 18) + 12 * j ^ 2 * q ^ 17) - 8 * j ^ 2 * q ^ 16) - q ^ 15, ((j ^ 2 * q ^ 65 - j ^ 2 * q ^ 64) + 4 * q ^ 63 + 6j + 3 * j ^ 2 * q ^ 62) - j * q ^ 61, q ^ 30 * (q - 1) * ((q ^ 2 - 4q) + 2), (q ^ 7 + 17j + j ^ 2 * q ^ 6 + 8 * j ^ 2 * q ^ 5 + 13 * q ^ 4 + 6 * j ^ 2 * q ^ 3 + 2 * j ^ 2 * q ^ 2 + 4q) - 1, -(j ^ 2) * q ^ 16 * (q - 1) * (q - 2), -(q ^ 45) * (((2 * q ^ 3 - 7 * q ^ 2) + 8q) - 2), 0, ((((-(j ^ 2) * q ^ 20 + j ^ 2 * q ^ 19) - 4 * q ^ 18) - 6j) - 3 * j ^ 2 * q ^ 17) + j * q ^ 16, (((4j - 2 * j ^ 2 * q ^ 7) + 3 * j ^ 2 * q ^ 6) - 8 * j ^ 2 * q ^ 5) + 5 * j ^ 2 * q ^ 4 + 4 * j ^ 2 * q ^ 3 + 2 * j ^ 2 * q ^ 2 + 2, 0, q ^ 75 * (((3 * j ^ 2 * q ^ 3 - 9 * j ^ 2 * q ^ 2) + 3 * j ^ 2 * q) - 1), -(q ^ 75) * (((2 * q ^ 3 - 7 * q ^ 2) + 8q) - 2), (((2 * q ^ 7 - j ^ 2 * q ^ 6) - 4 * q ^ 5) - 3j) - 2 * j ^ 2 * q ^ 4, (-2j + 6 * j ^ 2 * q ^ 6 + 3 * q ^ 4) - 2 * j ^ 2 * q ^ 3, q ^ 15 * (((3 * j ^ 2 * q ^ 3 - 9 * j ^ 2 * q ^ 2) + 3 * j ^ 2 * q) - 1), -j * ((j * q ^ 33 - 1) - 2 * j * q ^ 32), -(q ^ 30) * (q - 6) * (q - 1) ^ 2, -j * q ^ 31, (((-j - 4 * j ^ 2 * q ^ 18) + 8 * j ^ 2 * q ^ 17) - 4 * j ^ 2 * q ^ 16) - q ^ 15, -(j ^ 2) * q ^ 9 * (q - 1), q ^ 30 * (q - 1) * (3q - 4), j ^ 2 * q ^ 32 * (q - 1) * ((((q ^ 6 - q ^ 5) + 3 * q ^ 4 + 2 * q ^ 3 + q ^ 2) - 2q) + 3), -70 * q ^ 15, ((j ^ 2 * q ^ 17 - 4j) - 2 * j ^ 2 * q ^ 16) - 2 * q ^ 15, -2 * q ^ 15 * ((4 * q ^ 2 - 17q) + 14), -j * (((((j * q ^ 22 - j * q ^ 21) - 2) - 4 * j * q ^ 20) + 4 * j * q ^ 19 + 3 * j * q ^ 18) - 5 * j * q ^ 17), q ^ 15 * ((4 * q ^ 2 - 13q) + 11), -(q ^ 15) * (q - 1) * ((2 * q ^ 2 - 16q) + 17), 2 * q ^ 15 * (((q ^ 3 - 5 * q ^ 2) + 8q) - 3), ((((-j - 4 * j ^ 2 * q ^ 6) + 2 * j ^ 2 * q ^ 5) - q ^ 4) - 2 * j * q ^ 3) + j * q ^ 2, (((-(j ^ 2) * q ^ 18 - 4 * q ^ 17) - 9j) - 8 * j ^ 2 * q ^ 16) - 4 * q ^ 15, q ^ 15 * (((4 * q ^ 3 - 16 * q ^ 2) + 21q) - 8), j * ((((j * q ^ 19 - 1) - 6 * j * q ^ 18) + 6 * j * q ^ 17) - j * q ^ 16), (((-9 * j * q ^ 19 - 8 * q ^ 18) - 18j) - 27 * j ^ 2 * q ^ 17) - 8 * q ^ 15, ((((((-(q ^ 21) - 6 * j ^ 2 * q ^ 20) - 27j) - 6 * j ^ 2 * q ^ 19) - 6 * q ^ 18) - 3 * j ^ 2 * q ^ 17) - 12 * j ^ 2 * q ^ 16) - 9 * q ^ 15, ((2 * j * q ^ 19 + 4j) - 4 * j ^ 2 * q ^ 18) + 10 * j ^ 2 * q ^ 17 + 2 * q ^ 15, (((((-3 * j * q ^ 20 + 6 * j * q ^ 19) - 2j) - 20 * j ^ 2 * q ^ 18) + 15 * j ^ 2 * q ^ 17) - 4 * q ^ 16) + 4 * q ^ 15, -(q ^ 15) * (((((3 * j ^ 2 * q ^ 6 - 2 * j ^ 2 * q ^ 5) - 4 * j ^ 2 * q ^ 4) + 7 * j ^ 2 * q ^ 3 + 2 * j ^ 2 * q ^ 2) - 12 * j ^ 2 * q) - 5), ((((j * q ^ 8 + 2 * q ^ 7 + 2j + 11 * j ^ 2 * q ^ 6) - 11 * j ^ 2 * q ^ 5) - j * q ^ 4) + 3 * j ^ 2 * q ^ 3) - j ^ 2 * q ^ 2, (((j * q ^ 20 + q ^ 19 + 2j + 8 * j ^ 2 * q ^ 18) - 5 * j ^ 2 * q ^ 17) + q ^ 16) - q ^ 15, ((-j * q ^ 19 - j) + 3 * j ^ 2 * q ^ 18) - 2 * j ^ 2 * q ^ 17, q ^ 17 * ((2 * j ^ 2 * q ^ 2 - 2 * j ^ 2 * q) + 1), -5 * q ^ 15 * (5q - 9), ((((((-4j + 2 * j ^ 2 * q ^ 22) - 3 * j ^ 2 * q ^ 21) + 8 * j ^ 2 * q ^ 20) - 5 * j ^ 2 * q ^ 19) - 4 * j ^ 2 * q ^ 18) - 2 * j ^ 2 * q ^ 17) - 2 * q ^ 15, -3 * j ^ 2 * q ^ 17 + 9j + 6 * j ^ 2 * q ^ 16 + 8 * q ^ 15, -(q ^ 15) * ((4 * q ^ 2 - 21q) + 24), ((j + 4 * j ^ 2 * q ^ 63) - 8 * j ^ 2 * q ^ 62) + 4 * j ^ 2 * q ^ 61 + q ^ 60, -(q ^ 15) * (((q ^ 3 - 10 * q ^ 2) + 24q) - 14), ((2j - 6 * j ^ 2 * q ^ 21) - 3 * q ^ 19) + 2 * j ^ 2 * q ^ 18, j * ((j * q ^ 48 - 1) - 2 * j * q ^ 47), ((j + 4 * j ^ 2 * q ^ 33) - 8 * j ^ 2 * q ^ 32) + 4 * j ^ 2 * q ^ 31 + q ^ 30, -(q ^ 45) * (q - 1) * (3q - 4), j * ((j * q ^ 18 - 1) - 2 * j * q ^ 17), 0, q ^ 15 * (q - 6) * (q - 1) ^ 2, j ^ 2 * q ^ 2 * (q - 1) * ((((q ^ 6 - q ^ 5) + 3 * q ^ 4 + 2 * q ^ 3 + q ^ 2) - 2q) + 3), 70 * q ^ 30, j * (((((j * q ^ 37 - j * q ^ 36) - 2) - 4 * j * q ^ 35) + 4 * j * q ^ 34 + 3 * j * q ^ 33) - 5 * j * q ^ 32), 2 * q ^ 30 * ((4 * q ^ 2 - 17q) + 14), -(q ^ 30) * ((4 * q ^ 2 - 13q) + 11), q ^ 30 * (q - 1) * ((2 * q ^ 2 - 16q) + 17), ((-j - 5 * j ^ 2 * q ^ 33) - 5 * q ^ 32) + 4 * j ^ 2 * q ^ 31 + 3 * q ^ 30, -j * ((((j * q ^ 34 - 1) - 6 * j * q ^ 33) + 6 * j * q ^ 32) - j * q ^ 31), ((j ^ 2 * q ^ 35 - j ^ 2 * q ^ 34) + 4 * q ^ 33 + 6j + 3 * j ^ 2 * q ^ 32) - j * q ^ 31, 9 * j * q ^ 34 + 8 * q ^ 33 + 18j + 27 * j ^ 2 * q ^ 32 + 8 * q ^ 30, ((((3 * j * q ^ 35 - 6 * j * q ^ 34) + 2j + 20 * j ^ 2 * q ^ 33) - 15 * j ^ 2 * q ^ 32) + 4 * q ^ 31) - 4 * q ^ 30, (((-2 * j * q ^ 34 - 4j) + 4 * j ^ 2 * q ^ 33) - 10 * j ^ 2 * q ^ 32) - 2 * q ^ 30, ((j * q ^ 34 + j) - 3 * j ^ 2 * q ^ 33) + 2 * j ^ 2 * q ^ 32, 5 * q ^ 30 * (5q - 9), q ^ 30 * ((4 * q ^ 2 - 21q) + 24), q ^ 30 * (((q ^ 3 - 10 * q ^ 2) + 24q) - 14), (-2j + 6 * j ^ 2 * q ^ 36 + 3 * q ^ 34) - 2 * j ^ 2 * q ^ 33, -(q ^ 30) * (((3 * j ^ 2 * q ^ 3 - 9 * j ^ 2 * q ^ 2) + 3 * j ^ 2 * q) - 1), q ^ 60 * (q - 1) * (3q - 4), -(j ^ 2) * q ^ 17 * (q - 1) * ((((q ^ 6 - q ^ 5) + 3 * q ^ 4 + 2 * q ^ 3 + q ^ 2) - 2q) + 3), -70 * q ^ 45, q ^ 9 * ((((12 * q ^ 10 - 18 * q ^ 9) - 4 * q ^ 4) + 11 * q ^ 3 + q) - 4), -j * (((((j * q ^ 52 - j * q ^ 51) - 2) - 4 * j * q ^ 50) + 4 * j * q ^ 49 + 3 * j * q ^ 48) - 5 * j * q ^ 47), q ^ 45 * ((4 * q ^ 2 - 13q) + 11), ((((((j * q ^ 10 - 2j) + 4 * j ^ 2 * q ^ 8) - 12 * j ^ 2 * q ^ 7) + 2 * j ^ 2 * q ^ 6 + 14 * j ^ 2 * q ^ 5) - 10 * j ^ 2 * q ^ 4) - 2 * j ^ 2 * q ^ 3) + 3 * j ^ 2 * q ^ 2, ((((-(j ^ 2) * q ^ 50 + j ^ 2 * q ^ 49) - 4 * q ^ 48) - 6j) - 3 * j ^ 2 * q ^ 47) + j * q ^ 46, (((-9 * j * q ^ 49 - 8 * q ^ 48) - 18j) - 27 * j ^ 2 * q ^ 47) - 8 * q ^ 45, ((((((((-6 * j ^ 2 * q ^ 10 + 20j + 23 * j ^ 2 * q ^ 9) - 48 * j ^ 2 * q ^ 8) + 51 * j ^ 2 * q ^ 7) - 13 * j ^ 2 * q ^ 6) - 12 * j ^ 2 * q ^ 5) - 15 * j ^ 2 * q ^ 4) + 34 * j ^ 2 * q ^ 3 + 24 * q ^ 2) - 6q) + 1, ((2 * j * q ^ 49 + 4j) - 4 * j ^ 2 * q ^ 48) + 10 * j ^ 2 * q ^ 47 + 2 * q ^ 45, ((-j * q ^ 49 - j) + 3 * j ^ 2 * q ^ 48) - 2 * j ^ 2 * q ^ 47, 5 * q ^ 9 * ((6 * q ^ 9 - 3 * q ^ 3) + 1), -(q ^ 45) * ((4 * q ^ 2 - 21q) + 24), -j * ((((((((3 * j * q ^ 10 - 1) - 7 * j * q ^ 9) + 18 * j * q ^ 8) - 45 * j * q ^ 7) + 38 * j * q ^ 6 + j * q ^ 5) - 2 * j * q ^ 4) - 13 * j * q ^ 3) + 6 * j * q ^ 2), q ^ 45 * (((3 * j ^ 2 * q ^ 3 - 9 * j ^ 2 * q ^ 2) + 3 * j ^ 2 * q) - 1), 70 * q ^ 60, j * (((((j * q ^ 67 - j * q ^ 66) - 2) - 4 * j * q ^ 65) + 4 * j * q ^ 64 + 3 * j * q ^ 63) - 5 * j * q ^ 62), 2 * q ^ 60 * ((4 * q ^ 2 - 17q) + 14), -(q ^ 15) * (((2 * q ^ 3 - 7 * q ^ 2) + 8q) - 2), 5 * q ^ 60 * (5q - 9), q ^ 60 * ((4 * q ^ 2 - 21q) + 24), j * ((((((((3 * j * q ^ 25 - 1) - 7 * j * q ^ 24) + 18 * j * q ^ 23) - 45 * j * q ^ 22) + 38 * j * q ^ 21 + j * q ^ 20) - 2 * j * q ^ 19) - 13 * j * q ^ 18) + 6 * j * q ^ 17), -(q ^ 60) * ((4 * q ^ 2 - 13q) + 11), -70 * q ^ 75, -j * (((((j * q ^ 82 - j * q ^ 81) - 2) - 4 * j * q ^ 80) + 4 * j * q ^ 79 + 3 * j * q ^ 78) - 5 * j * q ^ 77), -2 * q ^ 75 * ((4 * q ^ 2 - 17q) + 14), -5 * q ^ 75 * (5q - 9), -(q ^ 75) * ((4 * q ^ 2 - 21q) + 24), -j * ((((((((3 * j * q ^ 40 - 1) - 7 * j * q ^ 39) + 18 * j * q ^ 38) - 45 * j * q ^ 37) + 38 * j * q ^ 36 + j * q ^ 35) - 2 * j * q ^ 34) - 13 * j * q ^ 33) + 6 * j * q ^ 32), q ^ 75 * ((4 * q ^ 2 - 13q) + 11)]
            end
        f33 = function (q, j)
                return [84, 50q - 34, (24 * q ^ 2 - 26q) + 8, (28 * q ^ 2 - 44q) + 12, ((12 * q ^ 3 - 28 * q ^ 2) + 16q) - 2, (q - 1) * (-1 + 3q) ^ 2, q * (((9 * q ^ 2 + 3 * j ^ 2 * q + 9 * q * j) - 3 * j ^ 2) - 2j), 3 * (q - 1) * ((5 * q ^ 2 - 8q) + 1), ((6 * q ^ 3 - 2 * j ^ 2 * q ^ 2) - 3 * j * q ^ 2) + 9 * j ^ 2 * q + 3 * q * j + 3, ((((2 * q ^ 4 - 2 * q ^ 3) + 5 * j ^ 2 * q ^ 2 + 2 * j * q ^ 2) - 6 * j ^ 2 * q) - 4 * q * j) - 1, 4 * q * (q - 1) * ((q ^ 2 - 3q) + 1), q * (2q - 1) * ((q ^ 2 - 3q) + 1), q ^ 2 * ((2 * q ^ 2 + j ^ 2 * q + 4 * q * j) - j), ((((-4 * j ^ 2 * q ^ 3 - 5 * j * q ^ 3) + 10 * j ^ 2 * q ^ 2 + 6 * j * q ^ 2) - 6 * j ^ 2 * q) - 3 * q * j) - 1, q * (q - 1) * ((4 * q ^ 2 - 9q) + 3), q * ((((4 * q ^ 3 + 6 * j ^ 2 * q ^ 2 + 10 * j * q ^ 2) - 4 * j ^ 2 * q) - 6 * q * j) + j ^ 2), q * (((6 * q ^ 3 - 21 * q ^ 2) + 24q) - 7), q ^ 2 * (((q ^ 3 - 4 * q ^ 2) + 7q) - 3), q * ((((3 * q ^ 3 + 7 * j ^ 2 * q ^ 2 + 5 * j * q ^ 2) - 8 * j ^ 2 * q) - 5 * q * j) + 3 * j ^ 2 + 2j), j * q ^ 3 * (q - 1), -q * ((((((q ^ 4 + 4 * j ^ 2 * q ^ 3 + 5 * j * q ^ 3) - 9 * j ^ 2 * q ^ 2) - 7 * j * q ^ 2) + 7 * j ^ 2 * q + 3 * q * j) - 2 * j ^ 2) - j), q * ((((-(q ^ 4) + 3 * q ^ 3 + 6 * j ^ 2 * q ^ 2 + 4 * j * q ^ 2) - 5 * j ^ 2 * q) - 3 * q * j) - 1), j * q ^ 3 * (q + j), q ^ 2 * (q - 1) * ((q ^ 2 - 5q) + 5), -(q ^ 2) * (2q - 1) * (q - 1), q ^ 3 * (((q ^ 2 + j ^ 2 * q + 3 * q * j) - j ^ 2) - 3j), 3 * q ^ 2 * (3 * q ^ 4 + 9 * j ^ 2 * q ^ 2 + 3 * j * q ^ 2 + 8q + 2 * j ^ 2 + 3j), 0, -(q ^ 2) * ((((2 * j ^ 2 * q ^ 3 + j * q ^ 3) - 6 * j ^ 2 * q ^ 2) - 4 * j * q ^ 2) + 3 * j ^ 2 * q + 2 * q * j + 1), -(q ^ 2) * (((((-2 * q ^ 4 + 4 * j ^ 2 * q ^ 3 + j * q ^ 3) - 8 * j ^ 2 * q ^ 2) - 5 * j * q ^ 2) - 5q) + 1), 0, 12 * q ^ 6 + 6 * j ^ 2 * q ^ 5 + 18 * q ^ 5 * j + 3 * j ^ 2 * q ^ 4 + 2 * j * q ^ 4 + 18 * q ^ 3 + 3 * j ^ 2 * q ^ 2 + 9 * j * q ^ 2 + 6 * j ^ 2 * q + 4 * q * j + 3, -(q ^ 4) * (q - 1), -(q ^ 3) * ((((j ^ 2 * q ^ 3 - 3 * j ^ 2 * q ^ 2) - j * q ^ 2) - q) - j), q ^ 2 * ((((((4 * q ^ 5 - 5 * q ^ 4) + 15 * j ^ 2 * q ^ 3 + 3 * j * q ^ 3) - 28 * j ^ 2 * q ^ 2) - 22 * j * q ^ 2) - 14q) - 3j), -j * q ^ 4 * (((j * q ^ 2 - 3 * q * j) - 2q) + 2 + j), ((((((((6 * q ^ 7 + 8 * j ^ 2 * q ^ 6 + 16 * j * q ^ 6) - 2 * j ^ 2 * q ^ 5) - 6 * q ^ 5 * j) - 13 * j ^ 2 * q ^ 4) - 12 * j * q ^ 4) + 7 * j ^ 2 * q ^ 3 + 11 * j * q ^ 3 + 2 * j ^ 2 * q ^ 2) - 4 * j ^ 2 * q) - 2 * q * j) - 1, -(q ^ 2) * ((((j ^ 2 * q ^ 4 - j ^ 2 * q ^ 3) - 2 * j ^ 2 * q ^ 2) - j * q ^ 2) + 3 * j ^ 2 * q + q * j + 1), -(q ^ 3) * (((((-(q ^ 4) + j ^ 2 * q ^ 3) - j * q ^ 3) - 6 * j ^ 2 * q ^ 2) - 3 * j * q ^ 2) + 7 * j ^ 2 * q + 6 * q * j + 3), 2 * q ^ 3 * ((((q ^ 4 + 4 * j ^ 2 * q ^ 2 + j * q ^ 2) - 4 * j ^ 2 * q) - 3 * q * j) + j ^ 2 + 2j), -(q ^ 3) * (2q - 1) * (q - 1), (((((((((4 * q ^ 7 + 6 * j ^ 2 * q ^ 6 + 12 * j * q ^ 6) - 9 * j ^ 2 * q ^ 5) - 11 * q ^ 5 * j) + 4 * j ^ 2 * q ^ 4) - j * q ^ 4) - 2 * j ^ 2 * q ^ 3) + 7 * j * q ^ 3 + 4 * j ^ 2 * q ^ 2) - 2 * j * q ^ 2) + 2q) - 1, -(q ^ 4) * (q * j - 1) * (q * j + 1), -(q ^ 2) * (((((-j * q ^ 4 + 2 * j ^ 2 * q ^ 3 + 3 * j * q ^ 3) - 4 * j ^ 2 * q ^ 2) - j * q ^ 2) + 2 * j ^ 2 * q) - 1), q ^ 2 * ((((((((q ^ 6 + 2 * j ^ 2 * q ^ 5 + 4 * q ^ 5 * j) - 6 * j ^ 2 * q ^ 4) - 5 * j * q ^ 4) + 7 * j ^ 2 * q ^ 3 + 2 * j * q ^ 3) - 7 * j ^ 2 * q ^ 2) + j * q ^ 2 + 3 * j ^ 2 * q) - q * j) - j), q ^ 4 * (2 * j ^ 2 * q ^ 2 + 3q + j), -(j ^ 2) * q ^ 126 * (2q - 1) * ((q ^ 2 - 3q) + 1), -j * q ^ 26 * (2q - 1) * ((q ^ 2 - 3q) + 1), q ^ 3 * ((((((q ^ 5 - q ^ 4) + 4 * j ^ 2 * q ^ 3) - 8 * j ^ 2 * q ^ 2) - 5 * j * q ^ 2) - 6q) - j), j ^ 2 * q ^ 4 * (q - 1), j * q ^ 4 * ((j * q ^ 2 - q * j) + 1), q * (((((((((2 * q ^ 7 + 4 * j ^ 2 * q ^ 6 + 8 * j * q ^ 6) - 8 * j ^ 2 * q ^ 5) - 10 * q ^ 5 * j) + 7 * j ^ 2 * q ^ 4 + 4 * j * q ^ 4) - 4 * j ^ 2 * q ^ 3) + 3 * j * q ^ 3 + 4 * j ^ 2 * q ^ 2) - 2 * j * q ^ 2) - 2 * j ^ 2 * q) - 1), q ^ 2 * (((((((((q ^ 6 + 4 * j ^ 2 * q ^ 5 + 6 * q ^ 5 * j) - 7 * j ^ 2 * q ^ 4) - 10 * j * q ^ 4) + 7 * j ^ 2 * q ^ 3 + 5 * j * q ^ 3) - j ^ 2 * q ^ 2) + 7 * j * q ^ 2) - j ^ 2 * q) - 8 * q * j) + j), j ^ 2 * q ^ 4 * (q - 1), q ^ 3 * ((((q ^ 3 + 3 * j ^ 2 * q ^ 2 + 2 * j * q ^ 2) - 3 * j ^ 2 * q) - q * j) + j ^ 2), -j * q ^ 27 * (((q ^ 3 - 4 * q ^ 2) + 7q) - 3), -(q ^ 53) * ((((j * q ^ 3 + j ^ 2 * q ^ 2) - 2 * j * q ^ 2) - j ^ 2 * q) - 1), -(q ^ 4) * (q + 1) * ((j ^ 2 * q ^ 3 - j ^ 2 * q ^ 2) - 1), q ^ 2 * (((((((q ^ 8 + 2 * j ^ 2 * q ^ 7 + 4 * j * q ^ 7 + q ^ 6) - 2 * j ^ 2 * q ^ 5) - 8 * q ^ 5 * j) + 4 * j ^ 2 * q ^ 4 + 8 * j * q ^ 4 + j ^ 2 * q ^ 2) - 3 * j * q ^ 2) - 2 * j ^ 2 * q) - 1), 0, q ^ 3 * ((((q ^ 5 * j - 3 * j * q ^ 4) + j * q ^ 3 + 2 * q ^ 2) - q) + j ^ 2), -j * q ^ 4 * ((((((-(q ^ 5) + q ^ 4 + 3 * j * q ^ 4 + 3 * q ^ 3) - 7 * j * q ^ 2) - 8 * q ^ 2) + 9 * q * j + 6q) - 3j) - 1), 0, q ^ 5 * ((j ^ 2 * q ^ 3 - 3 * j ^ 2 * q) - 2), -(q ^ 5) * ((((j ^ 2 * q ^ 4 - 3 * q ^ 3) + 4 * q ^ 2) - j ^ 2 * q) + q * j + 5 * j ^ 2 + 4j), -j * q ^ 27 * (((((((((q ^ 6 + 2 * q ^ 5 * j) - 4 * q ^ 5) + 7 * q ^ 4) - 3 * j * q ^ 4) - 2 * j * q ^ 3) - 7 * q ^ 3) + q ^ 2 + 8 * j * q ^ 2) - 7 * q * j) + q + j), q ^ 102 * ((((((j ^ 2 * q ^ 4 - j ^ 2 * q ^ 3) + 2 * j * q ^ 3) - 3 * j ^ 2 * q ^ 2) - 4 * j * q ^ 2) - 2q) + j), j ^ 2 * q ^ 52 * (((q ^ 3 - 4 * q ^ 2) + 7q) - 3), -2 * q ^ 4 * ((((q ^ 5 + 3 * j ^ 2 * q ^ 4 + 4 * j * q ^ 4 + 6 * q ^ 3 + 5 * j ^ 2 * q ^ 2 + 3 * j * q ^ 2) - j ^ 2 * q) + q * j) - j), q ^ 28 * (((q ^ 3 + 2 * j ^ 2 * q ^ 2 + 3 * j * q ^ 2) - q * j) - j ^ 2), -(q ^ 77) * (q - 1) * ((q ^ 2 - 5q) + 5), 0, -(q ^ 27) * ((((((j ^ 2 * q ^ 4 - j ^ 2 * q ^ 3) + 2 * j * q ^ 3) - 3 * j ^ 2 * q ^ 2) - 4 * j * q ^ 2) - 2q) + j), q ^ 4 * ((((((((2 * q ^ 8 + j ^ 2 * q ^ 6 + 4 * j * q ^ 6 + 8 * j ^ 2 * q ^ 5 + 2 * q ^ 5 * j) - 3 * j ^ 2 * q ^ 4) - 8 * j ^ 2 * q ^ 3) - 6 * j * q ^ 3) + 9 * j ^ 2 * q ^ 2 + 5 * j * q ^ 2) - 6 * j ^ 2 * q) - 4 * q * j) - 1), 0, -j * q ^ 125 * (((((5 * j * q ^ 3 + q ^ 3 + 4 * q ^ 2) - 6 * j * q ^ 2) + 3 * q * j) - 3q) - j), -(j ^ 2) * q ^ 127 * (q - 1) * ((q ^ 2 - 5q) + 5), q ^ 8 * ((((2 * j ^ 2 * q ^ 3 - 4 * j ^ 2 * q ^ 2) - j * q ^ 2) - 2q) - j), q ^ 8 * ((2 * j ^ 2 * q ^ 4 - j * q ^ 4) + 6 * q ^ 2 + 2 * j ^ 2 * q + 5 * q * j + 9 * j ^ 2), j * q ^ 25 * (((((j * q ^ 3 - 4 * q ^ 3) + 10 * q ^ 2 + 4 * j * q ^ 2) - 3 * q * j) - 6q) + 1), q ^ 54 * ((j * q ^ 2 - q * j) + 1), j ^ 2 * q ^ 51 * (q - 1) * ((4 * q ^ 2 - 9q) + 3), q ^ 53 * (q + j), j * q ^ 26 * ((((((q ^ 4 + j * q ^ 3) - 4 * q ^ 3) + 9 * q ^ 2 + 2 * j * q ^ 2) - 4 * q * j) - 7q) + 2 + j), -j * q ^ 16 * (q - 1), j ^ 2 * q ^ 51 * (2q - 1) * ((q ^ 2 - 3q) + 1), q ^ 55 * ((((((((((2 * q ^ 8 + j * q ^ 7 + 4 * j ^ 2 * q ^ 6 + 6 * j * q ^ 6) - 3 * j ^ 2 * q ^ 5) - 8 * q ^ 5 * j) + j ^ 2 * q ^ 4 + 5 * j * q ^ 4) - 2 * j ^ 2 * q ^ 3) - 4 * j * q ^ 3) + 3 * j ^ 2 * q ^ 2 + 6 * j * q ^ 2) - j ^ 2 * q) - 5 * q * j) + j), -84 * j * q ^ 25, -j * q ^ 27 * (((2 * q ^ 2 + 3 * q * j) - q) - j), -4 * j * q ^ 25 * ((7 * q ^ 2 - 11q) + 3), -j * q ^ 29 * (((((((2 * q ^ 4 + j * q ^ 4) - 3 * j * q ^ 3) - 4 * q ^ 2) + 3 * j * q ^ 2) - q * j) + 7q) - 1), -j * q ^ 25 * (q - 1) * (-1 + 3q) ^ 2, -3 * j * q ^ 25 * (q - 1) * ((5 * q ^ 2 - 8q) + 1), -4 * j * q ^ 26 * (q - 1) * ((q ^ 2 - 3q) + 1), q ^ 7 * (((((q ^ 5 * j + 2 * j ^ 2 * q ^ 4) - 2 * q ^ 3) + 6 * q ^ 2) - 3 * j ^ 2 * q) + 3 * q * j + 6 * j ^ 2), -(q ^ 26) * ((((4 * j * q ^ 3 + 4 * j ^ 2 * q ^ 2) - 6 * j * q ^ 2) - 2 * j ^ 2 * q) + 4 * q * j + 1), -j * q ^ 26 * (((6 * q ^ 3 - 21 * q ^ 2) + 24q) - 7), j * q ^ 26 * ((((-3 * q ^ 3 + 2 * j * q ^ 2 + 7 * q ^ 2) - 8q) - 3 * q * j) + j + 3), 3 * j * q ^ 27 * ((((-3 * q ^ 4 + 9 * q ^ 2 + 6 * j * q ^ 2) - 8q) - j) + 2), -j * q ^ 25 * ((((((((((12 * q ^ 6 + 12 * q ^ 5 * j) - 6 * q ^ 5) - j * q ^ 4) - 3 * q ^ 4) + 18 * q ^ 3) - 3 * q ^ 2) + 6 * j * q ^ 2) - 2 * q * j) - 6q) + 3), 2 * j * q ^ 28 * (((((-(q ^ 4) + 3 * j * q ^ 2 + 4 * q ^ 2) - 4q) - q * j) - j) + 1), j * q ^ 27 * ((((-4 * q ^ 5 + 5 * q ^ 4 + 12 * j * q ^ 3 + 15 * q ^ 3) - 6 * j * q ^ 2) - 28 * q ^ 2) + 14q + 3j), -(q ^ 25) * (((((((6 * j * q ^ 7 + 8 * j ^ 2 * q ^ 6) - 8 * j * q ^ 6) - 4 * j ^ 2 * q ^ 5) + 2 * q ^ 5 * j + j ^ 2 * q ^ 4 + 13 * j * q ^ 4 + 4 * j ^ 2 * q ^ 3) - 7 * j * q ^ 3) + 2 * q ^ 2 + 2 * j ^ 2 * q + 4 * q * j) - j), -(q ^ 5) * ((((((-2 * j * q ^ 6 + 3 * j ^ 2 * q ^ 5 + 5 * q ^ 5 * j + 5 * q ^ 4) - 5 * j ^ 2 * q ^ 3) + j * q ^ 3 + 14 * j ^ 2 * q ^ 2 + 2 * j * q ^ 2) - 11 * j ^ 2 * q) - 2 * q * j) + 4 * j ^ 2 + j), -(q ^ 28) * ((((q ^ 5 * j - j * q ^ 4) + 4 * q ^ 3 + 3 * j ^ 2 * q ^ 2 + 8 * j * q ^ 2) - 6 * q * j) - j ^ 2), -(q ^ 29) * (j + 2q) * (q + j), q ^ 30 * (-(q ^ 3) + 3q + 2j), -2 * j * q ^ 25 * (25q - 17), -(q ^ 29) * ((((((((((2 * j * q ^ 8 + 3 * j ^ 2 * q ^ 6) - j * q ^ 6) - 6 * j ^ 2 * q ^ 5) - 8 * q ^ 5 * j) - 3 * q ^ 4) + 2 * j ^ 2 * q ^ 3 + 8 * j * q ^ 3) - 4 * j ^ 2 * q ^ 2) - 9 * j * q ^ 2) + 2 * j ^ 2 * q + 6 * q * j) - j), -j * q ^ 26 * ((9 * q ^ 2 - 3q) + 6 * q * j + 3 + j), -2 * j * q ^ 25 * ((12 * q ^ 2 - 13q) + 4), -j * q ^ 101 * ((((((q ^ 4 + j * q ^ 3) - 4 * q ^ 3) + 9 * q ^ 2 + 2 * j * q ^ 2) - 4 * q * j) - 7q) + 2 + j), -2 * j * q ^ 25 * (((6 * q ^ 3 - 14 * q ^ 2) + 8q) - 1), q ^ 33 * (((((3 * j ^ 2 * q ^ 4 + 2 * j * q ^ 4) - 6 * j * q ^ 2) - 3 * j ^ 2 * q) + 2 * q * j) - 9), -j * q ^ 79 * ((j * q ^ 2 - q * j) + 1), -j * q ^ 51 * (((((((j * q ^ 4 - 5 * j * q ^ 3) - q ^ 3) - 2 * q ^ 2) + 7 * j * q ^ 2) - 3 * q * j) + 4q + j) - 1), -(q ^ 76) * (2q - 1) * ((q ^ 2 - 3q) + 1), -(q ^ 29) * ((q ^ 2 - q) + j ^ 2), 0, -j * q ^ 26 * (q - 1) * ((4 * q ^ 2 - 9q) + 3), j * (q - 1) * q ^ 5 * (((((((2 * q ^ 7 + 2 * q ^ 6 + j * q ^ 6 + 3 * q ^ 5 * j) - 2 * q ^ 5) + q ^ 4) - 2 * j * q ^ 4) + 2 * j * q ^ 3 + 2 * q ^ 2 + 3 * q * j) - q) - j), 84 * j ^ 2 * q ^ 50, q ^ 54 * ((((((j ^ 2 * q ^ 4 - j * q ^ 4) - 3 * q ^ 3) - 7 * j ^ 2 * q ^ 2) - 3 * j * q ^ 2) + 8 * j ^ 2 * q + q * j) - j ^ 2), 4 * j ^ 2 * q ^ 50 * ((7 * q ^ 2 - 11q) + 3), j ^ 2 * q ^ 50 * (q - 1) * (-1 + 3q) ^ 2, 3 * j ^ 2 * q ^ 50 * (q - 1) * ((5 * q ^ 2 - 8q) + 1), j * q ^ 50 * ((((((2 * j * q ^ 4 - 2 * j * q ^ 3) + 3 * q ^ 2) - 2 * j * q ^ 2) + 4 * q * j) - 2q) - j), j * q ^ 51 * (((((3 * j * q ^ 3 - 5 * j * q ^ 2) + 2 * q ^ 2) - 3q) + 5 * q * j + 1) - 2j), q ^ 52 * (((((q ^ 4 + 3 * j ^ 2 * q ^ 3 + j * q ^ 3) - j ^ 2 * q ^ 2) + 3 * j * q ^ 2) - 2 * q * j) + j ^ 2), 3 * j * q ^ 52 * (((((3 * j * q ^ 4 + 6 * q ^ 2) - 3 * j * q ^ 2) + 8 * q * j) - 1) - 3j), q ^ 52 * ((((((4 * j ^ 2 * q ^ 5 - 5 * j ^ 2 * q ^ 4) - 3 * j ^ 2 * q ^ 3) + 12 * j * q ^ 3 + 22 * j ^ 2 * q ^ 2) - 6 * j * q ^ 2) - 14 * j ^ 2 * q) - 3), 2 * j * q ^ 53 * (((((j * q ^ 4 - j * q ^ 2) + 3 * q ^ 2 + 3 * q * j) - q) - 2j) - 1), q ^ 54 * (2 * j * q ^ 2 + 3 * j ^ 2 * q + 1), 2 * j ^ 2 * q ^ 50 * (25q - 17), 2 * j ^ 2 * q ^ 50 * ((12 * q ^ 2 - 13q) + 4), 2 * j ^ 2 * q ^ 50 * (((6 * q ^ 3 - 14 * q ^ 2) + 8q) - 1), j * q ^ 58 * ((((j * q ^ 4 + 3 * q ^ 4 + 6 * j * q ^ 2) - 3q) - 5 * q * j) + 9), j * q ^ 50 * (((((5 * j * q ^ 3 + q ^ 3 + 4 * q ^ 2) - 6 * j * q ^ 2) + 3 * q * j) - 3q) - j), j * q ^ 101 * (2q - 1) * ((q ^ 2 - 3q) + 1), -(q ^ 30) * ((((((((((2 * j ^ 2 * q ^ 8 + q ^ 7) - 6 * j ^ 2 * q ^ 6) - 2 * j * q ^ 6) + 8 * j ^ 2 * q ^ 5 + 5 * q ^ 5 * j) - 5 * j ^ 2 * q ^ 4) - 4 * j * q ^ 4) + 4 * j ^ 2 * q ^ 3 + 2 * j * q ^ 3) - 6 * j ^ 2 * q ^ 2) - 3 * j * q ^ 2) + 5 * j ^ 2 * q + 4 * q * j + 1), -84 * q ^ 75, -(q ^ 24) * ((((((4 * q ^ 13 - q ^ 12) - 16 * q ^ 7) + 8 * q ^ 6) - 6 * q ^ 4) + 4 * q ^ 3 + 24q) - 21), q ^ 79 * ((((2 * j ^ 2 * q ^ 4 + j * q ^ 4 + 3 * j * q ^ 3) - 4 * j ^ 2 * q ^ 2) - 7 * j * q ^ 2) + 7 * j ^ 2 * q + 8 * q * j + 1), -(q ^ 75) * (q - 1) * (-1 + 3q) ^ 2, -(q ^ 3) * (((((((((((j ^ 2 * q ^ 9 - 2 * j * q ^ 9) + 2 * j ^ 2 * q ^ 8) - 3 * j ^ 2 * q ^ 7) + 6 * j * q ^ 7 + 4 * q ^ 6) - 5 * j ^ 2 * q ^ 5) - 10 * q ^ 5 * j) + 12 * j ^ 2 * q ^ 4 + 8 * j * q ^ 4) - 6 * j ^ 2 * q ^ 3) + 2 * j * q ^ 3 + 2 * j ^ 2 * q ^ 2) - 4 * j * q ^ 2) + 3 * j ^ 2 * q + 5 * q * j + 2), q ^ 77 * (((((-j * q ^ 4 + 2 * j ^ 2 * q ^ 3 + 3 * j * q ^ 3) - 4 * j ^ 2 * q ^ 2) - j * q ^ 2) + 2 * j ^ 2 * q) - 1), -3 * q ^ 77 * (3 * q ^ 4 + 9 * j ^ 2 * q ^ 2 + 3 * j * q ^ 2 + 8q + 2 * j ^ 2 + 3j), q ^ 3 * (((((((((((((-(q ^ 12) + 6 * q ^ 11 + 9 * q ^ 10 * j ^ 2 + 15 * q ^ 10 * j + 21 * q ^ 9 + 21 * j ^ 2 * q ^ 8 + 15 * j * q ^ 8) - 12 * j ^ 2 * q ^ 7) - 18 * j * q ^ 7) + 17 * j ^ 2 * q ^ 6 + 53 * j * q ^ 6) - 33 * j ^ 2 * q ^ 5) - 66 * q ^ 5 * j) + 51 * j ^ 2 * q ^ 4 + 54 * j * q ^ 4) - 47 * j ^ 2 * q ^ 3) - 38 * j * q ^ 3) - 27 * q ^ 2) - 12 * j ^ 2 * q) - 15 * q * j) + 3 * j ^ 2 + 6j), -2 * q ^ 78 * ((((q ^ 4 + 4 * j ^ 2 * q ^ 2 + j * q ^ 2) - 4 * j ^ 2 * q) - 3 * q * j) + j ^ 2 + 2j), -(q ^ 79) * (2 * j ^ 2 * q ^ 2 + 3q + j), -(q ^ 24) * (((5 * q ^ 12 - 24 * q ^ 6) - 10 * q ^ 3) + 45), -2 * q ^ 75 * ((12 * q ^ 2 - 13q) + 4), q ^ 5 * ((((((((((((((((2 * q ^ 10 * j ^ 2 + 4 * q ^ 10 * j) - 7 * j ^ 2 * q ^ 9) - 5 * j * q ^ 9) - j ^ 2 * q ^ 8) - 9 * j * q ^ 8) + 6 * j ^ 2 * q ^ 7 + 16 * j * q ^ 7 + 31 * j ^ 2 * q ^ 6) - j * q ^ 6) - 50 * j ^ 2 * q ^ 5) + 2 * q ^ 5 * j + 33 * j ^ 2 * q ^ 4) - 10 * j * q ^ 4) - 29 * j ^ 2 * q ^ 3) + 2 * j * q ^ 3 + 16 * j ^ 2 * q ^ 2) - j * q ^ 2) - 7 * j ^ 2 * q) - 4 * q * j) - 4), q ^ 75 * ((((4 * j ^ 2 * q ^ 3 + 5 * j * q ^ 3) - 10 * j ^ 2 * q ^ 2) - 6 * j * q ^ 2) + 6 * j ^ 2 * q + 3 * q * j + 1), 84 * j * q ^ 100, j * q ^ 104 * (((((((2 * q ^ 4 + j * q ^ 4) - 3 * j * q ^ 3) - 4 * q ^ 2) + 3 * j * q ^ 2) - q * j) + 7q) - 1), 4 * j * q ^ 100 * ((7 * q ^ 2 - 11q) + 3), -j * q ^ 27 * (q - 1) * ((q ^ 2 - 5q) + 5), 2 * j * q ^ 100 * (25q - 17), 2 * j * q ^ 100 * ((12 * q ^ 2 - 13q) + 4), -j * q ^ 30 * ((((((((((((((-2 * q ^ 10 + 2 * q ^ 10 * j + 2 * j * q ^ 9 + 7 * q ^ 9) - 8 * j * q ^ 8) + q ^ 8 + 10 * j * q ^ 7) - 6 * q ^ 7) - 31 * q ^ 6) - 32 * j * q ^ 6) + 52 * q ^ 5 * j + 50 * q ^ 5) - 33 * q ^ 4) - 43 * j * q ^ 4) + 31 * j * q ^ 3 + 29 * q ^ 3) - 16 * q ^ 2) - 17 * j * q ^ 2) + 3 * q * j + 7q) - 4), j * q ^ 100 * (q - 1) * (-1 + 3q) ^ 2, -84 * j ^ 2 * q ^ 125, -(q ^ 129) * ((((((j ^ 2 * q ^ 4 - j * q ^ 4) - 3 * q ^ 3) - 7 * j ^ 2 * q ^ 2) - 3 * j * q ^ 2) + 8 * j ^ 2 * q + q * j) - j ^ 2), -4 * j ^ 2 * q ^ 125 * ((7 * q ^ 2 - 11q) + 3), -2 * j ^ 2 * q ^ 125 * (25q - 17), -2 * j ^ 2 * q ^ 125 * ((12 * q ^ 2 - 13q) + 4), -j * q ^ 55 * ((((((((((((((((4 * q ^ 10 * j + 2 * q ^ 10) - 5 * j * q ^ 9) + 2 * q ^ 9) - 9 * j * q ^ 8) - 8 * q ^ 8) + 16 * j * q ^ 7 + 10 * q ^ 7) - 32 * q ^ 6) - j * q ^ 6) + 2 * q ^ 5 * j + 52 * q ^ 5) - 43 * q ^ 4) - 10 * j * q ^ 4) + 2 * j * q ^ 3 + 31 * q ^ 3) - 17 * q ^ 2) - j * q ^ 2) - 4 * q * j) + 3q + 4j), -(j ^ 2) * q ^ 125 * (q - 1) * (-1 + 3q) ^ 2]
            end
        f37 = (q->begin
                    [90, -30 + 60q, (3 - 27q) + 33 * q ^ 2, (10 - 40q) + 40 * q ^ 2, ((-1 + 11q) - 29 * q ^ 2) + 22 * q ^ 3, (3q - 17 * q ^ 2) + 16 * q ^ 3, -9 * q ^ 2 + 12 * q ^ 3, ((-3 + 21q) - 39 * q ^ 2) + 27 * q ^ 3, (3 - 9q) + 9 * q ^ 3, (((-1 + 5q) - 6 * q ^ 2) - 3 * q ^ 3) + 6 * q ^ 4, ((-2q + 10 * q ^ 2) - 20 * q ^ 3) + 12 * q ^ 4, (2 * q ^ 2 - 9 * q ^ 3) + 7 * q ^ 4, (-(q ^ 2) - 3 * q ^ 3) + 4 * q ^ 4, (3q - 10 * q ^ 2) + 6 * q ^ 3 + q ^ 4, ((-q + 8 * q ^ 2) - 16 * q ^ 3) + 11 * q ^ 4, (3 * q ^ 2 - 10 * q ^ 3) + 8 * q ^ 4, ((-5q + 17 * q ^ 2) - 26 * q ^ 3) + 15 * q ^ 4, ((-(q ^ 2) + 4 * q ^ 3) - 8 * q ^ 4) + 5 * q ^ 5, ((-q + 5 * q ^ 2) - 9 * q ^ 3) + 4 * q ^ 4 + q ^ 5, (-(q ^ 3) - q ^ 4) + q ^ 5, ((3 * q ^ 2 - 10 * q ^ 3) + 9 * q ^ 4) - 2 * q ^ 5, ((2 * q ^ 2 - 7 * q ^ 3) + 5 * q ^ 4) - q ^ 5, -(q ^ 3) + q ^ 5, ((-2 * q ^ 2 + 6 * q ^ 3) - 11 * q ^ 4) + 6 * q ^ 5, (q ^ 3 - 4 * q ^ 4) + 3 * q ^ 5, -3 * q ^ 4 + 3 * q ^ 5, (24 * q ^ 3 - 27 * q ^ 4) + 12 * q ^ 6, -(q ^ 4), (2 * q ^ 3 - 7 * q ^ 4) + 5 * q ^ 5 + q ^ 6, (5 * q ^ 3 - 11 * q ^ 4) + 3 * q ^ 5 + 4 * q ^ 6, -(q ^ 20), (((3 - 9 * q ^ 2) + 18 * q ^ 3) - 18 * q ^ 5) + 15 * q ^ 6, (q ^ 4 - 3 * q ^ 5) + 2 * q ^ 6, (q ^ 4 - 3 * q ^ 5) + q ^ 6 + q ^ 7, (((-8 * q ^ 3 + 25 * q ^ 4) - 18 * q ^ 5) - 4 * q ^ 6) + 8 * q ^ 7, (2 * q ^ 4 - 4 * q ^ 5) + q ^ 6 + q ^ 7, ((((-1 + 2q + 3 * q ^ 2) - 12 * q ^ 3) + 12 * q ^ 4 + 6 * q ^ 5) - 17 * q ^ 6) + 10 * q ^ 7, ((q ^ 3 - q ^ 4) - q ^ 5) + q ^ 7, ((-(q ^ 3) + 8 * q ^ 4) - 8 * q ^ 5) + q ^ 6 + 3 * q ^ 7, ((-(q ^ 3) + 9 * q ^ 4) - 9 * q ^ 5) + 4 * q ^ 7, (2 * q ^ 4 - 5 * q ^ 5) + 3 * q ^ 6, ((((6 * q ^ 2 - 10 * q ^ 3) - 3 * q ^ 4) + 21 * q ^ 5) - 18 * q ^ 6) + 7 * q ^ 7, -2 * q ^ 5 + q ^ 7, ((((q ^ 2 - q ^ 3) - 5 * q ^ 4) + 6 * q ^ 5) - 3 * q ^ 6) + q ^ 7, (((((-(q ^ 2) + 6 * q ^ 3) - 7 * q ^ 4) - 7 * q ^ 5) + 18 * q ^ 6) - 12 * q ^ 7) + 3 * q ^ 8, ((-(q ^ 4) + 3 * q ^ 5) - 3 * q ^ 6) + q ^ 8, (2 * q ^ 142 - 9 * q ^ 143) + 7 * q ^ 144, (2 * q ^ 30 - 9 * q ^ 31) + 7 * q ^ 32, (((-4 * q ^ 4 + 9 * q ^ 5) - 6 * q ^ 6) - q ^ 7) + 3 * q ^ 8, 0, (q ^ 5 - q ^ 6) + q ^ 8, (((((-2 * q ^ 2 + 7 * q ^ 3) - 6 * q ^ 4) - 9 * q ^ 5) + 20 * q ^ 6) - 14 * q ^ 7) + 5 * q ^ 8, (((((-(q ^ 2) + 8 * q ^ 3) - 9 * q ^ 4) - 13 * q ^ 5) + 30 * q ^ 6) - 18 * q ^ 7) + 4 * q ^ 8, 0, ((q ^ 4 - 3 * q ^ 5) + 3 * q ^ 6) - q ^ 7, ((-(q ^ 30) + 4 * q ^ 31) - 8 * q ^ 32) + 5 * q ^ 33, (q ^ 60 - 3 * q ^ 61) + q ^ 62 + q ^ 63, ((((q ^ 3 + q ^ 5) - 2 * q ^ 6) + 3 * q ^ 7) - q ^ 8) + q ^ 9, (((6 * q ^ 5 - 11 * q ^ 6) + 2 * q ^ 7 + 11 * q ^ 8) - 10 * q ^ 9) + 3 * q ^ 10, -(q ^ 8), ((((q ^ 4 + q ^ 5) - 3 * q ^ 6) + 3 * q ^ 7) - 2 * q ^ 8) + q ^ 10, ((((-(q ^ 3) + q ^ 4 + 5 * q ^ 5) - 11 * q ^ 6) + 5 * q ^ 7 + 4 * q ^ 8) - 3 * q ^ 9) + q ^ 10, -(q ^ 16), ((3 * q ^ 6 - 2 * q ^ 7) - q ^ 8) + q ^ 10, ((2 * q ^ 5 - 3 * q ^ 6) - 8 * q ^ 7) + 6 * q ^ 8 + q ^ 10, (((((-(q ^ 30) + 8 * q ^ 31) - 9 * q ^ 32) - 13 * q ^ 33) + 30 * q ^ 34) - 18 * q ^ 35) + 4 * q ^ 36, ((((q ^ 114 - q ^ 115) - 5 * q ^ 116) + 6 * q ^ 117) - 3 * q ^ 118) + q ^ 119, ((-(q ^ 58) + 4 * q ^ 59) - 8 * q ^ 60) + 5 * q ^ 61, ((((-(q ^ 4) + 2 * q ^ 5 + 5 * q ^ 6) - 16 * q ^ 7) + 7 * q ^ 8 + 11 * q ^ 9) - 10 * q ^ 10) + 2 * q ^ 11, (q ^ 32 - 3 * q ^ 33) + q ^ 34 + q ^ 35, ((-2 * q ^ 86 + 6 * q ^ 87) - 11 * q ^ 88) + 6 * q ^ 89, 0, ((((q ^ 30 - q ^ 31) - 5 * q ^ 32) + 6 * q ^ 33) - 3 * q ^ 34) + q ^ 35, (((-(q ^ 6) + 12 * q ^ 7) - 3 * q ^ 8) - 3 * q ^ 10) + 4 * q ^ 12, -(q ^ 12), (3 * q ^ 141 - 10 * q ^ 142) + 6 * q ^ 143 + q ^ 144, ((-2 * q ^ 142 + 6 * q ^ 143) - 11 * q ^ 144) + 6 * q ^ 145, (-4 * q ^ 11 + 6 * q ^ 12) - 2 * q ^ 13, ((2 * q ^ 9 + 3 * q ^ 10) - 3 * q ^ 11) + q ^ 15, (3 * q ^ 29 - 10 * q ^ 30) + 6 * q ^ 31 + q ^ 32, (q ^ 61 - q ^ 62) + q ^ 64, ((-(q ^ 57) + 8 * q ^ 58) - 16 * q ^ 59) + 11 * q ^ 60, -(q ^ 59) + q ^ 61, ((3 * q ^ 30 - 10 * q ^ 31) + 9 * q ^ 32) - 2 * q ^ 33, 0, (2 * q ^ 58 - 9 * q ^ 59) + 7 * q ^ 60, (((((q ^ 62 - 2 * q ^ 63) + q ^ 64 + 4 * q ^ 65) - 9 * q ^ 66) + 7 * q ^ 67) - q ^ 68) + q ^ 71, 90 * q ^ 28, (-(q ^ 30) - 3 * q ^ 31) + 4 * q ^ 32, (10 * q ^ 28 - 40 * q ^ 29) + 40 * q ^ 30, (((-(q ^ 31) + q ^ 32 + 5 * q ^ 33) - 10 * q ^ 34) - 2 * q ^ 35) + 4 * q ^ 36 + q ^ 38, (3 * q ^ 29 - 17 * q ^ 30) + 16 * q ^ 31, ((-3 * q ^ 28 + 21 * q ^ 29) - 39 * q ^ 30) + 27 * q ^ 31, ((-2 * q ^ 29 + 10 * q ^ 30) - 20 * q ^ 31) + 12 * q ^ 32, -2 * q ^ 10 + 2 * q ^ 11 + q ^ 14, (3 * q ^ 30 - 10 * q ^ 31) + 8 * q ^ 32, ((-5 * q ^ 29 + 17 * q ^ 30) - 26 * q ^ 31) + 15 * q ^ 32, ((-(q ^ 29) + 5 * q ^ 30) - 9 * q ^ 31) + 4 * q ^ 32 + q ^ 33, (24 * q ^ 31 - 27 * q ^ 32) + 12 * q ^ 34, (((3 * q ^ 28 - 9 * q ^ 30) + 18 * q ^ 31) - 18 * q ^ 33) + 15 * q ^ 34, ((-(q ^ 31) + 9 * q ^ 32) - 9 * q ^ 33) + 4 * q ^ 35, (((-8 * q ^ 31 + 25 * q ^ 32) - 18 * q ^ 33) - 4 * q ^ 34) + 8 * q ^ 35, ((((-(q ^ 28) + 2 * q ^ 29 + 3 * q ^ 30) - 12 * q ^ 31) + 12 * q ^ 32 + 6 * q ^ 33) - 17 * q ^ 34) + 10 * q ^ 35, ((((-3 * q ^ 6 + 11 * q ^ 7) - 10 * q ^ 8) + 8 * q ^ 10) - 4 * q ^ 11) + q ^ 13, (((-4 * q ^ 32 + 9 * q ^ 33) - 6 * q ^ 34) - q ^ 35) + 3 * q ^ 36, ((-(q ^ 32) + 3 * q ^ 33) - 3 * q ^ 34) + q ^ 36, ((3 * q ^ 34 - 2 * q ^ 35) - q ^ 36) + q ^ 38, -30 * q ^ 28 + 60 * q ^ 29, (((-(q ^ 34) + 12 * q ^ 35) - 3 * q ^ 36) - 3 * q ^ 38) + 4 * q ^ 40, -9 * q ^ 30 + 12 * q ^ 31, (3 * q ^ 28 - 27 * q ^ 29) + 33 * q ^ 30, ((3 * q ^ 114 - 10 * q ^ 115) + 9 * q ^ 116) - 2 * q ^ 117, ((-(q ^ 28) + 11 * q ^ 29) - 29 * q ^ 30) + 22 * q ^ 31, ((2 * q ^ 37 + 3 * q ^ 38) - 3 * q ^ 39) + q ^ 43, (q ^ 89 - q ^ 90) + q ^ 92, ((3 * q ^ 58 - 10 * q ^ 59) + 9 * q ^ 60) - 2 * q ^ 61, (2 * q ^ 86 - 9 * q ^ 87) + 7 * q ^ 88, (q ^ 33 - q ^ 34) + q ^ 36, -(q ^ 24), ((-(q ^ 29) + 8 * q ^ 30) - 16 * q ^ 31) + 11 * q ^ 32, (((((q ^ 6 - 2 * q ^ 7) + q ^ 8 + 4 * q ^ 9) - 9 * q ^ 10) + 7 * q ^ 11) - q ^ 12) + q ^ 15, 90 * q ^ 56, (((-(q ^ 59) + q ^ 60 + 5 * q ^ 61) - 10 * q ^ 62) - 2 * q ^ 63) + 4 * q ^ 64 + q ^ 66, (10 * q ^ 56 - 40 * q ^ 57) + 40 * q ^ 58, (3 * q ^ 57 - 17 * q ^ 58) + 16 * q ^ 59, ((-3 * q ^ 56 + 21 * q ^ 57) - 39 * q ^ 58) + 27 * q ^ 59, (((-(q ^ 56) + 5 * q ^ 57) - 6 * q ^ 58) - 3 * q ^ 59) + 6 * q ^ 60, ((-(q ^ 57) + 5 * q ^ 58) - 9 * q ^ 59) + 4 * q ^ 60 + q ^ 61, ((((q ^ 58 - q ^ 59) - 5 * q ^ 60) + 6 * q ^ 61) - 3 * q ^ 62) + q ^ 63, (24 * q ^ 59 - 27 * q ^ 60) + 12 * q ^ 62, (((-8 * q ^ 59 + 25 * q ^ 60) - 18 * q ^ 61) - 4 * q ^ 62) + 8 * q ^ 63, ((-(q ^ 59) + 9 * q ^ 60) - 9 * q ^ 61) + 4 * q ^ 63, ((-(q ^ 60) + 3 * q ^ 61) - 3 * q ^ 62) + q ^ 64, -30 * q ^ 56 + 60 * q ^ 57, (3 * q ^ 56 - 27 * q ^ 57) + 33 * q ^ 58, ((-(q ^ 56) + 11 * q ^ 57) - 29 * q ^ 58) + 22 * q ^ 59, ((2 * q ^ 65 + 3 * q ^ 66) - 3 * q ^ 67) + q ^ 71, (3 * q ^ 57 - 10 * q ^ 58) + 6 * q ^ 59 + q ^ 60, (2 * q ^ 114 - 9 * q ^ 115) + 7 * q ^ 116, (((((q ^ 34 - 2 * q ^ 35) + q ^ 36 + 4 * q ^ 37) - 9 * q ^ 38) + 7 * q ^ 39) - q ^ 40) + q ^ 43, 90 * q ^ 84, (((-8 * q ^ 27 + 12 * q ^ 28 + 2 * q ^ 30) - 4 * q ^ 31) - 4 * q ^ 33) + 11 * q ^ 34 + q ^ 46, (((-(q ^ 87) + q ^ 88 + 5 * q ^ 89) - 10 * q ^ 90) - 2 * q ^ 91) + 4 * q ^ 92 + q ^ 94, (3 * q ^ 85 - 17 * q ^ 86) + 16 * q ^ 87, (((((-(q ^ 4) + q ^ 6 + 6 * q ^ 7 + q ^ 8) - 22 * q ^ 9) + 22 * q ^ 10) - 6 * q ^ 11) - q ^ 12) + q ^ 14, ((((q ^ 86 - q ^ 87) - 5 * q ^ 88) + 6 * q ^ 89) - 3 * q ^ 90) + q ^ 91, (24 * q ^ 87 - 27 * q ^ 88) + 12 * q ^ 90, (((((((-3 * q ^ 5 + 12 * q ^ 6) - 21 * q ^ 7) + 21 * q ^ 8 + 20 * q ^ 9) - 60 * q ^ 10) + 18 * q ^ 11 + 48 * q ^ 12) - 48 * q ^ 13) + 18 * q ^ 14) - 2 * q ^ 15, ((-(q ^ 87) + 9 * q ^ 88) - 9 * q ^ 89) + 4 * q ^ 91, ((-(q ^ 88) + 3 * q ^ 89) - 3 * q ^ 90) + q ^ 92, (20 * q ^ 27 - 6 * q ^ 30) + 15 * q ^ 33 + q ^ 45, (3 * q ^ 84 - 27 * q ^ 85) + 33 * q ^ 86, (((((((-3 * q ^ 7 + 7 * q ^ 8) - 19 * q ^ 9) + 37 * q ^ 10) - 8 * q ^ 11) - 36 * q ^ 12) + 23 * q ^ 13 + 8 * q ^ 14) - 7 * q ^ 15) + q ^ 17, (3 * q ^ 85 - 10 * q ^ 86) + 6 * q ^ 87 + q ^ 88, 90 * q ^ 112, (((-(q ^ 115) + q ^ 116 + 5 * q ^ 117) - 10 * q ^ 118) - 2 * q ^ 119) + 4 * q ^ 120 + q ^ 122, (10 * q ^ 112 - 40 * q ^ 113) + 40 * q ^ 114, ((-2 * q ^ 30 + 6 * q ^ 31) - 11 * q ^ 32) + 6 * q ^ 33, -30 * q ^ 112 + 60 * q ^ 113, (3 * q ^ 112 - 27 * q ^ 113) + 33 * q ^ 114, (((((((-3 * q ^ 35 + 7 * q ^ 36) - 19 * q ^ 37) + 37 * q ^ 38) - 8 * q ^ 39) - 36 * q ^ 40) + 23 * q ^ 41 + 8 * q ^ 42) - 7 * q ^ 43) + q ^ 45, (3 * q ^ 113 - 17 * q ^ 114) + 16 * q ^ 115, 90 * q ^ 140, (((-(q ^ 143) + q ^ 144 + 5 * q ^ 145) - 10 * q ^ 146) - 2 * q ^ 147) + 4 * q ^ 148 + q ^ 150, (10 * q ^ 140 - 40 * q ^ 141) + 40 * q ^ 142, -30 * q ^ 140 + 60 * q ^ 141, (3 * q ^ 140 - 27 * q ^ 141) + 33 * q ^ 142, (((((((-3 * q ^ 63 + 7 * q ^ 64) - 19 * q ^ 65) + 37 * q ^ 66) - 8 * q ^ 67) - 36 * q ^ 68) + 23 * q ^ 69 + 8 * q ^ 70) - 7 * q ^ 71) + q ^ 73, (3 * q ^ 141 - 17 * q ^ 142) + 16 * q ^ 143]
                end)
        f39 = function (q, j)
                return [105, -40 + 65q, (6 - 34q) + 31 * q ^ 2, (16 - 48q) + 41 * q ^ 2, ((-3 + 16q) - 32 * q ^ 2) + 20 * q ^ 3, (6q - 18 * q ^ 2) + 13 * q ^ 3, -3 * j * q + (10 * j ^ 2 + 12j) * q ^ 2 + 6 * q ^ 3, ((-6 + 30q) - 42 * q ^ 2) + 27 * q ^ 3, ((3 + (12 * j ^ 2 + 10j) * q) - 3 * j ^ 2 * q ^ 2) + 3 * q ^ 3, -1 + 6q + (10 * j ^ 2 + 6j) * q ^ 2 + j * q ^ 3 + 2 * q ^ 4, (((1 - 4q) + 13 * q ^ 2) - 20 * q ^ 3) + 10 * q ^ 4, (3 * q ^ 2 - 8 * q ^ 3) + 5 * q ^ 4, (j ^ 2 - j) * q ^ 2 + (2 * j ^ 2 + 3j) * q ^ 3 + q ^ 4, ((-5 * j ^ 2 - 4j) * q + (14 * j ^ 2 + 11j) * q ^ 2 + (-10 * j ^ 2 - 7j) * q ^ 3) - 2 * q ^ 4, ((-3q + 10 * q ^ 2) - 15 * q ^ 3) + 9 * q ^ 4, 2 * j * q + (-4 * j ^ 2 - 5j) * q ^ 2 + (8 * j ^ 2 + 10j) * q ^ 3 + 4 * q ^ 4, (((1 - 9q) + 22 * q ^ 2) - 25 * q ^ 3) + 14 * q ^ 4, ((-2 * q ^ 2 + 4 * q ^ 3) - 6 * q ^ 4) + 4 * q ^ 5, (-2q + (-8 * j ^ 2 - 6j) * q ^ 2 + (13 * j ^ 2 + 9j) * q ^ 3 + (-7 * j ^ 2 - 6j) * q ^ 4) - q ^ 5, j * q ^ 4, Unknown(), ((-4 * j ^ 2 - 3j) * q ^ 2 + (9 * j ^ 2 + 6j) * q ^ 3 + (-6 * j ^ 2 - 5j) * q ^ 4) - 2 * q ^ 5, Unknown(), (((q - 3 * q ^ 2) + 7 * q ^ 3) - 9 * q ^ 4) + 5 * q ^ 5, (q ^ 3 - 3 * q ^ 4) + 2 * q ^ 5, (j * q ^ 2 - j * q ^ 3) + (j ^ 2 + 2j) * q ^ 4 + q ^ 5, 9 * j ^ 2 * q ^ 2 + 24 * q ^ 3 + (36 * j ^ 2 + 30j) * q ^ 4 + 6 * q ^ 6, 0, Unknown(), 6 * q ^ 3 + (10 * j ^ 2 + 9j) * q ^ 4 + (-3 * j ^ 2 - 2j) * q ^ 5 + q ^ 6, 0, 3 + 6 * j * q + (10 * j ^ 2 + 12j) * q ^ 2 + 18 * q ^ 3 + 3 * j * q ^ 4 + (20 * j ^ 2 + 24j) * q ^ 5 + 9 * q ^ 6, Unknown(), Unknown(), ((-6 * j ^ 2 * q ^ 2 + (11 * j ^ 2 + 8j) * q ^ 3 + 28 * q ^ 4 + (24 * j ^ 2 + 18j) * q ^ 5) - 2 * q ^ 6) + 4 * q ^ 7, ((-(j ^ 2) * q ^ 3 - 2 * j * q ^ 4) + (3 * j ^ 2 + 2j) * q ^ 5) - j ^ 2 * q ^ 6, -1 + (-2 * j ^ 2 - 6j) * q + (-4 * j ^ 2 - 2j) * q ^ 2 + (12 * j ^ 2 + 14j) * q ^ 3 + (-12 * j ^ 2 - 14j) * q ^ 4 + (-8 * j ^ 2 - 7j) * q ^ 5 + (15 * j ^ 2 + 19j) * q ^ 6 + 6 * q ^ 7, j ^ 2 * q ^ 2 + (-3 * j ^ 2 - j) * q ^ 3 + (4 * j ^ 2 + 2j) * q ^ 4 + (-2 * j ^ 2 - j) * q ^ 5 + j * q ^ 6, -2 * q ^ 3 + 7 * q ^ 4 + (8 * j ^ 2 + 7j) * q ^ 5 + (-2 * j ^ 2 - j) * q ^ 6 + q ^ 7, (2 * j ^ 2 + j) * q ^ 3 + (-7 * j ^ 2 - 8j) * q ^ 4 + (10 * j ^ 2 + 8j) * q ^ 5 + q ^ 7, Unknown(), (-6 * j ^ 2 - 8j) * q ^ 2 + (7 * j ^ 2 + 15j) * q ^ 3 + 10 * j ^ 2 * q ^ 4 + (-25 * j ^ 2 - 19j) * q ^ 5 + (18 * j ^ 2 + 20j) * q ^ 6 + 4 * q ^ 7, Unknown(), Unknown(), (j ^ 2 + 2j) * q ^ 2 + (-6 * j ^ 2 - 11j) * q ^ 3 + (4 * j ^ 2 + 12j) * q ^ 4 + (11 * j ^ 2 + 2j) * q ^ 5 + (-20 * j ^ 2 - 16j) * q ^ 6 + (10 * j ^ 2 + 12j) * q ^ 7 + 2 * q ^ 8, -2 * j ^ 2 * q ^ 4 + (-2 * j ^ 2 - 3j) * q ^ 5 + (3 * j ^ 2 + j) * q ^ 6, (3 * j * q ^ 132 - 8 * j * q ^ 133) + 5 * j * q ^ 134, (3 * j ^ 2 * q ^ 28 - 8 * j ^ 2 * q ^ 29) + 5 * j ^ 2 * q ^ 30, -(j ^ 2) * q ^ 3 + (3 * j ^ 2 + 4j) * q ^ 4 + 8 * q ^ 5 + (7 * j ^ 2 + 5j) * q ^ 6 + q ^ 8, Unknown(), Unknown(), -2 * q ^ 2 + (-5 * j ^ 2 - 10j) * q ^ 3 + (j ^ 2 + 11j) * q ^ 4 + (14 * j ^ 2 + 5j) * q ^ 5 + (-22 * j ^ 2 - 20j) * q ^ 6 + (13 * j ^ 2 + 15j) * q ^ 7 + 3 * q ^ 8, Unknown(), Unknown(), Unknown(), ((-2 * j ^ 2 * q ^ 28 + 4 * j ^ 2 * q ^ 29) - 6 * j ^ 2 * q ^ 30) + 4 * j ^ 2 * q ^ 31, Unknown(), Unknown(), (3 * j ^ 2 + 4j) * q ^ 4 + (-14 * j ^ 2 - 12j) * q ^ 5 + (18 * j ^ 2 + 17j) * q ^ 6 + (-4 * j ^ 2 - 6j) * q ^ 7 + (-9 * j ^ 2 - 8j) * q ^ 8 + (8 * j ^ 2 + 10j) * q ^ 9 + 2 * q ^ 10, 0, Unknown(), Unknown(), 0, ((2 * j ^ 2 * q ^ 5 + 2 * q ^ 6) - 2 * q ^ 7) + j ^ 2 * q ^ 8, Unknown(), Unknown(), Unknown(), ((-2 * j * q ^ 54 + 4 * j * q ^ 55) - 6 * j * q ^ 56) + 4 * j * q ^ 57, Unknown(), Unknown(), (((q ^ 79 - 3 * q ^ 80) + 7 * q ^ 81) - 9 * q ^ 82) + 5 * q ^ 83, Unknown(), Unknown(), (-2 * j ^ 2 + 2j) * q ^ 5 + (10 * j ^ 2 + 2j) * q ^ 6 + (-16 * j ^ 2 - 12j) * q ^ 7 + (9 * j ^ 2 + 10j) * q ^ 8 + (-2 * j ^ 2 - 4j) * q ^ 9 + (2 * j ^ 2 + 3j) * q ^ 10 + q ^ 12, 0, ((j ^ 2 + 5j) * q ^ 131 + (-3 * j ^ 2 - 14j) * q ^ 132 + (3 * j ^ 2 + 10j) * q ^ 133) - 2 * j * q ^ 134, (((j * q ^ 131 - 3 * j * q ^ 132) + 7 * j * q ^ 133) - 9 * j * q ^ 134) + 5 * j * q ^ 135, Unknown(), (-7 * j ^ 2 - 4j) * q ^ 9 - 3 * q ^ 11, ((4 * j ^ 2 - j) * q ^ 27 + (-11 * j ^ 2 + 3j) * q ^ 28 + (7 * j ^ 2 - 3j) * q ^ 29) - 2 * j ^ 2 * q ^ 30, Unknown(), ((-3 * j * q ^ 53 + 10 * j * q ^ 54) - 15 * j * q ^ 55) + 9 * j * q ^ 56, q ^ 55, Unknown(), Unknown(), (3 * j * q ^ 54 - 8 * j * q ^ 55) + 5 * j * q ^ 56, Unknown(), 105 * j ^ 2 * q ^ 26, (j ^ 2 + 2j) * q ^ 28 + (-3 * j ^ 2 - j) * q ^ 29 + j ^ 2 * q ^ 30, (16 * j ^ 2 * q ^ 26 - 48 * j ^ 2 * q ^ 27) + 41 * j ^ 2 * q ^ 28, Unknown(), (6 * j ^ 2 * q ^ 27 - 18 * j ^ 2 * q ^ 28) + 13 * j ^ 2 * q ^ 29, ((-6 * j ^ 2 * q ^ 26 + 30 * j ^ 2 * q ^ 27) - 42 * j ^ 2 * q ^ 28) + 27 * j ^ 2 * q ^ 29, (((j ^ 2 * q ^ 26 - 4 * j ^ 2 * q ^ 27) + 13 * j ^ 2 * q ^ 28) - 20 * j ^ 2 * q ^ 29) + 10 * j ^ 2 * q ^ 30, Unknown(), 2 * q ^ 27 + (5 * j ^ 2 + j) * q ^ 28 + (-10 * j ^ 2 - 2j) * q ^ 29 + 4 * j ^ 2 * q ^ 30, (((j ^ 2 * q ^ 26 - 9 * j ^ 2 * q ^ 27) + 22 * j ^ 2 * q ^ 28) - 25 * j ^ 2 * q ^ 29) + 14 * j ^ 2 * q ^ 30, (-2 * j ^ 2 * q ^ 27 + (6 * j ^ 2 - 2j) * q ^ 28 + (-9 * j ^ 2 + 4j) * q ^ 29 + (6 * j ^ 2 - j) * q ^ 30) - j ^ 2 * q ^ 31, 9 * j * q ^ 28 + 24 * j ^ 2 * q ^ 29 + (-30 * j ^ 2 + 6j) * q ^ 30 + 6 * j ^ 2 * q ^ 32, 3 * j ^ 2 * q ^ 26 + 6 * q ^ 27 + (-12 * j ^ 2 - 2j) * q ^ 28 + 18 * j ^ 2 * q ^ 29 + 3 * q ^ 30 + (-24 * j ^ 2 - 4j) * q ^ 31 + 9 * j ^ 2 * q ^ 32, (-(j ^ 2) + j) * q ^ 29 + (8 * j ^ 2 + j) * q ^ 30 + (-8 * j ^ 2 + 2j) * q ^ 31 + j ^ 2 * q ^ 33, ((-6 * j * q ^ 28 + (-8 * j ^ 2 + 3j) * q ^ 29 + 28 * j ^ 2 * q ^ 30 + (-18 * j ^ 2 + 6j) * q ^ 31) - 2 * j ^ 2 * q ^ 32) + 4 * j ^ 2 * q ^ 33, -(j ^ 2) * q ^ 26 + (6 * j ^ 2 + 4j) * q ^ 27 + (2 * j ^ 2 - 2j) * q ^ 28 + (-14 * j ^ 2 - 2j) * q ^ 29 + (14 * j ^ 2 + 2j) * q ^ 30 + (7 * j ^ 2 - j) * q ^ 31 + (-19 * j ^ 2 - 4j) * q ^ 32 + 6 * j ^ 2 * q ^ 33, Unknown(), -j * q ^ 29 + (-4 * j ^ 2 - j) * q ^ 30 + 8 * j ^ 2 * q ^ 31 + (-5 * j ^ 2 + 2j) * q ^ 32 + j ^ 2 * q ^ 34, -2 * j * q ^ 30 + (3 * j ^ 2 + j) * q ^ 31 + (-(j ^ 2) + 2j) * q ^ 32, ((2 * j * q ^ 31 + 2 * j ^ 2 * q ^ 32) - 2 * j ^ 2 * q ^ 33) + j * q ^ 34, -40 * j ^ 2 * q ^ 26 + 65 * j ^ 2 * q ^ 27, (-2 * j ^ 2 - 4j) * q ^ 31 + (-2 * j ^ 2 + 8j) * q ^ 32 + (12 * j ^ 2 - 4j) * q ^ 33 + (-10 * j ^ 2 - j) * q ^ 34 + (4 * j ^ 2 + 2j) * q ^ 35 + (-3 * j ^ 2 - j) * q ^ 36 + j ^ 2 * q ^ 38, -3 * q ^ 27 + (-12 * j ^ 2 - 2j) * q ^ 28 + 6 * j ^ 2 * q ^ 29, (6 * j ^ 2 * q ^ 26 - 34 * j ^ 2 * q ^ 27) + 31 * j ^ 2 * q ^ 28, Unknown(), ((-3 * j ^ 2 * q ^ 26 + 16 * j ^ 2 * q ^ 27) - 32 * j ^ 2 * q ^ 28) + 20 * j ^ 2 * q ^ 29, (4 * j ^ 2 - 3j) * q ^ 35 - 3 * j ^ 2 * q ^ 37, Unknown(), Unknown(), (3 * q ^ 80 - 8 * q ^ 81) + 5 * q ^ 82, Unknown(), 0, ((-3 * j ^ 2 * q ^ 27 + 10 * j ^ 2 * q ^ 28) - 15 * j ^ 2 * q ^ 29) + 9 * j ^ 2 * q ^ 30, Unknown(), 105 * j * q ^ 52, Unknown(), (16 * j * q ^ 52 - 48 * j * q ^ 53) + 41 * j * q ^ 54, (6 * j * q ^ 53 - 18 * j * q ^ 54) + 13 * j * q ^ 55, ((-6 * j * q ^ 52 + 30 * j * q ^ 53) - 42 * j * q ^ 54) + 27 * j * q ^ 55, -j * q ^ 52 + 6 * j * q ^ 53 + (-4 * j ^ 2 - 10j) * q ^ 54 + j ^ 2 * q ^ 55 + 2 * j * q ^ 56, (-2 * j * q ^ 53 + (2 * j ^ 2 + 8j) * q ^ 54 + (-4 * j ^ 2 - 13j) * q ^ 55 + (j ^ 2 + 7j) * q ^ 56) - j * q ^ 57, Unknown(), 9 * q ^ 54 + 24 * j * q ^ 55 + (-6 * j ^ 2 - 36j) * q ^ 56 + 6 * j * q ^ 58, ((-6 * q ^ 54 + (-3 * j ^ 2 - 11j) * q ^ 55 + 28 * j * q ^ 56 + (-6 * j ^ 2 - 24j) * q ^ 57) - 2 * j * q ^ 58) + 4 * j * q ^ 59, (-(j ^ 2) - 2j) * q ^ 55 + (-(j ^ 2) + 7j) * q ^ 56 + (-2 * j ^ 2 - 10j) * q ^ 57 + j * q ^ 59, -2 * q ^ 56 + (-(j ^ 2) + 2j) * q ^ 57 + (-2 * j ^ 2 - 3j) * q ^ 58, -40 * j * q ^ 52 + 65 * j * q ^ 53, (6 * j * q ^ 52 - 34 * j * q ^ 53) + 31 * j * q ^ 54, ((-3 * j * q ^ 52 + 16 * j * q ^ 53) - 32 * j * q ^ 54) + 20 * j * q ^ 55, (3 * j ^ 2 + 7j) * q ^ 61 - 3 * j * q ^ 63, ((j ^ 2 + 5j) * q ^ 53 + (-3 * j ^ 2 - 14j) * q ^ 54 + (3 * j ^ 2 + 10j) * q ^ 55) - 2 * j * q ^ 56, (3 * j ^ 2 * q ^ 106 - 8 * j ^ 2 * q ^ 107) + 5 * j ^ 2 * q ^ 108, Unknown(), 105 * q ^ 78, ((-4 * q ^ 27 + 6 * q ^ 28) - 4 * q ^ 33) + 11 * q ^ 34, Unknown(), (6 * q ^ 79 - 18 * q ^ 80) + 13 * q ^ 81, Unknown(), Unknown(), 9 * j ^ 2 * q ^ 80 + 24 * q ^ 81 + (36 * j ^ 2 + 30j) * q ^ 82 + 6 * q ^ 84, Unknown(), (2 * j ^ 2 + j) * q ^ 81 + (-7 * j ^ 2 - 8j) * q ^ 82 + (10 * j ^ 2 + 8j) * q ^ 83 + q ^ 85, -2 * j ^ 2 * q ^ 82 + (-2 * j ^ 2 - 3j) * q ^ 83 + (3 * j ^ 2 + j) * q ^ 84, 10 * q ^ 27 + 15 * q ^ 33, (6 * q ^ 78 - 34 * q ^ 79) + 31 * q ^ 80, Unknown(), ((-5 * j ^ 2 - 4j) * q ^ 79 + (14 * j ^ 2 + 11j) * q ^ 80 + (-10 * j ^ 2 - 7j) * q ^ 81) - 2 * q ^ 82, 105 * j ^ 2 * q ^ 104, Unknown(), (16 * j ^ 2 * q ^ 104 - 48 * j ^ 2 * q ^ 105) + 41 * j ^ 2 * q ^ 106, (((j ^ 2 * q ^ 27 - 3 * j ^ 2 * q ^ 28) + 7 * j ^ 2 * q ^ 29) - 9 * j ^ 2 * q ^ 30) + 5 * j ^ 2 * q ^ 31, -40 * j ^ 2 * q ^ 104 + 65 * j ^ 2 * q ^ 105, (6 * j ^ 2 * q ^ 104 - 34 * j ^ 2 * q ^ 105) + 31 * j ^ 2 * q ^ 106, Unknown(), (6 * j ^ 2 * q ^ 105 - 18 * j ^ 2 * q ^ 106) + 13 * j ^ 2 * q ^ 107, 105 * j * q ^ 130, Unknown(), (16 * j * q ^ 130 - 48 * j * q ^ 131) + 41 * j * q ^ 132, -40 * j * q ^ 130 + 65 * j * q ^ 131, (6 * j * q ^ 130 - 34 * j * q ^ 131) + 31 * j * q ^ 132, Unknown(), (6 * j * q ^ 131 - 18 * j * q ^ 132) + 13 * j * q ^ 133]
            end
        f40 = function (q, j)
                return [105, -70 + 35q, (39 - 31q) + 4 * q ^ 2, (46 - 48q) + 11 * q ^ 2, ((-25 + 35q) - 13 * q ^ 2) + q ^ 3, (-19 + 20q) - 4 * q ^ 2, -15 + (-12 * j ^ 2 - 9j) * q + j ^ 2 * q ^ 2, ((-30 + 48q) - 24 * q ^ 2) + 3 * q ^ 3, (-12 + j * q + (-9 * j ^ 2 - 12j) * q ^ 2) - 3 * q ^ 3, (7 + (5 * j ^ 2 + 4j) * q + (6 * j ^ 2 + 8j) * q ^ 2 + (-5 * j ^ 2 - 6j) * q ^ 3) - q ^ 4, ((13 - 24q) + 13 * q ^ 2) - 2 * q ^ 3, (8 - 11q) + 3 * q ^ 2, (5 + (5 * j ^ 2 + 3j) * q) - j ^ 2 * q ^ 2, 2 + (-6 * j ^ 2 - 7j) * q + (9 * j ^ 2 + 12j) * q ^ 2 + (-3 * j ^ 2 - 4j) * q ^ 3, ((12 - 20q) + 10 * q ^ 2) - q ^ 3, 9 + (14 * j ^ 2 + 12j) * q + (-5 * j ^ 2 - 3j) * q ^ 2, ((16 - 32q) + 21 * q ^ 2) - 5 * q ^ 3, ((-5 + 10q) - 6 * q ^ 2) + q ^ 3, -1 + (3 * j ^ 2 + 4j) * q + (-8 * j ^ 2 - 10j) * q ^ 2 + (5 * j ^ 2 + 7j) * q ^ 3 + q ^ 4, -1 + (-2 * j ^ 2 - j) * q + j ^ 2 * q ^ 2, Unknown(), 1 + (5 * j ^ 2 + 6j) * q + (-6 * j ^ 2 - 8j) * q ^ 2 + (2 * j ^ 2 + 3j) * q ^ 3, Unknown(), ((-6 + 13q) - 9 * q ^ 2) + 2 * q ^ 3, (-3 + 5q) - 2 * q ^ 2, -3 + (-5 * j ^ 2 - 4j) * q + (3 * j ^ 2 + j) * q ^ 2, 15 + (27 * j ^ 2 + 36j) * q ^ 2 + 24 * q ^ 3 + 3 * j * q ^ 4, 0, Unknown(), 5 + (-3 * j ^ 2 - 5j) * q + (11 * j ^ 2 + 13j) * q ^ 2 + 3 * q ^ 3, 0, 18 + (24 * j ^ 2 + 18j) * q + j ^ 2 * q ^ 2 + 18 * q ^ 3 + (12 * j ^ 2 + 9j) * q ^ 4 + 2 * j ^ 2 * q ^ 5 + 3 * q ^ 6, Unknown(), Unknown(), -9 + 6q + (-18 * j ^ 2 - 24j) * q ^ 2 + (25 * j ^ 2 + 28j) * q ^ 3 + (-8 * j ^ 2 - 11j) * q ^ 4, (-1 + (j ^ 2 + 2j) * q + (-4 * j ^ 2 - 5j) * q ^ 2) - q ^ 3, ((((-11 + (-23 * j ^ 2 - 19j) * q + (7 * j ^ 2 + 6j) * q ^ 2) - 12 * q ^ 3) + (-14 * j ^ 2 - 12j) * q ^ 4 + (2 * j ^ 2 + 3j) * q ^ 5) - 2 * q ^ 6) + q ^ 7, -1 + j * q + (-(j ^ 2) - 2j) * q ^ 2 + (-2 * j ^ 2 - 3j) * q ^ 3 + (j ^ 2 + 2j) * q ^ 4, -3 + j * q + (-8 * j ^ 2 - 10j) * q ^ 2 + (6 * j ^ 2 + 7j) * q ^ 3 + q ^ 4, (-5 + (-9 * j ^ 2 - 13j) * q ^ 2) - 8 * q ^ 3, Unknown(), -8 + (-22 * j ^ 2 - 18j) * q + (22 * j ^ 2 + 24j) * q ^ 2 + (-(j ^ 2) - 7j) * q ^ 3 + (-14 * j ^ 2 - 8j) * q ^ 4 + (7 * j ^ 2 + 5j) * q ^ 5, Unknown(), Unknown(), (3 + (14 * j ^ 2 + 12j) * q + (-18 * j ^ 2 - 20j) * q ^ 2 + (4 * j ^ 2 + 10j) * q ^ 3 + (10 * j ^ 2 + 4j) * q ^ 4 + (-7 * j ^ 2 - 5j) * q ^ 5) - q ^ 6, 1 + (3 * j ^ 2 + 5j) * q ^ 2 + 3 * q ^ 3, (8 * j * q ^ 70 - 11 * j * q ^ 71) + 3 * j * q ^ 72, (8 * j ^ 2 * q ^ 14 - 11 * j ^ 2 * q ^ 15) + 3 * j ^ 2 * q ^ 16, ((3 - 2q) + (6 * j ^ 2 + 8j) * q ^ 2 + (-8 * j ^ 2 - 10j) * q ^ 3) - 3 * q ^ 4, Unknown(), Unknown(), (5 + (17 * j ^ 2 + 15j) * q + 22 * q ^ 2 + (8 * j ^ 2 + 13j) * q ^ 3 + (9 * j ^ 2 + 3j) * q ^ 4 + (-9 * j ^ 2 - 6j) * q ^ 5) - 2 * q ^ 6, Unknown(), Unknown(), Unknown(), ((-5 * j ^ 2 * q ^ 14 + 10 * j ^ 2 * q ^ 15) - 6 * j ^ 2 * q ^ 16) + j ^ 2 * q ^ 17, Unknown(), Unknown(), (3 + (12 * j ^ 2 + 10j) * q + (-12 * j ^ 2 - 13j) * q ^ 2 + (-6 * j ^ 2 - 2j) * q ^ 3 + (16 * j ^ 2 + 14j) * q ^ 4 + 6 * q ^ 5) - j ^ 2 * q ^ 6, 0, Unknown(), Unknown(), 0, ((1 + (j ^ 2 + 2j) * q ^ 2) - 2 * q ^ 3) + (-2 * j ^ 2 - 3j) * q ^ 4, Unknown(), Unknown(), Unknown(), ((-5 * j * q ^ 28 + 10 * j * q ^ 29) - 6 * j * q ^ 30) + j * q ^ 31, Unknown(), Unknown(), ((-6 * q ^ 42 + 13 * q ^ 43) - 9 * q ^ 44) + 2 * q ^ 45, Unknown(), Unknown(), 5 + (5 * j ^ 2 + 3j) * q ^ 2 + 4 * j * q ^ 3 + (5 * j ^ 2 + 3j) * q ^ 4 + (-10 * j ^ 2 - 12j) * q ^ 5 + (3 * j ^ 2 + 7j) * q ^ 6 + 2 * j ^ 2 * q ^ 7, 0, 2 * j * q ^ 70 + (-(j ^ 2) + 6j) * q ^ 71 + (3 * j ^ 2 - 9j) * q ^ 72 + (-(j ^ 2) + 3j) * q ^ 73, ((-6 * j * q ^ 70 + 13 * j * q ^ 71) - 9 * j * q ^ 72) + 2 * j * q ^ 73, Unknown(), ((-1 + (j ^ 2 - 2j) * q ^ 3 + 3 * q ^ 4) - 3 * q ^ 5) + (-6 * j ^ 2 + 3j) * q ^ 6, 2 * j ^ 2 * q ^ 14 + (7 * j ^ 2 + j) * q ^ 15 + (-12 * j ^ 2 - 3j) * q ^ 16 + (4 * j ^ 2 + j) * q ^ 17, Unknown(), ((12 * j * q ^ 28 - 20 * j * q ^ 29) + 10 * j * q ^ 30) - j * q ^ 31, -j * q ^ 28 - q ^ 29, Unknown(), Unknown(), (8 * j * q ^ 28 - 11 * j * q ^ 29) + 3 * j * q ^ 30, Unknown(), 105 * j ^ 2 * q ^ 14, (5 * j ^ 2 * q ^ 14 + (-3 * j ^ 2 + 2j) * q ^ 15) - j * q ^ 16, (46 * j ^ 2 * q ^ 14 - 48 * j ^ 2 * q ^ 15) + 11 * j ^ 2 * q ^ 16, Unknown(), (-19 * j ^ 2 * q ^ 14 + 20 * j ^ 2 * q ^ 15) - 4 * j ^ 2 * q ^ 16, ((-30 * j ^ 2 * q ^ 14 + 48 * j ^ 2 * q ^ 15) - 24 * j ^ 2 * q ^ 16) + 3 * j ^ 2 * q ^ 17, ((13 * j ^ 2 * q ^ 14 - 24 * j ^ 2 * q ^ 15) + 13 * j ^ 2 * q ^ 16) - 2 * j ^ 2 * q ^ 17, Unknown(), 9 * j ^ 2 * q ^ 14 + (-12 * j ^ 2 + 2j) * q ^ 15 + (3 * j ^ 2 - 2j) * q ^ 16, ((16 * j ^ 2 * q ^ 14 - 32 * j ^ 2 * q ^ 15) + 21 * j ^ 2 * q ^ 16) - 5 * j ^ 2 * q ^ 17, -(j ^ 2) * q ^ 14 + (-4 * j ^ 2 - j) * q ^ 15 + (10 * j ^ 2 + 2j) * q ^ 16 + (-7 * j ^ 2 - 2j) * q ^ 17 + j ^ 2 * q ^ 18, 15 * j ^ 2 * q ^ 14 + (-36 * j ^ 2 - 9j) * q ^ 16 + 24 * j ^ 2 * q ^ 17 + 3 * q ^ 18, 18 * j ^ 2 * q ^ 14 + (-18 * j ^ 2 + 6j) * q ^ 15 + j * q ^ 16 + 18 * j ^ 2 * q ^ 17 + (-9 * j ^ 2 + 3j) * q ^ 18 + 2 * j * q ^ 19 + 3 * j ^ 2 * q ^ 20, (-5 * j ^ 2 * q ^ 14 + (13 * j ^ 2 + 4j) * q ^ 16) - 8 * j ^ 2 * q ^ 17, -9 * j ^ 2 * q ^ 14 + 6 * j ^ 2 * q ^ 15 + (24 * j ^ 2 + 6j) * q ^ 16 + (-28 * j ^ 2 - 3j) * q ^ 17 + (11 * j ^ 2 + 3j) * q ^ 18, ((((-11 * j ^ 2 * q ^ 14 + (19 * j ^ 2 - 4j) * q ^ 15 + (-6 * j ^ 2 + j) * q ^ 16) - 12 * j ^ 2 * q ^ 17) + (12 * j ^ 2 - 2j) * q ^ 18 + (-3 * j ^ 2 - j) * q ^ 19) - 2 * j ^ 2 * q ^ 20) + j ^ 2 * q ^ 21, Unknown(), ((3 * j ^ 2 * q ^ 14 - 2 * j ^ 2 * q ^ 15) + (-8 * j ^ 2 - 2j) * q ^ 16 + (10 * j ^ 2 + 2j) * q ^ 17) - 3 * j ^ 2 * q ^ 18, j ^ 2 * q ^ 14 + (-5 * j ^ 2 - 2j) * q ^ 16 + 3 * j ^ 2 * q ^ 17, ((j ^ 2 * q ^ 14 + (-2 * j ^ 2 - j) * q ^ 16) - 2 * j ^ 2 * q ^ 17) + (3 * j ^ 2 + j) * q ^ 18, -70 * j ^ 2 * q ^ 14 + 35 * j ^ 2 * q ^ 15, 5 * j ^ 2 * q ^ 14 + (-3 * j ^ 2 + 2j) * q ^ 16 + 4 * q ^ 17 + (-3 * j ^ 2 + 2j) * q ^ 18 + (12 * j ^ 2 + 2j) * q ^ 19 + (-7 * j ^ 2 - 4j) * q ^ 20 + 2 * j * q ^ 21, -15 * j ^ 2 * q ^ 14 + (9 * j ^ 2 - 3j) * q ^ 15 + j * q ^ 16, (39 * j ^ 2 * q ^ 14 - 31 * j ^ 2 * q ^ 15) + 4 * j ^ 2 * q ^ 16, Unknown(), ((-25 * j ^ 2 * q ^ 14 + 35 * j ^ 2 * q ^ 15) - 13 * j ^ 2 * q ^ 16) + j ^ 2 * q ^ 17, ((-(j ^ 2) * q ^ 14 + (2 * j ^ 2 + 3j) * q ^ 17 + 3 * j ^ 2 * q ^ 18) - 3 * j ^ 2 * q ^ 19) + (-3 * j ^ 2 - 9j) * q ^ 20, Unknown(), Unknown(), (8 * q ^ 42 - 11 * q ^ 43) + 3 * q ^ 44, Unknown(), 0, ((12 * j ^ 2 * q ^ 14 - 20 * j ^ 2 * q ^ 15) + 10 * j ^ 2 * q ^ 16) - j ^ 2 * q ^ 17, Unknown(), 105 * j * q ^ 28, Unknown(), (46 * j * q ^ 28 - 48 * j * q ^ 29) + 11 * j * q ^ 30, (-19 * j * q ^ 28 + 20 * j * q ^ 29) - 4 * j * q ^ 30, ((-30 * j * q ^ 28 + 48 * j * q ^ 29) - 24 * j * q ^ 30) + 3 * j * q ^ 31, (7 * j * q ^ 28 + (-(j ^ 2) - 5j) * q ^ 29 + (2 * j ^ 2 - 6j) * q ^ 30 + (-(j ^ 2) + 5j) * q ^ 31) - j * q ^ 32, -j * q ^ 28 + (j ^ 2 - 3j) * q ^ 29 + (-2 * j ^ 2 + 8j) * q ^ 30 + (2 * j ^ 2 - 5j) * q ^ 31 + j * q ^ 32, Unknown(), 15 * j * q ^ 28 + (9 * j ^ 2 - 27j) * q ^ 30 + 24 * j * q ^ 31 + 3 * j ^ 2 * q ^ 32, -9 * j * q ^ 28 + 6 * j * q ^ 29 + (-6 * j ^ 2 + 18j) * q ^ 30 + (3 * j ^ 2 - 25j) * q ^ 31 + (-3 * j ^ 2 + 8j) * q ^ 32, (-5 * j * q ^ 28 + (-4 * j ^ 2 + 9j) * q ^ 30) - 8 * j * q ^ 31, j * q ^ 28 + (2 * j ^ 2 - 3j) * q ^ 30 + 3 * j * q ^ 31, -70 * j * q ^ 28 + 35 * j * q ^ 29, (39 * j * q ^ 28 - 31 * j * q ^ 29) + 4 * j * q ^ 30, ((-25 * j * q ^ 28 + 35 * j * q ^ 29) - 13 * j * q ^ 30) + j * q ^ 31, ((-j * q ^ 28 + (-3 * j ^ 2 - j) * q ^ 31 + 3 * j * q ^ 32) - 3 * j * q ^ 33) + (9 * j ^ 2 + 6j) * q ^ 34, 2 * j * q ^ 28 + (-(j ^ 2) + 6j) * q ^ 29 + (3 * j ^ 2 - 9j) * q ^ 30 + (-(j ^ 2) + 3j) * q ^ 31, (8 * j ^ 2 * q ^ 56 - 11 * j ^ 2 * q ^ 57) + 3 * j ^ 2 * q ^ 58, Unknown(), 105 * q ^ 42, (((((1 - 4 * q ^ 9) + q ^ 10 + 11 * q ^ 12) - 4 * q ^ 13) - 4 * q ^ 15) + 2 * q ^ 16 + 18 * q ^ 18) - 12 * q ^ 19, Unknown(), (-19 * q ^ 42 + 20 * q ^ 43) - 4 * q ^ 44, Unknown(), Unknown(), 15 * q ^ 42 + (27 * j ^ 2 + 36j) * q ^ 44 + 24 * q ^ 45 + 3 * j * q ^ 46, Unknown(), (-5 * q ^ 42 + (-9 * j ^ 2 - 13j) * q ^ 44) - 8 * q ^ 45, q ^ 42 + (3 * j ^ 2 + 5j) * q ^ 44 + 3 * q ^ 45, (((-1 + 5 * q ^ 9) - 15 * q ^ 12) + 6 * q ^ 15) - 30 * q ^ 18, (39 * q ^ 42 - 31 * q ^ 43) + 4 * q ^ 44, Unknown(), 2 * q ^ 42 + (-6 * j ^ 2 - 7j) * q ^ 43 + (9 * j ^ 2 + 12j) * q ^ 44 + (-3 * j ^ 2 - 4j) * q ^ 45, 105 * j ^ 2 * q ^ 56, Unknown(), (46 * j ^ 2 * q ^ 56 - 48 * j ^ 2 * q ^ 57) + 11 * j ^ 2 * q ^ 58, ((-6 * j ^ 2 * q ^ 14 + 13 * j ^ 2 * q ^ 15) - 9 * j ^ 2 * q ^ 16) + 2 * j ^ 2 * q ^ 17, -70 * j ^ 2 * q ^ 56 + 35 * j ^ 2 * q ^ 57, (39 * j ^ 2 * q ^ 56 - 31 * j ^ 2 * q ^ 57) + 4 * j ^ 2 * q ^ 58, Unknown(), (-19 * j ^ 2 * q ^ 56 + 20 * j ^ 2 * q ^ 57) - 4 * j ^ 2 * q ^ 58, 105 * j * q ^ 70, Unknown(), (46 * j * q ^ 70 - 48 * j * q ^ 71) + 11 * j * q ^ 72, -70 * j * q ^ 70 + 35 * j * q ^ 71, (39 * j * q ^ 70 - 31 * j * q ^ 71) + 4 * j * q ^ 72, Unknown(), (-19 * j * q ^ 70 + 20 * j * q ^ 71) - 4 * j * q ^ 72]
            end
        f47 = function (q, j)
                return [105, -50 + 55q, (16 - 34q) + 21 * q ^ 2, (22 - 56q) + 27 * q ^ 2, ((-6 + 26q) - 30 * q ^ 2) + 9 * q ^ 3, ((-3 + 13q) - 15 * q ^ 2) + 6 * q ^ 3, -3 + (-(j ^ 2) - 9j) * q + (9 * j ^ 2 + 6j) * q ^ 2 + 3 * q ^ 3, ((-9 + 39q) - 45 * q ^ 2) + 12 * q ^ 3, (6 * j ^ 2 + 9j) * q + (-9 * j ^ 2 - j) * q ^ 2, (((-4 * j ^ 2 - 5j) * q + (6 * j ^ 2 + 4j) * q ^ 2) - 4 * j ^ 2 * q ^ 3) - q ^ 4, (((1 - 10q) + 21 * q ^ 2) - 14 * q ^ 3) + 2 * q ^ 4, ((-3q + 7 * q ^ 2) - 5 * q ^ 3) + q ^ 4, (2 * j * q - 2 * j * q ^ 2) + (2 * j ^ 2 + j) * q ^ 3, (-1 + (-5 * j ^ 2 - 7j) * q + (13 * j ^ 2 + 10j) * q ^ 2 + (-10 * j ^ 2 - 4j) * q ^ 3) - 2 * q ^ 4, (((1 - 7q) + 16 * q ^ 2) - 11 * q ^ 3) + 2 * q ^ 4, 1 + (2 * j ^ 2 + 6j) * q + (-6 * j ^ 2 - 9j) * q ^ 2 + (6 * j ^ 2 + 4j) * q ^ 3 + q ^ 4, (((2 - 15q) + 30 * q ^ 2) - 21 * q ^ 3) + 3 * q ^ 4, ((q - 5 * q ^ 2) + 7 * q ^ 3) - 3 * q ^ 4, ((3 * j ^ 2 + 4j) * q + (-10 * j ^ 2 - 9j) * q ^ 2 + (11 * j ^ 2 + 7j) * q ^ 3 + (-6 * j ^ 2 - 3j) * q ^ 4) - q ^ 5, j * q ^ 2, Unknown(), (-2q + 6 * q ^ 2 + (8 * j ^ 2 + 5j) * q ^ 3 + (-4 * j ^ 2 - 2j) * q ^ 4) - q ^ 5, Unknown(), ((2q - 8 * q ^ 2) + 11 * q ^ 3) - 4 * q ^ 4, (-2 * q ^ 2 + 3 * q ^ 3) - q ^ 4, -j * q + 2 * j * q ^ 2 + (-(j ^ 2) - 2j) * q ^ 3 + j ^ 2 * q ^ 4, 3 + (27 * j ^ 2 + 3j) * q ^ 2 + 24 * q ^ 3 + (18 * j ^ 2 + 27j) * q ^ 4 + 3 * q ^ 6, 0, Unknown(), -2 * j ^ 2 * q + (4 * j ^ 2 + 2j) * q ^ 2 + 7 * q ^ 3 + (4 * j ^ 2 + 5j) * q ^ 4 + (-(j ^ 2) - 2j) * q ^ 5, 0, 6 + (2 * j ^ 2 + 18j) * q + (9 * j ^ 2 + 6j) * q ^ 2 + 18 * q ^ 3 + (j ^ 2 + 9j) * q ^ 4 + (18 * j ^ 2 + 12j) * q ^ 5 + 6 * q ^ 6, Unknown(), Unknown(), ((((-1 + 2q) - 12 * j ^ 2 * q ^ 2) + (23 * j ^ 2 + 11j) * q ^ 3 + (-28 * j ^ 2 - 31j) * q ^ 4 + (6 * j ^ 2 + 12j) * q ^ 5) - 2 * q ^ 6) + q ^ 7, (j * q ^ 3 + 2 * q ^ 4) - q ^ 5, -2 + (-4 * j ^ 2 - 12j) * q + (-3 * j ^ 2 + 6j) * q ^ 2 + (10 * j ^ 2 + 8j) * q ^ 3 + (-12 * j ^ 2 - 16j) * q ^ 4 + (-9 * j ^ 2 - 3j) * q ^ 5 + (11 * j ^ 2 + 7j) * q ^ 6 + 3 * q ^ 7, -(q ^ 2) + (-3 * j ^ 2 - 2j) * q ^ 3 + (4 * j ^ 2 + j) * q ^ 4 + (-2 * j ^ 2 - j) * q ^ 5, ((j ^ 2 * q - 2 * j ^ 2 * q ^ 2) + (6 * j ^ 2 + 5j) * q ^ 3 + 7 * q ^ 4 + (2 * j ^ 2 + 3j) * q ^ 5) - j * q ^ 6, -4 * j ^ 2 * q ^ 2 + (7 * j ^ 2 + 3j) * q ^ 3 + (-4 * j ^ 2 - 8j) * q ^ 4 + (3 * j ^ 2 + 5j) * q ^ 5, Unknown(), -1 + (-2 * j ^ 2 - 6j) * q + 4 * j * q ^ 2 + (-2 * j ^ 2 + 3j) * q ^ 3 + (11 * j ^ 2 - 2j) * q ^ 4 + (-16 * j ^ 2 - 4j) * q ^ 5 + (10 * j ^ 2 + 8j) * q ^ 6 + 2 * q ^ 7, Unknown(), Unknown(), ((j * q ^ 2 + 3 * j ^ 2 * q ^ 3 + (-9 * j ^ 2 - j) * q ^ 4 + (10 * j ^ 2 + j) * q ^ 5 + (-7 * j ^ 2 - 3j) * q ^ 6) - 2 * q ^ 7) + q ^ 8, -(q ^ 4) + (-2 * j ^ 2 - 3j) * q ^ 5, ((-3 * j * q ^ 111 + 7 * j * q ^ 112) - 5 * j * q ^ 113) + j * q ^ 114, ((-3 * j ^ 2 * q ^ 23 + 7 * j ^ 2 * q ^ 24) - 5 * j ^ 2 * q ^ 25) + j ^ 2 * q ^ 26, ((2 * j ^ 2 * q ^ 2 - 4 * j ^ 2 * q ^ 3) - 7 * q ^ 4) + (-5 * j ^ 2 - 7j) * q ^ 5 + 2 * j * q ^ 6, Unknown(), Unknown(), ((j ^ 2 + 3j) * q - 4 * j * q ^ 2) + (3 * j ^ 2 + 2j) * q ^ 3 + (-8 * j ^ 2 + j) * q ^ 4 + (14 * j ^ 2 + 2j) * q ^ 5 + (-12 * j ^ 2 - 6j) * q ^ 6 + (5 * j ^ 2 + 3j) * q ^ 7 + q ^ 8, Unknown(), Unknown(), Unknown(), ((j ^ 2 * q ^ 23 - 5 * j ^ 2 * q ^ 24) + 7 * j ^ 2 * q ^ 25) - 3 * j ^ 2 * q ^ 26, Unknown(), Unknown(), ((-2 * q ^ 2 + (-2 * j ^ 2 - 6j) * q ^ 3 + 4 * j * q ^ 4 + (-4 * j ^ 2 - 2j) * q ^ 5 + (9 * j ^ 2 + 2j) * q ^ 6 + (-6 * j ^ 2 - 4j) * q ^ 7 + 2 * j * q ^ 8) - 2 * q ^ 9) + q ^ 10, 0, Unknown(), Unknown(), 0, (-3 * j ^ 2 * q ^ 4 - 2 * q ^ 5) - 2 * j * q ^ 6, Unknown(), Unknown(), Unknown(), ((j * q ^ 45 - 5 * j * q ^ 46) + 7 * j * q ^ 47) - 3 * j * q ^ 48, Unknown(), Unknown(), ((2 * q ^ 67 - 8 * q ^ 68) + 11 * q ^ 69) - 4 * q ^ 70, Unknown(), Unknown(), ((2 * j * q ^ 2 + 4 * j ^ 2 * q ^ 3) - 2 * j ^ 2 * q ^ 4) + (-10 * j ^ 2 - 6j) * q ^ 5 + (15 * j ^ 2 + 7j) * q ^ 6 + (-14 * j ^ 2 - 10j) * q ^ 7 + (5 * j ^ 2 + 4j) * q ^ 8 + 2 * j * q ^ 9 + (2 * j ^ 2 + j) * q ^ 10, 0, (-j * q ^ 110 + (-2 * j ^ 2 + 5j) * q ^ 111 + (-3 * j ^ 2 - 13j) * q ^ 112 + (6 * j ^ 2 + 10j) * q ^ 113) - 2 * j * q ^ 114, ((2 * j * q ^ 111 - 8 * j * q ^ 112) + 11 * j * q ^ 113) - 4 * j * q ^ 114, Unknown(), ((-2 * j ^ 2 - 5j) * q ^ 6 - 9 * j ^ 2 * q ^ 7) + (3 * j ^ 2 - 6j) * q ^ 9, (-(j ^ 2) * q ^ 22 + (7 * j ^ 2 + 2j) * q ^ 23 + (-10 * j ^ 2 + 3j) * q ^ 24 + (4 * j ^ 2 - 6j) * q ^ 25) - 2 * j ^ 2 * q ^ 26, Unknown(), (((j * q ^ 44 - 7 * j * q ^ 45) + 16 * j * q ^ 46) - 11 * j * q ^ 47) + 2 * j * q ^ 48, -(q ^ 46), Unknown(), Unknown(), ((-3 * j * q ^ 45 + 7 * j * q ^ 46) - 5 * j * q ^ 47) + j * q ^ 48, Unknown(), 105 * j ^ 2 * q ^ 22, (2 * q ^ 23 - 2 * q ^ 24) + (-(j ^ 2) + j) * q ^ 25, (22 * j ^ 2 * q ^ 22 - 56 * j ^ 2 * q ^ 23) + 27 * j ^ 2 * q ^ 24, Unknown(), ((-3 * j ^ 2 * q ^ 22 + 13 * j ^ 2 * q ^ 23) - 15 * j ^ 2 * q ^ 24) + 6 * j ^ 2 * q ^ 25, ((-9 * j ^ 2 * q ^ 22 + 39 * j ^ 2 * q ^ 23) - 45 * j ^ 2 * q ^ 24) + 12 * j ^ 2 * q ^ 25, (((j ^ 2 * q ^ 22 - 10 * j ^ 2 * q ^ 23) + 21 * j ^ 2 * q ^ 24) - 14 * j ^ 2 * q ^ 25) + 2 * j ^ 2 * q ^ 26, Unknown(), j ^ 2 * q ^ 22 + (-6 * j ^ 2 - 4j) * q ^ 23 + (9 * j ^ 2 + 3j) * q ^ 24 + (-4 * j ^ 2 + 2j) * q ^ 25 + j ^ 2 * q ^ 26, (((2 * j ^ 2 * q ^ 22 - 15 * j ^ 2 * q ^ 23) + 30 * j ^ 2 * q ^ 24) - 21 * j ^ 2 * q ^ 25) + 3 * j ^ 2 * q ^ 26, ((-4 * j ^ 2 - j) * q ^ 23 + (9 * j ^ 2 - j) * q ^ 24 + (-7 * j ^ 2 + 4j) * q ^ 25 + (3 * j ^ 2 - 3j) * q ^ 26) - j ^ 2 * q ^ 27, 3 * j ^ 2 * q ^ 22 + (-3 * j ^ 2 + 24j) * q ^ 24 + 24 * j ^ 2 * q ^ 25 + (-27 * j ^ 2 - 9j) * q ^ 26 + 3 * j ^ 2 * q ^ 28, 6 * j ^ 2 * q ^ 22 + (-18 * j ^ 2 - 16j) * q ^ 23 + (-6 * j ^ 2 + 3j) * q ^ 24 + 18 * j ^ 2 * q ^ 25 + (-9 * j ^ 2 - 8j) * q ^ 26 + (-12 * j ^ 2 + 6j) * q ^ 27 + 6 * j ^ 2 * q ^ 28, -4 * j * q ^ 24 + (-3 * j ^ 2 + 4j) * q ^ 25 + (8 * j ^ 2 + 4j) * q ^ 26 + (-5 * j ^ 2 - 2j) * q ^ 27, ((((-(j ^ 2) * q ^ 22 + 2 * j ^ 2 * q ^ 23) - 12 * j * q ^ 24) + (-11 * j ^ 2 + 12j) * q ^ 25 + (31 * j ^ 2 + 3j) * q ^ 26 + (-12 * j ^ 2 - 6j) * q ^ 27) - 2 * j ^ 2 * q ^ 28) + j ^ 2 * q ^ 29, -2 * j ^ 2 * q ^ 22 + (12 * j ^ 2 + 8j) * q ^ 23 + (-6 * j ^ 2 - 9j) * q ^ 24 + (-8 * j ^ 2 + 2j) * q ^ 25 + (16 * j ^ 2 + 4j) * q ^ 26 + (3 * j ^ 2 - 6j) * q ^ 27 + (-7 * j ^ 2 + 4j) * q ^ 28 + 3 * j ^ 2 * q ^ 29, Unknown(), ((2 * j * q ^ 24 - 4 * j * q ^ 25) - 7 * j ^ 2 * q ^ 26) + (7 * j ^ 2 + 2j) * q ^ 27 + 2 * q ^ 28, -(j ^ 2) * q ^ 26 + (3 * j ^ 2 + j) * q ^ 27, (-3 * j * q ^ 26 - 2 * j ^ 2 * q ^ 27) - 2 * q ^ 28, -50 * j ^ 2 * q ^ 22 + 55 * j ^ 2 * q ^ 23, ((2 * q ^ 24 + 4 * j * q ^ 25) - 2 * j * q ^ 26) + (6 * j ^ 2 - 4j) * q ^ 27 + (-7 * j ^ 2 + 8j) * q ^ 28 + (10 * j ^ 2 - 4j) * q ^ 29 + (-4 * j ^ 2 + j) * q ^ 30 + 2 * q ^ 31 + (-(j ^ 2) + j) * q ^ 32, -3 * j ^ 2 * q ^ 22 + (9 * j ^ 2 + 8j) * q ^ 23 + (-6 * j ^ 2 + 3j) * q ^ 24 + 3 * j ^ 2 * q ^ 25, (16 * j ^ 2 * q ^ 22 - 34 * j ^ 2 * q ^ 23) + 21 * j ^ 2 * q ^ 24, Unknown(), ((-6 * j ^ 2 * q ^ 22 + 26 * j ^ 2 * q ^ 23) - 30 * j ^ 2 * q ^ 24) + 9 * j ^ 2 * q ^ 25, ((5 * j ^ 2 + 3j) * q ^ 28 - 9 * j * q ^ 29) + (6 * j ^ 2 + 9j) * q ^ 31, Unknown(), Unknown(), ((-3 * q ^ 67 + 7 * q ^ 68) - 5 * q ^ 69) + q ^ 70, Unknown(), 0, (((j ^ 2 * q ^ 22 - 7 * j ^ 2 * q ^ 23) + 16 * j ^ 2 * q ^ 24) - 11 * j ^ 2 * q ^ 25) + 2 * j ^ 2 * q ^ 26, Unknown(), 105 * j * q ^ 44, Unknown(), (22 * j * q ^ 44 - 56 * j * q ^ 45) + 27 * j * q ^ 46, ((-3 * j * q ^ 44 + 13 * j * q ^ 45) - 15 * j * q ^ 46) + 6 * j * q ^ 47, ((-9 * j * q ^ 44 + 39 * j * q ^ 45) - 45 * j * q ^ 46) + 12 * j * q ^ 47, (((-(j ^ 2) + 4j) * q ^ 45 + (-2 * j ^ 2 - 6j) * q ^ 46) - 4 * q ^ 47) - j * q ^ 48, ((j ^ 2 - 3j) * q ^ 45 + (j ^ 2 + 10j) * q ^ 46 + (-4 * j ^ 2 - 11j) * q ^ 47 + (3 * j ^ 2 + 6j) * q ^ 48) - j * q ^ 49, Unknown(), 3 * j * q ^ 44 + (-24 * j ^ 2 - 27j) * q ^ 46 + 24 * j * q ^ 47 + (9 * j ^ 2 - 18j) * q ^ 48 + 3 * j * q ^ 50, ((((-j * q ^ 44 + 2 * j * q ^ 45) - 12 * q ^ 46) + (-12 * j ^ 2 - 23j) * q ^ 47 + (-3 * j ^ 2 + 28j) * q ^ 48 + (6 * j ^ 2 - 6j) * q ^ 49) - 2 * j * q ^ 50) + j * q ^ 51, -4 * q ^ 46 + (-4 * j ^ 2 - 7j) * q ^ 47 + (-4 * j ^ 2 + 4j) * q ^ 48 + (2 * j ^ 2 - 3j) * q ^ 49, -j * q ^ 48 + (-(j ^ 2) + 2j) * q ^ 49, -50 * j * q ^ 44 + 55 * j * q ^ 45, (16 * j * q ^ 44 - 34 * j * q ^ 45) + 21 * j * q ^ 46, ((-6 * j * q ^ 44 + 26 * j * q ^ 45) - 30 * j * q ^ 46) + 9 * j * q ^ 47, ((-3 * j ^ 2 + 2j) * q ^ 50 - 9 * q ^ 51) + (-9 * j ^ 2 - 3j) * q ^ 53, (-j * q ^ 44 + (-2 * j ^ 2 + 5j) * q ^ 45 + (-3 * j ^ 2 - 13j) * q ^ 46 + (6 * j ^ 2 + 10j) * q ^ 47) - 2 * j * q ^ 48, ((-3 * j ^ 2 * q ^ 89 + 7 * j ^ 2 * q ^ 90) - 5 * j ^ 2 * q ^ 91) + j ^ 2 * q ^ 92, Unknown(), 105 * q ^ 66, (((6 * q ^ 18 - 4 * q ^ 19) - 24 * q ^ 21) + 21 * q ^ 22 + 12 * q ^ 27) - 18 * q ^ 28, Unknown(), ((-3 * q ^ 66 + 13 * q ^ 67) - 15 * q ^ 68) + 6 * q ^ 69, Unknown(), Unknown(), 3 * q ^ 66 + (27 * j ^ 2 + 3j) * q ^ 68 + 24 * q ^ 69 + (18 * j ^ 2 + 27j) * q ^ 70 + 3 * q ^ 72, Unknown(), -4 * j ^ 2 * q ^ 68 + (7 * j ^ 2 + 3j) * q ^ 69 + (-4 * j ^ 2 - 8j) * q ^ 70 + (3 * j ^ 2 + 5j) * q ^ 71, -(q ^ 70) + (-2 * j ^ 2 - 3j) * q ^ 71, (-10 * q ^ 18 + 45 * q ^ 21) - 30 * q ^ 27, (16 * q ^ 66 - 34 * q ^ 67) + 21 * q ^ 68, Unknown(), (-(q ^ 66) + (-5 * j ^ 2 - 7j) * q ^ 67 + (13 * j ^ 2 + 10j) * q ^ 68 + (-10 * j ^ 2 - 4j) * q ^ 69) - 2 * q ^ 70, 105 * j ^ 2 * q ^ 88, Unknown(), (22 * j ^ 2 * q ^ 88 - 56 * j ^ 2 * q ^ 89) + 27 * j ^ 2 * q ^ 90, ((2 * j ^ 2 * q ^ 23 - 8 * j ^ 2 * q ^ 24) + 11 * j ^ 2 * q ^ 25) - 4 * j ^ 2 * q ^ 26, -50 * j ^ 2 * q ^ 88 + 55 * j ^ 2 * q ^ 89, (16 * j ^ 2 * q ^ 88 - 34 * j ^ 2 * q ^ 89) + 21 * j ^ 2 * q ^ 90, Unknown(), ((-3 * j ^ 2 * q ^ 88 + 13 * j ^ 2 * q ^ 89) - 15 * j ^ 2 * q ^ 90) + 6 * j ^ 2 * q ^ 91, 105 * j * q ^ 110, Unknown(), (22 * j * q ^ 110 - 56 * j * q ^ 111) + 27 * j * q ^ 112, -50 * j * q ^ 110 + 55 * j * q ^ 111, (16 * j * q ^ 110 - 34 * j * q ^ 111) + 21 * j * q ^ 112, Unknown(), ((-3 * j * q ^ 110 + 13 * j * q ^ 111) - 15 * j * q ^ 112) + 6 * j * q ^ 113]
            end
        f51 = (q->begin
                    [120, -60 + 60q, (18 - 42q) + 18 * q ^ 2, (32 - 56q) + 32 * q ^ 2, ((-11 + 28q) - 28 * q ^ 2) + 11 * q ^ 3, ((-4 + 14q) - 14 * q ^ 2) + 4 * q ^ 3, 6q - 6 * q ^ 2, ((-18 + 42q) - 42 * q ^ 2) + 18 * q ^ 3, ((6 - 6q) + 6 * q ^ 2) - 6 * q ^ 3, (((-3 + 5q) - 8 * q ^ 2) + 5 * q ^ 3) - 3 * q ^ 4, (((5 - 12q) + 17 * q ^ 2) - 12 * q ^ 3) + 5 * q ^ 4, (((1 - 3q) + 4 * q ^ 2) - 3 * q ^ 3) + q ^ 4, 0, (((-3 + 9q) - 12 * q ^ 2) + 9 * q ^ 3) - 3 * q ^ 4, (((3 - 9q) + 12 * q ^ 2) - 9 * q ^ 3) + 3 * q ^ 4, (-4q + 4 * q ^ 2) - 4 * q ^ 3, (((7 - 19q) + 26 * q ^ 2) - 19 * q ^ 3) + 7 * q ^ 4, ((((-1 + 2q) - 3 * q ^ 2) + 3 * q ^ 3) - 2 * q ^ 4) + q ^ 5, ((((2 - 6q) + 10 * q ^ 2) - 10 * q ^ 3) + 6 * q ^ 4) - 2 * q ^ 5, 0, Unknown(), ((((1 - 3q) + 5 * q ^ 2) - 5 * q ^ 3) + 3 * q ^ 4) - q ^ 5, Unknown(), ((((-2 + 4q) - 6 * q ^ 2) + 6 * q ^ 3) - 4 * q ^ 4) + 2 * q ^ 5, q + q ^ 3 + q ^ 5, 0, (-18 * q ^ 2 + 48 * q ^ 3) - 18 * q ^ 4, -(q ^ 3), Unknown(), (-4 * q ^ 2 + 10 * q ^ 3) - 4 * q ^ 4, -(q ^ 15), (((((6 - 12q) - 6 * q ^ 2) + 36 * q ^ 3) - 6 * q ^ 4) - 12 * q ^ 5) + 6 * q ^ 6, Unknown(), Unknown(), ((12 * q ^ 2 - 30 * q ^ 3) + 30 * q ^ 4) - 12 * q ^ 5, 0, (((((-3 + 11q) - 2 * q ^ 2) - 22 * q ^ 3) + 22 * q ^ 4 + 2 * q ^ 5) - 11 * q ^ 6) + 3 * q ^ 7, ((((q - 2 * q ^ 2) + 3 * q ^ 3) - 3 * q ^ 4) + 2 * q ^ 5) - q ^ 6, ((3 * q ^ 2 - 6 * q ^ 3) + 6 * q ^ 4) - 3 * q ^ 5, ((q ^ 2 - 8 * q ^ 3) + 8 * q ^ 4) - q ^ 5, Unknown(), (((((-3 + 8q) - 7 * q ^ 2) - 9 * q ^ 3) + 9 * q ^ 4 + 7 * q ^ 5) - 8 * q ^ 6) + 3 * q ^ 7, Unknown(), Unknown(), (((((1 - 4q) + 4 * q ^ 2 + 7 * q ^ 3) - 16 * q ^ 4) + 7 * q ^ 5 + 4 * q ^ 6) - 4 * q ^ 7) + q ^ 8, 0, (((-(q ^ 105) + 3 * q ^ 106) - 4 * q ^ 107) + 3 * q ^ 108) - q ^ 109, (((-(q ^ 21) + 3 * q ^ 22) - 4 * q ^ 23) + 3 * q ^ 24) - q ^ 25, (((-(q ^ 2) + 5 * q ^ 3) - 6 * q ^ 4) + 5 * q ^ 5) - q ^ 6, Unknown(), Unknown(), (((((2 - 7q) + 9 * q ^ 2 + 3 * q ^ 3) - 12 * q ^ 4) + 3 * q ^ 5 + 9 * q ^ 6) - 7 * q ^ 7) + 2 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((q ^ 21 - 2 * q ^ 22) + 3 * q ^ 23) - 3 * q ^ 24) + 2 * q ^ 25) - q ^ 26, Unknown(), Unknown(), (((((((1 - 2q) + q ^ 2 + 6 * q ^ 3) - 15 * q ^ 4) + 20 * q ^ 5) - 15 * q ^ 6) + 6 * q ^ 7 + q ^ 8) - 2 * q ^ 9) + q ^ 10, q ^ 6, Unknown(), Unknown(), q ^ 12, (2 * q ^ 4 - 2 * q ^ 5) + 2 * q ^ 6, Unknown(), Unknown(), Unknown(), ((((-(q ^ 42) + 2 * q ^ 43) - 3 * q ^ 44) + 3 * q ^ 45) - 2 * q ^ 46) + q ^ 47, Unknown(), Unknown(), ((((2 * q ^ 63 - 4 * q ^ 64) + 6 * q ^ 65) - 6 * q ^ 66) + 4 * q ^ 67) - 2 * q ^ 68, Unknown(), Unknown(), (((((2 * q ^ 3 - 4 * q ^ 4) + 4 * q ^ 5) - 10 * q ^ 6) + 4 * q ^ 7) - 4 * q ^ 8) + 2 * q ^ 9, -(q ^ 9), (((3 * q ^ 105 - 9 * q ^ 106) + 12 * q ^ 107) - 9 * q ^ 108) + 3 * q ^ 109, ((((2 * q ^ 105 - 4 * q ^ 106) + 6 * q ^ 107) - 6 * q ^ 108) + 4 * q ^ 109) - 2 * q ^ 110, Unknown(), 6 * q ^ 7 - 6 * q ^ 8, (((3 * q ^ 21 - 9 * q ^ 22) + 12 * q ^ 23) - 9 * q ^ 24) + 3 * q ^ 25, Unknown(), (((3 * q ^ 42 - 9 * q ^ 43) + 12 * q ^ 44) - 9 * q ^ 45) + 3 * q ^ 46, 0, Unknown(), Unknown(), (((q ^ 42 - 3 * q ^ 43) + 4 * q ^ 44) - 3 * q ^ 45) + q ^ 46, Unknown(), -120 * q ^ 21, 0, (-32 * q ^ 21 + 56 * q ^ 22) - 32 * q ^ 23, Unknown(), ((4 * q ^ 21 - 14 * q ^ 22) + 14 * q ^ 23) - 4 * q ^ 24, ((18 * q ^ 21 - 42 * q ^ 22) + 42 * q ^ 23) - 18 * q ^ 24, (((-5 * q ^ 21 + 12 * q ^ 22) - 17 * q ^ 23) + 12 * q ^ 24) - 5 * q ^ 25, Unknown(), (4 * q ^ 22 - 4 * q ^ 23) + 4 * q ^ 24, (((-7 * q ^ 21 + 19 * q ^ 22) - 26 * q ^ 23) + 19 * q ^ 24) - 7 * q ^ 25, ((((-2 * q ^ 21 + 6 * q ^ 22) - 10 * q ^ 23) + 10 * q ^ 24) - 6 * q ^ 25) + 2 * q ^ 26, (18 * q ^ 23 - 48 * q ^ 24) + 18 * q ^ 25, (((-6 * q ^ 21 + 12 * q ^ 22 + 6 * q ^ 23) - 36 * q ^ 24) + 6 * q ^ 25 + 12 * q ^ 26) - 6 * q ^ 27, ((-(q ^ 23) + 8 * q ^ 24) - 8 * q ^ 25) + q ^ 26, ((-12 * q ^ 23 + 30 * q ^ 24) - 30 * q ^ 25) + 12 * q ^ 26, (((((3 * q ^ 21 - 11 * q ^ 22) + 2 * q ^ 23 + 22 * q ^ 24) - 22 * q ^ 25) - 2 * q ^ 26) + 11 * q ^ 27) - 3 * q ^ 28, Unknown(), (((q ^ 23 - 5 * q ^ 24) + 6 * q ^ 25) - 5 * q ^ 26) + q ^ 27, 0, (-2 * q ^ 25 + 2 * q ^ 26) - 2 * q ^ 27, 60 * q ^ 21 - 60 * q ^ 22, (((((-2 * q ^ 24 + 4 * q ^ 25) - 4 * q ^ 26) + 10 * q ^ 27) - 4 * q ^ 28) + 4 * q ^ 29) - 2 * q ^ 30, -6 * q ^ 22 + 6 * q ^ 23, (-18 * q ^ 21 + 42 * q ^ 22) - 18 * q ^ 23, Unknown(), ((11 * q ^ 21 - 28 * q ^ 22) + 28 * q ^ 23) - 11 * q ^ 24, -6 * q ^ 28 + 6 * q ^ 29, Unknown(), Unknown(), (((-(q ^ 63) + 3 * q ^ 64) - 4 * q ^ 65) + 3 * q ^ 66) - q ^ 67, Unknown(), q ^ 18, (((-3 * q ^ 21 + 9 * q ^ 22) - 12 * q ^ 23) + 9 * q ^ 24) - 3 * q ^ 25, Unknown(), 120 * q ^ 42, Unknown(), (32 * q ^ 42 - 56 * q ^ 43) + 32 * q ^ 44, ((-4 * q ^ 42 + 14 * q ^ 43) - 14 * q ^ 44) + 4 * q ^ 45, ((-18 * q ^ 42 + 42 * q ^ 43) - 42 * q ^ 44) + 18 * q ^ 45, (((-3 * q ^ 42 + 5 * q ^ 43) - 8 * q ^ 44) + 5 * q ^ 45) - 3 * q ^ 46, ((((2 * q ^ 42 - 6 * q ^ 43) + 10 * q ^ 44) - 10 * q ^ 45) + 6 * q ^ 46) - 2 * q ^ 47, Unknown(), (-18 * q ^ 44 + 48 * q ^ 45) - 18 * q ^ 46, ((12 * q ^ 44 - 30 * q ^ 45) + 30 * q ^ 46) - 12 * q ^ 47, ((q ^ 44 - 8 * q ^ 45) + 8 * q ^ 46) - q ^ 47, 0, -60 * q ^ 42 + 60 * q ^ 43, (18 * q ^ 42 - 42 * q ^ 43) + 18 * q ^ 44, ((-11 * q ^ 42 + 28 * q ^ 43) - 28 * q ^ 44) + 11 * q ^ 45, 6 * q ^ 49 - 6 * q ^ 50, (((-3 * q ^ 42 + 9 * q ^ 43) - 12 * q ^ 44) + 9 * q ^ 45) - 3 * q ^ 46, (((q ^ 84 - 3 * q ^ 85) + 4 * q ^ 86) - 3 * q ^ 87) + q ^ 88, Unknown(), -120 * q ^ 63, (-32 * q ^ 21 + 28 * q ^ 22 + 28 * q ^ 24) - 32 * q ^ 25, Unknown(), ((4 * q ^ 63 - 14 * q ^ 64) + 14 * q ^ 65) - 4 * q ^ 66, Unknown(), Unknown(), (18 * q ^ 65 - 48 * q ^ 66) + 18 * q ^ 67, Unknown(), ((-(q ^ 65) + 8 * q ^ 66) - 8 * q ^ 67) + q ^ 68, 0, 60 * q ^ 21 - 60 * q ^ 24, (-18 * q ^ 63 + 42 * q ^ 64) - 18 * q ^ 65, Unknown(), (((3 * q ^ 63 - 9 * q ^ 64) + 12 * q ^ 65) - 9 * q ^ 66) + 3 * q ^ 67, 120 * q ^ 84, Unknown(), (32 * q ^ 84 - 56 * q ^ 85) + 32 * q ^ 86, ((((2 * q ^ 21 - 4 * q ^ 22) + 6 * q ^ 23) - 6 * q ^ 24) + 4 * q ^ 25) - 2 * q ^ 26, -60 * q ^ 84 + 60 * q ^ 85, (18 * q ^ 84 - 42 * q ^ 85) + 18 * q ^ 86, Unknown(), ((-4 * q ^ 84 + 14 * q ^ 85) - 14 * q ^ 86) + 4 * q ^ 87, -120 * q ^ 105, Unknown(), (-32 * q ^ 105 + 56 * q ^ 106) - 32 * q ^ 107, 60 * q ^ 105 - 60 * q ^ 106, (-18 * q ^ 105 + 42 * q ^ 106) - 18 * q ^ 107, Unknown(), ((4 * q ^ 105 - 14 * q ^ 106) + 14 * q ^ 107) - 4 * q ^ 108]
                end)
        f53 = function (q, j)
                return [120, -40 + 80q, (5 - 35q) + 45 * q ^ 2, (12 - 56q) + 52 * q ^ 2, ((-1 + 15q) - 41 * q ^ 2) + 28 * q ^ 3, (5q - 23 * q ^ 2) + 22 * q ^ 3, (-2 * j * q - 12 * q ^ 2) + 18 * q ^ 3, ((-3 + 27q) - 57 * q ^ 2) + 33 * q ^ 3, ((3 - 12q) - 2 * j ^ 2 * q ^ 2) + 15 * q ^ 3, ((-1 + 6q) - 8 * q ^ 2) + (5 * j ^ 2 + 7j) * q ^ 3 + 8 * q ^ 4, ((-2q + 16 * q ^ 2) - 28 * q ^ 3) + 14 * q ^ 4, (4 * q ^ 2 - 13 * q ^ 3) + 9 * q ^ 4, (-j * q ^ 2 - 5 * q ^ 3) + 6 * q ^ 4, 4q + (13 * j ^ 2 + 12j) * q ^ 2 + (-8 * j ^ 2 - 6j) * q ^ 3 + 3 * q ^ 4, ((-q + 12 * q ^ 2) - 24 * q ^ 3) + 13 * q ^ 4, ((-4 * j ^ 2 - 6j) * q ^ 2 - 16 * q ^ 3) + 10 * q ^ 4, ((-5q + 25 * q ^ 2) - 38 * q ^ 3) + 17 * q ^ 4, ((-(q ^ 2) + 8 * q ^ 3) - 12 * q ^ 4) + 5 * q ^ 5, -q + 7 * q ^ 2 + (11 * j ^ 2 + 10j) * q ^ 3 + (-4 * j ^ 2 - 2j) * q ^ 4 + q ^ 5, (-j * q ^ 3 - 2 * q ^ 4) + q ^ 5, Unknown(), (3 * q ^ 2 + (9 * j ^ 2 + 8j) * q ^ 3 + (-7 * j ^ 2 - 5j) * q ^ 4) - q ^ 5, Unknown(), ((-2 * q ^ 2 + 12 * q ^ 3) - 15 * q ^ 4) + 6 * q ^ 5, (3 * q ^ 3 - 6 * q ^ 4) + 3 * q ^ 5, ((-2 * j ^ 2 - 3j) * q ^ 3 - 6 * q ^ 4) + 3 * q ^ 5, ((6 * j ^ 2 * q ^ 2 + 24 * q ^ 3) - 36 * q ^ 4) + 18 * q ^ 6, -j * q ^ 4, Unknown(), (4 * q ^ 3 - 13 * q ^ 4) + 5 * q ^ 5 + 6 * q ^ 6, -(j ^ 2) * q ^ 20, ((((3 + 4 * j * q) - 12 * q ^ 2) + 18 * q ^ 3 + 2 * j * q ^ 4) - 24 * q ^ 5) + 21 * q ^ 6, Unknown(), Unknown(), ((((14 * j ^ 2 + 8j) * q ^ 3 + 28 * q ^ 4) - 24 * q ^ 5) - 8 * q ^ 6) + 10 * q ^ 7, ((-2 * j ^ 2 - j) * q ^ 4 - 5 * q ^ 5) + 2 * q ^ 6 + q ^ 7, (((((-1 + 2q) - 4 * j ^ 2 * q ^ 2) - 14 * q ^ 3) + 12 * q ^ 4 + (-8 * j ^ 2 - 6j) * q ^ 5) - 25 * q ^ 6) + 12 * q ^ 7, ((2 * q ^ 3 + (3 * j ^ 2 + 2j) * q ^ 4) - 2 * q ^ 5) + q ^ 6 + q ^ 7, ((-(q ^ 3) + 8 * q ^ 4) - 10 * q ^ 5) + 3 * q ^ 7, ((j ^ 2 * q ^ 3 + (-8 * j ^ 2 - 9j) * q ^ 4) - 13 * q ^ 5) + 6 * q ^ 7, Unknown(), ((6 * q ^ 2 + (9 * j ^ 2 + 12j) * q ^ 3 + (9 * j ^ 2 + 4j) * q ^ 4 + (-27 * j ^ 2 - 23j) * q ^ 5) - 22 * q ^ 6) + 9 * q ^ 7, Unknown(), Unknown(), ((-(q ^ 2) + 6 * q ^ 3 + (4 * j ^ 2 + 7j) * q ^ 4 + (13 * j ^ 2 + 7j) * q ^ 5 + (-22 * j ^ 2 - 18j) * q ^ 6) - 14 * q ^ 7) + 3 * q ^ 8, ((j ^ 2 * q ^ 4 + 3 * q ^ 5) - 5 * q ^ 6) + q ^ 8, (-4 * j ^ 2 * q ^ 142 + 13 * j ^ 2 * q ^ 143) - 9 * j ^ 2 * q ^ 144, (-4 * j * q ^ 30 + 13 * j * q ^ 31) - 9 * j * q ^ 32, ((((4 * j ^ 2 + 3j) * q ^ 4 + (-10 * j ^ 2 - 11j) * q ^ 5) - 8 * q ^ 6) - 3 * q ^ 7) + 3 * q ^ 8, Unknown(), Unknown(), ((-2 * q ^ 2 + 8 * q ^ 3 + (3 * j ^ 2 + 6j) * q ^ 4 + (16 * j ^ 2 + 11j) * q ^ 5 + (-26 * j ^ 2 - 22j) * q ^ 6) - 18 * q ^ 7) + 5 * q ^ 8, Unknown(), Unknown(), Unknown(), ((j * q ^ 30 - 8 * j * q ^ 31) + 12 * j * q ^ 32) - 5 * j * q ^ 33, Unknown(), Unknown(), ((q ^ 4 + 6 * q ^ 5 + (14 * j ^ 2 + 15j) * q ^ 6 + (-2 * j ^ 2 - 4j) * q ^ 7 + (-15 * j ^ 2 - 13j) * q ^ 8) - 12 * q ^ 9) + 3 * q ^ 10, j ^ 2 * q ^ 8, Unknown(), Unknown(), j * q ^ 16, (((-3 * j ^ 2 - 4j) * q ^ 6 - 2 * q ^ 7) - 2 * q ^ 8) + q ^ 10, Unknown(), Unknown(), Unknown(), ((-(j ^ 2) * q ^ 58 + 8 * j ^ 2 * q ^ 59) - 12 * j ^ 2 * q ^ 60) + 5 * j ^ 2 * q ^ 61, Unknown(), Unknown(), ((2 * q ^ 86 - 12 * q ^ 87) + 15 * q ^ 88) - 6 * q ^ 89, Unknown(), Unknown(), ((((-2 * j ^ 2 * q ^ 5 + (8 * j ^ 2 + 4j) * q ^ 6 + (-14 * j ^ 2 - 12j) * q ^ 7) - 5 * q ^ 8) - 4 * q ^ 9) - 5 * q ^ 10) + 6 * q ^ 12, -(q ^ 12), (-4 * j ^ 2 * q ^ 141 + (12 * j ^ 2 - j) * q ^ 142 + (-6 * j ^ 2 + 2j) * q ^ 143) - 3 * j ^ 2 * q ^ 144, ((2 * j ^ 2 * q ^ 142 - 12 * j ^ 2 * q ^ 143) + 15 * j ^ 2 * q ^ 144) - 6 * j ^ 2 * q ^ 145, Unknown(), ((((-2 * j ^ 2 - 8j) * q ^ 9 + 3 * q ^ 10) - 3 * q ^ 11) - q ^ 12) + q ^ 15, (-4 * j * q ^ 29 + (j ^ 2 + 13j) * q ^ 30 + (-2 * j ^ 2 - 8j) * q ^ 31) - 3 * j * q ^ 32, Unknown(), ((-(j ^ 2) * q ^ 57 + 12 * j ^ 2 * q ^ 58) - 24 * j ^ 2 * q ^ 59) + 13 * j ^ 2 * q ^ 60, (-(q ^ 59) - j ^ 2 * q ^ 60) + j ^ 2 * q ^ 61, Unknown(), Unknown(), (4 * j ^ 2 * q ^ 58 - 13 * j ^ 2 * q ^ 59) + 9 * j ^ 2 * q ^ 60, Unknown(), -120 * j * q ^ 28, (j ^ 2 * q ^ 30 + 5 * j * q ^ 31) - 6 * j * q ^ 32, (-12 * j * q ^ 28 + 56 * j * q ^ 29) - 52 * j * q ^ 30, Unknown(), (-5 * j * q ^ 29 + 23 * j * q ^ 30) - 22 * j * q ^ 31, ((3 * j * q ^ 28 - 27 * j * q ^ 29) + 57 * j * q ^ 30) - 33 * j * q ^ 31, ((2 * j * q ^ 29 - 16 * j * q ^ 30) + 28 * j * q ^ 31) - 14 * j * q ^ 32, Unknown(), ((2 * j ^ 2 - 4j) * q ^ 30 + 16 * j * q ^ 31) - 10 * j * q ^ 32, ((5 * j * q ^ 29 - 25 * j * q ^ 30) + 38 * j * q ^ 31) - 17 * j * q ^ 32, ((j * q ^ 29 - 7 * j * q ^ 30) + (j ^ 2 + 11j) * q ^ 31 + (-2 * j ^ 2 - 4j) * q ^ 32) - j * q ^ 33, ((-6 * q ^ 30 - 24 * j * q ^ 31) + 36 * j * q ^ 32) - 18 * j * q ^ 34, (((((-3 * j * q ^ 28 - 4 * j ^ 2 * q ^ 29) + 12 * j * q ^ 30) - 18 * j * q ^ 31) - 2 * j ^ 2 * q ^ 32) + 24 * j * q ^ 33) - 21 * j * q ^ 34, (-(q ^ 31) + (j ^ 2 - 8j) * q ^ 32 + 13 * j * q ^ 33) - 6 * j * q ^ 35, (((6 * j ^ 2 + 14j) * q ^ 31 - 28 * j * q ^ 32) + 24 * j * q ^ 33 + 8 * j * q ^ 34) - 10 * j * q ^ 35, ((((j * q ^ 28 - 2 * j * q ^ 29) + 4 * q ^ 30 + 14 * j * q ^ 31) - 12 * j * q ^ 32) + (-2 * j ^ 2 - 8j) * q ^ 33 + 25 * j * q ^ 34) - 12 * j * q ^ 35, Unknown(), ((j ^ 2 + 4j) * q ^ 32 + (j ^ 2 - 10j) * q ^ 33 + 8 * j * q ^ 34 + 3 * j * q ^ 35) - 3 * j * q ^ 36, ((-(q ^ 32) - 3 * j * q ^ 33) + 5 * j * q ^ 34) - j * q ^ 36, ((j ^ 2 - 3j) * q ^ 34 + 2 * j * q ^ 35 + 2 * j * q ^ 36) - j * q ^ 38, 40 * j * q ^ 28 - 80 * j * q ^ 29, (2 * q ^ 33 + (4 * j ^ 2 + 8j) * q ^ 34 + (-2 * j ^ 2 - 14j) * q ^ 35 + 5 * j * q ^ 36 + 4 * j * q ^ 37 + 5 * j * q ^ 38) - 6 * j * q ^ 40, (2 * j ^ 2 * q ^ 29 + 12 * j * q ^ 30) - 18 * j * q ^ 31, (-5 * j * q ^ 28 + 35 * j * q ^ 29) - 45 * j * q ^ 30, Unknown(), ((j * q ^ 28 - 15 * j * q ^ 29) + 41 * j * q ^ 30) - 28 * j * q ^ 31, (((6 * j ^ 2 - 2j) * q ^ 37 - 3 * j * q ^ 38) + 3 * j * q ^ 39 + j * q ^ 40) - j * q ^ 43, Unknown(), Unknown(), (-4 * q ^ 86 + 13 * q ^ 87) - 9 * q ^ 88, Unknown(), q ^ 24, ((j * q ^ 29 - 12 * j * q ^ 30) + 24 * j * q ^ 31) - 13 * j * q ^ 32, Unknown(), 120 * j ^ 2 * q ^ 56, Unknown(), (12 * j ^ 2 * q ^ 56 - 56 * j ^ 2 * q ^ 57) + 52 * j ^ 2 * q ^ 58, (5 * j ^ 2 * q ^ 57 - 23 * j ^ 2 * q ^ 58) + 22 * j ^ 2 * q ^ 59, ((-3 * j ^ 2 * q ^ 56 + 27 * j ^ 2 * q ^ 57) - 57 * j ^ 2 * q ^ 58) + 33 * j ^ 2 * q ^ 59, ((-(j ^ 2) * q ^ 56 + 6 * j ^ 2 * q ^ 57) - 8 * j ^ 2 * q ^ 58) + (-7 * j ^ 2 - 2j) * q ^ 59 + 8 * j ^ 2 * q ^ 60, -(j ^ 2) * q ^ 57 + 7 * j ^ 2 * q ^ 58 + (-10 * j ^ 2 + j) * q ^ 59 + (2 * j ^ 2 - 2j) * q ^ 60 + j ^ 2 * q ^ 61, Unknown(), ((6 * j * q ^ 58 + 24 * j ^ 2 * q ^ 59) - 36 * j ^ 2 * q ^ 60) + 18 * j ^ 2 * q ^ 62, ((((-8 * j ^ 2 + 6j) * q ^ 59 + 28 * j ^ 2 * q ^ 60) - 24 * j ^ 2 * q ^ 61) - 8 * j ^ 2 * q ^ 62) + 10 * j ^ 2 * q ^ 63, ((j * q ^ 59 + (9 * j ^ 2 + j) * q ^ 60) - 13 * j ^ 2 * q ^ 61) + 6 * j ^ 2 * q ^ 63, ((j * q ^ 60 + 3 * j ^ 2 * q ^ 61) - 5 * j ^ 2 * q ^ 62) + j ^ 2 * q ^ 64, -40 * j ^ 2 * q ^ 56 + 80 * j ^ 2 * q ^ 57, (5 * j ^ 2 * q ^ 56 - 35 * j ^ 2 * q ^ 57) + 45 * j ^ 2 * q ^ 58, ((-(j ^ 2) * q ^ 56 + 15 * j ^ 2 * q ^ 57) - 41 * j ^ 2 * q ^ 58) + 28 * j ^ 2 * q ^ 59, ((((8 * j ^ 2 + 6j) * q ^ 65 + 3 * j ^ 2 * q ^ 66) - 3 * j ^ 2 * q ^ 67) - j ^ 2 * q ^ 68) + j ^ 2 * q ^ 71, 4 * j ^ 2 * q ^ 57 + (-12 * j ^ 2 + j) * q ^ 58 + (6 * j ^ 2 - 2j) * q ^ 59 + 3 * j ^ 2 * q ^ 60, (4 * j * q ^ 114 - 13 * j * q ^ 115) + 9 * j * q ^ 116, Unknown(), -120 * q ^ 84, ((((((16 * q ^ 27 - 24 * q ^ 28) + 2 * q ^ 30) - 4 * q ^ 31) - 4 * q ^ 33) + 11 * q ^ 34 + 2 * q ^ 36) - 8 * q ^ 37) + q ^ 46, Unknown(), (-5 * q ^ 85 + 23 * q ^ 86) - 22 * q ^ 87, Unknown(), Unknown(), ((-6 * j ^ 2 * q ^ 86 - 24 * q ^ 87) + 36 * q ^ 88) - 18 * q ^ 90, Unknown(), (-(j ^ 2) * q ^ 87 + (8 * j ^ 2 + 9j) * q ^ 88 + 13 * q ^ 89) - 6 * q ^ 91, ((-(j ^ 2) * q ^ 88 - 3 * q ^ 89) + 5 * q ^ 90) - q ^ 92, (((-40 * q ^ 27 - 6 * q ^ 30) + 15 * q ^ 33) - 10 * q ^ 36) + q ^ 45, (-5 * q ^ 84 + 35 * q ^ 85) - 45 * q ^ 86, Unknown(), (-4 * q ^ 85 + (-13 * j ^ 2 - 12j) * q ^ 86 + (8 * j ^ 2 + 6j) * q ^ 87) - 3 * q ^ 88, 120 * j * q ^ 112, Unknown(), (12 * j * q ^ 112 - 56 * j * q ^ 113) + 52 * j * q ^ 114, ((2 * j * q ^ 30 - 12 * j * q ^ 31) + 15 * j * q ^ 32) - 6 * j * q ^ 33, -40 * j * q ^ 112 + 80 * j * q ^ 113, (5 * j * q ^ 112 - 35 * j * q ^ 113) + 45 * j * q ^ 114, Unknown(), (5 * j * q ^ 113 - 23 * j * q ^ 114) + 22 * j * q ^ 115, -120 * j ^ 2 * q ^ 140, Unknown(), (-12 * j ^ 2 * q ^ 140 + 56 * j ^ 2 * q ^ 141) - 52 * j ^ 2 * q ^ 142, 40 * j ^ 2 * q ^ 140 - 80 * j ^ 2 * q ^ 141, (-5 * j ^ 2 * q ^ 140 + 35 * j ^ 2 * q ^ 141) - 45 * j ^ 2 * q ^ 142, Unknown(), (-5 * j ^ 2 * q ^ 141 + 23 * j ^ 2 * q ^ 142) - 22 * j ^ 2 * q ^ 143]
            end
        f57 = function (q, j)
                return [126, -45 + 81q, (6 - 39q) + 42 * q ^ 2, (16 - 58q) + 52 * q ^ 2, ((-2 + 18q) - 40 * q ^ 2) + 27 * q ^ 3, (6q - 23 * q ^ 2) + 19 * q ^ 3, -3 * j ^ 2 * q + (15 * j ^ 2 + 12j) * q ^ 2 + 12 * q ^ 3, ((-6 + 30q) - 57 * q ^ 2) + 33 * q ^ 3, ((3 + (12 * j ^ 2 + 15j) * q) - 3 * j * q ^ 2) + 9 * q ^ 3, -1 + (-6 * j ^ 2 - 8j) * q + (8 * j ^ 2 + 10j) * q ^ 2 + (3 * j ^ 2 + j) * q ^ 3 + 6 * q ^ 4, ((-4q + 16 * q ^ 2) - 26 * q ^ 3) + 14 * q ^ 4, (4 * q ^ 2 - 11 * q ^ 3) + 8 * q ^ 4, -2 * j ^ 2 * q ^ 2 + (5 * j ^ 2 + 3j) * q ^ 3 + 3 * q ^ 4, (-4 * j ^ 2 - 5j) * q + (12 * j ^ 2 + 16j) * q ^ 2 + (-8 * j ^ 2 - 11j) * q ^ 3, ((-2q + 12 * q ^ 2) - 22 * q ^ 3) + 12 * q ^ 4, j ^ 2 * q + (-8 * j ^ 2 - 4j) * q ^ 2 + (13 * j ^ 2 + 12j) * q ^ 3 + 8 * q ^ 4, (((1 - 7q) + 26 * q ^ 2) - 36 * q ^ 3) + 17 * q ^ 4, ((-(q ^ 2) + 7 * q ^ 3) - 10 * q ^ 4) + 5 * q ^ 5, (j ^ 2 + 2j) * q + (-7 * j ^ 2 - 9j) * q ^ 2 + (11 * j ^ 2 + 14j) * q ^ 3 + (-5 * j ^ 2 - 7j) * q ^ 4, (-(j ^ 2) * q ^ 3 - q ^ 4) + q ^ 5, Unknown(), ((-3 * j ^ 2 - 4j) * q ^ 2 + (8 * j ^ 2 + 10j) * q ^ 3 + (-6 * j ^ 2 - 8j) * q ^ 4) - q ^ 5, Unknown(), ((-3 * q ^ 2 + 10 * q ^ 3) - 14 * q ^ 4) + 6 * q ^ 5, (2 * q ^ 3 - 5 * q ^ 4) + 3 * q ^ 5, j ^ 2 * q ^ 2 + (-3 * j ^ 2 - j) * q ^ 3 + (4 * j ^ 2 + 3j) * q ^ 4 + 2 * q ^ 5, 9 * j * q ^ 2 + 24 * q ^ 3 + (36 * j ^ 2 + 45j) * q ^ 4 + 12 * q ^ 6, 0, Unknown(), 4 * q ^ 3 + (12 * j ^ 2 + 14j) * q ^ 4 + (-3 * j ^ 2 - 5j) * q ^ 5 + 3 * q ^ 6, 0, 3 + 6 * j ^ 2 * q + (15 * j ^ 2 + 12j) * q ^ 2 + 18 * q ^ 3 + 3 * j ^ 2 * q ^ 4 + (30 * j ^ 2 + 24j) * q ^ 5 + 15 * q ^ 6, Unknown(), Unknown(), ((-3 * j * q ^ 2 + (8 * j ^ 2 + 14j) * q ^ 3 + (-28 * j ^ 2 - 34j) * q ^ 4 + (24 * j ^ 2 + 27j) * q ^ 5) - 4 * q ^ 6) + 8 * q ^ 7, (-2 * j ^ 2 - j) * q ^ 4 + (4 * j ^ 2 + 3j) * q ^ 5 + q ^ 6 + q ^ 7, -1 + (-4 * j ^ 2 - 2j) * q + (-2 * j ^ 2 - 4j) * q ^ 2 + (15 * j ^ 2 + 14j) * q ^ 3 + (-13 * j ^ 2 - 12j) * q ^ 4 + (-10 * j ^ 2 - 8j) * q ^ 5 + (23 * j ^ 2 + 21j) * q ^ 6 + 10 * q ^ 7, (((-(j ^ 2) - 3j) * q ^ 3 + (2 * j ^ 2 + 5j) * q ^ 4) - j * q ^ 5) + q ^ 7, -(q ^ 3) + (-7 * j ^ 2 - 8j) * q ^ 4 + (9 * j ^ 2 + 11j) * q ^ 5 + (-(j ^ 2) - 2j) * q ^ 6 + 2 * q ^ 7, j * q ^ 3 + (-8 * j ^ 2 - 7j) * q ^ 4 + (11 * j ^ 2 + 15j) * q ^ 5 + 3 * q ^ 7, Unknown(), (-9 * j ^ 2 - 7j) * q ^ 2 + (17 * j ^ 2 + 8j) * q ^ 3 + (2 * j ^ 2 + 13j) * q ^ 4 + (-24 * j ^ 2 - 30j) * q ^ 5 + (26 * j ^ 2 + 22j) * q ^ 6 + 6 * q ^ 7, Unknown(), Unknown(), ((-2 * q ^ 2 + (-10 * j ^ 2 - 7j) * q ^ 3 + (12 * j ^ 2 + 4j) * q ^ 4 + (4 * j ^ 2 + 14j) * q ^ 5 + (-19 * j ^ 2 - 24j) * q ^ 6) - 14 * q ^ 7) + 3 * q ^ 8, (-3 * j ^ 2 - 2j) * q ^ 5 + (4 * j ^ 2 + 3j) * q ^ 6 + q ^ 8, (-4 * j ^ 2 * q ^ 137 + 11 * j ^ 2 * q ^ 138) - 8 * j ^ 2 * q ^ 139, (-4 * j * q ^ 29 + 11 * j * q ^ 30) - 8 * j * q ^ 31, (((2 * j ^ 2 + 3j) * q ^ 4 + (-10 * j ^ 2 - 11j) * q ^ 5 + (7 * j ^ 2 + 9j) * q ^ 6) - q ^ 7) + 2 * q ^ 8, Unknown(), Unknown(), (4 * j ^ 2 + 2j) * q ^ 2 + (-13 * j ^ 2 - 8j) * q ^ 3 + 9 * j ^ 2 * q ^ 4 + (11 * j ^ 2 + 19j) * q ^ 5 + (-25 * j ^ 2 - 27j) * q ^ 6 + (18 * j ^ 2 + 16j) * q ^ 7 + 4 * q ^ 8, Unknown(), Unknown(), Unknown(), ((j * q ^ 29 - 7 * j * q ^ 30) + 10 * j * q ^ 31) - 5 * j * q ^ 32, Unknown(), Unknown(), ((j * q ^ 4 + (-8 * j ^ 2 - 12j) * q ^ 5 + (18 * j ^ 2 + 22j) * q ^ 6 + (-8 * j ^ 2 - 6j) * q ^ 7 + (-10 * j ^ 2 - 14j) * q ^ 8) - 12 * q ^ 9) + 3 * q ^ 10, 0, Unknown(), Unknown(), 0, (((-2 * j ^ 2 - 3j) * q ^ 6 + (2 * j ^ 2 + 4j) * q ^ 7) - q ^ 8) + q ^ 10, Unknown(), Unknown(), Unknown(), ((-(j ^ 2) * q ^ 56 + 7 * j ^ 2 * q ^ 57) - 10 * j ^ 2 * q ^ 58) + 5 * j ^ 2 * q ^ 59, Unknown(), Unknown(), ((3 * q ^ 83 - 10 * q ^ 84) + 14 * q ^ 85) - 6 * q ^ 86, Unknown(), Unknown(), (((2 * j ^ 2 - 2j) * q ^ 5 + (4 * j ^ 2 + 12j) * q ^ 6 + (-14 * j ^ 2 - 18j) * q ^ 7 + (10 * j ^ 2 + 8j) * q ^ 8) - 4 * j ^ 2 * q ^ 9) + (5 * j ^ 2 + 3j) * q ^ 10 + 3 * q ^ 12, 0, (-5 * j ^ 2 - j) * q ^ 136 + (16 * j ^ 2 + 4j) * q ^ 137 + (-11 * j ^ 2 - 3j) * q ^ 138, ((3 * j ^ 2 * q ^ 137 - 10 * j ^ 2 * q ^ 138) + 14 * j ^ 2 * q ^ 139) - 6 * j ^ 2 * q ^ 140, Unknown(), ((-2 * j ^ 2 - 5j) * q ^ 9 - 3 * q ^ 11) + (-(j ^ 2) + 2j) * q ^ 12, (j ^ 2 - 4j) * q ^ 28 + (-4 * j ^ 2 + 12j) * q ^ 29 + (3 * j ^ 2 - 8j) * q ^ 30, Unknown(), ((-2 * j ^ 2 * q ^ 55 + 12 * j ^ 2 * q ^ 56) - 22 * j ^ 2 * q ^ 57) + 12 * j ^ 2 * q ^ 58, -j * q ^ 57 + j * q ^ 58, Unknown(), Unknown(), (4 * j ^ 2 * q ^ 56 - 11 * j ^ 2 * q ^ 57) + 8 * j ^ 2 * q ^ 58, Unknown(), -126 * j * q ^ 27, (2 * q ^ 29 + (2 * j ^ 2 + 5j) * q ^ 30) - 3 * j * q ^ 31, (-16 * j * q ^ 27 + 58 * j * q ^ 28) - 52 * j * q ^ 29, Unknown(), (-6 * j * q ^ 28 + 23 * j * q ^ 29) - 19 * j * q ^ 30, ((6 * j * q ^ 27 - 30 * j * q ^ 28) + 57 * j * q ^ 29) - 33 * j * q ^ 30, ((4 * j * q ^ 28 - 16 * j * q ^ 29) + 26 * j * q ^ 30) - 14 * j * q ^ 31, Unknown(), (-(q ^ 28) + (-4 * j ^ 2 - 8j) * q ^ 29 + (j ^ 2 + 13j) * q ^ 30) - 8 * j * q ^ 31, (((-j * q ^ 27 + 7 * j * q ^ 28) - 26 * j * q ^ 29) + 36 * j * q ^ 30) - 17 * j * q ^ 31, (-(j ^ 2) + j) * q ^ 28 + (2 * j ^ 2 - 7j) * q ^ 29 + (-3 * j ^ 2 + 11j) * q ^ 30 + (2 * j ^ 2 - 5j) * q ^ 31, ((-9 * j ^ 2 * q ^ 29 - 24 * j * q ^ 30) + (-9 * j ^ 2 + 36j) * q ^ 31) - 12 * j * q ^ 33, (((((-3 * j * q ^ 27 - 6 * q ^ 28) + (3 * j ^ 2 + 15j) * q ^ 29) - 18 * j * q ^ 30) - 3 * q ^ 31) + (6 * j ^ 2 + 30j) * q ^ 32) - 15 * j * q ^ 33, (-(j ^ 2) * q ^ 30 + (-(j ^ 2) - 8j) * q ^ 31 + (-4 * j ^ 2 + 11j) * q ^ 32) - 3 * j * q ^ 34, (3 * j ^ 2 * q ^ 29 + (-6 * j ^ 2 + 8j) * q ^ 30 + (6 * j ^ 2 - 28j) * q ^ 31 + (-3 * j ^ 2 + 24j) * q ^ 32 + 4 * j * q ^ 33) - 8 * j * q ^ 34, (j * q ^ 27 + (-2 * j ^ 2 - 4j) * q ^ 28 + (2 * j ^ 2 - 2j) * q ^ 29 + (j ^ 2 + 15j) * q ^ 30 + (-(j ^ 2) - 13j) * q ^ 31 + (-2 * j ^ 2 - 10j) * q ^ 32 + (2 * j ^ 2 + 23j) * q ^ 33) - 10 * j * q ^ 34, Unknown(), ((-(j ^ 2) + 2j) * q ^ 31 + (j ^ 2 - 10j) * q ^ 32 + (-2 * j ^ 2 + 7j) * q ^ 33 + j * q ^ 34) - 2 * j * q ^ 35, ((-(j ^ 2) - 3j) * q ^ 32 + (j ^ 2 + 4j) * q ^ 33) - j * q ^ 35, ((j ^ 2 - 2j) * q ^ 33 + (-2 * j ^ 2 + 2j) * q ^ 34 + j * q ^ 35) - j * q ^ 37, 45 * j * q ^ 27 - 81 * j * q ^ 28, ((4 * j ^ 2 + 2j) * q ^ 32 + (-8 * j ^ 2 + 4j) * q ^ 33 + (4 * j ^ 2 - 14j) * q ^ 34 + (2 * j ^ 2 + 10j) * q ^ 35 + 4 * q ^ 36 + (2 * j ^ 2 + 5j) * q ^ 37) - 3 * j * q ^ 39, (3 * q ^ 28 + (3 * j ^ 2 + 15j) * q ^ 29) - 12 * j * q ^ 30, (-6 * j * q ^ 27 + 39 * j * q ^ 28) - 42 * j * q ^ 29, Unknown(), ((2 * j * q ^ 27 - 18 * j * q ^ 28) + 40 * j * q ^ 29) - 27 * j * q ^ 30, (3 * j ^ 2 - 2j) * q ^ 36 + 3 * j * q ^ 38 + (-3 * j ^ 2 - j) * q ^ 39, Unknown(), Unknown(), (-4 * q ^ 83 + 11 * q ^ 84) - 8 * q ^ 85, Unknown(), 0, ((2 * j * q ^ 28 - 12 * j * q ^ 29) + 22 * j * q ^ 30) - 12 * j * q ^ 31, Unknown(), 126 * j ^ 2 * q ^ 54, Unknown(), (16 * j ^ 2 * q ^ 54 - 58 * j ^ 2 * q ^ 55) + 52 * j ^ 2 * q ^ 56, (6 * j ^ 2 * q ^ 55 - 23 * j ^ 2 * q ^ 56) + 19 * j ^ 2 * q ^ 57, ((-6 * j ^ 2 * q ^ 54 + 30 * j ^ 2 * q ^ 55) - 57 * j ^ 2 * q ^ 56) + 33 * j ^ 2 * q ^ 57, -(j ^ 2) * q ^ 54 + (8 * j ^ 2 + 2j) * q ^ 55 + (-10 * j ^ 2 - 2j) * q ^ 56 + (-(j ^ 2) + 2j) * q ^ 57 + 6 * j ^ 2 * q ^ 58, (-2 * j ^ 2 - j) * q ^ 55 + (9 * j ^ 2 + 2j) * q ^ 56 + (-14 * j ^ 2 - 3j) * q ^ 57 + (7 * j ^ 2 + 2j) * q ^ 58, Unknown(), 9 * q ^ 56 + 24 * j ^ 2 * q ^ 57 + (-45 * j ^ 2 - 9j) * q ^ 58 + 12 * j ^ 2 * q ^ 60, ((-3 * q ^ 56 + (-14 * j ^ 2 - 6j) * q ^ 57 + (34 * j ^ 2 + 6j) * q ^ 58 + (-27 * j ^ 2 - 3j) * q ^ 59) - 4 * j ^ 2 * q ^ 60) + 8 * j ^ 2 * q ^ 61, q ^ 57 + (7 * j ^ 2 - j) * q ^ 58 + (-15 * j ^ 2 - 4j) * q ^ 59 + 3 * j ^ 2 * q ^ 61, (2 * j ^ 2 - j) * q ^ 59 + (-3 * j ^ 2 + j) * q ^ 60 + j ^ 2 * q ^ 62, -45 * j ^ 2 * q ^ 54 + 81 * j ^ 2 * q ^ 55, (6 * j ^ 2 * q ^ 54 - 39 * j ^ 2 * q ^ 55) + 42 * j ^ 2 * q ^ 56, ((-2 * j ^ 2 * q ^ 54 + 18 * j ^ 2 * q ^ 55) - 40 * j ^ 2 * q ^ 56) + 27 * j ^ 2 * q ^ 57, ((5 * j ^ 2 + 3j) * q ^ 63 - 3 * j ^ 2 * q ^ 65) + (-2 * j ^ 2 - 3j) * q ^ 66, (5 * j ^ 2 + j) * q ^ 55 + (-16 * j ^ 2 - 4j) * q ^ 56 + (11 * j ^ 2 + 3j) * q ^ 57, (4 * j * q ^ 110 - 11 * j * q ^ 111) + 8 * j * q ^ 112, Unknown(), -126 * q ^ 81, (((((4 * q ^ 27 - 6 * q ^ 28) + 12 * q ^ 30) - 24 * q ^ 31) - 4 * q ^ 33) + 11 * q ^ 34 + q ^ 36) - 4 * q ^ 37, Unknown(), (-6 * q ^ 82 + 23 * q ^ 83) - 19 * q ^ 84, Unknown(), Unknown(), ((-9 * j * q ^ 83 - 24 * q ^ 84) + (-36 * j ^ 2 - 45j) * q ^ 85) - 12 * q ^ 87, Unknown(), (-j * q ^ 84 + (8 * j ^ 2 + 7j) * q ^ 85 + (-11 * j ^ 2 - 15j) * q ^ 86) - 3 * q ^ 88, ((3 * j ^ 2 + 2j) * q ^ 86 + (-4 * j ^ 2 - 3j) * q ^ 87) - q ^ 89, ((-10 * q ^ 27 - 36 * q ^ 30) + 15 * q ^ 33) - 5 * q ^ 36, (-6 * q ^ 81 + 39 * q ^ 82) - 42 * q ^ 83, Unknown(), (4 * j ^ 2 + 5j) * q ^ 82 + (-12 * j ^ 2 - 16j) * q ^ 83 + (8 * j ^ 2 + 11j) * q ^ 84, 126 * j * q ^ 108, Unknown(), (16 * j * q ^ 108 - 58 * j * q ^ 109) + 52 * j * q ^ 110, ((3 * j * q ^ 29 - 10 * j * q ^ 30) + 14 * j * q ^ 31) - 6 * j * q ^ 32, -45 * j * q ^ 108 + 81 * j * q ^ 109, (6 * j * q ^ 108 - 39 * j * q ^ 109) + 42 * j * q ^ 110, Unknown(), (6 * j * q ^ 109 - 23 * j * q ^ 110) + 19 * j * q ^ 111, -126 * j ^ 2 * q ^ 135, Unknown(), (-16 * j ^ 2 * q ^ 135 + 58 * j ^ 2 * q ^ 136) - 52 * j ^ 2 * q ^ 137, 45 * j ^ 2 * q ^ 135 - 81 * j ^ 2 * q ^ 136, (-6 * j ^ 2 * q ^ 135 + 39 * j ^ 2 * q ^ 136) - 42 * j ^ 2 * q ^ 137, Unknown(), (-6 * j ^ 2 * q ^ 136 + 23 * j ^ 2 * q ^ 137) - 19 * j ^ 2 * q ^ 138]
            end
        f61 = (q->begin
                    [140, -70 + 70q, (22 - 48q) + 22 * q ^ 2, (36 - 68q) + 36 * q ^ 2, ((-12 + 34q) - 34 * q ^ 2) + 12 * q ^ 3, ((-5 + 17q) - 17 * q ^ 2) + 5 * q ^ 3, 9q - 9 * q ^ 2, ((-19 + 51q) - 51 * q ^ 2) + 19 * q ^ 3, ((4 - 9q) + 9 * q ^ 2) - 4 * q ^ 3, (((-2 + 6q) - 10 * q ^ 2) + 6 * q ^ 3) - 2 * q ^ 4, (((4 - 16q) + 20 * q ^ 2) - 16 * q ^ 3) + 4 * q ^ 4, (((1 - 4q) + 6 * q ^ 2) - 4 * q ^ 3) + q ^ 4, 2 * q ^ 2, (((-2 + 11q) - 16 * q ^ 2) + 11 * q ^ 3) - 2 * q ^ 4, (((3 - 11q) + 16 * q ^ 2) - 11 * q ^ 3) + 3 * q ^ 4, (-5q + 8 * q ^ 2) - 5 * q ^ 3, (((7 - 22q) + 34 * q ^ 2) - 22 * q ^ 3) + 7 * q ^ 4, ((((-1 + 2q) - 5 * q ^ 2) + 5 * q ^ 3) - 2 * q ^ 4) + q ^ 5, ((((1 - 7q) + 13 * q ^ 2) - 13 * q ^ 3) + 7 * q ^ 4) - q ^ 5, 0, Unknown(), ((((1 - 3q) + 8 * q ^ 2) - 8 * q ^ 3) + 3 * q ^ 4) - q ^ 5, Unknown(), ((((-1 + 5q) - 8 * q ^ 2) + 8 * q ^ 3) - 5 * q ^ 4) + q ^ 5, ((q - q ^ 2) + q ^ 3) - q ^ 4, -(q ^ 2) + q ^ 3, (-27 * q ^ 2 + 32 * q ^ 3) - 27 * q ^ 4, 0, Unknown(), (-5 * q ^ 2 + 8 * q ^ 3) - 5 * q ^ 4, 0, (((((4 - 18q) - 9 * q ^ 2) + 24 * q ^ 3) - 9 * q ^ 4) - 18 * q ^ 5) + 4 * q ^ 6, Unknown(), Unknown(), ((15 * q ^ 2 - 28 * q ^ 3) + 28 * q ^ 4) - 15 * q ^ 5, -(q ^ 3) + q ^ 4, (((((-2 + 12q) - 4 * q ^ 2) - 17 * q ^ 3) + 17 * q ^ 4 + 4 * q ^ 5) - 12 * q ^ 6) + 2 * q ^ 7, ((((q - 2 * q ^ 2) + 4 * q ^ 3) - 4 * q ^ 4) + 2 * q ^ 5) - q ^ 6, ((3 * q ^ 2 - 6 * q ^ 3) + 6 * q ^ 4) - 3 * q ^ 5, ((3 * q ^ 2 - 6 * q ^ 3) + 6 * q ^ 4) - 3 * q ^ 5, Unknown(), ((((-2 + 10q) - 7 * q ^ 2) + 7 * q ^ 5) - 10 * q ^ 6) + 2 * q ^ 7, Unknown(), Unknown(), (((((1 - 4q) + 4 * q ^ 2 + 3 * q ^ 3) - 6 * q ^ 4) + 3 * q ^ 5 + 4 * q ^ 6) - 4 * q ^ 7) + q ^ 8, q ^ 3 + q ^ 5, (((-(q ^ 105) + 4 * q ^ 106) - 6 * q ^ 107) + 4 * q ^ 108) - q ^ 109, (((-(q ^ 21) + 4 * q ^ 22) - 6 * q ^ 23) + 4 * q ^ 24) - q ^ 25, (((-2 * q ^ 2 + 4 * q ^ 3) - 6 * q ^ 4) + 4 * q ^ 5) - 2 * q ^ 6, Unknown(), Unknown(), (((((((1 - 7q) + 9 * q ^ 2) - 3 * q ^ 3) - 2 * q ^ 4) - 3 * q ^ 5) + 9 * q ^ 6) - 7 * q ^ 7) + q ^ 8, Unknown(), Unknown(), Unknown(), ((((q ^ 21 - 2 * q ^ 22) + 5 * q ^ 23) - 5 * q ^ 24) + 2 * q ^ 25) - q ^ 26, Unknown(), Unknown(), (((((((1 - 2q) + q ^ 2 + 6 * q ^ 3) - 14 * q ^ 4) + 20 * q ^ 5) - 14 * q ^ 6) + 6 * q ^ 7 + q ^ 8) - 2 * q ^ 9) + q ^ 10, 0, Unknown(), Unknown(), 0, 2 * q ^ 4 + 2 * q ^ 6, Unknown(), Unknown(), Unknown(), ((((-(q ^ 42) + 2 * q ^ 43) - 5 * q ^ 44) + 5 * q ^ 45) - 2 * q ^ 46) + q ^ 47, Unknown(), Unknown(), ((((q ^ 63 - 5 * q ^ 64) + 8 * q ^ 65) - 8 * q ^ 66) + 5 * q ^ 67) - q ^ 68, Unknown(), Unknown(), (((((6 * q ^ 3 - 5 * q ^ 4) + 14 * q ^ 5) - 16 * q ^ 6) + 14 * q ^ 7) - 5 * q ^ 8) + 6 * q ^ 9, 0, (((2 * q ^ 105 - 11 * q ^ 106) + 16 * q ^ 107) - 11 * q ^ 108) + 2 * q ^ 109, ((((q ^ 105 - 5 * q ^ 106) + 8 * q ^ 107) - 8 * q ^ 108) + 5 * q ^ 109) - q ^ 110, Unknown(), -3 * q ^ 5 + 3 * q ^ 10, (((2 * q ^ 21 - 11 * q ^ 22) + 16 * q ^ 23) - 11 * q ^ 24) + 2 * q ^ 25, Unknown(), (((3 * q ^ 42 - 11 * q ^ 43) + 16 * q ^ 44) - 11 * q ^ 45) + 3 * q ^ 46, 0, Unknown(), Unknown(), (((q ^ 42 - 4 * q ^ 43) + 6 * q ^ 44) - 4 * q ^ 45) + q ^ 46, Unknown(), -140 * q ^ 21, -2 * q ^ 23, (-36 * q ^ 21 + 68 * q ^ 22) - 36 * q ^ 23, Unknown(), ((5 * q ^ 21 - 17 * q ^ 22) + 17 * q ^ 23) - 5 * q ^ 24, ((19 * q ^ 21 - 51 * q ^ 22) + 51 * q ^ 23) - 19 * q ^ 24, (((-4 * q ^ 21 + 16 * q ^ 22) - 20 * q ^ 23) + 16 * q ^ 24) - 4 * q ^ 25, Unknown(), (5 * q ^ 22 - 8 * q ^ 23) + 5 * q ^ 24, (((-7 * q ^ 21 + 22 * q ^ 22) - 34 * q ^ 23) + 22 * q ^ 24) - 7 * q ^ 25, ((((-(q ^ 21) + 7 * q ^ 22) - 13 * q ^ 23) + 13 * q ^ 24) - 7 * q ^ 25) + q ^ 26, (27 * q ^ 23 - 32 * q ^ 24) + 27 * q ^ 25, (((-4 * q ^ 21 + 18 * q ^ 22 + 9 * q ^ 23) - 24 * q ^ 24) + 9 * q ^ 25 + 18 * q ^ 26) - 4 * q ^ 27, ((-3 * q ^ 23 + 6 * q ^ 24) - 6 * q ^ 25) + 3 * q ^ 26, ((-15 * q ^ 23 + 28 * q ^ 24) - 28 * q ^ 25) + 15 * q ^ 26, (((((2 * q ^ 21 - 12 * q ^ 22) + 4 * q ^ 23 + 17 * q ^ 24) - 17 * q ^ 25) - 4 * q ^ 26) + 12 * q ^ 27) - 2 * q ^ 28, Unknown(), (((2 * q ^ 23 - 4 * q ^ 24) + 6 * q ^ 25) - 4 * q ^ 26) + 2 * q ^ 27, -(q ^ 24) - q ^ 26, -2 * q ^ 25 - 2 * q ^ 27, 70 * q ^ 21 - 70 * q ^ 22, (((((-6 * q ^ 24 + 5 * q ^ 25) - 14 * q ^ 26) + 16 * q ^ 27) - 14 * q ^ 28) + 5 * q ^ 29) - 6 * q ^ 30, -9 * q ^ 22 + 9 * q ^ 23, (-22 * q ^ 21 + 48 * q ^ 22) - 22 * q ^ 23, Unknown(), ((12 * q ^ 21 - 34 * q ^ 22) + 34 * q ^ 23) - 12 * q ^ 24, 3 * q ^ 26 - 3 * q ^ 31, Unknown(), Unknown(), (((-(q ^ 63) + 4 * q ^ 64) - 6 * q ^ 65) + 4 * q ^ 66) - q ^ 67, Unknown(), 0, (((-3 * q ^ 21 + 11 * q ^ 22) - 16 * q ^ 23) + 11 * q ^ 24) - 3 * q ^ 25, Unknown(), 140 * q ^ 42, Unknown(), (36 * q ^ 42 - 68 * q ^ 43) + 36 * q ^ 44, ((-5 * q ^ 42 + 17 * q ^ 43) - 17 * q ^ 44) + 5 * q ^ 45, ((-19 * q ^ 42 + 51 * q ^ 43) - 51 * q ^ 44) + 19 * q ^ 45, (((-2 * q ^ 42 + 6 * q ^ 43) - 10 * q ^ 44) + 6 * q ^ 45) - 2 * q ^ 46, ((((q ^ 42 - 7 * q ^ 43) + 13 * q ^ 44) - 13 * q ^ 45) + 7 * q ^ 46) - q ^ 47, Unknown(), (-27 * q ^ 44 + 32 * q ^ 45) - 27 * q ^ 46, ((15 * q ^ 44 - 28 * q ^ 45) + 28 * q ^ 46) - 15 * q ^ 47, ((3 * q ^ 44 - 6 * q ^ 45) + 6 * q ^ 46) - 3 * q ^ 47, q ^ 45 + q ^ 47, -70 * q ^ 42 + 70 * q ^ 43, (22 * q ^ 42 - 48 * q ^ 43) + 22 * q ^ 44, ((-12 * q ^ 42 + 34 * q ^ 43) - 34 * q ^ 44) + 12 * q ^ 45, -3 * q ^ 47 + 3 * q ^ 52, (((-2 * q ^ 42 + 11 * q ^ 43) - 16 * q ^ 44) + 11 * q ^ 45) - 2 * q ^ 46, (((q ^ 84 - 4 * q ^ 85) + 6 * q ^ 86) - 4 * q ^ 87) + q ^ 88, Unknown(), -140 * q ^ 63, (-4 * q ^ 15 + 2 * q ^ 16 + 2 * q ^ 30) - 4 * q ^ 31, Unknown(), ((5 * q ^ 63 - 17 * q ^ 64) + 17 * q ^ 65) - 5 * q ^ 66, Unknown(), Unknown(), (27 * q ^ 65 - 32 * q ^ 66) + 27 * q ^ 67, Unknown(), ((-3 * q ^ 65 + 6 * q ^ 66) - 6 * q ^ 67) + 3 * q ^ 68, -(q ^ 66) - q ^ 68, 6 * q ^ 15 - 6 * q ^ 30, (-22 * q ^ 63 + 48 * q ^ 64) - 22 * q ^ 65, Unknown(), (((2 * q ^ 63 - 11 * q ^ 64) + 16 * q ^ 65) - 11 * q ^ 66) + 2 * q ^ 67, 140 * q ^ 84, Unknown(), (36 * q ^ 84 - 68 * q ^ 85) + 36 * q ^ 86, ((((q ^ 21 - 5 * q ^ 22) + 8 * q ^ 23) - 8 * q ^ 24) + 5 * q ^ 25) - q ^ 26, -70 * q ^ 84 + 70 * q ^ 85, (22 * q ^ 84 - 48 * q ^ 85) + 22 * q ^ 86, Unknown(), ((-5 * q ^ 84 + 17 * q ^ 85) - 17 * q ^ 86) + 5 * q ^ 87, -140 * q ^ 105, Unknown(), (-36 * q ^ 105 + 68 * q ^ 106) - 36 * q ^ 107, 70 * q ^ 105 - 70 * q ^ 106, (-22 * q ^ 105 + 48 * q ^ 106) - 22 * q ^ 107, Unknown(), ((5 * q ^ 105 - 17 * q ^ 106) + 17 * q ^ 107) - 5 * q ^ 108]
                end)
        f62 = (q->begin
                    [140, -80 + 60q, (32 - 48q) + 12 * q ^ 2, (48 - 64q) + 28 * q ^ 2, ((-21 + 38q) - 26 * q ^ 2) + 7 * q ^ 3, ((-11 + 21q) - 11 * q ^ 2) + q ^ 3, (-2 + 12q) - 3 * q ^ 2, ((-30 + 54q) - 42 * q ^ 2) + 14 * q ^ 3, ((4 - 3q) + 12 * q ^ 2) - 6 * q ^ 3, (((-1 + 4q) - 10 * q ^ 2) + 7 * q ^ 3) - 3 * q ^ 4, (((11 - 20q) + 19 * q ^ 2) - 8 * q ^ 3) + 3 * q ^ 4, ((4 - 7q) + 4 * q ^ 2) - q ^ 3, -q, (((-5 + 12q) - 15 * q ^ 2) + 8 * q ^ 3) - q ^ 4, (((8 - 16q) + 13 * q ^ 2) - 6 * q ^ 3) + q ^ 4, ((2 - 8q) + 5 * q ^ 2) - 2 * q ^ 3, (((14 - 30q) + 28 * q ^ 2) - 16 * q ^ 3) + 4 * q ^ 4, (((-3 + 6q) - 4 * q ^ 2) + 2 * q ^ 3) - q ^ 4, ((((3 - 9q) + 14 * q ^ 2) - 10 * q ^ 3) + 4 * q ^ 4) - q ^ 5, 0, Unknown(), (((2 - 7q) + 8 * q ^ 2) - 4 * q ^ 3) + q ^ 4, Unknown(), ((((-5 + 9q) - 8 * q ^ 2) + 5 * q ^ 3) - 2 * q ^ 4) + q ^ 5, (-2 + 2q) - q ^ 2, q, ((2 - 36 * q ^ 2) + 48 * q ^ 3) - 9 * q ^ 4, 0, Unknown(), ((q - 10 * q ^ 2) + 10 * q ^ 3) - q ^ 4, 0, (((((8 - 24q) - 3 * q ^ 2) + 36 * q ^ 3) - 12 * q ^ 4) - 6 * q ^ 5) + 6 * q ^ 6, Unknown(), Unknown(), (((-2 + 24 * q ^ 2) - 36 * q ^ 3) + 27 * q ^ 4) - 6 * q ^ 5, q ^ 2, ((((((-5 + 19q) - 7 * q ^ 2) - 20 * q ^ 3) + 26 * q ^ 4) - 2 * q ^ 5) - 7 * q ^ 6) + 3 * q ^ 7, (((2q - 3 * q ^ 2) + 4 * q ^ 3) - 3 * q ^ 4) + q ^ 5, (((-q + 7 * q ^ 2) - 8 * q ^ 3) + 5 * q ^ 4) - q ^ 5, (6 * q ^ 2 - 12 * q ^ 3) + 4 * q ^ 4, Unknown(), ((((((-5 + 20q) - 24 * q ^ 2) - 2 * q ^ 3) + 16 * q ^ 4) - 6 * q ^ 5) - 2 * q ^ 6) + q ^ 7, Unknown(), Unknown(), (((((2 - 12q) + 17 * q ^ 2) - 2 * q ^ 3) - 18 * q ^ 4) + 15 * q ^ 5) - 3 * q ^ 6, -(q ^ 2), ((4 * q ^ 90 - 7 * q ^ 91) + 4 * q ^ 92) - q ^ 93, ((4 * q ^ 18 - 7 * q ^ 19) + 4 * q ^ 20) - q ^ 21, ((-5 * q ^ 2 + 8 * q ^ 3) - 6 * q ^ 4) + 3 * q ^ 5, Unknown(), Unknown(), ((((((3 - 16q) + 23 * q ^ 2) - 8 * q ^ 3) - 13 * q ^ 4) + 12 * q ^ 5) - 2 * q ^ 7) + q ^ 8, Unknown(), Unknown(), Unknown(), (((-3 * q ^ 18 + 6 * q ^ 19) - 4 * q ^ 20) + 2 * q ^ 21) - q ^ 22, Unknown(), Unknown(), ((((((2 - 8q) + 7 * q ^ 2 + 8 * q ^ 3) - 22 * q ^ 4) + 22 * q ^ 5) - 12 * q ^ 6) + 4 * q ^ 7) - q ^ 8, 0, Unknown(), Unknown(), 0, (-2 * q ^ 3 + 4 * q ^ 4) - 2 * q ^ 5, Unknown(), Unknown(), Unknown(), (((-3 * q ^ 36 + 6 * q ^ 37) - 4 * q ^ 38) + 2 * q ^ 39) - q ^ 40, Unknown(), Unknown(), ((((-5 * q ^ 54 + 9 * q ^ 55) - 8 * q ^ 56) + 5 * q ^ 57) - 2 * q ^ 58) + q ^ 59, Unknown(), Unknown(), (((((-(q ^ 2) + 6 * q ^ 3) - 10 * q ^ 4) + 14 * q ^ 5) - 10 * q ^ 6) - 2 * q ^ 7) - q ^ 8, 0, (((-5 * q ^ 90 + 12 * q ^ 91) - 15 * q ^ 92) + 8 * q ^ 93) - q ^ 94, ((((-5 * q ^ 90 + 9 * q ^ 91) - 8 * q ^ 92) + 5 * q ^ 93) - 2 * q ^ 94) + q ^ 95, Unknown(), q ^ 6 + 6 * q ^ 7, (((-5 * q ^ 18 + 12 * q ^ 19) - 15 * q ^ 20) + 8 * q ^ 21) - q ^ 22, Unknown(), (((8 * q ^ 36 - 16 * q ^ 37) + 13 * q ^ 38) - 6 * q ^ 39) + q ^ 40, q ^ 38, Unknown(), Unknown(), ((4 * q ^ 36 - 7 * q ^ 37) + 4 * q ^ 38) - q ^ 39, Unknown(), 140 * q ^ 18, -(q ^ 19), (48 * q ^ 18 - 64 * q ^ 19) + 28 * q ^ 20, Unknown(), ((-11 * q ^ 18 + 21 * q ^ 19) - 11 * q ^ 20) + q ^ 21, ((-30 * q ^ 18 + 54 * q ^ 19) - 42 * q ^ 20) + 14 * q ^ 21, (((11 * q ^ 18 - 20 * q ^ 19) + 19 * q ^ 20) - 8 * q ^ 21) + 3 * q ^ 22, Unknown(), ((2 * q ^ 18 - 8 * q ^ 19) + 5 * q ^ 20) - 2 * q ^ 21, (((14 * q ^ 18 - 30 * q ^ 19) + 28 * q ^ 20) - 16 * q ^ 21) + 4 * q ^ 22, ((((3 * q ^ 18 - 9 * q ^ 19) + 14 * q ^ 20) - 10 * q ^ 21) + 4 * q ^ 22) - q ^ 23, ((2 * q ^ 18 - 36 * q ^ 20) + 48 * q ^ 21) - 9 * q ^ 22, (((((8 * q ^ 18 - 24 * q ^ 19) - 3 * q ^ 20) + 36 * q ^ 21) - 12 * q ^ 22) - 6 * q ^ 23) + 6 * q ^ 24, (6 * q ^ 20 - 12 * q ^ 21) + 4 * q ^ 22, (((-2 * q ^ 18 + 24 * q ^ 20) - 36 * q ^ 21) + 27 * q ^ 22) - 6 * q ^ 23, ((((((-5 * q ^ 18 + 19 * q ^ 19) - 7 * q ^ 20) - 20 * q ^ 21) + 26 * q ^ 22) - 2 * q ^ 23) - 7 * q ^ 24) + 3 * q ^ 25, Unknown(), ((-5 * q ^ 20 + 8 * q ^ 21) - 6 * q ^ 22) + 3 * q ^ 23, -(q ^ 20), (-2 * q ^ 21 + 4 * q ^ 22) - 2 * q ^ 23, -80 * q ^ 18 + 60 * q ^ 19, (((((-(q ^ 20) + 6 * q ^ 21) - 10 * q ^ 22) + 14 * q ^ 23) - 10 * q ^ 24) - 2 * q ^ 25) - q ^ 26, (-2 * q ^ 18 + 12 * q ^ 19) - 3 * q ^ 20, (32 * q ^ 18 - 48 * q ^ 19) + 12 * q ^ 20, Unknown(), ((-21 * q ^ 18 + 38 * q ^ 19) - 26 * q ^ 20) + 7 * q ^ 21, q ^ 24 + 6 * q ^ 25, Unknown(), Unknown(), ((4 * q ^ 54 - 7 * q ^ 55) + 4 * q ^ 56) - q ^ 57, Unknown(), 0, (((8 * q ^ 18 - 16 * q ^ 19) + 13 * q ^ 20) - 6 * q ^ 21) + q ^ 22, Unknown(), 140 * q ^ 36, Unknown(), (48 * q ^ 36 - 64 * q ^ 37) + 28 * q ^ 38, ((-11 * q ^ 36 + 21 * q ^ 37) - 11 * q ^ 38) + q ^ 39, ((-30 * q ^ 36 + 54 * q ^ 37) - 42 * q ^ 38) + 14 * q ^ 39, (((-(q ^ 36) + 4 * q ^ 37) - 10 * q ^ 38) + 7 * q ^ 39) - 3 * q ^ 40, ((((3 * q ^ 36 - 9 * q ^ 37) + 14 * q ^ 38) - 10 * q ^ 39) + 4 * q ^ 40) - q ^ 41, Unknown(), ((2 * q ^ 36 - 36 * q ^ 38) + 48 * q ^ 39) - 9 * q ^ 40, (((-2 * q ^ 36 + 24 * q ^ 38) - 36 * q ^ 39) + 27 * q ^ 40) - 6 * q ^ 41, (6 * q ^ 38 - 12 * q ^ 39) + 4 * q ^ 40, -(q ^ 38), -80 * q ^ 36 + 60 * q ^ 37, (32 * q ^ 36 - 48 * q ^ 37) + 12 * q ^ 38, ((-21 * q ^ 36 + 38 * q ^ 37) - 26 * q ^ 38) + 7 * q ^ 39, q ^ 42 + 6 * q ^ 43, (((-5 * q ^ 36 + 12 * q ^ 37) - 15 * q ^ 38) + 8 * q ^ 39) - q ^ 40, ((4 * q ^ 72 - 7 * q ^ 73) + 4 * q ^ 74) - q ^ 75, Unknown(), 140 * q ^ 54, ((48 * q ^ 18 - 32 * q ^ 19) - 32 * q ^ 21) + 28 * q ^ 22, Unknown(), ((-11 * q ^ 54 + 21 * q ^ 55) - 11 * q ^ 56) + q ^ 57, Unknown(), Unknown(), ((2 * q ^ 54 - 36 * q ^ 56) + 48 * q ^ 57) - 9 * q ^ 58, Unknown(), (6 * q ^ 56 - 12 * q ^ 57) + 4 * q ^ 58, -(q ^ 56), -80 * q ^ 18 + 60 * q ^ 21, (32 * q ^ 54 - 48 * q ^ 55) + 12 * q ^ 56, Unknown(), (((-5 * q ^ 54 + 12 * q ^ 55) - 15 * q ^ 56) + 8 * q ^ 57) - q ^ 58, 140 * q ^ 72, Unknown(), (48 * q ^ 72 - 64 * q ^ 73) + 28 * q ^ 74, ((((-5 * q ^ 18 + 9 * q ^ 19) - 8 * q ^ 20) + 5 * q ^ 21) - 2 * q ^ 22) + q ^ 23, -80 * q ^ 72 + 60 * q ^ 73, (32 * q ^ 72 - 48 * q ^ 73) + 12 * q ^ 74, Unknown(), ((-11 * q ^ 72 + 21 * q ^ 73) - 11 * q ^ 74) + q ^ 75, 140 * q ^ 90, Unknown(), (48 * q ^ 90 - 64 * q ^ 91) + 28 * q ^ 92, -80 * q ^ 90 + 60 * q ^ 91, (32 * q ^ 90 - 48 * q ^ 91) + 12 * q ^ 92, Unknown(), ((-11 * q ^ 90 + 21 * q ^ 91) - 11 * q ^ 92) + q ^ 93]
                end)
        f64 = (q->begin
                    [189, -99 + 90q, (36 - 63q) + 27 * q ^ 2, (51 - 96q) + 42 * q ^ 2, ((-18 + 51q) - 45 * q ^ 2) + 12 * q ^ 3, ((-9 + 27q) - 21 * q ^ 2) + 6 * q ^ 3, (-9 + 9q) - 9 * q ^ 2, ((-27 + 72q) - 72 * q ^ 2) + 18 * q ^ 3, (-9q + 9 * q ^ 2) - 9 * q ^ 3, ((5q - 8 * q ^ 2) + 10 * q ^ 3) - 4 * q ^ 4, (((6 - 24q) + 33 * q ^ 2) - 18 * q ^ 3) + 3 * q ^ 4, (((1 - 8q) + 10 * q ^ 2) - 5 * q ^ 3) + q ^ 4, (1 - 2q) + q ^ 2, (((-3 + 12q) - 17 * q ^ 2) + 13 * q ^ 3) - 5 * q ^ 4, (((5 - 17q) + 25 * q ^ 2) - 14 * q ^ 3) + 2 * q ^ 4, ((5 - 8q) + 10 * q ^ 2) - 4 * q ^ 3, (((10 - 33q) + 49 * q ^ 2) - 30 * q ^ 3) + 4 * q ^ 4, (((-1 + 4q) - 8 * q ^ 2) + 9 * q ^ 3) - 3 * q ^ 4, ((((1 - 8q) + 15 * q ^ 2) - 15 * q ^ 3) + 9 * q ^ 4) - 2 * q ^ 5, 0, Unknown(), ((((1 - 5q) + 9 * q ^ 2) - 9 * q ^ 3) + 5 * q ^ 4) - q ^ 5, Unknown(), (((-2 + 7q) - 14 * q ^ 2) + 14 * q ^ 3) - 5 * q ^ 4, ((q - 3 * q ^ 2) + 3 * q ^ 3) - q ^ 4, ((-1 + q) - q ^ 2) + q ^ 3, ((9 - 27 * q ^ 2) + 72 * q ^ 3) - 27 * q ^ 4, 0, Unknown(), (((1 + 2q) - 10 * q ^ 2) + 13 * q ^ 3) - 6 * q ^ 4, 0, (((((18 - 18q) - 9 * q ^ 2) + 54 * q ^ 3) - 9 * q ^ 4) - 18 * q ^ 5) + 9 * q ^ 6, Unknown(), Unknown(), (((-5 + 4q + 12 * q ^ 2) - 55 * q ^ 3) + 47 * q ^ 4) - 12 * q ^ 5, (2 * q ^ 2 - 3 * q ^ 3) + q ^ 4, (((((-10 + 16q) - 5 * q ^ 2) - 34 * q ^ 3) + 28 * q ^ 4 + 5 * q ^ 5) - 13 * q ^ 6) + 4 * q ^ 7, (((-(q ^ 2) + 3 * q ^ 3) - 4 * q ^ 4) + 3 * q ^ 5) - q ^ 6, ((((-1 - q) + 6 * q ^ 2) - 12 * q ^ 3) + 10 * q ^ 4) - 2 * q ^ 5, (((-1 + 4 * q ^ 2) - 14 * q ^ 3) + 12 * q ^ 4) - q ^ 5, Unknown(), (((((-5 + 12q) - 10 * q ^ 2) - 10 * q ^ 3) + 7 * q ^ 4 + 13 * q ^ 5) - 12 * q ^ 6) + 5 * q ^ 7, Unknown(), Unknown(), ((((((1 - 2q) + 2 * q ^ 2 + 5 * q ^ 3) - 7 * q ^ 4) - q ^ 5) + 5 * q ^ 6) - 4 * q ^ 7) + q ^ 8, 3 * q ^ 3 - 3 * q ^ 4, (((q ^ 100 - 8 * q ^ 101) + 10 * q ^ 102) - 5 * q ^ 103) + q ^ 104, (((q ^ 20 - 8 * q ^ 21) + 10 * q ^ 22) - 5 * q ^ 23) + q ^ 24, (((1 - 2 * q ^ 2) + 9 * q ^ 3) - 14 * q ^ 4) + 6 * q ^ 5, Unknown(), Unknown(), ((((((3 - 8q) + 10 * q ^ 2 + 2 * q ^ 3) - 7 * q ^ 4) - 7 * q ^ 5) + 12 * q ^ 6) - 7 * q ^ 7) + 2 * q ^ 8, Unknown(), Unknown(), Unknown(), (((-(q ^ 20) + 4 * q ^ 21) - 8 * q ^ 22) + 9 * q ^ 23) - 3 * q ^ 24, Unknown(), Unknown(), (((((((((1 - 2q) - 3 * q ^ 2) + 14 * q ^ 3) - 15 * q ^ 4) + 8 * q ^ 5) - 9 * q ^ 6) + 8 * q ^ 7) - q ^ 8) - 2 * q ^ 9) + q ^ 10, 0, Unknown(), Unknown(), 0, (2 * q ^ 4 - 4 * q ^ 5) + 2 * q ^ 6, Unknown(), Unknown(), Unknown(), (((-(q ^ 40) + 4 * q ^ 41) - 8 * q ^ 42) + 9 * q ^ 43) - 3 * q ^ 44, Unknown(), Unknown(), (((-2 * q ^ 60 + 7 * q ^ 61) - 14 * q ^ 62) + 14 * q ^ 63) - 5 * q ^ 64, Unknown(), Unknown(), ((((((1 - 2 * q ^ 2) - 4 * q ^ 3) + 6 * q ^ 4 + 8 * q ^ 5) - 17 * q ^ 6) + 12 * q ^ 7) - 6 * q ^ 8) + 2 * q ^ 9, 0, (((-3 * q ^ 100 + 12 * q ^ 101) - 17 * q ^ 102) + 13 * q ^ 103) - 5 * q ^ 104, (((-2 * q ^ 100 + 7 * q ^ 101) - 14 * q ^ 102) + 14 * q ^ 103) - 5 * q ^ 104, Unknown(), (-6 * q ^ 5 + 9 * q ^ 7) - 12 * q ^ 8, (((-3 * q ^ 20 + 12 * q ^ 21) - 17 * q ^ 22) + 13 * q ^ 23) - 5 * q ^ 24, Unknown(), (((5 * q ^ 40 - 17 * q ^ 41) + 25 * q ^ 42) - 14 * q ^ 43) + 2 * q ^ 44, 0, Unknown(), Unknown(), (((q ^ 40 - 8 * q ^ 41) + 10 * q ^ 42) - 5 * q ^ 43) + q ^ 44, Unknown(), 189 * q ^ 20, (q ^ 20 - 2 * q ^ 21) + q ^ 22, (51 * q ^ 20 - 96 * q ^ 21) + 42 * q ^ 22, Unknown(), ((-9 * q ^ 20 + 27 * q ^ 21) - 21 * q ^ 22) + 6 * q ^ 23, ((-27 * q ^ 20 + 72 * q ^ 21) - 72 * q ^ 22) + 18 * q ^ 23, (((6 * q ^ 20 - 24 * q ^ 21) + 33 * q ^ 22) - 18 * q ^ 23) + 3 * q ^ 24, Unknown(), ((5 * q ^ 20 - 8 * q ^ 21) + 10 * q ^ 22) - 4 * q ^ 23, (((10 * q ^ 20 - 33 * q ^ 21) + 49 * q ^ 22) - 30 * q ^ 23) + 4 * q ^ 24, ((((q ^ 20 - 8 * q ^ 21) + 15 * q ^ 22) - 15 * q ^ 23) + 9 * q ^ 24) - 2 * q ^ 25, ((9 * q ^ 20 - 27 * q ^ 22) + 72 * q ^ 23) - 27 * q ^ 24, (((((18 * q ^ 20 - 18 * q ^ 21) - 9 * q ^ 22) + 54 * q ^ 23) - 9 * q ^ 24) - 18 * q ^ 25) + 9 * q ^ 26, (((-(q ^ 20) + 4 * q ^ 22) - 14 * q ^ 23) + 12 * q ^ 24) - q ^ 25, (((-5 * q ^ 20 + 4 * q ^ 21 + 12 * q ^ 22) - 55 * q ^ 23) + 47 * q ^ 24) - 12 * q ^ 25, (((((-10 * q ^ 20 + 16 * q ^ 21) - 5 * q ^ 22) - 34 * q ^ 23) + 28 * q ^ 24 + 5 * q ^ 25) - 13 * q ^ 26) + 4 * q ^ 27, Unknown(), (((q ^ 20 - 2 * q ^ 22) + 9 * q ^ 23) - 14 * q ^ 24) + 6 * q ^ 25, 3 * q ^ 23 - 3 * q ^ 24, (2 * q ^ 24 - 4 * q ^ 25) + 2 * q ^ 26, -99 * q ^ 20 + 90 * q ^ 21, ((((((q ^ 20 - 2 * q ^ 22) - 4 * q ^ 23) + 6 * q ^ 24 + 8 * q ^ 25) - 17 * q ^ 26) + 12 * q ^ 27) - 6 * q ^ 28) + 2 * q ^ 29, (-9 * q ^ 20 + 9 * q ^ 21) - 9 * q ^ 22, (36 * q ^ 20 - 63 * q ^ 21) + 27 * q ^ 22, Unknown(), ((-18 * q ^ 20 + 51 * q ^ 21) - 45 * q ^ 22) + 12 * q ^ 23, (-6 * q ^ 25 + 9 * q ^ 27) - 12 * q ^ 28, Unknown(), Unknown(), (((q ^ 60 - 8 * q ^ 61) + 10 * q ^ 62) - 5 * q ^ 63) + q ^ 64, Unknown(), 0, (((5 * q ^ 20 - 17 * q ^ 21) + 25 * q ^ 22) - 14 * q ^ 23) + 2 * q ^ 24, Unknown(), 189 * q ^ 40, Unknown(), (51 * q ^ 40 - 96 * q ^ 41) + 42 * q ^ 42, ((-9 * q ^ 40 + 27 * q ^ 41) - 21 * q ^ 42) + 6 * q ^ 43, ((-27 * q ^ 40 + 72 * q ^ 41) - 72 * q ^ 42) + 18 * q ^ 43, ((5 * q ^ 41 - 8 * q ^ 42) + 10 * q ^ 43) - 4 * q ^ 44, ((((q ^ 40 - 8 * q ^ 41) + 15 * q ^ 42) - 15 * q ^ 43) + 9 * q ^ 44) - 2 * q ^ 45, Unknown(), ((9 * q ^ 40 - 27 * q ^ 42) + 72 * q ^ 43) - 27 * q ^ 44, (((-5 * q ^ 40 + 4 * q ^ 41 + 12 * q ^ 42) - 55 * q ^ 43) + 47 * q ^ 44) - 12 * q ^ 45, (((-(q ^ 40) + 4 * q ^ 42) - 14 * q ^ 43) + 12 * q ^ 44) - q ^ 45, 3 * q ^ 43 - 3 * q ^ 44, -99 * q ^ 40 + 90 * q ^ 41, (36 * q ^ 40 - 63 * q ^ 41) + 27 * q ^ 42, ((-18 * q ^ 40 + 51 * q ^ 41) - 45 * q ^ 42) + 12 * q ^ 43, (-6 * q ^ 45 + 9 * q ^ 47) - 12 * q ^ 48, (((-3 * q ^ 40 + 12 * q ^ 41) - 17 * q ^ 42) + 13 * q ^ 43) - 5 * q ^ 44, (((q ^ 80 - 8 * q ^ 81) + 10 * q ^ 82) - 5 * q ^ 83) + q ^ 84, Unknown(), 189 * q ^ 60, (((16 * q ^ 15 - 8 * q ^ 16) - 48 * q ^ 21) + 42 * q ^ 22 + 35 * q ^ 24) - 40 * q ^ 25, Unknown(), ((-9 * q ^ 60 + 27 * q ^ 61) - 21 * q ^ 62) + 6 * q ^ 63, Unknown(), Unknown(), ((9 * q ^ 60 - 27 * q ^ 62) + 72 * q ^ 63) - 27 * q ^ 64, Unknown(), (((-(q ^ 60) + 4 * q ^ 62) - 14 * q ^ 63) + 12 * q ^ 64) - q ^ 65, 3 * q ^ 63 - 3 * q ^ 64, (-24 * q ^ 15 + 90 * q ^ 21) - 75 * q ^ 24, (36 * q ^ 60 - 63 * q ^ 61) + 27 * q ^ 62, Unknown(), (((-3 * q ^ 60 + 12 * q ^ 61) - 17 * q ^ 62) + 13 * q ^ 63) - 5 * q ^ 64, 189 * q ^ 80, Unknown(), (51 * q ^ 80 - 96 * q ^ 81) + 42 * q ^ 82, (((-2 * q ^ 20 + 7 * q ^ 21) - 14 * q ^ 22) + 14 * q ^ 23) - 5 * q ^ 24, -99 * q ^ 80 + 90 * q ^ 81, (36 * q ^ 80 - 63 * q ^ 81) + 27 * q ^ 82, Unknown(), ((-9 * q ^ 80 + 27 * q ^ 81) - 21 * q ^ 82) + 6 * q ^ 83, 189 * q ^ 100, Unknown(), (51 * q ^ 100 - 96 * q ^ 101) + 42 * q ^ 102, -99 * q ^ 100 + 90 * q ^ 101, (36 * q ^ 100 - 63 * q ^ 101) + 27 * q ^ 102, Unknown(), ((-9 * q ^ 100 + 27 * q ^ 101) - 21 * q ^ 102) + 6 * q ^ 103]
                end)
        f66 = (q->begin
                    [210, -120 + 90q, (51 - 69q) + 21 * q ^ 2, (68 - 104q) + 38 * q ^ 2, ((-29 + 61q) - 43 * q ^ 2) + 8 * q ^ 3, ((-17 + 34q) - 18 * q ^ 2) + 3 * q ^ 3, (-12 + 15q) - 6 * q ^ 2, ((-37 + 93q) - 63 * q ^ 2) + 17 * q ^ 3, ((-3 - 6q) + 15 * q ^ 2) - 9 * q ^ 3, (((3 + 4q) - 10 * q ^ 2) + 12 * q ^ 3) - 4 * q ^ 4, (((13 - 32q) + 35 * q ^ 2) - 14 * q ^ 3) + q ^ 4, ((5 - 12q) + 10 * q ^ 2) - 3 * q ^ 3, (2 - 3q) + q ^ 2, (((-4 + 15q) - 20 * q ^ 2) + 12 * q ^ 3) - 3 * q ^ 4, (((9 - 28q) + 25 * q ^ 2) - 9 * q ^ 3) + q ^ 4, ((8 - 12q) + 11 * q ^ 2) - 2 * q ^ 3, (((15 - 50q) + 51 * q ^ 2) - 21 * q ^ 3) + 4 * q ^ 4, (((-2 + 10q) - 12 * q ^ 2) + 5 * q ^ 3) - q ^ 4, ((((2 - 10q) + 18 * q ^ 2) - 16 * q ^ 3) + 7 * q ^ 4) - q ^ 5, -1, Unknown(), (((1 - 9q) + 12 * q ^ 2) - 8 * q ^ 3) + 3 * q ^ 4, Unknown(), (((-4 + 14q) - 19 * q ^ 2) + 10 * q ^ 3) - 2 * q ^ 4, ((-1 + 4q) - 4 * q ^ 2) + 2 * q ^ 3, (-1 + 3q) - 2 * q ^ 2, ((12 - 45 * q ^ 2) + 72 * q ^ 3) - 18 * q ^ 4, 0, Unknown(), (((2 + 3q) - 16 * q ^ 2) + 13 * q ^ 3) - 3 * q ^ 4, 0, (((((21 - 30q) - 6 * q ^ 2) + 54 * q ^ 3) - 15 * q ^ 4) - 12 * q ^ 5) + 9 * q ^ 6, Unknown(), Unknown(), (((-8 + 4q + 24 * q ^ 2) - 61 * q ^ 3) + 44 * q ^ 4) - 6 * q ^ 5, ((-1 + 3 * q ^ 2) - 3 * q ^ 3) + q ^ 4, (((((-13 + 24q) - 10 * q ^ 2) - 32 * q ^ 3) + 32 * q ^ 4 + q ^ 5) - 9 * q ^ 6) + 4 * q ^ 7, ((((-1 + q) - 2 * q ^ 2) + 4 * q ^ 3) - 4 * q ^ 4) + 2 * q ^ 5, ((((-1 - q) + 10 * q ^ 2) - 14 * q ^ 3) + 8 * q ^ 4) - q ^ 5, ((-2 + 9 * q ^ 2) - 18 * q ^ 3) + 8 * q ^ 4, Unknown(), (((((-8 + 24q) - 27 * q ^ 2) - 3 * q ^ 3) + 14 * q ^ 4) - 6 * q ^ 6) + 3 * q ^ 7, Unknown(), Unknown(), (((((3 - 10q) + 15 * q ^ 2) - 4 * q ^ 3) - 9 * q ^ 4) + 7 * q ^ 5) - 2 * q ^ 6, ((1 - q ^ 2) + 3 * q ^ 3) - 3 * q ^ 4, ((5 * q ^ 90 - 12 * q ^ 91) + 10 * q ^ 92) - 3 * q ^ 93, ((5 * q ^ 18 - 12 * q ^ 19) + 10 * q ^ 20) - 3 * q ^ 21, ((((1 - q) - 5 * q ^ 2) + 14 * q ^ 3) - 13 * q ^ 4) + 3 * q ^ 5, Unknown(), Unknown(), ((((((4 - 16q) + 25 * q ^ 2) - 13 * q ^ 3) - 7 * q ^ 4) + 7 * q ^ 5 + 2 * q ^ 6) - 4 * q ^ 7) + q ^ 8, Unknown(), Unknown(), Unknown(), (((-2 * q ^ 18 + 10 * q ^ 19) - 12 * q ^ 20) + 5 * q ^ 21) - q ^ 22, Unknown(), Unknown(), ((((((3 - 8q) + 3 * q ^ 2 + 16 * q ^ 3) - 22 * q ^ 4) + 10 * q ^ 5) - 6 * q ^ 6) + 6 * q ^ 7) - 3 * q ^ 8, 0, Unknown(), Unknown(), 0, ((1 - 2 * q ^ 3) + 4 * q ^ 4) - 4 * q ^ 5, Unknown(), Unknown(), Unknown(), (((-2 * q ^ 36 + 10 * q ^ 37) - 12 * q ^ 38) + 5 * q ^ 39) - q ^ 40, Unknown(), Unknown(), (((-4 * q ^ 54 + 14 * q ^ 55) - 19 * q ^ 56) + 10 * q ^ 57) - 2 * q ^ 58, Unknown(), Unknown(), ((((2 - 3 * q ^ 2) + 18 * q ^ 5) - 17 * q ^ 6) + 6 * q ^ 7) - 3 * q ^ 8, 0, (((-4 * q ^ 90 + 15 * q ^ 91) - 20 * q ^ 92) + 12 * q ^ 93) - 3 * q ^ 94, (((-4 * q ^ 90 + 14 * q ^ 91) - 19 * q ^ 92) + 10 * q ^ 93) - 2 * q ^ 94, Unknown(), (-3 * q ^ 5 + 6 * q ^ 7) - 6 * q ^ 8, (((-4 * q ^ 18 + 15 * q ^ 19) - 20 * q ^ 20) + 12 * q ^ 21) - 3 * q ^ 22, Unknown(), (((9 * q ^ 36 - 28 * q ^ 37) + 25 * q ^ 38) - 9 * q ^ 39) + q ^ 40, 0, Unknown(), Unknown(), ((5 * q ^ 36 - 12 * q ^ 37) + 10 * q ^ 38) - 3 * q ^ 39, Unknown(), 210 * q ^ 18, (2 * q ^ 18 - 3 * q ^ 19) + q ^ 20, (68 * q ^ 18 - 104 * q ^ 19) + 38 * q ^ 20, Unknown(), ((-17 * q ^ 18 + 34 * q ^ 19) - 18 * q ^ 20) + 3 * q ^ 21, ((-37 * q ^ 18 + 93 * q ^ 19) - 63 * q ^ 20) + 17 * q ^ 21, (((13 * q ^ 18 - 32 * q ^ 19) + 35 * q ^ 20) - 14 * q ^ 21) + q ^ 22, Unknown(), ((8 * q ^ 18 - 12 * q ^ 19) + 11 * q ^ 20) - 2 * q ^ 21, (((15 * q ^ 18 - 50 * q ^ 19) + 51 * q ^ 20) - 21 * q ^ 21) + 4 * q ^ 22, ((((2 * q ^ 18 - 10 * q ^ 19) + 18 * q ^ 20) - 16 * q ^ 21) + 7 * q ^ 22) - q ^ 23, ((12 * q ^ 18 - 45 * q ^ 20) + 72 * q ^ 21) - 18 * q ^ 22, (((((21 * q ^ 18 - 30 * q ^ 19) - 6 * q ^ 20) + 54 * q ^ 21) - 15 * q ^ 22) - 12 * q ^ 23) + 9 * q ^ 24, ((-2 * q ^ 18 + 9 * q ^ 20) - 18 * q ^ 21) + 8 * q ^ 22, (((-8 * q ^ 18 + 4 * q ^ 19 + 24 * q ^ 20) - 61 * q ^ 21) + 44 * q ^ 22) - 6 * q ^ 23, (((((-13 * q ^ 18 + 24 * q ^ 19) - 10 * q ^ 20) - 32 * q ^ 21) + 32 * q ^ 22 + q ^ 23) - 9 * q ^ 24) + 4 * q ^ 25, Unknown(), ((((q ^ 18 - q ^ 19) - 5 * q ^ 20) + 14 * q ^ 21) - 13 * q ^ 22) + 3 * q ^ 23, ((q ^ 18 - q ^ 20) + 3 * q ^ 21) - 3 * q ^ 22, ((q ^ 18 - 2 * q ^ 21) + 4 * q ^ 22) - 4 * q ^ 23, -120 * q ^ 18 + 90 * q ^ 19, ((((2 * q ^ 18 - 3 * q ^ 20) + 18 * q ^ 23) - 17 * q ^ 24) + 6 * q ^ 25) - 3 * q ^ 26, (-12 * q ^ 18 + 15 * q ^ 19) - 6 * q ^ 20, (51 * q ^ 18 - 69 * q ^ 19) + 21 * q ^ 20, Unknown(), ((-29 * q ^ 18 + 61 * q ^ 19) - 43 * q ^ 20) + 8 * q ^ 21, (-3 * q ^ 23 + 6 * q ^ 25) - 6 * q ^ 26, Unknown(), Unknown(), ((5 * q ^ 54 - 12 * q ^ 55) + 10 * q ^ 56) - 3 * q ^ 57, Unknown(), 0, (((9 * q ^ 18 - 28 * q ^ 19) + 25 * q ^ 20) - 9 * q ^ 21) + q ^ 22, Unknown(), 210 * q ^ 36, Unknown(), (68 * q ^ 36 - 104 * q ^ 37) + 38 * q ^ 38, ((-17 * q ^ 36 + 34 * q ^ 37) - 18 * q ^ 38) + 3 * q ^ 39, ((-37 * q ^ 36 + 93 * q ^ 37) - 63 * q ^ 38) + 17 * q ^ 39, (((3 * q ^ 36 + 4 * q ^ 37) - 10 * q ^ 38) + 12 * q ^ 39) - 4 * q ^ 40, ((((2 * q ^ 36 - 10 * q ^ 37) + 18 * q ^ 38) - 16 * q ^ 39) + 7 * q ^ 40) - q ^ 41, Unknown(), ((12 * q ^ 36 - 45 * q ^ 38) + 72 * q ^ 39) - 18 * q ^ 40, (((-8 * q ^ 36 + 4 * q ^ 37 + 24 * q ^ 38) - 61 * q ^ 39) + 44 * q ^ 40) - 6 * q ^ 41, ((-2 * q ^ 36 + 9 * q ^ 38) - 18 * q ^ 39) + 8 * q ^ 40, ((q ^ 36 - q ^ 38) + 3 * q ^ 39) - 3 * q ^ 40, -120 * q ^ 36 + 90 * q ^ 37, (51 * q ^ 36 - 69 * q ^ 37) + 21 * q ^ 38, ((-29 * q ^ 36 + 61 * q ^ 37) - 43 * q ^ 38) + 8 * q ^ 39, (-3 * q ^ 41 + 6 * q ^ 43) - 6 * q ^ 44, (((-4 * q ^ 36 + 15 * q ^ 37) - 20 * q ^ 38) + 12 * q ^ 39) - 3 * q ^ 40, ((5 * q ^ 72 - 12 * q ^ 73) + 10 * q ^ 74) - 3 * q ^ 75, Unknown(), 210 * q ^ 54, (((-4 * q ^ 15 + 2 * q ^ 16 + 45 * q ^ 20) - 68 * q ^ 21) + 28 * q ^ 22 + 7 * q ^ 24) - 8 * q ^ 25, Unknown(), ((-17 * q ^ 54 + 34 * q ^ 55) - 18 * q ^ 56) + 3 * q ^ 57, Unknown(), Unknown(), ((12 * q ^ 54 - 45 * q ^ 56) + 72 * q ^ 57) - 18 * q ^ 58, Unknown(), ((-2 * q ^ 54 + 9 * q ^ 56) - 18 * q ^ 57) + 8 * q ^ 58, ((q ^ 54 - q ^ 56) + 3 * q ^ 57) - 3 * q ^ 58, ((6 * q ^ 15 - 81 * q ^ 20) + 60 * q ^ 21) - 15 * q ^ 24, (51 * q ^ 54 - 69 * q ^ 55) + 21 * q ^ 56, Unknown(), (((-4 * q ^ 54 + 15 * q ^ 55) - 20 * q ^ 56) + 12 * q ^ 57) - 3 * q ^ 58, 210 * q ^ 72, Unknown(), (68 * q ^ 72 - 104 * q ^ 73) + 38 * q ^ 74, (((-4 * q ^ 18 + 14 * q ^ 19) - 19 * q ^ 20) + 10 * q ^ 21) - 2 * q ^ 22, -120 * q ^ 72 + 90 * q ^ 73, (51 * q ^ 72 - 69 * q ^ 73) + 21 * q ^ 74, Unknown(), ((-17 * q ^ 72 + 34 * q ^ 73) - 18 * q ^ 74) + 3 * q ^ 75, 210 * q ^ 90, Unknown(), (68 * q ^ 90 - 104 * q ^ 91) + 38 * q ^ 92, -120 * q ^ 90 + 90 * q ^ 91, (51 * q ^ 90 - 69 * q ^ 91) + 21 * q ^ 92, Unknown(), ((-17 * q ^ 90 + 34 * q ^ 91) - 18 * q ^ 92) + 3 * q ^ 93]
                end)
        f68 = function (q, j)
                return [210, -80 + 130q, (15 - 65q) + 65 * q ^ 2, (28 - 104q) + 78 * q ^ 2, ((-4 + 35q) - 69 * q ^ 2) + 37 * q ^ 3, ((-1 + 14q) - 38 * q ^ 2) + 27 * q ^ 3, (-3 * j ^ 2 - 6j) * q + (20 * j ^ 2 + 18j) * q ^ 2 + 21 * q ^ 3, ((-9 + 57q) - 99 * q ^ 2) + 45 * q ^ 3, 6 + (18 * j ^ 2 + 20j) * q + (-6 * j ^ 2 - 3j) * q ^ 2 + 15 * q ^ 3, ((-2 + 12q) - 12 * q ^ 2) + (4 * j ^ 2 + 5j) * q ^ 3 + 7 * q ^ 4, ((-8q + 34 * q ^ 2) - 42 * q ^ 3) + 16 * q ^ 4, ((-q + 10 * q ^ 2) - 18 * q ^ 3) + 9 * q ^ 4, (-(j ^ 2) - 2j) * q ^ 2 + (7 * j ^ 2 + 6j) * q ^ 3 + 5 * q ^ 4, ((-1 + (-9 * j ^ 2 - 10j) * q) - 22 * q ^ 2) + (-15 * j ^ 2 - 12j) * q ^ 3, ((-5q + 25 * q ^ 2) - 36 * q ^ 3) + 14 * q ^ 4, 2 * j * q + (-11 * j ^ 2 - 12j) * q ^ 2 + (22 * j ^ 2 + 20j) * q ^ 3 + 11 * q ^ 4, (((1 - 14q) + 51 * q ^ 2) - 59 * q ^ 3) + 20 * q ^ 4, ((-4 * q ^ 2 + 15 * q ^ 3) - 15 * q ^ 4) + 4 * q ^ 5, (-4q + 15 * q ^ 2 + (19 * j ^ 2 + 18j) * q ^ 3 + (-8 * j ^ 2 - 7j) * q ^ 4) - q ^ 5, q ^ 3 + (2 * j ^ 2 + j) * q ^ 4 + q ^ 5, Unknown(), (((-q + 8 * q ^ 2) - 14 * q ^ 3) + (-10 * j ^ 2 - 9j) * q ^ 4) - 2 * q ^ 5, Unknown(), ((-8 * q ^ 2 + 22 * q ^ 3) - 20 * q ^ 4) + 5 * q ^ 5, ((-(q ^ 2) + 6 * q ^ 3) - 7 * q ^ 4) + 2 * q ^ 5, j * q ^ 2 + 4 * q ^ 3 + (7 * j ^ 2 + 6j) * q ^ 4 + 2 * q ^ 5, (18 * j ^ 2 + 9j) * q ^ 2 + 48 * q ^ 3 + (54 * j ^ 2 + 60j) * q ^ 4 + 21 * q ^ 6, 0, Unknown(), -(q ^ 2) + 10 * q ^ 3 + (18 * j ^ 2 + 19j) * q ^ 4 + (-6 * j ^ 2 - 7j) * q ^ 5 + 5 * q ^ 6, 0, 6 + (6 * j ^ 2 + 12j) * q + (20 * j ^ 2 + 18j) * q ^ 2 + 36 * q ^ 3 + (3 * j ^ 2 + 6j) * q ^ 4 + (40 * j ^ 2 + 36j) * q ^ 5 + 27 * q ^ 6, Unknown(), Unknown(), ((-6 * j ^ 2 * q ^ 2 + (28 * j ^ 2 + 25j) * q ^ 3 + 56 * q ^ 4 + (30 * j ^ 2 + 36j) * q ^ 5) - 10 * q ^ 6) + 11 * q ^ 7, (-3 * j ^ 2 - 4j) * q ^ 4 + (5 * j ^ 2 + 6j) * q ^ 5 + (-(j ^ 2) - 2j) * q ^ 6 + q ^ 7, ((-2 + (-4 * j ^ 2 - 8j) * q) - 2 * j ^ 2 * q ^ 2) + (24 * j ^ 2 + 22j) * q ^ 3 + (-24 * j ^ 2 - 26j) * q ^ 4 + (-13 * j ^ 2 - 12j) * q ^ 5 + (36 * j ^ 2 + 32j) * q ^ 6 + 15 * q ^ 7, ((-(q ^ 2) + (-5 * j ^ 2 - 4j) * q ^ 3 + (5 * j ^ 2 + 4j) * q ^ 4 + (-(j ^ 2) + j) * q ^ 5) - j * q ^ 6) + q ^ 7, ((-4 * q ^ 3 + 15 * q ^ 4 + (13 * j ^ 2 + 14j) * q ^ 5) - j * q ^ 6) + 2 * q ^ 7, (5 * j ^ 2 + 3j) * q ^ 3 + (-14 * j ^ 2 - 16j) * q ^ 4 + (16 * j ^ 2 + 18j) * q ^ 5 + 5 * q ^ 7, Unknown(), -1 + 2q + (-7 * j ^ 2 - 5j) * q ^ 2 + (12 * j ^ 2 + 13j) * q ^ 3 + (12 * j ^ 2 + 7j) * q ^ 4 + (-38 * j ^ 2 - 32j) * q ^ 5 + (32 * j ^ 2 + 30j) * q ^ 6 + 10 * q ^ 7, Unknown(), Unknown(), (j ^ 2 + 2j) * q ^ 2 + (-6 * j ^ 2 - 7j) * q ^ 3 + (j ^ 2 + 3j) * q ^ 4 + (16 * j ^ 2 + 13j) * q ^ 5 + (-25 * j ^ 2 - 23j) * q ^ 6 + (16 * j ^ 2 + 14j) * q ^ 7 + 4 * q ^ 8, -(q ^ 4) + (-5 * j ^ 2 - 6j) * q ^ 5 + (3 * j ^ 2 + 5j) * q ^ 6 + q ^ 8, ((-j * q ^ 131 + 10 * j * q ^ 132) - 18 * j * q ^ 133) + 9 * j * q ^ 134, ((-(j ^ 2) * q ^ 27 + 10 * j ^ 2 * q ^ 28) - 18 * j ^ 2 * q ^ 29) + 9 * j ^ 2 * q ^ 30, (((-(j ^ 2) * q ^ 3 - 9 * q ^ 4) + (-17 * j ^ 2 - 18j) * q ^ 5 + (8 * j ^ 2 + 10j) * q ^ 6) - 3 * q ^ 7) + 2 * q ^ 8, Unknown(), Unknown(), (-q - 2 * q ^ 2) + (-8 * j ^ 2 - 9j) * q ^ 3 + 3 * j * q ^ 4 + (23 * j ^ 2 + 19j) * q ^ 5 + (-34 * j ^ 2 - 32j) * q ^ 6 + (23 * j ^ 2 + 21j) * q ^ 7 + 5 * q ^ 8, Unknown(), Unknown(), Unknown(), ((-4 * j ^ 2 * q ^ 28 + 15 * j ^ 2 * q ^ 29) - 15 * j ^ 2 * q ^ 30) + 4 * j ^ 2 * q ^ 31, Unknown(), Unknown(), ((-(q ^ 2) - 2 * j * q ^ 3) - 2 * j ^ 2 * q ^ 4) + (-10 * j ^ 2 - 8j) * q ^ 5 + (26 * j ^ 2 + 20j) * q ^ 6 + (-14 * j ^ 2 - 10j) * q ^ 7 + (-11 * j ^ 2 - 10j) * q ^ 8 + (14 * j ^ 2 + 12j) * q ^ 9 + 4 * q ^ 10, 0, Unknown(), Unknown(), 0, ((-2 * q ^ 5 + 5 * q ^ 6) - 2 * q ^ 7) + (j ^ 2 + 2j) * q ^ 8 + q ^ 10, Unknown(), Unknown(), Unknown(), ((-4 * j * q ^ 54 + 15 * j * q ^ 55) - 15 * j * q ^ 56) + 4 * j * q ^ 57, Unknown(), Unknown(), ((-8 * q ^ 80 + 22 * q ^ 81) - 20 * q ^ 82) + 5 * q ^ 83, Unknown(), Unknown(), -(q ^ 4) + (-8 * j ^ 2 - 6j) * q ^ 5 + (18 * j ^ 2 + 14j) * q ^ 6 + (-24 * j ^ 2 - 22j) * q ^ 7 + (7 * j ^ 2 + 6j) * q ^ 8 + (4 * j ^ 2 + 6j) * q ^ 9 + (7 * j ^ 2 + 6j) * q ^ 10 + 5 * q ^ 12, 0, ((-j * q ^ 130 + (-(j ^ 2) + 9j) * q ^ 131) - 22 * j * q ^ 132) + (3 * j ^ 2 + 15j) * q ^ 133, ((-8 * j * q ^ 132 + 22 * j * q ^ 133) - 20 * j * q ^ 134) + 5 * j * q ^ 135, Unknown(), (((3 * j ^ 2 - 6j) * q ^ 9 + 3 * q ^ 10) - 3 * q ^ 11) - q ^ 12, ((-(j ^ 2) * q ^ 26 + (10 * j ^ 2 + j) * q ^ 27) - 22 * j ^ 2 * q ^ 28) + (12 * j ^ 2 - 3j) * q ^ 29, Unknown(), ((-5 * j * q ^ 53 + 25 * j * q ^ 54) - 36 * j * q ^ 55) + 14 * j * q ^ 56, -j * q ^ 56, Unknown(), Unknown(), ((-j * q ^ 53 + 10 * j * q ^ 54) - 18 * j * q ^ 55) + 9 * j * q ^ 56, Unknown(), 210 * j ^ 2 * q ^ 26, (2 * j ^ 2 + j) * q ^ 28 + (-6 * j ^ 2 + j) * q ^ 29 + 5 * j ^ 2 * q ^ 30, (28 * j ^ 2 * q ^ 26 - 104 * j ^ 2 * q ^ 27) + 78 * j ^ 2 * q ^ 28, Unknown(), ((-(j ^ 2) * q ^ 26 + 14 * j ^ 2 * q ^ 27) - 38 * j ^ 2 * q ^ 28) + 27 * j ^ 2 * q ^ 29, ((-9 * j ^ 2 * q ^ 26 + 57 * j ^ 2 * q ^ 27) - 99 * j ^ 2 * q ^ 28) + 45 * j ^ 2 * q ^ 29, ((-8 * j ^ 2 * q ^ 27 + 34 * j ^ 2 * q ^ 28) - 42 * j ^ 2 * q ^ 29) + 16 * j ^ 2 * q ^ 30, Unknown(), 2 * q ^ 27 + (12 * j ^ 2 + j) * q ^ 28 + (-20 * j ^ 2 + 2j) * q ^ 29 + 11 * j ^ 2 * q ^ 30, (((j ^ 2 * q ^ 26 - 14 * j ^ 2 * q ^ 27) + 51 * j ^ 2 * q ^ 28) - 59 * j ^ 2 * q ^ 29) + 20 * j ^ 2 * q ^ 30, (-4 * j ^ 2 * q ^ 27 + 15 * j ^ 2 * q ^ 28 + (-18 * j ^ 2 + j) * q ^ 29 + (7 * j ^ 2 - j) * q ^ 30) - j ^ 2 * q ^ 31, (-9 * j ^ 2 + 9j) * q ^ 28 + 48 * j ^ 2 * q ^ 29 + (-60 * j ^ 2 - 6j) * q ^ 30 + 21 * j ^ 2 * q ^ 32, 6 * j ^ 2 * q ^ 26 + (-12 * j ^ 2 - 6j) * q ^ 27 + (-18 * j ^ 2 + 2j) * q ^ 28 + 36 * j ^ 2 * q ^ 29 + (-6 * j ^ 2 - 3j) * q ^ 30 + (-36 * j ^ 2 + 4j) * q ^ 31 + 27 * j ^ 2 * q ^ 32, (-3 * j ^ 2 + 2j) * q ^ 29 + (16 * j ^ 2 + 2j) * q ^ 30 + (-18 * j ^ 2 - 2j) * q ^ 31 + 5 * j ^ 2 * q ^ 33, ((-6 * j * q ^ 28 + (-25 * j ^ 2 + 3j) * q ^ 29 + 56 * j ^ 2 * q ^ 30 + (-36 * j ^ 2 - 6j) * q ^ 31) - 10 * j ^ 2 * q ^ 32) + 11 * j ^ 2 * q ^ 33, ((-2 * j ^ 2 * q ^ 26 + (8 * j ^ 2 + 4j) * q ^ 27) - 2 * j * q ^ 28) + (-22 * j ^ 2 + 2j) * q ^ 29 + (26 * j ^ 2 + 2j) * q ^ 30 + (12 * j ^ 2 - j) * q ^ 31 + (-32 * j ^ 2 + 4j) * q ^ 32 + 15 * j ^ 2 * q ^ 33, Unknown(), (((-j * q ^ 29 - 9 * j ^ 2 * q ^ 30) + (18 * j ^ 2 + j) * q ^ 31 + (-10 * j ^ 2 - 2j) * q ^ 32) - 3 * j ^ 2 * q ^ 33) + 2 * j ^ 2 * q ^ 34, -(j ^ 2) * q ^ 30 + (6 * j ^ 2 + j) * q ^ 31 + (-5 * j ^ 2 - 2j) * q ^ 32 + j ^ 2 * q ^ 34, ((-2 * j ^ 2 * q ^ 31 + 5 * j ^ 2 * q ^ 32) - 2 * j ^ 2 * q ^ 33) + (-2 * j ^ 2 - j) * q ^ 34 + j ^ 2 * q ^ 36, -80 * j ^ 2 * q ^ 26 + 130 * j ^ 2 * q ^ 27, -(j ^ 2) * q ^ 30 + (6 * j ^ 2 - 2j) * q ^ 31 + (-14 * j ^ 2 + 4j) * q ^ 32 + (22 * j ^ 2 - 2j) * q ^ 33 + (-6 * j ^ 2 + j) * q ^ 34 + (-6 * j ^ 2 - 2j) * q ^ 35 + (-6 * j ^ 2 + j) * q ^ 36 + 5 * j ^ 2 * q ^ 38, (6 * j ^ 2 + 3j) * q ^ 27 + (-18 * j ^ 2 + 2j) * q ^ 28 + 21 * j ^ 2 * q ^ 29, (15 * j ^ 2 * q ^ 26 - 65 * j ^ 2 * q ^ 27) + 65 * j ^ 2 * q ^ 28, Unknown(), ((-4 * j ^ 2 * q ^ 26 + 35 * j ^ 2 * q ^ 27) - 69 * j ^ 2 * q ^ 28) + 37 * j ^ 2 * q ^ 29, (((6 * j ^ 2 + 9j) * q ^ 35 + 3 * j ^ 2 * q ^ 36) - 3 * j ^ 2 * q ^ 37) - j ^ 2 * q ^ 38, Unknown(), Unknown(), ((-(q ^ 79) + 10 * q ^ 80) - 18 * q ^ 81) + 9 * q ^ 82, Unknown(), 0, ((-5 * j ^ 2 * q ^ 27 + 25 * j ^ 2 * q ^ 28) - 36 * j ^ 2 * q ^ 29) + 14 * j ^ 2 * q ^ 30, Unknown(), 210 * j * q ^ 52, Unknown(), (28 * j * q ^ 52 - 104 * j * q ^ 53) + 78 * j * q ^ 54, ((-j * q ^ 52 + 14 * j * q ^ 53) - 38 * j * q ^ 54) + 27 * j * q ^ 55, ((-9 * j * q ^ 52 + 57 * j * q ^ 53) - 99 * j * q ^ 54) + 45 * j * q ^ 55, ((-2 * j * q ^ 52 + 12 * j * q ^ 53) - 12 * j * q ^ 54) + (j ^ 2 - 4j) * q ^ 55 + 7 * j * q ^ 56, (-4 * j * q ^ 53 + 15 * j * q ^ 54 + (-(j ^ 2) - 19j) * q ^ 55 + (j ^ 2 + 8j) * q ^ 56) - j * q ^ 57, Unknown(), (-9 * j ^ 2 - 18j) * q ^ 54 + 48 * j * q ^ 55 + (6 * j ^ 2 - 54j) * q ^ 56 + 21 * j * q ^ 58, ((-6 * q ^ 54 + (-3 * j ^ 2 - 28j) * q ^ 55 + 56 * j * q ^ 56 + (6 * j ^ 2 - 30j) * q ^ 57) - 10 * j * q ^ 58) + 11 * j * q ^ 59, (-2 * j ^ 2 - 5j) * q ^ 55 + (-2 * j ^ 2 + 14j) * q ^ 56 + (2 * j ^ 2 - 16j) * q ^ 57 + 5 * j * q ^ 59, -j * q ^ 56 + (-(j ^ 2) + 5j) * q ^ 57 + (2 * j ^ 2 - 3j) * q ^ 58 + j * q ^ 60, -80 * j * q ^ 52 + 130 * j * q ^ 53, (15 * j * q ^ 52 - 65 * j * q ^ 53) + 65 * j * q ^ 54, ((-4 * j * q ^ 52 + 35 * j * q ^ 53) - 69 * j * q ^ 54) + 37 * j * q ^ 55, (((-9 * j ^ 2 - 3j) * q ^ 61 + 3 * j * q ^ 62) - 3 * j * q ^ 63) - j * q ^ 64, ((-j * q ^ 52 + (-(j ^ 2) + 9j) * q ^ 53) - 22 * j * q ^ 54) + (3 * j ^ 2 + 15j) * q ^ 55, ((-(j ^ 2) * q ^ 105 + 10 * j ^ 2 * q ^ 106) - 18 * j ^ 2 * q ^ 107) + 9 * j ^ 2 * q ^ 108, Unknown(), 210 * q ^ 78, ((((((-36 * q ^ 25 + 45 * q ^ 26 + 12 * q ^ 27) - 18 * q ^ 28) + 2 * q ^ 30) - 4 * q ^ 31) - 4 * q ^ 33) + 11 * q ^ 34 + 2 * q ^ 36) - 8 * q ^ 37, Unknown(), ((-(q ^ 78) + 14 * q ^ 79) - 38 * q ^ 80) + 27 * q ^ 81, Unknown(), Unknown(), (18 * j ^ 2 + 9j) * q ^ 80 + 48 * q ^ 81 + (54 * j ^ 2 + 60j) * q ^ 82 + 21 * q ^ 84, Unknown(), (5 * j ^ 2 + 3j) * q ^ 81 + (-14 * j ^ 2 - 16j) * q ^ 82 + (16 * j ^ 2 + 18j) * q ^ 83 + 5 * q ^ 85, -(q ^ 82) + (-5 * j ^ 2 - 6j) * q ^ 83 + (3 * j ^ 2 + 5j) * q ^ 84 + q ^ 86, (((81 * q ^ 25 - 30 * q ^ 27) - 6 * q ^ 30) + 15 * q ^ 33) - 10 * q ^ 36, (15 * q ^ 78 - 65 * q ^ 79) + 65 * q ^ 80, Unknown(), ((-(q ^ 78) + (-9 * j ^ 2 - 10j) * q ^ 79) - 22 * q ^ 80) + (-15 * j ^ 2 - 12j) * q ^ 81, 210 * j ^ 2 * q ^ 104, Unknown(), (28 * j ^ 2 * q ^ 104 - 104 * j ^ 2 * q ^ 105) + 78 * j ^ 2 * q ^ 106, ((-8 * j ^ 2 * q ^ 28 + 22 * j ^ 2 * q ^ 29) - 20 * j ^ 2 * q ^ 30) + 5 * j ^ 2 * q ^ 31, -80 * j ^ 2 * q ^ 104 + 130 * j ^ 2 * q ^ 105, (15 * j ^ 2 * q ^ 104 - 65 * j ^ 2 * q ^ 105) + 65 * j ^ 2 * q ^ 106, Unknown(), ((-(j ^ 2) * q ^ 104 + 14 * j ^ 2 * q ^ 105) - 38 * j ^ 2 * q ^ 106) + 27 * j ^ 2 * q ^ 107, 210 * j * q ^ 130, Unknown(), (28 * j * q ^ 130 - 104 * j * q ^ 131) + 78 * j * q ^ 132, -80 * j * q ^ 130 + 130 * j * q ^ 131, (15 * j * q ^ 130 - 65 * j * q ^ 131) + 65 * j * q ^ 132, Unknown(), ((-j * q ^ 130 + 14 * j * q ^ 131) - 38 * j * q ^ 132) + 27 * j * q ^ 133]
            end
        f72 = function (q, j)
                return [210, -95 + 115q, (24 - 71q) + 44 * q ^ 2, (44 - 102q) + 64 * q ^ 2, ((-12 + 44q) - 58 * q ^ 2) + 25 * q ^ 3, ((-3 + 21q) - 30 * q ^ 2) + 14 * q ^ 3, -3 + (-3 * j ^ 2 - 9j) * q + (15 * j ^ 2 + 17j) * q ^ 2 + 3 * q ^ 3, ((-21 + 69q) - 84 * q ^ 2) + 36 * q ^ 3, (6 + (17 * j ^ 2 + 15j) * q + (-9 * j ^ 2 - 3j) * q ^ 2) - 6 * q ^ 3, (-2 + (-12 * j ^ 2 - 10j) * q + (14 * j ^ 2 + 10j) * q ^ 2 + (-7 * j ^ 2 - 5j) * q ^ 3) - 3 * q ^ 4, (((4 - 16q) + 32 * q ^ 2) - 30 * q ^ 3) + 10 * q ^ 4, ((-3q + 9 * q ^ 2) - 10 * q ^ 3) + 4 * q ^ 4, j * q + (j ^ 2 - 2j) * q ^ 2 + (j ^ 2 + 2j) * q ^ 3, (-2 + (-13 * j ^ 2 - 12j) * q + (24 * j ^ 2 + 19j) * q ^ 2 + (-19 * j ^ 2 - 14j) * q ^ 3) - 7 * q ^ 4, (((2 - 11q) + 24 * q ^ 2) - 23 * q ^ 3) + 8 * q ^ 4, ((2 + (2 * j ^ 2 + 6j) * q + (-8 * j ^ 2 - 12j) * q ^ 2) - 10 * q ^ 3) + 2 * q ^ 4, (((6 - 27q) + 48 * q ^ 2) - 44 * q ^ 3) + 14 * q ^ 4, (((2q - 5 * q ^ 2) + 9 * q ^ 3) - 8 * q ^ 4) + 2 * q ^ 5, (1 + (7 * j ^ 2 + 6j) * q + (-19 * j ^ 2 - 15j) * q ^ 2 + (21 * j ^ 2 + 17j) * q ^ 3 + (-13 * j ^ 2 - 11j) * q ^ 4) - 4 * q ^ 5, -(j ^ 2) * q ^ 2, Unknown(), ((3 * j ^ 2 + 2j) * q + (-10 * j ^ 2 - 8j) * q ^ 2 + (13 * j ^ 2 + 10j) * q ^ 3 + (-9 * j ^ 2 - 8j) * q ^ 4) - 3 * q ^ 5, Unknown(), ((((-1 + 4q) - 10 * q ^ 2) + 15 * q ^ 3) - 12 * q ^ 4) + 3 * q ^ 5, ((-(q ^ 2) + 3 * q ^ 3) - 3 * q ^ 4) + q ^ 5, ((-j * q + (-(j ^ 2) + j) * q ^ 2) - 2 * j * q ^ 3) - q ^ 4, 3 + (27 * j ^ 2 + 9j) * q ^ 2 + 72 * q ^ 3 + (51 * j ^ 2 + 45j) * q ^ 4 + 3 * q ^ 6, 0, Unknown(), -(j ^ 2) * q + (5 * j ^ 2 + 4j) * q ^ 2 + 15 * q ^ 3 + (13 * j ^ 2 + 12j) * q ^ 4 + (-2 * j ^ 2 - j) * q ^ 5, 0, 12 + (6 * j ^ 2 + 18j) * q + (15 * j ^ 2 + 17j) * q ^ 2 + 54 * q ^ 3 + (3 * j ^ 2 + 9j) * q ^ 4 + (30 * j ^ 2 + 34j) * q ^ 5 + 12 * q ^ 6, Unknown(), Unknown(), (((-2 + q + (-15 * j ^ 2 - 3j) * q ^ 2 + (44 * j ^ 2 + 38j) * q ^ 3 + (-64 * j ^ 2 - 58j) * q ^ 4) - 27 * q ^ 5) - q ^ 6) + 2 * q ^ 7, (j ^ 2 + 2j) * q ^ 3 + (-(j ^ 2) - 3j) * q ^ 4 + (j ^ 2 + 2j) * q ^ 5, (((((-6 + (-8 * j ^ 2 - 16j) * q) - 2 * j ^ 2 * q ^ 2) - 33 * q ^ 3) + (-31 * j ^ 2 - 35j) * q ^ 4 + (-10 * j ^ 2 - 12j) * q ^ 5) - 23 * q ^ 6) + 7 * q ^ 7, ((2 * j ^ 2 + j) * q ^ 2 + (-5 * j ^ 2 - 2j) * q ^ 3 + (7 * j ^ 2 + 3j) * q ^ 4 + (-5 * j ^ 2 - 3j) * q ^ 5) - 2 * q ^ 6, ((j ^ 2 * q + (-3 * j ^ 2 - 2j) * q ^ 2) - 9 * q ^ 3) + (-14 * j ^ 2 - 13j) * q ^ 4 + (8 * j ^ 2 + 7j) * q ^ 5 + q ^ 6, -2 * j ^ 2 * q ^ 2 + (10 * j ^ 2 + 8j) * q ^ 3 + (-16 * j ^ 2 - 18j) * q ^ 4 + (8 * j ^ 2 + 6j) * q ^ 5, Unknown(), -2 + (-4 * j ^ 2 - 6j) * q + (-3 * j ^ 2 - 5j) * q ^ 2 + (12 * j ^ 2 + 24j) * q ^ 3 + (7 * j ^ 2 - 9j) * q ^ 4 + (-35 * j ^ 2 - 25j) * q ^ 5 + (24 * j ^ 2 + 26j) * q ^ 6 + 7 * q ^ 7, Unknown(), Unknown(), (((2 * j ^ 2 + 6j) * q ^ 2 + (-9 * j ^ 2 - 19j) * q ^ 3 + (9 * j ^ 2 + 21j) * q ^ 4 + (10 * j ^ 2 - j) * q ^ 5 + (-20 * j ^ 2 - 17j) * q ^ 6) - 12 * q ^ 7) + 3 * q ^ 8, (j ^ 2 + 3j) * q ^ 4 + (-2 * j ^ 2 - 3j) * q ^ 5 + j * q ^ 6, ((3 * j ^ 2 * q ^ 116 - 9 * j ^ 2 * q ^ 117) + 10 * j ^ 2 * q ^ 118) - 4 * j ^ 2 * q ^ 119, ((3 * j * q ^ 24 - 9 * j * q ^ 25) + 10 * j * q ^ 26) - 4 * j * q ^ 27, (((2 * j ^ 2 * q ^ 2 + (-5 * j ^ 2 - 4j) * q ^ 3) - 12 * q ^ 4) + (-13 * j ^ 2 - 12j) * q ^ 5) - 4 * q ^ 6, Unknown(), Unknown(), ((((1 + (3 * j ^ 2 + 5j) * q) - 2 * j ^ 2 * q ^ 2) + (-6 * j ^ 2 - 15j) * q ^ 3 + (4 * j ^ 2 + 18j) * q ^ 4 + (18 * j ^ 2 + 7j) * q ^ 5 + (-29 * j ^ 2 - 27j) * q ^ 6) - 17 * q ^ 7) + 4 * q ^ 8, Unknown(), Unknown(), Unknown(), (((-2 * j * q ^ 24 + 5 * j * q ^ 25) - 9 * j * q ^ 26) + 8 * j * q ^ 27) - 2 * j * q ^ 28, Unknown(), Unknown(), (((2 * j ^ 2 + 3j) * q ^ 2 + (-6 * j ^ 2 - 10j) * q ^ 3 + (10 * j ^ 2 + 14j) * q ^ 4 + (-22 * j ^ 2 - 18j) * q ^ 5 + (28 * j ^ 2 + 21j) * q ^ 6 + (-14 * j ^ 2 - 12j) * q ^ 7 + (-6 * j ^ 2 - 3j) * q ^ 8) - 8 * q ^ 9) + 3 * q ^ 10, 0, Unknown(), Unknown(), 0, (-2 * j ^ 2 - j) * q ^ 4 + (4 * j ^ 2 + 2j) * q ^ 5 + 4 * q ^ 6 + 2 * j ^ 2 * q ^ 7, Unknown(), Unknown(), Unknown(), (((2 * j ^ 2 * q ^ 47 - 5 * j ^ 2 * q ^ 48) + 9 * j ^ 2 * q ^ 49) - 8 * j ^ 2 * q ^ 50) + 2 * j ^ 2 * q ^ 51, Unknown(), Unknown(), ((((q ^ 69 - 4 * q ^ 70) + 10 * q ^ 71) - 15 * q ^ 72) + 12 * q ^ 73) - 3 * q ^ 74, Unknown(), Unknown(), ((j * q ^ 2 + 2 * j ^ 2 * q ^ 3 + (-4 * j ^ 2 - 3j) * q ^ 4) - 6 * j ^ 2 * q ^ 5) + (23 * j ^ 2 + 11j) * q ^ 6 + (-24 * j ^ 2 - 18j) * q ^ 7 + (12 * j ^ 2 + 13j) * q ^ 8 + (-4 * j ^ 2 - 6j) * q ^ 9 + (j ^ 2 + 2j) * q ^ 10, 0, 2 * j ^ 2 * q ^ 115 + (-12 * j ^ 2 + j) * q ^ 116 + (19 * j ^ 2 - 5j) * q ^ 117 + (-14 * j ^ 2 + 5j) * q ^ 118 + 7 * j ^ 2 * q ^ 119, ((((j ^ 2 * q ^ 115 - 4 * j ^ 2 * q ^ 116) + 10 * j ^ 2 * q ^ 117) - 15 * j ^ 2 * q ^ 118) + 12 * j ^ 2 * q ^ 119) - 3 * j ^ 2 * q ^ 120, Unknown(), (-9 * j ^ 2 * q ^ 7 - 12 * q ^ 8) + (-7 * j ^ 2 - 4j) * q ^ 9, 2 * j * q ^ 23 + (-(j ^ 2) - 13j) * q ^ 24 + (5 * j ^ 2 + 24j) * q ^ 25 + (-5 * j ^ 2 - 19j) * q ^ 26 + 7 * j * q ^ 27, Unknown(), (((2 * j ^ 2 * q ^ 46 - 11 * j ^ 2 * q ^ 47) + 24 * j ^ 2 * q ^ 48) - 23 * j ^ 2 * q ^ 49) + 8 * j ^ 2 * q ^ 50, j * q ^ 49, Unknown(), Unknown(), ((-3 * j ^ 2 * q ^ 47 + 9 * j ^ 2 * q ^ 48) - 10 * j ^ 2 * q ^ 49) + 4 * j ^ 2 * q ^ 50, Unknown(), -210 * j * q ^ 23, -(j ^ 2) * q ^ 24 + (3 * j ^ 2 + j) * q ^ 25 + (-(j ^ 2) + j) * q ^ 26, (-44 * j * q ^ 23 + 102 * j * q ^ 24) - 64 * j * q ^ 25, Unknown(), ((3 * j * q ^ 23 - 21 * j * q ^ 24) + 30 * j * q ^ 25) - 14 * j * q ^ 26, ((21 * j * q ^ 23 - 69 * j * q ^ 24) + 84 * j * q ^ 25) - 36 * j * q ^ 26, (((-4 * j * q ^ 23 + 16 * j * q ^ 24) - 32 * j * q ^ 25) + 30 * j * q ^ 26) - 10 * j * q ^ 27, Unknown(), (-2 * j * q ^ 23 + (-4 * j ^ 2 + 2j) * q ^ 24 + (4 * j ^ 2 - 8j) * q ^ 25 + 10 * j * q ^ 26) - 2 * j * q ^ 27, (((-6 * j * q ^ 23 + 27 * j * q ^ 24) - 48 * j * q ^ 25) + 44 * j * q ^ 26) - 14 * j * q ^ 27, -j * q ^ 23 + (j ^ 2 + 7j) * q ^ 24 + (-4 * j ^ 2 - 19j) * q ^ 25 + (4 * j ^ 2 + 21j) * q ^ 26 + (-2 * j ^ 2 - 13j) * q ^ 27 + 4 * j * q ^ 28, (((-3 * j * q ^ 23 + (18 * j ^ 2 + 27j) * q ^ 25) - 72 * j * q ^ 26) + (6 * j ^ 2 + 51j) * q ^ 27) - 3 * j * q ^ 29, (((-12 * j * q ^ 23 + (-12 * j ^ 2 + 6j) * q ^ 24 + (-2 * j ^ 2 + 15j) * q ^ 25) - 54 * j * q ^ 26) + (-6 * j ^ 2 + 3j) * q ^ 27 + (-4 * j ^ 2 + 30j) * q ^ 28) - 12 * j * q ^ 29, 2 * q ^ 25 + (2 * j ^ 2 + 10j) * q ^ 26 + (2 * j ^ 2 - 16j) * q ^ 27 + (2 * j ^ 2 + 8j) * q ^ 28, ((2 * j * q ^ 23 - j * q ^ 24) + (-12 * j ^ 2 - 15j) * q ^ 25 + (6 * j ^ 2 + 44j) * q ^ 26 + (-6 * j ^ 2 - 64j) * q ^ 27 + 27 * j * q ^ 28 + j * q ^ 29) - 2 * j * q ^ 30, (6 * j * q ^ 23 + (8 * j ^ 2 - 8j) * q ^ 24 + 2 * q ^ 25 + 33 * j * q ^ 26 + (4 * j ^ 2 - 31j) * q ^ 27 + (2 * j ^ 2 - 10j) * q ^ 28 + 23 * j * q ^ 29) - 7 * j * q ^ 30, Unknown(), -2 * q ^ 25 + (-(j ^ 2) - 5j) * q ^ 26 + 12 * j * q ^ 27 + (-(j ^ 2) - 13j) * q ^ 28 + 4 * j * q ^ 29, ((-2 * j ^ 2 + j) * q ^ 27 + (j ^ 2 - 2j) * q ^ 28) - j ^ 2 * q ^ 29, (((-(j ^ 2) - 2j) * q ^ 27 + (2 * j ^ 2 + 4j) * q ^ 28) - 4 * j * q ^ 29) - 2 * q ^ 30, 95 * j * q ^ 23 - 115 * j * q ^ 24, (-(j ^ 2) * q ^ 25 - 2 * q ^ 26) + (-(j ^ 2) - 4j) * q ^ 27 + 6 * q ^ 28 + (12 * j ^ 2 + 23j) * q ^ 29 + (-6 * j ^ 2 - 24j) * q ^ 30 + (-(j ^ 2) + 12j) * q ^ 31 + (2 * j ^ 2 - 4j) * q ^ 32 + (-(j ^ 2) + j) * q ^ 33, (3 * j * q ^ 23 + (6 * j ^ 2 - 3j) * q ^ 24 + (-2 * j ^ 2 + 15j) * q ^ 25) - 3 * j * q ^ 26, (-24 * j * q ^ 23 + 71 * j * q ^ 24) - 44 * j * q ^ 25, Unknown(), ((12 * j * q ^ 23 - 44 * j * q ^ 24) + 58 * j * q ^ 25) - 25 * j * q ^ 26, 9 * q ^ 30 + 12 * j * q ^ 31 + (-3 * j ^ 2 - 7j) * q ^ 32, Unknown(), Unknown(), ((3 * q ^ 70 - 9 * q ^ 71) + 10 * q ^ 72) - 4 * q ^ 73, Unknown(), 0, (((-2 * j * q ^ 23 + 11 * j * q ^ 24) - 24 * j * q ^ 25) + 23 * j * q ^ 26) - 8 * j * q ^ 27, Unknown(), 210 * j ^ 2 * q ^ 46, Unknown(), (44 * j ^ 2 * q ^ 46 - 102 * j ^ 2 * q ^ 47) + 64 * j ^ 2 * q ^ 48, ((-3 * j ^ 2 * q ^ 46 + 21 * j ^ 2 * q ^ 47) - 30 * j ^ 2 * q ^ 48) + 14 * j ^ 2 * q ^ 49, ((-21 * j ^ 2 * q ^ 46 + 69 * j ^ 2 * q ^ 47) - 84 * j ^ 2 * q ^ 48) + 36 * j ^ 2 * q ^ 49, (-2 * j ^ 2 * q ^ 46 + (10 * j ^ 2 - 2j) * q ^ 47 + (-10 * j ^ 2 + 4j) * q ^ 48 + (5 * j ^ 2 - 2j) * q ^ 49) - 3 * j ^ 2 * q ^ 50, (j ^ 2 * q ^ 46 + (-6 * j ^ 2 + j) * q ^ 47 + (15 * j ^ 2 - 4j) * q ^ 48 + (-17 * j ^ 2 + 4j) * q ^ 49 + (11 * j ^ 2 - 2j) * q ^ 50) - 4 * j ^ 2 * q ^ 51, Unknown(), 3 * j ^ 2 * q ^ 46 + (-9 * j ^ 2 + 18j) * q ^ 48 + 72 * j ^ 2 * q ^ 49 + (-45 * j ^ 2 + 6j) * q ^ 50 + 3 * j ^ 2 * q ^ 52, (((-2 * j ^ 2 * q ^ 46 + j ^ 2 * q ^ 47 + (3 * j ^ 2 - 12j) * q ^ 48 + (-38 * j ^ 2 + 6j) * q ^ 49 + (58 * j ^ 2 - 6j) * q ^ 50) - 27 * j ^ 2 * q ^ 51) - j ^ 2 * q ^ 52) + 2 * j ^ 2 * q ^ 53, -2 * j * q ^ 48 + (-8 * j ^ 2 + 2j) * q ^ 49 + (18 * j ^ 2 + 2j) * q ^ 50 + (-6 * j ^ 2 + 2j) * q ^ 51, (-3 * j ^ 2 - 2j) * q ^ 50 + (3 * j ^ 2 + j) * q ^ 51 + q ^ 52, -95 * j ^ 2 * q ^ 46 + 115 * j ^ 2 * q ^ 47, (24 * j ^ 2 * q ^ 46 - 71 * j ^ 2 * q ^ 47) + 44 * j ^ 2 * q ^ 48, ((-12 * j ^ 2 * q ^ 46 + 44 * j ^ 2 * q ^ 47) - 58 * j ^ 2 * q ^ 48) + 25 * j ^ 2 * q ^ 49, (-9 * j * q ^ 53 - 12 * j ^ 2 * q ^ 54) + (4 * j ^ 2 - 3j) * q ^ 55, (-2 * j ^ 2 * q ^ 46 + (12 * j ^ 2 - j) * q ^ 47 + (-19 * j ^ 2 + 5j) * q ^ 48 + (14 * j ^ 2 - 5j) * q ^ 49) - 7 * j ^ 2 * q ^ 50, ((-3 * j * q ^ 93 + 9 * j * q ^ 94) - 10 * j * q ^ 95) + 4 * j * q ^ 96, Unknown(), -210 * q ^ 69, (((-24 * q ^ 21 + 21 * q ^ 22 + 35 * q ^ 24) - 40 * q ^ 25) - 4 * q ^ 27) + 6 * q ^ 28, Unknown(), ((3 * q ^ 69 - 21 * q ^ 70) + 30 * q ^ 71) - 14 * q ^ 72, Unknown(), Unknown(), (((-3 * q ^ 69 + (-27 * j ^ 2 - 9j) * q ^ 71) - 72 * q ^ 72) + (-51 * j ^ 2 - 45j) * q ^ 73) - 3 * q ^ 75, Unknown(), 2 * j ^ 2 * q ^ 71 + (-10 * j ^ 2 - 8j) * q ^ 72 + (16 * j ^ 2 + 18j) * q ^ 73 + (-8 * j ^ 2 - 6j) * q ^ 74, ((-(j ^ 2) - 3j) * q ^ 73 + (2 * j ^ 2 + 3j) * q ^ 74) - j * q ^ 75, (45 * q ^ 21 - 75 * q ^ 24) + 10 * q ^ 27, (-24 * q ^ 69 + 71 * q ^ 70) - 44 * q ^ 71, Unknown(), 2 * q ^ 69 + (13 * j ^ 2 + 12j) * q ^ 70 + (-24 * j ^ 2 - 19j) * q ^ 71 + (19 * j ^ 2 + 14j) * q ^ 72 + 7 * q ^ 73, 210 * j * q ^ 92, Unknown(), (44 * j * q ^ 92 - 102 * j * q ^ 93) + 64 * j * q ^ 94, ((((j * q ^ 23 - 4 * j * q ^ 24) + 10 * j * q ^ 25) - 15 * j * q ^ 26) + 12 * j * q ^ 27) - 3 * j * q ^ 28, -95 * j * q ^ 92 + 115 * j * q ^ 93, (24 * j * q ^ 92 - 71 * j * q ^ 93) + 44 * j * q ^ 94, Unknown(), ((-3 * j * q ^ 92 + 21 * j * q ^ 93) - 30 * j * q ^ 94) + 14 * j * q ^ 95, -210 * j ^ 2 * q ^ 115, Unknown(), (-44 * j ^ 2 * q ^ 115 + 102 * j ^ 2 * q ^ 116) - 64 * j ^ 2 * q ^ 117, 95 * j ^ 2 * q ^ 115 - 115 * j ^ 2 * q ^ 116, (-24 * j ^ 2 * q ^ 115 + 71 * j ^ 2 * q ^ 116) - 44 * j ^ 2 * q ^ 117, Unknown(), ((3 * j ^ 2 * q ^ 115 - 21 * j ^ 2 * q ^ 116) + 30 * j ^ 2 * q ^ 117) - 14 * j ^ 2 * q ^ 118]
            end
        f76 = function (q, j)
                return [280, -160 + 120q, (70 - 90q) + 30 * q ^ 2, (88 - 144q) + 48 * q ^ 2, ((-36 + 86q) - 58 * q ^ 2) + 10 * q ^ 3, ((-24 + 46q) - 26 * q ^ 2) + 4 * q ^ 3, -18 + (-18 * j ^ 2 - 24j) * q + (12 * j ^ 2 + 6j) * q ^ 2 + 2 * q ^ 3, ((-46 + 126q) - 90 * q ^ 2) + 18 * q ^ 3, (-8 + (6 * j ^ 2 + 12j) * q + (-24 * j ^ 2 - 18j) * q ^ 2) - 8 * q ^ 3, (((2 + (2 * j ^ 2 - 2j) * q) - 14 * q ^ 2) + (-16 * j ^ 2 - 12j) * q ^ 3) - 4 * q ^ 4, (((13 - 46q) + 51 * q ^ 2) - 18 * q ^ 3) + q ^ 4, ((6 - 18q) + 16 * q ^ 2) - 4 * q ^ 3, 3 + (4 * j ^ 2 + 7j) * q + (-3 * j ^ 2 - 2j) * q ^ 2 + j ^ 2 * q ^ 3, (-4 + (-16 * j ^ 2 - 21j) * q + (28 * j ^ 2 + 27j) * q ^ 2 + (-17 * j ^ 2 - 14j) * q ^ 3) - 3 * q ^ 4, (((11 - 38q) + 38 * q ^ 2) - 12 * q ^ 3) + q ^ 4, 8 + (20 * j ^ 2 + 22j) * q + 16 * q ^ 2 + (6 * j ^ 2 + 4j) * q ^ 3, (((17 - 67q) + 74 * q ^ 2) - 29 * q ^ 3) + 3 * q ^ 4, (((-2 + 13q) - 19 * q ^ 2) + 9 * q ^ 3) - q ^ 4, (3 + (10 * j ^ 2 + 13j) * q + (-22 * j ^ 2 - 25j) * q ^ 2 + (23 * j ^ 2 + 20j) * q ^ 3 + (-9 * j ^ 2 - 7j) * q ^ 4) - q ^ 5, q - q ^ 2, Unknown(), 3 + (9 * j ^ 2 + 12j) * q + (-15 * j ^ 2 - 17j) * q ^ 2 + (13 * j ^ 2 + 11j) * q ^ 3 + (-4 * j ^ 2 - 3j) * q ^ 4, Unknown(), (((-3 + 18q) - 29 * q ^ 2) + 16 * q ^ 3) - 2 * q ^ 4, ((-1 + 5q) - 8 * q ^ 2) + 3 * q ^ 3, -1 + (-4 * j ^ 2 - 5j) * q + (4 * j ^ 2 + 5j) * q ^ 2 + (-2 * j ^ 2 - j) * q ^ 3, 18 + (72 * j ^ 2 + 54j) * q ^ 2 + 80 * q ^ 3 + (18 * j ^ 2 + 36j) * q ^ 4 + 2 * q ^ 6, 0, Unknown(), (3 + (-7 * j ^ 2 - 4j) * q + (21 * j ^ 2 + 18j) * q ^ 2 + 16 * q ^ 3 + (4 * j ^ 2 + 5j) * q ^ 4) - j * q ^ 5, 0, 28 + (36 * j ^ 2 + 48j) * q + (12 * j ^ 2 + 6j) * q ^ 2 + 60 * q ^ 3 + (18 * j ^ 2 + 24j) * q ^ 4 + (24 * j ^ 2 + 12j) * q ^ 5 + 12 * q ^ 6, Unknown(), Unknown(), (-8 + 10q + (-36 * j ^ 2 - 30j) * q ^ 2 + (84 * j ^ 2 + 72j) * q ^ 3 + (-44 * j ^ 2 - 56j) * q ^ 4 + (6 * j ^ 2 + 12j) * q ^ 5) - 2 * q ^ 6, -q + (-4 * j ^ 2 - 5j) * q ^ 2 + (4 * j ^ 2 + 5j) * q ^ 3 + (-2 * j ^ 2 - j) * q ^ 4, -14 + (-34 * j ^ 2 - 38j) * q + (8 * j ^ 2 + 20j) * q ^ 2 + (40 * j ^ 2 + 38j) * q ^ 3 + (-34 * j ^ 2 - 36j) * q ^ 4 + (-8 * j ^ 2 + 4j) * q ^ 5 + (16 * j ^ 2 + 12j) * q ^ 6 + 4 * q ^ 7, (j ^ 2 + 2j) * q ^ 2 + (-5 * j ^ 2 - 6j) * q ^ 3 + (6 * j ^ 2 + 5j) * q ^ 4 + 2 * q ^ 5, -1 + j ^ 2 * q + (-14 * j ^ 2 - 11j) * q ^ 2 + (21 * j ^ 2 + 19j) * q ^ 3 + (-9 * j ^ 2 - 10j) * q ^ 4 + (j ^ 2 + 2j) * q ^ 5, -3 + (-17 * j ^ 2 - 11j) * q ^ 2 + (23 * j ^ 2 + 19j) * q ^ 3 + (-8 * j ^ 2 - 12j) * q ^ 4 + 2 * j * q ^ 5, Unknown(), -10 + (-28 * j ^ 2 - 34j) * q + (30 * j ^ 2 + 40j) * q ^ 2 + (-2 * j ^ 2 - 8j) * q ^ 3 + (-11 * j ^ 2 - 13j) * q ^ 4 + (-3 * j ^ 2 + 3j) * q ^ 5 + (8 * j ^ 2 + 6j) * q ^ 6 + 3 * q ^ 7, Unknown(), Unknown(), (3 - 12q) + (-15 * j ^ 2 - 22j) * q ^ 2 + (6 * j ^ 2 + 13j) * q ^ 3 + (4 * j ^ 2 + 3j) * q ^ 4 + (-4 * j ^ 2 - 8j) * q ^ 5 + (2 * j ^ 2 + 4j) * q ^ 6, (2 * j ^ 2 + 3j) * q ^ 2 + (-6 * j ^ 2 - 5j) * q ^ 3 + (3 * j ^ 2 + 4j) * q ^ 4, ((6 * q ^ 90 - 18 * q ^ 91) + 16 * q ^ 92) - 4 * q ^ 93, ((6 * q ^ 18 - 18 * q ^ 19) + 16 * q ^ 20) - 4 * q ^ 21, (((1 - 2q) + (7 * j ^ 2 + 5j) * q ^ 2 + (-23 * j ^ 2 - 17j) * q ^ 3) - 16 * q ^ 4) + (-2 * j ^ 2 - 6j) * q ^ 5, Unknown(), Unknown(), (((5 + (19 * j ^ 2 + 21j) * q + (-28 * j ^ 2 - 38j) * q ^ 2 + (15 * j ^ 2 + 25j) * q ^ 3 + (3 * j ^ 2 + j) * q ^ 4 + (-2 * j ^ 2 - 8j) * q ^ 5) - 6 * j ^ 2 * q ^ 6) - 4 * q ^ 7) + q ^ 8, Unknown(), Unknown(), Unknown(), (((-2 * q ^ 18 + 13 * q ^ 19) - 19 * q ^ 20) + 9 * q ^ 21) - q ^ 22, Unknown(), Unknown(), (3 - 10q) + (-4 * j ^ 2 - 5j) * q ^ 2 + 18 * q ^ 3 + (25 * j ^ 2 + 27j) * q ^ 4 + 10 * q ^ 5 + (5 * j ^ 2 + 3j) * q ^ 6 + 6 * q ^ 7 + (3 * j ^ 2 + 4j) * q ^ 8, 0, Unknown(), Unknown(), 0, ((-(q ^ 2) + 2 * j ^ 2 * q ^ 3 + (-7 * j ^ 2 - 3j) * q ^ 4) - 6 * q ^ 5) - 2 * j * q ^ 6, Unknown(), Unknown(), Unknown(), (((-2 * q ^ 36 + 13 * q ^ 37) - 19 * q ^ 38) + 9 * q ^ 39) - q ^ 40, Unknown(), Unknown(), (((-3 * q ^ 54 + 18 * q ^ 55) - 29 * q ^ 56) + 16 * q ^ 57) - 2 * q ^ 58, Unknown(), Unknown(), 3 + (4 * j ^ 2 + 7j) * q ^ 2 + (8 * j ^ 2 + 2j) * q ^ 3 + (2 * j ^ 2 + 5j) * q ^ 4 + (-26 * j ^ 2 - 28j) * q ^ 5 + (24 * j ^ 2 + 28j) * q ^ 6 + (-12 * j ^ 2 - 14j) * q ^ 7 + j ^ 2 * q ^ 8 + 2 * j * q ^ 9 + j ^ 2 * q ^ 10, 0, (-4 * q ^ 90 + (-16 * j ^ 2 - 21j) * q ^ 91 + (28 * j ^ 2 + 27j) * q ^ 92 + (-17 * j ^ 2 - 14j) * q ^ 93) - 3 * q ^ 94, (((-3 * q ^ 90 + 18 * q ^ 91) - 29 * q ^ 92) + 16 * q ^ 93) - 2 * q ^ 94, Unknown(), ((((-2 * j ^ 2 + j) * q ^ 3 - 3 * q ^ 5) + (6 * j ^ 2 - 3j) * q ^ 6) - 9 * j ^ 2 * q ^ 7) + 9 * j * q ^ 8, (-4 * q ^ 18 + (-16 * j ^ 2 - 21j) * q ^ 19 + (28 * j ^ 2 + 27j) * q ^ 20 + (-17 * j ^ 2 - 14j) * q ^ 21) - 3 * q ^ 22, Unknown(), (((11 * q ^ 36 - 38 * q ^ 37) + 38 * q ^ 38) - 12 * q ^ 39) + q ^ 40, -j * q ^ 37, Unknown(), Unknown(), ((6 * q ^ 36 - 18 * q ^ 37) + 16 * q ^ 38) - 4 * q ^ 39, Unknown(), 280 * q ^ 18, 3 * q ^ 18 + (4 * j ^ 2 + 7j) * q ^ 19 + (-3 * j ^ 2 - 2j) * q ^ 20 + j ^ 2 * q ^ 21, (88 * q ^ 18 - 144 * q ^ 19) + 48 * q ^ 20, Unknown(), ((-24 * q ^ 18 + 46 * q ^ 19) - 26 * q ^ 20) + 4 * q ^ 21, ((-46 * q ^ 18 + 126 * q ^ 19) - 90 * q ^ 20) + 18 * q ^ 21, (((13 * q ^ 18 - 46 * q ^ 19) + 51 * q ^ 20) - 18 * q ^ 21) + q ^ 22, Unknown(), 8 * q ^ 18 + (20 * j ^ 2 + 22j) * q ^ 19 + 16 * q ^ 20 + (6 * j ^ 2 + 4j) * q ^ 21, (((17 * q ^ 18 - 67 * q ^ 19) + 74 * q ^ 20) - 29 * q ^ 21) + 3 * q ^ 22, (3 * q ^ 18 + (10 * j ^ 2 + 13j) * q ^ 19 + (-22 * j ^ 2 - 25j) * q ^ 20 + (23 * j ^ 2 + 20j) * q ^ 21 + (-9 * j ^ 2 - 7j) * q ^ 22) - q ^ 23, 18 * q ^ 18 + (72 * j ^ 2 + 54j) * q ^ 20 + 80 * q ^ 21 + (18 * j ^ 2 + 36j) * q ^ 22 + 2 * q ^ 24, 28 * q ^ 18 + (36 * j ^ 2 + 48j) * q ^ 19 + (12 * j ^ 2 + 6j) * q ^ 20 + 60 * q ^ 21 + (18 * j ^ 2 + 24j) * q ^ 22 + (24 * j ^ 2 + 12j) * q ^ 23 + 12 * q ^ 24, -3 * q ^ 18 + (-17 * j ^ 2 - 11j) * q ^ 20 + (23 * j ^ 2 + 19j) * q ^ 21 + (-8 * j ^ 2 - 12j) * q ^ 22 + 2 * j * q ^ 23, (-8 * q ^ 18 + 10 * q ^ 19 + (-36 * j ^ 2 - 30j) * q ^ 20 + (84 * j ^ 2 + 72j) * q ^ 21 + (-44 * j ^ 2 - 56j) * q ^ 22 + (6 * j ^ 2 + 12j) * q ^ 23) - 2 * q ^ 24, -14 * q ^ 18 + (-34 * j ^ 2 - 38j) * q ^ 19 + (8 * j ^ 2 + 20j) * q ^ 20 + (40 * j ^ 2 + 38j) * q ^ 21 + (-34 * j ^ 2 - 36j) * q ^ 22 + (-8 * j ^ 2 + 4j) * q ^ 23 + (16 * j ^ 2 + 12j) * q ^ 24 + 4 * q ^ 25, Unknown(), (((q ^ 18 - 2 * q ^ 19) + (7 * j ^ 2 + 5j) * q ^ 20 + (-23 * j ^ 2 - 17j) * q ^ 21) - 16 * q ^ 22) + (-2 * j ^ 2 - 6j) * q ^ 23, (2 * j ^ 2 + 3j) * q ^ 20 + (-6 * j ^ 2 - 5j) * q ^ 21 + (3 * j ^ 2 + 4j) * q ^ 22, ((-(q ^ 20) + 2 * j ^ 2 * q ^ 21 + (-7 * j ^ 2 - 3j) * q ^ 22) - 6 * q ^ 23) - 2 * j * q ^ 24, -160 * q ^ 18 + 120 * q ^ 19, 3 * q ^ 18 + (4 * j ^ 2 + 7j) * q ^ 20 + (8 * j ^ 2 + 2j) * q ^ 21 + (2 * j ^ 2 + 5j) * q ^ 22 + (-26 * j ^ 2 - 28j) * q ^ 23 + (24 * j ^ 2 + 28j) * q ^ 24 + (-12 * j ^ 2 - 14j) * q ^ 25 + j ^ 2 * q ^ 26 + 2 * j * q ^ 27 + j ^ 2 * q ^ 28, -18 * q ^ 18 + (-18 * j ^ 2 - 24j) * q ^ 19 + (12 * j ^ 2 + 6j) * q ^ 20 + 2 * q ^ 21, (70 * q ^ 18 - 90 * q ^ 19) + 30 * q ^ 20, Unknown(), ((-36 * q ^ 18 + 86 * q ^ 19) - 58 * q ^ 20) + 10 * q ^ 21, ((((-2 * j ^ 2 + j) * q ^ 21 - 3 * q ^ 23) + (6 * j ^ 2 - 3j) * q ^ 24) - 9 * j ^ 2 * q ^ 25) + 9 * j * q ^ 26, Unknown(), Unknown(), ((6 * q ^ 54 - 18 * q ^ 55) + 16 * q ^ 56) - 4 * q ^ 57, Unknown(), 0, (((11 * q ^ 18 - 38 * q ^ 19) + 38 * q ^ 20) - 12 * q ^ 21) + q ^ 22, Unknown(), 280 * q ^ 36, Unknown(), (88 * q ^ 36 - 144 * q ^ 37) + 48 * q ^ 38, ((-24 * q ^ 36 + 46 * q ^ 37) - 26 * q ^ 38) + 4 * q ^ 39, ((-46 * q ^ 36 + 126 * q ^ 37) - 90 * q ^ 38) + 18 * q ^ 39, (((2 * q ^ 36 + (2 * j ^ 2 - 2j) * q ^ 37) - 14 * q ^ 38) + (-16 * j ^ 2 - 12j) * q ^ 39) - 4 * q ^ 40, (3 * q ^ 36 + (10 * j ^ 2 + 13j) * q ^ 37 + (-22 * j ^ 2 - 25j) * q ^ 38 + (23 * j ^ 2 + 20j) * q ^ 39 + (-9 * j ^ 2 - 7j) * q ^ 40) - q ^ 41, Unknown(), 18 * q ^ 36 + (72 * j ^ 2 + 54j) * q ^ 38 + 80 * q ^ 39 + (18 * j ^ 2 + 36j) * q ^ 40 + 2 * q ^ 42, (-8 * q ^ 36 + 10 * q ^ 37 + (-36 * j ^ 2 - 30j) * q ^ 38 + (84 * j ^ 2 + 72j) * q ^ 39 + (-44 * j ^ 2 - 56j) * q ^ 40 + (6 * j ^ 2 + 12j) * q ^ 41) - 2 * q ^ 42, -3 * q ^ 36 + (-17 * j ^ 2 - 11j) * q ^ 38 + (23 * j ^ 2 + 19j) * q ^ 39 + (-8 * j ^ 2 - 12j) * q ^ 40 + 2 * j * q ^ 41, (2 * j ^ 2 + 3j) * q ^ 38 + (-6 * j ^ 2 - 5j) * q ^ 39 + (3 * j ^ 2 + 4j) * q ^ 40, -160 * q ^ 36 + 120 * q ^ 37, (70 * q ^ 36 - 90 * q ^ 37) + 30 * q ^ 38, ((-36 * q ^ 36 + 86 * q ^ 37) - 58 * q ^ 38) + 10 * q ^ 39, ((((-2 * j ^ 2 + j) * q ^ 39 - 3 * q ^ 41) + (6 * j ^ 2 - 3j) * q ^ 42) - 9 * j ^ 2 * q ^ 43) + 9 * j * q ^ 44, (-4 * q ^ 36 + (-16 * j ^ 2 - 21j) * q ^ 37 + (28 * j ^ 2 + 27j) * q ^ 38 + (-17 * j ^ 2 - 14j) * q ^ 39) - 3 * q ^ 40, ((6 * q ^ 72 - 18 * q ^ 73) + 16 * q ^ 74) - 4 * q ^ 75, Unknown(), 280 * q ^ 54, (((((((-4 * q ^ 9 + q ^ 10) - 4 * q ^ 15) + 2 * q ^ 16) - 18 * q ^ 18) + 12 * q ^ 19 + 45 * q ^ 20) - 60 * q ^ 21) + 21 * q ^ 22 + 21 * q ^ 24) - 24 * q ^ 25, Unknown(), ((-24 * q ^ 54 + 46 * q ^ 55) - 26 * q ^ 56) + 4 * q ^ 57, Unknown(), Unknown(), 18 * q ^ 54 + (72 * j ^ 2 + 54j) * q ^ 56 + 80 * q ^ 57 + (18 * j ^ 2 + 36j) * q ^ 58 + 2 * q ^ 60, Unknown(), -3 * q ^ 54 + (-17 * j ^ 2 - 11j) * q ^ 56 + (23 * j ^ 2 + 19j) * q ^ 57 + (-8 * j ^ 2 - 12j) * q ^ 58 + 2 * j * q ^ 59, (2 * j ^ 2 + 3j) * q ^ 56 + (-6 * j ^ 2 - 5j) * q ^ 57 + (3 * j ^ 2 + 4j) * q ^ 58, (((5 * q ^ 9 + 6 * q ^ 15 + 30 * q ^ 18) - 81 * q ^ 20) + 45 * q ^ 21) - 45 * q ^ 24, (70 * q ^ 54 - 90 * q ^ 55) + 30 * q ^ 56, Unknown(), (-4 * q ^ 54 + (-16 * j ^ 2 - 21j) * q ^ 55 + (28 * j ^ 2 + 27j) * q ^ 56 + (-17 * j ^ 2 - 14j) * q ^ 57) - 3 * q ^ 58, 280 * q ^ 72, Unknown(), (88 * q ^ 72 - 144 * q ^ 73) + 48 * q ^ 74, (((-3 * q ^ 18 + 18 * q ^ 19) - 29 * q ^ 20) + 16 * q ^ 21) - 2 * q ^ 22, -160 * q ^ 72 + 120 * q ^ 73, (70 * q ^ 72 - 90 * q ^ 73) + 30 * q ^ 74, Unknown(), ((-24 * q ^ 72 + 46 * q ^ 73) - 26 * q ^ 74) + 4 * q ^ 75, 280 * q ^ 90, Unknown(), (88 * q ^ 90 - 144 * q ^ 91) + 48 * q ^ 92, -160 * q ^ 90 + 120 * q ^ 91, (70 * q ^ 90 - 90 * q ^ 91) + 30 * q ^ 92, Unknown(), ((-24 * q ^ 90 + 46 * q ^ 91) - 26 * q ^ 92) + 4 * q ^ 93]
            end
        f80 = (q->begin
                    [315, -195 + 120q, (96 - 99q) + 21 * q ^ 2, (119 - 152q) + 44 * q ^ 2, ((-57 + 101q) - 51 * q ^ 2) + 7 * q ^ 3, ((-40 + 56q) - 20 * q ^ 2) + q ^ 3, (-27 + 30q) - 6 * q ^ 2, ((-72 + 141q) - 87 * q ^ 2) + 15 * q ^ 3, ((-18 - 6q) + 30 * q ^ 2) - 9 * q ^ 3, (((9 - 5q) - 20 * q ^ 2) + 18 * q ^ 3) - 3 * q ^ 4, (((26 - 62q) + 47 * q ^ 2) - 12 * q ^ 3) + q ^ 4, ((14 - 26q) + 13 * q ^ 2) - q ^ 3, (6 - 9q) + 3 * q ^ 2, (((-2 + 22q) - 33 * q ^ 2) + 14 * q ^ 3) - q ^ 4, ((23 - 51q) + 35 * q ^ 2) - 8 * q ^ 3, ((15 - 30q) + 16 * q ^ 2) - 2 * q ^ 3, (((34 - 84q) + 73 * q ^ 2) - 23 * q ^ 3) + 2 * q ^ 4, ((-8 + 21q) - 19 * q ^ 2) + 6 * q ^ 3, (((2 - 14q) + 28 * q ^ 2) - 22 * q ^ 3) + 6 * q ^ 4, (-1 + 2q) - q ^ 2, Unknown(), (((4 - 15q) + 20 * q ^ 2) - 10 * q ^ 3) + q ^ 4, Unknown(), (((-10 + 29q) - 29 * q ^ 2) + 11 * q ^ 3) - q ^ 4, ((-4 + 10q) - 7 * q ^ 2) + q ^ 3, ((-3 + 8q) - 6 * q ^ 2) + q ^ 3, ((27 - 90 * q ^ 2) + 72 * q ^ 3) - 18 * q ^ 4, 0, Unknown(), (((6 + 9q) - 28 * q ^ 2) + 13 * q ^ 3) - q ^ 4, 0, (((((36 - 60q) - 6 * q ^ 2) + 54 * q ^ 3) - 30 * q ^ 4) - 12 * q ^ 5) + 9 * q ^ 6, Unknown(), Unknown(), (((-15 + 12q + 54 * q ^ 2) - 84 * q ^ 3) + 36 * q ^ 4) - 6 * q ^ 5, (((-1 - 2q) + 8 * q ^ 2) - 6 * q ^ 3) + q ^ 4, ((((((-21 + 51q) - 20 * q ^ 2) - 38 * q ^ 3) + 36 * q ^ 4) - 4 * q ^ 5) - 10 * q ^ 6) + 3 * q ^ 7, (-1 + 6 * q ^ 3) - 5 * q ^ 4, (((-3 - 2q) + 21 * q ^ 2) - 19 * q ^ 3) + 6 * q ^ 4, ((-6 + 26 * q ^ 2) - 21 * q ^ 3) + 4 * q ^ 4, Unknown(), (((((-14 + 50q) - 57 * q ^ 2) + 13 * q ^ 3 + 25 * q ^ 4) - 13 * q ^ 5) - 2 * q ^ 6) + q ^ 7, Unknown(), Unknown(), (((((6 - 26q) + 39 * q ^ 2) - 15 * q ^ 3) - 19 * q ^ 4) + 21 * q ^ 5) - 6 * q ^ 6, ((1 - 6 * q ^ 2) + 8 * q ^ 3) - 3 * q ^ 4, ((14 * q ^ 80 - 26 * q ^ 81) + 13 * q ^ 82) - q ^ 83, ((14 * q ^ 16 - 26 * q ^ 17) + 13 * q ^ 18) - q ^ 19, ((((3 - 3q) - 15 * q ^ 2) + 24 * q ^ 3) - 11 * q ^ 4) + q ^ 5, Unknown(), Unknown(), ((((((8 - 36q) + 54 * q ^ 2) - 29 * q ^ 3) - 9 * q ^ 4) + 16 * q ^ 5) - 4 * q ^ 6) - q ^ 7, Unknown(), Unknown(), Unknown(), ((-8 * q ^ 16 + 21 * q ^ 17) - 19 * q ^ 18) + 6 * q ^ 19, Unknown(), Unknown(), ((((((6 - 22q) + 19 * q ^ 2 + 20 * q ^ 3) - 42 * q ^ 4) + 22 * q ^ 5) - 4 * q ^ 6) + 4 * q ^ 7) - q ^ 8, 0, Unknown(), Unknown(), 0, ((1 - 2 * q ^ 2) - 4 * q ^ 3) + 7 * q ^ 4, Unknown(), Unknown(), Unknown(), ((-8 * q ^ 32 + 21 * q ^ 33) - 19 * q ^ 34) + 6 * q ^ 35, Unknown(), Unknown(), (((-10 * q ^ 48 + 29 * q ^ 49) - 29 * q ^ 50) + 11 * q ^ 51) - q ^ 52, Unknown(), Unknown(), ((((((6 - 9 * q ^ 2) - 2 * q ^ 3) - 16 * q ^ 4) + 34 * q ^ 5) - 25 * q ^ 6) + 4 * q ^ 7) - q ^ 8, 0, (((-2 * q ^ 80 + 22 * q ^ 81) - 33 * q ^ 82) + 14 * q ^ 83) - q ^ 84, (((-10 * q ^ 80 + 29 * q ^ 81) - 29 * q ^ 82) + 11 * q ^ 83) - q ^ 84, Unknown(), ((q ^ 3 + 6 * q ^ 4) - 3 * q ^ 5) - 7 * q ^ 6, (((-2 * q ^ 16 + 22 * q ^ 17) - 33 * q ^ 18) + 14 * q ^ 19) - q ^ 20, Unknown(), ((23 * q ^ 32 - 51 * q ^ 33) + 35 * q ^ 34) - 8 * q ^ 35, q ^ 33 - q ^ 34, Unknown(), Unknown(), ((14 * q ^ 32 - 26 * q ^ 33) + 13 * q ^ 34) - q ^ 35, Unknown(), 315 * q ^ 16, (6 * q ^ 16 - 9 * q ^ 17) + 3 * q ^ 18, (119 * q ^ 16 - 152 * q ^ 17) + 44 * q ^ 18, Unknown(), ((-40 * q ^ 16 + 56 * q ^ 17) - 20 * q ^ 18) + q ^ 19, ((-72 * q ^ 16 + 141 * q ^ 17) - 87 * q ^ 18) + 15 * q ^ 19, (((26 * q ^ 16 - 62 * q ^ 17) + 47 * q ^ 18) - 12 * q ^ 19) + q ^ 20, Unknown(), ((15 * q ^ 16 - 30 * q ^ 17) + 16 * q ^ 18) - 2 * q ^ 19, (((34 * q ^ 16 - 84 * q ^ 17) + 73 * q ^ 18) - 23 * q ^ 19) + 2 * q ^ 20, (((2 * q ^ 16 - 14 * q ^ 17) + 28 * q ^ 18) - 22 * q ^ 19) + 6 * q ^ 20, ((27 * q ^ 16 - 90 * q ^ 18) + 72 * q ^ 19) - 18 * q ^ 20, (((((36 * q ^ 16 - 60 * q ^ 17) - 6 * q ^ 18) + 54 * q ^ 19) - 30 * q ^ 20) - 12 * q ^ 21) + 9 * q ^ 22, ((-6 * q ^ 16 + 26 * q ^ 18) - 21 * q ^ 19) + 4 * q ^ 20, (((-15 * q ^ 16 + 12 * q ^ 17 + 54 * q ^ 18) - 84 * q ^ 19) + 36 * q ^ 20) - 6 * q ^ 21, ((((((-21 * q ^ 16 + 51 * q ^ 17) - 20 * q ^ 18) - 38 * q ^ 19) + 36 * q ^ 20) - 4 * q ^ 21) - 10 * q ^ 22) + 3 * q ^ 23, Unknown(), ((((3 * q ^ 16 - 3 * q ^ 17) - 15 * q ^ 18) + 24 * q ^ 19) - 11 * q ^ 20) + q ^ 21, ((q ^ 16 - 6 * q ^ 18) + 8 * q ^ 19) - 3 * q ^ 20, ((q ^ 16 - 2 * q ^ 18) - 4 * q ^ 19) + 7 * q ^ 20, -195 * q ^ 16 + 120 * q ^ 17, ((((((6 * q ^ 16 - 9 * q ^ 18) - 2 * q ^ 19) - 16 * q ^ 20) + 34 * q ^ 21) - 25 * q ^ 22) + 4 * q ^ 23) - q ^ 24, (-27 * q ^ 16 + 30 * q ^ 17) - 6 * q ^ 18, (96 * q ^ 16 - 99 * q ^ 17) + 21 * q ^ 18, Unknown(), ((-57 * q ^ 16 + 101 * q ^ 17) - 51 * q ^ 18) + 7 * q ^ 19, ((q ^ 19 + 6 * q ^ 20) - 3 * q ^ 21) - 7 * q ^ 22, Unknown(), Unknown(), ((14 * q ^ 48 - 26 * q ^ 49) + 13 * q ^ 50) - q ^ 51, Unknown(), 0, ((23 * q ^ 16 - 51 * q ^ 17) + 35 * q ^ 18) - 8 * q ^ 19, Unknown(), 315 * q ^ 32, Unknown(), (119 * q ^ 32 - 152 * q ^ 33) + 44 * q ^ 34, ((-40 * q ^ 32 + 56 * q ^ 33) - 20 * q ^ 34) + q ^ 35, ((-72 * q ^ 32 + 141 * q ^ 33) - 87 * q ^ 34) + 15 * q ^ 35, (((9 * q ^ 32 - 5 * q ^ 33) - 20 * q ^ 34) + 18 * q ^ 35) - 3 * q ^ 36, (((2 * q ^ 32 - 14 * q ^ 33) + 28 * q ^ 34) - 22 * q ^ 35) + 6 * q ^ 36, Unknown(), ((27 * q ^ 32 - 90 * q ^ 34) + 72 * q ^ 35) - 18 * q ^ 36, (((-15 * q ^ 32 + 12 * q ^ 33 + 54 * q ^ 34) - 84 * q ^ 35) + 36 * q ^ 36) - 6 * q ^ 37, ((-6 * q ^ 32 + 26 * q ^ 34) - 21 * q ^ 35) + 4 * q ^ 36, ((q ^ 32 - 6 * q ^ 34) + 8 * q ^ 35) - 3 * q ^ 36, -195 * q ^ 32 + 120 * q ^ 33, (96 * q ^ 32 - 99 * q ^ 33) + 21 * q ^ 34, ((-57 * q ^ 32 + 101 * q ^ 33) - 51 * q ^ 34) + 7 * q ^ 35, ((q ^ 35 + 6 * q ^ 36) - 3 * q ^ 37) - 7 * q ^ 38, (((-2 * q ^ 32 + 22 * q ^ 33) - 33 * q ^ 34) + 14 * q ^ 35) - q ^ 36, ((14 * q ^ 64 - 26 * q ^ 65) + 13 * q ^ 66) - q ^ 67, Unknown(), 315 * q ^ 48, ((((((-8 * q ^ 9 + 2 * q ^ 10 + 22 * q ^ 12) - 8 * q ^ 13) - 4 * q ^ 15) + 2 * q ^ 16) - 12 * q ^ 18) + 8 * q ^ 19 + 45 * q ^ 20) - 36 * q ^ 21, Unknown(), ((-40 * q ^ 48 + 56 * q ^ 49) - 20 * q ^ 50) + q ^ 51, Unknown(), Unknown(), ((27 * q ^ 48 - 90 * q ^ 50) + 72 * q ^ 51) - 18 * q ^ 52, Unknown(), ((-6 * q ^ 48 + 26 * q ^ 50) - 21 * q ^ 51) + 4 * q ^ 52, ((q ^ 48 - 6 * q ^ 50) + 8 * q ^ 51) - 3 * q ^ 52, ((10 * q ^ 9 - 30 * q ^ 12) + 6 * q ^ 15 + 20 * q ^ 18) - 81 * q ^ 20, (96 * q ^ 48 - 99 * q ^ 49) + 21 * q ^ 50, Unknown(), (((-2 * q ^ 48 + 22 * q ^ 49) - 33 * q ^ 50) + 14 * q ^ 51) - q ^ 52, 315 * q ^ 64, Unknown(), (119 * q ^ 64 - 152 * q ^ 65) + 44 * q ^ 66, (((-10 * q ^ 16 + 29 * q ^ 17) - 29 * q ^ 18) + 11 * q ^ 19) - q ^ 20, -195 * q ^ 64 + 120 * q ^ 65, (96 * q ^ 64 - 99 * q ^ 65) + 21 * q ^ 66, Unknown(), ((-40 * q ^ 64 + 56 * q ^ 65) - 20 * q ^ 66) + q ^ 67, 315 * q ^ 80, Unknown(), (119 * q ^ 80 - 152 * q ^ 81) + 44 * q ^ 82, -195 * q ^ 80 + 120 * q ^ 81, (96 * q ^ 80 - 99 * q ^ 81) + 21 * q ^ 82, Unknown(), ((-40 * q ^ 80 + 56 * q ^ 81) - 20 * q ^ 82) + q ^ 83]
                end)
        f82 = (q->begin
                    [315, -165 + 150q, (57 - 108q) + 42 * q ^ 2, (89 - 152q) + 74 * q ^ 2, ((-33 + 80q) - 72 * q ^ 2) + 22 * q ^ 3, ((-15 + 42q) - 34 * q ^ 2) + 8 * q ^ 3, (-3 + 21q) - 15 * q ^ 2, ((-48 + 123q) - 105 * q ^ 2) + 39 * q ^ 3, ((9 - 15q) + 21 * q ^ 2) - 12 * q ^ 3, (((-3 + 13q) - 20 * q ^ 2) + 15 * q ^ 3) - 6 * q ^ 4, (((14 - 38q) + 47 * q ^ 2) - 30 * q ^ 3) + 7 * q ^ 4, (((4 - 11q) + 13 * q ^ 2) - 7 * q ^ 3) + q ^ 4, -q + q ^ 2, (((-7 + 25q) - 35 * q ^ 2) + 22 * q ^ 3) - 5 * q ^ 4, (((9 - 30q) + 35 * q ^ 2) - 20 * q ^ 3) + 5 * q ^ 4, ((3 - 12q) + 16 * q ^ 2) - 8 * q ^ 3, (((18 - 60q) + 72 * q ^ 2) - 44 * q ^ 3) + 13 * q ^ 4, ((((-2 + 9q) - 12 * q ^ 2) + 8 * q ^ 3) - 4 * q ^ 4) + q ^ 5, ((((4 - 16q) + 30 * q ^ 2) - 28 * q ^ 3) + 13 * q ^ 4) - 3 * q ^ 5, q ^ 2, Unknown(), ((((2 - 10q) + 19 * q ^ 2) - 15 * q ^ 3) + 6 * q ^ 4) - q ^ 5, Unknown(), ((((-4 + 15q) - 20 * q ^ 2) + 16 * q ^ 3) - 8 * q ^ 4) + 2 * q ^ 5, (((-1 + 3q) - 3 * q ^ 2) + 2 * q ^ 3) - q ^ 4, q - q ^ 2, ((3 - 63 * q ^ 2) + 96 * q ^ 3) - 45 * q ^ 4, 0, Unknown(), ((q - 15 * q ^ 2) + 24 * q ^ 3) - 8 * q ^ 4, 0, (((((15 - 42q) - 15 * q ^ 2) + 72 * q ^ 3) - 21 * q ^ 4) - 30 * q ^ 5) + 12 * q ^ 6, Unknown(), Unknown(), (((-3 + 36 * q ^ 2) - 75 * q ^ 3) + 69 * q ^ 4) - 24 * q ^ 5, (q ^ 2 - 2 * q ^ 3) + q ^ 4, (((((-9 + 30q) - 11 * q ^ 2) - 44 * q ^ 3) + 48 * q ^ 4 + 5 * q ^ 5) - 22 * q ^ 6) + 6 * q ^ 7, ((((2q - 6 * q ^ 2) + 8 * q ^ 3) - 8 * q ^ 4) + 5 * q ^ 5) - q ^ 6, (((-q + 9 * q ^ 2) - 18 * q ^ 3) + 15 * q ^ 4) - 5 * q ^ 5, ((8 * q ^ 2 - 21 * q ^ 3) + 16 * q ^ 4) - 3 * q ^ 5, Unknown(), (((((-7 + 28q) - 27 * q ^ 2) - 4 * q ^ 3) + 13 * q ^ 4 + 8 * q ^ 5) - 16 * q ^ 6) + 5 * q ^ 7, Unknown(), Unknown(), (((((2 - 12q) + 16 * q ^ 2) - 17 * q ^ 4) + 11 * q ^ 5 + 3 * q ^ 6) - 4 * q ^ 7) + q ^ 8, ((-(q ^ 2) + q ^ 3) - q ^ 4) + q ^ 5, (((4 * q ^ 100 - 11 * q ^ 101) + 13 * q ^ 102) - 7 * q ^ 103) + q ^ 104, (((4 * q ^ 20 - 11 * q ^ 21) + 13 * q ^ 22) - 7 * q ^ 23) + q ^ 24, (((-5 * q ^ 2 + 15 * q ^ 3) - 16 * q ^ 4) + 10 * q ^ 5) - 2 * q ^ 6, Unknown(), Unknown(), ((((((4 - 19q) + 29 * q ^ 2) - 11 * q ^ 3) - 11 * q ^ 4) + 6 * q ^ 5 + 13 * q ^ 6) - 12 * q ^ 7) + 3 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-2 * q ^ 20 + 9 * q ^ 21) - 12 * q ^ 22) + 8 * q ^ 23) - 4 * q ^ 24) + q ^ 25, Unknown(), Unknown(), ((((((((2 - 8q) + 4 * q ^ 2 + 14 * q ^ 3) - 33 * q ^ 4) + 38 * q ^ 5) - 27 * q ^ 6) + 12 * q ^ 7) - 2 * q ^ 8) - 2 * q ^ 9) + q ^ 10, 0, Unknown(), Unknown(), 0, ((-2 * q ^ 3 + 5 * q ^ 4) - 6 * q ^ 5) + 2 * q ^ 6, Unknown(), Unknown(), Unknown(), ((((-2 * q ^ 40 + 9 * q ^ 41) - 12 * q ^ 42) + 8 * q ^ 43) - 4 * q ^ 44) + q ^ 45, Unknown(), Unknown(), ((((-4 * q ^ 60 + 15 * q ^ 61) - 20 * q ^ 62) + 16 * q ^ 63) - 8 * q ^ 64) + 2 * q ^ 65, Unknown(), Unknown(), ((((((-(q ^ 2) + 10 * q ^ 3) - 11 * q ^ 4) + 30 * q ^ 5) - 28 * q ^ 6) + 20 * q ^ 7) - 8 * q ^ 8) + 6 * q ^ 9, 0, (((-7 * q ^ 100 + 25 * q ^ 101) - 35 * q ^ 102) + 22 * q ^ 103) - 5 * q ^ 104, ((((-4 * q ^ 100 + 15 * q ^ 101) - 20 * q ^ 102) + 16 * q ^ 103) - 8 * q ^ 104) + 2 * q ^ 105, Unknown(), (-3 * q ^ 5 - 2 * q ^ 6) + 6 * q ^ 7 + 2 * q ^ 9, (((-7 * q ^ 20 + 25 * q ^ 21) - 35 * q ^ 22) + 22 * q ^ 23) - 5 * q ^ 24, Unknown(), (((9 * q ^ 40 - 30 * q ^ 41) + 35 * q ^ 42) - 20 * q ^ 43) + 5 * q ^ 44, q ^ 42 - q ^ 43, Unknown(), Unknown(), (((4 * q ^ 40 - 11 * q ^ 41) + 13 * q ^ 42) - 7 * q ^ 43) + q ^ 44, Unknown(), 315 * q ^ 20, -(q ^ 21) + q ^ 22, (89 * q ^ 20 - 152 * q ^ 21) + 74 * q ^ 22, Unknown(), ((-15 * q ^ 20 + 42 * q ^ 21) - 34 * q ^ 22) + 8 * q ^ 23, ((-48 * q ^ 20 + 123 * q ^ 21) - 105 * q ^ 22) + 39 * q ^ 23, (((14 * q ^ 20 - 38 * q ^ 21) + 47 * q ^ 22) - 30 * q ^ 23) + 7 * q ^ 24, Unknown(), ((3 * q ^ 20 - 12 * q ^ 21) + 16 * q ^ 22) - 8 * q ^ 23, (((18 * q ^ 20 - 60 * q ^ 21) + 72 * q ^ 22) - 44 * q ^ 23) + 13 * q ^ 24, ((((4 * q ^ 20 - 16 * q ^ 21) + 30 * q ^ 22) - 28 * q ^ 23) + 13 * q ^ 24) - 3 * q ^ 25, ((3 * q ^ 20 - 63 * q ^ 22) + 96 * q ^ 23) - 45 * q ^ 24, (((((15 * q ^ 20 - 42 * q ^ 21) - 15 * q ^ 22) + 72 * q ^ 23) - 21 * q ^ 24) - 30 * q ^ 25) + 12 * q ^ 26, ((8 * q ^ 22 - 21 * q ^ 23) + 16 * q ^ 24) - 3 * q ^ 25, (((-3 * q ^ 20 + 36 * q ^ 22) - 75 * q ^ 23) + 69 * q ^ 24) - 24 * q ^ 25, (((((-9 * q ^ 20 + 30 * q ^ 21) - 11 * q ^ 22) - 44 * q ^ 23) + 48 * q ^ 24 + 5 * q ^ 25) - 22 * q ^ 26) + 6 * q ^ 27, Unknown(), (((-5 * q ^ 22 + 15 * q ^ 23) - 16 * q ^ 24) + 10 * q ^ 25) - 2 * q ^ 26, ((-(q ^ 22) + q ^ 23) - q ^ 24) + q ^ 25, ((-2 * q ^ 23 + 5 * q ^ 24) - 6 * q ^ 25) + 2 * q ^ 26, -165 * q ^ 20 + 150 * q ^ 21, ((((((-(q ^ 22) + 10 * q ^ 23) - 11 * q ^ 24) + 30 * q ^ 25) - 28 * q ^ 26) + 20 * q ^ 27) - 8 * q ^ 28) + 6 * q ^ 29, (-3 * q ^ 20 + 21 * q ^ 21) - 15 * q ^ 22, (57 * q ^ 20 - 108 * q ^ 21) + 42 * q ^ 22, Unknown(), ((-33 * q ^ 20 + 80 * q ^ 21) - 72 * q ^ 22) + 22 * q ^ 23, (-3 * q ^ 25 - 2 * q ^ 26) + 6 * q ^ 27 + 2 * q ^ 29, Unknown(), Unknown(), (((4 * q ^ 60 - 11 * q ^ 61) + 13 * q ^ 62) - 7 * q ^ 63) + q ^ 64, Unknown(), 0, (((9 * q ^ 20 - 30 * q ^ 21) + 35 * q ^ 22) - 20 * q ^ 23) + 5 * q ^ 24, Unknown(), 315 * q ^ 40, Unknown(), (89 * q ^ 40 - 152 * q ^ 41) + 74 * q ^ 42, ((-15 * q ^ 40 + 42 * q ^ 41) - 34 * q ^ 42) + 8 * q ^ 43, ((-48 * q ^ 40 + 123 * q ^ 41) - 105 * q ^ 42) + 39 * q ^ 43, (((-3 * q ^ 40 + 13 * q ^ 41) - 20 * q ^ 42) + 15 * q ^ 43) - 6 * q ^ 44, ((((4 * q ^ 40 - 16 * q ^ 41) + 30 * q ^ 42) - 28 * q ^ 43) + 13 * q ^ 44) - 3 * q ^ 45, Unknown(), ((3 * q ^ 40 - 63 * q ^ 42) + 96 * q ^ 43) - 45 * q ^ 44, (((-3 * q ^ 40 + 36 * q ^ 42) - 75 * q ^ 43) + 69 * q ^ 44) - 24 * q ^ 45, ((8 * q ^ 42 - 21 * q ^ 43) + 16 * q ^ 44) - 3 * q ^ 45, ((-(q ^ 42) + q ^ 43) - q ^ 44) + q ^ 45, -165 * q ^ 40 + 150 * q ^ 41, (57 * q ^ 40 - 108 * q ^ 41) + 42 * q ^ 42, ((-33 * q ^ 40 + 80 * q ^ 41) - 72 * q ^ 42) + 22 * q ^ 43, (-3 * q ^ 45 - 2 * q ^ 46) + 6 * q ^ 47 + 2 * q ^ 49, (((-7 * q ^ 40 + 25 * q ^ 41) - 35 * q ^ 42) + 22 * q ^ 43) - 5 * q ^ 44, (((4 * q ^ 80 - 11 * q ^ 81) + 13 * q ^ 82) - 7 * q ^ 83) + q ^ 84, Unknown(), 315 * q ^ 60, ((((((-4 * q ^ 15 + 2 * q ^ 16 + 12 * q ^ 18) - 8 * q ^ 19) + 45 * q ^ 20) - 68 * q ^ 21) + 28 * q ^ 22) - 8 * q ^ 27) + 12 * q ^ 28, Unknown(), ((-15 * q ^ 60 + 42 * q ^ 61) - 34 * q ^ 62) + 8 * q ^ 63, Unknown(), Unknown(), ((3 * q ^ 60 - 63 * q ^ 62) + 96 * q ^ 63) - 45 * q ^ 64, Unknown(), ((8 * q ^ 62 - 21 * q ^ 63) + 16 * q ^ 64) - 3 * q ^ 65, ((-(q ^ 62) + q ^ 63) - q ^ 64) + q ^ 65, ((6 * q ^ 15 - 20 * q ^ 18) - 81 * q ^ 20) + 60 * q ^ 21 + 20 * q ^ 27, (57 * q ^ 60 - 108 * q ^ 61) + 42 * q ^ 62, Unknown(), (((-7 * q ^ 60 + 25 * q ^ 61) - 35 * q ^ 62) + 22 * q ^ 63) - 5 * q ^ 64, 315 * q ^ 80, Unknown(), (89 * q ^ 80 - 152 * q ^ 81) + 74 * q ^ 82, ((((-4 * q ^ 20 + 15 * q ^ 21) - 20 * q ^ 22) + 16 * q ^ 23) - 8 * q ^ 24) + 2 * q ^ 25, -165 * q ^ 80 + 150 * q ^ 81, (57 * q ^ 80 - 108 * q ^ 81) + 42 * q ^ 82, Unknown(), ((-15 * q ^ 80 + 42 * q ^ 81) - 34 * q ^ 82) + 8 * q ^ 83, 315 * q ^ 100, Unknown(), (89 * q ^ 100 - 152 * q ^ 101) + 74 * q ^ 102, -165 * q ^ 100 + 150 * q ^ 101, (57 * q ^ 100 - 108 * q ^ 101) + 42 * q ^ 102, Unknown(), ((-15 * q ^ 100 + 42 * q ^ 101) - 34 * q ^ 102) + 8 * q ^ 103]
                end)
        f84 = function (q, j)
                return [315, -135 + 180q, (33 - 102q) + 78 * q ^ 2, (55 - 160q) + 100 * q ^ 2, ((-12 + 64q) - 96 * q ^ 2) + 41 * q ^ 3, ((-4 + 29q) - 51 * q ^ 2) + 27 * q ^ 3, -3 + (-12 * j ^ 2 - 6j) * q + (27 * j ^ 2 + 21j) * q ^ 2 + 18 * q ^ 3, ((-21 + 102q) - 138 * q ^ 2) + 54 * q ^ 3, 9 + (21 * j ^ 2 + 27j) * q + (-6 * j ^ 2 - 12j) * q ^ 2 + 6 * q ^ 3, -4 + (-14 * j ^ 2 - 18j) * q + (14 * j ^ 2 + 18j) * q ^ 2 + (j ^ 2 - 3j) * q ^ 3 + q ^ 4, (((2 - 20q) + 55 * q ^ 2) - 52 * q ^ 3) + 15 * q ^ 4, ((-4q + 17 * q ^ 2) - 20 * q ^ 3) + 7 * q ^ 4, j ^ 2 * q + (-5 * j ^ 2 - j) * q ^ 2 + (7 * j ^ 2 + 4j) * q ^ 3 + 3 * q ^ 4, (-3 + (-16 * j ^ 2 - 19j) * q + (26 * j ^ 2 + 34j) * q ^ 2 + (-19 * j ^ 2 - 24j) * q ^ 3) - 6 * q ^ 4, (((1 - 14q) + 41 * q ^ 2) - 42 * q ^ 3) + 13 * q ^ 4, 1 + (6 * j ^ 2 + 4j) * q + (-21 * j ^ 2 - 13j) * q ^ 2 + (24 * j ^ 2 + 22j) * q ^ 3 + 8 * q ^ 4, (((4 - 33q) + 82 * q ^ 2) - 73 * q ^ 3) + 21 * q ^ 4, (((q - 10 * q ^ 2) + 20 * q ^ 3) - 14 * q ^ 4) + 3 * q ^ 5, (1 + (8 * j ^ 2 + 10j) * q + (-21 * j ^ 2 - 26j) * q ^ 2 + (23 * j ^ 2 + 29j) * q ^ 3 + (-13 * j ^ 2 - 16j) * q ^ 4) - 4 * q ^ 5, (j ^ 2 * q ^ 2 - 2 * j ^ 2 * q ^ 3) - q ^ 4, Unknown(), ((3 * j ^ 2 + 4j) * q + (-11 * j ^ 2 - 14j) * q ^ 2 + (16 * j ^ 2 + 20j) * q ^ 3 + (-11 * j ^ 2 - 14j) * q ^ 4) - 4 * q ^ 5, Unknown(), (((3q - 17 * q ^ 2) + 31 * q ^ 3) - 20 * q ^ 4) + 4 * q ^ 5, ((-3 * q ^ 2 + 8 * q ^ 3) - 6 * q ^ 4) + q ^ 5, 3 * j ^ 2 * q ^ 2 + (-7 * j ^ 2 - 3j) * q ^ 3 + (5 * j ^ 2 + 4j) * q ^ 4 + q ^ 5, 3 + (18 * j ^ 2 + 36j) * q ^ 2 + 96 * q ^ 3 + (63 * j ^ 2 + 81j) * q ^ 4 + 18 * q ^ 6, 0, Unknown(), -j * q + (5 * j ^ 2 + 6j) * q ^ 2 + 17 * q ^ 3 + (21 * j ^ 2 + 24j) * q ^ 4 + (-4 * j ^ 2 - 7j) * q ^ 5 + 3 * q ^ 6, 0, 15 + (24 * j ^ 2 + 12j) * q + (27 * j ^ 2 + 21j) * q ^ 2 + 72 * q ^ 3 + (12 * j ^ 2 + 6j) * q ^ 4 + (54 * j ^ 2 + 42j) * q ^ 5 + 30 * q ^ 6, Unknown(), Unknown(), ((-1 + 2q + (-6 * j ^ 2 - 12j) * q ^ 2 + (52 * j ^ 2 + 64j) * q ^ 3 + (-83 * j ^ 2 - 95j) * q ^ 4 + (36 * j ^ 2 + 42j) * q ^ 5) - 10 * q ^ 6) + 8 * q ^ 7, -(q ^ 3) + (-5 * j ^ 2 - 4j) * q ^ 4 + (5 * j ^ 2 + 4j) * q ^ 5 + q ^ 6, -6 + (-17 * j ^ 2 - 13j) * q + (3 * j ^ 2 - j) * q ^ 2 + (44 * j ^ 2 + 42j) * q ^ 3 + (-46 * j ^ 2 - 44j) * q ^ 4 + (-18 * j ^ 2 - 14j) * q ^ 5 + (43 * j ^ 2 + 39j) * q ^ 6 + 15 * q ^ 7, (-2 * q ^ 2 + (-5 * j ^ 2 - 9j) * q ^ 3 + (4 * j ^ 2 + 9j) * q ^ 4 + (-2 * j ^ 2 - 3j) * q ^ 5) - q ^ 6, (((-2 * j ^ 2 - 3j) * q ^ 2 + (10 * j ^ 2 + 11j) * q ^ 3 + (-20 * j ^ 2 - 22j) * q ^ 4 + (13 * j ^ 2 + 16j) * q ^ 5) - j * q ^ 6) + q ^ 7, -2 * j * q ^ 2 + (10 * j ^ 2 + 11j) * q ^ 3 + (-25 * j ^ 2 - 24j) * q ^ 4 + (12 * j ^ 2 + 18j) * q ^ 5 + 3 * q ^ 7, Unknown(), ((-3 + (-8 * j ^ 2 - 6j) * q) - 6 * j ^ 2 * q ^ 2) + (28 * j ^ 2 + 9j) * q ^ 3 + (-7 * j ^ 2 + 14j) * q ^ 4 + (-38 * j ^ 2 - 48j) * q ^ 5 + (40 * j ^ 2 + 34j) * q ^ 6 + 12 * q ^ 7, Unknown(), Unknown(), (((5 * j ^ 2 + 3j) * q ^ 2 + (-17 * j ^ 2 - 7j) * q ^ 3 + (17 * j ^ 2 - j) * q ^ 4 + (4 * j ^ 2 + 21j) * q ^ 5 + (-21 * j ^ 2 - 28j) * q ^ 6) - 16 * q ^ 7) + 4 * q ^ 8, -3 * q ^ 4 + (-6 * j ^ 2 - 5j) * q ^ 5 + (3 * j ^ 2 + 2j) * q ^ 6, ((-4 * j * q ^ 121 + 17 * j * q ^ 122) - 20 * j * q ^ 123) + 7 * j * q ^ 124, ((-4 * j ^ 2 * q ^ 25 + 17 * j ^ 2 * q ^ 26) - 20 * j ^ 2 * q ^ 27) + 7 * j ^ 2 * q ^ 28, (((-4 * j ^ 2 - 6j) * q ^ 3 + (17 * j ^ 2 + 18j) * q ^ 4 + (-20 * j ^ 2 - 23j) * q ^ 5 + (6 * j ^ 2 + 8j) * q ^ 6) - 2 * q ^ 7) + q ^ 8, Unknown(), Unknown(), (1 - 4q) + (-(j ^ 2) - 3j) * q ^ 2 + (-15 * j ^ 2 - 3j) * q ^ 3 + (16 * j ^ 2 - 3j) * q ^ 4 + (14 * j ^ 2 + 29j) * q ^ 5 + (-39 * j ^ 2 - 41j) * q ^ 6 + (26 * j ^ 2 + 24j) * q ^ 7 + 6 * q ^ 8, Unknown(), Unknown(), Unknown(), (((j ^ 2 * q ^ 25 - 10 * j ^ 2 * q ^ 26) + 20 * j ^ 2 * q ^ 27) - 14 * j ^ 2 * q ^ 28) + 3 * j ^ 2 * q ^ 29, Unknown(), Unknown(), (((4 * j ^ 2 + 3j) * q ^ 2 + (-10 * j ^ 2 - 8j) * q ^ 3 + (8 * j ^ 2 + 9j) * q ^ 4 + (-12 * j ^ 2 - 16j) * q ^ 5 + (28 * j ^ 2 + 32j) * q ^ 6 + (-22 * j ^ 2 - 18j) * q ^ 7 + (-4 * j ^ 2 - 9j) * q ^ 8) - 12 * q ^ 9) + 4 * q ^ 10, 0, Unknown(), Unknown(), 0, ((-j * q ^ 4 - 6 * q ^ 5) + (-6 * j ^ 2 - 8j) * q ^ 6 + 2 * j * q ^ 7) - q ^ 8, Unknown(), Unknown(), Unknown(), (((j * q ^ 49 - 10 * j * q ^ 50) + 20 * j * q ^ 51) - 14 * j * q ^ 52) + 3 * j * q ^ 53, Unknown(), Unknown(), (((3 * q ^ 73 - 17 * q ^ 74) + 31 * q ^ 75) - 20 * q ^ 76) + 4 * q ^ 77, Unknown(), Unknown(), j ^ 2 * q ^ 2 + 2 * j * q ^ 3 + (-2 * j ^ 2 - 3j) * q ^ 4 + (-6 * j ^ 2 - 14j) * q ^ 5 + (21 * j ^ 2 + 37j) * q ^ 6 + (-26 * j ^ 2 - 34j) * q ^ 7 + (8 * j ^ 2 + 5j) * q ^ 8 + 6 * j * q ^ 9 + (7 * j ^ 2 + 4j) * q ^ 10 + 3 * q ^ 12, 0, (-3 * j * q ^ 120 + (-3 * j ^ 2 + 16j) * q ^ 121 + (8 * j ^ 2 - 26j) * q ^ 122 + (-5 * j ^ 2 + 19j) * q ^ 123) - 6 * j * q ^ 124, (((3 * j * q ^ 121 - 17 * j * q ^ 122) + 31 * j * q ^ 123) - 20 * j * q ^ 124) + 4 * j * q ^ 125, Unknown(), -9 * j * q ^ 7 + (6 * j ^ 2 + 15j) * q ^ 8 + (-2 * j ^ 2 - 5j) * q ^ 9 + 3 * q ^ 10 + (-(j ^ 2) + 2j) * q ^ 12, (-3 * j ^ 2 * q ^ 24 + (19 * j ^ 2 + 3j) * q ^ 25 + (-34 * j ^ 2 - 8j) * q ^ 26 + (24 * j ^ 2 + 5j) * q ^ 27) - 6 * j ^ 2 * q ^ 28, Unknown(), (((j * q ^ 48 - 14 * j * q ^ 49) + 41 * j * q ^ 50) - 42 * j * q ^ 51) + 13 * j * q ^ 52, -(q ^ 51) + q ^ 52, Unknown(), Unknown(), ((-4 * j * q ^ 49 + 17 * j * q ^ 50) - 20 * j * q ^ 51) + 7 * j * q ^ 52, Unknown(), 315 * j ^ 2 * q ^ 24, j * q ^ 25 + (j ^ 2 - 4j) * q ^ 26 + (-4 * j ^ 2 + 3j) * q ^ 27 + 3 * j ^ 2 * q ^ 28, (55 * j ^ 2 * q ^ 24 - 160 * j ^ 2 * q ^ 25) + 100 * j ^ 2 * q ^ 26, Unknown(), ((-4 * j ^ 2 * q ^ 24 + 29 * j ^ 2 * q ^ 25) - 51 * j ^ 2 * q ^ 26) + 27 * j ^ 2 * q ^ 27, ((-21 * j ^ 2 * q ^ 24 + 102 * j ^ 2 * q ^ 25) - 138 * j ^ 2 * q ^ 26) + 54 * j ^ 2 * q ^ 27, (((2 * j ^ 2 * q ^ 24 - 20 * j ^ 2 * q ^ 25) + 55 * j ^ 2 * q ^ 26) - 52 * j ^ 2 * q ^ 27) + 15 * j ^ 2 * q ^ 28, Unknown(), j ^ 2 * q ^ 24 + (-4 * j ^ 2 + 2j) * q ^ 25 + (13 * j ^ 2 - 8j) * q ^ 26 + (-22 * j ^ 2 + 2j) * q ^ 27 + 8 * j ^ 2 * q ^ 28, (((4 * j ^ 2 * q ^ 24 - 33 * j ^ 2 * q ^ 25) + 82 * j ^ 2 * q ^ 26) - 73 * j ^ 2 * q ^ 27) + 21 * j ^ 2 * q ^ 28, (j ^ 2 * q ^ 24 + (-10 * j ^ 2 - 2j) * q ^ 25 + (26 * j ^ 2 + 5j) * q ^ 26 + (-29 * j ^ 2 - 6j) * q ^ 27 + (16 * j ^ 2 + 3j) * q ^ 28) - 4 * j ^ 2 * q ^ 29, 3 * j ^ 2 * q ^ 24 + (-36 * j ^ 2 - 18j) * q ^ 26 + 96 * j ^ 2 * q ^ 27 + (-81 * j ^ 2 - 18j) * q ^ 28 + 18 * j ^ 2 * q ^ 30, 15 * j ^ 2 * q ^ 24 + (-12 * j ^ 2 + 12j) * q ^ 25 + (-21 * j ^ 2 + 6j) * q ^ 26 + 72 * j ^ 2 * q ^ 27 + (-6 * j ^ 2 + 6j) * q ^ 28 + (-42 * j ^ 2 + 12j) * q ^ 29 + 30 * j ^ 2 * q ^ 30, -2 * q ^ 26 + (-11 * j ^ 2 - j) * q ^ 27 + (24 * j ^ 2 - j) * q ^ 28 + (-18 * j ^ 2 - 6j) * q ^ 29 + 3 * j ^ 2 * q ^ 31, ((-(j ^ 2) * q ^ 24 + 2 * j ^ 2 * q ^ 25 + (12 * j ^ 2 + 6j) * q ^ 26 + (-64 * j ^ 2 - 12j) * q ^ 27 + (95 * j ^ 2 + 12j) * q ^ 28 + (-42 * j ^ 2 - 6j) * q ^ 29) - 10 * j ^ 2 * q ^ 30) + 8 * j ^ 2 * q ^ 31, -6 * j ^ 2 * q ^ 24 + (13 * j ^ 2 - 4j) * q ^ 25 + (j ^ 2 + 4j) * q ^ 26 + (-42 * j ^ 2 + 2j) * q ^ 27 + (44 * j ^ 2 - 2j) * q ^ 28 + (14 * j ^ 2 - 4j) * q ^ 29 + (-39 * j ^ 2 + 4j) * q ^ 30 + 15 * j ^ 2 * q ^ 31, Unknown(), (((6 * j ^ 2 + 2j) * q ^ 27 + (-18 * j ^ 2 - j) * q ^ 28 + (23 * j ^ 2 + 3j) * q ^ 29 + (-8 * j ^ 2 - 2j) * q ^ 30) - 2 * j ^ 2 * q ^ 31) + j ^ 2 * q ^ 32, -3 * j ^ 2 * q ^ 28 + (5 * j ^ 2 - j) * q ^ 29 + (-2 * j ^ 2 + j) * q ^ 30, ((-(q ^ 28) - 6 * j ^ 2 * q ^ 29) + (8 * j ^ 2 + 2j) * q ^ 30 + 2 * q ^ 31) - j ^ 2 * q ^ 32, -135 * j ^ 2 * q ^ 24 + 180 * j ^ 2 * q ^ 25, j * q ^ 26 + 2 * q ^ 27 + (3 * j ^ 2 + j) * q ^ 28 + (14 * j ^ 2 + 8j) * q ^ 29 + (-37 * j ^ 2 - 16j) * q ^ 30 + (34 * j ^ 2 + 8j) * q ^ 31 + (-5 * j ^ 2 + 3j) * q ^ 32 + 6 * q ^ 33 + (-4 * j ^ 2 + 3j) * q ^ 34 + 3 * j ^ 2 * q ^ 36, -3 * j ^ 2 * q ^ 24 + (6 * j ^ 2 - 6j) * q ^ 25 + (-21 * j ^ 2 + 6j) * q ^ 26 + 18 * j ^ 2 * q ^ 27, (33 * j ^ 2 * q ^ 24 - 102 * j ^ 2 * q ^ 25) + 78 * j ^ 2 * q ^ 26, Unknown(), ((-12 * j ^ 2 * q ^ 24 + 64 * j ^ 2 * q ^ 25) - 96 * j ^ 2 * q ^ 26) + 41 * j ^ 2 * q ^ 27, -9 * q ^ 31 + (-15 * j ^ 2 - 9j) * q ^ 32 + (5 * j ^ 2 + 3j) * q ^ 33 + 3 * j ^ 2 * q ^ 34 + (-2 * j ^ 2 - 3j) * q ^ 36, Unknown(), Unknown(), ((-4 * q ^ 73 + 17 * q ^ 74) - 20 * q ^ 75) + 7 * q ^ 76, Unknown(), 0, (((j ^ 2 * q ^ 24 - 14 * j ^ 2 * q ^ 25) + 41 * j ^ 2 * q ^ 26) - 42 * j ^ 2 * q ^ 27) + 13 * j ^ 2 * q ^ 28, Unknown(), 315 * j * q ^ 48, Unknown(), (55 * j * q ^ 48 - 160 * j * q ^ 49) + 100 * j * q ^ 50, ((-4 * j * q ^ 48 + 29 * j * q ^ 49) - 51 * j * q ^ 50) + 27 * j * q ^ 51, ((-21 * j * q ^ 48 + 102 * j * q ^ 49) - 138 * j * q ^ 50) + 54 * j * q ^ 51, -4 * j * q ^ 48 + (-4 * j ^ 2 + 14j) * q ^ 49 + (4 * j ^ 2 - 14j) * q ^ 50 + (-4 * j ^ 2 - j) * q ^ 51 + j * q ^ 52, (j * q ^ 48 + (2 * j ^ 2 - 8j) * q ^ 49 + (-5 * j ^ 2 + 21j) * q ^ 50 + (6 * j ^ 2 - 23j) * q ^ 51 + (-3 * j ^ 2 + 13j) * q ^ 52) - 4 * j * q ^ 53, Unknown(), 3 * j * q ^ 48 + (18 * j ^ 2 - 18j) * q ^ 50 + 96 * j * q ^ 51 + (18 * j ^ 2 - 63j) * q ^ 52 + 18 * j * q ^ 54, ((-j * q ^ 48 + 2 * j * q ^ 49 + (-6 * j ^ 2 + 6j) * q ^ 50 + (12 * j ^ 2 - 52j) * q ^ 51 + (-12 * j ^ 2 + 83j) * q ^ 52 + (6 * j ^ 2 - 36j) * q ^ 53) - 10 * j * q ^ 54) + 8 * j * q ^ 55, -2 * j ^ 2 * q ^ 50 + (j ^ 2 - 10j) * q ^ 51 + (j ^ 2 + 25j) * q ^ 52 + (6 * j ^ 2 - 12j) * q ^ 53 + 3 * j * q ^ 55, -3 * j * q ^ 52 + (j ^ 2 + 6j) * q ^ 53 + (-(j ^ 2) - 3j) * q ^ 54, -135 * j * q ^ 48 + 180 * j * q ^ 49, (33 * j * q ^ 48 - 102 * j * q ^ 49) + 78 * j * q ^ 50, ((-12 * j * q ^ 48 + 64 * j * q ^ 49) - 96 * j * q ^ 50) + 41 * j * q ^ 51, -9 * j ^ 2 * q ^ 55 + (9 * j ^ 2 - 6j) * q ^ 56 + (-3 * j ^ 2 + 2j) * q ^ 57 + 3 * j * q ^ 58 + (3 * j ^ 2 + j) * q ^ 60, (-3 * j * q ^ 48 + (-3 * j ^ 2 + 16j) * q ^ 49 + (8 * j ^ 2 - 26j) * q ^ 50 + (-5 * j ^ 2 + 19j) * q ^ 51) - 6 * j * q ^ 52, ((-4 * j ^ 2 * q ^ 97 + 17 * j ^ 2 * q ^ 98) - 20 * j ^ 2 * q ^ 99) + 7 * j ^ 2 * q ^ 100, Unknown(), 315 * q ^ 72, (((((((-24 * q ^ 21 + 21 * q ^ 22 + 28 * q ^ 24) - 68 * q ^ 25) + 45 * q ^ 26 + 4 * q ^ 27) - 6 * q ^ 28) + 2 * q ^ 30) - 4 * q ^ 31) + q ^ 36) - 4 * q ^ 37, Unknown(), ((-4 * q ^ 72 + 29 * q ^ 73) - 51 * q ^ 74) + 27 * q ^ 75, Unknown(), Unknown(), 3 * q ^ 72 + (18 * j ^ 2 + 36j) * q ^ 74 + 96 * q ^ 75 + (63 * j ^ 2 + 81j) * q ^ 76 + 18 * q ^ 78, Unknown(), -2 * j * q ^ 74 + (10 * j ^ 2 + 11j) * q ^ 75 + (-25 * j ^ 2 - 24j) * q ^ 76 + (12 * j ^ 2 + 18j) * q ^ 77 + 3 * q ^ 79, -3 * q ^ 76 + (-6 * j ^ 2 - 5j) * q ^ 77 + (3 * j ^ 2 + 2j) * q ^ 78, ((((45 * q ^ 21 - 60 * q ^ 24) + 81 * q ^ 25) - 10 * q ^ 27) - 6 * q ^ 30) - 5 * q ^ 36, (33 * q ^ 72 - 102 * q ^ 73) + 78 * q ^ 74, Unknown(), (-3 * q ^ 72 + (-16 * j ^ 2 - 19j) * q ^ 73 + (26 * j ^ 2 + 34j) * q ^ 74 + (-19 * j ^ 2 - 24j) * q ^ 75) - 6 * q ^ 76, 315 * j ^ 2 * q ^ 96, Unknown(), (55 * j ^ 2 * q ^ 96 - 160 * j ^ 2 * q ^ 97) + 100 * j ^ 2 * q ^ 98, (((3 * j ^ 2 * q ^ 25 - 17 * j ^ 2 * q ^ 26) + 31 * j ^ 2 * q ^ 27) - 20 * j ^ 2 * q ^ 28) + 4 * j ^ 2 * q ^ 29, -135 * j ^ 2 * q ^ 96 + 180 * j ^ 2 * q ^ 97, (33 * j ^ 2 * q ^ 96 - 102 * j ^ 2 * q ^ 97) + 78 * j ^ 2 * q ^ 98, Unknown(), ((-4 * j ^ 2 * q ^ 96 + 29 * j ^ 2 * q ^ 97) - 51 * j ^ 2 * q ^ 98) + 27 * j ^ 2 * q ^ 99, 315 * j * q ^ 120, Unknown(), (55 * j * q ^ 120 - 160 * j * q ^ 121) + 100 * j * q ^ 122, -135 * j * q ^ 120 + 180 * j * q ^ 121, (33 * j * q ^ 120 - 102 * j * q ^ 121) + 78 * j * q ^ 122, Unknown(), ((-4 * j * q ^ 120 + 29 * j * q ^ 121) - 51 * j * q ^ 122) + 27 * j * q ^ 123]
            end
        f88 = function (q, j)
                return [336, -200 + 136q, (90 - 110q) + 26 * q ^ 2, (120 - 160q) + 56 * q ^ 2, ((-55 + 100q) - 60 * q ^ 2) + 11 * q ^ 3, ((-34 + 56q) - 24 * q ^ 2) + 2 * q ^ 3, -18 + 30q + (8 * j ^ 2 + 6j) * q ^ 2, ((-72 + 144q) - 96 * q ^ 2) + 24 * q ^ 3, (-6 + (6 * j ^ 2 + 8j) * q + 30 * q ^ 2) - 12 * q ^ 3, (5 + 3q + (20 * j ^ 2 + 22j) * q ^ 2 + 19 * q ^ 3) - 5 * q ^ 4, (((26 - 58q) + 48 * q ^ 2) - 18 * q ^ 3) + 2 * q ^ 4, ((12 - 22q) + 13 * q ^ 2) - 2 * q ^ 3, (3 - 6q) + (-2 * j ^ 2 - j) * q ^ 2, (-7 + (-25 * j ^ 2 - 27j) * q + (35 * j ^ 2 + 36j) * q ^ 2 + 17 * q ^ 3) - 2 * q ^ 4, (((21 - 47q) + 36 * q ^ 2) - 11 * q ^ 3) + q ^ 4, (12 - 24q) + 16 * q ^ 2 + (4 * j ^ 2 + 2j) * q ^ 3, (((33 - 83q) + 74 * q ^ 2) - 31 * q ^ 3) + 5 * q ^ 4, (((-7 + 19q) - 16 * q ^ 2) + 6 * q ^ 3) - q ^ 4, ((4 - 18q) + (-31 * j ^ 2 - 33j) * q ^ 2 + (24 * j ^ 2 + 25j) * q ^ 3 + 8 * q ^ 4) - q ^ 5, -1 + q, Unknown(), (4 - 16q) + (-21 * j ^ 2 - 22j) * q ^ 2 + (11 * j ^ 2 + 12j) * q ^ 3 + 2 * q ^ 4, Unknown(), (((-10 + 27q) - 26 * q ^ 2) + 12 * q ^ 3) - 3 * q ^ 4, ((-4 + 8q) - 5 * q ^ 2) + q ^ 3, ((-2 + 5q) - 3 * q ^ 2) - j ^ 2 * q ^ 3, (18 - 90 * q ^ 2) + 96 * q ^ 3 + (18 * j ^ 2 + 24j) * q ^ 4, 0, Unknown(), (((3 + 6q) - 28 * q ^ 2) + 19 * q ^ 3) - 2 * q ^ 4, 0, (((30 - 60q) + (8 * j ^ 2 + 6j) * q ^ 2 + 72 * q ^ 3) - 30 * q ^ 4) + (16 * j ^ 2 + 12j) * q ^ 5 + 12 * q ^ 6, Unknown(), Unknown(), ((-12 + 6q + 54 * q ^ 2) - 92 * q ^ 3) + 52 * q ^ 4 + (6 * j ^ 2 + 12j) * q ^ 5, ((-1 - q) + 5 * q ^ 2 + (5 * j ^ 2 + 4j) * q ^ 3) - j ^ 2 * q ^ 4, ((((-19 + 47q) - 20 * q ^ 2) + (46 * j ^ 2 + 44j) * q ^ 3 + 48 * q ^ 4) - 4 * q ^ 5) + (15 * j ^ 2 + 11j) * q ^ 6 + 5 * q ^ 7, -1 + 2q + (4 * j ^ 2 + 5j) * q ^ 2 + (-7 * j ^ 2 - 8j) * q ^ 3 + (6 * j ^ 2 + 7j) * q ^ 4 + (-(j ^ 2) - 2j) * q ^ 5, ((((-2 - 3q) + 19 * q ^ 2) - 22 * q ^ 3) + 9 * q ^ 4) - q ^ 5, -3 + 21 * q ^ 2 + (27 * j ^ 2 + 26j) * q ^ 3 + (-7 * j ^ 2 - 8j) * q ^ 4, Unknown(), (((-13 + 50q + (56 * j ^ 2 + 60j) * q ^ 2 + (-3 * j ^ 2 - 8j) * q ^ 3 + (-31 * j ^ 2 - 28j) * q ^ 4) - 13 * q ^ 5) - 4 * q ^ 6) + 2 * q ^ 7, Unknown(), Unknown(), (6 - 26q) + 40 * q ^ 2 + (11 * j ^ 2 + 15j) * q ^ 3 + (25 * j ^ 2 + 21j) * q ^ 4 + (-24 * j ^ 2 - 20j) * q ^ 5 + (7 * j ^ 2 + 5j) * q ^ 6, (1 - 4 * q ^ 2) + 5 * q ^ 3 + (3 * j ^ 2 + j) * q ^ 4, ((12 * j * q ^ 85 - 22 * j * q ^ 86) + 13 * j * q ^ 87) - 2 * j * q ^ 88, ((12 * j ^ 2 * q ^ 17 - 22 * j ^ 2 * q ^ 18) + 13 * j ^ 2 * q ^ 19) - 2 * j ^ 2 * q ^ 20, ((2 - q) - 13 * q ^ 2) + 24 * q ^ 3 + (15 * j ^ 2 + 14j) * q ^ 4 + (-3 * j ^ 2 - 4j) * q ^ 5, Unknown(), Unknown(), ((((8 - 35q) + 55 * q ^ 2 + (25 * j ^ 2 + 29j) * q ^ 3 + (18 * j ^ 2 + 13j) * q ^ 4 + (-22 * j ^ 2 - 19j) * q ^ 5) - 3 * q ^ 6) - 3 * q ^ 7) + q ^ 8, Unknown(), Unknown(), Unknown(), (((-7 * j ^ 2 * q ^ 17 + 19 * j ^ 2 * q ^ 18) - 16 * j ^ 2 * q ^ 19) + 6 * j ^ 2 * q ^ 20) - j ^ 2 * q ^ 21, Unknown(), Unknown(), ((6 - 20q) + 16 * q ^ 2 + (-22 * j ^ 2 - 24j) * q ^ 3 + (46 * j ^ 2 + 47j) * q ^ 4 + 30 * q ^ 5 + (12 * j ^ 2 + 9j) * q ^ 6 + (-6 * j ^ 2 - 4j) * q ^ 7) - 2 * q ^ 8, 0, Unknown(), Unknown(), 0, ((1 - q ^ 2) - 4 * q ^ 3) + 8 * q ^ 4 + (2 * j ^ 2 + 4j) * q ^ 5, Unknown(), Unknown(), Unknown(), (((-7 * j * q ^ 34 + 19 * j * q ^ 35) - 16 * j * q ^ 36) + 6 * j * q ^ 37) - j * q ^ 38, Unknown(), Unknown(), (((-10 * q ^ 51 + 27 * q ^ 52) - 26 * q ^ 53) + 12 * q ^ 54) - 3 * q ^ 55, Unknown(), Unknown(), ((((3 - 6 * q ^ 2) + 6 * q ^ 3) - 16 * q ^ 4) + (-36 * j ^ 2 - 38j) * q ^ 5 + (23 * j ^ 2 + 27j) * q ^ 6 + (-2 * j ^ 2 - 4j) * q ^ 7) - 2 * q ^ 8, 0, (-7 * j * q ^ 85 + (-2 * j ^ 2 + 25j) * q ^ 86 + (j ^ 2 - 35j) * q ^ 87 + 17 * j * q ^ 88) - 2 * j * q ^ 89, (((-10 * j * q ^ 85 + 27 * j * q ^ 86) - 26 * j * q ^ 87) + 12 * j * q ^ 88) - 3 * j * q ^ 89, Unknown(), (3 * q ^ 4 - 6 * q ^ 5) + (7 * j ^ 2 + j) * q ^ 6 + 6 * q ^ 7, (-7 * j ^ 2 * q ^ 17 + (27 * j ^ 2 + 2j) * q ^ 18 + (-36 * j ^ 2 - j) * q ^ 19 + 17 * j ^ 2 * q ^ 20) - 2 * j ^ 2 * q ^ 21, Unknown(), (((21 * j * q ^ 34 - 47 * j * q ^ 35) + 36 * j * q ^ 36) - 11 * j * q ^ 37) + j * q ^ 38, -(j ^ 2) * q ^ 36, Unknown(), Unknown(), ((12 * j * q ^ 34 - 22 * j * q ^ 35) + 13 * j * q ^ 36) - 2 * j * q ^ 37, Unknown(), 336 * j ^ 2 * q ^ 17, (3 * j ^ 2 * q ^ 17 - 6 * j ^ 2 * q ^ 18) + (j ^ 2 - j) * q ^ 19, (120 * j ^ 2 * q ^ 17 - 160 * j ^ 2 * q ^ 18) + 56 * j ^ 2 * q ^ 19, Unknown(), ((-34 * j ^ 2 * q ^ 17 + 56 * j ^ 2 * q ^ 18) - 24 * j ^ 2 * q ^ 19) + 2 * j ^ 2 * q ^ 20, ((-72 * j ^ 2 * q ^ 17 + 144 * j ^ 2 * q ^ 18) - 96 * j ^ 2 * q ^ 19) + 24 * j ^ 2 * q ^ 20, (((26 * j ^ 2 * q ^ 17 - 58 * j ^ 2 * q ^ 18) + 48 * j ^ 2 * q ^ 19) - 18 * j ^ 2 * q ^ 20) + 2 * j ^ 2 * q ^ 21, Unknown(), (12 * j ^ 2 * q ^ 17 - 24 * j ^ 2 * q ^ 18) + 16 * j ^ 2 * q ^ 19 + (-2 * j ^ 2 + 2j) * q ^ 20, (((33 * j ^ 2 * q ^ 17 - 83 * j ^ 2 * q ^ 18) + 74 * j ^ 2 * q ^ 19) - 31 * j ^ 2 * q ^ 20) + 5 * j ^ 2 * q ^ 21, ((4 * j ^ 2 * q ^ 17 - 18 * j ^ 2 * q ^ 18) + (33 * j ^ 2 + 2j) * q ^ 19 + (-25 * j ^ 2 - j) * q ^ 20 + 8 * j ^ 2 * q ^ 21) - j ^ 2 * q ^ 22, (18 * j ^ 2 * q ^ 17 - 90 * j ^ 2 * q ^ 19) + 96 * j ^ 2 * q ^ 20 + (-24 * j ^ 2 - 6j) * q ^ 21, (((30 * j ^ 2 * q ^ 17 - 60 * j ^ 2 * q ^ 18) + (-6 * j ^ 2 + 2j) * q ^ 19 + 72 * j ^ 2 * q ^ 20) - 30 * j ^ 2 * q ^ 21) + (-12 * j ^ 2 + 4j) * q ^ 22 + 12 * j ^ 2 * q ^ 23, -3 * j ^ 2 * q ^ 17 + 21 * j ^ 2 * q ^ 19 + (-26 * j ^ 2 + j) * q ^ 20 + (8 * j ^ 2 + j) * q ^ 21, ((-12 * j ^ 2 * q ^ 17 + 6 * j ^ 2 * q ^ 18 + 54 * j ^ 2 * q ^ 19) - 92 * j ^ 2 * q ^ 20) + 52 * j ^ 2 * q ^ 21 + (-12 * j ^ 2 - 6j) * q ^ 22, ((((-19 * j ^ 2 * q ^ 17 + 47 * j ^ 2 * q ^ 18) - 20 * j ^ 2 * q ^ 19) + (-44 * j ^ 2 + 2j) * q ^ 20 + 48 * j ^ 2 * q ^ 21) - 4 * j ^ 2 * q ^ 22) + (-11 * j ^ 2 + 4j) * q ^ 23 + 5 * j ^ 2 * q ^ 24, Unknown(), ((2 * j ^ 2 * q ^ 17 - j ^ 2 * q ^ 18) - 13 * j ^ 2 * q ^ 19) + 24 * j ^ 2 * q ^ 20 + (-14 * j ^ 2 + j) * q ^ 21 + (4 * j ^ 2 + j) * q ^ 22, (j ^ 2 * q ^ 17 - 4 * j ^ 2 * q ^ 19) + 5 * j ^ 2 * q ^ 20 + (-(j ^ 2) + 2j) * q ^ 21, ((j ^ 2 * q ^ 17 - j ^ 2 * q ^ 19) - 4 * j ^ 2 * q ^ 20) + 8 * j ^ 2 * q ^ 21 + (-4 * j ^ 2 - 2j) * q ^ 22, -200 * j ^ 2 * q ^ 17 + 136 * j ^ 2 * q ^ 18, ((((3 * j ^ 2 * q ^ 17 - 6 * j ^ 2 * q ^ 19) + 6 * j ^ 2 * q ^ 20) - 16 * j ^ 2 * q ^ 21) + (38 * j ^ 2 + 2j) * q ^ 22 + (-27 * j ^ 2 - 4j) * q ^ 23 + (4 * j ^ 2 + 2j) * q ^ 24) - 2 * j ^ 2 * q ^ 25, -18 * j ^ 2 * q ^ 17 + 30 * j ^ 2 * q ^ 18 + (-6 * j ^ 2 + 2j) * q ^ 19, (90 * j ^ 2 * q ^ 17 - 110 * j ^ 2 * q ^ 18) + 26 * j ^ 2 * q ^ 19, Unknown(), ((-55 * j ^ 2 * q ^ 17 + 100 * j ^ 2 * q ^ 18) - 60 * j ^ 2 * q ^ 19) + 11 * j ^ 2 * q ^ 20, (3 * j ^ 2 * q ^ 21 - 6 * j ^ 2 * q ^ 22) + (-(j ^ 2) + 6j) * q ^ 23 + 6 * j ^ 2 * q ^ 24, Unknown(), Unknown(), ((12 * q ^ 51 - 22 * q ^ 52) + 13 * q ^ 53) - 2 * q ^ 54, Unknown(), 0, (((21 * j ^ 2 * q ^ 17 - 47 * j ^ 2 * q ^ 18) + 36 * j ^ 2 * q ^ 19) - 11 * j ^ 2 * q ^ 20) + j ^ 2 * q ^ 21, Unknown(), 336 * j * q ^ 34, Unknown(), (120 * j * q ^ 34 - 160 * j * q ^ 35) + 56 * j * q ^ 36, ((-34 * j * q ^ 34 + 56 * j * q ^ 35) - 24 * j * q ^ 36) + 2 * j * q ^ 37, ((-72 * j * q ^ 34 + 144 * j * q ^ 35) - 96 * j * q ^ 36) + 24 * j * q ^ 37, (5 * j * q ^ 34 + 3 * j * q ^ 35 + (2 * j ^ 2 - 20j) * q ^ 36 + 19 * j * q ^ 37) - 5 * j * q ^ 38, ((4 * j * q ^ 34 - 18 * j * q ^ 35) + (-2 * j ^ 2 + 31j) * q ^ 36 + (j ^ 2 - 24j) * q ^ 37 + 8 * j * q ^ 38) - j * q ^ 39, Unknown(), (18 * j * q ^ 34 - 90 * j * q ^ 36) + 96 * j * q ^ 37 + (6 * j ^ 2 - 18j) * q ^ 38, ((-12 * j * q ^ 34 + 6 * j * q ^ 35 + 54 * j * q ^ 36) - 92 * j * q ^ 37) + 52 * j * q ^ 38 + (6 * j ^ 2 - 6j) * q ^ 39, -3 * j * q ^ 34 + 21 * j * q ^ 36 + (-(j ^ 2) - 27j) * q ^ 37 + (-(j ^ 2) + 7j) * q ^ 38, (j * q ^ 34 - 4 * j * q ^ 36) + 5 * j * q ^ 37 + (-2 * j ^ 2 - 3j) * q ^ 38, -200 * j * q ^ 34 + 136 * j * q ^ 35, (90 * j * q ^ 34 - 110 * j * q ^ 35) + 26 * j * q ^ 36, ((-55 * j * q ^ 34 + 100 * j * q ^ 35) - 60 * j * q ^ 36) + 11 * j * q ^ 37, (3 * j * q ^ 38 - 6 * j * q ^ 39) + (-6 * j ^ 2 - 7j) * q ^ 40 + 6 * j * q ^ 41, (-7 * j * q ^ 34 + (-2 * j ^ 2 + 25j) * q ^ 35 + (j ^ 2 - 35j) * q ^ 36 + 17 * j * q ^ 37) - 2 * j * q ^ 38, ((12 * j ^ 2 * q ^ 68 - 22 * j ^ 2 * q ^ 69) + 13 * j ^ 2 * q ^ 70) - 2 * j ^ 2 * q ^ 71, Unknown(), 336 * q ^ 51, ((((((11 * q ^ 12 - 4 * q ^ 13) - 8 * q ^ 15) + 4 * q ^ 16 + 24 * q ^ 18) - 16 * q ^ 19) + 45 * q ^ 20) - 68 * q ^ 21) + 28 * q ^ 22, Unknown(), ((-34 * q ^ 51 + 56 * q ^ 52) - 24 * q ^ 53) + 2 * q ^ 54, Unknown(), Unknown(), (18 * q ^ 51 - 90 * q ^ 53) + 96 * q ^ 54 + (18 * j ^ 2 + 24j) * q ^ 55, Unknown(), -3 * q ^ 51 + 21 * q ^ 53 + (27 * j ^ 2 + 26j) * q ^ 54 + (-7 * j ^ 2 - 8j) * q ^ 55, (q ^ 51 - 4 * q ^ 53) + 5 * q ^ 54 + (3 * j ^ 2 + j) * q ^ 55, (((-15 * q ^ 12 + 12 * q ^ 15) - 40 * q ^ 18) - 81 * q ^ 20) + 60 * q ^ 21, (90 * q ^ 51 - 110 * q ^ 52) + 26 * q ^ 53, Unknown(), (-7 * q ^ 51 + (-25 * j ^ 2 - 27j) * q ^ 52 + (35 * j ^ 2 + 36j) * q ^ 53 + 17 * q ^ 54) - 2 * q ^ 55, 336 * j ^ 2 * q ^ 68, Unknown(), (120 * j ^ 2 * q ^ 68 - 160 * j ^ 2 * q ^ 69) + 56 * j ^ 2 * q ^ 70, (((-10 * j ^ 2 * q ^ 17 + 27 * j ^ 2 * q ^ 18) - 26 * j ^ 2 * q ^ 19) + 12 * j ^ 2 * q ^ 20) - 3 * j ^ 2 * q ^ 21, -200 * j ^ 2 * q ^ 68 + 136 * j ^ 2 * q ^ 69, (90 * j ^ 2 * q ^ 68 - 110 * j ^ 2 * q ^ 69) + 26 * j ^ 2 * q ^ 70, Unknown(), ((-34 * j ^ 2 * q ^ 68 + 56 * j ^ 2 * q ^ 69) - 24 * j ^ 2 * q ^ 70) + 2 * j ^ 2 * q ^ 71, 336 * j * q ^ 85, Unknown(), (120 * j * q ^ 85 - 160 * j * q ^ 86) + 56 * j * q ^ 87, -200 * j * q ^ 85 + 136 * j * q ^ 86, (90 * j * q ^ 85 - 110 * j * q ^ 86) + 26 * j * q ^ 87, Unknown(), ((-34 * j * q ^ 85 + 56 * j * q ^ 86) - 24 * j * q ^ 87) + 2 * j * q ^ 88]
            end
        f92 = function (q, j)
                return [336, -160 + 176q, (50 - 110q) + 66 * q ^ 2, (72 - 176q) + 88 * q ^ 2, ((-20 + 82q) - 94 * q ^ 2) + 30 * q ^ 3, ((-10 + 40q) - 48 * q ^ 2) + 18 * q ^ 3, -6 + (-12 * j ^ 2 - 20j) * q + (24 * j ^ 2 + 18j) * q ^ 2 + 12 * q ^ 3, ((-30 + 126q) - 138 * q ^ 2) + 42 * q ^ 3, 6 + (18 * j ^ 2 + 24j) * q + (-20 * j ^ 2 - 12j) * q ^ 2, (((-4 + (-12 * j ^ 2 - 14j) * q) - 16 * q ^ 2) + (-10 * j ^ 2 - 6j) * q ^ 3) - 2 * q ^ 4, (((4 - 32q) + 64 * q ^ 2) - 44 * q ^ 3) + 8 * q ^ 4, (((1 - 9q) + 21 * q ^ 2) - 15 * q ^ 3) + 3 * q ^ 4, (j ^ 2 + 3j) * q + (-3 * j ^ 2 - 4j) * q ^ 2 + (5 * j ^ 2 + 3j) * q ^ 3 + q ^ 4, (-5 + (-19 * j ^ 2 - 23j) * q + (34 * j ^ 2 + 33j) * q ^ 2 + (-25 * j ^ 2 - 19j) * q ^ 3) - 6 * q ^ 4, (((3 - 24q) + 48 * q ^ 2) - 34 * q ^ 3) + 7 * q ^ 4, 2 + (8 * j ^ 2 + 12j) * q + (-20 * j ^ 2 - 22j) * q ^ 2 + (20 * j ^ 2 + 16j) * q ^ 3 + 4 * q ^ 4, (((7 - 49q) + 94 * q ^ 2) - 63 * q ^ 3) + 13 * q ^ 4, (((4q - 16 * q ^ 2) + 20 * q ^ 3) - 8 * q ^ 4) + q ^ 5, (2 + (12 * j ^ 2 + 13j) * q + (-26 * j ^ 2 - 28j) * q ^ 2 + (30 * j ^ 2 + 27j) * q ^ 3 + (-16 * j ^ 2 - 13j) * q ^ 4) - 3 * q ^ 5, j * q ^ 2 + q ^ 3 + j ^ 2 * q ^ 4, Unknown(), (1 + (6 * j ^ 2 + 7j) * q + (-16 * j ^ 2 - 17j) * q ^ 2 + (20 * j ^ 2 + 18j) * q ^ 3 + (-11 * j ^ 2 - 9j) * q ^ 4) - 2 * q ^ 5, Unknown(), (((7q - 26 * q ^ 2) + 31 * q ^ 3) - 13 * q ^ 4) + q ^ 5, ((q - 6 * q ^ 2) + 8 * q ^ 3) - 3 * q ^ 4, -j * q + (2 * j ^ 2 + 4j) * q ^ 2 + (-5 * j ^ 2 - 4j) * q ^ 3 + (3 * j ^ 2 + 2j) * q ^ 4, 6 + (60 * j ^ 2 + 36j) * q ^ 2 + 96 * q ^ 3 + (54 * j ^ 2 + 72j) * q ^ 4 + 12 * q ^ 6, 0, Unknown(), (-3 * j ^ 2 - j) * q + (11 * j ^ 2 + 9j) * q ^ 2 + 21 * q ^ 3 + (15 * j ^ 2 + 17j) * q ^ 4 + (-3 * j ^ 2 - 5j) * q ^ 5 + q ^ 6, 0, 18 + (24 * j ^ 2 + 40j) * q + (24 * j ^ 2 + 18j) * q ^ 2 + 72 * q ^ 3 + (12 * j ^ 2 + 20j) * q ^ 4 + (48 * j ^ 2 + 36j) * q ^ 5 + 24 * q ^ 6, Unknown(), Unknown(), ((-2 + 4q + (-24 * j ^ 2 - 12j) * q ^ 2 + (84 * j ^ 2 + 72j) * q ^ 3 + (-78 * j ^ 2 - 84j) * q ^ 4 + (24 * j ^ 2 + 36j) * q ^ 5) - 8 * q ^ 6) + 4 * q ^ 7, ((q ^ 2 - 3 * q ^ 3) + 4 * q ^ 4 + (j ^ 2 + 2j) * q ^ 5) - j * q ^ 6, -8 + (-18 * j ^ 2 - 26j) * q + (4 * j ^ 2 + 14j) * q ^ 2 + (48 * j ^ 2 + 44j) * q ^ 3 + (-40 * j ^ 2 - 44j) * q ^ 4 + (-16 * j ^ 2 - 8j) * q ^ 5 + (38 * j ^ 2 + 30j) * q ^ 6 + 10 * q ^ 7, (3 * j ^ 2 + 4j) * q ^ 2 + 8 * q ^ 3 + (8 * j ^ 2 + 6j) * q ^ 4 + (-5 * j ^ 2 - 3j) * q ^ 5 + j ^ 2 * q ^ 6, (j ^ 2 * q + (-6 * j ^ 2 - 4j) * q ^ 2 + (17 * j ^ 2 + 16j) * q ^ 3 + (-20 * j ^ 2 - 21j) * q ^ 4 + (8 * j ^ 2 + 10j) * q ^ 5) - j * q ^ 6, (-7 * j ^ 2 - 3j) * q ^ 2 + (19 * j ^ 2 + 14j) * q ^ 3 + (-19 * j ^ 2 - 24j) * q ^ 4 + (8 * j ^ 2 + 12j) * q ^ 5 + q ^ 7, Unknown(), -5 + (-14 * j ^ 2 - 18j) * q + (8 * j ^ 2 + 16j) * q ^ 2 + (6 * j ^ 2 + 5j) * q ^ 3 + (6 * j ^ 2 - 3j) * q ^ 4 + (-33 * j ^ 2 - 21j) * q ^ 5 + (28 * j ^ 2 + 24j) * q ^ 6 + 8 * q ^ 7, Unknown(), Unknown(), (((1 - 2q) + (-(j ^ 2) - 3j) * q ^ 2 + (-2 * j ^ 2 - j) * q ^ 3) - 4 * j ^ 2 * q ^ 4) + (13 * j ^ 2 + 6j) * q ^ 5 + (-12 * j ^ 2 - 8j) * q ^ 6 + (8 * j ^ 2 + 6j) * q ^ 7 + 2 * q ^ 8, ((-3 * j ^ 2 - 2j) * q ^ 3 - 4 * q ^ 4) + (-2 * j ^ 2 - 3j) * q ^ 5 + 2 * j * q ^ 6, (((-(j ^ 2) * q ^ 110 + 9 * j ^ 2 * q ^ 111) - 21 * j ^ 2 * q ^ 112) + 15 * j ^ 2 * q ^ 113) - 3 * j ^ 2 * q ^ 114, (((-j * q ^ 22 + 9 * j * q ^ 23) - 21 * j * q ^ 24) + 15 * j * q ^ 25) - 3 * j * q ^ 26, (2 * j ^ 2 * q ^ 2 + (-13 * j ^ 2 - 9j) * q ^ 3 + (22 * j ^ 2 + 21j) * q ^ 4 + (-13 * j ^ 2 - 18j) * q ^ 5 + (3 * j ^ 2 + 5j) * q ^ 6) - q ^ 7, Unknown(), Unknown(), ((2 + (7 * j ^ 2 + 9j) * q + (-11 * j ^ 2 - 15j) * q ^ 2 + (3 * j ^ 2 + 7j) * q ^ 3) - 3 * j ^ 2 * q ^ 4) + (21 * j ^ 2 + 12j) * q ^ 5 + (-29 * j ^ 2 - 21j) * q ^ 6 + (17 * j ^ 2 + 15j) * q ^ 7 + 3 * q ^ 8, Unknown(), Unknown(), Unknown(), (((-4 * j * q ^ 23 + 16 * j * q ^ 24) - 20 * j * q ^ 25) + 8 * j * q ^ 26) - j * q ^ 27, Unknown(), Unknown(), (1 - 2q) + (5 * j ^ 2 + 4j) * q ^ 2 + (-12 * j ^ 2 - 16j) * q ^ 3 + (11 * j ^ 2 + 18j) * q ^ 4 + 12 * q ^ 5 + (24 * j ^ 2 + 16j) * q ^ 6 + (-20 * j ^ 2 - 16j) * q ^ 7 + (j ^ 2 + 3j) * q ^ 8 + (6 * j ^ 2 + 4j) * q ^ 9 + 2 * q ^ 10, 0, Unknown(), Unknown(), 0, (-3 * j ^ 2 * q ^ 4 - 8 * q ^ 5) + (-5 * j ^ 2 - 7j) * q ^ 6 + j * q ^ 8, Unknown(), Unknown(), Unknown(), (((4 * j ^ 2 * q ^ 45 - 16 * j ^ 2 * q ^ 46) + 20 * j ^ 2 * q ^ 47) - 8 * j ^ 2 * q ^ 48) + j ^ 2 * q ^ 49, Unknown(), Unknown(), (((-7 * q ^ 67 + 26 * q ^ 68) - 31 * q ^ 69) + 13 * q ^ 70) - q ^ 71, Unknown(), Unknown(), (j ^ 2 + 3j) * q ^ 2 + 4 * j ^ 2 * q ^ 3 + (j ^ 2 + 3j) * q ^ 4 + (-24 * j ^ 2 - 22j) * q ^ 5 + (37 * j ^ 2 + 33j) * q ^ 6 + (-30 * j ^ 2 - 28j) * q ^ 7 + (5 * j ^ 2 + 3j) * q ^ 8 + (2 * j ^ 2 + 6j) * q ^ 9 + (5 * j ^ 2 + 3j) * q ^ 10 + q ^ 12, 0, 5 * j ^ 2 * q ^ 110 + (-23 * j ^ 2 - 4j) * q ^ 111 + (33 * j ^ 2 - j) * q ^ 112 + (-19 * j ^ 2 + 6j) * q ^ 113 + 6 * j ^ 2 * q ^ 114, (((-7 * j ^ 2 * q ^ 111 + 26 * j ^ 2 * q ^ 112) - 31 * j ^ 2 * q ^ 113) + 13 * j ^ 2 * q ^ 114) - j ^ 2 * q ^ 115, Unknown(), ((-2 * j ^ 2 - 5j) * q ^ 6 - 9 * j ^ 2 * q ^ 7) + 9 * j * q ^ 8 + (3 * j ^ 2 - 6j) * q ^ 9 + 6 * q ^ 10, 5 * j * q ^ 22 + (4 * j ^ 2 - 19j) * q ^ 23 + (j ^ 2 + 34j) * q ^ 24 + (-6 * j ^ 2 - 25j) * q ^ 25 + 6 * j * q ^ 26, Unknown(), (((3 * j ^ 2 * q ^ 44 - 24 * j ^ 2 * q ^ 45) + 48 * j ^ 2 * q ^ 46) - 34 * j ^ 2 * q ^ 47) + 7 * j ^ 2 * q ^ 48, -j * q ^ 46, Unknown(), Unknown(), (((j ^ 2 * q ^ 44 - 9 * j ^ 2 * q ^ 45) + 21 * j ^ 2 * q ^ 46) - 15 * j ^ 2 * q ^ 47) + 3 * j ^ 2 * q ^ 48, Unknown(), -336 * j * q ^ 22, ((-2 * j ^ 2 + j) * q ^ 23 + (j ^ 2 - 3j) * q ^ 24 + (2 * j ^ 2 + 5j) * q ^ 25) - j * q ^ 26, (-72 * j * q ^ 22 + 176 * j * q ^ 23) - 88 * j * q ^ 24, Unknown(), ((10 * j * q ^ 22 - 40 * j * q ^ 23) + 48 * j * q ^ 24) - 18 * j * q ^ 25, ((30 * j * q ^ 22 - 126 * j * q ^ 23) + 138 * j * q ^ 24) - 42 * j * q ^ 25, (((-4 * j * q ^ 22 + 32 * j * q ^ 23) - 64 * j * q ^ 24) + 44 * j * q ^ 25) - 8 * j * q ^ 26, Unknown(), (-2 * j * q ^ 22 + (-4 * j ^ 2 + 8j) * q ^ 23 + (2 * j ^ 2 - 20j) * q ^ 24 + (4 * j ^ 2 + 20j) * q ^ 25) - 4 * j * q ^ 26, (((-7 * j * q ^ 22 + 49 * j * q ^ 23) - 94 * j * q ^ 24) + 63 * j * q ^ 25) - 13 * j * q ^ 26, -2 * j * q ^ 22 + (-(j ^ 2) + 12j) * q ^ 23 + (2 * j ^ 2 - 26j) * q ^ 24 + (3 * j ^ 2 + 30j) * q ^ 25 + (-3 * j ^ 2 - 16j) * q ^ 26 + 3 * j * q ^ 27, (((-6 * j * q ^ 22 + (24 * j ^ 2 + 60j) * q ^ 24) - 96 * j * q ^ 25) + (-18 * j ^ 2 + 54j) * q ^ 26) - 12 * j * q ^ 28, (((-18 * j * q ^ 22 + (-16 * j ^ 2 + 24j) * q ^ 23 + (6 * j ^ 2 + 24j) * q ^ 24) - 72 * j * q ^ 25) + (-8 * j ^ 2 + 12j) * q ^ 26 + (12 * j ^ 2 + 48j) * q ^ 27) - 24 * j * q ^ 28, ((-4 * j ^ 2 - 7j) * q ^ 24 + (5 * j ^ 2 + 19j) * q ^ 25 + (5 * j ^ 2 - 19j) * q ^ 26 + (-4 * j ^ 2 + 8j) * q ^ 27) - j * q ^ 29, ((2 * j * q ^ 22 - 4 * j * q ^ 23) + (-12 * j ^ 2 - 24j) * q ^ 24 + (12 * j ^ 2 + 84j) * q ^ 25 + (6 * j ^ 2 - 78j) * q ^ 26 + (-12 * j ^ 2 + 24j) * q ^ 27 + 8 * j * q ^ 28) - 4 * j * q ^ 29, (8 * j * q ^ 22 + (8 * j ^ 2 - 18j) * q ^ 23 + (-10 * j ^ 2 + 4j) * q ^ 24 + (4 * j ^ 2 + 48j) * q ^ 25 + (4 * j ^ 2 - 40j) * q ^ 26 + (-8 * j ^ 2 - 16j) * q ^ 27 + (8 * j ^ 2 + 38j) * q ^ 28) - 10 * j * q ^ 29, Unknown(), -2 * q ^ 24 + (-4 * j ^ 2 - 13j) * q ^ 25 + (j ^ 2 + 22j) * q ^ 26 + (5 * j ^ 2 - 13j) * q ^ 27 + (-2 * j ^ 2 + 3j) * q ^ 28 + j * q ^ 29, ((-(j ^ 2) - 3j) * q ^ 25 + 4 * j * q ^ 26 + (j ^ 2 - 2j) * q ^ 27) - 2 * j ^ 2 * q ^ 28, (3 * q ^ 26 + 8 * j * q ^ 27 + (2 * j ^ 2 - 5j) * q ^ 28) - j ^ 2 * q ^ 30, 160 * j * q ^ 22 - 176 * j * q ^ 23, (((-2 * j ^ 2 + j) * q ^ 24 - 4 * q ^ 25) + (-2 * j ^ 2 + j) * q ^ 26 + (-2 * j ^ 2 - 24j) * q ^ 27 + (4 * j ^ 2 + 37j) * q ^ 28 + (-2 * j ^ 2 - 30j) * q ^ 29 + (2 * j ^ 2 + 5j) * q ^ 30 + (-4 * j ^ 2 + 2j) * q ^ 31 + (2 * j ^ 2 + 5j) * q ^ 32) - j * q ^ 34, (6 * j * q ^ 22 + (8 * j ^ 2 - 12j) * q ^ 23 + (6 * j ^ 2 + 24j) * q ^ 24) - 12 * j * q ^ 25, (-50 * j * q ^ 22 + 110 * j * q ^ 23) - 66 * j * q ^ 24, Unknown(), ((20 * j * q ^ 22 - 82 * j * q ^ 23) + 94 * j * q ^ 24) - 30 * j * q ^ 25, ((((3 * j ^ 2 - 2j) * q ^ 28 + 9 * q ^ 29) - 9 * j ^ 2 * q ^ 30) + (9 * j ^ 2 + 3j) * q ^ 31) - 6 * j * q ^ 32, Unknown(), Unknown(), (((-(q ^ 66) + 9 * q ^ 67) - 21 * q ^ 68) + 15 * q ^ 69) - 3 * q ^ 70, Unknown(), 0, (((-3 * j * q ^ 22 + 24 * j * q ^ 23) - 48 * j * q ^ 24) + 34 * j * q ^ 25) - 7 * j * q ^ 26, Unknown(), 336 * j ^ 2 * q ^ 44, Unknown(), (72 * j ^ 2 * q ^ 44 - 176 * j ^ 2 * q ^ 45) + 88 * j ^ 2 * q ^ 46, ((-10 * j ^ 2 * q ^ 44 + 40 * j ^ 2 * q ^ 45) - 48 * j ^ 2 * q ^ 46) + 18 * j ^ 2 * q ^ 47, ((-30 * j ^ 2 * q ^ 44 + 126 * j ^ 2 * q ^ 45) - 138 * j ^ 2 * q ^ 46) + 42 * j ^ 2 * q ^ 47, (((-4 * j ^ 2 * q ^ 44 + (14 * j ^ 2 + 2j) * q ^ 45) - 16 * j ^ 2 * q ^ 46) + (6 * j ^ 2 - 4j) * q ^ 47) - 2 * j ^ 2 * q ^ 48, (2 * j ^ 2 * q ^ 44 + (-13 * j ^ 2 - j) * q ^ 45 + (28 * j ^ 2 + 2j) * q ^ 46 + (-27 * j ^ 2 + 3j) * q ^ 47 + (13 * j ^ 2 - 3j) * q ^ 48) - 3 * j ^ 2 * q ^ 49, Unknown(), 6 * j ^ 2 * q ^ 44 + (-36 * j ^ 2 + 24j) * q ^ 46 + 96 * j ^ 2 * q ^ 47 + (-72 * j ^ 2 - 18j) * q ^ 48 + 12 * j ^ 2 * q ^ 50, ((-2 * j ^ 2 * q ^ 44 + 4 * j ^ 2 * q ^ 45 + (12 * j ^ 2 - 12j) * q ^ 46 + (-72 * j ^ 2 + 12j) * q ^ 47 + (84 * j ^ 2 + 6j) * q ^ 48 + (-36 * j ^ 2 - 12j) * q ^ 49) - 8 * j ^ 2 * q ^ 50) + 4 * j ^ 2 * q ^ 51, (3 * j ^ 2 - 4j) * q ^ 46 + (-14 * j ^ 2 + 5j) * q ^ 47 + (24 * j ^ 2 + 5j) * q ^ 48 + (-12 * j ^ 2 - 4j) * q ^ 49 + j ^ 2 * q ^ 51, ((2 * j ^ 2 - j) * q ^ 47 - 4 * j ^ 2 * q ^ 48) + (3 * j ^ 2 + j) * q ^ 49 + 2 * q ^ 50, -160 * j ^ 2 * q ^ 44 + 176 * j ^ 2 * q ^ 45, (50 * j ^ 2 * q ^ 44 - 110 * j ^ 2 * q ^ 45) + 66 * j ^ 2 * q ^ 46, ((-20 * j ^ 2 * q ^ 44 + 82 * j ^ 2 * q ^ 45) - 94 * j ^ 2 * q ^ 46) + 30 * j ^ 2 * q ^ 47, ((5 * j ^ 2 + 3j) * q ^ 50 - 9 * j * q ^ 51) + 9 * q ^ 52 + (6 * j ^ 2 + 9j) * q ^ 53 + 6 * j ^ 2 * q ^ 54, (-5 * j ^ 2 * q ^ 44 + (23 * j ^ 2 + 4j) * q ^ 45 + (-33 * j ^ 2 + j) * q ^ 46 + (19 * j ^ 2 - 6j) * q ^ 47) - 6 * j ^ 2 * q ^ 48, (((j * q ^ 88 - 9 * j * q ^ 89) + 21 * j * q ^ 90) - 15 * j * q ^ 91) + 3 * j * q ^ 92, Unknown(), -336 * q ^ 66, ((((((((6 * q ^ 18 - 4 * q ^ 19) + 45 * q ^ 20) - 60 * q ^ 21) + 21 * q ^ 22 + 21 * q ^ 24) - 60 * q ^ 25) + 45 * q ^ 26 + 12 * q ^ 27) - 18 * q ^ 28) - 8 * q ^ 30) + 16 * q ^ 31, Unknown(), ((10 * q ^ 66 - 40 * q ^ 67) + 48 * q ^ 68) - 18 * q ^ 69, Unknown(), Unknown(), (((-6 * q ^ 66 + (-60 * j ^ 2 - 36j) * q ^ 68) - 96 * q ^ 69) + (-54 * j ^ 2 - 72j) * q ^ 70) - 12 * q ^ 72, Unknown(), ((7 * j ^ 2 + 3j) * q ^ 68 + (-19 * j ^ 2 - 14j) * q ^ 69 + (19 * j ^ 2 + 24j) * q ^ 70 + (-8 * j ^ 2 - 12j) * q ^ 71) - q ^ 73, ((3 * j ^ 2 + 2j) * q ^ 69 + 4 * q ^ 70 + (2 * j ^ 2 + 3j) * q ^ 71) - 2 * j * q ^ 72, (((((-10 * q ^ 18 - 81 * q ^ 20) + 45 * q ^ 21) - 45 * q ^ 24) + 81 * q ^ 25) - 30 * q ^ 27) + 24 * q ^ 30, (-50 * q ^ 66 + 110 * q ^ 67) - 66 * q ^ 68, Unknown(), 5 * q ^ 66 + (19 * j ^ 2 + 23j) * q ^ 67 + (-34 * j ^ 2 - 33j) * q ^ 68 + (25 * j ^ 2 + 19j) * q ^ 69 + 6 * q ^ 70, 336 * j * q ^ 88, Unknown(), (72 * j * q ^ 88 - 176 * j * q ^ 89) + 88 * j * q ^ 90, (((-7 * j * q ^ 23 + 26 * j * q ^ 24) - 31 * j * q ^ 25) + 13 * j * q ^ 26) - j * q ^ 27, -160 * j * q ^ 88 + 176 * j * q ^ 89, (50 * j * q ^ 88 - 110 * j * q ^ 89) + 66 * j * q ^ 90, Unknown(), ((-10 * j * q ^ 88 + 40 * j * q ^ 89) - 48 * j * q ^ 90) + 18 * j * q ^ 91, -336 * j ^ 2 * q ^ 110, Unknown(), (-72 * j ^ 2 * q ^ 110 + 176 * j ^ 2 * q ^ 111) - 88 * j ^ 2 * q ^ 112, 160 * j ^ 2 * q ^ 110 - 176 * j ^ 2 * q ^ 111, (-50 * j ^ 2 * q ^ 110 + 110 * j ^ 2 * q ^ 111) - 66 * j ^ 2 * q ^ 112, Unknown(), ((10 * j ^ 2 * q ^ 110 - 40 * j ^ 2 * q ^ 111) + 48 * j ^ 2 * q ^ 112) - 18 * j ^ 2 * q ^ 113]
            end
        f96 = function (q, j, e)
                local v
                v = GetRoot(q, 2) * e
                return [384, -160 + 224q, (36 - 124q) + 100 * q ^ 2, (64 - 192q) + 128 * q ^ 2, ((-13 + 74q) - 118 * q ^ 2) + 55 * q ^ 3, ((-4 + 32q) - 64 * q ^ 2) + 36 * q ^ 3, 12q + (36 * j ^ 2 + 28j) * q ^ 2 + 24 * q ^ 3, ((-24 + 120q) - 168 * q ^ 2) + 72 * q ^ 3, 12 + (28 * j ^ 2 + 36j) * q + 12 * q ^ 2 + 12 * q ^ 3, -5 + (-19 * j ^ 2 - 23j) * q + (20 * j ^ 2 + 24j) * q ^ 2 + q ^ 3 + 5 * q ^ 4, (((2 - 22q) + 64 * q ^ 2) - 66 * q ^ 3) + 22 * q ^ 4, ((-4q + 19 * q ^ 2) - 26 * q ^ 3) + 10 * q ^ 4, (-5 * j ^ 2 - 3j) * q ^ 2 + (10 * j ^ 2 + 6j) * q ^ 3 + 4 * q ^ 4, (-3 + (-19 * j ^ 2 - 23j) * q + (37 * j ^ 2 + 43j) * q ^ 2 + 27 * q ^ 3) - 5 * q ^ 4, (((1 - 15q) + 48 * q ^ 2) - 53 * q ^ 3) + 19 * q ^ 4, -4q + (-24 * j ^ 2 - 20j) * q ^ 2 + (32 * j ^ 2 + 28j) * q ^ 3 + 12 * q ^ 4, (((4 - 38q) + 96 * q ^ 2) - 92 * q ^ 3) + 30 * q ^ 4, (((q - 11 * q ^ 2) + 23 * q ^ 3) - 19 * q ^ 4) + 5 * q ^ 5, (1 + (9 * j ^ 2 + 11j) * q + (-27 * j ^ 2 - 32j) * q ^ 2 + (33 * j ^ 2 + 36j) * q ^ 3 + 18 * q ^ 4) - 3 * q ^ 5, (-2 * j ^ 2 - j) * q ^ 3 + (2 * j ^ 2 + j) * q ^ 4, Unknown(), ((3 * j ^ 2 + 4j) * q + (-14 * j ^ 2 - 17j) * q ^ 2 + (23 * j ^ 2 + 25j) * q ^ 3 + 16 * q ^ 4) - 4 * q ^ 5, Unknown(), (((3q - 19 * q ^ 2) + 36 * q ^ 3) - 27 * q ^ 4) + 7 * q ^ 5, ((-3 * q ^ 2 + 9 * q ^ 3) - 8 * q ^ 4) + 2 * q ^ 5, (2 * j ^ 2 + j) * q ^ 2 + (-8 * j ^ 2 - 5j) * q ^ 3 + (7 * j ^ 2 + 5j) * q ^ 4 + 2 * q ^ 5, -36 * q ^ 2 + 96 * q ^ 3 + (84 * j ^ 2 + 108j) * q ^ 4 + 24 * q ^ 6, j * v ^ 7, Unknown(), -4 * q ^ 2 + 20 * q ^ 3 + (26 * j ^ 2 + 30j) * q ^ 4 + (-6 * j ^ 2 - 10j) * q ^ 5 + 4 * q ^ 6, j ^ 2 * v ^ 35, (((12 - 24q) + (36 * j ^ 2 + 28j) * q ^ 2 + 72 * q ^ 3) - 12 * q ^ 4) + (72 * j ^ 2 + 56j) * q ^ 5 + 36 * q ^ 6, Unknown(), Unknown(), (((12 * q ^ 2 - 64 * q ^ 3) + (-92 * j ^ 2 - 104j) * q ^ 4 + (48 * j ^ 2 + 60j) * q ^ 5) - 12 * q ^ 6) + 12 * q ^ 7, (((2 * j ^ 2 + j) * q ^ 3 + (-6 * j ^ 2 - 5j) * q ^ 4) - 6 * q ^ 5) + (-(j ^ 2) - 2j) * q ^ 6, -5 + 15q + 4 * j * q ^ 2 + (50 * j ^ 2 + 46j) * q ^ 3 + 46 * q ^ 4 + (-24 * j ^ 2 - 16j) * q ^ 5 + (57 * j ^ 2 + 49j) * q ^ 6 + 19 * q ^ 7, (2 * j ^ 2 + 3j) * q ^ 2 + (-7 * j ^ 2 - 10j) * q ^ 3 + (7 * j ^ 2 + 10j) * q ^ 4 + (-3 * j ^ 2 - 2j) * q ^ 5 + j ^ 2 * q ^ 6, (q ^ 2 - 11 * q ^ 3) + (-24 * j ^ 2 - 26j) * q ^ 4 + (17 * j ^ 2 + 21j) * q ^ 5 + (-(j ^ 2) - 3j) * q ^ 6 + 2 * q ^ 7, q ^ 2 + (11 * j ^ 2 + 9j) * q ^ 3 + (-25 * j ^ 2 - 27j) * q ^ 4 + (19 * j ^ 2 + 27j) * q ^ 5 + 4 * q ^ 7, Unknown(), -3 + 8q + (-9 * j ^ 2 - j) * q ^ 2 + (26 * j ^ 2 + 12j) * q ^ 3 + (6 * j ^ 2 + 16j) * q ^ 4 + 53 * q ^ 5 + (52 * j ^ 2 + 44j) * q ^ 6 + 13 * q ^ 7, Unknown(), Unknown(), (6 * j ^ 2 + 3j) * q ^ 2 + (-19 * j ^ 2 - 11j) * q ^ 3 + (15 * j ^ 2 + 4j) * q ^ 4 + (13 * j ^ 2 + 20j) * q ^ 5 + 31 * q ^ 6 + (22 * j ^ 2 + 20j) * q ^ 7 + 4 * q ^ 8, -(j ^ 2) * q ^ 3 + (4 * j ^ 2 + 3j) * q ^ 4 + 6 * q ^ 5 + (4 * j ^ 2 + 5j) * q ^ 6, ((4 * j ^ 2 * v ^ 247 - 19 * j ^ 2 * v ^ 249) + 26 * j ^ 2 * v ^ 251) - 10 * j ^ 2 * v ^ 253, ((4 * j * v ^ 51 - 19 * j * v ^ 53) + 26 * j * v ^ 55) - 10 * j * v ^ 57, ((((-5 * j ^ 2 - 4j) * q ^ 3 - 18 * q ^ 4) + (-23 * j ^ 2 - 28j) * q ^ 5 + (10 * j ^ 2 + 14j) * q ^ 6) - 2 * q ^ 7) + 2 * q ^ 8, Unknown(), Unknown(), ((1 - 4q) - 4 * j * q ^ 2) + (-16 * j ^ 2 - 5j) * q ^ 3 + (10 * j ^ 2 - 2j) * q ^ 4 + (28 * j ^ 2 + 33j) * q ^ 5 + (-52 * j ^ 2 - 48j) * q ^ 6 + (34 * j ^ 2 + 30j) * q ^ 7 + 7 * q ^ 8, Unknown(), Unknown(), Unknown(), (((-j * v ^ 51 + 11 * j * v ^ 53) - 23 * j * v ^ 55) + 19 * j * v ^ 57) - 5 * j * v ^ 59, Unknown(), Unknown(), (((4 * j ^ 2 + 3j) * q ^ 2 + 8 * q ^ 3 + (7 * j ^ 2 + 12j) * q ^ 4 + (-22 * j ^ 2 - 26j) * q ^ 5) - 41 * q ^ 6) + (-26 * j ^ 2 - 22j) * q ^ 7 + (-10 * j ^ 2 - 12j) * q ^ 8 + (18 * j ^ 2 + 16j) * q ^ 9 + 4 * q ^ 10, -(j ^ 2) * q ^ 7, Unknown(), Unknown(), -j * q ^ 14, -4 * q ^ 5 + (-7 * j ^ 2 - 10j) * q ^ 6 + (2 * j ^ 2 + 4j) * q ^ 7 + (j ^ 2 + 2j) * q ^ 8, Unknown(), Unknown(), Unknown(), (((j ^ 2 * q ^ 50 - 11 * j ^ 2 * q ^ 51) + 23 * j ^ 2 * q ^ 52) - 19 * j ^ 2 * q ^ 53) + 5 * j ^ 2 * q ^ 54, Unknown(), Unknown(), (((-3 * v ^ 149 + 19 * v ^ 151) - 36 * v ^ 153) + 27 * v ^ 155) - 7 * v ^ 157, Unknown(), Unknown(), (2 * q ^ 3 - 4 * q ^ 4) + (-14 * j ^ 2 - 18j) * q ^ 5 + (32 * j ^ 2 + 40j) * q ^ 6 + (-38 * j ^ 2 - 42j) * q ^ 7 + (14 * j ^ 2 + 10j) * q ^ 8 + (-2 * j ^ 2 + 6j) * q ^ 9 + (10 * j ^ 2 + 6j) * q ^ 10 + 4 * q ^ 12, v ^ 21, ((3 * j ^ 2 * v ^ 245 + (-23 * j ^ 2 - 4j) * v ^ 247 + (43 * j ^ 2 + 6j) * v ^ 249) - 27 * j ^ 2 * v ^ 251) + 5 * j ^ 2 * v ^ 253, (((-3 * j ^ 2 * v ^ 247 + 19 * j ^ 2 * v ^ 249) - 36 * j ^ 2 * v ^ 251) + 27 * j ^ 2 * v ^ 253) - 7 * j ^ 2 * v ^ 255, Unknown(), ((8 * v ^ 15 + 9 * j * q ^ 8 + (j ^ 2 - 11j) * q ^ 9 + 3 * q ^ 10) - 3 * q ^ 11) + (-(j ^ 2) + 2j) * q ^ 12, ((3 * j * v ^ 49 + (4 * j ^ 2 - 19j) * v ^ 51 + (-6 * j ^ 2 + 37j) * v ^ 53) - 27 * j * v ^ 55) + 5 * j * v ^ 57, Unknown(), (((j ^ 2 * q ^ 49 - 15 * j ^ 2 * q ^ 50) + 48 * j ^ 2 * q ^ 51) - 53 * j ^ 2 * q ^ 52) + 19 * j ^ 2 * q ^ 53, (-(j ^ 2) * v ^ 103 - j * q ^ 52) + j * q ^ 53, Unknown(), Unknown(), ((-4 * j ^ 2 * q ^ 50 + 19 * j ^ 2 * q ^ 51) - 26 * j ^ 2 * q ^ 52) + 10 * j ^ 2 * q ^ 53, Unknown(), -384 * j * v ^ 49, ((-2 * j ^ 2 - 5j) * v ^ 53 + (4 * j ^ 2 + 10j) * v ^ 55) - 4 * j * v ^ 57, (-64 * j * v ^ 49 + 192 * j * v ^ 51) - 128 * j * v ^ 53, Unknown(), ((4 * j * v ^ 49 - 32 * j * v ^ 51) + 64 * j * v ^ 53) - 36 * j * v ^ 55, ((24 * j * v ^ 49 - 120 * j * v ^ 51) + 168 * j * v ^ 53) - 72 * j * v ^ 55, (((-2 * j * v ^ 49 + 22 * j * v ^ 51) - 64 * j * v ^ 53) + 66 * j * v ^ 55) - 22 * j * v ^ 57, Unknown(), (4 * j * v ^ 51 + (-4 * j ^ 2 - 24j) * v ^ 53 + (4 * j ^ 2 + 32j) * v ^ 55) - 12 * j * v ^ 57, (((-4 * j * v ^ 49 + 38 * j * v ^ 51) - 96 * j * v ^ 53) + 92 * j * v ^ 55) - 30 * j * v ^ 57, ((-j * v ^ 49 + (-2 * j ^ 2 + 9j) * v ^ 51 + (5 * j ^ 2 - 27j) * v ^ 53 + (-3 * j ^ 2 + 33j) * v ^ 55) - 18 * j * v ^ 57) + 3 * j * v ^ 59, ((36 * j * v ^ 53 - 96 * j * v ^ 55) + (-24 * j ^ 2 + 84j) * v ^ 57) - 24 * j * v ^ 61, (((-12 * j * v ^ 49 + 24 * j * v ^ 51 + (8 * j ^ 2 + 36j) * v ^ 53) - 72 * j * v ^ 55) + 12 * j * v ^ 57 + (16 * j ^ 2 + 72j) * v ^ 59) - 36 * j * v ^ 61, (-j * v ^ 53 + (2 * j ^ 2 + 11j) * v ^ 55 + (2 * j ^ 2 - 25j) * v ^ 57 + (-8 * j ^ 2 + 19j) * v ^ 59) - 4 * j * v ^ 63, (-12 * j * v ^ 53 + 64 * j * v ^ 55 + (12 * j ^ 2 - 92j) * v ^ 57 + (-12 * j ^ 2 + 48j) * v ^ 59 + 12 * j * v ^ 61) - 12 * j * v ^ 63, (((((5 * j * v ^ 49 - 15 * j * v ^ 51) - 4 * j ^ 2 * v ^ 53) + (4 * j ^ 2 + 50j) * v ^ 55) - 46 * j * v ^ 57) + (-8 * j ^ 2 - 24j) * v ^ 59 + (8 * j ^ 2 + 57j) * v ^ 61) - 19 * j * v ^ 63, Unknown(), ((-(j ^ 2) - 5j) * v ^ 55 + 18 * j * v ^ 57 + (5 * j ^ 2 - 23j) * v ^ 59 + (-4 * j ^ 2 + 10j) * v ^ 61 + 2 * j * v ^ 63) - 2 * j * v ^ 65, ((v ^ 55 + (j ^ 2 + 4j) * v ^ 57) - 6 * j * v ^ 59) + (-(j ^ 2) + 4j) * v ^ 61, 4 * j * v ^ 59 + (3 * j ^ 2 - 7j) * v ^ 61 + (-2 * j ^ 2 + 2j) * v ^ 63 + (-(j ^ 2) + j) * v ^ 65, 160 * j * v ^ 49 - 224 * j * v ^ 51, (-2 * j * v ^ 55 + 4 * j * v ^ 57 + (4 * j ^ 2 - 14j) * v ^ 59 + (-8 * j ^ 2 + 32j) * v ^ 61 + (4 * j ^ 2 - 38j) * v ^ 63 + (4 * j ^ 2 + 14j) * v ^ 65 + (-8 * j ^ 2 - 2j) * v ^ 67 + (4 * j ^ 2 + 10j) * v ^ 69) - 4 * j * v ^ 73, (-12 * j * v ^ 51 + (8 * j ^ 2 + 36j) * v ^ 53) - 24 * j * v ^ 55, (-36 * j * v ^ 49 + 124 * j * v ^ 51) - 100 * j * v ^ 53, Unknown(), ((13 * j * v ^ 49 - 74 * j * v ^ 51) + 118 * j * v ^ 53) - 55 * j * v ^ 55, (((-8 * j * q ^ 32 - 9 * j ^ 2 * v ^ 65) + (12 * j ^ 2 + j) * v ^ 67) - 3 * j * v ^ 69) + 3 * j * v ^ 71 + (-3 * j ^ 2 - j) * v ^ 73, Unknown(), Unknown(), ((4 * v ^ 149 - 19 * v ^ 151) + 26 * v ^ 153) - 10 * v ^ 155, Unknown(), -(q ^ 21), (((-j * v ^ 49 + 15 * j * v ^ 51) - 48 * j * v ^ 53) + 53 * j * v ^ 55) - 19 * j * v ^ 57, Unknown(), 384 * j ^ 2 * q ^ 49, Unknown(), (64 * j ^ 2 * q ^ 49 - 192 * j ^ 2 * q ^ 50) + 128 * j ^ 2 * q ^ 51, ((-4 * j ^ 2 * q ^ 49 + 32 * j ^ 2 * q ^ 50) - 64 * j ^ 2 * q ^ 51) + 36 * j ^ 2 * q ^ 52, ((-24 * j ^ 2 * q ^ 49 + 120 * j ^ 2 * q ^ 50) - 168 * j ^ 2 * q ^ 51) + 72 * j ^ 2 * q ^ 52, -5 * j ^ 2 * q ^ 49 + (23 * j ^ 2 + 4j) * q ^ 50 + (-24 * j ^ 2 - 4j) * q ^ 51 + j ^ 2 * q ^ 52 + 5 * j ^ 2 * q ^ 53, (j ^ 2 * q ^ 49 + (-11 * j ^ 2 - 2j) * q ^ 50 + (32 * j ^ 2 + 5j) * q ^ 51 + (-36 * j ^ 2 - 3j) * q ^ 52 + 18 * j ^ 2 * q ^ 53) - 3 * j ^ 2 * q ^ 54, Unknown(), -36 * j ^ 2 * q ^ 51 + 96 * j ^ 2 * q ^ 52 + (-108 * j ^ 2 - 24j) * q ^ 53 + 24 * j ^ 2 * q ^ 55, (((12 * j ^ 2 * q ^ 51 - 64 * j ^ 2 * q ^ 52) + (104 * j ^ 2 + 12j) * q ^ 53 + (-60 * j ^ 2 - 12j) * q ^ 54) - 12 * j ^ 2 * q ^ 55) + 12 * j ^ 2 * q ^ 56, j ^ 2 * q ^ 51 + (-9 * j ^ 2 + 2j) * q ^ 52 + (27 * j ^ 2 + 2j) * q ^ 53 + (-27 * j ^ 2 - 8j) * q ^ 54 + 4 * j ^ 2 * q ^ 56, -j * q ^ 52 + (-3 * j ^ 2 + j) * q ^ 53 + 6 * j ^ 2 * q ^ 54 + (-5 * j ^ 2 - j) * q ^ 55, -160 * j ^ 2 * q ^ 49 + 224 * j ^ 2 * q ^ 50, (36 * j ^ 2 * q ^ 49 - 124 * j ^ 2 * q ^ 50) + 100 * j ^ 2 * q ^ 51, ((-13 * j ^ 2 * q ^ 49 + 74 * j ^ 2 * q ^ 50) - 118 * j ^ 2 * q ^ 51) + 55 * j ^ 2 * q ^ 52, ((8 * j ^ 2 * v ^ 113 + 9 * q ^ 57 + (11 * j ^ 2 + 12j) * q ^ 58 + 3 * j ^ 2 * q ^ 59) - 3 * j ^ 2 * q ^ 60) + (-2 * j ^ 2 - 3j) * q ^ 61, (-3 * j ^ 2 * q ^ 49 + (23 * j ^ 2 + 4j) * q ^ 50 + (-43 * j ^ 2 - 6j) * q ^ 51 + 27 * j ^ 2 * q ^ 52) - 5 * j ^ 2 * q ^ 53, ((-4 * j * q ^ 99 + 19 * j * q ^ 100) - 26 * j * q ^ 101) + 10 * j * q ^ 102, Unknown(), -384 * v ^ 147, ((((((((-32 * v ^ 45 + 32 * v ^ 47 + 21 * q ^ 24) - 60 * q ^ 25) + 45 * q ^ 26 + 16 * q ^ 27) - 24 * q ^ 28) + 2 * q ^ 30) - 4 * q ^ 31) - 4 * q ^ 33) + 11 * q ^ 34 + q ^ 36) - 4 * q ^ 37, Unknown(), ((4 * v ^ 147 - 32 * v ^ 149) + 64 * v ^ 151) - 36 * v ^ 153, Unknown(), Unknown(), ((36 * v ^ 151 - 96 * v ^ 153) + (-84 * j ^ 2 - 108j) * v ^ 155) - 24 * v ^ 159, Unknown(), (-(v ^ 151) + (-11 * j ^ 2 - 9j) * v ^ 153 + (25 * j ^ 2 + 27j) * v ^ 155 + (-19 * j ^ 2 - 27j) * v ^ 157) - 4 * v ^ 161, ((j ^ 2 * v ^ 153 + (-4 * j ^ 2 - 3j) * v ^ 155) - 6 * v ^ 157) + (-4 * j ^ 2 - 5j) * v ^ 159, (((((-64 * v ^ 45 - 45 * q ^ 24) + 81 * q ^ 25) - 40 * q ^ 27) - 6 * q ^ 30) + 15 * q ^ 33) - 5 * q ^ 36, (-36 * v ^ 147 + 124 * v ^ 149) - 100 * v ^ 151, Unknown(), ((3 * v ^ 147 + (19 * j ^ 2 + 23j) * v ^ 149 + (-37 * j ^ 2 - 43j) * v ^ 151) - 27 * v ^ 153) + 5 * v ^ 155, 384 * j * q ^ 98, Unknown(), (64 * j * q ^ 98 - 192 * j * q ^ 99) + 128 * j * q ^ 100, (((-3 * j * v ^ 51 + 19 * j * v ^ 53) - 36 * j * v ^ 55) + 27 * j * v ^ 57) - 7 * j * v ^ 59, -160 * j * q ^ 98 + 224 * j * q ^ 99, (36 * j * q ^ 98 - 124 * j * q ^ 99) + 100 * j * q ^ 100, Unknown(), ((-4 * j * q ^ 98 + 32 * j * q ^ 99) - 64 * j * q ^ 100) + 36 * j * q ^ 101, -384 * j ^ 2 * v ^ 245, Unknown(), (-64 * j ^ 2 * v ^ 245 + 192 * j ^ 2 * v ^ 247) - 128 * j ^ 2 * v ^ 249, 160 * j ^ 2 * v ^ 245 - 224 * j ^ 2 * v ^ 247, (-36 * j ^ 2 * v ^ 245 + 124 * j ^ 2 * v ^ 247) - 100 * j ^ 2 * v ^ 249, Unknown(), ((4 * j ^ 2 * v ^ 245 - 32 * j ^ 2 * v ^ 247) + 64 * j ^ 2 * v ^ 249) - 36 * j ^ 2 * v ^ 251]
            end
        f104 = (q->begin
                    [420, -240 + 180q, (102 - 138q) + 42 * q ^ 2, (136 - 208q) + 76 * q ^ 2, ((-57 + 124q) - 84 * q ^ 2) + 17 * q ^ 3, ((-35 + 67q) - 37 * q ^ 2) + 5 * q ^ 3, (-18 + 36q) - 15 * q ^ 2, ((-76 + 180q) - 132 * q ^ 2) + 32 * q ^ 3, ((-6 - 15q) + 36 * q ^ 2) - 12 * q ^ 3, (((3 + 6q) - 26 * q ^ 2) + 23 * q ^ 3) - 5 * q ^ 4, (((23 - 68q) + 67 * q ^ 2) - 28 * q ^ 3) + 3 * q ^ 4, ((10 - 25q) + 20 * q ^ 2) - 5 * q ^ 3, (2 - 7q) + 5 * q ^ 2, (((-7 + 32q) - 46 * q ^ 2) + 24 * q ^ 3) - 3 * q ^ 4, (((19 - 54q) + 51 * q ^ 2) - 18 * q ^ 3) + 2 * q ^ 4, ((10 - 28q) + 25 * q ^ 2) - 6 * q ^ 3, (((31 - 97q) + 102 * q ^ 2) - 45 * q ^ 3) + 7 * q ^ 4, (((-5 + 19q) - 23 * q ^ 2) + 11 * q ^ 3) - 2 * q ^ 4, ((((4 - 21q) + 40 * q ^ 2) - 34 * q ^ 3) + 12 * q ^ 4) - q ^ 5, q - q ^ 2, Unknown(), (((4 - 17q) + 27 * q ^ 2) - 18 * q ^ 3) + 4 * q ^ 4, Unknown(), (((-7 + 28q) - 36 * q ^ 2) + 20 * q ^ 3) - 5 * q ^ 4, ((-2 + 8q) - 8 * q ^ 2) + 3 * q ^ 3, ((-1 + 5q) - 6 * q ^ 2) + 2 * q ^ 3, ((18 - 108 * q ^ 2) + 96 * q ^ 3) - 45 * q ^ 4, 0, Unknown(), (((2 + 7q) - 28 * q ^ 2) + 22 * q ^ 3) - 5 * q ^ 4, 0, (((((30 - 72q) - 15 * q ^ 2) + 72 * q ^ 3) - 36 * q ^ 4) - 30 * q ^ 5) + 12 * q ^ 6, Unknown(), Unknown(), (((-10 + 8q + 60 * q ^ 2) - 104 * q ^ 3) + 67 * q ^ 4) - 18 * q ^ 5, ((-q + 5 * q ^ 2) - 6 * q ^ 3) + 2 * q ^ 4, (((((-17 + 53q) - 23 * q ^ 2) - 48 * q ^ 3) + 50 * q ^ 4 + 2 * q ^ 5) - 19 * q ^ 6) + 5 * q ^ 7, (((q - 5 * q ^ 2) + 10 * q ^ 3) - 9 * q ^ 4) + 3 * q ^ 5, ((((-1 - 3q) + 18 * q ^ 2) - 26 * q ^ 3) + 12 * q ^ 4) - 2 * q ^ 5, (((-2 + 24 * q ^ 2) - 25 * q ^ 3) + 11 * q ^ 4) - 2 * q ^ 5, Unknown(), (((((-11 + 52q) - 56 * q ^ 2) + 15 * q ^ 3 + 19 * q ^ 4) - 6 * q ^ 5) - 10 * q ^ 6) + 3 * q ^ 7, Unknown(), Unknown(), (((((4 - 22q) + 33 * q ^ 2) - 15 * q ^ 3) - 13 * q ^ 4) + 19 * q ^ 5) - 6 * q ^ 6, ((-4 * q ^ 2 + 6 * q ^ 3) - 3 * q ^ 4) + q ^ 5, ((10 * q ^ 90 - 25 * q ^ 91) + 20 * q ^ 92) - 5 * q ^ 93, ((10 * q ^ 18 - 25 * q ^ 19) + 20 * q ^ 20) - 5 * q ^ 21, (((((1 - q) - 13 * q ^ 2) + 25 * q ^ 3) - 18 * q ^ 4) + 5 * q ^ 5) - q ^ 6, Unknown(), Unknown(), ((((((6 - 33q) + 54 * q ^ 2) - 34 * q ^ 3) - 3 * q ^ 4) + 11 * q ^ 5 + 2 * q ^ 6) - 6 * q ^ 7) + q ^ 8, Unknown(), Unknown(), Unknown(), (((-5 * q ^ 18 + 19 * q ^ 19) - 23 * q ^ 20) + 11 * q ^ 21) - 2 * q ^ 22, Unknown(), Unknown(), ((((((4 - 18q) + 11 * q ^ 2 + 26 * q ^ 3) - 49 * q ^ 4) + 34 * q ^ 5) - 16 * q ^ 6) + 10 * q ^ 7) - 4 * q ^ 8, 0, Unknown(), Unknown(), 0, ((-(q ^ 2) - 4 * q ^ 3) + 7 * q ^ 4) - 4 * q ^ 5, Unknown(), Unknown(), Unknown(), (((-5 * q ^ 36 + 19 * q ^ 37) - 23 * q ^ 38) + 11 * q ^ 39) - 2 * q ^ 40, Unknown(), Unknown(), (((-7 * q ^ 54 + 28 * q ^ 55) - 36 * q ^ 56) + 20 * q ^ 57) - 5 * q ^ 58, Unknown(), Unknown(), (((((((2 - 7 * q ^ 2) + 6 * q ^ 3) - 20 * q ^ 4) + 48 * q ^ 5) - 42 * q ^ 6) + 20 * q ^ 7) - 5 * q ^ 8) + 4 * q ^ 9, 0, (((-7 * q ^ 90 + 32 * q ^ 91) - 46 * q ^ 92) + 24 * q ^ 93) - 3 * q ^ 94, (((-7 * q ^ 90 + 28 * q ^ 91) - 36 * q ^ 92) + 20 * q ^ 93) - 5 * q ^ 94, Unknown(), 3 * q ^ 4, (((-7 * q ^ 18 + 32 * q ^ 19) - 46 * q ^ 20) + 24 * q ^ 21) - 3 * q ^ 22, Unknown(), (((19 * q ^ 36 - 54 * q ^ 37) + 51 * q ^ 38) - 18 * q ^ 39) + 2 * q ^ 40, 0, Unknown(), Unknown(), ((10 * q ^ 36 - 25 * q ^ 37) + 20 * q ^ 38) - 5 * q ^ 39, Unknown(), 420 * q ^ 18, (2 * q ^ 18 - 7 * q ^ 19) + 5 * q ^ 20, (136 * q ^ 18 - 208 * q ^ 19) + 76 * q ^ 20, Unknown(), ((-35 * q ^ 18 + 67 * q ^ 19) - 37 * q ^ 20) + 5 * q ^ 21, ((-76 * q ^ 18 + 180 * q ^ 19) - 132 * q ^ 20) + 32 * q ^ 21, (((23 * q ^ 18 - 68 * q ^ 19) + 67 * q ^ 20) - 28 * q ^ 21) + 3 * q ^ 22, Unknown(), ((10 * q ^ 18 - 28 * q ^ 19) + 25 * q ^ 20) - 6 * q ^ 21, (((31 * q ^ 18 - 97 * q ^ 19) + 102 * q ^ 20) - 45 * q ^ 21) + 7 * q ^ 22, ((((4 * q ^ 18 - 21 * q ^ 19) + 40 * q ^ 20) - 34 * q ^ 21) + 12 * q ^ 22) - q ^ 23, ((18 * q ^ 18 - 108 * q ^ 20) + 96 * q ^ 21) - 45 * q ^ 22, (((((30 * q ^ 18 - 72 * q ^ 19) - 15 * q ^ 20) + 72 * q ^ 21) - 36 * q ^ 22) - 30 * q ^ 23) + 12 * q ^ 24, (((-2 * q ^ 18 + 24 * q ^ 20) - 25 * q ^ 21) + 11 * q ^ 22) - 2 * q ^ 23, (((-10 * q ^ 18 + 8 * q ^ 19 + 60 * q ^ 20) - 104 * q ^ 21) + 67 * q ^ 22) - 18 * q ^ 23, (((((-17 * q ^ 18 + 53 * q ^ 19) - 23 * q ^ 20) - 48 * q ^ 21) + 50 * q ^ 22 + 2 * q ^ 23) - 19 * q ^ 24) + 5 * q ^ 25, Unknown(), (((((q ^ 18 - q ^ 19) - 13 * q ^ 20) + 25 * q ^ 21) - 18 * q ^ 22) + 5 * q ^ 23) - q ^ 24, ((-4 * q ^ 20 + 6 * q ^ 21) - 3 * q ^ 22) + q ^ 23, ((-(q ^ 20) - 4 * q ^ 21) + 7 * q ^ 22) - 4 * q ^ 23, -240 * q ^ 18 + 180 * q ^ 19, (((((((2 * q ^ 18 - 7 * q ^ 20) + 6 * q ^ 21) - 20 * q ^ 22) + 48 * q ^ 23) - 42 * q ^ 24) + 20 * q ^ 25) - 5 * q ^ 26) + 4 * q ^ 27, (-18 * q ^ 18 + 36 * q ^ 19) - 15 * q ^ 20, (102 * q ^ 18 - 138 * q ^ 19) + 42 * q ^ 20, Unknown(), ((-57 * q ^ 18 + 124 * q ^ 19) - 84 * q ^ 20) + 17 * q ^ 21, 3 * q ^ 22, Unknown(), Unknown(), ((10 * q ^ 54 - 25 * q ^ 55) + 20 * q ^ 56) - 5 * q ^ 57, Unknown(), 0, (((19 * q ^ 18 - 54 * q ^ 19) + 51 * q ^ 20) - 18 * q ^ 21) + 2 * q ^ 22, Unknown(), 420 * q ^ 36, Unknown(), (136 * q ^ 36 - 208 * q ^ 37) + 76 * q ^ 38, ((-35 * q ^ 36 + 67 * q ^ 37) - 37 * q ^ 38) + 5 * q ^ 39, ((-76 * q ^ 36 + 180 * q ^ 37) - 132 * q ^ 38) + 32 * q ^ 39, (((3 * q ^ 36 + 6 * q ^ 37) - 26 * q ^ 38) + 23 * q ^ 39) - 5 * q ^ 40, ((((4 * q ^ 36 - 21 * q ^ 37) + 40 * q ^ 38) - 34 * q ^ 39) + 12 * q ^ 40) - q ^ 41, Unknown(), ((18 * q ^ 36 - 108 * q ^ 38) + 96 * q ^ 39) - 45 * q ^ 40, (((-10 * q ^ 36 + 8 * q ^ 37 + 60 * q ^ 38) - 104 * q ^ 39) + 67 * q ^ 40) - 18 * q ^ 41, (((-2 * q ^ 36 + 24 * q ^ 38) - 25 * q ^ 39) + 11 * q ^ 40) - 2 * q ^ 41, ((-4 * q ^ 38 + 6 * q ^ 39) - 3 * q ^ 40) + q ^ 41, -240 * q ^ 36 + 180 * q ^ 37, (102 * q ^ 36 - 138 * q ^ 37) + 42 * q ^ 38, ((-57 * q ^ 36 + 124 * q ^ 37) - 84 * q ^ 38) + 17 * q ^ 39, 3 * q ^ 40, (((-7 * q ^ 36 + 32 * q ^ 37) - 46 * q ^ 38) + 24 * q ^ 39) - 3 * q ^ 40, ((10 * q ^ 72 - 25 * q ^ 73) + 20 * q ^ 74) - 5 * q ^ 75, Unknown(), 420 * q ^ 54, (((11 * q ^ 12 - 4 * q ^ 13) - 24 * q ^ 15) + 12 * q ^ 16 + 45 * q ^ 20) - 36 * q ^ 21, Unknown(), ((-35 * q ^ 54 + 67 * q ^ 55) - 37 * q ^ 56) + 5 * q ^ 57, Unknown(), Unknown(), ((18 * q ^ 54 - 108 * q ^ 56) + 96 * q ^ 57) - 45 * q ^ 58, Unknown(), (((-2 * q ^ 54 + 24 * q ^ 56) - 25 * q ^ 57) + 11 * q ^ 58) - 2 * q ^ 59, ((-4 * q ^ 56 + 6 * q ^ 57) - 3 * q ^ 58) + q ^ 59, (-15 * q ^ 12 + 36 * q ^ 15) - 81 * q ^ 20, (102 * q ^ 54 - 138 * q ^ 55) + 42 * q ^ 56, Unknown(), (((-7 * q ^ 54 + 32 * q ^ 55) - 46 * q ^ 56) + 24 * q ^ 57) - 3 * q ^ 58, 420 * q ^ 72, Unknown(), (136 * q ^ 72 - 208 * q ^ 73) + 76 * q ^ 74, (((-7 * q ^ 18 + 28 * q ^ 19) - 36 * q ^ 20) + 20 * q ^ 21) - 5 * q ^ 22, -240 * q ^ 72 + 180 * q ^ 73, (102 * q ^ 72 - 138 * q ^ 73) + 42 * q ^ 74, Unknown(), ((-35 * q ^ 72 + 67 * q ^ 73) - 37 * q ^ 74) + 5 * q ^ 75, 420 * q ^ 90, Unknown(), (136 * q ^ 90 - 208 * q ^ 91) + 76 * q ^ 92, -240 * q ^ 90 + 180 * q ^ 91, (102 * q ^ 90 - 138 * q ^ 91) + 42 * q ^ 92, Unknown(), ((-35 * q ^ 90 + 67 * q ^ 91) - 37 * q ^ 92) + 5 * q ^ 93]
                end)
        f106 = (q->begin
                    [420, -210 + 210q, (72 - 138q) + 72 * q ^ 2, (100 - 220q) + 100 * q ^ 2, ((-31 + 110q) - 110 * q ^ 2) + 31 * q ^ 3, ((-17 + 55q) - 55 * q ^ 2) + 17 * q ^ 3, ((-12 + 21q) - 21 * q ^ 2) + 12 * q ^ 3, ((-45 + 165q) - 165 * q ^ 2) + 45 * q ^ 3, ((6 - 21q) + 21 * q ^ 2) - 6 * q ^ 3, (((-5 + 13q) - 18 * q ^ 2) + 13 * q ^ 3) - 5 * q ^ 4, (((8 - 46q) + 82 * q ^ 2) - 46 * q ^ 3) + 8 * q ^ 4, (((2 - 15q) + 26 * q ^ 2) - 15 * q ^ 3) + 2 * q ^ 4, (((1 - 3q) + 4 * q ^ 2) - 3 * q ^ 3) + q ^ 4, (((-8 + 27q) - 38 * q ^ 2) + 27 * q ^ 3) - 8 * q ^ 4, (((6 - 36q) + 60 * q ^ 2) - 36 * q ^ 3) + 6 * q ^ 4, (((4 - 17q) + 24 * q ^ 2) - 17 * q ^ 3) + 4 * q ^ 4, (((12 - 71q) + 116 * q ^ 2) - 71 * q ^ 3) + 12 * q ^ 4, ((8q - 22 * q ^ 2) + 22 * q ^ 3) - 8 * q ^ 4, ((((4 - 17q) + 33 * q ^ 2) - 33 * q ^ 3) + 17 * q ^ 4) - 4 * q ^ 5, -(q ^ 2) + q ^ 3, Unknown(), ((((2 - 11q) + 20 * q ^ 2) - 20 * q ^ 3) + 11 * q ^ 4) - 2 * q ^ 5, Unknown(), ((((-1 + 12q) - 36 * q ^ 2) + 36 * q ^ 3) - 12 * q ^ 4) + q ^ 5, ((2q - 9 * q ^ 2) + 9 * q ^ 3) - 2 * q ^ 4, ((2q - 4 * q ^ 2) + 4 * q ^ 3) - 2 * q ^ 4, (((12 - 63 * q ^ 2) + 144 * q ^ 3) - 63 * q ^ 4) + 12 * q ^ 6, 0, Unknown(), ((((1 + 3q) - 18 * q ^ 2) + 26 * q ^ 3) - 18 * q ^ 4) + 3 * q ^ 5 + q ^ 6, 0, (((((30 - 42q) - 21 * q ^ 2) + 108 * q ^ 3) - 21 * q ^ 4) - 42 * q ^ 5) + 30 * q ^ 6, Unknown(), Unknown(), (((((-4 + 8q + 27 * q ^ 2) - 108 * q ^ 3) + 108 * q ^ 4) - 27 * q ^ 5) - 8 * q ^ 6) + 4 * q ^ 7, ((2 * q ^ 2 - 4 * q ^ 3) + 4 * q ^ 4) - 2 * q ^ 5, (((((-13 + 35q) - 12 * q ^ 2) - 63 * q ^ 3) + 63 * q ^ 4 + 12 * q ^ 5) - 35 * q ^ 6) + 13 * q ^ 7, ((((q - 4 * q ^ 2) + 9 * q ^ 3) - 9 * q ^ 4) + 4 * q ^ 5) - q ^ 6, ((9 * q ^ 2 - 24 * q ^ 3) + 24 * q ^ 4) - 9 * q ^ 5, ((((-1 + 7 * q ^ 2) - 27 * q ^ 3) + 27 * q ^ 4) - 7 * q ^ 5) + q ^ 7, Unknown(), (((((-10 + 26q) - 25 * q ^ 2) - 10 * q ^ 3) + 10 * q ^ 4 + 25 * q ^ 5) - 26 * q ^ 6) + 10 * q ^ 7, Unknown(), Unknown(), (((((((2 - 6q) + 7 * q ^ 2) - q ^ 3) - 4 * q ^ 4) - q ^ 5) + 7 * q ^ 6) - 6 * q ^ 7) + 2 * q ^ 8, (3 * q ^ 3 - 6 * q ^ 4) + 3 * q ^ 5, (((-2 * q ^ 105 + 15 * q ^ 106) - 26 * q ^ 107) + 15 * q ^ 108) - 2 * q ^ 109, (((-2 * q ^ 21 + 15 * q ^ 22) - 26 * q ^ 23) + 15 * q ^ 24) - 2 * q ^ 25, (((((-q - 2 * q ^ 2) + 17 * q ^ 3) - 30 * q ^ 4) + 17 * q ^ 5) - 2 * q ^ 6) - q ^ 7, Unknown(), Unknown(), (((((((4 - 16q) + 24 * q ^ 2) - 10 * q ^ 3) - 6 * q ^ 4) - 10 * q ^ 5) + 24 * q ^ 6) - 16 * q ^ 7) + 4 * q ^ 8, Unknown(), Unknown(), Unknown(), ((-8 * q ^ 22 + 22 * q ^ 23) - 22 * q ^ 24) + 8 * q ^ 25, Unknown(), Unknown(), (((((((((2 - 4q) - 5 * q ^ 2) + 22 * q ^ 3) - 22 * q ^ 4) + 12 * q ^ 5) - 22 * q ^ 6) + 22 * q ^ 7) - 5 * q ^ 8) - 4 * q ^ 9) + 2 * q ^ 10, 0, Unknown(), Unknown(), 0, (5 * q ^ 4 - 12 * q ^ 5) + 5 * q ^ 6, Unknown(), Unknown(), Unknown(), ((8 * q ^ 43 - 22 * q ^ 44) + 22 * q ^ 45) - 8 * q ^ 46, Unknown(), Unknown(), ((((q ^ 63 - 12 * q ^ 64) + 36 * q ^ 65) - 36 * q ^ 66) + 12 * q ^ 67) - q ^ 68, Unknown(), Unknown(), (((((((1 - 3 * q ^ 2) - 4 * q ^ 3) + 2 * q ^ 4 + 28 * q ^ 5) - 42 * q ^ 6) + 28 * q ^ 7 + 2 * q ^ 8) - 4 * q ^ 9) - 3 * q ^ 10) + q ^ 12, 0, (((8 * q ^ 105 - 27 * q ^ 106) + 38 * q ^ 107) - 27 * q ^ 108) + 8 * q ^ 109, ((((q ^ 105 - 12 * q ^ 106) + 36 * q ^ 107) - 36 * q ^ 108) + 12 * q ^ 109) - q ^ 110, Unknown(), ((-6 * q ^ 5 + 15 * q ^ 7) - 15 * q ^ 8) + 6 * q ^ 10, (((8 * q ^ 21 - 27 * q ^ 22) + 38 * q ^ 23) - 27 * q ^ 24) + 8 * q ^ 25, Unknown(), (((6 * q ^ 42 - 36 * q ^ 43) + 60 * q ^ 44) - 36 * q ^ 45) + 6 * q ^ 46, 0, Unknown(), Unknown(), (((2 * q ^ 42 - 15 * q ^ 43) + 26 * q ^ 44) - 15 * q ^ 45) + 2 * q ^ 46, Unknown(), -420 * q ^ 21, (((-(q ^ 21) + 3 * q ^ 22) - 4 * q ^ 23) + 3 * q ^ 24) - q ^ 25, (-100 * q ^ 21 + 220 * q ^ 22) - 100 * q ^ 23, Unknown(), ((17 * q ^ 21 - 55 * q ^ 22) + 55 * q ^ 23) - 17 * q ^ 24, ((45 * q ^ 21 - 165 * q ^ 22) + 165 * q ^ 23) - 45 * q ^ 24, (((-8 * q ^ 21 + 46 * q ^ 22) - 82 * q ^ 23) + 46 * q ^ 24) - 8 * q ^ 25, Unknown(), (((-4 * q ^ 21 + 17 * q ^ 22) - 24 * q ^ 23) + 17 * q ^ 24) - 4 * q ^ 25, (((-12 * q ^ 21 + 71 * q ^ 22) - 116 * q ^ 23) + 71 * q ^ 24) - 12 * q ^ 25, ((((-4 * q ^ 21 + 17 * q ^ 22) - 33 * q ^ 23) + 33 * q ^ 24) - 17 * q ^ 25) + 4 * q ^ 26, (((-12 * q ^ 21 + 63 * q ^ 23) - 144 * q ^ 24) + 63 * q ^ 25) - 12 * q ^ 27, (((-30 * q ^ 21 + 42 * q ^ 22 + 21 * q ^ 23) - 108 * q ^ 24) + 21 * q ^ 25 + 42 * q ^ 26) - 30 * q ^ 27, ((((q ^ 21 - 7 * q ^ 23) + 27 * q ^ 24) - 27 * q ^ 25) + 7 * q ^ 26) - q ^ 28, (((((4 * q ^ 21 - 8 * q ^ 22) - 27 * q ^ 23) + 108 * q ^ 24) - 108 * q ^ 25) + 27 * q ^ 26 + 8 * q ^ 27) - 4 * q ^ 28, (((((13 * q ^ 21 - 35 * q ^ 22) + 12 * q ^ 23 + 63 * q ^ 24) - 63 * q ^ 25) - 12 * q ^ 26) + 35 * q ^ 27) - 13 * q ^ 28, Unknown(), ((((q ^ 22 + 2 * q ^ 23) - 17 * q ^ 24) + 30 * q ^ 25) - 17 * q ^ 26) + 2 * q ^ 27 + q ^ 28, (-3 * q ^ 24 + 6 * q ^ 25) - 3 * q ^ 26, (-5 * q ^ 25 + 12 * q ^ 26) - 5 * q ^ 27, 210 * q ^ 21 - 210 * q ^ 22, (((((((-(q ^ 21) + 3 * q ^ 23 + 4 * q ^ 24) - 2 * q ^ 25) - 28 * q ^ 26) + 42 * q ^ 27) - 28 * q ^ 28) - 2 * q ^ 29) + 4 * q ^ 30 + 3 * q ^ 31) - q ^ 33, ((12 * q ^ 21 - 21 * q ^ 22) + 21 * q ^ 23) - 12 * q ^ 24, (-72 * q ^ 21 + 138 * q ^ 22) - 72 * q ^ 23, Unknown(), ((31 * q ^ 21 - 110 * q ^ 22) + 110 * q ^ 23) - 31 * q ^ 24, ((6 * q ^ 26 - 15 * q ^ 28) + 15 * q ^ 29) - 6 * q ^ 31, Unknown(), Unknown(), (((-2 * q ^ 63 + 15 * q ^ 64) - 26 * q ^ 65) + 15 * q ^ 66) - 2 * q ^ 67, Unknown(), 0, (((-6 * q ^ 21 + 36 * q ^ 22) - 60 * q ^ 23) + 36 * q ^ 24) - 6 * q ^ 25, Unknown(), 420 * q ^ 42, Unknown(), (100 * q ^ 42 - 220 * q ^ 43) + 100 * q ^ 44, ((-17 * q ^ 42 + 55 * q ^ 43) - 55 * q ^ 44) + 17 * q ^ 45, ((-45 * q ^ 42 + 165 * q ^ 43) - 165 * q ^ 44) + 45 * q ^ 45, (((-5 * q ^ 42 + 13 * q ^ 43) - 18 * q ^ 44) + 13 * q ^ 45) - 5 * q ^ 46, ((((4 * q ^ 42 - 17 * q ^ 43) + 33 * q ^ 44) - 33 * q ^ 45) + 17 * q ^ 46) - 4 * q ^ 47, Unknown(), (((12 * q ^ 42 - 63 * q ^ 44) + 144 * q ^ 45) - 63 * q ^ 46) + 12 * q ^ 48, (((((-4 * q ^ 42 + 8 * q ^ 43 + 27 * q ^ 44) - 108 * q ^ 45) + 108 * q ^ 46) - 27 * q ^ 47) - 8 * q ^ 48) + 4 * q ^ 49, ((((-(q ^ 42) + 7 * q ^ 44) - 27 * q ^ 45) + 27 * q ^ 46) - 7 * q ^ 47) + q ^ 49, (3 * q ^ 45 - 6 * q ^ 46) + 3 * q ^ 47, -210 * q ^ 42 + 210 * q ^ 43, (72 * q ^ 42 - 138 * q ^ 43) + 72 * q ^ 44, ((-31 * q ^ 42 + 110 * q ^ 43) - 110 * q ^ 44) + 31 * q ^ 45, ((-6 * q ^ 47 + 15 * q ^ 49) - 15 * q ^ 50) + 6 * q ^ 52, (((-8 * q ^ 42 + 27 * q ^ 43) - 38 * q ^ 44) + 27 * q ^ 45) - 8 * q ^ 46, (((2 * q ^ 84 - 15 * q ^ 85) + 26 * q ^ 86) - 15 * q ^ 87) + 2 * q ^ 88, Unknown(), -420 * q ^ 63, (((((((16 * q ^ 15 - 8 * q ^ 16) + 45 * q ^ 20) - 92 * q ^ 21) + 49 * q ^ 22 + 49 * q ^ 24) - 92 * q ^ 25) + 45 * q ^ 26) - 8 * q ^ 30) + 16 * q ^ 31, Unknown(), ((17 * q ^ 63 - 55 * q ^ 64) + 55 * q ^ 65) - 17 * q ^ 66, Unknown(), Unknown(), (((-12 * q ^ 63 + 63 * q ^ 65) - 144 * q ^ 66) + 63 * q ^ 67) - 12 * q ^ 69, Unknown(), ((((q ^ 63 - 7 * q ^ 65) + 27 * q ^ 66) - 27 * q ^ 67) + 7 * q ^ 68) - q ^ 70, (-3 * q ^ 66 + 6 * q ^ 67) - 3 * q ^ 68, (((-24 * q ^ 15 - 81 * q ^ 20) + 105 * q ^ 21) - 105 * q ^ 24) + 81 * q ^ 25 + 24 * q ^ 30, (-72 * q ^ 63 + 138 * q ^ 64) - 72 * q ^ 65, Unknown(), (((8 * q ^ 63 - 27 * q ^ 64) + 38 * q ^ 65) - 27 * q ^ 66) + 8 * q ^ 67, 420 * q ^ 84, Unknown(), (100 * q ^ 84 - 220 * q ^ 85) + 100 * q ^ 86, ((((q ^ 21 - 12 * q ^ 22) + 36 * q ^ 23) - 36 * q ^ 24) + 12 * q ^ 25) - q ^ 26, -210 * q ^ 84 + 210 * q ^ 85, (72 * q ^ 84 - 138 * q ^ 85) + 72 * q ^ 86, Unknown(), ((-17 * q ^ 84 + 55 * q ^ 85) - 55 * q ^ 86) + 17 * q ^ 87, -420 * q ^ 105, Unknown(), (-100 * q ^ 105 + 220 * q ^ 106) - 100 * q ^ 107, 210 * q ^ 105 - 210 * q ^ 106, (-72 * q ^ 105 + 138 * q ^ 106) - 72 * q ^ 107, Unknown(), ((17 * q ^ 105 - 55 * q ^ 106) + 55 * q ^ 107) - 17 * q ^ 108]
                end)
        f107 = function (q, j)
                return [420, -170 + 250q, (34 - 136q) + 114 * q ^ 2, (68 - 204q) + 148 * q ^ 2, ((-13 + 76q) - 128 * q ^ 2) + 67 * q ^ 3, ((-3 + 31q) - 71 * q ^ 2) + 43 * q ^ 3, (-9 * j ^ 2 - 10j) * q + (33 * j ^ 2 + 39j) * q ^ 2 + 27 * q ^ 3, ((-27 + 123q) - 183 * q ^ 2) + 87 * q ^ 3, 15 + (39 * j ^ 2 + 33j) * q + (-10 * j ^ 2 - 9j) * q ^ 2 + 12 * q ^ 3, -6 + (-25 * j ^ 2 - 23j) * q + (27 * j ^ 2 + 22j) * q ^ 2 + q ^ 3 + 7 * q ^ 4, (((2 - 22q) + 64 * q ^ 2) - 74 * q ^ 3) + 30 * q ^ 4, ((-3q + 18 * q ^ 2) - 29 * q ^ 3) + 14 * q ^ 4, (-(j ^ 2) - 3j) * q ^ 2 + (7 * j ^ 2 + 10j) * q ^ 3 + 5 * q ^ 4, (-3 + (-23 * j ^ 2 - 20j) * q + (46 * j ^ 2 + 41j) * q ^ 2 + (-31 * j ^ 2 - 30j) * q ^ 3) - 7 * q ^ 4, (((1 - 14q) + 48 * q ^ 2) - 60 * q ^ 3) + 25 * q ^ 4, (3 * j ^ 2 + 4j) * q + (-20 * j ^ 2 - 22j) * q ^ 2 + (30 * j ^ 2 + 34j) * q ^ 3 + 16 * q ^ 4, (((5 - 38q) + 98 * q ^ 2) - 104 * q ^ 3) + 39 * q ^ 4, (((q - 9 * q ^ 2) + 23 * q ^ 3) - 23 * q ^ 4) + 8 * q ^ 5, (1 + (11 * j ^ 2 + 10j) * q + (-33 * j ^ 2 - 29j) * q ^ 2 + (40 * j ^ 2 + 36j) * q ^ 3 + 21 * q ^ 4) - 4 * q ^ 5, -j * q ^ 3 + (j ^ 2 + 2j) * q ^ 4 + q ^ 5, Unknown(), (-3q + (-17 * j ^ 2 - 14j) * q ^ 2 + (28 * j ^ 2 + 25j) * q ^ 3 + 19 * q ^ 4) - 5 * q ^ 5, Unknown(), (((3q - 17 * q ^ 2) + 36 * q ^ 3) - 33 * q ^ 4) + 11 * q ^ 5, ((-2 * q ^ 2 + 8 * q ^ 3) - 10 * q ^ 4) + 4 * q ^ 5, j * q ^ 2 + (-4 * j ^ 2 - 6j) * q ^ 3 + (6 * j ^ 2 + 8j) * q ^ 4 + 3 * q ^ 5, (30 * j ^ 2 + 27j) * q ^ 2 + 120 * q ^ 3 + (117 * j ^ 2 + 99j) * q ^ 4 + 27 * q ^ 6, 0, Unknown(), -3 * q ^ 2 + 24 * q ^ 3 + (36 * j ^ 2 + 33j) * q ^ 4 + (-10 * j ^ 2 - 7j) * q ^ 5 + 5 * q ^ 6, 0, 15 + (18 * j ^ 2 + 20j) * q + (33 * j ^ 2 + 39j) * q ^ 2 + 90 * q ^ 3 + (9 * j ^ 2 + 10j) * q ^ 4 + (66 * j ^ 2 + 78j) * q ^ 5 + 42 * q ^ 6, Unknown(), Unknown(), ((((-12 * j ^ 2 - 9j) * q ^ 2 - 66 * q ^ 3) + (-120 * j ^ 2 - 114j) * q ^ 4 + (69 * j ^ 2 + 57j) * q ^ 5) - 11 * q ^ 6) + 16 * q ^ 7, j * q ^ 3 + (-5 * j ^ 2 - 7j) * q ^ 4 + (8 * j ^ 2 + 7j) * q ^ 5 + (-2 * j ^ 2 - j) * q ^ 6 + q ^ 7, -6 + (-15 * j ^ 2 - 17j) * q + (-2 * j ^ 2 - 4j) * q ^ 2 + (55 * j ^ 2 + 59j) * q ^ 3 + (-57 * j ^ 2 - 58j) * q ^ 4 + (-22 * j ^ 2 - 26j) * q ^ 5 + (55 * j ^ 2 + 63j) * q ^ 6 + 25 * q ^ 7, (3 * j ^ 2 + 2j) * q ^ 2 + (-10 * j ^ 2 - 7j) * q ^ 3 + (10 * j ^ 2 + 8j) * q ^ 4 + 4 * q ^ 5 + (j ^ 2 + 2j) * q ^ 6 + q ^ 7, (q ^ 2 - 12 * q ^ 3) + (-29 * j ^ 2 - 28j) * q ^ 4 + (25 * j ^ 2 + 22j) * q ^ 5 + (-4 * j ^ 2 - 2j) * q ^ 6 + 3 * q ^ 7, (10 * j ^ 2 + 11j) * q ^ 3 + (-34 * j ^ 2 - 33j) * q ^ 4 + (29 * j ^ 2 + 23j) * q ^ 5 + 5 * q ^ 7, Unknown(), -3 + 6q + (-9 * j ^ 2 - 15j) * q ^ 2 + (26 * j ^ 2 + 38j) * q ^ 3 + (12 * j ^ 2 + 2j) * q ^ 4 + (-69 * j ^ 2 - 67j) * q ^ 5 + (56 * j ^ 2 + 62j) * q ^ 6 + 17 * q ^ 7, Unknown(), Unknown(), (5 * j ^ 2 + 6j) * q ^ 2 + (-17 * j ^ 2 - 25j) * q ^ 3 + (14 * j ^ 2 + 26j) * q ^ 4 + (22 * j ^ 2 + 13j) * q ^ 5 + (-46 * j ^ 2 - 45j) * q ^ 6 + (28 * j ^ 2 + 30j) * q ^ 7 + 7 * q ^ 8, (j ^ 2 + 4j) * q ^ 4 + 8 * q ^ 5 + (6 * j ^ 2 + 4j) * q ^ 6 + q ^ 8, ((3 * j ^ 2 * q ^ 126 - 18 * j ^ 2 * q ^ 127) + 29 * j ^ 2 * q ^ 128) - 14 * j ^ 2 * q ^ 129, ((3 * j * q ^ 26 - 18 * j * q ^ 27) + 29 * j * q ^ 28) - 14 * j * q ^ 29, ((4 * q ^ 3 + (20 * j ^ 2 + 21j) * q ^ 4 + (-32 * j ^ 2 - 29j) * q ^ 5 + (17 * j ^ 2 + 13j) * q ^ 6) - 2 * q ^ 7) + 3 * q ^ 8, Unknown(), Unknown(), (1 - 4q) + (j ^ 2 + 3j) * q ^ 2 + (-15 * j ^ 2 - 24j) * q ^ 3 + (9 * j ^ 2 + 21j) * q ^ 4 + (36 * j ^ 2 + 29j) * q ^ 5 + (-63 * j ^ 2 - 65j) * q ^ 6 + (39 * j ^ 2 + 43j) * q ^ 7 + 10 * q ^ 8, Unknown(), Unknown(), Unknown(), (((-j * q ^ 26 + 9 * j * q ^ 27) - 23 * j * q ^ 28) + 23 * j * q ^ 29) - 8 * j * q ^ 30, Unknown(), Unknown(), -3 * q ^ 2 + 6 * q ^ 3 + (10 * j ^ 2 + 9j) * q ^ 4 + 30 * q ^ 5 + (51 * j ^ 2 + 54j) * q ^ 6 + (-26 * j ^ 2 - 30j) * q ^ 7 + 17 * q ^ 8 + (22 * j ^ 2 + 24j) * q ^ 9 + 7 * q ^ 10, 0, Unknown(), Unknown(), 0, (((6 * j ^ 2 + 4j) * q ^ 5 + (-11 * j ^ 2 - 8j) * q ^ 6) - 4 * q ^ 7) + (2 * j ^ 2 + j) * q ^ 8 + q ^ 10, Unknown(), Unknown(), Unknown(), (((j ^ 2 * q ^ 51 - 9 * j ^ 2 * q ^ 52) + 23 * j ^ 2 * q ^ 53) - 23 * j ^ 2 * q ^ 54) + 8 * j ^ 2 * q ^ 55, Unknown(), Unknown(), (((-3 * q ^ 76 + 17 * q ^ 77) - 36 * q ^ 78) + 33 * q ^ 79) - 11 * q ^ 80, Unknown(), Unknown(), -3 * q ^ 4 + (-10 * j ^ 2 - 6j) * q ^ 5 + (36 * j ^ 2 + 28j) * q ^ 6 + (-46 * j ^ 2 - 42j) * q ^ 7 + (13 * j ^ 2 + 16j) * q ^ 8 + (2 * j ^ 2 - 4j) * q ^ 9 + (7 * j ^ 2 + 10j) * q ^ 10 + 5 * q ^ 12, 0, 3 * j ^ 2 * q ^ 125 + (-20 * j ^ 2 + 3j) * q ^ 126 + (41 * j ^ 2 - 5j) * q ^ 127 + (-30 * j ^ 2 + j) * q ^ 128 + 7 * j ^ 2 * q ^ 129, (((-3 * j ^ 2 * q ^ 126 + 17 * j ^ 2 * q ^ 127) - 36 * j ^ 2 * q ^ 128) + 33 * j ^ 2 * q ^ 129) - 11 * j ^ 2 * q ^ 130, Unknown(), (((15 * j ^ 2 + 6j) * q ^ 8 + (-15 * j ^ 2 - 6j) * q ^ 9) - 3 * q ^ 11) + (2 * j ^ 2 - j) * q ^ 12, 3 * j * q ^ 25 + (-3 * j ^ 2 - 23j) * q ^ 26 + (5 * j ^ 2 + 46j) * q ^ 27 + (-(j ^ 2) - 31j) * q ^ 28 + 7 * j * q ^ 29, Unknown(), (((j ^ 2 * q ^ 50 - 14 * j ^ 2 * q ^ 51) + 48 * j ^ 2 * q ^ 52) - 60 * j ^ 2 * q ^ 53) + 25 * j ^ 2 * q ^ 54, q ^ 54, Unknown(), Unknown(), ((-3 * j ^ 2 * q ^ 51 + 18 * j ^ 2 * q ^ 52) - 29 * j ^ 2 * q ^ 53) + 14 * j ^ 2 * q ^ 54, Unknown(), -420 * j * q ^ 25, ((2 * j ^ 2 - j) * q ^ 27 + (-3 * j ^ 2 + 7j) * q ^ 28) - 5 * j * q ^ 29, (-68 * j * q ^ 25 + 204 * j * q ^ 26) - 148 * j * q ^ 27, Unknown(), ((3 * j * q ^ 25 - 31 * j * q ^ 26) + 71 * j * q ^ 27) - 43 * j * q ^ 28, ((27 * j * q ^ 25 - 123 * j * q ^ 26) + 183 * j * q ^ 27) - 87 * j * q ^ 28, (((-2 * j * q ^ 25 + 22 * j * q ^ 26) - 64 * j * q ^ 27) + 74 * j * q ^ 28) - 30 * j * q ^ 29, Unknown(), ((-(j ^ 2) + 3j) * q ^ 26 + (2 * j ^ 2 - 20j) * q ^ 27 + (-4 * j ^ 2 + 30j) * q ^ 28) - 16 * j * q ^ 29, (((-5 * j * q ^ 25 + 38 * j * q ^ 26) - 98 * j * q ^ 27) + 104 * j * q ^ 28) - 39 * j * q ^ 29, ((-j * q ^ 25 + (j ^ 2 + 11j) * q ^ 26 + (-4 * j ^ 2 - 33j) * q ^ 27 + (4 * j ^ 2 + 40j) * q ^ 28) - 21 * j * q ^ 29) + 4 * j * q ^ 30, (((3 * j ^ 2 + 30j) * q ^ 27 - 120 * j * q ^ 28) + (18 * j ^ 2 + 117j) * q ^ 29) - 27 * j * q ^ 31, (((-15 * j * q ^ 25 + (-2 * j ^ 2 + 18j) * q ^ 26 + (-6 * j ^ 2 + 33j) * q ^ 27) - 90 * j * q ^ 28) + (-(j ^ 2) + 9j) * q ^ 29 + (-12 * j ^ 2 + 66j) * q ^ 30) - 42 * j * q ^ 31, ((-(j ^ 2) + 10j) * q ^ 28 + (-(j ^ 2) - 34j) * q ^ 29 + (6 * j ^ 2 + 29j) * q ^ 30) - 5 * j * q ^ 32, ((-3 * j ^ 2 - 12j) * q ^ 27 + 66 * j * q ^ 28 + (-6 * j ^ 2 - 120j) * q ^ 29 + (12 * j ^ 2 + 69j) * q ^ 30 + 11 * j * q ^ 31) - 16 * j * q ^ 32, (6 * j * q ^ 25 + (2 * j ^ 2 - 15j) * q ^ 26 + (2 * j ^ 2 - 2j) * q ^ 27 + (-4 * j ^ 2 + 55j) * q ^ 28 + (j ^ 2 - 57j) * q ^ 29 + (4 * j ^ 2 - 22j) * q ^ 30 + (-8 * j ^ 2 + 55j) * q ^ 31) - 25 * j * q ^ 32, Unknown(), (-4 * j * q ^ 28 + (-(j ^ 2) + 20j) * q ^ 29 + (-3 * j ^ 2 - 32j) * q ^ 30 + (4 * j ^ 2 + 17j) * q ^ 31 + 2 * j * q ^ 32) - 3 * j * q ^ 33, (((-3 * j ^ 2 + j) * q ^ 29 - 8 * j * q ^ 30) + (2 * j ^ 2 + 6j) * q ^ 31) - j * q ^ 33, ((2 * j ^ 2 + 6j) * q ^ 30 + (-3 * j ^ 2 - 11j) * q ^ 31 + 4 * j * q ^ 32 + (j ^ 2 + 2j) * q ^ 33) - j * q ^ 35, 170 * j * q ^ 25 - 250 * j * q ^ 26, (3 * j * q ^ 29 + (-4 * j ^ 2 - 10j) * q ^ 30 + (8 * j ^ 2 + 36j) * q ^ 31 + (-4 * j ^ 2 - 46j) * q ^ 32 + (-3 * j ^ 2 + 13j) * q ^ 33 + (6 * j ^ 2 + 2j) * q ^ 34 + (-3 * j ^ 2 + 7j) * q ^ 35) - 5 * j * q ^ 37, ((j ^ 2 - 9j) * q ^ 26 + (-6 * j ^ 2 + 33j) * q ^ 27) - 27 * j * q ^ 28, (-34 * j * q ^ 25 + 136 * j * q ^ 26) - 114 * j * q ^ 27, Unknown(), ((13 * j * q ^ 25 - 76 * j * q ^ 26) + 128 * j * q ^ 27) - 67 * j * q ^ 28, (9 * j ^ 2 + 15j) * q ^ 33 + (-9 * j ^ 2 - 15j) * q ^ 34 + 3 * j * q ^ 36 + (3 * j ^ 2 + 2j) * q ^ 37, Unknown(), Unknown(), ((3 * q ^ 76 - 18 * q ^ 77) + 29 * q ^ 78) - 14 * q ^ 79, Unknown(), 0, (((-j * q ^ 25 + 14 * j * q ^ 26) - 48 * j * q ^ 27) + 60 * j * q ^ 28) - 25 * j * q ^ 29, Unknown(), 420 * j ^ 2 * q ^ 50, Unknown(), (68 * j ^ 2 * q ^ 50 - 204 * j ^ 2 * q ^ 51) + 148 * j ^ 2 * q ^ 52, ((-3 * j ^ 2 * q ^ 50 + 31 * j ^ 2 * q ^ 51) - 71 * j ^ 2 * q ^ 52) + 43 * j ^ 2 * q ^ 53, ((-27 * j ^ 2 * q ^ 50 + 123 * j ^ 2 * q ^ 51) - 183 * j ^ 2 * q ^ 52) + 87 * j ^ 2 * q ^ 53, -6 * j ^ 2 * q ^ 50 + (23 * j ^ 2 - 2j) * q ^ 51 + (-22 * j ^ 2 + 5j) * q ^ 52 + j ^ 2 * q ^ 53 + 7 * j ^ 2 * q ^ 54, (j ^ 2 * q ^ 50 + (-10 * j ^ 2 + j) * q ^ 51 + (29 * j ^ 2 - 4j) * q ^ 52 + (-36 * j ^ 2 + 4j) * q ^ 53 + 21 * j ^ 2 * q ^ 54) - 4 * j ^ 2 * q ^ 55, Unknown(), (-27 * j ^ 2 + 3j) * q ^ 52 + 120 * j ^ 2 * q ^ 53 + (-99 * j ^ 2 + 18j) * q ^ 54 + 27 * j ^ 2 * q ^ 56, ((((9 * j ^ 2 - 3j) * q ^ 52 - 66 * j ^ 2 * q ^ 53) + (114 * j ^ 2 - 6j) * q ^ 54 + (-57 * j ^ 2 + 12j) * q ^ 55) - 11 * j ^ 2 * q ^ 56) + 16 * j ^ 2 * q ^ 57, (-11 * j ^ 2 - j) * q ^ 53 + (33 * j ^ 2 - j) * q ^ 54 + (-23 * j ^ 2 + 6j) * q ^ 55 + 5 * j ^ 2 * q ^ 57, (-4 * j ^ 2 - 3j) * q ^ 54 + 8 * j ^ 2 * q ^ 55 + (-4 * j ^ 2 + 2j) * q ^ 56 + j ^ 2 * q ^ 58, -170 * j ^ 2 * q ^ 50 + 250 * j ^ 2 * q ^ 51, (34 * j ^ 2 * q ^ 50 - 136 * j ^ 2 * q ^ 51) + 114 * j ^ 2 * q ^ 52, ((-13 * j ^ 2 * q ^ 50 + 76 * j ^ 2 * q ^ 51) - 128 * j ^ 2 * q ^ 52) + 67 * j ^ 2 * q ^ 53, (((-6 * j ^ 2 + 9j) * q ^ 58 + (6 * j ^ 2 - 9j) * q ^ 59) - 3 * j ^ 2 * q ^ 61) + (j ^ 2 + 3j) * q ^ 62, (-3 * j ^ 2 * q ^ 50 + (20 * j ^ 2 - 3j) * q ^ 51 + (-41 * j ^ 2 + 5j) * q ^ 52 + (30 * j ^ 2 - j) * q ^ 53) - 7 * j ^ 2 * q ^ 54, ((-3 * j * q ^ 101 + 18 * j * q ^ 102) - 29 * j * q ^ 103) + 14 * j * q ^ 104, Unknown(), -420 * q ^ 75, (((((((49 * q ^ 24 - 92 * q ^ 25) + 45 * q ^ 26 + 12 * q ^ 27) - 18 * q ^ 28) + 12 * q ^ 30) - 24 * q ^ 31) - 4 * q ^ 33) + 11 * q ^ 34 + q ^ 36) - 4 * q ^ 37, Unknown(), ((3 * q ^ 75 - 31 * q ^ 76) + 71 * q ^ 77) - 43 * q ^ 78, Unknown(), Unknown(), (((-30 * j ^ 2 - 27j) * q ^ 77 - 120 * q ^ 78) + (-117 * j ^ 2 - 99j) * q ^ 79) - 27 * q ^ 81, Unknown(), ((-10 * j ^ 2 - 11j) * q ^ 78 + (34 * j ^ 2 + 33j) * q ^ 79 + (-29 * j ^ 2 - 23j) * q ^ 80) - 5 * q ^ 82, (((-(j ^ 2) - 4j) * q ^ 79 - 8 * q ^ 80) + (-6 * j ^ 2 - 4j) * q ^ 81) - q ^ 83, ((((-105 * q ^ 24 + 81 * q ^ 25) - 30 * q ^ 27) - 36 * q ^ 30) + 15 * q ^ 33) - 5 * q ^ 36, (-34 * q ^ 75 + 136 * q ^ 76) - 114 * q ^ 77, Unknown(), 3 * q ^ 75 + (23 * j ^ 2 + 20j) * q ^ 76 + (-46 * j ^ 2 - 41j) * q ^ 77 + (31 * j ^ 2 + 30j) * q ^ 78 + 7 * q ^ 79, 420 * j * q ^ 100, Unknown(), (68 * j * q ^ 100 - 204 * j * q ^ 101) + 148 * j * q ^ 102, (((-3 * j * q ^ 26 + 17 * j * q ^ 27) - 36 * j * q ^ 28) + 33 * j * q ^ 29) - 11 * j * q ^ 30, -170 * j * q ^ 100 + 250 * j * q ^ 101, (34 * j * q ^ 100 - 136 * j * q ^ 101) + 114 * j * q ^ 102, Unknown(), ((-3 * j * q ^ 100 + 31 * j * q ^ 101) - 71 * j * q ^ 102) + 43 * j * q ^ 103, -420 * j ^ 2 * q ^ 125, Unknown(), (-68 * j ^ 2 * q ^ 125 + 204 * j ^ 2 * q ^ 126) - 148 * j ^ 2 * q ^ 127, 170 * j ^ 2 * q ^ 125 - 250 * j ^ 2 * q ^ 126, (-34 * j ^ 2 * q ^ 125 + 136 * j ^ 2 * q ^ 126) - 114 * j ^ 2 * q ^ 127, Unknown(), ((3 * j ^ 2 * q ^ 125 - 31 * j ^ 2 * q ^ 126) + 71 * j ^ 2 * q ^ 127) - 43 * j ^ 2 * q ^ 128]
            end
        f111 = function (q, j)
                return [420, -200 + 220q, (58 - 142q) + 78 * q ^ 2, (96 - 208q) + 116 * q ^ 2, ((-28 + 98q) - 110 * q ^ 2) + 42 * q ^ 3, ((-11 + 47q) - 57 * q ^ 2) + 21 * q ^ 3, -3 + (-16 * j ^ 2 - 24j) * q + (27 * j ^ 2 + 30j) * q ^ 2 + 6 * q ^ 3, ((-48 + 144q) - 168 * q ^ 2) + 60 * q ^ 3, (12 + (30 * j ^ 2 + 27j) * q + (-24 * j ^ 2 - 16j) * q ^ 2) - 9 * q ^ 3, (-6 + (-20 * j ^ 2 - 19j) * q + (28 * j ^ 2 + 22j) * q ^ 2 + (-17 * j ^ 2 - 13j) * q ^ 3) - 4 * q ^ 4, (((8 - 40q) + 68 * q ^ 2) - 52 * q ^ 3) + 16 * q ^ 4, (((1 - 10q) + 20 * q ^ 2) - 16 * q ^ 3) + 5 * q ^ 4, 2 * j * q + (-3 * j ^ 2 - 7j) * q ^ 2 + (2 * j ^ 2 + 3j) * q ^ 3, (-6 + (-29 * j ^ 2 - 27j) * q + (47 * j ^ 2 + 40j) * q ^ 2 + (-35 * j ^ 2 - 29j) * q ^ 3) - 9 * q ^ 4, (((6 - 27q) + 51 * q ^ 2) - 41 * q ^ 3) + 11 * q ^ 4, 1 + (10 * j ^ 2 + 14j) * q + (-21 * j ^ 2 - 26j) * q ^ 2 + (16 * j ^ 2 + 18j) * q ^ 3 + 4 * q ^ 4, (((15 - 59q) + 102 * q ^ 2) - 81 * q ^ 3) + 21 * q ^ 4, ((((-1 + 5q) - 13 * q ^ 2) + 19 * q ^ 3) - 12 * q ^ 4) + 2 * q ^ 5, (3 + (17 * j ^ 2 + 16j) * q + (-38 * j ^ 2 - 34j) * q ^ 2 + (41 * j ^ 2 + 34j) * q ^ 3 + (-22 * j ^ 2 - 19j) * q ^ 4) - 5 * q ^ 5, j * q ^ 2 - j * q ^ 3, Unknown(), ((1 - 8q) + (-21 * j ^ 2 - 18j) * q ^ 2 + (25 * j ^ 2 + 20j) * q ^ 3 + (-14 * j ^ 2 - 12j) * q ^ 4) - 3 * q ^ 5, Unknown(), ((((-2 + 10q) - 24 * q ^ 2) + 31 * q ^ 3) - 19 * q ^ 4) + 4 * q ^ 5, (((q - 4 * q ^ 2) + 6 * q ^ 3) - 4 * q ^ 4) + q ^ 5, -j * q + (j ^ 2 + 4j) * q ^ 2 + (-3 * j ^ 2 - 5j) * q ^ 3 + (j ^ 2 + 2j) * q ^ 4, 3 + (72 * j ^ 2 + 48j) * q ^ 2 + 120 * q ^ 3 + (90 * j ^ 2 + 81j) * q ^ 4 + 6 * q ^ 6, 0, Unknown(), -2 * j ^ 2 * q + (12 * j ^ 2 + 10j) * q ^ 2 + 25 * q ^ 3 + (20 * j ^ 2 + 19j) * q ^ 4 + (-3 * j ^ 2 - 2j) * q ^ 5, 0, 18 + (32 * j ^ 2 + 48j) * q + (27 * j ^ 2 + 30j) * q ^ 2 + 90 * q ^ 3 + (16 * j ^ 2 + 24j) * q ^ 4 + (54 * j ^ 2 + 60j) * q ^ 5 + 21 * q ^ 6, Unknown(), Unknown(), ((-1 + 2q + (-36 * j ^ 2 - 24j) * q ^ 2 + (92 * j ^ 2 + 80j) * q ^ 3 + (-106 * j ^ 2 - 103j) * q ^ 4 + (48 * j ^ 2 + 42j) * q ^ 5) - 2 * q ^ 6) + 4 * q ^ 7, ((2 * j ^ 2 + 4j) * q ^ 3 + (-3 * j ^ 2 - 5j) * q ^ 4) - 2 * q ^ 5, -8 + (-26 * j ^ 2 - 34j) * q + (3 * j ^ 2 + 10j) * q ^ 2 + (56 * j ^ 2 + 58j) * q ^ 3 + (-56 * j ^ 2 - 60j) * q ^ 4 + (-18 * j ^ 2 - 16j) * q ^ 5 + (37 * j ^ 2 + 41j) * q ^ 6 + 12 * q ^ 7, (q + (5 * j ^ 2 + 4j) * q ^ 2 + (-11 * j ^ 2 - 7j) * q ^ 3 + (13 * j ^ 2 + 8j) * q ^ 4 + (-7 * j ^ 2 - 5j) * q ^ 5) - 2 * q ^ 6, j ^ 2 * q + (-7 * j ^ 2 - 5j) * q ^ 2 + (18 * j ^ 2 + 17j) * q ^ 3 + 22 * q ^ 4 + (12 * j ^ 2 + 11j) * q ^ 5 + (-2 * j ^ 2 - j) * q ^ 6, (-7 * j ^ 2 - 3j) * q ^ 2 + (19 * j ^ 2 + 17j) * q ^ 3 + (-23 * j ^ 2 - 25j) * q ^ 4 + (13 * j ^ 2 + 11j) * q ^ 5, Unknown(), -6 + (-18 * j ^ 2 - 22j) * q + (12 * j ^ 2 + 8j) * q ^ 2 + (8 * j ^ 2 + 25j) * q ^ 3 + (8 * j ^ 2 - 13j) * q ^ 4 + (-43 * j ^ 2 - 31j) * q ^ 5 + (36 * j ^ 2 + 38j) * q ^ 6 + 9 * q ^ 7, Unknown(), Unknown(), (((1 - 4q) + j * q ^ 2 + (-10 * j ^ 2 - 21j) * q ^ 3 + (13 * j ^ 2 + 32j) * q ^ 4 + (5 * j ^ 2 - 12j) * q ^ 5 + (-21 * j ^ 2 - 15j) * q ^ 6) - 14 * q ^ 7) + 3 * q ^ 8, (q ^ 3 + (2 * j ^ 2 + 5j) * q ^ 4 + (-3 * j ^ 2 - 4j) * q ^ 5) - q ^ 6, (((j * q ^ 110 - 10 * j * q ^ 111) + 20 * j * q ^ 112) - 16 * j * q ^ 113) + 5 * j * q ^ 114, (((j ^ 2 * q ^ 22 - 10 * j ^ 2 * q ^ 23) + 20 * j ^ 2 * q ^ 24) - 16 * j ^ 2 * q ^ 25) + 5 * j ^ 2 * q ^ 26, (((4 * j ^ 2 + 2j) * q ^ 2 + (-12 * j ^ 2 - 9j) * q ^ 3) - 20 * q ^ 4) + (-19 * j ^ 2 - 20j) * q ^ 5 + (7 * j ^ 2 + 5j) * q ^ 6, Unknown(), Unknown(), ((3 + (13 * j ^ 2 + 15j) * q + 15 * q ^ 2) - 10 * j * q ^ 3) + (j ^ 2 + 20j) * q ^ 4 + (26 * j ^ 2 + 9j) * q ^ 5 + (-41 * j ^ 2 - 35j) * q ^ 6 + (22 * j ^ 2 + 24j) * q ^ 7 + 5 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-(j ^ 2) * q ^ 22 + 5 * j ^ 2 * q ^ 23) - 13 * j ^ 2 * q ^ 24) + 19 * j ^ 2 * q ^ 25) - 12 * j ^ 2 * q ^ 26) + 2 * j ^ 2 * q ^ 27, Unknown(), Unknown(), ((((1 - 2q) - 4 * q ^ 2) + (-18 * j ^ 2 - 20j) * q ^ 3 + (30 * j ^ 2 + 31j) * q ^ 4 + (-42 * j ^ 2 - 40j) * q ^ 5 + (46 * j ^ 2 + 43j) * q ^ 6 + (-24 * j ^ 2 - 26j) * q ^ 7 + (-4 * j ^ 2 - 2j) * q ^ 8) - 10 * q ^ 9) + 3 * q ^ 10, 0, Unknown(), Unknown(), 0, ((-5 * j ^ 2 - 2j) * q ^ 4 + (6 * j ^ 2 + 4j) * q ^ 5 + (-5 * j ^ 2 - 4j) * q ^ 6) - 2 * q ^ 7, Unknown(), Unknown(), Unknown(), ((((-j * q ^ 44 + 5 * j * q ^ 45) - 13 * j * q ^ 46) + 19 * j * q ^ 47) - 12 * j * q ^ 48) + 2 * j * q ^ 49, Unknown(), Unknown(), ((((-2 * q ^ 66 + 10 * q ^ 67) - 24 * q ^ 68) + 31 * q ^ 69) - 19 * q ^ 70) + 4 * q ^ 71, Unknown(), Unknown(), 2 * j * q ^ 2 + (-2 * j ^ 2 - 6j) * q ^ 3 + (6 * j ^ 2 + 8j) * q ^ 4 + (-26 * j ^ 2 - 18j) * q ^ 5 + (53 * j ^ 2 + 37j) * q ^ 6 + (-40 * j ^ 2 - 32j) * q ^ 7 + (15 * j ^ 2 + 16j) * q ^ 8 + (-8 * j ^ 2 - 10j) * q ^ 9 + (2 * j ^ 2 + 3j) * q ^ 10, 0, (-6 * j * q ^ 110 + (2 * j ^ 2 + 29j) * q ^ 111 + (-7 * j ^ 2 - 47j) * q ^ 112 + (6 * j ^ 2 + 35j) * q ^ 113) - 9 * j * q ^ 114, ((((-2 * j * q ^ 110 + 10 * j * q ^ 111) - 24 * j * q ^ 112) + 31 * j * q ^ 113) - 19 * j * q ^ 114) + 4 * j * q ^ 115, Unknown(), (((3 * j ^ 2 - 6j) * q ^ 6 - 9 * j ^ 2 * q ^ 7) - 6 * q ^ 8) + (-5 * j ^ 2 - 2j) * q ^ 9 + 3 * q ^ 10, (-6 * j ^ 2 * q ^ 22 + (27 * j ^ 2 - 2j) * q ^ 23 + (-40 * j ^ 2 + 7j) * q ^ 24 + (29 * j ^ 2 - 6j) * q ^ 25) - 9 * j ^ 2 * q ^ 26, Unknown(), (((6 * j * q ^ 44 - 27 * j * q ^ 45) + 51 * j * q ^ 46) - 41 * j * q ^ 47) + 11 * j * q ^ 48, -(j ^ 2) * q ^ 47, Unknown(), Unknown(), (((j * q ^ 44 - 10 * j * q ^ 45) + 20 * j * q ^ 46) - 16 * j * q ^ 47) + 5 * j * q ^ 48, Unknown(), 420 * j ^ 2 * q ^ 22, 2 * q ^ 23 + (7 * j ^ 2 + 4j) * q ^ 24 + (-3 * j ^ 2 - j) * q ^ 25, (96 * j ^ 2 * q ^ 22 - 208 * j ^ 2 * q ^ 23) + 116 * j ^ 2 * q ^ 24, Unknown(), ((-11 * j ^ 2 * q ^ 22 + 47 * j ^ 2 * q ^ 23) - 57 * j ^ 2 * q ^ 24) + 21 * j ^ 2 * q ^ 25, ((-48 * j ^ 2 * q ^ 22 + 144 * j ^ 2 * q ^ 23) - 168 * j ^ 2 * q ^ 24) + 60 * j ^ 2 * q ^ 25, (((8 * j ^ 2 * q ^ 22 - 40 * j ^ 2 * q ^ 23) + 68 * j ^ 2 * q ^ 24) - 52 * j ^ 2 * q ^ 25) + 16 * j ^ 2 * q ^ 26, Unknown(), j ^ 2 * q ^ 22 + (-14 * j ^ 2 - 4j) * q ^ 23 + (26 * j ^ 2 + 5j) * q ^ 24 + (-18 * j ^ 2 - 2j) * q ^ 25 + 4 * j ^ 2 * q ^ 26, (((15 * j ^ 2 * q ^ 22 - 59 * j ^ 2 * q ^ 23) + 102 * j ^ 2 * q ^ 24) - 81 * j ^ 2 * q ^ 25) + 21 * j ^ 2 * q ^ 26, (3 * j ^ 2 * q ^ 22 + (-16 * j ^ 2 + j) * q ^ 23 + (34 * j ^ 2 - 4j) * q ^ 24 + (-34 * j ^ 2 + 7j) * q ^ 25 + (19 * j ^ 2 - 3j) * q ^ 26) - 5 * j ^ 2 * q ^ 27, 3 * j ^ 2 * q ^ 22 + (-48 * j ^ 2 + 24j) * q ^ 24 + 120 * j ^ 2 * q ^ 25 + (-81 * j ^ 2 + 9j) * q ^ 26 + 6 * j ^ 2 * q ^ 28, 18 * j ^ 2 * q ^ 22 + (-48 * j ^ 2 - 16j) * q ^ 23 + (-30 * j ^ 2 - 3j) * q ^ 24 + 90 * j ^ 2 * q ^ 25 + (-24 * j ^ 2 - 8j) * q ^ 26 + (-60 * j ^ 2 - 6j) * q ^ 27 + 21 * j ^ 2 * q ^ 28, (3 * j ^ 2 - 4j) * q ^ 24 + (-17 * j ^ 2 + 2j) * q ^ 25 + (25 * j ^ 2 + 2j) * q ^ 26 + (-11 * j ^ 2 + 2j) * q ^ 27, ((-(j ^ 2) * q ^ 22 + 2 * j ^ 2 * q ^ 23 + (24 * j ^ 2 - 12j) * q ^ 24 + (-80 * j ^ 2 + 12j) * q ^ 25 + (103 * j ^ 2 - 3j) * q ^ 26 + (-42 * j ^ 2 + 6j) * q ^ 27) - 2 * j ^ 2 * q ^ 28) + 4 * j ^ 2 * q ^ 29, -8 * j ^ 2 * q ^ 22 + (34 * j ^ 2 + 8j) * q ^ 23 + (-10 * j ^ 2 - 7j) * q ^ 24 + (-58 * j ^ 2 - 2j) * q ^ 25 + (60 * j ^ 2 + 4j) * q ^ 26 + (16 * j ^ 2 - 2j) * q ^ 27 + (-41 * j ^ 2 - 4j) * q ^ 28 + 12 * j ^ 2 * q ^ 29, Unknown(), (((-2 * j ^ 2 + 2j) * q ^ 24 + (9 * j ^ 2 - 3j) * q ^ 25) - 20 * j ^ 2 * q ^ 26) + (20 * j ^ 2 + j) * q ^ 27 + (-5 * j ^ 2 + 2j) * q ^ 28, (j ^ 2 * q ^ 25 + (-5 * j ^ 2 - 3j) * q ^ 26 + (4 * j ^ 2 + j) * q ^ 27) - j ^ 2 * q ^ 28, ((2 * j ^ 2 - 3j) * q ^ 26 + (-4 * j ^ 2 + 2j) * q ^ 27 + (4 * j ^ 2 - j) * q ^ 28) - 2 * j ^ 2 * q ^ 29, -200 * j ^ 2 * q ^ 22 + 220 * j ^ 2 * q ^ 23, 2 * q ^ 24 + (6 * j ^ 2 + 4j) * q ^ 25 + (-8 * j ^ 2 - 2j) * q ^ 26 + (18 * j ^ 2 - 8j) * q ^ 27 + (-37 * j ^ 2 + 16j) * q ^ 28 + (32 * j ^ 2 - 8j) * q ^ 29 + (-16 * j ^ 2 - j) * q ^ 30 + (10 * j ^ 2 + 2j) * q ^ 31 + (-3 * j ^ 2 - j) * q ^ 32, -3 * j ^ 2 * q ^ 22 + (24 * j ^ 2 + 8j) * q ^ 23 + (-30 * j ^ 2 - 3j) * q ^ 24 + 6 * j ^ 2 * q ^ 25, (58 * j ^ 2 * q ^ 22 - 142 * j ^ 2 * q ^ 23) + 78 * j ^ 2 * q ^ 24, Unknown(), ((-28 * j ^ 2 * q ^ 22 + 98 * j ^ 2 * q ^ 23) - 110 * j ^ 2 * q ^ 24) + 42 * j ^ 2 * q ^ 25, (((6 * j ^ 2 + 9j) * q ^ 28 - 9 * j * q ^ 29) - 6 * j ^ 2 * q ^ 30) + (2 * j ^ 2 - 3j) * q ^ 31 + 3 * j ^ 2 * q ^ 32, Unknown(), Unknown(), (((q ^ 66 - 10 * q ^ 67) + 20 * q ^ 68) - 16 * q ^ 69) + 5 * q ^ 70, Unknown(), 0, (((6 * j ^ 2 * q ^ 22 - 27 * j ^ 2 * q ^ 23) + 51 * j ^ 2 * q ^ 24) - 41 * j ^ 2 * q ^ 25) + 11 * j ^ 2 * q ^ 26, Unknown(), 420 * j * q ^ 44, Unknown(), (96 * j * q ^ 44 - 208 * j * q ^ 45) + 116 * j * q ^ 46, ((-11 * j * q ^ 44 + 47 * j * q ^ 45) - 57 * j * q ^ 46) + 21 * j * q ^ 47, ((-48 * j * q ^ 44 + 144 * j * q ^ 45) - 168 * j * q ^ 46) + 60 * j * q ^ 47, (-6 * j * q ^ 44 + (j ^ 2 + 20j) * q ^ 45 + (-6 * j ^ 2 - 28j) * q ^ 46 + (4 * j ^ 2 + 17j) * q ^ 47) - 4 * j * q ^ 48, (3 * j * q ^ 44 + (-(j ^ 2) - 17j) * q ^ 45 + (4 * j ^ 2 + 38j) * q ^ 46 + (-7 * j ^ 2 - 41j) * q ^ 47 + (3 * j ^ 2 + 22j) * q ^ 48) - 5 * j * q ^ 49, Unknown(), 3 * j * q ^ 44 + (-24 * j ^ 2 - 72j) * q ^ 46 + 120 * j * q ^ 47 + (-9 * j ^ 2 - 90j) * q ^ 48 + 6 * j * q ^ 50, ((-j * q ^ 44 + 2 * j * q ^ 45 + (12 * j ^ 2 + 36j) * q ^ 46 + (-12 * j ^ 2 - 92j) * q ^ 47 + (3 * j ^ 2 + 106j) * q ^ 48 + (-6 * j ^ 2 - 48j) * q ^ 49) - 2 * j * q ^ 50) + 4 * j * q ^ 51, (4 * j ^ 2 + 7j) * q ^ 46 + (-2 * j ^ 2 - 19j) * q ^ 47 + (-2 * j ^ 2 + 23j) * q ^ 48 + (-2 * j ^ 2 - 13j) * q ^ 49, (j * q ^ 47 + (3 * j ^ 2 - 2j) * q ^ 48 + (-(j ^ 2) + 3j) * q ^ 49) - j * q ^ 50, -200 * j * q ^ 44 + 220 * j * q ^ 45, (58 * j * q ^ 44 - 142 * j * q ^ 45) + 78 * j * q ^ 46, ((-28 * j * q ^ 44 + 98 * j * q ^ 45) - 110 * j * q ^ 46) + 42 * j * q ^ 47, (((-9 * j ^ 2 - 3j) * q ^ 50 - 9 * q ^ 51) - 6 * j * q ^ 52) + (3 * j ^ 2 + 5j) * q ^ 53 + 3 * j * q ^ 54, (-6 * j * q ^ 44 + (2 * j ^ 2 + 29j) * q ^ 45 + (-7 * j ^ 2 - 47j) * q ^ 46 + (6 * j ^ 2 + 35j) * q ^ 47) - 9 * j * q ^ 48, (((j ^ 2 * q ^ 88 - 10 * j ^ 2 * q ^ 89) + 20 * j ^ 2 * q ^ 90) - 16 * j ^ 2 * q ^ 91) + 5 * j ^ 2 * q ^ 92, Unknown(), 420 * q ^ 66, (((((((18 * q ^ 18 - 12 * q ^ 19) - 24 * q ^ 21) + 21 * q ^ 22 + 28 * q ^ 24) - 68 * q ^ 25) + 45 * q ^ 26 + 4 * q ^ 27) - 6 * q ^ 28) + 2 * q ^ 30) - 4 * q ^ 31, Unknown(), ((-11 * q ^ 66 + 47 * q ^ 67) - 57 * q ^ 68) + 21 * q ^ 69, Unknown(), Unknown(), 3 * q ^ 66 + (72 * j ^ 2 + 48j) * q ^ 68 + 120 * q ^ 69 + (90 * j ^ 2 + 81j) * q ^ 70 + 6 * q ^ 72, Unknown(), (-7 * j ^ 2 - 3j) * q ^ 68 + (19 * j ^ 2 + 17j) * q ^ 69 + (-23 * j ^ 2 - 25j) * q ^ 70 + (13 * j ^ 2 + 11j) * q ^ 71, (q ^ 69 + (2 * j ^ 2 + 5j) * q ^ 70 + (-3 * j ^ 2 - 4j) * q ^ 71) - q ^ 72, ((((-30 * q ^ 18 + 45 * q ^ 21) - 60 * q ^ 24) + 81 * q ^ 25) - 10 * q ^ 27) - 6 * q ^ 30, (58 * q ^ 66 - 142 * q ^ 67) + 78 * q ^ 68, Unknown(), (-6 * q ^ 66 + (-29 * j ^ 2 - 27j) * q ^ 67 + (47 * j ^ 2 + 40j) * q ^ 68 + (-35 * j ^ 2 - 29j) * q ^ 69) - 9 * q ^ 70, 420 * j ^ 2 * q ^ 88, Unknown(), (96 * j ^ 2 * q ^ 88 - 208 * j ^ 2 * q ^ 89) + 116 * j ^ 2 * q ^ 90, ((((-2 * j ^ 2 * q ^ 22 + 10 * j ^ 2 * q ^ 23) - 24 * j ^ 2 * q ^ 24) + 31 * j ^ 2 * q ^ 25) - 19 * j ^ 2 * q ^ 26) + 4 * j ^ 2 * q ^ 27, -200 * j ^ 2 * q ^ 88 + 220 * j ^ 2 * q ^ 89, (58 * j ^ 2 * q ^ 88 - 142 * j ^ 2 * q ^ 89) + 78 * j ^ 2 * q ^ 90, Unknown(), ((-11 * j ^ 2 * q ^ 88 + 47 * j ^ 2 * q ^ 89) - 57 * j ^ 2 * q ^ 90) + 21 * j ^ 2 * q ^ 91, 420 * j * q ^ 110, Unknown(), (96 * j * q ^ 110 - 208 * j * q ^ 111) + 116 * j * q ^ 112, -200 * j * q ^ 110 + 220 * j * q ^ 111, (58 * j * q ^ 110 - 142 * j * q ^ 111) + 78 * j * q ^ 112, Unknown(), ((-11 * j * q ^ 110 + 47 * j * q ^ 111) - 57 * j * q ^ 112) + 21 * j * q ^ 113]
            end
        f115 = (q->begin
                    [504, -300 + 204q, (138 - 162q) + 42 * q ^ 2, (176 - 248q) + 80 * q ^ 2, ((-79 + 156q) - 92 * q ^ 2) + 15 * q ^ 3, ((-52 + 86q) - 38 * q ^ 2) + 4 * q ^ 3, (-36 + 42q) - 12 * q ^ 2, ((-102 + 222q) - 150 * q ^ 2) + 30 * q ^ 3, ((-18 - 12q) + 42 * q ^ 2) - 18 * q ^ 3, (((9 - q) - 28 * q ^ 2) + 29 * q ^ 3) - 7 * q ^ 4, (((34 - 90q) + 80 * q ^ 2) - 26 * q ^ 3) + 2 * q ^ 4, ((16 - 36q) + 23 * q ^ 2) - 4 * q ^ 3, (7 - 11q) + 4 * q ^ 2, (((-7 + 35q) - 50 * q ^ 2) + 26 * q ^ 3) - 4 * q ^ 4, (((29 - 73q) + 60 * q ^ 2) - 17 * q ^ 3) + q ^ 4, ((20 - 40q) + 26 * q ^ 2) - 4 * q ^ 3, (((45 - 125q) + 122 * q ^ 2) - 45 * q ^ 3) + 5 * q ^ 4, (((-9 + 27q) - 30 * q ^ 2) + 12 * q ^ 3) - q ^ 4, ((((4 - 24q) + 44 * q ^ 2) - 36 * q ^ 3) + 13 * q ^ 4) - q ^ 5, (-1 + 2q) - q ^ 2, Unknown(), (((6 - 22q) + 30 * q ^ 2) - 18 * q ^ 3) + 4 * q ^ 4, Unknown(), (((-12 + 39q) - 46 * q ^ 2) + 22 * q ^ 3) - 3 * q ^ 4, ((-4 + 12q) - 11 * q ^ 2) + 3 * q ^ 3, ((-4 + 9q) - 7 * q ^ 2) + 2 * q ^ 3, ((36 - 126 * q ^ 2) + 144 * q ^ 3) - 36 * q ^ 4, 0, Unknown(), (((7 + 11q) - 41 * q ^ 2) + 26 * q ^ 3) - 4 * q ^ 4, 0, (((((54 - 84q) - 12 * q ^ 2) + 108 * q ^ 3) - 42 * q ^ 4) - 24 * q ^ 5) + 18 * q ^ 6, Unknown(), Unknown(), (((-20 + 16q + 72 * q ^ 2) - 142 * q ^ 3) + 80 * q ^ 4) - 12 * q ^ 5, (((-1 - 2q) + 10 * q ^ 2) - 9 * q ^ 3) + 2 * q ^ 4, ((((((-31 + 71q) - 28 * q ^ 2) - 70 * q ^ 3) + 66 * q ^ 4) - 2 * q ^ 5) - 19 * q ^ 6) + 7 * q ^ 7, ((((-1 + q) - 2 * q ^ 2) + 9 * q ^ 3) - 9 * q ^ 4) + 2 * q ^ 5, ((((-4 - 3q) + 28 * q ^ 2) - 35 * q ^ 3) + 12 * q ^ 4) - q ^ 5, ((-7 + 31 * q ^ 2) - 39 * q ^ 3) + 12 * q ^ 4, Unknown(), (((((-21 + 68q) - 78 * q ^ 2) + 7 * q ^ 3 + 36 * q ^ 4) - 11 * q ^ 5) - 8 * q ^ 6) + 4 * q ^ 7, Unknown(), Unknown(), (((((8 - 32q) + 48 * q ^ 2) - 16 * q ^ 3) - 26 * q ^ 4) + 26 * q ^ 5) - 8 * q ^ 6, ((1 - 6 * q ^ 2) + 11 * q ^ 3) - 6 * q ^ 4, ((-16 * q ^ 85 + 36 * q ^ 86) - 23 * q ^ 87) + 4 * q ^ 88, ((-16 * q ^ 17 + 36 * q ^ 18) - 23 * q ^ 19) + 4 * q ^ 20, ((((4 - 3q) - 17 * q ^ 2) + 37 * q ^ 3) - 25 * q ^ 4) + 3 * q ^ 5, Unknown(), Unknown(), (((((((12 - 47q) + 73 * q ^ 2) - 38 * q ^ 3) - 16 * q ^ 4) + 20 * q ^ 5) - q ^ 6) - 5 * q ^ 7) + q ^ 8, Unknown(), Unknown(), Unknown(), (((9 * q ^ 17 - 27 * q ^ 18) + 30 * q ^ 19) - 12 * q ^ 20) + q ^ 21, Unknown(), Unknown(), ((((((8 - 26q) + 18 * q ^ 2 + 36 * q ^ 3) - 60 * q ^ 4) + 30 * q ^ 5) - 10 * q ^ 6) + 10 * q ^ 7) - 4 * q ^ 8, 0, Unknown(), Unknown(), 0, (((1 - 2 * q ^ 2) - 4 * q ^ 3) + 11 * q ^ 4) - 4 * q ^ 5, Unknown(), Unknown(), Unknown(), (((-9 * q ^ 34 + 27 * q ^ 35) - 30 * q ^ 36) + 12 * q ^ 37) - q ^ 38, Unknown(), Unknown(), (((12 * q ^ 51 - 39 * q ^ 52) + 46 * q ^ 53) - 22 * q ^ 54) + 3 * q ^ 55, Unknown(), Unknown(), ((((((7 - 11 * q ^ 2) - 4 * q ^ 3) - 13 * q ^ 4) + 48 * q ^ 5) - 42 * q ^ 6) + 10 * q ^ 7) - 4 * q ^ 8, 0, (((7 * q ^ 85 - 35 * q ^ 86) + 50 * q ^ 87) - 26 * q ^ 88) + 4 * q ^ 89, (((12 * q ^ 85 - 39 * q ^ 86) + 46 * q ^ 87) - 22 * q ^ 88) + 3 * q ^ 89, Unknown(), (((q ^ 3 + 3 * q ^ 4) - 6 * q ^ 5) - 7 * q ^ 6) + 15 * q ^ 7, (((7 * q ^ 17 - 35 * q ^ 18) + 50 * q ^ 19) - 26 * q ^ 20) + 4 * q ^ 21, Unknown(), (((29 * q ^ 34 - 73 * q ^ 35) + 60 * q ^ 36) - 17 * q ^ 37) + q ^ 38, q ^ 35 - q ^ 36, Unknown(), Unknown(), ((16 * q ^ 34 - 36 * q ^ 35) + 23 * q ^ 36) - 4 * q ^ 37, Unknown(), -504 * q ^ 17, (-7 * q ^ 17 + 11 * q ^ 18) - 4 * q ^ 19, (-176 * q ^ 17 + 248 * q ^ 18) - 80 * q ^ 19, Unknown(), ((52 * q ^ 17 - 86 * q ^ 18) + 38 * q ^ 19) - 4 * q ^ 20, ((102 * q ^ 17 - 222 * q ^ 18) + 150 * q ^ 19) - 30 * q ^ 20, (((-34 * q ^ 17 + 90 * q ^ 18) - 80 * q ^ 19) + 26 * q ^ 20) - 2 * q ^ 21, Unknown(), ((-20 * q ^ 17 + 40 * q ^ 18) - 26 * q ^ 19) + 4 * q ^ 20, (((-45 * q ^ 17 + 125 * q ^ 18) - 122 * q ^ 19) + 45 * q ^ 20) - 5 * q ^ 21, ((((-4 * q ^ 17 + 24 * q ^ 18) - 44 * q ^ 19) + 36 * q ^ 20) - 13 * q ^ 21) + q ^ 22, ((-36 * q ^ 17 + 126 * q ^ 19) - 144 * q ^ 20) + 36 * q ^ 21, (((-54 * q ^ 17 + 84 * q ^ 18 + 12 * q ^ 19) - 108 * q ^ 20) + 42 * q ^ 21 + 24 * q ^ 22) - 18 * q ^ 23, ((7 * q ^ 17 - 31 * q ^ 19) + 39 * q ^ 20) - 12 * q ^ 21, ((((20 * q ^ 17 - 16 * q ^ 18) - 72 * q ^ 19) + 142 * q ^ 20) - 80 * q ^ 21) + 12 * q ^ 22, ((((31 * q ^ 17 - 71 * q ^ 18) + 28 * q ^ 19 + 70 * q ^ 20) - 66 * q ^ 21) + 2 * q ^ 22 + 19 * q ^ 23) - 7 * q ^ 24, Unknown(), (((-4 * q ^ 17 + 3 * q ^ 18 + 17 * q ^ 19) - 37 * q ^ 20) + 25 * q ^ 21) - 3 * q ^ 22, ((-(q ^ 17) + 6 * q ^ 19) - 11 * q ^ 20) + 6 * q ^ 21, ((-(q ^ 17) + 2 * q ^ 19 + 4 * q ^ 20) - 11 * q ^ 21) + 4 * q ^ 22, 300 * q ^ 17 - 204 * q ^ 18, ((((-7 * q ^ 17 + 11 * q ^ 19 + 4 * q ^ 20 + 13 * q ^ 21) - 48 * q ^ 22) + 42 * q ^ 23) - 10 * q ^ 24) + 4 * q ^ 25, (36 * q ^ 17 - 42 * q ^ 18) + 12 * q ^ 19, (-138 * q ^ 17 + 162 * q ^ 18) - 42 * q ^ 19, Unknown(), ((79 * q ^ 17 - 156 * q ^ 18) + 92 * q ^ 19) - 15 * q ^ 20, ((-(q ^ 20) - 3 * q ^ 21) + 6 * q ^ 22 + 7 * q ^ 23) - 15 * q ^ 24, Unknown(), Unknown(), ((-16 * q ^ 51 + 36 * q ^ 52) - 23 * q ^ 53) + 4 * q ^ 54, Unknown(), 0, (((-29 * q ^ 17 + 73 * q ^ 18) - 60 * q ^ 19) + 17 * q ^ 20) - q ^ 21, Unknown(), 504 * q ^ 34, Unknown(), (176 * q ^ 34 - 248 * q ^ 35) + 80 * q ^ 36, ((-52 * q ^ 34 + 86 * q ^ 35) - 38 * q ^ 36) + 4 * q ^ 37, ((-102 * q ^ 34 + 222 * q ^ 35) - 150 * q ^ 36) + 30 * q ^ 37, (((9 * q ^ 34 - q ^ 35) - 28 * q ^ 36) + 29 * q ^ 37) - 7 * q ^ 38, ((((4 * q ^ 34 - 24 * q ^ 35) + 44 * q ^ 36) - 36 * q ^ 37) + 13 * q ^ 38) - q ^ 39, Unknown(), ((36 * q ^ 34 - 126 * q ^ 36) + 144 * q ^ 37) - 36 * q ^ 38, (((-20 * q ^ 34 + 16 * q ^ 35 + 72 * q ^ 36) - 142 * q ^ 37) + 80 * q ^ 38) - 12 * q ^ 39, ((-7 * q ^ 34 + 31 * q ^ 36) - 39 * q ^ 37) + 12 * q ^ 38, ((q ^ 34 - 6 * q ^ 36) + 11 * q ^ 37) - 6 * q ^ 38, -300 * q ^ 34 + 204 * q ^ 35, (138 * q ^ 34 - 162 * q ^ 35) + 42 * q ^ 36, ((-79 * q ^ 34 + 156 * q ^ 35) - 92 * q ^ 36) + 15 * q ^ 37, (((q ^ 37 + 3 * q ^ 38) - 6 * q ^ 39) - 7 * q ^ 40) + 15 * q ^ 41, (((-7 * q ^ 34 + 35 * q ^ 35) - 50 * q ^ 36) + 26 * q ^ 37) - 4 * q ^ 38, ((16 * q ^ 68 - 36 * q ^ 69) + 23 * q ^ 70) - 4 * q ^ 71, Unknown(), -504 * q ^ 51, (((((((-8 * q ^ 9 + 2 * q ^ 10 + 11 * q ^ 12) - 4 * q ^ 13) - 8 * q ^ 15) + 4 * q ^ 16) - 12 * q ^ 18) + 8 * q ^ 19 + 45 * q ^ 20) - 116 * q ^ 21) + 70 * q ^ 22, Unknown(), ((52 * q ^ 51 - 86 * q ^ 52) + 38 * q ^ 53) - 4 * q ^ 54, Unknown(), Unknown(), ((-36 * q ^ 51 + 126 * q ^ 53) - 144 * q ^ 54) + 36 * q ^ 55, Unknown(), ((7 * q ^ 51 - 31 * q ^ 53) + 39 * q ^ 54) - 12 * q ^ 55, ((-(q ^ 51) + 6 * q ^ 53) - 11 * q ^ 54) + 6 * q ^ 55, (((10 * q ^ 9 - 15 * q ^ 12) + 12 * q ^ 15 + 20 * q ^ 18) - 81 * q ^ 20) + 150 * q ^ 21, (-138 * q ^ 51 + 162 * q ^ 52) - 42 * q ^ 53, Unknown(), (((7 * q ^ 51 - 35 * q ^ 52) + 50 * q ^ 53) - 26 * q ^ 54) + 4 * q ^ 55, 504 * q ^ 68, Unknown(), (176 * q ^ 68 - 248 * q ^ 69) + 80 * q ^ 70, (((12 * q ^ 17 - 39 * q ^ 18) + 46 * q ^ 19) - 22 * q ^ 20) + 3 * q ^ 21, -300 * q ^ 68 + 204 * q ^ 69, (138 * q ^ 68 - 162 * q ^ 69) + 42 * q ^ 70, Unknown(), ((-52 * q ^ 68 + 86 * q ^ 69) - 38 * q ^ 70) + 4 * q ^ 71, -504 * q ^ 85, Unknown(), (-176 * q ^ 85 + 248 * q ^ 86) - 80 * q ^ 87, 300 * q ^ 85 - 204 * q ^ 86, (-138 * q ^ 85 + 162 * q ^ 86) - 42 * q ^ 87, Unknown(), ((52 * q ^ 85 - 86 * q ^ 86) + 38 * q ^ 87) - 4 * q ^ 88]
                end)
        f117 = (q->begin
                    [504, -264 + 240q, (93 - 171q) + 69 * q ^ 2, (140 - 248q) + 116 * q ^ 2, ((-51 + 131q) - 117 * q ^ 2) + 34 * q ^ 3, ((-24 + 69q) - 55 * q ^ 2) + 14 * q ^ 3, (-12 + 30q) - 24 * q ^ 2, ((-75 + 195q) - 177 * q ^ 2) + 57 * q ^ 3, ((9 - 24q) + 30 * q ^ 2) - 21 * q ^ 3, (((-3 + 18q) - 28 * q ^ 2) + 25 * q ^ 3) - 10 * q ^ 4, (((20 - 62q) + 80 * q ^ 2) - 48 * q ^ 3) + 10 * q ^ 4, (((5 - 19q) + 23 * q ^ 2) - 12 * q ^ 3) + 2 * q ^ 4, (1 - 3q) + 2 * q ^ 2, (((-10 + 37q) - 52 * q ^ 2) + 35 * q ^ 3) - 10 * q ^ 4, (((14 - 47q) + 60 * q ^ 2) - 34 * q ^ 3) + 7 * q ^ 4, ((8 - 20q) + 26 * q ^ 2) - 12 * q ^ 3, (((28 - 93q) + 121 * q ^ 2) - 74 * q ^ 3) + 17 * q ^ 4, ((((-3 + 13q) - 20 * q ^ 2) + 17 * q ^ 3) - 7 * q ^ 4) + q ^ 5, ((((5 - 24q) + 45 * q ^ 2) - 43 * q ^ 3) + 22 * q ^ 4) - 5 * q ^ 5, q ^ 2, Unknown(), ((((3 - 15q) + 28 * q ^ 2) - 24 * q ^ 3) + 11 * q ^ 4) - 2 * q ^ 5, Unknown(), ((((-6 + 22q) - 34 * q ^ 2) + 30 * q ^ 3) - 13 * q ^ 4) + 2 * q ^ 5, (((-1 + 4q) - 6 * q ^ 2) + 5 * q ^ 3) - 2 * q ^ 4, ((-1 + 2q) - 2 * q ^ 2) + q ^ 3, ((12 - 90 * q ^ 2) + 168 * q ^ 3) - 72 * q ^ 4, 0, Unknown(), (((1 + 3q) - 25 * q ^ 2) + 37 * q ^ 3) - 14 * q ^ 4, 0, (((((33 - 60q) - 24 * q ^ 2) + 126 * q ^ 3) - 30 * q ^ 4) - 48 * q ^ 5) + 21 * q ^ 6, Unknown(), Unknown(), (((-8 + 4q + 48 * q ^ 2) - 130 * q ^ 3) + 116 * q ^ 4) - 36 * q ^ 5, (3 * q ^ 2 - 5 * q ^ 3) + 2 * q ^ 4, (((((-19 + 46q) - 16 * q ^ 2) - 78 * q ^ 3) + 76 * q ^ 4 + 10 * q ^ 5) - 35 * q ^ 6) + 10 * q ^ 7, ((((2q - 7 * q ^ 2) + 11 * q ^ 3) - 12 * q ^ 4) + 8 * q ^ 5) - 2 * q ^ 6, ((((-1 - 2q) + 15 * q ^ 2) - 30 * q ^ 3) + 25 * q ^ 4) - 7 * q ^ 5, (((-1 + 12 * q ^ 2) - 35 * q ^ 3) + 28 * q ^ 4) - 4 * q ^ 5, Unknown(), (((((-12 + 40q) - 37 * q ^ 2) - 14 * q ^ 3) + 20 * q ^ 4 + 21 * q ^ 5) - 28 * q ^ 6) + 10 * q ^ 7, Unknown(), Unknown(), (((((3 - 14q) + 18 * q ^ 2 + 5 * q ^ 3) - 24 * q ^ 4) + 10 * q ^ 5 + 8 * q ^ 6) - 8 * q ^ 7) + 2 * q ^ 8, ((-(q ^ 2) + 4 * q ^ 3) - 4 * q ^ 4) + q ^ 5, (((-5 * q ^ 100 + 19 * q ^ 101) - 23 * q ^ 102) + 12 * q ^ 103) - 2 * q ^ 104, (((-5 * q ^ 20 + 19 * q ^ 21) - 23 * q ^ 22) + 12 * q ^ 23) - 2 * q ^ 24, ((((1 - 7 * q ^ 2) + 24 * q ^ 3) - 30 * q ^ 4) + 16 * q ^ 5) - 2 * q ^ 6, Unknown(), Unknown(), (((((((7 - 27q) + 39 * q ^ 2) - 9 * q ^ 3) - 18 * q ^ 4) - q ^ 5) + 25 * q ^ 6) - 19 * q ^ 7) + 5 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((3 * q ^ 20 - 13 * q ^ 21) + 20 * q ^ 22) - 17 * q ^ 23) + 7 * q ^ 24) - q ^ 25, Unknown(), Unknown(), ((((((((3 - 10q) + q ^ 2 + 28 * q ^ 3) - 48 * q ^ 4) + 46 * q ^ 5) - 36 * q ^ 6) + 20 * q ^ 7) - 3 * q ^ 8) - 4 * q ^ 9) + 2 * q ^ 10, 0, Unknown(), Unknown(), 0, ((-2 * q ^ 3 + 7 * q ^ 4) - 10 * q ^ 5) + 4 * q ^ 6, Unknown(), Unknown(), Unknown(), ((((-3 * q ^ 40 + 13 * q ^ 41) - 20 * q ^ 42) + 17 * q ^ 43) - 7 * q ^ 44) + q ^ 45, Unknown(), Unknown(), ((((6 * q ^ 60 - 22 * q ^ 61) + 34 * q ^ 62) - 30 * q ^ 63) + 13 * q ^ 64) - 2 * q ^ 65, Unknown(), Unknown(), (((((((1 - 3 * q ^ 2) + 6 * q ^ 3) - 5 * q ^ 4) + 38 * q ^ 5) - 45 * q ^ 6) + 32 * q ^ 7) - 14 * q ^ 8) + 8 * q ^ 9, 0, (((10 * q ^ 100 - 37 * q ^ 101) + 52 * q ^ 102) - 35 * q ^ 103) + 10 * q ^ 104, ((((6 * q ^ 100 - 22 * q ^ 101) + 34 * q ^ 102) - 30 * q ^ 103) + 13 * q ^ 104) - 2 * q ^ 105, Unknown(), (((3 * q ^ 5 - 2 * q ^ 6) + 15 * q ^ 7) - 12 * q ^ 8) + 2 * q ^ 9, (((10 * q ^ 20 - 37 * q ^ 21) + 52 * q ^ 22) - 35 * q ^ 23) + 10 * q ^ 24, Unknown(), (((14 * q ^ 40 - 47 * q ^ 41) + 60 * q ^ 42) - 34 * q ^ 43) + 7 * q ^ 44, q ^ 42 - q ^ 43, Unknown(), Unknown(), (((5 * q ^ 40 - 19 * q ^ 41) + 23 * q ^ 42) - 12 * q ^ 43) + 2 * q ^ 44, Unknown(), -504 * q ^ 20, (-(q ^ 20) + 3 * q ^ 21) - 2 * q ^ 22, (-140 * q ^ 20 + 248 * q ^ 21) - 116 * q ^ 22, Unknown(), ((24 * q ^ 20 - 69 * q ^ 21) + 55 * q ^ 22) - 14 * q ^ 23, ((75 * q ^ 20 - 195 * q ^ 21) + 177 * q ^ 22) - 57 * q ^ 23, (((-20 * q ^ 20 + 62 * q ^ 21) - 80 * q ^ 22) + 48 * q ^ 23) - 10 * q ^ 24, Unknown(), ((-8 * q ^ 20 + 20 * q ^ 21) - 26 * q ^ 22) + 12 * q ^ 23, (((-28 * q ^ 20 + 93 * q ^ 21) - 121 * q ^ 22) + 74 * q ^ 23) - 17 * q ^ 24, ((((-5 * q ^ 20 + 24 * q ^ 21) - 45 * q ^ 22) + 43 * q ^ 23) - 22 * q ^ 24) + 5 * q ^ 25, ((-12 * q ^ 20 + 90 * q ^ 22) - 168 * q ^ 23) + 72 * q ^ 24, (((-33 * q ^ 20 + 60 * q ^ 21 + 24 * q ^ 22) - 126 * q ^ 23) + 30 * q ^ 24 + 48 * q ^ 25) - 21 * q ^ 26, (((q ^ 20 - 12 * q ^ 22) + 35 * q ^ 23) - 28 * q ^ 24) + 4 * q ^ 25, ((((8 * q ^ 20 - 4 * q ^ 21) - 48 * q ^ 22) + 130 * q ^ 23) - 116 * q ^ 24) + 36 * q ^ 25, (((((19 * q ^ 20 - 46 * q ^ 21) + 16 * q ^ 22 + 78 * q ^ 23) - 76 * q ^ 24) - 10 * q ^ 25) + 35 * q ^ 26) - 10 * q ^ 27, Unknown(), ((((-(q ^ 20) + 7 * q ^ 22) - 24 * q ^ 23) + 30 * q ^ 24) - 16 * q ^ 25) + 2 * q ^ 26, ((q ^ 22 - 4 * q ^ 23) + 4 * q ^ 24) - q ^ 25, ((2 * q ^ 23 - 7 * q ^ 24) + 10 * q ^ 25) - 4 * q ^ 26, 264 * q ^ 20 - 240 * q ^ 21, (((((((-(q ^ 20) + 3 * q ^ 22) - 6 * q ^ 23) + 5 * q ^ 24) - 38 * q ^ 25) + 45 * q ^ 26) - 32 * q ^ 27) + 14 * q ^ 28) - 8 * q ^ 29, (12 * q ^ 20 - 30 * q ^ 21) + 24 * q ^ 22, (-93 * q ^ 20 + 171 * q ^ 21) - 69 * q ^ 22, Unknown(), ((51 * q ^ 20 - 131 * q ^ 21) + 117 * q ^ 22) - 34 * q ^ 23, (((-3 * q ^ 25 + 2 * q ^ 26) - 15 * q ^ 27) + 12 * q ^ 28) - 2 * q ^ 29, Unknown(), Unknown(), (((-5 * q ^ 60 + 19 * q ^ 61) - 23 * q ^ 62) + 12 * q ^ 63) - 2 * q ^ 64, Unknown(), 0, (((-14 * q ^ 20 + 47 * q ^ 21) - 60 * q ^ 22) + 34 * q ^ 23) - 7 * q ^ 24, Unknown(), 504 * q ^ 40, Unknown(), (140 * q ^ 40 - 248 * q ^ 41) + 116 * q ^ 42, ((-24 * q ^ 40 + 69 * q ^ 41) - 55 * q ^ 42) + 14 * q ^ 43, ((-75 * q ^ 40 + 195 * q ^ 41) - 177 * q ^ 42) + 57 * q ^ 43, (((-3 * q ^ 40 + 18 * q ^ 41) - 28 * q ^ 42) + 25 * q ^ 43) - 10 * q ^ 44, ((((5 * q ^ 40 - 24 * q ^ 41) + 45 * q ^ 42) - 43 * q ^ 43) + 22 * q ^ 44) - 5 * q ^ 45, Unknown(), ((12 * q ^ 40 - 90 * q ^ 42) + 168 * q ^ 43) - 72 * q ^ 44, (((-8 * q ^ 40 + 4 * q ^ 41 + 48 * q ^ 42) - 130 * q ^ 43) + 116 * q ^ 44) - 36 * q ^ 45, (((-(q ^ 40) + 12 * q ^ 42) - 35 * q ^ 43) + 28 * q ^ 44) - 4 * q ^ 45, ((-(q ^ 42) + 4 * q ^ 43) - 4 * q ^ 44) + q ^ 45, -264 * q ^ 40 + 240 * q ^ 41, (93 * q ^ 40 - 171 * q ^ 41) + 69 * q ^ 42, ((-51 * q ^ 40 + 131 * q ^ 41) - 117 * q ^ 42) + 34 * q ^ 43, (((3 * q ^ 45 - 2 * q ^ 46) + 15 * q ^ 47) - 12 * q ^ 48) + 2 * q ^ 49, (((-10 * q ^ 40 + 37 * q ^ 41) - 52 * q ^ 42) + 35 * q ^ 43) - 10 * q ^ 44, (((5 * q ^ 80 - 19 * q ^ 81) + 23 * q ^ 82) - 12 * q ^ 83) + 2 * q ^ 84, Unknown(), -504 * q ^ 60, (((((((-20 * q ^ 15 + 10 * q ^ 16 + 12 * q ^ 18) - 8 * q ^ 19) + 45 * q ^ 20) - 116 * q ^ 21) + 70 * q ^ 22 + 35 * q ^ 24) - 40 * q ^ 25) - 8 * q ^ 27) + 12 * q ^ 28, Unknown(), ((24 * q ^ 60 - 69 * q ^ 61) + 55 * q ^ 62) - 14 * q ^ 63, Unknown(), Unknown(), ((-12 * q ^ 60 + 90 * q ^ 62) - 168 * q ^ 63) + 72 * q ^ 64, Unknown(), (((q ^ 60 - 12 * q ^ 62) + 35 * q ^ 63) - 28 * q ^ 64) + 4 * q ^ 65, ((q ^ 62 - 4 * q ^ 63) + 4 * q ^ 64) - q ^ 65, ((((30 * q ^ 15 - 20 * q ^ 18) - 81 * q ^ 20) + 150 * q ^ 21) - 75 * q ^ 24) + 20 * q ^ 27, (-93 * q ^ 60 + 171 * q ^ 61) - 69 * q ^ 62, Unknown(), (((10 * q ^ 60 - 37 * q ^ 61) + 52 * q ^ 62) - 35 * q ^ 63) + 10 * q ^ 64, 504 * q ^ 80, Unknown(), (140 * q ^ 80 - 248 * q ^ 81) + 116 * q ^ 82, ((((6 * q ^ 20 - 22 * q ^ 21) + 34 * q ^ 22) - 30 * q ^ 23) + 13 * q ^ 24) - 2 * q ^ 25, -264 * q ^ 80 + 240 * q ^ 81, (93 * q ^ 80 - 171 * q ^ 81) + 69 * q ^ 82, Unknown(), ((-24 * q ^ 80 + 69 * q ^ 81) - 55 * q ^ 82) + 14 * q ^ 83, -504 * q ^ 100, Unknown(), (-140 * q ^ 100 + 248 * q ^ 101) - 116 * q ^ 102, 264 * q ^ 100 - 240 * q ^ 101, (-93 * q ^ 100 + 171 * q ^ 101) - 69 * q ^ 102, Unknown(), ((24 * q ^ 100 - 69 * q ^ 101) + 55 * q ^ 102) - 14 * q ^ 103]
                end)
        f119 = function (q, j)
                return [540, -270 + 270q, (90 - 180q) + 90 * q ^ 2, (132 - 276q) + 132 * q ^ 2, ((-42 + 138q) - 138 * q ^ 2) + 42 * q ^ 3, ((-21 + 69q) - 69 * q ^ 2) + 21 * q ^ 3, -9 + (-36 * j ^ 2 - 27j) * q + (36 * j ^ 2 + 27j) * q ^ 2 + 9 * q ^ 3, ((-63 + 207q) - 207 * q ^ 2) + 63 * q ^ 3, (9 + (27 * j ^ 2 + 36j) * q + (-27 * j ^ 2 - 36j) * q ^ 2) - 9 * q ^ 3, (-5 + (-18 * j ^ 2 - 24j) * q + (26 * j ^ 2 + 32j) * q ^ 2 + (-18 * j ^ 2 - 24j) * q ^ 3) - 5 * q ^ 4, (((12 - 60q) + 96 * q ^ 2) - 60 * q ^ 3) + 12 * q ^ 4, (((3 - 18q) + 30 * q ^ 2) - 18 * q ^ 3) + 3 * q ^ 4, (5 * j ^ 2 + 2j) * q + (-10 * j ^ 2 - 4j) * q ^ 2 + (5 * j ^ 2 + 2j) * q ^ 3, (-9 + (-34 * j ^ 2 - 40j) * q + (50 * j ^ 2 + 62j) * q ^ 2 + (-34 * j ^ 2 - 40j) * q ^ 3) - 9 * q ^ 4, (((9 - 45q) + 72 * q ^ 2) - 45 * q ^ 3) + 9 * q ^ 4, 4 + (21 * j ^ 2 + 18j) * q + (-40 * j ^ 2 - 28j) * q ^ 2 + (21 * j ^ 2 + 18j) * q ^ 3 + 4 * q ^ 4, (((19 - 90q) + 142 * q ^ 2) - 90 * q ^ 3) + 19 * q ^ 4, ((((-1 + 10q) - 25 * q ^ 2) + 25 * q ^ 3) - 10 * q ^ 4) + q ^ 5, (4 + (21 * j ^ 2 + 25j) * q + (-43 * j ^ 2 - 51j) * q ^ 2 + (43 * j ^ 2 + 51j) * q ^ 3 + (-21 * j ^ 2 - 25j) * q ^ 4) - 4 * q ^ 5, 2 * j ^ 2 * q ^ 2 - 2 * j ^ 2 * q ^ 3, Unknown(), (2 + (12 * j ^ 2 + 15j) * q + (-26 * j ^ 2 - 31j) * q ^ 2 + (26 * j ^ 2 + 31j) * q ^ 3 + (-12 * j ^ 2 - 15j) * q ^ 4) - 2 * q ^ 5, Unknown(), ((((-2 + 17q) - 41 * q ^ 2) + 41 * q ^ 3) - 17 * q ^ 4) + 2 * q ^ 5, ((3q - 9 * q ^ 2) + 9 * q ^ 3) - 3 * q ^ 4, (-2 * j ^ 2 - j) * q + (8 * j ^ 2 + 3j) * q ^ 2 + (-8 * j ^ 2 - 3j) * q ^ 3 + (2 * j ^ 2 + j) * q ^ 4, 9 + (81 * j ^ 2 + 108j) * q ^ 2 + 144 * q ^ 3 + (81 * j ^ 2 + 108j) * q ^ 4 + 9 * q ^ 6, -j * q ^ 3, Unknown(), (-2 * j ^ 2 - 5j) * q + (18 * j ^ 2 + 21j) * q ^ 2 + 32 * q ^ 3 + (18 * j ^ 2 + 21j) * q ^ 4 + (-2 * j ^ 2 - 5j) * q ^ 5, -(j ^ 2) * q ^ 15, 27 + (72 * j ^ 2 + 54j) * q + (36 * j ^ 2 + 27j) * q ^ 2 + 108 * q ^ 3 + (36 * j ^ 2 + 27j) * q ^ 4 + (72 * j ^ 2 + 54j) * q ^ 5 + 27 * q ^ 6, Unknown(), Unknown(), ((-4 + 5q + (-39 * j ^ 2 - 48j) * q ^ 2 + (114 * j ^ 2 + 132j) * q ^ 3 + (-114 * j ^ 2 - 132j) * q ^ 4 + (39 * j ^ 2 + 48j) * q ^ 5) - 5 * q ^ 6) + 4 * q ^ 7, (-2 * j ^ 2 - j) * q ^ 2 + (6 * j ^ 2 + 5j) * q ^ 3 + (-6 * j ^ 2 - 5j) * q ^ 4 + (2 * j ^ 2 + j) * q ^ 5, -13 + (-46 * j ^ 2 - 40j) * q + (20 * j ^ 2 + 14j) * q ^ 2 + (70 * j ^ 2 + 67j) * q ^ 3 + (-70 * j ^ 2 - 67j) * q ^ 4 + (-20 * j ^ 2 - 14j) * q ^ 5 + (46 * j ^ 2 + 40j) * q ^ 6 + 13 * q ^ 7, (q + (6 * j ^ 2 + 7j) * q ^ 2 + (-9 * j ^ 2 - 16j) * q ^ 3 + (9 * j ^ 2 + 16j) * q ^ 4 + (-6 * j ^ 2 - 7j) * q ^ 5) - q ^ 6, (j ^ 2 + 2j) * q + (-9 * j ^ 2 - 12j) * q ^ 2 + (26 * j ^ 2 + 28j) * q ^ 3 + (-26 * j ^ 2 - 28j) * q ^ 4 + (9 * j ^ 2 + 12j) * q ^ 5 + (-(j ^ 2) - 2j) * q ^ 6, ((-9 * j ^ 2 - 15j) * q ^ 2 - 27 * q ^ 3) + 27 * q ^ 4 + (9 * j ^ 2 + 15j) * q ^ 5, Unknown(), -9 + (-38 * j ^ 2 - 32j) * q + (24 * j ^ 2 + 36j) * q ^ 2 + (19 * j ^ 2 - 11j) * q ^ 3 + (-19 * j ^ 2 + 11j) * q ^ 4 + (-24 * j ^ 2 - 36j) * q ^ 5 + (38 * j ^ 2 + 32j) * q ^ 6 + 9 * q ^ 7, Unknown(), Unknown(), (((2 - 8q) + (-5 * j ^ 2 - 12j) * q ^ 2 + (-12 * j ^ 2 + 8j) * q ^ 3 + (22 * j ^ 2 - 4j) * q ^ 4 + (-12 * j ^ 2 + 8j) * q ^ 5 + (-5 * j ^ 2 - 12j) * q ^ 6) - 8 * q ^ 7) + 2 * q ^ 8, ((j ^ 2 * q ^ 2 + (-4 * j ^ 2 - 3j) * q ^ 3) - 6 * q ^ 4) + (-4 * j ^ 2 - 3j) * q ^ 5 + j ^ 2 * q ^ 6, (((-3 * j ^ 2 * q ^ 105 + 18 * j ^ 2 * q ^ 106) - 30 * j ^ 2 * q ^ 107) + 18 * j ^ 2 * q ^ 108) - 3 * j ^ 2 * q ^ 109, (((-3 * j * q ^ 21 + 18 * j * q ^ 22) - 30 * j * q ^ 23) + 18 * j * q ^ 24) - 3 * j * q ^ 25, (4 * j ^ 2 + 6j) * q ^ 2 + (-18 * j ^ 2 - 21j) * q ^ 3 + (28 * j ^ 2 + 30j) * q ^ 4 + (-18 * j ^ 2 - 21j) * q ^ 5 + (4 * j ^ 2 + 6j) * q ^ 6, Unknown(), Unknown(), 4 + (21 * j ^ 2 + 19j) * q + (-29 * j ^ 2 - 33j) * q ^ 2 + (5 * j ^ 2 + 25j) * q ^ 3 + (14 * j ^ 2 - 14j) * q ^ 4 + (5 * j ^ 2 + 25j) * q ^ 5 + (-29 * j ^ 2 - 33j) * q ^ 6 + (21 * j ^ 2 + 19j) * q ^ 7 + 4 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((j * q ^ 21 - 10 * j * q ^ 22) + 25 * j * q ^ 23) - 25 * j * q ^ 24) + 10 * j * q ^ 25) - j * q ^ 26, Unknown(), Unknown(), (((2 - 6q) + (7 * j ^ 2 + 2j) * q ^ 2 + (-30 * j ^ 2 - 26j) * q ^ 3 + (35 * j ^ 2 + 40j) * q ^ 4 + (-32 * j ^ 2 - 40j) * q ^ 5 + (35 * j ^ 2 + 40j) * q ^ 6 + (-30 * j ^ 2 - 26j) * q ^ 7 + (7 * j ^ 2 + 2j) * q ^ 8) - 6 * q ^ 9) + 2 * q ^ 10, j ^ 2 * q ^ 6, Unknown(), Unknown(), j * q ^ 12, ((2 * j * q ^ 3 + (-4 * j ^ 2 - 6j) * q ^ 4) - 8 * q ^ 5) + (-4 * j ^ 2 - 6j) * q ^ 6 + 2 * j * q ^ 7, Unknown(), Unknown(), Unknown(), ((((-(j ^ 2) * q ^ 42 + 10 * j ^ 2 * q ^ 43) - 25 * j ^ 2 * q ^ 44) + 25 * j ^ 2 * q ^ 45) - 10 * j ^ 2 * q ^ 46) + j ^ 2 * q ^ 47, Unknown(), Unknown(), ((((2 * q ^ 63 - 17 * q ^ 64) + 41 * q ^ 65) - 41 * q ^ 66) + 17 * q ^ 67) - 2 * q ^ 68, Unknown(), Unknown(), ((((5 * j ^ 2 + 2j) * q ^ 2 - 6 * j ^ 2 * q ^ 3) + (13 * j ^ 2 + 10j) * q ^ 4 + (-36 * j ^ 2 - 48j) * q ^ 5 + (48 * j ^ 2 + 72j) * q ^ 6 + (-36 * j ^ 2 - 48j) * q ^ 7 + (13 * j ^ 2 + 10j) * q ^ 8) - 6 * j ^ 2 * q ^ 9) + (5 * j ^ 2 + 2j) * q ^ 10, -(q ^ 9), 9 * j ^ 2 * q ^ 105 + (-40 * j ^ 2 - 6j) * q ^ 106 + (62 * j ^ 2 + 12j) * q ^ 107 + (-40 * j ^ 2 - 6j) * q ^ 108 + 9 * j ^ 2 * q ^ 109, ((((2 * j ^ 2 * q ^ 105 - 17 * j ^ 2 * q ^ 106) + 41 * j ^ 2 * q ^ 107) - 41 * j ^ 2 * q ^ 108) + 17 * j ^ 2 * q ^ 109) - 2 * j ^ 2 * q ^ 110, Unknown(), ((-3 * j ^ 2 + 3j) * q ^ 6 - 9 * j * q ^ 7) + 9 * j * q ^ 8 + (3 * j ^ 2 - 3j) * q ^ 9, 9 * j * q ^ 21 + (6 * j ^ 2 - 34j) * q ^ 22 + (-12 * j ^ 2 + 50j) * q ^ 23 + (6 * j ^ 2 - 34j) * q ^ 24 + 9 * j * q ^ 25, Unknown(), (((9 * j ^ 2 * q ^ 42 - 45 * j ^ 2 * q ^ 43) + 72 * j ^ 2 * q ^ 44) - 45 * j ^ 2 * q ^ 45) + 9 * j ^ 2 * q ^ 46, (j ^ 2 + 2j) * q ^ 44 + (-(j ^ 2) - 2j) * q ^ 45, Unknown(), Unknown(), (((3 * j ^ 2 * q ^ 42 - 18 * j ^ 2 * q ^ 43) + 30 * j ^ 2 * q ^ 44) - 18 * j ^ 2 * q ^ 45) + 3 * j ^ 2 * q ^ 46, Unknown(), -540 * j * q ^ 21, (3 * j ^ 2 + 5j) * q ^ 22 + (-6 * j ^ 2 - 10j) * q ^ 23 + (3 * j ^ 2 + 5j) * q ^ 24, (-132 * j * q ^ 21 + 276 * j * q ^ 22) - 132 * j * q ^ 23, Unknown(), ((21 * j * q ^ 21 - 69 * j * q ^ 22) + 69 * j * q ^ 23) - 21 * j * q ^ 24, ((63 * j * q ^ 21 - 207 * j * q ^ 22) + 207 * j * q ^ 23) - 63 * j * q ^ 24, (((-12 * j * q ^ 21 + 60 * j * q ^ 22) - 96 * j * q ^ 23) + 60 * j * q ^ 24) - 12 * j * q ^ 25, Unknown(), (-4 * j * q ^ 21 + (3 * j ^ 2 + 21j) * q ^ 22 + (-12 * j ^ 2 - 40j) * q ^ 23 + (3 * j ^ 2 + 21j) * q ^ 24) - 4 * j * q ^ 25, (((-19 * j * q ^ 21 + 90 * j * q ^ 22) - 142 * j * q ^ 23) + 90 * j * q ^ 24) - 19 * j * q ^ 25, -4 * j * q ^ 21 + (-4 * j ^ 2 + 21j) * q ^ 22 + (8 * j ^ 2 - 43j) * q ^ 23 + (-8 * j ^ 2 + 43j) * q ^ 24 + (4 * j ^ 2 - 21j) * q ^ 25 + 4 * j * q ^ 26, (((-9 * j * q ^ 21 + (-27 * j ^ 2 + 81j) * q ^ 23) - 144 * j * q ^ 24) + (-27 * j ^ 2 + 81j) * q ^ 25) - 9 * j * q ^ 27, (((-27 * j * q ^ 21 + (18 * j ^ 2 + 72j) * q ^ 22 + (9 * j ^ 2 + 36j) * q ^ 23) - 108 * j * q ^ 24) + (9 * j ^ 2 + 36j) * q ^ 25 + (18 * j ^ 2 + 72j) * q ^ 26) - 27 * j * q ^ 27, (((6 * j ^ 2 - 9j) * q ^ 23 + 27 * j * q ^ 24) - 27 * j * q ^ 25) + (-6 * j ^ 2 + 9j) * q ^ 26, ((4 * j * q ^ 21 - 5 * j * q ^ 22) + (9 * j ^ 2 - 39j) * q ^ 23 + (-18 * j ^ 2 + 114j) * q ^ 24 + (18 * j ^ 2 - 114j) * q ^ 25 + (-9 * j ^ 2 + 39j) * q ^ 26 + 5 * j * q ^ 27) - 4 * j * q ^ 28, (13 * j * q ^ 21 + (-6 * j ^ 2 - 46j) * q ^ 22 + (6 * j ^ 2 + 20j) * q ^ 23 + (3 * j ^ 2 + 70j) * q ^ 24 + (-3 * j ^ 2 - 70j) * q ^ 25 + (-6 * j ^ 2 - 20j) * q ^ 26 + (6 * j ^ 2 + 46j) * q ^ 27) - 13 * j * q ^ 28, Unknown(), (-2 * j ^ 2 + 4j) * q ^ 23 + (3 * j ^ 2 - 18j) * q ^ 24 + (-2 * j ^ 2 + 28j) * q ^ 25 + (3 * j ^ 2 - 18j) * q ^ 26 + (-2 * j ^ 2 + 4j) * q ^ 27, (-(q ^ 23) + (-(j ^ 2) - 4j) * q ^ 24 + 6 * j * q ^ 25 + (-(j ^ 2) - 4j) * q ^ 26) - q ^ 27, (-2 * j ^ 2 * q ^ 24 + (2 * j ^ 2 - 4j) * q ^ 25 + 8 * j * q ^ 26 + (2 * j ^ 2 - 4j) * q ^ 27) - 2 * j ^ 2 * q ^ 28, 270 * j * q ^ 21 - 270 * j * q ^ 22, (3 * j ^ 2 + 5j) * q ^ 23 + 6 * q ^ 24 + (3 * j ^ 2 + 13j) * q ^ 25 + (12 * j ^ 2 - 36j) * q ^ 26 + (-24 * j ^ 2 + 48j) * q ^ 27 + (12 * j ^ 2 - 36j) * q ^ 28 + (3 * j ^ 2 + 13j) * q ^ 29 + 6 * q ^ 30 + (3 * j ^ 2 + 5j) * q ^ 31, (9 * j * q ^ 21 + (-9 * j ^ 2 - 36j) * q ^ 22 + (9 * j ^ 2 + 36j) * q ^ 23) - 9 * j * q ^ 24, (-90 * j * q ^ 21 + 180 * j * q ^ 22) - 90 * j * q ^ 23, Unknown(), ((42 * j * q ^ 21 - 138 * j * q ^ 22) + 138 * j * q ^ 23) - 42 * j * q ^ 24, (((-6 * j ^ 2 - 3j) * q ^ 27 + 9 * j ^ 2 * q ^ 28) - 9 * j ^ 2 * q ^ 29) + (6 * j ^ 2 + 3j) * q ^ 30, Unknown(), Unknown(), (((-3 * q ^ 63 + 18 * q ^ 64) - 30 * q ^ 65) + 18 * q ^ 66) - 3 * q ^ 67, Unknown(), q ^ 18, (((-9 * j * q ^ 21 + 45 * j * q ^ 22) - 72 * j * q ^ 23) + 45 * j * q ^ 24) - 9 * j * q ^ 25, Unknown(), 540 * j ^ 2 * q ^ 42, Unknown(), (132 * j ^ 2 * q ^ 42 - 276 * j ^ 2 * q ^ 43) + 132 * j ^ 2 * q ^ 44, ((-21 * j ^ 2 * q ^ 42 + 69 * j ^ 2 * q ^ 43) - 69 * j ^ 2 * q ^ 44) + 21 * j ^ 2 * q ^ 45, ((-63 * j ^ 2 * q ^ 42 + 207 * j ^ 2 * q ^ 43) - 207 * j ^ 2 * q ^ 44) + 63 * j ^ 2 * q ^ 45, (-5 * j ^ 2 * q ^ 42 + (24 * j ^ 2 + 6j) * q ^ 43 + (-32 * j ^ 2 - 6j) * q ^ 44 + (24 * j ^ 2 + 6j) * q ^ 45) - 5 * j ^ 2 * q ^ 46, (4 * j ^ 2 * q ^ 42 + (-25 * j ^ 2 - 4j) * q ^ 43 + (51 * j ^ 2 + 8j) * q ^ 44 + (-51 * j ^ 2 - 8j) * q ^ 45 + (25 * j ^ 2 + 4j) * q ^ 46) - 4 * j ^ 2 * q ^ 47, Unknown(), 9 * j ^ 2 * q ^ 42 + (-108 * j ^ 2 - 27j) * q ^ 44 + 144 * j ^ 2 * q ^ 45 + (-108 * j ^ 2 - 27j) * q ^ 46 + 9 * j ^ 2 * q ^ 48, ((-4 * j ^ 2 * q ^ 42 + 5 * j ^ 2 * q ^ 43 + (48 * j ^ 2 + 9j) * q ^ 44 + (-132 * j ^ 2 - 18j) * q ^ 45 + (132 * j ^ 2 + 18j) * q ^ 46 + (-48 * j ^ 2 - 9j) * q ^ 47) - 5 * j ^ 2 * q ^ 48) + 4 * j ^ 2 * q ^ 49, ((15 * j ^ 2 + 6j) * q ^ 44 - 27 * j ^ 2 * q ^ 45) + 27 * j ^ 2 * q ^ 46 + (-15 * j ^ 2 - 6j) * q ^ 47, ((j * q ^ 44 + (3 * j ^ 2 - j) * q ^ 45) - 6 * j ^ 2 * q ^ 46) + (3 * j ^ 2 - j) * q ^ 47 + j * q ^ 48, -270 * j ^ 2 * q ^ 42 + 270 * j ^ 2 * q ^ 43, (90 * j ^ 2 * q ^ 42 - 180 * j ^ 2 * q ^ 43) + 90 * j ^ 2 * q ^ 44, ((-42 * j ^ 2 * q ^ 42 + 138 * j ^ 2 * q ^ 43) - 138 * j ^ 2 * q ^ 44) + 42 * j ^ 2 * q ^ 45, ((-3 * j ^ 2 - 6j) * q ^ 48 - 9 * q ^ 49) + 9 * q ^ 50 + (3 * j ^ 2 + 6j) * q ^ 51, (-9 * j ^ 2 * q ^ 42 + (40 * j ^ 2 + 6j) * q ^ 43 + (-62 * j ^ 2 - 12j) * q ^ 44 + (40 * j ^ 2 + 6j) * q ^ 45) - 9 * j ^ 2 * q ^ 46, (((3 * j * q ^ 84 - 18 * j * q ^ 85) + 30 * j * q ^ 86) - 18 * j * q ^ 87) + 3 * j * q ^ 88, Unknown(), -540 * q ^ 63, (((45 * q ^ 20 - 60 * q ^ 21) + 21 * q ^ 22 + 21 * q ^ 24) - 60 * q ^ 25) + 45 * q ^ 26, Unknown(), ((21 * q ^ 63 - 69 * q ^ 64) + 69 * q ^ 65) - 21 * q ^ 66, Unknown(), Unknown(), (((-9 * q ^ 63 + (-81 * j ^ 2 - 108j) * q ^ 65) - 144 * q ^ 66) + (-81 * j ^ 2 - 108j) * q ^ 67) - 9 * q ^ 69, Unknown(), (((9 * j ^ 2 + 15j) * q ^ 65 + 27 * q ^ 66) - 27 * q ^ 67) + (-9 * j ^ 2 - 15j) * q ^ 68, (-(j ^ 2) * q ^ 65 + (4 * j ^ 2 + 3j) * q ^ 66 + 6 * q ^ 67 + (4 * j ^ 2 + 3j) * q ^ 68) - j ^ 2 * q ^ 69, ((-81 * q ^ 20 + 45 * q ^ 21) - 45 * q ^ 24) + 81 * q ^ 25, (-90 * q ^ 63 + 180 * q ^ 64) - 90 * q ^ 65, Unknown(), 9 * q ^ 63 + (34 * j ^ 2 + 40j) * q ^ 64 + (-50 * j ^ 2 - 62j) * q ^ 65 + (34 * j ^ 2 + 40j) * q ^ 66 + 9 * q ^ 67, 540 * j * q ^ 84, Unknown(), (132 * j * q ^ 84 - 276 * j * q ^ 85) + 132 * j * q ^ 86, ((((2 * j * q ^ 21 - 17 * j * q ^ 22) + 41 * j * q ^ 23) - 41 * j * q ^ 24) + 17 * j * q ^ 25) - 2 * j * q ^ 26, -270 * j * q ^ 84 + 270 * j * q ^ 85, (90 * j * q ^ 84 - 180 * j * q ^ 85) + 90 * j * q ^ 86, Unknown(), ((-21 * j * q ^ 84 + 69 * j * q ^ 85) - 69 * j * q ^ 86) + 21 * j * q ^ 87, -540 * j ^ 2 * q ^ 105, Unknown(), (-132 * j ^ 2 * q ^ 105 + 276 * j ^ 2 * q ^ 106) - 132 * j ^ 2 * q ^ 107, 270 * j ^ 2 * q ^ 105 - 270 * j ^ 2 * q ^ 106, (-90 * j ^ 2 * q ^ 105 + 180 * j ^ 2 * q ^ 106) - 90 * j ^ 2 * q ^ 107, Unknown(), ((21 * j ^ 2 * q ^ 105 - 69 * j ^ 2 * q ^ 106) + 69 * j ^ 2 * q ^ 107) - 21 * j ^ 2 * q ^ 108]
            end
        f121 = function (q, j)
                return [540, -270 + 270q, (90 - 180q) + 90 * q ^ 2, (132 - 276q) + 132 * q ^ 2, ((-42 + 138q) - 138 * q ^ 2) + 42 * q ^ 3, ((-21 + 69q) - 69 * q ^ 2) + 21 * q ^ 3, -9 + (-36 * j ^ 2 - 27j) * q + (27 * j ^ 2 + 36j) * q ^ 2 + 9 * q ^ 3, ((-63 + 207q) - 207 * q ^ 2) + 63 * q ^ 3, (9 + (36 * j ^ 2 + 27j) * q + (-27 * j ^ 2 - 36j) * q ^ 2) - 9 * q ^ 3, (((-5 + (-24 * j ^ 2 - 18j) * q) - 29 * q ^ 2) + (-18 * j ^ 2 - 24j) * q ^ 3) - 5 * q ^ 4, (((12 - 60q) + 96 * q ^ 2) - 60 * q ^ 3) + 12 * q ^ 4, (((3 - 18q) + 30 * q ^ 2) - 18 * q ^ 3) + 3 * q ^ 4, (5 * j ^ 2 + 2j) * q + 7 * q ^ 2 + (2 * j ^ 2 + 5j) * q ^ 3, (((-9 + (-40 * j ^ 2 - 34j) * q) - 56 * q ^ 2) + (-34 * j ^ 2 - 40j) * q ^ 3) - 9 * q ^ 4, (((9 - 45q) + 72 * q ^ 2) - 45 * q ^ 3) + 9 * q ^ 4, 4 + (21 * j ^ 2 + 18j) * q + 34 * q ^ 2 + (18 * j ^ 2 + 21j) * q ^ 3 + 4 * q ^ 4, (((19 - 90q) + 142 * q ^ 2) - 90 * q ^ 3) + 19 * q ^ 4, ((((-1 + 10q) - 25 * q ^ 2) + 25 * q ^ 3) - 10 * q ^ 4) + q ^ 5, (4 + (25 * j ^ 2 + 21j) * q + (-49 * j ^ 2 - 45j) * q ^ 2 + (45 * j ^ 2 + 49j) * q ^ 3 + (-21 * j ^ 2 - 25j) * q ^ 4) - 4 * q ^ 5, -(q ^ 2) + q ^ 3, Unknown(), (2 + (15 * j ^ 2 + 12j) * q + (-30 * j ^ 2 - 27j) * q ^ 2 + (27 * j ^ 2 + 30j) * q ^ 3 + (-12 * j ^ 2 - 15j) * q ^ 4) - 2 * q ^ 5, Unknown(), ((((-2 + 17q) - 41 * q ^ 2) + 41 * q ^ 3) - 17 * q ^ 4) + 2 * q ^ 5, ((3q - 9 * q ^ 2) + 9 * q ^ 3) - 3 * q ^ 4, (-2 * j ^ 2 - j) * q + (6 * j ^ 2 + 5j) * q ^ 2 + (-5 * j ^ 2 - 6j) * q ^ 3 + (j ^ 2 + 2j) * q ^ 4, 9 + (81 * j ^ 2 + 108j) * q ^ 2 + 144 * q ^ 3 + (108 * j ^ 2 + 81j) * q ^ 4 + 9 * q ^ 6, -(q ^ 3), Unknown(), (-2 * j ^ 2 - 5j) * q + (18 * j ^ 2 + 21j) * q ^ 2 + 32 * q ^ 3 + (21 * j ^ 2 + 18j) * q ^ 4 + (-5 * j ^ 2 - 2j) * q ^ 5, -(q ^ 15), 27 + (72 * j ^ 2 + 54j) * q + (27 * j ^ 2 + 36j) * q ^ 2 + 108 * q ^ 3 + (36 * j ^ 2 + 27j) * q ^ 4 + (54 * j ^ 2 + 72j) * q ^ 5 + 27 * q ^ 6, Unknown(), Unknown(), ((-4 + 5q + (-39 * j ^ 2 - 48j) * q ^ 2 + (114 * j ^ 2 + 132j) * q ^ 3 + (-132 * j ^ 2 - 114j) * q ^ 4 + (48 * j ^ 2 + 39j) * q ^ 5) - 5 * q ^ 6) + 4 * q ^ 7, (-2 * j ^ 2 - j) * q ^ 2 + (6 * j ^ 2 + 5j) * q ^ 3 + (-5 * j ^ 2 - 6j) * q ^ 4 + (j ^ 2 + 2j) * q ^ 5, -13 + (-46 * j ^ 2 - 40j) * q + (26 * j ^ 2 + 8j) * q ^ 2 + (67 * j ^ 2 + 70j) * q ^ 3 + (-70 * j ^ 2 - 67j) * q ^ 4 + (-8 * j ^ 2 - 26j) * q ^ 5 + (40 * j ^ 2 + 46j) * q ^ 6 + 13 * q ^ 7, (q + (7 * j ^ 2 + 6j) * q ^ 2 + (-13 * j ^ 2 - 12j) * q ^ 3 + (12 * j ^ 2 + 13j) * q ^ 4 + (-6 * j ^ 2 - 7j) * q ^ 5) - q ^ 6, (j ^ 2 + 2j) * q + (-9 * j ^ 2 - 12j) * q ^ 2 + (26 * j ^ 2 + 28j) * q ^ 3 + (-28 * j ^ 2 - 26j) * q ^ 4 + (12 * j ^ 2 + 9j) * q ^ 5 + (-2 * j ^ 2 - j) * q ^ 6, (-9 * j ^ 2 - 15j) * q ^ 2 + (24 * j ^ 2 + 30j) * q ^ 3 + (-30 * j ^ 2 - 24j) * q ^ 4 + (15 * j ^ 2 + 9j) * q ^ 5, Unknown(), -9 + (-38 * j ^ 2 - 32j) * q + (36 * j ^ 2 + 24j) * q ^ 2 + (j ^ 2 + 7j) * q ^ 3 + (-7 * j ^ 2 - j) * q ^ 4 + (-24 * j ^ 2 - 36j) * q ^ 5 + (32 * j ^ 2 + 38j) * q ^ 6 + 9 * q ^ 7, Unknown(), Unknown(), (((((2 - 8q) + (-12 * j ^ 2 - 5j) * q ^ 2 + (2 * j ^ 2 - 6j) * q ^ 3) - 9 * q ^ 4) + (-6 * j ^ 2 + 2j) * q ^ 5 + (-5 * j ^ 2 - 12j) * q ^ 6) - 8 * q ^ 7) + 2 * q ^ 8, ((j ^ 2 * q ^ 2 + (-3 * j ^ 2 - 4j) * q ^ 3) - 6 * q ^ 4) + (-4 * j ^ 2 - 3j) * q ^ 5 + j * q ^ 6, (((-3 * q ^ 105 + 18 * q ^ 106) - 30 * q ^ 107) + 18 * q ^ 108) - 3 * q ^ 109, (((-3 * q ^ 21 + 18 * q ^ 22) - 30 * q ^ 23) + 18 * q ^ 24) - 3 * q ^ 25, (((4 * j ^ 2 + 6j) * q ^ 2 + (-16 * j ^ 2 - 23j) * q ^ 3) - 29 * q ^ 4) + (-23 * j ^ 2 - 16j) * q ^ 5 + (6 * j ^ 2 + 4j) * q ^ 6, Unknown(), Unknown(), 4 + (21 * j ^ 2 + 19j) * q + (-37 * j ^ 2 - 25j) * q ^ 2 + (21 * j ^ 2 + 9j) * q ^ 3 + (9 * j ^ 2 + 21j) * q ^ 5 + (-25 * j ^ 2 - 37j) * q ^ 6 + (19 * j ^ 2 + 21j) * q ^ 7 + 4 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((q ^ 21 - 10 * q ^ 22) + 25 * q ^ 23) - 25 * q ^ 24) + 10 * q ^ 25) - q ^ 26, Unknown(), Unknown(), (((2 - 6q) + (4 * j ^ 2 + 5j) * q ^ 2 + 28 * q ^ 3 + (39 * j ^ 2 + 36j) * q ^ 4 + 36 * q ^ 5 + (36 * j ^ 2 + 39j) * q ^ 6 + 28 * q ^ 7 + (5 * j ^ 2 + 4j) * q ^ 8) - 6 * q ^ 9) + 2 * q ^ 10, q ^ 6, Unknown(), Unknown(), q ^ 12, ((2 * j * q ^ 3 + (-3 * j ^ 2 - 7j) * q ^ 4) - 8 * q ^ 5) + (-7 * j ^ 2 - 3j) * q ^ 6 + 2 * j ^ 2 * q ^ 7, Unknown(), Unknown(), Unknown(), ((((-(q ^ 42) + 10 * q ^ 43) - 25 * q ^ 44) + 25 * q ^ 45) - 10 * q ^ 46) + q ^ 47, Unknown(), Unknown(), ((((2 * q ^ 63 - 17 * q ^ 64) + 41 * q ^ 65) - 41 * q ^ 66) + 17 * q ^ 67) - 2 * q ^ 68, Unknown(), Unknown(), ((((((5 * j ^ 2 + 2j) * q ^ 2 - 6 * j ^ 2 * q ^ 3) + (13 * j ^ 2 + 10j) * q ^ 4 + 42 * q ^ 5) - 60 * q ^ 6) + 42 * q ^ 7 + (10 * j ^ 2 + 13j) * q ^ 8) - 6 * j * q ^ 9) + (2 * j ^ 2 + 5j) * q ^ 10, -(q ^ 9), 9 * q ^ 105 + (40 * j ^ 2 + 34j) * q ^ 106 + 56 * q ^ 107 + (34 * j ^ 2 + 40j) * q ^ 108 + 9 * q ^ 109, ((((2 * q ^ 105 - 17 * q ^ 106) + 41 * q ^ 107) - 41 * q ^ 108) + 17 * q ^ 109) - 2 * q ^ 110, Unknown(), ((-9 * j ^ 2 + 9j) * q ^ 6 - 9 * j * q ^ 7) + 9 * j ^ 2 * q ^ 8 + (-9 * j ^ 2 + 9j) * q ^ 9, 9 * q ^ 21 + (40 * j ^ 2 + 34j) * q ^ 22 + 56 * q ^ 23 + (34 * j ^ 2 + 40j) * q ^ 24 + 9 * q ^ 25, Unknown(), (((9 * q ^ 42 - 45 * q ^ 43) + 72 * q ^ 44) - 45 * q ^ 45) + 9 * q ^ 46, 0, Unknown(), Unknown(), (((3 * q ^ 42 - 18 * q ^ 43) + 30 * q ^ 44) - 18 * q ^ 45) + 3 * q ^ 46, Unknown(), -540 * q ^ 21, ((-5 * j ^ 2 - 2j) * q ^ 22 - 7 * q ^ 23) + (-2 * j ^ 2 - 5j) * q ^ 24, (-132 * q ^ 21 + 276 * q ^ 22) - 132 * q ^ 23, Unknown(), ((21 * q ^ 21 - 69 * q ^ 22) + 69 * q ^ 23) - 21 * q ^ 24, ((63 * q ^ 21 - 207 * q ^ 22) + 207 * q ^ 23) - 63 * q ^ 24, (((-12 * q ^ 21 + 60 * q ^ 22) - 96 * q ^ 23) + 60 * q ^ 24) - 12 * q ^ 25, Unknown(), (((-4 * q ^ 21 + (-21 * j ^ 2 - 18j) * q ^ 22) - 34 * q ^ 23) + (-18 * j ^ 2 - 21j) * q ^ 24) - 4 * q ^ 25, (((-19 * q ^ 21 + 90 * q ^ 22) - 142 * q ^ 23) + 90 * q ^ 24) - 19 * q ^ 25, -4 * q ^ 21 + (-25 * j ^ 2 - 21j) * q ^ 22 + (49 * j ^ 2 + 45j) * q ^ 23 + (-45 * j ^ 2 - 49j) * q ^ 24 + (21 * j ^ 2 + 25j) * q ^ 25 + 4 * q ^ 26, (((-9 * q ^ 21 + (-81 * j ^ 2 - 108j) * q ^ 23) - 144 * q ^ 24) + (-108 * j ^ 2 - 81j) * q ^ 25) - 9 * q ^ 27, (((-27 * q ^ 21 + (-72 * j ^ 2 - 54j) * q ^ 22 + (-27 * j ^ 2 - 36j) * q ^ 23) - 108 * q ^ 24) + (-36 * j ^ 2 - 27j) * q ^ 25 + (-54 * j ^ 2 - 72j) * q ^ 26) - 27 * q ^ 27, (9 * j ^ 2 + 15j) * q ^ 23 + (-24 * j ^ 2 - 30j) * q ^ 24 + (30 * j ^ 2 + 24j) * q ^ 25 + (-15 * j ^ 2 - 9j) * q ^ 26, ((4 * q ^ 21 - 5 * q ^ 22) + (39 * j ^ 2 + 48j) * q ^ 23 + (-114 * j ^ 2 - 132j) * q ^ 24 + (132 * j ^ 2 + 114j) * q ^ 25 + (-48 * j ^ 2 - 39j) * q ^ 26 + 5 * q ^ 27) - 4 * q ^ 28, (13 * q ^ 21 + (46 * j ^ 2 + 40j) * q ^ 22 + (-26 * j ^ 2 - 8j) * q ^ 23 + (-67 * j ^ 2 - 70j) * q ^ 24 + (70 * j ^ 2 + 67j) * q ^ 25 + (8 * j ^ 2 + 26j) * q ^ 26 + (-40 * j ^ 2 - 46j) * q ^ 27) - 13 * q ^ 28, Unknown(), (-4 * j ^ 2 - 6j) * q ^ 23 + (16 * j ^ 2 + 23j) * q ^ 24 + 29 * q ^ 25 + (23 * j ^ 2 + 16j) * q ^ 26 + (-6 * j ^ 2 - 4j) * q ^ 27, (-(j ^ 2) * q ^ 23 + (3 * j ^ 2 + 4j) * q ^ 24 + 6 * q ^ 25 + (4 * j ^ 2 + 3j) * q ^ 26) - j * q ^ 27, (-2 * j * q ^ 24 + (3 * j ^ 2 + 7j) * q ^ 25 + 8 * q ^ 26 + (7 * j ^ 2 + 3j) * q ^ 27) - 2 * j ^ 2 * q ^ 28, 270 * q ^ 21 - 270 * q ^ 22, (((((-5 * j ^ 2 - 2j) * q ^ 23 + 6 * j ^ 2 * q ^ 24 + (-13 * j ^ 2 - 10j) * q ^ 25) - 42 * q ^ 26) + 60 * q ^ 27) - 42 * q ^ 28) + (-10 * j ^ 2 - 13j) * q ^ 29 + 6 * j * q ^ 30 + (-2 * j ^ 2 - 5j) * q ^ 31, (9 * q ^ 21 + (36 * j ^ 2 + 27j) * q ^ 22 + (-27 * j ^ 2 - 36j) * q ^ 23) - 9 * q ^ 24, (-90 * q ^ 21 + 180 * q ^ 22) - 90 * q ^ 23, Unknown(), ((42 * q ^ 21 - 138 * q ^ 22) + 138 * q ^ 23) - 42 * q ^ 24, (((9 * j ^ 2 - 9j) * q ^ 27 + 9 * j * q ^ 28) - 9 * j ^ 2 * q ^ 29) + (9 * j ^ 2 - 9j) * q ^ 30, Unknown(), Unknown(), (((-3 * q ^ 63 + 18 * q ^ 64) - 30 * q ^ 65) + 18 * q ^ 66) - 3 * q ^ 67, Unknown(), q ^ 18, (((-9 * q ^ 21 + 45 * q ^ 22) - 72 * q ^ 23) + 45 * q ^ 24) - 9 * q ^ 25, Unknown(), 540 * q ^ 42, Unknown(), (132 * q ^ 42 - 276 * q ^ 43) + 132 * q ^ 44, ((-21 * q ^ 42 + 69 * q ^ 43) - 69 * q ^ 44) + 21 * q ^ 45, ((-63 * q ^ 42 + 207 * q ^ 43) - 207 * q ^ 44) + 63 * q ^ 45, (((-5 * q ^ 42 + (-24 * j ^ 2 - 18j) * q ^ 43) - 29 * q ^ 44) + (-18 * j ^ 2 - 24j) * q ^ 45) - 5 * q ^ 46, (4 * q ^ 42 + (25 * j ^ 2 + 21j) * q ^ 43 + (-49 * j ^ 2 - 45j) * q ^ 44 + (45 * j ^ 2 + 49j) * q ^ 45 + (-21 * j ^ 2 - 25j) * q ^ 46) - 4 * q ^ 47, Unknown(), 9 * q ^ 42 + (81 * j ^ 2 + 108j) * q ^ 44 + 144 * q ^ 45 + (108 * j ^ 2 + 81j) * q ^ 46 + 9 * q ^ 48, ((-4 * q ^ 42 + 5 * q ^ 43 + (-39 * j ^ 2 - 48j) * q ^ 44 + (114 * j ^ 2 + 132j) * q ^ 45 + (-132 * j ^ 2 - 114j) * q ^ 46 + (48 * j ^ 2 + 39j) * q ^ 47) - 5 * q ^ 48) + 4 * q ^ 49, (-9 * j ^ 2 - 15j) * q ^ 44 + (24 * j ^ 2 + 30j) * q ^ 45 + (-30 * j ^ 2 - 24j) * q ^ 46 + (15 * j ^ 2 + 9j) * q ^ 47, ((j ^ 2 * q ^ 44 + (-3 * j ^ 2 - 4j) * q ^ 45) - 6 * q ^ 46) + (-4 * j ^ 2 - 3j) * q ^ 47 + j * q ^ 48, -270 * q ^ 42 + 270 * q ^ 43, (90 * q ^ 42 - 180 * q ^ 43) + 90 * q ^ 44, ((-42 * q ^ 42 + 138 * q ^ 43) - 138 * q ^ 44) + 42 * q ^ 45, ((-9 * j ^ 2 + 9j) * q ^ 48 - 9 * j * q ^ 49) + 9 * j ^ 2 * q ^ 50 + (-9 * j ^ 2 + 9j) * q ^ 51, (((-9 * q ^ 42 + (-40 * j ^ 2 - 34j) * q ^ 43) - 56 * q ^ 44) + (-34 * j ^ 2 - 40j) * q ^ 45) - 9 * q ^ 46, (((3 * q ^ 84 - 18 * q ^ 85) + 30 * q ^ 86) - 18 * q ^ 87) + 3 * q ^ 88, Unknown(), -540 * q ^ 63, (((45 * q ^ 20 - 60 * q ^ 21) + 21 * q ^ 22 + 21 * q ^ 24) - 60 * q ^ 25) + 45 * q ^ 26, Unknown(), ((21 * q ^ 63 - 69 * q ^ 64) + 69 * q ^ 65) - 21 * q ^ 66, Unknown(), Unknown(), (((-9 * q ^ 63 + (-81 * j ^ 2 - 108j) * q ^ 65) - 144 * q ^ 66) + (-108 * j ^ 2 - 81j) * q ^ 67) - 9 * q ^ 69, Unknown(), (9 * j ^ 2 + 15j) * q ^ 65 + (-24 * j ^ 2 - 30j) * q ^ 66 + (30 * j ^ 2 + 24j) * q ^ 67 + (-15 * j ^ 2 - 9j) * q ^ 68, (-(j ^ 2) * q ^ 65 + (3 * j ^ 2 + 4j) * q ^ 66 + 6 * q ^ 67 + (4 * j ^ 2 + 3j) * q ^ 68) - j * q ^ 69, ((-81 * q ^ 20 + 45 * q ^ 21) - 45 * q ^ 24) + 81 * q ^ 25, (-90 * q ^ 63 + 180 * q ^ 64) - 90 * q ^ 65, Unknown(), 9 * q ^ 63 + (40 * j ^ 2 + 34j) * q ^ 64 + 56 * q ^ 65 + (34 * j ^ 2 + 40j) * q ^ 66 + 9 * q ^ 67, 540 * q ^ 84, Unknown(), (132 * q ^ 84 - 276 * q ^ 85) + 132 * q ^ 86, ((((2 * q ^ 21 - 17 * q ^ 22) + 41 * q ^ 23) - 41 * q ^ 24) + 17 * q ^ 25) - 2 * q ^ 26, -270 * q ^ 84 + 270 * q ^ 85, (90 * q ^ 84 - 180 * q ^ 85) + 90 * q ^ 86, Unknown(), ((-21 * q ^ 84 + 69 * q ^ 85) - 69 * q ^ 86) + 21 * q ^ 87, -540 * q ^ 105, Unknown(), (-132 * q ^ 105 + 276 * q ^ 106) - 132 * q ^ 107, 270 * q ^ 105 - 270 * q ^ 106, (-90 * q ^ 105 + 180 * q ^ 106) - 90 * q ^ 107, Unknown(), ((21 * q ^ 105 - 69 * q ^ 106) + 69 * q ^ 107) - 21 * q ^ 108]
            end
        f123 = (q->begin
                    [560, -320 + 240q, (134 - 186q) + 54 * q ^ 2, (184 - 272q) + 104 * q ^ 2, ((-78 + 162q) - 110 * q ^ 2) + 24 * q ^ 3, ((-46 + 88q) - 48 * q ^ 2) + 6 * q ^ 3, (-20 + 48q) - 18 * q ^ 2, ((-106 + 234q) - 174 * q ^ 2) + 46 * q ^ 3, ((-2 - 18q) + 48 * q ^ 2) - 18 * q ^ 3, (((2 + 10q) - 36 * q ^ 2) + 30 * q ^ 3) - 8 * q ^ 4, (((34 - 88q) + 86 * q ^ 2) - 36 * q ^ 3) + 6 * q ^ 4, ((14 - 32q) + 24 * q ^ 2) - 6 * q ^ 3, (2 - 8q) + 5 * q ^ 2, (((-12 + 44q) - 61 * q ^ 2) + 32 * q ^ 3) - 4 * q ^ 4, (((27 - 70q) + 64 * q ^ 2) - 24 * q ^ 3) + 3 * q ^ 4, ((12 - 36q) + 30 * q ^ 2) - 8 * q ^ 3, (((45 - 127q) + 130 * q ^ 2) - 61 * q ^ 3) + 11 * q ^ 4, (((-8 + 25q) - 27 * q ^ 2) + 13 * q ^ 3) - 3 * q ^ 4, ((((7 - 30q) + 54 * q ^ 2) - 44 * q ^ 3) + 16 * q ^ 4) - 2 * q ^ 5, q - q ^ 2, Unknown(), (((6 - 24q) + 35 * q ^ 2) - 22 * q ^ 3) + 5 * q ^ 4, Unknown(), ((((-12 + 37q) - 44 * q ^ 2) + 25 * q ^ 3) - 7 * q ^ 4) + q ^ 5, ((-4 + 10q) - 9 * q ^ 2) + 3 * q ^ 3, ((-1 + 6q) - 6 * q ^ 2) + 2 * q ^ 3, ((20 - 144 * q ^ 2) + 144 * q ^ 3) - 54 * q ^ 4, 0, Unknown(), (((2 + 8q) - 38 * q ^ 2) + 32 * q ^ 3) - 6 * q ^ 4, 0, (((((38 - 96q) - 18 * q ^ 2) + 108 * q ^ 3) - 48 * q ^ 4) - 36 * q ^ 5) + 18 * q ^ 6, Unknown(), Unknown(), (((-12 + 8q + 84 * q ^ 2) - 140 * q ^ 3) + 94 * q ^ 4) - 24 * q ^ 5, ((-q + 6 * q ^ 2) - 6 * q ^ 3) + 2 * q ^ 4, (((((-22 + 72q) - 30 * q ^ 2) - 68 * q ^ 3) + 76 * q ^ 4) - 26 * q ^ 6) + 8 * q ^ 7, (((3q - 8 * q ^ 2) + 14 * q ^ 3) - 12 * q ^ 4) + 4 * q ^ 5, ((((-1 - 4q) + 25 * q ^ 2) - 34 * q ^ 3) + 17 * q ^ 4) - 3 * q ^ 5, (((-2 + 30 * q ^ 2) - 37 * q ^ 3) + 15 * q ^ 4) - 2 * q ^ 5, Unknown(), (((((-16 + 72q) - 80 * q ^ 2) + 13 * q ^ 3 + 35 * q ^ 4) - 12 * q ^ 5) - 12 * q ^ 6) + 4 * q ^ 7, Unknown(), Unknown(), (((((6 - 34q) + 50 * q ^ 2) - 17 * q ^ 3) - 31 * q ^ 4) + 34 * q ^ 5) - 9 * q ^ 6, ((-5 * q ^ 2 + 6 * q ^ 3) - 3 * q ^ 4) + q ^ 5, ((-14 * q ^ 90 + 32 * q ^ 91) - 24 * q ^ 92) + 6 * q ^ 93, ((-14 * q ^ 18 + 32 * q ^ 19) - 24 * q ^ 20) + 6 * q ^ 21, (((((1 - q) - 18 * q ^ 2) + 33 * q ^ 3) - 24 * q ^ 4) + 8 * q ^ 5) - q ^ 6, Unknown(), Unknown(), ((((((9 - 49q) + 77 * q ^ 2) - 42 * q ^ 3) - 16 * q ^ 4) + 23 * q ^ 5 + 2 * q ^ 6) - 8 * q ^ 7) + 2 * q ^ 8, Unknown(), Unknown(), Unknown(), (((8 * q ^ 18 - 25 * q ^ 19) + 27 * q ^ 20) - 13 * q ^ 21) + 3 * q ^ 22, Unknown(), Unknown(), ((((((6 - 26q) + 18 * q ^ 2 + 34 * q ^ 3) - 71 * q ^ 4) + 56 * q ^ 5) - 28 * q ^ 6) + 14 * q ^ 7) - 5 * q ^ 8, 0, Unknown(), Unknown(), 0, ((-(q ^ 2) - 6 * q ^ 3) + 11 * q ^ 4) - 6 * q ^ 5, Unknown(), Unknown(), Unknown(), (((-8 * q ^ 36 + 25 * q ^ 37) - 27 * q ^ 38) + 13 * q ^ 39) - 3 * q ^ 40, Unknown(), Unknown(), ((((12 * q ^ 54 - 37 * q ^ 55) + 44 * q ^ 56) - 25 * q ^ 57) + 7 * q ^ 58) - q ^ 59, Unknown(), Unknown(), (((((((2 - 8 * q ^ 2) + 12 * q ^ 3) - 30 * q ^ 4) + 62 * q ^ 5) - 52 * q ^ 6) + 18 * q ^ 7) - 6 * q ^ 8) + 4 * q ^ 9, 0, (((12 * q ^ 90 - 44 * q ^ 91) + 61 * q ^ 92) - 32 * q ^ 93) + 4 * q ^ 94, ((((12 * q ^ 90 - 37 * q ^ 91) + 44 * q ^ 92) - 25 * q ^ 93) + 7 * q ^ 94) - q ^ 95, Unknown(), (3 * q ^ 4 - 19 * q ^ 6) + 6 * q ^ 7, (((12 * q ^ 18 - 44 * q ^ 19) + 61 * q ^ 20) - 32 * q ^ 21) + 4 * q ^ 22, Unknown(), (((27 * q ^ 36 - 70 * q ^ 37) + 64 * q ^ 38) - 24 * q ^ 39) + 3 * q ^ 40, -(q ^ 38), Unknown(), Unknown(), ((14 * q ^ 36 - 32 * q ^ 37) + 24 * q ^ 38) - 6 * q ^ 39, Unknown(), -560 * q ^ 18, (-2 * q ^ 18 + 8 * q ^ 19) - 5 * q ^ 20, (-184 * q ^ 18 + 272 * q ^ 19) - 104 * q ^ 20, Unknown(), ((46 * q ^ 18 - 88 * q ^ 19) + 48 * q ^ 20) - 6 * q ^ 21, ((106 * q ^ 18 - 234 * q ^ 19) + 174 * q ^ 20) - 46 * q ^ 21, (((-34 * q ^ 18 + 88 * q ^ 19) - 86 * q ^ 20) + 36 * q ^ 21) - 6 * q ^ 22, Unknown(), ((-12 * q ^ 18 + 36 * q ^ 19) - 30 * q ^ 20) + 8 * q ^ 21, (((-45 * q ^ 18 + 127 * q ^ 19) - 130 * q ^ 20) + 61 * q ^ 21) - 11 * q ^ 22, ((((-7 * q ^ 18 + 30 * q ^ 19) - 54 * q ^ 20) + 44 * q ^ 21) - 16 * q ^ 22) + 2 * q ^ 23, ((-20 * q ^ 18 + 144 * q ^ 20) - 144 * q ^ 21) + 54 * q ^ 22, (((-38 * q ^ 18 + 96 * q ^ 19 + 18 * q ^ 20) - 108 * q ^ 21) + 48 * q ^ 22 + 36 * q ^ 23) - 18 * q ^ 24, (((2 * q ^ 18 - 30 * q ^ 20) + 37 * q ^ 21) - 15 * q ^ 22) + 2 * q ^ 23, ((((12 * q ^ 18 - 8 * q ^ 19) - 84 * q ^ 20) + 140 * q ^ 21) - 94 * q ^ 22) + 24 * q ^ 23, ((((22 * q ^ 18 - 72 * q ^ 19) + 30 * q ^ 20 + 68 * q ^ 21) - 76 * q ^ 22) + 26 * q ^ 24) - 8 * q ^ 25, Unknown(), ((((-(q ^ 18) + q ^ 19 + 18 * q ^ 20) - 33 * q ^ 21) + 24 * q ^ 22) - 8 * q ^ 23) + q ^ 24, ((5 * q ^ 20 - 6 * q ^ 21) + 3 * q ^ 22) - q ^ 23, ((q ^ 20 + 6 * q ^ 21) - 11 * q ^ 22) + 6 * q ^ 23, 320 * q ^ 18 - 240 * q ^ 19, (((((((-2 * q ^ 18 + 8 * q ^ 20) - 12 * q ^ 21) + 30 * q ^ 22) - 62 * q ^ 23) + 52 * q ^ 24) - 18 * q ^ 25) + 6 * q ^ 26) - 4 * q ^ 27, (20 * q ^ 18 - 48 * q ^ 19) + 18 * q ^ 20, (-134 * q ^ 18 + 186 * q ^ 19) - 54 * q ^ 20, Unknown(), ((78 * q ^ 18 - 162 * q ^ 19) + 110 * q ^ 20) - 24 * q ^ 21, (-3 * q ^ 22 + 19 * q ^ 24) - 6 * q ^ 25, Unknown(), Unknown(), ((-14 * q ^ 54 + 32 * q ^ 55) - 24 * q ^ 56) + 6 * q ^ 57, Unknown(), 0, (((-27 * q ^ 18 + 70 * q ^ 19) - 64 * q ^ 20) + 24 * q ^ 21) - 3 * q ^ 22, Unknown(), 560 * q ^ 36, Unknown(), (184 * q ^ 36 - 272 * q ^ 37) + 104 * q ^ 38, ((-46 * q ^ 36 + 88 * q ^ 37) - 48 * q ^ 38) + 6 * q ^ 39, ((-106 * q ^ 36 + 234 * q ^ 37) - 174 * q ^ 38) + 46 * q ^ 39, (((2 * q ^ 36 + 10 * q ^ 37) - 36 * q ^ 38) + 30 * q ^ 39) - 8 * q ^ 40, ((((7 * q ^ 36 - 30 * q ^ 37) + 54 * q ^ 38) - 44 * q ^ 39) + 16 * q ^ 40) - 2 * q ^ 41, Unknown(), ((20 * q ^ 36 - 144 * q ^ 38) + 144 * q ^ 39) - 54 * q ^ 40, (((-12 * q ^ 36 + 8 * q ^ 37 + 84 * q ^ 38) - 140 * q ^ 39) + 94 * q ^ 40) - 24 * q ^ 41, (((-2 * q ^ 36 + 30 * q ^ 38) - 37 * q ^ 39) + 15 * q ^ 40) - 2 * q ^ 41, ((-5 * q ^ 38 + 6 * q ^ 39) - 3 * q ^ 40) + q ^ 41, -320 * q ^ 36 + 240 * q ^ 37, (134 * q ^ 36 - 186 * q ^ 37) + 54 * q ^ 38, ((-78 * q ^ 36 + 162 * q ^ 37) - 110 * q ^ 38) + 24 * q ^ 39, (3 * q ^ 40 - 19 * q ^ 42) + 6 * q ^ 43, (((-12 * q ^ 36 + 44 * q ^ 37) - 61 * q ^ 38) + 32 * q ^ 39) - 4 * q ^ 40, ((14 * q ^ 72 - 32 * q ^ 73) + 24 * q ^ 74) - 6 * q ^ 75, Unknown(), -560 * q ^ 54, ((((((11 * q ^ 12 - 4 * q ^ 13) - 24 * q ^ 15) + 12 * q ^ 16) - 48 * q ^ 18) + 32 * q ^ 19 + 45 * q ^ 20) - 68 * q ^ 21) + 28 * q ^ 22, Unknown(), ((46 * q ^ 54 - 88 * q ^ 55) + 48 * q ^ 56) - 6 * q ^ 57, Unknown(), Unknown(), ((-20 * q ^ 54 + 144 * q ^ 56) - 144 * q ^ 57) + 54 * q ^ 58, Unknown(), (((2 * q ^ 54 - 30 * q ^ 56) + 37 * q ^ 57) - 15 * q ^ 58) + 2 * q ^ 59, ((5 * q ^ 56 - 6 * q ^ 57) + 3 * q ^ 58) - q ^ 59, ((-15 * q ^ 12 + 36 * q ^ 15 + 80 * q ^ 18) - 81 * q ^ 20) + 60 * q ^ 21, (-134 * q ^ 54 + 186 * q ^ 55) - 54 * q ^ 56, Unknown(), (((12 * q ^ 54 - 44 * q ^ 55) + 61 * q ^ 56) - 32 * q ^ 57) + 4 * q ^ 58, 560 * q ^ 72, Unknown(), (184 * q ^ 72 - 272 * q ^ 73) + 104 * q ^ 74, ((((12 * q ^ 18 - 37 * q ^ 19) + 44 * q ^ 20) - 25 * q ^ 21) + 7 * q ^ 22) - q ^ 23, -320 * q ^ 72 + 240 * q ^ 73, (134 * q ^ 72 - 186 * q ^ 73) + 54 * q ^ 74, Unknown(), ((-46 * q ^ 72 + 88 * q ^ 73) - 48 * q ^ 74) + 6 * q ^ 75, -560 * q ^ 90, Unknown(), (-184 * q ^ 90 + 272 * q ^ 91) - 104 * q ^ 92, 320 * q ^ 90 - 240 * q ^ 91, (-134 * q ^ 90 + 186 * q ^ 91) - 54 * q ^ 92, Unknown(), ((46 * q ^ 90 - 88 * q ^ 91) + 48 * q ^ 92) - 6 * q ^ 93]
                end)
        f125 = (q->begin
                    [560, -280 + 280q, (94 - 186q) + 94 * q ^ 2, (136 - 288q) + 136 * q ^ 2, ((-43 + 144q) - 144 * q ^ 2) + 43 * q ^ 3, ((-22 + 72q) - 72 * q ^ 2) + 22 * q ^ 3, ((-12 + 30q) - 30 * q ^ 2) + 12 * q ^ 3, ((-64 + 216q) - 216 * q ^ 2) + 64 * q ^ 3, ((10 - 30q) + 30 * q ^ 2) - 10 * q ^ 3, (((-7 + 19q) - 28 * q ^ 2) + 19 * q ^ 3) - 7 * q ^ 4, (((12 - 62q) + 102 * q ^ 2) - 62 * q ^ 3) + 12 * q ^ 4, (((3 - 19q) + 32 * q ^ 2) - 19 * q ^ 3) + 3 * q ^ 4, (((1 - 3q) + 6 * q ^ 2) - 3 * q ^ 3) + q ^ 4, (((-10 + 38q) - 54 * q ^ 2) + 38 * q ^ 3) - 10 * q ^ 4, (((9 - 47q) + 76 * q ^ 2) - 47 * q ^ 3) + 9 * q ^ 4, (((4 - 22q) + 32 * q ^ 2) - 22 * q ^ 3) + 4 * q ^ 4, (((19 - 93q) + 150 * q ^ 2) - 93 * q ^ 3) + 19 * q ^ 4, ((((-1 + 10q) - 27 * q ^ 2) + 27 * q ^ 3) - 10 * q ^ 4) + q ^ 5, ((((5 - 24q) + 46 * q ^ 2) - 46 * q ^ 3) + 24 * q ^ 4) - 5 * q ^ 5, -(q ^ 2) + q ^ 3, Unknown(), ((((3 - 14q) + 28 * q ^ 2) - 28 * q ^ 3) + 14 * q ^ 4) - 3 * q ^ 5, Unknown(), ((((-2 + 17q) - 44 * q ^ 2) + 44 * q ^ 3) - 17 * q ^ 4) + 2 * q ^ 5, ((3q - 10 * q ^ 2) + 10 * q ^ 3) - 3 * q ^ 4, ((2q - 5 * q ^ 2) + 5 * q ^ 3) - 2 * q ^ 4, (((12 - 90 * q ^ 2) + 176 * q ^ 3) - 90 * q ^ 4) + 12 * q ^ 6, 0, Unknown(), ((((1 + 3q) - 23 * q ^ 2) + 34 * q ^ 3) - 23 * q ^ 4) + 3 * q ^ 5 + q ^ 6, 0, (((((34 - 60q) - 30 * q ^ 2) + 132 * q ^ 3) - 30 * q ^ 4) - 60 * q ^ 5) + 34 * q ^ 6, Unknown(), Unknown(), (((((-4 + 8q + 42 * q ^ 2) - 136 * q ^ 3) + 136 * q ^ 4) - 42 * q ^ 5) - 8 * q ^ 6) + 4 * q ^ 7, ((2 * q ^ 2 - 5 * q ^ 3) + 5 * q ^ 4) - 2 * q ^ 5, (((((-15 + 47q) - 16 * q ^ 2) - 80 * q ^ 3) + 80 * q ^ 4 + 16 * q ^ 5) - 47 * q ^ 6) + 15 * q ^ 7, ((((2q - 6 * q ^ 2) + 13 * q ^ 3) - 13 * q ^ 4) + 6 * q ^ 5) - 2 * q ^ 6, ((12 * q ^ 2 - 30 * q ^ 3) + 30 * q ^ 4) - 12 * q ^ 5, ((((-1 + 10 * q ^ 2) - 33 * q ^ 3) + 33 * q ^ 4) - 10 * q ^ 5) + q ^ 7, Unknown(), (((((-12 + 36q) - 32 * q ^ 2) - 10 * q ^ 3) + 10 * q ^ 4 + 32 * q ^ 5) - 36 * q ^ 6) + 12 * q ^ 7, Unknown(), Unknown(), (((((3 - 10q) + 11 * q ^ 2 + 2 * q ^ 3) - 10 * q ^ 4) + 2 * q ^ 5 + 11 * q ^ 6) - 10 * q ^ 7) + 3 * q ^ 8, (4 * q ^ 3 - 6 * q ^ 4) + 4 * q ^ 5, (((3 * q ^ 105 - 19 * q ^ 106) + 32 * q ^ 107) - 19 * q ^ 108) + 3 * q ^ 109, (((3 * q ^ 21 - 19 * q ^ 22) + 32 * q ^ 23) - 19 * q ^ 24) + 3 * q ^ 25, (((((-q - 4 * q ^ 2) + 21 * q ^ 3) - 36 * q ^ 4) + 21 * q ^ 5) - 4 * q ^ 6) - q ^ 7, Unknown(), Unknown(), (((((((5 - 23q) + 33 * q ^ 2) - 13 * q ^ 3) - 8 * q ^ 4) - 13 * q ^ 5) + 33 * q ^ 6) - 23 * q ^ 7) + 5 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-(q ^ 21) + 10 * q ^ 22) - 27 * q ^ 23) + 27 * q ^ 24) - 10 * q ^ 25) + q ^ 26, Unknown(), Unknown(), (((((((((3 - 6q) - 4 * q ^ 2) + 28 * q ^ 3) - 36 * q ^ 4) + 32 * q ^ 5) - 36 * q ^ 6) + 28 * q ^ 7) - 4 * q ^ 8) - 6 * q ^ 9) + 3 * q ^ 10, 0, Unknown(), Unknown(), 0, (7 * q ^ 4 - 12 * q ^ 5) + 7 * q ^ 6, Unknown(), Unknown(), Unknown(), ((((-(q ^ 42) + 10 * q ^ 43) - 27 * q ^ 44) + 27 * q ^ 45) - 10 * q ^ 46) + q ^ 47, Unknown(), Unknown(), ((((-2 * q ^ 63 + 17 * q ^ 64) - 44 * q ^ 65) + 44 * q ^ 66) - 17 * q ^ 67) + 2 * q ^ 68, Unknown(), Unknown(), (((((((((1 - 3 * q ^ 2) + 2 * q ^ 3) - 3 * q ^ 4) + 42 * q ^ 5) - 58 * q ^ 6) + 42 * q ^ 7) - 3 * q ^ 8) + 2 * q ^ 9) - 3 * q ^ 10) + q ^ 12, 0, (((-10 * q ^ 105 + 38 * q ^ 106) - 54 * q ^ 107) + 38 * q ^ 108) - 10 * q ^ 109, ((((-2 * q ^ 105 + 17 * q ^ 106) - 44 * q ^ 107) + 44 * q ^ 108) - 17 * q ^ 109) + 2 * q ^ 110, Unknown(), ((3 * q ^ 5 + 15 * q ^ 7) - 15 * q ^ 8) - 3 * q ^ 10, (((-10 * q ^ 21 + 38 * q ^ 22) - 54 * q ^ 23) + 38 * q ^ 24) - 10 * q ^ 25, Unknown(), (((9 * q ^ 42 - 47 * q ^ 43) + 76 * q ^ 44) - 47 * q ^ 45) + 9 * q ^ 46, 0, Unknown(), Unknown(), (((3 * q ^ 42 - 19 * q ^ 43) + 32 * q ^ 44) - 19 * q ^ 45) + 3 * q ^ 46, Unknown(), 560 * q ^ 21, (((q ^ 21 - 3 * q ^ 22) + 6 * q ^ 23) - 3 * q ^ 24) + q ^ 25, (136 * q ^ 21 - 288 * q ^ 22) + 136 * q ^ 23, Unknown(), ((-22 * q ^ 21 + 72 * q ^ 22) - 72 * q ^ 23) + 22 * q ^ 24, ((-64 * q ^ 21 + 216 * q ^ 22) - 216 * q ^ 23) + 64 * q ^ 24, (((12 * q ^ 21 - 62 * q ^ 22) + 102 * q ^ 23) - 62 * q ^ 24) + 12 * q ^ 25, Unknown(), (((4 * q ^ 21 - 22 * q ^ 22) + 32 * q ^ 23) - 22 * q ^ 24) + 4 * q ^ 25, (((19 * q ^ 21 - 93 * q ^ 22) + 150 * q ^ 23) - 93 * q ^ 24) + 19 * q ^ 25, ((((5 * q ^ 21 - 24 * q ^ 22) + 46 * q ^ 23) - 46 * q ^ 24) + 24 * q ^ 25) - 5 * q ^ 26, (((12 * q ^ 21 - 90 * q ^ 23) + 176 * q ^ 24) - 90 * q ^ 25) + 12 * q ^ 27, (((((34 * q ^ 21 - 60 * q ^ 22) - 30 * q ^ 23) + 132 * q ^ 24) - 30 * q ^ 25) - 60 * q ^ 26) + 34 * q ^ 27, ((((-(q ^ 21) + 10 * q ^ 23) - 33 * q ^ 24) + 33 * q ^ 25) - 10 * q ^ 26) + q ^ 28, (((((-4 * q ^ 21 + 8 * q ^ 22 + 42 * q ^ 23) - 136 * q ^ 24) + 136 * q ^ 25) - 42 * q ^ 26) - 8 * q ^ 27) + 4 * q ^ 28, (((((-15 * q ^ 21 + 47 * q ^ 22) - 16 * q ^ 23) - 80 * q ^ 24) + 80 * q ^ 25 + 16 * q ^ 26) - 47 * q ^ 27) + 15 * q ^ 28, Unknown(), (((((-(q ^ 22) - 4 * q ^ 23) + 21 * q ^ 24) - 36 * q ^ 25) + 21 * q ^ 26) - 4 * q ^ 27) - q ^ 28, (4 * q ^ 24 - 6 * q ^ 25) + 4 * q ^ 26, (7 * q ^ 25 - 12 * q ^ 26) + 7 * q ^ 27, -280 * q ^ 21 + 280 * q ^ 22, (((((((((q ^ 21 - 3 * q ^ 23) + 2 * q ^ 24) - 3 * q ^ 25) + 42 * q ^ 26) - 58 * q ^ 27) + 42 * q ^ 28) - 3 * q ^ 29) + 2 * q ^ 30) - 3 * q ^ 31) + q ^ 33, ((-12 * q ^ 21 + 30 * q ^ 22) - 30 * q ^ 23) + 12 * q ^ 24, (94 * q ^ 21 - 186 * q ^ 22) + 94 * q ^ 23, Unknown(), ((-43 * q ^ 21 + 144 * q ^ 22) - 144 * q ^ 23) + 43 * q ^ 24, ((3 * q ^ 26 + 15 * q ^ 28) - 15 * q ^ 29) - 3 * q ^ 31, Unknown(), Unknown(), (((3 * q ^ 63 - 19 * q ^ 64) + 32 * q ^ 65) - 19 * q ^ 66) + 3 * q ^ 67, Unknown(), 0, (((9 * q ^ 21 - 47 * q ^ 22) + 76 * q ^ 23) - 47 * q ^ 24) + 9 * q ^ 25, Unknown(), 560 * q ^ 42, Unknown(), (136 * q ^ 42 - 288 * q ^ 43) + 136 * q ^ 44, ((-22 * q ^ 42 + 72 * q ^ 43) - 72 * q ^ 44) + 22 * q ^ 45, ((-64 * q ^ 42 + 216 * q ^ 43) - 216 * q ^ 44) + 64 * q ^ 45, (((-7 * q ^ 42 + 19 * q ^ 43) - 28 * q ^ 44) + 19 * q ^ 45) - 7 * q ^ 46, ((((5 * q ^ 42 - 24 * q ^ 43) + 46 * q ^ 44) - 46 * q ^ 45) + 24 * q ^ 46) - 5 * q ^ 47, Unknown(), (((12 * q ^ 42 - 90 * q ^ 44) + 176 * q ^ 45) - 90 * q ^ 46) + 12 * q ^ 48, (((((-4 * q ^ 42 + 8 * q ^ 43 + 42 * q ^ 44) - 136 * q ^ 45) + 136 * q ^ 46) - 42 * q ^ 47) - 8 * q ^ 48) + 4 * q ^ 49, ((((-(q ^ 42) + 10 * q ^ 44) - 33 * q ^ 45) + 33 * q ^ 46) - 10 * q ^ 47) + q ^ 49, (4 * q ^ 45 - 6 * q ^ 46) + 4 * q ^ 47, -280 * q ^ 42 + 280 * q ^ 43, (94 * q ^ 42 - 186 * q ^ 43) + 94 * q ^ 44, ((-43 * q ^ 42 + 144 * q ^ 43) - 144 * q ^ 44) + 43 * q ^ 45, ((3 * q ^ 47 + 15 * q ^ 49) - 15 * q ^ 50) - 3 * q ^ 52, (((-10 * q ^ 42 + 38 * q ^ 43) - 54 * q ^ 44) + 38 * q ^ 45) - 10 * q ^ 46, (((3 * q ^ 84 - 19 * q ^ 85) + 32 * q ^ 86) - 19 * q ^ 87) + 3 * q ^ 88, Unknown(), 560 * q ^ 63, (((((-20 * q ^ 15 + 10 * q ^ 16 + 45 * q ^ 20) - 92 * q ^ 21) + 49 * q ^ 22 + 49 * q ^ 24) - 92 * q ^ 25) + 45 * q ^ 26 + 10 * q ^ 30) - 20 * q ^ 31, Unknown(), ((-22 * q ^ 63 + 72 * q ^ 64) - 72 * q ^ 65) + 22 * q ^ 66, Unknown(), Unknown(), (((12 * q ^ 63 - 90 * q ^ 65) + 176 * q ^ 66) - 90 * q ^ 67) + 12 * q ^ 69, Unknown(), ((((-(q ^ 63) + 10 * q ^ 65) - 33 * q ^ 66) + 33 * q ^ 67) - 10 * q ^ 68) + q ^ 70, (4 * q ^ 66 - 6 * q ^ 67) + 4 * q ^ 68, ((((30 * q ^ 15 - 81 * q ^ 20) + 105 * q ^ 21) - 105 * q ^ 24) + 81 * q ^ 25) - 30 * q ^ 30, (94 * q ^ 63 - 186 * q ^ 64) + 94 * q ^ 65, Unknown(), (((-10 * q ^ 63 + 38 * q ^ 64) - 54 * q ^ 65) + 38 * q ^ 66) - 10 * q ^ 67, 560 * q ^ 84, Unknown(), (136 * q ^ 84 - 288 * q ^ 85) + 136 * q ^ 86, ((((-2 * q ^ 21 + 17 * q ^ 22) - 44 * q ^ 23) + 44 * q ^ 24) - 17 * q ^ 25) + 2 * q ^ 26, -280 * q ^ 84 + 280 * q ^ 85, (94 * q ^ 84 - 186 * q ^ 85) + 94 * q ^ 86, Unknown(), ((-22 * q ^ 84 + 72 * q ^ 85) - 72 * q ^ 86) + 22 * q ^ 87, 560 * q ^ 105, Unknown(), (136 * q ^ 105 - 288 * q ^ 106) + 136 * q ^ 107, -280 * q ^ 105 + 280 * q ^ 106, (94 * q ^ 105 - 186 * q ^ 106) + 94 * q ^ 107, Unknown(), ((-22 * q ^ 105 + 72 * q ^ 106) - 72 * q ^ 107) + 22 * q ^ 108]
                end)
        f126 = function (q, j)
                return [560, -280 + 280q, (94 - 186q) + 94 * q ^ 2, (136 - 288q) + 136 * q ^ 2, ((-43 + 144q) - 144 * q ^ 2) + 43 * q ^ 3, ((-22 + 72q) - 72 * q ^ 2) + 22 * q ^ 3, -10 + (-30 * j ^ 2 - 36j) * q + (36 * j ^ 2 + 30j) * q ^ 2 + 10 * q ^ 3, ((-64 + 216q) - 216 * q ^ 2) + 64 * q ^ 3, (8 + (30 * j ^ 2 + 36j) * q + (-36 * j ^ 2 - 30j) * q ^ 2) - 8 * q ^ 3, (((-5 + (-19 * j ^ 2 - 23j) * q) - 30 * q ^ 2) + (-23 * j ^ 2 - 19j) * q ^ 3) - 5 * q ^ 4, (((12 - 62q) + 102 * q ^ 2) - 62 * q ^ 3) + 12 * q ^ 4, (((3 - 19q) + 32 * q ^ 2) - 19 * q ^ 3) + 3 * q ^ 4, (3 * j ^ 2 + 5j) * q + 7 * q ^ 2 + (5 * j ^ 2 + 3j) * q ^ 3, (((-9 + (-36 * j ^ 2 - 40j) * q) - 59 * q ^ 2) + (-40 * j ^ 2 - 36j) * q ^ 3) - 9 * q ^ 4, (((9 - 47q) + 76 * q ^ 2) - 47 * q ^ 3) + 9 * q ^ 4, 4 + (20 * j ^ 2 + 22j) * q + 36 * q ^ 2 + (22 * j ^ 2 + 20j) * q ^ 3 + 4 * q ^ 4, (((19 - 93q) + 150 * q ^ 2) - 93 * q ^ 3) + 19 * q ^ 4, ((((-1 + 10q) - 27 * q ^ 2) + 27 * q ^ 3) - 10 * q ^ 4) + q ^ 5, (4 + (22 * j ^ 2 + 25j) * q + (-48 * j ^ 2 - 50j) * q ^ 2 + (50 * j ^ 2 + 48j) * q ^ 3 + (-25 * j ^ 2 - 22j) * q ^ 4) - 4 * q ^ 5, -(q ^ 2) + q ^ 3, Unknown(), (2 + (13 * j ^ 2 + 15j) * q + (-29 * j ^ 2 - 31j) * q ^ 2 + (31 * j ^ 2 + 29j) * q ^ 3 + (-15 * j ^ 2 - 13j) * q ^ 4) - 2 * q ^ 5, Unknown(), ((((-2 + 17q) - 44 * q ^ 2) + 44 * q ^ 3) - 17 * q ^ 4) + 2 * q ^ 5, ((3q - 10 * q ^ 2) + 10 * q ^ 3) - 3 * q ^ 4, ((-(j ^ 2) - 2j) * q - 6 * q ^ 2) + 6 * q ^ 3 + (2 * j ^ 2 + j) * q ^ 4, 10 + (108 * j ^ 2 + 90j) * q ^ 2 + 144 * q ^ 3 + (90 * j ^ 2 + 108j) * q ^ 4 + 10 * q ^ 6, 0, Unknown(), (-5 * j ^ 2 - 3j) * q + (21 * j ^ 2 + 19j) * q ^ 2 + 34 * q ^ 3 + (19 * j ^ 2 + 21j) * q ^ 4 + (-3 * j ^ 2 - 5j) * q ^ 5, 0, 28 + (60 * j ^ 2 + 72j) * q + (36 * j ^ 2 + 30j) * q ^ 2 + 108 * q ^ 3 + (30 * j ^ 2 + 36j) * q ^ 4 + (72 * j ^ 2 + 60j) * q ^ 5 + 28 * q ^ 6, Unknown(), Unknown(), ((-4 + 6q + (-48 * j ^ 2 - 42j) * q ^ 2 + (132 * j ^ 2 + 120j) * q ^ 3 + (-120 * j ^ 2 - 132j) * q ^ 4 + (42 * j ^ 2 + 48j) * q ^ 5) - 6 * q ^ 6) + 4 * q ^ 7, ((-(j ^ 2) - 2j) * q ^ 2 - 6 * q ^ 3) + 6 * q ^ 4 + (2 * j ^ 2 + j) * q ^ 5, -13 + (-43 * j ^ 2 - 47j) * q + (12 * j ^ 2 + 24j) * q ^ 2 + (70 * j ^ 2 + 68j) * q ^ 3 + (-68 * j ^ 2 - 70j) * q ^ 4 + (-24 * j ^ 2 - 12j) * q ^ 5 + (47 * j ^ 2 + 43j) * q ^ 6 + 13 * q ^ 7, (((q + (6 * j ^ 2 + 7j) * q ^ 2 + 13 * q ^ 3) - 13 * q ^ 4) + (-7 * j ^ 2 - 6j) * q ^ 5) - q ^ 6, (2 * j ^ 2 + j) * q + (-12 * j ^ 2 - 10j) * q ^ 2 + (29 * j ^ 2 + 28j) * q ^ 3 + (-28 * j ^ 2 - 29j) * q ^ 4 + (10 * j ^ 2 + 12j) * q ^ 5 + (-(j ^ 2) - 2j) * q ^ 6, (-15 * j ^ 2 - 11j) * q ^ 2 + (30 * j ^ 2 + 26j) * q ^ 3 + (-26 * j ^ 2 - 30j) * q ^ 4 + (11 * j ^ 2 + 15j) * q ^ 5, Unknown(), -9 + (-34 * j ^ 2 - 38j) * q + (27 * j ^ 2 + 35j) * q ^ 2 + (3 * j ^ 2 - j) * q ^ 3 + (j ^ 2 - 3j) * q ^ 4 + (-35 * j ^ 2 - 27j) * q ^ 5 + (38 * j ^ 2 + 34j) * q ^ 6 + 9 * q ^ 7, Unknown(), Unknown(), (((((2 - 8q) + (-6 * j ^ 2 - 11j) * q ^ 2 + (-2 * j ^ 2 + 3j) * q ^ 3) - 5 * q ^ 4) + (3 * j ^ 2 - 2j) * q ^ 5 + (-11 * j ^ 2 - 6j) * q ^ 6) - 8 * q ^ 7) + 2 * q ^ 8, ((j * q ^ 2 + (-4 * j ^ 2 - 3j) * q ^ 3) - 7 * q ^ 4) + (-3 * j ^ 2 - 4j) * q ^ 5 + j ^ 2 * q ^ 6, (((3 * q ^ 105 - 19 * q ^ 106) + 32 * q ^ 107) - 19 * q ^ 108) + 3 * q ^ 109, (((3 * q ^ 21 - 19 * q ^ 22) + 32 * q ^ 23) - 19 * q ^ 24) + 3 * q ^ 25, (((6 * j ^ 2 + 4j) * q ^ 2 + (-23 * j ^ 2 - 19j) * q ^ 3) - 30 * q ^ 4) + (-19 * j ^ 2 - 23j) * q ^ 5 + (4 * j ^ 2 + 6j) * q ^ 6, Unknown(), Unknown(), 4 + (19 * j ^ 2 + 21j) * q + (-28 * j ^ 2 - 36j) * q ^ 2 + (13 * j ^ 2 + 21j) * q ^ 3 + 4 * q ^ 4 + (21 * j ^ 2 + 13j) * q ^ 5 + (-36 * j ^ 2 - 28j) * q ^ 6 + (21 * j ^ 2 + 19j) * q ^ 7 + 4 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-(q ^ 21) + 10 * q ^ 22) - 27 * q ^ 23) + 27 * q ^ 24) - 10 * q ^ 25) + q ^ 26, Unknown(), Unknown(), (((((2 - 6q) - 5 * q ^ 2) + 28 * q ^ 3 + (35 * j ^ 2 + 37j) * q ^ 4 + 36 * q ^ 5 + (37 * j ^ 2 + 35j) * q ^ 6 + 28 * q ^ 7) - 5 * q ^ 8) - 6 * q ^ 9) + 2 * q ^ 10, 0, Unknown(), Unknown(), 0, ((2 * j ^ 2 * q ^ 3 + (-7 * j ^ 2 - 5j) * q ^ 4) - 8 * q ^ 5) + (-5 * j ^ 2 - 7j) * q ^ 6 + 2 * j * q ^ 7, Unknown(), Unknown(), Unknown(), ((((-(q ^ 42) + 10 * q ^ 43) - 27 * q ^ 44) + 27 * q ^ 45) - 10 * q ^ 46) + q ^ 47, Unknown(), Unknown(), ((((-2 * q ^ 63 + 17 * q ^ 64) - 44 * q ^ 65) + 44 * q ^ 66) - 17 * q ^ 67) + 2 * q ^ 68, Unknown(), Unknown(), ((((((3 * j ^ 2 + 5j) * q ^ 2 - 4 * j * q ^ 3) + (11 * j ^ 2 + 13j) * q ^ 4 + 46 * q ^ 5) - 62 * q ^ 6) + 46 * q ^ 7 + (13 * j ^ 2 + 11j) * q ^ 8) - 4 * j ^ 2 * q ^ 9) + (5 * j ^ 2 + 3j) * q ^ 10, 0, (((-9 * q ^ 105 + (-36 * j ^ 2 - 40j) * q ^ 106) - 59 * q ^ 107) + (-40 * j ^ 2 - 36j) * q ^ 108) - 9 * q ^ 109, ((((-2 * q ^ 105 + 17 * q ^ 106) - 44 * q ^ 107) + 44 * q ^ 108) - 17 * q ^ 109) + 2 * q ^ 110, Unknown(), ((8 * j ^ 2 + 5j) * q ^ 6 - 9 * j ^ 2 * q ^ 7) + 9 * j * q ^ 8 + (-5 * j ^ 2 - 8j) * q ^ 9, (((-9 * q ^ 21 + (-36 * j ^ 2 - 40j) * q ^ 22) - 59 * q ^ 23) + (-40 * j ^ 2 - 36j) * q ^ 24) - 9 * q ^ 25, Unknown(), (((9 * q ^ 42 - 47 * q ^ 43) + 76 * q ^ 44) - 47 * q ^ 45) + 9 * q ^ 46, j * q ^ 44 - j ^ 2 * q ^ 45, Unknown(), Unknown(), (((3 * q ^ 42 - 19 * q ^ 43) + 32 * q ^ 44) - 19 * q ^ 45) + 3 * q ^ 46, Unknown(), 560 * q ^ 21, (3 * j ^ 2 + 5j) * q ^ 22 + 7 * q ^ 23 + (5 * j ^ 2 + 3j) * q ^ 24, (136 * q ^ 21 - 288 * q ^ 22) + 136 * q ^ 23, Unknown(), ((-22 * q ^ 21 + 72 * q ^ 22) - 72 * q ^ 23) + 22 * q ^ 24, ((-64 * q ^ 21 + 216 * q ^ 22) - 216 * q ^ 23) + 64 * q ^ 24, (((12 * q ^ 21 - 62 * q ^ 22) + 102 * q ^ 23) - 62 * q ^ 24) + 12 * q ^ 25, Unknown(), 4 * q ^ 21 + (20 * j ^ 2 + 22j) * q ^ 22 + 36 * q ^ 23 + (22 * j ^ 2 + 20j) * q ^ 24 + 4 * q ^ 25, (((19 * q ^ 21 - 93 * q ^ 22) + 150 * q ^ 23) - 93 * q ^ 24) + 19 * q ^ 25, (4 * q ^ 21 + (22 * j ^ 2 + 25j) * q ^ 22 + (-48 * j ^ 2 - 50j) * q ^ 23 + (50 * j ^ 2 + 48j) * q ^ 24 + (-25 * j ^ 2 - 22j) * q ^ 25) - 4 * q ^ 26, 10 * q ^ 21 + (108 * j ^ 2 + 90j) * q ^ 23 + 144 * q ^ 24 + (90 * j ^ 2 + 108j) * q ^ 25 + 10 * q ^ 27, 28 * q ^ 21 + (60 * j ^ 2 + 72j) * q ^ 22 + (36 * j ^ 2 + 30j) * q ^ 23 + 108 * q ^ 24 + (30 * j ^ 2 + 36j) * q ^ 25 + (72 * j ^ 2 + 60j) * q ^ 26 + 28 * q ^ 27, (-15 * j ^ 2 - 11j) * q ^ 23 + (30 * j ^ 2 + 26j) * q ^ 24 + (-26 * j ^ 2 - 30j) * q ^ 25 + (11 * j ^ 2 + 15j) * q ^ 26, ((-4 * q ^ 21 + 6 * q ^ 22 + (-48 * j ^ 2 - 42j) * q ^ 23 + (132 * j ^ 2 + 120j) * q ^ 24 + (-120 * j ^ 2 - 132j) * q ^ 25 + (42 * j ^ 2 + 48j) * q ^ 26) - 6 * q ^ 27) + 4 * q ^ 28, -13 * q ^ 21 + (-43 * j ^ 2 - 47j) * q ^ 22 + (12 * j ^ 2 + 24j) * q ^ 23 + (70 * j ^ 2 + 68j) * q ^ 24 + (-68 * j ^ 2 - 70j) * q ^ 25 + (-24 * j ^ 2 - 12j) * q ^ 26 + (47 * j ^ 2 + 43j) * q ^ 27 + 13 * q ^ 28, Unknown(), (((6 * j ^ 2 + 4j) * q ^ 23 + (-23 * j ^ 2 - 19j) * q ^ 24) - 30 * q ^ 25) + (-19 * j ^ 2 - 23j) * q ^ 26 + (4 * j ^ 2 + 6j) * q ^ 27, ((j * q ^ 23 + (-4 * j ^ 2 - 3j) * q ^ 24) - 7 * q ^ 25) + (-3 * j ^ 2 - 4j) * q ^ 26 + j ^ 2 * q ^ 27, ((2 * j ^ 2 * q ^ 24 + (-7 * j ^ 2 - 5j) * q ^ 25) - 8 * q ^ 26) + (-5 * j ^ 2 - 7j) * q ^ 27 + 2 * j * q ^ 28, -280 * q ^ 21 + 280 * q ^ 22, ((((((3 * j ^ 2 + 5j) * q ^ 23 - 4 * j * q ^ 24) + (11 * j ^ 2 + 13j) * q ^ 25 + 46 * q ^ 26) - 62 * q ^ 27) + 46 * q ^ 28 + (13 * j ^ 2 + 11j) * q ^ 29) - 4 * j ^ 2 * q ^ 30) + (5 * j ^ 2 + 3j) * q ^ 31, -10 * q ^ 21 + (-30 * j ^ 2 - 36j) * q ^ 22 + (36 * j ^ 2 + 30j) * q ^ 23 + 10 * q ^ 24, (94 * q ^ 21 - 186 * q ^ 22) + 94 * q ^ 23, Unknown(), ((-43 * q ^ 21 + 144 * q ^ 22) - 144 * q ^ 23) + 43 * q ^ 24, ((8 * j ^ 2 + 5j) * q ^ 27 - 9 * j ^ 2 * q ^ 28) + 9 * j * q ^ 29 + (-5 * j ^ 2 - 8j) * q ^ 30, Unknown(), Unknown(), (((3 * q ^ 63 - 19 * q ^ 64) + 32 * q ^ 65) - 19 * q ^ 66) + 3 * q ^ 67, Unknown(), 0, (((9 * q ^ 21 - 47 * q ^ 22) + 76 * q ^ 23) - 47 * q ^ 24) + 9 * q ^ 25, Unknown(), 560 * q ^ 42, Unknown(), (136 * q ^ 42 - 288 * q ^ 43) + 136 * q ^ 44, ((-22 * q ^ 42 + 72 * q ^ 43) - 72 * q ^ 44) + 22 * q ^ 45, ((-64 * q ^ 42 + 216 * q ^ 43) - 216 * q ^ 44) + 64 * q ^ 45, (((-5 * q ^ 42 + (-19 * j ^ 2 - 23j) * q ^ 43) - 30 * q ^ 44) + (-23 * j ^ 2 - 19j) * q ^ 45) - 5 * q ^ 46, (4 * q ^ 42 + (22 * j ^ 2 + 25j) * q ^ 43 + (-48 * j ^ 2 - 50j) * q ^ 44 + (50 * j ^ 2 + 48j) * q ^ 45 + (-25 * j ^ 2 - 22j) * q ^ 46) - 4 * q ^ 47, Unknown(), 10 * q ^ 42 + (108 * j ^ 2 + 90j) * q ^ 44 + 144 * q ^ 45 + (90 * j ^ 2 + 108j) * q ^ 46 + 10 * q ^ 48, ((-4 * q ^ 42 + 6 * q ^ 43 + (-48 * j ^ 2 - 42j) * q ^ 44 + (132 * j ^ 2 + 120j) * q ^ 45 + (-120 * j ^ 2 - 132j) * q ^ 46 + (42 * j ^ 2 + 48j) * q ^ 47) - 6 * q ^ 48) + 4 * q ^ 49, (-15 * j ^ 2 - 11j) * q ^ 44 + (30 * j ^ 2 + 26j) * q ^ 45 + (-26 * j ^ 2 - 30j) * q ^ 46 + (11 * j ^ 2 + 15j) * q ^ 47, ((j * q ^ 44 + (-4 * j ^ 2 - 3j) * q ^ 45) - 7 * q ^ 46) + (-3 * j ^ 2 - 4j) * q ^ 47 + j ^ 2 * q ^ 48, -280 * q ^ 42 + 280 * q ^ 43, (94 * q ^ 42 - 186 * q ^ 43) + 94 * q ^ 44, ((-43 * q ^ 42 + 144 * q ^ 43) - 144 * q ^ 44) + 43 * q ^ 45, ((8 * j ^ 2 + 5j) * q ^ 48 - 9 * j ^ 2 * q ^ 49) + 9 * j * q ^ 50 + (-5 * j ^ 2 - 8j) * q ^ 51, (((-9 * q ^ 42 + (-36 * j ^ 2 - 40j) * q ^ 43) - 59 * q ^ 44) + (-40 * j ^ 2 - 36j) * q ^ 45) - 9 * q ^ 46, (((3 * q ^ 84 - 19 * q ^ 85) + 32 * q ^ 86) - 19 * q ^ 87) + 3 * q ^ 88, Unknown(), 560 * q ^ 63, (((((-42 * q ^ 18 + 28 * q ^ 19 + 45 * q ^ 20) - 60 * q ^ 21) + 21 * q ^ 22 + 21 * q ^ 24) - 60 * q ^ 25) + 45 * q ^ 26 + 28 * q ^ 27) - 42 * q ^ 28, Unknown(), ((-22 * q ^ 63 + 72 * q ^ 64) - 72 * q ^ 65) + 22 * q ^ 66, Unknown(), Unknown(), 10 * q ^ 63 + (108 * j ^ 2 + 90j) * q ^ 65 + 144 * q ^ 66 + (90 * j ^ 2 + 108j) * q ^ 67 + 10 * q ^ 69, Unknown(), (-15 * j ^ 2 - 11j) * q ^ 65 + (30 * j ^ 2 + 26j) * q ^ 66 + (-26 * j ^ 2 - 30j) * q ^ 67 + (11 * j ^ 2 + 15j) * q ^ 68, ((j * q ^ 65 + (-4 * j ^ 2 - 3j) * q ^ 66) - 7 * q ^ 67) + (-3 * j ^ 2 - 4j) * q ^ 68 + j ^ 2 * q ^ 69, ((((70 * q ^ 18 - 81 * q ^ 20) + 45 * q ^ 21) - 45 * q ^ 24) + 81 * q ^ 25) - 70 * q ^ 27, (94 * q ^ 63 - 186 * q ^ 64) + 94 * q ^ 65, Unknown(), (((-9 * q ^ 63 + (-36 * j ^ 2 - 40j) * q ^ 64) - 59 * q ^ 65) + (-40 * j ^ 2 - 36j) * q ^ 66) - 9 * q ^ 67, 560 * q ^ 84, Unknown(), (136 * q ^ 84 - 288 * q ^ 85) + 136 * q ^ 86, ((((-2 * q ^ 21 + 17 * q ^ 22) - 44 * q ^ 23) + 44 * q ^ 24) - 17 * q ^ 25) + 2 * q ^ 26, -280 * q ^ 84 + 280 * q ^ 85, (94 * q ^ 84 - 186 * q ^ 85) + 94 * q ^ 86, Unknown(), ((-22 * q ^ 84 + 72 * q ^ 85) - 72 * q ^ 86) + 22 * q ^ 87, 560 * q ^ 105, Unknown(), (136 * q ^ 105 - 288 * q ^ 106) + 136 * q ^ 107, -280 * q ^ 105 + 280 * q ^ 106, (94 * q ^ 105 - 186 * q ^ 106) + 94 * q ^ 107, Unknown(), ((-22 * q ^ 105 + 72 * q ^ 106) - 72 * q ^ 107) + 22 * q ^ 108]
            end
        f128 = (q->begin
                    [630, -345 + 285q, (138 - 207q) + 78 * q ^ 2, (184 - 322q) + 124 * q ^ 2, ((-70 + 182q) - 140 * q ^ 2) + 31 * q ^ 3, ((-42 + 96q) - 65 * q ^ 2) + 13 * q ^ 3, ((-27 + 45q) - 27 * q ^ 2) + 3 * q ^ 3, ((-96 + 264q) - 219 * q ^ 2) + 51 * q ^ 3, ((-6 - 27q) + 45 * q ^ 2) - 18 * q ^ 3, ((10q - 34 * q ^ 2) + 31 * q ^ 3) - 9 * q ^ 4, (((24 - 92q) + 112 * q ^ 2) - 50 * q ^ 3) + 6 * q ^ 4, (((9 - 33q) + 35 * q ^ 2) - 12 * q ^ 3) + q ^ 4, ((3 - 9q) + 7 * q ^ 2) - q ^ 3, (((-10 + 44q) - 65 * q ^ 2) + 39 * q ^ 3) - 8 * q ^ 4, (((20 - 72q) + 84 * q ^ 2) - 36 * q ^ 3) + 4 * q ^ 4, ((12 - 38q) + 38 * q ^ 2) - 14 * q ^ 3, (((35 - 131q) + 166 * q ^ 2) - 80 * q ^ 3) + 11 * q ^ 4, (((-4 + 21q) - 36 * q ^ 2) + 24 * q ^ 3) - 5 * q ^ 4, ((((6 - 28q) + 55 * q ^ 2) - 52 * q ^ 3) + 22 * q ^ 4) - 3 * q ^ 5, q - 2 * q ^ 2, Unknown(), ((((5 - 21q) + 36 * q ^ 2) - 30 * q ^ 3) + 10 * q ^ 4) - q ^ 5, Unknown(), (((-6 + 32q) - 57 * q ^ 2) + 40 * q ^ 3) - 10 * q ^ 4, (((-1 + 8q) - 14 * q ^ 2) + 8 * q ^ 3) - q ^ 4, ((-1 + 6q) - 9 * q ^ 2) + 4 * q ^ 3, (((27 - 135 * q ^ 2) + 168 * q ^ 3) - 81 * q ^ 4) + 3 * q ^ 6, 0, Unknown(), ((((3 + 9q) - 36 * q ^ 2) + 37 * q ^ 3) - 13 * q ^ 4) + q ^ 5, 0, (((((48 - 90q) - 27 * q ^ 2) + 126 * q ^ 3) - 45 * q ^ 4) - 54 * q ^ 5) + 24 * q ^ 6, Unknown(), Unknown(), ((((-12 + 15q + 69 * q ^ 2) - 162 * q ^ 3) + 120 * q ^ 4) - 33 * q ^ 5) - 3 * q ^ 6, ((-q + 6 * q ^ 2) - 9 * q ^ 3) + 4 * q ^ 4, (((((-24 + 70q) - 28 * q ^ 2) - 83 * q ^ 3) + 77 * q ^ 4 + 10 * q ^ 5) - 37 * q ^ 6) + 9 * q ^ 7, ((((q - 6 * q ^ 2) + 14 * q ^ 3) - 14 * q ^ 4) + 6 * q ^ 5) - q ^ 6, ((((-1 - 2q) + 23 * q ^ 2) - 38 * q ^ 3) + 26 * q ^ 4) - 5 * q ^ 5, (((-3 + 26 * q ^ 2) - 40 * q ^ 3) + 25 * q ^ 4) - 5 * q ^ 5, Unknown(), ((((-16 + 60q) - 62 * q ^ 2) + 9 * q ^ 3 + 17 * q ^ 4 + 11 * q ^ 5) - 24 * q ^ 6) + 8 * q ^ 7, Unknown(), Unknown(), (((((((5 - 20q) + 29 * q ^ 2) - 12 * q ^ 3) - 9 * q ^ 4) + 11 * q ^ 5) - q ^ 6) - 4 * q ^ 7) + q ^ 8, ((-3 * q ^ 2 + 9 * q ^ 3) - 7 * q ^ 4) + q ^ 5, (((-9 * q ^ 95 + 33 * q ^ 96) - 35 * q ^ 97) + 12 * q ^ 98) - q ^ 99, (((-9 * q ^ 19 + 33 * q ^ 20) - 35 * q ^ 21) + 12 * q ^ 22) - q ^ 23, (((((1 - 2q) - 12 * q ^ 2) + 35 * q ^ 3) - 34 * q ^ 4) + 14 * q ^ 5) - q ^ 6, Unknown(), Unknown(), (((((((8 - 38q) + 60 * q ^ 2) - 33 * q ^ 3) - q ^ 4) - 2 * q ^ 5) + 17 * q ^ 6) - 13 * q ^ 7) + 3 * q ^ 8, Unknown(), Unknown(), Unknown(), (((4 * q ^ 19 - 21 * q ^ 20) + 36 * q ^ 21) - 24 * q ^ 22) + 5 * q ^ 23, Unknown(), Unknown(), ((((((((5 - 16q) + 3 * q ^ 2 + 40 * q ^ 3) - 58 * q ^ 4) + 38 * q ^ 5) - 22 * q ^ 6) + 18 * q ^ 7) - 6 * q ^ 8) - 2 * q ^ 9) + q ^ 10, 0, Unknown(), Unknown(), 0, (((-(q ^ 2) - 2 * q ^ 3) + 10 * q ^ 4) - 10 * q ^ 5) + 4 * q ^ 6, Unknown(), Unknown(), Unknown(), (((-4 * q ^ 38 + 21 * q ^ 39) - 36 * q ^ 40) + 24 * q ^ 41) - 5 * q ^ 42, Unknown(), Unknown(), (((6 * q ^ 57 - 32 * q ^ 58) + 57 * q ^ 59) - 40 * q ^ 60) + 10 * q ^ 61, Unknown(), Unknown(), ((((((((3 - 9 * q ^ 2) - 2 * q ^ 3) - 12 * q ^ 4) + 60 * q ^ 5) - 65 * q ^ 6) + 40 * q ^ 7) - 9 * q ^ 8) + 4 * q ^ 9) - q ^ 10, 0, (((10 * q ^ 95 - 44 * q ^ 96) + 65 * q ^ 97) - 39 * q ^ 98) + 8 * q ^ 99, (((6 * q ^ 95 - 32 * q ^ 96) + 57 * q ^ 97) - 40 * q ^ 98) + 10 * q ^ 99, Unknown(), ((3 * q ^ 4 - 3 * q ^ 5) - 3 * q ^ 6) + 9 * q ^ 7, (((10 * q ^ 19 - 44 * q ^ 20) + 65 * q ^ 21) - 39 * q ^ 22) + 8 * q ^ 23, Unknown(), (((20 * q ^ 38 - 72 * q ^ 39) + 84 * q ^ 40) - 36 * q ^ 41) + 4 * q ^ 42, 0, Unknown(), Unknown(), (((9 * q ^ 38 - 33 * q ^ 39) + 35 * q ^ 40) - 12 * q ^ 41) + q ^ 42, Unknown(), -630 * q ^ 19, ((-3 * q ^ 19 + 9 * q ^ 20) - 7 * q ^ 21) + q ^ 22, (-184 * q ^ 19 + 322 * q ^ 20) - 124 * q ^ 21, Unknown(), ((42 * q ^ 19 - 96 * q ^ 20) + 65 * q ^ 21) - 13 * q ^ 22, ((96 * q ^ 19 - 264 * q ^ 20) + 219 * q ^ 21) - 51 * q ^ 22, (((-24 * q ^ 19 + 92 * q ^ 20) - 112 * q ^ 21) + 50 * q ^ 22) - 6 * q ^ 23, Unknown(), ((-12 * q ^ 19 + 38 * q ^ 20) - 38 * q ^ 21) + 14 * q ^ 22, (((-35 * q ^ 19 + 131 * q ^ 20) - 166 * q ^ 21) + 80 * q ^ 22) - 11 * q ^ 23, ((((-6 * q ^ 19 + 28 * q ^ 20) - 55 * q ^ 21) + 52 * q ^ 22) - 22 * q ^ 23) + 3 * q ^ 24, (((-27 * q ^ 19 + 135 * q ^ 21) - 168 * q ^ 22) + 81 * q ^ 23) - 3 * q ^ 25, (((-48 * q ^ 19 + 90 * q ^ 20 + 27 * q ^ 21) - 126 * q ^ 22) + 45 * q ^ 23 + 54 * q ^ 24) - 24 * q ^ 25, (((3 * q ^ 19 - 26 * q ^ 21) + 40 * q ^ 22) - 25 * q ^ 23) + 5 * q ^ 24, ((((12 * q ^ 19 - 15 * q ^ 20) - 69 * q ^ 21) + 162 * q ^ 22) - 120 * q ^ 23) + 33 * q ^ 24 + 3 * q ^ 25, (((((24 * q ^ 19 - 70 * q ^ 20) + 28 * q ^ 21 + 83 * q ^ 22) - 77 * q ^ 23) - 10 * q ^ 24) + 37 * q ^ 25) - 9 * q ^ 26, Unknown(), ((((-(q ^ 19) + 2 * q ^ 20 + 12 * q ^ 21) - 35 * q ^ 22) + 34 * q ^ 23) - 14 * q ^ 24) + q ^ 25, ((3 * q ^ 21 - 9 * q ^ 22) + 7 * q ^ 23) - q ^ 24, (((q ^ 21 + 2 * q ^ 22) - 10 * q ^ 23) + 10 * q ^ 24) - 4 * q ^ 25, 345 * q ^ 19 - 285 * q ^ 20, ((((((-3 * q ^ 19 + 9 * q ^ 21 + 2 * q ^ 22 + 12 * q ^ 23) - 60 * q ^ 24) + 65 * q ^ 25) - 40 * q ^ 26) + 9 * q ^ 27) - 4 * q ^ 28) + q ^ 29, ((27 * q ^ 19 - 45 * q ^ 20) + 27 * q ^ 21) - 3 * q ^ 22, (-138 * q ^ 19 + 207 * q ^ 20) - 78 * q ^ 21, Unknown(), ((70 * q ^ 19 - 182 * q ^ 20) + 140 * q ^ 21) - 31 * q ^ 22, (-3 * q ^ 23 + 3 * q ^ 24 + 3 * q ^ 25) - 9 * q ^ 26, Unknown(), Unknown(), (((-9 * q ^ 57 + 33 * q ^ 58) - 35 * q ^ 59) + 12 * q ^ 60) - q ^ 61, Unknown(), 0, (((-20 * q ^ 19 + 72 * q ^ 20) - 84 * q ^ 21) + 36 * q ^ 22) - 4 * q ^ 23, Unknown(), 630 * q ^ 38, Unknown(), (184 * q ^ 38 - 322 * q ^ 39) + 124 * q ^ 40, ((-42 * q ^ 38 + 96 * q ^ 39) - 65 * q ^ 40) + 13 * q ^ 41, ((-96 * q ^ 38 + 264 * q ^ 39) - 219 * q ^ 40) + 51 * q ^ 41, ((10 * q ^ 39 - 34 * q ^ 40) + 31 * q ^ 41) - 9 * q ^ 42, ((((6 * q ^ 38 - 28 * q ^ 39) + 55 * q ^ 40) - 52 * q ^ 41) + 22 * q ^ 42) - 3 * q ^ 43, Unknown(), (((27 * q ^ 38 - 135 * q ^ 40) + 168 * q ^ 41) - 81 * q ^ 42) + 3 * q ^ 44, ((((-12 * q ^ 38 + 15 * q ^ 39 + 69 * q ^ 40) - 162 * q ^ 41) + 120 * q ^ 42) - 33 * q ^ 43) - 3 * q ^ 44, (((-3 * q ^ 38 + 26 * q ^ 40) - 40 * q ^ 41) + 25 * q ^ 42) - 5 * q ^ 43, ((-3 * q ^ 40 + 9 * q ^ 41) - 7 * q ^ 42) + q ^ 43, -345 * q ^ 38 + 285 * q ^ 39, (138 * q ^ 38 - 207 * q ^ 39) + 78 * q ^ 40, ((-70 * q ^ 38 + 182 * q ^ 39) - 140 * q ^ 40) + 31 * q ^ 41, ((3 * q ^ 42 - 3 * q ^ 43) - 3 * q ^ 44) + 9 * q ^ 45, (((-10 * q ^ 38 + 44 * q ^ 39) - 65 * q ^ 40) + 39 * q ^ 41) - 8 * q ^ 42, (((9 * q ^ 76 - 33 * q ^ 77) + 35 * q ^ 78) - 12 * q ^ 79) + q ^ 80, Unknown(), -630 * q ^ 57, ((((((((11 * q ^ 12 - 4 * q ^ 13) - 4 * q ^ 15) + 2 * q ^ 16) - 36 * q ^ 18) + 24 * q ^ 19 + 90 * q ^ 20) - 120 * q ^ 21) + 42 * q ^ 22) - 36 * q ^ 25) + 45 * q ^ 26, Unknown(), ((42 * q ^ 57 - 96 * q ^ 58) + 65 * q ^ 59) - 13 * q ^ 60, Unknown(), Unknown(), (((-27 * q ^ 57 + 135 * q ^ 59) - 168 * q ^ 60) + 81 * q ^ 61) - 3 * q ^ 63, Unknown(), (((3 * q ^ 57 - 26 * q ^ 59) + 40 * q ^ 60) - 25 * q ^ 61) + 5 * q ^ 62, ((3 * q ^ 59 - 9 * q ^ 60) + 7 * q ^ 61) - q ^ 62, ((-15 * q ^ 12 + 6 * q ^ 15 + 60 * q ^ 18) - 162 * q ^ 20) + 90 * q ^ 21 + 81 * q ^ 25, (-138 * q ^ 57 + 207 * q ^ 58) - 78 * q ^ 59, Unknown(), (((10 * q ^ 57 - 44 * q ^ 58) + 65 * q ^ 59) - 39 * q ^ 60) + 8 * q ^ 61, 630 * q ^ 76, Unknown(), (184 * q ^ 76 - 322 * q ^ 77) + 124 * q ^ 78, (((6 * q ^ 19 - 32 * q ^ 20) + 57 * q ^ 21) - 40 * q ^ 22) + 10 * q ^ 23, -345 * q ^ 76 + 285 * q ^ 77, (138 * q ^ 76 - 207 * q ^ 77) + 78 * q ^ 78, Unknown(), ((-42 * q ^ 76 + 96 * q ^ 77) - 65 * q ^ 78) + 13 * q ^ 79, -630 * q ^ 95, Unknown(), (-184 * q ^ 95 + 322 * q ^ 96) - 124 * q ^ 97, 345 * q ^ 95 - 285 * q ^ 96, (-138 * q ^ 95 + 207 * q ^ 96) - 78 * q ^ 97, Unknown(), ((42 * q ^ 95 - 96 * q ^ 96) + 65 * q ^ 97) - 13 * q ^ 98]
                end)
        f130 = function (q, j)
                return [630, -300 + 330q, (87 - 213q) + 117 * q ^ 2, (144 - 312q) + 174 * q ^ 2, ((-43 + 145q) - 167 * q ^ 2) + 62 * q ^ 3, ((-16 + 71q) - 85 * q ^ 2) + 32 * q ^ 3, ((-6 + (-27 * j ^ 2 - 30j) * q) - 42 * q ^ 2) + 9 * q ^ 3, ((-69 + 225q) - 243 * q ^ 2) + 93 * q ^ 3, ((18 - 42q) + (-30 * j ^ 2 - 27j) * q ^ 2) - 15 * q ^ 3, (((-7 + 31q) - 36 * q ^ 2) + (-23 * j ^ 2 - 20j) * q ^ 3) - 8 * q ^ 4, (((14 - 58q) + 102 * q ^ 2) - 80 * q ^ 3) + 22 * q ^ 4, (((2 - 14q) + 30 * q ^ 2) - 25 * q ^ 3) + 7 * q ^ 4, ((j ^ 2 + 2j) * q + (-5 * j ^ 2 - 6j) * q ^ 2) - 4 * q ^ 3, (-9 + 42q + (66 * j ^ 2 + 64j) * q ^ 2 + (-48 * j ^ 2 - 46j) * q ^ 3) - 15 * q ^ 4, (((8 - 43q) + 76 * q ^ 2) - 60 * q ^ 3) + 17 * q ^ 4, (((4 - 16q) + (-33 * j ^ 2 - 36j) * q ^ 2) - 26 * q ^ 3) + 5 * q ^ 4, (((21 - 92q) + 155 * q ^ 2) - 115 * q ^ 3) + 34 * q ^ 4, ((((-1 + 8q) - 22 * q ^ 2) + 27 * q ^ 3) - 16 * q ^ 4) + 4 * q ^ 5, ((4 - 25q) + 53 * q ^ 2 + (57 * j ^ 2 + 55j) * q ^ 3 + (-33 * j ^ 2 - 31j) * q ^ 4) - 8 * q ^ 5, -j * q ^ 3, Unknown(), ((1 - 12q) + 30 * q ^ 2 + (34 * j ^ 2 + 33j) * q ^ 3 + (-21 * j ^ 2 - 19j) * q ^ 4) - 5 * q ^ 5, Unknown(), ((((-3 + 16q) - 38 * q ^ 2) + 45 * q ^ 3) - 27 * q ^ 4) + 6 * q ^ 5, (((2q - 6 * q ^ 2) + 9 * q ^ 3) - 6 * q ^ 4) + q ^ 5, (q + (3 * j ^ 2 + 4j) * q ^ 2 + (-4 * j ^ 2 - 5j) * q ^ 3) - 2 * q ^ 4, ((6 + (90 * j ^ 2 + 81j) * q ^ 2 + 192 * q ^ 3) - 126 * q ^ 4) + 9 * q ^ 6, 0, Unknown(), (((-2 * j ^ 2 - j) * q + (18 * j ^ 2 + 17j) * q ^ 2 + 41 * q ^ 3) - 29 * q ^ 4) + 4 * q ^ 5, 0, ((((30 + (54 * j ^ 2 + 60j) * q) - 42 * q ^ 2) + 144 * q ^ 3 + (27 * j ^ 2 + 30j) * q ^ 4) - 84 * q ^ 5) + 33 * q ^ 6, Unknown(), Unknown(), (((-4 + 2q + 42 * q ^ 2 + (136 * j ^ 2 + 127j) * q ^ 3 + 164 * q ^ 4) - 66 * q ^ 5) - 4 * q ^ 6) + 5 * q ^ 7, ((-j * q ^ 2 - 4 * q ^ 3) + (-7 * j ^ 2 - 6j) * q ^ 4) - 3 * q ^ 5, ((((-15 + 43q + (6 * j ^ 2 + 12j) * q ^ 2) - 88 * q ^ 3) + 92 * q ^ 4 + (-27 * j ^ 2 - 24j) * q ^ 5) - 59 * q ^ 6) + 18 * q ^ 7, ((q - 7 * q ^ 2) + (-14 * j ^ 2 - 13j) * q ^ 3 + (15 * j ^ 2 + 14j) * q ^ 4 + 10 * q ^ 5) - 3 * q ^ 6, ((-q + (-10 * j ^ 2 - 9j) * q ^ 2 + (28 * j ^ 2 + 27j) * q ^ 3 + 35 * q ^ 4) - 18 * q ^ 5) + 2 * q ^ 6, ((-8 * j ^ 2 - 6j) * q ^ 2 + (30 * j ^ 2 + 29j) * q ^ 3 + (-39 * j ^ 2 - 40j) * q ^ 4) - 17 * q ^ 5, Unknown(), ((((-9 + (-28 * j ^ 2 - 30j) * q) - 14 * q ^ 2) + (27 * j ^ 2 + 31j) * q ^ 3 + (-3 * j ^ 2 - 9j) * q ^ 4 + (-60 * j ^ 2 - 56j) * q ^ 5) - 56 * q ^ 6) + 15 * q ^ 7, Unknown(), Unknown(), (((1 - 6q) + (-24 * j ^ 2 - 25j) * q ^ 3 + (31 * j ^ 2 + 34j) * q ^ 4 + (3 * j ^ 2 - 3j) * q ^ 5 + (-30 * j ^ 2 - 26j) * q ^ 6) - 20 * q ^ 7) + 5 * q ^ 8, (j * q ^ 2 + q ^ 3 + (6 * j ^ 2 + 5j) * q ^ 4 + 6 * q ^ 5) - q ^ 6, (((2 * j * q ^ 110 - 14 * j * q ^ 111) + 30 * j * q ^ 112) - 25 * j * q ^ 113) + 7 * j * q ^ 114, (((2 * j ^ 2 * q ^ 22 - 14 * j ^ 2 * q ^ 23) + 30 * j ^ 2 * q ^ 24) - 25 * j ^ 2 * q ^ 25) + 7 * j ^ 2 * q ^ 26, (-4 * q ^ 2 + (-18 * j ^ 2 - 16j) * q ^ 3 + (34 * j ^ 2 + 33j) * q ^ 4 + (-29 * j ^ 2 - 30j) * q ^ 5) - 9 * q ^ 6, Unknown(), Unknown(), (((4 - 19q) + (-21 * j ^ 2 - 23j) * q ^ 2 + 5 * q ^ 3 + (16 * j ^ 2 + 20j) * q ^ 4 + (25 * j ^ 2 + 19j) * q ^ 5 + (-59 * j ^ 2 - 55j) * q ^ 6) - 37 * q ^ 7) + 8 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-(j ^ 2) * q ^ 22 + 8 * j ^ 2 * q ^ 23) - 22 * j ^ 2 * q ^ 24) + 27 * j ^ 2 * q ^ 25) - 16 * j ^ 2 * q ^ 26) + 4 * j ^ 2 * q ^ 27, Unknown(), Unknown(), (((1 - 4q) + (4 * j ^ 2 + 6j) * q ^ 2 + 28 * q ^ 3 + (46 * j ^ 2 + 44j) * q ^ 4 + (-58 * j ^ 2 - 56j) * q ^ 5 + (63 * j ^ 2 + 64j) * q ^ 6 + (-36 * j ^ 2 - 38j) * q ^ 7 + (-3 * j ^ 2 - j) * q ^ 8) - 14 * q ^ 9) + 5 * q ^ 10, 0, Unknown(), Unknown(), 0, (((2 * j ^ 2 * q ^ 3 + 4 * q ^ 4) - 10 * q ^ 5) + (-7 * j ^ 2 - 8j) * q ^ 6) - 2 * q ^ 7, Unknown(), Unknown(), Unknown(), ((((-j * q ^ 44 + 8 * j * q ^ 45) - 22 * j * q ^ 46) + 27 * j * q ^ 47) - 16 * j * q ^ 48) + 4 * j * q ^ 49, Unknown(), Unknown(), ((((-3 * q ^ 66 + 16 * q ^ 67) - 38 * q ^ 68) + 45 * q ^ 69) - 27 * q ^ 70) + 6 * q ^ 71, Unknown(), Unknown(), ((((j ^ 2 + 2j) * q ^ 2 + (-4 * j ^ 2 - 6j) * q ^ 3 + (5 * j ^ 2 + 6j) * q ^ 4 + (-32 * j ^ 2 - 30j) * q ^ 5 + (65 * j ^ 2 + 61j) * q ^ 6 + (-54 * j ^ 2 - 52j) * q ^ 7) - 25 * q ^ 8) + 10 * q ^ 9) - 4 * q ^ 10, 0, (-9 * j * q ^ 110 + 42 * j * q ^ 111 + (-2 * j ^ 2 - 66j) * q ^ 112 + (2 * j ^ 2 + 48j) * q ^ 113) - 15 * j * q ^ 114, ((((-3 * j * q ^ 110 + 16 * j * q ^ 111) - 38 * j * q ^ 112) + 45 * j * q ^ 113) - 27 * j * q ^ 114) + 6 * j * q ^ 115, Unknown(), ((-15 * j ^ 2 - 6j) * q ^ 7 - 12 * q ^ 8) + 9 * q ^ 9, (-9 * j ^ 2 * q ^ 22 + 42 * j ^ 2 * q ^ 23 + (-64 * j ^ 2 + 2j) * q ^ 24 + (46 * j ^ 2 - 2j) * q ^ 25) - 15 * j ^ 2 * q ^ 26, Unknown(), (((8 * j * q ^ 44 - 43 * j * q ^ 45) + 76 * j * q ^ 46) - 60 * j * q ^ 47) + 17 * j * q ^ 48, 0, Unknown(), Unknown(), (((2 * j * q ^ 44 - 14 * j * q ^ 45) + 30 * j * q ^ 46) - 25 * j * q ^ 47) + 7 * j * q ^ 48, Unknown(), 630 * j ^ 2 * q ^ 22, ((-2 * j ^ 2 - j) * q ^ 23 + (6 * j ^ 2 + j) * q ^ 24) - 4 * j ^ 2 * q ^ 25, (144 * j ^ 2 * q ^ 22 - 312 * j ^ 2 * q ^ 23) + 174 * j ^ 2 * q ^ 24, Unknown(), ((-16 * j ^ 2 * q ^ 22 + 71 * j ^ 2 * q ^ 23) - 85 * j ^ 2 * q ^ 24) + 32 * j ^ 2 * q ^ 25, ((-69 * j ^ 2 * q ^ 22 + 225 * j ^ 2 * q ^ 23) - 243 * j ^ 2 * q ^ 24) + 93 * j ^ 2 * q ^ 25, (((14 * j ^ 2 * q ^ 22 - 58 * j ^ 2 * q ^ 23) + 102 * j ^ 2 * q ^ 24) - 80 * j ^ 2 * q ^ 25) + 22 * j ^ 2 * q ^ 26, Unknown(), (((4 * j ^ 2 * q ^ 22 - 16 * j ^ 2 * q ^ 23) + (36 * j ^ 2 + 3j) * q ^ 24) - 26 * j ^ 2 * q ^ 25) + 5 * j ^ 2 * q ^ 26, (((21 * j ^ 2 * q ^ 22 - 92 * j ^ 2 * q ^ 23) + 155 * j ^ 2 * q ^ 24) - 115 * j ^ 2 * q ^ 25) + 34 * j ^ 2 * q ^ 26, ((4 * j ^ 2 * q ^ 22 - 25 * j ^ 2 * q ^ 23) + 53 * j ^ 2 * q ^ 24 + (-55 * j ^ 2 + 2j) * q ^ 25 + (31 * j ^ 2 - 2j) * q ^ 26) - 8 * j ^ 2 * q ^ 27, ((6 * j ^ 2 * q ^ 22 + (-81 * j ^ 2 + 9j) * q ^ 24 + 192 * j ^ 2 * q ^ 25) - 126 * j ^ 2 * q ^ 26) + 9 * j ^ 2 * q ^ 28, ((((30 * j ^ 2 * q ^ 22 + (-60 * j ^ 2 - 6j) * q ^ 23) - 42 * j ^ 2 * q ^ 24) + 144 * j ^ 2 * q ^ 25 + (-30 * j ^ 2 - 3j) * q ^ 26) - 84 * j ^ 2 * q ^ 27) + 33 * j ^ 2 * q ^ 28, ((6 * j ^ 2 - 2j) * q ^ 24 + (-29 * j ^ 2 + j) * q ^ 25 + (40 * j ^ 2 + j) * q ^ 26) - 17 * j ^ 2 * q ^ 27, (((-4 * j ^ 2 * q ^ 22 + 2 * j ^ 2 * q ^ 23 + 42 * j ^ 2 * q ^ 24 + (-127 * j ^ 2 + 9j) * q ^ 25 + 164 * j ^ 2 * q ^ 26) - 66 * j ^ 2 * q ^ 27) - 4 * j ^ 2 * q ^ 28) + 5 * j ^ 2 * q ^ 29, ((((-15 * j ^ 2 * q ^ 22 + 43 * j ^ 2 * q ^ 23 + (-12 * j ^ 2 - 6j) * q ^ 24) - 88 * j ^ 2 * q ^ 25) + 92 * j ^ 2 * q ^ 26 + (24 * j ^ 2 - 3j) * q ^ 27) - 59 * j ^ 2 * q ^ 28) + 18 * j ^ 2 * q ^ 29, Unknown(), (-4 * j ^ 2 * q ^ 24 + (16 * j ^ 2 - 2j) * q ^ 25 + (-33 * j ^ 2 + j) * q ^ 26 + (30 * j ^ 2 + j) * q ^ 27) - 9 * j ^ 2 * q ^ 28, (q ^ 24 + j ^ 2 * q ^ 25 + (-5 * j ^ 2 + j) * q ^ 26 + 6 * j ^ 2 * q ^ 27) - j ^ 2 * q ^ 28, (((2 * j * q ^ 25 + 4 * j ^ 2 * q ^ 26) - 10 * j ^ 2 * q ^ 27) + (8 * j ^ 2 + j) * q ^ 28) - 2 * j ^ 2 * q ^ 29, -300 * j ^ 2 * q ^ 22 + 330 * j ^ 2 * q ^ 23, ((((-2 * j ^ 2 - j) * q ^ 24 + (6 * j ^ 2 + 2j) * q ^ 25 + (-6 * j ^ 2 - j) * q ^ 26 + (30 * j ^ 2 - 2j) * q ^ 27 + (-61 * j ^ 2 + 4j) * q ^ 28 + (52 * j ^ 2 - 2j) * q ^ 29) - 25 * j ^ 2 * q ^ 30) + 10 * j ^ 2 * q ^ 31) - 4 * j ^ 2 * q ^ 32, ((-6 * j ^ 2 * q ^ 22 + (30 * j ^ 2 + 3j) * q ^ 23) - 42 * j ^ 2 * q ^ 24) + 9 * j ^ 2 * q ^ 25, (87 * j ^ 2 * q ^ 22 - 213 * j ^ 2 * q ^ 23) + 117 * j ^ 2 * q ^ 24, Unknown(), ((-43 * j ^ 2 * q ^ 22 + 145 * j ^ 2 * q ^ 23) - 167 * j ^ 2 * q ^ 24) + 62 * j ^ 2 * q ^ 25, ((6 * j ^ 2 - 9j) * q ^ 29 - 12 * j ^ 2 * q ^ 30) + 9 * j ^ 2 * q ^ 31, Unknown(), Unknown(), (((2 * q ^ 66 - 14 * q ^ 67) + 30 * q ^ 68) - 25 * q ^ 69) + 7 * q ^ 70, Unknown(), 0, (((8 * j ^ 2 * q ^ 22 - 43 * j ^ 2 * q ^ 23) + 76 * j ^ 2 * q ^ 24) - 60 * j ^ 2 * q ^ 25) + 17 * j ^ 2 * q ^ 26, Unknown(), 630 * j * q ^ 44, Unknown(), (144 * j * q ^ 44 - 312 * j * q ^ 45) + 174 * j * q ^ 46, ((-16 * j * q ^ 44 + 71 * j * q ^ 45) - 85 * j * q ^ 46) + 32 * j * q ^ 47, ((-69 * j * q ^ 44 + 225 * j * q ^ 45) - 243 * j * q ^ 46) + 93 * j * q ^ 47, (((-7 * j * q ^ 44 + 31 * j * q ^ 45) - 36 * j * q ^ 46) + (3 * j ^ 2 + 23j) * q ^ 47) - 8 * j * q ^ 48, ((4 * j * q ^ 44 - 25 * j * q ^ 45) + 53 * j * q ^ 46 + (-2 * j ^ 2 - 57j) * q ^ 47 + (2 * j ^ 2 + 33j) * q ^ 48) - 8 * j * q ^ 49, Unknown(), ((6 * j * q ^ 44 + (-9 * j ^ 2 - 90j) * q ^ 46 + 192 * j * q ^ 47) - 126 * j * q ^ 48) + 9 * j * q ^ 50, (((-4 * j * q ^ 44 + 2 * j * q ^ 45 + 42 * j * q ^ 46 + (-9 * j ^ 2 - 136j) * q ^ 47 + 164 * j * q ^ 48) - 66 * j * q ^ 49) - 4 * j * q ^ 50) + 5 * j * q ^ 51, ((2 * j ^ 2 + 8j) * q ^ 46 + (-(j ^ 2) - 30j) * q ^ 47 + (-(j ^ 2) + 39j) * q ^ 48) - 17 * j * q ^ 49, (j ^ 2 * q ^ 46 + j * q ^ 47 + (-(j ^ 2) - 6j) * q ^ 48 + 6 * j * q ^ 49) - j * q ^ 50, -300 * j * q ^ 44 + 330 * j * q ^ 45, (87 * j * q ^ 44 - 213 * j * q ^ 45) + 117 * j * q ^ 46, ((-43 * j * q ^ 44 + 145 * j * q ^ 45) - 167 * j * q ^ 46) + 62 * j * q ^ 47, ((9 * j ^ 2 + 15j) * q ^ 51 - 12 * j * q ^ 52) + 9 * j * q ^ 53, (-9 * j * q ^ 44 + 42 * j * q ^ 45 + (-2 * j ^ 2 - 66j) * q ^ 46 + (2 * j ^ 2 + 48j) * q ^ 47) - 15 * j * q ^ 48, (((2 * j ^ 2 * q ^ 88 - 14 * j ^ 2 * q ^ 89) + 30 * j ^ 2 * q ^ 90) - 25 * j ^ 2 * q ^ 91) + 7 * j ^ 2 * q ^ 92, Unknown(), 630 * q ^ 66, (((45 * q ^ 20 - 92 * q ^ 21) + 49 * q ^ 22 + 35 * q ^ 24) - 76 * q ^ 25) + 45 * q ^ 26, Unknown(), ((-16 * q ^ 66 + 71 * q ^ 67) - 85 * q ^ 68) + 32 * q ^ 69, Unknown(), Unknown(), ((6 * q ^ 66 + (90 * j ^ 2 + 81j) * q ^ 68 + 192 * q ^ 69) - 126 * q ^ 70) + 9 * q ^ 72, Unknown(), ((-8 * j ^ 2 - 6j) * q ^ 68 + (30 * j ^ 2 + 29j) * q ^ 69 + (-39 * j ^ 2 - 40j) * q ^ 70) - 17 * q ^ 71, (j * q ^ 68 + q ^ 69 + (6 * j ^ 2 + 5j) * q ^ 70 + 6 * q ^ 71) - q ^ 72, ((-81 * q ^ 20 + 105 * q ^ 21) - 75 * q ^ 24) + 81 * q ^ 25, (87 * q ^ 66 - 213 * q ^ 67) + 117 * q ^ 68, Unknown(), (-9 * q ^ 66 + 42 * q ^ 67 + (66 * j ^ 2 + 64j) * q ^ 68 + (-48 * j ^ 2 - 46j) * q ^ 69) - 15 * q ^ 70, 630 * j ^ 2 * q ^ 88, Unknown(), (144 * j ^ 2 * q ^ 88 - 312 * j ^ 2 * q ^ 89) + 174 * j ^ 2 * q ^ 90, ((((-3 * j ^ 2 * q ^ 22 + 16 * j ^ 2 * q ^ 23) - 38 * j ^ 2 * q ^ 24) + 45 * j ^ 2 * q ^ 25) - 27 * j ^ 2 * q ^ 26) + 6 * j ^ 2 * q ^ 27, -300 * j ^ 2 * q ^ 88 + 330 * j ^ 2 * q ^ 89, (87 * j ^ 2 * q ^ 88 - 213 * j ^ 2 * q ^ 89) + 117 * j ^ 2 * q ^ 90, Unknown(), ((-16 * j ^ 2 * q ^ 88 + 71 * j ^ 2 * q ^ 89) - 85 * j ^ 2 * q ^ 90) + 32 * j ^ 2 * q ^ 91, 630 * j * q ^ 110, Unknown(), (144 * j * q ^ 110 - 312 * j * q ^ 111) + 174 * j * q ^ 112, -300 * j * q ^ 110 + 330 * j * q ^ 111, (87 * j * q ^ 110 - 213 * j * q ^ 111) + 117 * j * q ^ 112, Unknown(), ((-16 * j * q ^ 110 + 71 * j * q ^ 111) - 85 * j * q ^ 112) + 32 * j * q ^ 113]
            end
        f134 = function (q, j)
                return [630, -285 + 345q, (72 - 213q) + 132 * q ^ 2, (132 - 306q) + 192 * q ^ 2, ((-35 + 134q) - 172 * q ^ 2) + 76 * q ^ 3, ((-11 + 61q) - 92 * q ^ 2) + 40 * q ^ 3, 24q + (48 * j ^ 2 + 45j) * q ^ 2 + 15 * q ^ 3, ((-63 + 207q) - 252 * q ^ 2) + 108 * q ^ 3, (24 + (45 * j ^ 2 + 48j) * q + 24 * q ^ 2) - 9 * q ^ 3, (-11 + 33q + (37 * j ^ 2 + 40j) * q ^ 2 + 18 * q ^ 3) - 3 * q ^ 4, (((10 - 50q) + 96 * q ^ 2) - 88 * q ^ 3) + 32 * q ^ 4, (((1 - 10q) + 27 * q ^ 2) - 29 * q ^ 3) + 11 * q ^ 4, (-5 * j ^ 2 - 4j) * q ^ 2 + (6 * j ^ 2 + 5j) * q ^ 3 + q ^ 4, (-8 + (-39 * j ^ 2 - 41j) * q + (65 * j ^ 2 + 67j) * q ^ 2 + 49 * q ^ 3) - 15 * q ^ 4, (((6 - 34q) + 72 * q ^ 2) - 68 * q ^ 3) + 24 * q ^ 4, -12q + 32 * q ^ 2 + (33 * j ^ 2 + 30j) * q ^ 3 + 10 * q ^ 4, (((18 - 79q) + 148 * q ^ 2) - 128 * q ^ 3) + 44 * q ^ 4, ((((-1 + 5q) - 17 * q ^ 2) + 27 * q ^ 3) - 21 * q ^ 4) + 7 * q ^ 5, ((4 - 23q) + (-50 * j ^ 2 - 52j) * q ^ 2 + (57 * j ^ 2 + 59j) * q ^ 3 + 34 * q ^ 4) - 8 * q ^ 5, j ^ 2 * q ^ 4, Unknown(), ((1 - 9q) + (-26 * j ^ 2 - 27j) * q ^ 2 + (35 * j ^ 2 + 37j) * q ^ 3 + 23 * q ^ 4) - 6 * q ^ 5, Unknown(), ((((-2 + 12q) - 31 * q ^ 2) + 45 * q ^ 3) - 34 * q ^ 4) + 11 * q ^ 5, (((q - 4 * q ^ 2) + 8 * q ^ 3) - 8 * q ^ 4) + 3 * q ^ 5, -2 * q ^ 2 + (-5 * j ^ 2 - 4j) * q ^ 3 + (4 * j ^ 2 + 3j) * q ^ 4 + q ^ 5, -72 * q ^ 2 + 192 * q ^ 3 + (135 * j ^ 2 + 144j) * q ^ 4 + 15 * q ^ 6, 0, Unknown(), -11 * q ^ 2 + 41 * q ^ 3 + (36 * j ^ 2 + 37j) * q ^ 4 + (-5 * j ^ 2 - 6j) * q ^ 5 + q ^ 6, 0, (((24 - 48q) + (48 * j ^ 2 + 45j) * q ^ 2 + 144 * q ^ 3) - 24 * q ^ 4) + (96 * j ^ 2 + 90j) * q ^ 5 + 39 * q ^ 6, Unknown(), Unknown(), (((36 * q ^ 2 - 124 * q ^ 3) + 164 * q ^ 4 + (75 * j ^ 2 + 84j) * q ^ 5) - 5 * q ^ 6) + 10 * q ^ 7, ((3 * j ^ 2 + 2j) * q ^ 3 + (-7 * j ^ 2 - 6j) * q ^ 4 + (4 * j ^ 2 + 5j) * q ^ 5) - j * q ^ 6, ((-11 + 37q) - 4 * q ^ 2) + (94 * j ^ 2 + 91j) * q ^ 3 + 90 * q ^ 4 + 28 * q ^ 5 + (72 * j ^ 2 + 66j) * q ^ 6 + 23 * q ^ 7, q + (6 * j ^ 2 + 7j) * q ^ 2 + (-13 * j ^ 2 - 14j) * q ^ 3 + (14 * j ^ 2 + 15j) * q ^ 4 + 10 * q ^ 5 + (4 * j ^ 2 + 3j) * q ^ 6, (6 * q ^ 2 - 24 * q ^ 3) + 37 * q ^ 4 + (23 * j ^ 2 + 24j) * q ^ 5 + (-3 * j ^ 2 - 4j) * q ^ 6 + q ^ 7, 3 * q ^ 2 + (25 * j ^ 2 + 24j) * q ^ 3 + (-43 * j ^ 2 - 44j) * q ^ 4 + (22 * j ^ 2 + 24j) * q ^ 5 + q ^ 7, Unknown(), -8 + 22q + 4 * j * q ^ 2 + (41 * j ^ 2 + 35j) * q ^ 3 + (-6 * j ^ 2 - 2j) * q ^ 4 + 72 * q ^ 5 + (68 * j ^ 2 + 66j) * q ^ 6 + 17 * q ^ 7, Unknown(), Unknown(), ((1 - 4q) - 4 * q ^ 2) + (-35 * j ^ 2 - 31j) * q ^ 3 + (45 * j ^ 2 + 40j) * q ^ 4 + (-(j ^ 2) + 4j) * q ^ 5 + (-40 * j ^ 2 - 42j) * q ^ 6 + (30 * j ^ 2 + 28j) * q ^ 7 + 6 * q ^ 8, q ^ 3 + (5 * j ^ 2 + 3j) * q ^ 4 + 6 * q ^ 5 + (2 * j ^ 2 + 4j) * q ^ 6, (((-(j ^ 2) * q ^ 115 + 10 * j ^ 2 * q ^ 116) - 27 * j ^ 2 * q ^ 117) + 29 * j ^ 2 * q ^ 118) - 11 * j ^ 2 * q ^ 119, (((-j * q ^ 23 + 10 * j * q ^ 24) - 27 * j * q ^ 25) + 29 * j * q ^ 26) - 11 * j * q ^ 27, -2 * q ^ 2 + 13 * q ^ 3 + (32 * j ^ 2 + 31j) * q ^ 4 + (-33 * j ^ 2 - 34j) * q ^ 5 + (13 * j ^ 2 + 15j) * q ^ 6 + q ^ 8, Unknown(), Unknown(), (4 - 16q) + 14 * q ^ 2 + (-20 * j ^ 2 - 16j) * q ^ 3 + (29 * j ^ 2 + 23j) * q ^ 4 + (27 * j ^ 2 + 31j) * q ^ 5 + 71 * q ^ 6 + (47 * j ^ 2 + 45j) * q ^ 7 + 10 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((j * q ^ 23 - 5 * j * q ^ 24) + 17 * j * q ^ 25) - 27 * j * q ^ 26) + 21 * j * q ^ 27) - 7 * j * q ^ 28, Unknown(), Unknown(), ((1 - 2q) - 5 * q ^ 2) + (-20 * j ^ 2 - 22j) * q ^ 3 + (41 * j ^ 2 + 42j) * q ^ 4 + 66 * q ^ 5 + (79 * j ^ 2 + 75j) * q ^ 6 + (-42 * j ^ 2 - 38j) * q ^ 7 + 11 * q ^ 8 + (22 * j ^ 2 + 20j) * q ^ 9 + 6 * q ^ 10, 0, Unknown(), Unknown(), 0, ((2 * q ^ 4 + (8 * j ^ 2 + 10j) * q ^ 5 + 10 * q ^ 6) - 4 * q ^ 7) + j * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-(j ^ 2) * q ^ 46 + 5 * j ^ 2 * q ^ 47) - 17 * j ^ 2 * q ^ 48) + 27 * j ^ 2 * q ^ 49) - 21 * j ^ 2 * q ^ 50) + 7 * j ^ 2 * q ^ 51, Unknown(), Unknown(), ((((2 * q ^ 69 - 12 * q ^ 70) + 31 * q ^ 71) - 45 * q ^ 72) + 34 * q ^ 73) - 11 * q ^ 74, Unknown(), Unknown(), (6 * q ^ 3 - 11 * q ^ 4) + (-22 * j ^ 2 - 24j) * q ^ 5 + (57 * j ^ 2 + 61j) * q ^ 6 + (-56 * j ^ 2 - 58j) * q ^ 7 + (25 * j ^ 2 + 24j) * q ^ 8 + (-14 * j ^ 2 - 12j) * q ^ 9 + (6 * j ^ 2 + 5j) * q ^ 10 + q ^ 12, 0, ((8 * j ^ 2 * q ^ 115 + (-41 * j ^ 2 - 2j) * q ^ 116 + (67 * j ^ 2 + 2j) * q ^ 117) - 49 * j ^ 2 * q ^ 118) + 15 * j ^ 2 * q ^ 119, ((((2 * j ^ 2 * q ^ 115 - 12 * j ^ 2 * q ^ 116) + 31 * j ^ 2 * q ^ 117) - 45 * j ^ 2 * q ^ 118) + 34 * j ^ 2 * q ^ 119) - 11 * j ^ 2 * q ^ 120, Unknown(), 6 * q ^ 7 + (12 * j ^ 2 + 21j) * q ^ 8 + 9 * q ^ 9, ((8 * j * q ^ 23 + (2 * j ^ 2 - 39j) * q ^ 24 + (-2 * j ^ 2 + 65j) * q ^ 25) - 49 * j * q ^ 26) + 15 * j * q ^ 27, Unknown(), (((6 * j ^ 2 * q ^ 46 - 34 * j ^ 2 * q ^ 47) + 72 * j ^ 2 * q ^ 48) - 68 * j ^ 2 * q ^ 49) + 24 * j ^ 2 * q ^ 50, 0, Unknown(), Unknown(), (((j ^ 2 * q ^ 46 - 10 * j ^ 2 * q ^ 47) + 27 * j ^ 2 * q ^ 48) - 29 * j ^ 2 * q ^ 49) + 11 * j ^ 2 * q ^ 50, Unknown(), -630 * j * q ^ 23, ((-(j ^ 2) - 5j) * q ^ 25 + (j ^ 2 + 6j) * q ^ 26) - j * q ^ 27, (-132 * j * q ^ 23 + 306 * j * q ^ 24) - 192 * j * q ^ 25, Unknown(), ((11 * j * q ^ 23 - 61 * j * q ^ 24) + 92 * j * q ^ 25) - 40 * j * q ^ 26, ((63 * j * q ^ 23 - 207 * j * q ^ 24) + 252 * j * q ^ 25) - 108 * j * q ^ 26, (((-10 * j * q ^ 23 + 50 * j * q ^ 24) - 96 * j * q ^ 25) + 88 * j * q ^ 26) - 32 * j * q ^ 27, Unknown(), ((12 * j * q ^ 24 - 32 * j * q ^ 25) + (3 * j ^ 2 + 33j) * q ^ 26) - 10 * j * q ^ 27, (((-18 * j * q ^ 23 + 79 * j * q ^ 24) - 148 * j * q ^ 25) + 128 * j * q ^ 26) - 44 * j * q ^ 27, ((-4 * j * q ^ 23 + 23 * j * q ^ 24 + (2 * j ^ 2 - 50j) * q ^ 25 + (-2 * j ^ 2 + 57j) * q ^ 26) - 34 * j * q ^ 27) + 8 * j * q ^ 28, ((72 * j * q ^ 25 - 192 * j * q ^ 26) + (-9 * j ^ 2 + 135j) * q ^ 27) - 15 * j * q ^ 29, (((-24 * j * q ^ 23 + 48 * j * q ^ 24 + (3 * j ^ 2 + 48j) * q ^ 25) - 144 * j * q ^ 26) + 24 * j * q ^ 27 + (6 * j ^ 2 + 96j) * q ^ 28) - 39 * j * q ^ 29, (-3 * j * q ^ 25 + (j ^ 2 + 25j) * q ^ 26 + (j ^ 2 - 43j) * q ^ 27 + (-2 * j ^ 2 + 22j) * q ^ 28) - j * q ^ 30, (((-36 * j * q ^ 25 + 124 * j * q ^ 26) - 164 * j * q ^ 27) + (-9 * j ^ 2 + 75j) * q ^ 28 + 5 * j * q ^ 29) - 10 * j * q ^ 30, (((((11 * j * q ^ 23 - 37 * j * q ^ 24) + 4 * j * q ^ 25 + (3 * j ^ 2 + 94j) * q ^ 26) - 90 * j * q ^ 27) - 28 * j * q ^ 28) + (6 * j ^ 2 + 72j) * q ^ 29) - 23 * j * q ^ 30, Unknown(), ((2 * j * q ^ 25 - 13 * j * q ^ 26) + (j ^ 2 + 32j) * q ^ 27 + (j ^ 2 - 33j) * q ^ 28 + (-2 * j ^ 2 + 13j) * q ^ 29) - j * q ^ 31, ((-j * q ^ 26 + (2 * j ^ 2 + 5j) * q ^ 27) - 6 * j * q ^ 28) + (-2 * j ^ 2 + 2j) * q ^ 29, (((-2 * j * q ^ 27 + (-2 * j ^ 2 + 8j) * q ^ 28) - 10 * j * q ^ 29) + 4 * j * q ^ 30) - j ^ 2 * q ^ 31, 285 * j * q ^ 23 - 345 * j * q ^ 24, (-6 * j * q ^ 26 + 11 * j * q ^ 27 + (2 * j ^ 2 - 22j) * q ^ 28 + (-4 * j ^ 2 + 57j) * q ^ 29 + (2 * j ^ 2 - 56j) * q ^ 30 + (j ^ 2 + 25j) * q ^ 31 + (-2 * j ^ 2 - 14j) * q ^ 32 + (j ^ 2 + 6j) * q ^ 33) - j * q ^ 35, (-24 * j * q ^ 24 + (3 * j ^ 2 + 48j) * q ^ 25) - 15 * j * q ^ 26, (-72 * j * q ^ 23 + 213 * j * q ^ 24) - 132 * j * q ^ 25, Unknown(), ((35 * j * q ^ 23 - 134 * j * q ^ 24) + 172 * j * q ^ 25) - 76 * j * q ^ 26, (-6 * j * q ^ 30 + (-9 * j ^ 2 + 12j) * q ^ 31) - 9 * j * q ^ 32, Unknown(), Unknown(), (((-(q ^ 69) + 10 * q ^ 70) - 27 * q ^ 71) + 29 * q ^ 72) - 11 * q ^ 73, Unknown(), 0, (((-6 * j * q ^ 23 + 34 * j * q ^ 24) - 72 * j * q ^ 25) + 68 * j * q ^ 26) - 24 * j * q ^ 27, Unknown(), 630 * j ^ 2 * q ^ 46, Unknown(), (132 * j ^ 2 * q ^ 46 - 306 * j ^ 2 * q ^ 47) + 192 * j ^ 2 * q ^ 48, ((-11 * j ^ 2 * q ^ 46 + 61 * j ^ 2 * q ^ 47) - 92 * j ^ 2 * q ^ 48) + 40 * j ^ 2 * q ^ 49, ((-63 * j ^ 2 * q ^ 46 + 207 * j ^ 2 * q ^ 47) - 252 * j ^ 2 * q ^ 48) + 108 * j ^ 2 * q ^ 49, (-11 * j ^ 2 * q ^ 46 + 33 * j ^ 2 * q ^ 47 + (-40 * j ^ 2 - 3j) * q ^ 48 + 18 * j ^ 2 * q ^ 49) - 3 * j ^ 2 * q ^ 50, ((4 * j ^ 2 * q ^ 46 - 23 * j ^ 2 * q ^ 47) + (52 * j ^ 2 + 2j) * q ^ 48 + (-59 * j ^ 2 - 2j) * q ^ 49 + 34 * j ^ 2 * q ^ 50) - 8 * j ^ 2 * q ^ 51, Unknown(), -72 * j ^ 2 * q ^ 48 + 192 * j ^ 2 * q ^ 49 + (-144 * j ^ 2 - 9j) * q ^ 50 + 15 * j ^ 2 * q ^ 52, (((36 * j ^ 2 * q ^ 48 - 124 * j ^ 2 * q ^ 49) + 164 * j ^ 2 * q ^ 50 + (-84 * j ^ 2 - 9j) * q ^ 51) - 5 * j ^ 2 * q ^ 52) + 10 * j ^ 2 * q ^ 53, 3 * j ^ 2 * q ^ 48 + (-24 * j ^ 2 + j) * q ^ 49 + (44 * j ^ 2 + j) * q ^ 50 + (-24 * j ^ 2 - 2j) * q ^ 51 + j ^ 2 * q ^ 53, j ^ 2 * q ^ 49 + (-3 * j ^ 2 + 2j) * q ^ 50 + 6 * j ^ 2 * q ^ 51 + (-4 * j ^ 2 - 2j) * q ^ 52, -285 * j ^ 2 * q ^ 46 + 345 * j ^ 2 * q ^ 47, (72 * j ^ 2 * q ^ 46 - 213 * j ^ 2 * q ^ 47) + 132 * j ^ 2 * q ^ 48, ((-35 * j ^ 2 * q ^ 46 + 134 * j ^ 2 * q ^ 47) - 172 * j ^ 2 * q ^ 48) + 76 * j ^ 2 * q ^ 49, 6 * j ^ 2 * q ^ 53 + (-21 * j ^ 2 - 9j) * q ^ 54 + 9 * j ^ 2 * q ^ 55, (-8 * j ^ 2 * q ^ 46 + (41 * j ^ 2 + 2j) * q ^ 47 + (-67 * j ^ 2 - 2j) * q ^ 48 + 49 * j ^ 2 * q ^ 49) - 15 * j ^ 2 * q ^ 50, (((j * q ^ 92 - 10 * j * q ^ 93) + 27 * j * q ^ 94) - 29 * j * q ^ 95) + 11 * j * q ^ 96, Unknown(), -630 * q ^ 69, (((-32 * q ^ 21 + 28 * q ^ 22 + 77 * q ^ 24) - 124 * q ^ 25) + 45 * q ^ 26 + 12 * q ^ 30) - 24 * q ^ 31, Unknown(), ((11 * q ^ 69 - 61 * q ^ 70) + 92 * q ^ 71) - 40 * q ^ 72, Unknown(), Unknown(), ((72 * q ^ 71 - 192 * q ^ 72) + (-135 * j ^ 2 - 144j) * q ^ 73) - 15 * q ^ 75, Unknown(), (-3 * q ^ 71 + (-25 * j ^ 2 - 24j) * q ^ 72 + (43 * j ^ 2 + 44j) * q ^ 73 + (-22 * j ^ 2 - 24j) * q ^ 74) - q ^ 76, ((-(q ^ 72) + (-5 * j ^ 2 - 3j) * q ^ 73) - 6 * q ^ 74) + (-2 * j ^ 2 - 4j) * q ^ 75, ((60 * q ^ 21 - 165 * q ^ 24) + 81 * q ^ 25) - 36 * q ^ 30, (-72 * q ^ 69 + 213 * q ^ 70) - 132 * q ^ 71, Unknown(), ((8 * q ^ 69 + (39 * j ^ 2 + 41j) * q ^ 70 + (-65 * j ^ 2 - 67j) * q ^ 71) - 49 * q ^ 72) + 15 * q ^ 73, 630 * j * q ^ 92, Unknown(), (132 * j * q ^ 92 - 306 * j * q ^ 93) + 192 * j * q ^ 94, ((((2 * j * q ^ 23 - 12 * j * q ^ 24) + 31 * j * q ^ 25) - 45 * j * q ^ 26) + 34 * j * q ^ 27) - 11 * j * q ^ 28, -285 * j * q ^ 92 + 345 * j * q ^ 93, (72 * j * q ^ 92 - 213 * j * q ^ 93) + 132 * j * q ^ 94, Unknown(), ((-11 * j * q ^ 92 + 61 * j * q ^ 93) - 92 * j * q ^ 94) + 40 * j * q ^ 95, -630 * j ^ 2 * q ^ 115, Unknown(), (-132 * j ^ 2 * q ^ 115 + 306 * j ^ 2 * q ^ 116) - 192 * j ^ 2 * q ^ 117, 285 * j ^ 2 * q ^ 115 - 345 * j ^ 2 * q ^ 116, (-72 * j ^ 2 * q ^ 115 + 213 * j ^ 2 * q ^ 116) - 132 * j ^ 2 * q ^ 117, Unknown(), ((11 * j ^ 2 * q ^ 115 - 61 * j ^ 2 * q ^ 116) + 92 * j ^ 2 * q ^ 117) - 40 * j ^ 2 * q ^ 118]
            end
        f138 = function (q, j)
                return [720, -360 + 360q, (114 - 246q) + 114 * q ^ 2, (184 - 352q) + 184 * q ^ 2, ((-61 + 176q) - 176 * q ^ 2) + 61 * q ^ 3, ((-26 + 88q) - 88 * q ^ 2) + 26 * q ^ 3, -6 + (-42 * j ^ 2 - 36j) * q + (42 * j ^ 2 + 36j) * q ^ 2 + 6 * q ^ 3, ((-96 + 264q) - 264 * q ^ 2) + 96 * q ^ 3, (24 + (36 * j ^ 2 + 42j) * q + (-36 * j ^ 2 - 42j) * q ^ 2) - 24 * q ^ 3, (-11 + (-29 * j ^ 2 - 33j) * q + (40 * j ^ 2 + 44j) * q ^ 2 + (-29 * j ^ 2 - 33j) * q ^ 3) - 11 * q ^ 4, (((22 - 78q) + 112 * q ^ 2) - 78 * q ^ 3) + 22 * q ^ 4, (((5 - 21q) + 32 * q ^ 2) - 21 * q ^ 3) + 5 * q ^ 4, (3 * j ^ 2 + j) * q + (-6 * j ^ 2 - 2j) * q ^ 2 + (3 * j ^ 2 + j) * q ^ 3, (-15 + (-50 * j ^ 2 - 54j) * q + (70 * j ^ 2 + 78j) * q ^ 2 + (-50 * j ^ 2 - 54j) * q ^ 3) - 15 * q ^ 4, (((15 - 57q) + 84 * q ^ 2) - 57 * q ^ 3) + 15 * q ^ 4, 4 + (24 * j ^ 2 + 22j) * q + (-40 * j ^ 2 - 32j) * q ^ 2 + (24 * j ^ 2 + 22j) * q ^ 3 + 4 * q ^ 4, (((33 - 119q) + 170 * q ^ 2) - 119 * q ^ 3) + 33 * q ^ 4, ((((-3 + 14q) - 25 * q ^ 2) + 25 * q ^ 3) - 14 * q ^ 4) + 3 * q ^ 5, (8 + (32 * j ^ 2 + 35j) * q + (-60 * j ^ 2 - 65j) * q ^ 2 + (60 * j ^ 2 + 65j) * q ^ 3 + (-32 * j ^ 2 - 35j) * q ^ 4) - 8 * q ^ 5, -j * q ^ 2 + j * q ^ 3, Unknown(), (4 + (17 * j ^ 2 + 19j) * q + (-34 * j ^ 2 - 37j) * q ^ 2 + (34 * j ^ 2 + 37j) * q ^ 3 + (-17 * j ^ 2 - 19j) * q ^ 4) - 4 * q ^ 5, Unknown(), ((((-6 + 25q) - 44 * q ^ 2) + 44 * q ^ 3) - 25 * q ^ 4) + 6 * q ^ 5, ((((-1 + 4q) - 7 * q ^ 2) + 7 * q ^ 3) - 4 * q ^ 4) + q ^ 5, (-2 * j ^ 2 - j) * q + (4 * j ^ 2 + j) * q ^ 2 + (-4 * j ^ 2 - j) * q ^ 3 + (2 * j ^ 2 + j) * q ^ 4, 6 + (108 * j ^ 2 + 126j) * q ^ 2 + 240 * q ^ 3 + (108 * j ^ 2 + 126j) * q ^ 4 + 6 * q ^ 6, -(j ^ 2) * q ^ 3, Unknown(), (-(j ^ 2) - 3j) * q + (25 * j ^ 2 + 27j) * q ^ 2 + 52 * q ^ 3 + (25 * j ^ 2 + 27j) * q ^ 4 + (-(j ^ 2) - 3j) * q ^ 5, -j * q ^ 15, 36 + (84 * j ^ 2 + 72j) * q + (42 * j ^ 2 + 36j) * q ^ 2 + 180 * q ^ 3 + (42 * j ^ 2 + 36j) * q ^ 4 + (84 * j ^ 2 + 72j) * q ^ 5 + 36 * q ^ 6, Unknown(), Unknown(), ((-4 + 2q + (-60 * j ^ 2 - 66j) * q ^ 2 + (168 * j ^ 2 + 180j) * q ^ 3 + (-168 * j ^ 2 - 180j) * q ^ 4 + (60 * j ^ 2 + 66j) * q ^ 5) - 2 * q ^ 6) + 4 * q ^ 7, (-2 * j ^ 2 - j) * q ^ 2 + (6 * j ^ 2 + 5j) * q ^ 3 + (-6 * j ^ 2 - 5j) * q ^ 4 + (2 * j ^ 2 + j) * q ^ 5, -19 + (-61 * j ^ 2 - 57j) * q + (20 * j ^ 2 + 16j) * q ^ 2 + (112 * j ^ 2 + 110j) * q ^ 3 + (-112 * j ^ 2 - 110j) * q ^ 4 + (-20 * j ^ 2 - 16j) * q ^ 5 + (61 * j ^ 2 + 57j) * q ^ 6 + 19 * q ^ 7, (3q + (10 * j ^ 2 + 11j) * q ^ 2 + (-13 * j ^ 2 - 18j) * q ^ 3 + (13 * j ^ 2 + 18j) * q ^ 4 + (-10 * j ^ 2 - 11j) * q ^ 5) - 3 * q ^ 6, (j ^ 2 + 2j) * q + (-14 * j ^ 2 - 16j) * q ^ 2 + (37 * j ^ 2 + 38j) * q ^ 3 + (-37 * j ^ 2 - 38j) * q ^ 4 + (14 * j ^ 2 + 16j) * q ^ 5 + (-(j ^ 2) - 2j) * q ^ 6, ((-9 * j ^ 2 - 13j) * q ^ 2 - 43 * q ^ 3) + 43 * q ^ 4 + (9 * j ^ 2 + 13j) * q ^ 5, Unknown(), -15 + (-50 * j ^ 2 - 46j) * q + (37 * j ^ 2 + 45j) * q ^ 2 + (38 * j ^ 2 + 18j) * q ^ 3 + (-38 * j ^ 2 - 18j) * q ^ 4 + (-37 * j ^ 2 - 45j) * q ^ 5 + (50 * j ^ 2 + 46j) * q ^ 6 + 15 * q ^ 7, Unknown(), Unknown(), (((4 - 16q) + (-14 * j ^ 2 - 19j) * q ^ 2 + (-27 * j ^ 2 - 14j) * q ^ 3 + (58 * j ^ 2 + 42j) * q ^ 4 + (-27 * j ^ 2 - 14j) * q ^ 5 + (-14 * j ^ 2 - 19j) * q ^ 6) - 16 * q ^ 7) + 4 * q ^ 8, ((j ^ 2 * q ^ 2 + (-4 * j ^ 2 - 3j) * q ^ 3) - 6 * q ^ 4) + (-4 * j ^ 2 - 3j) * q ^ 5 + j ^ 2 * q ^ 6, (((5 * j * q ^ 105 - 21 * j * q ^ 106) + 32 * j * q ^ 107) - 21 * j * q ^ 108) + 5 * j * q ^ 109, (((5 * j ^ 2 * q ^ 21 - 21 * j ^ 2 * q ^ 22) + 32 * j ^ 2 * q ^ 23) - 21 * j ^ 2 * q ^ 24) + 5 * j ^ 2 * q ^ 25, (6 * j ^ 2 + 8j) * q ^ 2 + (-26 * j ^ 2 - 27j) * q ^ 3 + (40 * j ^ 2 + 42j) * q ^ 4 + (-26 * j ^ 2 - 27j) * q ^ 5 + (6 * j ^ 2 + 8j) * q ^ 6, Unknown(), Unknown(), 8 + (35 * j ^ 2 + 33j) * q + (-44 * j ^ 2 - 48j) * q ^ 2 + (-2 * j ^ 2 + 11j) * q ^ 3 + (42 * j ^ 2 + 24j) * q ^ 4 + (-2 * j ^ 2 + 11j) * q ^ 5 + (-44 * j ^ 2 - 48j) * q ^ 6 + (35 * j ^ 2 + 33j) * q ^ 7 + 8 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-3 * j ^ 2 * q ^ 21 + 14 * j ^ 2 * q ^ 22) - 25 * j ^ 2 * q ^ 23) + 25 * j ^ 2 * q ^ 24) - 14 * j ^ 2 * q ^ 25) + 3 * j ^ 2 * q ^ 26, Unknown(), Unknown(), (((4 - 10q) + (3 * j ^ 2 - j) * q ^ 2 + (-38 * j ^ 2 - 36j) * q ^ 3 + (65 * j ^ 2 + 70j) * q ^ 4 + (-72 * j ^ 2 - 80j) * q ^ 5 + (65 * j ^ 2 + 70j) * q ^ 6 + (-38 * j ^ 2 - 36j) * q ^ 7 + (3 * j ^ 2 - j) * q ^ 8) - 10 * q ^ 9) + 4 * q ^ 10, -j * q ^ 6, Unknown(), Unknown(), -(j ^ 2) * q ^ 12, ((2 * j * q ^ 3 + (-7 * j ^ 2 - 8j) * q ^ 4) - 12 * q ^ 5) + (-7 * j ^ 2 - 8j) * q ^ 6 + 2 * j * q ^ 7, Unknown(), Unknown(), Unknown(), ((((-3 * j * q ^ 42 + 14 * j * q ^ 43) - 25 * j * q ^ 44) + 25 * j * q ^ 45) - 14 * j * q ^ 46) + 3 * j * q ^ 47, Unknown(), Unknown(), ((((-6 * q ^ 63 + 25 * q ^ 64) - 44 * q ^ 65) + 44 * q ^ 66) - 25 * q ^ 67) + 6 * q ^ 68, Unknown(), Unknown(), (3 * j ^ 2 + j) * q ^ 2 + (-12 * j ^ 2 - 8j) * q ^ 3 + (19 * j ^ 2 + 17j) * q ^ 4 + (-40 * j ^ 2 - 48j) * q ^ 5 + (60 * j ^ 2 + 76j) * q ^ 6 + (-40 * j ^ 2 - 48j) * q ^ 7 + (19 * j ^ 2 + 17j) * q ^ 8 + (-12 * j ^ 2 - 8j) * q ^ 9 + (3 * j ^ 2 + j) * q ^ 10, -(q ^ 9), (-15 * j * q ^ 105 + (-4 * j ^ 2 + 50j) * q ^ 106 + (8 * j ^ 2 - 70j) * q ^ 107 + (-4 * j ^ 2 + 50j) * q ^ 108) - 15 * j * q ^ 109, ((((-6 * j * q ^ 105 + 25 * j * q ^ 106) - 44 * j * q ^ 107) + 44 * j * q ^ 108) - 25 * j * q ^ 109) + 6 * j * q ^ 110, Unknown(), (-4 * j ^ 2 + 5j) * q ^ 6 + (-12 * j ^ 2 - 21j) * q ^ 7 + (12 * j ^ 2 + 21j) * q ^ 8 + (4 * j ^ 2 - 5j) * q ^ 9, (-15 * j ^ 2 * q ^ 21 + (54 * j ^ 2 + 4j) * q ^ 22 + (-78 * j ^ 2 - 8j) * q ^ 23 + (54 * j ^ 2 + 4j) * q ^ 24) - 15 * j ^ 2 * q ^ 25, Unknown(), (((15 * j * q ^ 42 - 57 * j * q ^ 43) + 84 * j * q ^ 44) - 57 * j * q ^ 45) + 15 * j * q ^ 46, j * q ^ 44 - j * q ^ 45, Unknown(), Unknown(), (((5 * j * q ^ 42 - 21 * j * q ^ 43) + 32 * j * q ^ 44) - 21 * j * q ^ 45) + 5 * j * q ^ 46, Unknown(), 720 * j ^ 2 * q ^ 21, (-(j ^ 2) + 2j) * q ^ 22 + (2 * j ^ 2 - 4j) * q ^ 23 + (-(j ^ 2) + 2j) * q ^ 24, (184 * j ^ 2 * q ^ 21 - 352 * j ^ 2 * q ^ 22) + 184 * j ^ 2 * q ^ 23, Unknown(), ((-26 * j ^ 2 * q ^ 21 + 88 * j ^ 2 * q ^ 22) - 88 * j ^ 2 * q ^ 23) + 26 * j ^ 2 * q ^ 24, ((-96 * j ^ 2 * q ^ 21 + 264 * j ^ 2 * q ^ 22) - 264 * j ^ 2 * q ^ 23) + 96 * j ^ 2 * q ^ 24, (((22 * j ^ 2 * q ^ 21 - 78 * j ^ 2 * q ^ 22) + 112 * j ^ 2 * q ^ 23) - 78 * j ^ 2 * q ^ 24) + 22 * j ^ 2 * q ^ 25, Unknown(), 4 * j ^ 2 * q ^ 21 + (-22 * j ^ 2 + 2j) * q ^ 22 + (32 * j ^ 2 - 8j) * q ^ 23 + (-22 * j ^ 2 + 2j) * q ^ 24 + 4 * j ^ 2 * q ^ 25, (((33 * j ^ 2 * q ^ 21 - 119 * j ^ 2 * q ^ 22) + 170 * j ^ 2 * q ^ 23) - 119 * j ^ 2 * q ^ 24) + 33 * j ^ 2 * q ^ 25, (8 * j ^ 2 * q ^ 21 + (-35 * j ^ 2 - 3j) * q ^ 22 + (65 * j ^ 2 + 5j) * q ^ 23 + (-65 * j ^ 2 - 5j) * q ^ 24 + (35 * j ^ 2 + 3j) * q ^ 25) - 8 * j ^ 2 * q ^ 26, 6 * j ^ 2 * q ^ 21 + (-126 * j ^ 2 - 18j) * q ^ 23 + 240 * j ^ 2 * q ^ 24 + (-126 * j ^ 2 - 18j) * q ^ 25 + 6 * j ^ 2 * q ^ 27, 36 * j ^ 2 * q ^ 21 + (-72 * j ^ 2 + 12j) * q ^ 22 + (-36 * j ^ 2 + 6j) * q ^ 23 + 180 * j ^ 2 * q ^ 24 + (-36 * j ^ 2 + 6j) * q ^ 25 + (-72 * j ^ 2 + 12j) * q ^ 26 + 36 * j ^ 2 * q ^ 27, ((13 * j ^ 2 + 4j) * q ^ 23 - 43 * j ^ 2 * q ^ 24) + 43 * j ^ 2 * q ^ 25 + (-13 * j ^ 2 - 4j) * q ^ 26, ((-4 * j ^ 2 * q ^ 21 + 2 * j ^ 2 * q ^ 22 + (66 * j ^ 2 + 6j) * q ^ 23 + (-180 * j ^ 2 - 12j) * q ^ 24 + (180 * j ^ 2 + 12j) * q ^ 25 + (-66 * j ^ 2 - 6j) * q ^ 26) - 2 * j ^ 2 * q ^ 27) + 4 * j ^ 2 * q ^ 28, -19 * j ^ 2 * q ^ 21 + (57 * j ^ 2 - 4j) * q ^ 22 + (-16 * j ^ 2 + 4j) * q ^ 23 + (-110 * j ^ 2 + 2j) * q ^ 24 + (110 * j ^ 2 - 2j) * q ^ 25 + (16 * j ^ 2 - 4j) * q ^ 26 + (-57 * j ^ 2 + 4j) * q ^ 27 + 19 * j ^ 2 * q ^ 28, Unknown(), (-8 * j ^ 2 - 2j) * q ^ 23 + (27 * j ^ 2 + j) * q ^ 24 + (-42 * j ^ 2 - 2j) * q ^ 25 + (27 * j ^ 2 + j) * q ^ 26 + (-8 * j ^ 2 - 2j) * q ^ 27, ((j * q ^ 23 + (3 * j ^ 2 - j) * q ^ 24) - 6 * j ^ 2 * q ^ 25) + (3 * j ^ 2 - j) * q ^ 26 + j * q ^ 27, ((2 * q ^ 24 + (8 * j ^ 2 + j) * q ^ 25) - 12 * j ^ 2 * q ^ 26) + (8 * j ^ 2 + j) * q ^ 27 + 2 * q ^ 28, -360 * j ^ 2 * q ^ 21 + 360 * j ^ 2 * q ^ 22, (-(j ^ 2) + 2j) * q ^ 23 + (8 * j ^ 2 - 4j) * q ^ 24 + (-17 * j ^ 2 + 2j) * q ^ 25 + (48 * j ^ 2 + 8j) * q ^ 26 + (-76 * j ^ 2 - 16j) * q ^ 27 + (48 * j ^ 2 + 8j) * q ^ 28 + (-17 * j ^ 2 + 2j) * q ^ 29 + (8 * j ^ 2 - 4j) * q ^ 30 + (-(j ^ 2) + 2j) * q ^ 31, -6 * j ^ 2 * q ^ 21 + (36 * j ^ 2 - 6j) * q ^ 22 + (-36 * j ^ 2 + 6j) * q ^ 23 + 6 * j ^ 2 * q ^ 24, (114 * j ^ 2 * q ^ 21 - 246 * j ^ 2 * q ^ 22) + 114 * j ^ 2 * q ^ 23, Unknown(), ((-61 * j ^ 2 * q ^ 21 + 176 * j ^ 2 * q ^ 22) - 176 * j ^ 2 * q ^ 23) + 61 * j ^ 2 * q ^ 24, (-5 * j ^ 2 - 9j) * q ^ 27 + (21 * j ^ 2 + 9j) * q ^ 28 + (-21 * j ^ 2 - 9j) * q ^ 29 + (5 * j ^ 2 + 9j) * q ^ 30, Unknown(), Unknown(), (((5 * q ^ 63 - 21 * q ^ 64) + 32 * q ^ 65) - 21 * q ^ 66) + 5 * q ^ 67, Unknown(), -(q ^ 18), (((15 * j ^ 2 * q ^ 21 - 57 * j ^ 2 * q ^ 22) + 84 * j ^ 2 * q ^ 23) - 57 * j ^ 2 * q ^ 24) + 15 * j ^ 2 * q ^ 25, Unknown(), 720 * j * q ^ 42, Unknown(), (184 * j * q ^ 42 - 352 * j * q ^ 43) + 184 * j * q ^ 44, ((-26 * j * q ^ 42 + 88 * j * q ^ 43) - 88 * j * q ^ 44) + 26 * j * q ^ 45, ((-96 * j * q ^ 42 + 264 * j * q ^ 43) - 264 * j * q ^ 44) + 96 * j * q ^ 45, (-11 * j * q ^ 42 + (-4 * j ^ 2 + 29j) * q ^ 43 + (4 * j ^ 2 - 40j) * q ^ 44 + (-4 * j ^ 2 + 29j) * q ^ 45) - 11 * j * q ^ 46, (8 * j * q ^ 42 + (3 * j ^ 2 - 32j) * q ^ 43 + (-5 * j ^ 2 + 60j) * q ^ 44 + (5 * j ^ 2 - 60j) * q ^ 45 + (-3 * j ^ 2 + 32j) * q ^ 46) - 8 * j * q ^ 47, Unknown(), 6 * j * q ^ 42 + (18 * j ^ 2 - 108j) * q ^ 44 + 240 * j * q ^ 45 + (18 * j ^ 2 - 108j) * q ^ 46 + 6 * j * q ^ 48, ((-4 * j * q ^ 42 + 2 * j * q ^ 43 + (-6 * j ^ 2 + 60j) * q ^ 44 + (12 * j ^ 2 - 168j) * q ^ 45 + (-12 * j ^ 2 + 168j) * q ^ 46 + (6 * j ^ 2 - 60j) * q ^ 47) - 2 * j * q ^ 48) + 4 * j * q ^ 49, ((-4 * j ^ 2 + 9j) * q ^ 44 - 43 * j * q ^ 45) + 43 * j * q ^ 46 + (4 * j ^ 2 - 9j) * q ^ 47, ((q ^ 44 + (j ^ 2 + 4j) * q ^ 45) - 6 * j * q ^ 46) + (j ^ 2 + 4j) * q ^ 47 + q ^ 48, -360 * j * q ^ 42 + 360 * j * q ^ 43, (114 * j * q ^ 42 - 246 * j * q ^ 43) + 114 * j * q ^ 44, ((-61 * j * q ^ 42 + 176 * j * q ^ 43) - 176 * j * q ^ 44) + 61 * j * q ^ 45, (9 * j ^ 2 + 4j) * q ^ 48 + (-9 * j ^ 2 + 12j) * q ^ 49 + (9 * j ^ 2 - 12j) * q ^ 50 + (-9 * j ^ 2 - 4j) * q ^ 51, (-15 * j * q ^ 42 + (-4 * j ^ 2 + 50j) * q ^ 43 + (8 * j ^ 2 - 70j) * q ^ 44 + (-4 * j ^ 2 + 50j) * q ^ 45) - 15 * j * q ^ 46, (((5 * j ^ 2 * q ^ 84 - 21 * j ^ 2 * q ^ 85) + 32 * j ^ 2 * q ^ 86) - 21 * j ^ 2 * q ^ 87) + 5 * j ^ 2 * q ^ 88, Unknown(), 720 * q ^ 63, (((((((30 * q ^ 18 - 20 * q ^ 19) + 45 * q ^ 20) - 124 * q ^ 21) + 77 * q ^ 22 + 77 * q ^ 24) - 124 * q ^ 25) + 45 * q ^ 26) - 20 * q ^ 27) + 30 * q ^ 28, Unknown(), ((-26 * q ^ 63 + 88 * q ^ 64) - 88 * q ^ 65) + 26 * q ^ 66, Unknown(), Unknown(), 6 * q ^ 63 + (108 * j ^ 2 + 126j) * q ^ 65 + 240 * q ^ 66 + (108 * j ^ 2 + 126j) * q ^ 67 + 6 * q ^ 69, Unknown(), ((-9 * j ^ 2 - 13j) * q ^ 65 - 43 * q ^ 66) + 43 * q ^ 67 + (9 * j ^ 2 + 13j) * q ^ 68, ((j ^ 2 * q ^ 65 + (-4 * j ^ 2 - 3j) * q ^ 66) - 6 * q ^ 67) + (-4 * j ^ 2 - 3j) * q ^ 68 + j ^ 2 * q ^ 69, (((-50 * q ^ 18 - 81 * q ^ 20) + 165 * q ^ 21) - 165 * q ^ 24) + 81 * q ^ 25 + 50 * q ^ 27, (114 * q ^ 63 - 246 * q ^ 64) + 114 * q ^ 65, Unknown(), (-15 * q ^ 63 + (-50 * j ^ 2 - 54j) * q ^ 64 + (70 * j ^ 2 + 78j) * q ^ 65 + (-50 * j ^ 2 - 54j) * q ^ 66) - 15 * q ^ 67, 720 * j ^ 2 * q ^ 84, Unknown(), (184 * j ^ 2 * q ^ 84 - 352 * j ^ 2 * q ^ 85) + 184 * j ^ 2 * q ^ 86, ((((-6 * j ^ 2 * q ^ 21 + 25 * j ^ 2 * q ^ 22) - 44 * j ^ 2 * q ^ 23) + 44 * j ^ 2 * q ^ 24) - 25 * j ^ 2 * q ^ 25) + 6 * j ^ 2 * q ^ 26, -360 * j ^ 2 * q ^ 84 + 360 * j ^ 2 * q ^ 85, (114 * j ^ 2 * q ^ 84 - 246 * j ^ 2 * q ^ 85) + 114 * j ^ 2 * q ^ 86, Unknown(), ((-26 * j ^ 2 * q ^ 84 + 88 * j ^ 2 * q ^ 85) - 88 * j ^ 2 * q ^ 86) + 26 * j ^ 2 * q ^ 87, 720 * j * q ^ 105, Unknown(), (184 * j * q ^ 105 - 352 * j * q ^ 106) + 184 * j * q ^ 107, -360 * j * q ^ 105 + 360 * j * q ^ 106, (114 * j * q ^ 105 - 246 * j * q ^ 106) + 114 * j * q ^ 107, Unknown(), ((-26 * j * q ^ 105 + 88 * j * q ^ 106) - 88 * j * q ^ 107) + 26 * j * q ^ 108]
            end
        f140 = function (q, j)
                local v
                v = GetRoot(q, 3) * j
                return [729, -405 + 324q, (162 - 243q) + 81 * q ^ 2, (225 - 360q) + 144 * q ^ 2, ((-90 + 207q) - 153 * q ^ 2) + 36 * q ^ 3, ((-51 + 111q) - 69 * q ^ 2) + 12 * q ^ 3, (-27 + 54q) - 27 * q ^ 2, ((-126 + 297q) - 243 * q ^ 2) + 63 * q ^ 3, (-27q + 54 * q ^ 2) - 27 * q ^ 3, ((15q - 42 * q ^ 2) + 39 * q ^ 3) - 12 * q ^ 4, (((36 - 108q) + 117 * q ^ 2) - 54 * q ^ 3) + 9 * q ^ 4, (((13 - 38q) + 34 * q ^ 2) - 11 * q ^ 3) + q ^ 4, (3 - 9q) + 6 * q ^ 2, (((-15 + 54q) - 75 * q ^ 2) + 45 * q ^ 3) - 9 * q ^ 4, (((29 - 83q) + 88 * q ^ 2) - 38 * q ^ 3) + 5 * q ^ 4, ((15 - 42q) + 39 * q ^ 2) - 12 * q ^ 3, (((51 - 153q) + 177 * q ^ 2) - 90 * q ^ 3) + 15 * q ^ 4, (((-8 + 26q) - 35 * q ^ 2) + 22 * q ^ 3) - 6 * q ^ 4, ((((8 - 37q) + 66 * q ^ 2) - 58 * q ^ 3) + 25 * q ^ 4) - 4 * q ^ 5, q - q ^ 2, Unknown(), ((((7 - 27q) + 42 * q ^ 2) - 31 * q ^ 3) + 10 * q ^ 4) - q ^ 5, Unknown(), ((((-12 + 41q) - 57 * q ^ 2) + 39 * q ^ 3) - 12 * q ^ 4) + q ^ 5, (((-3 + 10q) - 12 * q ^ 2) + 6 * q ^ 3) - q ^ 4, ((-2 + 6q) - 7 * q ^ 2) + 3 * q ^ 3, ((27 - 162 * q ^ 2) + 216 * q ^ 3) - 81 * q ^ 4, v ^ 8, Unknown(), (((3 + 9q) - 45 * q ^ 2) + 45 * q ^ 3) - 12 * q ^ 4, v ^ 40, (((((54 - 108q) - 27 * q ^ 2) + 162 * q ^ 3) - 54 * q ^ 4) - 54 * q ^ 5) + 27 * q ^ 6, Unknown(), Unknown(), (((-15 + 12q + 90 * q ^ 2) - 192 * q ^ 3) + 141 * q ^ 4) - 36 * q ^ 5, ((-q + 7 * q ^ 2) - 9 * q ^ 3) + 3 * q ^ 4, (((((-30 + 84q) - 33 * q ^ 2) - 102 * q ^ 3) + 102 * q ^ 4 + 6 * q ^ 5) - 39 * q ^ 6) + 12 * q ^ 7, ((((3q - 9 * q ^ 2) + 16 * q ^ 3) - 16 * q ^ 4) + 7 * q ^ 5) - q ^ 6, ((((-2 - 4q) + 29 * q ^ 2) - 45 * q ^ 3) + 27 * q ^ 4) - 5 * q ^ 5, (((-3 + 30 * q ^ 2) - 51 * q ^ 3) + 27 * q ^ 4) - 3 * q ^ 5, Unknown(), ((((-21 + 78q) - 84 * q ^ 2) + 39 * q ^ 4 + 3 * q ^ 5) - 24 * q ^ 6) + 9 * q ^ 7, Unknown(), Unknown(), (((((((7 - 32q) + 46 * q ^ 2) - 9 * q ^ 3) - 36 * q ^ 4) + 31 * q ^ 5) - 4 * q ^ 6) - 4 * q ^ 7) + q ^ 8, ((-4 * q ^ 2 + 9 * q ^ 3) - 6 * q ^ 4) + q ^ 5, (((13 * v ^ 280 - 38 * v ^ 283) + 34 * v ^ 286) - 11 * v ^ 289) + v ^ 292, (((13 * v ^ 56 - 38 * v ^ 59) + 34 * v ^ 62) - 11 * v ^ 65) + v ^ 68, (((((2 - q) - 17 * q ^ 2) + 41 * q ^ 3) - 38 * q ^ 4) + 14 * q ^ 5) - q ^ 6, Unknown(), Unknown(), ((((((12 - 53q) + 81 * q ^ 2) - 36 * q ^ 3) - 22 * q ^ 4) + 14 * q ^ 5 + 15 * q ^ 6) - 15 * q ^ 7) + 4 * q ^ 8, Unknown(), Unknown(), Unknown(), (((-8 * v ^ 56 + 26 * v ^ 59) - 35 * v ^ 62) + 22 * v ^ 65) - 6 * v ^ 68, Unknown(), Unknown(), ((((((((7 - 24q) + 11 * q ^ 2 + 48 * q ^ 3) - 82 * q ^ 4) + 62 * q ^ 5) - 37 * q ^ 6) + 22 * q ^ 7) - 6 * q ^ 8) - 2 * q ^ 9) + q ^ 10, v ^ 16, Unknown(), Unknown(), v ^ 32, (((-(q ^ 2) - 4 * q ^ 3) + 13 * q ^ 4) - 10 * q ^ 5) + 2 * q ^ 6, Unknown(), Unknown(), Unknown(), (((-8 * v ^ 112 + 26 * v ^ 115) - 35 * v ^ 118) + 22 * v ^ 121) - 6 * v ^ 124, Unknown(), Unknown(), ((((-12 * q ^ 56 + 41 * q ^ 57) - 57 * q ^ 58) + 39 * q ^ 59) - 12 * q ^ 60) + q ^ 61, Unknown(), Unknown(), (((((((3 - 9 * q ^ 2) + 6 * q ^ 3) - 21 * q ^ 4) + 66 * q ^ 5) - 69 * q ^ 6) + 30 * q ^ 7) - 12 * q ^ 8) + 6 * q ^ 9, q ^ 8, (((-15 * v ^ 280 + 54 * v ^ 283) - 75 * v ^ 286) + 45 * v ^ 289) - 9 * v ^ 292, ((((-12 * v ^ 280 + 41 * v ^ 283) - 57 * v ^ 286) + 39 * v ^ 289) - 12 * v ^ 292) + v ^ 295, Unknown(), (((3 * q ^ 4 - 3 * q ^ 5) - 9 * q ^ 6) + 15 * q ^ 7) - 6 * q ^ 8, (((-15 * v ^ 56 + 54 * v ^ 59) - 75 * v ^ 62) + 45 * v ^ 65) - 9 * v ^ 68, Unknown(), (((29 * v ^ 112 - 83 * v ^ 115) + 88 * v ^ 118) - 38 * v ^ 121) + 5 * v ^ 124, 0, Unknown(), Unknown(), (((13 * v ^ 112 - 38 * v ^ 115) + 34 * v ^ 118) - 11 * v ^ 121) + v ^ 124, Unknown(), 729 * v ^ 56, (3 * v ^ 56 - 9 * v ^ 59) + 6 * v ^ 62, (225 * v ^ 56 - 360 * v ^ 59) + 144 * v ^ 62, Unknown(), ((-51 * v ^ 56 + 111 * v ^ 59) - 69 * v ^ 62) + 12 * v ^ 65, ((-126 * v ^ 56 + 297 * v ^ 59) - 243 * v ^ 62) + 63 * v ^ 65, (((36 * v ^ 56 - 108 * v ^ 59) + 117 * v ^ 62) - 54 * v ^ 65) + 9 * v ^ 68, Unknown(), ((15 * v ^ 56 - 42 * v ^ 59) + 39 * v ^ 62) - 12 * v ^ 65, (((51 * v ^ 56 - 153 * v ^ 59) + 177 * v ^ 62) - 90 * v ^ 65) + 15 * v ^ 68, ((((8 * v ^ 56 - 37 * v ^ 59) + 66 * v ^ 62) - 58 * v ^ 65) + 25 * v ^ 68) - 4 * v ^ 71, ((27 * v ^ 56 - 162 * v ^ 62) + 216 * v ^ 65) - 81 * v ^ 68, (((((54 * v ^ 56 - 108 * v ^ 59) - 27 * v ^ 62) + 162 * v ^ 65) - 54 * v ^ 68) - 54 * v ^ 71) + 27 * v ^ 74, (((-3 * v ^ 56 + 30 * v ^ 62) - 51 * v ^ 65) + 27 * v ^ 68) - 3 * v ^ 71, (((-15 * v ^ 56 + 12 * v ^ 59 + 90 * v ^ 62) - 192 * v ^ 65) + 141 * v ^ 68) - 36 * v ^ 71, (((((-30 * v ^ 56 + 84 * v ^ 59) - 33 * v ^ 62) - 102 * v ^ 65) + 102 * v ^ 68 + 6 * v ^ 71) - 39 * v ^ 74) + 12 * v ^ 77, Unknown(), (((((2 * v ^ 56 - v ^ 59) - 17 * v ^ 62) + 41 * v ^ 65) - 38 * v ^ 68) + 14 * v ^ 71) - v ^ 74, ((-4 * v ^ 62 + 9 * v ^ 65) - 6 * v ^ 68) + v ^ 71, (((-(v ^ 62) - 4 * v ^ 65) + 13 * v ^ 68) - 10 * v ^ 71) + 2 * v ^ 74, -405 * v ^ 56 + 324 * v ^ 59, (((((((3 * v ^ 56 - 9 * v ^ 62) + 6 * v ^ 65) - 21 * v ^ 68) + 66 * v ^ 71) - 69 * v ^ 74) + 30 * v ^ 77) - 12 * v ^ 80) + 6 * v ^ 83, (-27 * v ^ 56 + 54 * v ^ 59) - 27 * v ^ 62, (162 * v ^ 56 - 243 * v ^ 59) + 81 * v ^ 62, Unknown(), ((-90 * v ^ 56 + 207 * v ^ 59) - 153 * v ^ 62) + 36 * v ^ 65, (((3 * v ^ 68 - 3 * v ^ 71) - 9 * v ^ 74) + 15 * v ^ 77) - 6 * v ^ 80, Unknown(), Unknown(), (((13 * q ^ 56 - 38 * q ^ 57) + 34 * q ^ 58) - 11 * q ^ 59) + q ^ 60, Unknown(), q ^ 16, (((29 * v ^ 56 - 83 * v ^ 59) + 88 * v ^ 62) - 38 * v ^ 65) + 5 * v ^ 68, Unknown(), 729 * v ^ 112, Unknown(), (225 * v ^ 112 - 360 * v ^ 115) + 144 * v ^ 118, ((-51 * v ^ 112 + 111 * v ^ 115) - 69 * v ^ 118) + 12 * v ^ 121, ((-126 * v ^ 112 + 297 * v ^ 115) - 243 * v ^ 118) + 63 * v ^ 121, ((15 * v ^ 115 - 42 * v ^ 118) + 39 * v ^ 121) - 12 * v ^ 124, ((((8 * v ^ 112 - 37 * v ^ 115) + 66 * v ^ 118) - 58 * v ^ 121) + 25 * v ^ 124) - 4 * v ^ 127, Unknown(), ((27 * v ^ 112 - 162 * v ^ 118) + 216 * v ^ 121) - 81 * v ^ 124, (((-15 * v ^ 112 + 12 * v ^ 115 + 90 * v ^ 118) - 192 * v ^ 121) + 141 * v ^ 124) - 36 * v ^ 127, (((-3 * v ^ 112 + 30 * v ^ 118) - 51 * v ^ 121) + 27 * v ^ 124) - 3 * v ^ 127, ((-4 * v ^ 118 + 9 * v ^ 121) - 6 * v ^ 124) + v ^ 127, -405 * v ^ 112 + 324 * v ^ 115, (162 * v ^ 112 - 243 * v ^ 115) + 81 * v ^ 118, ((-90 * v ^ 112 + 207 * v ^ 115) - 153 * v ^ 118) + 36 * v ^ 121, (((3 * v ^ 124 - 3 * v ^ 127) - 9 * v ^ 130) + 15 * v ^ 133) - 6 * v ^ 136, (((-15 * v ^ 112 + 54 * v ^ 115) - 75 * v ^ 118) + 45 * v ^ 121) - 9 * v ^ 124, (((13 * v ^ 224 - 38 * v ^ 227) + 34 * v ^ 230) - 11 * v ^ 233) + v ^ 236, Unknown(), 729 * q ^ 56, (((((11 * q ^ 12 - 4 * q ^ 13) - 4 * q ^ 15) + 2 * q ^ 16 + 90 * q ^ 20) - 152 * q ^ 21) + 70 * q ^ 22 + 28 * q ^ 24) - 32 * q ^ 25, Unknown(), ((-51 * q ^ 56 + 111 * q ^ 57) - 69 * q ^ 58) + 12 * q ^ 59, Unknown(), Unknown(), ((27 * q ^ 56 - 162 * q ^ 58) + 216 * q ^ 59) - 81 * q ^ 60, Unknown(), (((-3 * q ^ 56 + 30 * q ^ 58) - 51 * q ^ 59) + 27 * q ^ 60) - 3 * q ^ 61, ((-4 * q ^ 58 + 9 * q ^ 59) - 6 * q ^ 60) + q ^ 61, (((-15 * q ^ 12 + 6 * q ^ 15) - 162 * q ^ 20) + 150 * q ^ 21) - 60 * q ^ 24, (162 * q ^ 56 - 243 * q ^ 57) + 81 * q ^ 58, Unknown(), (((-15 * q ^ 56 + 54 * q ^ 57) - 75 * q ^ 58) + 45 * q ^ 59) - 9 * q ^ 60, 729 * v ^ 224, Unknown(), (225 * v ^ 224 - 360 * v ^ 227) + 144 * v ^ 230, ((((-12 * v ^ 56 + 41 * v ^ 59) - 57 * v ^ 62) + 39 * v ^ 65) - 12 * v ^ 68) + v ^ 71, -405 * v ^ 224 + 324 * v ^ 227, (162 * v ^ 224 - 243 * v ^ 227) + 81 * v ^ 230, Unknown(), ((-51 * v ^ 224 + 111 * v ^ 227) - 69 * v ^ 230) + 12 * v ^ 233, 729 * v ^ 280, Unknown(), (225 * v ^ 280 - 360 * v ^ 283) + 144 * v ^ 286, -405 * v ^ 280 + 324 * v ^ 283, (162 * v ^ 280 - 243 * v ^ 283) + 81 * v ^ 286, Unknown(), ((-51 * v ^ 280 + 111 * v ^ 283) - 69 * v ^ 286) + 12 * v ^ 289]
            end
        f146 = function (q, j)
                return [756, -360 + 396q, (108 - 252q) + 144 * q ^ 2, (168 - 384q) + 204 * q ^ 2, ((-48 + 180q) - 204 * q ^ 2) + 72 * q ^ 3, ((-21 + 87q) - 105 * q ^ 2) + 39 * q ^ 3, -9 + 36q + (45 * j ^ 2 + 54j) * q ^ 2 + 18 * q ^ 3, ((-78 + 270q) - 306 * q ^ 2) + 102 * q ^ 3, (18 + (54 * j ^ 2 + 45j) * q + 36 * q ^ 2) - 9 * q ^ 3, (-10 + (-34 * j ^ 2 - 31j) * q + (44 * j ^ 2 + 38j) * q ^ 2 + 23 * q ^ 3) - 6 * q ^ 4, (((12 - 72q) + 132 * q ^ 2) - 96 * q ^ 3) + 24 * q ^ 4, (((2 - 19q) + 41 * q ^ 2) - 31 * q ^ 3) + 8 * q ^ 4, -3q + (-7 * j ^ 2 - 10j) * q ^ 2 + (5 * j ^ 2 + 8j) * q ^ 3 + q ^ 4, (-11 + (-52 * j ^ 2 - 46j) * q + (80 * j ^ 2 + 74j) * q ^ 2 + 54 * q ^ 3) - 15 * q ^ 4, (((9 - 51q) + 99 * q ^ 2) - 75 * q ^ 3) + 18 * q ^ 4, (3 - 22q) + (-43 * j ^ 2 - 46j) * q ^ 2 + (32 * j ^ 2 + 38j) * q ^ 3 + 8 * q ^ 4, (((22 - 108q) + 196 * q ^ 2) - 144 * q ^ 3) + 34 * q ^ 4, ((((-1 + 9q) - 29 * q ^ 2) + 39 * q ^ 3) - 20 * q ^ 4) + 3 * q ^ 5, (5 + (30 * j ^ 2 + 28j) * q + (-66 * j ^ 2 - 60j) * q ^ 2 + (68 * j ^ 2 + 64j) * q ^ 3 + 35 * q ^ 4) - 8 * q ^ 5, -(q ^ 2) + (-(j ^ 2) - 2j) * q ^ 3 + j * q ^ 4, Unknown(), (2 + (15 * j ^ 2 + 14j) * q + (-38 * j ^ 2 - 34j) * q ^ 2 + (43 * j ^ 2 + 40j) * q ^ 3 + 23 * q ^ 4) - 5 * q ^ 5, Unknown(), ((((-2 + 17q) - 50 * q ^ 2) + 62 * q ^ 3) - 32 * q ^ 4) + 5 * q ^ 5, (((2q - 10 * q ^ 2) + 14 * q ^ 3) - 7 * q ^ 4) + q ^ 5, q + (5 * j ^ 2 + 6j) * q ^ 2 + (-7 * j ^ 2 - 10j) * q ^ 3 + (3 * j ^ 2 + 5j) * q ^ 4, (9 - 108 * q ^ 2) + 216 * q ^ 3 + (162 * j ^ 2 + 135j) * q ^ 4 + 18 * q ^ 6, 0, Unknown(), (3q - 21 * q ^ 2) + 46 * q ^ 3 + (37 * j ^ 2 + 34j) * q ^ 4 + (-8 * j ^ 2 - 5j) * q ^ 5 + q ^ 6, 0, (((36 - 72q) + (45 * j ^ 2 + 54j) * q ^ 2 + 162 * q ^ 3) - 36 * q ^ 4) + (90 * j ^ 2 + 108j) * q ^ 5 + 45 * q ^ 6, Unknown(), Unknown(), ((((-3 + 6q + 48 * q ^ 2) - 164 * q ^ 3) + (-190 * j ^ 2 - 181j) * q ^ 4 + (84 * j ^ 2 + 66j) * q ^ 5) - 10 * q ^ 6) + 8 * q ^ 7, (q ^ 2 + (5 * j ^ 2 + 7j) * q ^ 3 + (-7 * j ^ 2 - 9j) * q ^ 4 + (4 * j ^ 2 + 3j) * q ^ 5) - j ^ 2 * q ^ 6, -16 + 52q + (17 * j ^ 2 + 14j) * q ^ 2 + (100 * j ^ 2 + 106j) * q ^ 3 + 100 * q ^ 4 + (-26 * j ^ 2 - 32j) * q ^ 5 + (67 * j ^ 2 + 79j) * q ^ 6 + 22 * q ^ 7, q + (9 * j ^ 2 + 7j) * q ^ 2 + (-19 * j ^ 2 - 15j) * q ^ 3 + (19 * j ^ 2 + 16j) * q ^ 4 + 10 * q ^ 5 + (2 * j ^ 2 + 3j) * q ^ 6, ((-q + 11 * q ^ 2) - 34 * q ^ 3) + (-43 * j ^ 2 - 42j) * q ^ 4 + (22 * j ^ 2 + 19j) * q ^ 5 + (-3 * j ^ 2 - j) * q ^ 6, 10 * q ^ 2 + (33 * j ^ 2 + 36j) * q ^ 3 + (-47 * j ^ 2 - 44j) * q ^ 4 + (25 * j ^ 2 + 19j) * q ^ 5 + q ^ 7, Unknown(), -11 + 36q + (28 * j ^ 2 + 16j) * q ^ 2 + (13 * j ^ 2 + 31j) * q ^ 3 + (5 * j ^ 2 - 7j) * q ^ 4 + 64 * q ^ 5 + (60 * j ^ 2 + 66j) * q ^ 6 + 17 * q ^ 7, Unknown(), Unknown(), ((2 - 6q) - 3 * j ^ 2 * q ^ 2) + (-11 * j ^ 2 - 23j) * q ^ 3 + (13 * j ^ 2 + 28j) * q ^ 4 + (11 * j ^ 2 + j) * q ^ 5 + (-29 * j ^ 2 - 27j) * q ^ 6 + (20 * j ^ 2 + 22j) * q ^ 7 + 5 * q ^ 8, (-3 * j ^ 2 - 4j) * q ^ 3 + (6 * j ^ 2 + 9j) * q ^ 4 + 6 * q ^ 5 + (3 * j ^ 2 + j) * q ^ 6, (((2 * j * q ^ 110 - 19 * j * q ^ 111) + 41 * j * q ^ 112) - 31 * j * q ^ 113) + 8 * j * q ^ 114, (((2 * j ^ 2 * q ^ 22 - 19 * j ^ 2 * q ^ 23) + 41 * j ^ 2 * q ^ 24) - 31 * j ^ 2 * q ^ 25) + 8 * j ^ 2 * q ^ 26, (-4 * q ^ 2 + (-21 * j ^ 2 - 22j) * q ^ 3 + (41 * j ^ 2 + 42j) * q ^ 4 + (-37 * j ^ 2 - 33j) * q ^ 5 + (12 * j ^ 2 + 8j) * q ^ 6) - q ^ 7, Unknown(), Unknown(), (5 - 22q) + (-30 * j ^ 2 - 26j) * q ^ 2 + (7 * j ^ 2 - 7j) * q ^ 3 + (j ^ 2 + 17j) * q ^ 4 + (38 * j ^ 2 + 30j) * q ^ 5 + (-62 * j ^ 2 - 64j) * q ^ 6 + (37 * j ^ 2 + 41j) * q ^ 7 + 8 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-(j ^ 2) * q ^ 22 + 9 * j ^ 2 * q ^ 23) - 29 * j ^ 2 * q ^ 24) + 39 * j ^ 2 * q ^ 25) - 20 * j ^ 2 * q ^ 26) + 3 * j ^ 2 * q ^ 27, Unknown(), Unknown(), (2 - 4q) + (8 * j ^ 2 + 9j) * q ^ 2 + (-34 * j ^ 2 - 32j) * q ^ 3 + (48 * j ^ 2 + 42j) * q ^ 4 + (-54 * j ^ 2 - 52j) * q ^ 5 + (62 * j ^ 2 + 67j) * q ^ 6 + (-40 * j ^ 2 - 46j) * q ^ 7 + q ^ 8 + (14 * j ^ 2 + 16j) * q ^ 9 + 5 * q ^ 10, 0, Unknown(), Unknown(), 0, ((5 * q ^ 4 + (14 * j ^ 2 + 12j) * q ^ 5 + (-12 * j ^ 2 - 9j) * q ^ 6) - 2 * q ^ 7) + j ^ 2 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-j * q ^ 44 + 9 * j * q ^ 45) - 29 * j * q ^ 46) + 39 * j * q ^ 47) - 20 * j * q ^ 48) + 3 * j * q ^ 49, Unknown(), Unknown(), ((((-2 * q ^ 66 + 17 * q ^ 67) - 50 * q ^ 68) + 62 * q ^ 69) - 32 * q ^ 70) + 5 * q ^ 71, Unknown(), Unknown(), ((-3 * q ^ 2 + 2 * q ^ 3) - 9 * q ^ 4) + (-48 * j ^ 2 - 42j) * q ^ 5 + (86 * j ^ 2 + 74j) * q ^ 6 + (-68 * j ^ 2 - 62j) * q ^ 7 + (18 * j ^ 2 + 21j) * q ^ 8 + (-2 * j ^ 2 - 8j) * q ^ 9 + (5 * j ^ 2 + 8j) * q ^ 10 + q ^ 12, 0, (-11 * j * q ^ 110 + (6 * j ^ 2 + 52j) * q ^ 111 + (-6 * j ^ 2 - 80j) * q ^ 112 + 54 * j * q ^ 113) - 15 * j * q ^ 114, ((((-2 * j * q ^ 110 + 17 * j * q ^ 111) - 50 * j * q ^ 112) + 62 * j * q ^ 113) - 32 * j * q ^ 114) + 5 * j * q ^ 115, Unknown(), ((2 * j ^ 2 + 8j) * q ^ 6 + 9 * q ^ 7 + (15 * j ^ 2 + 6j) * q ^ 8 + (-11 * j ^ 2 + j) * q ^ 9) - 3 * q ^ 10, (-11 * j ^ 2 * q ^ 22 + (46 * j ^ 2 - 6j) * q ^ 23 + (-74 * j ^ 2 + 6j) * q ^ 24 + 54 * j ^ 2 * q ^ 25) - 15 * j ^ 2 * q ^ 26, Unknown(), (((9 * j * q ^ 44 - 51 * j * q ^ 45) + 99 * j * q ^ 46) - 75 * j * q ^ 47) + 18 * j * q ^ 48, j ^ 2 * q ^ 46 - j ^ 2 * q ^ 47, Unknown(), Unknown(), (((2 * j * q ^ 44 - 19 * j * q ^ 45) + 41 * j * q ^ 46) - 31 * j * q ^ 47) + 8 * j * q ^ 48, Unknown(), 756 * j ^ 2 * q ^ 22, -3 * j ^ 2 * q ^ 23 + (10 * j ^ 2 + 3j) * q ^ 24 + (-8 * j ^ 2 - 3j) * q ^ 25 + j ^ 2 * q ^ 26, (168 * j ^ 2 * q ^ 22 - 384 * j ^ 2 * q ^ 23) + 204 * j ^ 2 * q ^ 24, Unknown(), ((-21 * j ^ 2 * q ^ 22 + 87 * j ^ 2 * q ^ 23) - 105 * j ^ 2 * q ^ 24) + 39 * j ^ 2 * q ^ 25, ((-78 * j ^ 2 * q ^ 22 + 270 * j ^ 2 * q ^ 23) - 306 * j ^ 2 * q ^ 24) + 102 * j ^ 2 * q ^ 25, (((12 * j ^ 2 * q ^ 22 - 72 * j ^ 2 * q ^ 23) + 132 * j ^ 2 * q ^ 24) - 96 * j ^ 2 * q ^ 25) + 24 * j ^ 2 * q ^ 26, Unknown(), (3 * j ^ 2 * q ^ 22 - 22 * j ^ 2 * q ^ 23) + (46 * j ^ 2 + 3j) * q ^ 24 + (-38 * j ^ 2 - 6j) * q ^ 25 + 8 * j ^ 2 * q ^ 26, (((22 * j ^ 2 * q ^ 22 - 108 * j ^ 2 * q ^ 23) + 196 * j ^ 2 * q ^ 24) - 144 * j ^ 2 * q ^ 25) + 34 * j ^ 2 * q ^ 26, (5 * j ^ 2 * q ^ 22 + (-28 * j ^ 2 + 2j) * q ^ 23 + (60 * j ^ 2 - 6j) * q ^ 24 + (-64 * j ^ 2 + 4j) * q ^ 25 + 35 * j ^ 2 * q ^ 26) - 8 * j ^ 2 * q ^ 27, (9 * j ^ 2 * q ^ 22 - 108 * j ^ 2 * q ^ 24) + 216 * j ^ 2 * q ^ 25 + (-135 * j ^ 2 + 27j) * q ^ 26 + 18 * j ^ 2 * q ^ 28, (((36 * j ^ 2 * q ^ 22 - 72 * j ^ 2 * q ^ 23) + (-54 * j ^ 2 - 9j) * q ^ 24 + 162 * j ^ 2 * q ^ 25) - 36 * j ^ 2 * q ^ 26) + (-108 * j ^ 2 - 18j) * q ^ 27 + 45 * j ^ 2 * q ^ 28, 10 * j ^ 2 * q ^ 24 + (-36 * j ^ 2 - 3j) * q ^ 25 + (44 * j ^ 2 - 3j) * q ^ 26 + (-19 * j ^ 2 + 6j) * q ^ 27 + j ^ 2 * q ^ 29, ((((-3 * j ^ 2 * q ^ 22 + 6 * j ^ 2 * q ^ 23 + 48 * j ^ 2 * q ^ 24) - 164 * j ^ 2 * q ^ 25) + (181 * j ^ 2 - 9j) * q ^ 26 + (-66 * j ^ 2 + 18j) * q ^ 27) - 10 * j ^ 2 * q ^ 28) + 8 * j ^ 2 * q ^ 29, -16 * j ^ 2 * q ^ 22 + 52 * j ^ 2 * q ^ 23 + (-14 * j ^ 2 + 3j) * q ^ 24 + (-106 * j ^ 2 - 6j) * q ^ 25 + 100 * j ^ 2 * q ^ 26 + (32 * j ^ 2 + 6j) * q ^ 27 + (-79 * j ^ 2 - 12j) * q ^ 28 + 22 * j ^ 2 * q ^ 29, Unknown(), (-4 * j ^ 2 * q ^ 24 + (22 * j ^ 2 + j) * q ^ 25 + (-42 * j ^ 2 - j) * q ^ 26 + (33 * j ^ 2 - 4j) * q ^ 27 + (-8 * j ^ 2 + 4j) * q ^ 28) - j ^ 2 * q ^ 29, (4 * j ^ 2 + j) * q ^ 25 + (-9 * j ^ 2 - 3j) * q ^ 26 + 6 * j ^ 2 * q ^ 27 + (-(j ^ 2) + 2j) * q ^ 28, ((5 * j ^ 2 * q ^ 26 + (-12 * j ^ 2 + 2j) * q ^ 27 + (9 * j ^ 2 - 3j) * q ^ 28) - 2 * j ^ 2 * q ^ 29) + j * q ^ 30, -360 * j ^ 2 * q ^ 22 + 396 * j ^ 2 * q ^ 23, ((-3 * j ^ 2 * q ^ 24 + 2 * j ^ 2 * q ^ 25) - 9 * j ^ 2 * q ^ 26) + (42 * j ^ 2 - 6j) * q ^ 27 + (-74 * j ^ 2 + 12j) * q ^ 28 + (62 * j ^ 2 - 6j) * q ^ 29 + (-21 * j ^ 2 - 3j) * q ^ 30 + (8 * j ^ 2 + 6j) * q ^ 31 + (-8 * j ^ 2 - 3j) * q ^ 32 + j ^ 2 * q ^ 34, -9 * j ^ 2 * q ^ 22 + 36 * j ^ 2 * q ^ 23 + (-54 * j ^ 2 - 9j) * q ^ 24 + 18 * j ^ 2 * q ^ 25, (108 * j ^ 2 * q ^ 22 - 252 * j ^ 2 * q ^ 23) + 144 * j ^ 2 * q ^ 24, Unknown(), ((-48 * j ^ 2 * q ^ 22 + 180 * j ^ 2 * q ^ 23) - 204 * j ^ 2 * q ^ 24) + 72 * j ^ 2 * q ^ 25, ((-8 * j ^ 2 - 6j) * q ^ 28 + 9 * j ^ 2 * q ^ 29 + (-6 * j ^ 2 + 9j) * q ^ 30 + (-(j ^ 2) - 12j) * q ^ 31) - 3 * j ^ 2 * q ^ 32, Unknown(), Unknown(), (((2 * q ^ 66 - 19 * q ^ 67) + 41 * q ^ 68) - 31 * q ^ 69) + 8 * q ^ 70, Unknown(), 0, (((9 * j ^ 2 * q ^ 22 - 51 * j ^ 2 * q ^ 23) + 99 * j ^ 2 * q ^ 24) - 75 * j ^ 2 * q ^ 25) + 18 * j ^ 2 * q ^ 26, Unknown(), 756 * j * q ^ 44, Unknown(), (168 * j * q ^ 44 - 384 * j * q ^ 45) + 204 * j * q ^ 46, ((-21 * j * q ^ 44 + 87 * j * q ^ 45) - 105 * j * q ^ 46) + 39 * j * q ^ 47, ((-78 * j * q ^ 44 + 270 * j * q ^ 45) - 306 * j * q ^ 46) + 102 * j * q ^ 47, (-10 * j * q ^ 44 + (3 * j ^ 2 + 34j) * q ^ 45 + (-6 * j ^ 2 - 44j) * q ^ 46 + 23 * j * q ^ 47) - 6 * j * q ^ 48, (5 * j * q ^ 44 + (-2 * j ^ 2 - 30j) * q ^ 45 + (6 * j ^ 2 + 66j) * q ^ 46 + (-4 * j ^ 2 - 68j) * q ^ 47 + 35 * j * q ^ 48) - 8 * j * q ^ 49, Unknown(), (9 * j * q ^ 44 - 108 * j * q ^ 46) + 216 * j * q ^ 47 + (-27 * j ^ 2 - 162j) * q ^ 48 + 18 * j * q ^ 50, ((((-3 * j * q ^ 44 + 6 * j * q ^ 45 + 48 * j * q ^ 46) - 164 * j * q ^ 47) + (9 * j ^ 2 + 190j) * q ^ 48 + (-18 * j ^ 2 - 84j) * q ^ 49) - 10 * j * q ^ 50) + 8 * j * q ^ 51, 10 * j * q ^ 46 + (3 * j ^ 2 - 33j) * q ^ 47 + (3 * j ^ 2 + 47j) * q ^ 48 + (-6 * j ^ 2 - 25j) * q ^ 49 + j * q ^ 51, (-(j ^ 2) + 3j) * q ^ 47 + (3 * j ^ 2 - 6j) * q ^ 48 + 6 * j * q ^ 49 + (-2 * j ^ 2 - 3j) * q ^ 50, -360 * j * q ^ 44 + 396 * j * q ^ 45, (108 * j * q ^ 44 - 252 * j * q ^ 45) + 144 * j * q ^ 46, ((-48 * j * q ^ 44 + 180 * j * q ^ 45) - 204 * j * q ^ 46) + 72 * j * q ^ 47, ((6 * j ^ 2 - 2j) * q ^ 50 + 9 * j * q ^ 51 + (-9 * j ^ 2 - 15j) * q ^ 52 + (12 * j ^ 2 + 11j) * q ^ 53) - 3 * j * q ^ 54, (-11 * j * q ^ 44 + (6 * j ^ 2 + 52j) * q ^ 45 + (-6 * j ^ 2 - 80j) * q ^ 46 + 54 * j * q ^ 47) - 15 * j * q ^ 48, (((2 * j ^ 2 * q ^ 88 - 19 * j ^ 2 * q ^ 89) + 41 * j ^ 2 * q ^ 90) - 31 * j ^ 2 * q ^ 91) + 8 * j ^ 2 * q ^ 92, Unknown(), 756 * q ^ 66, (((((((-24 * q ^ 18 + 16 * q ^ 19 + 45 * q ^ 20) - 84 * q ^ 21) + 42 * q ^ 22 + 49 * q ^ 24) - 128 * q ^ 25) + 90 * q ^ 26 + 16 * q ^ 27) - 24 * q ^ 28) + 10 * q ^ 30) - 20 * q ^ 31, Unknown(), ((-21 * q ^ 66 + 87 * q ^ 67) - 105 * q ^ 68) + 39 * q ^ 69, Unknown(), Unknown(), (9 * q ^ 66 - 108 * q ^ 68) + 216 * q ^ 69 + (162 * j ^ 2 + 135j) * q ^ 70 + 18 * q ^ 72, Unknown(), 10 * q ^ 68 + (33 * j ^ 2 + 36j) * q ^ 69 + (-47 * j ^ 2 - 44j) * q ^ 70 + (25 * j ^ 2 + 19j) * q ^ 71 + q ^ 73, (-3 * j ^ 2 - 4j) * q ^ 69 + (6 * j ^ 2 + 9j) * q ^ 70 + 6 * q ^ 71 + (3 * j ^ 2 + j) * q ^ 72, (((((40 * q ^ 18 - 81 * q ^ 20) + 90 * q ^ 21) - 105 * q ^ 24) + 162 * q ^ 25) - 40 * q ^ 27) - 30 * q ^ 30, (108 * q ^ 66 - 252 * q ^ 67) + 144 * q ^ 68, Unknown(), (-11 * q ^ 66 + (-52 * j ^ 2 - 46j) * q ^ 67 + (80 * j ^ 2 + 74j) * q ^ 68 + 54 * q ^ 69) - 15 * q ^ 70, 756 * j ^ 2 * q ^ 88, Unknown(), (168 * j ^ 2 * q ^ 88 - 384 * j ^ 2 * q ^ 89) + 204 * j ^ 2 * q ^ 90, ((((-2 * j ^ 2 * q ^ 22 + 17 * j ^ 2 * q ^ 23) - 50 * j ^ 2 * q ^ 24) + 62 * j ^ 2 * q ^ 25) - 32 * j ^ 2 * q ^ 26) + 5 * j ^ 2 * q ^ 27, -360 * j ^ 2 * q ^ 88 + 396 * j ^ 2 * q ^ 89, (108 * j ^ 2 * q ^ 88 - 252 * j ^ 2 * q ^ 89) + 144 * j ^ 2 * q ^ 90, Unknown(), ((-21 * j ^ 2 * q ^ 88 + 87 * j ^ 2 * q ^ 89) - 105 * j ^ 2 * q ^ 90) + 39 * j ^ 2 * q ^ 91, 756 * j * q ^ 110, Unknown(), (168 * j * q ^ 110 - 384 * j * q ^ 111) + 204 * j * q ^ 112, -360 * j * q ^ 110 + 396 * j * q ^ 111, (108 * j * q ^ 110 - 252 * j * q ^ 111) + 144 * j * q ^ 112, Unknown(), ((-21 * j * q ^ 110 + 87 * j * q ^ 111) - 105 * j * q ^ 112) + 39 * j * q ^ 113]
            end
        f150 = function (q, j)
                return [840, -400 + 440q, (119 - 281q) + 159 * q ^ 2, (188 - 424q) + 228 * q ^ 2, ((-54 + 199q) - 225 * q ^ 2) + 81 * q ^ 3, ((-24 + 95q) - 117 * q ^ 2) + 42 * q ^ 3, -6 + (-36 * j ^ 2 - 44j) * q + (48 * j ^ 2 + 54j) * q ^ 2 + 24 * q ^ 3, ((-87 + 303q) - 333 * q ^ 2) + 117 * q ^ 3, (27 + (54 * j ^ 2 + 48j) * q + (-44 * j ^ 2 - 36j) * q ^ 2) - 9 * q ^ 3, (-14 + (-39 * j ^ 2 - 37j) * q + (48 * j ^ 2 + 40j) * q ^ 2 + (-28 * j ^ 2 - 24j) * q ^ 3) - 5 * q ^ 4, (((14 - 80q) + 144 * q ^ 2) - 106 * q ^ 3) + 28 * q ^ 4, (((3 - 21q) + 44 * q ^ 2) - 34 * q ^ 3) + 8 * q ^ 4, (j ^ 2 + 3j) * q + (-6 * j ^ 2 - 11j) * q ^ 2 + (6 * j ^ 2 + 8j) * q ^ 3 + 2 * q ^ 4, (-15 + (-58 * j ^ 2 - 54j) * q + (87 * j ^ 2 + 78j) * q ^ 2 + (-62 * j ^ 2 - 56j) * q ^ 3) - 16 * q ^ 4, (((10 - 58q) + 108 * q ^ 2) - 81 * q ^ 3) + 21 * q ^ 4, 2 + (20 * j ^ 2 + 24j) * q + (-44 * j ^ 2 - 50j) * q ^ 2 + (36 * j ^ 2 + 40j) * q ^ 3 + 12 * q ^ 4, (((24 - 123q) + 215 * q ^ 2) - 156 * q ^ 3) + 41 * q ^ 4, ((((-1 + 11q) - 33 * q ^ 2) + 40 * q ^ 3) - 21 * q ^ 4) + 4 * q ^ 5, (7 + (35 * j ^ 2 + 34j) * q + (-72 * j ^ 2 - 65j) * q ^ 2 + (76 * j ^ 2 + 68j) * q ^ 3 + (-40 * j ^ 2 - 37j) * q ^ 4) - 8 * q ^ 5, j * q ^ 2 + (-(j ^ 2) - 2j) * q ^ 3 + j * q ^ 4, Unknown(), (3 + (18 * j ^ 2 + 17j) * q + (-41 * j ^ 2 - 37j) * q ^ 2 + (47 * j ^ 2 + 41j) * q ^ 3 + (-26 * j ^ 2 - 24j) * q ^ 4) - 5 * q ^ 5, Unknown(), ((((-2 + 20q) - 56 * q ^ 2) + 65 * q ^ 3) - 35 * q ^ 4) + 7 * q ^ 5, (((3q - 11 * q ^ 2) + 14 * q ^ 3) - 7 * q ^ 4) + q ^ 5, -j * q + (4 * j ^ 2 + 7j) * q ^ 2 + (-6 * j ^ 2 - 10j) * q ^ 3 + (4 * j ^ 2 + 5j) * q ^ 4 + q ^ 5, 6 + (132 * j ^ 2 + 108j) * q ^ 2 + 264 * q ^ 3 + (162 * j ^ 2 + 144j) * q ^ 4 + 24 * q ^ 6, 0, Unknown(), (-3 * j ^ 2 - j) * q + (25 * j ^ 2 + 23j) * q ^ 2 + 52 * q ^ 3 + (42 * j ^ 2 + 40j) * q ^ 4 + (-8 * j ^ 2 - 6j) * q ^ 5 + 2 * q ^ 6, 0, 39 + (72 * j ^ 2 + 88j) * q + (48 * j ^ 2 + 54j) * q ^ 2 + 198 * q ^ 3 + (36 * j ^ 2 + 44j) * q ^ 4 + (96 * j ^ 2 + 108j) * q ^ 5 + 57 * q ^ 6, Unknown(), Unknown(), ((-2 + 4q + (-60 * j ^ 2 - 48j) * q ^ 2 + (200 * j ^ 2 + 188j) * q ^ 3 + (-214 * j ^ 2 - 208j) * q ^ 4 + (84 * j ^ 2 + 72j) * q ^ 5) - 12 * q ^ 6) + 12 * q ^ 7, (q ^ 2 + (5 * j ^ 2 + 8j) * q ^ 3 + (-8 * j ^ 2 - 10j) * q ^ 4 + (5 * j ^ 2 + 4j) * q ^ 5) - j ^ 2 * q ^ 6, -18 + (-53 * j ^ 2 - 61j) * q + (16 * j ^ 2 + 22j) * q ^ 2 + (120 * j ^ 2 + 124j) * q ^ 3 + (-118 * j ^ 2 - 122j) * q ^ 4 + 28 * q ^ 5 + (76 * j ^ 2 + 84j) * q ^ 6 + 29 * q ^ 7, 2q + (11 * j ^ 2 + 9j) * q ^ 2 + (-21 * j ^ 2 - 16j) * q ^ 3 + (21 * j ^ 2 + 15j) * q ^ 4 + (-10 * j ^ 2 - 9j) * q ^ 5 + (2 * j ^ 2 + 3j) * q ^ 6, j ^ 2 * q + (-13 * j ^ 2 - 11j) * q ^ 2 + (39 * j ^ 2 + 38j) * q ^ 3 + (-48 * j ^ 2 - 47j) * q ^ 4 + (25 * j ^ 2 + 23j) * q ^ 5 + (-3 * j ^ 2 - 2j) * q ^ 6 + q ^ 7, (-11 * j ^ 2 - 7j) * q ^ 2 + (42 * j ^ 2 + 41j) * q ^ 3 + (-53 * j ^ 2 - 54j) * q ^ 4 + (24 * j ^ 2 + 20j) * q ^ 5 + 2 * q ^ 7, Unknown(), -15 + (-42 * j ^ 2 - 46j) * q + (37 * j ^ 2 + 29j) * q ^ 2 + (17 * j ^ 2 + 40j) * q ^ 3 + (-3 * j ^ 2 - 28j) * q ^ 4 + (-70 * j ^ 2 - 58j) * q ^ 5 + (64 * j ^ 2 + 68j) * q ^ 6 + 20 * q ^ 7, Unknown(), Unknown(), (3 - 10q) + (-9 * j ^ 2 - 5j) * q ^ 2 + (-10 * j ^ 2 - 25j) * q ^ 3 + (21 * j ^ 2 + 44j) * q ^ 4 + (5 * j ^ 2 - 14j) * q ^ 5 + (-28 * j ^ 2 - 22j) * q ^ 6 + (20 * j ^ 2 + 22j) * q ^ 7 + 5 * q ^ 8, (-3 * j ^ 2 - 4j) * q ^ 3 + (8 * j ^ 2 + 11j) * q ^ 4 + (-6 * j ^ 2 - 7j) * q ^ 5 + (3 * j ^ 2 + j) * q ^ 6, (((-3 * j ^ 2 * q ^ 110 + 21 * j ^ 2 * q ^ 111) - 44 * j ^ 2 * q ^ 112) + 34 * j ^ 2 * q ^ 113) - 8 * j ^ 2 * q ^ 114, (((-3 * j * q ^ 22 + 21 * j * q ^ 23) - 44 * j * q ^ 24) + 34 * j * q ^ 25) - 8 * j * q ^ 26, (((4 * j ^ 2 + 2j) * q ^ 2 + (-27 * j ^ 2 - 24j) * q ^ 3 + (48 * j ^ 2 + 49j) * q ^ 4 + (-39 * j ^ 2 - 37j) * q ^ 5 + (12 * j ^ 2 + 10j) * q ^ 6) - q ^ 7) + q ^ 8, Unknown(), Unknown(), 7 + (26 * j ^ 2 + 28j) * q + 38 * q ^ 2 + (12 * j ^ 2 - 3j) * q ^ 3 + (7 * j ^ 2 + 32j) * q ^ 4 + (34 * j ^ 2 + 14j) * q ^ 5 + (-66 * j ^ 2 - 62j) * q ^ 6 + (42 * j ^ 2 + 44j) * q ^ 7 + 10 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((j * q ^ 22 - 11 * j * q ^ 23) + 33 * j * q ^ 24) - 40 * j * q ^ 25) + 21 * j * q ^ 26) - 4 * j * q ^ 27, Unknown(), Unknown(), (3 - 6q) + (7 * j ^ 2 + 8j) * q ^ 2 + (-36 * j ^ 2 - 38j) * q ^ 3 + (53 * j ^ 2 + 51j) * q ^ 4 + (-60 * j ^ 2 - 56j) * q ^ 5 + (75 * j ^ 2 + 73j) * q ^ 6 + (-50 * j ^ 2 - 54j) * q ^ 7 + 2 * j * q ^ 8 + (14 * j ^ 2 + 16j) * q ^ 9 + 5 * q ^ 10, 0, Unknown(), Unknown(), 0, (((-7 * j ^ 2 - 4j) * q ^ 4 + (16 * j ^ 2 + 14j) * q ^ 5 + (-12 * j ^ 2 - 11j) * q ^ 6) - 2 * q ^ 7) + j ^ 2 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-(j ^ 2) * q ^ 44 + 11 * j ^ 2 * q ^ 45) - 33 * j ^ 2 * q ^ 46) + 40 * j ^ 2 * q ^ 47) - 21 * j ^ 2 * q ^ 48) + 4 * j ^ 2 * q ^ 49, Unknown(), Unknown(), ((((2 * q ^ 66 - 20 * q ^ 67) + 56 * q ^ 68) - 65 * q ^ 69) + 35 * q ^ 70) - 7 * q ^ 71, Unknown(), Unknown(), (((j ^ 2 + 3j) * q ^ 2 + (-4 * j ^ 2 - 8j) * q ^ 3 + (15 * j ^ 2 + 17j) * q ^ 4 + (-54 * j ^ 2 - 44j) * q ^ 5 + (96 * j ^ 2 + 76j) * q ^ 6 + (-66 * j ^ 2 - 56j) * q ^ 7 + (8 * j ^ 2 + 10j) * q ^ 8) - 4 * j * q ^ 9) + (6 * j ^ 2 + 8j) * q ^ 10 + 2 * q ^ 12, 0, 15 * j ^ 2 * q ^ 110 + (-54 * j ^ 2 + 4j) * q ^ 111 + (78 * j ^ 2 - 9j) * q ^ 112 + (-56 * j ^ 2 + 6j) * q ^ 113 + 16 * j ^ 2 * q ^ 114, ((((2 * j ^ 2 * q ^ 110 - 20 * j ^ 2 * q ^ 111) + 56 * j ^ 2 * q ^ 112) - 65 * j ^ 2 * q ^ 113) + 35 * j ^ 2 * q ^ 114) - 7 * j ^ 2 * q ^ 115, Unknown(), (3 * j ^ 2 - 6j) * q ^ 6 + (-21 * j ^ 2 - 12j) * q ^ 7 + (24 * j ^ 2 + 15j) * q ^ 8 + (-5 * j ^ 2 - 2j) * q ^ 9 + 3 * q ^ 10, 15 * j * q ^ 22 + (-4 * j ^ 2 - 58j) * q ^ 23 + (9 * j ^ 2 + 87j) * q ^ 24 + (-6 * j ^ 2 - 62j) * q ^ 25 + 16 * j * q ^ 26, Unknown(), (((10 * j ^ 2 * q ^ 44 - 58 * j ^ 2 * q ^ 45) + 108 * j ^ 2 * q ^ 46) - 81 * j ^ 2 * q ^ 47) + 21 * j ^ 2 * q ^ 48, -(q ^ 47), Unknown(), Unknown(), (((3 * j ^ 2 * q ^ 44 - 21 * j ^ 2 * q ^ 45) + 44 * j ^ 2 * q ^ 46) - 34 * j ^ 2 * q ^ 47) + 8 * j ^ 2 * q ^ 48, Unknown(), -840 * j * q ^ 22, ((-2 * j ^ 2 + j) * q ^ 23 + (5 * j ^ 2 - 6j) * q ^ 24 + (-2 * j ^ 2 + 6j) * q ^ 25) - 2 * j * q ^ 26, (-188 * j * q ^ 22 + 424 * j * q ^ 23) - 228 * j * q ^ 24, Unknown(), ((24 * j * q ^ 22 - 95 * j * q ^ 23) + 117 * j * q ^ 24) - 42 * j * q ^ 25, ((87 * j * q ^ 22 - 303 * j * q ^ 23) + 333 * j * q ^ 24) - 117 * j * q ^ 25, (((-14 * j * q ^ 22 + 80 * j * q ^ 23) - 144 * j * q ^ 24) + 106 * j * q ^ 25) - 28 * j * q ^ 26, Unknown(), (-2 * j * q ^ 22 + (-4 * j ^ 2 + 20j) * q ^ 23 + (6 * j ^ 2 - 44j) * q ^ 24 + (-4 * j ^ 2 + 36j) * q ^ 25) - 12 * j * q ^ 26, (((-24 * j * q ^ 22 + 123 * j * q ^ 23) - 215 * j * q ^ 24) + 156 * j * q ^ 25) - 41 * j * q ^ 26, -7 * j * q ^ 22 + (j ^ 2 + 35j) * q ^ 23 + (-7 * j ^ 2 - 72j) * q ^ 24 + (8 * j ^ 2 + 76j) * q ^ 25 + (-3 * j ^ 2 - 40j) * q ^ 26 + 8 * j * q ^ 27, (((-6 * j * q ^ 22 + (24 * j ^ 2 + 132j) * q ^ 24) - 264 * j * q ^ 25) + (18 * j ^ 2 + 162j) * q ^ 26) - 24 * j * q ^ 28, (((-39 * j * q ^ 22 + (-16 * j ^ 2 + 72j) * q ^ 23 + (-6 * j ^ 2 + 48j) * q ^ 24) - 198 * j * q ^ 25) + (-8 * j ^ 2 + 36j) * q ^ 26 + (-12 * j ^ 2 + 96j) * q ^ 27) - 57 * j * q ^ 28, ((-4 * j ^ 2 - 11j) * q ^ 24 + (j ^ 2 + 42j) * q ^ 25 + (j ^ 2 - 53j) * q ^ 26 + (4 * j ^ 2 + 24j) * q ^ 27) - 2 * j * q ^ 29, ((2 * j * q ^ 22 - 4 * j * q ^ 23) + (-12 * j ^ 2 - 60j) * q ^ 24 + (12 * j ^ 2 + 200j) * q ^ 25 + (-6 * j ^ 2 - 214j) * q ^ 26 + (12 * j ^ 2 + 84j) * q ^ 27 + 12 * j * q ^ 28) - 12 * j * q ^ 29, (((18 * j * q ^ 22 + (8 * j ^ 2 - 53j) * q ^ 23 + (-6 * j ^ 2 + 16j) * q ^ 24 + (-4 * j ^ 2 + 120j) * q ^ 25 + (4 * j ^ 2 - 118j) * q ^ 26) - 28 * j * q ^ 27) + (-8 * j ^ 2 + 76j) * q ^ 28) - 29 * j * q ^ 29, Unknown(), ((2 * j ^ 2 + 4j) * q ^ 24 + (-3 * j ^ 2 - 27j) * q ^ 25 + (-(j ^ 2) + 48j) * q ^ 26 + (-2 * j ^ 2 - 39j) * q ^ 27 + (2 * j ^ 2 + 12j) * q ^ 28 + j * q ^ 29) - j * q ^ 30, (j ^ 2 - 3j) * q ^ 25 + (-3 * j ^ 2 + 8j) * q ^ 26 + (j ^ 2 - 6j) * q ^ 27 + (2 * j ^ 2 + 3j) * q ^ 28, ((-3 * j ^ 2 - 7j) * q ^ 26 + (2 * j ^ 2 + 16j) * q ^ 27 + (-(j ^ 2) - 12j) * q ^ 28 + 2 * j * q ^ 29) - q ^ 30, 400 * j * q ^ 22 - 440 * j * q ^ 23, ((-2 * j ^ 2 + j) * q ^ 24 + (4 * j ^ 2 - 4j) * q ^ 25 + (-2 * j ^ 2 + 15j) * q ^ 26 + (-10 * j ^ 2 - 54j) * q ^ 27 + (20 * j ^ 2 + 96j) * q ^ 28 + (-10 * j ^ 2 - 66j) * q ^ 29 + (-2 * j ^ 2 + 8j) * q ^ 30 + 4 * j ^ 2 * q ^ 31 + (-2 * j ^ 2 + 6j) * q ^ 32) - 2 * j * q ^ 34, (6 * j * q ^ 22 + (8 * j ^ 2 - 36j) * q ^ 23 + (-6 * j ^ 2 + 48j) * q ^ 24) - 24 * j * q ^ 25, (-119 * j * q ^ 22 + 281 * j * q ^ 23) - 159 * j * q ^ 24, Unknown(), ((54 * j * q ^ 22 - 199 * j * q ^ 23) + 225 * j * q ^ 24) - 81 * j * q ^ 25, ((9 * j ^ 2 + 3j) * q ^ 28 + (-9 * j ^ 2 - 21j) * q ^ 29 + (9 * j ^ 2 + 24j) * q ^ 30 + (-3 * j ^ 2 - 5j) * q ^ 31) - 3 * j * q ^ 32, Unknown(), Unknown(), (((-3 * q ^ 66 + 21 * q ^ 67) - 44 * q ^ 68) + 34 * q ^ 69) - 8 * q ^ 70, Unknown(), 0, (((-10 * j * q ^ 22 + 58 * j * q ^ 23) - 108 * j * q ^ 24) + 81 * j * q ^ 25) - 21 * j * q ^ 26, Unknown(), 840 * j ^ 2 * q ^ 44, Unknown(), (188 * j ^ 2 * q ^ 44 - 424 * j ^ 2 * q ^ 45) + 228 * j ^ 2 * q ^ 46, ((-24 * j ^ 2 * q ^ 44 + 95 * j ^ 2 * q ^ 45) - 117 * j ^ 2 * q ^ 46) + 42 * j ^ 2 * q ^ 47, ((-87 * j ^ 2 * q ^ 44 + 303 * j ^ 2 * q ^ 45) - 333 * j ^ 2 * q ^ 46) + 117 * j ^ 2 * q ^ 47, (-14 * j ^ 2 * q ^ 44 + (37 * j ^ 2 - 2j) * q ^ 45 + (-40 * j ^ 2 + 8j) * q ^ 46 + (24 * j ^ 2 - 4j) * q ^ 47) - 5 * j ^ 2 * q ^ 48, (7 * j ^ 2 * q ^ 44 + (-34 * j ^ 2 + j) * q ^ 45 + (65 * j ^ 2 - 7j) * q ^ 46 + (-68 * j ^ 2 + 8j) * q ^ 47 + (37 * j ^ 2 - 3j) * q ^ 48) - 8 * j ^ 2 * q ^ 49, Unknown(), 6 * j ^ 2 * q ^ 44 + (-108 * j ^ 2 + 24j) * q ^ 46 + 264 * j ^ 2 * q ^ 47 + (-144 * j ^ 2 + 18j) * q ^ 48 + 24 * j ^ 2 * q ^ 50, ((-2 * j ^ 2 * q ^ 44 + 4 * j ^ 2 * q ^ 45 + (48 * j ^ 2 - 12j) * q ^ 46 + (-188 * j ^ 2 + 12j) * q ^ 47 + (208 * j ^ 2 - 6j) * q ^ 48 + (-72 * j ^ 2 + 12j) * q ^ 49) - 12 * j ^ 2 * q ^ 50) + 12 * j ^ 2 * q ^ 51, (7 * j ^ 2 - 4j) * q ^ 46 + (-41 * j ^ 2 + j) * q ^ 47 + (54 * j ^ 2 + j) * q ^ 48 + (-20 * j ^ 2 + 4j) * q ^ 49 + 2 * j ^ 2 * q ^ 51, (4 * j ^ 2 + j) * q ^ 47 + (-11 * j ^ 2 - 3j) * q ^ 48 + (7 * j ^ 2 + j) * q ^ 49 + (-(j ^ 2) + 2j) * q ^ 50, -400 * j ^ 2 * q ^ 44 + 440 * j ^ 2 * q ^ 45, (119 * j ^ 2 * q ^ 44 - 281 * j ^ 2 * q ^ 45) + 159 * j ^ 2 * q ^ 46, ((-54 * j ^ 2 * q ^ 44 + 199 * j ^ 2 * q ^ 45) - 225 * j ^ 2 * q ^ 46) + 81 * j ^ 2 * q ^ 47, (6 * j ^ 2 + 9j) * q ^ 50 + (12 * j ^ 2 - 9j) * q ^ 51 + (-15 * j ^ 2 + 9j) * q ^ 52 + (2 * j ^ 2 - 3j) * q ^ 53 + 3 * j ^ 2 * q ^ 54, (-15 * j ^ 2 * q ^ 44 + (54 * j ^ 2 - 4j) * q ^ 45 + (-78 * j ^ 2 + 9j) * q ^ 46 + (56 * j ^ 2 - 6j) * q ^ 47) - 16 * j ^ 2 * q ^ 48, (((3 * j * q ^ 88 - 21 * j * q ^ 89) + 44 * j * q ^ 90) - 34 * j * q ^ 91) + 8 * j * q ^ 92, Unknown(), -840 * q ^ 66, ((((((((18 * q ^ 18 - 12 * q ^ 19) + 45 * q ^ 20) - 100 * q ^ 21) + 56 * q ^ 22 + 91 * q ^ 24) - 176 * q ^ 25) + 90 * q ^ 26 + 4 * q ^ 27) - 6 * q ^ 28) + 2 * q ^ 30) - 4 * q ^ 31, Unknown(), ((24 * q ^ 66 - 95 * q ^ 67) + 117 * q ^ 68) - 42 * q ^ 69, Unknown(), Unknown(), (((-6 * q ^ 66 + (-132 * j ^ 2 - 108j) * q ^ 68) - 264 * q ^ 69) + (-162 * j ^ 2 - 144j) * q ^ 70) - 24 * q ^ 72, Unknown(), ((11 * j ^ 2 + 7j) * q ^ 68 + (-42 * j ^ 2 - 41j) * q ^ 69 + (53 * j ^ 2 + 54j) * q ^ 70 + (-24 * j ^ 2 - 20j) * q ^ 71) - 2 * q ^ 73, (3 * j ^ 2 + 4j) * q ^ 69 + (-8 * j ^ 2 - 11j) * q ^ 70 + (6 * j ^ 2 + 7j) * q ^ 71 + (-3 * j ^ 2 - j) * q ^ 72, (((((-30 * q ^ 18 - 81 * q ^ 20) + 120 * q ^ 21) - 195 * q ^ 24) + 162 * q ^ 25) - 10 * q ^ 27) - 6 * q ^ 30, (-119 * q ^ 66 + 281 * q ^ 67) - 159 * q ^ 68, Unknown(), 15 * q ^ 66 + (58 * j ^ 2 + 54j) * q ^ 67 + (-87 * j ^ 2 - 78j) * q ^ 68 + (62 * j ^ 2 + 56j) * q ^ 69 + 16 * q ^ 70, 840 * j * q ^ 88, Unknown(), (188 * j * q ^ 88 - 424 * j * q ^ 89) + 228 * j * q ^ 90, ((((2 * j * q ^ 22 - 20 * j * q ^ 23) + 56 * j * q ^ 24) - 65 * j * q ^ 25) + 35 * j * q ^ 26) - 7 * j * q ^ 27, -400 * j * q ^ 88 + 440 * j * q ^ 89, (119 * j * q ^ 88 - 281 * j * q ^ 89) + 159 * j * q ^ 90, Unknown(), ((-24 * j * q ^ 88 + 95 * j * q ^ 89) - 117 * j * q ^ 90) + 42 * j * q ^ 91, -840 * j ^ 2 * q ^ 110, Unknown(), (-188 * j ^ 2 * q ^ 110 + 424 * j ^ 2 * q ^ 111) - 228 * j ^ 2 * q ^ 112, 400 * j ^ 2 * q ^ 110 - 440 * j ^ 2 * q ^ 111, (-119 * j ^ 2 * q ^ 110 + 281 * j ^ 2 * q ^ 111) - 159 * j ^ 2 * q ^ 112, Unknown(), ((24 * j ^ 2 * q ^ 110 - 95 * j ^ 2 * q ^ 111) + 117 * j ^ 2 * q ^ 112) - 42 * j ^ 2 * q ^ 113]
            end
        f154 = function (q, j)
                return [840, -380 + 460q, (102 - 278q) + 182 * q ^ 2, (168 - 424q) + 248 * q ^ 2, ((-43 + 184q) - 240 * q ^ 2) + 95 * q ^ 3, ((-16 + 86q) - 126 * q ^ 2) + 56 * q ^ 3, -6 + (-36 * j ^ 2 - 30j) * q + (60 * j ^ 2 + 62j) * q ^ 2 + 30 * q ^ 3, ((-72 + 288q) - 348 * q ^ 2) + 132 * q ^ 3, 24 + (62 * j ^ 2 + 60j) * q + (-30 * j ^ 2 - 36j) * q ^ 2, (-11 + (-43 * j ^ 2 - 41j) * q + (44 * j ^ 2 + 48j) * q ^ 2 + (-15 * j ^ 2 - 17j) * q ^ 3) - 3 * q ^ 4, (((10 - 66q) + 144 * q ^ 2) - 122 * q ^ 3) + 34 * q ^ 4, (((1 - 15q) + 44 * q ^ 2) - 43 * q ^ 3) + 13 * q ^ 4, (2 * j ^ 2 + j) * q + (-10 * j ^ 2 - 8j) * q ^ 2 + (10 * j ^ 2 + 11j) * q ^ 3 + 3 * q ^ 4, (-10 + (-52 * j ^ 2 - 51j) * q + (84 * j ^ 2 + 86j) * q ^ 2 + (-58 * j ^ 2 - 63j) * q ^ 3) - 17 * q ^ 4, (((6 - 47q) + 108 * q ^ 2) - 95 * q ^ 3) + 28 * q ^ 4, ((2 + (20 * j ^ 2 + 16j) * q + 48 * q ^ 2) - 48 * q ^ 3) + 14 * q ^ 4, (((17 - 107q) + 214 * q ^ 2) - 175 * q ^ 3) + 49 * q ^ 4, (((7q - 29 * q ^ 2) + 45 * q ^ 3) - 29 * q ^ 4) + 6 * q ^ 5, (4 + (29 * j ^ 2 + 28j) * q + (-67 * j ^ 2 - 68j) * q ^ 2 + (72 * j ^ 2 + 76j) * q ^ 3 + (-39 * j ^ 2 - 41j) * q ^ 4) - 10 * q ^ 5, (-(q ^ 2) + 2 * q ^ 3) - q ^ 4, Unknown(), (1 + (13 * j ^ 2 + 12j) * q + (-37 * j ^ 2 - 38j) * q ^ 2 + (46 * j ^ 2 + 49j) * q ^ 3 + (-29 * j ^ 2 - 30j) * q ^ 4) - 8 * q ^ 5, Unknown(), ((((-1 + 14q) - 50 * q ^ 2) + 72 * q ^ 3) - 44 * q ^ 4) + 9 * q ^ 5, (((q - 9 * q ^ 2) + 17 * q ^ 3) - 11 * q ^ 4) + 2 * q ^ 5, ((-(j ^ 2) * q + (6 * j ^ 2 + 5j) * q ^ 2 + 10 * q ^ 3) - 7 * q ^ 4) + q ^ 5, 6 + (90 * j ^ 2 + 108j) * q ^ 2 + 240 * q ^ 3 + (186 * j ^ 2 + 180j) * q ^ 4 + 30 * q ^ 6, 0, Unknown(), (-(j ^ 2) - 2j) * q + (17 * j ^ 2 + 18j) * q ^ 2 + 49 * q ^ 3 + (49 * j ^ 2 + 48j) * q ^ 4 + (-11 * j ^ 2 - 10j) * q ^ 5 + 3 * q ^ 6, 0, 36 + (72 * j ^ 2 + 60j) * q + (60 * j ^ 2 + 62j) * q ^ 2 + 180 * q ^ 3 + (36 * j ^ 2 + 30j) * q ^ 4 + (120 * j ^ 2 + 124j) * q ^ 5 + 60 * q ^ 6, Unknown(), Unknown(), (((-2 + 4q + (-36 * j ^ 2 - 48j) * q ^ 2 + (158 * j ^ 2 + 164j) * q ^ 3 + (-226 * j ^ 2 - 220j) * q ^ 4) - 96 * q ^ 5) - 16 * q ^ 6) + 14 * q ^ 7, (5 * j ^ 2 + 3j) * q ^ 3 + (-12 * j ^ 2 - 10j) * q ^ 4 + (7 * j ^ 2 + 8j) * q ^ 5 + q ^ 6, ((((-15 + (-53 * j ^ 2 - 45j) * q + (12 * j ^ 2 + 6j) * q ^ 2) - 110 * q ^ 3) + (-118 * j ^ 2 - 114j) * q ^ 4 + (-36 * j ^ 2 - 42j) * q ^ 5) - 93 * q ^ 6) + 31 * q ^ 7, (q + (7 * j ^ 2 + 8j) * q ^ 2 + (-18 * j ^ 2 - 20j) * q ^ 3 + (18 * j ^ 2 + 20j) * q ^ 4 + (-9 * j ^ 2 - 11j) * q ^ 5) - 3 * q ^ 6, ((j * q + (-7 * j ^ 2 - 8j) * q ^ 2) - 32 * q ^ 3) + (-52 * j ^ 2 - 51j) * q ^ 4 + (31 * j ^ 2 + 30j) * q ^ 5 + 3 * q ^ 6 + q ^ 7, (-5 * j ^ 2 - 7j) * q ^ 2 + (31 * j ^ 2 + 34j) * q ^ 3 + (-57 * j ^ 2 - 54j) * q ^ 4 + (34 * j ^ 2 + 32j) * q ^ 5 + 3 * q ^ 7, Unknown(), -10 + (-30 * j ^ 2 - 28j) * q + (8 * j ^ 2 + 6j) * q ^ 2 + (39 * j ^ 2 + 34j) * q ^ 3 + (j ^ 2 + 12j) * q ^ 4 + (-87 * j ^ 2 - 97j) * q ^ 5 + (84 * j ^ 2 + 86j) * q ^ 6 + 23 * q ^ 7, Unknown(), Unknown(), ((((1 - 4q) - 5 * q ^ 2) + (-30 * j ^ 2 - 26j) * q ^ 3 + (30 * j ^ 2 + 21j) * q ^ 4 + (12 * j ^ 2 + 21j) * q ^ 5 + (-46 * j ^ 2 - 49j) * q ^ 6) - 32 * q ^ 7) + 8 * q ^ 8, q ^ 3 + (9 * j ^ 2 + 6j) * q ^ 4 + (-12 * j ^ 2 - 11j) * q ^ 5 + (3 * j ^ 2 + 4j) * q ^ 6, (((-(j ^ 2) * q ^ 115 + 15 * j ^ 2 * q ^ 116) - 44 * j ^ 2 * q ^ 117) + 43 * j ^ 2 * q ^ 118) - 13 * j ^ 2 * q ^ 119, (((-j * q ^ 23 + 15 * j * q ^ 24) - 44 * j * q ^ 25) + 43 * j * q ^ 26) - 13 * j * q ^ 27, ((((j ^ 2 + 3j) * q ^ 2 + (-16 * j ^ 2 - 18j) * q ^ 3 + (45 * j ^ 2 + 44j) * q ^ 4 + (-49 * j ^ 2 - 46j) * q ^ 5) - 16 * q ^ 6) - 2 * q ^ 7) + q ^ 8, Unknown(), Unknown(), ((4 + (18 * j ^ 2 + 16j) * q + (-19 * j ^ 2 - 17j) * q ^ 2 + (-11 * j ^ 2 - 9j) * q ^ 3 + (18 * j ^ 2 + 9j) * q ^ 4 + (40 * j ^ 2 + 51j) * q ^ 5 + (-85 * j ^ 2 - 91j) * q ^ 6) - 55 * q ^ 7) + 12 * q ^ 8, Unknown(), Unknown(), Unknown(), (((-7 * j * q ^ 24 + 29 * j * q ^ 25) - 45 * j * q ^ 26) + 29 * j * q ^ 27) - 6 * j * q ^ 28, Unknown(), Unknown(), (((1 - 2q) + (8 * j ^ 2 + 9j) * q ^ 2 + (-30 * j ^ 2 - 28j) * q ^ 3 + (40 * j ^ 2 + 37j) * q ^ 4 + 58 * q ^ 5 + (81 * j ^ 2 + 84j) * q ^ 6 + (-52 * j ^ 2 - 54j) * q ^ 7 + (-8 * j ^ 2 - 7j) * q ^ 8) - 24 * q ^ 9) + 8 * q ^ 10, 0, Unknown(), Unknown(), 0, ((-3 * j ^ 2 - 5j) * q ^ 4 + (12 * j ^ 2 + 14j) * q ^ 5 + 14 * q ^ 6 + (4 * j ^ 2 + 2j) * q ^ 7) - q ^ 8, Unknown(), Unknown(), Unknown(), (((7 * j ^ 2 * q ^ 47 - 29 * j ^ 2 * q ^ 48) + 45 * j ^ 2 * q ^ 49) - 29 * j ^ 2 * q ^ 50) + 6 * j ^ 2 * q ^ 51, Unknown(), Unknown(), ((((q ^ 69 - 14 * q ^ 70) + 50 * q ^ 71) - 72 * q ^ 72) + 44 * q ^ 73) - 9 * q ^ 74, Unknown(), Unknown(), (2 * j ^ 2 + j) * q ^ 2 + (-4 * j ^ 2 - 2j) * q ^ 3 + (6 * j ^ 2 + 5j) * q ^ 4 + (-38 * j ^ 2 - 42j) * q ^ 5 + (81 * j ^ 2 + 89j) * q ^ 6 + (-76 * j ^ 2 - 80j) * q ^ 7 + (24 * j ^ 2 + 25j) * q ^ 8 + (-2 * j ^ 2 - 4j) * q ^ 9 + (10 * j ^ 2 + 11j) * q ^ 10 + 3 * q ^ 12, 0, 10 * j ^ 2 * q ^ 115 + (-51 * j ^ 2 + j) * q ^ 116 + (86 * j ^ 2 + 2j) * q ^ 117 + (-63 * j ^ 2 - 5j) * q ^ 118 + 17 * j ^ 2 * q ^ 119, ((((j ^ 2 * q ^ 115 - 14 * j ^ 2 * q ^ 116) + 50 * j ^ 2 * q ^ 117) - 72 * j ^ 2 * q ^ 118) + 44 * j ^ 2 * q ^ 119) - 9 * j ^ 2 * q ^ 120, Unknown(), ((-9 * j * q ^ 7 - 21 * q ^ 8) + (-13 * j ^ 2 - 4j) * q ^ 9 + 3 * q ^ 10) - 3 * q ^ 11, 10 * j * q ^ 23 + (-(j ^ 2) - 52j) * q ^ 24 + (-2 * j ^ 2 + 84j) * q ^ 25 + (5 * j ^ 2 - 58j) * q ^ 26 + 17 * j * q ^ 27, Unknown(), (((6 * j ^ 2 * q ^ 46 - 47 * j ^ 2 * q ^ 47) + 108 * j ^ 2 * q ^ 48) - 95 * j ^ 2 * q ^ 49) + 28 * j ^ 2 * q ^ 50, j ^ 2 * q ^ 49, Unknown(), Unknown(), (((j ^ 2 * q ^ 46 - 15 * j ^ 2 * q ^ 47) + 44 * j ^ 2 * q ^ 48) - 43 * j ^ 2 * q ^ 49) + 13 * j ^ 2 * q ^ 50, Unknown(), -840 * j * q ^ 23, ((j ^ 2 + 2j) * q ^ 24 + (-2 * j ^ 2 - 10j) * q ^ 25 + (-(j ^ 2) + 10j) * q ^ 26) - 3 * j * q ^ 27, (-168 * j * q ^ 23 + 424 * j * q ^ 24) - 248 * j * q ^ 25, Unknown(), ((16 * j * q ^ 23 - 86 * j * q ^ 24) + 126 * j * q ^ 25) - 56 * j * q ^ 26, ((72 * j * q ^ 23 - 288 * j * q ^ 24) + 348 * j * q ^ 25) - 132 * j * q ^ 26, (((-10 * j * q ^ 23 + 66 * j * q ^ 24) - 144 * j * q ^ 25) + 122 * j * q ^ 26) - 34 * j * q ^ 27, Unknown(), (((-2 * j * q ^ 23 + (4 * j ^ 2 + 20j) * q ^ 24) - 48 * j * q ^ 25) + 48 * j * q ^ 26) - 14 * j * q ^ 27, (((-17 * j * q ^ 23 + 107 * j * q ^ 24) - 214 * j * q ^ 25) + 175 * j * q ^ 26) - 49 * j * q ^ 27, -4 * j * q ^ 23 + (j ^ 2 + 29j) * q ^ 24 + (j ^ 2 - 67j) * q ^ 25 + (-4 * j ^ 2 + 72j) * q ^ 26 + (2 * j ^ 2 - 39j) * q ^ 27 + 10 * j * q ^ 28, (((-6 * j * q ^ 23 + (-18 * j ^ 2 + 90j) * q ^ 25) - 240 * j * q ^ 26) + (6 * j ^ 2 + 186j) * q ^ 27) - 30 * j * q ^ 29, (((-36 * j * q ^ 23 + (12 * j ^ 2 + 72j) * q ^ 24 + (-2 * j ^ 2 + 60j) * q ^ 25) - 180 * j * q ^ 26) + (6 * j ^ 2 + 36j) * q ^ 27 + (-4 * j ^ 2 + 120j) * q ^ 28) - 60 * j * q ^ 29, ((2 * j ^ 2 - 5j) * q ^ 25 + (-3 * j ^ 2 + 31j) * q ^ 26 + (-3 * j ^ 2 - 57j) * q ^ 27 + (2 * j ^ 2 + 34j) * q ^ 28) - 3 * j * q ^ 30, ((2 * j * q ^ 23 - 4 * j * q ^ 24) + (12 * j ^ 2 - 36j) * q ^ 25 + (-6 * j ^ 2 + 158j) * q ^ 26 + (-6 * j ^ 2 - 226j) * q ^ 27 + 96 * j * q ^ 28 + 16 * j * q ^ 29) - 14 * j * q ^ 30, (15 * j * q ^ 23 + (-8 * j ^ 2 - 53j) * q ^ 24 + (6 * j ^ 2 + 12j) * q ^ 25 + 110 * j * q ^ 26 + (-4 * j ^ 2 - 118j) * q ^ 27 + (6 * j ^ 2 - 36j) * q ^ 28 + 93 * j * q ^ 29) - 31 * j * q ^ 30, Unknown(), ((-2 * j ^ 2 + j) * q ^ 25 + (2 * j ^ 2 - 16j) * q ^ 26 + (j ^ 2 + 45j) * q ^ 27 + (-3 * j ^ 2 - 49j) * q ^ 28 + 16 * j * q ^ 29 + 2 * j * q ^ 30) - j * q ^ 31, -j * q ^ 26 + (3 * j ^ 2 + 9j) * q ^ 27 + (-(j ^ 2) - 12j) * q ^ 28 + (-(j ^ 2) + 3j) * q ^ 29, (((2 * j ^ 2 - 3j) * q ^ 27 + (-2 * j ^ 2 + 12j) * q ^ 28) - 14 * j * q ^ 29) + (2 * j ^ 2 + 4j) * q ^ 30 + j * q ^ 31, 380 * j * q ^ 23 - 460 * j * q ^ 24, ((j ^ 2 + 2j) * q ^ 25 + (-2 * j ^ 2 - 4j) * q ^ 26 + (j ^ 2 + 6j) * q ^ 27 + (4 * j ^ 2 - 38j) * q ^ 28 + (-8 * j ^ 2 + 81j) * q ^ 29 + (4 * j ^ 2 - 76j) * q ^ 30 + (-(j ^ 2) + 24j) * q ^ 31 + (2 * j ^ 2 - 2j) * q ^ 32 + (-(j ^ 2) + 10j) * q ^ 33) - 3 * j * q ^ 35, (6 * j * q ^ 23 + (-6 * j ^ 2 - 36j) * q ^ 24 + (-2 * j ^ 2 + 60j) * q ^ 25) - 30 * j * q ^ 26, (-102 * j * q ^ 23 + 278 * j * q ^ 24) - 182 * j * q ^ 25, Unknown(), ((43 * j * q ^ 23 - 184 * j * q ^ 24) + 240 * j * q ^ 25) - 95 * j * q ^ 26, ((9 * j ^ 2 * q ^ 30 + 21 * j * q ^ 31 + (-9 * j ^ 2 - 13j) * q ^ 32) - 3 * j * q ^ 33) + 3 * j * q ^ 34, Unknown(), Unknown(), (((-(q ^ 69) + 15 * q ^ 70) - 44 * q ^ 71) + 43 * q ^ 72) - 13 * q ^ 73, Unknown(), 0, (((-6 * j * q ^ 23 + 47 * j * q ^ 24) - 108 * j * q ^ 25) + 95 * j * q ^ 26) - 28 * j * q ^ 27, Unknown(), 840 * j ^ 2 * q ^ 46, Unknown(), (168 * j ^ 2 * q ^ 46 - 424 * j ^ 2 * q ^ 47) + 248 * j ^ 2 * q ^ 48, ((-16 * j ^ 2 * q ^ 46 + 86 * j ^ 2 * q ^ 47) - 126 * j ^ 2 * q ^ 48) + 56 * j ^ 2 * q ^ 49, ((-72 * j ^ 2 * q ^ 46 + 288 * j ^ 2 * q ^ 47) - 348 * j ^ 2 * q ^ 48) + 132 * j ^ 2 * q ^ 49, (-11 * j ^ 2 * q ^ 46 + (41 * j ^ 2 - 2j) * q ^ 47 + (-48 * j ^ 2 - 4j) * q ^ 48 + (17 * j ^ 2 + 2j) * q ^ 49) - 3 * j ^ 2 * q ^ 50, (4 * j ^ 2 * q ^ 46 + (-28 * j ^ 2 + j) * q ^ 47 + (68 * j ^ 2 + j) * q ^ 48 + (-76 * j ^ 2 - 4j) * q ^ 49 + (41 * j ^ 2 + 2j) * q ^ 50) - 10 * j ^ 2 * q ^ 51, Unknown(), 6 * j ^ 2 * q ^ 46 + (-108 * j ^ 2 - 18j) * q ^ 48 + 240 * j ^ 2 * q ^ 49 + (-180 * j ^ 2 + 6j) * q ^ 50 + 30 * j ^ 2 * q ^ 52, (((-2 * j ^ 2 * q ^ 46 + 4 * j ^ 2 * q ^ 47 + (48 * j ^ 2 + 12j) * q ^ 48 + (-164 * j ^ 2 - 6j) * q ^ 49 + (220 * j ^ 2 - 6j) * q ^ 50) - 96 * j ^ 2 * q ^ 51) - 16 * j ^ 2 * q ^ 52) + 14 * j ^ 2 * q ^ 53, (7 * j ^ 2 + 2j) * q ^ 48 + (-34 * j ^ 2 - 3j) * q ^ 49 + (54 * j ^ 2 - 3j) * q ^ 50 + (-32 * j ^ 2 + 2j) * q ^ 51 + 3 * j ^ 2 * q ^ 53, j ^ 2 * q ^ 49 + (-6 * j ^ 2 + 3j) * q ^ 50 + (11 * j ^ 2 - j) * q ^ 51 + (-4 * j ^ 2 - j) * q ^ 52, -380 * j ^ 2 * q ^ 46 + 460 * j ^ 2 * q ^ 47, (102 * j ^ 2 * q ^ 46 - 278 * j ^ 2 * q ^ 47) + 182 * j ^ 2 * q ^ 48, ((-43 * j ^ 2 * q ^ 46 + 184 * j ^ 2 * q ^ 47) - 240 * j ^ 2 * q ^ 48) + 95 * j ^ 2 * q ^ 49, ((-9 * q ^ 53 - 21 * j ^ 2 * q ^ 54) + (4 * j ^ 2 - 9j) * q ^ 55 + 3 * j ^ 2 * q ^ 56) - 3 * j ^ 2 * q ^ 57, (-10 * j ^ 2 * q ^ 46 + (51 * j ^ 2 - j) * q ^ 47 + (-86 * j ^ 2 - 2j) * q ^ 48 + (63 * j ^ 2 + 5j) * q ^ 49) - 17 * j ^ 2 * q ^ 50, (((j * q ^ 92 - 15 * j * q ^ 93) + 44 * j * q ^ 94) - 43 * j * q ^ 95) + 13 * j * q ^ 96, Unknown(), -840 * q ^ 69, ((((((((45 * q ^ 20 - 60 * q ^ 21) + 21 * q ^ 22 + 77 * q ^ 24) - 160 * q ^ 25) + 90 * q ^ 26 + 20 * q ^ 27) - 30 * q ^ 28) + 2 * q ^ 30) - 4 * q ^ 31) - 4 * q ^ 33) + 11 * q ^ 34, Unknown(), ((16 * q ^ 69 - 86 * q ^ 70) + 126 * q ^ 71) - 56 * q ^ 72, Unknown(), Unknown(), (((-6 * q ^ 69 + (-90 * j ^ 2 - 108j) * q ^ 71) - 240 * q ^ 72) + (-186 * j ^ 2 - 180j) * q ^ 73) - 30 * q ^ 75, Unknown(), ((5 * j ^ 2 + 7j) * q ^ 71 + (-31 * j ^ 2 - 34j) * q ^ 72 + (57 * j ^ 2 + 54j) * q ^ 73 + (-34 * j ^ 2 - 32j) * q ^ 74) - 3 * q ^ 76, -(q ^ 72) + (-9 * j ^ 2 - 6j) * q ^ 73 + (12 * j ^ 2 + 11j) * q ^ 74 + (-3 * j ^ 2 - 4j) * q ^ 75, (((((-81 * q ^ 20 + 45 * q ^ 21) - 165 * q ^ 24) + 162 * q ^ 25) - 50 * q ^ 27) - 6 * q ^ 30) + 15 * q ^ 33, (-102 * q ^ 69 + 278 * q ^ 70) - 182 * q ^ 71, Unknown(), 10 * q ^ 69 + (52 * j ^ 2 + 51j) * q ^ 70 + (-84 * j ^ 2 - 86j) * q ^ 71 + (58 * j ^ 2 + 63j) * q ^ 72 + 17 * q ^ 73, 840 * j * q ^ 92, Unknown(), (168 * j * q ^ 92 - 424 * j * q ^ 93) + 248 * j * q ^ 94, ((((j * q ^ 23 - 14 * j * q ^ 24) + 50 * j * q ^ 25) - 72 * j * q ^ 26) + 44 * j * q ^ 27) - 9 * j * q ^ 28, -380 * j * q ^ 92 + 460 * j * q ^ 93, (102 * j * q ^ 92 - 278 * j * q ^ 93) + 182 * j * q ^ 94, Unknown(), ((-16 * j * q ^ 92 + 86 * j * q ^ 93) - 126 * j * q ^ 94) + 56 * j * q ^ 95, -840 * j ^ 2 * q ^ 115, Unknown(), (-168 * j ^ 2 * q ^ 115 + 424 * j ^ 2 * q ^ 116) - 248 * j ^ 2 * q ^ 117, 380 * j ^ 2 * q ^ 115 - 460 * j ^ 2 * q ^ 116, (-102 * j ^ 2 * q ^ 115 + 278 * j ^ 2 * q ^ 116) - 182 * j ^ 2 * q ^ 117, Unknown(), ((16 * j ^ 2 * q ^ 115 - 86 * j ^ 2 * q ^ 116) + 126 * j ^ 2 * q ^ 117) - 56 * j ^ 2 * q ^ 118]
            end
        f158 = function (q, e)
                local v
                v = GetRoot(q, 2) * e
                return [896, -480 + 416q, (180 - 300q) + 116 * q ^ 2, (256 - 448q) + 192 * q ^ 2, ((-95 + 246q) - 202 * q ^ 2) + 53 * q ^ 3, ((-52 + 128q) - 96 * q ^ 2) + 20 * q ^ 3, ((-24 + 60q) - 36 * q ^ 2) + 8 * q ^ 3, ((-136 + 360q) - 312 * q ^ 2) + 88 * q ^ 3, ((12 - 36q) + 60 * q ^ 2) - 28 * q ^ 3, (((-7 + 25q) - 48 * q ^ 2) + 43 * q ^ 3) - 13 * q ^ 4, (((34 - 122q) + 148 * q ^ 2) - 78 * q ^ 3) + 14 * q ^ 4, (((12 - 40q) + 45 * q ^ 2) - 18 * q ^ 3) + 2 * q ^ 4, ((2 - 8q) + 7 * q ^ 2) - 2 * q ^ 3, (((-21 + 65q) - 89 * q ^ 2) + 57 * q ^ 3) - 13 * q ^ 4, (((27 - 93q) + 112 * q ^ 2) - 55 * q ^ 3) + 9 * q ^ 4, (((12 - 44q) + 48 * q ^ 2) - 20 * q ^ 3) + 4 * q ^ 4, (((50 - 176q) + 224 * q ^ 2) - 122 * q ^ 3) + 24 * q ^ 4, ((((-6 + 27q) - 43 * q ^ 2) + 31 * q ^ 3) - 9 * q ^ 4) + q ^ 5, ((((11 - 45q) + 78 * q ^ 2) - 72 * q ^ 3) + 33 * q ^ 4) - 6 * q ^ 5, q - q ^ 2, Unknown(), ((((8 - 30q) + 49 * q ^ 2) - 40 * q ^ 3) + 15 * q ^ 4) - 2 * q ^ 5, Unknown(), ((((-9 + 43q) - 70 * q ^ 2) + 53 * q ^ 3) - 19 * q ^ 4) + 2 * q ^ 5, (((-2 + 10q) - 15 * q ^ 2) + 9 * q ^ 3) - 2 * q ^ 4, (((-1 + 5q) - 8 * q ^ 2) + 4 * q ^ 3) - q ^ 4, (((24 - 180 * q ^ 2) + 288 * q ^ 3) - 108 * q ^ 4) + 8 * q ^ 6, 0, Unknown(), ((((2 + 8q) - 48 * q ^ 2) + 58 * q ^ 3) - 22 * q ^ 4) + 2 * q ^ 5, 0, (((((60 - 120q) - 36 * q ^ 2) + 216 * q ^ 3) - 60 * q ^ 4) - 72 * q ^ 5) + 44 * q ^ 6, Unknown(), Unknown(), (((((-12 + 12q + 96 * q ^ 2) - 236 * q ^ 3) + 196 * q ^ 4) - 48 * q ^ 5) - 4 * q ^ 6) + 4 * q ^ 7, (((-q + 5 * q ^ 2) - 10 * q ^ 3) + 6 * q ^ 4) - q ^ 5, (((((-31 + 93q) - 36 * q ^ 2) - 130 * q ^ 3) + 134 * q ^ 4 + 12 * q ^ 5) - 55 * q ^ 6) + 21 * q ^ 7, ((((4q - 13 * q ^ 2) + 19 * q ^ 3) - 19 * q ^ 4) + 9 * q ^ 5) - q ^ 6, (((((-1 - 3q) + 29 * q ^ 2) - 54 * q ^ 3) + 39 * q ^ 4) - 11 * q ^ 5) + q ^ 6, (((-2 + 27 * q ^ 2) - 63 * q ^ 3) + 41 * q ^ 4) - 7 * q ^ 5, Unknown(), (((((-25 + 84q) - 91 * q ^ 2) - 10 * q ^ 3) + 46 * q ^ 4 + 15 * q ^ 5) - 36 * q ^ 6) + 13 * q ^ 7, Unknown(), Unknown(), (((((((8 - 32q) + 45 * q ^ 2) - 8 * q ^ 3) - 41 * q ^ 4) + 33 * q ^ 5) - 2 * q ^ 6) - 6 * q ^ 7) + 2 * q ^ 8, ((-3 * q ^ 2 + 8 * q ^ 3) - 9 * q ^ 4) + 3 * q ^ 5, (((12 * v ^ 195 - 40 * v ^ 197) + 45 * v ^ 199) - 18 * v ^ 201) + 2 * v ^ 203, (((12 * v ^ 39 - 40 * v ^ 41) + 45 * v ^ 43) - 18 * v ^ 45) + 2 * v ^ 47, (((((1 - q) - 14 * q ^ 2) + 46 * q ^ 3) - 52 * q ^ 4) + 23 * q ^ 5) - 3 * q ^ 6, Unknown(), Unknown(), ((((((13 - 56q) + 87 * q ^ 2) - 39 * q ^ 3) - 28 * q ^ 4) + 14 * q ^ 5 + 26 * q ^ 6) - 23 * q ^ 7) + 6 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-6 * v ^ 39 + 27 * v ^ 41) - 43 * v ^ 43) + 31 * v ^ 45) - 9 * v ^ 47) + v ^ 49, Unknown(), Unknown(), ((((((((8 - 22q) + 6 * q ^ 2 + 56 * q ^ 3) - 87 * q ^ 4) + 66 * q ^ 5) - 52 * q ^ 6) + 36 * q ^ 7) - 9 * q ^ 8) - 4 * q ^ 9) + 2 * q ^ 10, 0, Unknown(), Unknown(), 0, (((-(q ^ 2) - 2 * q ^ 3) + 15 * q ^ 4) - 16 * q ^ 5) + 4 * q ^ 6, Unknown(), Unknown(), Unknown(), ((((-6 * q ^ 39 + 27 * q ^ 40) - 43 * q ^ 41) + 31 * q ^ 42) - 9 * q ^ 43) + q ^ 44, Unknown(), Unknown(), ((((-9 * v ^ 117 + 43 * v ^ 119) - 70 * v ^ 121) + 53 * v ^ 123) - 19 * v ^ 125) + 2 * v ^ 127, Unknown(), Unknown(), ((((((((2 - 8 * q ^ 2) + 6 * q ^ 3) - 24 * q ^ 4) + 74 * q ^ 5) - 86 * q ^ 6) + 38 * q ^ 7) - 6 * q ^ 8) + 2 * q ^ 9) - 2 * q ^ 10, 0, (((-21 * v ^ 195 + 65 * v ^ 197) - 89 * v ^ 199) + 57 * v ^ 201) - 13 * v ^ 203, ((((-9 * v ^ 195 + 43 * v ^ 197) - 70 * v ^ 199) + 53 * v ^ 201) - 19 * v ^ 203) + 2 * v ^ 205, Unknown(), ((-3 * q ^ 5 - 9 * q ^ 6) + 27 * q ^ 7 + 8 * v ^ 15) - 15 * q ^ 8, (((-21 * v ^ 39 + 65 * v ^ 41) - 89 * v ^ 43) + 57 * v ^ 45) - 13 * v ^ 47, Unknown(), (((27 * q ^ 39 - 93 * q ^ 40) + 112 * q ^ 41) - 55 * q ^ 42) + 9 * q ^ 43, -(v ^ 83), Unknown(), Unknown(), (((12 * q ^ 39 - 40 * q ^ 40) + 45 * q ^ 41) - 18 * q ^ 42) + 2 * q ^ 43, Unknown(), 896 * v ^ 39, ((2 * v ^ 39 - 8 * v ^ 41) + 7 * v ^ 43) - 2 * v ^ 45, (256 * v ^ 39 - 448 * v ^ 41) + 192 * v ^ 43, Unknown(), ((-52 * v ^ 39 + 128 * v ^ 41) - 96 * v ^ 43) + 20 * v ^ 45, ((-136 * v ^ 39 + 360 * v ^ 41) - 312 * v ^ 43) + 88 * v ^ 45, (((34 * v ^ 39 - 122 * v ^ 41) + 148 * v ^ 43) - 78 * v ^ 45) + 14 * v ^ 47, Unknown(), (((12 * v ^ 39 - 44 * v ^ 41) + 48 * v ^ 43) - 20 * v ^ 45) + 4 * v ^ 47, (((50 * v ^ 39 - 176 * v ^ 41) + 224 * v ^ 43) - 122 * v ^ 45) + 24 * v ^ 47, ((((11 * v ^ 39 - 45 * v ^ 41) + 78 * v ^ 43) - 72 * v ^ 45) + 33 * v ^ 47) - 6 * v ^ 49, (((24 * v ^ 39 - 180 * v ^ 43) + 288 * v ^ 45) - 108 * v ^ 47) + 8 * v ^ 51, (((((60 * v ^ 39 - 120 * v ^ 41) - 36 * v ^ 43) + 216 * v ^ 45) - 60 * v ^ 47) - 72 * v ^ 49) + 44 * v ^ 51, (((-2 * v ^ 39 + 27 * v ^ 43) - 63 * v ^ 45) + 41 * v ^ 47) - 7 * v ^ 49, (((((-12 * v ^ 39 + 12 * v ^ 41 + 96 * v ^ 43) - 236 * v ^ 45) + 196 * v ^ 47) - 48 * v ^ 49) - 4 * v ^ 51) + 4 * v ^ 53, (((((-31 * v ^ 39 + 93 * v ^ 41) - 36 * v ^ 43) - 130 * v ^ 45) + 134 * v ^ 47 + 12 * v ^ 49) - 55 * v ^ 51) + 21 * v ^ 53, Unknown(), (((((v ^ 39 - v ^ 41) - 14 * v ^ 43) + 46 * v ^ 45) - 52 * v ^ 47) + 23 * v ^ 49) - 3 * v ^ 51, ((-3 * v ^ 43 + 8 * v ^ 45) - 9 * v ^ 47) + 3 * v ^ 49, (((-(v ^ 43) - 2 * v ^ 45) + 15 * v ^ 47) - 16 * v ^ 49) + 4 * v ^ 51, -480 * v ^ 39 + 416 * v ^ 41, ((((((((2 * v ^ 39 - 8 * v ^ 43) + 6 * v ^ 45) - 24 * v ^ 47) + 74 * v ^ 49) - 86 * v ^ 51) + 38 * v ^ 53) - 6 * v ^ 55) + 2 * v ^ 57) - 2 * v ^ 59, ((-24 * v ^ 39 + 60 * v ^ 41) - 36 * v ^ 43) + 8 * v ^ 45, (180 * v ^ 39 - 300 * v ^ 41) + 116 * v ^ 43, Unknown(), ((-95 * v ^ 39 + 246 * v ^ 41) - 202 * v ^ 43) + 53 * v ^ 45, ((-3 * v ^ 49 - 9 * v ^ 51) + 27 * v ^ 53 + 8 * q ^ 27) - 15 * v ^ 55, Unknown(), Unknown(), (((12 * v ^ 117 - 40 * v ^ 119) + 45 * v ^ 121) - 18 * v ^ 123) + 2 * v ^ 125, Unknown(), 0, (((27 * v ^ 39 - 93 * v ^ 41) + 112 * v ^ 43) - 55 * v ^ 45) + 9 * v ^ 47, Unknown(), 896 * q ^ 39, Unknown(), (256 * q ^ 39 - 448 * q ^ 40) + 192 * q ^ 41, ((-52 * q ^ 39 + 128 * q ^ 40) - 96 * q ^ 41) + 20 * q ^ 42, ((-136 * q ^ 39 + 360 * q ^ 40) - 312 * q ^ 41) + 88 * q ^ 42, (((-7 * q ^ 39 + 25 * q ^ 40) - 48 * q ^ 41) + 43 * q ^ 42) - 13 * q ^ 43, ((((11 * q ^ 39 - 45 * q ^ 40) + 78 * q ^ 41) - 72 * q ^ 42) + 33 * q ^ 43) - 6 * q ^ 44, Unknown(), (((24 * q ^ 39 - 180 * q ^ 41) + 288 * q ^ 42) - 108 * q ^ 43) + 8 * q ^ 45, (((((-12 * q ^ 39 + 12 * q ^ 40 + 96 * q ^ 41) - 236 * q ^ 42) + 196 * q ^ 43) - 48 * q ^ 44) - 4 * q ^ 45) + 4 * q ^ 46, (((-2 * q ^ 39 + 27 * q ^ 41) - 63 * q ^ 42) + 41 * q ^ 43) - 7 * q ^ 44, ((-3 * q ^ 41 + 8 * q ^ 42) - 9 * q ^ 43) + 3 * q ^ 44, -480 * q ^ 39 + 416 * q ^ 40, (180 * q ^ 39 - 300 * q ^ 40) + 116 * q ^ 41, ((-95 * q ^ 39 + 246 * q ^ 40) - 202 * q ^ 41) + 53 * q ^ 42, ((-3 * q ^ 44 - 9 * q ^ 45) + 27 * q ^ 46 + 8 * v ^ 93) - 15 * q ^ 47, (((-21 * q ^ 39 + 65 * q ^ 40) - 89 * q ^ 41) + 57 * q ^ 42) - 13 * q ^ 43, (((12 * q ^ 78 - 40 * q ^ 79) + 45 * q ^ 80) - 18 * q ^ 81) + 2 * q ^ 82, Unknown(), 896 * v ^ 117, ((((((-4 * q ^ 15 + 2 * q ^ 16 + 90 * q ^ 20) - 192 * q ^ 21) + 105 * q ^ 22) - 32 * v ^ 45) + 32 * v ^ 47 + 70 * q ^ 24) - 116 * q ^ 25) + 45 * q ^ 26, Unknown(), ((-52 * v ^ 117 + 128 * v ^ 119) - 96 * v ^ 121) + 20 * v ^ 123, Unknown(), Unknown(), (((24 * v ^ 117 - 180 * v ^ 121) + 288 * v ^ 123) - 108 * v ^ 125) + 8 * v ^ 129, Unknown(), (((-2 * v ^ 117 + 27 * v ^ 121) - 63 * v ^ 123) + 41 * v ^ 125) - 7 * v ^ 127, ((-3 * v ^ 121 + 8 * v ^ 123) - 9 * v ^ 125) + 3 * v ^ 127, ((((6 * q ^ 15 - 162 * q ^ 20) + 225 * q ^ 21) - 64 * v ^ 45) - 150 * q ^ 24) + 81 * q ^ 25, (180 * v ^ 117 - 300 * v ^ 119) + 116 * v ^ 121, Unknown(), (((-21 * v ^ 117 + 65 * v ^ 119) - 89 * v ^ 121) + 57 * v ^ 123) - 13 * v ^ 125, 896 * q ^ 78, Unknown(), (256 * q ^ 78 - 448 * q ^ 79) + 192 * q ^ 80, ((((-9 * v ^ 39 + 43 * v ^ 41) - 70 * v ^ 43) + 53 * v ^ 45) - 19 * v ^ 47) + 2 * v ^ 49, -480 * q ^ 78 + 416 * q ^ 79, (180 * q ^ 78 - 300 * q ^ 79) + 116 * q ^ 80, Unknown(), ((-52 * q ^ 78 + 128 * q ^ 79) - 96 * q ^ 80) + 20 * q ^ 81, 896 * v ^ 195, Unknown(), (256 * v ^ 195 - 448 * v ^ 197) + 192 * v ^ 199, -480 * v ^ 195 + 416 * v ^ 197, (180 * v ^ 195 - 300 * v ^ 197) + 116 * v ^ 199, Unknown(), ((-52 * v ^ 195 + 128 * v ^ 197) - 96 * v ^ 199) + 20 * v ^ 201]
            end
        f162 = function (q, j)
                return [945, -450 + 495q, (135 - 315q) + 180 * q ^ 2, (210 - 480q) + 255 * q ^ 2, ((-60 + 225q) - 255 * q ^ 2) + 90 * q ^ 3, ((-27 + 108q) - 132 * q ^ 2) + 48 * q ^ 3, -9 + 45q + (63 * j ^ 2 + 54j) * q ^ 2 + 27 * q ^ 3, ((-96 + 342q) - 378 * q ^ 2) + 129 * q ^ 3, (27 + (54 * j ^ 2 + 63j) * q + 45 * q ^ 2) - 9 * q ^ 3, (-14 + (-41 * j ^ 2 - 44j) * q + (46 * j ^ 2 + 52j) * q ^ 2 + 28 * q ^ 3) - 6 * q ^ 4, (((15 - 90q) + 165 * q ^ 2) - 120 * q ^ 3) + 30 * q ^ 4, (((3 - 24q) + 51 * q ^ 2) - 39 * q ^ 3) + 9 * q ^ 4, -3q + (-11 * j ^ 2 - 8j) * q ^ 2 + (10 * j ^ 2 + 7j) * q ^ 3 + 2 * q ^ 4, (-16 + (-59 * j ^ 2 - 65j) * q + (91 * j ^ 2 + 97j) * q ^ 2 + 66 * q ^ 3) - 18 * q ^ 4, (((11 - 65q) + 124 * q ^ 2) - 92 * q ^ 3) + 23 * q ^ 4, (3 - 26q) + (-56 * j ^ 2 - 53j) * q ^ 2 + (46 * j ^ 2 + 40j) * q ^ 3 + 13 * q ^ 4, (((26 - 138q) + 245 * q ^ 2) - 177 * q ^ 3) + 44 * q ^ 4, ((((-1 + 12q) - 38 * q ^ 2) + 47 * q ^ 3) - 24 * q ^ 4) + 4 * q ^ 5, (7 + (37 * j ^ 2 + 39j) * q + (-75 * j ^ 2 - 81j) * q ^ 2 + (79 * j ^ 2 + 83j) * q ^ 3 + 43 * q ^ 4) - 9 * q ^ 5, -(q ^ 2) + (-2 * j ^ 2 - j) * q ^ 3 + j ^ 2 * q ^ 4, Unknown(), (3 + (19 * j ^ 2 + 20j) * q + (-43 * j ^ 2 - 47j) * q ^ 2 + (49 * j ^ 2 + 52j) * q ^ 3 + 28 * q ^ 4) - 6 * q ^ 5, Unknown(), ((((-2 + 22q) - 64 * q ^ 2) + 76 * q ^ 3) - 39 * q ^ 4) + 7 * q ^ 5, (((3q - 13 * q ^ 2) + 17 * q ^ 3) - 8 * q ^ 4) + q ^ 5, q + (7 * j ^ 2 + 6j) * q ^ 2 + (-11 * j ^ 2 - 8j) * q ^ 3 + (6 * j ^ 2 + 4j) * q ^ 4 + q ^ 5, (9 - 135 * q ^ 2) + 288 * q ^ 3 + (162 * j ^ 2 + 189j) * q ^ 4 + 27 * q ^ 6, 0, Unknown(), (3q - 27 * q ^ 2) + 59 * q ^ 3 + (44 * j ^ 2 + 47j) * q ^ 4 + (-7 * j ^ 2 - 10j) * q ^ 5 + 2 * q ^ 6, 0, (((45 - 90q) + (63 * j ^ 2 + 54j) * q ^ 2 + 216 * q ^ 3) - 45 * q ^ 4) + (126 * j ^ 2 + 108j) * q ^ 5 + 63 * q ^ 6, Unknown(), Unknown(), ((((-3 + 6q + 60 * q ^ 2) - 211 * q ^ 3) + (-236 * j ^ 2 - 245j) * q ^ 4 + (78 * j ^ 2 + 96j) * q ^ 5) - 14 * q ^ 6) + 13 * q ^ 7, (q ^ 2 + (8 * j ^ 2 + 6j) * q ^ 3 + (-12 * j ^ 2 - 10j) * q ^ 4 + (5 * j ^ 2 + 6j) * q ^ 5) - j * q ^ 6, -20 + 65q + (19 * j ^ 2 + 22j) * q ^ 2 + (134 * j ^ 2 + 128j) * q ^ 3 + 134 * q ^ 4 + (-37 * j ^ 2 - 31j) * q ^ 5 + (95 * j ^ 2 + 83j) * q ^ 6 + 32 * q ^ 7, 2q + (10 * j ^ 2 + 12j) * q ^ 2 + (-19 * j ^ 2 - 23j) * q ^ 3 + (19 * j ^ 2 + 22j) * q ^ 4 + 11 * q ^ 5 + (3 * j ^ 2 + 2j) * q ^ 6, ((-q + 13 * q ^ 2) - 44 * q ^ 3) + (-54 * j ^ 2 - 55j) * q ^ 4 + (25 * j ^ 2 + 28j) * q ^ 5 + (-2 * j ^ 2 - 4j) * q ^ 6 + q ^ 7, 11 * q ^ 2 + (48 * j ^ 2 + 45j) * q ^ 3 + (-58 * j ^ 2 - 61j) * q ^ 4 + (23 * j ^ 2 + 29j) * q ^ 5 + 2 * q ^ 7, Unknown(), -16 + 48q + (29 * j ^ 2 + 41j) * q ^ 2 + (38 * j ^ 2 + 20j) * q ^ 3 + (-17 * j ^ 2 - 5j) * q ^ 4 + 74 * q ^ 5 + (78 * j ^ 2 + 72j) * q ^ 6 + 22 * q ^ 7, Unknown(), Unknown(), (3 - 10q) + (-5 * j ^ 2 - 8j) * q ^ 2 + (-22 * j ^ 2 - 10j) * q ^ 3 + (35 * j ^ 2 + 20j) * q ^ 4 + (-4 * j ^ 2 + 6j) * q ^ 5 + (-29 * j ^ 2 - 31j) * q ^ 6 + (24 * j ^ 2 + 22j) * q ^ 7 + 6 * q ^ 8, (-4 * j ^ 2 - 3j) * q ^ 3 + (12 * j ^ 2 + 9j) * q ^ 4 + 9 * q ^ 5 + (j ^ 2 + 3j) * q ^ 6, (((3 * j * q ^ 110 - 24 * j * q ^ 111) + 51 * j * q ^ 112) - 39 * j * q ^ 113) + 9 * j * q ^ 114, (((3 * j ^ 2 * q ^ 22 - 24 * j ^ 2 * q ^ 23) + 51 * j ^ 2 * q ^ 24) - 39 * j ^ 2 * q ^ 25) + 9 * j ^ 2 * q ^ 26, ((-4 * q ^ 2 + (-28 * j ^ 2 - 27j) * q ^ 3 + (56 * j ^ 2 + 55j) * q ^ 4 + (-42 * j ^ 2 - 46j) * q ^ 5 + (10 * j ^ 2 + 14j) * q ^ 6) - q ^ 7) + q ^ 8, Unknown(), Unknown(), (7 - 29q) + (-38 * j ^ 2 - 42j) * q ^ 2 + 14 * j * q ^ 3 + (24 * j ^ 2 + 8j) * q ^ 4 + (28 * j ^ 2 + 36j) * q ^ 5 + (-74 * j ^ 2 - 72j) * q ^ 6 + (49 * j ^ 2 + 45j) * q ^ 7 + 11 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-(j ^ 2) * q ^ 22 + 12 * j ^ 2 * q ^ 23) - 38 * j ^ 2 * q ^ 24) + 47 * j ^ 2 * q ^ 25) - 24 * j ^ 2 * q ^ 26) + 4 * j ^ 2 * q ^ 27, Unknown(), Unknown(), (((3 - 6q) + (10 * j ^ 2 + 9j) * q ^ 2 + (-40 * j ^ 2 - 42j) * q ^ 3 + (51 * j ^ 2 + 57j) * q ^ 4 + (-60 * j ^ 2 - 62j) * q ^ 5 + (82 * j ^ 2 + 77j) * q ^ 6 + (-60 * j ^ 2 - 54j) * q ^ 7) - 2 * q ^ 8) + (18 * j ^ 2 + 16j) * q ^ 9 + 6 * q ^ 10, 0, Unknown(), Unknown(), 0, ((7 * q ^ 4 + (16 * j ^ 2 + 18j) * q ^ 5 + (-11 * j ^ 2 - 14j) * q ^ 6) - 2 * q ^ 7) + j * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-j * q ^ 44 + 12 * j * q ^ 45) - 38 * j * q ^ 46) + 47 * j * q ^ 47) - 24 * j * q ^ 48) + 4 * j * q ^ 49, Unknown(), Unknown(), ((((-2 * q ^ 66 + 22 * q ^ 67) - 64 * q ^ 68) + 76 * q ^ 69) - 39 * q ^ 70) + 7 * q ^ 71, Unknown(), Unknown(), ((-3 * q ^ 2 + 4 * q ^ 3) - 15 * q ^ 4) + (-54 * j ^ 2 - 60j) * q ^ 5 + (91 * j ^ 2 + 103j) * q ^ 6 + (-70 * j ^ 2 - 76j) * q ^ 7 + (15 * j ^ 2 + 12j) * q ^ 8 + (-4 * j ^ 2 + 2j) * q ^ 9 + (10 * j ^ 2 + 7j) * q ^ 10 + 2 * q ^ 12, 0, (-16 * j * q ^ 110 + (-6 * j ^ 2 + 59j) * q ^ 111 + (6 * j ^ 2 - 91j) * q ^ 112 + 66 * j * q ^ 113) - 18 * j * q ^ 114, ((((-2 * j * q ^ 110 + 22 * j * q ^ 111) - 64 * j * q ^ 112) + 76 * j * q ^ 113) - 39 * j * q ^ 114) + 7 * j * q ^ 115, Unknown(), (8 * j ^ 2 + 2j) * q ^ 6 + 21 * q ^ 7 + (15 * j ^ 2 + 24j) * q ^ 8 + (j ^ 2 - 11j) * q ^ 9 + 3 * q ^ 10, (-16 * j ^ 2 * q ^ 22 + (65 * j ^ 2 + 6j) * q ^ 23 + (-97 * j ^ 2 - 6j) * q ^ 24 + 66 * j ^ 2 * q ^ 25) - 18 * j ^ 2 * q ^ 26, Unknown(), (((11 * j * q ^ 44 - 65 * j * q ^ 45) + 124 * j * q ^ 46) - 92 * j * q ^ 47) + 23 * j * q ^ 48, q ^ 46 - q ^ 47, Unknown(), Unknown(), (((3 * j * q ^ 44 - 24 * j * q ^ 45) + 51 * j * q ^ 46) - 39 * j * q ^ 47) + 9 * j * q ^ 48, Unknown(), 945 * j ^ 2 * q ^ 22, -3 * j ^ 2 * q ^ 23 + (8 * j ^ 2 - 3j) * q ^ 24 + (-7 * j ^ 2 + 3j) * q ^ 25 + 2 * j ^ 2 * q ^ 26, (210 * j ^ 2 * q ^ 22 - 480 * j ^ 2 * q ^ 23) + 255 * j ^ 2 * q ^ 24, Unknown(), ((-27 * j ^ 2 * q ^ 22 + 108 * j ^ 2 * q ^ 23) - 132 * j ^ 2 * q ^ 24) + 48 * j ^ 2 * q ^ 25, ((-96 * j ^ 2 * q ^ 22 + 342 * j ^ 2 * q ^ 23) - 378 * j ^ 2 * q ^ 24) + 129 * j ^ 2 * q ^ 25, (((15 * j ^ 2 * q ^ 22 - 90 * j ^ 2 * q ^ 23) + 165 * j ^ 2 * q ^ 24) - 120 * j ^ 2 * q ^ 25) + 30 * j ^ 2 * q ^ 26, Unknown(), (3 * j ^ 2 * q ^ 22 - 26 * j ^ 2 * q ^ 23) + (53 * j ^ 2 - 3j) * q ^ 24 + (-40 * j ^ 2 + 6j) * q ^ 25 + 13 * j ^ 2 * q ^ 26, (((26 * j ^ 2 * q ^ 22 - 138 * j ^ 2 * q ^ 23) + 245 * j ^ 2 * q ^ 24) - 177 * j ^ 2 * q ^ 25) + 44 * j ^ 2 * q ^ 26, (7 * j ^ 2 * q ^ 22 + (-39 * j ^ 2 - 2j) * q ^ 23 + (81 * j ^ 2 + 6j) * q ^ 24 + (-83 * j ^ 2 - 4j) * q ^ 25 + 43 * j ^ 2 * q ^ 26) - 9 * j ^ 2 * q ^ 27, (9 * j ^ 2 * q ^ 22 - 135 * j ^ 2 * q ^ 24) + 288 * j ^ 2 * q ^ 25 + (-189 * j ^ 2 - 27j) * q ^ 26 + 27 * j ^ 2 * q ^ 28, (((45 * j ^ 2 * q ^ 22 - 90 * j ^ 2 * q ^ 23) + (-54 * j ^ 2 + 9j) * q ^ 24 + 216 * j ^ 2 * q ^ 25) - 45 * j ^ 2 * q ^ 26) + (-108 * j ^ 2 + 18j) * q ^ 27 + 63 * j ^ 2 * q ^ 28, 11 * j ^ 2 * q ^ 24 + (-45 * j ^ 2 + 3j) * q ^ 25 + (61 * j ^ 2 + 3j) * q ^ 26 + (-29 * j ^ 2 - 6j) * q ^ 27 + 2 * j ^ 2 * q ^ 29, ((((-3 * j ^ 2 * q ^ 22 + 6 * j ^ 2 * q ^ 23 + 60 * j ^ 2 * q ^ 24) - 211 * j ^ 2 * q ^ 25) + (245 * j ^ 2 + 9j) * q ^ 26 + (-96 * j ^ 2 - 18j) * q ^ 27) - 14 * j ^ 2 * q ^ 28) + 13 * j ^ 2 * q ^ 29, -20 * j ^ 2 * q ^ 22 + 65 * j ^ 2 * q ^ 23 + (-22 * j ^ 2 - 3j) * q ^ 24 + (-128 * j ^ 2 + 6j) * q ^ 25 + 134 * j ^ 2 * q ^ 26 + (31 * j ^ 2 - 6j) * q ^ 27 + (-83 * j ^ 2 + 12j) * q ^ 28 + 32 * j ^ 2 * q ^ 29, Unknown(), ((-4 * j ^ 2 * q ^ 24 + (27 * j ^ 2 - j) * q ^ 25 + (-55 * j ^ 2 + j) * q ^ 26 + (46 * j ^ 2 + 4j) * q ^ 27 + (-14 * j ^ 2 - 4j) * q ^ 28) - j ^ 2 * q ^ 29) + j ^ 2 * q ^ 30, (3 * j ^ 2 - j) * q ^ 25 + (-9 * j ^ 2 + 3j) * q ^ 26 + 9 * j ^ 2 * q ^ 27 + (-3 * j ^ 2 - 2j) * q ^ 28, ((7 * j ^ 2 * q ^ 26 + (-18 * j ^ 2 - 2j) * q ^ 27 + (14 * j ^ 2 + 3j) * q ^ 28) - 2 * j ^ 2 * q ^ 29) + q ^ 30, -450 * j ^ 2 * q ^ 22 + 495 * j ^ 2 * q ^ 23, ((-3 * j ^ 2 * q ^ 24 + 4 * j ^ 2 * q ^ 25) - 15 * j ^ 2 * q ^ 26) + (60 * j ^ 2 + 6j) * q ^ 27 + (-103 * j ^ 2 - 12j) * q ^ 28 + (76 * j ^ 2 + 6j) * q ^ 29 + (-12 * j ^ 2 + 3j) * q ^ 30 + (-2 * j ^ 2 - 6j) * q ^ 31 + (-7 * j ^ 2 + 3j) * q ^ 32 + 2 * j ^ 2 * q ^ 34, -9 * j ^ 2 * q ^ 22 + 45 * j ^ 2 * q ^ 23 + (-54 * j ^ 2 + 9j) * q ^ 24 + 27 * j ^ 2 * q ^ 25, (135 * j ^ 2 * q ^ 22 - 315 * j ^ 2 * q ^ 23) + 180 * j ^ 2 * q ^ 24, Unknown(), ((-60 * j ^ 2 * q ^ 22 + 225 * j ^ 2 * q ^ 23) - 255 * j ^ 2 * q ^ 24) + 90 * j ^ 2 * q ^ 25, (-2 * j ^ 2 + 6j) * q ^ 28 + 21 * j ^ 2 * q ^ 29 + (-24 * j ^ 2 - 9j) * q ^ 30 + (11 * j ^ 2 + 12j) * q ^ 31 + 3 * j ^ 2 * q ^ 32, Unknown(), Unknown(), (((3 * q ^ 66 - 24 * q ^ 67) + 51 * q ^ 68) - 39 * q ^ 69) + 9 * q ^ 70, Unknown(), 0, (((11 * j ^ 2 * q ^ 22 - 65 * j ^ 2 * q ^ 23) + 124 * j ^ 2 * q ^ 24) - 92 * j ^ 2 * q ^ 25) + 23 * j ^ 2 * q ^ 26, Unknown(), 945 * j * q ^ 44, Unknown(), (210 * j * q ^ 44 - 480 * j * q ^ 45) + 255 * j * q ^ 46, ((-27 * j * q ^ 44 + 108 * j * q ^ 45) - 132 * j * q ^ 46) + 48 * j * q ^ 47, ((-96 * j * q ^ 44 + 342 * j * q ^ 45) - 378 * j * q ^ 46) + 129 * j * q ^ 47, (-14 * j * q ^ 44 + (-3 * j ^ 2 + 41j) * q ^ 45 + (6 * j ^ 2 - 46j) * q ^ 46 + 28 * j * q ^ 47) - 6 * j * q ^ 48, (7 * j * q ^ 44 + (2 * j ^ 2 - 37j) * q ^ 45 + (-6 * j ^ 2 + 75j) * q ^ 46 + (4 * j ^ 2 - 79j) * q ^ 47 + 43 * j * q ^ 48) - 9 * j * q ^ 49, Unknown(), (9 * j * q ^ 44 - 135 * j * q ^ 46) + 288 * j * q ^ 47 + (27 * j ^ 2 - 162j) * q ^ 48 + 27 * j * q ^ 50, ((((-3 * j * q ^ 44 + 6 * j * q ^ 45 + 60 * j * q ^ 46) - 211 * j * q ^ 47) + (-9 * j ^ 2 + 236j) * q ^ 48 + (18 * j ^ 2 - 78j) * q ^ 49) - 14 * j * q ^ 50) + 13 * j * q ^ 51, 11 * j * q ^ 46 + (-3 * j ^ 2 - 48j) * q ^ 47 + (-3 * j ^ 2 + 58j) * q ^ 48 + (6 * j ^ 2 - 23j) * q ^ 49 + 2 * j * q ^ 51, (j ^ 2 + 4j) * q ^ 47 + (-3 * j ^ 2 - 12j) * q ^ 48 + 9 * j * q ^ 49 + (2 * j ^ 2 - j) * q ^ 50, -450 * j * q ^ 44 + 495 * j * q ^ 45, (135 * j * q ^ 44 - 315 * j * q ^ 45) + 180 * j * q ^ 46, ((-60 * j * q ^ 44 + 225 * j * q ^ 45) - 255 * j * q ^ 46) + 90 * j * q ^ 47, (-6 * j ^ 2 - 8j) * q ^ 50 + 21 * j * q ^ 51 + (9 * j ^ 2 - 15j) * q ^ 52 + (-12 * j ^ 2 - j) * q ^ 53 + 3 * j * q ^ 54, (-16 * j * q ^ 44 + (-6 * j ^ 2 + 59j) * q ^ 45 + (6 * j ^ 2 - 91j) * q ^ 46 + 66 * j * q ^ 47) - 18 * j * q ^ 48, (((3 * j ^ 2 * q ^ 88 - 24 * j ^ 2 * q ^ 89) + 51 * j ^ 2 * q ^ 90) - 39 * j ^ 2 * q ^ 91) + 9 * j ^ 2 * q ^ 92, Unknown(), 945 * q ^ 66, (((((((-24 * q ^ 18 + 16 * q ^ 19 + 45 * q ^ 20) - 124 * q ^ 21) + 77 * q ^ 22 + 91 * q ^ 24) - 176 * q ^ 25) + 90 * q ^ 26 + 16 * q ^ 27) - 24 * q ^ 28) + 2 * q ^ 30) - 4 * q ^ 31, Unknown(), ((-27 * q ^ 66 + 108 * q ^ 67) - 132 * q ^ 68) + 48 * q ^ 69, Unknown(), Unknown(), (9 * q ^ 66 - 135 * q ^ 68) + 288 * q ^ 69 + (162 * j ^ 2 + 189j) * q ^ 70 + 27 * q ^ 72, Unknown(), 11 * q ^ 68 + (48 * j ^ 2 + 45j) * q ^ 69 + (-58 * j ^ 2 - 61j) * q ^ 70 + (23 * j ^ 2 + 29j) * q ^ 71 + 2 * q ^ 73, (-4 * j ^ 2 - 3j) * q ^ 69 + (12 * j ^ 2 + 9j) * q ^ 70 + 9 * q ^ 71 + (j ^ 2 + 3j) * q ^ 72, (((((40 * q ^ 18 - 81 * q ^ 20) + 165 * q ^ 21) - 195 * q ^ 24) + 162 * q ^ 25) - 40 * q ^ 27) - 6 * q ^ 30, (135 * q ^ 66 - 315 * q ^ 67) + 180 * q ^ 68, Unknown(), (-16 * q ^ 66 + (-59 * j ^ 2 - 65j) * q ^ 67 + (91 * j ^ 2 + 97j) * q ^ 68 + 66 * q ^ 69) - 18 * q ^ 70, 945 * j ^ 2 * q ^ 88, Unknown(), (210 * j ^ 2 * q ^ 88 - 480 * j ^ 2 * q ^ 89) + 255 * j ^ 2 * q ^ 90, ((((-2 * j ^ 2 * q ^ 22 + 22 * j ^ 2 * q ^ 23) - 64 * j ^ 2 * q ^ 24) + 76 * j ^ 2 * q ^ 25) - 39 * j ^ 2 * q ^ 26) + 7 * j ^ 2 * q ^ 27, -450 * j ^ 2 * q ^ 88 + 495 * j ^ 2 * q ^ 89, (135 * j ^ 2 * q ^ 88 - 315 * j ^ 2 * q ^ 89) + 180 * j ^ 2 * q ^ 90, Unknown(), ((-27 * j ^ 2 * q ^ 88 + 108 * j ^ 2 * q ^ 89) - 132 * j ^ 2 * q ^ 90) + 48 * j ^ 2 * q ^ 91, 945 * j * q ^ 110, Unknown(), (210 * j * q ^ 110 - 480 * j * q ^ 111) + 255 * j * q ^ 112, -450 * j * q ^ 110 + 495 * j * q ^ 111, (135 * j * q ^ 110 - 315 * j * q ^ 111) + 180 * j * q ^ 112, Unknown(), ((-27 * j * q ^ 110 + 108 * j * q ^ 111) - 132 * j * q ^ 112) + 48 * j * q ^ 113]
            end
        f166 = function (q, j)
                return [1260, -630 + 630q, (204 - 426q) + 204 * q ^ 2, (316 - 628q) + 316 * q ^ 2, ((-103 + 314q) - 314 * q ^ 2) + 103 * q ^ 3, ((-47 + 157q) - 157 * q ^ 2) + 47 * q ^ 3, -15 + (-72 * j ^ 2 - 69j) * q + (72 * j ^ 2 + 69j) * q ^ 2 + 15 * q ^ 3, ((-159 + 471q) - 471 * q ^ 2) + 159 * q ^ 3, (33 + (69 * j ^ 2 + 72j) * q + (-69 * j ^ 2 - 72j) * q ^ 2) - 33 * q ^ 3, (-16 + (-51 * j ^ 2 - 53j) * q + (70 * j ^ 2 + 72j) * q ^ 2 + (-51 * j ^ 2 - 53j) * q ^ 3) - 16 * q ^ 4, (((34 - 138q) + 208 * q ^ 2) - 138 * q ^ 3) + 34 * q ^ 4, (((8 - 39q) + 62 * q ^ 2) - 39 * q ^ 3) + 8 * q ^ 4, (6 * j ^ 2 + 5j) * q + (-12 * j ^ 2 - 10j) * q ^ 2 + (6 * j ^ 2 + 5j) * q ^ 3, (-24 + (-88 * j ^ 2 - 90j) * q + (128 * j ^ 2 + 132j) * q ^ 2 + (-88 * j ^ 2 - 90j) * q ^ 3) - 24 * q ^ 4, (((24 - 102q) + 156 * q ^ 2) - 102 * q ^ 3) + 24 * q ^ 4, 8 + (43 * j ^ 2 + 42j) * q + (-72 * j ^ 2 - 68j) * q ^ 2 + (43 * j ^ 2 + 42j) * q ^ 3 + 8 * q ^ 4, (((52 - 209q) + 312 * q ^ 2) - 209 * q ^ 3) + 52 * q ^ 4, ((((-4 + 24q) - 50 * q ^ 2) + 50 * q ^ 3) - 24 * q ^ 4) + 4 * q ^ 5, (12 + (56 * j ^ 2 + 57j) * q + (-108 * j ^ 2 - 111j) * q ^ 2 + (108 * j ^ 2 + 111j) * q ^ 3 + (-56 * j ^ 2 - 57j) * q ^ 4) - 12 * q ^ 5, j ^ 2 * q ^ 2 - j ^ 2 * q ^ 3, Unknown(), (6 + (31 * j ^ 2 + 32j) * q + (-63 * j ^ 2 - 65j) * q ^ 2 + (63 * j ^ 2 + 65j) * q ^ 3 + (-31 * j ^ 2 - 32j) * q ^ 4) - 6 * q ^ 5, Unknown(), ((((-8 + 42q) - 85 * q ^ 2) + 85 * q ^ 3) - 42 * q ^ 4) + 8 * q ^ 5, ((((-1 + 7q) - 16 * q ^ 2) + 16 * q ^ 3) - 7 * q ^ 4) + q ^ 5, (3q + (9 * j ^ 2 + 7j) * q ^ 2 + (-9 * j ^ 2 - 7j) * q ^ 3) - 3 * q ^ 4, 15 + (207 * j ^ 2 + 216j) * q ^ 2 + 384 * q ^ 3 + (207 * j ^ 2 + 216j) * q ^ 4 + 15 * q ^ 6, 0, Unknown(), (-5 * j ^ 2 - 6j) * q + (45 * j ^ 2 + 46j) * q ^ 2 + 84 * q ^ 3 + (45 * j ^ 2 + 46j) * q ^ 4 + (-5 * j ^ 2 - 6j) * q ^ 5, 0, 63 + (144 * j ^ 2 + 138j) * q + (72 * j ^ 2 + 69j) * q ^ 2 + 288 * q ^ 3 + (72 * j ^ 2 + 69j) * q ^ 4 + (144 * j ^ 2 + 138j) * q ^ 5 + 63 * q ^ 6, Unknown(), Unknown(), ((-8 + 7q + (-105 * j ^ 2 - 108j) * q ^ 2 + (294 * j ^ 2 + 300j) * q ^ 3 + (-294 * j ^ 2 - 300j) * q ^ 4 + (105 * j ^ 2 + 108j) * q ^ 5) - 7 * q ^ 6) + 8 * q ^ 7, ((3 * q ^ 2 - 11 * q ^ 3) + 11 * q ^ 4) - 3 * q ^ 5, -32 + (-103 * j ^ 2 - 101j) * q + (36 * j ^ 2 + 34j) * q ^ 2 + (180 * j ^ 2 + 179j) * q ^ 3 + (-180 * j ^ 2 - 179j) * q ^ 4 + (-36 * j ^ 2 - 34j) * q ^ 5 + (103 * j ^ 2 + 101j) * q ^ 6 + 32 * q ^ 7, ((4q - 17 * q ^ 2) + (-27 * j ^ 2 - 29j) * q ^ 3 + (27 * j ^ 2 + 29j) * q ^ 4 + 17 * q ^ 5) - 4 * q ^ 6, -3q + (-25 * j ^ 2 - 26j) * q ^ 2 + (64 * j ^ 2 + 65j) * q ^ 3 + (-64 * j ^ 2 - 65j) * q ^ 4 + (25 * j ^ 2 + 26j) * q ^ 5 + 3 * q ^ 6, ((-22 * j ^ 2 - 24j) * q ^ 2 - 70 * q ^ 3) + 70 * q ^ 4 + (22 * j ^ 2 + 24j) * q ^ 5, Unknown(), -24 + (-84 * j ^ 2 - 82j) * q + (69 * j ^ 2 + 73j) * q ^ 2 + (37 * j ^ 2 + 27j) * q ^ 3 + (-37 * j ^ 2 - 27j) * q ^ 4 + (-69 * j ^ 2 - 73j) * q ^ 5 + (84 * j ^ 2 + 82j) * q ^ 6 + 24 * q ^ 7, Unknown(), Unknown(), (((6 - 24q) + (-24 * j ^ 2 - 26j) * q ^ 2 + (-26 * j ^ 2 - 19j) * q ^ 3 + (64 * j ^ 2 + 54j) * q ^ 4 + (-26 * j ^ 2 - 19j) * q ^ 5 + (-24 * j ^ 2 - 26j) * q ^ 6) - 24 * q ^ 7) + 6 * q ^ 8, (((-(q ^ 2) + 7 * q ^ 3) - 12 * q ^ 4) + 7 * q ^ 5) - q ^ 6, (((-8 * j ^ 2 * q ^ 105 + 39 * j ^ 2 * q ^ 106) - 62 * j ^ 2 * q ^ 107) + 39 * j ^ 2 * q ^ 108) - 8 * j ^ 2 * q ^ 109, (((-8 * j * q ^ 21 + 39 * j * q ^ 22) - 62 * j * q ^ 23) + 39 * j * q ^ 24) - 8 * j * q ^ 25, (((-12 * q ^ 2 + (-45 * j ^ 2 - 47j) * q ^ 3) - 70 * q ^ 4) + (-45 * j ^ 2 - 47j) * q ^ 5) - 12 * q ^ 6, Unknown(), Unknown(), (((12 - 54q) + 77 * q ^ 2 + (16 * j ^ 2 + 23j) * q ^ 3 + (38 * j ^ 2 + 28j) * q ^ 4 + (16 * j ^ 2 + 23j) * q ^ 5 + 77 * q ^ 6) - 54 * q ^ 7) + 12 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((4 * j * q ^ 21 - 24 * j * q ^ 22) + 50 * j * q ^ 23) - 50 * j * q ^ 24) + 24 * j * q ^ 25) - 4 * j * q ^ 26, Unknown(), Unknown(), (((((((6 - 16q) + (6 * j ^ 2 + 5j) * q ^ 2 + (-66 * j ^ 2 - 64j) * q ^ 3) - 105 * q ^ 4) + 112 * q ^ 5) - 105 * q ^ 6) + (-66 * j ^ 2 - 64j) * q ^ 7 + (6 * j ^ 2 + 5j) * q ^ 8) - 16 * q ^ 9) + 6 * q ^ 10, 0, Unknown(), Unknown(), 0, (((-2 * q ^ 3 + (-12 * j ^ 2 - 13j) * q ^ 4) - 20 * q ^ 5) + (-12 * j ^ 2 - 13j) * q ^ 6) - 2 * q ^ 7, Unknown(), Unknown(), Unknown(), ((((-4 * j ^ 2 * q ^ 42 + 24 * j ^ 2 * q ^ 43) - 50 * j ^ 2 * q ^ 44) + 50 * j ^ 2 * q ^ 45) - 24 * j ^ 2 * q ^ 46) + 4 * j ^ 2 * q ^ 47, Unknown(), Unknown(), ((((8 * q ^ 63 - 42 * q ^ 64) + 85 * q ^ 65) - 85 * q ^ 66) + 42 * q ^ 67) - 8 * q ^ 68, Unknown(), Unknown(), (6 * j ^ 2 + 5j) * q ^ 2 + (-14 * j ^ 2 - 12j) * q ^ 3 + (30 * j ^ 2 + 29j) * q ^ 4 + (-84 * j ^ 2 - 88j) * q ^ 5 + (124 * j ^ 2 + 132j) * q ^ 6 + (-84 * j ^ 2 - 88j) * q ^ 7 + (30 * j ^ 2 + 29j) * q ^ 8 + (-14 * j ^ 2 - 12j) * q ^ 9 + (6 * j ^ 2 + 5j) * q ^ 10, 0, 24 * j ^ 2 * q ^ 105 + (-90 * j ^ 2 - 2j) * q ^ 106 + (132 * j ^ 2 + 4j) * q ^ 107 + (-90 * j ^ 2 - 2j) * q ^ 108 + 24 * j ^ 2 * q ^ 109, ((((8 * j ^ 2 * q ^ 105 - 42 * j ^ 2 * q ^ 106) + 85 * j ^ 2 * q ^ 107) - 85 * j ^ 2 * q ^ 108) + 42 * j ^ 2 * q ^ 109) - 8 * j ^ 2 * q ^ 110, Unknown(), (((6 * j ^ 2 + 15j) * q ^ 6 + 21 * q ^ 7) - 21 * q ^ 8) + (-6 * j ^ 2 - 15j) * q ^ 9, 24 * j * q ^ 21 + (2 * j ^ 2 - 88j) * q ^ 22 + (-4 * j ^ 2 + 128j) * q ^ 23 + (2 * j ^ 2 - 88j) * q ^ 24 + 24 * j * q ^ 25, Unknown(), (((24 * j ^ 2 * q ^ 42 - 102 * j ^ 2 * q ^ 43) + 156 * j ^ 2 * q ^ 44) - 102 * j ^ 2 * q ^ 45) + 24 * j ^ 2 * q ^ 46, 0, Unknown(), Unknown(), (((8 * j ^ 2 * q ^ 42 - 39 * j ^ 2 * q ^ 43) + 62 * j ^ 2 * q ^ 44) - 39 * j ^ 2 * q ^ 45) + 8 * j ^ 2 * q ^ 46, Unknown(), -1260 * j * q ^ 21, (j ^ 2 + 6j) * q ^ 22 + (-2 * j ^ 2 - 12j) * q ^ 23 + (j ^ 2 + 6j) * q ^ 24, (-316 * j * q ^ 21 + 628 * j * q ^ 22) - 316 * j * q ^ 23, Unknown(), ((47 * j * q ^ 21 - 157 * j * q ^ 22) + 157 * j * q ^ 23) - 47 * j * q ^ 24, ((159 * j * q ^ 21 - 471 * j * q ^ 22) + 471 * j * q ^ 23) - 159 * j * q ^ 24, (((-34 * j * q ^ 21 + 138 * j * q ^ 22) - 208 * j * q ^ 23) + 138 * j * q ^ 24) - 34 * j * q ^ 25, Unknown(), (-8 * j * q ^ 21 + (j ^ 2 + 43j) * q ^ 22 + (-4 * j ^ 2 - 72j) * q ^ 23 + (j ^ 2 + 43j) * q ^ 24) - 8 * j * q ^ 25, (((-52 * j * q ^ 21 + 209 * j * q ^ 22) - 312 * j * q ^ 23) + 209 * j * q ^ 24) - 52 * j * q ^ 25, -12 * j * q ^ 21 + (-(j ^ 2) + 56j) * q ^ 22 + (3 * j ^ 2 - 108j) * q ^ 23 + (-3 * j ^ 2 + 108j) * q ^ 24 + (j ^ 2 - 56j) * q ^ 25 + 12 * j * q ^ 26, (((-15 * j * q ^ 21 + (-9 * j ^ 2 + 207j) * q ^ 23) - 384 * j * q ^ 24) + (-9 * j ^ 2 + 207j) * q ^ 25) - 15 * j * q ^ 27, (((-63 * j * q ^ 21 + (6 * j ^ 2 + 144j) * q ^ 22 + (3 * j ^ 2 + 72j) * q ^ 23) - 288 * j * q ^ 24) + (3 * j ^ 2 + 72j) * q ^ 25 + (6 * j ^ 2 + 144j) * q ^ 26) - 63 * j * q ^ 27, (((2 * j ^ 2 - 22j) * q ^ 23 + 70 * j * q ^ 24) - 70 * j * q ^ 25) + (-2 * j ^ 2 + 22j) * q ^ 26, ((8 * j * q ^ 21 - 7 * j * q ^ 22) + (3 * j ^ 2 - 105j) * q ^ 23 + (-6 * j ^ 2 + 294j) * q ^ 24 + (6 * j ^ 2 - 294j) * q ^ 25 + (-3 * j ^ 2 + 105j) * q ^ 26 + 7 * j * q ^ 27) - 8 * j * q ^ 28, (32 * j * q ^ 21 + (-2 * j ^ 2 - 103j) * q ^ 22 + (2 * j ^ 2 + 36j) * q ^ 23 + (j ^ 2 + 180j) * q ^ 24 + (-(j ^ 2) - 180j) * q ^ 25 + (-2 * j ^ 2 - 36j) * q ^ 26 + (2 * j ^ 2 + 103j) * q ^ 27) - 32 * j * q ^ 28, Unknown(), 12 * j * q ^ 23 + (2 * j ^ 2 - 45j) * q ^ 24 + 70 * j * q ^ 25 + (2 * j ^ 2 - 45j) * q ^ 26 + 12 * j * q ^ 27, (((j * q ^ 23 - 7 * j * q ^ 24) + 12 * j * q ^ 25) - 7 * j * q ^ 26) + j * q ^ 27, 2 * j * q ^ 24 + (j ^ 2 - 12j) * q ^ 25 + 20 * j * q ^ 26 + (j ^ 2 - 12j) * q ^ 27 + 2 * j * q ^ 28, 630 * j * q ^ 21 - 630 * j * q ^ 22, (j ^ 2 + 6j) * q ^ 23 + (-2 * j ^ 2 - 14j) * q ^ 24 + (j ^ 2 + 30j) * q ^ 25 + (4 * j ^ 2 - 84j) * q ^ 26 + (-8 * j ^ 2 + 124j) * q ^ 27 + (4 * j ^ 2 - 84j) * q ^ 28 + (j ^ 2 + 30j) * q ^ 29 + (-2 * j ^ 2 - 14j) * q ^ 30 + (j ^ 2 + 6j) * q ^ 31, (15 * j * q ^ 21 + (-3 * j ^ 2 - 72j) * q ^ 22 + (3 * j ^ 2 + 72j) * q ^ 23) - 15 * j * q ^ 24, (-204 * j * q ^ 21 + 426 * j * q ^ 22) - 204 * j * q ^ 23, Unknown(), ((103 * j * q ^ 21 - 314 * j * q ^ 22) + 314 * j * q ^ 23) - 103 * j * q ^ 24, ((-9 * j ^ 2 + 6j) * q ^ 27 - 21 * j * q ^ 28) + 21 * j * q ^ 29 + (9 * j ^ 2 - 6j) * q ^ 30, Unknown(), Unknown(), (((-8 * q ^ 63 + 39 * q ^ 64) - 62 * q ^ 65) + 39 * q ^ 66) - 8 * q ^ 67, Unknown(), 0, (((-24 * j * q ^ 21 + 102 * j * q ^ 22) - 156 * j * q ^ 23) + 102 * j * q ^ 24) - 24 * j * q ^ 25, Unknown(), 1260 * j ^ 2 * q ^ 42, Unknown(), (316 * j ^ 2 * q ^ 42 - 628 * j ^ 2 * q ^ 43) + 316 * j ^ 2 * q ^ 44, ((-47 * j ^ 2 * q ^ 42 + 157 * j ^ 2 * q ^ 43) - 157 * j ^ 2 * q ^ 44) + 47 * j ^ 2 * q ^ 45, ((-159 * j ^ 2 * q ^ 42 + 471 * j ^ 2 * q ^ 43) - 471 * j ^ 2 * q ^ 44) + 159 * j ^ 2 * q ^ 45, (-16 * j ^ 2 * q ^ 42 + (53 * j ^ 2 + 2j) * q ^ 43 + (-72 * j ^ 2 - 2j) * q ^ 44 + (53 * j ^ 2 + 2j) * q ^ 45) - 16 * j ^ 2 * q ^ 46, (12 * j ^ 2 * q ^ 42 + (-57 * j ^ 2 - j) * q ^ 43 + (111 * j ^ 2 + 3j) * q ^ 44 + (-111 * j ^ 2 - 3j) * q ^ 45 + (57 * j ^ 2 + j) * q ^ 46) - 12 * j ^ 2 * q ^ 47, Unknown(), 15 * j ^ 2 * q ^ 42 + (-216 * j ^ 2 - 9j) * q ^ 44 + 384 * j ^ 2 * q ^ 45 + (-216 * j ^ 2 - 9j) * q ^ 46 + 15 * j ^ 2 * q ^ 48, ((-8 * j ^ 2 * q ^ 42 + 7 * j ^ 2 * q ^ 43 + (108 * j ^ 2 + 3j) * q ^ 44 + (-300 * j ^ 2 - 6j) * q ^ 45 + (300 * j ^ 2 + 6j) * q ^ 46 + (-108 * j ^ 2 - 3j) * q ^ 47) - 7 * j ^ 2 * q ^ 48) + 8 * j ^ 2 * q ^ 49, ((24 * j ^ 2 + 2j) * q ^ 44 - 70 * j ^ 2 * q ^ 45) + 70 * j ^ 2 * q ^ 46 + (-24 * j ^ 2 - 2j) * q ^ 47, (((-(j ^ 2) * q ^ 44 + 7 * j ^ 2 * q ^ 45) - 12 * j ^ 2 * q ^ 46) + 7 * j ^ 2 * q ^ 47) - j ^ 2 * q ^ 48, -630 * j ^ 2 * q ^ 42 + 630 * j ^ 2 * q ^ 43, (204 * j ^ 2 * q ^ 42 - 426 * j ^ 2 * q ^ 43) + 204 * j ^ 2 * q ^ 44, ((-103 * j ^ 2 * q ^ 42 + 314 * j ^ 2 * q ^ 43) - 314 * j ^ 2 * q ^ 44) + 103 * j ^ 2 * q ^ 45, (((-15 * j ^ 2 - 9j) * q ^ 48 + 21 * j ^ 2 * q ^ 49) - 21 * j ^ 2 * q ^ 50) + (15 * j ^ 2 + 9j) * q ^ 51, (-24 * j ^ 2 * q ^ 42 + (90 * j ^ 2 + 2j) * q ^ 43 + (-132 * j ^ 2 - 4j) * q ^ 44 + (90 * j ^ 2 + 2j) * q ^ 45) - 24 * j ^ 2 * q ^ 46, (((8 * j * q ^ 84 - 39 * j * q ^ 85) + 62 * j * q ^ 86) - 39 * j * q ^ 87) + 8 * j * q ^ 88, Unknown(), -1260 * q ^ 63, (((((-18 * q ^ 18 + 12 * q ^ 19 + 90 * q ^ 20) - 184 * q ^ 21) + 98 * q ^ 22 + 98 * q ^ 24) - 184 * q ^ 25) + 90 * q ^ 26 + 12 * q ^ 27) - 18 * q ^ 28, Unknown(), ((47 * q ^ 63 - 157 * q ^ 64) + 157 * q ^ 65) - 47 * q ^ 66, Unknown(), Unknown(), (((-15 * q ^ 63 + (-207 * j ^ 2 - 216j) * q ^ 65) - 384 * q ^ 66) + (-207 * j ^ 2 - 216j) * q ^ 67) - 15 * q ^ 69, Unknown(), (((22 * j ^ 2 + 24j) * q ^ 65 + 70 * q ^ 66) - 70 * q ^ 67) + (-22 * j ^ 2 - 24j) * q ^ 68, (((q ^ 65 - 7 * q ^ 66) + 12 * q ^ 67) - 7 * q ^ 68) + q ^ 69, ((((30 * q ^ 18 - 162 * q ^ 20) + 210 * q ^ 21) - 210 * q ^ 24) + 162 * q ^ 25) - 30 * q ^ 27, (-204 * q ^ 63 + 426 * q ^ 64) - 204 * q ^ 65, Unknown(), 24 * q ^ 63 + (88 * j ^ 2 + 90j) * q ^ 64 + (-128 * j ^ 2 - 132j) * q ^ 65 + (88 * j ^ 2 + 90j) * q ^ 66 + 24 * q ^ 67, 1260 * j * q ^ 84, Unknown(), (316 * j * q ^ 84 - 628 * j * q ^ 85) + 316 * j * q ^ 86, ((((8 * j * q ^ 21 - 42 * j * q ^ 22) + 85 * j * q ^ 23) - 85 * j * q ^ 24) + 42 * j * q ^ 25) - 8 * j * q ^ 26, -630 * j * q ^ 84 + 630 * j * q ^ 85, (204 * j * q ^ 84 - 426 * j * q ^ 85) + 204 * j * q ^ 86, Unknown(), ((-47 * j * q ^ 84 + 157 * j * q ^ 85) - 157 * j * q ^ 86) + 47 * j * q ^ 87, -1260 * j ^ 2 * q ^ 105, Unknown(), (-316 * j ^ 2 * q ^ 105 + 628 * j ^ 2 * q ^ 106) - 316 * j ^ 2 * q ^ 107, 630 * j ^ 2 * q ^ 105 - 630 * j ^ 2 * q ^ 106, (-204 * j ^ 2 * q ^ 105 + 426 * j ^ 2 * q ^ 106) - 204 * j ^ 2 * q ^ 107, Unknown(), ((47 * j ^ 2 * q ^ 105 - 157 * j ^ 2 * q ^ 106) + 157 * j ^ 2 * q ^ 107) - 47 * j ^ 2 * q ^ 108]
            end
        f168 = (q->begin
                    [1280, -640 + 640q, (208 - 432q) + 208 * q ^ 2, (320 - 640q) + 320 * q ^ 2, ((-104 + 320q) - 320 * q ^ 2) + 104 * q ^ 3, ((-48 + 160q) - 160 * q ^ 2) + 48 * q ^ 3, ((-16 + 72q) - 72 * q ^ 2) + 16 * q ^ 3, ((-160 + 480q) - 480 * q ^ 2) + 160 * q ^ 3, ((32 - 72q) + 72 * q ^ 2) - 32 * q ^ 3, (((-16 + 52q) - 72 * q ^ 2) + 52 * q ^ 3) - 16 * q ^ 4, (((34 - 140q) + 214 * q ^ 2) - 140 * q ^ 3) + 34 * q ^ 4, (((8 - 40q) + 64 * q ^ 2) - 40 * q ^ 3) + 8 * q ^ 4, (-6q + 14 * q ^ 2) - 6 * q ^ 3, (((-24 + 90q) - 130 * q ^ 2) + 90 * q ^ 3) - 24 * q ^ 4, (((24 - 104q) + 160 * q ^ 2) - 104 * q ^ 3) + 24 * q ^ 4, (((8 - 44q) + 72 * q ^ 2) - 44 * q ^ 3) + 8 * q ^ 4, (((52 - 212q) + 320 * q ^ 2) - 212 * q ^ 3) + 52 * q ^ 4, ((((-4 + 24q) - 52 * q ^ 2) + 52 * q ^ 3) - 24 * q ^ 4) + 4 * q ^ 5, ((((12 - 57q) + 110 * q ^ 2) - 110 * q ^ 3) + 57 * q ^ 4) - 12 * q ^ 5, -2 * q ^ 2 + 2 * q ^ 3, Unknown(), ((((6 - 32q) + 64 * q ^ 2) - 64 * q ^ 3) + 32 * q ^ 4) - 6 * q ^ 5, Unknown(), ((((-8 + 42q) - 88 * q ^ 2) + 88 * q ^ 3) - 42 * q ^ 4) + 8 * q ^ 5, ((((-1 + 7q) - 17 * q ^ 2) + 17 * q ^ 3) - 7 * q ^ 4) + q ^ 5, ((3q - 10 * q ^ 2) + 10 * q ^ 3) - 3 * q ^ 4, (((16 - 216 * q ^ 2) + 384 * q ^ 3) - 216 * q ^ 4) + 16 * q ^ 6, -(q ^ 3), Unknown(), (((6q - 46 * q ^ 2) + 80 * q ^ 3) - 46 * q ^ 4) + 6 * q ^ 5, -(q ^ 15), (((((64 - 144q) - 72 * q ^ 2) + 288 * q ^ 3) - 72 * q ^ 4) - 144 * q ^ 5) + 64 * q ^ 6, Unknown(), Unknown(), (((((-8 + 8q + 108 * q ^ 2) - 300 * q ^ 3) + 300 * q ^ 4) - 108 * q ^ 5) - 8 * q ^ 6) + 8 * q ^ 7, ((3 * q ^ 2 - 10 * q ^ 3) + 10 * q ^ 4) - 3 * q ^ 5, (((((-32 + 104q) - 36 * q ^ 2) - 180 * q ^ 3) + 180 * q ^ 4 + 36 * q ^ 5) - 104 * q ^ 6) + 32 * q ^ 7, ((((4q - 17 * q ^ 2) + 30 * q ^ 3) - 30 * q ^ 4) + 17 * q ^ 5) - 4 * q ^ 6, ((((-3q + 26 * q ^ 2) - 63 * q ^ 3) + 63 * q ^ 4) - 26 * q ^ 5) + 3 * q ^ 6, ((24 * q ^ 2 - 68 * q ^ 3) + 68 * q ^ 4) - 24 * q ^ 5, Unknown(), (((((-24 + 84q) - 72 * q ^ 2) - 32 * q ^ 3) + 32 * q ^ 4 + 72 * q ^ 5) - 84 * q ^ 6) + 24 * q ^ 7, Unknown(), Unknown(), (((((6 - 24q) + 25 * q ^ 2 + 23 * q ^ 3) - 58 * q ^ 4) + 23 * q ^ 5 + 25 * q ^ 6) - 24 * q ^ 7) + 6 * q ^ 8, (((-(q ^ 2) + 7 * q ^ 3) - 10 * q ^ 4) + 7 * q ^ 5) - q ^ 6, (((8 * q ^ 105 - 40 * q ^ 106) + 64 * q ^ 107) - 40 * q ^ 108) + 8 * q ^ 109, (((8 * q ^ 21 - 40 * q ^ 22) + 64 * q ^ 23) - 40 * q ^ 24) + 8 * q ^ 25, (((-12 * q ^ 2 + 46 * q ^ 3) - 68 * q ^ 4) + 46 * q ^ 5) - 12 * q ^ 6, Unknown(), Unknown(), (((((((12 - 54q) + 78 * q ^ 2) - 20 * q ^ 3) - 32 * q ^ 4) - 20 * q ^ 5) + 78 * q ^ 6) - 54 * q ^ 7) + 12 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((-4 * q ^ 21 + 24 * q ^ 22) - 52 * q ^ 23) + 52 * q ^ 24) - 24 * q ^ 25) + 4 * q ^ 26, Unknown(), Unknown(), (((((((((6 - 16q) - 6 * q ^ 2) + 68 * q ^ 3) - 108 * q ^ 4) + 112 * q ^ 5) - 108 * q ^ 6) + 68 * q ^ 7) - 6 * q ^ 8) - 16 * q ^ 9) + 6 * q ^ 10, -(q ^ 6), Unknown(), Unknown(), -(q ^ 12), (((-2 * q ^ 3 + 12 * q ^ 4) - 20 * q ^ 5) + 12 * q ^ 6) - 2 * q ^ 7, Unknown(), Unknown(), Unknown(), ((((-4 * q ^ 42 + 24 * q ^ 43) - 52 * q ^ 44) + 52 * q ^ 45) - 24 * q ^ 46) + 4 * q ^ 47, Unknown(), Unknown(), ((((-8 * q ^ 63 + 42 * q ^ 64) - 88 * q ^ 65) + 88 * q ^ 66) - 42 * q ^ 67) + 8 * q ^ 68, Unknown(), Unknown(), (((((((-6 * q ^ 2 + 12 * q ^ 3) - 30 * q ^ 4) + 84 * q ^ 5) - 136 * q ^ 6) + 84 * q ^ 7) - 30 * q ^ 8) + 12 * q ^ 9) - 6 * q ^ 10, -(q ^ 9), (((-24 * q ^ 105 + 90 * q ^ 106) - 130 * q ^ 107) + 90 * q ^ 108) - 24 * q ^ 109, ((((-8 * q ^ 105 + 42 * q ^ 106) - 88 * q ^ 107) + 88 * q ^ 108) - 42 * q ^ 109) + 8 * q ^ 110, Unknown(), ((-7 * q ^ 6 + 21 * q ^ 7) - 21 * q ^ 8) + 7 * q ^ 9, (((-24 * q ^ 21 + 90 * q ^ 22) - 130 * q ^ 23) + 90 * q ^ 24) - 24 * q ^ 25, Unknown(), (((24 * q ^ 42 - 104 * q ^ 43) + 160 * q ^ 44) - 104 * q ^ 45) + 24 * q ^ 46, -(q ^ 44) + q ^ 45, Unknown(), Unknown(), (((8 * q ^ 42 - 40 * q ^ 43) + 64 * q ^ 44) - 40 * q ^ 45) + 8 * q ^ 46, Unknown(), 1280 * q ^ 21, (-6 * q ^ 22 + 14 * q ^ 23) - 6 * q ^ 24, (320 * q ^ 21 - 640 * q ^ 22) + 320 * q ^ 23, Unknown(), ((-48 * q ^ 21 + 160 * q ^ 22) - 160 * q ^ 23) + 48 * q ^ 24, ((-160 * q ^ 21 + 480 * q ^ 22) - 480 * q ^ 23) + 160 * q ^ 24, (((34 * q ^ 21 - 140 * q ^ 22) + 214 * q ^ 23) - 140 * q ^ 24) + 34 * q ^ 25, Unknown(), (((8 * q ^ 21 - 44 * q ^ 22) + 72 * q ^ 23) - 44 * q ^ 24) + 8 * q ^ 25, (((52 * q ^ 21 - 212 * q ^ 22) + 320 * q ^ 23) - 212 * q ^ 24) + 52 * q ^ 25, ((((12 * q ^ 21 - 57 * q ^ 22) + 110 * q ^ 23) - 110 * q ^ 24) + 57 * q ^ 25) - 12 * q ^ 26, (((16 * q ^ 21 - 216 * q ^ 23) + 384 * q ^ 24) - 216 * q ^ 25) + 16 * q ^ 27, (((((64 * q ^ 21 - 144 * q ^ 22) - 72 * q ^ 23) + 288 * q ^ 24) - 72 * q ^ 25) - 144 * q ^ 26) + 64 * q ^ 27, ((24 * q ^ 23 - 68 * q ^ 24) + 68 * q ^ 25) - 24 * q ^ 26, (((((-8 * q ^ 21 + 8 * q ^ 22 + 108 * q ^ 23) - 300 * q ^ 24) + 300 * q ^ 25) - 108 * q ^ 26) - 8 * q ^ 27) + 8 * q ^ 28, (((((-32 * q ^ 21 + 104 * q ^ 22) - 36 * q ^ 23) - 180 * q ^ 24) + 180 * q ^ 25 + 36 * q ^ 26) - 104 * q ^ 27) + 32 * q ^ 28, Unknown(), (((-12 * q ^ 23 + 46 * q ^ 24) - 68 * q ^ 25) + 46 * q ^ 26) - 12 * q ^ 27, (((-(q ^ 23) + 7 * q ^ 24) - 10 * q ^ 25) + 7 * q ^ 26) - q ^ 27, (((-2 * q ^ 24 + 12 * q ^ 25) - 20 * q ^ 26) + 12 * q ^ 27) - 2 * q ^ 28, -640 * q ^ 21 + 640 * q ^ 22, (((((((-6 * q ^ 23 + 12 * q ^ 24) - 30 * q ^ 25) + 84 * q ^ 26) - 136 * q ^ 27) + 84 * q ^ 28) - 30 * q ^ 29) + 12 * q ^ 30) - 6 * q ^ 31, ((-16 * q ^ 21 + 72 * q ^ 22) - 72 * q ^ 23) + 16 * q ^ 24, (208 * q ^ 21 - 432 * q ^ 22) + 208 * q ^ 23, Unknown(), ((-104 * q ^ 21 + 320 * q ^ 22) - 320 * q ^ 23) + 104 * q ^ 24, ((-7 * q ^ 27 + 21 * q ^ 28) - 21 * q ^ 29) + 7 * q ^ 30, Unknown(), Unknown(), (((8 * q ^ 63 - 40 * q ^ 64) + 64 * q ^ 65) - 40 * q ^ 66) + 8 * q ^ 67, Unknown(), -(q ^ 18), (((24 * q ^ 21 - 104 * q ^ 22) + 160 * q ^ 23) - 104 * q ^ 24) + 24 * q ^ 25, Unknown(), 1280 * q ^ 42, Unknown(), (320 * q ^ 42 - 640 * q ^ 43) + 320 * q ^ 44, ((-48 * q ^ 42 + 160 * q ^ 43) - 160 * q ^ 44) + 48 * q ^ 45, ((-160 * q ^ 42 + 480 * q ^ 43) - 480 * q ^ 44) + 160 * q ^ 45, (((-16 * q ^ 42 + 52 * q ^ 43) - 72 * q ^ 44) + 52 * q ^ 45) - 16 * q ^ 46, ((((12 * q ^ 42 - 57 * q ^ 43) + 110 * q ^ 44) - 110 * q ^ 45) + 57 * q ^ 46) - 12 * q ^ 47, Unknown(), (((16 * q ^ 42 - 216 * q ^ 44) + 384 * q ^ 45) - 216 * q ^ 46) + 16 * q ^ 48, (((((-8 * q ^ 42 + 8 * q ^ 43 + 108 * q ^ 44) - 300 * q ^ 45) + 300 * q ^ 46) - 108 * q ^ 47) - 8 * q ^ 48) + 8 * q ^ 49, ((24 * q ^ 44 - 68 * q ^ 45) + 68 * q ^ 46) - 24 * q ^ 47, (((-(q ^ 44) + 7 * q ^ 45) - 10 * q ^ 46) + 7 * q ^ 47) - q ^ 48, -640 * q ^ 42 + 640 * q ^ 43, (208 * q ^ 42 - 432 * q ^ 43) + 208 * q ^ 44, ((-104 * q ^ 42 + 320 * q ^ 43) - 320 * q ^ 44) + 104 * q ^ 45, ((-7 * q ^ 48 + 21 * q ^ 49) - 21 * q ^ 50) + 7 * q ^ 51, (((-24 * q ^ 42 + 90 * q ^ 43) - 130 * q ^ 44) + 90 * q ^ 45) - 24 * q ^ 46, (((8 * q ^ 84 - 40 * q ^ 85) + 64 * q ^ 86) - 40 * q ^ 87) + 8 * q ^ 88, Unknown(), 1280 * q ^ 63, (((((-12 * q ^ 18 + 8 * q ^ 19 + 90 * q ^ 20) - 184 * q ^ 21) + 98 * q ^ 22 + 98 * q ^ 24) - 184 * q ^ 25) + 90 * q ^ 26 + 8 * q ^ 27) - 12 * q ^ 28, Unknown(), ((-48 * q ^ 63 + 160 * q ^ 64) - 160 * q ^ 65) + 48 * q ^ 66, Unknown(), Unknown(), (((16 * q ^ 63 - 216 * q ^ 65) + 384 * q ^ 66) - 216 * q ^ 67) + 16 * q ^ 69, Unknown(), ((24 * q ^ 65 - 68 * q ^ 66) + 68 * q ^ 67) - 24 * q ^ 68, (((-(q ^ 65) + 7 * q ^ 66) - 10 * q ^ 67) + 7 * q ^ 68) - q ^ 69, ((((20 * q ^ 18 - 162 * q ^ 20) + 210 * q ^ 21) - 210 * q ^ 24) + 162 * q ^ 25) - 20 * q ^ 27, (208 * q ^ 63 - 432 * q ^ 64) + 208 * q ^ 65, Unknown(), (((-24 * q ^ 63 + 90 * q ^ 64) - 130 * q ^ 65) + 90 * q ^ 66) - 24 * q ^ 67, 1280 * q ^ 84, Unknown(), (320 * q ^ 84 - 640 * q ^ 85) + 320 * q ^ 86, ((((-8 * q ^ 21 + 42 * q ^ 22) - 88 * q ^ 23) + 88 * q ^ 24) - 42 * q ^ 25) + 8 * q ^ 26, -640 * q ^ 84 + 640 * q ^ 85, (208 * q ^ 84 - 432 * q ^ 85) + 208 * q ^ 86, Unknown(), ((-48 * q ^ 84 + 160 * q ^ 85) - 160 * q ^ 86) + 48 * q ^ 87, 1280 * q ^ 105, Unknown(), (320 * q ^ 105 - 640 * q ^ 106) + 320 * q ^ 107, -640 * q ^ 105 + 640 * q ^ 106, (208 * q ^ 105 - 432 * q ^ 106) + 208 * q ^ 107, Unknown(), ((-48 * q ^ 105 + 160 * q ^ 106) - 160 * q ^ 107) + 48 * q ^ 108]
                end)
        f169 = (q->begin
                    [1280, -640 + 640q, (208 - 432q) + 208 * q ^ 2, (320 - 640q) + 320 * q ^ 2, ((-104 + 320q) - 320 * q ^ 2) + 104 * q ^ 3, ((-48 + 160q) - 160 * q ^ 2) + 48 * q ^ 3, ((-16 + 72q) - 72 * q ^ 2) + 16 * q ^ 3, ((-160 + 480q) - 480 * q ^ 2) + 160 * q ^ 3, ((32 - 72q) + 72 * q ^ 2) - 32 * q ^ 3, (((-16 + 52q) - 72 * q ^ 2) + 52 * q ^ 3) - 16 * q ^ 4, (((34 - 140q) + 214 * q ^ 2) - 140 * q ^ 3) + 34 * q ^ 4, (((8 - 40q) + 64 * q ^ 2) - 40 * q ^ 3) + 8 * q ^ 4, (-6q + 14 * q ^ 2) - 6 * q ^ 3, (((-24 + 90q) - 130 * q ^ 2) + 90 * q ^ 3) - 24 * q ^ 4, (((24 - 104q) + 160 * q ^ 2) - 104 * q ^ 3) + 24 * q ^ 4, (((8 - 44q) + 72 * q ^ 2) - 44 * q ^ 3) + 8 * q ^ 4, (((52 - 212q) + 320 * q ^ 2) - 212 * q ^ 3) + 52 * q ^ 4, ((((-4 + 24q) - 52 * q ^ 2) + 52 * q ^ 3) - 24 * q ^ 4) + 4 * q ^ 5, ((((12 - 57q) + 110 * q ^ 2) - 110 * q ^ 3) + 57 * q ^ 4) - 12 * q ^ 5, -2 * q ^ 2 + 2 * q ^ 3, Unknown(), ((((6 - 32q) + 64 * q ^ 2) - 64 * q ^ 3) + 32 * q ^ 4) - 6 * q ^ 5, Unknown(), ((((-8 + 42q) - 88 * q ^ 2) + 88 * q ^ 3) - 42 * q ^ 4) + 8 * q ^ 5, ((((-1 + 7q) - 17 * q ^ 2) + 17 * q ^ 3) - 7 * q ^ 4) + q ^ 5, ((3q - 10 * q ^ 2) + 10 * q ^ 3) - 3 * q ^ 4, (((16 - 216 * q ^ 2) + 384 * q ^ 3) - 216 * q ^ 4) + 16 * q ^ 6, q ^ 3, Unknown(), (((6q - 46 * q ^ 2) + 80 * q ^ 3) - 46 * q ^ 4) + 6 * q ^ 5, q ^ 15, (((((64 - 144q) - 72 * q ^ 2) + 288 * q ^ 3) - 72 * q ^ 4) - 144 * q ^ 5) + 64 * q ^ 6, Unknown(), Unknown(), (((((-8 + 8q + 108 * q ^ 2) - 300 * q ^ 3) + 300 * q ^ 4) - 108 * q ^ 5) - 8 * q ^ 6) + 8 * q ^ 7, ((3 * q ^ 2 - 10 * q ^ 3) + 10 * q ^ 4) - 3 * q ^ 5, (((((-32 + 104q) - 36 * q ^ 2) - 180 * q ^ 3) + 180 * q ^ 4 + 36 * q ^ 5) - 104 * q ^ 6) + 32 * q ^ 7, ((((4q - 17 * q ^ 2) + 30 * q ^ 3) - 30 * q ^ 4) + 17 * q ^ 5) - 4 * q ^ 6, ((((-3q + 26 * q ^ 2) - 63 * q ^ 3) + 63 * q ^ 4) - 26 * q ^ 5) + 3 * q ^ 6, ((24 * q ^ 2 - 68 * q ^ 3) + 68 * q ^ 4) - 24 * q ^ 5, Unknown(), (((((-24 + 84q) - 72 * q ^ 2) - 32 * q ^ 3) + 32 * q ^ 4 + 72 * q ^ 5) - 84 * q ^ 6) + 24 * q ^ 7, Unknown(), Unknown(), (((((6 - 24q) + 25 * q ^ 2 + 23 * q ^ 3) - 58 * q ^ 4) + 23 * q ^ 5 + 25 * q ^ 6) - 24 * q ^ 7) + 6 * q ^ 8, (((-(q ^ 2) + 7 * q ^ 3) - 10 * q ^ 4) + 7 * q ^ 5) - q ^ 6, (((-8 * q ^ 105 + 40 * q ^ 106) - 64 * q ^ 107) + 40 * q ^ 108) - 8 * q ^ 109, (((-8 * q ^ 21 + 40 * q ^ 22) - 64 * q ^ 23) + 40 * q ^ 24) - 8 * q ^ 25, (((-12 * q ^ 2 + 46 * q ^ 3) - 68 * q ^ 4) + 46 * q ^ 5) - 12 * q ^ 6, Unknown(), Unknown(), (((((((12 - 54q) + 78 * q ^ 2) - 20 * q ^ 3) - 32 * q ^ 4) - 20 * q ^ 5) + 78 * q ^ 6) - 54 * q ^ 7) + 12 * q ^ 8, Unknown(), Unknown(), Unknown(), ((((4 * q ^ 21 - 24 * q ^ 22) + 52 * q ^ 23) - 52 * q ^ 24) + 24 * q ^ 25) - 4 * q ^ 26, Unknown(), Unknown(), (((((((((6 - 16q) - 6 * q ^ 2) + 68 * q ^ 3) - 108 * q ^ 4) + 112 * q ^ 5) - 108 * q ^ 6) + 68 * q ^ 7) - 6 * q ^ 8) - 16 * q ^ 9) + 6 * q ^ 10, -(q ^ 6), Unknown(), Unknown(), -(q ^ 12), (((-2 * q ^ 3 + 12 * q ^ 4) - 20 * q ^ 5) + 12 * q ^ 6) - 2 * q ^ 7, Unknown(), Unknown(), Unknown(), ((((-4 * q ^ 42 + 24 * q ^ 43) - 52 * q ^ 44) + 52 * q ^ 45) - 24 * q ^ 46) + 4 * q ^ 47, Unknown(), Unknown(), ((((8 * q ^ 63 - 42 * q ^ 64) + 88 * q ^ 65) - 88 * q ^ 66) + 42 * q ^ 67) - 8 * q ^ 68, Unknown(), Unknown(), (((((((-6 * q ^ 2 + 12 * q ^ 3) - 30 * q ^ 4) + 84 * q ^ 5) - 136 * q ^ 6) + 84 * q ^ 7) - 30 * q ^ 8) + 12 * q ^ 9) - 6 * q ^ 10, q ^ 9, (((24 * q ^ 105 - 90 * q ^ 106) + 130 * q ^ 107) - 90 * q ^ 108) + 24 * q ^ 109, ((((8 * q ^ 105 - 42 * q ^ 106) + 88 * q ^ 107) - 88 * q ^ 108) + 42 * q ^ 109) - 8 * q ^ 110, Unknown(), ((-7 * q ^ 6 + 21 * q ^ 7) - 21 * q ^ 8) + 7 * q ^ 9, (((24 * q ^ 21 - 90 * q ^ 22) + 130 * q ^ 23) - 90 * q ^ 24) + 24 * q ^ 25, Unknown(), (((24 * q ^ 42 - 104 * q ^ 43) + 160 * q ^ 44) - 104 * q ^ 45) + 24 * q ^ 46, -(q ^ 44) + q ^ 45, Unknown(), Unknown(), (((8 * q ^ 42 - 40 * q ^ 43) + 64 * q ^ 44) - 40 * q ^ 45) + 8 * q ^ 46, Unknown(), -1280 * q ^ 21, (6 * q ^ 22 - 14 * q ^ 23) + 6 * q ^ 24, (-320 * q ^ 21 + 640 * q ^ 22) - 320 * q ^ 23, Unknown(), ((48 * q ^ 21 - 160 * q ^ 22) + 160 * q ^ 23) - 48 * q ^ 24, ((160 * q ^ 21 - 480 * q ^ 22) + 480 * q ^ 23) - 160 * q ^ 24, (((-34 * q ^ 21 + 140 * q ^ 22) - 214 * q ^ 23) + 140 * q ^ 24) - 34 * q ^ 25, Unknown(), (((-8 * q ^ 21 + 44 * q ^ 22) - 72 * q ^ 23) + 44 * q ^ 24) - 8 * q ^ 25, (((-52 * q ^ 21 + 212 * q ^ 22) - 320 * q ^ 23) + 212 * q ^ 24) - 52 * q ^ 25, ((((-12 * q ^ 21 + 57 * q ^ 22) - 110 * q ^ 23) + 110 * q ^ 24) - 57 * q ^ 25) + 12 * q ^ 26, (((-16 * q ^ 21 + 216 * q ^ 23) - 384 * q ^ 24) + 216 * q ^ 25) - 16 * q ^ 27, (((-64 * q ^ 21 + 144 * q ^ 22 + 72 * q ^ 23) - 288 * q ^ 24) + 72 * q ^ 25 + 144 * q ^ 26) - 64 * q ^ 27, ((-24 * q ^ 23 + 68 * q ^ 24) - 68 * q ^ 25) + 24 * q ^ 26, (((((8 * q ^ 21 - 8 * q ^ 22) - 108 * q ^ 23) + 300 * q ^ 24) - 300 * q ^ 25) + 108 * q ^ 26 + 8 * q ^ 27) - 8 * q ^ 28, (((((32 * q ^ 21 - 104 * q ^ 22) + 36 * q ^ 23 + 180 * q ^ 24) - 180 * q ^ 25) - 36 * q ^ 26) + 104 * q ^ 27) - 32 * q ^ 28, Unknown(), (((12 * q ^ 23 - 46 * q ^ 24) + 68 * q ^ 25) - 46 * q ^ 26) + 12 * q ^ 27, (((q ^ 23 - 7 * q ^ 24) + 10 * q ^ 25) - 7 * q ^ 26) + q ^ 27, (((2 * q ^ 24 - 12 * q ^ 25) + 20 * q ^ 26) - 12 * q ^ 27) + 2 * q ^ 28, 640 * q ^ 21 - 640 * q ^ 22, (((((((6 * q ^ 23 - 12 * q ^ 24) + 30 * q ^ 25) - 84 * q ^ 26) + 136 * q ^ 27) - 84 * q ^ 28) + 30 * q ^ 29) - 12 * q ^ 30) + 6 * q ^ 31, ((16 * q ^ 21 - 72 * q ^ 22) + 72 * q ^ 23) - 16 * q ^ 24, (-208 * q ^ 21 + 432 * q ^ 22) - 208 * q ^ 23, Unknown(), ((104 * q ^ 21 - 320 * q ^ 22) + 320 * q ^ 23) - 104 * q ^ 24, ((7 * q ^ 27 - 21 * q ^ 28) + 21 * q ^ 29) - 7 * q ^ 30, Unknown(), Unknown(), (((-8 * q ^ 63 + 40 * q ^ 64) - 64 * q ^ 65) + 40 * q ^ 66) - 8 * q ^ 67, Unknown(), -(q ^ 18), (((-24 * q ^ 21 + 104 * q ^ 22) - 160 * q ^ 23) + 104 * q ^ 24) - 24 * q ^ 25, Unknown(), 1280 * q ^ 42, Unknown(), (320 * q ^ 42 - 640 * q ^ 43) + 320 * q ^ 44, ((-48 * q ^ 42 + 160 * q ^ 43) - 160 * q ^ 44) + 48 * q ^ 45, ((-160 * q ^ 42 + 480 * q ^ 43) - 480 * q ^ 44) + 160 * q ^ 45, (((-16 * q ^ 42 + 52 * q ^ 43) - 72 * q ^ 44) + 52 * q ^ 45) - 16 * q ^ 46, ((((12 * q ^ 42 - 57 * q ^ 43) + 110 * q ^ 44) - 110 * q ^ 45) + 57 * q ^ 46) - 12 * q ^ 47, Unknown(), (((16 * q ^ 42 - 216 * q ^ 44) + 384 * q ^ 45) - 216 * q ^ 46) + 16 * q ^ 48, (((((-8 * q ^ 42 + 8 * q ^ 43 + 108 * q ^ 44) - 300 * q ^ 45) + 300 * q ^ 46) - 108 * q ^ 47) - 8 * q ^ 48) + 8 * q ^ 49, ((24 * q ^ 44 - 68 * q ^ 45) + 68 * q ^ 46) - 24 * q ^ 47, (((-(q ^ 44) + 7 * q ^ 45) - 10 * q ^ 46) + 7 * q ^ 47) - q ^ 48, -640 * q ^ 42 + 640 * q ^ 43, (208 * q ^ 42 - 432 * q ^ 43) + 208 * q ^ 44, ((-104 * q ^ 42 + 320 * q ^ 43) - 320 * q ^ 44) + 104 * q ^ 45, ((-7 * q ^ 48 + 21 * q ^ 49) - 21 * q ^ 50) + 7 * q ^ 51, (((-24 * q ^ 42 + 90 * q ^ 43) - 130 * q ^ 44) + 90 * q ^ 45) - 24 * q ^ 46, (((8 * q ^ 84 - 40 * q ^ 85) + 64 * q ^ 86) - 40 * q ^ 87) + 8 * q ^ 88, Unknown(), -1280 * q ^ 63, (((((-12 * q ^ 18 + 8 * q ^ 19 + 90 * q ^ 20) - 184 * q ^ 21) + 98 * q ^ 22 + 98 * q ^ 24) - 184 * q ^ 25) + 90 * q ^ 26 + 8 * q ^ 27) - 12 * q ^ 28, Unknown(), ((48 * q ^ 63 - 160 * q ^ 64) + 160 * q ^ 65) - 48 * q ^ 66, Unknown(), Unknown(), (((-16 * q ^ 63 + 216 * q ^ 65) - 384 * q ^ 66) + 216 * q ^ 67) - 16 * q ^ 69, Unknown(), ((-24 * q ^ 65 + 68 * q ^ 66) - 68 * q ^ 67) + 24 * q ^ 68, (((q ^ 65 - 7 * q ^ 66) + 10 * q ^ 67) - 7 * q ^ 68) + q ^ 69, ((((20 * q ^ 18 - 162 * q ^ 20) + 210 * q ^ 21) - 210 * q ^ 24) + 162 * q ^ 25) - 20 * q ^ 27, (-208 * q ^ 63 + 432 * q ^ 64) - 208 * q ^ 65, Unknown(), (((24 * q ^ 63 - 90 * q ^ 64) + 130 * q ^ 65) - 90 * q ^ 66) + 24 * q ^ 67, 1280 * q ^ 84, Unknown(), (320 * q ^ 84 - 640 * q ^ 85) + 320 * q ^ 86, ((((8 * q ^ 21 - 42 * q ^ 22) + 88 * q ^ 23) - 88 * q ^ 24) + 42 * q ^ 25) - 8 * q ^ 26, -640 * q ^ 84 + 640 * q ^ 85, (208 * q ^ 84 - 432 * q ^ 85) + 208 * q ^ 86, Unknown(), ((-48 * q ^ 84 + 160 * q ^ 85) - 160 * q ^ 86) + 48 * q ^ 87, -1280 * q ^ 105, Unknown(), (-320 * q ^ 105 + 640 * q ^ 106) - 320 * q ^ 107, 640 * q ^ 105 - 640 * q ^ 106, (-208 * q ^ 105 + 432 * q ^ 106) - 208 * q ^ 107, Unknown(), ((48 * q ^ 105 - 160 * q ^ 106) + 160 * q ^ 107) - 48 * q ^ 108]
                end)
        tbl[:irreducibles] = [map((i->begin
                            x ^ i
                        end), l), map((i->begin
                            y ^ i
                        end), l), adj(f3, x, y, E(3)), adj(f3, y, x, E(3)), adj(f3, x, y, E(3, 2)), adj(f3, y, x, E(3, 2)), adj(f7, x, y, E(3)), adj(f7, y, x, E(3)), adj(f7, x, y, E(3, 2)), adj(f7, y, x, E(3, 2)), adj(f11, x, y, E(3)), adj(f11, y, x, E(3)), adj(f13, x, y), adj(f13, y, x), adj(f15, x, y, E(3)), adj(f15, y, x, E(3)), adj(f15, x, y, E(3, 2)), adj(f15, y, x, E(3, 2)), f19(x, y), f19(y, x), f21(x, y), f21(y, x), adj(f23, x, y), adj(f23, y, x), adj(f25, x, y), adj(f25, y, x), adj(f27, x, y), adj(f27, y, x), adj(f29, x, y, E(3)), adj(f29, x, y, E(3, 2)), adj(f29, y, x, E(3, 2)), adj(f29, y, x, E(3)), adj(f33, x, y, E(3)), adj(f33, y, x, E(3, 2)), adj(f33, x, y, E(3, 2)), adj(f33, y, x, E(3)), adj(f37, x, y), adj(f37, y, x), adj(f39, x, y, E(3)), adj(f40, x, y, E(3)), adj(f39, y, x, E(3)), adj(f40, y, x, E(3)), adj(f40, x, y, E(3, 2)), adj(f39, y, x, E(3, 2)), adj(f39, x, y, E(3, 2)), adj(f40, y, x, E(3, 2)), adj(f47, x, y, E(3)), adj(f47, y, x, E(3)), adj(f47, x, y, E(3, 2)), adj(f47, y, x, E(3, 2)), adj(f51, x, y), adj(f51, y, x), adj(f53, x, y, E(3)), adj(f53, y, x, E(3)), adj(f53, x, y, E(3, 2)), adj(f53, y, x, E(3, 2)), adj(f57, x, y, E(3)), adj(f57, y, x, E(3)), adj(f57, x, y, E(3, 2)), adj(f57, y, x, E(3, 2)), adj(f61, x, y), adj(f62, x, y), adj(f62, y, x), adj(f64, x, y), adj(f64, y, x), adj(f66, x, y), adj(f66, y, x), adj(f68, x, y, E(3)), adj(f68, y, x, E(3)), adj(f68, y, x, E(3, 2)), adj(f68, x, y, E(3, 2)), adj(f72, x, y, E(3)), adj(f72, y, x, E(3)), adj(f72, x, y, E(3, 2)), adj(f72, y, x, E(3, 2)), adj(f76, x, y, E(3)), adj(f76, x, y, E(3, 2)), adj(f76, y, x, E(3)), adj(f76, y, x, E(3, 2)), adj(f80, x, y), adj(f80, y, x), adj(f82, x, y), adj(f82, y, x), adj(f84, x, y, E(3)), adj(f84, y, x, E(3)), adj(f84, x, y, E(3, 2)), adj(f84, y, x, E(3, 2)), adj(f88, x, y, E(3)), adj(f88, y, x, E(3)), adj(f88, x, y, E(3, 2)), adj(f88, y, x, E(3, 2)), adj(f92, x, y, E(3)), adj(f92, y, x, E(3, 2)), adj(f92, x, y, E(3, 2)), adj(f92, y, x, E(3)), adj(f96, x, y, E(3), 1), adj(f96, y, x, E(3), 1), adj(f96, x, y, E(3, 2), 1), adj(f96, y, x, E(3, 2), 1), adj(f96, y, x, E(3, 2), -1), adj(f96, x, y, E(3, 2), -1), adj(f96, y, x, E(3), -1), adj(f96, x, y, E(3), -1), adj(f104, x, y), adj(f104, y, x), adj(f106, x, y), adj(f107, x, y, E(3)), adj(f107, y, x, E(3, 2)), adj(f107, x, y, E(3, 2)), adj(f107, y, x, E(3)), adj(f111, x, y, E(3)), adj(f111, y, x, E(3)), adj(f111, x, y, E(3, 2)), adj(f111, y, x, E(3, 2)), adj(f115, x, y), adj(f115, y, x), adj(f117, x, y), adj(f117, y, x), adj(f119, x, y, E(3)), adj(f119, x, y, E(3, 2)), adj(f121, x, y, E(3)), adj(f121, x, y, E(3, 2)), adj(f123, x, y), adj(f123, y, x), adj(f125, x, y), adj(f126, x, y, E(3)), adj(f126, y, x, E(3)), adj(f128, x, y), adj(f128, y, x), adj(f130, x, y, E(3)), adj(f130, y, x, E(3)), adj(f130, x, y, E(3, 2)), adj(f130, y, x, E(3, 2)), adj(f134, x, y, E(3)), adj(f134, y, x, E(3, 2)), adj(f134, x, y, E(3, 2)), adj(f134, y, x, E(3)), adj(f138, x, y, E(3)), adj(f138, x, y, E(3, 2)), adj(f140, x, y, 1), adj(f140, y, x, 1), adj(f140, x, y, E(3)), adj(f140, y, x, E(3)), adj(f140, x, y, E(3, 2)), adj(f140, y, x, E(3, 2)), adj(f146, x, y, E(3)), adj(f146, y, x, E(3)), adj(f146, x, y, E(3, 2)), adj(f146, y, x, E(3, 2)), adj(f150, x, y, E(3)), adj(f150, y, x, E(3, 2)), adj(f150, x, y, E(3, 2)), adj(f150, y, x, E(3)), adj(f154, x, y, E(3)), adj(f154, y, x, E(3, 2)), adj(f154, x, y, E(3, 2)), adj(f154, y, x, E(3)), adj(f158, x, y, 1), adj(f158, y, x, 1), adj(f158, x, y, -1), adj(f158, y, x, -1), adj(f162, x, y, E(3)), adj(f162, y, x, E(3)), adj(f162, x, y, E(3, 2)), adj(f162, y, x, E(3, 2)), adj(f166, x, y, E(3)), adj(f166, x, y, E(3, 2)), adj(f168, x, y), adj(f169, x, y)]
        tbl[:centralizers] = map((x->begin
                        tbl[:order] // x
                    end), tbl[:classes])
        tbl[:irredinfo] = chevieget(:G34, :IrredInfo)
        return ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
    end)
chevieset(:G34, :CharTable, function ()
        local res
        res = (chevieget(:G34, :HeckeCharTable))(map((x->begin
                            [1, -1]
                        end), 1:6), [])
        res[:identifier] = "G34"
        res[:name] = "G34"
        res[:powermap] = chevieget(:G34, :PowerMaps)
        ((res[:irreducibles])[39:169])[[21, 23, 29, 33, 34, 41, 43, 44, 50, 51, 53, 54, 55, 57, 58, 61, 62, 65, 66, 67, 69, 70, 72, 73, 78, 81, 84, 85, 87, 91, 95, 104, 112, 115, 116, 118, 121, 123, 129, 140, 143, 145, 146, 148, 153, 156, 161, 164, 168]] = [[E(3), E(3, 2), 3, 1, 0, 0, E(3, 2), E(3), E(3, 2), E(3, 2), E(3), 0, E(3), 0, 4, 0, 0, 1, 1, 1, E(3), 0, E(3, 2), 1, 0, 1, 1, 1, E(3), E(3, 2), 3 * E(3), 0, 1, E(3, 2), E(3, 2), E(3), 1, E(3), E(3, 2), E(3, 2), 1, 3 * E(3, 2), E(3), (5 - 3 * ER(-3)) // 2, 1, E(3, 2), E(3, 2), E(3), E(3)], [E(3, 2), E(3), 0, 1, 0, 0, 0, 0, E(3, 2), -2 * E(3, 2), -2 * E(3), 0, E(3), 0, 4, 0, 0, 1, -2, 0, E(3), 0, E(3, 2), 0, 0, -2, E(3), 1, -3 * E(3), E(3, 2), 0, 0, E(3), -2 * E(3, 2), 1, -2 * E(3), -3, E(3), 0, -3 * E(3, 2), 1, 0, 0, 1 - 3 * ER(-3), -2, E(3, 2), -2 * E(3, 2), E(3), -2 * E(3)], [-(E(3)), -(E(3, 2)), 3, -1, 0, 0, -(E(3, 2)), -(E(3)), E(3, 2), E(3, 2), E(3), 0, E(3), 0, -4, 0, 0, 1, 1, -1, -(E(3)), 0, -(E(3, 2)), -1, 0, 1, -1, 1, -(E(3)), E(3, 2), 3 * E(3), 0, -1, E(3, 2), -(E(3, 2)), E(3), -1, E(3), -(E(3, 2)), -(E(3, 2)), 1, 3 * E(3, 2), -(E(3)), (-5 + 3 * ER(-3)) // 2, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [-(E(3, 2)), -(E(3)), 0, -1, 0, 0, 0, 0, E(3, 2), -2 * E(3, 2), -2 * E(3), 0, E(3), 0, -4, 0, 0, 1, -2, 0, -(E(3)), 0, -(E(3, 2)), 0, 0, -2, -(E(3)), 1, 3 * E(3), E(3, 2), 0, 0, -(E(3)), -2 * E(3, 2), -1, -2 * E(3), 3, E(3), 0, 3 * E(3, 2), 1, 0, 0, -1 + 3 * ER(-3), 2, E(3, 2), 2 * E(3, 2), E(3), 2 * E(3)], [E(3), E(3, 2), 0, 1, 0, 0, 0, 0, E(3), -2 * E(3), -2 * E(3, 2), 0, E(3, 2), 0, 4, 0, 0, 1, -2, 0, E(3, 2), 0, E(3), 0, 0, -2, E(3, 2), 1, -3 * E(3, 2), E(3), 0, 0, E(3, 2), -2 * E(3), 1, -2 * E(3, 2), -3, E(3, 2), 0, -3 * E(3), 1, 0, 0, 1 + 3 * ER(-3), -2, E(3), -2 * E(3), E(3, 2), -2 * E(3, 2)], [-(E(3, 2)), -(E(3)), 3, -1, 0, 0, -(E(3)), -(E(3, 2)), E(3), E(3), E(3, 2), 0, E(3, 2), 0, -4, 0, 0, 1, 1, -1, -(E(3, 2)), 0, -(E(3)), -1, 0, 1, -1, 1, -(E(3, 2)), E(3), 3 * E(3, 2), 0, -1, E(3), -(E(3)), E(3, 2), -1, E(3, 2), -(E(3)), -(E(3)), 1, 3 * E(3), -(E(3, 2)), (-5 - 3 * ER(-3)) // 2, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [E(3, 2), E(3), 3, 1, 0, 0, E(3), E(3, 2), E(3), E(3), E(3, 2), 0, E(3, 2), 0, 4, 0, 0, 1, 1, 1, E(3, 2), 0, E(3), 1, 0, 1, 1, 1, E(3, 2), E(3), 3 * E(3, 2), 0, 1, E(3), E(3), E(3, 2), 1, E(3, 2), E(3), E(3), 1, 3 * E(3), E(3, 2), (5 + 3 * ER(-3)) // 2, 1, E(3), E(3), E(3, 2), E(3, 2)], [-(E(3)), -(E(3, 2)), 0, -1, 0, 0, 0, 0, E(3), -2 * E(3), -2 * E(3, 2), 0, E(3, 2), 0, -4, 0, 0, 1, -2, 0, -(E(3, 2)), 0, -(E(3)), 0, 0, -2, -(E(3, 2)), 1, 3 * E(3, 2), E(3), 0, 0, -(E(3, 2)), -2 * E(3), -1, -2 * E(3, 2), 3, E(3, 2), 0, 3 * E(3), 1, 0, 0, -1 - 3 * ER(-3), 2, E(3), 2 * E(3), E(3, 2), 2 * E(3, 2)], [-(E(3)), -(E(3, 2)), -1, -1, 0, 0, E(3, 2), E(3), -(E(3, 2)), -(E(3, 2)), -(E(3)), 0, -(E(3)), 0, 2, 2 * E(3, 2), 2 * E(3), 5, -1, 1, -(E(3)), 0, -(E(3, 2)), 1, 0, -1, -1, -1, E(3), 5 * E(3, 2), -(E(3)), 0, -1, -(E(3, 2)), -(E(3, 2)), -(E(3)), 1, 5 * E(3), E(3, 2), E(3, 2), 5, -(E(3, 2)), E(3), (19 + 3 * ER(-3)) // 2, -1, 5 * E(3, 2), -(E(3, 2)), 5 * E(3), -(E(3))], [E(3), E(3, 2), -1, 1, 0, 0, -(E(3, 2)), -(E(3)), -(E(3, 2)), -(E(3, 2)), -(E(3)), 0, -(E(3)), 0, -2, 2 * E(3, 2), 2 * E(3), 5, -1, -1, E(3), 0, E(3, 2), -1, 0, -1, 1, -1, -(E(3)), 5 * E(3, 2), -(E(3)), 0, 1, -(E(3, 2)), E(3, 2), -(E(3)), -1, 5 * E(3), -(E(3, 2)), -(E(3, 2)), 5, -(E(3, 2)), -(E(3)), (-19 - 3 * ER(-3)) // 2, 1, 5 * E(3, 2), E(3, 2), 5 * E(3), E(3)], [-(E(3, 2)), -(E(3)), -1, -1, 0, 0, E(3), E(3, 2), -(E(3)), -(E(3)), -(E(3, 2)), 0, -(E(3, 2)), 0, 2, 2 * E(3), 2 * E(3, 2), 5, -1, 1, -(E(3, 2)), 0, -(E(3)), 1, 0, -1, -1, -1, E(3, 2), 5 * E(3), -(E(3, 2)), 0, -1, -(E(3)), -(E(3)), -(E(3, 2)), 1, 5 * E(3, 2), E(3), E(3), 5, -(E(3)), E(3, 2), (19 - 3 * ER(-3)) // 2, -1, 5 * E(3), -(E(3)), 5 * E(3, 2), -(E(3, 2))], [E(3, 2), E(3), -1, 1, 0, 0, -(E(3)), -(E(3, 2)), -(E(3)), -(E(3)), -(E(3, 2)), 0, -(E(3, 2)), 0, -2, 2 * E(3), 2 * E(3, 2), 5, -1, -1, E(3, 2), 0, E(3), -1, 0, -1, 1, -1, -(E(3, 2)), 5 * E(3), -(E(3, 2)), 0, 1, -(E(3)), E(3), -(E(3, 2)), -1, 5 * E(3, 2), -(E(3)), -(E(3)), 5, -(E(3)), -(E(3, 2)), (-19 + 3 * ER(-3)) // 2, 1, 5 * E(3), E(3), 5 * E(3, 2), E(3, 2)], [0, 0, -2, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, -2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [-(E(3, 2)), -(E(3)), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -2 * E(3), -2 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -2 * E(3, 2), 0, -1, 0, -(E(3)), 0, 0, 0, 0, 0, 0, -2 * E(3), 0, 5 + 3 * ER(-3), -1, 0, E(3), 0, -(E(3, 2))], [E(3, 2), E(3), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2 * E(3), -2 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -2 * E(3, 2), 0, 1, 0, E(3), 0, 0, 0, 0, 0, 0, -2 * E(3), 0, -5 - 3 * ER(-3), 1, 0, -(E(3)), 0, E(3, 2)], [-(E(3)), -(E(3, 2)), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -2 * E(3, 2), -2 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -2 * E(3), 0, -1, 0, -(E(3, 2)), 0, 0, 0, 0, 0, 0, -2 * E(3, 2), 0, 5 - 3 * ER(-3), -1, 0, E(3, 2), 0, -(E(3))], [E(3), E(3, 2), 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2 * E(3, 2), -2 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -2 * E(3), 0, 1, 0, E(3, 2), 0, 0, 0, 0, 0, 0, -2 * E(3, 2), 0, -5 + 3 * ER(-3), 1, 0, -(E(3, 2)), 0, E(3)], [0, 0, -1, 0, -1, 0, 0, 0, 0, 2 * E(3), 2 * E(3, 2), 0, 0, -(E(3, 2)), -6, 2 * E(3), 2 * E(3, 2), 2, -2, 0, 0, E(3), 0, 0, 0, 2, 0, 0, 0, -2 * E(3), 2 * E(3, 2), 0, 0, -2 * E(3), 0, -2 * E(3, 2), 0, 2 * E(3, 2), 0, 0, -2, 2 * E(3), 0, 0, -3, 2 * E(3), 3 * E(3), -2 * E(3, 2), -3 * E(3, 2)], [0, 0, -1, 0, 1, 0, 0, 0, 0, 2 * E(3), 2 * E(3, 2), 0, 0, E(3, 2), 6, 2 * E(3), 2 * E(3, 2), 2, -2, 0, 0, -(E(3)), 0, 0, 0, 2, 0, 0, 0, -2 * E(3), 2 * E(3, 2), 0, 0, -2 * E(3), 0, -2 * E(3, 2), 0, 2 * E(3, 2), 0, 0, -2, 2 * E(3), 0, 0, 3, 2 * E(3), -3 * E(3), -2 * E(3, 2), 3 * E(3, 2)], [0, 0, -1, 0, -1, 0, 0, 0, 0, 2 * E(3, 2), 2 * E(3), 0, 0, -(E(3)), -6, 2 * E(3, 2), 2 * E(3), 2, -2, 0, 0, E(3, 2), 0, 0, 0, 2, 0, 0, 0, -2 * E(3, 2), 2 * E(3), 0, 0, -2 * E(3, 2), 0, -2 * E(3), 0, 2 * E(3), 0, 0, -2, 2 * E(3, 2), 0, 0, -3, 2 * E(3, 2), 3 * E(3, 2), -2 * E(3), -3 * E(3)], [0, 0, -1, 0, 1, 0, 0, 0, 0, 2 * E(3, 2), 2 * E(3), 0, 0, E(3), 6, 2 * E(3, 2), 2 * E(3), 2, -2, 0, 0, -(E(3, 2)), 0, 0, 0, 2, 0, 0, 0, -2 * E(3, 2), 2 * E(3), 0, 0, -2 * E(3, 2), 0, -2 * E(3), 0, 2 * E(3), 0, 0, -2, 2 * E(3, 2), 0, 0, 3, 2 * E(3, 2), -3 * E(3, 2), -2 * E(3), 3 * E(3)], [0, 0, -4, 0, 0, 0, 0, 0, 0, -2, -2, 1, 0, 0, 0, 2, 2, 4, 2, 0, 0, 0, 0, 0, -1, -2, 0, 0, 0, -4, 2, 0, 0, 2, 0, 2, 0, 4, 0, 0, -4, 2, 0, 0, 0, 4, 0, -4, 0], [1, 1, 0, 0, 0, -1, -1, -1, 0, 1, 1, -1, 0, 0, -2, 0, 0, 4, 1, -1, 0, 0, 0, -1, -1, 1, 1, 0, -4, 4, -3, 2, 1, 1, 1, 1, -4, 4, -1, -4, 4, -3, -1, 7, -2, 4, -2, 4, -2], [-1, -1, 0, 0, 0, 1, 1, 1, 0, 1, 1, -1, 0, 0, 2, 0, 0, 4, 1, 1, 0, 0, 0, 1, -1, 1, -1, 0, 4, 4, -3, -2, -1, 1, -1, 1, 4, 4, 1, 4, 4, -3, 1, -7, 2, 4, 2, 4, 2], [0, 0, 0, -1, 1, 0, -1, -1, 1, -1, -1, 0, 1, 1, 0, 0, 0, 5, -1, -1, -1, 1, -1, -1, 0, -1, 0, 1, -1, 5, 3, 0, 0, -1, 0, -1, -1, 5, -1, -1, 5, 3, -1, -9, 0, 5, 0, 5, 0], [0, 0, 0, 1, -1, 0, 1, 1, 1, -1, -1, 0, 1, -1, 0, 0, 0, 5, -1, 1, 1, -1, 1, 1, 0, -1, 0, 1, 1, 5, 3, 0, 0, -1, 0, -1, 1, 5, 1, 1, 5, 3, 1, 9, 0, 5, 0, 5, 0], [0, 0, -1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, -3, -1, -1, -2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, -2, -2, 5, 1, 0, 1, 0, 1, -2, -2, 1, -2, -2, 5, 1, -3, -3, -2, -3, -2, -3], [0, 0, -1, 0, 0, -1, -1, -1, 0, 1, 1, 0, 0, 0, 3, -1, -1, -2, 1, -1, 0, 0, 0, -1, 0, 1, 0, 0, 2, -2, 5, -1, 0, 1, 0, 1, 2, -2, -1, 2, -2, 5, -1, 3, 3, -2, 3, -2, 3], [-1, -1, -1, 0, 0, 0, E(3, 2), E(3), 0, E(3, 2), E(3), 0, 0, 0, 2, 2 * E(3, 2), 2 * E(3), -2, 1, 1, 0, 0, 0, 1, 0, 1, -(E(3, 2)), 0, -2 * E(3), -2 * E(3, 2), -(E(3)), 0, -(E(3, 2)), E(3, 2), -(E(3)), E(3), -2, -2 * E(3), E(3, 2), -2 * E(3, 2), -2, -(E(3, 2)), E(3), (1 + 9 * ER(-3)) // 2, -1, -2 * E(3, 2), -(E(3, 2)), -2 * E(3), -(E(3))], [1, 1, -1, 0, 0, 0, -(E(3, 2)), -(E(3)), 0, E(3, 2), E(3), 0, 0, 0, -2, 2 * E(3, 2), 2 * E(3), -2, 1, -1, 0, 0, 0, -1, 0, 1, E(3, 2), 0, 2 * E(3), -2 * E(3, 2), -(E(3)), 0, E(3, 2), E(3, 2), E(3), E(3), 2, -2 * E(3), -(E(3, 2)), 2 * E(3, 2), -2, -(E(3, 2)), -(E(3)), (-1 - 9 * ER(-3)) // 2, 1, -2 * E(3, 2), E(3, 2), -2 * E(3), E(3)], [1, 1, -1, 0, 0, 0, -(E(3)), -(E(3, 2)), 0, E(3), E(3, 2), 0, 0, 0, -2, 2 * E(3), 2 * E(3, 2), -2, 1, -1, 0, 0, 0, -1, 0, 1, E(3), 0, 2 * E(3, 2), -2 * E(3), -(E(3, 2)), 0, E(3), E(3), E(3, 2), E(3, 2), 2, -2 * E(3, 2), -(E(3)), 2 * E(3), -2, -(E(3)), -(E(3, 2)), (-1 + 9 * ER(-3)) // 2, 1, -2 * E(3), E(3), -2 * E(3, 2), E(3, 2)], [-1, -1, -1, 0, 0, 0, E(3), E(3, 2), 0, E(3), E(3, 2), 0, 0, 0, 2, 2 * E(3), 2 * E(3, 2), -2, 1, 1, 0, 0, 0, 1, 0, 1, -(E(3)), 0, -2 * E(3, 2), -2 * E(3), -(E(3, 2)), 0, -(E(3)), E(3), -(E(3, 2)), E(3, 2), -2, -2 * E(3, 2), E(3), -2 * E(3), -2, -(E(3)), E(3, 2), (1 - 9 * ER(-3)) // 2, -1, -2 * E(3), -(E(3)), -2 * E(3, 2), -(E(3, 2))], [E(3), E(3, 2), 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)), 0, 0, -6 * E(3), 0, 0, E(3, 2), 0, 1, 0, 0, 6 * E(3, 2), 0, 0, -6, 0, 0, -2 - 6 * ER(-3), 1, 6 * E(3), -(E(3)), -6 * E(3, 2), E(3, 2)], [-(E(3)), -(E(3, 2)), 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, -6 * E(3), 0, 0, -(E(3, 2)), 0, -1, 0, 0, 6 * E(3, 2), 0, 0, -6, 0, 0, 2 + 6 * ER(-3), -1, 6 * E(3), E(3), -6 * E(3, 2), -(E(3, 2))], [E(3, 2), E(3), 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), 0, 0, -6 * E(3, 2), 0, 0, E(3), 0, 1, 0, 0, 6 * E(3), 0, 0, -6, 0, 0, -2 + 6 * ER(-3), 1, 6 * E(3, 2), -(E(3, 2)), -6 * E(3), E(3)], [-(E(3, 2)), -(E(3)), 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, -6 * E(3, 2), 0, 0, -(E(3)), 0, -1, 0, 0, 6 * E(3), 0, 0, -6, 0, 0, 2 - 6 * ER(-3), -1, 6 * E(3, 2), E(3, 2), -6 * E(3), -(E(3))], [-(E(3, 2)), -(E(3)), -2, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, -(E(3, 2)), 0, 0, 0, -2, -1, -(E(3, 2)), 0, -(E(3, 2)), 0, 0, 0, 0, 0, 0, -2, 0, -4 - 6 * ER(-3), 2, 0, 2, 0, 2], [-(E(3)), -(E(3, 2)), -2, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, -(E(3)), 0, 0, 0, -2, -1, -(E(3)), 0, -(E(3)), 0, 0, 0, 0, 0, 0, -2, 0, -4 + 6 * ER(-3), 2, 0, 2, 0, 2], [E(3, 2), E(3), -2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, E(3, 2), 0, 0, 0, -2, 1, E(3, 2), 0, E(3, 2), 0, 0, 0, 0, 0, 0, -2, 0, 4 + 6 * ER(-3), -2, 0, -2, 0, -2], [E(3), E(3, 2), -2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, E(3), 0, 0, 0, -2, 1, E(3), 0, E(3), 0, 0, 0, 0, 0, 0, -2, 0, 4 - 6 * ER(-3), -2, 0, -2, 0, -2], [0, 0, 2, -1, 0, 0, 1, 1, 1, -1, -1, 0, 1, 0, 3, -1, -1, -1, -1, 1, -1, 0, -1, 1, 0, -1, 0, 1, 1, -1, -1, 3, 0, -1, 0, -1, 1, -1, 1, 1, -1, -1, 1, -3, 0, -1, 0, -1, 0], [0, 0, 2, 1, 0, 0, -1, -1, 1, -1, -1, 0, 1, 0, -3, -1, -1, -1, -1, -1, 1, 0, 1, -1, 0, -1, 0, 1, -1, -1, -1, -3, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, -1, 0, -1, 0], [0, 0, -1, -1, 0, 0, -1, -1, 1, -1, -1, 0, 1, 0, 0, 2, 2, -1, -1, -1, -1, 0, -1, -1, 0, -1, 0, 1, 5, -1, -1, 0, 0, -1, 0, -1, 5, -1, -1, 5, -1, -1, -1, 3, -3, -1, -3, -1, -3], [0, 0, -1, 1, 0, 0, 1, 1, 1, -1, -1, 0, 1, 0, 0, 2, 2, -1, -1, 1, 1, 0, 1, 1, 0, -1, 0, 1, -5, -1, -1, 0, 0, -1, 0, -1, -5, -1, 1, -5, -1, -1, 1, -3, 3, -1, 3, -1, 3], [0, 0, 1, 1, 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, -(E(3)), 0, -6, -2 * E(3, 2), -2 * E(3), 3, 0, 0, E(3), 0, E(3, 2), 0, 0, 0, 0, -1, -3 * E(3), 3 * E(3, 2), 4 * E(3), 0, 0, 0, 0, 0, -3, 3 * E(3), 0, -3 * E(3, 2), 3, 4 * E(3, 2), 0, 0, -3, 3 * E(3, 2), -3 * E(3, 2), 3 * E(3), -3 * E(3)], [0, 0, 1, -1, 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, -(E(3)), 0, 6, -2 * E(3, 2), -2 * E(3), 3, 0, 0, -(E(3)), 0, -(E(3, 2)), 0, 0, 0, 0, -1, 3 * E(3), 3 * E(3, 2), 4 * E(3), 0, 0, 0, 0, 0, 3, 3 * E(3), 0, 3 * E(3, 2), 3, 4 * E(3, 2), 0, 0, 3, 3 * E(3, 2), 3 * E(3, 2), 3 * E(3), 3 * E(3)], [0, 0, 1, 1, 0, 0, 0, 0, -(E(3)), 0, 0, 0, -(E(3, 2)), 0, -6, -2 * E(3), -2 * E(3, 2), 3, 0, 0, E(3, 2), 0, E(3), 0, 0, 0, 0, -1, -3 * E(3, 2), 3 * E(3), 4 * E(3, 2), 0, 0, 0, 0, 0, -3, 3 * E(3, 2), 0, -3 * E(3), 3, 4 * E(3), 0, 0, -3, 3 * E(3), -3 * E(3), 3 * E(3, 2), -3 * E(3, 2)], [0, 0, 1, -1, 0, 0, 0, 0, -(E(3)), 0, 0, 0, -(E(3, 2)), 0, 6, -2 * E(3), -2 * E(3, 2), 3, 0, 0, -(E(3, 2)), 0, -(E(3)), 0, 0, 0, 0, -1, 3 * E(3, 2), 3 * E(3), 4 * E(3, 2), 0, 0, 0, 0, 0, 3, 3 * E(3, 2), 0, 3 * E(3), 3, 4 * E(3), 0, 0, 3, 3 * E(3), 3 * E(3), 3 * E(3, 2), 3 * E(3, 2)], [-(E(3, 2)), -(E(3)), -2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 2, -2 * E(3, 2), -2 * E(3), 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, -(E(3)), 0, 0, 0, -2 * E(3), 0, -(E(3)), 0, -1, 0, 0, 0, 0, 0, 0, -2 * E(3, 2), 0, -1 + 3 * ER(-3), -4, 0, -4 * E(3, 2), 0, -4 * E(3)], [E(3, 2), E(3), -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), -2, -2 * E(3, 2), -2 * E(3), 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, 0, E(3), 0, 0, 0, -2 * E(3), 0, E(3), 0, 1, 0, 0, 0, 0, 0, 0, -2 * E(3, 2), 0, 1 - 3 * ER(-3), 4, 0, 4 * E(3, 2), 0, 4 * E(3)], [-(E(3)), -(E(3, 2)), -2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 2, -2 * E(3), -2 * E(3, 2), 0, 0, 0, 0, E(3), 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, -2 * E(3, 2), 0, -(E(3, 2)), 0, -1, 0, 0, 0, 0, 0, 0, -2 * E(3), 0, -1 - 3 * ER(-3), -4, 0, -4 * E(3), 0, -4 * E(3, 2)], [E(3), E(3, 2), -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)), -2, -2 * E(3), -2 * E(3, 2), 0, 0, 0, 0, -(E(3)), 0, 0, 0, 0, E(3, 2), 0, 0, 0, -2 * E(3, 2), 0, E(3, 2), 0, 1, 0, 0, 0, 0, 0, 0, -2 * E(3), 0, 1 + 3 * ER(-3), 4, 0, 4 * E(3), 0, 4 * E(3, 2)], [-(E(3)), -(E(3, 2)), -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)), 2, -2 * E(3), -2 * E(3, 2), 0, 0, 0, 0, E(3), 0, 0, 0, 0, E(3, 2), 0, 0, 0, -2 * E(3, 2), 0, -(E(3, 2)), 0, -1, 0, 0, 0, 0, 0, 0, -2 * E(3), 0, 11 - 3 * ER(-3), 2, 0, -2 * E(3), 0, 2 * E(3, 2)], [E(3, 2), E(3), -2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, E(3), -2, -2 * E(3, 2), -2 * E(3), 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, 0, -(E(3)), 0, 0, 0, -2 * E(3), 0, E(3), 0, 1, 0, 0, 0, 0, 0, 0, -2 * E(3, 2), 0, -11 - 3 * ER(-3), -2, 0, 2 * E(3, 2), 0, -2 * E(3)], [-(E(3, 2)), -(E(3)), -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), 2, -2 * E(3, 2), -2 * E(3), 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, E(3), 0, 0, 0, -2 * E(3), 0, -(E(3)), 0, -1, 0, 0, 0, 0, 0, 0, -2 * E(3, 2), 0, 11 + 3 * ER(-3), 2, 0, -2 * E(3, 2), 0, 2 * E(3)], [E(3), E(3, 2), -2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), -2, -2 * E(3), -2 * E(3, 2), 0, 0, 0, 0, -(E(3)), 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, -2 * E(3, 2), 0, E(3, 2), 0, 1, 0, 0, 0, 0, 0, 0, -2 * E(3), 0, -11 + 3 * ER(-3), -2, 0, 2 * E(3), 0, -2 * E(3, 2)], [-1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), -4, 0, 0, 0, 0, 0, 0, -(E(3)), 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, -(E(3)), 0, -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, -2 * E(3), 0, 2 * E(3, 2)], [1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)), 4, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, -(E(3)), 0, 0, 0, 0, 0, E(3), 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, -8, -2, 0, 2 * E(3), 0, -2 * E(3, 2)], [-1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, E(3), -4, 0, 0, 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, -(E(3, 2)), 0, -(E(3)), 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, -2 * E(3, 2), 0, 2 * E(3)], [1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), 4, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, 0, 0, E(3, 2), 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, -8, -2, 0, 2 * E(3, 2), 0, -2 * E(3)], [-1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, E(3), -4, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, 0, 0, -(E(3, 2)), 0, -(E(3)), 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, 2 * E(3, 2), 0, 2 * E(3)], [1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), 4, 0, 0, 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, E(3, 2), 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, -8, -2, 0, -2 * E(3, 2), 0, -2 * E(3)], [-1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), -4, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, -(E(3)), 0, 0, 0, 0, 0, -(E(3)), 0, -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, 2 * E(3), 0, 2 * E(3, 2)], [1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)), 4, 0, 0, 0, 0, 0, 0, -(E(3)), 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, E(3), 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, -8, -2, 0, -2 * E(3), 0, -2 * E(3, 2)], [0, 0, -2, 0, 0, 1, -1, -1, 0, 1, 1, 0, 0, 0, 6, -2, -2, 4, 1, -1, 0, 0, 0, -1, 0, 1, 0, 0, -4, 4, 1, -2, 0, 1, 0, 1, -4, 4, -1, -4, 4, 1, -1, 3, 0, 4, 0, 4, 0], [0, 0, -2, 0, 0, -1, 1, 1, 0, 1, 1, 0, 0, 0, -6, -2, -2, 4, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 4, 4, 1, 2, 0, 1, 0, 1, 4, 4, 1, 4, 4, 1, 1, -3, 0, 4, 0, 4, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, -2, -2, 0, 0, 0, 0, 2, 2, 4, 2, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -4, 2, 0, 0, 2, 0, 2, 0, 4, 0, 0, -4, 2, 0, 0, 0, 4, 0, -4, 0], [E(3, 2), E(3), 0, 0, 0, 0, (-3 - ER(-3)) // 2, (-3 + ER(-3)) // 2, 0, -(E(3)), -(E(3, 2)), 0, 0, 0, 4, 0, 0, -4, 1, -(ER(-3)), 0, 0, 0, ER(-3), 0, -1, -1, 0, 0, 4 * E(3), 3 * E(3, 2), 0, 1, E(3), E(3), E(3, 2), 0, -4 * E(3, 2), (3 + ER(-3)) // 2, 0, 4, 3 * E(3), (3 - ER(-3)) // 2, (-7 + 3 * ER(-3)) // 2, -2, -4 * E(3), 2 * E(3), 4 * E(3, 2), -2 * E(3, 2)], [-(E(3)), -(E(3, 2)), 0, 0, 0, 0, (3 - ER(-3)) // 2, (3 + ER(-3)) // 2, 0, -(E(3, 2)), -(E(3)), 0, 0, 0, -4, 0, 0, -4, 1, -(ER(-3)), 0, 0, 0, ER(-3), 0, -1, 1, 0, 0, 4 * E(3, 2), 3 * E(3), 0, -1, E(3, 2), -(E(3, 2)), E(3), 0, -4 * E(3), (-3 + ER(-3)) // 2, 0, 4, 3 * E(3, 2), (-3 - ER(-3)) // 2, (7 + 3 * ER(-3)) // 2, 2, -4 * E(3, 2), -2 * E(3, 2), 4 * E(3), 2 * E(3)], [E(3), E(3, 2), 0, 0, 0, 0, (-3 + ER(-3)) // 2, (-3 - ER(-3)) // 2, 0, -(E(3, 2)), -(E(3)), 0, 0, 0, 4, 0, 0, -4, 1, ER(-3), 0, 0, 0, -(ER(-3)), 0, -1, -1, 0, 0, 4 * E(3, 2), 3 * E(3), 0, 1, E(3, 2), E(3, 2), E(3), 0, -4 * E(3), (3 - ER(-3)) // 2, 0, 4, 3 * E(3, 2), (3 + ER(-3)) // 2, (-7 - 3 * ER(-3)) // 2, -2, -4 * E(3, 2), 2 * E(3, 2), 4 * E(3), -2 * E(3)], [-(E(3, 2)), -(E(3)), 0, 0, 0, 0, (3 + ER(-3)) // 2, (3 - ER(-3)) // 2, 0, -(E(3)), -(E(3, 2)), 0, 0, 0, -4, 0, 0, -4, 1, ER(-3), 0, 0, 0, -(ER(-3)), 0, -1, 1, 0, 0, 4 * E(3), 3 * E(3, 2), 0, -1, E(3), -(E(3)), E(3, 2), 0, -4 * E(3, 2), (-3 - ER(-3)) // 2, 0, 4, 3 * E(3), (-3 + ER(-3)) // 2, (7 - 3 * ER(-3)) // 2, 2, -4 * E(3), -2 * E(3), 4 * E(3, 2), 2 * E(3, 2)], [-(E(3, 2)), -(E(3)), -2, 0, 0, 0, -(E(3, 2)), -(E(3)), 0, E(3, 2), E(3), 0, 0, 0, 2, -2 * E(3, 2), -2 * E(3), 4, 1, -1, 0, 0, 0, -1, 0, 1, -(E(3)), 0, -4 * E(3), 4 * E(3, 2), E(3), 0, -(E(3)), E(3, 2), -1, E(3), -4, 4 * E(3), -(E(3, 2)), -4 * E(3, 2), 4, E(3, 2), -(E(3)), (13 - 3 * ER(-3)) // 2, 2, 4 * E(3, 2), 2 * E(3, 2), 4 * E(3), 2 * E(3)], [E(3, 2), E(3), -2, 0, 0, 0, E(3, 2), E(3), 0, E(3, 2), E(3), 0, 0, 0, -2, -2 * E(3, 2), -2 * E(3), 4, 1, 1, 0, 0, 0, 1, 0, 1, E(3), 0, 4 * E(3), 4 * E(3, 2), E(3), 0, E(3), E(3, 2), 1, E(3), 4, 4 * E(3), E(3, 2), 4 * E(3, 2), 4, E(3, 2), E(3), (-13 + 3 * ER(-3)) // 2, -2, 4 * E(3, 2), -2 * E(3, 2), 4 * E(3), -2 * E(3)], [-(E(3)), -(E(3, 2)), -2, 0, 0, 0, -(E(3)), -(E(3, 2)), 0, E(3), E(3, 2), 0, 0, 0, 2, -2 * E(3), -2 * E(3, 2), 4, 1, -1, 0, 0, 0, -1, 0, 1, -(E(3, 2)), 0, -4 * E(3, 2), 4 * E(3), E(3, 2), 0, -(E(3, 2)), E(3), -1, E(3, 2), -4, 4 * E(3, 2), -(E(3)), -4 * E(3), 4, E(3), -(E(3, 2)), (13 + 3 * ER(-3)) // 2, 2, 4 * E(3), 2 * E(3), 4 * E(3, 2), 2 * E(3, 2)], [E(3), E(3, 2), -2, 0, 0, 0, E(3), E(3, 2), 0, E(3), E(3, 2), 0, 0, 0, -2, -2 * E(3), -2 * E(3, 2), 4, 1, 1, 0, 0, 0, 1, 0, 1, E(3, 2), 0, 4 * E(3, 2), 4 * E(3), E(3, 2), 0, E(3, 2), E(3), 1, E(3, 2), 4, 4 * E(3, 2), E(3), 4 * E(3), 4, E(3), E(3, 2), (-13 - 3 * ER(-3)) // 2, -2, 4 * E(3), -2 * E(3), 4 * E(3, 2), -2 * E(3, 2)], [0, 0, -2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 6, 0, 0, 0, 0, 0], [0, 0, -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -3, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -6, 0, 0, 0, 0, 0], [0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -2, -2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 6, 3, 0, -3, 0, 3], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -2, -2, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -6, -3, 0, 3, 0, -3], [0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * E(3), -2 * E(3, 2), 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -4 * E(3), 6 * E(3, 2), 0, 0, 2 * E(3), 0, 2 * E(3, 2), 0, 4 * E(3, 2), 0, 0, -4, 6 * E(3), 0, 0, 0, 4 * E(3), 0, -4 * E(3, 2), 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * E(3, 2), -2 * E(3), 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -4 * E(3, 2), 6 * E(3), 0, 0, 2 * E(3, 2), 0, 2 * E(3), 0, 4 * E(3), 0, 0, -4, 6 * E(3, 2), 0, 0, 0, 4 * E(3, 2), 0, -4 * E(3), 0], [0, 0, 0, 0, 0, 0, -(ER(-3)), ER(-3), 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, -1, ER(-3), 0, 0, 0, -(ER(-3)), 0, 1, 0, 0, 0, -4, -3, 0, 0, -1, 0, -1, 0, 4, ER(-3), 0, -4, -3, -(ER(-3)), -9 * ER(-3), 0, 4, 0, -4, 0], [0, 0, 0, 0, 0, 0, ER(-3), -(ER(-3)), 0, 1, 1, 0, 0, 0, 0, 0, 0, 4, -1, -(ER(-3)), 0, 0, 0, ER(-3), 0, 1, 0, 0, 0, -4, -3, 0, 0, -1, 0, -1, 0, 4, -(ER(-3)), 0, -4, -3, ER(-3), 9 * ER(-3), 0, 4, 0, -4, 0], [-1, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -4, 2, 2, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 2, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 2, 0, -10, 2, 0, -2, 0, 2], [1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 10, -2, 0, 2, 0, -2], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -4, -4, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0], [-(ER(-3)), ER(-3), 2, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, -1, 0, -(ER(-3)), 0, 0, 0, 2, 0, -(ER(-3)), 0, -(ER(-3)), 0, 0, 0, 0, 0, 0, 2, 0, -6 * ER(-3), 0, 0, 0, 0, 0], [ER(-3), -(ER(-3)), 2, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, -1, 0, ER(-3), 0, 0, 0, 2, 0, ER(-3), 0, ER(-3), 0, 0, 0, 0, 0, 0, 2, 0, 6 * ER(-3), 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -1, -1, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, -3, 0, 0, 0, 0, 0, -6, 0, 0, 6, 2, 0, 6, -3, -6, 3, 6, -3], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, -1, -1, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 3, 0, 0, 0, 0, 0, -6, 0, 0, 6, 2, 0, -6, 3, -6, -3, 6, 3], [0, 0, 3, 0, 0, 0, -(E(3, 2)), -(E(3)), 0, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, 0, 2, -1, -1, 0, 0, 0, -1, 0, -1, 0, 0, 2 * E(3), 2 * E(3, 2), -3 * E(3), 0, 0, -(E(3, 2)), 0, -(E(3)), 2, 2 * E(3), -(E(3, 2)), 2 * E(3, 2), 2, -3 * E(3, 2), -(E(3)), (15 - 9 * ER(-3)) // 2, -3, 2 * E(3, 2), -3 * E(3, 2), 2 * E(3), -3 * E(3)], [0, 0, 3, 0, 0, 0, E(3, 2), E(3), 0, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, 0, 2, -1, 1, 0, 0, 0, 1, 0, -1, 0, 0, -2 * E(3), 2 * E(3, 2), -3 * E(3), 0, 0, -(E(3, 2)), 0, -(E(3)), -2, 2 * E(3), E(3, 2), -2 * E(3, 2), 2, -3 * E(3, 2), E(3), (-15 + 9 * ER(-3)) // 2, 3, 2 * E(3, 2), 3 * E(3, 2), 2 * E(3), 3 * E(3)], [0, 0, 3, 0, 0, 0, -(E(3)), -(E(3, 2)), 0, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 2, -1, -1, 0, 0, 0, -1, 0, -1, 0, 0, 2 * E(3, 2), 2 * E(3), -3 * E(3, 2), 0, 0, -(E(3)), 0, -(E(3, 2)), 2, 2 * E(3, 2), -(E(3)), 2 * E(3), 2, -3 * E(3), -(E(3, 2)), (15 + 9 * ER(-3)) // 2, -3, 2 * E(3), -3 * E(3), 2 * E(3, 2), -3 * E(3, 2)], [0, 0, 3, 0, 0, 0, E(3), E(3, 2), 0, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 2, -1, 1, 0, 0, 0, 1, 0, -1, 0, 0, -2 * E(3, 2), 2 * E(3), -3 * E(3, 2), 0, 0, -(E(3)), 0, -(E(3, 2)), -2, 2 * E(3, 2), E(3), -2 * E(3), 2, -3 * E(3), E(3, 2), (-15 - 9 * ER(-3)) // 2, 3, 2 * E(3), 3 * E(3), 2 * E(3, 2), 3 * E(3, 2)], [0, 0, -3, 0, 0, 0, (3 + ER(-3)) // 2, (3 - ER(-3)) // 2, 0, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 2, 1, ER(-3), 0, 0, 0, -(ER(-3)), 0, -1, 0, 0, 0, -2 * E(3), -3 * E(3, 2), 0, 0, E(3), 0, E(3, 2), 0, 2 * E(3, 2), (-3 - ER(-3)) // 2, 0, -2, -3 * E(3), (-3 + ER(-3)) // 2, (-3 - 9 * ER(-3)) // 2, -3, 2 * E(3), 3 * E(3), -2 * E(3, 2), -3 * E(3, 2)], [0, 0, -3, 0, 0, 0, (-3 + ER(-3)) // 2, (-3 - ER(-3)) // 2, 0, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, 0, 2, 1, ER(-3), 0, 0, 0, -(ER(-3)), 0, -1, 0, 0, 0, -2 * E(3, 2), -3 * E(3), 0, 0, E(3, 2), 0, E(3), 0, 2 * E(3), (3 - ER(-3)) // 2, 0, -2, -3 * E(3, 2), (3 + ER(-3)) // 2, (3 - 9 * ER(-3)) // 2, 3, 2 * E(3, 2), -3 * E(3, 2), -2 * E(3), 3 * E(3)], [0, 0, -3, 0, 0, 0, (3 - ER(-3)) // 2, (3 + ER(-3)) // 2, 0, -(E(3, 2)), -(E(3)), 0, 0, 0, 0, 0, 0, 2, 1, -(ER(-3)), 0, 0, 0, ER(-3), 0, -1, 0, 0, 0, -2 * E(3, 2), -3 * E(3), 0, 0, E(3, 2), 0, E(3), 0, 2 * E(3), (-3 + ER(-3)) // 2, 0, -2, -3 * E(3, 2), (-3 - ER(-3)) // 2, (-3 + 9 * ER(-3)) // 2, -3, 2 * E(3, 2), 3 * E(3, 2), -2 * E(3), -3 * E(3)], [0, 0, -3, 0, 0, 0, (-3 - ER(-3)) // 2, (-3 + ER(-3)) // 2, 0, -(E(3)), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 2, 1, -(ER(-3)), 0, 0, 0, ER(-3), 0, -1, 0, 0, 0, -2 * E(3), -3 * E(3, 2), 0, 0, E(3), 0, E(3, 2), 0, 2 * E(3, 2), (3 + ER(-3)) // 2, 0, -2, -3 * E(3), (3 - ER(-3)) // 2, (3 + 9 * ER(-3)) // 2, 3, 2 * E(3), -3 * E(3), -2 * E(3, 2), 3 * E(3, 2)], [0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * E(3, 2), 4 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * E(3, 2), 0, 0, 0, 0, 0, 0, 0], [0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * E(3), 4 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * E(3), 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, -1, 0, 0, 0, -1, 0, 0, 0, -1, -1, 0, 0, 0, -3, 0, 0, 1, -1, 1, 0, 0, 0, 0, -1, 3, -3, 0, 0, 0, 0, 0, 0, 3, -3, 0, 3, -3, 0, 0, 0, 0, -3, 0, -3, 0], [0, 0, 0, -1, 1, 0, 0, 0, -1, 0, 0, 0, -1, 1, 0, 0, 0, -3, 0, 0, -1, 1, -1, 0, 0, 0, 0, -1, -3, -3, 0, 0, 0, 0, 0, 0, -3, -3, 0, -3, -3, 0, 0, 0, 0, -3, 0, -3, 0], [0, 0, 0, 1, -1, 0, 0, 0, -(E(3, 2)), 0, 0, 0, -(E(3)), -(E(3)), 0, 0, 0, -3, 0, 0, E(3), -(E(3, 2)), E(3, 2), 0, 0, 0, 0, -1, 3 * E(3), -3 * E(3, 2), 0, 0, 0, 0, 0, 0, 3, -3 * E(3), 0, 3 * E(3, 2), -3, 0, 0, 0, 0, -3 * E(3, 2), 0, -3 * E(3), 0], [0, 0, 0, -1, 1, 0, 0, 0, -(E(3, 2)), 0, 0, 0, -(E(3)), E(3), 0, 0, 0, -3, 0, 0, -(E(3)), E(3, 2), -(E(3, 2)), 0, 0, 0, 0, -1, -3 * E(3), -3 * E(3, 2), 0, 0, 0, 0, 0, 0, -3, -3 * E(3), 0, -3 * E(3, 2), -3, 0, 0, 0, 0, -3 * E(3, 2), 0, -3 * E(3), 0], [0, 0, 0, 1, -1, 0, 0, 0, -(E(3)), 0, 0, 0, -(E(3, 2)), -(E(3, 2)), 0, 0, 0, -3, 0, 0, E(3, 2), -(E(3)), E(3), 0, 0, 0, 0, -1, 3 * E(3, 2), -3 * E(3), 0, 0, 0, 0, 0, 0, 3, -3 * E(3, 2), 0, 3 * E(3), -3, 0, 0, 0, 0, -3 * E(3), 0, -3 * E(3, 2), 0], [0, 0, 0, -1, 1, 0, 0, 0, -(E(3)), 0, 0, 0, -(E(3, 2)), E(3, 2), 0, 0, 0, -3, 0, 0, -(E(3, 2)), E(3), -(E(3)), 0, 0, 0, 0, -1, -3 * E(3, 2), -3 * E(3), 0, 0, 0, 0, 0, 0, -3, -3 * E(3, 2), 0, -3 * E(3), -3, 0, 0, 0, 0, -3 * E(3), 0, -3 * E(3, 2), 0], [0, 0, 0, 0, 1, 0, E(3, 2), E(3), 0, -(E(3, 2)), -(E(3)), 0, 0, E(3), 0, 0, 0, -4, -1, 1, 0, E(3, 2), 0, 1, 0, -1, 0, 0, 4 * E(3), -4 * E(3, 2), 3 * E(3), 0, 0, -(E(3, 2)), 0, -(E(3)), 4, -4 * E(3), E(3, 2), 4 * E(3, 2), -4, 3 * E(3, 2), E(3), 9 * E(3, 2), 0, -4 * E(3, 2), 0, -4 * E(3), 0], [0, 0, 0, 0, -1, 0, -(E(3, 2)), -(E(3)), 0, -(E(3, 2)), -(E(3)), 0, 0, -(E(3)), 0, 0, 0, -4, -1, -1, 0, -(E(3, 2)), 0, -1, 0, -1, 0, 0, -4 * E(3), -4 * E(3, 2), 3 * E(3), 0, 0, -(E(3, 2)), 0, -(E(3)), -4, -4 * E(3), -(E(3, 2)), -4 * E(3, 2), -4, 3 * E(3, 2), -(E(3)), -9 * E(3, 2), 0, -4 * E(3, 2), 0, -4 * E(3), 0], [0, 0, 0, 0, 1, 0, E(3), E(3, 2), 0, -(E(3)), -(E(3, 2)), 0, 0, E(3, 2), 0, 0, 0, -4, -1, 1, 0, E(3), 0, 1, 0, -1, 0, 0, 4 * E(3, 2), -4 * E(3), 3 * E(3, 2), 0, 0, -(E(3)), 0, -(E(3, 2)), 4, -4 * E(3, 2), E(3), 4 * E(3), -4, 3 * E(3), E(3, 2), 9 * E(3), 0, -4 * E(3), 0, -4 * E(3, 2), 0], [0, 0, 0, 0, -1, 0, -(E(3)), -(E(3, 2)), 0, -(E(3)), -(E(3, 2)), 0, 0, -(E(3, 2)), 0, 0, 0, -4, -1, -1, 0, -(E(3)), 0, -1, 0, -1, 0, 0, -4 * E(3, 2), -4 * E(3), 3 * E(3, 2), 0, 0, -(E(3)), 0, -(E(3, 2)), -4, -4 * E(3, 2), -(E(3)), -4 * E(3), -4, 3 * E(3), -(E(3, 2)), -9 * E(3), 0, -4 * E(3), 0, -4 * E(3, 2), 0], [-(E(3, 2)), -(E(3)), -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2 * E(3), 2 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2 * E(3, 2), 0, -1, 0, -(E(3)), 0, 0, 0, 0, 0, 0, 2 * E(3), 0, 5 + 3 * ER(-3), -1, 0, E(3), 0, -(E(3, 2))], [E(3), E(3, 2), -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 2 * E(3, 2), 2 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 2 * E(3), 0, 1, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 2 * E(3, 2), 0, -5 + 3 * ER(-3), 1, 0, -(E(3, 2)), 0, E(3)], [-(E(3)), -(E(3, 2)), -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2 * E(3, 2), 2 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2 * E(3), 0, -1, 0, -(E(3, 2)), 0, 0, 0, 0, 0, 0, 2 * E(3, 2), 0, 5 - 3 * ER(-3), -1, 0, E(3, 2), 0, -(E(3))], [E(3, 2), E(3), -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 2 * E(3), 2 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 2 * E(3, 2), 0, 1, 0, E(3), 0, 0, 0, 0, 0, 0, 2 * E(3), 0, -5 - 3 * ER(-3), 1, 0, -(E(3)), 0, E(3, 2)], [1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 2 * E(3), 2 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), 0, 0, 0, -4 * E(3, 2), 0, E(3), 0, E(3, 2), 0, 0, 0, 0, 0, 0, -4 * E(3), 0, -8, 4, 0, -4 * E(3), 0, 4 * E(3, 2)], [-1, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2 * E(3, 2), 2 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, -4 * E(3), 0, -(E(3, 2)), 0, -(E(3)), 0, 0, 0, 0, 0, 0, -4 * E(3, 2), 0, 8, -4, 0, 4 * E(3, 2), 0, -4 * E(3)], [1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 2 * E(3, 2), 2 * E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, -4 * E(3), 0, E(3, 2), 0, E(3), 0, 0, 0, 0, 0, 0, -4 * E(3, 2), 0, -8, 4, 0, -4 * E(3, 2), 0, 4 * E(3)], [-1, -1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2 * E(3), 2 * E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, -4 * E(3, 2), 0, -(E(3)), 0, -(E(3, 2)), 0, 0, 0, 0, 0, 0, -4 * E(3), 0, 8, -4, 0, 4 * E(3), 0, -4 * E(3, 2)], [-1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 1, -4, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, 2, 0, 2], [1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 4, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -8, -2, 0, -2, 0, -2], [1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, -1, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -8, -2, 0, 2, 0, -2], [-1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, -4, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, -2, 0, 2], [0, 0, 0, 1, 0, 0, -(E(3, 2)), -(E(3)), E(3, 2), E(3, 2), E(3), 0, E(3), 0, 0, 0, 0, 1, 1, -1, E(3), 0, E(3, 2), -1, 0, 1, 0, 1, 5 * E(3), E(3, 2), -3 * E(3), 0, 0, E(3, 2), 0, E(3), 5, E(3), -(E(3, 2)), 5 * E(3, 2), 1, -3 * E(3, 2), -(E(3)), -9 * E(3, 2), 0, E(3, 2), 0, E(3), 0], [0, 0, 0, -1, 0, 0, E(3, 2), E(3), E(3, 2), E(3, 2), E(3), 0, E(3), 0, 0, 0, 0, 1, 1, 1, -(E(3)), 0, -(E(3, 2)), 1, 0, 1, 0, 1, -5 * E(3), E(3, 2), -3 * E(3), 0, 0, E(3, 2), 0, E(3), -5, E(3), E(3, 2), -5 * E(3, 2), 1, -3 * E(3, 2), E(3), 9 * E(3, 2), 0, E(3, 2), 0, E(3), 0], [0, 0, 0, 1, 0, 0, -(E(3)), -(E(3, 2)), E(3), E(3), E(3, 2), 0, E(3, 2), 0, 0, 0, 0, 1, 1, -1, E(3, 2), 0, E(3), -1, 0, 1, 0, 1, 5 * E(3, 2), E(3), -3 * E(3, 2), 0, 0, E(3), 0, E(3, 2), 5, E(3, 2), -(E(3)), 5 * E(3), 1, -3 * E(3), -(E(3, 2)), -9 * E(3), 0, E(3), 0, E(3, 2), 0], [0, 0, 0, -1, 0, 0, E(3), E(3, 2), E(3), E(3), E(3, 2), 0, E(3, 2), 0, 0, 0, 0, 1, 1, 1, -(E(3, 2)), 0, -(E(3)), 1, 0, 1, 0, 1, -5 * E(3, 2), E(3), -3 * E(3, 2), 0, 0, E(3), 0, E(3, 2), -5, E(3, 2), E(3), -5 * E(3), 1, -3 * E(3), E(3, 2), 9 * E(3), 0, E(3), 0, E(3, 2), 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 2 * E(3), 2 * E(3, 2), 0, 0, 0, 0, -4 * E(3), -4 * E(3, 2), -4, -2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4 * E(3), 2 * E(3, 2), 0, 0, -2 * E(3), 0, -2 * E(3, 2), 0, -4 * E(3, 2), 0, 0, 4, 2 * E(3), 0, 0, 0, -4 * E(3), 0, 4 * E(3, 2), 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 2 * E(3, 2), 2 * E(3), 0, 0, 0, 0, -4 * E(3, 2), -4 * E(3), -4, -2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4 * E(3, 2), 2 * E(3), 0, 0, -2 * E(3, 2), 0, -2 * E(3), 0, -4 * E(3), 0, 0, 4, 2 * E(3, 2), 0, 0, 0, -4 * E(3, 2), 0, 4 * E(3), 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
        res[:galomorphisms] = Group(#= none:314 =# @perm_str("(7,9)(10,16)( 13, 14)( 19, 26)( 20, 22)( 21, 23)( 27, 32)( 28, 31)( 35, 37)( 36, 38)( 40, 42)( 43, 44)( 45, 46)( 47, 48)( 49, 52)( 50, 55)( 51, 53)( 56, 57)( 59, 64)( 60, 63)( 61, 62)( 67, 73)( 68, 70)( 69, 72)( 76, 89)( 77,158)( 79,148)( 80,150)( 82,120)( 83,112)( 84,128)( 86,139)( 87,140)( 88,163)( 90,165)( 91,164)( 92,169)( 93,126)( 95,145)( 97,107)( 98,116)( 99,147)(101,149)(102,137)(103,110)(106,154)(108,166)(111,167)(113,168)(114,131)(115,118)(122,155)(123,156)(124,157)(125,162)(129,146)(133,138)(134,159)(135,160)(136,161)"))
        res[:text] = "origin: mostly HeckeCharTable"
        return res
    end)
chevieset(:G34, :HeckeRepresentation, function (para, root, i)
        local r, p, f1, f3, f7, f11, f13, f15, f19, f21, f23, f25, f27, f29, f33, f37, rep, dec
        r = (para[1])[1]
        p = (para[1])[2]
        f1 = function (p,)
                return map((x->begin
                                [[p]]
                            end), 1:6)
            end
        f3 = function (x, y, a)
                return WGraph2Representation([[[1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 5, 6], [1, 2, 4, 5, 6], [1, 3, 4, 5, 6], [2, 3, 4, 5, 6]], [[1, 2, -y, x], [2, 3, -y, x], [3, 4, a * x ^ -1 * y ^ 2, -(a ^ 2) * x ^ 2 * y ^ -1], [3, 5, -y, x], [4, 5, x, -y], [5, 6, x, -y]]], [x, y]) * x ^ 0 * y ^ 0
            end
        f7 = function (p, r, a)
                return map((x->begin
                                ExteriorPower(x, 2) // p
                            end), f3(p, r, a))
            end
        f11 = function (p, r, a)
                return map((x->begin
                                ExteriorPower(x, 3) // p ^ 2
                            end), f3(p, r, a))
            end
        dec = function (d, l)
                local m, v, i, j, k
                m = map((i->begin
                                map((y->begin
                                            fill(0, max(0, (1 + d) - 1))
                                        end), 1:d)
                            end), 1:6)
                for v = l
                    for k = v[2:length(v)]
                        i = div(k, d ^ 2)
                        k = mod(k, d ^ 2)
                        j = div(k, d)
                        k = mod(k, d)
                        ((m[i + 1])[j + 1])[k + 1] = v[1]
                    end
                end
                return m
            end
        f13 = function (x, y)
                return dec(21, [[-x, 151, 175, 289, 342, 350, 357, 358, 360, 361, 363, 367, 371, 394, 438, 966, 988, 1018, 1053, 1135, 1155, 1156, 1158, 1165, 1166, 1208, 1257, 1299, 1369, 1498, 1518, 1623, 1747, 1934, 2042, 2089, 2090, 2147, 2464, 2480, 2487, 2503, 2505, 2566, 2568], [-y, 3, 138, 211, 322, 417, 443, 449, 656, 660, 698, 702, 774, 1320, 1393, 1598, 1605, 1613, 1767, 1985, 2032, 2093, 2215, 2256, 2269, 2295, 2378, 2527, 2587, 2589, 2595, 2608, 2610, 2616], [x, 31, 42, 45, 63, 111, 117, 172, 190, 199, 258, 279, 287, 364, 373, 384, 392, 422, 429, 431, 433, 485, 551, 617, 639, 727, 834, 882, 904, 924, 927, 948, 1032, 1072, 1081, 1102, 1124, 1186, 1187, 1218, 1219, 1221, 1228, 1229, 1241, 1248, 1250, 1252, 1258, 1283, 1290, 1292, 1294, 1411, 1434, 1440, 1455, 1477, 1495, 1587, 1600, 1602, 1653, 1682, 1689, 1693, 1750, 1808, 1827, 1911, 1914, 2005, 2072, 2112, 2133, 2137, 2152, 2153, 2155, 2163, 2166, 2173, 2174, 2184, 2187, 2229, 2318, 2335, 2396, 2415, 2541, 2542, 2544, 2551, 2604, 2614], [y, 44, 91, 110, 176, 198, 231, 232, 234, 241, 242, 286, 306, 310, 319, 321, 327, 330, 374, 380, 387, 389, 391, 398, 400, 401, 408, 409, 410, 412, 418, 419, 441, 463, 467, 507, 512, 527, 529, 573, 576, 590, 595, 596, 661, 674, 681, 683, 685, 705, 737, 749, 779, 786, 790, 793, 800, 807, 811, 815, 842, 849, 853, 859, 863, 866, 869, 870, 881, 926, 970, 992, 1014, 1036, 1058, 1080, 1146, 1168, 1190, 1212, 1234, 1256, 1262, 1269, 1273, 1279, 1303, 1304, 1311, 1312, 1313, 1315, 1321, 1322, 1323, 1327, 1345, 1356, 1367, 1389, 1433, 1499, 1521, 1539, 1543, 1565, 1569, 1631, 1671, 1675, 1716, 1719, 1737, 1741, 1745, 1752, 1756, 1760, 1763, 1785, 1786, 1788, 1795, 1796, 1850, 1852, 1882, 1896, 1904, 1913, 1918, 1940, 1955, 1962, 2094, 2138, 2156, 2160, 2165, 2177, 2182, 2186, 2196, 2200, 2204, 2364, 2436, 2437, 2439, 2446, 2447, 2491, 2501, 2508, 2513, 2524, 2526, 2532, 2535, 2543, 2550, 2557, 2564, 2571, 2579, 2588, 2590, 2591, 2601, 2606, 2609, 2611, 2612, 2613, 2623, 2627, 2630, 2633, 2634, 2645], [x + y, 22, 66, 154, 264, 352, 378, 379, 381, 388, 399, 402, 440, 837, 1300, 1302, 1305, 1697, 1830, 2006, 2050, 2116, 2144, 2227, 2315, 2337, 2403, 2425, 2469]]) * x ^ 0 * y ^ 0
            end
        f15 = function (x, y, a)
                return dec(21, [[-2x, 1869], [-x, 1, 45, 47, 68, 182, 201, 393, 443, 511, 533, 666, 681, 702, 850, 855, 1313, 1326, 1349, 1366, 1370, 1417, 1504, 1520, 1525, 1573, 1768, 1814, 1870, 1872, 1873, 1875, 1877, 1883, 1911, 1915, 1917, 1980, 2183, 2331, 2334, 2343, 2426, 2487, 2499, 2500, 2508, 2510, 2516, 2539, 2602, 2625, 2628, 2631, 2637], [-y, 369, 465, 469, 807, 1008, 1012, 1170, 1176, 1177, 1180, 1275, 1449, 1452, 2060, 2195, 2402, 2440, 2608, 2614], [-x * y, 1233, 2560], [-a * x * y, 2552], [-(y ^ 2), 351, 777, 779, 780, 784], [-(a ^ 2) * x, 2528, 2591], [-(a ^ 2) * y, 1531, 2482, 2488], [-(a ^ 2) * x * y, 2553], [x, 44, 84, 85, 88, 126, 127, 129, 131, 132, 134, 140, 147, 148, 150, 152, 154, 189, 190, 198, 200, 206, 213, 215, 220, 231, 232, 242, 252, 253, 263, 269, 273, 274, 276, 278, 281, 286, 287, 396, 399, 400, 402, 404, 418, 420, 421, 428, 434, 440, 462, 463, 464, 529, 551, 567, 569, 573, 575, 683, 696, 700, 705, 722, 727, 743, 749, 793, 815, 827, 837, 859, 871, 876, 881, 924, 926, 945, 948, 988, 992, 1014, 1030, 1036, 1058, 1080, 1096, 1102, 1146, 1168, 1190, 1215, 1234, 1239, 1240, 1250, 1256, 1300, 1322, 1367, 1455, 1470, 1471, 1473, 1475, 1477, 1521, 1565, 1575, 1578, 1587, 1617, 1618, 1620, 1622, 1625, 1630, 1631, 1646, 1651, 1653, 1675, 1680, 1683, 1697, 1699, 1705, 1711, 1719, 1763, 1785, 1786, 1789, 1810, 1827, 1830, 1831, 1833, 1918, 1962, 1984, 2006, 2028, 2037, 2038, 2040, 2042, 2045, 2050, 2051, 2079, 2081, 2085, 2087, 2094, 2116, 2138, 2142, 2144, 2148, 2150, 2160, 2174, 2205, 2227, 2249, 2271, 2300, 2315, 2359, 2382, 2434, 2486, 2491, 2511, 2530, 2531, 2535, 2557, 2593, 2601, 2645], [y, 21, 108, 302, 368, 483, 546, 548, 591, 617, 639, 766, 882, 904, 970, 1054, 1082, 1124, 1145, 1173, 1292, 1386, 1429, 1537, 1604, 1741, 1848, 1896, 1932, 1934, 2059, 2061, 2063, 2203, 2457, 2460, 2463, 2563, 2565, 2566, 2568, 2570, 2576], [x * y ^ -1, 331, 394], [a * x, 849], [x * y, 1236, 1659, 1660, 1662, 1664, 1667, 1672, 2100, 2102, 2106, 2108, 2551], [a ^ 2 * x, 848, 870, 2529, 2592], [a ^ 2 * y, 1516, 1522, 2497, 2594], [a ^ 2 * x * y, 2541, 2542, 2550, 2555, 2558], [x - a ^ 2 * y, 861, 863, 2587], [x + y, 22, 110, 308, 352, 374, 485, 549, 553, 595, 771, 801, 805, 1278, 1389, 1433, 1543, 1609, 1852, 1940, 2072, 2204, 2403, 2447, 2469, 2579, 2623], [((3 // 2 * x + 1 // 2 * a * x) - 1 // 2 * a ^ 2 * x) - a ^ 2 * y, 869], [2y, 2562]]) * x ^ 0 * y ^ 0
            end
        f19 = function (x, y)
                return dec(35, [[-2 * x * y ^ 3, 2346], [((-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 3571], [-2 * x * y - y ^ 2, 3475, 3545, 3650], [-2 * x * y ^ 2 - x ^ 2 * y, 5915], [-2 * x * y ^ 3 - x ^ 2 * y ^ 2, 2345], [(-2 * x * y - x ^ 2) - y ^ 2, 3546], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 3570], [(-2 * x * y ^ 2 - x ^ 2 * y) + y ^ 3, 7290], [-1, 1263, 1703, 2193, 2808, 3228, 3712, 3714, 3716, 4649, 6778], [-(x ^ -1), 4545], [-(x ^ -1) * y, 4401, 6746], [-x, 181, 190, 256, 328, 645, 749, 1577, 1900, 1935, 2158, 2663, 2697, 2699, 2701, 2707, 3049, 3051, 3057, 3064, 3087, 3091, 3094, 3101, 3129, 3136, 3175, 3368, 3854, 4315, 4350, 4385, 4452, 4456, 5572, 5576, 5637, 5639, 5641, 5647, 6121, 6444, 6445, 6595, 6844, 7021, 7239], [-y, 214, 352, 667, 676, 679, 702, 711, 781, 947, 956, 1153, 1439, 1445, 1447, 1472, 1473, 1474, 1476, 1482, 1752, 1810, 1838, 2075, 2082, 2083, 2307, 2451, 2531, 2802, 2811, 2874, 2876, 2907, 2916, 3012, 3021, 3187, 3196, 3199, 3222, 3231, 3327, 3336, 3564, 3669, 3931, 3994, 4064, 4066, 4645, 4974, 4975, 4984, 5125, 5147, 5156, 5159, 5252, 5254, 5255, 5264, 5300, 5833, 5838, 6304, 6631, 6666, 6765, 6992], [-x * y, 282, 291, 630, 631, 1436, 1507, 1645, 1646, 1890, 1925, 2145, 2170, 2261, 3257, 3266, 3562, 3652, 3667, 3745, 3957, 4305, 4340, 4375, 4785, 5204, 5390, 5391, 5930, 5933, 5936, 6580, 6581, 6932, 7204, 7224, 7231, 7276, 7309], [-x * y ^ 2, 1061, 2297, 2360, 2363, 2402, 4805, 5916, 7200, 7261, 7269, 7272, 7293], [-(x ^ 2), 3367, 3371, 3385, 3444, 3446, 3450, 3451, 3529, 6945], [-(y ^ 2), 421, 840, 841, 984, 985, 993, 994, 2065, 2940, 2941, 3560, 3665, 5285, 5286, 5820, 5825, 5827, 5828, 6650, 6651, 7165, 7271, 7319, 7320], [-(x ^ 2) * y, 805, 3574, 3576, 3582, 3612, 4801, 4817, 4837, 4841, 6931, 7266, 7284, 7285], [-(x ^ 3), 3507, 3511], [-(y ^ 3), 2279, 2280, 2286, 2289, 5811, 6035, 6038, 7260, 7262], [-(y ^ 4), 6020, 6021, 7246], [-x * y - 2 * y ^ 2, 420], [-x * y ^ 2 - 2 * y ^ 3, 2277, 5810], [-(x ^ 2) * y - 2 * x ^ 3, 3510], [-x - y, 772, 1438, 1613, 1620, 3922, 4347, 4351, 4382, 4386, 4412, 4552, 4630], [-x * y - x ^ 2, 735, 875, 2250, 3046, 3080, 3115, 3150, 3454, 3457, 3472, 3476, 3542, 3659, 5893, 7220], [-x * y - y ^ 2, 1087, 1205, 1610, 1611, 1680, 1785, 2871, 3613, 3651, 4482, 4620, 6755, 7150], [-x * y ^ 2 - x ^ 2 * y, 1052, 2030, 2135, 2240, 2362, 3573, 4760, 4799, 7185, 7210, 7305], [-x * y ^ 2 - y ^ 3, 1190, 1191, 6037, 7140], [-x * y ^ 3 - x ^ 2 * y ^ 2, 7175], [-(x ^ 2) * y - x ^ 3, 3360, 7294], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 3500, 4796], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 4832], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + y ^ 4, 7280], [-x * y + y ^ 2, 7303], [-x * y ^ 2 + y ^ 3, 7247, 7298], [1, 3053, 3677, 4439, 4581, 4651, 5748], [x ^ -1, 4650], [x ^ -1 * y, 3495, 3565, 3670, 6781], [x, 0, 36, 72, 146, 249, 251, 331, 396, 468, 504, 576, 632, 634, 635, 644, 891, 1187, 1225, 1368, 1543, 1632, 1647, 1649, 1651, 1872, 1892, 1912, 1927, 1947, 1981, 2017, 2125, 2183, 2375, 2485, 2558, 2593, 2738, 2768, 2837, 2978, 3052, 3056, 3059, 3066, 3069, 3084, 3086, 3092, 3099, 3166, 3223, 3314, 3422, 3819, 3891, 4035, 4287, 4307, 4342, 4377, 4449, 4451, 4611, 4719, 5080, 5392, 5394, 5396, 5431, 5512, 5548, 5569, 5571, 5903, 5906, 6584, 6585, 6594, 6699, 6768, 7094, 7133], [y, 108, 252, 288, 324, 360, 422, 424, 426, 432, 529, 530, 612, 648, 684, 716, 720, 756, 792, 828, 842, 851, 864, 900, 936, 972, 1008, 1044, 1080, 1116, 1224, 1305, 1369, 1405, 1477, 1513, 1549, 1621, 1729, 1736, 1760, 1765, 1767, 1768, 1771, 1801, 1909, 1945, 2067, 2089, 2161, 2197, 2233, 2269, 2341, 2413, 2449, 2594, 2630, 2666, 2774, 2810, 2877, 2881, 2918, 2942, 2951, 2954, 2990, 3026, 3062, 3098, 3204, 3242, 3278, 3341, 3345, 3386, 3458, 3566, 3602, 3638, 3648, 3674, 3710, 3711, 3783, 3786, 3855, 3942, 3963, 3999, 4071, 4099, 4105, 4107, 4143, 4179, 4206, 4215, 4251, 4322, 4323, 4357, 4359, 4395, 4431, 4503, 4506, 4566, 4636, 4644, 4647, 4683, 4827, 4863, 4899, 4900, 4936, 4985, 5008, 5044, 5045, 5164, 5224, 5260, 5265, 5267, 5268, 5287, 5289, 5290, 5296, 5299, 5334, 5341, 5368, 5476, 5620, 5687, 5688, 5692, 5728, 5800, 5872, 5944, 5980, 6019, 6052, 6088, 6125, 6161, 6197, 6233, 6269, 6309, 6341, 6377, 6413, 6485, 6521, 6557, 6659, 6663, 6757, 6810, 6885, 6917, 7171, 7205, 7277, 7313, 7343, 7349], [x * y, 315, 316, 1331, 1365, 1366, 1515, 1540, 1541, 2043, 2137, 2590, 2591, 2696, 2765, 2766, 3282, 3487, 3557, 3662, 3965, 4776, 5636, 5890, 5917, 5919, 5927, 6940, 6947, 6948, 7206, 7274, 7311], [x * y ^ 2, 280, 281, 1505, 2278, 2349, 2350, 2356, 2359, 2383, 3255, 3256, 3955, 4840, 5968, 6930, 7191, 7199, 7202, 7304, 7307], [x * y ^ 3, 1051, 2381, 3605], [x ^ 2, 818, 2148, 3364, 3366, 3372, 3376, 3380, 3387, 3449, 3455, 3477, 3547, 6934, 6935, 6944, 7052], [y ^ 2, 105, 106, 350, 665, 700, 945, 946, 995, 1101, 1206, 2800, 2801, 3010, 3011, 3185, 3325, 3551, 3555, 3559, 3644, 3656, 3660, 4490, 4970, 4971, 5145, 5250, 5251, 5812, 5814, 5815, 5824, 7156, 7306, 7324], [x ^ 2 * y, 3577, 3607, 3609, 3611, 3617, 4749, 4802, 4806, 4836, 4852, 7295, 7301], [x ^ 2 * y ^ 2, 7281], [x ^ 3, 3506, 3522], [y ^ 3, 980, 981, 2290, 2293, 2397, 2398, 6022, 6024, 6025, 6034, 6073, 7249, 7250, 7259, 7297], [x * y - y ^ 2, 7268], [x * y ^ 2 - x ^ 3, 7296], [x * y ^ 2 - y ^ 3, 7263, 7282], [x ^ 2 * y - y ^ 3, 3465, 3535], [(x * y ^ 2 - x ^ 2 * y) + y ^ 3, 7258], [x + y, 144, 180, 1188, 1333, 1585, 1612, 1657, 1693, 1753, 1873, 2377, 2486, 2702, 2846, 3134, 3170, 3473, 3530, 3747, 4344, 4346, 4362, 4379, 4381, 4397, 4420, 4467, 4755, 4791, 5404, 5440, 5584, 5656, 5764, 5908, 6124, 6449, 6593, 6701, 6845, 6953, 7025, 7061, 7097, 7241], [x * y + x ^ 2, 246, 2242, 3045, 3081, 3468, 3471, 3538, 3541, 3643, 3654, 3661, 4446, 5566], [x * y + y ^ 2, 770, 771, 1194, 1195, 1204, 1470, 1715, 1751, 3220, 3221, 3467, 3489, 3578, 3664, 3920, 3921, 4410, 5320, 5823, 5920], [x * y ^ 2 + x ^ 2 * y, 3524, 3608, 4834, 5880, 5967, 7270], [x * y ^ 2 + y ^ 3, 2292, 3572, 4480, 6072], [x * y ^ 3 + x ^ 2 * y ^ 2, 1050], [x ^ 2 * y + x ^ 3, 3361, 3502, 3504], [x ^ 2 * y ^ 2 + x ^ 3 * y, 4831], [x ^ 3 * y + x ^ 4, 3501], [x * y + x ^ 2 + y ^ 2, 3469, 3539], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 3581], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 2380, 3606, 4830], [x * y + 2 * y ^ 2, 666, 701, 1750, 3186, 3326, 5146], [x * y ^ 3 + 2 * y ^ 4, 2276], [(x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - 2 * y ^ 4, 7245], [(x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3) - y ^ 3, 3640], [2 * x * y + x ^ 2, 2695, 5635], [2 * x * y ^ 2 + x ^ 2 * y, 2347], [(2 * x * y ^ 2 + x ^ 2 * y) - y ^ 3, 7255], [2 * x * y + x ^ 2 + y ^ 2, 4341, 4376], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 3641], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * y ^ 4, 2275], [2 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3, 3466], [3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 3536]]) * x ^ 0 * y ^ 0
            end
        f21 = function (x, y)
                return dec(35, [[-2x, 3641, 3648], [-2x - y, 3657], [-2x + y, 7317], [-(x ^ -1) * y ^ 2, 969, 1373, 2439, 2598, 4644, 4727, 5532, 7072, 7212], [-x, 390, 494, 496, 498, 503, 770, 785, 805, 891, 892, 893, 894, 1125, 1160, 1170, 1191, 1196, 1198, 1206, 1207, 1220, 1650, 1651, 1652, 1654, 1656, 1658, 1659, 2045, 2046, 2049, 2050, 2051, 2052, 2055, 2280, 2283, 2290, 2292, 2311, 2315, 2316, 2372, 2381, 2386, 2388, 2396, 2397, 2410, 2452, 2631, 2633, 2991, 2992, 3116, 3467, 3492, 3497, 3646, 3656, 3670, 3677, 4722, 4761, 4766, 4768, 4776, 4777, 4790, 4834, 4897, 5149, 5158, 5226, 5323, 5534, 5675, 5685, 5951, 5956, 5958, 5966, 5967, 6060, 6063, 6070, 6072, 6098, 7074, 7176, 7181, 7183, 7191, 7192, 7246, 7250, 7251, 7260, 7261, 7285, 7288, 7295, 7297, 7323, 7332], [-y, 105, 153, 218, 315, 317, 490, 500, 577, 683, 901, 1017, 1185, 1260, 1330, 1406, 1479, 1691, 1766, 1912, 1946, 2194, 2339, 2345, 2356, 2358, 2364, 2367, 2420, 2421, 2422, 2424, 2426, 2428, 2434, 2437, 2705, 2777, 2838, 2941, 3176, 3208, 3248, 3427, 3468, 3476, 3487, 3493, 3559, 3606, 3611, 3621, 3635, 3643, 3647, 3649, 3650, 3651, 3652, 3781, 3823, 3857, 3898, 4001, 4027, 4109, 4220, 4254, 4288, 4432, 4505, 4625, 4626, 4627, 4629, 4631, 4633, 4862, 4941, 5075, 5182, 5217, 5252, 5624, 5804, 5866, 5880, 6011, 6043, 6122, 6258, 6315, 6351, 6390, 6422, 6461, 6501, 6532, 6568, 6599, 6640, 6967, 7070, 7081, 7092, 7140, 7151, 7153, 7159, 7162, 7248, 7263, 7273, 7318, 7324, 7326, 7327, 7329, 7336, 7337, 7338, 7340, 7343], [-(x ^ 2) * y ^ -1, 71, 736, 1020, 1338, 2032, 2206, 2207, 2222, 2353, 3327, 4586, 4657, 4698, 5219, 5888, 5897, 6759], [-(x ^ -2) * y ^ 3 - x ^ -1 * y ^ 2, 1682, 2907], [-(x ^ -1) * y ^ 2 - y, 2334, 2430, 2431, 2435, 2436, 3660, 3661, 3662, 3663, 3666, 3668, 4635, 4636, 4639, 4640, 4641, 4642, 6105, 6110, 6114, 6598], [-x - y, 109, 118, 425, 497, 820, 895, 998, 999, 1039, 1135, 1156, 1161, 1163, 1171, 1172, 1577, 1684, 2276, 2281, 2291, 2349, 2419, 3889, 4624, 4705, 4710, 4714, 5671, 5676, 5686, 6056, 6061, 6071, 7144, 7253, 7262, 7281, 7286, 7296], [-x - x ^ 2 * y ^ -1, 491, 877, 1649, 5328], [(-x - y) - x ^ 2 * y ^ -1, 106, 111, 113, 982, 996, 997], [-(x ^ -1) * y ^ 2 + y, 4832], [-x + y, 3642, 7316], [x ^ -2 * y ^ 3, 1367, 2592], [x ^ -1 * y ^ 2, 37, 2440, 4846, 4849, 4851, 4852, 4853, 4855, 6113, 6115, 6119, 6283], [x, 0, 110, 180, 252, 286, 316, 360, 459, 540, 611, 649, 720, 735, 737, 864, 875, 936, 950, 951, 953, 980, 995, 1016, 1019, 1028, 1033, 1034, 1046, 1080, 1116, 1197, 1226, 1297, 1331, 1332, 1335, 1336, 1440, 1513, 1547, 1580, 1581, 1583, 1586, 1588, 1589, 1623, 1647, 1729, 1800, 1837, 1980, 2014, 2092, 2125, 2150, 2151, 2152, 2154, 2157, 2160, 2205, 2220, 2221, 2269, 2327, 2346, 2350, 2351, 2486, 2522, 2566, 2666, 2738, 2807, 2879, 2942, 3026, 3062, 3276, 3321, 3326, 3380, 3452, 3530, 3597, 3711, 3747, 3782, 3925, 3959, 4026, 4029, 4031, 4033, 4038, 4069, 4136, 4177, 4322, 4356, 4390, 4466, 4539, 4573, 4587, 4601, 4602, 4603, 4604, 4656, 4691, 4692, 4696, 4703, 4724, 4905, 4978, 5008, 5044, 5111, 5223, 5251, 5254, 5256, 5258, 5263, 5296, 5368, 5440, 5476, 5512, 5662, 5737, 5760, 5841, 5881, 5882, 5885, 5886, 5895, 5896, 5940, 6125, 6161, 6197, 6655, 6691, 6728, 6803, 6832, 6869, 6906, 6942, 6966, 6969, 6971, 6973, 6978, 6981, 6982, 6983, 6984, 7014, 7045, 7075, 7085, 7108, 7141, 7145, 7146, 7155, 7156, 7249, 7322, 7328, 7334, 7335], [y, 108, 322, 324, 385, 396, 420, 430, 432, 504, 755, 756, 792, 828, 831, 900, 972, 1008, 1044, 1151, 1152, 1155, 1188, 1192, 1224, 1333, 1369, 1585, 1657, 1857, 1872, 1873, 2053, 2161, 2233, 2275, 2277, 2308, 2310, 2321, 2323, 2329, 2332, 2341, 2369, 2374, 2377, 2382, 2417, 2442, 2449, 2450, 2594, 2630, 2906, 2911, 2918, 2943, 2949, 2951, 2952, 2954, 2990, 3082, 3097, 3098, 3131, 3134, 3346, 3347, 3348, 3350, 3353, 3466, 3481, 3494, 3638, 3674, 3675, 3783, 3789, 3791, 3792, 3794, 4035, 4611, 4622, 4647, 4676, 4677, 4678, 4680, 4683, 4713, 4715, 4719, 4726, 4729, 4738, 4743, 4744, 4756, 4762, 4829, 4838, 4847, 4848, 4863, 4864, 5152, 5224, 5260, 5332, 5401, 5403, 5404, 5538, 5547, 5548, 5566, 5571, 5578, 5581, 5584, 5670, 5681, 5692, 5883, 5908, 5952, 5980, 6055, 6057, 6088, 6091, 6092, 6096, 6103, 6124, 6989, 7088, 7097, 7169, 7177, 7205, 7211, 7214, 7223, 7228, 7229, 7241, 7245, 7277, 7280, 7282, 7313, 7315, 7349], [x ^ 2 * y ^ -1, 2451, 3482, 3676, 5324], [x ^ -1 * y ^ 2 - x, 7247], [x ^ -1 * y ^ 2 + y, 1157, 1688, 2913], [x + y, 72, 288, 320, 321, 323, 389, 398, 468, 492, 612, 648, 750, 751, 752, 788, 789, 960, 961, 962, 1210, 1261, 1441, 1549, 1582, 1584, 1621, 1801, 1981, 2017, 2155, 2156, 2197, 2314, 2337, 2413, 2558, 2810, 2882, 3278, 3386, 3458, 3471, 3566, 3602, 3819, 3927, 4071, 4138, 4143, 4179, 4323, 4359, 4395, 4467, 4575, 4731, 4733, 4741, 4742, 4755, 4899, 5080, 5116, 5188, 5322, 5394, 5569, 5764, 5872, 5944, 6016, 6052, 6665, 6701, 6737, 6773, 6809, 6845, 6881, 6917, 6953, 7025, 7061, 7071, 7076, 7078, 7086, 7087, 7133, 7216, 7218, 7226, 7227], [x + x ^ 2 * y ^ -1, 1031, 1032, 1579, 1614, 2137, 2318, 6794, 7319], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 876, 3473], [x ^ -1 * y ^ 2 + x + y, 107], [x + y + x ^ 2 * y ^ -1, 6094], [x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 981, 1021, 1023, 4694]]) * x ^ 0 * y ^ 0
            end
        f23 = function (x, y)
                return dec(56, [[(-5x - 4y) - x ^ 2 * y ^ -1, 15651], [(-5x - 3y) - x ^ 2 * y ^ -1, 15627], [(-4x - 3y) - x ^ 2 * y ^ -1, 15657], [(-4x - 2y) - x ^ 2 * y ^ -1, 15630], [-4x - x ^ 2 * y ^ -1, 6218], [(-3x - 2y) - x ^ 2 * y ^ -1, 12448, 12454], [-3x - y, 9354, 9363], [((-3x - y) - 4 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 9308], [((-3x - y) - 3 * x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 9243, 9267], [(-3x - y) - 2 * x ^ 2 * y ^ -1, 9246, 9273], [(-3x + y) - 2 * x ^ 2 * y ^ -1, 9355, 9379], [-2x, 6220], [-2x - 3 * x ^ 2 * y ^ -1, 4312], [-2x - 2y, 1179, 1182, 1203, 1209, 1680, 1681, 7632, 10136, 10137, 10192, 12040, 12041, 15626, 15633], [-2x - y, 2688, 2689, 5891, 6226, 6227, 8188, 10193, 12488, 12489, 14563, 14587, 17615, 18507], [-2x - x ^ 2 * y ^ -1, 1427, 2995, 12407, 18287, 18623], [-2 * x ^ 2 * y ^ -1 - x ^ 3 * y ^ -2, 15539], [((-2x - y) - 3 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 9324], [(-2x - y) - x ^ 2 * y ^ -1, 5377, 12432, 15120, 15122, 15129, 18265, 18601], [(-2 * x ^ -1 * y ^ 2 - x) + y, 6190], [(-2x - y) + x ^ 3 * y ^ -2, 4315], [(-2x + y) - 2 * x ^ 2 * y ^ -1, 6216], [(-2x + y) - x ^ 2 * y ^ -1, 6243, 9358, 9385], [-2x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 7618], [-(x ^ -1) * y ^ 2, 2720, 4444, 4445, 4452, 4453, 4456, 5564, 5565, 5572, 5573, 5576, 6054, 6063, 6067, 6081, 6084, 6085, 6111, 6123, 6137, 6140, 6141, 6180, 6181, 6188, 12520, 13843, 13848, 13851, 13857, 13866, 13869, 13883, 14971, 14979, 14986, 14989], [-x, 448, 1487, 1798, 1823, 1825, 1916, 1932, 2019, 2022, 2043, 2049, 2088, 2094, 2111, 2121, 2241, 2248, 2588, 2604, 2971, 2994, 3040, 3046, 3063, 3069, 3073, 3082, 3128, 3416, 3783, 3839, 4274, 4283, 4286, 4288, 4316, 4319, 4331, 4345, 4346, 4348, 4349, 4570, 4875, 4899, 4940, 4987, 5378, 5381, 5437, 5688, 5824, 5827, 5828, 5851, 5867, 5896, 5923, 5931, 6079, 6221, 6223, 6259, 6267, 6499, 6523, 6670, 6697, 7624, 7625, 7631, 7639, 7682, 7689, 7692, 7693, 7701, 7702, 8067, 8091, 8204, 8240, 8248, 8350, 8359, 8363, 8377, 8496, 8570, 8573, 8579, 8615, 8630, 8657, 8683, 8707, 8962, 8970, 8971, 8977, 9028, 9357, 9361, 9392, 9399, 9403, 10080, 10418, 10425, 10760, 10767, 10817, 10838, 10977, 11369, 11512, 11545, 11709, 11717, 11881, 11903, 11944, 11950, 11967, 11977, 12098, 12433, 12462, 12476, 12795, 12969, 13136, 13340, 13354, 13356, 13508, 13682, 13691, 13694, 13696, 14032, 14045, 14056, 14068, 14180, 14196, 14202, 14312, 14393, 14420, 14466, 14478, 14566, 14593, 14902, 14929, 15234, 15241, 15538, 15546, 16523, 17027, 17086, 17098, 17110, 17124, 17658, 17667, 17670, 17672, 17699, 17723, 18099, 18105, 18119, 18231, 18370, 18378, 18379, 18385, 18762, 18770, 18771, 18777], [-y, 1, 117, 174, 231, 517, 574, 663, 700, 880, 935, 1049, 1064, 1065, 1066, 1069, 1073, 1077, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1130, 1134, 1147, 1153, 1178, 1181, 1185, 1187, 1189, 1223, 1281, 1299, 1306, 1329, 1335, 1545, 1664, 1684, 1687, 1742, 1769, 1804, 1820, 1908, 1911, 1922, 1945, 2084, 2100, 2154, 2155, 2410, 2413, 2418, 2419, 2422, 2455, 2470, 2473, 2477, 2495, 2497, 2621, 2692, 2695, 2704, 2710, 2727, 2729, 2737, 2957, 3112, 3138, 3200, 3313, 3370, 3487, 3557, 3764, 3904, 3960, 4067, 4120, 4218, 4227, 4230, 4232, 4369, 4376, 4432, 4433, 4440, 4472, 4475, 4623, 4720, 4739, 4834, 4996, 5000, 5018, 5019, 5270, 5279, 5366, 5495, 5517, 5544, 5548, 5552, 5553, 5560, 5595, 5600, 5602, 5604, 5610, 5818, 5898, 5900, 5901, 5908, 5912, 6023, 6092, 6148, 6164, 6167, 6176, 6203, 6211, 6236, 6237, 6244, 6255, 6262, 6395, 6467, 6508, 6599, 6641, 6692, 6736, 6827, 6849, 7131, 7316, 7568, 7575, 7597, 7636, 7648, 7658, 7916, 7973, 8011, 8035, 8076, 8212, 8406, 8433, 8589, 8598, 8652, 8682, 8691, 9118, 9372, 9373, 9381, 9382, 9697, 9701, 9718, 9942, 9986, 9998, 10054, 10068, 10140, 10143, 10196, 10233, 10249, 10256, 10326, 10403, 10570, 10592, 10599, 10621, 10812, 10815, 10895, 11330, 11332, 11344, 11354, 11356, 11468, 11559, 11587, 11641, 12004, 12026, 12044, 12047, 12057, 12071, 12083, 12128, 12260, 12287, 12381, 12384, 12389, 12391, 12399, 12427, 12436, 12449, 12456, 12473, 12475, 12492, 12495, 12504, 12510, 12527, 12529, 12537, 12547, 12606, 12665, 12837, 13007, 13211, 13459, 13554, 13556, 13559, 13589, 13724, 13727, 13754, 13757, 13814, 13832, 13838, 13896, 13903, 14242, 14244, 14256, 14266, 14268, 14522, 14531, 14534, 14536, 14641, 14728, 14729, 14730, 14733, 14737, 14741, 14786, 14789, 14792, 14793, 14797, 14799, 14845, 14853, 14860, 14872, 14882, 14884, 14958, 14972, 14994, 14996, 15010, 15017, 15033, 15042, 15045, 15095, 15136, 15139, 15264, 15314, 15315, 15345, 15349, 15352, 15355, 15357, 15359, 15376, 15395, 15510, 15658, 15684, 15743, 15802, 15875, 15974, 16049, 16157, 16313, 16434, 16532, 16536, 16554, 16555, 16596, 16688, 16690, 16692, 16698, 16762, 16771, 16774, 16776, 16954, 16968, 16971, 16972, 16995, 17025, 17031, 17032, 17036, 17053, 17058, 17059, 17404, 17584, 17586, 17596, 17600, 17619, 17698, 17706, 17707, 17713, 17814, 17841, 17864, 17865, 17866, 17867, 17868, 17869, 17870, 17871, 17874, 17878, 17891, 17897, 17922, 17925, 17928, 17930, 17934, 17949, 17981, 17990, 18002, 18006, 18020, 18276, 18481, 18485, 18487, 18488, 18491, 18494, 18497, 18509, 18567, 18757, 18790, 18804], [-(x ^ 2) * y ^ -1, 4313, 4356, 4931, 4955, 9220, 9276, 9306, 9313, 9316, 9325, 12001, 12027, 13359, 13731, 13771, 14171, 14368, 14952, 15544, 15545, 18595], [-(x ^ -1) * y ^ 2 - 3y, 4426, 5546], [-x - 3y, 15350, 15371], [-(x ^ -1) * y ^ 2 - 2y, 4435, 5555, 6171], [-x - 2y, 1067, 1070, 1291, 1294, 1315, 1321, 2868, 2884, 7012, 7028, 8580, 8596, 10864, 10868, 12378, 12385, 12450, 12452, 12474, 14731, 14734, 14785, 14790, 15132, 15154, 15188, 15204, 15362, 15374, 15377, 17921, 17927, 18272, 18490], [-x - 2 * x ^ 2 * y ^ -1, 9190, 9217], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 9297], [(-(x ^ -1) * y ^ 2 - 2y) + x ^ 2 * y ^ -1, 6162], [-(x ^ -1) * y ^ 2 - x, 6178], [-(x ^ -1) * y ^ 2 - y, 4434, 4441, 5554, 5561, 6170, 6177, 6189, 6192, 13834, 13841, 13865, 14954, 14955, 14977, 14985, 15656], [-x - y, 449, 1091, 1097, 1292, 1295, 1426, 1904, 1905, 2018, 2021, 2027, 2063, 2411, 2412, 2414, 2415, 2435, 2441, 2468, 2471, 3055, 3417, 4984, 4986, 4993, 5015, 5384, 5897, 6110, 6119, 6233, 6245, 6248, 7564, 7567, 7635, 7638, 7667, 8739, 8763, 9044, 9342, 9346, 9362, 9369, 10479, 10588, 10591, 10809, 10865, 10871, 11328, 11334, 11426, 12000, 12006, 12016, 12413, 12464, 13553, 13561, 13583, 13721, 13751, 14240, 14246, 14562, 14569, 14571, 14611, 14755, 14761, 14784, 14787, 14856, 14862, 14974, 15039, 15148, 15151, 15235, 15243, 15259, 15283, 15629, 15635, 15637, 15675, 16520, 16522, 16529, 16551, 16859, 16883, 17024, 17026, 17033, 17055, 17593, 17920, 17924, 18268, 18290, 18291, 18484, 18486, 18498, 18510, 18512, 18513, 18604, 18626, 18627], [-x - x ^ 2 * y ^ -1, 1288, 1289, 3001, 3024, 3025, 3036, 3052, 4314, 4321, 5376, 7622, 7649, 7674, 7680, 7681, 7683, 7684, 7688, 7723, 9199, 9203, 9224, 9280, 9317, 9326, 9335, 13527, 14168, 14170, 14177, 14199, 17112, 18256, 18258, 18259, 18763, 18766, 18787, 18793], [-y - x ^ 2 * y ^ -1, 13722], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 9296, 17107], [(-(x ^ -1) * y ^ 2 - x) - 2y, 6168, 13863, 14983], [(-(x ^ -1) * y ^ 2 - x) - y, 6161, 14963, 14968, 15003], [(-x - y) - x ^ 2 * y ^ -1, 7560, 7561, 10473, 10584, 10585, 13729], [((-x - y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 13723, 13747], [(-x - y) + x ^ 2 * y ^ -1, 7591, 10615], [(-x - y) + x ^ 3 * y ^ -2, 10472], [(-x - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2, 7619, 7643], [(-x - y) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 4339, 7627], [(-x - x ^ 2 * y ^ -1) + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 9187, 9211], [(-x - y) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 9242, 9251], [-(x ^ -1) * y ^ 2 + x, 4436, 5556, 13859], [-(x ^ -1) * y ^ 2 + y, 4454], [-(x ^ -1) * y ^ 2 + x ^ 2 * y ^ -1, 6108, 6131], [-x + y, 7578, 10602, 13582], [-x + x ^ 2 * y ^ -1, 7577, 7603, 10601, 10627], [-x + x ^ 3 * y ^ -2, 9192, 9200], [-y + x ^ 2 * y ^ -1, 4344, 5892, 7660, 9255, 9259, 10476, 10489, 10515, 10808, 11566, 12014, 12028, 13552, 13720], [(-x + y) - 2 * x ^ 2 * y ^ -1, 6217], [(-(x ^ -1) * y ^ 2 + x) - y, 13835, 14961], [(-x + y) - x ^ 2 * y ^ -1, 1433, 5907, 6224, 10516, 11567, 12380, 15123, 18594], [-(x ^ -1) * y ^ 2 + x + y, 6051, 6075, 6138, 6172], [-(x ^ -1) * y ^ 2 + x + x ^ 2 * y ^ -1, 6107], [-x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 8347, 8371], [-y + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 9248, 9249, 9256, 9291], [-(x ^ -1) * y ^ 2 + 2y, 5574], [-x + 2y, 13750], [-y + 2 * x ^ 2 * y ^ -1, 9212], [(-x + 2y) - x ^ 2 * y ^ -1, 6219], [-(x ^ -1) * y ^ 2 + 2x + x ^ 2 * y ^ -1, 6104], [-x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 15524], [-x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 9186, 9195], [x ^ -1 * y ^ 2, 2725, 4430, 4439, 4443, 4457, 4460, 4461, 5550, 5559, 5563, 5577, 5580, 5581, 6068, 6069, 6076, 6116, 6124, 6125, 6132, 6179, 6193, 6194, 6196, 6197, 12525, 13833, 13850, 13862, 14964, 14970, 15649, 15661], [x, 56, 282, 339, 396, 737, 794, 1416, 1422, 1439, 1445, 1449, 1459, 1483, 1580, 1818, 1875, 1931, 1937, 1972, 1988, 2072, 2073, 2200, 2314, 2408, 2409, 2464, 2465, 2565, 2643, 2766, 2928, 2934, 2951, 2961, 2984, 2990, 2999, 3007, 3013, 3017, 3098, 3110, 3111, 3248, 3585, 3643, 3700, 3982, 4091, 4115, 4174, 4203, 4268, 4290, 4332, 4340, 4481, 4488, 4767, 5074, 5112, 5170, 5182, 5226, 5238, 5472, 5668, 5751, 5847, 5854, 5868, 5924, 5983, 6066, 6105, 6191, 6234, 6251, 6256, 6260, 6890, 6956, 7176, 7234, 7351, 7421, 7478, 7569, 7633, 7734, 7761, 7787, 7868, 8126, 8182, 8209, 8260, 8324, 8354, 8361, 8364, 8365, 8372, 8373, 8374, 8512, 8524, 8738, 8746, 8747, 8753, 8804, 8820, 8898, 8909, 9137, 9391, 9408, 9465, 9636, 9807, 10481, 10593, 10656, 10747, 11097, 11230, 11244, 11454, 11780, 11833, 12114, 12126, 12127, 12191, 12370, 12377, 12406, 12420, 12712, 12780, 12881, 12964, 13050, 13277, 13334, 13360, 13361, 13373, 13392, 13499, 13523, 13528, 13624, 13676, 13698, 13728, 13735, 13739, 13981, 14012, 14174, 14186, 14195, 14198, 14200, 14201, 14507, 14588, 14694, 14849, 14924, 15411, 15514, 15515, 15517, 15520, 15521, 15523, 15525, 15527, 15530, 15542, 15557, 15563, 15620, 15904, 16073, 16242, 16355, 16379, 16469, 16643, 16747, 16816, 16858, 16866, 16867, 16873, 17099, 17105, 17114, 17117, 17118, 17162, 17195, 17254, 17281, 17312, 17447, 17534, 17588, 17594, 17652, 17674, 17782, 17796, 18054, 18118, 18132, 18174, 18203, 18226, 18227, 18702], [y, 488, 842, 843, 845, 846, 848, 849, 853, 855, 954, 957, 962, 963, 966, 969, 999, 1080, 1083, 1103, 1136, 1140, 1159, 1180, 1183, 1197, 1311, 1347, 1350, 1362, 1368, 1385, 1425, 1626, 1628, 1629, 1631, 1632, 1634, 1638, 1653, 1689, 1693, 1710, 1762, 1824, 1837, 1938, 1976, 1995, 1999, 2005, 2052, 2109, 2117, 2130, 2133, 2137, 2141, 2150, 2159, 2166, 2173, 2177, 2354, 2355, 2357, 2358, 2362, 2366, 2374, 2379, 2385, 2394, 2401, 2451, 2490, 2508, 2622, 2693, 2697, 2701, 2718, 2719, 2743, 2845, 2850, 2858, 2861, 2865, 2867, 2869, 2903, 2907, 2964, 3021, 3078, 3117, 3456, 3763, 3784, 3840, 3866, 3867, 3869, 3870, 3872, 3873, 3877, 3879, 3922, 3924, 3925, 3927, 3928, 3930, 3934, 3949, 4100, 4105, 4212, 4216, 4219, 4234, 4235, 4276, 4390, 4442, 4455, 4504, 4561, 4595, 4618, 4619, 4657, 4679, 4732, 4990, 4999, 5002, 5011, 5014, 5016, 5017, 5188, 5245, 5302, 5436, 5438, 5439, 5442, 5447, 5461, 5473, 5530, 5562, 5588, 5618, 5630, 5644, 5701, 5882, 5884, 5886, 5887, 5889, 5895, 5899, 5913, 5914, 5916, 5917, 5929, 5995, 6019, 6043, 6052, 6055, 6057, 6064, 6091, 6099, 6100, 6147, 6155, 6157, 6204, 6214, 6225, 6235, 6249, 6252, 6253, 6271, 6272, 6284, 6329, 6356, 6500, 6671, 7002, 7005, 7009, 7011, 7013, 7047, 7051, 7058, 7061, 7066, 7067, 7070, 7073, 7103, 7298, 7301, 7310, 7526, 7532, 7580, 7581, 7584, 7592, 7602, 7653, 7697, 7754, 8039, 8096, 8210, 8267, 8381, 8438, 8551, 8604, 8609, 8666, 8716, 8723, 8757, 8766, 8780, 8837, 9008, 9065, 9236, 9293, 9350, 9367, 9371, 9388, 9407, 9538, 9550, 9576, 9579, 9692, 9695, 9729, 9745, 9750, 9857, 9864, 9968, 9970, 9972, 9978, 10035, 10041, 10055, 10067, 10092, 10145, 10149, 10166, 10197, 10201, 10205, 10206, 10222, 10272, 10488, 10491, 10494, 10495, 10523, 10604, 10605, 10608, 10616, 10626, 10828, 10833, 10850, 10890, 10894, 10908, 10924, 10947, 11004, 11039, 11061, 11174, 11188, 11237, 11263, 11289, 11314, 11316, 11319, 11346, 11349, 11403, 11441, 11455, 11460, 11467, 11574, 11688, 11973, 12030, 12070, 12084, 12087, 12133, 12144, 12393, 12396, 12400, 12417, 12418, 12419, 12429, 12437, 12440, 12445, 12447, 12455, 12483, 12486, 12493, 12497, 12501, 12518, 12519, 12543, 12771, 12772, 12942, 12943, 13114, 13219, 13243, 13342, 13513, 13570, 13572, 13584, 13594, 13596, 13684, 13738, 13740, 13741, 13752, 13762, 13764, 13855, 13912, 14118, 14145, 14197, 14226, 14228, 14231, 14258, 14261, 14516, 14520, 14523, 14538, 14539, 14596, 14744, 14747, 14767, 14824, 14844, 14847, 14877, 14881, 14938, 14956, 14959, 14995, 15026, 15038, 15040, 15052, 15067, 15090, 15091, 15121, 15125, 15133, 15152, 15166, 15178, 15181, 15185, 15187, 15189, 15223, 15227, 15280, 15290, 15293, 15297, 15301, 15310, 15319, 15326, 15333, 15337, 15394, 15565, 15624, 15625, 15642, 15654, 15679, 16193, 16215, 16364, 16414, 16421, 16441, 16526, 16535, 16538, 16547, 16550, 16552, 16553, 16706, 16718, 16732, 16756, 16760, 16763, 16778, 16779, 16877, 16886, 16900, 16991, 16998, 17012, 17030, 17042, 17044, 17046, 17048, 17051, 17054, 17056, 17057, 17066, 17276, 17504, 17602, 17614, 17616, 17660, 17732, 17789, 17846, 17880, 17884, 17903, 17960, 17982, 18007, 18009, 18017, 18131, 18245, 18257, 18261, 18262, 18263, 18270, 18289, 18302, 18314, 18317, 18322, 18323, 18326, 18329, 18359, 18416, 18426, 18427, 18429, 18430, 18434, 18438, 18446, 18451, 18457, 18466, 18473, 18530, 18539, 18563, 18587, 18597, 18600, 18603, 18606, 18609, 18621, 18644, 18791, 18815], [x ^ 2 * y ^ -1, 4259, 4328, 4355, 4363, 5687, 6114, 6160, 7626, 7644, 8346, 8352, 8353, 8355, 8360, 8395, 8456, 9194, 9201, 9204, 9213, 9250, 9257, 9332, 9352, 11511, 11648, 13667, 14031, 15540, 17083, 17503, 17643, 18483], [x - 2y, 5910], [(y - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 9304, 9312], [(x - 2y) + x ^ 2 * y ^ -1, 7646, 15347], [x ^ -1 * y ^ 2 - x, 6136, 13844], [x ^ -1 * y ^ 2 - y, 6122], [x - y, 7562, 7634, 7637, 9380, 10586, 11342, 14254, 14870], [x - x ^ 2 * y ^ -1, 7659], [y - x ^ 2 * y ^ -1, 7604, 7652, 9311, 9315, 10502, 10628, 11312, 11540, 11553, 11579, 14224, 14840], [(x ^ -1 * y ^ 2 - x) - y, 4427, 4451, 5547, 5571, 6060, 6187], [(x - y) - x ^ 3 * y ^ -2, 8356], [(y - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 9305, 9347], [(x - y) + x ^ 2 * y ^ -1, 6228, 9364, 10503, 11580, 18482], [x ^ -1 * y ^ 2 + y, 6058, 6065, 6077, 6080, 6121, 13860, 13864, 14980, 14984], [x ^ -1 * y ^ 2 + x ^ 2 * y ^ -1, 6163], [x + y, 57, 285, 342, 399, 741, 798, 840, 955, 958, 979, 985, 1076, 1092, 1344, 1345, 1406, 1431, 1482, 1596, 1624, 1881, 1906, 1909, 2131, 2223, 2280, 2337, 2679, 2793, 3027, 3050, 3135, 3250, 3592, 3649, 3706, 3864, 3920, 3991, 4162, 4200, 4202, 4209, 4231, 4272, 4291, 4333, 4789, 4903, 4960, 5131, 5416, 5435, 5441, 5758, 5872, 5986, 6048, 6112, 6113, 6135, 6139, 6166, 6175, 6899, 7059, 7062, 7083, 7089, 7184, 7241, 7355, 7412, 7469, 7576, 7582, 7583, 7611, 7620, 7623, 7675, 7699, 7811, 8153, 8178, 8185, 8187, 8227, 8495, 8513, 8540, 8894, 8951, 9179, 9230, 9234, 9286, 9290, 10434, 10600, 10606, 10607, 10635, 10662, 10719, 10776, 10824, 10830, 11118, 11313, 11321, 11343, 11384, 11390, 11442, 11517, 11543, 11745, 11802, 11859, 11916, 11988, 11991, 12015, 12021, 12023, 12033, 12201, 12372, 12376, 12408, 12469, 12715, 12768, 12886, 12937, 13057, 13106, 13113, 13285, 13333, 13341, 13399, 13507, 13547, 13568, 13574, 13627, 13680, 13683, 13742, 13969, 14026, 14083, 14176, 14183, 14225, 14233, 14255, 14425, 14482, 14504, 14506, 14513, 14535, 14710, 14740, 14756, 14841, 14871, 14918, 14934, 15153, 15244, 15263, 15291, 15375, 15451, 15622, 15908, 16079, 16250, 16478, 16649, 16744, 16746, 16753, 16775, 16820, 17219, 17333, 17561, 17611, 17656, 17675, 17977, 17983, 18074, 18188, 18260, 18266, 18274, 18283, 18286, 18288, 18315, 18318, 18339, 18345, 18492, 18496, 18514, 18515, 18592, 18598, 18610, 18612, 18614, 18622, 18624, 18625, 18634, 18701, 18761, 18767], [x + x ^ 2 * y ^ -1, 1400, 1401, 1412, 1428, 2968, 2969, 2980, 2996, 3057, 4256, 4258, 4265, 4287, 4329, 6169, 6247, 8457, 9205, 9214, 9223, 9261, 9270, 9279, 9336, 9353, 11649, 13135, 13664, 13666, 13673, 13695, 15528, 15531, 15534, 15550, 17082, 17084, 17640, 17642, 17649, 17671, 18480], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 9184, 9193, 9235, 9240, 17092], [((x + y) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 9298, 9307], [(x ^ -1 * y ^ 2 + x) - y, 6078, 14982], [(x + y) - x ^ 2 * y ^ -1, 7647], [(x + y) - x ^ 3 * y ^ -2, 4343, 11536], [(x + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 7628], [((x + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 9196], [x ^ -1 * y ^ 2 + x + y, 14953], [x + y + x ^ 2 * y ^ -1, 7616, 7617, 11537, 14311], [x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 15543], [x + y + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 13732, 14367], [x ^ -1 * y ^ 2 + x + 2y, 15655], [x ^ -1 * y ^ 2 + x + 3y, 6050], [x ^ -1 * y ^ 2 + 2y, 6059, 6115], [x + 2y, 841, 1300, 1316, 1625, 1913, 1917, 2128, 2129, 2134, 2352, 2353, 2356, 2359, 2859, 2862, 2883, 2889, 3865, 3921, 5434, 5440, 5888, 6120, 7003, 7006, 7027, 7033, 8571, 8574, 8595, 8601, 12394, 12434, 12441, 15126, 15138, 15147, 15150, 15179, 15182, 15203, 15209, 15288, 15289, 15294, 15372, 15378, 17976, 17980, 18424, 18425, 18428, 18431, 18593, 18599, 18602, 18760, 18764], [x + 2 * x ^ 2 * y ^ -1, 4323], [(x + 2y) - x ^ 2 * y ^ -1, 5432], [x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 9185, 9241, 15512, 17080], [x + 3y, 15356], [2x, 15518], [2y, 6222, 6231], [2 * x ^ -1 * y ^ 2 - 2y, 6134], [2x - y, 6246], [2y - x ^ 2 * y ^ -1, 5433, 5883, 7590, 10614], [2x + y, 1907, 1910, 2028, 2044, 4330, 8179, 8203, 13736, 14572, 18619], [2x + x ^ 2 * y ^ -1, 12463, 15346, 15353, 15513, 17089, 18511], [((2x + y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4324], [2x + y + x ^ 2 * y ^ -1, 3051, 11984, 12392, 12398, 15344, 18489], [2x + y + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 9268], [2x + 2y, 1176, 1177, 5880, 5881, 6049, 9688, 9689], [2x + 2y + x ^ 2 * y ^ -1, 6106], [2x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 17111], [2x + 3y, 6056], [(3x + y) - x ^ 2 * y ^ -1, 4342], [3x + y + 2 * x ^ 2 * y ^ -1, 11985], [3x + y + 4 * x ^ 2 * y ^ -1, 9299, 9323], [3x + y + 4 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 9252], [3x + 2y + x ^ 2 * y ^ -1, 18596], [3x + 2y + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 9302, 9329], [3x + 3y, 1188, 1204], [4x + 3y + x ^ 2 * y ^ -1, 15652], [5x + 4y + x ^ 2 * y ^ -1, 15636]]) * x ^ 0 * y ^ 0
            end
        f25 = function (x, y)
                return dec(56, [[((-3 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 1986, 9734], [((-3 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - y ^ 5, 14270], [-3 * x * y ^ 2 - 2 * x ^ 2 * y, 16849], [((-3 * x * y ^ 2 + 3 * x ^ 3) - y ^ 3) + x ^ 4 * y ^ -1, 11562], [-2x, 4983], [-2y, 4929, 4933, 4980, 16844], [-2 * x * y, 2290, 17914], [-2 * x * y ^ 3, 8799, 8805], [-2 * x * y ^ 5, 4415], [-2 * y ^ 2, 4976, 11823, 17806], [-2 * y ^ 3, 2287, 17911], [-2 * y ^ 5, 14607, 17743], [(-2 * x * y ^ 3 - 4 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y, 8594], [((-2 * x * y ^ 5 - 4 * x ^ 2 * y ^ 4) - 3 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 10686], [(((-2 * x * y ^ 2 - 3 * x ^ 2 * y) - 3 * x ^ 3) - y ^ 3) - x ^ 4 * y ^ -1, 11921], [(-2 * x * y - 3 * x ^ 2) - x ^ 3 * y ^ -1, 14642], [-2x - 2y, 4954, 16826], [-2 * x * y - 2 * x ^ 2, 9738], [-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 14274], [-2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y, 8597], [((-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 10649], [(-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 2015], [(-2 * x * y ^ 2 - 2 * x ^ 2 * y) - y ^ 3, 4977], [(-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 10664], [(-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - y ^ 5, 14550], [((-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - y ^ 5, 4025], [(-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 11362], [-2 - x * y ^ -1, 11160], [-2x - y, 16855], [-2x - x ^ 2 * y ^ -1, 5655], [-2 * x * y - x ^ 2, 5514, 14621, 14660, 14668], [-2 * x * y - y ^ 2, 17522], [-2 * x * y ^ 2 - x ^ 2 * y, 1961, 2402, 11590], [-2 * x * y ^ 2 - y ^ 3, 11543], [-2 * x * y ^ 3 - x ^ 2 * y ^ 2, 5443, 8393], [-2 * x * y ^ 3 - y ^ 4, 3966], [-2 * x * y ^ 5 - x ^ 2 * y ^ 4, 4414, 10687], [-2 * x ^ 2 - x ^ 3 * y ^ -1, 14671], [-2 * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2, 10690], [-2 * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3, 17631], [-2 * x ^ 3 * y - x ^ 4, 14880], [((-2x - y) - 3 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 11898], [(-2 * x * y ^ 2 - x ^ 2 * y) - 2 * y ^ 3, 11697, 16681], [(-2x - y) - x ^ 2 * y ^ -1, 5626, 9490, 9712, 11873, 11877, 14362], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 1965, 2004, 4002, 9622, 10913, 14248, 14528], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 13598], [(-2 * x ^ 2 * y - x ^ 3) + y ^ 3, 14882], [(-2 * x ^ 2 * y ^ 2 - x ^ 3 * y) + y ^ 4, 11313], [((-2 * x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2 + 3 * x ^ 4 * y + x ^ 5) - y ^ 5, 11585], [(-2 * x * y ^ 2 - x ^ 2 * y) + 2 * x ^ 3 + x ^ 4 * y ^ -1, 11591], [-2 * x * y + y ^ 2, 2246, 17870], [-2 * x * y ^ 4 + x ^ 2 * y ^ 3, 8798], [-2 * x ^ 2 + y ^ 2, 9694], [-2 * x ^ 2 * y ^ 2 + y ^ 4, 14230], [-1, 343, 822, 970, 2256, 2480, 2576, 2634, 2698, 2924, 2933, 2993, 3643, 4272, 4279, 4686, 6521, 6707, 6786, 7316, 7486, 7883, 8359, 8639, 9618, 9745, 9749, 9751, 9788, 9796, 9816, 10042, 10509, 11013, 11577, 11608, 12150, 12202, 12948, 13987, 15405, 15425, 15439, 15444, 15452, 15800, 15912, 16017, 16185, 16187, 16317, 16653, 16843, 17066, 17269, 17291, 17432, 17488, 17880, 18306, 18381], [-(x ^ -2), 15550], [-(x ^ -2) * y, 15533], [-(x ^ -1), 766, 2502, 4963, 7374, 10894, 11857, 12394, 14183, 15177, 16278, 17793, 18669], [-(y ^ -1), 2950, 6819, 9928, 15340, 15443], [-(x ^ -1) * y ^ -1, 18686], [-(x ^ -1) * y, 749, 2390, 2485, 7357, 10110, 11569, 12272, 12659, 15610, 16261], [-(x ^ -1) * y ^ 2, 2373, 12376, 13669, 13671, 13677, 13708, 13716, 15565], [-(x ^ -1) * y ^ 3, 13712, 15577], [-x, 287, 293, 332, 1304, 1399, 1461, 1466, 1481, 1495, 1500, 1718, 2224, 2915, 2940, 2943, 2952, 3083, 3108, 3111, 3120, 4735, 4759, 4882, 4911, 5400, 5402, 5430, 5431, 6450, 6604, 7827, 8013, 8033, 8047, 8052, 8060, 8367, 8466, 8525, 8602, 9378, 9410, 9465, 9586, 9596, 9615, 9630, 9728, 10098, 10371, 10527, 10753, 10757, 10796, 10804, 10874, 10884, 10893, 10896, 10918, 11858, 12031, 12491, 12516, 12519, 13017, 13031, 13036, 13551, 13763, 13943, 14099, 14388, 15021, 15048, 15097, 15404, 15409, 15637, 15731, 15913, 15986, 16015, 16687, 16984, 18361, 18470, 18471, 18812], [-y, 59, 748, 754, 757, 760, 780, 782, 796, 805, 1345, 1349, 1354, 1383, 1388, 1396, 1599, 1656, 2243, 2268, 2271, 2280, 2467, 2492, 2495, 2504, 2919, 2925, 3044, 3087, 3100, 3109, 3112, 3132, 3134, 3140, 3529, 3531, 3585, 3587, 3715, 3962, 4055, 4287, 4296, 4669, 4709, 4711, 4717, 4748, 4756, 4935, 4938, 4948, 4967, 4972, 4982, 5377, 5381, 5607, 5613, 5652, 6184, 6242, 6274, 6824, 6827, 7180, 7424, 7656, 7865, 8386, 8895, 9325, 9471, 9477, 9792, 9824, 9840, 9988, 10477, 10479, 10485, 10511, 10516, 10524, 10526, 10626, 10738, 10908, 11147, 11184, 11345, 11616, 11632, 11655, 11661, 11692, 11700, 11702, 11853, 11961, 12777, 13179, 13298, 13501, 13503, 13506, 13509, 13535, 13540, 13548, 13594, 13692, 13695, 13719, 13889, 13893, 13932, 13940, 14519, 14575, 14873, 14908, 15448, 15608, 16075, 16260, 16266, 16269, 16272, 16292, 16294, 16637, 16639, 16643, 16645, 16676, 16684, 16730, 16751, 16808, 16810, 16839, 16852, 16854, 17256, 17259, 17292, 17311, 17314, 17324, 17336, 17348, 17356, 17358, 17419, 17444, 17456, 17475, 17500, 17503, 17512, 17711, 17867, 17892, 17895, 17904, 18618], [-x * y ^ -1, 292, 5930, 8051, 9799, 13035, 17123], [-x * y, 280, 286, 328, 330, 498, 620, 698, 727, 787, 812, 815, 824, 1073, 1184, 1267, 1316, 1319, 1328, 1692, 1701, 1942, 2514, 3082, 3635, 3752, 3754, 3870, 4262, 4306, 4425, 4429, 4468, 4476, 4655, 4668, 4674, 4677, 4680, 4700, 4702, 4706, 4928, 5078, 5213, 5215, 5221, 5247, 5252, 5260, 5262, 5495, 5501, 5532, 5540, 5542, 6376, 6941, 6947, 6972, 6975, 6984, 7080, 7096, 7171, 7196, 7199, 7208, 7542, 7622, 7666, 8056, 8156, 8828, 9626, 9850, 10097, 10142, 10186, 10364, 10472, 10474, 10594, 10604, 10623, 10638, 10800, 10861, 10912, 11150, 11194, 11410, 11573, 11598, 11642, 11773, 11800, 13043, 13104, 13106, 13329, 13333, 13372, 13380, 13480, 13496, 13505, 13592, 13606, 13725, 13745, 13764, 13772, 13791, 13863, 14081, 14100, 14384, 14623, 14629, 14655, 15278, 15279, 15630, 16359, 16365, 16404, 16534, 16581, 16583, 16586, 16596, 16615, 16620, 16628, 16630, 16698, 16708, 16727, 16742, 16753, 16800, 16996, 16999, 17008, 17211, 17257, 17466, 17478, 17566, 17667, 17682, 17683, 17710, 18710, 18754], [-x * y ^ 2, 837, 1290, 1297, 1521, 1687, 1693, 1925, 2078, 2122, 2129, 2131, 2958, 2959, 3970, 3977, 4041, 4384, 4391, 4395, 4411, 4472, 4696, 4701, 4840, 5169, 5256, 5453, 5459, 5475, 5536, 5595, 6946, 7119, 7125, 7525, 7662, 7981, 8004, 8006, 8256, 8261, 8272, 8286, 8561, 8804, 10198, 10242, 10656, 11339, 11392, 11397, 11575, 11816, 11818, 11955, 12535, 13440, 13442, 13444, 13449, 13768, 14264, 14570, 14599, 14614, 14664, 14711, 14900, 15057, 16352, 16358, 16400, 16402, 16564, 16624, 16939, 16970, 16977, 17201, 17297, 17664, 17803, 17819], [-x * y ^ 3, 1335, 2128, 2132, 2178, 2398, 4371, 4392, 4408, 4697, 5047, 5059, 5060, 5072, 5092, 5463, 5661, 5663, 5666, 5669, 5695, 5700, 5708, 7103, 7514, 7533, 7559, 8000, 8797, 8817, 8836, 8844, 10127, 10680, 11315, 11340, 11343, 11377, 11809, 11939, 11941, 13487, 14610, 14611, 16913, 16915, 16941, 16967, 17015, 17746], [-x * y ^ 4, 2174, 2529, 2573, 4862, 4984, 4988, 5046, 5088, 5704, 8840, 11415, 14401, 14445, 17687, 18209, 18253], [-x * y ^ 5, 5479, 11975], [-(x ^ 2), 331, 1460, 1465, 1696, 2171, 2190, 2234, 2962, 3130, 4479, 5263, 8012, 8017, 9576, 12538, 12712, 12874, 12996, 13001, 13383, 14336, 16631, 17926, 17970, 18526], [-(y ^ 2), 776, 781, 791, 797, 804, 813, 816, 838, 1392, 1519, 2075, 2112, 2242, 2517, 2558, 2905, 3128, 3584, 3588, 3634, 3834, 3863, 3949, 4039, 4045, 4072, 4258, 4265, 4752, 5075, 5545, 5547, 5648, 6715, 6888, 6890, 6951, 6964, 6973, 6976, 6996, 6998, 7175, 7181, 7188, 7197, 7200, 7222, 7389, 8345, 8625, 10145, 10216, 10221, 10232, 10246, 10520, 10608, 10808, 10812, 11153, 11594, 11601, 11696, 11855, 11920, 13544, 13583, 13666, 13936, 14430, 14602, 16288, 16293, 16471, 16474, 16477, 16484, 16490, 16496, 16516, 16518, 16680, 16712, 16750, 16848, 16851, 17352, 17418, 17481, 17738, 17759, 17762, 17772, 17776, 17781, 17784, 17791, 17804, 17866, 18238, 18713], [-(x ^ 2) * y ^ -1, 5986, 9727, 10807, 13047], [-(x ^ 2) * y, 834, 892, 1185, 1294, 1338, 1683, 1708, 1711, 1720, 1920, 2230, 3808, 3812, 4363, 4821, 4823, 4829, 4855, 4860, 4868, 5125, 5208, 5210, 6994, 7062, 7106, 7113, 7218, 8199, 8611, 10584, 11140, 11731, 12646, 13446, 13490, 13720, 13724, 13729, 13788, 14263, 14460, 14616, 14625, 16403, 16576, 16585, 16688, 17018, 17555, 17600, 17966, 18018], [-(x ^ 2) * y ^ 2, 888, 1233, 1873, 1932, 1935, 1944, 2179, 2301, 2303, 2306, 2316, 2335, 2340, 2348, 2350, 3854, 4378, 4407, 4864, 5051, 5071, 5095, 5711, 8238, 8282, 8575, 8607, 8793, 8795, 8820, 8823, 11325, 11418, 14455, 14461, 14564, 15089, 17531, 17559, 17612, 17615, 17624, 17690, 17979, 17995, 18007], [-(x ^ 2) * y ^ 3, 1726, 1913, 1957, 2344, 4418, 5037, 5438, 5482, 5656, 5665, 7557, 8278, 8794, 11256, 11258, 11978, 17581, 17593], [-(x ^ 2) * y ^ 4, 18023], [-(x ^ 3), 4833, 4871], [-(y ^ 3), 777, 1502, 1503, 1518, 1967, 1973, 2081, 2405, 2459, 2511, 2541, 3630, 3929, 4038, 4303, 6710, 6711, 6992, 8353, 8633, 9623, 9847, 10183, 10586, 11639, 11864, 13561, 14413, 14683, 14691, 16289, 16470, 16690, 17295, 17463, 17519, 17720, 17800, 18221, 18751], [-(x ^ 3) * y ^ -1, 9688], [-(x ^ 3) * y, 840, 2351, 4816, 4818, 5205, 14224, 14451, 14476, 14488], [-(x ^ 3) * y ^ 2, 1910, 1954, 2296, 2305, 5090, 8572, 8845, 11309, 13780, 17634, 18026], [-(x ^ 3) * y ^ 3, 1950, 14494, 14495], [-(y ^ 4), 2016, 2018, 3967, 4081, 7509, 7511, 7517, 7548, 7556, 8670, 8671, 10239, 10631, 16513, 16735, 16917, 16925, 16956, 16964, 17705], [-(x ^ 4) * y, 14498, 17635], [-(y ^ 5), 2062, 2063, 11471], [-(x ^ 2) * y ^ 3 - 3 * x ^ 3 * y ^ 2, 8568], [((-x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - 3 * x ^ 3 * y ^ 2) - x ^ 4 * y, 8616], [(((-x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - 3 * x ^ 3 * y ^ 2) - x ^ 4 * y) - y ^ 5, 2009], [-(x ^ -1) * y ^ 2 - 2y, 16805], [-x - 2y, 2088, 2368, 5605, 11674, 17330], [-x * y - 2 * y ^ 2, 2392, 3944, 11870, 17778], [-x * y ^ 2 - 2 * y ^ 3, 16512], [-x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 8573, 8593, 8612], [-x * y ^ 4 - 2 * y ^ 5, 17742], [-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2, 8570], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - 4 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 13822], [((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, 14665], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 1281], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 11927], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 866, 7138], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 1258, 8620, 11862, 13800, 14843, 14871], [(-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - y ^ 6, 7553, 16961], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 10644, 13826, 14501], [((-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 5649, 9513], [((-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) + y ^ 3, 14385], [-1 - x ^ -1 * y, 3101, 6982, 7206, 11457, 15410], [-1 - x * y ^ -1, 1499, 9730, 9770, 15396, 15426], [-(x ^ -1) - y ^ -1, 3118], [-(x ^ -1) * y - x * y ^ -1, 15455], [-(x ^ -1) * y ^ 2 - y, 6965, 7189, 10865, 10869, 11649, 11653, 13665, 13667, 13690, 15592, 16801, 17305, 17309], [-(x ^ -1) * y ^ 3 - y ^ 2, 13555, 17753, 17757], [-(x ^ -1) * y ^ 4 - y ^ 3, 15615], [-x - y, 1370, 3093, 4705, 4707, 4730, 5601, 8018, 8358, 8638, 9469, 9508, 9516, 9600, 10489, 10498, 10871, 10890, 10919, 11703, 11885, 13002, 13044, 13522, 13914, 14341, 14346, 14375, 14380, 16658, 16807, 17359], [-x - x ^ 2 * y ^ -1, 8034, 9519, 9742, 10778, 11916, 13018], [-y - x ^ 2 * y ^ -1, 1511, 8063], [-x * y - x ^ 2, 2965, 4450, 5225, 5234, 5543, 8604, 9580, 9793, 10083, 10108, 10111, 13354, 13746, 14486, 14617, 15449, 16602, 18527], [-x * y - y ^ 2, 1507, 2355, 2380, 2383, 2914, 3974, 4932, 5489, 5493, 6957, 7305, 8059, 8396, 9512, 9809, 10592, 11826, 11833, 11836, 11840, 11845, 11848, 13040, 13500, 13576, 14266, 14546, 14903, 14909, 14936, 15618, 15953, 16493, 16696, 16804, 16950, 17769, 17807], [-x * y ^ 2 - x ^ 2 * y, 845, 850, 879, 884, 1393, 1970, 1999, 2358, 3817, 4031, 4870, 5061, 5425, 7117, 7156, 7164, 10588, 10682, 11546, 11553, 11556, 11565, 11568, 13602, 13818, 13937, 14278, 14469, 14558, 14620, 16546, 16575, 16580, 16692], [-x * y ^ 2 - y ^ 3, 2286, 2354, 3981, 3983, 3989, 4020, 4028, 7221, 9735, 9846, 10182, 11441, 11638, 13554, 14584, 14682, 14902, 16521, 16525, 16933, 17518, 17752, 17754, 17910, 18750], [-x * y ^ 3 - x ^ 2 * y ^ 2, 1225, 1237, 1239, 1245, 1276, 1284, 5066, 5682, 7102, 7160, 8145, 8818, 11323, 11931, 11956, 11959, 13486, 14554, 14851, 14859, 17369, 17410], [-x * y ^ 3 - x ^ 3 * y, 1686], [-x * y ^ 3 - y ^ 4, 2399, 4024, 7530, 10238, 10630, 11584, 13599, 14513, 14945, 16734, 16938], [-x * y ^ 4 - x ^ 2 * y ^ 3, 1280, 5660, 11414, 16965, 17406, 17686], [-x * y ^ 4 - y ^ 5, 7552, 14271, 14551, 16960], [-(x ^ 2) - y ^ 2, 2918, 3086, 12494, 13775], [-(x ^ 2) - x ^ 3 * y ^ -1, 9692], [-(x ^ 2) * y - x ^ 3, 4842, 7167, 8057, 10086, 10801], [-(x ^ 2) * y - y ^ 3, 790, 6950, 7174, 10593, 16697], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 1287, 1733, 2322, 4473, 8622, 10679, 10694, 11364, 13377, 13769, 13816, 13830, 14228, 14479, 16625, 17987], [-(x ^ 2) * y ^ 2 - y ^ 4, 14569], [-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2, 1906, 2300, 5093, 13776, 13778, 14450, 16569, 17586], [-(x ^ 2) * y ^ 3 - x ^ 4 * y, 14454], [-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3, 1951, 17630], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 8619, 8621, 10640], [-(x ^ 3) * y ^ 3 - x ^ 4 * y ^ 2, 2345], [((-x * y ^ 5 - x ^ 2 * y ^ 4) - 3 * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2, 8617], [(-(x ^ -1) * y ^ 4 - x * y ^ 2) - 2 * y ^ 3, 15614], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 8623], [(-x * y ^ 4 - x ^ 2 * y ^ 3) - 2 * y ^ 5, 14606], [((-x * y ^ 4 - x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 7161], [(-(x ^ -1) * y ^ 4 - x * y ^ 2) - y ^ 3, 13713], [(-x - y) - x ^ 2 * y ^ -1, 11924, 14391], [(-x * y - x ^ 2) - y ^ 2, 3133, 9585, 11146, 14340, 14345], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 895], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 2012, 2074, 4753, 6997, 10521, 11191, 13545, 17353], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 844, 849, 1730, 2069, 5257, 5537, 8578, 8588, 8600, 11968, 14868], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 2008, 2119, 14723, 17801], [(-x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 13785], [(-x * y ^ 5 - x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3, 5705, 8841, 13823], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) - x ^ 4, 8581], [((-x * y - x ^ 2) - y ^ 2) - x ^ 3 * y ^ -1, 9697], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 14233], [(-x * y ^ 2 - x ^ 2 * y) + y ^ 3, 11560, 13558], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y, 1680], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2, 17537], [(-x * y ^ 5 - x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3, 17575], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y, 14448], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + y ^ 6, 14887], [(-x * y ^ 5 - x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 17574], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) + 2 * x ^ 4 * y + x ^ 5, 17578], [-(x ^ -1) * y ^ 3 + y ^ 2, 13670], [-y + x ^ 2 * y ^ -1, 3106], [-x * y + x ^ 2, 3080], [-x * y + y ^ 2, 2470, 9582, 10481, 10589, 10628, 10636, 16641, 16693, 16732, 16740, 17422], [-x * y ^ 2 + x ^ 2 * y, 1700, 1732, 1734, 5214, 6944, 16582], [-x * y ^ 2 + x ^ 3, 17570], [-x * y ^ 2 + y ^ 3, 3926, 10632, 11825, 16736], [-x * y ^ 3 + x ^ 2 * y ^ 2, 5050], [-x * y ^ 3 + x ^ 3 * y, 4866], [-x * y ^ 3 + y ^ 4, 11863, 17702], [-x * y ^ 4 + x ^ 2 * y ^ 3, 886, 4377, 5662], [-x * y ^ 4 + x ^ 3 * y ^ 2, 1238, 17528, 17530], [-(x ^ 2) + y ^ 2, 10120, 10610, 11578, 16714], [-(x ^ 2) * y ^ 2 + x ^ 3 * y, 1684, 1689, 4822], [-(x ^ 2) * y ^ 2 + y ^ 4, 11536, 11538, 11929, 14510], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2, 2302, 8792, 17985], [(-x * y + x ^ 2) - y ^ 2, 2912], [-x * y ^ 2 + x ^ 2 * y + y ^ 3, 10590, 16694], [-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 7118, 17552], [-x * y ^ 5 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 5089], [(-x * y ^ 2 + x ^ 2 * y + x ^ 3) - y ^ 3, 3129, 11580, 11588], [(-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 833, 6993, 7217], [(-x * y ^ 5 + x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + 5 * x ^ 4 * y ^ 2 + 4 * x ^ 5 * y + x ^ 6) - y ^ 6, 14889], [-x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 1728], [-x * y ^ 3 + 2 * y ^ 4, 14566], [((-x * y + 2 * x ^ 2) - y ^ 2) + x ^ 3 * y ^ -1, 11871], [-(x ^ -1) * y ^ 3 + 2 * x * y + x ^ 2, 11817], [-x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 14622], [-x * y ^ 3 + 2 * x ^ 3 * y + x ^ 4, 10129, 14841], [(-x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3) - 2 * y ^ 3, 11541], [(-(x ^ -1) * y ^ 3 + 2 * x * y + x ^ 2) - y ^ 2, 11821], [-x * y ^ 3 + 2 * x ^ 3 * y + 3 * x ^ 4 + x ^ 5 * y ^ -1, 14895], [((-x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 5 * x ^ 3 * y + 4 * x ^ 4) - y ^ 4) + x ^ 5 * y ^ -1, 14866], [1, 771, 1360, 1468, 1982, 2507, 2808, 3259, 3605, 4746, 4944, 4951, 4955, 4971, 5582, 5642, 5825, 6621, 7630, 8020, 9506, 9649, 9768, 9784, 10488, 10514, 11181, 11690, 12666, 12906, 12935, 13013, 13538, 14348, 15224, 15403, 15428, 15431, 15440, 15688, 15905, 15907, 16191, 16283, 16479, 16674, 16771, 16816, 17437, 17459, 18362], [x ^ -2 * y ^ -1, 12409], [x ^ -1, 4795, 6013, 6702, 6797, 7594, 10961, 12350, 14351, 15121, 15412, 15421, 16838], [y ^ -1, 7260, 8378, 9650, 9718, 13030], [x ^ -1 * y ^ -1, 6814, 10841, 15438], [x ^ -1 * y, 2446, 3955, 6685, 12547, 13706, 15349, 15407, 15413, 16821], [x ^ -1 * y ^ 2, 2429, 12993, 14337, 15563, 15575, 15581], [x ^ -1 * y ^ 4, 13711], [x, 169, 228, 288, 335, 513, 827, 912, 1174, 1459, 1484, 1487, 1496, 1764, 1821, 2185, 2189, 2228, 2236, 2519, 2917, 2937, 2951, 2956, 2964, 3085, 3090, 3105, 3119, 3124, 3193, 3360, 3421, 3478, 4105, 4210, 4311, 4440, 4534, 4647, 4691, 4714, 4743, 4758, 5250, 5302, 5758, 6157, 6384, 6549, 6842, 7013, 7671, 7697, 7754, 7950, 8011, 8036, 8048, 8084, 8324, 8723, 8950, 9008, 9065, 9179, 9236, 9293, 9504, 9522, 9604, 9607, 9631, 9750, 9794, 9855, 9864, 10538, 10600, 10792, 11061, 11199, 11232, 11647, 11882, 11892, 11901, 11904, 11926, 12087, 12495, 12498, 12508, 12517, 12520, 12527, 12532, 12540, 13020, 13023, 13032, 13052, 13399, 13550, 13619, 14013, 14140, 14311, 14658, 14767, 15450, 15855, 15955, 16193, 16704, 17188, 17471, 17569, 17734, 17921, 17925, 17964, 17972, 18131, 18188], [y, 281, 283, 285, 627, 798, 800, 855, 1083, 1197, 1311, 1368, 1384, 1463, 1476, 1485, 1488, 1508, 1510, 1539, 1710, 1881, 1938, 1975, 2052, 2109, 2241, 2247, 2253, 2269, 2272, 2337, 2394, 2395, 2469, 2471, 2474, 2477, 2484, 2503, 2518, 2565, 3252, 3535, 3592, 3820, 3877, 3934, 3991, 4074, 4162, 4257, 4261, 4266, 4276, 4295, 4300, 4308, 4310, 4390, 4561, 4732, 4846, 4952, 4959, 4968, 5017, 5074, 5188, 5245, 5331, 5339, 5351, 5416, 5473, 5565, 5587, 5624, 5701, 5814, 5815, 5872, 6053, 6100, 6329, 6443, 6496, 6498, 6500, 6557, 6614, 6671, 6684, 6690, 6693, 6696, 6716, 6718, 6728, 6785, 6829, 6899, 7184, 7241, 7298, 7346, 7355, 7526, 7617, 7621, 7660, 7668, 7811, 7868, 7892, 7982, 8015, 8021, 8153, 8267, 8381, 8495, 8552, 8609, 8762, 8780, 8788, 8837, 9122, 9407, 9408, 9581, 9583, 9589, 9620, 9628, 9753, 9801, 9805, 9844, 9852, 10092, 10143, 10149, 10180, 10188, 10190, 10206, 10263, 10475, 10491, 10503, 10602, 10605, 10662, 10712, 10719, 10825, 10833, 11149, 11183, 11188, 11196, 11346, 11353, 11403, 11460, 11574, 11593, 11597, 11602, 11612, 11631, 11636, 11644, 11843, 11859, 11969, 11973, 12030, 12315, 12528, 13000, 13342, 13456, 13513, 13527, 13570, 13674, 13684, 13703, 13718, 13732, 13741, 13798, 13855, 13912, 13928, 14083, 14197, 14254, 14343, 14349, 14368, 14437, 14482, 14539, 14596, 14598, 14653, 14810, 14828, 14836, 14881, 14885, 15569, 15904, 15908, 15954, 16190, 16364, 16635, 16649, 16656, 16706, 16709, 16745, 16747, 16803, 16828, 16831, 16840, 16934, 16991, 17105, 17249, 17251, 17276, 17390, 17421, 17423, 17426, 17427, 17429, 17436, 17455, 17470, 17480, 17511, 17561, 17618, 17675, 17732, 17773, 17779, 17795, 17865, 17871, 17877, 17893, 17896, 17960, 18245, 18536, 18538, 18699, 18711, 18717, 18748, 18756, 18758, 18765], [x * y ^ -1, 2795, 2955], [x * y, 46, 159, 398, 608, 789, 823, 828, 852, 1025, 1177, 1179, 1247, 1289, 1293, 1298, 1308, 1327, 1332, 1340, 1342, 1350, 1394, 1453, 1458, 1972, 2127, 2149, 2240, 2359, 2960, 3313, 3537, 3593, 3975, 4256, 4448, 4464, 4536, 4540, 4754, 4872, 4874, 5211, 5227, 5239, 5382, 5426, 6949, 6954, 6969, 6983, 6988, 7057, 7061, 7100, 7108, 7154, 7173, 7178, 7207, 7212, 8246, 8373, 8421, 8456, 8458, 8807, 9578, 10247, 10427, 10522, 10587, 10612, 10615, 10624, 11144, 11442, 11508, 11563, 11654, 11829, 12257, 12480, 12536, 13223, 13368, 13441, 13445, 13450, 13479, 13484, 13492, 13546, 13553, 13664, 13723, 13748, 13760, 13894, 13938, 14084, 14096, 14619, 14647, 14977, 15742, 16130, 16360, 16407, 16456, 16604, 16607, 16616, 16683, 16691, 16716, 16719, 16728, 16806, 16867, 16973, 16975, 16978, 16988, 17007, 17012, 17020, 17022, 17299, 17310, 17354, 17416, 17472, 17717, 17739, 17864, 18056], [x * y ^ 2, 327, 847, 853, 1176, 1180, 1226, 1336, 2072, 2136, 2153, 2563, 4433, 4582, 4699, 5067, 5083, 5497, 5553, 5597, 5698, 7104, 7333, 7518, 8054, 8055, 8233, 8237, 8276, 8284, 8580, 8834, 10313, 10799, 11328, 11369, 11373, 11375, 11381, 11412, 11420, 11435, 11539, 11567, 11970, 13038, 13488, 14383, 14435, 14505, 14561, 14563, 14588, 14591, 14703, 14852, 14883, 15505, 16549, 16578, 16846, 16926, 16974, 17016, 17404, 17641, 17645, 17647, 17653, 17659, 17692, 17725, 17751, 17758, 17802, 18243], [x * y ^ 3, 1222, 2297, 4373, 4375, 4388, 4397, 4400, 4412, 4422, 4471, 4694, 4695, 5001, 5255, 5439, 5442, 5452, 5456, 5461, 5464, 5471, 5484, 5535, 5673, 5687, 7121, 11351, 11416, 11589, 13766, 13767, 13783, 13789, 14105, 14562, 14663, 16399, 16568, 16623, 16931, 17688, 17696, 17698, 17808, 17810], [x * y ^ 4, 1727, 2571, 5480, 5658, 7554, 11316, 14443, 16962, 18251], [x * y ^ 5, 5087, 5703, 8166, 8167], [x ^ 2, 1343, 1506, 1698, 1723, 2916, 2921, 3084, 3089, 4589, 4704, 4858, 6771, 7111, 7277, 8058, 9121, 10758, 10802, 12488, 12497, 12998, 13495, 14670, 14950, 17023], [y ^ 2, 779, 1344, 1346, 1353, 1504, 1513, 1515, 2077, 2111, 2116, 2124, 2353, 3534, 3921, 3925, 3927, 3933, 3964, 3972, 4033, 4035, 4161, 4304, 4930, 4937, 5609, 6542, 6543, 6712, 6717, 7387, 7519, 7797, 8351, 8357, 8384, 8631, 8634, 8637, 8644, 8650, 8656, 8664, 8676, 8678, 9473, 9624, 9791, 9848, 10184, 10193, 10197, 10236, 10244, 10585, 10591, 10595, 10597, 10703, 10709, 10736, 11342, 11640, 11657, 11819, 11847, 13498, 13559, 13565, 13714, 13727, 13731, 13733, 13739, 14082, 14572, 14581, 14603, 14922, 14940, 14951, 15446, 15447, 15950, 16291, 16353, 16355, 16357, 16465, 16577, 16632, 16634, 16689, 16695, 16699, 16701, 16809, 16853, 16927, 17248, 17298, 17313, 17783, 18752], [x ^ 2 * y ^ -1, 2239, 2851, 9691, 9716, 9719, 17975], [x ^ 2 * y, 329, 497, 784, 788, 1227, 1288, 1685, 1697, 1705, 1709, 1712, 1719, 1724, 1947, 4430, 4474, 4819, 4835, 4847, 5258, 5494, 5538, 6948, 6953, 7152, 7166, 7168, 7172, 7177, 7547, 7962, 7972, 7984, 8287, 8591, 10277, 10634, 11354, 11423, 13334, 13378, 13770, 14227, 14252, 14255, 16626, 16738, 16955, 16968, 17370, 17380, 17389, 17392, 17414, 17565, 17695, 18013], [x ^ 2 * y ^ 2, 1905, 1909, 1924, 1943, 1948, 1956, 1958, 1964, 2137, 2324, 2327, 2336, 4399, 5079, 5094, 5710, 8571, 8596, 8599, 8608, 8802, 8831, 8846, 11267, 11322, 11329, 11332, 11344, 13374, 14942, 16401, 16526, 16570, 17408, 17567, 17589, 17591, 17613, 17616, 17623, 17628, 17749, 17861, 17981, 17983, 17989, 18015, 18020, 18028, 18030], [x ^ 2 * y ^ 3, 887, 1848, 1852, 2177, 2298, 4368, 4370, 4863, 5483, 5706, 7504, 7506, 8842, 10642, 11321, 11365, 11981, 14893, 15064, 15068, 16566, 16912, 16914, 17590, 18024], [x ^ 2 * y ^ 4, 1894, 2343, 15110], [x ^ 3, 14491], [y ^ 3, 774, 775, 841, 1391, 2461, 3126, 3127, 3968, 4751, 5647, 6713, 7280, 7282, 7546, 7889, 8350, 8630, 10519, 10702, 11695, 13543, 13935, 14565, 14585, 14604, 14612, 16286, 16287, 16473, 16679, 16954, 17351, 17701, 17703, 17709, 17740, 17748], [x ^ 3 * y, 1959, 14453, 14473, 14487, 14492, 14500, 17639, 18031], [x ^ 3 * y ^ 2, 1901, 2346, 5040, 5044, 8796, 14496, 15117, 17976, 17978], [y ^ 4, 830, 831, 2521, 2523, 5657, 6990, 6991, 7214, 7215, 7326, 7327, 7528, 8673, 10745, 14393, 14395, 16510, 16511, 16936, 17799, 18201, 18203], [x ^ 4 * y, 14452, 14457], [y ^ 5, 7513], [x * y ^ 2 - 2 * y ^ 3, 832], [((x * y ^ 4 - 2 * x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5, 14890], [(((x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4) + y ^ 4, 14864], [(x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 11866], [(x * y ^ 3 - 2 * x ^ 3 * y) - x ^ 4, 14894], [((x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 11822], [((x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4) - y ^ 4, 11542], [((x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 11317], [x ^ -1 * y ^ 2 - x, 12997], [y - x ^ 2 * y ^ -1, 1482], [x * y - x ^ 2, 1456, 10639, 12992, 16743], [x * y - y ^ 2, 794, 836, 2249, 2473, 4710, 4934, 7220, 10478, 13502, 16638, 17425, 17873], [x * y ^ 2 - x ^ 2 * y, 5217], [x * y ^ 2 - y ^ 3, 7216, 14382, 14615], [x * y ^ 3 - x ^ 2 * y ^ 2, 8847, 11374, 14560, 17646], [x * y ^ 3 - x ^ 3 * y, 11952, 17541], [x * y ^ 3 - y ^ 4, 16919], [x * y ^ 4 - x ^ 2 * y ^ 3, 4374], [x * y ^ 4 - y ^ 5, 7510], [x ^ 2 - y ^ 2, 6970, 13042], [x ^ 2 * y - y ^ 3, 2361, 11549], [x ^ 2 * y ^ 2 - x ^ 3 * y, 4825], [x ^ 2 * y ^ 2 - y ^ 4, 3982], [x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2, 17982], [x ^ 2 * y ^ 3 - x ^ 4 * y, 1955], [((x * y ^ 4 - x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 889, 13782], [(((x * y ^ 4 - x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y) + y ^ 5, 11582], [(x ^ -1 * y ^ 3 - x * y) - y ^ 2, 15574], [(x * y ^ 2 - x ^ 2 * y) - x ^ 3, 13041], [(x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 11356, 17539], [(x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 10646], [(x * y ^ 4 - x ^ 3 * y ^ 2) - x ^ 4 * y, 4865], [((x * y ^ 2 - x ^ 2 * y) - x ^ 3) + y ^ 3, 1505, 10130], [((x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 10633, 16737], [(x ^ -1 * y ^ 2 - x) + y, 15400], [(x * y - x ^ 2) + y ^ 2, 8008], [(x * y ^ 3 - x ^ 2 * y ^ 2) + y ^ 4, 11545], [(x * y ^ 4 - x ^ 2 * y ^ 3) + y ^ 5, 11583], [(x * y ^ 4 - x ^ 2 * y ^ 3) + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 11318], [(x * y ^ 4 - x ^ 3 * y ^ 2) + 2 * x ^ 4 * y + x ^ 5, 17534], [1 + x ^ -1 * y, 1477, 8029], [1 + x * y ^ -1, 3123, 11162, 11914], [x ^ -1 + y ^ -1, 1494, 8046], [x ^ -1 * y ^ 2 + x, 12995, 15406], [x ^ -1 * y ^ 2 + y, 10137, 10141, 12489, 13499, 13688, 15402, 15573, 15612, 15620, 17473, 18705, 18709], [x ^ -1 * y ^ 3 + y ^ 2, 15616], [x + y, 0, 114, 171, 399, 456, 570, 684, 1026, 1140, 1254, 1469, 1767, 1824, 2090, 2166, 2223, 2907, 2922, 3021, 3364, 3649, 3763, 4219, 4282, 4333, 4447, 4504, 4618, 4675, 4728, 4903, 5131, 5530, 6386, 6987, 7070, 7127, 7211, 7642, 7925, 8039, 8096, 8210, 8387, 8438, 8951, 9488, 9577, 9579, 9602, 9695, 9701, 9740, 9807, 9826, 10096, 10191, 10320, 10377, 10434, 10483, 10548, 10776, 11118, 11154, 11161, 11164, 11170, 11198, 11289, 11517, 11618, 11745, 11802, 11896, 12201, 12486, 12512, 12601, 12715, 12829, 13057, 13114, 13228, 13520, 13627, 14026, 14364, 14367, 14376, 14938, 14995, 15052, 15109, 15280, 15453, 15508, 15623, 15679, 16022, 16079, 16136, 16421, 16478, 16592, 16877, 17162, 17219, 17479, 17501, 17846, 18017, 18074, 18305, 18473, 18530, 18587, 18759, 18815], [x + x ^ 2 * y ^ -1, 2210, 2938, 17946], [y + x ^ 2 * y ^ -1, 2967, 3135], [x * y + x ^ 2, 810, 1314, 4708, 5219, 5650, 7082, 7194, 8583, 9514, 10085, 10119, 10132, 12492, 13045, 13466, 13607, 14386, 14640, 14656, 14920, 16994], [x * y + y ^ 2, 2002, 2082, 2089, 2092, 2098, 2126, 2244, 2372, 2406, 2464, 2468, 2515, 3131, 3809, 3811, 3946, 4018, 4260, 8010, 8369, 8653, 9736, 9790, 10104, 10134, 10218, 10873, 10914, 11192, 11698, 11827, 12994, 13557, 13562, 13591, 13596, 13604, 13668, 14069, 14338, 14644, 16579, 16682, 17420, 17476, 17868], [x * y ^ 2 + x ^ 2 * y, 835, 868, 871, 880, 1274, 1292, 1688, 2000, 2014, 2312, 2352, 2513, 4030, 4305, 7136, 7665, 8258, 8344, 8346, 8610, 9849, 10798, 11193, 11394, 11641, 14559, 16972, 17367, 17386, 17415, 17465, 17666], [x * y ^ 2 + x ^ 3, 1735], [x * y ^ 2 + y ^ 3, 1390, 2120, 2403, 3633, 4974, 6995, 9511, 10910, 11694, 11919, 13039, 13542, 13600, 13934, 14231, 14237, 14276, 14509, 14511, 14517, 14548, 14556, 14586, 17350, 17361, 17365, 17722], [x * y ^ 3 + x ^ 2 * y ^ 2, 842, 1960, 1962, 2121, 2299, 4026, 4470, 5064, 5449, 5487, 5534, 5680, 8592, 8816, 10241, 10647, 10653, 10672, 11320, 11336, 11341, 11366, 11477, 11935, 11938, 11948, 11957, 11960, 11967, 11972, 11980, 11983, 14613], [x * y ^ 3 + y ^ 4, 3985, 5433, 5437, 5659, 10126, 11424, 11428, 11933, 14272, 14552, 14672, 14674, 17744], [x * y ^ 4 + x ^ 2 * y ^ 3, 1241, 5432, 5434, 7159, 11312, 11976, 17576], [x * y ^ 4 + x ^ 3 * y ^ 2, 8801], [x * y ^ 4 + y ^ 5, 4023], [x * y ^ 5 + x ^ 2 * y ^ 4, 1279, 5086, 5702], [x ^ 2 + y ^ 2, 839, 1462, 6999, 7223, 8014], [x ^ 2 + x ^ 3 * y ^ -1, 10135], [x ^ 2 * y + x ^ 3, 1706, 2233, 2961, 4827, 8395, 8582, 10080, 12873, 17969], [x ^ 2 * y + y ^ 3, 793, 13726], [x ^ 2 * y ^ 2 + x ^ 3 * y, 890, 1286, 1337, 1930, 7105, 7162, 10643, 10668, 10671, 13489, 13786, 13815, 14458, 17017, 17538, 17545, 17548, 17557, 17560, 17597, 17993, 18002], [x ^ 2 * y ^ 2 + x ^ 4, 14503], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 1282, 1908, 5091, 7555, 8281, 11937, 14499, 17588], [x ^ 2 * y ^ 3 + y ^ 5, 16921], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 11977], [x ^ 2 * y ^ 4 + y ^ 6, 7551, 16959], [x ^ 3 * y + x ^ 4, 14474], [x ^ 4 * y ^ 2 + x ^ 5 * y, 14497], [((x * y ^ 3 + x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 11367, 11586], [(x * y + x ^ 2) - y ^ 2, 5606, 9470, 10124, 11860, 11868], [(x * y ^ 2 + x ^ 2 * y) - y ^ 3, 11547], [(x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 8577], [(x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - y ^ 5, 14888], [((x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 17572, 17580], [x ^ -1 * y ^ 2 + x + y, 12493, 14339], [x ^ -1 * y ^ 3 + x * y + y ^ 2, 13673, 14693], [x + y + x ^ 2 * y ^ -1, 5929], [x * y + x ^ 2 + y ^ 2, 1509, 4713, 14342], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 843, 2041, 5646, 7219, 9625, 10185, 18753], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 846, 13828], [x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 1969, 3969], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 11417, 11928, 13824, 16963, 17689], [x * y ^ 4 + x ^ 2 * y ^ 3 + y ^ 5, 2007, 14609], [x * y ^ 5 + x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 4417, 5481], [x * y ^ 5 + x ^ 2 * y ^ 4 + y ^ 6, 7550, 16958], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 18025], [x * y + x ^ 2 + y ^ 2 + x ^ 3 * y ^ -1, 5985], [x * y ^ 2 + x ^ 2 * y + x ^ 3 + y ^ 3, 12537], [x ^ -1 * y ^ 2 + x + 2y, 14710, 15594], [x ^ -1 * y ^ 4 + x * y ^ 2 + 2 * y ^ 3, 13710], [x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * y ^ 5, 17745], [x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 14840], [x * y ^ 5 + x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2 + x ^ 5 * y, 13825], [x ^ -1 * y ^ 2 + 2y, 17477], [x + 2y, 2490, 10162, 17442, 17482, 17492, 17504, 17526, 18730], [x + 2 * x ^ 2 * y ^ -1, 9743], [x * y + 2 * y ^ 2, 2357, 2362, 2391, 2396, 2404, 17520, 17763], [x * y ^ 2 + 2 * x ^ 2 * y, 14279], [x * y ^ 2 + 2 * y ^ 3, 2400, 8672, 16678], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 17535], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3, 11314], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 8618], [((x * y ^ 5 + 2 * x ^ 2 * y ^ 4) - 3 * x ^ 4 * y ^ 2) - x ^ 5 * y, 11361], [((((x * y ^ 4 + 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5) - y ^ 5, 14846], [((x * y + 2 * x ^ 2) - y ^ 2) + x ^ 3 * y ^ -1, 10106], [x + 2y + x ^ 2 * y ^ -1, 12543], [x * y + 2 * x ^ 2 + x ^ 3 * y ^ -1, 11878, 11922], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 1256, 2010, 13781, 13820, 14662, 14879], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 7158, 11932, 17409], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 1729], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 11358, 17633], [(x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 1966, 14847], [(((x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - 3 * x ^ 5 * y) - x ^ 6, 17577], [x ^ -1 * y ^ 4 + 2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 15617], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 13601], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, 14849], [x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3, 1278], [((x * y ^ 3 + 3 * x ^ 2 * y ^ 2) - 3 * x ^ 4) - x ^ 5 * y ^ -1, 17554], [x * y ^ 5 + 3 * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 11359], [(x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4) - y ^ 4, 11865], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 13802], [x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 14844], [x * y ^ 5 + 3 * x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 10689], [2x, 2295, 17919], [2y, 2245, 2250, 2260, 2279, 2284, 2294, 2508, 2516, 17460, 17468, 17516, 17524, 17869, 17874, 17884, 17903, 17908, 17918], [2 * x * y, 4978], [2 * x * y ^ 3, 4420, 5486, 11319], [2 * x * y ^ 4, 4416], [2 * x * y ^ 5, 8839], [2 * y ^ 2, 2512, 17464], [2 * x ^ 2 * y, 1690], [2 * x ^ 2 * y ^ 2, 1914, 4423, 17594, 17604, 17636, 17638], [2 * x ^ 2 * y ^ 3, 1952], [2 * y ^ 3, 4975, 14567, 14573], [2 * x ^ 3 * y ^ 2, 8574], [2 * y ^ 4, 14608], [(((2 * x * y ^ 5 - 3 * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2) - x ^ 5 * y) + y ^ 6, 14886], [(2 * x * y ^ 3 - 3 * x ^ 3 * y) - x ^ 4, 11338], [(2 * x * y ^ 3 - 2 * x ^ 3 * y) - x ^ 4, 17529], [2 * x * y ^ 4 - y ^ 5, 16918], [2x + y, 9732, 12542, 17527], [2 * x * y + x ^ 2, 2407], [2 * x * y + y ^ 2, 16850], [2 * x * y ^ 2 + y ^ 3, 14268], [2 * x * y ^ 3 + x ^ 2 * y ^ 2, 5458, 10645, 10684, 10692], [2 * x * y ^ 4 + x ^ 2 * y ^ 3, 10688], [2 * x ^ 2 * y + x ^ 3, 14666], [2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 10695, 13777, 17582, 17610], [2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 1953], [(2 * x ^ 2 * y + x ^ 3) - 2 * y ^ 3, 11537], [((2 * x * y ^ 3 + x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 17533], [((2 * x ^ 2 * y ^ 2 + x ^ 3 * y) - 2 * x ^ 4) - x ^ 5 * y ^ -1, 17583], [(2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y, 11982], [(2 * x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 14853], [2x + y + x ^ 2 * y ^ -1, 9689, 12514], [2 * x * y + x ^ 2 + y ^ 2, 8061, 13578], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 1984, 2356, 4000, 4750, 9510, 14225, 14530], [2 * x * y ^ 5 + x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 8838], [2x + 2y, 9693], [2 * x * y ^ 2 + 2 * y ^ 3, 14229], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 4394, 11954], [(2 * x * y ^ 5 + 2 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3, 8615], [2 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 10084], [2 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 2289, 17913], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 8390, 8391, 10641], [2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + y ^ 5, 4022], [2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 13831], [2 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 10089, 11918], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 14725], [2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + y ^ 5, 14553], [2x + 3y, 2266, 17498, 17890], [2 * x * y ^ 5 + 3 * x ^ 2 * y ^ 4, 8614], [2 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y, 10666], [(2 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 2401], [(2 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4) - y ^ 4, 14845, 14884, 14892], [2 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + y ^ 5, 2006], [2 * x * y ^ 2 + 4 * x ^ 2 * y + 2 * x ^ 3 + y ^ 3, 9737], [2 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + y ^ 5, 14273], [3y, 2292, 17916], [3 * y ^ 2, 2288, 17912], [(3 * x ^ 2 - 2 * y ^ 2) + x ^ 3 * y ^ -1, 11842], [3 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 17632], [3x + y + 2 * x ^ 2 * y ^ -1, 9714], [3 * x * y + x ^ 2 + 2 * y ^ 2, 2378], [3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 14250, 17521]]) * x ^ 0 * y ^ 0
            end
        f27 = function (x, y)
                return dec(70, [[-1, 1, 143, 357, 428, 640, 782, 1134, 1305, 2558, 4109, 4974, 5422, 5498, 5638, 5790, 8038, 8245, 8303, 8653, 9682, 11126, 12057, 13333, 13342, 13427, 13963, 13972, 16125, 16753, 18045, 18506, 18511, 18541, 18545, 19602, 19673, 20922, 21115, 21313, 21322, 24859, 25000, 25933, 25942, 26778, 27606, 27611, 27614, 27645, 27746, 28129, 28201, 28270, 28485, 28523, 28532], [1, 1324, 1353, 1485, 3259, 4127, 5139, 5142, 7302, 8233, 8315, 8665, 8948, 11077, 11084, 11847, 12344, 13643, 13961, 13964, 13995, 19346, 19351, 19381, 19385, 19909, 19912, 21535, 22158, 22170, 24646, 24718, 25777, 25784, 25798, 25810, 28521, 28524, 28555, 28582, 29153, 29162], [(((-4 * x * y ^ 4 - 6 * x ^ 2 * y ^ 3) - 4 * x ^ 3 * y ^ 2) + x ^ 5) - y ^ 5, 9109], [((((-3 * x * y ^ 5 - 7 * x ^ 2 * y ^ 4) - 5 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) - x ^ 5 * y) - y ^ 6, 9105], [(-3 * x ^ 3 * y ^ 3 - 4 * x ^ 4 * y ^ 2) - x ^ 5 * y, 18410], [((-3 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 9678], [(-3 * x * y ^ 2 - 2 * x ^ 2 * y) - y ^ 3, 9156], [(-3 * x * y - x ^ 2) - y ^ 2, 9716], [(-3 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 9157], [-2 * x * y ^ 2, 29214], [-2 * x ^ 2 * y, 8629], [((-2 * x * y ^ 4 - 5 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y, 29196], [(-2 * x * y ^ 3 - 4 * x ^ 2 * y ^ 2) - x ^ 3 * y, 29198], [((-2 * x * y ^ 3 - 4 * x ^ 2 * y ^ 2) - x ^ 3 * y) + x ^ 4, 9110], [((-2 * x * y ^ 5 - 4 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 19532], [((-2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 19322, 19325], [((-2 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 2382], [((-2 * x ^ 2 * y ^ 3 - 3 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 26882, 26885], [(-2 * x ^ 2 * y ^ 3 - 3 * x ^ 3 * y ^ 2) - x ^ 4 * y, 14493], [(-2 * x ^ 3 * y ^ 2 - 3 * x ^ 4 * y) - x ^ 5, 13930, 28490], [(-2 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) + x ^ 4, 19116], [(-2 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 16246], [-2 * x * y - 2 * y ^ 2, 29255], [-2 * x * y ^ 2 - 2 * x ^ 2 * y, 9130, 18486, 19118, 27586], [-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 4766], [-2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y, 1756, 26676], [(-2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 4741], [((-2 * x ^ 2 * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y) - x ^ 5, 18972], [(((-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y) - y ^ 5, 9665], [((-2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4) + y ^ 4, 9118], [(-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + x ^ 4, 16267], [(-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 16248], [-2 * x * y - x ^ 2, 9674, 18488, 27588], [-2 * x * y - y ^ 2, 28872], [-2 * x * y ^ 2 - x ^ 2 * y, 4768, 7312, 19327], [-2 * x * y ^ 2 - y ^ 3, 9166, 9605, 22625, 29205], [-2 * x * y ^ 3 - x ^ 2 * y ^ 2, 9151], [-2 * x ^ 2 * y - x ^ 3, 1758, 6747, 26678], [-2 * x ^ 2 * y ^ 2 - x ^ 3 * y, 18973, 26887], [-2 * x ^ 3 * y - x ^ 4, 9119], [(-2 * x * y - x ^ 2) - y ^ 2, 7295, 7304, 9722, 19134, 19338, 27771], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 2398, 2608, 4811, 7088], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 4277, 19548, 21702, 28982, 29200], [((-2 * x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4) - y ^ 4, 9669], [(-2 * x * y ^ 2 + x ^ 3) - y ^ 3, 16264, 19586], [-(x ^ -1), 6193, 6202, 15991, 15997], [-(y ^ -1), 11093, 11102, 25793, 25802], [-(x ^ -1) * y, 4325, 6226, 20737, 21090], [-(x ^ -1) * y ^ 2, 8734, 9264, 23928], [-x, 933, 1213, 1359, 1695, 1776, 1781, 1811, 1815, 1926, 1986, 2831, 2861, 2865, 2896, 2903, 2912, 3214, 3538, 4085, 5252, 5676, 6012, 6039, 6397, 6781, 6785, 7252, 7257, 7430, 7658, 7670, 7959, 7965, 8036, 8037, 8248, 8935, 8942, 9075, 9537, 9544, 9558, 9570, 10152, 10293, 10576, 10648, 11424, 12056, 12059, 12926, 13077, 13496, 14135, 15839, 16197, 16410, 16903, 16912, 16959, 17541, 18093, 19145, 19281, 19284, 19366, 19376, 22498, 22737, 23358, 24110, 24339, 24345, 24479, 24485, 25440, 25564, 25772, 26696, 26731, 26735, 27328, 27818, 27821, 27824, 27855, 28621, 29291, 29294, 29325], [-y, 1287, 1311, 1609, 2062, 2196, 2231, 2235, 2405, 2491, 2615, 3065, 4086, 4091, 4097, 4121, 4125, 4298, 4438, 4450, 4640, 4786, 4791, 4821, 4825, 5496, 5824, 7133, 7311, 7521, 7525, 7551, 7555, 7728, 8216, 8232, 8385, 8596, 9155, 9235, 9418, 9639, 9645, 9718, 9723, 10939, 11297, 11915, 11924, 12004, 12458, 12484, 12628, 12631, 12634, 12665, 12970, 13191, 13194, 13996, 14164, 15129, 15270, 15903, 16442, 17211, 17215, 17595, 17666, 17688, 17701, 17705, 17765, 17832, 18259, 18497, 18503, 18532, 18539, 18746, 19136, 19210, 20241, 20312, 20597, 20716, 20739, 20752, 21097, 21121, 21455, 21738, 21750, 21807, 21952, 22048, 22310, 22441, 22659, 22665, 23499, 23904, 23938, 25448, 25472, 25641, 25714, 25857, 26276, 26311, 26315, 26566, 26623, 26852, 27258, 27398, 27403, 27412, 27639, 27700, 28293, 28303, 28342, 28556, 28857, 28975, 29018, 29030, 29137, 29144, 29259], [-x * y ^ -1, 1920, 7889, 8145], [-x * y, 1071, 1077, 1629, 1642, 1802, 1809, 1975, 1998, 2010, 2110, 2426, 2436, 2636, 2646, 2654, 2776, 2852, 2885, 3529, 3532, 3536, 4090, 4316, 4727, 4748, 4790, 4805, 5250, 6471, 6474, 6505, 6770, 6772, 6933, 6937, 7083, 7084, 7126, 7297, 7318, 7412, 7505, 7689, 7936, 7971, 7975, 8214, 8273, 8306, 8623, 8627, 8648, 8656, 8660, 9016, 9017, 9081, 9133, 9549, 9552, 9556, 9615, 9623, 9632, 9690, 10150, 10291, 10809, 11063, 11666, 11921, 11927, 12267, 12481, 12487, 12971, 12977, 14033, 14148, 14161, 14167, 14264, 15642, 15906, 15909, 16416, 16936, 17165, 17174, 17307, 17314, 17387, 17538, 17550, 17664, 17670, 17877, 17901, 18423, 18456, 18466, 18496, 18512, 19014, 19027, 19036, 19267, 19274, 19309, 19330, 20596, 20599, 20937, 21198, 21395, 21484, 22635, 22643, 22652, 23475, 23908, 23920, 24116, 24167, 24316, 24351, 24355, 24456, 24461, 24467, 24491, 24495, 24922, 25063, 25446, 26722, 26729, 26937, 26946, 26964, 27128, 27140, 27359, 27669, 27677, 27849, 27873, 27906, 27916, 27922, 27958, 28299, 28376, 28411, 28577, 28598, 28612, 28856, 28925, 29128, 29136, 29139, 29141, 29147, 29319], [-x * y ^ 2, 1871, 1992, 2602, 4096, 4111, 4431, 4781, 4787, 4796, 6499, 6701, 6931, 7004, 7288, 7309, 7368, 7498, 7506, 7519, 7522, 7526, 7681, 7716, 7721, 7960, 7962, 9011, 9656, 9711, 10713, 12608, 12824, 13168, 13176, 13179, 13181, 13187, 13518, 13531, 13537, 13933, 14015, 14057, 14146, 14505, 14556, 15962, 15965, 16257, 17179, 17182, 17186, 17532, 17589, 17672, 17676, 17734, 17767, 19323, 19414, 19420, 20513, 21204, 21436, 21439, 22676, 23480, 23902, 24340, 24342, 24482, 27122, 27246, 27251, 27351, 27540, 28400, 28402, 28493, 28929, 29126, 29207], [-x * y ^ 3, 2383, 2597, 2601, 4413, 7001, 8263, 11901, 12606, 13166, 13516, 14051, 15960, 17742, 18413, 18951, 19422, 19426, 20511, 23486, 23501, 23851, 27863, 29226], [-x * y ^ 4, 1547, 4761, 7000], [-(x ^ 2), 929, 1206, 1209, 1688, 1701, 1707, 1990, 2900, 3334, 4124, 6529, 6542, 6590, 6765, 7010, 7234, 7266, 7267, 7853, 7878, 7885, 7935, 8655, 9042, 9536, 9539, 9541, 9547, 10726, 10729, 11439, 12043, 13258, 13270, 13308, 13916, 13917, 14065, 14518, 14530, 15709, 16390, 18155, 18816, 18817, 19016, 21173, 21182, 22947, 23712, 24315, 24455, 25420, 25579, 26926, 26996, 27120, 29275], [-(y ^ 2), 1263, 1870, 2222, 2229, 2400, 2446, 2488, 2500, 3036, 4112, 4469, 4775, 4812, 4819, 6163, 7339, 7507, 7542, 7759, 8101, 8356, 9126, 9135, 9137, 9147, 9248, 9261, 9267, 9416, 9616, 9621, 9625, 9627, 9651, 9655, 11606, 11607, 12624, 12659, 13177, 13184, 13534, 14037, 14068, 14521, 14524, 14527, 14555, 14558, 16836, 17202, 17583, 17608, 17620, 17692, 17699, 17736, 17752, 17757, 17758, 17771, 17775, 18251, 18931, 18937, 19216, 19231, 19416, 19421, 19423, 19427, 19432, 19451, 19455, 20542, 21437, 21729, 21732, 21736, 22438, 22450, 22636, 22641, 22645, 22647, 22671, 22675, 23476, 23481, 23487, 23511, 23515, 23831, 23837, 26302, 26309, 27289, 27536, 28619, 28923, 28972, 29009, 29012, 29016, 29223, 29232], [-(x ^ 2) * y ^ -1, 6745, 7865, 13129], [-(x ^ 2) * y, 1471, 1553, 1554, 1602, 1686, 2808, 2829, 2832, 2836, 3227, 3902, 4072, 4713, 4720, 4749, 4770, 6097, 6455, 6514, 7089, 7222, 7296, 7500, 7646, 7651, 7955, 8211, 8279, 8626, 11776, 11779, 11781, 11787, 12041, 12042, 12266, 12269, 13289, 13306, 13706, 13911, 14017, 14546, 14549, 14645, 14653, 15613, 17160, 17171, 17177, 17298, 17306, 17309, 17311, 17317, 17650, 17661, 17667, 18143, 18147, 18150, 18429, 18811, 19258, 19266, 19269, 19271, 19277, 21072, 23514, 24166, 24169, 24335, 24475, 24496, 25416, 26890, 26979, 27316, 27321, 27798, 27806, 27811, 27879, 27943, 27976, 27992, 28286, 28576, 28596, 28843, 29268, 29272], [-(x ^ 2) * y ^ 2, 1548, 1681, 2389, 2879, 3031, 3046, 4341, 6448, 6511, 9602, 12839, 13281, 15611, 15751, 15892, 15895, 16256, 16529, 16873, 17153, 17296, 17437, 17731, 19256, 19411, 19417, 21191, 22337, 22622, 23462, 24457, 25481, 26883, 27093, 28916], [-(x ^ 2) * y ^ 3, 4340, 6510, 7491, 7495, 9737, 12813, 14633, 16872, 17151, 17572, 17575, 27933], [-(x ^ 2) * y ^ 4, 12812, 14001, 14632, 18902, 23802], [-(x ^ 2) * y ^ 5, 18900, 23800], [-(x ^ 3), 2810, 3484, 4744, 4854, 7231, 9743, 9744, 9792, 25419, 28847], [-(y ^ 3), 2482, 3048, 3060, 4461, 6162, 7751, 9150, 9246, 11601, 12651, 14283, 14647, 14654, 17762, 19442, 22432, 23502, 24468, 27281, 27525], [-(x ^ 3) * y, 2803, 4702, 4722, 4769, 4846, 4866, 6020, 6092, 7213, 9738, 12320, 12952, 13025, 13251, 14016, 14019, 14076, 14511, 15681, 15820, 17649, 18146, 18149, 18979, 21152, 22685, 22897, 25551, 28366, 28371, 28563], [-(x ^ 3) * y ^ 2, 13233, 19111, 21352, 21355, 25410, 26951, 28280], [-(x ^ 3) * y ^ 3, 21350], [-(x ^ 4), 4857, 7846, 12885, 13442, 16259, 17925, 22825, 28845], [-(y ^ 4), 3042, 24462], [-(x ^ 4) * y, 2735, 7842, 10710, 13653, 14140, 21000], [-(x ^ 4) * y ^ 2, 9101, 17711, 18132, 18135], [-(x ^ 5), 7980], [-(x ^ 6), 13860, 18760], [((-(x ^ 3) * y ^ 3 - 5 * x ^ 4 * y ^ 2) - 5 * x ^ 5 * y) - x ^ 6, 26880], [((-(x ^ 2) * y ^ 5 - 5 * x ^ 3 * y ^ 4) - 5 * x ^ 4 * y ^ 3) + x ^ 5 * y ^ 2 + 3 * x ^ 6 * y + x ^ 7, 19530], [((-(x ^ 2) * y ^ 3 - 4 * x ^ 3 * y ^ 2) - 4 * x ^ 4 * y) - x ^ 5, 19320], [((-(x ^ 2) * y ^ 4 - 4 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) - x ^ 5 * y, 2380, 2590], [((-(x ^ 3) * y ^ 3 - 4 * x ^ 4 * y ^ 2) - 4 * x ^ 5 * y) - x ^ 6, 18970], [(-(x ^ 2) * y ^ 3 - 4 * x ^ 3 * y ^ 2) - 3 * x ^ 4 * y, 4696], [(-(x ^ 2) * y ^ 4 - 4 * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2, 8260], [((-x * y ^ 4 - 4 * x ^ 2 * y ^ 3) - 3 * x ^ 3 * y ^ 2) - x ^ 4 * y, 9107], [((-(x ^ 2) * y ^ 4 - 3 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) - x ^ 5 * y, 27860], [((-(x ^ 2) * y ^ 3 - 3 * x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - 2 * x ^ 5, 18975], [((-x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 2385], [((-x * y ^ 5 - 3 * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + 2 * x ^ 6, 19535], [(-(x ^ 2) * y ^ 2 - 3 * x ^ 3 * y) - x ^ 4, 4698], [-x - 2y, 7345], [-x * y - 2 * y ^ 2, 9726], [-x * y ^ 2 - 2 * x ^ 2 * y, 24445], [-x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 2176, 14541, 17646, 26256, 28842], [-x * y ^ 4 - 2 * x ^ 2 * y ^ 3, 17716, 19396], [-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2, 7215], [-(x ^ 4) * y ^ 3 - 2 * x ^ 5 * y ^ 2, 1540], [-(x ^ 5) * y ^ 2 - 2 * x ^ 6 * y, 9730], [((-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 3 * x ^ 3 * y ^ 2) - x ^ 4 * y, 18415], [((-x * y ^ 4 - 2 * x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5, 8612], [(-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2, 11620], [(-(x ^ 3) * y ^ 4 - 2 * x ^ 4 * y ^ 3) - 2 * x ^ 5 * y ^ 2, 27930], [((-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 11625], [(((-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 9106], [((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 8199], [((-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 2595, 4275, 8262, 8339, 9599, 17719, 22619, 27862, 27865], [((-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 14491, 27935], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 4705, 7301, 7307, 8198, 8200, 19131, 19137, 23739, 23741, 26898], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 4066, 8196, 8338, 8340, 9108, 9600, 9667, 11627, 17720, 22620, 23735, 29241], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 3016, 4272, 8336, 9312, 9596, 22616, 23456, 27937], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 1966, 2876, 7219, 18977, 27099], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 7916, 9452, 24296, 24436, 26952, 27095, 28356], [(-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 4270, 9310, 27932], [(-(x ^ 3) * y ^ 2 - 2 * x ^ 4 * y) - x ^ 5, 26955], [(-(x ^ 3) * y ^ 3 - 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 8752, 9450], [(-(x ^ 4) * y ^ 3 - 2 * x ^ 5 * y ^ 2) - x ^ 6 * y, 8750, 13650], [((-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) + y ^ 3, 9114], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + x ^ 4, 16261], [-(x ^ -1) * y ^ 2 - y, 9257], [-x - y, 4093, 4102, 4404, 7341, 9122, 9693, 9702, 13986, 14157, 18495, 18504, 19141, 19171, 19175, 19333, 19334, 19382, 27595, 27597, 27603, 27604, 27779, 28546, 28591, 28594, 28625, 28864, 28878, 28890], [-x - x ^ 2 * y ^ -1, 1900], [-x * y - x ^ 2, 1337, 1765, 1774, 2815, 2824, 2854, 3577, 4140, 4716, 4721, 4723, 4732, 4751, 4755, 5606, 5968, 6735, 6744, 7429, 8220, 8247, 9673, 11908, 14156, 14159, 18501, 18507, 18531, 18984, 19026, 19164, 19339, 19563, 19572, 23740, 23742, 24090, 24463, 24472, 25766, 25771, 26685, 26694, 26893, 26894, 26936, 26942, 27596, 27599, 27601, 27607, 27631, 27807, 27814, 28575, 28584, 28861, 28867, 29283], [-x * y - y ^ 2, 1858, 2185, 2194, 2393, 2394, 2442, 2603, 2604, 2652, 4075, 4284, 4352, 4784, 7132, 7303, 7332, 7334, 7514, 7544, 8205, 8274, 8624, 8672, 9142, 9158, 9256, 9259, 9648, 9717, 11634, 13527, 14042, 16271, 16274, 16398, 17204, 17655, 18424, 18472, 19127, 19133, 19162, 19169, 19190, 22668, 23483, 23492, 23932, 25428, 26265, 26274, 27874, 28298, 28583, 28876, 28933, 29216, 29221, 29224, 29251], [-x * y ^ 2 - x ^ 2 * y, 1782, 2109, 2178, 2191, 2197, 2399, 2609, 3040, 3575, 4068, 4070, 4139, 4742, 4853, 4868, 5742, 6463, 6752, 6932, 6935, 7316, 7511, 7517, 7640, 7642, 7925, 7948, 8241, 8360, 8802, 8806, 9620, 9647, 10787, 11649, 13526, 13529, 14024, 14547, 17648, 17740, 19126, 19142, 19161, 19329, 20935, 21155, 21197, 21206, 22640, 22667, 23737, 24305, 24328, 24450, 26258, 26271, 26277, 26371, 26702, 27119, 27126, 27310, 27312, 27802, 27878, 27944, 28365, 28388, 28592, 29220], [-x * y ^ 2 - y ^ 3, 1852, 2202, 3025, 4282, 4351, 4420, 4422, 4792, 7712, 8345, 8628, 12610, 12612, 16263, 16299, 17725, 19405, 19543, 19587, 19592, 19596, 21703, 23465, 23888, 26282, 27242, 27380, 27382, 28928, 28983, 29242, 29249], [-x * y ^ 3 - x ^ 2 * y ^ 2, 2387, 3018, 3061, 4273, 4281, 4421, 5600, 6452, 6930, 7637, 7711, 7942, 8682, 9598, 9626, 9641, 10711, 11623, 12611, 17718, 17746, 17761, 18417, 19398, 19400, 19441, 22618, 22646, 22661, 23458, 23460, 24322, 27241, 27307, 27379, 27381, 27518, 27520, 27561, 27867, 27942, 28382], [-x * y ^ 3 - y ^ 4, 4417, 12607, 14282, 27377, 29202], [-x * y ^ 4 - x ^ 2 * y ^ 3, 2171, 4411, 7281, 26251, 27375, 27516, 29199, 29201], [-x * y ^ 5 - x ^ 2 * y ^ 4, 1545, 16241], [-(x ^ 2) * y - x ^ 3, 1771, 1777, 1968, 2011, 2821, 2827, 2878, 2921, 3993, 4714, 4845, 5956, 6589, 6728, 6741, 6771, 7009, 7220, 7940, 9041, 9113, 11413, 11417, 15687, 16389, 18999, 19553, 24320, 24460, 25557, 26691, 26697, 26899, 27100, 28380, 28426, 28581, 28587], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 1470, 1558, 1826, 3225, 3991, 3992, 4071, 6095, 6726, 7217, 7221, 7283, 7499, 7641, 7709, 7918, 7946, 7961, 8197, 8779, 8782, 9176, 9522, 11411, 12040, 13240, 13242, 14008, 14021, 14027, 14500, 14502, 17159, 24298, 24326, 24341, 24438, 24451, 24466, 24481, 26889, 26953, 26957, 27097, 27239, 27311, 27801, 27948, 28358, 28386, 28401, 28841, 29266, 29271], [-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2, 1751, 2801, 3990, 4271, 6446, 6451, 6721, 7702, 7705, 8195, 8680, 9601, 11410, 11621, 12817, 13237, 14006, 14497, 15750, 15890, 16525, 17435, 19539, 22335, 22621, 23461, 25480, 26671, 27092, 27232, 27235, 27941], [-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3, 9735, 12811, 17570], [-(x ^ 2) * y ^ 5 - x ^ 3 * y ^ 4, 12810], [-(x ^ 3) * y - x ^ 4, 2809, 4711, 4717, 4851, 7920, 9748, 24300, 27799], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 3019, 4701, 7072, 8265, 8334, 8753, 13241, 14501, 15680, 18971, 22895, 25550, 27795], [-(x ^ 3) * y ^ 3 - x ^ 4 * y ^ 2, 3011, 11550, 13231, 26950], [-(x ^ 4) * y - x ^ 5, 7919, 13440, 24299, 28359], [-(x ^ 4) * y ^ 2 - x ^ 5 * y, 13651, 13652], [(((-(x ^ 2) * y ^ 5 - x ^ 3 * y ^ 4) - 7 * x ^ 4 * y ^ 3) - 10 * x ^ 5 * y ^ 2) - 4 * x ^ 6 * y, 9100], [((-x * y ^ 4 - x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5, 9662], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 13932, 28492], [((-x * y ^ 4 - x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 18412], [(-x * y - x ^ 2) - y ^ 2, 14031, 14034, 19125, 28869], [(-x * y - x ^ 2) - x ^ 3 * y ^ -1, 1899], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 1335, 1801, 11906, 24089, 26721, 27800], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 1262, 2221, 7710, 17691, 18428, 19189, 26301, 27240], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 1559, 4069, 4862, 10785, 14646, 14649, 14651, 14657, 27797], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 7707, 27237], [(-x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 12601, 19399, 23459, 27519], [(-x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 4 * y, 11622], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) - x ^ 4, 9749, 11412, 11415, 15685, 25555], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 1546, 2592, 4833, 5950], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 4832, 12815], [(-(x ^ 3) * y ^ 2 - x ^ 4 * y) - x ^ 5, 7211, 9736], [((-(x ^ -1) * y ^ 3 - x * y) - x ^ 2) - y ^ 2, 9364], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 19549], [(-x * y - x ^ 2) + y ^ 2, 8662], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y, 1567, 27940], [(-(x ^ 2) * y - x ^ 3) + y ^ 3, 9162], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) + x ^ 4, 9757], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + y ^ 6, 21145], [(-(x ^ 3) * y ^ 2 - x ^ 4 * y) + y ^ 5, 21151], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 16291], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2 + x ^ 4 * y, 1549, 19533], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y + x ^ 5, 9739], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 19537], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + 3 * x ^ 4 * y ^ 2 + 4 * x ^ 5 * y + x ^ 6, 2800], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + 4 * x ^ 4 * y ^ 2, 14492], [(-x * y ^ 5 - x ^ 2 * y ^ 4) + 5 * x ^ 3 * y ^ 3 + 10 * x ^ 4 * y ^ 2 + 7 * x ^ 5 * y + x ^ 6, 7280], [-x * y + x ^ 2, 18499, 28859], [-x * y + y ^ 2, 7330, 28610], [-x * y ^ 2 + x ^ 2 * y, 7509, 12621], [-x * y ^ 2 + x ^ 3, 9670, 19129, 19576], [-x * y ^ 3 + x ^ 2 * y ^ 2, 8613], [-x * y ^ 3 + x ^ 3 * y, 1550, 7291, 7496, 28571], [-x * y ^ 3 + y ^ 4, 29222], [-x * y ^ 4 + x ^ 3 * y ^ 2, 11900], [-(x ^ 2) + y ^ 2, 19556, 19591, 19595], [-(x ^ 2) * y + x ^ 3, 7867, 28579], [-(x ^ 2) * y + y ^ 3, 19582], [-(x ^ 2) * y ^ 2 + x ^ 3 * y, 29211, 29217], [-(x ^ 2) * y ^ 2 + x ^ 4, 2806, 9740, 27796], [-(x ^ 2) * y ^ 3 + x ^ 4 * y, 1680], [-(x ^ 2) * y ^ 4 + x ^ 4 * y ^ 2, 9595, 22615], [-(x ^ 4) * y ^ 2 + x ^ 6, 7840], [-(x ^ 4) * y ^ 3 + x ^ 6 * y, 18130], [(-x * y ^ 2 + x ^ 2 * y) - y ^ 3, 7292, 28572], [(-x * y ^ 3 + x ^ 3 * y) - y ^ 4, 16272], [-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 9663], [(-x * y ^ 2 + x ^ 2 * y + x ^ 3) - y ^ 3, 4280, 16255, 19544], [(-(x ^ 2) * y ^ 5 + x ^ 3 * y ^ 4 + 3 * x ^ 4 * y ^ 3) - x ^ 6 * y, 14490], [-(x ^ 3) * y ^ 4 + x ^ 4 * y ^ 3 + 3 * x ^ 5 * y ^ 2 + x ^ 6 * y, 24430], [-(x ^ 2) * y ^ 5 + x ^ 3 * y ^ 4 + 3 * x ^ 4 * y ^ 3 + 3 * x ^ 5 * y ^ 2 + 3 * x ^ 6 * y + x ^ 7, 14000], [-x * y ^ 3 + 2 * x ^ 3 * y + x ^ 4, 7286], [(-x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - y ^ 5, 29197], [-(x ^ 2) * y ^ 4 + 2 * x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + x ^ 5 * y, 7490], [-(x ^ 2) * y ^ 5 + 3 * x ^ 3 * y ^ 4 + 6 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2, 9590, 22610], [x ^ -2 * y, 3829], [x ^ -1, 3695], [x ^ -1 * y, 3127, 6177, 6184, 8743, 12649, 23298, 28341], [x ^ -1 * y ^ 2, 12577, 28332, 28971], [x ^ -1 * y ^ 3, 28962], [x, 284, 1204, 1466, 1506, 1859, 2269, 2863, 2905, 3180, 4370, 4852, 4900, 5042, 5326, 5536, 5893, 5974, 6249, 6345, 6618, 6817, 7038, 7313, 7322, 7381, 7387, 7428, 7887, 8025, 8643, 8872, 9080, 9425, 9511, 9800, 9871, 9942, 10013, 10226, 10368, 10436, 10508, 10865, 11007, 11068, 11076, 11079, 11081, 11087, 11146, 11220, 11427, 11504, 11711, 11846, 11849, 12143, 12211, 12283, 12292, 12341, 12347, 12782, 13776, 14155, 14415, 14486, 14539, 14597, 14700, 14771, 15055, 15197, 15339, 15410, 15627, 15703, 15780, 16049, 16617, 17114, 17323, 17332, 17528, 18321, 18384, 18493, 18526, 18677, 18889, 18996, 19001, 19004, 19035, 19102, 19143, 19152, 19283, 19292, 19955, 20097, 20379, 20450, 21659, 21872, 22085, 22221, 22573, 22795, 23138, 23221, 23647, 23768, 23780, 23903, 23912, 24235, 24394, 24497, 25281, 25352, 25510, 25573, 25776, 25779, 25781, 25787, 25986, 26062, 26140, 26197, 26409, 26488, 26906, 26911, 26941, 26945, 26976, 26983, 26992, 27049, 27473, 27626, 28050, 28593, 28602, 28853, 28863, 29399], [y, 923, 1207, 1272, 1278, 1704, 1848, 2138, 2195, 2343, 2406, 2411, 2414, 2441, 2445, 2478, 2483, 2492, 2616, 2621, 2627, 2651, 2655, 2982, 3053, 3408, 3550, 3621, 3763, 3976, 4047, 4189, 4260, 4296, 4331, 4402, 4435, 4525, 4615, 4785, 4828, 5114, 5255, 5539, 5681, 6036, 6107, 6168, 6176, 6179, 6181, 6187, 6320, 6391, 6533, 6604, 6746, 6888, 7030, 7101, 7131, 7135, 7243, 7338, 7343, 7523, 7532, 7553, 7739, 7811, 8024, 8286, 8302, 8307, 8308, 8321, 8325, 8373, 8636, 8641, 8645, 8647, 8657, 8663, 8671, 8675, 8805, 9089, 9143, 9160, 9255, 9444, 9633, 9657, 9694, 9728, 9799, 10084, 10155, 10297, 10439, 10510, 10581, 10652, 10723, 10803, 11078, 11362, 11575, 11646, 11653, 11662, 11788, 11859, 11930, 12072, 12285, 12356, 12498, 12625, 12711, 12853, 12995, 13007, 13064, 13202, 13208, 13317, 13324, 13350, 13492, 13547, 13563, 13578, 13705, 13918, 13947, 13954, 13989, 14060, 14131, 14202, 14344, 14346, 14557, 14699, 14842, 14845, 14913, 14917, 14984, 15126, 15268, 15479, 15481, 15550, 15552, 15694, 15765, 15836, 16191, 16262, 16404, 16546, 16688, 16972, 17058, 17213, 17398, 17469, 17598, 17610, 17753, 17895, 17966, 18179, 18250, 18436, 18441, 18443, 18447, 18452, 18463, 18471, 18475, 18534, 18537, 18546, 18818, 18960, 19244, 19315, 19372, 19379, 19457, 19494, 19528, 19599, 19884, 20026, 20168, 20523, 20527, 20594, 20949, 20962, 21162, 21233, 21297, 21300, 21304, 21375, 21446, 21453, 21462, 21517, 21541, 21601, 21764, 22149, 22152, 22156, 22369, 22428, 22440, 22653, 22677, 22724, 22866, 22937, 23013, 23079, 23434, 23517, 23576, 23577, 23789, 23860, 23905, 23931, 24073, 24181, 24184, 24187, 24215, 24218, 24499, 24500, 24571, 24784, 25434, 25495, 25778, 25789, 25792, 25796, 25917, 25920, 25924, 26275, 26701, 26985, 27127, 27269, 27340, 27411, 27553, 27624, 27637, 27646, 27695, 27709, 27837, 27886, 27908, 27921, 27925, 27979, 28304, 28334, 28405, 28507, 28514, 28549, 28618, 28973, 29044, 29186, 29257, 29328], [x * y ^ -1, 1500, 7259, 8515, 9553, 9562, 17250], [x * y, 70, 212, 495, 566, 709, 851, 942, 996, 1974, 2216, 2226, 2620, 2635, 2696, 2884, 3186, 3201, 3271, 4106, 4110, 4116, 4376, 4806, 4816, 4824, 5181, 5672, 5986, 6109, 6122, 6327, 6351, 6607, 7027, 7147, 7260, 7310, 7503, 7504, 7546, 7570, 7668, 7680, 8007, 8236, 8284, 8317, 8412, 8634, 8676, 9131, 9161, 9388, 9407, 9431, 9698, 10572, 10643, 11066, 11637, 11644, 11664, 11677, 12265, 12316, 12656, 12687, 12690, 13316, 13319, 13321, 13327, 13525, 13841, 13938, 13946, 13949, 13951, 13957, 15786, 16339, 16407, 16470, 16887, 16894, 17163, 17164, 17206, 17212, 17356, 17517, 17520, 17653, 17686, 17696, 17702, 18210, 18219, 18227, 18434, 18440, 18490, 18509, 18597, 19029, 19156, 19316, 19740, 19811, 20526, 20529, 20609, 20727, 21296, 21299, 21301, 21307, 21450, 23762, 23958, 24165, 24207, 24216, 25135, 25207, 25418, 25431, 25516, 25916, 25919, 25921, 25927, 26296, 26306, 26366, 26932, 26939, 26965, 27113, 27149, 27192, 27338, 27350, 27662, 27840, 27847, 27856, 27884, 27890, 27956, 27991, 28290, 28301, 28307, 28378, 28498, 28506, 28509, 28511, 28517, 28590, 28681, 28753, 28822, 28924, 28966, 29106, 29298, 29310, 29317, 29326], [x * y ^ 2, 1836, 1841, 2626, 3056, 3062, 4429, 4772, 5530, 6478, 6490, 6497, 6506, 7078, 7099, 7102, 7106, 7242, 7331, 7421, 7662, 8292, 8686, 9117, 9146, 9386, 9607, 9636, 9640, 9646, 9668, 9689, 10430, 10501, 12827, 12833, 15893, 17481, 17591, 17723, 17756, 18207, 18442, 18446, 19139, 19403, 19436, 19446, 21170, 21456, 21471, 22381, 22416, 22419, 22421, 22427, 22627, 22656, 22660, 22666, 23496, 23500, 23506, 24201, 27141, 27332, 27548, 27556, 27892, 27896, 27968, 27980, 27982, 28283, 28611, 28920, 28931, 28937, 29123, 29203, 29252, 29292], [x * y ^ 3, 3039, 4767, 4771, 6472, 9129, 9241, 13163, 17573, 17643, 21176, 27539, 27542, 28913, 29122], [x * y ^ 4, 9593, 13162, 17713, 19393, 22613], [x ^ 2, 1219, 1796, 1806, 2006, 2813, 2814, 2856, 2916, 4105, 4350, 5960, 5971, 5977, 6766, 6776, 7223, 7255, 7864, 7896, 7897, 8235, 9049, 9057, 9532, 9538, 11426, 11429, 12468, 12931, 13255, 14515, 15626, 15629, 16947, 17370, 17971, 19140, 20806, 20809, 21021, 21027, 21239, 22871, 26716, 26726, 26980, 28573, 28622, 29274, 29290], [y ^ 2, 1271, 2127, 2432, 2439, 2642, 2649, 3038, 4320, 4322, 4367, 4423, 4448, 4460, 4507, 4531, 5464, 6166, 6696, 7122, 7556, 7750, 8204, 8312, 9719, 10081, 11570, 12613, 12620, 12638, 12650, 12666, 12843, 13001, 13226, 14840, 14911, 14981, 15475, 15547, 15922, 16579, 17629, 18462, 18469, 21435, 21486, 22417, 22420, 23571, 23781, 23922, 27280, 27408, 27420, 27701, 27912, 27919, 28312, 28316, 28934], [x ^ 2 * y ^ -1, 7235, 8165], [x ^ 2 * y, 913, 1193, 1555, 1564, 1617, 1760, 1989, 2600, 2781, 2899, 4079, 4087, 4286, 4291, 4728, 4740, 4860, 6454, 6470, 6732, 7080, 7956, 7966, 8281, 8622, 8631, 9145, 9635, 11636, 11639, 11641, 11647, 12466, 12616, 12627, 13243, 13268, 13280, 13303, 14066, 14503, 14528, 14540, 14644, 16878, 16886, 16889, 16891, 16897, 17169, 17308, 17516, 17519, 17521, 17527, 17659, 18186, 18187, 18420, 18431, 18437, 20722, 21157, 21178, 21190, 21192, 21202, 22655, 23495, 23880, 23882, 24336, 24346, 24476, 24486, 26680, 27098, 27102, 27589, 27870, 27881, 27887, 27954, 27960, 28396], [x ^ 2 * y ^ 2, 912, 1192, 1753, 2179, 7073, 7922, 8617, 9116, 9606, 9617, 12253, 12461, 12826, 12829, 13302, 14141, 14506, 14638, 16876, 17293, 17729, 18162, 18181, 19253, 19409, 20512, 20515, 21158, 22626, 22637, 23469, 23477, 23877, 24153, 24302, 26259, 26673, 26959, 27793, 27966, 29219, 29263], [x ^ 2 * y ^ 3, 4412, 4415, 4693, 6443, 9661, 12251, 12252, 12605, 13511, 14636, 16380, 19252, 24151], [x ^ 2 * y ^ 4, 27511], [x ^ 3, 2819, 4843, 4892, 6517, 6586, 6739, 7299, 7850, 7861, 9745, 9754], [y ^ 3, 3024, 9384, 10080, 14980, 15120, 15261, 17621, 18962, 23862, 27402, 27524, 28942, 28946, 29228, 29240], [x ^ 3 * y, 1561, 1969, 2599, 6302, 6370, 7843, 7847, 7929, 7937, 9136, 11830, 13249, 14659, 15612, 16170, 17156, 18419, 21156, 21159, 24309, 24317, 24449, 27869, 27946, 29206], [x ^ 3 * y ^ 2, 1050, 1961, 2871, 6655, 7352, 7355, 7845, 14003, 18133, 19465], [x ^ 3 * y ^ 3, 1541, 7350, 9591, 18905, 22611, 23805, 29191], [x ^ 4, 4849, 7216, 8122, 8125, 9127, 9751, 13022, 22682, 22893], [y ^ 4, 18918, 23818], [x ^ 4 * y, 7212, 8120, 8261, 13020, 20790, 22680, 22891, 27939, 28840, 29261], [x ^ 4 * y ^ 2, 6441, 9731, 13232, 13235, 14495, 14631], [(((x ^ 2 * y ^ 4 - 4 * x ^ 3 * y ^ 3) - 10 * x ^ 4 * y ^ 2) - 7 * x ^ 5 * y) - x ^ 6, 9660], [((x ^ 2 * y ^ 4 - 4 * x ^ 3 * y ^ 3) - 6 * x ^ 4 * y ^ 2) - x ^ 5 * y, 8610], [x ^ 2 * y ^ 4 - 3 * x ^ 4 * y ^ 2, 24432], [((x * y ^ 4 - 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 24439], [(x * y ^ 3 - 2 * x ^ 3 * y) - x ^ 4, 9666], [x * y - y ^ 2, 9710], [x * y ^ 2 - x ^ 3, 7290, 9679, 16286, 19547], [x * y ^ 3 - x ^ 2 * y ^ 2, 7493], [x * y ^ 3 - x ^ 3 * y, 7076, 9671], [x * y ^ 4 - x ^ 3 * y ^ 2, 3013, 9240], [x ^ 2 - y ^ 2, 16266, 16301, 16305], [x ^ 2 * y - x ^ 3, 7237], [x ^ 2 * y - y ^ 3, 16292, 24480], [x ^ 2 * y ^ 2 - x ^ 4, 19546], [x ^ 2 * y ^ 4 - x ^ 4 * y ^ 2, 12250, 13510], [x ^ 4 * y ^ 2 - x ^ 6, 7210], [(x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2, 24150], [(((x * y ^ 3 - x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4) + y ^ 4, 24440], [(x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 24152], [((x * y ^ 2 - x ^ 2 * y) - x ^ 3) + y ^ 3, 16254, 19545], [((x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 3020], [(x * y ^ 2 - x ^ 2 * y) + y ^ 3, 9672], [(x * y ^ 2 - x ^ 3) + y ^ 3, 16253, 16302], [(x * y ^ 3 - x ^ 2 * y ^ 2) + y ^ 4, 22407], [(x * y ^ 3 - x ^ 3 * y) + y ^ 4, 24442], [1 + x ^ -1 * y, 9273, 9282, 19071, 19077], [1 + x * y ^ -1, 14173, 14182, 28873, 28882], [x ^ -2 * y ^ 2 + x ^ -1 * y, 4459], [x ^ -1 * y ^ 2 + y, 9306], [x + y, 71, 213, 497, 568, 710, 852, 1136, 1349, 1420, 1491, 1775, 1917, 1988, 2272, 2698, 2769, 2840, 2911, 3195, 3337, 3479, 3905, 4385, 4757, 4899, 5113, 5184, 5397, 5468, 5610, 5752, 5894, 5965, 6462, 7385, 7669, 7882, 7953, 8166, 8521, 8652, 8668, 8876, 8947, 9515, 9586, 9695, 9697, 9721, 11149, 11433, 11717, 12214, 12924, 13137, 13279, 13543, 13847, 14206, 14273, 14628, 15623, 16475, 16759, 16901, 17256, 17327, 17540, 18108, 18392, 18494, 18536, 18542, 18605, 18676, 19031, 19173, 19335, 19344, 19742, 19813, 19883, 20381, 20452, 20807, 21020, 22227, 22511, 22582, 23150, 23363, 23718, 24002, 24144, 24286, 24357, 24428, 24926, 25068, 25139, 25210, 25565, 25991, 26204, 26417, 26630, 26914, 27056, 27198, 27482, 27594, 27636, 27766, 28476, 28689, 28760, 28831, 28902], [x + x ^ 2 * y ^ -1, 1480], [x * y + x ^ 2, 939, 1763, 1764, 1812, 2862, 3160, 4300, 5392, 5395, 5609, 5746, 5751, 6733, 6734, 6782, 7248, 7293, 7426, 8228, 8242, 8290, 8640, 9502, 14126, 15760, 16273, 16282, 18985, 18987, 18993, 18994, 19058, 19123, 19306, 19307, 19341, 19347, 25490, 26683, 26684, 26732, 26895, 26904, 27609, 27828, 27846, 28574, 28852, 28858, 29316], [x * y + y ^ 2, 2183, 2184, 2232, 2395, 2404, 2605, 2614, 4074, 4122, 4285, 4308, 4391, 4773, 4774, 4780, 4822, 4826, 5111, 5112, 5466, 7085, 7094, 7124, 7337, 7346, 7552, 7738, 8275, 9134, 9226, 9677, 9683, 9712, 9714, 11635, 11643, 13216, 13217, 13566, 13576, 17654, 18425, 19167, 19176, 19352, 19561, 19564, 19881, 19882, 21712, 26263, 26264, 26312, 27268, 27875, 28309, 28617, 28626, 28988, 28992], [x * y ^ 2 + x ^ 2 * y, 1970, 1972, 2189, 2401, 2407, 2598, 2611, 2617, 3153, 3157, 3997, 4278, 4306, 4321, 4779, 5390, 6496, 7091, 7097, 7145, 7569, 7924, 8268, 8296, 8311, 8368, 8382, 8386, 8411, 8618, 8646, 9676, 9696, 9768, 11628, 11671, 12619, 14143, 14507, 14510, 15617, 17168, 17510, 17512, 17658, 18209, 18418, 18489, 19120, 20583, 20587, 20725, 21430, 21449, 24304, 24444, 24487, 24492, 25762, 26269, 26912, 27661, 27822, 27868, 27945, 28287, 28289, 28364, 29236, 29296], [x * y ^ 2 + y ^ 3, 1578, 1832, 2412, 2460, 2462, 2622, 4078, 4302, 4343, 5110, 5461, 7732, 8344, 9159, 9243, 9604, 9652, 13211, 16297, 16306, 16571, 17580, 17582, 17724, 19404, 19452, 19589, 19880, 22410, 22412, 22624, 22672, 23464, 23512, 27262, 29247, 29256], [x * y ^ 3 + x ^ 2 * y ^ 2, 1569, 1576, 1831, 2177, 2459, 2461, 2593, 3155, 3995, 4482, 6476, 7420, 9316, 11626, 13513, 15891, 16269, 17507, 17581, 17647, 18205, 19042, 19045, 19185, 19321, 20581, 21169, 21172, 22409, 22411, 24081, 24448, 25411, 26257, 27962, 28281, 28362, 28919, 29208], [x * y ^ 3 + y ^ 4, 2457, 3022, 5460, 9242, 9381, 9608, 17577, 19181, 19562, 22628, 23468], [x * y ^ 4 + x ^ 2 * y ^ 3, 2381, 2455, 2591, 3021, 7071, 9111, 17571, 19040, 20580, 21143, 22405, 27513], [x * y ^ 4 + y ^ 5, 9380, 24437], [x * y ^ 5 + x ^ 2 * y ^ 4, 3012, 27512], [x ^ 2 * y + x ^ 3, 917, 1197, 1769, 3923, 4349, 4703, 4736, 4746, 4844, 5959, 9124, 9526, 9531, 14056, 16945, 17369, 18986, 18989, 18991, 18997, 19021, 21217, 26689, 26901, 26907, 26931, 26958, 27001, 27729, 28578, 29270], [x ^ 2 * y ^ 2 + x ^ 3 * y, 911, 1191, 1615, 1759, 1963, 1971, 2873, 2877, 3922, 4719, 4838, 6450, 6727, 6731, 7079, 7706, 8621, 9382, 9456, 9759, 9766, 14498, 14509, 15615, 17509, 17511, 19259, 23879, 23881, 26679, 27096, 27101, 27236, 27581, 27938, 27981, 29209], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 910, 1190, 1543, 1822, 4061, 7913, 7917, 7921, 12460, 17292, 17505, 20510, 23872, 24293, 24297, 24301, 24433, 26881, 28353, 28361], [x ^ 2 * y ^ 3 + x ^ 4 * y, 8611], [x ^ 2 * y ^ 3 + x ^ 5, 27792], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 1542, 4410, 8331, 23451, 23870], [x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4, 27510], [x ^ 3 * y + x ^ 4, 4279, 4709, 4848, 6515, 7849, 9121, 19559, 28566], [x ^ 3 * y ^ 2 + x ^ 4 * y, 4065, 8754, 9733, 14637, 15610, 17152, 26325, 28912, 29052], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 1960, 2870, 7911, 9732, 17715, 23455, 24291, 24431, 27515, 28351], [x ^ 4 * y + x ^ 5, 2802, 22892], [x ^ 4 * y ^ 2 + x ^ 5 * y, 22890], [x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 13230, 14630], [(((x * y ^ 5 + x ^ 2 * y ^ 4) - 3 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) - x ^ 5 * y, 7070], [(x * y ^ 2 + x ^ 2 * y) - x ^ 3, 28570], [(x * y ^ 2 + x ^ 2 * y) - y ^ 3, 9642, 22662], [(x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y, 21150], [(x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 16243], [(x * y ^ 5 + x ^ 3 * y ^ 3) - x ^ 5 * y, 9102], [(((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 13512], [((x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 19557, 19581, 28360], [((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y, 24441], [((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 4 * y) + y ^ 5, 21149], [x ^ -1 * y ^ 2 + x + y, 9373], [x * y + x ^ 2 + y ^ 2, 7342, 19124, 19371], [x * y + x ^ 2 + x ^ 3 * y ^ -1, 1479], [x * y ^ 2 + x ^ 2 * y + x ^ 3, 3159, 8219, 13936, 15759, 16270, 25489, 28496, 29289], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 2431, 21711, 27911, 28939, 28991], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 6469, 9762, 16276, 20582, 20585, 21429, 28285], [x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 1572, 19408], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 21421, 28911], [x * y ^ 4 + x ^ 3 * y ^ 2 + x ^ 4 * y, 7492], [x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 915, 1195, 21215], [x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 7841], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 14635, 18131], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 8193], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 12602, 21425], [x * y ^ 5 + x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 21420], [x * y ^ 5 + x ^ 2 * y ^ 4 + x ^ 4 * y ^ 2 + x ^ 5 * y, 19531], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 4836, 29262], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 6442], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 8192], [x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 9103], [x * y ^ 5 + x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 19392], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + x ^ 6, 4692], [x + 2y, 9691, 9725, 13552], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 2596, 8266, 8616, 18416, 27866], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 27936], [(x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - x ^ 4, 19551], [x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 1768, 2818, 4704, 4752, 6738, 8222, 8270, 9681, 9687, 26688, 27587, 28846, 28851], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 1829, 1967, 3152, 4063, 4276, 7287, 8359, 8362, 21427, 28567, 28917], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 23453, 24080, 28357], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 3921, 26956, 27725, 28422, 29267, 29269], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 1962, 2872, 3920, 6447, 9172, 19255], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 28352], [x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 2875, 14072, 28420], [x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 8190, 9170, 13160, 29050], [x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 28350], [x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + x ^ 6, 19250], [(x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y) - x ^ 4, 4840], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 4762], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 6722, 6725], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 7912, 7915, 24292, 24295], [x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 24435], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 4062], [x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2, 23452], [x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2, 21140], [x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 4830], [(x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - x ^ 5, 4839], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 4708, 8269], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 4765, 4837, 6449, 8333, 17642, 17645, 28915], [x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 3015, 17712], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 1965], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 12600, 28355], [x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 8332, 21142], [x ^ 2 * y ^ 5 + 2 * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 8330], [x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + 3 * x ^ 5 * y ^ 2 + x ^ 6 * y, 7910], [x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 4835, 6445], [x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3, 8620], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y, 19119], [x * y ^ 5 + 3 * x ^ 4 * y ^ 2 + x ^ 5 * y, 22612], [x ^ 3 * y ^ 2 + 3 * x ^ 4 * y + x ^ 5, 7282], [x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2 + x ^ 5 * y, 28910], [x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 1825], [x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 4697], [x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 2172, 2175, 26252, 26255], [x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 29265], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 8619], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + 2 * x ^ 4, 27585], [x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + x ^ 5 * y, 17640], [x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2 + 4 * x ^ 5 * y + x ^ 6, 6720], [x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + 5 * x ^ 4 * y ^ 2 + 4 * x ^ 5 * y + x ^ 6, 4695], [x ^ 2 * y ^ 5 + 4 * x ^ 3 * y ^ 4 + 3 * x ^ 4 * y ^ 3, 17710], [x ^ 3 * y ^ 4 + 4 * x ^ 4 * y ^ 3 + 3 * x ^ 5 * y ^ 2 + x ^ 6 * y, 24290], [x ^ 2 * y ^ 3 + 4 * x ^ 3 * y ^ 2 + 4 * x ^ 4 * y + x ^ 5, 27580], [x ^ 2 * y ^ 4 + 4 * x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + x ^ 5 * y, 2170, 26250], [x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + 4 * x ^ 5 * y + x ^ 6, 1750, 26670], [x * y ^ 5 + 5 * x ^ 4 * y ^ 2 + x ^ 5 * y, 9592], [(((x ^ 2 * y ^ 5 + 5 * x ^ 3 * y ^ 4 + 5 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) - 4 * x ^ 6 * y) - x ^ 7, 16240], [x ^ 2 * y ^ 5 + 6 * x ^ 3 * y ^ 4 + 11 * x ^ 4 * y ^ 3 + 7 * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 29190], [2 * x * y, 25437], [2 * x * y ^ 2, 18483], [2 * x ^ 2 * y ^ 2, 9609, 22629], [2 * x ^ 3 * y, 27951, 27957], [2 * x ^ 2 * y ^ 3 - x ^ 4 * y, 8615], [(2 * x * y ^ 2 - x ^ 3) + y ^ 3, 16296, 19554], [2 * x * y + x ^ 2, 7294, 8667, 9675, 19328], [2 * x * y + y ^ 2, 8625, 9165], [2 * x * y ^ 2 + x ^ 2 * y, 2388, 8661, 9138, 9152, 9692, 27583], [2 * x * y ^ 2 + y ^ 3, 29204], [2 * x * y ^ 3 + y ^ 4, 9112], [2 * x ^ 2 * y + x ^ 3, 18978, 26888], [2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 1757, 26677], [2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 23875], [2 * x ^ 4 * y + x ^ 5, 28562], [(2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y, 19113], [(2 * x ^ 2 * y + x ^ 3) - y ^ 3, 9115], [(((2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4) + y ^ 4, 7289, 16258], [2 * x * y + x ^ 2 + y ^ 2, 9684, 13567, 18498, 19166, 19172, 28616], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 1830, 2188, 2641, 4778, 7508, 9123, 13561, 18461, 26268, 28986], [2 * x * y ^ 4 + x ^ 2 * y ^ 3 + y ^ 5, 3017, 19180], [2 * x * y ^ 2 + 2 * x ^ 2 * y, 18487, 19326], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 2386], [2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 18976, 26886], [((2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 19538], [((2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - x ^ 4) + y ^ 4, 28569], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 9132, 21423], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + y ^ 4, 1827], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 27582], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 4342], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4 + y ^ 4, 16250], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 18482], [2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + x ^ 6, 14002], [((2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 19536], [2 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y, 19117], [2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 29193], [2 * x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2 + x ^ 5 * y, 4060], [2 * x ^ 3 * y ^ 4 + 3 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 23450], [2 * x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + x ^ 6, 14070, 27790], [2 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 7298], [2 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 1752, 1755, 26672, 26675], [2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, 7285, 28565], [2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 19112], [2 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 18485], [2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 21422], [2 * x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + x ^ 5 * y, 17150], [(((2 * x * y ^ 5 + 4 * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - 2 * x ^ 5 * y) - x ^ 6, 16242], [2 * x ^ 2 * y ^ 4 + 4 * x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2 + x ^ 5 * y, 4760, 29195], [2 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 4 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5 + y ^ 5, 16249], [2 * x * y ^ 5 + 5 * x ^ 2 * y ^ 4 + 4 * x ^ 3 * y ^ 3 + 5 * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y, 29192], [2 * x * y ^ 4 + 5 * x ^ 2 * y ^ 3 + 5 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 19115], [2 * x ^ 3 * y ^ 3 + 7 * x ^ 4 * y ^ 2 + 6 * x ^ 5 * y + x ^ 6, 19110], [3 * x * y + x ^ 2 + y ^ 2, 7336], [3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 29246], [((3 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3) - x ^ 4 * y) + y ^ 5, 16247], [3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 19128], [3 * x ^ 4 * y ^ 2 + 4 * x ^ 5 * y + x ^ 6, 29260], [3 * x ^ 4 * y ^ 3 + 4 * x ^ 5 * y ^ 2 + x ^ 6 * y, 6440], [3 * x ^ 3 * y ^ 2 + 5 * x ^ 4 * y + x ^ 5, 18480], [(((3 * x * y ^ 5 + 6 * x ^ 2 * y ^ 4 + 5 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - 2 * x ^ 5 * y) - x ^ 6) + y ^ 6, 16245], [3 * x ^ 4 * y ^ 3 + 7 * x ^ 5 * y ^ 2 + 5 * x ^ 6 * y + x ^ 7, 4690], [3 * x ^ 3 * y ^ 3 + 7 * x ^ 4 * y ^ 2 + 6 * x ^ 5 * y + x ^ 6, 28560], [4 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 19395], [5 * x ^ 3 * y ^ 4 + 4 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 19390]]) * x ^ 0 * y ^ 0
            end
        f29 = function (x, y, j)
                return dec(70, [[((-4 * x * y ^ 4 - 5 * x ^ 2 * y ^ 3) + (4 * j ^ 2 + 3j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y) - 2 * y ^ 5, 20072], [(-4 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * y ^ 4, 7273, 22113], [(-4 * x * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y) - 2 * y ^ 5, 5797], [(-4 * x * y ^ 4 + (4 * j ^ 2 + 3j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y) - 2 * y ^ 5, 5793], [(-3 * x * y ^ 3 - 4 * x ^ 2 * y ^ 2) - x ^ 3 * y, 5027], [((-3 * x * y ^ 2 - 3 * x ^ 2 * y) + j ^ 2 * x ^ 3) - y ^ 3, 20037], [((-3 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - 2 * y ^ 4, 22253], [(-3 * x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y) - 2 * y ^ 4, 5798], [-3 * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4 + y ^ 4, 4985], [(((-3 * x * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 3) - 2 * j * x ^ 3 * y ^ 2) - j * x ^ 4 * y) - y ^ 5, 5685], [(-3 * x ^ 3 * y ^ 4 + (6 * j ^ 2 + 3j) * x ^ 4 * y ^ 3 + (4 * j ^ 2 + j) * x ^ 5 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 6 * y) - x ^ 7, 15466], [((-2 * x ^ 2 * y ^ 4 - 6 * x ^ 3 * y ^ 3) + (6 * j ^ 2 + 5j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 27575], [(-2 * x * y ^ 5 - 6 * x ^ 2 * y ^ 4) + (6 * j ^ 2 + 5j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 2, 22957], [((-2 * x * y ^ 5 - 5 * x ^ 2 * y ^ 4) - 5 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2, 22954], [((-2 * x * y ^ 5 - 5 * x ^ 2 * y ^ 4) - 4 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 22537], [(-2 * x * y ^ 4 - 5 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2, 6787], [(-2 * x * y ^ 5 - 5 * x ^ 2 * y ^ 4) + (4 * j ^ 2 + 3j) * x ^ 3 * y ^ 3, 23237], [((-2 * x * y ^ 3 - 4 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, 5023, 27563], [(-2 * x * y ^ 3 - 4 * x ^ 2 * y ^ 2) - x ^ 3 * y, 27567], [((-2 * x ^ 2 * y ^ 3 - 3 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 5863], [(-2 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3, 5028, 27568], [(-2 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 6784], [(-2 * x ^ 2 * y ^ 3 - 3 * x ^ 3 * y ^ 2) - x ^ 4 * y, 5867], [(-2 * x * y ^ 5 - 3 * x ^ 2 * y ^ 4) + (j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 4 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 5 * y, 22606], [(-2 * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 5868], [((-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 22453], [(-2 * x ^ 3 * y ^ 3 - 2 * x ^ 4 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 5 * y, 23094], [-2 * x * y - x ^ 2, 7272, 22112, 28056, 28059], [-2 * x * y - y ^ 2, 20020], [-2 * x * y ^ 2 - x ^ 2 * y, 19514], [-2 * x * y ^ 2 - y ^ 3, 21897], [-2 * x * y ^ 3 - x ^ 2 * y ^ 2, 28015], [-2 * x ^ 2 * y - x ^ 3, 15456], [-2 * x ^ 3 * y ^ 2 - x ^ 4 * y, 28055], [(-2 * x * y - x ^ 2) - y ^ 2, 22458], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 21893, 22457], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 22032], [(-2 * x * y ^ 4 - x ^ 2 * y ^ 3) - y ^ 5, 13352], [-2 * x * y ^ 4 + x ^ 3 * y ^ 2, 22872], [-2 * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 18215], [-2 * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2, 3065], [-2 * x * y ^ 5 + (5 * j ^ 2 + j) * x ^ 2 * y ^ 4 + 4 * j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2 + j * y ^ 6, 5733], [-2 * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 18333], [-2 * x * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2, 6786], [-2 * x * y ^ 5 + (4 * j ^ 2 + 3j) * x ^ 2 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 3, 23234], [-2 * x * y ^ 5 + (5 * j ^ 2 + 3j) * x ^ 2 * y ^ 4 + 2 * j ^ 2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 5 * y, 22604], [-2 * x * y ^ 5 + (5 * j ^ 2 + 3j) * x ^ 2 * y ^ 4 + (4 * j ^ 2 + j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 22534], [(-2 * x ^ 3 * y ^ 4 + (5 * j ^ 2 + 4j) * x ^ 4 * y ^ 3 + (4 * j ^ 2 + 3j) * x ^ 5 * y ^ 2) - x ^ 6 * y, 5875], [(-2 * x * y ^ 6 + (6 * j ^ 2 + 4j) * x ^ 2 * y ^ 5 + (7 * j ^ 2 + 3j) * x ^ 3 * y ^ 4 + (4 * j ^ 2 + j) * x ^ 4 * y ^ 3 + (4 * j ^ 2 - j) * x ^ 5 * y ^ 2 + (2 * j ^ 2 - 2j) * x ^ 6 * y) - j * x ^ 7, 5805], [-2 * x * y ^ 5 + (4 * j ^ 2 + 5j) * x ^ 2 * y ^ 4 + (2 * j ^ 2 + 6j) * x ^ 3 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2, 22956], [-2 * x * y ^ 5 + (7 * j ^ 2 + 5j) * x ^ 2 * y ^ 4 + (7 * j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y, 22607], [-1, 3697, 3768, 4968, 6052, 6472, 7075, 7603, 8297, 9370, 10022, 10092, 10372, 10866, 10990, 11019, 12291, 12931, 14335, 15839, 16259, 17192, 17267, 17271, 17337, 17722, 17783, 17826, 18212, 18468, 19821, 20031, 20174, 22170, 22450, 22553, 24545, 25746, 25749, 26042, 26395, 26819, 28155, 28336, 28584, 29105], [-x, 1107, 2470, 2487, 2494, 2836, 2921, 2943, 2986, 2987, 5020, 5323, 6176, 6178, 7734, 7891, 8165, 8241, 8905, 11326, 11329, 15948, 17033, 17801, 17818, 18957, 21336, 21339, 21439, 21728, 21980, 22009, 22541, 22547, 24146, 24965, 24988, 25064, 25213, 25491, 25970, 25999, 26551, 27560, 27788, 28830], [-y, 168, 178, 359, 462, 465, 469, 1299, 1425, 1636, 1710, 1923, 2274, 3117, 3838, 3944, 3950, 4158, 4976, 5015, 5038, 5183, 5226, 5463, 5506, 6250, 6402, 6426, 6429, 6537, 6685, 6757, 6764, 7821, 8333, 8376, 8697, 8879, 9781, 10014, 10364, 11006, 11029, 11482, 11569, 11798, 11928, 11938, 12634, 12900, 14416, 14729, 16208, 16410, 17478, 17534, 17714, 17853, 18204, 19247, 19463, 19506, 19674, 20023, 20313, 20882, 20953, 21027, 21072, 21383, 22284, 22290, 22436, 22888, 23550, 23579, 23758, 24573, 25059, 25638, 26141, 28225, 28267, 29046], [-x * y, 444, 450, 2088, 2536, 2538, 3178, 4255, 5056, 5201, 5218, 5481, 5516, 5519, 5713, 6147, 6175, 7296, 7298, 7459, 7865, 7875, 8106, 8109, 8351, 8368, 8737, 9376, 9377, 9754, 9899, 10029, 10276, 10279, 10391, 10615, 11916, 12616, 12618, 12842, 12866, 12869, 13076, 13079, 13300, 13329, 15156, 15943, 16784, 17518, 17871, 17888, 18200, 18229, 19481, 19498, 20049, 20050, 20116, 20441, 20444, 20805, 21468, 21997, 22252, 22418, 22422, 22666, 22669, 22750, 22778, 22848, 23362, 24458, 24920, 25009, 25986, 26548, 27199, 27316, 27318, 27720, 27749, 28684, 28825], [-x * y ^ 2, 155, 197, 2083, 2087, 3329, 4112, 4145, 4187, 4335, 4336, 5009, 5055, 5478, 7015, 9815, 10058, 10521, 10528, 10538, 10806, 11392, 11915, 11957, 12615, 13317, 15498, 21575, 21617, 21855, 24937, 25038, 25366, 25431, 25438, 25448, 27641, 27737, 28016, 28645, 28765, 28766], [-x * y ^ 3, 52, 4817, 10518, 22625, 22667, 25428, 26232, 27643], [-x * y ^ 4, 4815], [-(x ^ 2), 248, 1247, 2816, 2818, 2961, 2978, 5358, 5860, 7156, 7690, 7716, 7718, 8400, 8429, 10031, 10038, 10048, 10309, 11884, 12587, 13009, 14770, 14799, 15006, 15291, 15611, 16606, 16608, 17738, 19176, 19558, 19568, 20705, 23365, 26896, 26898, 27036, 27038, 27650, 28977], [-(y ^ 2), 476, 479, 3050, 3128, 3276, 3279, 3540, 3833, 3837, 4760, 4789, 5555, 5565, 5676, 5790, 5886, 5923, 5925, 7258, 10246, 10461, 11598, 13332, 15905, 17595, 19025, 22098, 22495, 22503, 22638, 23196, 23537, 23784, 25348, 29281], [-(x ^ 2) * y, 721, 794, 800, 2115, 4115, 4988, 5846, 7685, 7715, 8416, 9236, 10572, 10594, 10710, 10739, 11112, 12380, 12779, 14786, 14809, 15425, 15635, 15680, 15709, 16605, 16675, 20459, 23865, 23866, 24959, 25200, 25229, 25504, 25510, 26653, 26657, 26895, 27946, 27948], [-(x ^ 2) * y ^ 2, 718, 1038, 2155, 3165, 3207, 6422, 6912, 6985, 10210, 10609, 10727, 12375, 12442, 22035, 22765, 24007, 24977, 25217, 25328, 26305, 27525, 27777, 28904, 28906, 28907], [-(x ^ 2) * y ^ 3, 925, 1033, 10557, 10585, 14615, 15242, 25323, 25467, 27156, 27157], [-(x ^ 3), 5624, 10376, 10378, 20845, 27923, 28555], [-(y ^ 3), 1592, 3049, 3259, 4777, 5912, 5916, 6945, 10469, 10478, 29278], [-(x ^ 3) * y, 195, 2085, 8745, 9855, 10067, 10375, 10802, 10834, 10838, 11955, 17767, 19545, 19587, 20494, 21615, 26792, 28685], [-(x ^ 3) * y ^ 2, 1397, 2237, 5615, 5937, 10767, 12862, 22665, 25257, 26387], [-(x ^ 3) * y ^ 3, 10765, 18194, 20296, 25255], [-(x ^ 4), 832, 1255, 6915, 25542], [-(y ^ 4), 14575], [-(x ^ 4) * y, 1534, 26665], [-(x ^ 4) * y ^ 2, 624, 965, 3284, 10555, 15732, 24844, 25465], [-(x ^ 5), 19585], [-(x ^ 5) * y, 12874, 29397], [-(x ^ 6), 14974], [(-x * y ^ 4 - 4 * x ^ 2 * y ^ 3) + (6 * j ^ 2 + 3j) * x ^ 3 * y ^ 2 + 3 * j ^ 2 * x ^ 4 * y, 17076], [((-(x ^ 2) * y ^ 3 - 3 * x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5, 5661], [(-x * y ^ 4 - 3 * x ^ 2 * y ^ 3) + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 2, 21905], [(-x * y ^ 4 - 3 * x ^ 2 * y ^ 3) + (5 * j ^ 2 + 3j) * x ^ 3 * y ^ 2 + 3 * j ^ 2 * x ^ 4 * y, 17074], [-x * y - 2 * y ^ 2, 22496], [-x * y ^ 2 - 2 * x ^ 2 * y, 5694], [((-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 20353], [((-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 13293], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 5407], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 3353, 20357], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 5933], [(-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 1043, 25333], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2, 5895], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 3555], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + 2 * j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 5755], [(((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - x ^ 5 * y, 15116], [(-(x ^ 2) * y ^ 5 - 2 * x ^ 3 * y ^ 4) + (5 * j ^ 2 + 2j) * x ^ 4 * y ^ 3 + 2 * j ^ 2 * x ^ 5 * y ^ 2, 15746], [-x - y, 3767, 9773, 17923, 20088, 23295], [-x * y - x ^ 2, 3705, 5390, 5419, 5643, 7158, 17941, 17958, 20076, 20079, 22742, 22876, 22879, 27679], [-x * y - y ^ 2, 5058, 5746, 5785, 11918, 21858, 21862, 21898, 22493, 22565, 22573, 22779, 22820, 22849, 23645, 28028], [-x * y ^ 2 - x ^ 2 * y, 2535, 4992, 5632, 5636, 5638, 6072, 6495, 7295, 8323, 9303, 13108, 13223, 15426, 18755, 20302, 20321, 21715, 21753, 21757, 22415, 27315, 27528, 27532, 28612], [-x * y ^ 2 - y ^ 3, 3338, 8675, 22382, 23745, 28018], [-x * y ^ 3 - x ^ 2 * y ^ 2, 1028, 1732, 3143, 3845, 3972, 5779, 11613, 20318, 20322, 22312, 23572, 25318, 28057, 28625], [-x * y ^ 3 - y ^ 4, 5762], [-x * y ^ 4 - x ^ 2 * y ^ 3, 8452, 10493, 13355, 27853], [-(x ^ 2) * y - x ^ 3, 1115, 2815, 2956, 8955, 11395, 18965, 27035], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 5828, 5832, 5938, 10624, 15668, 21483, 23027, 26235, 26515], [-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2, 2657, 3062, 5515, 10073, 15663, 20315], [-(x ^ 2) * y ^ 3 - x ^ 4 * y, 22805], [-(x ^ 3) * y - x ^ 4, 16505], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 5825, 7557, 10833, 22744, 22746], [-(x ^ 4) * y ^ 3 - x ^ 5 * y ^ 2, 5664], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 3775, 13269, 13278, 20324], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 6492, 22837], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 20358, 23785], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) - x ^ 4, 16715, 25755], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 1536, 22875, 23585], [(-(x ^ 4) * y ^ 2 - x ^ 5 * y) - x ^ 6, 14976], [((-x * y ^ 2 - x ^ 2 * y) - x ^ 3) - y ^ 3, 9015], [((-x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - y ^ 5, 3552], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y, 15667], [(((-x * y ^ 5 - x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3) + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 5 * y) - j ^ 2 * x ^ 6, 17985], [((-x * y ^ 4 - x ^ 2 * y ^ 3) + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (j ^ 2 - 2j) * x ^ 4 * y) - j * x ^ 5, 17845], [((-x * y ^ 5 - x ^ 2 * y ^ 4) + (2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (j ^ 2 - 2j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 8395], [(-x * y ^ 2 - x ^ 2 * y) - j ^ 2 * x ^ 3, 16295], [(-(x ^ 3) * y ^ 2 - x ^ 4 * y) - j ^ 2 * x ^ 5, 545, 10345], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + 2 * j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 17565], [((-x * y ^ 4 - x ^ 2 * y ^ 3) + 3 * j ^ 2 * x ^ 3 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 4 * y) - j * x ^ 5, 17846], [((-x * y ^ 5 - x ^ 2 * y ^ 4) + 3 * j ^ 2 * x ^ 3 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 8396], [(-x * y ^ 2 - x ^ 2 * y) + j * x ^ 3, 15636], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + 3 * j * x ^ 3 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 4 * y + j * x ^ 5, 9785], [-x * y + y ^ 2, 5498], [-x * y ^ 2 + x ^ 3, 15421, 15438], [-x * y ^ 3 + x ^ 3 * y, 9307], [-(x ^ 2) + y ^ 2, 19460, 19489], [-x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 22802], [-(x ^ 2) * y ^ 4 + x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 13294], [-x * y - j * y ^ 2, 17742], [-(x ^ 2) * y ^ 2 - j * x ^ 3 * y, 20151], [(-x * y ^ 3 - j * x ^ 2 * y ^ 2) + x ^ 3 * y, 17563], [(((-(x ^ 3) * y ^ 4 - j * x ^ 4 * y ^ 3) + x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y) - j ^ 2 * x ^ 7, 1045, 25335], [(-x * y ^ 3 - j * x ^ 2 * y ^ 2) + 2 * x ^ 3 * y + x ^ 4, 15418], [((-x * y ^ 4 - j * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 24482], [((-x * y ^ 5 - j * x ^ 2 * y ^ 4) - j ^ 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 15522], [((-x * y ^ 5 + (j ^ 2 - j) * x ^ 2 * y ^ 4 + (j ^ 2 - 4j) * x ^ 3 * y ^ 3) - 2 * j * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 10285], [((-x * y ^ 5 + (j ^ 2 - j) * x ^ 2 * y ^ 4 + (2 * j ^ 2 - 3j) * x ^ 3 * y ^ 3) - 2 * j * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 10286], [(((-x * y ^ 5 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 3) - 3 * j * x ^ 4 * y ^ 2) + 2 * x ^ 5 * y) - j ^ 2 * x ^ 6, 19525], [-(x ^ 2) * y ^ 4 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2 + x ^ 5 * y, 28065], [-x * y - j ^ 2 * y ^ 2, 16020, 16301], [-x * y ^ 2 - j ^ 2 * y ^ 3, 21831, 25890], [-(x ^ 3) * y ^ 2 - j ^ 2 * x ^ 4 * y, 2234, 26384], [-(x ^ 4) * y ^ 2 - j ^ 2 * x ^ 6, 14697], [-x * y + j ^ 2 * x ^ 2, 5006, 5147, 5180, 5209, 5217, 6501, 24430, 24459], [-x * y + j ^ 2 * y ^ 2, 18232], [-x * y ^ 2 + j ^ 2 * x ^ 2 * y, 5702, 15470, 15499, 17868, 22041], [-x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 5928, 27991], [-(x ^ 2) * y + j ^ 2 * x ^ 3, 4869, 4878, 14669], [-(x ^ 2) * y ^ 2 + j ^ 2 * x ^ 3 * y, 809, 25519, 27805], [-(x ^ 2) * y ^ 2 + j ^ 2 * y ^ 4, 10491], [-(x ^ 2) * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 27495], [-(x ^ 3) * y + j ^ 2 * y ^ 4, 481], [-(x ^ 3) * y ^ 2 + j ^ 2 * x ^ 4 * y, 2584, 7344, 10837, 12664, 17144, 27364], [-(x ^ 4) * y + j ^ 2 * x ^ 5, 7764, 26944], [-(x ^ 4) * y ^ 2 + j ^ 2 * x ^ 5 * y, 627, 24847], [(-x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 22601], [-x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + y ^ 4, 5919], [-(x ^ 2) * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 2095], [-(x ^ 2) * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 827, 25537], [-x * y + j ^ 2 * x ^ 2 + j * y ^ 2, 6081], [-x * y + j ^ 2 * x ^ 2 + (j ^ 2 + 2j) * y ^ 2, 9762], [-(x ^ 2) * y ^ 2 + 2 * j ^ 2 * x ^ 3 * y, 2955], [-(x ^ 2) * y ^ 4 + 2 * j ^ 2 * x ^ 3 * y ^ 3, 28066], [-x * y + (-(j ^ 2) + j) * x ^ 2, 8209, 8210], [((-x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 3000], [-x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + j * x ^ 3, 8229, 8238], [-x * y + j * x ^ 2, 8227, 8234, 9896], [-x * y + j * y ^ 2, 5206], [-(x ^ 2) * y ^ 2 + j * x ^ 3 * y, 20488], [-(x ^ 4) * y ^ 2 + j * x ^ 5 * y, 9937], [((-x * y ^ 4 + j * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 4 * y, 17566], [(-x * y ^ 4 + j * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 18255], [(-x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * y ^ 3, 12941], [((-x * y ^ 3 + j * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) - y ^ 4, 17980], [-(x ^ 3) * y ^ 3 + j * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 6, 1035, 25325], [(-(x ^ 2) * y ^ 4 + j * x ^ 3 * y ^ 3 + 2 * j ^ 2 * x ^ 4 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 5 * y) - j * x ^ 6, 3005], [(-(x ^ 2) * y ^ 3 + j * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 553], [-x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3, 12447, 18309, 18318], [-(x ^ 3) * y ^ 2 + j * x ^ 4 * y + j * x ^ 5, 12454, 12457, 18325], [-x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3 + y ^ 3, 17618], [-x * y ^ 5 + j * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3 + x ^ 5 * y + x ^ 6, 17986], [(-x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3) - j * y ^ 3, 17609], [-(x ^ 3) * y ^ 3 + j * x ^ 4 * y ^ 2 + j * x ^ 5 * y + j * x ^ 6, 20295], [(-(x ^ 2) * y ^ 4 + j * x ^ 3 * y ^ 3 + (3 * j ^ 2 + j) * x ^ 4 * y ^ 2 + 3 * j ^ 2 * x ^ 5 * y) - j * x ^ 6, 3006], [-x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y, 19476], [-x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2, 13361], [(-(x ^ 2) * y ^ 4 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 9797], [(-(x ^ 3) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2 + (j ^ 2 - j) * x ^ 5 * y) - j * x ^ 6, 7907], [-x * y ^ 4 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y, 17145, 17146], [-x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y + j ^ 2 * x ^ 3, 5197], [-(x ^ 2) * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4, 828, 25538], [-(x ^ 2) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 823, 16376, 25533], [-(x ^ 4) * y ^ 2 + (2 * j ^ 2 + j) * x ^ 5 * y + j ^ 2 * x ^ 6, 346, 25126], [(-x * y ^ 5 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3) - x ^ 5 * y, 15114], [(-(x ^ 2) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y) - j * y ^ 5, 5731], [-(x ^ 3) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2 + 2 * j ^ 2 * x ^ 5 * y + j ^ 2 * x ^ 6, 903], [-(x ^ 2) * y ^ 5 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 4 + (3 * j ^ 2 + j) * x ^ 4 * y ^ 3 + 2 * j ^ 2 * x ^ 5 * y ^ 2, 15744], [(-x * y ^ 4 + (3 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y, 20153], [-x * y ^ 3 + (4 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (4 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4 + j ^ 2 * y ^ 4, 17771], [-(x ^ 2) * y ^ 3 + 2 * j * x ^ 3 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 4 * y + j * x ^ 5, 8253], [-x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y + j ^ 2 * x ^ 3, 15136], [-(x ^ 3) * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 20503], [-x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y + j * x ^ 4, 12943], [-(x ^ 2) * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 13145], [(-(x ^ 2) * y ^ 5 + (j ^ 2 + 2j) * x ^ 3 * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 4 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 5 * y ^ 2) - j * x ^ 6 * y, 15467], [-(x ^ 3) * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 4 * y ^ 3 + 3 * j ^ 2 * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y, 835, 25545], [-x * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4, 15135], [-x * y ^ 4 + (5 * j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (7 * j ^ 2 + j) * x ^ 3 * y ^ 2 + (5 * j ^ 2 - 2j) * x ^ 4 * y + (j ^ 2 - j) * x ^ 5, 5235], [-x * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 2 * y ^ 3 + (j ^ 2 + 4j) * x ^ 3 * y ^ 2 + 3 * j * x ^ 4 * y + j * x ^ 5, 13153], [-x * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 + 4j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 20075], [((-x * y ^ 4 + (3 * j ^ 2 + 4j) * x ^ 2 * y ^ 3) - 3 * x ^ 3 * y ^ 2) - x ^ 4 * y, 22465], [1, 6192, 6998, 7662, 7666, 9371, 9882, 14163, 14166, 15979, 17269, 17786, 17825, 17829, 20667, 20720, 20749, 22983, 22986, 24441, 25718, 26575], [x, 635, 1770, 1843, 1988, 2124, 2337, 2412, 2698, 2769, 2946, 2985, 2989, 3408, 3695, 3905, 4047, 4402, 4473, 4544, 4615, 4686, 4757, 5153, 5965, 6319, 6456, 6604, 6813, 6916, 6919, 7375, 8521, 8592, 8805, 9086, 9160, 9515, 9964, 10055, 11149, 11398, 11433, 11646, 12001, 12072, 12214, 12488, 12787, 14060, 14131, 14485, 15552, 15765, 15944, 16613, 16684, 16690, 16824, 17779, 18099, 18392, 18534, 18676, 19454, 19600, 19761, 19881, 20523, 20707, 21158, 21229, 21510, 21659, 21756, 21759, 21840, 21869, 21935, 22400, 22429, 23031, 23037, 23367, 23434, 23718, 23861, 23931, 24215, 24286, 24428, 24711, 24921, 24923, 24966, 25776, 26693, 29184, 29337], [y, 0, 71, 142, 164, 170, 213, 284, 423, 467, 497, 568, 781, 852, 994, 1065, 1136, 1159, 1207, 1278, 1349, 1491, 1508, 1562, 1579, 1598, 2059, 2201, 2560, 2627, 3053, 3105, 3115, 3195, 3337, 3479, 3550, 3611, 3692, 3834, 3976, 4154, 4160, 4189, 4260, 4331, 4899, 4971, 4973, 5016, 5042, 5064, 5072, 5116, 5184, 5186, 5225, 5397, 5441, 5466, 5468, 5503, 5505, 5539, 5610, 5681, 5752, 5823, 5894, 6391, 6462, 6498, 6747, 6888, 6930, 6959, 7024, 7030, 7233, 7235, 7236, 7243, 7245, 7320, 7811, 7882, 8096, 8237, 8336, 8375, 8379, 8734, 8947, 9373, 9444, 9799, 9871, 9874, 10013, 10155, 10226, 10297, 10368, 10439, 10510, 10581, 10582, 10723, 10792, 10794, 11219, 11220, 11575, 11713, 11717, 11902, 11924, 11930, 12136, 12143, 12352, 12356, 12640, 12782, 12853, 13066, 13279, 13350, 13741, 14202, 14628, 14699, 14719, 14868, 14878, 15055, 15339, 15410, 15481, 15623, 15694, 15907, 16333, 16336, 16617, 16688, 16756, 16759, 17043, 17398, 17540, 17611, 17617, 17753, 17761, 17895, 17926, 17965, 18201, 18250, 18251, 18317, 18321, 18886, 18889, 19102, 19466, 19505, 19528, 19955, 20026, 20070, 20094, 20239, 20310, 20452, 20736, 21584, 21590, 21801, 21872, 22014, 22073, 22075, 22076, 22083, 22085, 22227, 22288, 22298, 22369, 22440, 22511, 22582, 22653, 22724, 22795, 22866, 22937, 23221, 23505, 23548, 23754, 23760, 23789, 23860, 24144, 24433, 24499, 24788, 24926, 25284, 25352, 25420, 25849, 25920, 26275, 26351, 26772, 26914, 26985, 27056, 27127, 27269, 27340, 27411, 27482, 27624, 27837, 27908, 27979, 28043, 28121, 28547, 28761, 29306], [x * y, 58, 445, 3174, 3180, 4113, 4117, 4991, 5008, 5281, 5948, 6386, 6455, 7538, 7948, 8071, 9660, 9817, 9889, 10036, 10241, 10386, 10644, 10935, 12408, 12705, 12831, 13041, 13390, 13407, 13414, 13714, 14649, 14754, 15157, 15442, 15652, 15681, 15687, 16046, 17675, 17736, 17869, 17906, 18027, 18745, 18813, 20048, 20373, 20588, 21717, 21857, 22774, 22780, 22822, 22841, 22850, 23136, 24074, 24077, 24432, 24451, 24454, 24460, 24662, 24877, 25163, 25602, 26238, 27542, 28021, 28415, 28474, 28575, 28647], [x * y ^ 2, 53, 57, 1695, 1737, 3026, 3028, 3516, 3518, 3835, 3935, 5219, 5740, 5769, 5880, 5901, 6385, 6987, 8068, 8439, 10556, 10559, 10811, 13038, 15435, 15472, 15491, 15494, 15500, 15645, 15942, 17889, 17898, 21995, 22275, 22317, 22808, 22838, 22842, 23573, 23577, 25371, 25466, 25469, 25742, 27640, 28615], [x * y ^ 3, 2082, 3277, 5898, 10487, 10539, 13315, 14617, 22803, 22877, 25449, 27153, 27735], [x * y ^ 4, 27985], [x ^ 2, 303, 306, 746, 978, 1105, 4858, 4868, 4999, 7436, 8141, 8945, 9854, 10066, 14658, 14668, 14931, 14948, 15176, 17026, 17028, 17712, 17766, 19532, 19554, 19560, 20044, 20847, 23049, 23515, 24941, 24958, 25083, 25086, 26756, 26758, 27510, 27539, 28545, 29349], [y ^ 2, 1378, 1593, 1597, 2218, 2638, 3042, 3044, 3046, 3048, 3241, 3248, 3258, 3536, 3762, 5492, 5496, 5673, 5883, 5926, 6947, 8695, 10181, 10574, 10784, 11939, 13738, 14560, 14589, 15473, 15539, 17607, 17876, 18290, 18307, 20056, 22489, 22640, 23189, 23190, 23197, 23574, 23747, 23788, 25344, 26368, 28032, 29316, 29319], [x ^ 2 * y, 756, 759, 798, 808, 910, 939, 4264, 6212, 8138, 8735, 9857, 9924, 10049, 10236, 10598, 10608, 10629, 12826, 15208, 15212, 15248, 15699, 17025, 20300, 20329, 20469, 23078, 24938, 25508, 25518, 26517, 26755, 28687, 28834, 29378], [x ^ 2 * y ^ 2, 927, 3347, 3487, 10490, 11322, 12652, 12825, 13360, 15243, 15247, 15702, 15728, 18190, 18882, 19104, 19107, 21332, 26652], [x ^ 2 * y ^ 3, 10725, 18185, 25215, 27646, 27647], [x ^ 3, 1245, 5656, 5659, 5810, 5839, 10780, 15610, 15639, 20715, 25745], [y ^ 3, 3238, 3832, 14577, 23218, 23783, 23787], [x ^ 3 * y, 4125, 7694, 7752, 10796, 10797, 12797, 13227, 22315, 23575, 25356, 25358, 26655, 26932], [x ^ 3 * y ^ 2, 785, 967, 3275, 8047, 11617, 12384, 25495, 26315, 27775], [x ^ 3 * y ^ 3, 10497, 27855], [x ^ 4, 27927], [y ^ 4, 4775], [x ^ 4 * y, 204, 4195, 7484, 9865, 10412, 11964, 12865, 15245, 21487, 28695, 29393], [x ^ 4 * y ^ 2, 10077, 28064], [x ^ 5 * y ^ 2, 10564, 25474], [x ^ 6, 19594], [x * y ^ 2 - y ^ 3, 5918], [x * y ^ 3 - x ^ 2 * y ^ 2, 22807], [x * y ^ 4 - x ^ 3 * y ^ 2, 3485], [x ^ 2 - y ^ 2, 4970, 15403, 18955], [x ^ 2 * y ^ 2 - x ^ 3 * y, 4185], [x ^ 2 * y ^ 2 - x ^ 4, 21755], [x ^ 2 * y ^ 2 - y ^ 4, 5758], [x ^ 2 * y ^ 3 - x ^ 4 * y, 22747], [x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2, 626, 24846], [((x * y ^ 4 - x ^ 3 * y ^ 2) - x ^ 4 * y) - x ^ 5, 13285], [(x * y ^ 2 - x ^ 2 * y) + y ^ 3, 18222], [(x * y - x ^ 2) - j ^ 2 * y ^ 2, 15140], [(x * y ^ 3 - x ^ 3 * y) + j ^ 2 * x ^ 4, 24935], [x + y, 639, 710, 923, 1775, 1846, 2130, 2343, 2414, 2485, 2840, 2911, 2982, 4118, 5255, 5326, 5440, 6036, 6038, 6320, 6458, 6817, 7172, 7385, 7456, 7527, 7740, 7953, 8024, 8166, 8450, 9089, 9231, 9302, 9728, 9800, 9942, 10652, 10936, 11078, 11291, 11362, 11859, 12498, 12569, 12711, 12781, 12995, 13421, 14344, 14486, 14771, 14913, 14984, 15197, 15268, 15412, 15622, 16049, 16120, 16475, 16830, 17682, 18037, 18108, 18179, 18818, 19173, 19457, 19599, 19742, 19884, 20381, 20594, 20807, 21162, 21233, 21304, 21446, 21517, 21730, 21943, 22388, 23150, 23363, 24002, 24521, 24642, 24713, 24855, 25068, 25139, 25210, 25494, 25778, 25991, 26204, 26488, 26630, 26701, 27198, 27553, 27695, 27766, 28192, 28476, 28689, 28831, 28973, 29115, 29186, 29399], [x * y + x ^ 2, 3765, 7438, 7691, 8942, 9786, 9789, 11393, 11397, 12777, 17976, 22417], [x * y + y ^ 2, 441, 448, 458, 5738, 5743, 5786, 6035, 6388, 6493, 6497, 8665, 12775, 15404, 15614, 17946, 21998, 22002, 22038, 22383, 22387, 22634, 24518, 28002, 28030, 28262], [x * y ^ 2 + x ^ 2 * y, 5761, 5778, 6145, 8422, 8458, 12381, 12828, 13915, 26233, 26237], [x * y ^ 2 + y ^ 3, 3558, 13318, 13322, 13358, 20038, 20042, 23535, 28903], [x * y ^ 3 + x ^ 2 * y ^ 2, 192, 1393, 2233, 2653, 3025, 3515, 4182, 5092, 5639, 5757, 7052, 8453, 8457, 11952, 21612, 26383], [x * y ^ 3 + y ^ 4, 3553, 3557, 22835], [x ^ 2 * y + x ^ 3, 10809, 18254, 23375], [x ^ 2 * y ^ 2 + x ^ 3 * y, 2152, 2572, 7332, 7553, 8326, 8327, 9304, 9306, 15664, 16712, 20317, 22743, 27352], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 2165, 3147, 3202, 13142, 17913], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 27857], [x ^ 3 * y + x ^ 4, 2852, 5827, 20855, 27072], [x ^ 3 * y ^ 2 + x ^ 4 * y, 7486, 19582, 21625], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 3495, 20355], [x ^ 4 * y + x ^ 5, 16514, 21765], [x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 1046, 25336], [(x * y ^ 3 + x ^ 2 * y ^ 2) - y ^ 4, 23782], [x * y + x ^ 2 + y ^ 2, 23305], [x * y ^ 2 + x ^ 2 * y + x ^ 3, 16717, 20356, 20359, 24448], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 55, 5897, 15488, 21752], [x * y ^ 5 + x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 20352], [x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 11405, 13287], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 26245], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 5935], [x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 6925], [x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 13297], [((x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - j * x ^ 5 * y) - j * x ^ 6, 18334, 18337], [x * y ^ 3 + x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 435], [x ^ 2 * y ^ 2 + x ^ 3 * y + j ^ 2 * x ^ 4, 16304], [x ^ 4 * y ^ 2 + x ^ 5 * y + j ^ 2 * x ^ 6, 554, 10354], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 14693], [x * y ^ 2 + 2 * x ^ 2 * y, 5726, 5729], [x * y ^ 2 + 2 * y ^ 3, 22518], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 21895], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3, 22662], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3, 27856], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 22455], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 3357], [x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 5865], [x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 5666], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 22815], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 23795], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 16725], [(x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (-3 * j ^ 2 - 2j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 15172], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y, 6505], [((x * y ^ 5 + 2 * x ^ 2 * y ^ 4) - 2 * j ^ 2 * x ^ 3 * y ^ 3) + (-3 * j ^ 2 + 3j) * x ^ 4 * y ^ 2 + (-2 * j ^ 2 + 3j) * x ^ 5 * y + j * x ^ 6, 5795], [x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 6, 5655], [x * y ^ 5 + 3 * x ^ 2 * y ^ 4 + (-4 * j ^ 2 - 3j) * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 15396], [x * y ^ 5 + 3 * x ^ 2 * y ^ 4 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 3, 13365], [(x * y ^ 4 + (-4 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + (-6 * j ^ 2 - 2j) * x ^ 3 * y ^ 2) - 3 * j ^ 2 * x ^ 4 * y, 16656], [(x * y ^ 4 + (-4 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + (-5 * j ^ 2 - 2j) * x ^ 3 * y ^ 2) - 3 * j ^ 2 * x ^ 4 * y, 16654], [(x * y ^ 4 + (-4 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 22045], [x ^ 2 * y ^ 4 + (-4 * j ^ 2 - 3j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2, 5932], [x * y ^ 2 + (-2 * j ^ 2 - 3j) * x ^ 2 * y + x ^ 3, 10599], [x * y ^ 5 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 3565], [(x ^ 2 * y ^ 5 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 4 + (-5 * j ^ 2 - 2j) * x ^ 4 * y ^ 3) - j ^ 2 * x ^ 5 * y ^ 2, 5736], [x ^ 2 * y ^ 4 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 4 * y ^ 2 + (j ^ 2 + 2j) * x ^ 5 * y, 20156], [((x * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 5195], [x ^ 2 * y ^ 4 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2 + (j ^ 2 + 2j) * x ^ 5 * y, 20154], [((x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y) - j * x ^ 4, 12453, 13147], [((x ^ 3 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2) - 2 * j * x ^ 5 * y) - j * x ^ 6, 13154, 13157], [(x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 9933], [x ^ 2 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 15662], [x * y ^ 5 + (-4 * j ^ 2 - j) * x ^ 2 * y ^ 4 + (-6 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (-4 * j ^ 2 + 4j) * x ^ 4 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 5 * y, 5725], [x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y, 27571], [x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y + x ^ 3, 22952], [x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y + y ^ 3, 17841], [x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + y ^ 4, 8391], [x * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + x ^ 5 * y, 15394], [((x * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 4) - 2 * j ^ 2 * x ^ 3 * y ^ 3) + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2, 15743], [(((x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3) - 2 * j ^ 2 * x ^ 4 * y ^ 2) - 2 * j ^ 2 * x ^ 5 * y) + j * x ^ 6, 24495], [(((x ^ 2 * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 4) - 2 * j ^ 2 * x ^ 4 * y ^ 3) - 2 * j ^ 2 * x ^ 5 * y ^ 2) + j * x ^ 6 * y, 15535], [((x ^ 4 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 2) - 2 * j ^ 2 * x ^ 6 * y) - j ^ 2 * x ^ 7, 906], [(x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 16233, 16373, 22395], [(x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y) - j ^ 2 * x ^ 4, 2575, 7335, 27355], [(x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 5523], [(x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2, 8465], [(x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 273, 343, 5383, 25123], [x * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 17005, 17006], [x * y - j * x ^ 2, 8226], [x * y ^ 2 - j * x ^ 2 * y, 436, 9918], [x * y ^ 2 - j * x ^ 3, 5936, 5939], [x * y ^ 2 - j * y ^ 3, 5228], [x ^ 2 * y - j * x ^ 3, 20466], [x ^ 5 * y ^ 2 - j * x ^ 6 * y, 20507], [(x * y ^ 3 - j * x ^ 2 * y ^ 2) + 2 * x ^ 3 * y + x ^ 4, 3001], [(x * y ^ 2 - j * x ^ 2 * y) - j * x ^ 3, 12937], [(x ^ 2 * y ^ 2 - j * x ^ 3 * y) - j * x ^ 4, 12445, 18327], [(x ^ 3 * y ^ 2 - j * x ^ 4 * y) - j * x ^ 5, 12944, 12947], [(x ^ 4 * y ^ 2 - j * x ^ 5 * y) - j * x ^ 6, 17637], [(x * y - j * x ^ 2) - j ^ 2 * y ^ 2, 19486], [(x * y ^ 2 - j * x ^ 2 * y) + j ^ 2 * y ^ 3, 12940], [(x * y ^ 3 - j * x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y + y ^ 4, 17981], [(x * y - j * x ^ 2) + j * y ^ 2, 18226], [(x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y, 15448], [x - j ^ 2 * y, 17252], [x * y - j ^ 2 * x ^ 2, 5007, 5142, 5146, 24449], [x * y - j ^ 2 * y ^ 2, 15164], [x * y ^ 2 - j ^ 2 * x ^ 2 * y, 608, 5508, 5707, 14897, 15419, 15489, 21901, 24452, 24478, 24488, 24828], [x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 15492, 15518, 15528, 24483, 27635, 27990], [x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3, 15523], [x ^ 2 * y - j ^ 2 * x ^ 3, 249, 258, 5359, 5368], [x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 12655, 24491, 27005], [x ^ 2 * y ^ 2 - j ^ 2 * y ^ 4, 10211], [x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2, 15531], [x ^ 3 * y - j ^ 2 * x ^ 4, 4887, 7755, 14687, 26935], [x ^ 3 * y ^ 2 - j ^ 2 * x ^ 4 * y, 27842], [x ^ 4 * y - j ^ 2 * x ^ 5, 24972], [x ^ 4 * y ^ 2 - j ^ 2 * x ^ 5 * y, 10835], [(x * y ^ 2 - j ^ 2 * x ^ 2 * y) - y ^ 3, 5499], [(x ^ 3 * y ^ 3 - j ^ 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 15255], [(x * y ^ 2 - j ^ 2 * x ^ 2 * y) + y ^ 3, 17561], [(x * y - j ^ 2 * x ^ 2) - j * y ^ 2, 6080], [((x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) - 2 * j ^ 2 * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 1032, 25322], [(x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 15415], [(x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y, 1605, 15439], [(x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) + j * x ^ 4 * y ^ 2, 822, 25532], [x + j ^ 2 * y, 20139], [x * y + j ^ 2 * y ^ 2, 16021, 16300], [x * y ^ 2 + j ^ 2 * x ^ 3, 14678], [x * y ^ 2 + j ^ 2 * y ^ 3, 25891], [x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 2225, 26375], [x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 615, 24835], [(x * y + j ^ 2 * x ^ 2) - j ^ 2 * y ^ 2, 15139], [((x * y ^ 4 + (-(j ^ 2) + j) * x ^ 2 * y ^ 3) - 3 * j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 15175], [x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y + j * x ^ 4, 24487], [x * y ^ 4 + (-(j ^ 2) + j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 15527], [x * y ^ 3 + j * x ^ 2 * y ^ 2, 13290], [x ^ 2 * y ^ 2 + j * x ^ 3 * y, 5475], [(x * y ^ 2 + j * x ^ 2 * y) - x ^ 3, 5699], [(x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - x ^ 4 * y, 17567], [x * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 17633], [2 * x * y + x ^ 2, 6782, 22844], [2 * x * y ^ 2 + x ^ 2 * y, 17959, 17968, 22532, 22878], [2 * x * y ^ 2 + y ^ 3, 22037], [2 * x * y ^ 3 + y ^ 4, 13357], [2 * x ^ 2 * y + x ^ 3, 15424, 15430, 27527], [(2 * x ^ 2 * y + x ^ 3) - y ^ 3, 4987], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 5412, 22033, 23655], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 13353, 21892], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4 + y ^ 4, 9025], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 22873], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 22452], [2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 23093], [2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 7276, 22116], [2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 22254], [2 * x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 5862], [2 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 27562], [2 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 22257], [(2 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + 4 * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 5022], [2 * x * y ^ 4 + 5 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 28052], [2 * x * y ^ 4 + 5 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2, 7277, 22117], [((2 * x * y ^ 5 + (-8 * j ^ 2 - 4j) * x ^ 2 * y ^ 4 + (-13 * j ^ 2 - 5j) * x ^ 3 * y ^ 3) - 11 * j ^ 2 * x ^ 4 * y ^ 2) + (-5 * j ^ 2 + 2j) * x ^ 5 * y + (-(j ^ 2) + j) * x ^ 6, 5245], [2 * x * y ^ 4 + (-4 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2, 7274, 22114], [2 * x * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 22256], [2 * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y, 23232], [2 * x ^ 3 * y ^ 3 - j ^ 2 * x ^ 4 * y ^ 2, 3074], [((2 * x * y ^ 2 + j * x ^ 2 * y) - x ^ 3) + y ^ 3, 5670], [3 * x * y + x ^ 2 + 2 * y ^ 2, 28024], [3 * x * y ^ 2 + x ^ 2 * y + 2 * y ^ 3, 18258], [3 * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * y ^ 4, 6783, 18253], [3 * x * y ^ 2 + 2 * x ^ 2 * y + 2 * y ^ 3, 20078], [((3 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) + 2 * y ^ 4, 20077], [((3 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) + y ^ 4, 20035], [3 * x * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y + j * x ^ 4 + y ^ 4, 5687], [3 * x * y ^ 3 + j * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4 + 2 * y ^ 4, 18257], [4 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * y ^ 5, 23233], [4 * x * y ^ 2 + 4 * x ^ 2 * y + x ^ 3 + 2 * y ^ 3, 5448], [((4 * x * y ^ 3 + 5 * x ^ 2 * y ^ 2 + (-4 * j ^ 2 - 3j) * x ^ 3 * y) - j ^ 2 * x ^ 4) + 2 * y ^ 4, 20073], [(((4 * x * y ^ 5 + (-4 * j ^ 2 - 3j) * x ^ 2 * y ^ 4 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 3 + (-4 * j ^ 2 - j) * x ^ 4 * y ^ 2) - 3 * j ^ 2 * x ^ 5 * y) - j ^ 2 * x ^ 6) + 2 * y ^ 6, 5792], [5 * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + 2 * y ^ 5, 22533], [5 * x * y ^ 3 + 5 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + 2 * y ^ 4, 5447], [5 * x * y ^ 3 + 6 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + x ^ 4 + 2 * y ^ 4, 5443], [5 * x * y ^ 4 + (-4 * j ^ 2 - 5j) * x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2 + 2 * y ^ 5, 22953], [((-2 * j ^ 2 - 6j) * x * y ^ 4 + (-5 * j ^ 2 - 7j) * x ^ 2 * y ^ 3 + 4 * x ^ 3 * y ^ 2 + x ^ 4 * y) - 2 * j * y ^ 5, 5243], [(((-5 * j * x * y ^ 4 - 7 * j * x ^ 2 * y ^ 3) - 5 * j * x ^ 3 * y ^ 2) - j * x ^ 4 * y) - 2 * j * y ^ 5, 5453], [(((-6 * j ^ 2 - 4j) * x * y ^ 3 + (-8 * j ^ 2 - 3j) * x ^ 2 * y ^ 2 + (-6 * j ^ 2 - j) * x ^ 3 * y) - 2 * j ^ 2 * x ^ 4) + 2 * y ^ 4, 5233], [((((-6 * j ^ 2 - 4j) * x * y ^ 3 + (-7 * j ^ 2 - 2j) * x ^ 2 * y ^ 2) - 4 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4) + 2 * y ^ 4, 5237], [((((-5 * j ^ 2 - 4j) * x * y ^ 4 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) + 2 * y ^ 5, 22603], [(-2 * j ^ 2 - 4j) * x * y ^ 3 + (-4 * j ^ 2 - 3j) * x ^ 2 * y ^ 2 + x ^ 3 * y, 5521], [(-4 * j * x * y ^ 2 - 3 * j * x ^ 2 * y) - j * y ^ 3, 20082], [(((-5 * j ^ 2 - 3j) * x * y ^ 2 + (-5 * j ^ 2 - j) * x ^ 2 * y) - 2 * j ^ 2 * x ^ 3) + 2 * y ^ 3, 5238], [((-5 * j ^ 2 - 3j) * x * y ^ 5 - 5 * j ^ 2 * x ^ 2 * y ^ 4) + (-2 * j ^ 2 + 4j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + 3j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y + 2 * y ^ 6, 5722], [(((-4 * j ^ 2 - 3j) * x * y ^ 5 + (-8 * j ^ 2 - 6j) * x ^ 2 * y ^ 4 + (-2 * j ^ 2 + 2j) * x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2) + (3 * j ^ 2 + j) * x ^ 5 * y + j ^ 2 * x ^ 6, 18265], [(-4 * j ^ 2 - 3j) * x * y ^ 3 + (-5 * j ^ 2 - 3j) * x ^ 2 * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 3 * y + y ^ 4, 17073], [((-2 * j ^ 2 - 3j) * x * y ^ 5 + (-6 * j ^ 2 - 5j) * x ^ 2 * y ^ 4 + (-6 * j ^ 2 - 5j) * x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 20085], [(((-2 * j ^ 2 - 3j) * x * y ^ 3 + (-4 * j ^ 2 - 2j) * x ^ 2 * y ^ 2 + (-4 * j ^ 2 - j) * x ^ 3 * y) - j ^ 2 * x ^ 4) - j ^ 2 * y ^ 4, 17770], [(-3 * j * x * y - x ^ 2) + (-(j ^ 2) - 2j) * y ^ 2, 18219], [(-3 * j * x ^ 2 * y ^ 4 - 5 * j * x ^ 3 * y ^ 3) - 2 * j * x ^ 4 * y ^ 2, 5037], [-3 * j * x * y ^ 2 + (-(j ^ 2) - 2j) * y ^ 3, 18248], [(-3 * j * x * y ^ 2 - j * x ^ 2 * y) - j * y ^ 3, 5438, 9748], [((-3 * j * x * y ^ 4 + (2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2) - x ^ 4 * y) - 2 * j * y ^ 5, 18263], [(((-3 * j ^ 2 - 2j) * x * y ^ 5 + (-9 * j ^ 2 - 6j) * x ^ 2 * y ^ 4 + (-9 * j ^ 2 - 5j) * x ^ 3 * y ^ 3 + (-7 * j ^ 2 - 3j) * x ^ 4 * y ^ 2) - 3 * j ^ 2 * x ^ 5 * y) + j * x ^ 6, 5455], [((-3 * j ^ 2 - 2j) * x * y ^ 2 - j * x ^ 2 * y) + (-2 * j ^ 2 - j) * y ^ 3, 438], [((-3 * j ^ 2 - 2j) * x * y ^ 2 - 4 * j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3, 22602], [(((-3 * j ^ 2 - 2j) * x * y ^ 2 - 3 * j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3) + (-2 * j ^ 2 - j) * y ^ 3, 17281], [(-3 * j ^ 2 - 2j) * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y + (-2 * j ^ 2 - j) * y ^ 4, 18260], [(-(j ^ 2) - 2j) * y, 15126], [(-(j ^ 2) - 2j) * x * y ^ 2, 19499], [(-(j ^ 2) - 2j) * x ^ 3 * y ^ 3, 10832], [(-(j ^ 2) - 2j) * x * y + y ^ 2, 5409, 5410], [(-(j ^ 2) - 2j) * x * y ^ 2 + x ^ 2 * y, 15159, 15168], [(-(j ^ 2) - 2j) * x ^ 2 * y + x ^ 3, 10570], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + x ^ 3 * y, 10587], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 10622], [(-(j ^ 2) - 2j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 11614], [(((-(j ^ 2) - 2j) * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y) - j ^ 2 * x ^ 7, 904, 907], [((-(j ^ 2) - 2j) * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 2 + x ^ 4 * y) - x ^ 5, 17765], [((-(j ^ 2) - 2j) * x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2, 3076], [((-(j ^ 2) - 2j) * x * y ^ 4 + (-4 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 2) - 2 * j ^ 2 * x ^ 4 * y, 24493], [((-(j ^ 2) - 2j) * x * y ^ 5 + (-4 * j ^ 2 - 3j) * x ^ 2 * y ^ 4 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 3) - 2 * j ^ 2 * x ^ 4 * y ^ 2, 15533], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2, 3075], [((-(j ^ 2) - 2j) * x ^ 2 * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 27565], [(((-(j ^ 2) - 2j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 3) - 2 * j ^ 2 * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 484], [((-(j ^ 2) - 2j) * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y) - j * y ^ 3, 13574], [(-(j ^ 2) - 2j) * x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + x ^ 3 * y, 28061], [(-(j ^ 2) - 2j) * x * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (j ^ 2 + 3j) * x ^ 4 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 5 * y, 19527], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 1326], [(-(j ^ 2) - 2j) * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2, 10494], [(-(j ^ 2) - 2j) * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 12661], [((-(j ^ 2) - 2j) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j ^ 2 * y ^ 3, 19508], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 3 + j * x ^ 4 * y + j * x ^ 5, 17625], [-2 * j * x * y ^ 5, 22886], [-2 * j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 7825], [-2 * j * x * y ^ 3 + x ^ 2 * y ^ 2 + j ^ 2 * y ^ 4, 15390], [((-2 * j * x * y ^ 6 + (-2 * j ^ 2 - 5j) * x ^ 2 * y ^ 5 + (-6 * j ^ 2 - 4j) * x ^ 3 * y ^ 4) - 6 * j ^ 2 * x ^ 4 * y ^ 3) - 2 * j ^ 2 * x ^ 5 * y ^ 2, 5737], [(-2 * j * x * y ^ 6 - 5 * j * x ^ 2 * y ^ 5) + (-(j ^ 2) - 5j) * x ^ 3 * y ^ 4 + (-3 * j ^ 2 - 5j) * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2, 5807], [-2 * j * x * y ^ 6 + (-(j ^ 2) - 4j) * x ^ 2 * y ^ 5 + (-3 * j ^ 2 - 5j) * x ^ 3 * y ^ 4 + (-4 * j ^ 2 - 6j) * x ^ 4 * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y, 5804], [(-2 * j * x ^ 3 * y ^ 4 - 4 * j * x ^ 4 * y ^ 3) - 2 * j * x ^ 5 * y ^ 2, 5877], [(-2 * j * x ^ 2 * y ^ 4 - 4 * j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2, 27577], [(-2 * j * x * y ^ 6 + (j ^ 2 - 4j) * x ^ 2 * y ^ 5 + (-(j ^ 2) - 5j) * x ^ 3 * y ^ 4 + 3 * x ^ 4 * y ^ 3) - x ^ 6 * y, 5806], [-2 * j * x * y ^ 2 + (-2 * j ^ 2 - 3j) * x ^ 2 * y + x ^ 3, 5242], [-2 * j * x ^ 3 * y ^ 4 + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 5874], [(-2 * j * x * y ^ 2 - 3 * j * x ^ 2 * y) - j * x ^ 3, 5452], [(-2 * j * x * y ^ 5 + (j ^ 2 - 3j) * x ^ 2 * y ^ 4 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 5036], [-2 * j * x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2, 15382], [-2 * j * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y + y ^ 3, 17749, 17758], [(-2 * j * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y) - j * y ^ 3, 13576], [(-2 * j * x * y ^ 5 - 2 * j * x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3, 4826], [(-2 * j * x ^ 2 * y ^ 5 - 2 * j * x ^ 3 * y ^ 4) + x ^ 4 * y ^ 3, 20366], [(-2 * j * x ^ 3 * y ^ 4 - 2 * j * x ^ 4 * y ^ 3) + x ^ 5 * y ^ 2, 10776, 25266], [(-2 * j * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 63], [(-2 * j * x ^ 3 * y ^ 4 + (j ^ 2 - 2j) * x ^ 4 * y ^ 3) - j * x ^ 5 * y ^ 2, 5876], [-2 * j * x * y ^ 2 - j * x ^ 2 * y, 5429], [-2 * j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3, 27786], [-2 * j * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2, 3216], [(-2 * j * x * y ^ 2 - j * x ^ 2 * y) - j * y ^ 3, 1603, 22393, 22882], [(-2 * j * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j * y ^ 4, 22043], [(-2 * j * x ^ 2 * y ^ 4 + (j ^ 2 - j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y) - x ^ 6, 24986], [((-2 * j * x ^ 2 * y ^ 5 - 2 * j ^ 2 * x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 5945], [(-2 * j * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j ^ 2 * y ^ 3, 16650], [((j ^ 2 - 2j) * x * y ^ 2 - j * x ^ 2 * y) + y ^ 3, 18239], [(((j ^ 2 - 2j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y) + x ^ 6, 20155], [(((2 * j ^ 2 - 2j) * x ^ 2 * y ^ 3 - 4 * j * x ^ 3 * y ^ 2) + (-(j ^ 2) - 3j) * x ^ 4 * y) - j * x ^ 5, 16655], [(((4 * j ^ 2 - 2j) * x * y ^ 4 + (3 * j ^ 2 - 4j) * x ^ 2 * y ^ 3 + (j ^ 2 - 3j) * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y) + 2 * j ^ 2 * y ^ 5, 22592], [(-3 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (-2 * j ^ 2 + j) * x ^ 4 * y + j * x ^ 5, 5025], [((((-3 * j ^ 2 - j) * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j * x ^ 4) - j ^ 2 * y ^ 4, 5450], [(-2 * j ^ 2 - j) * x * y, 17058], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + y ^ 4, 19521], [(((-2 * j ^ 2 - j) * x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + (-(j ^ 2) - 4j) * x ^ 4 * y ^ 2) - 3 * j * x ^ 5 * y) - j * x ^ 6, 13155, 13156], [((-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 3 * y) - j ^ 2 * x ^ 4, 17843], [((-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 8393], [((-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 3003], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 17777], [((-2 * j ^ 2 - j) * x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2) - x ^ 3 * y, 477], [((-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 5171], [(((-2 * j ^ 2 - j) * x ^ 2 * y ^ 4 - 2 * j ^ 2 * x ^ 3 * y ^ 3) + (j ^ 2 + 2j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 15187], [(-2 * j ^ 2 - j) * x * y - j ^ 2 * x ^ 2, 17819, 17828], [(-2 * j ^ 2 - j) * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 8369, 8378], [(-2 * j ^ 2 - j) * x ^ 2 * y - j ^ 2 * x ^ 3, 2979, 2988], [(-2 * j ^ 2 - j) * x ^ 3 * y - j ^ 2 * x ^ 4, 2855, 27075], [((-2 * j ^ 2 - j) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + y ^ 3, 5202], [((((-2 * j ^ 2 - j) * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2) - j * x ^ 4 * y) + y ^ 5, 15113], [(-2 * j ^ 2 - j) * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + j * x ^ 3 + y ^ 3, 17000, 17141], [(((-2 * j ^ 2 - j) * x * y ^ 3 + j * x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 13925], [-j, 11013, 11016, 16263, 16266, 17549, 19313, 23652], [-j * x, 1252, 2053, 2056, 15976, 15978, 16132, 16484, 20091, 20097, 21772, 21791, 21794, 22392, 27183, 27186], [-j * y, 461, 1588, 5396, 5435, 6152, 8742, 9733, 9776, 11052, 11232, 11584, 14723, 15165, 15169, 17969, 22378], [-j * x * y, 3704, 3706, 3707, 4993, 4996, 7880, 9751, 11566, 11706, 12406, 13256, 15074, 15080, 15683, 15749, 15975, 20232, 20251, 20254, 22042, 23373, 25846, 25848, 26266, 26268, 27222], [-j * x * y ^ 2, 2581, 3562, 4123, 5767, 7271, 7341, 8448, 10446, 11565, 11607, 11705, 12405, 13362, 18262, 19034, 20323, 20326, 22111, 22251, 22461, 22812, 22938, 25845, 27151, 27361, 27782], [-j * x * y ^ 3, 3070, 3560, 3844, 3846, 3847, 10445, 22671, 27500, 29320], [-j * x * y ^ 4, 22466, 22813, 23584, 23586, 23587, 27845], [-j * x * y ^ 5, 22884], [-j * x ^ 2, 513, 516, 7876, 10313, 10316, 14793, 14796, 20109, 20258, 24943, 24946], [-j * y ^ 2, 4783, 4786, 7810, 10182, 10464, 12149, 14762, 18302, 22028], [-j * x ^ 2 * y, 1003, 1006, 1595, 2861, 5833, 5836, 8462, 10733, 10736, 10782, 10801, 10804, 12895, 14832, 15238, 15682, 15701, 15704, 15710, 16292, 20112, 20138, 25223, 25226, 25293, 25296, 27081, 28554, 28556, 28557], [-j * x ^ 2 * y ^ 2, 1327, 3585, 6157, 8747, 10235, 10772, 13291, 15177, 15742, 21822, 25262, 27385], [-j * x ^ 2 * y ^ 3, 971, 4194, 4196, 4197, 7822, 10560, 25470], [-j * x ^ 3, 15736, 20144, 20463, 23046, 23048, 29346, 29348], [-j * y ^ 3, 4822, 5766, 6991, 7809, 15953], [-j * x ^ 3 * y, 1257, 2885, 14895, 20245, 20287, 27297, 28085, 29345], [-j * x ^ 3 * y ^ 2, 760, 2867, 25355, 26314, 26316, 26664, 26666, 26667, 27087], [-j * x ^ 3 * y ^ 3, 3217, 27787], [-j * y ^ 4, 14621], [-j * x ^ 4 * y, 10342], [-j * x ^ 5, 4885, 14685, 20285], [-j * x ^ 5 * y ^ 2, 10636], [-j * x - y, 16616], [-j * x ^ 2 * y - x ^ 3, 17235], [-j * x ^ 2 * y ^ 4 - x ^ 4 * y ^ 2, 27785], [((-j * x * y ^ 3 - x ^ 3 * y) - x ^ 4) - j * y ^ 4, 15181], [((-j * x * y ^ 3 - x ^ 2 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 3 * y) - x ^ 4, 12871], [-j * x + y, 17256], [-j * x * y + y ^ 2, 17754, 18244], [-j * x * y ^ 2 + x ^ 2 * y, 12171, 24492], [-j * x * y ^ 3 + x ^ 2 * y ^ 2, 15065, 15111, 15532, 27850], [-j * x ^ 2 * y + x ^ 3, 24446], [-j * x ^ 2 * y ^ 2 + x ^ 3 * y, 10586, 15486, 17552], [-j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 11755, 11756, 15695], [-j * x ^ 3 * y ^ 2 + x ^ 4 * y, 10062], [-j * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 22675], [(-j * x * y + x ^ 2) - y ^ 2, 5720], [-j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 205, 206, 2094, 11965, 11966], [-j * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 1047, 25337], [-j * x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 19595, 19596], [(-j * x * y ^ 3 + x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 6085, 6086], [(-j * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2, 27505], [-j * x * y ^ 2 + x ^ 2 * y + j ^ 2 * y ^ 3, 11261, 11610, 11750], [-j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + j * x ^ 4 * y, 17424, 17427], [-j * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 15416], [-j * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 1044, 25334], [-j * x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 22885], [(-j * x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3) - j * x ^ 5 * y, 15397], [-j * x * y ^ 2 + 2 * x ^ 2 * y + j ^ 2 * y ^ 3, 10238], [-j * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 4 * y, 16657], [(-j * x ^ 3 * y ^ 4 + (-(j ^ 2) - 4j) * x ^ 4 * y ^ 3 + (-3 * j ^ 2 - 4j) * x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y, 834, 25544], [((-j * x ^ 2 * y ^ 4 + (-5 * j ^ 2 - 3j) * x ^ 3 * y ^ 3) - 2 * j ^ 2 * x ^ 4 * y ^ 2) + 2 * j * x ^ 5 * y, 20157], [-j * x ^ 2 * y ^ 2 + (-(j ^ 2) - 3j) * x ^ 3 * y, 8205], [-j * x ^ 3 * y ^ 4 + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 5 * y ^ 2 + x ^ 6 * y, 837, 25547], [-j * x ^ 2 * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 3 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 4 * y, 27224], [((-j * x * y ^ 5 - 3 * j * x ^ 2 * y ^ 4) - 4 * j * x ^ 3 * y ^ 3) + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 5034], [(-j * x * y ^ 4 - 3 * j * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2, 22467], [-j * x * y ^ 4 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 5940], [((-j * x * y ^ 6 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 5 + (-4 * j ^ 2 - j) * x ^ 3 * y ^ 4) - j ^ 2 * x ^ 4 * y ^ 3) + j ^ 2 * x ^ 5 * y ^ 2, 5734], [-j * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2, 9745], [-j * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y, 15698], [-j * x * y ^ 5 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 4824], [-j * x ^ 2 * y ^ 5 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3, 20364], [-j * x ^ 3 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 10774, 25264], [(-j * x ^ 3 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y, 836, 25546], [(-j * x ^ 3 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 3) - j ^ 2 * x ^ 5 * y ^ 2, 5947], [-j * x * y ^ 3 - 2 * j * y ^ 4, 23793], [-j * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3, 21907], [(-j * x ^ 2 * y ^ 5 - 2 * j * x ^ 3 * y ^ 4) + x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 10565, 10566, 25475, 25476], [((-j * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3) + 3 * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 17762], [(-j * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) + (-(j ^ 2) - 2j) * x ^ 3 * y, 11054, 11056], [(-j * x ^ 3 * y ^ 3 - 2 * j * x ^ 4 * y ^ 2) + (-(j ^ 2) - 2j) * x ^ 5 * y, 14834, 14836], [(-j * x ^ 2 * y ^ 5 - 2 * j * x ^ 3 * y ^ 4) - 2 * j * x ^ 4 * y ^ 3, 20367], [(-j * x * y ^ 2 - 2 * j * x ^ 2 * y) - j * x ^ 3, 16955], [(-j * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2, 8463], [(-j * x ^ 2 * y ^ 2 - 2 * j * x ^ 3 * y) - j * x ^ 4, 17132], [(-j * x ^ 2 * y ^ 3 - 2 * j * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 27226], [-j * x ^ 2 * y ^ 5 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 3 + j * x ^ 5 * y ^ 2, 5946], [-j * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2, 15741], [-j * x - j * y, 16959, 17759, 18613], [-j * x * y - j * x ^ 2, 8320, 16466, 16468, 20006, 20009], [-j * x * y - j * y ^ 2, 48, 11568, 11708, 20713], [-j * x * y ^ 2 - j * x ^ 2 * y, 1114, 1116, 1117, 3774, 3776, 3777, 8315, 9746, 11403, 16465, 18964, 18966, 20853, 24982, 26265], [-j * x * y ^ 2 - j * y ^ 3, 1183, 5763, 6503, 8674, 8676, 8677, 10448], [-j * x * y ^ 3 - j * x ^ 2 * y ^ 2, 6154, 6156, 8111, 8744, 8746, 9863, 11252, 12162, 13081, 16723, 26243, 26523, 28693], [-j * x * y ^ 3 - j * y ^ 4, 3281, 6993], [-j * x * y ^ 4 - j * x ^ 2 * y ^ 3, 3493, 10202, 21904, 22464], [-j * x * y ^ 4 - j * y ^ 5, 3563, 13363, 14623], [-j * x * y ^ 5 - j * x ^ 2 * y ^ 4, 4825, 29325, 29326], [-j * x ^ 2 * y - j * x ^ 3, 10593, 10596, 14646, 14648], [-j * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 1254, 1256, 1324, 11055, 11057, 14645, 16152, 25952, 27002], [-j * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2, 12792], [-j * x ^ 2 * y ^ 3 - j * x ^ 4 * y, 2097], [-j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3, 973, 4827, 27784], [-j * x ^ 3 * y - j * x ^ 4, 27294, 27296], [-j * x ^ 3 * y ^ 2 - j * x ^ 4 * y, 125, 13422, 25042, 27225, 27227], [-j * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2, 3214, 27504], [-j * x ^ 3 * y ^ 4 - j * x ^ 4 * y ^ 3, 765, 766, 10775, 25265], [-j * x ^ 4 * y ^ 2 - j * x ^ 5 * y, 14835, 14837], [-j * x ^ 4 * y ^ 3 - j * x ^ 5 * y ^ 2, 10777, 25267], [(-j * x * y - j * x ^ 2) + y ^ 2, 12429, 12438], [(-j * x * y ^ 4 - j * x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2, 17622], [(-j * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) + x ^ 4 * y, 2096], [(-j * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2) + x ^ 5 * y, 3215], [(-j * x * y ^ 4 - j * x ^ 2 * y ^ 3) + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2, 18322], [((-j * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 5 * y) - j ^ 2 * x ^ 6, 137], [(-j * x * y ^ 2 - j * x ^ 2 * y) - j * y ^ 3, 13577], [(-j * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 15253], [(-j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2, 27506], [(((-j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) - j * x ^ 5 * y) - x ^ 6, 24984], [(-j * x * y ^ 3 - j * x ^ 2 * y ^ 2) + j ^ 2 * y ^ 4, 17631], [(-j * x ^ 4 * y ^ 2 - j * x ^ 5 * y) + j ^ 2 * x ^ 6, 555, 556], [(-j * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) + j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 14765], [(-j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3) + j ^ 2 * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 10284], [(-j * x * y ^ 3 - j * x ^ 2 * y ^ 2) + j * x ^ 3 * y + j ^ 2 * y ^ 4, 18331], [-j * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 5 * y + x ^ 6, 7904], [-j * x * y ^ 2 + (2 * j ^ 2 - j) * x ^ 2 * y + j ^ 2 * x ^ 3, 8208], [-j * x * y - j ^ 2 * x ^ 2, 6221, 6500], [-j * x * y - j ^ 2 * y ^ 2, 454, 17747, 18237], [-j * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 17071], [-j * x ^ 2 * y - j ^ 2 * x ^ 3, 7761, 26800, 26941], [-j * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 4 * y ^ 2, 27574], [-j * x ^ 3 * y ^ 2 - j ^ 2 * x ^ 4 * y, 26805, 26806], [(-j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 17555], [(-j * x * y ^ 3 - j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 19517], [(((-j * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2) - x ^ 4 * y) + j ^ 2 * y ^ 5, 15385], [((-j * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y) - j * y ^ 5, 20083], [-j * x * y + j ^ 2 * x ^ 2, 5427], [-j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 3135], [-j * x ^ 2 * y + j ^ 2 * x ^ 3, 8206], [-j * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 27570], [-j * x ^ 3 * y + j ^ 2 * x ^ 4, 16307], [-j * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 2864, 27084], [-j * x ^ 4 * y ^ 3 + j ^ 2 * x ^ 6 * y, 10847], [-j * x ^ 5 * y + j ^ 2 * x ^ 6, 557, 10357], [(-j * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 3345], [-j * x * y + j ^ 2 * x ^ 2 + y ^ 2, 5434], [-j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 10277], [-j * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 21906], [-j * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 25403, 27576], [-j * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 10287], [(-j * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 24985], [-j * x * y ^ 5 + j ^ 2 * x ^ 2 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 5943], [-j * x * y ^ 2 + 2 * j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3, 7858], [-j * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y + j * x ^ 4 + j ^ 2 * y ^ 4, 16645], [-j * x ^ 2 + j * y ^ 2, 18223, 19483, 20043], [-j * x ^ 2 * y + j * y ^ 3, 19522], [-j * x ^ 2 * y ^ 3 + j * x ^ 4 * y, 20282], [-j * x * y ^ 3 + j * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j * x ^ 4, 5241], [-j * x * y ^ 4 + j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 67], [(-j * x * y ^ 4 + (j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + 3j) * x ^ 3 * y ^ 2 + (j ^ 2 + 2j) * x ^ 4 * y + j ^ 2 * x ^ 5) - j * y ^ 5, 19515], [(-j * x * y ^ 5 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 4 + (8 * j ^ 2 + 7j) * x ^ 3 * y ^ 3 + (8 * j ^ 2 + 5j) * x ^ 4 * y ^ 2 + 3 * j ^ 2 * x ^ 5 * y) - j * x ^ 6, 5035], [(j ^ 2 - j) * x ^ 2 * y, 20148], [(j ^ 2 - j) * x ^ 2 * y ^ 2, 20143], [(j ^ 2 - j) * x * y + y ^ 2, 17729, 17730], [((j ^ 2 - j) * x * y ^ 2 - 3 * j * x ^ 2 * y) - j * x ^ 3, 22557], [((j ^ 2 - j) * x ^ 2 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 487], [(((j ^ 2 - j) * x ^ 2 * y ^ 4 - 2 * j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) + x ^ 5 * y, 15395], [(j ^ 2 - j) * x * y - j * x ^ 2, 16648], [(j ^ 2 - j) * x * y - j * y ^ 2, 18220], [(j ^ 2 - j) * x * y ^ 2 - j * x ^ 2 * y, 16643], [(j ^ 2 - j) * x ^ 5 * y - j * x ^ 6, 8257], [(((j ^ 2 - j) * x ^ 3 * y ^ 4 - j * x ^ 4 * y ^ 3) - j * x ^ 5 * y ^ 2) - j * x ^ 6 * y, 10637], [(j ^ 2 - j) * x ^ 2 * y ^ 2 + (j ^ 2 - j) * x ^ 3 * y + j ^ 2 * x ^ 4, 5170], [((j ^ 2 - j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 4 * y) - j * x ^ 5, 5165], [((2 * j ^ 2 - j) * x * y ^ 2 - 2 * j * x ^ 2 * y) - j * x ^ 3, 16647], [((2 * j ^ 2 - j) * x ^ 2 * y ^ 2 - j * x ^ 3 * y) + x ^ 4, 20147], [((2 * j ^ 2 - j) * x * y + j ^ 2 * x ^ 2) - j * y ^ 2, 17238], [((-6 * j ^ 2 * x * y ^ 3 + (-6 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (-3 * j ^ 2 + j) * x ^ 3 * y) - j ^ 2 * x ^ 4) - 2 * j ^ 2 * y ^ 4, 22943], [((-6 * j ^ 2 * x * y ^ 3 + (-5 * j ^ 2 + j) * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y) - 2 * j ^ 2 * y ^ 4, 22947], [((-5 * j ^ 2 * x * y ^ 2 + (-3 * j ^ 2 + j) * x ^ 2 * y) - j ^ 2 * x ^ 3) - 2 * j ^ 2 * y ^ 3, 22948], [((-4 * j ^ 2 * x * y ^ 2 - 3 * j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3) - 2 * j ^ 2 * y ^ 3, 6773], [((-4 * j ^ 2 * x * y ^ 3 - 3 * j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) - 2 * j ^ 2 * y ^ 4, 7262, 22102, 22242, 22523], [(-4 * j ^ 2 * x * y ^ 2 - 2 * j ^ 2 * x ^ 2 * y) - 2 * j ^ 2 * y ^ 3, 6777], [(-4 * j ^ 2 * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) - 2 * j ^ 2 * y ^ 4, 22527], [(-4 * j ^ 2 * x * y ^ 3 + (-3 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y) - 2 * j ^ 2 * y ^ 4, 23223], [(-4 * j ^ 2 * x * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 2 * y ^ 2) - 2 * j ^ 2 * y ^ 4, 23227], [(-3 * j ^ 2 * x * y - j ^ 2 * x ^ 2) - 2 * j ^ 2 * y ^ 2, 6778], [(-3 * j ^ 2 * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - 2 * j ^ 2 * y ^ 3, 22528], [-3 * j ^ 2 * x * y ^ 5 + (-5 * j ^ 2 + j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2, 22535], [-3 * j ^ 2 * x * y ^ 5 + (-5 * j ^ 2 + j) * x ^ 2 * y ^ 4 + (-5 * j ^ 2 + 3j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 + 2j) * x ^ 4 * y ^ 2, 23235], [(-3 * j ^ 2 * x * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 5591], [(-3 * j ^ 2 * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y) - 2 * j ^ 2 * y ^ 3, 23228], [(-3 * j ^ 2 * x * y ^ 2 + j * x ^ 3) - j ^ 2 * y ^ 3, 18218], [-2 * j ^ 2 * x ^ 2 * y ^ 2, 15658], [(-2 * j ^ 2 * x * y ^ 5 - 8 * j ^ 2 * x ^ 2 * y ^ 4) + (-11 * j ^ 2 + 4j) * x ^ 3 * y ^ 3 + (-6 * j ^ 2 + 4j) * x ^ 4 * y ^ 2 + (-2 * j ^ 2 + j) * x ^ 5 * y, 22955], [(-2 * j ^ 2 * x * y ^ 4 - 6 * j ^ 2 * x ^ 2 * y ^ 3) + (-6 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + (-2 * j ^ 2 + j) * x ^ 4 * y, 6785], [((-2 * j ^ 2 * x * y ^ 3 - 4 * j ^ 2 * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 22245], [-2 * j ^ 2 * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + j * x ^ 3, 17067], [(-2 * j ^ 2 * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - x ^ 4 * y, 15670], [(-2 * j ^ 2 * x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * y ^ 3, 22908, 22912], [-2 * j ^ 2 * x * y ^ 5 + (-6 * j ^ 2 + 2j) * x ^ 2 * y ^ 4 + (-6 * j ^ 2 + 6j) * x ^ 3 * y ^ 3 + (-3 * j ^ 2 + 4j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y + j ^ 2 * x ^ 6, 22605], [-(j ^ 2), 6770, 17017, 17226, 17265, 17582, 18282, 28868], [-(j ^ 2) * x, 7210, 7239, 7846, 7885, 8196, 8235, 16119, 16279, 17029, 17817, 18985, 22050, 22079, 22190, 22219, 24065], [-(j ^ 2) * y, 5573, 6756, 12416, 15171, 15399, 17574, 17713, 17756, 17757, 17812, 18203, 18246, 18247, 18274, 22520, 23220, 24062], [-(j ^ 2) * x * y, 460, 5199, 5200, 5207, 5479, 5480, 5885, 8367, 9255, 12759, 15078, 15088, 15332, 15659, 16349, 16358, 16368, 17032, 17049, 17731, 18221, 18238, 20039, 20040, 20047, 22207, 28897], [-(j ^ 2) * x * y ^ 2, 1018, 5911, 12451, 12788, 16363, 16367, 19092, 25308, 27010], [-(j ^ 2) * x ^ 2, 2977, 5212, 9375, 22697, 22909], [-(j ^ 2) * y ^ 2, 457, 2209, 5562, 5566, 5568, 8362, 10458, 10468, 17952, 19033, 19492, 22506, 23206, 26359], [-(j ^ 2) * x ^ 2 * y, 1315, 6430, 15629, 19095, 23047, 25364, 25370, 27105], [-(j ^ 2) * x ^ 2 * y ^ 2, 3631, 5545, 13430, 26313, 27431], [-(j ^ 2) * x ^ 2 * y ^ 3, 3633, 27433], [-(j ^ 2) * x ^ 2 * y ^ 4, 27997], [-(j ^ 2) * x ^ 3, 319, 328, 338, 529, 9295, 10329, 16787, 22737, 22944, 23084, 25099, 25108, 25118, 27285, 28895], [-(j ^ 2) * x ^ 3 * y, 333, 337, 575, 2931, 10420, 10819, 10828, 17907, 24795, 25113, 25117, 27632, 28131], [-(j ^ 2) * x ^ 3 * y ^ 2, 13282, 17902, 25401, 27017, 27982], [-(j ^ 2) * x ^ 3 * y ^ 3, 892, 5594, 27995], [-(j ^ 2) * x ^ 4, 10417, 27924, 27925, 27926], [-(j ^ 2) * x ^ 4 * y, 14907, 16517, 29385], [-(j ^ 2) * x ^ 5, 16794, 16797], [-(j ^ 2) * x ^ 5 * y ^ 2, 25404, 25407], [-(j ^ 2) * x ^ 6, 4897, 10424, 10427], [-(j ^ 2) * x - y, 12899], [-(j ^ 2) * x * y - x ^ 2, 17748], [-(j ^ 2) * x * y ^ 3 - x ^ 2 * y ^ 2, 16025, 16026], [-(j ^ 2) * x * y ^ 4 - x ^ 2 * y ^ 3, 10841, 25895, 25896], [-(j ^ 2) * x ^ 2 - y ^ 2, 22563], [-(j ^ 2) * x ^ 2 * y ^ 2 - x ^ 3 * y, 10351, 23090, 29390], [-(j ^ 2) * x ^ 3 * y ^ 2 - x ^ 4 * y, 3205], [(-(j ^ 2) * x * y ^ 2 - x ^ 2 * y) + y ^ 3, 22588], [(-(j ^ 2) * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2) - j * x ^ 5 * y, 5524], [(-(j ^ 2) * x * y ^ 3 - x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y, 10071], [(-(j ^ 2) * x * y ^ 4 - x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2, 10630], [(-(j ^ 2) * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + j ^ 2 * x ^ 4 * y, 27015], [(-(j ^ 2) * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2) + j ^ 2 * x ^ 5 * y, 29395, 29396], [-(j ^ 2) * x + y, 5230, 19031, 23079, 24431, 24437], [-(j ^ 2) * x * y + x ^ 2, 8222], [-(j ^ 2) * x * y + y ^ 2, 15081, 15471, 15477, 16209, 16218], [-(j ^ 2) * x ^ 2 + y ^ 2, 17589, 18289], [-(j ^ 2) * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 27854], [-(j ^ 2) * x ^ 3 * y + x ^ 4, 12870], [-(j ^ 2) * x ^ 4 * y ^ 2 + x ^ 6, 10074], [-(j ^ 2) * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2 + x ^ 6 * y, 20505, 20506], [-(j ^ 2) * x * y ^ 3 + x ^ 3 * y + x ^ 4 + j * y ^ 4, 15180], [-(j ^ 2) * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2, 10634], [(-(j ^ 2) * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 15665], [((-(j ^ 2) * x * y ^ 5 + x ^ 2 * y ^ 4 + (-2 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y) + x ^ 6, 17775], [-(j ^ 2) * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 5660], [-(j ^ 2) * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + x ^ 6, 13295, 13296], [-(j ^ 2) * x * y ^ 5 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 4 + (-5 * j ^ 2 - 2j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 15463], [(-(j ^ 2) * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 3 * y) - j ^ 2 * x ^ 4, 7901], [-(j ^ 2) * x ^ 2 * y ^ 4 + (-4 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 4 * y ^ 2, 15673], [((-(j ^ 2) * x * y ^ 3 + (-3 * j ^ 2 - j) * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 14763], [-(j ^ 2) * x * y ^ 4 + (-3 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 3 * y ^ 2, 19512], [-(j ^ 2) * x * y + (-2 * j ^ 2 - j) * x ^ 2, 2960], [-(j ^ 2) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 9925], [-(j ^ 2) * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 3354, 3355, 3356], [-(j ^ 2) * x ^ 4 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 2 + x ^ 6 * y, 20504], [((-(j ^ 2) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2) - 2 * j * x ^ 5 * y) + x ^ 6, 8254], [(-(j ^ 2) * x ^ 4 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 6 * y) - j ^ 2 * x ^ 7, 5665], [(((-(j ^ 2) * x * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 4) - 4 * j ^ 2 * x ^ 3 * y ^ 3) - 3 * j ^ 2 * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 486], [((-(j ^ 2) * x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2) - 3 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 8251], [(-(j ^ 2) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 623, 24843], [((-(j ^ 2) * x * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 4 + (-5 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (-4 * j ^ 2 + j) * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y) + x ^ 6, 17776], [-(j ^ 2) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y, 2992], [-(j ^ 2) * x * y - j * x ^ 2, 2972], [-(j ^ 2) * x ^ 2 - j * y ^ 2, 5422], [(-(j ^ 2) * x ^ 2 * y ^ 4 - j * x ^ 4 * y ^ 2) + x ^ 5 * y, 20086], [((-(j ^ 2) * x * y ^ 5 - j * x ^ 2 * y ^ 4) + (-(j ^ 2) - 3j) * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2, 10495, 10496], [((-(j ^ 2) * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j * x ^ 4, 5240], [(((-(j ^ 2) * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j * x ^ 4) + j * y ^ 4, 5031], [(-(j ^ 2) * x * y ^ 3 - 3 * j ^ 2 * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y, 7265, 22105], [(-(j ^ 2) * x * y ^ 4 - 2 * j ^ 2 * x ^ 2 * y ^ 3) + (-4 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y, 17972], [(-(j ^ 2) * x ^ 2 * y ^ 2 - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 23025], [(-(j ^ 2) * x ^ 4 * y ^ 2 - 2 * j ^ 2 * x ^ 5 * y) - j ^ 2 * x ^ 6, 136], [(((-(j ^ 2) * x * y ^ 5 - 2 * j ^ 2 * x ^ 2 * y ^ 4) + (-2 * j ^ 2 + j) * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - j * x ^ 5 * y, 19524], [(-(j ^ 2) * x * y ^ 5 - 2 * j ^ 2 * x ^ 2 * y ^ 4) + (-2 * j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + 3j) * x ^ 4 * y ^ 2 + (j ^ 2 + 2j) * x ^ 5 * y, 485], [(-(j ^ 2) * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) + (-(j ^ 2) + 2j) * x ^ 3 * y, 17832], [(-(j ^ 2) * x * y ^ 4 - 2 * j ^ 2 * x ^ 2 * y ^ 3) + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 2, 8382], [-(j ^ 2) * x - j ^ 2 * y, 17824, 22940], [-(j ^ 2) * x * y - j ^ 2 * x ^ 2, 2984, 5014, 7227, 9767, 13109, 14739, 22067, 23013, 23017], [-(j ^ 2) * x * y - j ^ 2 * y ^ 2, 6738, 6742, 8374, 22926], [-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 599, 5101, 5714, 6735, 24819], [-(j ^ 2) * x * y ^ 2 - j ^ 2 * y ^ 3, 22488, 22492, 23188, 23192], [-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 1385, 13150, 22485], [-(j ^ 2) * x ^ 2 * y - j ^ 2 * x ^ 3, 1004, 1010, 25294, 25300], [-(j ^ 2) * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 1185, 7545, 8324, 15649, 17135], [-(j ^ 2) * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2, 3144, 3145, 3146, 12803, 13425, 16375], [-(j ^ 2) * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3, 27996], [-(j ^ 2) * x ^ 3 * y - j ^ 2 * x ^ 4, 17977, 23087], [-(j ^ 2) * x ^ 3 * y ^ 2 - j ^ 2 * x ^ 4 * y, 12795, 21484, 21485, 21486], [-(j ^ 2) * x ^ 4 * y - j ^ 2 * x ^ 5, 16795, 16796], [-(j ^ 2) * x ^ 4 * y ^ 2 - j ^ 2 * x ^ 5 * y, 345, 10843, 25125], [-(j ^ 2) * x ^ 5 * y - j ^ 2 * x ^ 6, 134], [((-(j ^ 2) * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) + j ^ 2 * x ^ 5 * y, 15184], [(-(j ^ 2) * x * y - j ^ 2 * x ^ 2) + y ^ 2, 5216, 5426], [(-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + y ^ 3, 5198], [((-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 5405], [(-(j ^ 2) * x * y - j ^ 2 * x ^ 2) - j ^ 2 * y ^ 2, 14748], [(-(j ^ 2) * x ^ 4 * y ^ 2 - j ^ 2 * x ^ 5 * y) - j ^ 2 * x ^ 6, 10425, 10426], [(-(j ^ 2) * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) + j ^ 2 * x ^ 5, 23085], [(-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j * y ^ 3, 10259, 10268], [(-(j ^ 2) * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + (j ^ 2 + 2j) * x ^ 3 * y ^ 2, 10272], [-(j ^ 2) * x * y ^ 2 + j ^ 2 * x ^ 3, 1008, 25298], [-(j ^ 2) * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 7830], [-(j ^ 2) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 4, 9305], [-(j ^ 2) * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 6, 895], [-(j ^ 2) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 4 * y + j * x ^ 5, 7903], [-(j ^ 2) * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2, 23185], [((-(j ^ 2) * x ^ 2 * y ^ 4 + (-(j ^ 2) + j) * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) + x ^ 6, 17984], [(-(j ^ 2) * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 22905], [(-(j ^ 2) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 825, 25535], [-(j ^ 2) * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + j * x ^ 3, 7888], [-(j ^ 2) * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 15107], [-(j ^ 2) * x ^ 4 * y ^ 2 + (-(j ^ 2) + j) * x ^ 5 * y + j * x ^ 6, 5175], [-(j ^ 2) * x + j * y, 16288, 17519, 17799, 17800], [-(j ^ 2) * x * y + j * x ^ 2, 7877, 17068, 22559], [-(j ^ 2) * x * y + j * y ^ 2, 8349, 8350, 15449, 17939, 17940, 17957, 17964, 19480, 19497, 19504], [-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y, 15346, 15348, 15369, 15378, 17063], [-(j ^ 2) * x * y ^ 3 + j * x ^ 2 * y ^ 2, 17910], [-(j ^ 2) * x ^ 2 * y + j * x ^ 3, 5904], [-(j ^ 2) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 27016, 27503], [-(j ^ 2) * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3, 3497], [-(j ^ 2) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 17426, 23082, 24975, 27492], [-(j ^ 2) * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2, 25392], [(-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y) - x ^ 3, 16160, 16511], [(-(j ^ 2) * x * y ^ 3 + j * x ^ 2 * y ^ 2) - x ^ 3 * y, 12800, 14690, 25051], [(-(j ^ 2) * x * y ^ 4 + j * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 11265, 11266], [(-(j ^ 2) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - x ^ 4 * y, 16165, 16166], [-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4 + x ^ 4 * y ^ 2, 15735], [-(j ^ 2) * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3 + x ^ 5 * y, 17916], [((-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 2) - 2 * j * x ^ 5 * y) - j * x ^ 6, 18336], [(-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y) - j * y ^ 3, 5696, 20068], [(-(j ^ 2) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 2235, 2236, 26385, 26386], [(-(j ^ 2) * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 625, 24845], [((((-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4) - j ^ 2 * x ^ 3 * y ^ 3) + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 2) - 2 * j * x ^ 5 * y) - j * x ^ 6, 18335], [((-(j ^ 2) * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 17915], [((-(j ^ 2) * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y) - j ^ 2 * x ^ 6, 23095], [-(j ^ 2) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y + j ^ 2 * x ^ 5, 17847], [-(j ^ 2) * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 8397, 12805, 12806], [-(j ^ 2) * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 5 * y + j ^ 2 * x ^ 6, 3007], [-(j ^ 2) * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y + j * x ^ 6, 14695, 14696], [(((-(j ^ 2) * x * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4) + y ^ 4, 10281], [(-(j ^ 2) * x ^ 2 * y ^ 4 + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 17987], [(-(j ^ 2) * x ^ 2 * y ^ 3 + 2 * j * x ^ 3 * y ^ 2) - x ^ 4 * y, 12174], [(((-(j ^ 2) * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 4 * y) - j * x ^ 5, 24485], [(((-(j ^ 2) * x * y ^ 5 + 2 * j * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 15525], [-(j ^ 2) * x ^ 2 * y ^ 3 + 2 * j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 15737], [-(j ^ 2) * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2, 15740], [(((-(j ^ 2) * x * y ^ 5 + 2 * j * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) - 2 * j * x ^ 5 * y) - j * x ^ 6, 17635, 17636], [(-(j ^ 2) * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y, 23097], [-(j ^ 2) * x * y + (j ^ 2 + 2j) * y ^ 2, 19479], [-(j ^ 2) * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 24490], [-(j ^ 2) * x * y ^ 4 + (j ^ 2 + 2j) * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 15530], [-(j ^ 2) * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y, 17564], [-(j ^ 2) * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 3 * y + j * x ^ 4, 17835], [-(j ^ 2) * x * y ^ 4 + (j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 8385], [-(j ^ 2) * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 4 * y + j * x ^ 5, 2995], [(-(j ^ 2) * x ^ 2 * y ^ 5 + (j ^ 2 + 3j) * x ^ 3 * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 15465], [j ^ 2, 7260, 16597, 17223, 17266, 17542, 22100, 22240, 24063, 24067], [j ^ 2 * x, 5465, 6720, 6749, 7843, 7886, 8193, 8236, 9257, 12409, 16469, 16609, 17241, 17258, 17816, 19098, 22589], [j ^ 2 * y, 2198, 2208, 7246, 12906, 14726, 15119, 16960, 17105, 17525, 17535, 17716, 17755, 18206, 18245, 22086, 22226, 26348, 26358], [j ^ 2 * x * y, 588, 598, 5491, 5586, 5589, 8366, 15052, 15358, 15368, 15447, 15657, 16498, 16612, 16629, 17596, 17956, 18296, 19093, 19097, 19496, 22470, 22499, 23170, 23199, 24808, 24818], [j ^ 2 * x * y ^ 2, 2227, 5689, 5690, 5697, 5899, 5900, 12450, 15437, 15647, 19037, 22205, 26377, 27011], [j ^ 2 * x * y ^ 3, 16362], [j ^ 2 * x * y ^ 4, 27993], [j ^ 2 * x ^ 2, 584, 590, 2976, 5002, 5484, 7861, 7878, 8211, 8228, 9297, 16297, 16769, 16778, 17236, 19022, 24804, 24810], [j ^ 2 * x ^ 2 * y, 5100, 13246, 13248, 17866, 19035, 20152, 22695, 27595], [j ^ 2 * x ^ 2 * y ^ 2, 617, 3630, 13245, 13431, 16365, 17865, 24837, 24980, 25379, 25388, 27013, 27430, 27945], [j ^ 2 * x ^ 2 * y ^ 3, 27154], [j ^ 2 * x ^ 3, 109, 7856, 10399, 10408, 14757, 20108, 27915], [j ^ 2 * y ^ 3, 5569], [j ^ 2 * x ^ 3 * y, 898, 1325, 2930, 10421, 23083, 27142, 28130], [j ^ 2 * x ^ 3 * y ^ 2, 332, 893, 2925, 5582, 10840, 25112, 25400, 26317, 27645, 28125], [j ^ 2 * x ^ 3 * y ^ 3, 3635, 3637, 13434, 27435, 27437], [j ^ 2 * x ^ 4, 547, 10347, 16785, 22735, 27295], [j ^ 2 * y ^ 4, 22531], [j ^ 2 * x ^ 4 * y, 335, 2866, 17905, 25115, 27086], [j ^ 2 * x ^ 4 * y ^ 2, 2936, 12807, 13435, 28136], [j ^ 2 * x ^ 4 * y ^ 3, 25405], [j ^ 2 * x ^ 5, 10415], [j ^ 2 * x ^ 5 * y, 24987, 29394], [j ^ 2 * x ^ 6 * y, 10844], [((j ^ 2 * x ^ 2 * y ^ 5 - 2 * x ^ 3 * y ^ 4) + (3 * j ^ 2 + 2j) * x ^ 4 * y ^ 3 + (j ^ 2 - j) * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y) - x ^ 7, 15464], [j ^ 2 * x - y, 9365, 18249, 19030], [j ^ 2 * x * y - y ^ 2, 9768, 14879, 14888, 15361, 17399, 17408, 22566], [j ^ 2 * x * y ^ 3 - x ^ 3 * y, 17062], [j ^ 2 * x * y ^ 5 - x ^ 3 * y ^ 3, 10215, 10216], [j ^ 2 * x ^ 2 * y ^ 2 - x ^ 3 * y, 28060], [j ^ 2 * x ^ 3 * y ^ 2 - x ^ 5, 10065], [(j ^ 2 * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2) - x ^ 5 * y, 9935, 9936], [(j ^ 2 * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) + (j ^ 2 - 2j) * x ^ 4 * y ^ 2 + (-(j ^ 2) - 3j) * x ^ 5 * y + x ^ 6, 7905], [(j ^ 2 * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) + (2 * j ^ 2 - j) * x ^ 4 * y ^ 2 + (j ^ 2 - 2j) * x ^ 5 * y + x ^ 6, 7906], [j ^ 2 * x * y ^ 4 + x ^ 2 * y ^ 3, 21835, 21836], [j ^ 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 10350, 22600, 23091, 24445, 29391], [j ^ 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 15485], [((j ^ 2 * x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3) + (2 * j ^ 2 + j) * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y, 10845], [j ^ 2 * x * y ^ 3 + x ^ 3 * y + y ^ 4, 480], [j ^ 2 * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 10075, 10076], [(((j ^ 2 * x * y ^ 4 + x ^ 2 * y ^ 3) - 3 * j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y) - x ^ 5, 20145], [(j ^ 2 * x * y ^ 3 + x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 10070], [j ^ 2 * x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4 + j ^ 2 * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y, 10846], [((j ^ 2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y) - j * x ^ 5, 12945], [((j ^ 2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y) - j * x ^ 5, 12946], [j ^ 2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 20150], [j ^ 2 * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 4 * y ^ 2 + (-2 * j ^ 2 - 3j) * x ^ 5 * y + x ^ 6, 8255], [((j ^ 2 * x ^ 2 * y ^ 4 - 3 * j * x ^ 4 * y ^ 2) - 3 * j * x ^ 5 * y) + x ^ 6, 8256], [j ^ 2 * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y, 15696], [(j ^ 2 * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 5688, 5692], [j ^ 2 * x * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 17983], [j ^ 2 * x * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y, 15461], [((j ^ 2 * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2) - j * x ^ 3 * y) + j ^ 2 * x ^ 4, 16305, 16306], [((j ^ 2 * x ^ 3 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y) + j ^ 2 * x ^ 6, 10355, 10356], [j ^ 2 * x ^ 2 * y ^ 2 - 2 * j * x ^ 3 * y, 7855], [(j ^ 2 * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) + x ^ 3 * y, 12165], [(j ^ 2 * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3) + (-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 11615, 11616, 15183], [(j ^ 2 * x * y ^ 3 + (j ^ 2 - 2j) * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4) - y ^ 4, 10280], [j ^ 2 * x * y - j * y ^ 2, 12898], [j ^ 2 * x * y ^ 2 - j * x ^ 2 * y, 15066, 15068, 15089, 15098, 18967], [j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2, 17911], [j ^ 2 * x ^ 2 * y - j * x ^ 3, 793, 796, 25503, 25506], [j ^ 2 * x ^ 2 * y - j * y ^ 3, 6431], [j ^ 2 * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 17423, 23045, 27455], [j ^ 2 * x ^ 3 * y ^ 2 - j * x ^ 4 * y, 16236], [j ^ 2 * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2, 27507], [j ^ 2 * x ^ 5 * y - j * x ^ 6, 276, 5386], [(j ^ 2 * x * y ^ 2 - j * x ^ 2 * y) - y ^ 3, 5706, 13575], [(j ^ 2 * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 10625], [(j ^ 2 * x * y ^ 2 - j * x ^ 2 * y) + x ^ 3, 16161, 16510], [(j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2) + x ^ 3 * y, 12801, 14691, 25050], [(j ^ 2 * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) + x ^ 4 * y, 15671], [(j ^ 2 * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2, 25055, 25056], [(j ^ 2 * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) + 2 * x ^ 4 * y + x ^ 5, 16515, 16516], [(j ^ 2 * x * y - j * x ^ 2) + j * y ^ 2, 20046], [(j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2) + j * y ^ 4, 5718], [j ^ 2 * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y, 23187], [((j ^ 2 * x * y ^ 5 + (j ^ 2 - j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 - 4j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 4 * y ^ 2) - 2 * j * x ^ 5 * y) - j * x ^ 6, 9795], [j ^ 2 * x * y ^ 5 + (j ^ 2 - j) * x ^ 2 * y ^ 4 + (-(j ^ 2) - 4j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - 4j) * x ^ 4 * y ^ 2 + x ^ 5 * y, 9796], [j ^ 2 * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y + j ^ 2 * x ^ 3, 22907], [j ^ 2 * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 5590], [j ^ 2 * x * y ^ 2 + (2 * j ^ 2 - j) * x ^ 2 * y, 17795], [j ^ 2 * x * y ^ 3 + (2 * j ^ 2 - j) * x ^ 2 * y ^ 2, 8345, 19475], [(j ^ 2 * x * y ^ 4 + (3 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 - 2j) * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 17773], [(j ^ 2 * x * y ^ 4 + (4 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y) - j ^ 2 * x ^ 5, 22595], [j ^ 2 * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 7831], [j ^ 2 * x ^ 3 * y ^ 2 - j ^ 2 * x ^ 5, 897, 22745], [(j ^ 2 * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + (-2 * j ^ 2 + j) * x ^ 3 * y + j * x ^ 4, 17283], [j ^ 2 * x * y + j ^ 2 * x ^ 2, 5154, 5224, 6737, 17796, 24075], [j ^ 2 * x * y + j ^ 2 * y ^ 2, 455, 7228, 7232, 13116, 22068, 22072, 22208, 22212], [j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y, 1175, 5759, 5760, 7225, 8346, 19036, 22065, 22487, 23012, 23092], [j ^ 2 * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 1019, 13151, 25309], [j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3, 118, 5772], [j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 14903, 16513, 19105, 21475], [j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * y ^ 4, 23231], [j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 1394, 1395, 1396, 2654, 2655, 2656, 5105, 5106, 22525], [j ^ 2 * x ^ 3 * y + j ^ 2 * x ^ 4, 879, 888, 16793], [j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 612, 995, 7554, 7555, 7556, 24832, 25285], [j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 3634, 27434], [j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 4893, 10423], [j ^ 2 * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 12804, 15452], [(j ^ 2 * x * y + j ^ 2 * x ^ 2) - y ^ 2, 9766], [(j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - y ^ 3, 17560], [(j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3) - y ^ 3, 5776], [((j ^ 2 * x ^ 4 * y ^ 3 + j ^ 2 * x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y) - j ^ 2 * x ^ 7, 905], [j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y + j ^ 2 * x ^ 4, 28905], [j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 14764], [j ^ 2 * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 5800], [j ^ 2 * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2, 5585], [(j ^ 2 * x * y ^ 3 + 2 * j ^ 2 * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 15387], [j ^ 2 * x * y ^ 2 + 2 * j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3, 23015], [j ^ 2 * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2 + 2 * j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 14766], [j ^ 2 * x * y ^ 4 + 3 * j ^ 2 * x ^ 2 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2, 23225], [j ^ 2 * x ^ 2 + j * y ^ 2, 10239], [j ^ 2 * x * y ^ 3 + j * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j * x ^ 4, 5030], [((j ^ 2 * x ^ 3 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 3) - 3 * x ^ 5 * y ^ 2) - 2 * x ^ 6 * y, 15674], [((j ^ 2 * x ^ 2 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 4) - 2 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 20365], [(j ^ 2 * x ^ 3 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 9934, 20495], [j ^ 2 * x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + 3 * j ^ 2 * x ^ 3 * y + j ^ 2 * x ^ 4, 8250], [j ^ 2 * x ^ 3 * y ^ 2 + (3 * j ^ 2 + j) * x ^ 4 * y + j ^ 2 * x ^ 5, 133], [j ^ 2 * x * y ^ 3 + (4 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y, 17935], [(j ^ 2 * x * y ^ 2 + (3 * j ^ 2 + 2j) * x ^ 2 * y) - x ^ 3, 2958, 17936], [(j ^ 2 * x * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 4 * y, 472], [j ^ 2 * x * y ^ 3 + (2 * j ^ 2 + 3j) * x ^ 2 * y ^ 2 + (3 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4, 7900], [(2 * j ^ 2 * x ^ 3 * y ^ 3 + (j ^ 2 - 3j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 9794], [(2 * j ^ 2 * x ^ 2 * y ^ 4 - 2 * j * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2, 5595], [(2 * j ^ 2 * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) + j * x ^ 3 * y + j * x ^ 4 + j ^ 2 * y ^ 4, 5451], [2 * j ^ 2 * x * y - j * y ^ 2, 439], [2 * j ^ 2 * x ^ 4 * y - j * x ^ 5, 17844], [2 * j ^ 2 * x ^ 4 * y ^ 2 - j * x ^ 5 * y, 8394], [2 * j ^ 2 * x ^ 5 * y - j * x ^ 6, 3004], [2 * j ^ 2 * x ^ 2 * y ^ 4 + (j ^ 2 - j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 5596], [2 * j ^ 2 * x * y ^ 4 + (5 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (4 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + 2 * j ^ 2 * x ^ 4 * y, 22945], [2 * j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 3636, 27436], [2 * j ^ 2 * x * y ^ 3 + 4 * j ^ 2 * x ^ 2 * y ^ 2 + 2 * j ^ 2 * x ^ 3 * y, 6775], [2 * j ^ 2 * x * y ^ 4 + 5 * j ^ 2 * x ^ 2 * y ^ 3 + (5 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 4 * y, 7275, 22115], [2 * j ^ 2 * x * y ^ 4 + 6 * j ^ 2 * x ^ 2 * y ^ 3 + (5 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 4 * y + j ^ 2 * x ^ 5, 22255], [2 * j ^ 2 * x ^ 4 * y ^ 3 + (3 * j ^ 2 + j) * x ^ 5 * y ^ 2, 15677], [3 * j ^ 2 * x * y ^ 4 + (2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y + j ^ 2 * y ^ 5, 19523], [3 * j ^ 2 * x * y + j ^ 2 * x ^ 2 + 2 * j ^ 2 * y ^ 2, 7268, 22108, 22248], [4 * j ^ 2 * x * y ^ 4 + (3 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2 + 2 * j ^ 2 * y ^ 5, 23222], [4 * j ^ 2 * x * y ^ 2 + 2 * j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3 + 2 * j ^ 2 * y ^ 3, 22247], [4 * j ^ 2 * x * y ^ 2 + 2 * j ^ 2 * x ^ 2 * y + 2 * j ^ 2 * y ^ 3, 7267, 22107], [4 * j ^ 2 * x * y ^ 2 + 3 * j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3 + 2 * j ^ 2 * y ^ 3, 7263, 22103, 22243], [4 * j ^ 2 * x * y ^ 3 + 3 * j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y + 2 * j ^ 2 * y ^ 4, 6772], [4 * j ^ 2 * x * y ^ 4 + 3 * j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2 + 2 * j ^ 2 * y ^ 5, 22522], [6 * j ^ 2 * x * y ^ 4 + (6 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 - j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y + 2 * j ^ 2 * y ^ 5, 22942], [((-2 * j ^ 2 + j) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j ^ 2 * y ^ 3, 5408], [(-2 * j ^ 2 + j) * x * y ^ 5 + (-3 * j ^ 2 + j) * x ^ 2 * y ^ 4 + (-(j ^ 2) + 3j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2 + x ^ 5 * y, 18266], [(-2 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 17075], [((-(j ^ 2) + j) * x ^ 3 * y ^ 4 - 2 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 15745], [(-(j ^ 2) + j) * x * y ^ 3 + x ^ 3 * y, 16642], [((-(j ^ 2) + j) * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 20142], [(((-(j ^ 2) + j) * x ^ 2 * y ^ 4 + (-2 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 4 * y ^ 2) - x ^ 5 * y) + x ^ 6, 17774], [((-(j ^ 2) + j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 5730], [((-(j ^ 2) + j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 5174], [(-(j ^ 2) + j) * x + j * y, 17240], [(-(j ^ 2) + j) * x * y ^ 2 + j * x ^ 2 * y, 9778], [(-(j ^ 2) + j) * x ^ 2 * y + j * x ^ 3, 7879], [(-(j ^ 2) + j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 10632], [((-(j ^ 2) + j) * x * y + j * x ^ 2) - y ^ 2, 17259, 17268], [(-(j ^ 2) + j) * x * y ^ 2 + j * x ^ 2 * y + y ^ 3, 9769], [(-(j ^ 2) + j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 9793], [(-(j ^ 2) + j) * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y, 15460], [((-(j ^ 2) + j) * x ^ 2 * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 7835, 7836], [(((-(j ^ 2) + j) * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2) - x ^ 3 * y) + j * y ^ 4, 13926], [((-(j ^ 2) + j) * x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y) - j ^ 2 * y ^ 3, 22562], [((-(j ^ 2) + j) * x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y + j * x ^ 3) - j ^ 2 * y ^ 3, 22558], [(-(j ^ 2) + j) * x * y ^ 3 + 3 * j * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y, 22555], [((-(j ^ 2) + j) * x ^ 2 * y ^ 4 + (j ^ 2 + 3j) * x ^ 3 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 15115], [j, 1563, 1566, 13242, 17547, 17831, 20712, 22353, 22356], [j * x, 2991, 16256, 16258, 19314, 19316, 19317, 21826, 21829], [j * y, 3703, 5393, 5436, 8381, 9736, 9775, 10271, 11038, 11722, 12144, 12912, 13234, 15123, 15166, 17537, 17967, 17971, 19507, 19511, 22003, 22006], [j * x * y, 2078, 5411, 5428, 7874, 8423, 8426, 9862, 11216, 12126, 12774, 13565, 15141, 15158, 16255, 17119, 17516, 17746, 18236, 19952, 19971, 21902, 22916, 25916, 25918, 26522, 26966, 26968, 27208, 28553, 28692], [j * x * y ^ 2, 1323, 2580, 5018, 6781, 7340, 7786, 7788, 10166, 11215, 12125, 12167, 27150, 27360], [j * x * y ^ 3, 3071, 3280, 3561, 4193, 7785, 10165, 15954, 15956, 15957, 20348, 27145, 27501, 27781], [j * x * y ^ 4, 20361], [j * x * y ^ 5, 3566], [j * x ^ 2, 93, 96, 9893, 15213, 15216, 20090, 20119, 20260], [j * y ^ 2, 62, 6992, 7802, 7804, 7806, 10240, 10264, 11589, 17548, 17604], [j * x ^ 2 * y, 132, 2860, 10836, 10839, 13386, 13388, 14818, 15434, 15644, 15708, 16012, 20717, 23374, 23376, 23377, 24968, 27080, 27293, 27806, 27808], [j * x ^ 2 * y ^ 2, 972, 2863, 4124, 4126, 4127, 5858, 8110, 10758, 13080, 25248, 25882, 26663, 27083], [j * x ^ 2 * y ^ 3, 3213, 6997, 10771, 22326, 25261], [j * x ^ 2 * y ^ 4, 14627, 22814, 22816, 27994], [j * x ^ 3, 10306, 10308, 15633, 18216, 22556, 24484], [j * y ^ 3, 3843, 4808, 14622], [j * x ^ 3 * y, 10305, 10842, 15524, 15672], [j * x ^ 3 * y ^ 2, 3622, 9867, 26527, 27014, 27422, 28697], [j * y ^ 4, 4821, 20081, 22881, 23583], [j * x ^ 4 * y, 2922, 14904, 28122, 29382], [j * x ^ 4 * y ^ 3, 977], [j * y ^ 5, 22883], [j * x ^ 6, 4894, 14694], [(j * x * y ^ 5 - 2 * x ^ 2 * y ^ 4) + j ^ 2 * x ^ 3 * y ^ 3 + j * x ^ 5 * y, 15117], [j * x - y, 17257, 17264], [j * x * y - y ^ 2, 9749, 9750], [j * x * y ^ 2 - x ^ 2 * y, 11751, 17515], [j * x * y ^ 3 - x ^ 2 * y ^ 2, 15391, 27851], [j * x ^ 2 * y - x ^ 3, 10026], [j * x ^ 2 * y ^ 2 - x ^ 3 * y, 818, 10025, 25528], [j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2, 15102], [j * x ^ 3 * y ^ 2 - x ^ 4 * y, 65], [j * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2, 17917], [(j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 22325], [(j * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2) - x ^ 5 * y, 15254], [(j * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2) + x ^ 5 * y, 17914], [(j * x ^ 2 * y ^ 5 - x ^ 3 * y ^ 4) + x ^ 4 * y ^ 3 + j * x ^ 5 * y ^ 2, 5944], [(j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - j * x ^ 4 * y, 16234], [(j * x ^ 4 * y ^ 2 - x ^ 5 * y) - j * x ^ 6, 274, 5384], [(j * x * y ^ 5 - x ^ 2 * y ^ 4) + (j ^ 2 - j) * x ^ 3 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2 + x ^ 5 * y, 20084], [(j * x * y ^ 2 - x ^ 2 * y) - j ^ 2 * y ^ 3, 11260, 11611, 12170], [((j * x * y ^ 2 - x ^ 2 * y) - j ^ 2 * x ^ 3) + j * y ^ 3, 18288], [(j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + j ^ 2 * x ^ 4 * y, 2586, 7346, 16237, 27366], [(j * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2) + j ^ 2 * x ^ 5 * y, 5527], [(j * x ^ 4 * y ^ 2 - x ^ 5 * y) + j ^ 2 * x ^ 6, 277, 5387], [(j * x * y ^ 2 - x ^ 2 * y) + j * y ^ 3, 17588], [(j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 4 * y + j ^ 2 * x ^ 5, 2585, 7345, 27365], [j * x + y, 17036], [j * x * y + x ^ 2, 7872], [j * x * y ^ 4 + x ^ 3 * y ^ 2, 6995], [j * x * y ^ 5 + x ^ 3 * y ^ 3, 14625], [j * x ^ 2 + y ^ 2, 15152], [j * x ^ 3 * y ^ 4 + x ^ 5 * y ^ 2, 975], [((j * x * y ^ 3 + x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j * x ^ 4, 17627], [j * x ^ 2 * y - j * y ^ 3, 5693], [(j * x ^ 3 * y ^ 3 - j * x ^ 5 * y) - j * x ^ 6, 17634], [((j * x * y ^ 5 - 3 * j ^ 2 * x ^ 2 * y ^ 4) + j * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 19526], [j * x * y - 2 * j ^ 2 * x ^ 2, 2959], [((j * x * y ^ 4 - 2 * j ^ 2 * x ^ 2 * y ^ 3) - 2 * j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 22046], [j * x - j ^ 2 * y, 22590, 24479], [j * x * y - j ^ 2 * x ^ 2, 22913], [j * x * y - j ^ 2 * y ^ 2, 15519, 15729, 22576], [j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 2645, 24981], [j * x * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 2, 6435, 6436], [j * x ^ 2 * y - j ^ 2 * x ^ 3, 538, 10338], [j * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 15626], [j * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 4 * y ^ 2, 12875, 12876], [j * x ^ 3 * y ^ 4 - j ^ 2 * x ^ 5 * y ^ 2, 25406], [(j * x * y - j ^ 2 * x ^ 2) - y ^ 2, 9774], [(j * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) + x ^ 4 * y, 15457], [((j * x * y ^ 5 - j ^ 2 * x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2, 15455], [(j * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3, 5777, 5784], [(j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 6506], [(j * x * y ^ 5 - j ^ 2 * x ^ 2 * y ^ 4) - j ^ 2 * x ^ 3 * y ^ 3, 13366], [(j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y, 12932], [j * x * y + j ^ 2 * x ^ 2, 6220], [j * x * y ^ 2 + j ^ 2 * x ^ 2 * y, 12660, 16651], [j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 22951], [j * x ^ 2 * y + j ^ 2 * x ^ 3, 7760, 20106, 26801, 26940], [j * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 6225, 6226, 20105], [j * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 4 * y, 1037, 25327], [(((j * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2) + x ^ 4 * y) - j ^ 2 * y ^ 5, 15105], [(((j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j * x ^ 4) - j ^ 2 * y ^ 4, 17065], [j * x * y + (-(j ^ 2) + j) * x ^ 2, 7859, 7860], [(((j * x * y ^ 5 + (-(j ^ 2) + j) * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 15186], [(((j * x * y ^ 4 + (-(j ^ 2) + j) * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y) - j * x ^ 5, 5801], [((j * x * y ^ 4 + (-(j ^ 2) + j) * x ^ 2 * y ^ 3) - 2 * j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 10283], [(j * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y) - j ^ 2 * x ^ 3, 16303], [(j * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 10353], [j * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 1184], [j * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + (j ^ 2 + 2j) * x ^ 4 * y, 7892], [j * x + j * y, 23, 26, 17099], [j * x * y + j * x ^ 2, 7884, 8321, 16116, 16118, 18614, 18616, 18617, 19974, 20286, 20289], [j * x * y + j * y ^ 2, 1113, 3773, 5203, 5413, 5416, 11218, 12128, 17128, 18963, 23304, 23306, 23307], [j * x * y ^ 2 + j * x ^ 2 * y, 1253, 5406, 11045, 12756, 12758, 13106, 16115, 17586, 20714, 20716, 25915, 26965], [j * x * y ^ 2 + j * y ^ 3, 6153, 8743, 10168, 23654, 23656], [j * x * y ^ 3 + j * x ^ 2 * y ^ 2, 1187, 6504, 6507, 11602, 11742, 12755, 13105, 17143, 17585], [j * x * y ^ 3 + j * y ^ 4, 21903, 22463, 29321], [j * x * y ^ 4 + j * x ^ 2 * y ^ 3, 6994, 10482, 10561, 25471, 27573, 27783], [j * x * y ^ 5 + j * x ^ 2 * y ^ 4, 14624], [j * x ^ 2 * y + j * x ^ 3, 25006, 25008], [j * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 10618, 11404, 11406, 11407, 13385, 15628, 16502, 20362, 20854, 20856, 20857, 23024, 25005, 26302, 27215], [j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 761, 9864, 9866, 15625, 16724, 16726, 16727, 20002, 26244, 26246, 26247, 26524, 26526, 28694, 28696], [j * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3, 3494, 3496, 8115, 8116, 13085, 13086], [j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 14682, 14825], [j * x ^ 3 * y ^ 3 + j * x ^ 5 * y, 15257], [j * x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3, 974], [j * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 135], [(j * x * y + j * x ^ 2) - y ^ 2, 12919, 12928], [(j * x * y ^ 5 + j * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3, 13364], [(j * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2) - x ^ 5 * y, 15256], [((j * x * y ^ 3 + j * x ^ 2 * y ^ 2) - x ^ 3 * y) + x ^ 4, 17272], [(j * x * y ^ 5 + j * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2, 3564], [((j * x * y ^ 3 + j * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j ^ 2 * y ^ 4, 18330], [j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y + x ^ 5, 17284], [(j * x * y ^ 5 + j * x ^ 2 * y ^ 4 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 15185], [(j * x * y + j * x ^ 2) - j ^ 2 * y ^ 2, 10252], [(j * x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * x ^ 3, 18286], [(j * x * y ^ 3 + j * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 4, 14755], [(j * x * y ^ 3 + j * x ^ 2 * y ^ 2) - j ^ 2 * y ^ 4, 17630], [j * x * y ^ 3 + j * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 1607, 2093, 5942], [j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 14905, 14906], [j * x ^ 4 * y ^ 2 + j * x ^ 5 * y + j * x ^ 6, 4895, 4896], [(j * x * y ^ 4 + j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 24983], [j * x * y ^ 3 + j * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j * y ^ 4, 9024, 9026, 9027, 13927], [j * x * y ^ 4 + j * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5, 14767], [(j * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y) - y ^ 3, 17840], [(j * x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2) - y ^ 4, 8390], [j * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y + j ^ 2 * x ^ 5, 2865, 7765, 7766, 26945, 26946, 27085], [j * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2, 18285], [j * x * y ^ 5 + 2 * j * x ^ 2 * y ^ 4, 3567, 13367], [((j * x * y ^ 5 + 2 * j * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 3285, 3286], [j * x * y ^ 2 + 2 * j * x ^ 2 * y + j * x ^ 3, 17095], [j * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 1186, 22396, 22397, 27223], [j * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 22047], [j * x * y ^ 5 + 2 * j * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3, 20363], [j * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y + j * x ^ 4, 16992], [j * x ^ 2 * y ^ 3 + 2 * j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 14833], [j * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2, 8467, 10773, 25263], [j * x ^ 3 * y ^ 3 + 2 * j * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 10633], [j * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y, 1606], [j * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2, 8466], [j * x ^ 2 * y ^ 3 + 2 * j * x ^ 3 * y ^ 2 + (2 * j ^ 2 + 3j) * x ^ 4 * y, 8242], [j * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2, 15345], [(j * x ^ 2 * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2, 8464], [(j * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2) - x ^ 3 * y, 22394], [(j * x * y ^ 4 + (j ^ 2 + 2j) * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 22044], [(j * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 66], [((j * x * y ^ 4 + (j ^ 2 + 2j) * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 10275], [(j * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2 + 2 * j ^ 2 * x ^ 4 * y) - j * x ^ 5, 17287], [j * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y, 1604], [(j * x * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 2) - x ^ 3 * y, 5520], [j * x * y ^ 4 + (4 * j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (4 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 483], [j * x * y ^ 2 + 3 * j * x ^ 2 * y + j * x ^ 3, 27572], [(j * x * y ^ 4 + (j ^ 2 + 3j) * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 9782], [(j * x ^ 2 * y ^ 4 + (j ^ 2 + 3j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 833, 25543], [j * x * y ^ 3 + (2 * j ^ 2 + 3j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4, 17725], [j * x ^ 2 * y ^ 5 + (2 * j ^ 2 + 3j) * x ^ 3 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 5 * y ^ 2, 15747], [j * x ^ 3 * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 3 + (2 * j ^ 2 + 3j) * x ^ 5 * y ^ 2 + j * x ^ 6 * y, 15675], [j * x * y ^ 4 + (3 * j ^ 2 + 4j) * x ^ 2 * y ^ 3 + (4 * j ^ 2 + 3j) * x ^ 3 * y ^ 2 + (3 * j ^ 2 + j) * x ^ 4 * y, 17077], [(2 * j ^ 2 + j) * x * y, 16638], [((2 * j ^ 2 + j) * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (j ^ 2 - 2j) * x ^ 4 * y + x ^ 5, 17286], [((((2 * j ^ 2 + j) * x * y ^ 3 + x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4) + j ^ 2 * y ^ 4, 9790], [(2 * j ^ 2 + j) * x ^ 3 * y ^ 2 - j * x ^ 4 * y, 5512], [(((2 * j ^ 2 + j) * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y) - j * x ^ 3) - y ^ 3, 17001, 17140], [(2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + j ^ 2 * y ^ 4, 19520], [(2 * j ^ 2 + j) * x * y ^ 4 + 2 * j ^ 2 * x ^ 2 * y ^ 3 + (j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 4 * y, 475], [(2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j * x ^ 4, 12935], [(2 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 12455, 12456], [(2 * j ^ 2 + j) * x * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (-(j ^ 2) - 3j) * x ^ 4 * y + x ^ 5, 17285], [(((2 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (5 * j ^ 2 + 2j) * x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5, 8245], [((2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 + 3j) * x ^ 3 * y) - x ^ 4, 17275], [(3 * j ^ 2 + j) * x * y ^ 2 + j ^ 2 * x ^ 2 * y, 468], [(3 * j ^ 2 + j) * x * y + j ^ 2 * x ^ 2 + j ^ 2 * y ^ 2, 17798], [(3 * j ^ 2 + j) * x * y ^ 2 + j ^ 2 * x ^ 2 * y + j ^ 2 * y ^ 3, 8348], [(((3 * j ^ 2 + j) * x * y ^ 2 + (3 * j ^ 2 + 2j) * x ^ 2 * y) - x ^ 3) + j ^ 2 * y ^ 3, 17938], [((-4 * j ^ 2 + 2j) * x * y ^ 3 + (-2 * j ^ 2 + 3j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 4) - 2 * j ^ 2 * y ^ 4, 22597], [((-4 * j ^ 2 + 2j) * x * y ^ 3 + (-3 * j ^ 2 + 4j) * x ^ 2 * y ^ 2 + (-(j ^ 2) + 3j) * x ^ 3 * y + j * x ^ 4) - 2 * j ^ 2 * y ^ 4, 22593], [((-3 * j ^ 2 + 2j) * x * y ^ 2 + (-(j ^ 2) + 3j) * x ^ 2 * y + j * x ^ 3) - 2 * j ^ 2 * y ^ 3, 22598], [(-(j ^ 2) + 2j) * x + (j ^ 2 + 2j) * y, 17239], [(-(j ^ 2) + 2j) * x * y ^ 5 + (-3 * j ^ 2 + 4j) * x ^ 2 * y ^ 4 + 8 * j * x ^ 3 * y ^ 3 + (j ^ 2 + 5j) * x ^ 4 * y ^ 2, 5456], [2 * j * x ^ 2 * y ^ 4, 22817], [2 * j * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2, 7834], [(2 * j * x * y ^ 3 - x ^ 2 * y ^ 2) - j ^ 2 * y ^ 4, 15110], [(2 * j * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - j ^ 2 * y ^ 3, 17070], [2 * j * x * y + j * x ^ 2, 22462], [2 * j * x * y ^ 2 + j * y ^ 3, 23657], [2 * j * x * y ^ 3 + j * x ^ 2 * y ^ 2, 5802], [2 * j * x * y ^ 4 + j * x ^ 2 * y ^ 3, 6996, 23794, 23796, 23797], [2 * j * x * y ^ 5 + j * x ^ 2 * y ^ 4, 14626], [2 * j * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3, 22887], [2 * j * x ^ 3 * y + j * x ^ 4, 5872], [2 * j * x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3, 976], [2 * j * x * y ^ 2 + j * x ^ 2 * y + j * y ^ 3, 11053], [2 * j * x * y ^ 4 + j * x ^ 2 * y ^ 3 + j * y ^ 5, 4823], [((2 * j * x * y ^ 5 + 3 * j * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3) - 2 * j ^ 2 * x ^ 4 * y ^ 2) + x ^ 5 * y, 18267], [2 * j * x ^ 2 * y ^ 4 + 3 * j * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2, 5873], [(2 * j * x ^ 2 * y ^ 3 + (j ^ 2 + 3j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 12175, 12176], [2 * j * x * y ^ 5 + (j ^ 2 + 3j) * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2 + x ^ 5 * y, 18264], [(2 * j * x * y ^ 5 + 4 * j * x ^ 2 * y ^ 4 + 3 * j * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 20087], [(2 * j * x * y ^ 3 + (3 * j ^ 2 + 4j) * x ^ 2 * y ^ 2 + (3 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4) - j ^ 2 * y ^ 4, 9791], [2 * j * x * y ^ 5 + (-(j ^ 2) + 5j) * x ^ 2 * y ^ 4 + (-(j ^ 2) + 7j) * x ^ 3 * y ^ 3 + 5 * j * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 5457], [2 * j * x * y ^ 5 + (j ^ 2 + 5j) * x ^ 2 * y ^ 4 + (2 * j ^ 2 + 6j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 + 6j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 5454], [2 * j * x * y ^ 5 + (j ^ 2 + 6j) * x ^ 2 * y ^ 4 + (3 * j ^ 2 + 6j) * x ^ 3 * y ^ 3 + (3 * j ^ 2 + 4j) * x ^ 4 * y ^ 2, 5246], [2 * j * x * y ^ 5 + (3 * j ^ 2 + 6j) * x ^ 2 * y ^ 4 + (5 * j ^ 2 + 7j) * x ^ 3 * y ^ 3 + (4 * j ^ 2 + 5j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 5244], [((2 * j * x * y ^ 5 + (2 * j ^ 2 + 7j) * x ^ 2 * y ^ 4 + (6 * j ^ 2 + 9j) * x ^ 3 * y ^ 3) - 5 * x ^ 4 * y ^ 2) - x ^ 5 * y, 5247], [(j ^ 2 + 2j) * x ^ 2 * y ^ 3, 10627], [((j ^ 2 + 2j) * x ^ 3 * y ^ 3 - 3 * x ^ 4 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 5 * y, 23096], [((j ^ 2 + 2j) * x ^ 2 * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 64], [(((j ^ 2 + 2j) * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) + j * y ^ 4, 13924], [(((j ^ 2 + 2j) * x ^ 2 * y ^ 3 - 2 * x ^ 3 * y ^ 2) + (2 * j ^ 2 + 3j) * x ^ 4 * y) - x ^ 5, 7895], [(j ^ 2 + 2j) * x ^ 2 * y - x ^ 3, 10028], [(j ^ 2 + 2j) * x ^ 2 * y ^ 2 - x ^ 3 * y, 10592, 10628, 11605], [((j ^ 2 + 2j) * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + j ^ 2 * x ^ 4 * y, 16374, 16377], [((j ^ 2 + 2j) * x ^ 4 * y ^ 2 - x ^ 5 * y) + j ^ 2 * x ^ 6, 344, 347, 25124, 25127], [((j ^ 2 + 2j) * x * y ^ 3 - x ^ 2 * y ^ 2) + j * y ^ 4, 5788], [((j ^ 2 + 2j) * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 4 * y) - j * x ^ 5, 5445], [(j ^ 2 + 2j) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 10485], [(j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 12665, 12666], [(((j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 2) - x ^ 4 * y) + j ^ 2 * x ^ 5, 17975], [((j ^ 2 + 2j) * x * y ^ 2 + 2 * j * x ^ 2 * y + j * x ^ 3) - y ^ 3, 13129, 13138], [((j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 + 3j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 10623], [(j ^ 2 + 2j) * x ^ 3 * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 3 + j ^ 2 * x ^ 5 * y ^ 2, 10635], [(j ^ 2 + 2j) * x ^ 2 * y ^ 4 + (4 * j ^ 2 + 3j) * x ^ 3 * y ^ 3 + (4 * j ^ 2 + j) * x ^ 4 * y ^ 2 + (j ^ 2 - j) * x ^ 5 * y, 24494], [(j ^ 2 + 2j) * x ^ 2 * y ^ 5 + (4 * j ^ 2 + 3j) * x ^ 3 * y ^ 4 + (4 * j ^ 2 + j) * x ^ 4 * y ^ 3 + (j ^ 2 - j) * x ^ 5 * y ^ 2, 15534], [(j ^ 2 + 2j) * x * y ^ 5 + (3 * j ^ 2 + 4j) * x ^ 2 * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3, 23236], [(j ^ 2 + 2j) * x * y ^ 5 + (3 * j ^ 2 + 4j) * x ^ 2 * y ^ 4 + (4 * j ^ 2 + 3j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 22536], [(j ^ 2 + 2j) * x ^ 2 * y ^ 4 + (6 * j ^ 2 + 4j) * x ^ 3 * y ^ 3 + (5 * j ^ 2 + j) * x ^ 4 * y ^ 2 + (j ^ 2 - j) * x ^ 5 * y, 24496], [(j ^ 2 + 2j) * x ^ 2 * y ^ 5 + (6 * j ^ 2 + 4j) * x ^ 3 * y ^ 4 + (5 * j ^ 2 + j) * x ^ 4 * y ^ 3 + (j ^ 2 - j) * x ^ 5 * y ^ 2, 15536], [((3 * j ^ 2 + 2j) * x ^ 4 * y ^ 3 - 4 * x ^ 5 * y ^ 2) - 2 * x ^ 6 * y, 15676], [((((3 * j ^ 2 + 2j) * x * y ^ 4 - j * x ^ 2 * y ^ 3) + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 2) - j * x ^ 4 * y) - 2 * y ^ 5, 18252], [(3 * j ^ 2 + 2j) * x * y ^ 3 + (2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y + (2 * j ^ 2 + j) * y ^ 4, 18261], [(3 * j ^ 2 + 2j) * x * y ^ 2 + j ^ 2 * x ^ 2 * y + j ^ 2 * y ^ 3, 19478], [(3 * j ^ 2 + 2j) * x * y ^ 2 + j ^ 2 * x ^ 2 * y + (2 * j ^ 2 + j) * y ^ 3, 459], [(3 * j ^ 2 + 2j) * x * y ^ 2 + 3 * j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3 + (2 * j ^ 2 + j) * y ^ 3, 17280], [((3 * j ^ 2 + 2j) * x * y ^ 4 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + j * x ^ 4 * y) - y ^ 5, 15393], [((4 * j ^ 2 + 2j) * x * y ^ 4 + (3 * j ^ 2 - 2j) * x ^ 2 * y ^ 3 + (j ^ 2 - 4j) * x ^ 3 * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y) - 2 * y ^ 5, 5727], [((((4 * j ^ 2 + 2j) * x * y ^ 3 + (3 * j ^ 2 - j) * x ^ 2 * y ^ 2) - 3 * j * x ^ 3 * y) - j * x ^ 4) - 2 * y ^ 4, 5728], [((4 * j ^ 2 + 2j) * x * y ^ 3 + (5 * j ^ 2 + 2j) * x ^ 2 * y ^ 2 + (3 * j ^ 2 + j) * x ^ 3 * y) - y ^ 4, 16653], [(3 * j * x ^ 2 * y + j * x ^ 3) - j * y ^ 3, 5032], [3 * j * x * y ^ 4 + 3 * j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + j * y ^ 5, 5033], [3 * j * x ^ 2 * y ^ 4 + (4 * j ^ 2 + 5j) * x ^ 3 * y ^ 3 + (4 * j ^ 2 + 3j) * x ^ 4 * y ^ 2 + 2 * j ^ 2 * x ^ 5 * y, 24497], [3 * j * x ^ 2 * y ^ 5 + (4 * j ^ 2 + 5j) * x ^ 3 * y ^ 4 + (4 * j ^ 2 + 3j) * x ^ 4 * y ^ 3 + 2 * j ^ 2 * x ^ 5 * y ^ 2, 15537], [(j ^ 2 + 3j) * x ^ 2 * y ^ 4 + (3 * j ^ 2 + j) * x ^ 3 * y ^ 3, 5525], [((j ^ 2 + 3j) * x ^ 2 * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 5526], [((j ^ 2 + 3j) * x * y ^ 4 + (4 * j ^ 2 + 3j) * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 5941], [((2 * j ^ 2 + 3j) * x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y + j ^ 2 * x ^ 3) - y ^ 3, 15138], [(((2 * j ^ 2 + 3j) * x * y ^ 6 + (7 * j ^ 2 + 4j) * x ^ 2 * y ^ 5 + 8 * j ^ 2 * x ^ 3 * y ^ 4 + (2 * j ^ 2 - 7j) * x ^ 4 * y ^ 3) - 7 * j * x ^ 5 * y ^ 2) - 2 * j * x ^ 6 * y, 5735], [(((5 * j ^ 2 + 3j) * x * y ^ 4 + (6 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (4 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (j ^ 2 - 3j) * x ^ 4 * y) - j * x ^ 5) - 2 * y ^ 5, 5723], [4 * j * x * y ^ 3 + (2 * j ^ 2 + 3j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 3 * y + j ^ 2 * x ^ 4 + j * y ^ 4, 5732], [((4 * j * x * y ^ 5 + (2 * j ^ 2 + 5j) * x ^ 2 * y ^ 4 + (4 * j ^ 2 + 5j) * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) + 2 * j * y ^ 6, 5803], [((5 * j ^ 2 + 4j) * x * y ^ 4 + (6 * j ^ 2 + 4j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + 3 * j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5) - 2 * y ^ 5, 5442], [((6 * j ^ 2 + 4j) * x * y ^ 4 + (8 * j ^ 2 + 3j) * x ^ 2 * y ^ 3 + (7 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + 3 * j ^ 2 * x ^ 4 * y + j ^ 2 * x ^ 5) - 2 * y ^ 5, 5232], [-(x ^ -1), 9440, 16247, 16742], [-(x ^ -1) * y, 430, 3230, 4773, 8668, 9284, 9435, 12437, 13532, 13549, 13568, 13765, 14909, 16173, 16314, 16734, 17862], [-(x ^ -1) * y ^ 2, 8663, 12427, 13563, 13567, 17854, 23292], [-1 - x ^ -1 * y, 17932, 19472, 28590], [-(x ^ -1) * y ^ 2 - y, 8667, 17924, 19464], [-(x ^ -1) * y ^ 3 - y ^ 2, 23642], [-(x ^ -1) * y ^ 4 - y ^ 3, 13912], [((-(x ^ -1) * y ^ 4 - x * y ^ 2) - x ^ 2 * y) - y ^ 3, 9012], [x ^ -1, 9581, 13458, 14712, 23298, 28240], [x ^ -1 * y, 10232, 12927, 13609, 13829, 13975, 14701, 14704, 16524, 16878, 19383, 29253], [x ^ -1 * y ^ 2, 10224, 12917, 13878, 13882], [x ^ -1 * y ^ 3, 8662, 13562], [-(x ^ -1) * y ^ 2 + x, 19461], [(x ^ -1 * y ^ 2 - x) + y, 18207], [1 + x ^ -1 * y, 23293, 23297, 23648], [x ^ -1 * y ^ 2 + y, 13918, 23643], [x ^ -1 * y ^ 3 + y ^ 2, 13913, 13917], [x ^ -1 * y ^ 2 + x + y, 9018, 13137], [x ^ -1 * y ^ 3 + x * y + x ^ 2 + y ^ 2, 9013, 9017, 13127], [x ^ -1 * y ^ 2 + 2y, 23647], [((-j * x ^ -1 * y ^ 4 - 2 * j * x * y ^ 2) - j * x ^ 2 * y) - 2 * j * y ^ 3, 13923], [-j * x ^ -1, 13533, 13536], [-j * x ^ -1 * y ^ 2, 10267], [-j * x ^ -1 * y ^ 3, 10257], [-j * x ^ -1 * y ^ 2 - j * y, 13908, 19509, 23303], [-j * x ^ -1 * y ^ 3 - j * y ^ 2, 23653], [((-j * x ^ -1 * y ^ 4 - j * x * y ^ 2) - j * x ^ 2 * y) - j * y ^ 3, 9023], [-j + j ^ 2 * x ^ -1 * y, 16639], [j ^ 2 * x ^ -1 * y ^ 2 - j * y, 15379], [-(j ^ 2) * x ^ -1, 12892], [-(j ^ 2) * x ^ -1 * y, 12884], [-(j ^ 2) + x ^ -1 * y, 16594], [x ^ -1 * y ^ 2 - j ^ 2 * y, 15338], [-(j ^ 2) - j ^ 2 * x ^ -1 * y, 13102], [-(j ^ 2) * x ^ -1 * y ^ 2 - j ^ 2 * y, 13094], [j ^ 2 * x ^ -1, 12402], [j ^ 2 * x ^ -1 * y, 12394], [j ^ 2 - x ^ -1 * y, 17014], [-(x ^ -1) * y ^ 2 + j ^ 2 * y, 15058], [j * x ^ -1 * y, 13558], [j - j ^ 2 * x ^ -1 * y, 17059], [-(j ^ 2) * x ^ -1 * y ^ 2 + j * y, 15099], [j + j * x ^ -1 * y, 13883, 13886], [j * x ^ -1 * y ^ 3 + j * y ^ 2, 8673], [j * x ^ -1 * y ^ 3 + j * x * y + 2 * j * y ^ 2, 13573], [-x * y ^ -1, 19305], [-(x ^ 3) * y ^ -1, 14277], [y - x ^ 2 * y ^ -1, 14557, 18605], [y ^ -1, 14258, 19307], [x * y ^ -1, 18607, 18986, 18988], [x ^ 2 * y ^ -1, 23022], [1 + x * y ^ -1, 14553], [x ^ 2 + x ^ 3 * y ^ -1, 18615], [x + y + x ^ 2 * y ^ -1, 14273, 19315], [-j * x * y + j ^ 2 * x ^ 2 + j ^ 2 * x ^ 3 * y ^ -1, 16956], [((j ^ 2 - j) * x * y - 2 * j * x ^ 2) + j ^ 2 * x ^ 3 * y ^ -1, 22540], [-(j ^ 2) * x * y ^ -1, 9325], [-(j ^ 2) * x ^ 2 * y ^ -1, 14265], [-(j ^ 2) - j ^ 2 * x * y ^ -1, 14545], [-(j ^ 2) * x - j ^ 2 * x ^ 2 * y ^ -1, 23018], [-(j ^ 2) * x ^ 2 - j ^ 2 * x ^ 3 * y ^ -1, 17098], [-(j ^ 2) * x ^ 3 - j ^ 2 * x ^ 4 * y ^ -1, 8312], [j ^ 2 * y ^ -1, 24068], [j ^ 2 * x ^ 2 * y ^ -1, 9362], [j ^ 2 * x ^ 3 * y ^ -1, 14274, 14275, 14276], [j ^ 2 * x * y + (j ^ 2 - j) * x ^ 2 + j ^ 2 * x ^ 3 * y ^ -1, 22890], [j ^ 2 * x * y + (2 * j ^ 2 - j) * x ^ 2 + j ^ 2 * x ^ 3 * y ^ -1, 22919], [j ^ 2 * x + j ^ 2 * x ^ 2 * y ^ -1, 14554, 14555, 14556], [j ^ 2 * x ^ 2 + j ^ 2 * x ^ 3 * y ^ -1, 8275, 16958], [2 * j ^ 2 * x * y + (j ^ 2 - 2j) * x ^ 2 + j ^ 2 * x ^ 3 * y ^ -1, 22569], [((-2 * j ^ 2 + j) * x * y ^ 2 + 2 * j * x ^ 2 * y + (2 * j ^ 2 + 3j) * x ^ 3 + j * y ^ 3) - x ^ 4 * y ^ -1, 17728], [(j * x * y - j ^ 2 * x ^ 2) - j ^ 2 * x ^ 3 * y ^ -1, 17096], [(j * x * y ^ 2 + 2 * j * x ^ 2 * y + (2 * j ^ 2 + 3j) * x ^ 3) - x ^ 4 * y ^ -1, 17726], [-(x ^ -1) * y ^ -1, 9354, 18949, 19019], [x ^ -1 * y ^ -1, 14538, 24352], [-(x ^ -2) * y ^ -1, 9634]]) * x ^ 0 * y ^ 0
            end
        f33 = function (x, y, j)
                return dec(84, [[-2 * x ^ 2 * y ^ 3, 39400], [(-2 * x ^ 2 * y ^ 3 - 2 * x ^ 3 * y ^ 2) + x ^ 4 * y, 42268], [-2 * x * y ^ 3 - x ^ 2 * y ^ 2, 5737], [-2 * x ^ 2 * y - x ^ 3, 25127], [-2 * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2, 5722], [((-2 * x * y ^ 2 - x ^ 2 * y) - x ^ 3) - y ^ 3, 24719], [(((-2 * x * y ^ 5 - x ^ 2 * y ^ 4) + j * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y) + j ^ 2 * x ^ 6, 13361], [-2 * x * y + j ^ 2 * x ^ 2 + j * y ^ 2, 20887, 20971, 21055], [((-2 * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y) + (-2 * j ^ 2 - j) * x ^ 5, 21119], [((-2 * x * y ^ 2 + 2 * j ^ 2 * x ^ 2 * y) - j * x ^ 3) + (-(j ^ 2) + j) * y ^ 3, 20452, 21040], [((-2 * x ^ 3 * y ^ 3 + 3 * j ^ 2 * x ^ 4 * y ^ 2) - 2 * j * x ^ 5 * y) + (-2 * j ^ 2 - j) * x ^ 6, 21102], [-2 * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y, 6082], [-2 * x ^ 2 * y + (2 * j ^ 2 + j) * x ^ 3, 6076], [-2 * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y, 6250], [-2 * x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + j * x ^ 4, 6586], [-2 * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3 + 2 * j * x ^ 3 * y ^ 2 + j ^ 2 * y ^ 5, 42267], [((-2 * x * y ^ 3 + (j ^ 2 + 3j) * x ^ 2 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 3 * y) - j ^ 2 * x ^ 4) - j * y ^ 4, 20343], [-1, 348, 439, 865, 1182, 1547, 1789, 2306, 3077, 3497, 3500, 3587, 3920, 4154, 6299, 7058, 7315, 8661, 9018, 9361, 11316, 11490, 12923, 13007, 15747, 18119, 18265, 21264, 22368, 22961, 23043, 23883, 24670, 25437, 25772, 26284, 26363, 27295, 28565, 29173, 29251, 30256, 33168, 37073], [-x, 1104, 1774, 2710, 3417, 3480, 4143, 4573, 5104, 10037, 11559, 12301, 12980, 13005, 14633, 14883, 16221, 16227, 17751, 18709, 19895, 20409, 20735, 22453, 22461, 22546, 22607, 22955, 24466, 26336, 26352, 26361, 26750, 27107, 27114, 27461, 29158, 33396, 38164, 38591, 39699, 40119, 41391, 41909], [-y, 1887, 2033, 2727, 3810, 3979, 4098, 4686, 5190, 5245, 5358, 6096, 6376, 6968, 7916, 8245, 8434, 11630, 11811, 13349, 15886, 17671, 18017, 18199, 19291, 19358, 19610, 19634, 19711, 20036, 23048, 23949, 25259, 25270, 26351, 26362, 26414, 26861, 27117, 27799, 31986, 34163, 34170, 34844, 34933, 35020, 35187, 41574, 41575, 41827, 42164], [-x * y, 2191, 4084, 4312, 4402, 4672, 4732, 4918, 5756, 6264, 6596, 6869, 7572, 7994, 8924, 9432, 10098, 10809, 11194, 11554, 19347, 19948, 19965, 22263, 23108, 23946, 24464, 25247, 25320, 26166, 26171, 26339, 27355, 27532, 27792, 31268, 31374, 31618, 32362, 33028, 34146, 34151, 34503, 34755, 36042, 36127, 36134, 36557, 36973, 37051, 37052, 37146, 37386, 37914, 37986, 38838, 39273, 41568, 41820, 42233], [-x * y ^ 2, 5759, 6510, 6515, 6847, 11715, 12549, 12972, 15628, 16562, 17064, 19917, 19923, 20119, 23795, 24538, 25139, 25236, 25962, 26748, 27427, 32361, 32769, 33038, 34113, 40440, 41875, 42211, 42296, 42318], [-x * y ^ 3, 5742, 13473, 13809, 24870, 27165], [-x * y ^ 4, 5738, 14064], [-(x ^ 2), 1096, 4907, 5180, 5774, 6101, 6104, 6275, 6279, 6614, 11543, 11549, 11958, 13420, 14008, 15208, 16233, 17500, 17504, 18922, 18934, 19868, 20135, 20146, 20391, 20476, 20628, 20708, 21064, 21930, 22438, 22522, 23274, 23292, 23712, 24972, 25403, 25846, 26344, 27090, 27095, 28562, 29155, 29319, 32708, 35076, 38058, 39032, 41216], [-(y ^ 2), 3450, 3461, 6202, 6527, 6534, 6538, 6600, 6706, 10937, 11208, 16820, 18345, 18857, 23802, 24726, 25161, 25981, 26839, 33021, 33027, 39432], [-(x ^ 2) * y, 4582, 18911, 18921, 18926, 19942, 22525, 22684, 22936, 24449, 25222, 26734, 27057, 27083, 28205, 28209, 30243, 31594, 33032, 33363, 35262, 35702, 37136, 38143, 38831, 39004, 39254, 39674, 40074, 40092, 41111, 41188, 42314], [-(x ^ 2) * y ^ 2, 6054, 11520, 12957, 19919, 19934, 20109, 23692, 24535, 24542, 26318, 27406, 27729, 31946, 33970, 34130, 34804, 36627, 37046, 40421, 41020, 41505, 41854], [-(x ^ 2) * y ^ 3, 25876, 27404, 31424, 34800, 41016, 41852], [-(x ^ 2) * y ^ 4, 4537, 17726], [-(x ^ 3), 4890, 5768, 6084, 6263, 6608, 11526, 11951, 12370, 12888, 12971, 13136, 20123, 20133, 22435, 22440, 23702, 24962, 25386, 26327, 28560, 29653, 31172, 34054, 40356, 40366, 40691, 40697, 41470], [-(y ^ 3), 24873, 26805, 27763, 41539, 42322], [-(x ^ 3) * y, 6178, 6682, 13221, 13472, 13725, 13808, 20108, 20112, 23941, 27066, 27074, 27164, 27393, 28190, 31669, 32089, 33017, 33964, 34213, 34472, 35700, 36037, 37131, 37891, 37892, 38557, 38815, 39236, 40662, 40673, 41094, 41841], [-(x ^ 3) * y ^ 2, 6981, 12866, 13031, 25288, 26468, 27726, 31925, 33015, 33960, 34109, 34711, 37044, 41502, 41591], [-(x ^ 3) * y ^ 3, 23688, 24865], [-(x ^ 3) * y ^ 4, 17724, 25872, 31418], [-(x ^ 3) * y ^ 5, 4536], [-(x ^ 4), 6248, 20110, 22432, 31167, 40674, 41285, 41615], [-(y ^ 4), 40505], [-(x ^ 4) * y, 5975, 6994, 20087, 20102, 27390, 27403, 28168, 28175, 29652, 37887, 39231, 41255, 41586, 41771, 41838, 41851], [-(x ^ 4) * y ^ 2, 6812, 23940, 36036, 37886, 38556, 39230, 39313, 39901, 41257, 41760, 41924, 42176], [-(x ^ 4) * y ^ 4, 24864, 34778, 40994], [-(x ^ 5), 35218, 41598], [-(x ^ 5) * y, 41761], [-(x ^ 5) * y ^ 2, 27301, 27721, 28147, 34191, 39228, 41497, 41749], [-(x ^ 5) * y ^ 4, 34776, 40992], [-x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 23785, 25129], [-x * y ^ 4 - 2 * x ^ 2 * y ^ 3, 6479], [-(x ^ 4) * y ^ 3 - 2 * x ^ 5 * y ^ 2, 41752], [(((-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 26132], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 6148, 6652], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 6152, 6656], [(-x * y - 2 * x ^ 2) - j * y ^ 2, 22945], [(-x * y ^ 2 - 2 * x ^ 2 * y) - j * y ^ 3, 37047], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - j * x ^ 4, 20260], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 4 * y, 35048], [((-(x ^ 2) * y ^ 6 - 2 * x ^ 3 * y ^ 5) + (j ^ 2 + 2j) * x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 26460], [((-(x ^ 3) * y ^ 6 - 2 * x ^ 4 * y ^ 5) + (j ^ 2 + 2j) * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3, 41916], [(((-(x ^ 3) * y ^ 6 - 2 * x ^ 4 * y ^ 5) + (3 * j ^ 2 + 2j) * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3) + x ^ 7 * y ^ 2, 41748], [((-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + (-(j ^ 2) + 3j) * x ^ 3 * y + 2 * j * x ^ 4) - j * y ^ 4, 20589], [-x - y, 1369, 2027, 3472, 3892, 12996, 19459, 20208, 26358], [-x * y - x ^ 2, 673, 1354, 9765, 12986, 18519, 19030, 24802, 30247, 38837], [-x * y - y ^ 2, 3468, 3870, 3881, 3888, 6198, 6702, 10842, 11013, 15466, 20398, 25043, 25049, 25316], [-x * y ^ 2 - x ^ 2 * y, 4048, 4636, 4710, 4728, 5140, 5308, 11023, 14066, 19775, 20969, 24800, 26149, 26660, 31936, 34120, 36631], [-x * y ^ 2 - y ^ 3, 3458, 3878, 20169, 20175, 25045], [-x * y ^ 3 - x ^ 2 * y ^ 2, 4052, 4640, 4718, 4885, 5144, 5312, 6484, 11521, 20166, 20177, 31940, 34124], [-x * y ^ 4 - x ^ 2 * y ^ 3, 6488], [-(x ^ 2) * y - x ^ 3, 5560, 16646, 17906, 18499, 18919, 19876, 20118, 20201, 27064], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 672, 5148, 5564, 6072, 13220, 19758, 24785, 26309, 27068, 35037, 35043, 38816, 38821, 39000, 41166, 41184], [-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2, 4549, 5138, 6062, 38990, 41174], [-(x ^ 3) * y - x ^ 4, 18905, 26718, 34039, 35050], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 5736, 6576, 40250, 41597, 41675, 41681], [-(x ^ 3) * y ^ 3 - x ^ 4 * y ^ 2, 5726, 6145, 6566, 6649, 38810], [-(x ^ 4) * y - x ^ 5, 34025], [-(x ^ 4) * y ^ 2 - x ^ 5 * y, 34195], [-(x ^ 4) * y ^ 3 - x ^ 5 * y ^ 2, 38808], [(-x * y - x ^ 2) - y ^ 2, 24725], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 25133], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 5 * y, 27389, 41837], [(-(x ^ 2) * y ^ 5 - x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3, 26462], [(-(x ^ 3) * y ^ 5 - x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 41918], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 26150], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) + x ^ 4, 13708], [(-x * y ^ 5 - x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + (2 * j ^ 2 + 3j) * x ^ 5 * y + (2 * j ^ 2 + j) * x ^ 6, 13781], [(-(x ^ 2) * y ^ 7 - x ^ 3 * y ^ 6) + x ^ 4 * y ^ 5 + (j ^ 2 - 2j) * x ^ 5 * y ^ 4 + (j ^ 2 - 3j) * x ^ 6 * y ^ 3 + j ^ 2 * x ^ 7 * y ^ 2, 20916], [((-x * y ^ 5 - x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2, 27725, 41501], [(-x * y ^ 2 - x ^ 2 * y) - j * y ^ 3, 33031, 34119], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - j * y ^ 4, 6483], [(-x * y ^ 2 - x ^ 2 * y) - j ^ 2 * y ^ 3, 14065], [(-x * y ^ 4 - x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2, 20174], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 18410], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) + (-(j ^ 2) + j) * x ^ 4, 20614, 20782], [(-x * y ^ 2 - x ^ 2 * y) + j * x ^ 3, 20627, 20795], [(-(x ^ 3) * y ^ 2 - x ^ 4 * y) + j * x ^ 5, 35049], [(-(x ^ 4) * y ^ 3 - x ^ 5 * y ^ 2) + j * x ^ 6 * y, 25620], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + 2 * j * x ^ 3 * y ^ 2, 19844], [-x + y, 16984], [-x * y ^ 2 + x ^ 3, 5763], [-(x ^ 2) + y ^ 2, 26342, 30164], [-(x ^ 2) * y + x ^ 3, 19672], [-(x ^ 2) * y ^ 2 + x ^ 3 * y, 26303], [-(x ^ 2) * y ^ 3 + x ^ 4 * y, 14050], [-(x ^ 2) * y ^ 5 + x ^ 6 * y, 27388, 41836], [-(x ^ 3) * y ^ 3 + x ^ 5 * y, 41756], [-x * y ^ 2 + x ^ 2 * y + x ^ 3, 6603], [(-x * y ^ 2 + x ^ 2 * y + x ^ 3) - y ^ 3, 25122], [(((-x * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2) - 2 * j ^ 2 * x ^ 5 * y) - j ^ 2 * x ^ 6, 20672], [-x * y - j * x ^ 2, 20113], [-x * y ^ 2 - j * x ^ 3, 6174, 6179, 6678, 6683], [-x * y ^ 3 - j * x ^ 2 * y ^ 2, 6582, 20274], [-x * y ^ 4 - j * x ^ 2 * y ^ 3, 42282], [-x * y ^ 4 - j * x ^ 3 * y ^ 2, 27740, 41516], [-(x ^ 2) * y ^ 2 - j * x ^ 4, 13724], [-(x ^ 2) * y ^ 3 - j * x ^ 4 * y, 42284], [-(x ^ 2) * y ^ 4 - j * x ^ 3 * y ^ 3, 38392], [(-x * y ^ 4 - j * x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2 + j * x ^ 4 * y, 6578], [(-x * y ^ 4 - j * x ^ 2 * y ^ 3) + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 13377], [(((-x * y ^ 3 - j * x ^ 2 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 3 * y) - j ^ 2 * x ^ 4) + j * y ^ 4, 20616], [((-x * y ^ 3 - j * x ^ 3 * y) - j * x ^ 4) - j * y ^ 4, 6147], [-x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2, 20778], [(-(x ^ 3) * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y) - j * x ^ 5, 18903], [((-x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y) - j * x ^ 3) + (-(j ^ 2) + j) * y ^ 3, 20536, 20872, 20956], [((-(x ^ 2) * y ^ 6 + (j ^ 2 - j) * x ^ 3 * y ^ 5) - j ^ 2 * x ^ 4 * y ^ 4) + (-2 * j ^ 2 + j) * x ^ 5 * y ^ 3, 20330], [-(x ^ 2) * y ^ 4 + (j ^ 2 - j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 6475], [(-x * y ^ 5 - 3 * j ^ 2 * x ^ 2 * y ^ 4) + (-2 * j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (3 * j ^ 2 + 4j) * x ^ 4 * y ^ 2 + (5 * j ^ 2 + j) * x ^ 5 * y + (j ^ 2 - j) * x ^ 6, 21005], [-x - j ^ 2 * y, 25237, 26749], [-x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 9329, 20184], [-x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3, 24281], [-(x ^ 2) * y ^ 3 - j ^ 2 * x ^ 4 * y, 20502, 20838], [(((-(x ^ 2) * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2) - x ^ 5 * y) - x ^ 6, 20081], [(-x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3, 18420, 20370], [(-(x ^ 2) * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 11176], [(-(x ^ 3) * y ^ 4 - j ^ 2 * x ^ 4 * y ^ 3) - j ^ 2 * x ^ 5 * y ^ 2, 19825], [((-x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3) - y ^ 3, 16478], [((-x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) + j ^ 2 * y ^ 4, 19759], [(-(x ^ 2) * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) + (-(j ^ 2) + j) * x ^ 4 * y ^ 2 + (j ^ 2 + 2j) * x ^ 5 * y, 20671], [((-(x ^ 2) * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) + j * x ^ 4 * y ^ 2) - x ^ 5 * y, 19831], [((-(x ^ 2) * y ^ 4 - j ^ 2 * x ^ 4 * y ^ 2) + (3 * j ^ 2 + 2j) * x ^ 5 * y) - x ^ 6, 20678], [-x + j ^ 2 * y, 25238], [-x * y + j ^ 2 * x ^ 2, 4151, 13824, 13908, 20394, 20467, 20551], [-x * y + j ^ 2 * y ^ 2, 6170, 6506, 6674, 6863, 42227], [-x * y ^ 2 + j ^ 2 * x ^ 2 * y, 4898, 11192, 19355, 20291], [-x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 6059, 16971], [-x * y ^ 3 + j ^ 2 * x ^ 3 * y, 27742, 41518], [-(x ^ 2) * y + j ^ 2 * x ^ 3, 4134, 13413, 13497, 13833, 13917, 14001, 27189], [-(x ^ 2) * y ^ 2 + j ^ 2 * x ^ 3 * y, 13791, 13875, 19338, 20445, 20529, 20865, 21033], [-(x ^ 2) * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 13362, 13950, 18483, 26138, 39829], [-(x ^ 2) * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3, 6223, 16968, 19659], [-(x ^ 3) * y + j ^ 2 * x ^ 4, 13390, 13402, 13474, 13486, 13822, 13990, 27166, 27178], [-(x ^ 3) * y ^ 2 + j ^ 2 * x ^ 4 * y, 6055, 13367, 13955], [-(x ^ 3) * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 28163], [-(x ^ 3) * y ^ 4 + j ^ 2 * x ^ 4 * y ^ 3, 18480], [-(x ^ 3) * y ^ 5 + j ^ 2 * x ^ 4 * y ^ 4, 19656], [((-x * y ^ 5 + j ^ 2 * x ^ 2 * y ^ 4 + x ^ 4 * y ^ 2) - x ^ 5 * y) + j ^ 2 * x ^ 6, 13445, 27137], [((-x * y ^ 5 + j ^ 2 * x ^ 2 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y) + (2 * j ^ 2 + j) * x ^ 6, 13865], [((-x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y) + (-(j ^ 2) + j) * x ^ 4, 21115], [(-x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 14084], [(-x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2, 20586], [-x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 20265], [((-x * y ^ 2 + j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3) - y ^ 3, 21128], [-(x ^ 3) * y ^ 5 + j ^ 2 * x ^ 4 * y ^ 4 + j ^ 2 * x ^ 5 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 6 * y ^ 2, 42256], [(-(x ^ 2) * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 20349], [-x * y ^ 4 + 2 * j ^ 2 * x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 5136], [((-(x ^ 2) * y ^ 4 + 2 * j ^ 2 * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) + x ^ 5 * y, 5128], [-(x ^ 3) * y ^ 4 + 2 * j ^ 2 * x ^ 4 * y ^ 3 + (j ^ 2 - j) * x ^ 5 * y ^ 2, 13443, 27135], [-x * y ^ 3 + 2 * j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 14080], [-x * y ^ 4 + 2 * j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 6485], [-(x ^ 3) * y ^ 3 + 2 * j ^ 2 * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 6221], [(-x * y ^ 3 + 2 * j ^ 2 * x ^ 2 * y ^ 2 + j * x ^ 4) - j * y ^ 4, 20253], [-(x ^ 3) * y ^ 4 + 3 * j ^ 2 * x ^ 4 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 5 * y ^ 2, 13779], [-x * y ^ 5 + (-2 * j ^ 2 + j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 42271], [-x * y ^ 5 + (-2 * j ^ 2 + j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2 + 4 * j ^ 2 * x ^ 5 * y + (j ^ 2 - j) * x ^ 6, 20837], [(-x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + (-(j ^ 2) + j) * x ^ 3) - y ^ 3, 20546, 20882, 20966], [-x + j * y, 5189, 13002, 30176], [-x * y + j * x ^ 2, 8925, 31269], [-x * y + j * y ^ 2, 5167], [-x * y ^ 2 + j * x ^ 2 * y, 11193, 19866], [-x * y ^ 3 + j * x ^ 2 * y ^ 2, 42299], [-x * y ^ 3 + j * x ^ 3 * y, 13893], [-(x ^ 2) * y ^ 2 + j * x ^ 3 * y, 20689, 33968], [-(x ^ 2) * y ^ 3 + j * x ^ 4 * y, 33857], [-(x ^ 2) * y ^ 4 + j * x ^ 4 * y ^ 2, 42263], [-(x ^ 4) * y ^ 2 + j * x ^ 5 * y, 25622], [(-x * y + j * x ^ 2) - y ^ 2, 20639, 20807], [(-x * y ^ 7 + j * x ^ 2 * y ^ 6) - x ^ 3 * y ^ 5, 19404], [-x * y ^ 2 + j * x ^ 2 * y + (-2 * j ^ 2 - j) * x ^ 3, 18490], [-(x ^ 2) * y ^ 4 + j * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2 + x ^ 5 * y, 6564], [(-x * y ^ 2 + j * x ^ 2 * y) - j * y ^ 3, 26307], [((((-x * y ^ 5 + j * x ^ 2 * y ^ 4) - 3 * j ^ 2 * x ^ 3 * y ^ 3) - 2 * j ^ 2 * x ^ 4 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 5 * y) - j ^ 2 * x ^ 6, 19832], [(-x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * x ^ 3, 20375], [((-(x ^ 3) * y ^ 4 + j * x ^ 4 * y ^ 3) - j ^ 2 * x ^ 5 * y ^ 2) + x ^ 6 * y, 6556], [-x * y ^ 2 + j * x ^ 2 * y + j ^ 2 * x ^ 3, 25216], [-x * y ^ 3 + j * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 42294], [-x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3, 26721], [-x * y ^ 3 + j * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 33871], [-(x ^ 2) * y ^ 2 + j * x ^ 3 * y + j * x ^ 4, 26731], [(-(x ^ 2) * y ^ 4 + j * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2 + (3 * j ^ 2 + 2j) * x ^ 5 * y) - x ^ 6, 19838], [(-x * y ^ 4 + j * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 18987], [(-(x ^ 2) * y ^ 5 + j * x ^ 3 * y ^ 4 + (j ^ 2 + 2j) * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 18984], [-x * y + (2 * j ^ 2 + j) * x ^ 2, 20388], [-x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2, 6065], [-(x ^ 2) * y + (2 * j ^ 2 + j) * x ^ 3, 6183, 6687], [-(x ^ 3) * y + (2 * j ^ 2 + j) * x ^ 4, 20363], [-(x ^ 3) * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y, 13451, 13787, 13871, 27143], [(-(x ^ 2) * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y) - x ^ 4, 20693], [-(x ^ 3) * y ^ 5 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 4 + x ^ 6 * y ^ 2, 41750], [((-(x ^ 3) * y ^ 7 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 6) - j ^ 2 * x ^ 5 * y ^ 5) + j * x ^ 6 * y ^ 4, 6972], [-x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y + j ^ 2 * x ^ 3, 20967], [-x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 6496], [-x * y ^ 5 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3, 5293], [-(x ^ 2) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 4873, 4876], [-(x ^ 2) * y ^ 6 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 5 + j ^ 2 * x ^ 4 * y ^ 4, 5292], [-(x ^ 3) * y ^ 4 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 3 + j ^ 2 * x ^ 5 * y ^ 2, 4872], [-x * y ^ 5 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 21095], [-(x ^ 2) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 20591], [-(x ^ 2) * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y, 6053], [-(x ^ 2) * y ^ 5 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 4 + (4 * j ^ 2 + 2j) * x ^ 4 * y ^ 3 + (3 * j ^ 2 + j) * x ^ 5 * y ^ 2, 13863], [(-x * y ^ 5 + (3 * j ^ 2 + j) * x ^ 2 * y ^ 4 + (3 * j ^ 2 - j) * x ^ 3 * y ^ 3) - 2 * j * x ^ 4 * y ^ 2, 20593], [-x * y ^ 4 + (3 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + (3 * j ^ 2 + 2j) * x ^ 4 * y + j ^ 2 * x ^ 5, 13963], [(-(x ^ 2) * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 3 * y + 2 * j * x ^ 4) - j * y ^ 4, 20757], [-x * y + (j ^ 2 + 2j) * x ^ 2, 19893, 20733], [-x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2, 26312], [-(x ^ 3) * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2, 34697], [(-(x ^ 3) * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 35216], [-(x ^ 3) * y ^ 4 + (j ^ 2 + 2j) * x ^ 4 * y ^ 3 + x ^ 6 * y, 5716], [-(x ^ 2) * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 5724], [(-x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y) - j * y ^ 3, 25215, 37976], [-x * y + (j ^ 2 + 2j) * x ^ 2 + j ^ 2 * y ^ 2, 20366], [-(x ^ 3) * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y + j * x ^ 6, 41593, 41677], [-(x ^ 2) * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (j ^ 2 + 3j) * x ^ 4 * y ^ 2 + (j ^ 2 + 2j) * x ^ 5 * y, 13872], [((-x * y ^ 5 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3) + (-4 * j ^ 2 + j) * x ^ 4 * y ^ 2 + (-3 * j ^ 2 + j) * x ^ 5 * y + 2 * j ^ 2 * x ^ 6, 21094], [-x * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 4884], [-x * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y, 6067], [(-(x ^ 2) * y ^ 5 + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 4 + (4 * j ^ 2 + j) * x ^ 4 * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 5 * y ^ 2) - 2 * x ^ 6 * y, 26126], [((-x * y ^ 3 + (j ^ 2 + 3j) * x ^ 2 * y ^ 2 + (j ^ 2 + 3j) * x ^ 3 * y) - x ^ 4) + j ^ 2 * y ^ 4, 6561], [(-x * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 6562], [-x * y ^ 2 + (2 * j ^ 2 + 3j) * x ^ 2 * y + (j ^ 2 + 2j) * x ^ 3, 23782], [1, 614, 1187, 1773, 1779, 2403, 2908, 3495, 3915, 8070, 8604, 9100, 9786, 11888, 17761, 18969, 21433, 21863, 25861, 26537, 26619, 28737, 29157, 29336, 29410, 29667, 29758, 30775, 32051], [x, 170, 253, 255, 680, 1105, 1190, 1360, 1699, 1700, 1785, 1955, 2022, 2040, 2465, 2565, 2651, 2720, 3170, 3298, 3479, 3485, 4159, 4165, 4590, 4598, 4675, 4925, 4928, 4930, 5185, 5355, 5592, 5780, 6035, 6120, 6205, 6459, 6545, 6630, 6715, 6802, 6885, 7141, 7735, 7736, 7991, 8162, 8746, 8936, 9181, 9266, 9351, 9521, 9522, 9776, 9928, 10302, 10881, 11051, 11215, 11221, 11396, 11561, 11564, 11986, 12071, 12326, 12411, 12581, 12583, 13006, 13176, 13256, 13261, 13431, 13516, 13598, 13770, 13771, 13856, 13941, 14026, 14111, 14197, 14199, 14707, 14708, 14973, 15047, 16237, 16322, 16492, 16662, 16758, 17002, 17602, 17878, 17937, 18447, 18532, 18696, 18780, 18872, 18950, 18952, 19042, 19385, 19467, 19715, 19722, 19807, 20147, 20232, 20487, 21082, 21167, 21678, 21957, 22032, 22437, 22443, 22528, 22698, 23718, 24143, 24228, 24313, 24476, 24483, 24908, 24993, 25078, 25254, 25673, 25928, 26183, 26438, 26523, 26766, 26863, 27096, 27208, 27458, 27798, 27968, 28053, 28138, 28223, 28564, 28734, 29159, 29174, 29244, 29329, 29407, 29414, 29669, 29754, 30179, 30264, 30519, 30604, 30689, 30774, 31029, 31199, 31280, 31284, 31369, 31454, 31624, 31709, 31879, 31964, 32049, 32134, 32389, 32474, 32559, 32729, 32814, 32984, 33069, 33324, 33409, 33494, 33664, 33749, 33919, 34014, 34089, 34174, 34259, 34435, 34514, 34606, 34688, 34769, 35109, 35279, 35705, 36045, 36130, 36555, 36640, 36895, 36980, 37065, 37150, 37405, 37575, 37915, 38000, 38085, 38170, 38425, 38510, 38595, 38680, 38850, 38935, 39020, 39275, 39360, 39445, 39530, 39700, 39870, 39955, 40125, 40295, 40380, 40465, 40550, 40720, 40805, 40890, 40975, 41060, 41145, 41230, 41315, 41485, 41655, 41740, 41906, 41993, 42081, 42249], [y, 510, 765, 935, 1275, 1353, 1359, 1445, 2805, 3490, 3740, 4169, 4250, 4580, 4668, 4828, 5162, 5172, 5340, 5436, 5695, 5865, 5950, 6114, 7396, 7481, 9165, 9861, 10201, 10456, 10535, 10711, 12241, 12496, 12751, 12836, 13686, 15381, 15472, 15546, 16152, 16407, 17172, 17342, 18617, 19212, 19290, 19552, 19704, 21338, 21593, 22109, 22783, 22868, 23463, 23633, 24058, 24398, 25060, 25588, 27713, 28224, 28309, 28394, 28479, 28649, 28819, 28904, 28989, 29074, 29499, 29584, 29839, 29924, 30009, 30094, 30349, 30434, 30610, 30859, 30944, 31114, 31203, 31539, 31794, 31968, 32219, 32304, 32560, 32644, 32815, 32899, 33064, 33239, 33491, 33579, 33834, 34152, 35280, 35365, 35450, 35535, 35620, 35790, 35875, 35960, 36215, 36300, 36385, 36470, 36725, 36810, 37235, 37320, 37490, 37660, 37745, 37830, 38255, 38340, 38765, 39105, 39190, 39615, 39785, 40040, 40210, 40644], [x * y, 1012, 1601, 2110, 2447, 2453, 2958, 3219, 4152, 4488, 4750, 4998, 5151, 5750, 6282, 6590, 7046, 7224, 7647, 7831, 7993, 9175, 9599, 11204, 12146, 12559, 12652, 13089, 17269, 17407, 18925, 19115, 19363, 19369, 19960, 20796, 22177, 23198, 23285, 24303, 24959, 24965, 26081, 26155, 26754, 26934, 27014, 27612, 27876, 30681, 31363, 31600, 32372, 32715, 33479, 34135, 34330, 35704, 36648, 36888, 37391, 37406, 39424, 42330, 42331], [x * y ^ 2, 84, 3456, 4878, 5743, 6499, 11103, 11190, 11514, 11525, 12969, 13231, 13735, 14364, 14786, 15965, 19245, 19356, 19933, 19941, 21504, 23527, 23864, 24960, 25039, 25478, 25967, 25982, 26169, 26317, 26325, 31455, 31945, 31954, 34129, 34138, 38416, 39414, 40085, 42300], [x * y ^ 3, 5757, 9668, 30500, 38412, 40512], [x * y ^ 5, 19573, 26377], [x ^ 2, 1685, 3462, 4592, 4908, 5749, 6033, 6589, 7731, 9515, 11544, 12993, 14703, 16222, 16304, 16655, 17915, 18928, 18932, 18935, 19703, 20120, 20136, 20145, 21165, 22439, 22454, 22532, 22939, 24463, 26349, 27079, 29233, 29744, 32030, 32698, 34072, 35091, 38668, 39515, 40880, 41979], [y ^ 2, 5503, 6516, 6618, 18862, 19373, 23036, 33037, 40539], [x ^ 2 * y, 252, 5170, 5578, 5739, 6094, 6579, 7035, 7730, 14095, 14196, 14702, 17493, 18663, 18840, 18910, 19855, 22519, 22526, 25232, 25302, 25379, 26744, 26999, 27073, 30583, 30667, 30668, 31604, 32534, 32695, 32696, 32954, 35244, 36877, 36963, 37394, 38664, 39022, 39358, 39497, 39941, 40281, 40450, 41206, 42289], [x ^ 2 * y ^ 2, 4716, 19918, 24949, 25970, 26981, 27059, 27416, 27753, 31435, 31591, 34449, 37972, 40422, 41087, 41529, 41864], [x ^ 2 * y ^ 3, 21123, 23858, 31340, 33440], [x ^ 2 * y ^ 4, 5719, 9326, 9662, 30494], [x ^ 2 * y ^ 5, 19574, 24278, 26378], [x ^ 3, 6083, 6185, 6188, 6689, 6692, 12380, 12893, 13126, 13134, 16299, 20128, 21147, 21936, 26326, 26338, 28729, 29234, 29739, 30751, 30752, 31676, 32012, 35255, 35259, 38064, 38564, 39498, 40361, 40692, 40702, 41638, 41722], [y ^ 3, 18402, 18413, 24897, 26829, 33457], [x ^ 3 * y, 3868, 5563, 5758, 6598, 7728, 9242, 12863, 12947, 13055, 13462, 13798, 14700, 16298, 18907, 20098, 20101, 22515, 24112, 26135, 26479, 26982, 27154, 27341, 27417, 31165, 32681, 34462, 36541, 36878, 40259, 40262, 40850, 41865], [x ^ 3 * y ^ 2, 12865, 19915, 19920, 25120, 30662, 31587, 31927, 32090, 34111, 38988, 41767], [x ^ 3 * y ^ 3, 34700, 40492], [x ^ 3 * y ^ 4, 9324, 38390, 40490], [x ^ 3 * y ^ 5, 24276], [x ^ 4, 5999, 6066, 6168, 6238, 6672, 13127, 20111, 21928, 25811, 30747, 31671, 32007, 35243, 38056, 38559, 41280, 41616, 41626, 41700, 41710], [y ^ 4, 19591, 26395], [x ^ 4 * y, 4037, 4625, 6474, 7004, 9240, 13038, 16296, 25800, 27055, 28174, 28728, 30746, 32006, 34214, 39908, 40668, 41935], [x ^ 4 * y ^ 2, 19912, 30660, 31164, 32930, 36540, 41258], [x ^ 4 * y ^ 3, 39314], [x ^ 4 * y ^ 4, 38388], [x ^ 5, 5982, 25801, 35228, 41435], [x ^ 5 * y, 27308, 27396, 31668, 32004, 39903, 40660, 41424, 41844], [x ^ 5 * y ^ 2, 40826, 41581], [x ^ 6, 41425], [x ^ 6 * y, 27303], [x ^ 6 * y ^ 2, 39900], [x ^ 7 * y ^ 2, 27300, 34188], [(x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 6580], [x * y - x ^ 2, 18496], [x * y ^ 3 - x ^ 2 * y ^ 2, 20694], [x * y ^ 4 - x ^ 3 * y ^ 2, 5729], [x ^ 2 * y ^ 2 - x ^ 4, 12954], [x ^ 2 * y ^ 3 - x ^ 4 * y, 14060], [(x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 6569], [(x ^ 2 * y ^ 2 - x ^ 3 * y) - x ^ 4, 5740], [(x * y ^ 3 - x ^ 3 * y) + (j ^ 2 - j) * x ^ 4, 21126], [(x * y ^ 5 - x ^ 3 * y ^ 3) + (j ^ 2 + 2j) * x ^ 4 * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 5 * y + (-2 * j ^ 2 - j) * x ^ 6, 20333], [(x * y ^ 4 - x ^ 2 * y ^ 3) + (2 * j ^ 2 + 4j) * x ^ 3 * y ^ 2 + x ^ 5, 26297], [x + y, 85, 1020, 1615, 2125, 2210, 2975, 3230, 3315, 3825, 3910, 3995, 4080, 4335, 4420, 4505, 4845, 5015, 5270, 5440, 5525, 6375, 6970, 7055, 7226, 7566, 7651, 7821, 7906, 8246, 8416, 9096, 9606, 9691, 10116, 10541, 10796, 10966, 11136, 11646, 11731, 11816, 12156, 12666, 13091, 13346, 14367, 14792, 15387, 15557, 15642, 15897, 15982, 16577, 16832, 17087, 17427, 17682, 17767, 18022, 18192, 18277, 18362, 19127, 19297, 19452, 19637, 19977, 20062, 20215, 21508, 22103, 22188, 22273, 23038, 23123, 23208, 23548, 23803, 23973, 24568, 24738, 25163, 25503, 26013, 26098, 26948, 27033, 27373, 27543, 27628, 27883, 34344, 34854, 34939, 35024, 35194, 40635, 41570, 41825, 42165, 42335], [x * y + x ^ 2, 168, 1944, 11536, 15477, 17898, 17909, 18845, 19025, 22536, 22940, 23279, 24812], [x * y + y ^ 2, 6180, 6684, 16142, 21336, 25306], [x * y ^ 2 + x ^ 2 * y, 3876, 4041, 4047, 4066, 4654, 4715, 4896, 5752, 5769, 6064, 6592, 6609, 10848, 11532, 14082, 18822, 18833, 20633, 23021, 25233, 26650, 33022, 40079], [x * y ^ 2 + y ^ 3, 3457, 3877, 18990, 19001, 19413, 19419, 25142, 25304], [x * y ^ 3 + x ^ 2 * y ^ 2, 4042, 4630, 4717, 4886, 6068, 6568, 11522, 23779, 23780, 25035, 25124, 25289, 26130, 26648], [x * y ^ 4 + x ^ 2 * y ^ 3, 6572], [x ^ 2 * y + x ^ 3, 1936, 5569, 16048, 16645, 17905, 19881, 20126, 20206, 20379, 20721, 40265], [x ^ 2 * y ^ 2 + x ^ 3 * y, 4051, 4560, 4639, 13210, 35053, 38822, 38987, 40242, 40253, 41171], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 4550, 5137, 6061, 13208, 26633, 38989, 41173], [x ^ 2 * y ^ 6 + x ^ 3 * y ^ 5, 19572, 26376], [x ^ 3 * y + x ^ 4, 19858, 29232], [x ^ 3 * y ^ 2 + x ^ 4 * y, 6138, 6156, 6642, 6660, 31670, 36876, 40244, 40249], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 5725, 6146, 6565, 6650, 13193, 28160], [x ^ 4 * y + x ^ 5, 20094, 26724], [x ^ 4 * y ^ 2 + x ^ 5 * y, 41592], [x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 25790, 39902, 40238], [x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 27302, 41414], [x * y ^ 2 + x ^ 2 * y + x ^ 3, 23796, 25140, 26153], [x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4 + x ^ 5 * y ^ 2, 42259], [x ^ 2 * y ^ 6 + x ^ 3 * y ^ 5 + x ^ 4 * y ^ 4, 34694], [x * y ^ 5 + x ^ 2 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2 + (-2 * j ^ 2 - 3j) * x ^ 5 * y + x ^ 6, 20840, 21008], [(x * y + x ^ 2) - j * y ^ 2, 12976], [(x * y ^ 2 + x ^ 2 * y) - j * x ^ 3, 20879, 20963], [x ^ 3 * y ^ 2 + x ^ 4 * y + (j ^ 2 - j) * x ^ 5, 35038], [(x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3) - j ^ 2 * x ^ 5 * y ^ 2, 28148], [x * y ^ 6 + x ^ 2 * y ^ 5 + (-2 * j ^ 2 + j) * x ^ 3 * y ^ 4 + (-2 * j ^ 2 + 2j) * x ^ 4 * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 5 * y ^ 2, 20331], [x * y ^ 2 + x ^ 2 * y + j * y ^ 3, 33441, 33447], [(x * y ^ 3 + x ^ 2 * y ^ 2 + j * x ^ 3 * y) - x ^ 4, 21135], [x ^ 3 * y ^ 6 + x ^ 4 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 5 * y ^ 4 + 3 * j ^ 2 * x ^ 6 * y ^ 3, 13776], [(x * y ^ 5 + x ^ 2 * y ^ 4 + (3 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (6 * j ^ 2 + 2j) * x ^ 4 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 5 * y) - x ^ 6, 20677], [x * y ^ 4 + x ^ 2 * y ^ 3 + (4 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + (5 * j ^ 2 + 3j) * x ^ 4 * y + j ^ 2 * x ^ 5, 20674], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2, 23786, 25130, 31930, 34114], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 27058], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3, 23774, 25118], [x ^ 3 * y + 2 * x ^ 4, 35060], [x ^ 4 * y ^ 2 + 2 * x ^ 5 * y, 25792], [x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 41416], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 5554], [x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 28145], [x ^ 4 * y ^ 4 + 2 * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 25788], [x ^ 5 * y ^ 4 + 2 * x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 41412], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 26147], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + j * x ^ 4 * y, 20600], [x ^ 2 * y ^ 7 + 2 * x ^ 3 * y ^ 6 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4, 34692], [((x ^ 2 * y ^ 5 + 2 * x ^ 3 * y ^ 4) - 2 * j ^ 2 * x ^ 4 * y ^ 3) + j * x ^ 5 * y ^ 2, 35031], [((x ^ 2 * y ^ 6 + 2 * x ^ 3 * y ^ 5) - j ^ 2 * x ^ 4 * y ^ 4) - j ^ 2 * x ^ 5 * y ^ 3, 26292], [(x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 20927], [x ^ 2 * y ^ 5 + 3 * x ^ 3 * y ^ 4 + (-3 * j ^ 2 - j) * x ^ 4 * y ^ 3 + (j ^ 2 + 4j) * x ^ 5 * y ^ 2 + (j ^ 2 + 2j) * x ^ 6 * y, 21096], [x * y ^ 4 + (-3 * j ^ 2 - 4j) * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 6142], [x * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 3, 6478], [x * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y, 20768], [x * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y + j * x ^ 4, 20428, 20512], [(x * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2, 6646], [x * y ^ 4 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 3 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + 3 * x ^ 4 * y + 2 * x ^ 5, 26137], [x * y ^ 5 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 4 + (-4 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y, 24698], [x * y ^ 5 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2, 26295], [x * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y, 5311], [(((x ^ 2 * y ^ 7 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 6) - 2 * j ^ 2 * x ^ 4 * y ^ 5) - x ^ 5 * y ^ 4) + (j ^ 2 - j) * x ^ 6 * y ^ 3, 13356], [(x ^ 2 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 6060], [x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2, 33956], [x ^ 3 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 4 * y, 19835, 20675, 26465], [x ^ 3 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2, 41753], [x ^ 4 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 5 * y, 41921], [x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + x ^ 3 * y, 26141], [x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 6236], [x ^ 2 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + j * x ^ 5 * y, 13697], [x * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 3 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 4 * y, 13866], [(x * y ^ 5 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 4 + (3 * j ^ 2 - 2j) * x ^ 3 * y ^ 3 + (5 * j ^ 2 - j) * x ^ 4 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 5 * y) - x ^ 6, 19837], [((x ^ 4 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 5 * y ^ 2) - j * x ^ 6 * y) - j * x ^ 7, 41583, 41667], [(((x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) + 3 * x ^ 3 * y) - j ^ 2 * x ^ 4) - j ^ 2 * y ^ 4, 20848, 21016], [((x * y ^ 2 - 2 * j * x ^ 2 * y) - 2 * j * x ^ 3) + y ^ 3, 20294, 20630, 20798], [(((x * y ^ 5 - 2 * j * x ^ 2 * y ^ 4) - 2 * j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 5 * y + (2 * j ^ 2 + j) * x ^ 6, 21103], [(((x ^ 2 * y ^ 6 - 2 * j * x ^ 3 * y ^ 5) - j * x ^ 4 * y ^ 4) + x ^ 5 * y ^ 3 + j * x ^ 6 * y ^ 2) - x ^ 7 * y, 21085], [x * y ^ 3 + (j ^ 2 - 2j) * x ^ 2 * y ^ 2 + 3 * j ^ 2 * x ^ 3 * y, 26302], [(x ^ 2 * y ^ 3 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (j ^ 2 + 2j) * x ^ 4 * y) - x ^ 5, 21120], [x * y + (-2 * j ^ 2 - j) * x ^ 2, 6099, 13500, 13509, 13836, 13845, 13920, 13929, 27192, 27201], [x ^ 2 * y + (-2 * j ^ 2 - j) * x ^ 3, 13490, 13826, 13910, 27182], [x ^ 3 * y + (-2 * j ^ 2 - j) * x ^ 4, 13475, 13811, 13895, 27167], [((x * y ^ 6 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 5) - x ^ 3 * y ^ 4) + 4 * j ^ 2 * x ^ 4 * y ^ 3 + (2 * j ^ 2 - 2j) * x ^ 5 * y ^ 2, 21098], [x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y + y ^ 3, 21154], [x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y, 6166], [x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y, 5297], [(x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 6052], [(x ^ 2 * y ^ 7 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 6 + j ^ 2 * x ^ 4 * y ^ 5) - j * x ^ 5 * y ^ 4, 34440], [x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 20587], [(x * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 4 * y) - 2 * j ^ 2 * x ^ 5, 21100], [x ^ 2 * y ^ 6 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 4 + 3 * j ^ 2 * x ^ 5 * y ^ 3, 13778], [x - j * y, 20993], [x * y ^ 2 - j * x ^ 2 * y, 5158, 19776], [x * y ^ 2 - j * y ^ 3, 30159], [x * y ^ 3 - j * y ^ 4, 40514], [x * y ^ 5 - j * x ^ 3 * y ^ 3, 13952], [x ^ 2 * y - j * x ^ 3, 32697], [x ^ 2 * y ^ 2 - j * x ^ 3 * y, 33958], [x ^ 3 * y ^ 2 - j * x ^ 4 * y, 20690, 24194], [x ^ 6 * y ^ 2 - j * x ^ 7 * y, 41582, 41666], [(x * y ^ 2 - j * x ^ 2 * y) - y ^ 3, 5149], [(x * y - j * x ^ 2) + y ^ 2, 20891, 20975], [((x * y ^ 4 - j * x ^ 2 * y ^ 3) + (j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (j ^ 2 - 2j) * x ^ 4 * y) - j * x ^ 5, 20431], [(x * y ^ 2 - j * x ^ 2 * y) - j * x ^ 3, 4629, 4635], [(x * y ^ 3 - j * x ^ 2 * y ^ 2) - j * x ^ 4, 21131], [((x ^ 3 * y ^ 5 - j * x ^ 4 * y ^ 4) + (j ^ 2 - j) * x ^ 5 * y ^ 3) - j * x ^ 6 * y ^ 2, 20078], [(x ^ 2 * y ^ 5 - j * x ^ 3 * y ^ 4) + (j ^ 2 - j) * x ^ 4 * y ^ 3 + 2 * j ^ 2 * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y, 21001], [(x * y ^ 2 - j * x ^ 2 * y) - j ^ 2 * y ^ 3, 6854, 42218], [(x * y ^ 3 - j * x ^ 3 * y) - j ^ 2 * x ^ 4, 13372], [(x ^ 2 * y ^ 2 - j * x ^ 3 * y) + j ^ 2 * x ^ 4, 25218], [((x * y ^ 4 - j * x ^ 2 * y ^ 3) + 3 * j ^ 2 * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y) - x ^ 5, 19847], [(((x ^ 2 * y ^ 7 - j * x ^ 3 * y ^ 6) + j * x ^ 4 * y ^ 5 + (-2 * j ^ 2 + 2j) * x ^ 5 * y ^ 4) - 4 * j ^ 2 * x ^ 6 * y ^ 3) + x ^ 7 * y ^ 2, 20328], [((x * y ^ 4 - j * x ^ 2 * y ^ 3) + (j ^ 2 + 2j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 5718], [x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2 + y ^ 4, 5135], [x * y ^ 4 + (j ^ 2 - j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (4 * j ^ 2 - j) * x ^ 4 * y + (j ^ 2 - j) * x ^ 5, 21019], [(x ^ 3 * y ^ 7 + (2 * j ^ 2 - j) * x ^ 4 * y ^ 6 + 2 * j ^ 2 * x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 7 * y ^ 3) - x ^ 8 * y ^ 2, 21084], [((x ^ 2 * y ^ 6 - 2 * j ^ 2 * x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) + 2 * j ^ 2 * x ^ 5 * y ^ 3, 13442, 27134], [((x * y ^ 6 - 2 * j ^ 2 * x ^ 2 * y ^ 5) - x ^ 3 * y ^ 4) + 2 * j ^ 2 * x ^ 4 * y ^ 3 + (j ^ 2 - j) * x ^ 5 * y ^ 2, 13359], [(x ^ 2 * y ^ 4 - 2 * j ^ 2 * x ^ 3 * y ^ 3) + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2, 12939], [(x ^ 4 * y ^ 3 - 2 * j ^ 2 * x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y, 35201], [((x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) - j * y ^ 4, 14068], [(x * y ^ 5 - 2 * j ^ 2 * x ^ 2 * y ^ 4) + (2 * j ^ 2 + 3j) * x ^ 3 * y ^ 3 + 3 * j ^ 2 * x ^ 4 * y ^ 2, 21108], [x * y - j ^ 2 * x ^ 2, 13400, 13416, 13422, 13425, 13484, 13506, 13820, 13904, 13988, 14004, 14013, 20979, 27176, 27198], [x * y ^ 2 - j ^ 2 * x ^ 2 * y, 20459, 20543], [x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 6591, 13890, 24710], [x * y ^ 3 - j ^ 2 * x ^ 3 * y, 27752, 41528], [x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3, 5299, 40500, 42291], [x ^ 2 * y - j ^ 2 * x ^ 3, 13406, 13408, 13492, 13994, 21150, 27184], [x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 4879, 6074, 6574, 35062], [x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2, 13883, 19249, 31337], [x ^ 2 * y ^ 3 - j ^ 2 * x ^ 4 * y, 42280], [x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3, 35035], [x ^ 3 * y - j ^ 2 * x ^ 4, 13391, 13979, 20453, 20537, 20873, 21041, 41608, 41692], [x ^ 3 * y ^ 2 - j ^ 2 * x ^ 4 * y, 13373, 13457, 13793, 13961, 20418, 21006, 27149], [x ^ 3 * y ^ 3 - j ^ 2 * x ^ 4 * y ^ 2, 13368, 13956], [x ^ 3 * y ^ 4 - j ^ 2 * x ^ 4 * y ^ 3, 35203], [x ^ 4 * y ^ 2 - j ^ 2 * x ^ 5 * y, 41587, 41671], [((x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) + (j ^ 2 - j) * x ^ 5 * y, 20755], [((x * y ^ 2 - j ^ 2 * x ^ 2 * y) - x ^ 3) + j ^ 2 * y ^ 3, 20695], [((x ^ 3 * y ^ 6 - j ^ 2 * x ^ 4 * y ^ 5) - x ^ 5 * y ^ 4) + 2 * j ^ 2 * x ^ 6 * y ^ 3, 13440, 27132], [(x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 24703], [(x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) - j * x ^ 5 * y, 20251], [(x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2 + y ^ 5, 21117], [(x ^ 3 * y ^ 6 - j ^ 2 * x ^ 4 * y ^ 5) + j ^ 2 * x ^ 5 * y ^ 4 + 2 * j ^ 2 * x ^ 6 * y ^ 3, 21086], [(x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y, 14079], [(x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) + j * x ^ 4 * y ^ 2, 37968], [((x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j * x ^ 3) - j * y ^ 3, 20284, 20620, 20788], [(x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 3 * y + 2 * j ^ 2 * x ^ 4, 20962], [(x ^ 2 * y ^ 6 - j ^ 2 * x ^ 3 * y ^ 5) + (3 * j ^ 2 + 2j) * x ^ 4 * y ^ 4 + (3 * j ^ 2 + j) * x ^ 5 * y ^ 3, 13862], [x * y + j ^ 2 * y ^ 2, 19790], [x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 17729, 19854], [x * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 2, 42285], [x ^ 2 + j ^ 2 * y ^ 2, 26332], [x ^ 2 * y ^ 2 + j ^ 2 * x ^ 4, 26730], [x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + y ^ 4, 18998], [x ^ 2 * y ^ 4 + j ^ 2 * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 14046], [x * y ^ 6 + (-2 * j ^ 2 + j) * x ^ 2 * y ^ 5 + (j ^ 2 + 4j) * x ^ 3 * y ^ 4 + (2 * j ^ 2 + 4j) * x ^ 4 * y ^ 3 + (3 * j ^ 2 + 4j) * x ^ 5 * y ^ 2 + (3 * j ^ 2 + j) * x ^ 6 * y + j ^ 2 * x ^ 7, 20751], [((x * y ^ 6 + (-2 * j ^ 2 + j) * x ^ 2 * y ^ 5 + (j ^ 2 + 4j) * x ^ 3 * y ^ 4 + (3 * j ^ 2 + 4j) * x ^ 4 * y ^ 3) - 4 * x ^ 5 * y ^ 2) + (3 * j ^ 2 + 2j) * x ^ 6 * y + j ^ 2 * x ^ 7, 20247], [(x ^ 3 * y ^ 4 + (-(j ^ 2) + j) * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 6807, 42171], [(x * y ^ 4 + (-(j ^ 2) + j) * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2, 6494], [x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y + j * x ^ 5, 17475], [x * y ^ 2 + j * x ^ 2 * y, 19851, 20275, 20691], [x * y ^ 2 + j * x ^ 3, 6163, 6667], [x * y ^ 3 + j * x ^ 2 * y ^ 2, 6597], [x * y ^ 3 + j * x ^ 3 * y, 14070], [x ^ 2 * y + j * y ^ 3, 31929], [x ^ 2 * y ^ 2 + j * x ^ 4, 13714], [x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3, 32763], [x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3, 34780, 40996], [x ^ 4 * y ^ 2 + j * x ^ 5 * y, 40912], [x ^ 4 * y ^ 3 + j * x ^ 5 * y ^ 2, 33940], [((x * y ^ 3 + j * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) + (2 * j ^ 2 + j) * x ^ 4, 20952], [((x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - j * x ^ 5 * y, 6559], [x * y + j * x ^ 2 + j ^ 2 * y ^ 2, 19861, 20701], [x * y ^ 3 + j * x ^ 2 * y ^ 2 + j ^ 2 * y ^ 4, 20442, 20526], [x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + (j ^ 2 + 2j) * x ^ 4 * y, 13712], [(((x ^ 2 * y ^ 7 + j * x ^ 3 * y ^ 6 + (3 * j ^ 2 + 4j) * x ^ 4 * y ^ 5) - 4 * x ^ 5 * y ^ 4) - 5 * x ^ 6 * y ^ 3) + (4 * j ^ 2 + 2j) * x ^ 7 * y ^ 2 + j ^ 2 * x ^ 8 * y, 20244], [((x ^ 2 * y ^ 7 + j * x ^ 3 * y ^ 6 + (4 * j ^ 2 + 5j) * x ^ 4 * y ^ 5) - 5 * x ^ 5 * y ^ 4) + (3 * j ^ 2 + 5j) * x ^ 6 * y ^ 3 + (3 * j ^ 2 + j) * x ^ 7 * y ^ 2 + j ^ 2 * x ^ 8 * y, 20748], [(x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y) - x ^ 3, 5152], [(x * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y) - x ^ 5, 20687], [(x * y ^ 4 + (j ^ 2 + 3j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 6558], [2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 25117], [2 * x * y + x ^ 2 + y ^ 2, 25141], [2 * x ^ 2 * y + 2 * x ^ 3, 22935], [2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 28159], [2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4 + y ^ 4, 24704], [2 * x ^ 3 * y ^ 6 + (-4 * j ^ 2 - 5j) * x ^ 4 * y ^ 5 + (-5 * j ^ 2 - 9j) * x ^ 5 * y ^ 4 + (-5 * j ^ 2 - 8j) * x ^ 6 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 7 * y ^ 2 + x ^ 8 * y, 20496], [2 * x * y ^ 3 + (-4 * j ^ 2 - 2j) * x ^ 2 * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 3 * y, 6670], [(2 * x ^ 3 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 4 * y ^ 2 + x ^ 5 * y) - j ^ 2 * x ^ 6, 21105], [(2 * x ^ 2 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y) - 2 * j * x ^ 5, 6814, 42178], [((((2 * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2) + (j ^ 2 - j) * x ^ 4 * y) - j * x ^ 5) - j ^ 2 * y ^ 5, 21099], [(2 * x * y ^ 4 + (j ^ 2 - 2j) * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2 + (4 * j ^ 2 + j) * x ^ 4 * y + (j ^ 2 - j) * x ^ 5) - j ^ 2 * y ^ 5, 21093], [2 * x ^ 2 * y ^ 4 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2 + (-2 * j ^ 2 - 3j) * x ^ 5 * y + x ^ 6, 20762], [2 * x * y ^ 6 + (-3 * j ^ 2 - j) * x ^ 2 * y ^ 5 + 3 * j * x ^ 3 * y ^ 4 + 2 * j * x ^ 4 * y ^ 3 + 2 * j * x ^ 5 * y ^ 2, 20583], [2 * x * y + (-2 * j ^ 2 - j) * x ^ 2, 4900], [2 * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y, 5326], [2 * x ^ 3 * y + (-2 * j ^ 2 - j) * x ^ 4, 6160, 6664], [2 * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y, 35230], [(2 * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y) - x ^ 5, 21106], [2 * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 5 * y + x ^ 6, 20258], [2 * x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y + j * y ^ 4, 20427, 20511], [(2 * x ^ 2 * y ^ 7 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 6 + (j ^ 2 + 3j) * x ^ 4 * y ^ 5 + (j ^ 2 + 3j) * x ^ 5 * y ^ 4 + (-(j ^ 2) + 3j) * x ^ 6 * y ^ 3) - j ^ 2 * x ^ 7 * y ^ 2, 20580], [2 * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 5134], [(2 * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 6502], [(2 * x * y - j ^ 2 * x ^ 2) - j * y ^ 2, 14010], [((2 * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + 2 * j ^ 2 * x ^ 3 * y + (j ^ 2 - j) * x ^ 4) - j * y ^ 4, 20866, 20950], [(2 * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) + j * x ^ 4 * y, 42274], [2 * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + j ^ 2 * y ^ 4, 20862, 21030], [(2 * x * y ^ 3 + j * x ^ 2 * y ^ 2 + (3 * j ^ 2 + j) * x ^ 3 * y + (j ^ 2 - j) * x ^ 4) - j * y ^ 4, 21034], [3 * x ^ 2 * y ^ 6 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 4 + (j ^ 2 - 2j) * x ^ 5 * y ^ 3, 13946], [((-2 * j ^ 2 - 3j) * x * y ^ 4 + 4 * x ^ 2 * y ^ 3 + (-4 * j ^ 2 - 3j) * x ^ 3 * y ^ 2 + 4 * x ^ 4 * y + 2 * x ^ 5) - j * y ^ 5, 24699], [(-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 6 + (-3 * j ^ 2 - 5j) * x ^ 4 * y ^ 5 + (-3 * j ^ 2 - 7j) * x ^ 5 * y ^ 4 + (-4 * j ^ 2 - 7j) * x ^ 6 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 7 * y ^ 2 + x ^ 8 * y, 20412], [((-2 * j ^ 2 - 3j) * x * y ^ 5 + (-4 * j ^ 2 - 2j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 + j) * x ^ 3 * y ^ 3 + 2 * j * x ^ 4 * y ^ 2) - j * y ^ 6, 20929], [((-2 * j ^ 2 - 3j) * x * y + (-2 * j ^ 2 - j) * x ^ 2) - j * y ^ 2, 13842, 13926], [(-(j ^ 2) - 3j) * x ^ 4 * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 28141], [(-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 6 + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 5 + 3 * x ^ 4 * y ^ 4 + 5 * x ^ 5 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 6 * y ^ 2 + x ^ 7 * y, 20834, 21002], [(((-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 6 - 3 * j ^ 2 * x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) + (j ^ 2 - j) * x ^ 5 * y ^ 3, 13358], [(-(j ^ 2) - 2j) * x * y ^ 3, 6157, 6493], [(-(j ^ 2) - 2j) * x ^ 2 * y, 27082], [(-(j ^ 2) - 2j) * x * y + x ^ 2, 16482], [(-(j ^ 2) - 2j) * x * y ^ 2 + x ^ 2 * y, 25225], [(-(j ^ 2) - 2j) * x * y ^ 2 + y ^ 3, 5139], [(-(j ^ 2) - 2j) * x ^ 2 * y + x ^ 3, 9505, 12945], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + x ^ 3 * y, 18408], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 40489], [(-(j ^ 2) - 2j) * x ^ 3 * y + x ^ 4, 12955], [(-(j ^ 2) - 2j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 17476], [(-(j ^ 2) - 2j) * x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 6829, 42193], [((-(j ^ 2) - 2j) * x * y + x ^ 2) - j * y ^ 2, 20383], [((-(j ^ 2) - 2j) * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 6139, 6643], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 20522], [(-(j ^ 2) - 2j) * x ^ 3 * y ^ 5 + 2 * x ^ 4 * y ^ 4, 40488], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 13881], [(((-(j ^ 2) - 2j) * x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j * x ^ 4, 20421, 20505], [(-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + j ^ 2 * x ^ 4, 6232], [(-(j ^ 2) - 2j) * x ^ 3 * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 28152], [(((-(j ^ 2) - 2j) * x ^ 2 * y ^ 4 + (-(j ^ 2) - 3j) * x ^ 3 * y ^ 3) - 2 * j * x ^ 4 * y ^ 2) + (-(j ^ 2) - 3j) * x ^ 5 * y + x ^ 6, 20420, 20504], [(-(j ^ 2) - 2j) * x * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j ^ 2 * x ^ 4, 20608], [((-(j ^ 2) - 2j) * x * y ^ 2 - 2 * j * x ^ 2 * y) + x ^ 3, 6856, 42220], [((-(j ^ 2) - 2j) * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 42283], [((-(j ^ 2) - 2j) * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) + j ^ 2 * y ^ 4, 13974], [(-(j ^ 2) - 2j) * x ^ 3 - j ^ 2 * y ^ 3, 21122], [(-(j ^ 2) - 2j) * x ^ 4 * y ^ 2 - j ^ 2 * x ^ 5 * y, 34193], [((-(j ^ 2) - 2j) * x * y - j ^ 2 * x ^ 2) + j ^ 2 * y ^ 2, 20449, 20533, 20869, 20953, 21037], [(-(j ^ 2) - 2j) * x * y ^ 2 + j ^ 2 * x ^ 2 * y + (2 * j ^ 2 + j) * x ^ 3 + y ^ 3, 20378], [-2 * j * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 31335, 33435], [-2 * j * x ^ 3 * y ^ 5 + x ^ 4 * y ^ 4, 31332], [-2 * j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y + (2 * j ^ 2 + j) * x ^ 5, 21118], [-2 * j * x ^ 2 * y ^ 5 + (-(j ^ 2) - 5j) * x ^ 3 * y ^ 4 + (-2 * j ^ 2 - 7j) * x ^ 4 * y ^ 3 + (-2 * j ^ 2 - 5j) * x ^ 5 * y ^ 2 + (-(j ^ 2) - 3j) * x ^ 6 * y + x ^ 7, 20415, 20499], [-2 * j * x ^ 2 * y ^ 3 + (j ^ 2 - 4j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 - 3j) * x ^ 4 * y + (j ^ 2 - j) * x ^ 5, 20935], [-2 * j * x ^ 2 * y ^ 3 + (j ^ 2 - 3j) * x ^ 3 * y ^ 2 + (3 * j ^ 2 - 2j) * x ^ 4 * y + (j ^ 2 - j) * x ^ 5, 20851], [-2 * j * x ^ 2 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 28166], [-2 * j * x ^ 2 * y ^ 3 - 2 * j * x ^ 3 * y ^ 2, 20264], [-2 * j * x ^ 3 * y ^ 5 - 2 * j * x ^ 4 * y ^ 4, 40740], [-2 * j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3, 40741], [(-2 * j * x * y - j * x ^ 2) - j * y ^ 2, 20719], [(-2 * j * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j * y ^ 4, 25292], [(-2 * j * x ^ 2 * y ^ 4 + (j ^ 2 - j) * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2, 26797], [(-2 * j * x ^ 3 * y ^ 5 + (j ^ 2 - j) * x ^ 4 * y ^ 4) - j * x ^ 5 * y ^ 3, 26796], [-2 * j * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y + j ^ 2 * y ^ 4, 23019], [(((j ^ 2 - 2j) * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + (-5 * j ^ 2 - 3j) * x ^ 5 * y ^ 2) - x ^ 6 * y) + (2 * j ^ 2 + j) * x ^ 7, 21089], [(((j ^ 2 - 2j) * x * y ^ 4 - 3 * j * x ^ 2 * y ^ 3) - 2 * j * x ^ 3 * y ^ 2) + j ^ 2 * y ^ 5, 25287], [(((j ^ 2 - 2j) * x ^ 2 * y ^ 2 - 3 * j * x ^ 3 * y) - j * x ^ 4) - j ^ 2 * y ^ 4, 21015], [((j ^ 2 - 2j) * x * y ^ 3 + (j ^ 2 - 3j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 - 3j) * x ^ 3 * y) - 2 * j * x ^ 4, 21009], [(-3 * j ^ 2 - j) * x ^ 3 * y ^ 4 + (-3 * j ^ 2 + j) * x ^ 4 * y ^ 3 + (-2 * j ^ 2 + 2j) * x ^ 5 * y ^ 2 + j * x ^ 6 * y, 42257], [(-3 * j ^ 2 - j) * x * y ^ 4 + j * x ^ 2 * y ^ 3 + 4 * j ^ 2 * x ^ 3 * y ^ 2 + (3 * j ^ 2 - 2j) * x ^ 4 * y + y ^ 5, 20338], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 2, 26316], [(((((-2 * j ^ 2 - j) * x * y ^ 4 - x ^ 2 * y ^ 3) - 3 * j * x ^ 3 * y ^ 2) + (-2 * j ^ 2 - 5j) * x ^ 4 * y) - j ^ 2 * x ^ 5) + y ^ 5, 20758], [(-2 * j ^ 2 - j) * x + y, 13511, 13847, 13931, 20572, 20912, 20997, 27203], [(-2 * j ^ 2 - j) * x * y + y ^ 2, 6100], [(-2 * j ^ 2 - j) * x * y ^ 2 + y ^ 3, 4889], [(-2 * j ^ 2 - j) * x ^ 2 * y + x ^ 3, 4564], [(-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 20097], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 2, 26299], [((-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-3 * j ^ 2 - j) * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 20592], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 42286], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 6 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 5 + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 4 + (-3 * j ^ 2 - 4j) * x ^ 5 * y ^ 3 + 2 * x ^ 6 * y ^ 2 + x ^ 7 * y, 20414, 20498], [(-2 * j ^ 2 - j) * x * y + (-2 * j ^ 2 - j) * x ^ 2 + (-2 * j ^ 2 - j) * y ^ 2, 20450, 21038], [((-2 * j ^ 2 - j) * x * y + (-2 * j ^ 2 - j) * x ^ 2) - j ^ 2 * y ^ 2, 20534, 20870, 20954], [((-2 * j ^ 2 - j) * x * y ^ 2 - j * x ^ 3) + y ^ 3, 6604], [(((-2 * j ^ 2 - j) * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3) + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2) - x ^ 6, 20163], [(((-2 * j ^ 2 - j) * x ^ 3 * y ^ 5 - j * x ^ 4 * y ^ 4) + (-(j ^ 2) - 2j) * x ^ 5 * y ^ 3) - x ^ 7 * y, 20160], [(((-2 * j ^ 2 - j) * x * y ^ 2 - j * x ^ 2 * y) - j * x ^ 3) + y ^ 3, 5301, 5307], [(((-2 * j ^ 2 - j) * x ^ 3 * y ^ 6 - 3 * j ^ 2 * x ^ 4 * y ^ 5) - x ^ 5 * y ^ 4) - j * x ^ 6 * y ^ 3, 6216], [((-2 * j ^ 2 - j) * x * y ^ 2 - 3 * j ^ 2 * x ^ 2 * y) + (-(j ^ 2) + j) * x ^ 3, 21052], [(-2 * j ^ 2 - j) * x * y - 2 * j ^ 2 * x ^ 2, 20556, 20892, 20976], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 4128], [(-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2, 19332], [(-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 - j ^ 2 * x ^ 4 * y, 4120], [(-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 - j ^ 2 * x ^ 4 * y ^ 2, 19324], [((-2 * j ^ 2 - j) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + y ^ 3, 6519], [(-2 * j ^ 2 - j) * x * y + (-(j ^ 2) + j) * x ^ 2, 20472, 21060], [(-2 * j ^ 2 - j) * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y, 20439, 21027], [((-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 20335], [(-2 * j ^ 2 - j) * x * y ^ 2 + j * x ^ 2 * y + j ^ 2 * x ^ 3, 20359], [-j, 8836, 8946, 30172, 31290, 32735], [-j * x, 4147, 4596, 4600, 4679, 5351, 5788, 6632, 8840, 12324, 12328, 12990, 12997, 13937, 16990, 17515, 17521, 18927, 20312, 20315, 20317, 20402, 20651, 20654, 20819, 20826, 20827, 23872, 23888, 25261, 25326, 26346, 26353, 26773, 26778, 32723], [-j * y, 5186, 9760, 11214, 12308, 18449, 26193, 33918], [-j * x * y, 5171, 9676, 17508, 18690, 19351, 19771, 24810, 26174, 26675, 30508, 30524, 31852, 32374, 33904, 34243, 37991, 42332], [-j * x * y ^ 2, 5154, 6831, 14089, 31366, 32794, 38424, 38915, 39844, 39852, 40523, 42195], [-j * x * y ^ 3, 19746, 26654, 27414, 32347, 34806, 40751, 40764, 41022, 41862], [-j * x * y ^ 4, 31339, 32767], [-j * x ^ 2, 4586, 4662, 4667, 5334, 5339, 5781, 6024, 6028, 6079, 6621, 6871, 11964, 12314, 13135, 19878, 19885, 20114, 20124, 20718, 20725, 21161, 22688, 24131, 26764, 40964, 42235], [-j * y ^ 2, 6842, 19020, 19791, 26319, 26843, 33484, 33736, 38922, 40791, 42206], [-j * x ^ 2 * y, 12968, 13471, 13807, 16973, 18676, 20103, 26152, 26159, 27163, 31438, 31856, 34240, 41195], [-j * x ^ 2 * y ^ 2, 5302, 18672, 19254, 19676, 20178, 20283, 25291, 26148, 28187, 31436, 31437, 33966, 40925], [-j * x ^ 2 * y ^ 3, 18988, 27407, 32765, 34799, 38896, 41015, 41855], [-j * x ^ 2 * y ^ 4, 32342, 33687], [-j * x ^ 3, 6014, 6247, 15206, 35070], [-j * y ^ 3, 4545, 19266, 26826, 33709], [-j * x ^ 3 * y, 22682, 26480, 26481, 28183, 28189, 31426, 34210, 34708, 41178], [-j * x ^ 3 * y ^ 2, 13112, 26131, 28176, 31421, 33959, 34794, 40417, 41010, 41768, 41769], [-j * x ^ 3 * y ^ 3, 13448, 13784, 26629, 27140, 34448, 40744], [-j * x ^ 3 * y ^ 4, 40742], [-j * x ^ 4, 5747, 13122, 13728, 26470, 35238], [-j * y ^ 4, 27750, 33458, 33710, 41526], [-j * x ^ 4 * y, 25624, 33954, 41758, 41936, 41937], [-j * x ^ 4 * y ^ 2, 6224, 33941], [-j * x ^ 4 * y ^ 3, 18650], [-j * x ^ 5, 5730, 41926], [-j * x ^ 5 * y ^ 3, 18648], [(-j * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 38982], [(-j * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 20085], [-j * x * y ^ 2 - x ^ 2 * y, 22517], [-j * x * y ^ 3 - x ^ 2 * y ^ 2, 25220, 31589], [-j * x * y ^ 3 - x ^ 3 * y, 6165, 6501, 6669, 13388], [-j * x * y ^ 3 - x ^ 4, 26732], [-j * x * y ^ 4 - x ^ 3 * y ^ 2, 19845], [-j * x * y ^ 4 - x ^ 4 * y, 27743, 41519], [-j * x ^ 2 - y ^ 2, 6191, 6695], [-j * x ^ 2 * y ^ 2 - x ^ 3 * y, 33952], [-j * x ^ 2 * y ^ 2 - x ^ 4, 32684], [-j * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3, 33014], [-j * x ^ 3 * y - y ^ 4, 20361], [-j * x ^ 3 * y ^ 2 - x ^ 5, 20168], [-j * x ^ 3 * y ^ 3 - x ^ 5 * y, 32678], [-j * x ^ 3 * y ^ 5 - x ^ 5 * y ^ 3, 6806, 42170], [-j * x ^ 4 * y ^ 3 - x ^ 6 * y, 20162], [-j * x ^ 4 * y ^ 4 - x ^ 5 * y ^ 3, 34190], [(-j * x * y ^ 2 - x ^ 2 * y) - x ^ 3, 22012, 23280, 27063, 29318], [(-j * x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 19927, 29400, 40080], [(-j * x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 33013], [(-j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 18901, 19913, 38644], [(-j * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 19909, 26293, 31921, 34105], [(-j * x ^ 2 * y ^ 5 - x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 27724, 41500], [(-j * x ^ 3 * y ^ 2 - x ^ 4 * y) - x ^ 5, 20095], [(-j * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2) - x ^ 5 * y, 27049], [(-j * x ^ 3 * y ^ 5 - x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 19908, 31920, 34104], [(-j * x ^ 4 * y ^ 3 - x ^ 5 * y ^ 2) - x ^ 6 * y, 20077], [(-j * x ^ 4 * y ^ 4 - x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2, 27048], [-j * x * y + x ^ 2, 6008, 6030, 11956, 20298, 20305, 20634, 20641, 20802, 20809, 20880, 20964, 21048, 34254], [-j * x * y + y ^ 2, 5164, 5181, 19793], [-j * x * y ^ 2 + x ^ 2 * y, 11952, 12382], [-j * x * y ^ 3 + x ^ 2 * y ^ 2, 13392, 13476, 13896, 20269, 23859, 27168, 39403, 39410], [-j * x * y ^ 4 + x ^ 2 * y ^ 3, 9663, 12355, 30495, 38395], [-j * x ^ 2 + y ^ 2, 20288, 20624, 20792], [-j * x ^ 2 * y + x ^ 3, 6016, 18918, 19678, 20107], [-j * x ^ 2 * y + y ^ 3, 13975], [-j * x ^ 2 * y ^ 2 + x ^ 3 * y, 4542, 11935, 13124, 13726, 13882], [-j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 6149, 6653, 7006, 20438, 34460], [-j * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 20924, 23856, 38391, 40491], [-j * x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4, 6979, 9660, 30492, 31334, 33434], [-j * x ^ 3 * y + x ^ 4, 19870, 20350, 20710], [-j * x ^ 3 * y ^ 2 + x ^ 4 * y, 11931, 19661, 25212], [-j * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3, 34695], [(-j * x * y + x ^ 2) - y ^ 2, 5175], [(-j * x ^ 2 * y ^ 2 + x ^ 3 * y) - x ^ 4, 20360], [((-j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y) + (2 * j ^ 2 + j) * x ^ 5, 21130], [-j * x * y + x ^ 2 + y ^ 2, 6873, 42237], [-j * x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 11942], [-j * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 13117], [-j * x * y ^ 5 + x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 5 * y, 6049], [-j * x ^ 2 * y ^ 6 + x ^ 3 * y ^ 5 + x ^ 4 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 6 * y ^ 2, 6048], [(-j * x * y ^ 2 + x ^ 2 * y) - j ^ 2 * y ^ 3, 5133], [((-j * x * y ^ 3 + x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) + j ^ 2 * x ^ 4, 20612], [-j * x * y ^ 2 + x ^ 2 * y + j ^ 2 * x ^ 3, 13120], [-j * x * y ^ 3 + x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 13812, 34456], [-j * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2, 13453, 27145], [((-j * x * y ^ 3 + x ^ 2 * y ^ 2 + (2 * j ^ 2 + 3j) * x ^ 3 * y) - j * x ^ 4) - y ^ 4, 20596], [-j * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3, 6977], [-j * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 13461, 13797, 27153], [((-j * x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3) - 2 * j * x ^ 4 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 5 * y, 42262], [-j * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y, 13877], [(-j * x * y ^ 3 + 2 * x ^ 2 * y ^ 2) - j * x ^ 4, 20272], [((-j * x ^ 2 * y ^ 5 + 2 * x ^ 3 * y ^ 4) - 4 * j ^ 2 * x ^ 4 * y ^ 3) + (-2 * j ^ 2 + 2j) * x ^ 5 * y ^ 2, 21097], [(-j * x * y ^ 2 + 2 * x ^ 2 * y) - j ^ 2 * x ^ 3, 13996], [(-j * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + j * x ^ 3 * y) - j * x ^ 4, 20776], [-j * x * y ^ 6 + 3 * x ^ 2 * y ^ 5 + (-5 * j ^ 2 - 3j) * x ^ 3 * y ^ 4 + (-5 * j ^ 2 - 2j) * x ^ 4 * y ^ 3 + (-4 * j ^ 2 - 3j) * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 24696], [-j * x ^ 2 * y ^ 7 + 3 * x ^ 3 * y ^ 6 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 5 * y ^ 4 + (j ^ 2 - 2j) * x ^ 6 * y ^ 3, 13944], [-j * x ^ 2 * y ^ 7 + 4 * x ^ 3 * y ^ 6 + 7 * x ^ 4 * y ^ 5 + (-5 * j ^ 2 - 8j) * x ^ 5 * y ^ 4 + (-4 * j ^ 2 - 8j) * x ^ 6 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 7 * y ^ 2 + x ^ 8 * y, 20832], [-j * x ^ 2 * y ^ 7 + (-4 * j ^ 2 - 5j) * x ^ 3 * y ^ 6 + (-6 * j ^ 2 - 7j) * x ^ 4 * y ^ 5 + (-3 * j ^ 2 - 6j) * x ^ 5 * y ^ 4 + (-3 * j ^ 2 - 7j) * x ^ 6 * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 7 * y ^ 2 + x ^ 8 * y, 21000], [-j * x ^ 3 * y ^ 5 + (-4 * j ^ 2 - 5j) * x ^ 4 * y ^ 4 + (-7 * j ^ 2 - 3j) * x ^ 5 * y ^ 3 + 3 * j * x ^ 6 * y ^ 2 + (j ^ 2 + 2j) * x ^ 7 * y, 21088], [-j * x ^ 2 * y ^ 5 + (-3 * j ^ 2 - 4j) * x ^ 3 * y ^ 4 + 3 * x ^ 4 * y ^ 3, 25116], [-j * x ^ 4 * y ^ 4 + (-2 * j ^ 2 - 4j) * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 28144], [-j * x * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + (-2 * j ^ 2 - 3j) * x ^ 4 * y + x ^ 5, 20268], [-j * x * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 23775, 25119], [-j * x * y ^ 6 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - 4j) * x ^ 3 * y ^ 4 + (-(j ^ 2) - 6j) * x ^ 4 * y ^ 3 + (-3 * j ^ 2 - 6j) * x ^ 5 * y ^ 2 + (-2 * j ^ 2 - 3j) * x ^ 6 * y + x ^ 7, 20835, 21003], [-j * x * y ^ 2 + (-2 * j ^ 2 - 3j) * x ^ 2 * y + (-2 * j ^ 2 - j) * x ^ 3, 13828, 13912], [((-j * x * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2) + (-2 * j ^ 2 - 3j) * x ^ 4 * y + x ^ 5, 20772], [(-j * x ^ 3 * y ^ 5 + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 4 + 3 * x ^ 5 * y ^ 3) - j ^ 2 * x ^ 6 * y ^ 2, 28143], [-j * x ^ 2 * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 3 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 4 * y, 20261, 20765], [((-j * x ^ 3 * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y) + 2 * j ^ 2 * x ^ 6, 35206], [(-j * x ^ 2 * y ^ 6 - 3 * j * x ^ 3 * y ^ 5) + x ^ 4 * y ^ 4, 33432], [(-j * x ^ 2 * y ^ 4 - 3 * j * x ^ 3 * y ^ 3) + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 2 + x ^ 5 * y, 13202], [(-j * x * y ^ 4 - 3 * j * x ^ 2 * y ^ 3) + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2, 39399], [(-j * x ^ 4 * y ^ 5 - 3 * j * x ^ 5 * y ^ 4) + 3 * j ^ 2 * x ^ 6 * y ^ 3 + j ^ 2 * x ^ 7 * y ^ 2, 20076], [-j * x * y + (-(j ^ 2) - 2j) * x ^ 2, 13478, 13814, 13898, 20382, 20389, 27170], [-j * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y, 26324], [-j * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2, 20787], [-j * x * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 3, 38402, 40502], [-j * x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2, 34208], [-j * x ^ 2 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 3, 34789, 39398, 41005], [-j * x ^ 3 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2, 33949], [-j * x * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 2 * y + x ^ 3, 13916], [-j * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + x ^ 3 * y, 20619, 28191], [-j * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y + x ^ 4, 5980, 13216], [-j * x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 5984, 13212], [-j * x ^ 2 * y ^ 5 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3, 23772], [(-j * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y) - j * x ^ 4, 26145], [(-j * x * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2, 19752], [(-j * x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 20250, 20754], [(-j * x ^ 2 * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2, 19744], [-j * x * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 3 + 3 * j ^ 2 * x ^ 3 * y ^ 2 + (3 * j ^ 2 + 2j) * x ^ 4 * y, 19834], [-j * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2, 38905], [-j * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3, 26636, 40754], [-j * x ^ 2 * y ^ 3 - 2 * j * x ^ 3 * y ^ 2, 18662], [-j * x ^ 2 * y ^ 5 - 2 * j * x ^ 3 * y ^ 4, 26630], [(-j * x * y ^ 5 - 2 * j * x ^ 2 * y ^ 4) - x ^ 5 * y, 27733, 41509], [(-j * x ^ 2 * y ^ 5 - 2 * j * x ^ 3 * y ^ 4) + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 3, 39396], [(-j * x ^ 2 * y ^ 4 - 2 * j * x ^ 3 * y ^ 3) + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 2 + x ^ 5 * y, 13195], [(-j * x ^ 3 * y ^ 5 - 2 * j * x ^ 4 * y ^ 4) + (-(j ^ 2) - 2j) * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 13190], [(-j * x * y ^ 2 - 2 * j * x ^ 2 * y) - j * x ^ 3, 12544, 20553, 20889, 20973], [(-j * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 12522, 12540, 24793], [(-j * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2, 12530, 26808], [(-j * x * y ^ 5 - 2 * j * x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3, 25286], [(-j * x ^ 2 * y ^ 2 - 2 * j * x ^ 3 * y) - j * x ^ 4, 17485, 20530], [(-j * x ^ 2 * y ^ 4 - 2 * j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2, 26800], [((-j * x ^ 2 * y ^ 4 - 2 * j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) + x ^ 5 * y, 13706], [((-j * x ^ 2 * y ^ 5 - 2 * j * x ^ 3 * y ^ 4) - j * x ^ 4 * y ^ 3) + x ^ 5 * y ^ 2, 42266], [(-j * x ^ 2 * y ^ 2 - 2 * j * x ^ 3 * y) + (j ^ 2 - j) * x ^ 4, 20279, 20783], [(-j * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2, 39830], [(-j * x ^ 3 * y ^ 4 - 2 * j * x ^ 4 * y ^ 3) + j ^ 2 * x ^ 5 * y ^ 2, 28154], [-j * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y, 12964, 26320], [-j * x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2, 12960], [((-j * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 4) - 2 * x ^ 4 * y ^ 3) - j * x ^ 5 * y ^ 2, 20668], [((-j * x * y ^ 6 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 5) - 2 * x ^ 3 * y ^ 4) + 4 * j ^ 2 * x ^ 4 * y ^ 3 + (j ^ 2 - 2j) * x ^ 5 * y ^ 2, 13947], [-j * x * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2, 14048], [(-j * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 4) - j * x ^ 5 * y ^ 2, 19828], [((-j * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y) - j ^ 2 * x ^ 3) + j ^ 2 * y ^ 3, 20368], [-j * x * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + (-3 * j ^ 2 + j) * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y, 20933], [-j * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2, 12351], [-j * x ^ 3 * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 4 + j * x ^ 5 * y ^ 3, 6975], [-j * x ^ 4 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 3 + j * x ^ 6 * y ^ 2, 35199], [-j * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 + 2j) * x ^ 4 * y ^ 2, 13789], [-j * x * y - j * x ^ 2, 10600, 12572, 17501, 19879, 23788, 25132, 25252, 32685, 32691], [-j * x * y - j * y ^ 2, 26847], [-j * x * y ^ 2 - j * x ^ 2 * y, 11182, 13219, 20381, 24803, 26653, 33868], [-j * x * y ^ 2 - j * y ^ 3, 26821], [-j * x * y ^ 3 - j * x ^ 2 * y ^ 2, 12533, 19246, 26639, 26806, 33694, 33872, 39404], [-j * x * y ^ 3 - j * y ^ 4, 40766], [-j * x * y ^ 4 - j * x ^ 2 * y ^ 3, 32343, 39823, 40752], [-j * x * y ^ 5 - j * x ^ 2 * y ^ 4, 33433], [-j * x ^ 2 * y - j * x ^ 3, 10604, 16472, 17495, 20874, 20958, 24200, 25643, 40936], [-j * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 19857, 20697, 25298, 27067, 33369, 40932], [-j * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2, 12019, 18655, 18820, 26642, 28165, 40922], [-j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3, 13196, 27397, 40743, 41845], [-j * x ^ 2 * y ^ 5 - j * x ^ 3 * y ^ 4, 32340], [-j * x ^ 3 * y - j * x ^ 4, 6587, 13224, 18404, 20285, 20789], [-j * x ^ 3 * y ^ 2 - j * x ^ 4 * y, 16466], [-j * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2, 12015, 18651], [-j * x ^ 4 * y - j * x ^ 5, 6570], [-j * x ^ 4 * y ^ 2 - j * x ^ 5 * y, 18398, 18902], [-j * x ^ 5 * y - j * x ^ 6, 41588, 41672], [(-j * x * y ^ 3 - j * x ^ 2 * y ^ 2) - x ^ 4, 26310], [((-j * x * y ^ 3 - j * x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 20369], [(-j * x * y ^ 2 - j * x ^ 2 * y) + x ^ 3, 6583, 12970, 21149], [(-j * x * y ^ 2 - j * x ^ 3) + y ^ 3, 21143], [(-j * x ^ 2 * y ^ 2 - j * x ^ 3 * y) + x ^ 4, 13720, 34204], [(-j * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) + x ^ 4 * y, 13716], [(-j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2, 42276], [(-j * x * y - j * x ^ 2) - j * y ^ 2, 21059], [(-j * x * y ^ 2 - j * x ^ 2 * y) - j * x ^ 3, 20296, 21047, 21132], [(-j * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j * y ^ 4, 26822], [(-j * x ^ 2 * y ^ 2 - j * x ^ 3 * y) - j * x ^ 4, 24195, 25633], [(-j * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 20084], [(-j * x ^ 6 * y ^ 3 - j * x ^ 7 * y ^ 2) - j * x ^ 8 * y, 41580], [((-j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) + x ^ 5 * y, 13699], [(-j * x ^ 2 * y ^ 2 - j * x ^ 3 * y) + (j ^ 2 - j) * x ^ 4, 12358], [(-j * x * y ^ 3 - j * x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y, 20605, 20773], [(-j * x * y ^ 4 - j * x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2, 23018], [(-j * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) + j ^ 2 * x ^ 4 * y, 20858, 20942], [(-j * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2) + 2 * j ^ 2 * x ^ 5 * y, 6982], [-j * x * y + (j ^ 2 - j) * x ^ 2, 8914, 31258], [-j * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2, 5150], [-j * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2, 27394, 41842], [(-j * x * y + (j ^ 2 - j) * x ^ 2) - j * y ^ 2, 20313, 20649, 20817], [(-j * x * y ^ 4 + (j ^ 2 - j) * x ^ 2 * y ^ 3) - j * x ^ 4 * y, 27730, 41506], [-j * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y + (j ^ 2 - j) * x ^ 3, 20632, 20800], [-j * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y, 20507, 20843, 42287], [-j * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y + j ^ 2 * x ^ 3, 24457], [-j * x * y ^ 4 + (j ^ 2 - j) * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 37551, 38485], [-j * x ^ 2 * y ^ 5 + (j ^ 2 - j) * x ^ 3 * y ^ 4 + j ^ 2 * x ^ 4 * y ^ 3, 37548], [-j * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 42270], [((-j * x * y ^ 5 + (j ^ 2 - j) * x ^ 2 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 30576], [((-j * x ^ 2 * y ^ 5 + (j ^ 2 - j) * x ^ 3 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 3) - 2 * x ^ 5 * y ^ 2) - x ^ 6 * y, 32508], [-j * x * y ^ 2 - 2 * j ^ 2 * x ^ 2 * y, 25228], [-j * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2, 13806, 25224], [-j * x ^ 2 * y ^ 3 - 2 * j ^ 2 * x ^ 3 * y ^ 2, 13799], [((-j * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 26736], [((-j * x * y ^ 4 - 2 * j ^ 2 * x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2) - j * x ^ 4 * y, 14056], [((-j * x * y ^ 5 - 2 * j ^ 2 * x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2, 14052], [-j * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 20293, 20629, 20797], [-j * x * y ^ 2 - j ^ 2 * x ^ 3, 13723], [-j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 13470, 27162], [-j * x ^ 2 * y - j ^ 2 * y ^ 3, 13387], [-j * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2, 13463, 27155], [-j * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 4 * y ^ 2, 13700], [-j * x ^ 2 * y ^ 5 - j ^ 2 * x ^ 4 * y ^ 3, 42260], [-j * x ^ 3 * y - j ^ 2 * x ^ 4, 13456, 27148, 35044], [((-j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) + j ^ 2 * x ^ 4 + j ^ 2 * y ^ 4, 13978], [(-j * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 21110], [(((-j * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + (j ^ 2 - j) * x ^ 4 * y) - 2 * j * x ^ 5, 20598], [((-j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) + j ^ 2 * x ^ 4, 20686], [(-j * x ^ 3 * y ^ 5 - j ^ 2 * x ^ 4 * y ^ 4) + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 3, 12936], [((-j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) + j ^ 2 * x ^ 4, 20780], [(-j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j ^ 2 * y ^ 4, 13386], [(-j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + (-(j ^ 2) + j) * x ^ 3 * y, 20276], [(-j * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y) + (-(j ^ 2) + j) * x ^ 4, 20626], [-j * x * y + j ^ 2 * x ^ 2, 16989, 24467, 25649], [-j * x * y ^ 2 + j ^ 2 * x ^ 2 * y, 33967], [-j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 6661, 19750, 37556, 38495, 39840], [-j * x * y ^ 3 + j ^ 2 * x ^ 3 * y, 13980], [-j * x * y ^ 3 + j ^ 2 * y ^ 4, 40499], [-j * x ^ 2 * y + j ^ 2 * x ^ 3, 18501, 25235], [-j * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 6503], [-j * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 19244], [-j * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3, 33944, 37550], [-j * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 6486, 27053, 28156], [-j * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 28164], [(-j * x ^ 2 * y ^ 5 + j ^ 2 * x ^ 3 * y ^ 4) - 2 * x ^ 4 * y ^ 3, 33012], [((-j * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 38811], [((-j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 29316], [(-j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 20353], [(-j * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y) - x ^ 4, 6167, 6671], [(-j * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 30744], [(-j * x ^ 2 * y ^ 5 + j ^ 2 * x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3, 32928], [(-j * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y) - x ^ 5, 6150, 6654], [(-j * x ^ 3 * y ^ 5 + j ^ 2 * x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 40824], [((-j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 22516], [((-j * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y, 30578, 39229], [((-j * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - x ^ 5 * y, 32510], [-j * x * y + j ^ 2 * x ^ 2 + y ^ 2, 25250], [-j * x * y ^ 2 + j ^ 2 * x ^ 2 * y + y ^ 3, 6182, 6518, 6686], [-j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + y ^ 4, 42302], [(-j * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - j * y ^ 3, 23024], [-j * x ^ 3 * y ^ 5 + j ^ 2 * x ^ 4 * y ^ 4 + j ^ 2 * x ^ 5 * y ^ 3, 19236], [-j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4, 13449, 27141], [-j * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y + j ^ 2 * x ^ 5, 13459, 27151], [-j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y, 33442], [-j * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y, 20345], [-j * x * y ^ 3 + 2 * j ^ 2 * x ^ 2 * y ^ 2 + j * x ^ 3 * y + y ^ 4, 19414], [(-j * x ^ 2 * y ^ 5 + (-(j ^ 2) + j) * x ^ 3 * y ^ 4 + (-2 * j ^ 2 + j) * x ^ 4 * y ^ 3) - j ^ 2 * x ^ 5 * y ^ 2, 6469], [(-j * x ^ 3 * y ^ 6 + (-(j ^ 2) + j) * x ^ 4 * y ^ 5 + (-2 * j ^ 2 + j) * x ^ 5 * y ^ 4) - j ^ 2 * x ^ 6 * y ^ 3, 6468], [-j * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3, 19240], [(-j * x * y ^ 4 + j * x ^ 3 * y ^ 2) - x ^ 4 * y, 6830, 42194], [-j * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j * x ^ 4, 17480], [(-j * x * y ^ 3 + j * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y) - j * y ^ 4, 37971], [(-j * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y) - x ^ 4, 19677, 20091], [(-j * x ^ 3 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 3 + 2 * j ^ 2 * x ^ 5 * y ^ 2) - j * x ^ 6 * y, 18900], [-j * x ^ 3 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y + j * x ^ 6, 6557], [-j * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y + (2 * j ^ 2 + j) * x ^ 3, 20380], [-j * x ^ 3 * y ^ 5 + 2 * j * x ^ 5 * y ^ 3, 20582], [(-j * x * y ^ 3 + 2 * j * x ^ 3 * y + j * x ^ 4) - j * y ^ 4, 20763], [-j * x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y + (j ^ 2 + 2j) * x ^ 3, 19874, 20714], [(j ^ 2 - j) * x ^ 2 * y ^ 2, 20181], [(((j ^ 2 - j) * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 25201], [((j ^ 2 - j) * x * y + x ^ 2) - y ^ 2, 13393, 13477, 13813, 13897, 13981, 20460, 20544, 27169], [(((j ^ 2 - j) * x ^ 2 * y ^ 5 + 3 * x ^ 3 * y ^ 4) - j ^ 2 * x ^ 4 * y ^ 3) - j * x ^ 5 * y ^ 2, 20836, 21004], [((j ^ 2 - j) * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2) - y ^ 5, 20604], [(j ^ 2 - j) * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 20416, 20500], [((j ^ 2 - j) * x * y ^ 3 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 2 + (-2 * j ^ 2 + j) * x ^ 3 * y) - x ^ 4, 20356], [(((j ^ 2 - j) * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - 3j) * x ^ 3 * y ^ 4 + 2 * j * x ^ 4 * y ^ 3) - 3 * x ^ 5 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 6 * y, 20920], [((j ^ 2 - j) * x * y ^ 4 + (-(j ^ 2) - 3j) * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 20348], [(((j ^ 2 - j) * x * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 2 * y ^ 2 + (j ^ 2 - 3j) * x ^ 3 * y) - 2 * j * x ^ 4) - y ^ 4, 20841], [(j ^ 2 - j) * x ^ 2 * y ^ 2 + (-(j ^ 2) - 3j) * x ^ 3 * y + (-2 * j ^ 2 - j) * x ^ 4, 13792], [((((j ^ 2 - j) * x * y ^ 3 - 3 * j * x ^ 2 * y ^ 2) + (j ^ 2 - 4j) * x ^ 3 * y) - 2 * j * x ^ 4) - y ^ 4, 20925], [(j ^ 2 - j) * x * y + (-(j ^ 2) - 2j) * x ^ 2, 13394, 13982], [((j ^ 2 - j) * x ^ 3 * y ^ 5 - 2 * j * x ^ 4 * y ^ 4) + x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 13694], [((j ^ 2 - j) * x ^ 3 * y ^ 6 - 2 * j * x ^ 4 * y ^ 5) + x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3, 42254], [((j ^ 2 - j) * x ^ 3 * y ^ 4 - 2 * j * x ^ 4 * y ^ 3) + j * x ^ 5 * y ^ 2, 21092], [((j ^ 2 - j) * x * y ^ 4 - j * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2, 20685, 42277], [((j ^ 2 - j) * x * y ^ 2 - j * x ^ 2 * y) + (2 * j ^ 2 + j) * y ^ 3, 20959], [(j ^ 2 - j) * x ^ 2 * y + (j ^ 2 - j) * x ^ 3, 24790], [((j ^ 2 - j) * x ^ 2 * y ^ 5 + (j ^ 2 - j) * x ^ 3 * y ^ 4 + (j ^ 2 + 2j) * x ^ 5 * y ^ 2) - x ^ 6 * y, 6805, 42169], [(j ^ 2 - j) * x ^ 2 * y + j ^ 2 * x ^ 3, 25644], [(j ^ 2 - j) * x ^ 3 * y + j ^ 2 * x ^ 4, 25634], [(j ^ 2 - j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 14045], [(j ^ 2 - j) * x ^ 2 * y ^ 2 + 2 * j ^ 2 * x ^ 3 * y, 32770], [((j ^ 2 - j) * x * y ^ 3 + 2 * j ^ 2 * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 42304], [(j ^ 2 - j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y, 12946], [((j ^ 2 - j) * x ^ 3 * y ^ 5 + (j ^ 2 + 2j) * x ^ 4 * y ^ 4 + 3 * j * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2, 25200], [(j ^ 2 - j) * x ^ 2 * y ^ 5 + (j ^ 2 + 2j) * x ^ 3 * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y, 6133], [(j ^ 2 - j) * x ^ 3 * y ^ 6 + (j ^ 2 + 2j) * x ^ 4 * y ^ 5 + (2 * j ^ 2 + 3j) * x ^ 5 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 6 * y ^ 3 + j ^ 2 * x ^ 7 * y ^ 2, 6132], [((2 * j ^ 2 - j) * x ^ 3 * y ^ 6 + (2 * j ^ 2 - 2j) * x ^ 4 * y ^ 5 + j * x ^ 5 * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 6 * y ^ 3) - x ^ 7 * y ^ 2, 6804, 42168], [((3 * j ^ 2 - j) * x * y ^ 4 - j * x ^ 2 * y ^ 3) + (-2 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + (j ^ 2 + 3j) * x ^ 4 * y + j ^ 2 * y ^ 5, 20926], [-3 * j ^ 2 * x ^ 2 * y ^ 3 + (-6 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 4 * y, 6655], [-2 * j ^ 2 * x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + x ^ 3 * y, 12270], [-2 * j ^ 2 * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 30156], [-2 * j ^ 2 * x ^ 2 * y ^ 3 - 2 * j ^ 2 * x ^ 3 * y ^ 2, 26306], [-2 * j ^ 2 * x * y - j ^ 2 * y ^ 2, 26323], [-2 * j ^ 2 * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 20434, 20518], [(-2 * j ^ 2 * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 20937], [(-2 * j ^ 2 * x ^ 2 * y + (-(j ^ 2) + j) * x ^ 3) - y ^ 3, 20462, 21050], [(-2 * j ^ 2 * x * y + (-(j ^ 2) + j) * x ^ 2) - j ^ 2 * y ^ 2, 20481, 21069], [-2 * j ^ 2 * x ^ 5 * y ^ 4 + j * x ^ 6 * y ^ 3, 35028], [-2 * j ^ 2 * x * y + j * x ^ 2 + y ^ 2, 20478, 20562, 20898, 20982, 21066], [-2 * j ^ 2 * x * y ^ 2 + j * x ^ 2 * y + y ^ 3, 20371], [(-2 * j ^ 2 * x ^ 2 * y ^ 6 + 2 * j * x ^ 3 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 4) - 2 * j * x ^ 5 * y ^ 3, 20918], [-2 * j ^ 2 * x ^ 2 * y ^ 3 + (-(j ^ 2) + 3j) * x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 20855, 21023], [(-2 * j ^ 2 * x * y ^ 3 + (-(j ^ 2) + 3j) * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y) - x ^ 4, 21022], [-2 * j ^ 2 * x * y ^ 3 + (j ^ 2 + 4j) * x ^ 2 * y ^ 2 + 2 * j ^ 2 * x ^ 3 * y, 13384], [-2 * j ^ 2 * x * y ^ 4 + (j ^ 2 + 4j) * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2, 13380], [-2 * j ^ 2 * x * y ^ 3 + (2 * j ^ 2 + 4j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 3 * y, 13972], [-2 * j ^ 2 * x * y ^ 4 + (2 * j ^ 2 + 4j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2, 13968], [-(j ^ 2), 6887, 17010, 22709, 30178, 42251], [-(j ^ 2) * x, 4167, 4603, 6878, 8920, 9528, 12331, 12984, 16668, 17927, 18931, 22704, 22953, 23878, 24220, 24460, 26189, 31264, 42242], [-(j ^ 2) * y, 5193, 9364, 19800, 19802, 19804, 19810, 23045, 23815], [-(j ^ 2) * x * y, 5777, 6617, 6852, 8825, 9352, 9682, 9754, 11188, 12967, 18851, 19371, 20292, 23026, 23040, 25231, 26167, 26173, 30161, 30514, 32791, 41213, 42216], [-(j ^ 2) * x * y ^ 2, 5755, 6595, 9344, 9348, 9749, 17734, 19265, 20189, 24304, 24714, 25631, 25637, 26160, 37572, 39420], [-(j ^ 2) * x * y ^ 3, 8822, 19578, 19592, 19596, 20448, 20532, 24296, 24300, 26382, 26396, 26400, 42295], [-(j ^ 2) * x * y ^ 4, 9746], [-(j ^ 2) * x ^ 2, 4150, 6031, 6841, 6867, 13146, 21155, 21158, 22694, 26769, 34051, 34247, 42205, 42231], [-(j ^ 2) * y ^ 2, 19435, 19623, 20202, 23037, 24316, 26427, 37577], [-(j ^ 2) * x ^ 2 * y, 4142, 12951, 19354, 19426, 19774, 20192, 23030, 23861, 24199, 31354, 33454, 33978, 34482, 38826, 40271, 41196], [-(j ^ 2) * x ^ 2 * y ^ 2, 9665, 19259, 19346, 19424, 19766, 20106, 27400, 30497, 31841, 37562, 41848], [-(j ^ 2) * x ^ 2 * y ^ 3, 8820, 12944, 13109, 19577, 26381], [-(j ^ 2) * x ^ 2 * y ^ 4, 9744, 31838], [-(j ^ 2) * x ^ 3, 25246, 26492, 26746, 26758, 34230, 34235], [-(j ^ 2) * y ^ 3, 19597, 26401], [-(j ^ 2) * x ^ 3 * y, 7003, 16636, 26723, 28182, 32781, 34714, 41780], [-(j ^ 2) * x ^ 3 * y ^ 2, 9494, 19409, 19850, 41172], [-(j ^ 2) * x ^ 3 * y ^ 4, 31836], [-(j ^ 2) * x ^ 3 * y ^ 5, 27386, 41834], [-(j ^ 2) * x ^ 4, 6836, 12369, 41948, 42200], [-(j ^ 2) * x ^ 4 * y ^ 2, 9492, 13452, 13788, 27144, 35033], [-(j ^ 2) * x ^ 4 * y ^ 3, 39818, 40406], [-(j ^ 2) * x ^ 5 * y, 6993], [-(j ^ 2) * x ^ 5 * y ^ 3, 40404], [-(j ^ 2) * x ^ 6, 35217], [((-(j ^ 2) * x * y ^ 6 - 3 * x ^ 3 * y ^ 4) + (-3 * j ^ 2 - j) * x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y, 14033], [(-(j ^ 2) * x * y ^ 4 - 2 * x ^ 3 * y ^ 2) + x ^ 4 * y + j * x ^ 5, 26717], [((-(j ^ 2) * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * j * x ^ 3 * y ^ 2) + (-2 * j ^ 2 - 5j) * x ^ 4 * y + y ^ 5, 20590], [(-(j ^ 2) * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + (2 * j ^ 2 - j) * x ^ 3 * y + x ^ 4, 13888], [(-(j ^ 2) * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 13884], [(-(j ^ 2) * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, 20922], [-(j ^ 2) * x * y ^ 2 - x ^ 3, 20116], [-(j ^ 2) * x ^ 2 * y - x ^ 3, 26308], [-(j ^ 2) * x ^ 2 * y ^ 2 - x ^ 3 * y, 20183], [-(j ^ 2) * x ^ 5 * y ^ 3 - x ^ 6 * y ^ 2, 26712], [(-(j ^ 2) * x * y ^ 5 - x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3, 42269], [((-(j ^ 2) * x * y ^ 5 - x ^ 2 * y ^ 4) - 2 * j * x ^ 3 * y ^ 3) + (-3 * j ^ 2 - 2j) * x ^ 4 * y ^ 2 + (-(j ^ 2) + j) * x ^ 5 * y, 21007], [(-(j ^ 2) * x * y ^ 3 - x ^ 2 * y ^ 2) - j * x ^ 3 * y, 20700], [((-(j ^ 2) * x * y ^ 2 - x ^ 2 * y) - j * x ^ 3) - j ^ 2 * y ^ 3, 20611, 20779], [(((-(j ^ 2) * x * y ^ 5 - x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2) + j * x ^ 5 * y, 20419], [(-(j ^ 2) * x * y ^ 5 - x ^ 2 * y ^ 4) + (j ^ 2 - j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 2 + (-(j ^ 2) + j) * x ^ 5 * y, 20839], [(-(j ^ 2) * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 20100], [(-(j ^ 2) * x * y ^ 3 - x ^ 2 * y ^ 2) + j ^ 2 * x ^ 3 * y, 20868, 21036], [(-(j ^ 2) * x * y ^ 5 - x ^ 2 * y ^ 4) + j ^ 2 * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 20503], [(-(j ^ 2) * x ^ 3 * y ^ 2 - x ^ 4 * y) + (2 * j ^ 2 + j) * x ^ 5, 20346], [-(j ^ 2) * x + y, 13427, 14015, 20485, 20488, 20569, 20911, 21079, 21080, 25248, 26340], [-(j ^ 2) * x * y + x ^ 2, 12320, 19698, 20723], [-(j ^ 2) * x * y + y ^ 2, 20471, 20482, 20555, 20566, 20902, 20986, 21070], [-(j ^ 2) * x * y ^ 2 + y ^ 3, 4883, 6073], [-(j ^ 2) * x * y ^ 3 + x ^ 2 * y ^ 2, 4553, 12281, 42292, 42309], [-(j ^ 2) * x * y ^ 3 + x ^ 3 * y, 6837, 13966, 42201], [-(j ^ 2) * x ^ 2 * y + x ^ 3, 20711], [-(j ^ 2) * x ^ 2 * y ^ 2 + x ^ 3 * y, 31353, 33453], [-(j ^ 2) * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 20096], [-(j ^ 2) * x ^ 3 * y ^ 2 + x ^ 4 * y, 28162], [((-(j ^ 2) * x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 4 * y + j * y ^ 5, 6810, 42174], [-(j ^ 2) * x * y ^ 2 + x ^ 2 * y + x ^ 3, 12027, 26745], [-(j ^ 2) * x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 4 * y, 21109], [(-(j ^ 2) * x ^ 3 * y ^ 6 + x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4) - j ^ 2 * x ^ 6 * y ^ 3, 28142], [-(j ^ 2) * x ^ 3 * y ^ 7 + x ^ 4 * y ^ 6 + (-2 * j ^ 2 - 4j) * x ^ 5 * y ^ 5 + 5 * x ^ 6 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 7 * y ^ 3, 28140], [((-(j ^ 2) * x * y ^ 4 + x ^ 2 * y ^ 3 + (-(j ^ 2) - 4j) * x ^ 3 * y ^ 2) - 3 * j * x ^ 4 * y) - j * x ^ 5, 20515], [-(j ^ 2) * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 5 * y, 20340], [-(j ^ 2) * x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4 + (-(j ^ 2) - 3j) * x ^ 4 * y ^ 3 + (j ^ 2 - j) * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y, 20833, 20917], [(-(j ^ 2) * x * y ^ 2 + x ^ 2 * y) - j * x ^ 3, 12046], [(-(j ^ 2) * x * y ^ 3 + x ^ 2 * y ^ 2) - j * x ^ 3 * y, 5745, 6585], [-(j ^ 2) * x * y ^ 2 + x ^ 2 * y + j * x ^ 3, 6835, 42199], [(-(j ^ 2) * x * y ^ 3 + (-2 * j ^ 2 - 4j) * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y, 25210], [-(j ^ 2) * x ^ 2 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 25207], [-(j ^ 2) * x ^ 2 * y ^ 5 + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 20413], [-(j ^ 2) * x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y, 19666], [-(j ^ 2) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2, 12943], [-(j ^ 2) * x * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 2 * y + x ^ 3, 12292], [-(j ^ 2) * x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + x ^ 3 * y, 12288], [-(j ^ 2) * x * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 12278], [-(j ^ 2) * x ^ 3 * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 13104], [-(j ^ 2) * x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 25128], [((-(j ^ 2) * x * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 4 + (-3 * j ^ 2 - 2j) * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 6480], [((-(j ^ 2) * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 4 + (-3 * j ^ 2 - 2j) * x ^ 4 * y ^ 3) - j ^ 2 * x ^ 5 * y ^ 2) - x ^ 6 * y, 6472], [(-(j ^ 2) * x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y) - j * x ^ 4, 12022], [(-(j ^ 2) * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 4) - j * x ^ 4 * y ^ 3, 14042], [-(j ^ 2) * x * y ^ 2 - j * y ^ 3, 5157], [-(j ^ 2) * x * y ^ 3 - j * x ^ 3 * y, 19860], [-(j ^ 2) * x * y ^ 4 - j * x ^ 3 * y ^ 2, 13880], [-(j ^ 2) * x * y ^ 5 - j * x ^ 3 * y ^ 3, 13364], [-(j ^ 2) * x ^ 2 * y ^ 6 - j * x ^ 4 * y ^ 4, 34442], [-(j ^ 2) * x ^ 3 * y ^ 5 - j * x ^ 5 * y ^ 3, 6218], [(-(j ^ 2) * x * y ^ 2 - j * x ^ 2 * y) - y ^ 3, 19420], [(-(j ^ 2) * x * y ^ 3 - j * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y, 19856], [((-(j ^ 2) * x ^ 2 * y ^ 2 - j * x ^ 3 * y) - j * x ^ 4) - j * y ^ 4, 6651], [((-(j ^ 2) * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j * x ^ 3 * y) + j * y ^ 4, 5143], [(-(j ^ 2) * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) + j ^ 2 * x ^ 4 * y, 33957], [((-(j ^ 2) * x * y ^ 4 + (j ^ 2 - j) * x ^ 2 * y ^ 3) - 3 * x ^ 3 * y ^ 2) + (j ^ 2 + 2j) * x ^ 4 * y + j * x ^ 5, 25205], [(-(j ^ 2) * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2 + (-3 * j ^ 2 - 2j) * x ^ 3 * y + j * x ^ 4) - j ^ 2 * y ^ 4, 20932], [-(j ^ 2) * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y + (j ^ 2 - j) * x ^ 5, 20262], [-(j ^ 2) * x * y ^ 5 + (j ^ 2 - j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2 + (-3 * j ^ 2 + j) * x ^ 5 * y + (-(j ^ 2) + j) * x ^ 6, 20753], [-(j ^ 2) * x ^ 2 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 4 * y + (j ^ 2 - j) * x ^ 5, 20766], [-(j ^ 2) * x ^ 2 * y - 2 * j ^ 2 * x ^ 3, 21144], [-(j ^ 2) * x ^ 2 * y ^ 3 - 2 * j ^ 2 * x ^ 3 * y ^ 2, 12950, 25214], [(-(j ^ 2) * x ^ 2 * y ^ 5 - 2 * j ^ 2 * x ^ 3 * y ^ 4) - j ^ 2 * x ^ 4 * y ^ 3, 14035], [(-(j ^ 2) * x ^ 2 * y ^ 2 - 2 * j ^ 2 * x ^ 3 * y) + (-(j ^ 2) + j) * x ^ 4, 20447, 20951, 21035], [(-(j ^ 2) * x ^ 2 * y ^ 4 - 2 * j ^ 2 * x ^ 3 * y ^ 3) + (-(j ^ 2) + j) * x ^ 4 * y ^ 2, 13873], [(-(j ^ 2) * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y, 21137], [-(j ^ 2) * x - j ^ 2 * y, 16493], [-(j ^ 2) * x * y - j ^ 2 * x ^ 2, 18425, 20635, 23794, 24796, 25138], [-(j ^ 2) * x * y - j ^ 2 * y ^ 2, 5174], [-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 5159, 6268, 12021, 23792, 25136, 25294], [-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 4547, 26649], [-(j ^ 2) * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3, 19584, 26300, 26388], [-(j ^ 2) * x ^ 2 * y - j ^ 2 * x ^ 3, 4135, 18924, 20631], [-(j ^ 2) * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 5142, 10589, 12031, 14085, 19339, 23777, 25121, 26638], [-(j ^ 2) * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2, 13209, 17728], [-(j ^ 2) * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3, 10586], [-(j ^ 2) * x ^ 3 * y - j ^ 2 * x ^ 4, 4121, 18914], [-(j ^ 2) * x ^ 3 * y ^ 2 - j ^ 2 * x ^ 4 * y, 4117, 14062, 19325], [-(j ^ 2) * x ^ 3 * y ^ 3 - j ^ 2 * x ^ 4 * y ^ 2, 14039, 19321, 39819], [-(j ^ 2) * x ^ 3 * y ^ 4 - j ^ 2 * x ^ 4 * y ^ 3, 10584], [-(j ^ 2) * x ^ 3 * y ^ 6 - j ^ 2 * x ^ 4 * y ^ 5, 27384, 41832], [-(j ^ 2) * x ^ 4 * y ^ 3 - j ^ 2 * x ^ 5 * y ^ 2, 4116], [-(j ^ 2) * x ^ 4 * y ^ 4 - j ^ 2 * x ^ 5 * y ^ 3, 19320], [(-(j ^ 2) * x * y - j ^ 2 * x ^ 2) - y ^ 2, 16488], [(-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 30158], [(-(j ^ 2) * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) + x ^ 4 * y + x ^ 5, 35211], [(((-(j ^ 2) * x * y ^ 6 - j ^ 2 * x ^ 2 * y ^ 5) + x ^ 3 * y ^ 4) - j ^ 2 * x ^ 4 * y ^ 3) + j * x ^ 5 * y ^ 2, 14040], [(-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + 2 * x ^ 3 * y, 22934], [(-(j ^ 2) * x ^ 2 * y ^ 5 - j ^ 2 * x ^ 3 * y ^ 4) + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 13106], [(-(j ^ 2) * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 22932], [((-(j ^ 2) * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) + x ^ 5 * y, 6811, 42175], [((-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + (j ^ 2 - j) * x ^ 3 * y) - j * x ^ 4, 6832, 42196], [(-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 21025], [(-(j ^ 2) * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 6828, 42192], [(-(j ^ 2) * x * y ^ 5 - j ^ 2 * x ^ 2 * y ^ 4) + j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 6818, 42182], [(-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j * x ^ 3 + y ^ 3, 21031], [(-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j * x ^ 3 * y + j * x ^ 4, 24701], [-(j ^ 2) * x * y ^ 2 + j ^ 2 * x ^ 3, 6860, 42224], [-(j ^ 2) * x ^ 2 * y + j ^ 2 * x ^ 3, 26728], [-(j ^ 2) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 20104], [-(j ^ 2) * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 4 * y, 11932], [((-(j ^ 2) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2) - x ^ 5 * y) - x ^ 6, 26128], [((-(j ^ 2) * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j ^ 2 * x ^ 4, 20696], [-(j ^ 2) * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2 + 2 * j ^ 2 * x ^ 4 * y, 14044], [-(j ^ 2) * x * y ^ 2 + (-2 * j ^ 2 + j) * x ^ 2 * y + (-(j ^ 2) + j) * x ^ 3, 20884, 20968], [-(j ^ 2) * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y, 20523, 20859, 20943], [-(j ^ 2) * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2, 31352, 33452], [-(j ^ 2) * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2, 21114, 33437], [-(j ^ 2) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2, 21107], [(-(j ^ 2) * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 26719, 26726], [((-(j ^ 2) * x * y ^ 5 + (-(j ^ 2) + j) * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + (j ^ 2 - j) * x ^ 4 * y ^ 2, 13370], [(((-(j ^ 2) * x * y ^ 5 + (-(j ^ 2) + j) * x ^ 2 * y ^ 4) - 3 * j ^ 2 * x ^ 3 * y ^ 3) - 3 * j ^ 2 * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 14047], [(-(j ^ 2) * x ^ 2 * y ^ 4 + (-(j ^ 2) + j) * x ^ 3 * y ^ 3) - 2 * j ^ 2 * x ^ 4 * y ^ 2, 25203], [(-(j ^ 2) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 35215], [((-(j ^ 2) * x ^ 2 * y ^ 6 + (-(j ^ 2) + j) * x ^ 3 * y ^ 5) - j ^ 2 * x ^ 4 * y ^ 4) + x ^ 5 * y ^ 3, 14031], [(-(j ^ 2) * x ^ 2 * y ^ 4 + (-(j ^ 2) + j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 26715], [-(j ^ 2) * x * y ^ 2 + (-(j ^ 2) + j) * x ^ 2 * y + j * x ^ 3, 20464], [-(j ^ 2) * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 20429, 21017], [-(j ^ 2) * x ^ 2 * y ^ 5 + (-(j ^ 2) + j) * x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3, 6217], [-(j ^ 2) * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y + j * x ^ 5, 16044], [-(j ^ 2) * x ^ 4 * y ^ 3 + (-(j ^ 2) + j) * x ^ 5 * y ^ 2 + j * x ^ 6 * y, 17472], [-(j ^ 2) * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y + j * x ^ 4, 20441, 20525, 20861, 21029], [-(j ^ 2) * x + j * y, 24221], [-(j ^ 2) * x * y + j * x ^ 2, 13417, 13501, 13837, 13921, 14005, 20456, 20540, 20876, 20960, 21044, 22693, 27193], [-(j ^ 2) * x * y + j * y ^ 2, 19780, 19797, 23039], [-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y, 6857, 42221], [-(j ^ 2) * x * y ^ 2 + j * y ^ 3, 37571], [-(j ^ 2) * x * y ^ 3 + j * x ^ 2 * y ^ 2, 6241, 6843, 8907, 20946, 33703, 42207], [-(j ^ 2) * x * y ^ 3 + j * x ^ 3 * y, 21111, 27736, 41512], [-(j ^ 2) * x * y ^ 4 + j * x ^ 2 * y ^ 3, 6242, 11175, 42297], [-(j ^ 2) * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 6840, 42204], [-(j ^ 2) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 20939], [-(j ^ 2) * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3, 8904], [-(j ^ 2) * x ^ 3 * y + j * x ^ 4, 24111], [-(j ^ 2) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 40920], [-(j ^ 2) * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2, 20424, 20508, 20844, 21012], [-(j ^ 2) * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 24108], [-(j ^ 2) * x ^ 4 * y ^ 4 + j * x ^ 5 * y ^ 3, 35030], [(-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3, 20588], [((((-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - 2 * x ^ 5 * y) + j ^ 2 * x ^ 6, 20252], [(-(j ^ 2) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - x ^ 4 * y, 20173], [(-(j ^ 2) * x ^ 2 * y ^ 5 + j * x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3, 11172], [-(j ^ 2) * x * y ^ 3 + j * x ^ 2 * y ^ 2 + x ^ 4, 31251], [-(j ^ 2) * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3 + x ^ 5 * y, 31248], [-(j ^ 2) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 35205], [-(j ^ 2) * x * y ^ 4 + j * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - 3j) * x ^ 4 * y, 20254], [(-(j ^ 2) * x * y ^ 4 + j * x ^ 2 * y ^ 3) - j * x ^ 3 * y ^ 2, 13796], [((-(j ^ 2) * x * y ^ 3 + j * x ^ 2 * y ^ 2) - j * x ^ 3 * y) + (-(j ^ 2) - 2j) * x ^ 4, 20698], [((-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4) - 2 * j ^ 2 * x ^ 4 * y ^ 2) + 3 * j * x ^ 5 * y + j * x ^ 6, 20426, 20510], [(-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * y ^ 3, 20287, 20791], [(-(j ^ 2) * x ^ 2 * y ^ 3 + j * x ^ 4 * y) - j ^ 2 * x ^ 5, 13713], [(-(j ^ 2) * x ^ 2 * y ^ 4 + j * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 42273], [-(j ^ 2) * x ^ 2 * y + j * x ^ 3 + j ^ 2 * y ^ 3, 20622], [-(j ^ 2) * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j ^ 2 * x ^ 4, 6826, 42190], [-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2 + (-2 * j ^ 2 + j) * x ^ 5 * y + (-(j ^ 2) + j) * x ^ 6, 20585], [-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3 + 2 * j ^ 2 * x ^ 4 * y ^ 2 + j * x ^ 5 * y + j * x ^ 6, 20249], [(-(j ^ 2) * x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3) - j ^ 2 * y ^ 3, 25305], [-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2, 13363], [-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3, 42258], [(-(j ^ 2) * x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3 + (j ^ 2 + 2j) * x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y, 6808, 42172], [-(j ^ 2) * x * y ^ 5 + j * x ^ 2 * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 5 * y + j ^ 2 * x ^ 6, 20756], [-(j ^ 2) * x ^ 2 * y ^ 5 + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 4 + 2 * j * x ^ 4 * y ^ 3, 24780], [(-(j ^ 2) * x * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y) - x ^ 4, 20854], [-(j ^ 2) * x * y ^ 4 + (-(j ^ 2) + 2j) * x ^ 2 * y ^ 3 + 3 * j * x ^ 3 * y ^ 2, 24783], [-(j ^ 2) * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3, 13460, 27152], [-(j ^ 2) * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3, 20336], [-(j ^ 2) * x ^ 2 * y ^ 5 + 2 * j * x ^ 3 * y ^ 4, 27387, 41835], [((-(j ^ 2) * x * y ^ 4 + 2 * j * x ^ 3 * y ^ 2) - j * x ^ 4 * y) + x ^ 5, 12941], [(-(j ^ 2) * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y) - j ^ 2 * x ^ 4, 24447], [(-(j ^ 2) * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 24444], [((-(j ^ 2) * x ^ 2 * y ^ 5 + 2 * j * x ^ 3 * y ^ 4 + (3 * j ^ 2 + j) * x ^ 4 * y ^ 3) - 2 * j * x ^ 5 * y ^ 2) + (-(j ^ 2) - 2j) * x ^ 6 * y, 20332], [((-(j ^ 2) * x * y ^ 6 + 2 * j * x ^ 2 * y ^ 5 + 2 * j * x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3) + x ^ 6 * y, 27723, 41499], [-(j ^ 2) * x * y ^ 5 + 2 * j * x ^ 2 * y ^ 4 + (4 * j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 - 2j) * x ^ 4 * y ^ 2, 13958], [-(j ^ 2) * x * y ^ 5 + (j ^ 2 + 2j) * x ^ 2 * y ^ 4 + (3 * j ^ 2 + j) * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + 3 * j * x ^ 5 * y + j * x ^ 6, 20846, 21014], [((-(j ^ 2) * x * y ^ 5 + (j ^ 2 + 2j) * x ^ 2 * y ^ 4 + (3 * j ^ 2 + j) * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 20923], [-(j ^ 2) * x * y ^ 5 + (j ^ 2 + 2j) * x ^ 2 * y ^ 4 + (4 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (j ^ 2 - 2j) * x ^ 4 * y ^ 2, 13951], [((-(j ^ 2) * x ^ 2 * y ^ 7 + (j ^ 2 + 2j) * x ^ 3 * y ^ 6 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 5 + (3 * j ^ 2 + 2j) * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3) + x ^ 7 * y ^ 2, 27720, 41496], [-(j ^ 2) * x * y ^ 3 + (j ^ 2 + 3j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 - j) * x ^ 3 * y, 13804], [-(j ^ 2) * x * y ^ 4 + (j ^ 2 + 3j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 3 * y ^ 2, 13800], [-(j ^ 2) * x * y ^ 3 + (j ^ 2 + 3j) * x ^ 2 * y ^ 2 + 2 * j ^ 2 * x ^ 3 * y, 13468, 27160], [-(j ^ 2) * x * y ^ 4 + (j ^ 2 + 3j) * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2, 13464, 27156], [j ^ 2, 4185, 16999, 17945, 18539, 18959, 25181, 25271, 26783, 30188], [j ^ 2 * x, 4166, 4168, 5191, 11212, 18527, 18942, 18947, 20320, 20399, 20661, 20828, 24137, 24473, 25244, 25260, 25671, 26756, 26772, 26781, 34079], [j ^ 2 * y, 5194, 12078, 17764, 18869, 19389, 19777, 19784, 19805, 19809, 23032, 24745, 26162, 37997], [j ^ 2 * x * y, 6848, 6870, 9692, 9764, 12064, 17752, 19370, 19372, 19792, 24465, 25227, 26151, 32802, 37992, 38844, 40289, 42212, 42234], [j ^ 2 * x * y ^ 2, 4127, 4561, 5160, 9334, 12966, 16976, 17744, 17748, 25230, 26322, 26742, 38501, 39845], [j ^ 2 * x * y ^ 3, 4555, 19331, 24286, 42279], [j ^ 2 * x * y ^ 4, 14058], [j ^ 2 * x ^ 2, 4144, 5779, 6619, 6866, 9510, 11200, 12390, 16650, 20643, 24132, 24454, 24468, 26762, 32692, 34062, 34067, 42230], [j ^ 2 * y ^ 2, 5177, 6874, 19013, 19446, 19629, 19783, 20191, 24732, 26433, 42238], [j ^ 2 * x ^ 2 * y, 11196, 17904, 19348, 19436, 20182, 25646, 31364, 33464, 34471, 37982, 42319], [j ^ 2 * x ^ 2 * y ^ 2, 4546, 12959, 18488, 18828, 19849, 20180, 25223, 26735, 38496, 39839], [j ^ 2 * x ^ 2 * y ^ 3, 4541, 12353, 16970, 19664, 27405, 41853], [j ^ 2 * x ^ 2 * y ^ 4, 14051], [j ^ 2 * x ^ 2 * y ^ 5, 33686], [j ^ 2 * x ^ 3, 13734, 24122, 24458, 26482, 26747, 34219], [j ^ 2 * y ^ 3, 19867, 20707, 42290], [j ^ 2 * x ^ 3 * y, 4123, 7014, 11177, 26729, 28171, 34724, 41770], [j ^ 2 * x ^ 3 * y ^ 2, 12017, 13446, 13782, 19327, 19747, 20165, 27138, 28169, 38486, 38812, 40248], [j ^ 2 * x ^ 3 * y ^ 3, 11930, 18482, 28151, 40408], [j ^ 2 * x ^ 3 * y ^ 4, 19658], [j ^ 2 * x ^ 4, 13125, 41938], [j ^ 2 * y ^ 4, 19589, 26393], [j ^ 2 * x ^ 4 * y, 34461], [j ^ 2 * x ^ 4 * y ^ 2, 19836, 20676], [j ^ 2 * x ^ 4 * y ^ 3, 11928, 19238], [j ^ 2 * x ^ 5, 6237], [j ^ 2 * x ^ 5 * y ^ 2, 41584], [((j ^ 2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 4 * x ^ 3 * y) + (2 * j ^ 2 + j) * x ^ 4, 13785], [((j ^ 2 * x ^ 2 * y ^ 3 - 2 * x ^ 3 * y ^ 2) - 4 * x ^ 4 * y) + (2 * j ^ 2 + j) * x ^ 5, 13795], [(j ^ 2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) + (4 * j ^ 2 + 3j) * x ^ 3 * y + (2 * j ^ 2 + j) * x ^ 4, 13869], [(j ^ 2 * x ^ 2 * y ^ 3 - 2 * x ^ 3 * y ^ 2) + (4 * j ^ 2 + 3j) * x ^ 4 * y + (2 * j ^ 2 + j) * x ^ 5, 13879], [j ^ 2 * x - y, 25266], [j ^ 2 * x * y - x ^ 2, 4587, 12315, 16988, 19687], [j ^ 2 * x * y - y ^ 2, 20303, 20314, 20650, 20818], [j ^ 2 * x * y ^ 2 - x ^ 2 * y, 6159, 6495, 6663, 6851, 12310, 42215], [j ^ 2 * x * y ^ 2 - y ^ 3, 5317], [j ^ 2 * x * y ^ 3 - x ^ 3 * y, 13976], [j ^ 2 * x * y ^ 3 - y ^ 4, 5318], [j ^ 2 * x ^ 2 * y - x ^ 3, 18500], [j ^ 2 * x ^ 3 * y - x ^ 4, 18485], [j ^ 2 * x ^ 3 * y ^ 2 - x ^ 4 * y, 28172], [j ^ 2 * x ^ 3 * y ^ 3 - x ^ 5 * y, 13107], [j ^ 2 * x ^ 3 * y ^ 4 - x ^ 5 * y ^ 2, 20080], [j ^ 2 * x ^ 4 * y ^ 4 - x ^ 5 * y ^ 3, 33938], [((j ^ 2 * x ^ 3 * y ^ 5 - x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3) + (3 * j ^ 2 + j) * x ^ 6 * y ^ 2 + j ^ 2 * x ^ 7 * y, 20246], [((j ^ 2 * x ^ 2 * y ^ 5 - x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 33939], [(j ^ 2 * x * y ^ 2 - x ^ 2 * y) - j * x ^ 3, 6846, 42210], [((j ^ 2 * x * y ^ 4 - x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 19745], [((j ^ 2 * x * y ^ 5 - x ^ 2 * y ^ 4) - j ^ 2 * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2, 19741], [((j ^ 2 * x ^ 2 * y ^ 6 - x ^ 3 * y ^ 5) - j ^ 2 * x ^ 4 * y ^ 4) - j ^ 2 * x ^ 5 * y ^ 3, 19740], [(j ^ 2 * x * y ^ 3 - x ^ 2 * y ^ 2) + j ^ 2 * x ^ 4, 21141], [((j ^ 2 * x ^ 3 * y ^ 6 - x ^ 4 * y ^ 5) + j ^ 2 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3, 33936], [(((j ^ 2 * x * y ^ 5 - x ^ 2 * y ^ 4) + j ^ 2 * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) + j ^ 2 * y ^ 6, 14034], [(j ^ 2 * x * y ^ 2 - x ^ 2 * y) + j * x ^ 3, 12028], [((j ^ 2 * x * y ^ 3 - x ^ 2 * y ^ 2) + 2 * j * x ^ 3 * y + j * x ^ 4) - j * y ^ 4, 20595], [(j ^ 2 * x * y ^ 4 - x ^ 2 * y ^ 3) + 2 * j * x ^ 3 * y ^ 2 + (-2 * j ^ 2 + 2j) * x ^ 4 * y + (-(j ^ 2) + j) * x ^ 5, 20599, 20767], [(j ^ 2 * x * y ^ 4 - x ^ 2 * y ^ 3) + (j ^ 2 + 2j) * x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 20263], [((j ^ 2 * x ^ 2 * y ^ 5 - x ^ 3 * y ^ 4) + (j ^ 2 + 3j) * x ^ 4 * y ^ 3 + (-(j ^ 2) + j) * x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y, 20581, 20749], [j ^ 2 * x * y ^ 2 + x ^ 2 * y, 19007, 20454, 20538], [j ^ 2 * x * y ^ 2 + y ^ 3, 19008], [j ^ 2 * x ^ 2 + y ^ 2, 20372], [j ^ 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 6815, 42179], [j ^ 2 * x * y ^ 2 + x ^ 2 * y + x ^ 3 + j * y ^ 3, 19864, 20704], [((j ^ 2 * x * y ^ 4 + x ^ 2 * y ^ 3) - 3 * j ^ 2 * x ^ 3 * y ^ 2) + (-(j ^ 2) + j) * x ^ 4 * y, 13870], [((j ^ 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - 2 * j ^ 2 * x ^ 4 * y) + (-(j ^ 2) + j) * x ^ 5, 20934], [(j ^ 2 * x ^ 2 * y ^ 2 + x ^ 3 * y) - j ^ 2 * x ^ 4, 20948], [(j ^ 2 * x * y ^ 3 + x ^ 2 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 3 * y + j ^ 2 * x ^ 4) - y ^ 4, 20344], [j ^ 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + (j ^ 2 + 2j) * x ^ 4 * y + (j ^ 2 + 2j) * x ^ 5, 20682], [j ^ 2 * x ^ 2 * y ^ 5 + (-(j ^ 2) - 5j) * x ^ 3 * y ^ 4 + 5 * x ^ 4 * y ^ 3 + (-(j ^ 2) + j) * x ^ 5 * y ^ 2 + (j ^ 2 + 2j) * x ^ 6 * y, 13864], [(j ^ 2 * x ^ 2 * y ^ 5 - 4 * j * x ^ 3 * y ^ 4) + 4 * x ^ 4 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 2, 13444, 27136], [(j ^ 2 * x ^ 2 * y ^ 5 - 4 * j * x ^ 3 * y ^ 4) + (-4 * j ^ 2 - 3j) * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 13780], [(j ^ 2 * x * y ^ 4 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 3) - 2 * j ^ 2 * x ^ 3 * y ^ 2, 13967], [((j ^ 2 * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y) - j ^ 2 * x ^ 4) - j ^ 2 * y ^ 4, 13960], [(j ^ 2 * x * y ^ 5 - 2 * j * x ^ 2 * y ^ 4) + (-4 * j ^ 2 - 2j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 + 2j) * x ^ 4 * y ^ 2, 13957], [(j ^ 2 * x ^ 2 * y ^ 5 - 2 * j * x ^ 3 * y ^ 4) + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2 + x ^ 6 * y, 13695], [(j ^ 2 * x ^ 2 * y ^ 6 - 2 * j * x ^ 3 * y ^ 5) + (-(j ^ 2) - 2j) * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 42255], [(j ^ 2 * x * y ^ 3 - 2 * j * x ^ 2 * y ^ 2) - 2 * j * x ^ 3 * y, 6839, 42203], [(j ^ 2 * x ^ 2 * y ^ 3 - 2 * j * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y, 6822, 42186], [(j ^ 2 * x * y ^ 5 - 2 * j * x ^ 2 * y ^ 4) + (j ^ 2 - j) * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 23016], [((j ^ 2 * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2) + (-(j ^ 2) + j) * x ^ 4 * y, 13450, 27142], [j ^ 2 * x * y ^ 2 + (j ^ 2 - 2j) * x ^ 2 * y + 2 * x ^ 3, 21121], [(j ^ 2 * x * y ^ 5 + (j ^ 2 - 2j) * x ^ 2 * y ^ 4) - 3 * j * x ^ 3 * y ^ 3, 26631], [(j ^ 2 * x ^ 2 * y ^ 6 + (j ^ 2 - 2j) * x ^ 3 * y ^ 5) - 3 * j * x ^ 4 * y ^ 4, 26628], [((j ^ 2 * x ^ 2 * y ^ 5 + (j ^ 2 - 2j) * x ^ 3 * y ^ 4) - 3 * j * x ^ 4 * y ^ 3) + (-(j ^ 2) - 2j) * x ^ 5 * y ^ 2 + x ^ 6 * y, 13191], [((j ^ 2 * x * y ^ 6 + (j ^ 2 - 2j) * x ^ 2 * y ^ 5) - 3 * j * x ^ 3 * y ^ 4) - j * x ^ 4 * y ^ 3, 25284], [(j ^ 2 * x ^ 3 * y ^ 4 + (j ^ 2 - 2j) * x ^ 4 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 5 * y ^ 2) - j * x ^ 6 * y, 20079], [((j ^ 2 * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2) - 3 * j ^ 2 * x ^ 4 * y) + (-(j ^ 2) + j) * x ^ 5, 21018], [j ^ 2 * x ^ 2 * y + (-2 * j ^ 2 - j) * x ^ 3 + j * y ^ 3, 21153], [j ^ 2 * x - j * y, 25269], [j ^ 2 * x * y - j * x ^ 2, 13404, 13488, 13992, 20310, 20646, 20814, 27180], [j ^ 2 * x * y - j * y ^ 2, 6201, 6537, 6705, 18852], [j ^ 2 * x * y ^ 2 - j * x ^ 2 * y, 13891, 37981], [j ^ 2 * x * y ^ 2 - j * y ^ 3, 19765], [j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2, 13983, 20610], [j ^ 2 * x * y ^ 4 - j * x ^ 3 * y ^ 2, 27741, 41517], [j ^ 2 * x * y ^ 5 - j * x ^ 2 * y ^ 4, 33685], [j ^ 2 * x ^ 2 * y - j * x ^ 3, 22683, 24121], [j ^ 2 * x ^ 2 * y ^ 2 - j * x ^ 3 * y, 13371, 13455, 13959, 26142, 27147, 40914], [j ^ 2 * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2, 20603, 35221], [j ^ 2 * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3, 13868, 35222], [j ^ 2 * x ^ 3 * y - j * x ^ 4, 15204, 20458, 20542, 20878, 21046], [j ^ 2 * x ^ 3 * y ^ 2 - j * x ^ 4 * y, 22680], [(j ^ 2 * x * y ^ 2 - j * x ^ 2 * y) - y ^ 3, 20455, 20539, 20875, 21043], [(j ^ 2 * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) - x ^ 5, 32679], [(j ^ 2 * x ^ 3 * y ^ 4 - j * x ^ 4 * y ^ 3) - x ^ 6 * y, 32676], [((j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 6225], [(j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2) + x ^ 3 * y, 18997], [(j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2) + 2 * x ^ 3 * y + x ^ 4, 20273, 20777], [(j ^ 2 * x * y ^ 2 - j * x ^ 2 * y) - j * y ^ 3, 42321], [(j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 42303], [(j ^ 2 * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 24192], [(j ^ 2 * x ^ 6 * y ^ 3 - j * x ^ 7 * y ^ 2) - j * x ^ 8 * y, 41664], [((j ^ 2 * x ^ 2 * y ^ 5 - j * x ^ 3 * y ^ 4) + (2 * j ^ 2 - j) * x ^ 4 * y ^ 3) - 2 * j * x ^ 5 * y ^ 2, 20919], [(j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y, 20784], [(j ^ 2 * x * y ^ 3 - j * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 20280], [(j ^ 2 * x * y ^ 4 - j * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2, 13379], [(j ^ 2 * x * y ^ 4 - j * x ^ 2 * y ^ 3) + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y, 13786], [(j ^ 2 * x ^ 2 * y ^ 3 - j * x ^ 3 * y ^ 2) + j * x ^ 4 * y, 6563], [((j ^ 2 * x ^ 3 * y ^ 3 - j * x ^ 4 * y ^ 2) + j * x ^ 5 * y) - x ^ 6, 5969], [j ^ 2 * x * y + (j ^ 2 - j) * x ^ 2, 20304, 20640, 20808], [j ^ 2 * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y, 20271, 20607, 20775], [j ^ 2 * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2, 20358], [j ^ 2 * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2, 20351], [j ^ 2 * x ^ 2 * y ^ 6 + (j ^ 2 - j) * x ^ 3 * y ^ 5, 33684], [(((j ^ 2 * x * y ^ 5 + (j ^ 2 - j) * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) + (2 * j ^ 2 + j) * x ^ 5 * y, 20928], [j ^ 2 * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2 + x ^ 4 * y, 26725], [j ^ 2 * x * y ^ 5 + (j ^ 2 - j) * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + (-(j ^ 2) + j) * x ^ 4 * y ^ 2, 13369], [j ^ 2 * x ^ 3 * y ^ 6 + (j ^ 2 - j) * x ^ 4 * y ^ 5 + (-(j ^ 2) - 3j) * x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 13692], [((j ^ 2 * x ^ 3 * y ^ 6 + (j ^ 2 - j) * x ^ 4 * y ^ 5) - 2 * j * x ^ 5 * y ^ 4) + (-(j ^ 2) - 2j) * x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 13188], [(j ^ 2 * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y) - j * x ^ 3, 20469, 21042, 21057], [(j ^ 2 * x ^ 2 * y ^ 2 + (j ^ 2 - j) * x ^ 3 * y) - j * x ^ 4, 16467, 20446], [(j ^ 2 * x ^ 3 * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y) - j * x ^ 5, 18399], [(j ^ 2 * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2) - j * x ^ 5 * y, 16464], [(j ^ 2 * x ^ 3 * y ^ 5 + (j ^ 2 - j) * x ^ 4 * y ^ 4) - j * x ^ 5 * y ^ 3, 35197], [(j ^ 2 * x ^ 4 * y ^ 3 + (j ^ 2 - j) * x ^ 5 * y ^ 2) - j * x ^ 6 * y, 18396], [((j ^ 2 * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2) - j * x ^ 3 * y) + x ^ 4, 20864, 21032], [((j ^ 2 * x ^ 2 * y ^ 5 + (j ^ 2 - j) * x ^ 3 * y ^ 4) - j * x ^ 4 * y ^ 3) + x ^ 5 * y ^ 2, 42264], [j ^ 2 * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 6235], [j ^ 2 * x * y ^ 4 + (j ^ 2 - j) * x ^ 2 * y ^ 3 + j * x ^ 4 * y, 20334], [j ^ 2 * x * y ^ 3 + (2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y, 21127], [j ^ 2 * x * y ^ 3 - j ^ 2 * x ^ 3 * y, 6850, 42214], [j ^ 2 * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 9496], [j ^ 2 * x ^ 3 * y ^ 3 - j ^ 2 * x ^ 5 * y, 13108], [(j ^ 2 * x ^ 2 * y ^ 5 - j ^ 2 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 26714], [(j ^ 2 * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) + (-3 * j ^ 2 - j) * x ^ 4 * y, 20086], [(j ^ 2 * x ^ 2 * y ^ 5 - j ^ 2 * x ^ 3 * y ^ 4) + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 3, 12938], [((j ^ 2 * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) - 2 * j ^ 2 * x ^ 4 * y) + (-(j ^ 2) + j) * x ^ 5, 20430], [(j ^ 2 * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) + (-2 * j ^ 2 + j) * x ^ 4 * y + (-(j ^ 2) + j) * x ^ 5, 20850], [(j ^ 2 * x ^ 3 * y ^ 5 - j ^ 2 * x ^ 4 * y ^ 4) + j * x ^ 5 * y ^ 3, 12348], [(j ^ 2 * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j * x ^ 3 + j ^ 2 * y ^ 3, 20790], [((j ^ 2 * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + (2 * j ^ 2 + 3j) * x ^ 3 * y + (j ^ 2 - j) * x ^ 4) - y ^ 4, 20764], [j ^ 2 * x * y + j ^ 2 * x ^ 2, 23804, 25148], [j ^ 2 * x * y + j ^ 2 * y ^ 2, 14099, 25300, 26334], [j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y, 4133, 14072, 14088, 14097, 20355, 24801, 26644], [j ^ 2 * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 19337], [j ^ 2 * x * y ^ 3 + j ^ 2 * y ^ 4, 19583, 26387], [j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3, 17496, 34029], [j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 13204, 14078, 25217, 35248], [j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2, 9328], [j ^ 2 * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3, 24280], [j ^ 2 * x ^ 3 * y + j ^ 2 * x ^ 4, 17486, 20621], [j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 14063], [j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2, 19239], [j ^ 2 * x ^ 3 * y ^ 4 + j ^ 2 * x ^ 4 * y ^ 3, 12014], [j ^ 2 * x ^ 4 * y ^ 4 + j ^ 2 * x ^ 5 * y ^ 3, 12012], [((j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 23776], [(j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 4540, 12268], [((j ^ 2 * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 6231], [j ^ 2 * x * y + j ^ 2 * x ^ 2 + y ^ 2, 18489, 18495], [j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 20083], [j ^ 2 * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 20267], [((j ^ 2 * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3) - 2 * j * x ^ 3 * y ^ 2) + 2 * x ^ 4 * y + x ^ 5, 20771], [(j ^ 2 * x * y ^ 5 + j ^ 2 * x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3, 42278], [(j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y) - j * y ^ 4, 20259], [(j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 20090], [((j ^ 2 * x * y ^ 5 + j ^ 2 * x ^ 2 * y ^ 4) - j ^ 2 * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2, 6817, 42181], [j ^ 2 * x * y + j ^ 2 * x ^ 2 + j ^ 2 * y ^ 2, 20282, 20618, 20786], [j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 21026], [j ^ 2 * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y + j ^ 2 * x ^ 4, 13365], [j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y + j ^ 2 * x ^ 5, 13375], [j ^ 2 * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y, 31342], [j ^ 2 * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2, 12949, 25213], [((j ^ 2 * x * y ^ 5 + 2 * j ^ 2 * x ^ 2 * y ^ 4) - 2 * j * x ^ 3 * y ^ 3) + 4 * x ^ 4 * y ^ 2 + (-3 * j ^ 2 - 2j) * x ^ 5 * y + x ^ 6, 20257], [j ^ 2 * x * y ^ 5 + 2 * j ^ 2 * x ^ 2 * y ^ 4 + (j ^ 2 - 2j) * x ^ 3 * y ^ 3 + (-3 * j ^ 2 - 5j) * x ^ 4 * y ^ 2 + (-3 * j ^ 2 - 2j) * x ^ 5 * y + x ^ 6, 20761], [j ^ 2 * x ^ 2 * y ^ 3 + 2 * j ^ 2 * x ^ 3 * y ^ 2 + (j ^ 2 - j) * x ^ 4 * y, 20423, 21011], [j ^ 2 * x ^ 2 * y ^ 4 + 2 * j ^ 2 * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2, 13874], [j ^ 2 * x * y ^ 4 + (-(j ^ 2) + j) * x ^ 2 * y ^ 3 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y, 6151], [j ^ 2 * x * y ^ 2 + j * x ^ 3, 20947], [j ^ 2 * x ^ 2 * y ^ 5 + j * x ^ 3 * y ^ 4, 32762], [j ^ 2 * x ^ 2 * y ^ 5 + j * x ^ 4 * y ^ 3, 12350], [j ^ 2 * x ^ 3 * y ^ 6 + j * x ^ 5 * y ^ 4, 6974], [j ^ 2 * x ^ 4 * y ^ 5 + j * x ^ 6 * y ^ 3, 35198], [(j ^ 2 * x * y ^ 2 + j * x ^ 2 * y) - y ^ 3, 4569, 12297], [j ^ 2 * x * y ^ 2 + j * x ^ 2 * y + y ^ 3, 20176], [(j ^ 2 * x ^ 2 * y ^ 5 + j * x ^ 3 * y ^ 4) - 2 * j ^ 2 * x ^ 4 * y ^ 3, 25202], [((j ^ 2 * x ^ 2 * y ^ 7 + j * x ^ 3 * y ^ 6) - 2 * j ^ 2 * x ^ 4 * y ^ 5) + x ^ 5 * y ^ 4, 14030], [j ^ 2 * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y + (-(j ^ 2) + j) * x ^ 5, 20514], [j ^ 2 * x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3, 6855, 42219], [j ^ 2 * x * y ^ 3 + j * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y, 19846], [((j ^ 2 * x * y ^ 5 + j * x ^ 3 * y ^ 3 + 2 * j * x ^ 4 * y ^ 2) - 3 * j * x ^ 5 * y) + (-(j ^ 2) - 2j) * x ^ 6, 20669], [j ^ 2 * x * y ^ 2 + (2 * j ^ 2 + j) * x ^ 2 * y, 6184], [((j ^ 2 * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 26136], [((j ^ 2 * x ^ 3 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3) + 3 * j ^ 2 * x ^ 6 * y ^ 2 + j ^ 2 * x ^ 7 * y, 20750], [(j ^ 2 * x * y ^ 4 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 12277], [(j ^ 2 * x ^ 2 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 3 * y) - x ^ 4, 19853], [(j ^ 2 * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 4548], [(j ^ 2 * x * y + (2 * j ^ 2 + j) * x ^ 2) - j * y ^ 2, 20397], [j ^ 2 * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 6824, 42188], [j ^ 2 * x ^ 4 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y, 6136, 6640], [j ^ 2 * x ^ 2 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3, 14041], [j ^ 2 * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y + j * x ^ 5, 6571], [j ^ 2 * x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y + j * x ^ 4, 12032], [((j ^ 2 * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3) - 2 * j ^ 2 * x ^ 4 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 5 * y, 6137], [j ^ 2 * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3 + (-2 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + (-4 * j ^ 2 - j) * x ^ 4 * y + (-2 * j ^ 2 - j) * x ^ 5, 20347], [j ^ 2 * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y, 19839], [(j ^ 2 * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3 + 4 * j * x ^ 4 * y ^ 2 + (j ^ 2 + 3j) * x ^ 5 * y) - x ^ 6, 6809, 42173], [(j ^ 2 * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y) - x ^ 4, 5973], [(j ^ 2 * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y) - x ^ 5, 5983], [(j ^ 2 * x ^ 2 * y ^ 5 + (j ^ 2 + 2j) * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 20245], [j ^ 2 * x ^ 2 * y ^ 5 + (j ^ 2 + 2j) * x ^ 3 * y ^ 4 + (-(j ^ 2) + 2j) * x ^ 4 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 2 + x ^ 6 * y, 20329], [j ^ 2 * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y + j * x ^ 4, 25219], [j ^ 2 * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y + (j ^ 2 + 2j) * x ^ 5, 19842], [j ^ 2 * x * y ^ 5 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (-(j ^ 2) + 3j) * x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 19829], [j ^ 2 * x ^ 3 * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 4 * y ^ 2 + j ^ 2 * x ^ 5 * y, 6144, 6648], [(j ^ 2 * x * y ^ 4 + (j ^ 2 + 3j) * x ^ 2 * y ^ 3 + (j ^ 2 + 4j) * x ^ 3 * y ^ 2 + (j ^ 2 + 3j) * x ^ 4 * y) - x ^ 5, 6823, 42187], [j ^ 2 * x ^ 2 * y ^ 5 + (2 * j ^ 2 + 3j) * x ^ 3 * y ^ 4 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 5 * y ^ 2 + j ^ 2 * x ^ 6 * y, 6637], [j ^ 2 * x ^ 3 * y ^ 6 + (2 * j ^ 2 + 3j) * x ^ 4 * y ^ 5 + (2 * j ^ 2 + 3j) * x ^ 5 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 6 * y ^ 3 + j ^ 2 * x ^ 7 * y ^ 2, 6636], [((2 * j ^ 2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - j * y ^ 4, 6819, 42183], [(2 * j ^ 2 * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 24700], [(2 * j ^ 2 * x ^ 2 * y ^ 5 - 5 * j * x ^ 3 * y ^ 4) + 3 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 13948], [2 * j ^ 2 * x ^ 2 * y ^ 5 + (j ^ 2 - 5j) * x ^ 3 * y ^ 4 + (-4 * j ^ 2 - 5j) * x ^ 4 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 5 * y ^ 2, 13360], [((2 * j ^ 2 * x * y ^ 4 + (-2 * j ^ 2 - 3j) * x ^ 2 * y ^ 3) - 3 * j ^ 2 * x ^ 3 * y ^ 2) - y ^ 5, 20352], [2 * j ^ 2 * x ^ 2 * y ^ 2 + (-(j ^ 2) - 3j) * x ^ 3 * y + (-2 * j ^ 2 - j) * x ^ 4, 13876], [(2 * j ^ 2 * x * y ^ 2 - j * x ^ 2 * y) - y ^ 3, 13903], [2 * j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 20444, 20528], [(2 * j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - y ^ 3, 6520, 14094], [(2 * j ^ 2 * x ^ 2 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 12276], [((3 * j ^ 2 * x * y ^ 4 + (2 * j ^ 2 - 2j) * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2) + (-(j ^ 2) + j) * x ^ 4 * y, 13366], [((3 * j ^ 2 * x * y ^ 4 + 3 * j ^ 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) + j * x ^ 4 * y, 20422], [((3 * j ^ 2 * x * y ^ 4 + (4 * j ^ 2 + j) * x ^ 2 * y ^ 3) - 3 * x ^ 3 * y ^ 2) + j * x ^ 4 * y, 20506], [4 * j ^ 2 * x * y ^ 4 + (j ^ 2 - 2j) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y + j ^ 2 * y ^ 5, 13954], [((4 * j ^ 2 * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 2 + (j ^ 2 + 4j) * x ^ 4 * y) - x ^ 5) + j ^ 2 * y ^ 5, 21010], [((4 * j ^ 2 * x * y ^ 4 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 3 + 3 * j * x ^ 3 * y ^ 2 + (j ^ 2 + 4j) * x ^ 4 * y) - x ^ 5) + j ^ 2 * y ^ 5, 20842], [(((-4 * j ^ 2 + j) * x * y ^ 4 + 4 * j * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - j ^ 2 * y ^ 5, 13964], [(-2 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (-5 * j ^ 2 - j) * x ^ 4 * y ^ 2 + (-3 * j ^ 2 - j) * x ^ 5 * y, 6641], [((-2 * j ^ 2 + j) * x ^ 2 * y ^ 3 - 3 * j ^ 2 * x ^ 3 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 4 * y, 6487], [(-2 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 20433, 20517], [(-2 * j ^ 2 + j) * x * y ^ 4 + 3 * j * x ^ 2 * y ^ 3, 13376], [(-(j ^ 2) + j) * x ^ 2 * y ^ 2, 19425], [(((-(j ^ 2) + j) * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2) + 3 * j * x ^ 4 * y + j * x ^ 5, 20856, 21024], [((-(j ^ 2) + j) * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) + j ^ 2 * x ^ 4, 20938], [((((-(j ^ 2) + j) * x * y ^ 5 - 2 * x ^ 2 * y ^ 4) + 3 * j ^ 2 * x ^ 3 * y ^ 3) - 2 * j * x ^ 4 * y ^ 2) - j ^ 2 * y ^ 6, 20930], [((-(j ^ 2) + j) * x * y - x ^ 2) + y ^ 2, 20365], [(((-(j ^ 2) + j) * x * y ^ 3 - x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) + j * x ^ 4, 20440, 20524], [(((-(j ^ 2) + j) * x * y ^ 4 - 2 * j * x ^ 2 * y ^ 3) - 2 * j * x ^ 3 * y ^ 2) - j ^ 2 * y ^ 5, 6821, 42185], [((((-(j ^ 2) + j) * x * y ^ 4 - 3 * j ^ 2 * x ^ 2 * y ^ 3) - 3 * j ^ 2 * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y) - j ^ 2 * y ^ 5, 14037], [(-(j ^ 2) + j) * x ^ 4 * y ^ 2 - 2 * j ^ 2 * x ^ 5 * y, 28150], [((-(j ^ 2) + j) * x ^ 2 * y ^ 3 - 2 * j ^ 2 * x ^ 3 * y ^ 2) + (-2 * j ^ 2 - 4j) * x ^ 4 * y + (-(j ^ 2) - 2j) * x ^ 5, 20683], [(-(j ^ 2) + j) * x * y - j ^ 2 * x ^ 2, 24216], [(-(j ^ 2) + j) * x ^ 2 * y - j ^ 2 * x ^ 3, 24206], [(-(j ^ 2) + j) * x ^ 3 * y ^ 2 - j ^ 2 * x ^ 4 * y, 14074], [(-(j ^ 2) + j) * x ^ 4 * y - j ^ 2 * x ^ 5, 41604, 41688], [(-(j ^ 2) + j) * x ^ 5 * y - j ^ 2 * x ^ 6, 41594, 41678], [((-(j ^ 2) + j) * x ^ 2 * y ^ 5 - j ^ 2 * x ^ 3 * y ^ 4) + (-3 * j ^ 2 - 4j) * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2, 20497], [((-(j ^ 2) + j) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) + j * y ^ 3, 23029], [((-(j ^ 2) + j) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j * y ^ 4, 37561], [(-(j ^ 2) + j) * x * y + (-(j ^ 2) + j) * x ^ 2 + j * y ^ 2, 20565, 20901, 20985], [(-(j ^ 2) + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 20099], [((-(j ^ 2) + j) * x * y ^ 2 + j * x ^ 2 * y) - y ^ 3, 19749, 19755], [((-(j ^ 2) + j) * x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * y ^ 3, 20623], [(-(j ^ 2) + j) * x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + x ^ 3 * y + j * x ^ 4, 20860, 21028], [(-(j ^ 2) + j) * x ^ 3 * y ^ 3 + (-2 * j ^ 2 + 2j) * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 20089], [((-(j ^ 2) + j) * x ^ 2 * y ^ 2 + (-(j ^ 2) + 2j) * x ^ 3 * y) - x ^ 4, 6838, 42202], [(-(j ^ 2) + j) * x * y ^ 4 + (-(j ^ 2) + 2j) * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 20432, 20516], [(-(j ^ 2) + j) * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 5 * y, 21104], [(-(j ^ 2) + j) * x * y + (j ^ 2 + 2j) * x ^ 2, 13410, 13998], [(-(j ^ 2) + j) * x * y ^ 4 + (j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + 3 * j * x ^ 4 * y + j * x ^ 5, 20436, 20520], [(-(j ^ 2) + j) * x ^ 2 * y ^ 3 + 3 * j * x ^ 3 * y ^ 2 + 2 * j * x ^ 4 * y + j * x ^ 5, 20435, 20519], [(-(j ^ 2) + j) * x ^ 2 * y ^ 2 + (2 * j ^ 2 + 3j) * x ^ 3 * y + (2 * j ^ 2 + j) * x ^ 4, 13810, 13894], [(-(j ^ 2) + j) * x ^ 2 * y ^ 4 + (-2 * j ^ 2 + 4j) * x ^ 3 * y ^ 3 + (j ^ 2 + 6j) * x ^ 4 * y ^ 2 + 2 * j * x ^ 5 * y + j * x ^ 6, 20845, 21013], [j, 4175, 8854, 8935, 31279], [j * x, 4158, 4163, 5787, 6107, 6634, 8830, 9520, 12974, 13508, 13854, 13934, 17499, 18943, 18949, 19897, 19900, 20405, 20743, 20744, 22703, 24811, 26330, 26760, 27200, 30166], [j * y, 5161, 5168, 9778, 11203, 16500, 19379, 19799, 30177, 33900], [j * x * y, 4576, 4593, 5155, 5176, 9516, 12304, 12321, 18936, 19362, 19367, 19782, 19787, 19883, 19894, 20734, 23876, 23877, 25314, 26743, 27100, 31870, 33390, 38920, 42334], [j * x * y ^ 2, 5169, 6172, 6189, 6508, 6525, 6676, 6693, 8823, 8912, 9681, 14076, 18678, 19002, 19264, 19272, 19768, 20196, 24720, 26673, 27415, 30512, 30513, 33700, 33867, 38916, 41863, 42317], [j * x * y ^ 3, 9747, 11180, 13722, 27748, 31843, 38411, 40511, 40763, 41524], [j * x * y ^ 4, 5731, 19412, 27744, 41520], [j * x ^ 2, 4651, 5323, 6090, 6095, 12379, 19872, 20130, 20137, 22937, 23866, 40959], [j * y ^ 2, 8827, 18939, 19267, 26341, 26827, 39425, 39426, 40541], [j * x ^ 2 * y, 6605, 9499, 9670, 12958, 17490, 19688, 19871, 20125, 26158, 26727, 28178, 30502, 31432, 31448, 31846, 40432, 40954], [j * x ^ 2 * y ^ 2, 5721, 6058, 18671, 19863, 24787, 32780, 33704, 34812, 38406, 39834, 40428, 41028], [j * x ^ 2 * y ^ 3, 8906, 13715, 14043, 25208, 26720, 28185, 31839, 32768], [j * x ^ 2 * y ^ 4, 5717, 27391, 27392, 41839, 41840, 42275], [j * x ^ 2 * y ^ 5, 19406], [j * x ^ 3, 6258, 11946, 13140, 24116, 26476, 35059], [j * y ^ 3, 9751, 26321, 26841, 27751, 33693, 33699, 38418, 39846, 40533, 40785, 41527], [j * x ^ 3 * y, 6588, 9495, 28167, 33972, 41764], [j * x ^ 3 * y ^ 2, 12356, 33689, 34712, 34713, 37970, 40411, 40418], [j * x ^ 3 * y ^ 3, 18652, 20164, 38894], [j * x ^ 4, 35227, 41932], [j * y ^ 4, 19757, 40757], [j * x ^ 4 * y, 5723, 24110, 34702], [j * x ^ 4 * y ^ 2, 35036, 40407, 41164], [j * x ^ 4 * y ^ 3, 6980, 38892], [j * x ^ 4 * y ^ 4, 32760], [j * x ^ 5, 6825, 13710, 42189], [j * x ^ 5 * y ^ 2, 35204], [(j * x ^ 2 * y ^ 4 - 3 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 12940], [(j * x ^ 2 * y ^ 5 - 3 * x ^ 3 * y ^ 4) + 2 * j ^ 2 * x ^ 4 * y ^ 3 + (-(j ^ 2) + j) * x ^ 5 * y ^ 2, 20752], [(j * x ^ 2 * y ^ 4 - 3 * x ^ 3 * y ^ 3) + j * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + 2 * x ^ 6, 26716], [(j * x ^ 2 * y ^ 5 - 3 * x ^ 3 * y ^ 4) + (2 * j ^ 2 + j) * x ^ 4 * y ^ 3 + j * x ^ 5 * y ^ 2, 20248], [((j * x ^ 2 * y ^ 6 - 3 * x ^ 3 * y ^ 5) + (7 * j ^ 2 + 4j) * x ^ 4 * y ^ 4 + (7 * j ^ 2 + 3j) * x ^ 5 * y ^ 3 + (6 * j ^ 2 + 5j) * x ^ 6 * y ^ 2) - 3 * x ^ 7 * y, 26124], [j * x ^ 2 * y ^ 4 - 2 * x ^ 3 * y ^ 3, 34445], [(j * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + 2 * j ^ 2 * x ^ 3 * y ^ 2, 26305], [(j * x * y ^ 5 - 2 * x ^ 2 * y ^ 4) + 4 * j ^ 2 * x ^ 3 * y ^ 3 + (2 * j ^ 2 - 2j) * x ^ 4 * y ^ 2, 20341], [(j * x ^ 2 * y ^ 2 - 2 * x ^ 3 * y) + (2 * j ^ 2 + j) * x ^ 4, 13906], [j * x * y - x ^ 2, 6012, 6611, 12988, 19890, 20466, 20473, 20550, 20557, 20730, 20886, 20893, 20970, 20977, 21054, 21061, 34236], [j * x * y ^ 2 - x ^ 2 * y, 9680, 13138, 13398, 13482, 13818, 13902, 13986, 27174, 34059], [j * x * y ^ 2 - y ^ 3, 42311], [j * x * y ^ 3 - x ^ 2 * y ^ 2, 20437, 34474], [j * x * y ^ 5 - x ^ 2 * y ^ 4, 34447], [j * x ^ 2 * y - x ^ 3, 6004, 6021, 6594, 13132, 34042], [j * x ^ 2 * y ^ 2 - x ^ 3 * y, 5979, 12368, 13128, 13892, 18992, 20949], [j * x ^ 2 * y ^ 2 - y ^ 4, 20613], [j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2, 20270], [j * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3, 11174, 31419, 34783, 40999], [j * x ^ 3 * y ^ 2 - x ^ 4 * y, 13111], [j * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2, 6992, 18986, 26463], [j * x ^ 3 * y ^ 4 - x ^ 4 * y ^ 3, 34779, 40995], [j * x ^ 3 * y ^ 5 - x ^ 4 * y ^ 4, 31416], [j * x ^ 4 * y ^ 2 - x ^ 5 * y, 28158], [j * x ^ 4 * y ^ 3 - x ^ 5 * y ^ 2, 41919], [(j * x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 28192], [(j * x * y ^ 5 - x ^ 2 * y ^ 4) - y ^ 6, 19407], [(j * x ^ 2 * y ^ 2 - x ^ 3 * y) - x ^ 4, 11941], [(j * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 28157], [(j * x ^ 3 * y ^ 2 - x ^ 4 * y) - x ^ 5, 13118], [(j * x * y ^ 3 - x ^ 2 * y ^ 2) + y ^ 4, 5141], [(j * x * y ^ 5 - x ^ 3 * y ^ 3) + x ^ 5 * y, 27728, 41504], [(j * x ^ 3 * y ^ 4 - x ^ 4 * y ^ 3) + x ^ 6 * y, 41751], [(j * x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + (-2 * j ^ 2 - j) * x ^ 4, 20374, 20957], [(j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y + (-2 * j ^ 2 - j) * x ^ 5, 13458, 13878, 27150], [((j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y) - j ^ 2 * x ^ 5, 13374], [(j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 4 * y + (-2 * j ^ 2 - j) * x ^ 5, 13794], [((j * x ^ 2 * y ^ 5 - x ^ 3 * y ^ 4) - j * x ^ 4 * y ^ 3) + (-(j ^ 2) + j) * x ^ 5 * y ^ 2 + j * x ^ 6 * y, 6553], [((j * x ^ 3 * y ^ 6 - x ^ 4 * y ^ 5) - j * x ^ 5 * y ^ 4) + (-(j ^ 2) + j) * x ^ 6 * y ^ 3 + j * x ^ 7 * y ^ 2, 6552], [(j * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) + (j ^ 2 - j) * x ^ 4 * y ^ 2, 13454, 27146], [(((((j * x ^ 2 * y ^ 7 - x ^ 3 * y ^ 6) - 2 * j ^ 2 * x ^ 4 * y ^ 5) - 6 * j ^ 2 * x ^ 5 * y ^ 4) + (-6 * j ^ 2 - 2j) * x ^ 6 * y ^ 3) - 2 * j ^ 2 * x ^ 7 * y ^ 2) - j ^ 2 * x ^ 8 * y, 20664], [(((((j * x * y ^ 6 - x ^ 2 * y ^ 5) - 2 * j ^ 2 * x ^ 3 * y ^ 4) + (-6 * j ^ 2 + j) * x ^ 4 * y ^ 3) - 5 * j ^ 2 * x ^ 5 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 6 * y) - j ^ 2 * x ^ 7, 19827], [(j * x * y ^ 2 - x ^ 2 * y) - j ^ 2 * x ^ 3, 12364], [(j * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 6988], [(j * x * y ^ 4 - x ^ 2 * y ^ 3) + 2 * j ^ 2 * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y, 20601], [((j * x ^ 2 * y ^ 6 - x ^ 3 * y ^ 5) + (-2 * j ^ 2 + j) * x ^ 4 * y ^ 4 + (-3 * j ^ 2 + j) * x ^ 5 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 6 * y ^ 2) - j ^ 2 * x ^ 7 * y, 20666], [(j * x ^ 2 * y ^ 5 - x ^ 3 * y ^ 4) + j * x ^ 5 * y ^ 2, 5713], [(j * x ^ 3 * y ^ 6 - x ^ 4 * y ^ 5) + j * x ^ 6 * y ^ 3, 5712], [j * x + y, 26329], [j * x * y + x ^ 2, 17494], [j * x * y ^ 2 + x ^ 3, 31256], [j * x * y ^ 3 + x ^ 3 * y, 13378], [j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 22514], [j * x ^ 2 * y ^ 3 + x ^ 4 * y, 31250], [j * x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 31586], [j * x ^ 3 + y ^ 3, 20863], [j * x ^ 3 * y ^ 2 + x ^ 4 * y, 42288], [j * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 22512], [j * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3, 31584], [j * x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 36962, 37381, 41177], [j * x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 25957, 36120], [j * x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 22429, 26311], [j * x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3, 24528], [j * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 22428], [j * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2 + x ^ 6 * y, 34189], [j * x * y ^ 2 + x ^ 2 * y + 2 * x ^ 3, 29149], [j * x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 30663], [j * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 29148], [j * x * y ^ 5 + x ^ 2 * y ^ 4 + (j ^ 2 - 2j) * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2, 5125], [j * x ^ 2 * y ^ 6 + x ^ 3 * y ^ 5 + (j ^ 2 - 2j) * x ^ 4 * y ^ 4 + (j ^ 2 - j) * x ^ 5 * y ^ 3, 5124], [((j * x * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 2 * y ^ 2 + (-(j ^ 2) - 3j) * x ^ 3 * y) - j * x ^ 4) + j * y ^ 4, 20847, 20931], [j * x * y ^ 3 + (-3 * j ^ 2 - j) * x ^ 3 * y + j * x ^ 4, 20680], [(j * x * y + (-2 * j ^ 2 - j) * x ^ 2) - y ^ 2, 16978], [(j * x * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y) - j * x ^ 4, 6645], [(j * x ^ 3 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 3 + (-(j ^ 2) - 2j) * x ^ 5 * y ^ 2) - j * x ^ 6 * y, 20665], [j * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 3, 26294], [(j * x ^ 2 * y ^ 3 + (-2 * j ^ 2 - j) * x ^ 4 * y) - j ^ 2 * x ^ 5, 13962], [j * x * y ^ 2 - j * x ^ 2 * y, 31348, 33448], [j * x * y ^ 3 - j * x ^ 3 * y, 14059], [j * x ^ 2 * y ^ 4 - j * x ^ 3 * y ^ 3, 39820], [j * x ^ 2 * y ^ 5 - j * x ^ 4 * y ^ 3, 14036], [(j * x * y ^ 4 - j * x ^ 2 * y ^ 3) + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 13965], [(j * x * y ^ 3 - j * x ^ 3 * y) + (-2 * j ^ 2 - j) * x ^ 4, 21136], [(j * x ^ 2 * y ^ 2 - j * x ^ 3 * y) - j * x ^ 4, 18908], [((j * x * y ^ 3 + (j ^ 2 - j) * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - j ^ 2 * x ^ 4, 20770], [(((j * x * y ^ 5 - 3 * j ^ 2 * x ^ 2 * y ^ 4) + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - j * x ^ 5 * y) - y ^ 6, 21090], [(j * x ^ 2 * y ^ 3 - 2 * j ^ 2 * x ^ 3 * y ^ 2) + 2 * x ^ 4 * y + x ^ 5, 19843], [((j * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) - j * x ^ 3 * y) - y ^ 4, 20170], [j * x - j ^ 2 * y, 12973, 13424, 14022, 20480, 20483, 20564, 20567, 20903, 20910, 20987, 20990, 21071, 21078], [j * x * y - j ^ 2 * y ^ 2, 12979, 13999, 25243, 26335, 26755], [j * x * y ^ 2 - j ^ 2 * x ^ 2 * y, 6844, 6861, 32776, 42208, 42225], [j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2, 19260], [j * x * y ^ 3 - j ^ 2 * y ^ 4, 14071, 21039], [j * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y, 42305], [j * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2, 6143, 6647, 38480, 39824], [j * x ^ 3 * y - j ^ 2 * x ^ 4, 41609, 41693], [j * x ^ 3 * y ^ 4 - j ^ 2 * x ^ 4 * y ^ 3, 38474], [(j * x * y - j ^ 2 * x ^ 2) - y ^ 2, 20387], [(j * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - x ^ 3, 12952], [(j * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) + x ^ 4 * y, 20354], [(j * x ^ 2 * y ^ 5 - j ^ 2 * x ^ 3 * y ^ 4) + x ^ 4 * y ^ 3, 37884], [(j * x ^ 4 * y ^ 6 - j ^ 2 * x ^ 5 * y ^ 5) + x ^ 6 * y ^ 4, 14028], [(j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 32005], [(j * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2 + x ^ 4 * y, 30240, 38138], [(j * x * y ^ 5 - j ^ 2 * x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 36624], [(j * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + x ^ 5 * y, 39650, 40237], [(j * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 36960], [(j * x ^ 2 * y ^ 4 - j ^ 2 * x ^ 3 * y ^ 3) + 2 * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y, 40239], [(j * x ^ 3 * y ^ 5 - j ^ 2 * x ^ 4 * y ^ 4) + 2 * x ^ 5 * y ^ 3 + 2 * x ^ 6 * y ^ 2, 40236], [((j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 3 * y) - x ^ 4, 19840], [((j * x ^ 2 * y ^ 3 - j ^ 2 * x ^ 3 * y ^ 2) - j * x ^ 4 * y) + (2 * j ^ 2 + j) * x ^ 5, 13702], [(j * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3, 20385], [(j * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4, 34203], [(j * x ^ 3 * y ^ 5 - j ^ 2 * x ^ 4 * y ^ 4) - j ^ 2 * x ^ 5 * y ^ 3, 39816], [((j * x * y ^ 4 - j ^ 2 * x ^ 2 * y ^ 3) + j ^ 2 * x ^ 3 * y ^ 2) - j * x ^ 4 * y, 5129], [(j * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) + j * y ^ 4, 19751], [j * x * y ^ 2 + j ^ 2 * x ^ 2 * y, 19873, 20461, 20545, 20713, 20881, 20965, 21049], [j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2, 26315], [j * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 5 * y, 28161], [(j * x * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 20769], [j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y + x ^ 4, 20364], [j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y + (-2 * j ^ 2 - j) * x ^ 4, 20602], [j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (j ^ 2 - j) * x ^ 3 * y, 20266], [j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (j ^ 2 - j) * x ^ 3 * y + x ^ 4, 26722], [((j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 3 * y) - x ^ 4, 20692], [(j * x * y ^ 2 + j ^ 2 * x ^ 2 * y) - j ^ 2 * y ^ 3, 20443, 20527], [(j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 5997], [(((j * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2) + (3 * j ^ 2 + 2j) * x ^ 4 * y) - x ^ 5, 20688], [((j * x * y ^ 5 + j ^ 2 * x ^ 2 * y ^ 4 + 3 * j ^ 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) + (-(j ^ 2) + j) * x ^ 5 * y, 14038], [(j * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y) - x ^ 4, 19852], [(j * x * y ^ 4 + j ^ 2 * x ^ 2 * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 4 * y) - x ^ 5, 19848], [j * x ^ 3 * y ^ 4 + 2 * j ^ 2 * x ^ 4 * y ^ 3 + (3 * j ^ 2 - j) * x ^ 5 * y ^ 2 + x ^ 6 * y, 21091], [j * x * y ^ 3 + (-2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + 2 * x ^ 4, 20673], [j * x ^ 2 * y + (-(j ^ 2) + j) * x ^ 3, 32686], [j * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2, 5131], [j * x * y ^ 5 + (-(j ^ 2) + j) * x ^ 2 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 38136], [j * x ^ 2 * y ^ 5 + (-(j ^ 2) + j) * x ^ 3 * y ^ 4 + (-2 * j ^ 2 - j) * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 39648], [(j * x ^ 2 * y ^ 4 + (-(j ^ 2) + j) * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2, 38475], [(j * x ^ 3 * y ^ 5 + (-(j ^ 2) + j) * x ^ 4 * y ^ 4) - j ^ 2 * x ^ 5 * y ^ 3, 38472], [j * x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y + (-(j ^ 2) + j) * x ^ 4, 20531, 20867], [j * x * y ^ 4 + (-(j ^ 2) + j) * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 20853, 21021], [j * x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y + j * x ^ 4, 34197], [j * x * y + j * x ^ 2, 4125, 4131, 10618, 12567, 16487, 18929, 20299, 20803, 24215, 25257], [j * x * y ^ 2 + j * x ^ 2 * y, 12562, 18834, 19329, 19335, 21139, 23793, 25137, 26824, 32360, 33886], [j * x * y ^ 2 + j * y ^ 3, 26328], [j * x * y ^ 3 + j * x ^ 2 * y ^ 2, 10591, 13218, 26634, 26651, 33451, 33862, 38899], [j * x * y ^ 3 + j * y ^ 4, 26813, 40494, 40746], [j * x * y ^ 4 + j * x ^ 2 * y ^ 3, 19243], [j * x * y ^ 5 + j * x ^ 2 * y ^ 4, 27727, 41503], [j * x ^ 2 * y + j * x ^ 3, 10594, 18419, 18923, 21148, 25126, 25234], [j * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 18669, 20105, 24794, 34222], [j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 10587, 13211, 38895, 40921], [j * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3, 27398, 28146, 41846], [j * x ^ 3 * y + j * x ^ 4, 16046, 19865, 20705, 25628], [j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 19830, 20670, 34207], [j * x ^ 4 * y + j * x ^ 5, 13206, 41603, 41687], [j * x ^ 4 * y ^ 2 + j * x ^ 5 * y, 12520, 17474], [(j * x * y ^ 2 + j * x ^ 2 * y) - x ^ 3, 6599, 21146], [(j * x * y ^ 2 + j * x ^ 2 * y) - y ^ 3, 33861], [(j * x ^ 2 * y ^ 2 + j * x ^ 3 * y) - y ^ 4, 20277, 20781], [(j * x ^ 2 * y ^ 4 + j * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 33943], [((j * x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) - j * x ^ 6 * y, 13696], [j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 21125], [(j * x * y + j * x ^ 2) - j * y ^ 2, 25240], [(j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - 2 * j ^ 2 * x ^ 4 * y, 34450], [(j * x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * x ^ 3, 24452], [(j * x * y ^ 3 + j * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y, 20857, 20941], [(j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 20606, 20774, 24446], [j * x ^ 2 * y ^ 2 + j * x ^ 3 * y + (-(j ^ 2) + j) * x ^ 4, 13114], [j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y, 20255, 20759], [(((j * x ^ 2 * y ^ 7 + j * x ^ 3 * y ^ 6 + (-(j ^ 2) + j) * x ^ 4 * y ^ 5 + (-6 * j ^ 2 + j) * x ^ 5 * y ^ 4) - 6 * j ^ 2 * x ^ 6 * y ^ 3) - 2 * j ^ 2 * x ^ 7 * y ^ 2) - j ^ 2 * x ^ 8 * y, 19824], [j * x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3, 20301, 20637, 20805, 24205], [j * x * y ^ 2 + j * x ^ 2 * y + j * y ^ 3, 25307], [j * x * y ^ 4 + j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 26803], [j * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j * x ^ 4, 20278], [j * x ^ 3 * y ^ 2 + j * x ^ 4 * y + j * x ^ 5, 25623], [j * x ^ 2 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 - 2j) * x ^ 4 * y ^ 2, 13790], [(j * x * y ^ 4 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 3 + (2 * j ^ 2 - 2j) * x ^ 3 * y ^ 2) - 2 * j * x ^ 4 * y, 20597], [((j * x * y ^ 6 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 5 + (-2 * j ^ 2 - j) * x ^ 3 * y ^ 4 + (-5 * j ^ 2 - j) * x ^ 4 * y ^ 3 + (-5 * j ^ 2 - j) * x ^ 5 * y ^ 2) - 2 * j ^ 2 * x ^ 6 * y) - j ^ 2 * x ^ 7, 20667], [(j * x ^ 2 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 4) - j * x ^ 4 * y ^ 3, 34443], [(j * x ^ 3 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 3) - j * x ^ 5 * y ^ 2, 6219], [j * x ^ 2 * y ^ 4 + (2 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (j ^ 2 - j) * x ^ 4 * y ^ 2, 13447, 27139], [(j * x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (j ^ 2 - j) * x ^ 3 * y) - 2 * j * x ^ 4, 20615], [j * x ^ 2 * y ^ 4 + (3 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 - j) * x ^ 4 * y ^ 2, 13783], [j * x ^ 2 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 4 * y, 33946], [j * x ^ 2 * y ^ 3 + (-(j ^ 2) + 2j) * x ^ 3 * y ^ 2 + (-(j ^ 2) + j) * x ^ 4 * y, 13198], [j * x * y + 2 * j * x ^ 2, 19862, 20702], [j * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2, 24788, 38906], [j * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3, 40753], [j * x * y ^ 5 + 2 * j * x ^ 2 * y ^ 4, 27734, 41510], [j * x ^ 2 * y ^ 3 + 2 * j * x ^ 3 * y ^ 2, 18661], [j * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3, 24782], [(j * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3) - j ^ 2 * x ^ 3 * y ^ 2, 19250], [(j * x ^ 3 * y ^ 3 + 2 * j * x ^ 4 * y ^ 2) - j ^ 2 * x ^ 5 * y, 6816, 42180], [j * x * y ^ 2 + 2 * j * x ^ 2 * y + j * x ^ 3, 16477, 20548], [j * x * y ^ 4 + 2 * j * x ^ 2 * y ^ 3 + j * x ^ 3 * y ^ 2, 12529, 26641], [j * x ^ 2 * y ^ 2 + 2 * j * x ^ 3 * y + j * x ^ 4, 18409, 18913], [j * x ^ 2 * y ^ 3 + 2 * j * x ^ 3 * y ^ 2 + j * x ^ 4 * y, 12528, 20513, 20849], [(j * x ^ 2 * y ^ 4 + 2 * j * x ^ 3 * y ^ 3 + j * x ^ 4 * y ^ 2) - x ^ 5 * y, 13705], [(j * x ^ 2 * y ^ 5 + 2 * j * x ^ 3 * y ^ 4 + j * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 42265], [j * x * y + (j ^ 2 + 2j) * x ^ 2, 13494, 13830, 13914, 19884, 20724, 27186], [j * x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y, 26314], [j * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2, 20703], [j * x * y ^ 4 + (j ^ 2 + 2j) * x ^ 2 * y ^ 3, 38401, 40501], [j * x ^ 2 * y + (j ^ 2 + 2j) * x ^ 3, 21138, 21145], [j * x ^ 2 * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3, 34790, 41006], [j * x ^ 3 * y + (j ^ 2 + 2j) * x ^ 4, 20290, 20794], [j * x ^ 3 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2, 33950], [(j * x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y) - x ^ 3, 13911], [(j * x ^ 2 * y ^ 2 + (j ^ 2 + 2j) * x ^ 3 * y) - x ^ 4, 5998], [(j * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2) - x ^ 4 * y, 5974, 34198], [j * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + x ^ 3 * y + (-2 * j ^ 2 - j) * x ^ 4, 20362], [(((j * x ^ 2 * y ^ 6 + (j ^ 2 + 2j) * x ^ 3 * y ^ 5) - 3 * j ^ 2 * x ^ 4 * y ^ 4) + (-3 * j ^ 2 + j) * x ^ 5 * y ^ 3 + (-(j ^ 2) + j) * x ^ 6 * y ^ 2) - j ^ 2 * x ^ 7 * y, 19826], [(j * x ^ 3 * y ^ 4 + (j ^ 2 + 2j) * x ^ 4 * y ^ 3 + j ^ 2 * x ^ 5 * y ^ 2) - j * x ^ 6 * y, 13192], [j * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 26313], [j * x ^ 2 * y ^ 6 + (j ^ 2 + 2j) * x ^ 3 * y ^ 5 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 4 + x ^ 6 * y ^ 2, 27722, 41498], [((j * x ^ 2 * y ^ 4 + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 3) - j * x ^ 4 * y ^ 2) + x ^ 5 * y, 25204], [(j * x ^ 2 * y ^ 4 + 3 * j * x ^ 3 * y ^ 3 + (j ^ 2 + 3j) * x ^ 4 * y ^ 2) - x ^ 5 * y, 13201], [(j * x ^ 2 * y ^ 3 + (j ^ 2 + 3j) * x ^ 3 * y ^ 2 + j * x ^ 4 * y) - 2 * j ^ 2 * x ^ 5, 6226], [((((j * x * y ^ 5 + (2 * j ^ 2 + 3j) * x ^ 2 * y ^ 4) - 4 * x ^ 3 * y ^ 3) + (4 * j ^ 2 + 3j) * x ^ 4 * y ^ 2) - 4 * x ^ 5 * y) - 2 * x ^ 6, 26127], [((j * x ^ 2 * y ^ 6 + (4 * j ^ 2 + 3j) * x ^ 3 * y ^ 5 + 3 * j ^ 2 * x ^ 4 * y ^ 4) - j * x ^ 5 * y ^ 3) + j * x ^ 6 * y ^ 2, 14032], [j * x ^ 2 * y ^ 4 + (4 * j ^ 2 + 3j) * x ^ 3 * y ^ 3 + (3 * j ^ 2 + j) * x ^ 4 * y ^ 2, 13867], [(2 * j ^ 2 + j) * x ^ 3 * y, 20092], [(2 * j ^ 2 + j) * x - y, 4923], [(2 * j ^ 2 + j) * x * y - y ^ 2, 5344], [(2 * j ^ 2 + j) * x ^ 2 * y ^ 2 - x ^ 3 * y, 24196, 25221, 26733], [(2 * j ^ 2 + j) * x ^ 5 * y ^ 2 - x ^ 6 * y, 41668], [(((2 * j ^ 2 + j) * x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2) - j * x ^ 5 * y, 14049], [((((2 * j ^ 2 + j) * x * y ^ 5 + x ^ 2 * y ^ 4 + (-3 * j ^ 2 - j) * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2) + (j ^ 2 - j) * x ^ 5 * y) - j * x ^ 6, 20417], [((((2 * j ^ 2 + j) * x * y ^ 5 + x ^ 2 * y ^ 4) - 4 * j ^ 2 * x ^ 3 * y ^ 3) + (-2 * j ^ 2 + 2j) * x ^ 4 * y ^ 2) - y ^ 6, 20342], [((((2 * j ^ 2 + j) * x * y ^ 5 + x ^ 2 * y ^ 4) - 3 * j ^ 2 * x ^ 3 * y ^ 3) + 2 * j * x ^ 4 * y ^ 2) - y ^ 6, 20594], [((2 * j ^ 2 + j) * x * y ^ 2 - j * x ^ 2 * y) - y ^ 3, 13483, 13819, 27175], [((2 * j ^ 2 + j) * x * y ^ 2 - j * x ^ 2 * y) + (j ^ 2 + 2j) * y ^ 3, 13399, 13987], [((2 * j ^ 2 + j) * x * y ^ 4 + (j ^ 2 - j) * x ^ 2 * y ^ 3) - j * x ^ 4 * y, 20684], [(2 * j ^ 2 + j) * x ^ 3 * y ^ 5 + (3 * j ^ 2 - j) * x ^ 4 * y ^ 4 + (j ^ 2 - 2j) * x ^ 5 * y ^ 3 + 2 * j ^ 2 * x ^ 6 * y ^ 2, 21087], [(2 * j ^ 2 + j) * x * y ^ 2 - j ^ 2 * y ^ 3, 19773], [((((2 * j ^ 2 + j) * x * y ^ 5 - j ^ 2 * x ^ 2 * y ^ 4) + (-4 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (-3 * j ^ 2 - 2j) * x ^ 4 * y ^ 2) - 2 * j * x ^ 5 * y) - j * x ^ 6, 20501], [((2 * j ^ 2 + j) * x * y ^ 5 - j ^ 2 * x ^ 2 * y ^ 4) + (-4 * j ^ 2 - j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 - 2j) * x ^ 5 * y + (j ^ 2 - j) * x ^ 6, 20921], [(2 * j ^ 2 + j) * x * y + j ^ 2 * x ^ 2, 18909, 18915], [(2 * j ^ 2 + j) * x ^ 2 * y + j ^ 2 * x ^ 3, 34035], [(2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y, 25632], [(2 * j ^ 2 + j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y, 25621], [(2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + 2 * j ^ 2 * x ^ 3 * y + j * x ^ 4, 6820, 42184], [(2 * j ^ 2 + j) * x ^ 4 * y ^ 6 + 3 * j ^ 2 * x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4 + j * x ^ 7 * y ^ 3, 35196], [((2 * j ^ 2 + j) * x * y ^ 2 + j * x ^ 2 * y + j * x ^ 3) - y ^ 3, 6057, 6063], [(((2 * j ^ 2 + j) * x * y ^ 3 + j * x ^ 2 * y ^ 2 + (j ^ 2 + 3j) * x ^ 3 * y) - x ^ 4) - y ^ 4, 6567], [(((2 * j ^ 2 + j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 + j) * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y) - x ^ 6, 26125], [(2 * j ^ 2 + j) * x ^ 2 * y ^ 6 + (3 * j ^ 2 + j) * x ^ 3 * y ^ 5 + 2 * j ^ 2 * x ^ 4 * y ^ 4, 42253], [(3 * j ^ 2 + j) * x ^ 3 * y ^ 7 + 4 * j ^ 2 * x ^ 4 * y ^ 6 + (j ^ 2 - 3j) * x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4 + x ^ 7 * y ^ 3, 42252], [((3 * j ^ 2 + j) * x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (3 * j ^ 2 + 2j) * x ^ 3 * y + j ^ 2 * x ^ 4) - y ^ 4, 13953], [((3 * j ^ 2 + j) * x * y ^ 2 + (3 * j ^ 2 + j) * x ^ 2 * y) - y ^ 3, 6688], [((-(j ^ 2) + 2j) * x ^ 3 * y ^ 3 - 3 * j ^ 2 * x ^ 4 * y ^ 2) + (-2 * j ^ 2 - j) * x ^ 5 * y, 6473], [((-(j ^ 2) + 2j) * x ^ 2 * y ^ 2 - j ^ 2 * x ^ 3 * y) + x ^ 4, 19833], [((-(j ^ 2) + 2j) * x * y ^ 4 + (4 * j ^ 2 + 3j) * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2) - j ^ 2 * y ^ 5, 20940], [2 * j * x ^ 2 * y ^ 2, 12956], [(((2 * j * x ^ 2 * y ^ 5 - 3 * x ^ 3 * y ^ 4) + j ^ 2 * x ^ 4 * y ^ 3) - 2 * j ^ 2 * x ^ 5 * y ^ 2) - j ^ 2 * x ^ 6 * y, 20584], [((2 * j * x * y ^ 2 - 2 * x ^ 2 * y) + j ^ 2 * x ^ 3) - j ^ 2 * y ^ 3, 13480, 13816, 13900, 27172], [(2 * j * x * y + j ^ 2 * x ^ 2) - j ^ 2 * y ^ 2, 20281, 20617, 20785], [2 * j * x * y ^ 2 + j * y ^ 3, 39419], [2 * j * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j * y ^ 4, 25297], [2 * j * x ^ 2 * y ^ 4 + (j ^ 2 + 2j) * x ^ 3 * y ^ 3, 26296], [2 * j * x ^ 2 * y ^ 3 + (3 * j ^ 2 + 4j) * x ^ 3 * y ^ 2 + (3 * j ^ 2 - j) * x ^ 4 * y + x ^ 5, 21112], [2 * j * x ^ 2 * y ^ 4 + (j ^ 2 + 5j) * x ^ 3 * y ^ 3 + (2 * j ^ 2 + 5j) * x ^ 4 * y ^ 2 + 2 * j * x ^ 5 * y + j * x ^ 6, 20425, 20509], [((j ^ 2 + 2j) * x ^ 3 * y ^ 4 - 3 * x ^ 4 * y ^ 3) + j ^ 2 * x ^ 5 * y ^ 2, 28153], [(j ^ 2 + 2j) * x * y ^ 3 - 2 * x ^ 2 * y ^ 2, 20521], [((j ^ 2 + 2j) * x ^ 3 * y ^ 2 - 2 * x ^ 4 * y) + x ^ 5, 21116], [((j ^ 2 + 2j) * x ^ 3 * y ^ 2 - 2 * x ^ 4 * y) - j ^ 2 * x ^ 5, 35212], [(j ^ 2 + 2j) * x * y - x ^ 2, 18431], [(j ^ 2 + 2j) * x ^ 2 * y - x ^ 3, 9506], [(j ^ 2 + 2j) * x ^ 2 * y ^ 2 - x ^ 3 * y, 16468, 25226], [(j ^ 2 + 2j) * x ^ 3 * y ^ 2 - x ^ 4 * y, 18904, 19841, 20681], [((j ^ 2 + 2j) * x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) + j ^ 2 * x ^ 4 * y, 6158, 6662], [(j ^ 2 + 2j) * x * y ^ 3 + x ^ 3 * y, 6477], [(j ^ 2 + 2j) * x * y ^ 2 + x ^ 2 * y + x ^ 3, 26301], [((j ^ 2 + 2j) * x * y ^ 3 + x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y) - j * x ^ 4, 6141], [((j ^ 2 + 2j) * x * y ^ 2 + x ^ 3) - j ^ 2 * y ^ 3, 20706], [(((((j ^ 2 + 2j) * x * y ^ 5 + (-(j ^ 2) + j) * x ^ 2 * y ^ 4) - j ^ 2 * x ^ 3 * y ^ 3) - j ^ 2 * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y) + j ^ 2 * x ^ 6, 13949], [(j ^ 2 + 2j) * x * y ^ 3 + j * y ^ 4, 26802], [(j ^ 2 + 2j) * x ^ 2 * y ^ 2 + j * x ^ 3 * y, 25211], [((j ^ 2 + 2j) * x * y ^ 3 + j * x ^ 2 * y ^ 2) - j * x ^ 3 * y, 6577], [(j ^ 2 + 2j) * x * y + j * x ^ 2 + j * y ^ 2, 20712], [(((j ^ 2 + 2j) * x * y ^ 3 + (2 * j ^ 2 + j) * x ^ 2 * y ^ 2) - 2 * j ^ 2 * x ^ 4) - y ^ 4, 21134], [(j ^ 2 + 2j) * x * y ^ 3 + 2 * j * x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y + x ^ 4, 20679], [(j ^ 2 + 2j) * x ^ 2 * y + (j ^ 2 + 2j) * x ^ 3, 20716], [(j ^ 2 + 2j) * x ^ 3 * y + (j ^ 2 + 2j) * x ^ 4, 19859, 20699], [(j ^ 2 + 2j) * x ^ 3 * y ^ 3 + (j ^ 2 + 2j) * x ^ 4 * y ^ 2, 42272], [((j ^ 2 + 2j) * x * y ^ 3 + (j ^ 2 + 2j) * x ^ 2 * y ^ 2) - x ^ 3 * y, 5130], [((j ^ 2 + 2j) * x ^ 2 * y ^ 3 + (j ^ 2 + 2j) * x ^ 3 * y ^ 2) - j ^ 2 * x ^ 4 * y, 20339], [(j ^ 2 + 2j) * x * y + (j ^ 2 + 2j) * x ^ 2 + j * y ^ 2, 20376], [(j ^ 2 + 2j) * x * y ^ 2 + (j ^ 2 + 2j) * x ^ 2 * y + j * x ^ 3 + j * y ^ 3, 24717], [((((j ^ 2 + 2j) * x * y ^ 5 + 3 * j * x ^ 2 * y ^ 4) - j * x ^ 3 * y ^ 3) + 3 * x ^ 4 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 5 * y) - y ^ 6, 21101], [((((j ^ 2 + 2j) * x * y ^ 3 + 3 * j * x ^ 2 * y ^ 2) - 4 * j ^ 2 * x ^ 3 * y) - 2 * j ^ 2 * x ^ 4) - j * y ^ 4, 20337], [(((3 * j ^ 2 + 2j) * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - j * y ^ 4, 6813, 42177], [(3 * j ^ 2 + 2j) * x ^ 5 * y ^ 4 + (3 * j ^ 2 + j) * x ^ 6 * y ^ 3, 13860], [((((3 * j ^ 2 + 2j) * x * y ^ 3 + (4 * j ^ 2 + 2j) * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - 2 * x ^ 4) - y ^ 4, 24709], [((3 * j * x * y ^ 2 - 2 * x ^ 2 * y) + j ^ 2 * x ^ 3) - 2 * j ^ 2 * y ^ 3, 13396, 13984], [3 * j * x * y ^ 3 + (j ^ 2 + 3j) * x ^ 2 * y ^ 2 + j * y ^ 4, 39409], [((j ^ 2 + 3j) * x ^ 2 * y ^ 2 - x ^ 3 * y) + j ^ 2 * x ^ 4, 21124], [(((j ^ 2 + 3j) * x * y ^ 3 + (3 * j ^ 2 + j) * x ^ 2 * y ^ 2 + (-(j ^ 2) - 2j) * x ^ 3 * y) - j ^ 2 * x ^ 4) + j * y ^ 4, 20944], [(j ^ 2 + 3j) * x * y ^ 4 + 3 * j * x ^ 2 * y ^ 3 + (-(j ^ 2) + j) * x ^ 3 * y ^ 2 + j ^ 2 * y ^ 5, 42261], [((2 * j ^ 2 + 3j) * x * y ^ 2 + j * x ^ 2 * y) - j ^ 2 * x ^ 3, 25209], [4 * j * x * y ^ 4 + (3 * j ^ 2 + 5j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 + 2j) * x ^ 3 * y ^ 2 + j ^ 2 * x ^ 4 * y + j * y ^ 5, 20852, 21020], [(((j ^ 2 + 4j) * x * y ^ 4 + (3 * j ^ 2 + 4j) * x ^ 2 * y ^ 3 + (3 * j ^ 2 + j) * x ^ 3 * y ^ 2) - j * x ^ 4 * y) + j * y ^ 5, 20936], [-1 // x, 31723, 32136], [-y // x, 32994], [-1 // y, 1, 8364, 14115, 14288, 14554, 21172, 21784, 23403, 24482], [-x // y, 3677, 22480, 22966, 23319], [-(x ^ 2) // y, 8841], [-(x ^ 3) // y, 12054], [((-(x ^ 3) * y ^ 2 - 2 * x ^ 4 * y) - x ^ 5) // y, 26143], [(-x - y) // y, 16157], [(-x * y - x ^ 2) // y, 16062, 25173], [(-(x ^ 2) * y - x ^ 3) // y, 24730], [((-x * y ^ 2 - x ^ 2 * y) - x ^ 3) // y, 26175], [(((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4) // y, 10605], [1 // y, 8862, 10387, 14466, 15155, 15317, 22048], [x // y, 4181, 8530, 15222, 15824, 16934, 22036, 22468, 22485, 22552, 22960, 23325], [x ^ 2 // y, 22462], [(x + y) // y, 169, 21340], [(x * y + x ^ 2) // y, 16661, 17921, 22540, 23812], [(x ^ 4 * y + x ^ 5) // y, 12033], [(x * y + x ^ 2 + y ^ 2) // y, 10626, 25167], [(x * y ^ 2 + x ^ 2 * y + x ^ 3) // y, 23800], [((x * y + x ^ 2) - j ^ 2 * y ^ 2) // y, 12060], [(((x * y ^ 2 - j ^ 2 * x ^ 2 * y) - x ^ 3) - j * y ^ 3) // y, 26752], [(-j * x) // y, 22948], [(-j * x ^ 2) // y, 15212], [(-j * x * y ^ 2 + x ^ 2 * y + x ^ 3) // y, 26176], [((-j * x * y - j * x ^ 2) + y ^ 2) // y, 16067], [(((-j * x * y ^ 2 - j * x ^ 2 * y) - j * x ^ 3) - j * y ^ 3) // y, 24712], [(((-j * x * y ^ 2 + (j ^ 2 - j) * x ^ 2 * y) - j * x ^ 3) + y ^ 3) // y, 16057], [(((-j * x * y ^ 3 - 2 * j ^ 2 * x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4) // y, 26740], [-(j ^ 2) // y, 15233], [(-(j ^ 2) * x) // y, 15228, 22954], [(-(j ^ 2) * x ^ 2) // y, 15218], [(-(j ^ 2) * x * y + x ^ 2) // y, 17000], [(-(j ^ 2) * x ^ 2 * y + x ^ 3) // y, 18512], [(-(j ^ 2) * x * y ^ 2 + x ^ 2 * y + x ^ 3) // y, 24724], [(-(j ^ 2) * x * y + x ^ 2 + j * y ^ 2) // y, 22952], [(((-(j ^ 2) * x * y ^ 2 - j ^ 2 * x ^ 2 * y) - j ^ 2 * x ^ 3) - j ^ 2 * y ^ 3) // y, 24718], [(((-(j ^ 2) * x * y ^ 3 - j ^ 2 * x ^ 2 * y ^ 2) - j ^ 2 * x ^ 3 * y) - j ^ 2 * x ^ 4) // y, 26156], [(-(j ^ 2) * x ^ 2 * y ^ 2 + (-(j ^ 2) + j) * x ^ 3 * y + j * x ^ 4) // y, 16047], [(-(j ^ 2) * x * y + j * x ^ 2) // y, 15217], [(j ^ 2 * x) // y, 22964], [(j ^ 2 * x ^ 2 * y - x ^ 3) // y, 18502], [(j ^ 2 * x ^ 2 * y - j * x ^ 3) // y, 15207], [((j ^ 2 * x * y ^ 4 + (j ^ 2 - j) * x ^ 2 * y ^ 3 + (j ^ 2 - j) * x ^ 3 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 4 * y) - x ^ 5) // y, 26144], [(j ^ 2 * x + j ^ 2 * y) // y, 16073], [(j ^ 2 * x * y + j ^ 2 * x ^ 2) // y, 16068], [(j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3) // y, 16058], [(((j ^ 2 * x ^ 2 * y ^ 3 + j ^ 2 * x ^ 3 * y ^ 2) - j * x ^ 4 * y) - j * x ^ 5) // y, 26134], [(j ^ 2 * x * y ^ 2 + j ^ 2 * x ^ 2 * y + j ^ 2 * x ^ 3 + j ^ 2 * y ^ 3) // y, 24728], [(j ^ 2 * x * y ^ 3 + j ^ 2 * x ^ 2 * y ^ 2 + j ^ 2 * x ^ 3 * y + j ^ 2 * x ^ 4) // y, 26146], [((j ^ 2 * x ^ 2 * y ^ 4 + j ^ 2 * x ^ 3 * y ^ 3 + j ^ 2 * x ^ 4 * y ^ 2 + (2 * j ^ 2 + j) * x ^ 5 * y) - x ^ 6) // y, 26129], [(((-(j ^ 2) + j) * x * y ^ 3 + (-(j ^ 2) + j) * x ^ 2 * y ^ 2 + (-2 * j ^ 2 - j) * x ^ 3 * y + x ^ 4) - j ^ 2 * y ^ 4) // y, 24716], [(j * x) // y, 15227], [(j * x ^ 2) // y, 22942], [(j * x * y ^ 2 + x ^ 2 * y + x ^ 3) // y, 22447], [(j * x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4) // y, 22433], [(j * x ^ 2 * y + j * x ^ 3) // y, 16052], [(j * x * y ^ 3 + j * x ^ 2 * y ^ 2 + j * x ^ 3 * y + j * x ^ 4) // y, 24706, 26140]]) * x ^ 0 * y ^ 0
            end
        f37 = function (x, y)
                return dec(90, [[(-4 * x ^ 4 * y ^ 4 - 2 * x ^ 5 * y ^ 3) + x ^ 6 * y ^ 2, 32669], [(-3 * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3) - 2 * x ^ 6 * y, 532, 40999], [-3 * x ^ 3 * y ^ 3 + 2 * x ^ 5 * y, 24837], [-2 * x ^ 2 * y ^ 3, 25466], [-2 * x ^ 3 * y, 7996, 40401], [-2 * x ^ 3 * y ^ 2, 9499, 12771], [-2 * x ^ 3 * y ^ 3, 8991, 9229], [((-2 * x ^ 4 * y ^ 6 - 4 * x ^ 5 * y ^ 5) - x ^ 7 * y ^ 3) - 2 * x ^ 8 * y ^ 2, 32579], [(-2 * x ^ 4 * y ^ 4 - 4 * x ^ 5 * y ^ 3) + x ^ 7 * y, 16546, 16726], [((((-2 * x ^ 4 * y ^ 8 - 3 * x ^ 5 * y ^ 7) + x ^ 6 * y ^ 6 + x ^ 7 * y ^ 5 + x ^ 8 * y ^ 4) - x ^ 10 * y ^ 2) - x ^ 11 * y) - x ^ 12, 16276], [((-2 * x ^ 4 * y ^ 7 - 3 * x ^ 5 * y ^ 6) + 2 * x ^ 6 * y ^ 5 + x ^ 7 * y ^ 4) - x ^ 10 * y, 16366], [(-2 * x ^ 4 * y ^ 5 - 3 * x ^ 5 * y ^ 4) + 3 * x ^ 6 * y ^ 3 + 2 * x ^ 7 * y ^ 2, 16456], [-2 * x ^ 4 * y ^ 2 - 2 * x ^ 5 * y, 353, 533, 40820, 41000], [-2 * x ^ 4 * y ^ 3 - 2 * x ^ 5 * y ^ 2, 32759, 32939], [-2 * x ^ 4 * y ^ 7 - 2 * x ^ 5 * y ^ 6, 32489], [-2 * x * y ^ 2 - x ^ 2 * y, 5392, 45859], [-2 * x ^ 3 * y - x ^ 4, 17261, 17859], [-2 * x ^ 3 * y ^ 2 - x ^ 4 * y, 1432, 9441, 9891, 16901, 25107, 25287, 25467, 41899], [-2 * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2, 1162, 24929, 25289, 41629], [-2 * x ^ 5 * y ^ 2 - x ^ 6 * y, 16821, 17181], [(-2 * x * y - x ^ 2) - y ^ 2, 8526, 8886, 32829, 33189], [((-2 * x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2) - x ^ 5 * y) - x ^ 6, 802, 41269], [-2 * x * y ^ 3 + x ^ 3 * y, 5026, 37431], [-2 * x ^ 3 * y ^ 3 + x ^ 5 * y, 982, 41449], [-2 * x * y ^ 4 + x ^ 3 * y ^ 2 + x ^ 4 * y, 4756, 37161], [-2 * x ^ 3 * y ^ 3 + 2 * x ^ 5 * y, 8347, 32650], [-2 * x ^ 4 * y ^ 3 + 2 * x ^ 6 * y, 263, 40730], [(-2 * x ^ 2 * y ^ 4 + 2 * x ^ 4 * y ^ 2) - x ^ 6, 24836], [(-2 * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2) - x ^ 6 * y, 8599], [-1, 817, 1271, 1362, 1727, 2090, 3366, 4456, 4548, 7240, 7270, 8093, 8097, 8463, 8735, 9098, 9640, 10653, 11203, 11646, 11742, 12464, 12667, 13554, 14462, 14780, 15015, 15548, 15643, 15775, 16008, 17197, 17469, 18380, 24572, 25478, 25750, 26117, 26389, 27664, 28025, 28488, 28760, 28796, 30841, 31763, 34032, 34670, 36970, 38492, 39213, 39218, 39322, 40124, 40590, 45108, 45201, 46393, 47114, 47926, 48018, 48107, 48497, 48560, 48596], [-x, 4539, 7239, 8092, 20739, 24101, 48327, 48559], [-y, 544, 908, 1453, 1908, 2544, 2635, 3090, 4088, 4731, 4915, 5189, 5738, 6340, 7179, 7913, 9606, 9824, 12277, 12487, 12922, 13841, 14009, 14371, 16653, 16924, 17106, 18652, 18743, 18925, 19106, 19289, 19381, 19932, 20474, 21293, 21384, 21565, 21748, 22204, 22742, 23833, 24198, 25387, 25659, 27297, 27570, 27896, 28112, 28303, 28526, 29936, 30935, 33909, 34305, 34762, 35033, 35124, 35307, 35488, 35793, 36303, 36402, 36671, 36760, 36790, 38218, 38401, 38583, 39048, 39402, 39523, 39957, 40048, 40220, 42893, 43165, 43348, 43436, 43619, 43711, 44170, 44262, 44342, 45385, 45660, 45985, 46657, 46929, 47587, 48380], [-x * y, 2109, 2289, 2649, 4359, 6116, 6339, 7912, 11479, 11659, 12289, 12757, 12847, 12937, 13207, 15561, 15799, 18399, 18489, 18939, 19871, 20559, 21131, 21401, 22539, 22931, 23291, 26547, 29247, 30416, 31047, 31589, 32307, 34623, 34713, 35163, 35703, 36050, 37060, 37150, 37240, 37323, 37510, 37593, 46617, 48379], [-x * y ^ 2, 1299, 1660, 1749, 1839, 1930, 2235, 2242, 2325, 2469, 2602, 2775, 3009, 3315, 3909, 3999, 4629, 4719, 4809, 4935, 4942, 5079, 5205, 5619, 5932, 6466, 6742, 6969, 7102, 10245, 10309, 10669, 10785, 10849, 11209, 11389, 13581, 13846, 14025, 14301, 14571, 14809, 18039, 18226, 18352, 18409, 18499, 18586, 18611, 18676, 18802, 18949, 19126, 19151, 19216, 19489, 20051, 20116, 20199, 21232, 21592, 21819, 22132, 22401, 26459, 26909, 27886, 28077, 30766, 31049, 31409, 32309, 34263, 34552, 34790, 35092, 35330, 36230, 38332, 38871, 40049, 42709, 43069, 45409, 46399, 47209, 47569], [-x * y ^ 3, 1029, 1569, 1875, 3772, 5259, 5846, 5979, 9435, 9885, 10155, 10515, 11145, 12045, 13131, 13311, 17542, 17596, 17992, 18049, 18136, 19061, 20962, 21459, 21586, 23356, 26099, 26277, 27537, 29686, 30146, 30147, 33453, 33742, 33993, 34192, 34462, 34822, 35240, 35452, 36352, 42200, 42470, 44239, 46347], [-x * y ^ 4, 1065, 1605, 3232, 8985, 17092, 17239, 17779, 33093, 33292, 43699], [-x * y ^ 5, 705, 16879, 20332], [-(x ^ 2), 6520, 9472, 10016, 12397, 29493, 29678, 32280, 36700, 43803], [-(y ^ 2), 3405, 4630, 4720, 4810, 5080, 5620, 6195, 7103, 11555, 12127, 23197, 26546, 27086, 27116, 27626, 29573, 34533, 34983, 35073, 35523, 36430, 40319, 43989, 44629, 46880, 47570], [-(x ^ 2) * y, 2066, 2516, 5530, 6471, 9517, 10335, 10875, 13305, 19849, 26726, 28076, 30314, 31315, 33820, 34642, 35182, 37612, 38866, 42567, 43017, 47060], [-(x ^ 2) * y ^ 2, 1703, 1973, 2876, 6023, 9247, 13126, 13486, 19881, 26006, 27176, 27536, 31497, 33550, 39573, 42170, 42440, 43377, 46070, 46490], [-(x ^ 2) * y ^ 3, 2056, 3046, 3946, 7185, 12856, 34109, 34379, 34461, 35451, 36351, 38429], [-(x ^ 2) * y ^ 4, 9526, 10066], [-(x ^ 2) * y ^ 5, 12226], [-(x ^ 3), 7016, 9337, 9607, 15381, 19936, 20469, 20476, 22582, 23481, 23842, 33640, 33910, 36140, 45081, 47517, 47781], [-(y ^ 3), 2145, 2595, 2685, 3135, 5260, 21946, 27989, 33723, 34173, 39509, 45170, 45260, 45350, 45620, 46160], [-(x ^ 3) * y, 1433, 3460, 4090, 6026, 10251, 10489, 11839, 14481, 15741, 17236, 17589, 17801, 18351, 18801, 19396, 20209, 20596, 20872, 21862, 22211, 22449, 22941, 23301, 23349, 23836, 24201, 25557, 25827, 30869, 32296, 33903, 35600, 38673, 41900, 42651, 42831, 43191, 44901, 46527, 46881], [-(x ^ 3) * y ^ 2, 1163, 1515, 1702, 1972, 6285, 9319, 9589, 9769, 9981, 10039, 10161, 10521, 10939, 11061, 11151, 11299, 12766, 13221, 13761, 15285, 16876, 17452, 17991, 19691, 20236, 20321, 25829, 29879, 30856, 31306, 31499, 33003, 33363, 33839, 37979, 39592, 41630, 41841, 42169, 42291, 42381, 42439, 43011, 43551, 44000, 44451, 44541, 44630, 45171, 45261, 45351, 45621, 46161, 47511], [-(x ^ 3) * y ^ 3, 615, 975, 5836, 8869, 9049, 9171, 9711, 9796, 13401, 13941, 16642, 17002, 25109, 29866, 30316, 33569, 38241, 41571, 42111, 45801, 46521], [-(x ^ 3) * y ^ 4, 9256, 11596, 11601, 12231, 16519, 16552, 16699, 16732], [-(x ^ 3) * y ^ 5, 16429, 16462], [-(x ^ 4), 1253, 3236, 11587, 12217, 33633, 35890, 36520, 38660, 39560, 41720, 43737], [-(y ^ 4), 1335, 1785, 33273, 45800], [-(x ^ 4) * y, 1245, 13665, 14115, 17902, 32823, 33183, 33659, 37972, 38422], [-(x ^ 4) * y ^ 2, 435, 795], [-(x ^ 4) * y ^ 6, 179], [-(x ^ 5), 3459, 4089, 19659, 19666, 22761], [-(y ^ 5), 885], [-(x ^ 5) * y, 17362, 17721, 21766, 21771, 23391], [-(x ^ 7), 44001, 44631], [((-(x ^ 4) * y ^ 3 - 5 * x ^ 5 * y ^ 2) - 3 * x ^ 6 * y) - x ^ 7, 16636, 16996], [((-(x ^ 2) * y ^ 3 - 4 * x ^ 3 * y ^ 2) - x ^ 4 * y) + x ^ 5, 24747], [(-(x ^ 2) * y ^ 8 - 4 * x ^ 3 * y ^ 7) + x ^ 4 * y ^ 6 + 2 * x ^ 5 * y ^ 5 + x ^ 7 * y ^ 3, 24387], [(-(x ^ 2) * y ^ 4 - 4 * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + 3 * x ^ 5 * y, 24657], [(-(x ^ 2) * y ^ 5 - 4 * x ^ 3 * y ^ 4) + 2 * x ^ 4 * y ^ 3 + 4 * x ^ 5 * y ^ 2, 24567], [((-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, 8548, 8908], [((-(x ^ 3) * y ^ 3 - 3 * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y) - x ^ 6, 8895, 33202], [(-(x ^ 3) * y ^ 3 - 3 * x ^ 4 * y ^ 2) - x ^ 5 * y, 9075, 33382], [((-(x ^ 2) * y ^ 4 - 3 * x ^ 3 * y ^ 3) - x ^ 5 * y) - x ^ 6, 442, 40909], [((-x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + x ^ 4 * y + x ^ 5, 24746], [(-(x ^ 2) * y ^ 3 - 3 * x ^ 3 * y ^ 2) + x ^ 5, 16631, 16991, 24927], [(-(x ^ 3) * y ^ 4 - 3 * x ^ 4 * y ^ 3) + x ^ 6 * y, 8625, 32932], [(((-(x ^ 4) * y ^ 7 - 3 * x ^ 5 * y ^ 6) + x ^ 6 * y ^ 5) - x ^ 8 * y ^ 3) + x ^ 9 * y ^ 2, 16371], [(-(x ^ 2) * y ^ 4 - 3 * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + x ^ 5 * y, 622, 41089], [((-(x ^ 2) * y ^ 4 - 3 * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + x ^ 5 * y) - x ^ 6, 16541, 16721], [(((-x * y ^ 9 - 3 * x ^ 2 * y ^ 8) + x ^ 4 * y ^ 6 + x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) + x ^ 7 * y ^ 3 + x ^ 8 * y ^ 2 + x ^ 10, 24386], [(-x * y ^ 8 - 3 * x ^ 2 * y ^ 7) + x ^ 4 * y ^ 5 + x ^ 7 * y ^ 2 + x ^ 8 * y, 24476], [((-(x ^ 2) * y ^ 5 - 3 * x ^ 3 * y ^ 4) + 2 * x ^ 4 * y ^ 3) - 2 * x ^ 6 * y, 352, 40819], [(-(x ^ 2) * y ^ 7 - 3 * x ^ 3 * y ^ 6) + 2 * x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4, 24477], [(-(x ^ 2) * y ^ 9 - 3 * x ^ 3 * y ^ 8) + 2 * x ^ 4 * y ^ 7 + 2 * x ^ 7 * y ^ 4, 82, 40549], [(-(x ^ 4) * y ^ 4 - 3 * x ^ 5 * y ^ 3) + 2 * x ^ 6 * y ^ 2 + 3 * x ^ 7 * y, 16551, 16731], [((-x * y ^ 5 - 3 * x ^ 2 * y ^ 4) + 3 * x ^ 4 * y ^ 2 + x ^ 5 * y) - x ^ 6, 24656], [((-x * y ^ 6 - 3 * x ^ 2 * y ^ 5) + 3 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2) - x ^ 6 * y, 24566], [(-(x ^ 2) * y ^ 6 - 3 * x ^ 3 * y ^ 5) + 3 * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3 + 2 * x ^ 7 * y, 262, 40729], [(-(x ^ 2) * y ^ 8 - 3 * x ^ 3 * y ^ 7) + 3 * x ^ 4 * y ^ 6 + x ^ 6 * y ^ 4 + 2 * x ^ 7 * y ^ 3 + x ^ 9 * y, 172, 40639], [-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2, 2956, 35361], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 9358, 12840], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 8728, 9088, 13229], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 8458, 8638], [(-x * y ^ 7 - 2 * x ^ 2 * y ^ 6) - x ^ 3 * y ^ 5, 8278], [(-x * y ^ 8 - 2 * x ^ 2 * y ^ 7) - x ^ 3 * y ^ 6, 8188], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 8534], [(-(x ^ 3) * y ^ 2 - 2 * x ^ 4 * y) - x ^ 5, 25080, 25260], [(-(x ^ 3) * y ^ 3 - 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 41129, 41489], [(-(x ^ 4) * y ^ 2 - 2 * x ^ 5 * y) - x ^ 6, 357, 537, 40856, 41036], [(((-(x ^ 3) * y ^ 7 - 2 * x ^ 5 * y ^ 5) - x ^ 7 * y ^ 3) - x ^ 8 * y ^ 2) - x ^ 10, 16372], [((-(x ^ 3) * y ^ 7 - 2 * x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) + x ^ 9 * y, 16339], [(-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2, 8509, 8689], [(-(x ^ 3) * y ^ 5 - 2 * x ^ 5 * y ^ 3) + x ^ 7 * y, 24826], [((-(x ^ 4) * y ^ 8 - 2 * x ^ 5 * y ^ 7) + x ^ 6 * y ^ 6) - x ^ 8 * y ^ 4, 16281], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + x ^ 4 * y + x ^ 5, 24926], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) + x ^ 4 * y + x ^ 5, 16811, 17171], [(-(x ^ 4) * y ^ 3 - 2 * x ^ 5 * y ^ 2) + x ^ 6 * y + x ^ 7, 16641, 17001], [((-(x ^ 2) * y ^ 7 - 2 * x ^ 3 * y ^ 6) + 2 * x ^ 4 * y ^ 5) - x ^ 6 * y ^ 3, 16361], [(((-(x ^ 2) * y ^ 8 - 2 * x ^ 3 * y ^ 7) + 2 * x ^ 4 * y ^ 6) - x ^ 6 * y ^ 4) - x ^ 8 * y ^ 2, 16271], [(-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 8368], [((((-(x ^ 2) * y ^ 8 - 2 * x ^ 3 * y ^ 7) + 3 * x ^ 4 * y ^ 6) - x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) + x ^ 7 * y ^ 3 + x ^ 9 * y, 8239], [(((-(x ^ 2) * y ^ 9 - 2 * x ^ 3 * y ^ 8) + 3 * x ^ 4 * y ^ 7) - x ^ 7 * y ^ 4) + x ^ 11, 8149], [((-(x ^ 2) * y ^ 5 - 2 * x ^ 3 * y ^ 4) + 3 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2) - 2 * x ^ 6 * y, 16451], [((-(x ^ 4) * y ^ 5 - 2 * x ^ 5 * y ^ 4) + 3 * x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2) - 2 * x ^ 8 * y, 16461], [((-(x ^ 2) * y ^ 5 - 2 * x ^ 3 * y ^ 4) + 3 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2) - x ^ 6 * y, 8419], [((-(x ^ 2) * y ^ 6 - 2 * x ^ 3 * y ^ 5) + 3 * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2, 8329], [-x - y, 9336, 13104, 32036, 33639], [-x * y - x ^ 2, 8746, 12744, 13110, 13205, 30683], [-x * y - y ^ 2, 5010, 5033, 5037, 5393, 5397, 8706, 9066, 12834, 19579, 27950, 30687, 31046, 33009, 33369, 45500, 45535, 45536, 45860, 45896], [-x * y ^ 2 - x ^ 2 * y, 2426, 2966, 4650, 8009, 8480, 8660, 8840, 9020, 9200, 9628, 9745, 9787, 10057, 10425, 11567, 12930, 13035, 19398, 20480, 20919, 21009, 21279, 22760, 23216, 27949, 32686, 32866, 34090, 34360, 34732, 37342, 42927, 43467], [-x * y ^ 2 - x ^ 3, 6519], [-x * y ^ 2 - y ^ 3, 4740, 4763, 4767, 8436, 8616, 18319, 18769, 18859, 19309, 26690, 27230, 28130, 29157, 29427, 29967, 32739, 32919, 45230, 45265, 45266], [-x * y ^ 3 - x ^ 2 * y ^ 2, 4679, 9975, 10605, 11055, 12959, 21770, 22226, 22227, 26689, 27229, 28129, 32596, 34282, 34912, 35362, 41849, 42299, 42450], [-x * y ^ 3 - x ^ 3 * y, 5529, 26007], [-x * y ^ 3 - y ^ 4, 17959, 26729, 27140, 27269, 28169, 29607], [-x * y ^ 4 - x ^ 2 * y ^ 3, 27139, 41399, 42479], [-x * y ^ 4 - x ^ 3 * y ^ 2, 12861], [-x * y ^ 4 - y ^ 5, 27179], [-x * y ^ 5 - x ^ 2 * y ^ 4, 8805, 33112], [-x * y ^ 5 - x ^ 5 * y, 17626], [-x * y ^ 5 - y ^ 6, 8256, 32559], [-x * y ^ 6 - x ^ 2 * y ^ 5, 8210, 32416], [-x * y ^ 6 - y ^ 7, 8166, 32469], [-x * y ^ 7 - x ^ 2 * y ^ 6, 8120], [-(x ^ 2) * y - x ^ 3, 9473, 10019, 12750, 14128, 19038, 20210, 20776, 21860, 22751, 24106, 28040, 30682], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 6027, 8714, 9175, 9254, 9715, 9805, 12869, 18129, 20029, 21500, 21761, 22046, 22047, 23296, 24748, 24928, 25108, 25288, 25556, 25826, 27500, 30597, 46526], [-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2, 2416, 2506, 6556, 7006, 8444, 18621, 19161, 20061, 25106, 25286, 34821, 34911, 38961, 39411], [-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3, 19071], [-(x ^ 2) * y ^ 4 - x ^ 5 * y, 17896], [-(x ^ 2) * y ^ 5 - x ^ 3 * y ^ 4, 3496, 35901], [-(x ^ 2) * y ^ 6 - x ^ 3 * y ^ 5, 8264], [-(x ^ 2) * y ^ 7 - x ^ 3 * y ^ 6, 8174], [-(x ^ 3) * y - x ^ 4, 8527, 8707, 8887, 9067, 17409, 17679, 25530, 25800, 28039, 30560, 31460, 32830, 33010, 33190, 33370], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 9615, 10611, 14385, 24720, 24900, 27499, 33922, 38692, 40920, 41100, 41280, 41460, 42029], [-(x ^ 3) * y ^ 2 - x ^ 5, 1252, 14359, 15259, 20296, 41719, 47061], [-(x ^ 3) * y ^ 3 - x ^ 5 * y, 46071], [-(x ^ 3) * y ^ 7 - x ^ 4 * y ^ 6, 40560], [-(x ^ 4) * y - x ^ 5, 443, 803, 30559, 31459, 40910, 41270], [-(x ^ 4) * y ^ 2 - x ^ 5 * y, 32849, 33209], [-(x ^ 5) * y - x ^ 6, 17446], [((-(x ^ 2) * y ^ 6 - x ^ 3 * y ^ 5) - 2 * x ^ 5 * y ^ 3) + x ^ 6 * y ^ 2 + 2 * x ^ 7 * y, 24646], [((-(x ^ 2) * y ^ 10 - x ^ 3 * y ^ 9) - 2 * x ^ 5 * y ^ 7) + x ^ 6 * y ^ 6 + 2 * x ^ 7 * y ^ 5 + x ^ 8 * y ^ 4 + x ^ 9 * y ^ 3, 24376], [((-(x ^ 2) * y ^ 7 - x ^ 3 * y ^ 6) - 2 * x ^ 5 * y ^ 4) + 2 * x ^ 6 * y ^ 3 + 3 * x ^ 7 * y ^ 2, 24556], [((-(x ^ 2) * y ^ 9 - x ^ 3 * y ^ 8) - 2 * x ^ 5 * y ^ 6) + 2 * x ^ 6 * y ^ 5 + 3 * x ^ 7 * y ^ 4 + x ^ 8 * y ^ 3 + x ^ 9 * y ^ 2, 24466], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 20829], [(-x * y ^ 3 - x ^ 3 * y) - y ^ 4, 17509], [(-x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 4 * y, 9705, 34012], [(-x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 5, 9165, 33472], [(-x * y ^ 4 - x ^ 3 * y ^ 2) - y ^ 5, 17059], [(-x * y ^ 5 - x ^ 4 * y ^ 2) - x ^ 5 * y, 18166], [(-x * y ^ 6 - x ^ 2 * y ^ 5) - x ^ 3 * y ^ 4, 4126, 36531], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) - x ^ 4, 30596, 31496], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 5, 6292, 7192, 46759, 47659], [(-(x ^ 3) * y ^ 2 - x ^ 4 * y) - x ^ 5, 9345, 20506, 33652], [(-(x ^ 3) * y ^ 8 - x ^ 5 * y ^ 6) - x ^ 6 * y ^ 5, 16282], [((-x * y ^ 5 - x ^ 2 * y ^ 4) - x ^ 4 * y ^ 2) - x ^ 5 * y, 32506], [((-x * y ^ 6 - x ^ 5 * y ^ 2) - x ^ 6 * y) - x ^ 7, 20326], [((-(x ^ 2) * y ^ 5 - x ^ 5 * y ^ 2) - x ^ 6 * y) - x ^ 7, 19696], [(((-(x ^ 3) * y ^ 8 - x ^ 5 * y ^ 6) - x ^ 6 * y ^ 5) - x ^ 7 * y ^ 4) + x ^ 8 * y ^ 3 + x ^ 9 * y ^ 2 + x ^ 10 * y + x ^ 11, 16249], [(-x * y ^ 5 - x ^ 2 * y ^ 4) + x ^ 4 * y ^ 2, 1426, 33831], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y, 4666, 28966, 37071], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2, 5566, 25996, 37971], [(-(x ^ 2) * y ^ 5 - x ^ 3 * y ^ 4) + x ^ 4 * y ^ 3, 25456], [(-(x ^ 2) * y ^ 5 - x ^ 5 * y ^ 2) + x ^ 6 * y, 17356], [((-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y) - x ^ 5, 14661], [((-(x ^ 2) * y ^ 5 - x ^ 3 * y ^ 4) + x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 24736], [(((-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2) - x ^ 5 * y) - x ^ 6, 13671], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 8390, 8570], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2 + x ^ 4 * y, 8300], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) + x ^ 4 * y + x ^ 5, 8815, 19039, 24658, 24838], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + x ^ 5 * y, 8354], [(-(x ^ 2) * y ^ 7 - x ^ 3 * y ^ 6) + x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4, 24388], [(-(x ^ 3) * y ^ 3 - x ^ 4 * y ^ 2) + x ^ 5 * y + x ^ 6, 24810, 40830, 41010], [(-(x ^ 3) * y ^ 6 - x ^ 4 * y ^ 5) + x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3, 40650], [(-(x ^ 3) * y ^ 6 - x ^ 4 * y ^ 5) + x ^ 7 * y ^ 2 + x ^ 8 * y, 24440], [(-(x ^ 3) * y ^ 7 - x ^ 4 * y ^ 6) + x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4, 24360], [(-(x ^ 4) * y ^ 6 - x ^ 5 * y ^ 5) + x ^ 8 * y ^ 2 + x ^ 9 * y, 24350, 24439], [(-(x ^ 5) * y ^ 6 - x ^ 6 * y ^ 5) + x ^ 9 * y ^ 2 + x ^ 10 * y, 24349], [(-x * y ^ 5 - x ^ 2 * y ^ 4) + 2 * x ^ 4 * y ^ 2, 1966, 34371], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + 2 * x ^ 4 * y ^ 2, 6016, 38421], [-x * y ^ 2 + x ^ 2 * y, 2019, 5476, 8002, 37881, 48469], [-x * y ^ 3 + x ^ 2 * y ^ 2, 849, 5386, 37791], [-x * y ^ 4 + x ^ 2 * y ^ 3, 669], [-(x ^ 2) * y + x ^ 3, 28616], [-(x ^ 2) * y ^ 2 + y ^ 4, 26446, 26986], [-(x ^ 2) * y ^ 3 + x ^ 4 * y, 20866], [-(x ^ 2) * y ^ 3 + y ^ 5, 25636, 26086], [-(x ^ 2) * y ^ 5 + x ^ 4 * y ^ 3, 1156, 27796, 33561], [-(x ^ 3) * y + x ^ 4, 12379], [-(x ^ 3) * y ^ 2 + x ^ 4 * y, 1522, 12951, 41989, 42561], [-(x ^ 3) * y ^ 2 + x ^ 5, 8437, 8617, 32740, 32920], [-(x ^ 3) * y ^ 3 + x ^ 4 * y ^ 2, 14121, 41391], [-(x ^ 3) * y ^ 4 + x ^ 4 * y ^ 3, 8811, 41211], [-(x ^ 3) * y ^ 5 + x ^ 5 * y ^ 3, 8257, 32560], [-(x ^ 4) * y ^ 5 + x ^ 8 * y, 32540], [-(x ^ 4) * y ^ 6 + x ^ 6 * y ^ 4, 83, 40550], [-(x ^ 5) * y ^ 5 + x ^ 9 * y, 32450], [(-x * y ^ 2 + x ^ 2 * y) - y ^ 3, 28977], [-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 21226, 25649], [-x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 20956, 25199], [-x * y ^ 5 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 25726, 26266], [-x * y ^ 6 + x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3, 28426], [-(x ^ 2) * y ^ 4 + x ^ 4 * y ^ 2 + y ^ 6, 25186], [-(x ^ 3) * y ^ 2 + x ^ 4 * y + x ^ 5, 17351, 17541, 21502], [-(x ^ 3) * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 17091], [-(x ^ 5) * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 9, 173, 40640], [(-(x ^ 2) * y ^ 5 + x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3) - 2 * x ^ 5 * y ^ 2, 24916], [(-x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y) - y ^ 4, 8346, 32649], [-(x ^ 3) * y ^ 7 + x ^ 4 * y ^ 6 + x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4 + 2 * x ^ 7 * y ^ 3, 24479], [-x * y ^ 3 + x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 29326], [-x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 29056], [-(x ^ 2) * y ^ 4 + 2 * x ^ 4 * y ^ 2, 1696, 34101], [(-(x ^ 3) * y ^ 6 + 2 * x ^ 5 * y ^ 4) - x ^ 9, 8167, 32470], [-(x ^ 2) * y ^ 4 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 24568], [-(x ^ 2) * y ^ 6 + 2 * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3, 24478], [-(x ^ 3) * y ^ 3 + 2 * x ^ 5 * y + x ^ 6, 24630], [-(x ^ 3) * y ^ 4 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 40740], [-(x ^ 3) * y ^ 6 + 2 * x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3, 24450], [(-(x ^ 3) * y ^ 4 + 2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2) - x ^ 6 * y, 24839], [-(x ^ 3) * y ^ 4 + 3 * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 24540], [1, 4449, 15907, 40210], [x, 0, 91, 182, 273, 366, 455, 730, 1186, 1641, 2002, 2188, 2279, 2366, 2457, 2734, 2821, 2912, 3003, 3185, 3465, 3731, 3822, 3913, 4004, 4277, 4586, 4642, 4823, 5004, 5096, 5278, 5367, 5460, 5551, 5642, 5824, 5915, 6006, 6097, 6183, 6289, 6552, 6643, 6734, 6825, 7007, 7098, 7644, 7735, 8008, 8100, 8191, 8282, 8646, 8919, 9192, 9283, 9379, 9738, 10193, 10284, 10557, 10739, 10830, 10921, 11012, 11476, 11831, 12195, 12377, 12650, 12741, 12833, 13105, 13196, 13287, 13378, 13475, 13659, 13924, 14056, 14553, 14652, 15107, 15289, 15380, 15744, 15926, 16108, 16199, 16200, 16291, 16382, 16475, 16568, 16750, 17292, 17383, 17565, 17656, 17747, 17838, 17929, 18111, 18207, 18298, 18480, 18572, 18844, 19025, 19203, 19476, 19567, 19658, 19840, 20021, 20113, 20207, 20295, 20568, 20750, 20841, 20932, 21026, 21117, 21209, 21481, 21660, 21852, 21933, 22026, 22115, 22388, 22479, 22570, 22854, 22934, 23025, 23308, 23389, 23480, 23753, 23935, 23979, 24026, 24117, 24299, 24300, 24391, 24664, 24755, 24846, 24942, 25125, 25301, 25574, 25938, 26211, 26302, 26484, 26575, 26763, 26848, 26939, 27036, 27222, 27758, 27849, 27940, 28214, 28395, 28577, 28886, 28941, 29032, 29214, 29305, 29402, 30124, 30223, 30397, 30579, 30670, 30761, 31125, 31398, 31489, 31580, 31671, 31944, 32400, 32673, 32764, 32855, 32946, 33037, 33128, 33219, 33310, 33401, 33649, 33674, 33771, 33947, 34129, 34406, 34499, 34590, 34862, 34954, 35221, 35413, 35585, 35676, 35767, 35858, 35949, 36048, 36137, 36224, 36495, 36586, 36859, 37041, 37132, 37223, 37314, 37405, 37496, 37587, 37684, 37769, 37860, 37956, 38315, 38626, 38957, 39493, 39650, 39686, 40313, 40404, 40499, 40682, 40773, 40864, 40955, 41046, 41137, 41228, 41319, 41410, 41501, 41592, 41683, 41774, 41865, 41956, 42047, 42229, 42320, 42502, 42593, 42684, 42804, 42957, 43048, 43257, 43503, 43898, 44081, 45087, 45296, 45479, 45572, 45751, 45844, 46025, 46122, 46324, 46506, 46608, 46840, 47021, 47234, 47325, 47416, 47780, 48210], [y, 3369, 3549, 3640, 4179, 6916, 7366, 7462, 7553, 7689, 7826, 12559, 14197, 15471, 15555, 19576, 19749, 20386, 20659, 21671, 22661, 23116, 23571, 23662, 23889, 29787, 30777, 31216, 32126, 32217, 32399, 38133, 38500, 39321, 39771, 39862, 47929, 48020], [x * y, 639, 1004, 1095, 1549, 1823, 3277, 4189, 4370, 4406, 4486, 6380, 7919, 8003, 8374, 8557, 8831, 9017, 9974, 10147, 10435, 10597, 11098, 11379, 11685, 11920, 12004, 12108, 13020, 13575, 13750, 14302, 14565, 14753, 14926, 15207, 15825, 16841, 17024, 18024, 24483, 25033, 25216, 25850, 26033, 26636, 27397, 27491, 28666, 28706, 28849, 29862, 30686, 31852, 33498, 34225, 34450, 34900, 35992, 36891, 37413, 37773, 37882, 38047, 38595, 38750, 38872, 39145, 40132, 40501, 42171, 42442, 44435, 44533, 44722, 44814, 44903, 44907, 47518, 48329, 48470], [x * y ^ 2, 2423, 2963, 4046, 4216, 5025, 5385, 10957, 11506, 14296, 14835, 26186, 26816, 27356, 28256, 28346, 32492, 35260, 36621, 37040, 37130, 37143, 37220, 37490, 38030, 39142, 40409, 42890, 43430, 44547], [x * y ^ 3, 2326, 3316, 4755, 5843, 10246, 10696, 10786, 11236, 18436, 19516, 25376, 25916, 33813, 34353, 34731, 34829, 35369, 35721, 37670, 46310], [x * y ^ 4, 1425, 1876, 1965, 9436, 9886, 18076, 34281, 36513, 38249], [x * y ^ 5, 4125, 8986], [x ^ 2, 3730, 7282, 7643, 8086, 12649, 15097, 15349, 16191, 18431, 19846, 20566, 20749, 23449, 23752, 24191, 24291, 39400, 40491, 44991, 47749, 48110], [y ^ 2, 2199, 2380, 2559, 2739, 2920, 3099, 3279, 3820, 5482, 5745, 6202, 6472, 6653, 6699, 6826, 12315, 18316, 18766, 18856, 19306, 19479, 22402, 22899, 23026, 27987, 29517, 29789, 31126, 31407, 36622, 39231, 39959, 44180, 45949, 46669, 46939, 47120], [x ^ 2 * y, 2063, 2152, 2379, 2513, 3190, 3729, 4676, 4766, 4856, 5126, 6382, 7642, 7726, 7906, 10219, 10399, 10759, 12469, 14107, 14449, 16011, 18071, 18219, 18669, 19961, 20026, 20206, 21676, 21681, 22549, 22719, 22852, 23746, 23926, 26187, 29066, 29776, 32026, 37053, 38410, 40131, 40311, 42530, 42619, 42980, 43911, 44091, 44270, 44721, 45177, 45267, 45357, 45627, 46849, 48109, 48231], [x ^ 2 * y ^ 2, 1209, 1479, 1659, 1882, 1929, 2062, 2422, 2829, 2962, 3052, 3189, 4665, 5122, 5206, 5303, 5662, 6736, 7096, 7636, 9409, 9859, 9949, 10336, 10341, 10426, 10579, 10701, 10876, 11119, 11416, 12019, 12109, 12739, 12829, 12919, 12945, 13036, 13041, 13189, 13306, 13729, 14031, 14841, 15079, 15201, 17416, 17769, 18161, 18229, 18262, 18679, 18712, 19029, 19219, 19252, 19421, 20119, 20839, 21019, 21052, 21289, 21322, 21591, 21729, 21829, 22031, 22581, 22846, 25377, 25917, 30327, 31036, 31936, 34070, 34083, 34340, 34469, 34919, 37252, 37611, 39141, 39501, 40041, 42349, 42529, 42741, 42889, 43101, 43281, 43429, 43519, 43641, 43730, 43821, 45589, 45770, 46129, 47241], [x ^ 2 * y ^ 3, 759, 939, 1072, 1612, 1695, 5302, 5842, 9139, 9679, 9976, 11871, 13369, 14089, 16606, 16966, 17632, 17689, 21469, 27807, 28066, 28437, 28606, 30149, 30329, 33543, 35883, 37709, 41539, 42079, 45769, 46309], [x ^ 2 * y ^ 4, 1155, 3495, 3502, 4132, 9166, 9706, 11331, 12225, 16516, 16696, 16789, 17149, 17329, 27526, 36532, 43969, 44599], [x ^ 2 * y ^ 5, 8806, 16426], [x ^ 3, 4316, 6250, 7150, 11317, 20836, 35620, 38930, 44817], [y ^ 3, 2830, 5032, 5212, 6196, 13851, 13927, 17506, 17956, 19606, 22396, 26727, 27267, 27706, 28167, 29699, 30496, 30689, 38230, 38601, 39059, 42920, 43460, 44360, 45499, 45679], [x ^ 3 * y, 1436, 1523, 23381, 25196, 25736, 37940, 41937, 41990, 46790, 47690], [x ^ 3 * y ^ 2, 1166, 11325, 33929, 35632, 41667], [x ^ 3 * y ^ 3, 15286], [x ^ 4, 1256, 1526, 5573, 17441, 17711, 17866, 19389, 20479, 22729, 22762, 41757, 42027, 46040], [y ^ 4, 17056, 18346, 18796, 18886, 19336, 26896, 27177, 27436, 43370], [x ^ 4 * y, 17272, 17326, 18256, 18706, 21739, 21772, 25559, 35870, 36500, 38699, 42921, 44271], [x ^ 4 * y ^ 2, 9616, 9801, 10071, 14386, 16912, 19066, 21496, 22041, 22221, 25546, 41751, 42021, 42201, 42471, 43371, 43731], [x ^ 4 * y ^ 3, 8716, 9076, 41301, 41481], [x ^ 4 * y ^ 5, 177, 40676], [x ^ 5, 3506, 4136, 44007, 44637], [y ^ 5, 17536, 17986], [x ^ 5 * y, 9346], [x ^ 5 * y ^ 2, 8536, 8896], [x ^ 5 * y ^ 6, 40589], [x ^ 6, 11569, 12199, 17451], [y ^ 6, 17086], [((x ^ 3 * y ^ 4 - 2 * x ^ 4 * y ^ 3) - 4 * x ^ 5 * y ^ 2) - x ^ 6 * y, 16816, 17176], [(x * y ^ 5 - 2 * x ^ 5 * y) - x ^ 6, 17266], [(x * y ^ 6 - 2 * x ^ 5 * y ^ 2) - x ^ 6 * y, 16906], [(x ^ 2 * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 17319], [(x ^ 2 * y ^ 4 - 2 * x ^ 4 * y ^ 2) - x ^ 5 * y, 8305], [(x ^ 3 * y ^ 4 - 2 * x ^ 5 * y ^ 2) - x ^ 6 * y, 8365, 25276, 40765], [(x ^ 3 * y ^ 6 - 2 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3, 40675], [((x * y ^ 6 - 2 * x ^ 3 * y ^ 4) - x ^ 6 * y) - x ^ 7, 25006], [(x ^ 4 * y ^ 6 - 2 * x ^ 6 * y ^ 4) + x ^ 10, 86, 40587], [x * y ^ 2 - x ^ 2 * y, 26366], [x * y ^ 3 - x ^ 3 * y, 18526, 18976, 21136, 21406, 26626, 29236], [x * y ^ 4 - x ^ 2 * y ^ 3, 25016], [x * y ^ 4 - x ^ 3 * y ^ 2, 26176], [x * y ^ 5 - x ^ 3 * y ^ 3, 25906], [x * y ^ 5 - x ^ 5 * y, 17806], [x ^ 2 * y - x ^ 3, 4269], [x ^ 2 * y ^ 2 - x ^ 3 * y, 4852, 10129, 16101, 45319], [x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2, 6022, 8959, 46489], [x ^ 2 * y ^ 3 - x ^ 5, 22459], [x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3, 712, 8779, 41179], [x ^ 2 * y ^ 4 - x ^ 5 * y, 3226, 35631], [x ^ 3 * y ^ 2 - x ^ 5, 20289], [x ^ 3 * y ^ 3 - x ^ 5 * y, 25816, 30586], [x ^ 3 * y ^ 5 - x ^ 7 * y, 130], [x ^ 3 * y ^ 6 - x ^ 7 * y ^ 2, 40670], [x ^ 4 * y - x ^ 5, 44811], [x ^ 4 * y ^ 2 - x ^ 5 * y, 9621], [x ^ 4 * y ^ 2 - x ^ 6, 356, 536, 40857, 41037], [x ^ 4 * y ^ 5 - x ^ 6 * y ^ 3, 176, 40677], [x ^ 4 * y ^ 5 - x ^ 8 * y, 40], [x ^ 4 * y ^ 6 - x ^ 8 * y ^ 2, 40580], [(x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2, 8715, 33022], [((x ^ 2 * y ^ 4 - x ^ 3 * y ^ 3) - 3 * x ^ 4 * y ^ 2) - x ^ 5 * y, 8535, 32842], [((x ^ 2 * y ^ 5 - x ^ 3 * y ^ 4) - 3 * x ^ 4 * y ^ 3) + 2 * x ^ 6 * y, 8445, 32752], [(x ^ 2 * y ^ 9 - x ^ 3 * y ^ 8) - 2 * x ^ 4 * y ^ 7, 8175, 32482], [((x ^ 2 * y ^ 8 - x ^ 3 * y ^ 7) - 2 * x ^ 4 * y ^ 6) + x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4, 8265, 32572], [((x ^ 2 * y ^ 6 - x ^ 3 * y ^ 5) - 2 * x ^ 4 * y ^ 4) + 2 * x ^ 5 * y ^ 3 + 2 * x ^ 6 * y ^ 2, 8355, 32662], [(x * y ^ 5 - x ^ 3 * y ^ 3) - x ^ 6, 25366], [(x ^ 2 * y ^ 2 - x ^ 3 * y) - x ^ 4, 19036], [(x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 25017, 25739], [(x ^ 2 * y ^ 4 - x ^ 4 * y ^ 2) - x ^ 5 * y, 31486], [(x ^ 3 * y ^ 3 - x ^ 4 * y ^ 2) - x ^ 5 * y, 17716], [(x ^ 4 * y ^ 2 - x ^ 5 * y) - x ^ 6, 17631, 24749], [(x ^ 4 * y ^ 3 - x ^ 5 * y ^ 2) - x ^ 6 * y, 25096], [((x * y ^ 2 - x ^ 2 * y) - x ^ 3) + y ^ 3, 8386, 8566], [((x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 8296], [(x * y ^ 4 - x ^ 3 * y ^ 2) + y ^ 5, 1786, 34191], [(x * y ^ 5 - x ^ 3 * y ^ 3) + y ^ 6, 886, 33291], [(x ^ 4 * y ^ 7 - x ^ 5 * y ^ 6) + x ^ 7 * y ^ 4, 24389], [(x * y ^ 4 - x ^ 3 * y ^ 2) + x ^ 5 + y ^ 5, 1336, 33741], [x + y, 546, 819, 910, 1274, 1365, 1456, 1729, 1911, 2093, 2548, 2639, 3094, 3367, 4095, 4459, 4550, 4732, 5005, 5369, 6188, 7189, 7280, 7371, 8099, 8464, 8737, 9101, 9103, 9286, 9556, 9646, 9647, 9829, 9920, 10102, 10375, 10466, 10563, 11023, 11103, 11558, 11649, 11740, 12013, 12286, 12468, 12923, 13014, 14015, 14379, 14470, 14561, 15016, 15562, 15653, 16017, 16655, 16928, 17110, 17201, 17474, 18384, 18657, 18748, 18930, 19112, 19294, 19385, 19931, 20477, 21296, 21387, 21569, 21751, 22206, 22752, 23207, 23844, 24208, 24573, 25392, 25483, 25665, 25756, 26120, 26393, 27121, 27303, 27576, 27667, 27948, 28031, 28122, 28304, 28668, 28850, 29578, 29760, 29942, 30033, 30488, 30852, 30943, 31034, 31550, 31586, 31853, 32035, 32582, 33583, 33856, 34038, 34311, 34675, 34766, 35039, 35130, 35312, 35494, 36313, 36404, 36677, 36768, 36950, 38224, 38406, 38497, 39225, 39316, 39407, 39498, 39526, 40135, 40226, 40317, 40408, 40591, 45141, 45232, 45323, 45414, 45505, 45596, 45687, 45778, 45869, 45960, 46051, 46142, 46233, 46415, 46688, 46779, 46870, 46961, 47052, 47143, 47598, 47689, 47871, 47962, 48053, 48144, 48417, 48508, 48599], [x * y + x ^ 2, 8007, 8833, 10558, 11014, 11291, 12835, 13199, 13662, 14117, 20020, 20208, 21210, 21850, 22571, 22853, 23307, 24941, 25124, 27946, 31549, 32839, 33199, 48506], [x * y + y ^ 2, 4920, 8476, 8656, 8743, 9617, 10103, 10469, 10507, 11047, 12925, 14382, 19930, 20478, 21221, 21570, 22750, 23843, 24207, 25391, 25664, 29310, 29337, 30650, 32773, 32956, 33133, 33316, 34810, 35350, 43170], [x * y ^ 2 + x ^ 2 * y, 1343, 1347, 1793, 1797, 8563, 9164, 9704, 13499, 18579, 19030, 19119, 21041, 21311, 21490, 21851, 30649, 30867, 31316, 32749, 32929, 41810, 41846, 42260, 42296], [x * y ^ 2 + y ^ 3, 3406, 4949, 5219, 11561, 14039, 19390, 21760, 28940, 29030, 29040, 29120, 29390, 29930, 32683, 32863, 35811, 43199, 43649], [x * y ^ 3 + x ^ 2 * y ^ 2, 893, 897, 2236, 2776, 4936, 21491, 25970, 26240, 28939, 29029, 29119, 29389, 29877, 29929, 30326, 34641, 35181, 37341, 41360, 41396], [x * y ^ 3 + y ^ 4, 2146, 2686, 29570, 32593, 34551, 35091], [x * y ^ 4 + x ^ 2 * y ^ 3, 26009, 29569], [x * y ^ 5 + x ^ 2 * y ^ 4, 32569], [x * y ^ 5 + x ^ 4 * y ^ 2, 1606, 34011], [x * y ^ 5 + y ^ 6, 8206], [x * y ^ 6 + x ^ 2 * y ^ 5, 32479], [x * y ^ 6 + x ^ 4 * y ^ 3, 706, 33111], [x * y ^ 6 + y ^ 7, 8116, 32413], [x ^ 2 * y + x ^ 3, 14394, 23169, 24016, 30830], [x ^ 2 * y ^ 2 + x ^ 3 * y, 1706, 1976, 2512, 8485, 8665, 8845, 9025, 13215, 19400, 20929, 21773, 22179, 26276, 29840, 37522, 42207, 42477, 42979, 47519], [x ^ 2 * y ^ 2 + x ^ 4, 6249, 7149, 14629, 17891], [x ^ 2 * y ^ 2 + y ^ 4, 4762, 45229], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 1079, 1619, 3766, 4306, 6029, 9525, 10065, 17869, 25969, 26239, 33832, 34372, 36171, 36711, 46529], [x ^ 2 * y ^ 3 + x ^ 4 * y, 13639], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 719, 11595, 35902], [x ^ 2 * y ^ 4 + x ^ 6, 23386], [x ^ 2 * y ^ 7 + x ^ 3 * y ^ 6, 8125], [x ^ 3 * y + x ^ 4, 1527, 19040, 21503, 22481, 24196, 30829, 42026], [x ^ 3 * y ^ 2 + x ^ 4 * y, 623, 983, 4846, 5116, 8725, 18616, 19156, 27770, 28400, 29839, 37251, 37521, 40945, 41090, 41125, 41305, 41450, 41485], [x ^ 3 * y ^ 2 + x ^ 5, 27806], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 8455, 17901, 22036, 22216, 33029, 33389], [x ^ 3 * y ^ 3 + x ^ 6, 22486], [x ^ 3 * y ^ 7 + x ^ 4 * y ^ 6, 8185], [x ^ 4 * y + x ^ 5, 446, 626, 806, 986, 1259, 40947, 41127, 41307, 41487], [x ^ 4 * y ^ 2 + x ^ 5 * y, 27769, 28399], [x ^ 4 * y ^ 2 + x ^ 6, 9351, 46791, 47691], [((x ^ 3 * y ^ 5 + x ^ 4 * y ^ 4) - 4 * x ^ 5 * y ^ 3) + x ^ 6 * y ^ 2 + 3 * x ^ 7 * y, 526, 32931], [((((x * y ^ 9 + x ^ 2 * y ^ 8) - 3 * x ^ 3 * y ^ 7) - x ^ 4 * y ^ 6) + x ^ 5 * y ^ 5 + 2 * x ^ 6 * y ^ 4 + x ^ 7 * y ^ 3 + x ^ 8 * y ^ 2) - x ^ 10, 16239], [(((x * y ^ 6 + x ^ 2 * y ^ 5) - 3 * x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3) + 3 * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 16419], [((x * y ^ 8 + x ^ 2 * y ^ 7) - 3 * x ^ 3 * y ^ 6) + 2 * x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 16329], [(((x * y ^ 4 + x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 16779, 17139], [(x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 26279], [(x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 5, 23359], [(x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y, 18171], [((x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 8804, 32659], [((x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y) - x ^ 5, 8395, 8575], [((x ^ 2 * y ^ 6 + x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 8215], [((x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y) - x ^ 6, 40855, 41035], [((x ^ 3 * y ^ 6 + x ^ 4 * y ^ 5) - x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3, 8275], [((x ^ 3 * y ^ 7 + x ^ 4 * y ^ 6) - x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4, 40585], [((x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) + x ^ 4, 6562, 47029], [((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + x ^ 4 * y + x ^ 5, 5572, 46039], [x * y ^ 2 + x ^ 2 * y + x ^ 3, 30866], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 29876], [x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 2596, 3136, 28979, 29159, 29429, 29969, 35001, 35541], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 4 * y, 17599], [x * y ^ 4 + x ^ 2 * y ^ 3 + y ^ 5, 29609], [x * y ^ 5 + x ^ 4 * y ^ 2 + x ^ 5 * y, 1066, 33471], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 20871, 21051, 21321, 21861], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 5, 28436], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 21501], [x ^ 2 * y ^ 7 + x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4, 16336], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 6, 1246, 14391, 15291, 33651], [x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 19426, 19669], [(((x ^ 2 * y ^ 8 + x ^ 4 * y ^ 6 + x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3) - x ^ 8 * y ^ 2) - x ^ 10, 16246], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 18139], [x * y ^ 5 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + y ^ 6, 32503], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 20299], [x * y ^ 2 + 2 * x ^ 2 * y, 13125, 20861, 37432], [x * y ^ 2 + 2 * y ^ 3, 29339], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 12765, 37072], [x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2, 9795, 34102], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3, 9255, 33562], [x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 39599], [(((x * y ^ 5 + 2 * x ^ 2 * y ^ 4) - 3 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) + x ^ 5 * y, 309], [(((x * y ^ 6 + 2 * x ^ 2 * y ^ 5) - 3 * x ^ 3 * y ^ 4) - x ^ 4 * y ^ 3) + x ^ 5 * y ^ 2, 219], [(((x ^ 3 * y ^ 5 + 2 * x ^ 4 * y ^ 4) - 3 * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + x ^ 7 * y, 40851], [(((x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5) - 3 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3) + x ^ 7 * y ^ 2, 40761], [(((x * y ^ 9 + 2 * x ^ 2 * y ^ 8) - 3 * x ^ 3 * y ^ 7) + x ^ 6 * y ^ 4) - x ^ 10, 39], [(((x ^ 3 * y ^ 9 + 2 * x ^ 4 * y ^ 8) - 3 * x ^ 5 * y ^ 7) + x ^ 8 * y ^ 4) - x ^ 12, 40581], [((((x * y ^ 8 + 2 * x ^ 2 * y ^ 7) - 3 * x ^ 3 * y ^ 6) + x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3) - x ^ 8 * y, 129], [((((x ^ 3 * y ^ 8 + 2 * x ^ 4 * y ^ 7) - 3 * x ^ 5 * y ^ 6) + x ^ 6 * y ^ 5 + x ^ 7 * y ^ 4) - x ^ 8 * y ^ 3) - x ^ 10 * y, 40671], [(((x * y ^ 5 + 2 * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) + 2 * x ^ 5 * y + x ^ 6, 16509, 16689], [(x * y ^ 4 + 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 399, 579], [(x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 40941, 41121], [(((x * y ^ 4 + 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 16599, 16959], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 12855, 37162], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 7186, 39591], [x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 627, 987, 8545, 23206, 41126, 41486], [x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + x ^ 6, 449, 809], [x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 359, 539, 40859, 41039], [(((x ^ 3 * y ^ 6 + 3 * x ^ 4 * y ^ 5) - 3 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3) - 2 * x ^ 8 * y, 8361], [((((x ^ 3 * y ^ 8 + 3 * x ^ 4 * y ^ 7) - 3 * x ^ 5 * y ^ 6) - x ^ 7 * y ^ 4) - 2 * x ^ 8 * y ^ 3) - x ^ 10 * y, 8271], [((x ^ 3 * y ^ 9 + 3 * x ^ 4 * y ^ 8) - 2 * x ^ 5 * y ^ 7) - 2 * x ^ 8 * y ^ 4, 8181], [((x ^ 3 * y ^ 5 + 3 * x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3) + 2 * x ^ 7 * y, 8451], [((x ^ 3 * y ^ 4 + 3 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) - x ^ 6 * y, 8721], [x ^ 3 * y ^ 4 + 3 * x ^ 4 * y ^ 3 + x ^ 6 * y + x ^ 7, 796, 8541, 33201], [2 * x ^ 2 * y ^ 2, 1389, 4672, 45139], [2 * x ^ 2 * y ^ 3, 892, 1119, 41359], [2 * x ^ 4 * y ^ 2, 41931], [2 * x ^ 4 * y ^ 3, 41661], [((2 * x ^ 3 * y ^ 6 - 6 * x ^ 5 * y ^ 4) + 2 * x ^ 6 * y ^ 3 + 2 * x ^ 7 * y ^ 2) - 2 * x ^ 8 * y, 256, 32661], [(2 * x ^ 3 * y ^ 8 - 5 * x ^ 5 * y ^ 6) - 2 * x ^ 8 * y ^ 3, 166, 32571], [(2 * x ^ 3 * y ^ 5 - 5 * x ^ 5 * y ^ 3) + x ^ 6 * y ^ 2 + 4 * x ^ 7 * y, 346, 32751], [(2 * x ^ 3 * y ^ 9 - 4 * x ^ 5 * y ^ 7) - 2 * x ^ 8 * y ^ 4, 76, 32481], [2 * x ^ 4 * y ^ 3 - 2 * x ^ 6 * y, 266, 40767], [(2 * x ^ 4 * y ^ 3 - 2 * x ^ 5 * y ^ 2) - 3 * x ^ 6 * y, 24659], [((2 * x * y ^ 4 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y) + y ^ 5, 8357], [((2 * x ^ 2 * y ^ 4 - 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) + x ^ 5 * y, 489], [((2 * x ^ 4 * y ^ 4 - 2 * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + x ^ 7 * y, 41031], [2 * x ^ 4 * y ^ 3 - x ^ 6 * y, 9081], [2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 1342, 1792, 13491, 17229, 21231, 41809, 42259], [2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 16869], [2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 6286, 38691], [2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 9531], [2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 9261], [(2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y, 1516, 33921], [2 * x * y + x ^ 2 + y ^ 2, 8836, 9016, 9347], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 8717, 9077, 20951], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 8447, 8627], [2 * x * y ^ 6 + x ^ 2 * y ^ 5 + y ^ 7, 8267], [2 * x * y ^ 7 + x ^ 2 * y ^ 6 + y ^ 8, 8177], [2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2 + x ^ 6 * y + x ^ 7, 8901], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + 3 * y ^ 4, 29069], [((2 * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3) - 2 * x ^ 5 * y ^ 2) + x ^ 6 * y + x ^ 7, 436, 32841], [((2 * x ^ 3 * y ^ 4 + 3 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) - x ^ 6 * y, 976, 33381], [(3 * x ^ 4 * y ^ 4 - x ^ 5 * y ^ 3) - 3 * x ^ 6 * y ^ 2, 24569], [(3 * x ^ 4 * y ^ 4 - x ^ 5 * y ^ 3) + 2 * x ^ 7 * y, 8631], [((3 * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3) - 3 * x ^ 5 * y ^ 2) - x ^ 6 * y, 616, 33021], [3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 20961], [3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 8537, 8897], [-y // x, 7372, 31679, 47839], [-(y ^ 2) // x, 21941, 30057], [-(y ^ 3) // x, 5752, 30509, 46219], [1 // x, 7361, 31026, 32027, 39311], [y // x, 10095, 10461, 29788, 30027, 30479, 46206], [(x * y + y ^ 2) // x, 29338], [(x * y ^ 2 + y ^ 3) // x, 29068], [-1 // y, 32581], [-(x ^ 5) // y, 6293, 7193, 46760, 47660], [(-(x ^ 2) * y - x ^ 3) // y, 11297, 22316], [x // y, 11288, 22307, 26671, 29128, 46748, 47655], [x ^ 6 // y, 22492], [(x ^ 3 * y + x ^ 4) // y, 13674], [(x * y ^ 5 + x ^ 2 * y ^ 4 + x ^ 4 * y ^ 2 + x ^ 6) // y, 23392]]) * x ^ 0 * y ^ 0
            end
        rep = [[f1, r], [f1, p], [f3, r, p, E(3, 2)], [f3, p, r, E(3, 2)], [f3, r, p, E(3)], [f3, p, r, E(3)], [f7, p, r, E(3, 2)], [f7, r, p, E(3, 2)], [f7, p, r, E(3)], [f7, r, p, E(3)], [f11, r, p, E(3)], [f11, p, r, E(3)], [f13, r, p], [f13, p, r], [f15, r, p, E(3)], [f15, p, r, E(3)], [f15, r, p, E(3, 2)], [f15, p, r, E(3, 2)], [f19, r, p], [f19, p, r], [f21, r, p], [f21, p, r], [f23, r, p], [f23, p, r], [f25, r, p], [f25, p, r], [f27, r, p], [f27, p, r], [f29, r, p, E(3)], [f29, r, p, E(3, 2)], [f29, p, r, E(3, 2)], [f29, p, r, E(3)], [f33, r, p, E(3, 2)], [f33, p, r, E(3)], [f33, r, p, E(3)], [f33, p, r, E(3, 2)], [f37, r, p], [f37, p, r]]
        if rep[i] !== nothing
            return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])])
        else
            return false
        end
    end)
chevieset(:G34, :Representation, function (i,)
        local r, f, v, j, l, r1
        r = (chevieget(:G34, :HeckeRepresentation))(map((x->begin
                            [1, -1]
                        end), 1:6), [], i)
        if r != false
            return r
        end
        f = function (i,)
                return (chevieget(:G34, :Representation))(i)
            end
        if i <= 80
            if i == 39
                return map((x->begin
                                SchurFunctor(x, [2, 2])
                            end), f(5))
            elseif i == 41
                return -(f(39))
            elseif i == 44
                return -(f(45))
            elseif i == 45
                return ComplexConjugate(f(39))
            elseif i == 47
                return map((x->begin
                                ExteriorPower(x, 2)
                            end), f(10))
            elseif i == 48
                return -(f(47))
            elseif i == 49
                return ComplexConjugate(f(47))
            elseif i == 50
                return -(f(49))
            elseif i == 57
                return map(KroneckerProduct, f(3), f(14))
            elseif i == 58
                return -(f(57))
            elseif i == 59
                return ComplexConjugate(f(57))
            elseif i == 60
                return -(f(59))
            elseif i == 66
                return -(f(67))
            elseif i == 67
                return map((x->begin
                                ExteriorPower(x, 2)
                            end), f(13))
            elseif i == 68
                return map((x->begin
                                ExteriorPower(x, 2)
                            end), f(17))
            elseif i == 69
                return -(f(68))
            elseif i == 70
                return -(f(71))
            elseif i == 71
                return ComplexConjugate(f(68))
            elseif i == 72
                return map(KroneckerProduct, f(3), f(22))
            elseif i == 73
                return -(f(72))
            elseif i == 74
                return ComplexConjugate(f(72))
            elseif i == 75
                return -(f(74))
            else
                return false
            end
        end
        if i >= 81
            if i == 84
                return map(KroneckerProduct, f(7), f(13))
            elseif i == 85
                return -(f(84))
            elseif i == 86
                return ComplexConjugate(f(84))
            elseif i == 87
                return -(f(86))
            elseif i == 88
                return map(KroneckerProduct, f(5), f(25))
            elseif i == 89
                return -(f(88))
            elseif i == 90
                return ComplexConjugate(f(88))
            elseif i == 91
                return -(f(90))
            elseif i == 92
                return map((x->begin
                                SchurFunctor(x, [3, 1, 1])
                            end), f(5))
            elseif i == 93
                return -(f(94))
            elseif i == 94
                return ComplexConjugate(f(92))
            elseif i == 95
                return -(f(92))
            elseif i == 106
                return map(KroneckerProduct, f(11), f(13))
            elseif i == 107
                return map((x->begin
                                SchurFunctor(x, [3, 2])
                            end), f(5))
            elseif i == 108
                return ComplexConjugate(f(110))
            elseif i == 109
                return -(f(108))
            elseif i == 110
                return -(f(107))
            elseif i == 154
                return map(KroneckerProduct, f(9), f(25))
            elseif i == 155
                return -(f(156))
            elseif i == 156
                return ComplexConjugate(f(154))
            elseif i == 157
                return -(f(154))
            else
                return false
            end
        end
    end)
chevieset(:G34, :sparseFakeDegrees, [[1, 0], [1, 126], [1, 5, 1, 11, 1, 17, 1, 23, 1, 29, 1, 41], [1, 89, 1, 95, 1, 101, 1, 107, 1, 113, 1, 125], [1, 1, 1, 13, 1, 19, 1, 25, 1, 31, 1, 37], [1, 85, 1, 97, 1, 103, 1, 109, 1, 115, 1, 121], [1, 58, 1, 64, 2, 70, 2, 76, 2, 82, 2, 88, 2, 94, 1, 100, 1, 106, 1, 112], [1, 16, 1, 22, 2, 28, 2, 34, 2, 40, 2, 46, 2, 52, 1, 58, 1, 64, 1, 70], [1, 56, 1, 62, 1, 68, 2, 74, 2, 80, 2, 86, 2, 92, 2, 98, 1, 104, 1, 110], [1, 14, 1, 20, 1, 26, 2, 32, 2, 38, 2, 44, 2, 50, 2, 56, 1, 62, 1, 68], [1, 33, 1, 39, 2, 45, 2, 51, 3, 57, 2, 63, 3, 69, 2, 75, 2, 81, 1, 87, 1, 93], [1, 33, 1, 39, 2, 45, 2, 51, 3, 57, 2, 63, 3, 69, 2, 75, 2, 81, 1, 87, 1, 93], [1, 60, 1, 66, 2, 72, 2, 78, 3, 84, 3, 90, 3, 96, 2, 102, 2, 108, 1, 114, 1, 120], [1, 6, 1, 12, 2, 18, 2, 24, 3, 30, 3, 36, 3, 42, 2, 48, 2, 54, 1, 60, 1, 66], [1, 4, 2, 10, 2, 16, 3, 22, 3, 28, 3, 34, 3, 40, 2, 46, 1, 52, 1, 58], [1, 70, 2, 76, 2, 82, 3, 88, 3, 94, 3, 100, 3, 106, 2, 112, 1, 118, 1, 124], [1, 2, 1, 8, 2, 14, 3, 20, 3, 26, 3, 32, 3, 38, 2, 44, 2, 50, 1, 56], [1, 68, 1, 74, 2, 80, 3, 86, 3, 92, 3, 98, 3, 104, 2, 110, 2, 116, 1, 122], [1, 60, 2, 66, 3, 72, 4, 78, 5, 84, 5, 90, 5, 96, 4, 102, 3, 108, 2, 114, 1, 120], [1, 6, 2, 12, 3, 18, 4, 24, 5, 30, 5, 36, 5, 42, 4, 48, 3, 54, 2, 60, 1, 66], [1, 36, 1, 42, 2, 48, 3, 54, 4, 60, 4, 66, 5, 72, 4, 78, 4, 84, 3, 90, 2, 96, 1, 102, 1, 108], [1, 18, 1, 24, 2, 30, 3, 36, 4, 42, 4, 48, 5, 54, 4, 60, 4, 66, 3, 72, 2, 78, 1, 84, 1, 90], [1, 57, 2, 63, 4, 69, 6, 75, 7, 81, 8, 87, 8, 93, 7, 99, 6, 105, 4, 111, 2, 117, 1, 123], [1, 3, 2, 9, 4, 15, 6, 21, 7, 27, 8, 33, 8, 39, 7, 45, 6, 51, 4, 57, 2, 63, 1, 69], [1, 45, 2, 51, 3, 57, 5, 63, 6, 69, 7, 75, 8, 81, 7, 87, 6, 93, 5, 99, 3, 105, 2, 111, 1, 117], [1, 9, 2, 15, 3, 21, 5, 27, 6, 33, 7, 39, 8, 45, 7, 51, 6, 57, 5, 63, 3, 69, 2, 75, 1, 81], [1, 45, 2, 51, 4, 57, 6, 63, 8, 69, 9, 75, 10, 81, 9, 87, 8, 93, 6, 99, 4, 105, 2, 111, 1, 117], [1, 9, 2, 15, 4, 21, 6, 27, 8, 33, 9, 39, 10, 45, 9, 51, 8, 57, 6, 63, 4, 69, 2, 75, 1, 81], [1, 45, 2, 51, 4, 57, 6, 63, 8, 69, 9, 75, 10, 81, 9, 87, 8, 93, 6, 99, 4, 105, 2, 111, 1, 117], [1, 45, 2, 51, 4, 57, 6, 63, 8, 69, 9, 75, 10, 81, 9, 87, 8, 93, 6, 99, 4, 105, 2, 111, 1, 117], [1, 9, 2, 15, 4, 21, 6, 27, 8, 33, 9, 39, 10, 45, 9, 51, 8, 57, 6, 63, 4, 69, 2, 75, 1, 81], [1, 9, 2, 15, 4, 21, 6, 27, 8, 33, 9, 39, 10, 45, 9, 51, 8, 57, 6, 63, 4, 69, 2, 75, 1, 81], [2, 17, 3, 23, 6, 29, 8, 35, 10, 41, 11, 47, 12, 53, 10, 59, 9, 65, 6, 71, 4, 77, 2, 83, 1, 89], [1, 37, 2, 43, 4, 49, 6, 55, 9, 61, 10, 67, 12, 73, 11, 79, 10, 85, 8, 91, 6, 97, 3, 103, 2, 109], [1, 13, 2, 19, 4, 25, 6, 31, 9, 37, 10, 43, 12, 49, 11, 55, 10, 61, 8, 67, 6, 73, 3, 79, 2, 85], [2, 41, 3, 47, 6, 53, 8, 59, 10, 65, 11, 71, 12, 77, 10, 83, 9, 89, 6, 95, 4, 101, 2, 107, 1, 113], [1, 6, 3, 12, 5, 18, 8, 24, 10, 30, 12, 36, 12, 42, 12, 48, 10, 54, 8, 60, 5, 66, 3, 72, 1, 78], [1, 48, 3, 54, 5, 60, 8, 66, 10, 72, 12, 78, 12, 84, 12, 90, 10, 96, 8, 102, 5, 108, 3, 114, 1, 120], [1, 10, 3, 16, 5, 22, 8, 28, 11, 34, 13, 40, 14, 46, 14, 52, 12, 58, 10, 64, 7, 70, 4, 76, 2, 82, 1, 88], [1, 46, 2, 52, 5, 58, 8, 64, 11, 70, 13, 76, 15, 82, 14, 88, 13, 94, 10, 100, 7, 106, 4, 112, 2, 118], [1, 40, 3, 46, 5, 52, 8, 58, 11, 64, 13, 70, 14, 76, 14, 82, 12, 88, 10, 94, 7, 100, 4, 106, 2, 112, 1, 118], [1, 4, 2, 10, 5, 16, 8, 22, 11, 28, 13, 34, 15, 40, 14, 46, 13, 52, 10, 58, 7, 64, 4, 70, 2, 76], [2, 50, 4, 56, 7, 62, 10, 68, 13, 74, 14, 80, 15, 86, 13, 92, 11, 98, 8, 104, 5, 110, 2, 116, 1, 122], [1, 38, 2, 44, 4, 50, 7, 56, 10, 62, 12, 68, 14, 74, 14, 80, 13, 86, 11, 92, 8, 98, 5, 104, 3, 110, 1, 116], [1, 8, 2, 14, 4, 20, 7, 26, 10, 32, 12, 38, 14, 44, 14, 50, 13, 56, 11, 62, 8, 68, 5, 74, 3, 80, 1, 86], [2, 8, 4, 14, 7, 20, 10, 26, 13, 32, 14, 38, 15, 44, 13, 50, 11, 56, 8, 62, 5, 68, 2, 74, 1, 80], [1, 22, 3, 28, 5, 34, 8, 40, 11, 46, 13, 52, 14, 58, 14, 64, 12, 70, 10, 76, 7, 82, 4, 88, 2, 94, 1, 100], [1, 28, 3, 34, 5, 40, 8, 46, 11, 52, 13, 58, 14, 64, 14, 70, 12, 76, 10, 82, 7, 88, 4, 94, 2, 100, 1, 106], [1, 20, 2, 26, 4, 32, 7, 38, 10, 44, 12, 50, 14, 56, 14, 62, 13, 68, 11, 74, 8, 80, 5, 86, 3, 92, 1, 98], [1, 26, 2, 32, 4, 38, 7, 44, 10, 50, 12, 56, 14, 62, 14, 68, 13, 74, 11, 80, 8, 86, 5, 92, 3, 98, 1, 104], [1, 21, 2, 27, 4, 33, 7, 39, 10, 45, 13, 51, 15, 57, 16, 63, 15, 69, 13, 75, 10, 81, 7, 87, 4, 93, 2, 99, 1, 105], [1, 21, 2, 27, 4, 33, 7, 39, 10, 45, 13, 51, 15, 57, 16, 63, 15, 69, 13, 75, 10, 81, 7, 87, 4, 93, 2, 99, 1, 105], [1, 5, 3, 11, 6, 17, 10, 23, 13, 29, 16, 35, 17, 41, 16, 47, 14, 53, 11, 59, 7, 65, 4, 71, 2, 77], [1, 47, 3, 53, 6, 59, 10, 65, 13, 71, 16, 77, 17, 83, 16, 89, 14, 95, 11, 101, 7, 107, 4, 113, 2, 119], [2, 7, 4, 13, 7, 19, 11, 25, 14, 31, 16, 37, 17, 43, 16, 49, 13, 55, 10, 61, 6, 67, 3, 73, 1, 79], [2, 49, 4, 55, 7, 61, 11, 67, 14, 73, 16, 79, 17, 85, 16, 91, 13, 97, 10, 103, 6, 109, 3, 115, 1, 121], [1, 5, 2, 11, 5, 17, 8, 23, 12, 29, 15, 35, 17, 41, 17, 47, 16, 53, 13, 59, 10, 65, 6, 71, 3, 77, 1, 83], [1, 41, 2, 47, 5, 53, 8, 59, 12, 65, 15, 71, 17, 77, 17, 83, 16, 89, 13, 95, 10, 101, 6, 107, 3, 113, 1, 119], [1, 7, 3, 13, 6, 19, 10, 25, 13, 31, 16, 37, 17, 43, 17, 49, 15, 55, 12, 61, 8, 67, 5, 73, 2, 79, 1, 85], [1, 43, 3, 49, 6, 55, 10, 61, 13, 67, 16, 73, 17, 79, 17, 85, 15, 91, 12, 97, 8, 103, 5, 109, 2, 115, 1, 121], [1, 21, 2, 27, 5, 33, 8, 39, 12, 45, 15, 51, 18, 57, 18, 63, 18, 69, 15, 75, 12, 81, 8, 87, 5, 93, 2, 99, 1, 105], [1, 30, 2, 36, 5, 42, 8, 48, 12, 54, 15, 60, 18, 66, 18, 72, 18, 78, 15, 84, 12, 90, 8, 96, 5, 102, 2, 108, 1, 114], [1, 12, 2, 18, 5, 24, 8, 30, 12, 36, 15, 42, 18, 48, 18, 54, 18, 60, 15, 66, 12, 72, 8, 78, 5, 84, 2, 90, 1, 96], [1, 24, 3, 30, 6, 36, 11, 42, 16, 48, 21, 54, 24, 60, 25, 66, 24, 72, 21, 78, 16, 84, 11, 90, 6, 96, 3, 102, 1, 108], [1, 18, 3, 24, 6, 30, 11, 36, 16, 42, 21, 48, 24, 54, 25, 60, 24, 66, 21, 72, 16, 78, 11, 84, 6, 90, 3, 96, 1, 102], [1, 30, 3, 36, 7, 42, 12, 48, 18, 54, 23, 60, 27, 66, 28, 72, 27, 78, 23, 84, 18, 90, 12, 96, 7, 102, 3, 108, 1, 114], [1, 12, 3, 18, 7, 24, 12, 30, 18, 36, 23, 42, 27, 48, 28, 54, 27, 60, 23, 66, 18, 72, 12, 78, 7, 84, 3, 90, 1, 96], [2, 10, 5, 16, 10, 22, 16, 28, 22, 34, 26, 40, 29, 46, 28, 52, 25, 58, 20, 64, 14, 70, 8, 76, 4, 82, 1, 88], [2, 40, 5, 46, 10, 52, 16, 58, 22, 64, 26, 70, 29, 76, 28, 82, 25, 88, 20, 94, 14, 100, 8, 106, 4, 112, 1, 118], [1, 38, 4, 44, 8, 50, 14, 56, 20, 62, 25, 68, 28, 74, 29, 80, 26, 86, 22, 92, 16, 98, 10, 104, 5, 110, 2, 116], [1, 8, 4, 14, 8, 20, 14, 26, 20, 32, 25, 38, 28, 44, 29, 50, 26, 56, 22, 62, 16, 68, 10, 74, 5, 80, 2, 86], [2, 17, 4, 23, 9, 29, 14, 35, 20, 41, 24, 47, 28, 53, 27, 59, 26, 65, 21, 71, 16, 77, 10, 83, 6, 89, 2, 95, 1, 101], [2, 29, 4, 35, 9, 41, 14, 47, 20, 53, 24, 59, 28, 65, 27, 71, 26, 77, 21, 83, 16, 89, 10, 95, 6, 101, 2, 107, 1, 113], [1, 13, 2, 19, 6, 25, 10, 31, 16, 37, 21, 43, 26, 49, 27, 55, 28, 61, 24, 67, 20, 73, 14, 79, 9, 85, 4, 91, 2, 97], [1, 25, 2, 31, 6, 37, 10, 43, 16, 49, 21, 55, 26, 61, 27, 67, 28, 73, 24, 79, 20, 85, 14, 91, 9, 97, 4, 103, 2, 109], [1, 30, 4, 36, 9, 42, 16, 48, 24, 54, 31, 60, 36, 66, 38, 72, 36, 78, 31, 84, 24, 90, 16, 96, 9, 102, 4, 108, 1, 114], [1, 30, 4, 36, 9, 42, 16, 48, 24, 54, 31, 60, 36, 66, 38, 72, 36, 78, 31, 84, 24, 90, 16, 96, 9, 102, 4, 108, 1, 114], [1, 12, 4, 18, 9, 24, 16, 30, 24, 36, 31, 42, 36, 48, 38, 54, 36, 60, 31, 66, 24, 72, 16, 78, 9, 84, 4, 90, 1, 96], [1, 12, 4, 18, 9, 24, 16, 30, 24, 36, 31, 42, 36, 48, 38, 54, 36, 60, 31, 66, 24, 72, 16, 78, 9, 84, 4, 90, 1, 96], [1, 36, 4, 42, 10, 48, 18, 54, 27, 60, 35, 66, 41, 72, 43, 78, 41, 84, 35, 90, 27, 96, 18, 102, 10, 108, 4, 114, 1, 120], [1, 6, 4, 12, 10, 18, 18, 24, 27, 30, 35, 36, 41, 42, 43, 48, 41, 54, 35, 60, 27, 66, 18, 72, 10, 78, 4, 84, 1, 90], [2, 24, 5, 30, 11, 36, 18, 42, 27, 48, 34, 54, 40, 60, 41, 66, 40, 72, 34, 78, 27, 84, 18, 90, 11, 96, 5, 102, 2, 108], [2, 18, 5, 24, 11, 30, 18, 36, 27, 42, 34, 48, 40, 54, 41, 60, 40, 66, 34, 72, 27, 78, 18, 84, 11, 90, 5, 96, 2, 102], [1, 10, 3, 16, 8, 22, 15, 28, 24, 34, 32, 40, 39, 46, 42, 52, 42, 58, 37, 64, 30, 70, 21, 76, 13, 82, 6, 88, 2, 94], [1, 28, 3, 34, 8, 40, 15, 46, 24, 52, 32, 58, 39, 64, 42, 70, 42, 76, 37, 82, 30, 88, 21, 94, 13, 100, 6, 106, 2, 112], [2, 14, 6, 20, 13, 26, 21, 32, 30, 38, 37, 44, 42, 50, 42, 56, 39, 62, 32, 68, 24, 74, 15, 80, 8, 86, 3, 92, 1, 98], [2, 32, 6, 38, 13, 44, 21, 50, 30, 56, 37, 62, 42, 68, 42, 74, 39, 80, 32, 86, 24, 92, 15, 98, 8, 104, 3, 110, 1, 116], [2, 34, 6, 40, 12, 46, 21, 52, 30, 58, 38, 64, 44, 70, 45, 76, 42, 82, 36, 88, 27, 94, 18, 100, 10, 106, 4, 112, 1, 118], [2, 10, 6, 16, 12, 22, 21, 28, 30, 34, 38, 40, 44, 46, 45, 52, 42, 58, 36, 64, 27, 70, 18, 76, 10, 82, 4, 88, 1, 94], [1, 32, 4, 38, 10, 44, 18, 50, 27, 56, 36, 62, 42, 68, 45, 74, 44, 80, 38, 86, 30, 92, 21, 98, 12, 104, 6, 110, 2, 116], [1, 8, 4, 14, 10, 20, 18, 26, 27, 32, 36, 38, 42, 44, 45, 50, 44, 56, 38, 62, 30, 68, 21, 74, 12, 80, 6, 86, 2, 92], [1, 17, 4, 23, 10, 29, 18, 35, 27, 41, 36, 47, 42, 53, 45, 59, 44, 65, 38, 71, 30, 77, 21, 83, 12, 89, 6, 95, 2, 101], [2, 25, 6, 31, 12, 37, 21, 43, 30, 49, 38, 55, 44, 61, 45, 67, 42, 73, 36, 79, 27, 85, 18, 91, 10, 97, 4, 103, 1, 109], [2, 19, 6, 25, 12, 31, 21, 37, 30, 43, 38, 49, 44, 55, 45, 61, 42, 67, 36, 73, 27, 79, 18, 85, 10, 91, 4, 97, 1, 103], [1, 23, 4, 29, 10, 35, 18, 41, 27, 47, 36, 53, 42, 59, 45, 65, 44, 71, 38, 77, 30, 83, 21, 89, 12, 95, 6, 101, 2, 107], [2, 11, 6, 17, 13, 23, 23, 29, 33, 35, 43, 41, 50, 47, 52, 53, 49, 59, 42, 65, 32, 71, 21, 77, 12, 83, 5, 89, 1, 95], [1, 29, 3, 35, 9, 41, 18, 47, 28, 53, 39, 59, 47, 65, 51, 71, 51, 77, 46, 83, 37, 89, 27, 95, 16, 101, 8, 107, 3, 113], [3, 13, 8, 19, 16, 25, 27, 31, 37, 37, 46, 43, 51, 49, 51, 55, 47, 61, 39, 67, 28, 73, 18, 79, 9, 85, 3, 91, 1, 97], [1, 31, 5, 37, 12, 43, 21, 49, 32, 55, 42, 61, 49, 67, 52, 73, 50, 79, 43, 85, 33, 91, 23, 97, 13, 103, 6, 109, 2, 115], [3, 34, 8, 40, 16, 46, 27, 52, 37, 58, 46, 64, 51, 70, 51, 76, 47, 82, 39, 88, 28, 94, 18, 100, 9, 106, 3, 112, 1, 118], [1, 10, 5, 16, 12, 22, 21, 28, 32, 34, 42, 40, 49, 46, 52, 52, 50, 58, 43, 64, 33, 70, 23, 76, 13, 82, 6, 88, 2, 94], [2, 32, 6, 38, 13, 44, 23, 50, 33, 56, 43, 62, 50, 68, 52, 74, 49, 80, 42, 86, 32, 92, 21, 98, 12, 104, 5, 110, 1, 116], [1, 8, 3, 14, 9, 20, 18, 26, 28, 32, 39, 38, 47, 44, 51, 50, 51, 56, 46, 62, 37, 68, 27, 74, 16, 80, 8, 86, 3, 92], [2, 30, 6, 36, 14, 42, 24, 48, 36, 54, 46, 60, 54, 66, 56, 72, 54, 78, 46, 84, 36, 90, 24, 96, 14, 102, 6, 108, 2, 114], [2, 12, 6, 18, 14, 24, 24, 30, 36, 36, 46, 42, 54, 48, 56, 54, 54, 60, 46, 66, 36, 72, 24, 78, 14, 84, 6, 90, 2, 96], [2, 21, 6, 27, 14, 33, 24, 39, 36, 45, 46, 51, 54, 57, 56, 63, 54, 69, 46, 75, 36, 81, 24, 87, 14, 93, 6, 99, 2, 105], [3, 11, 8, 17, 17, 23, 28, 29, 40, 35, 49, 41, 56, 47, 56, 53, 52, 59, 43, 65, 32, 71, 20, 77, 11, 83, 4, 89, 1, 95], [1, 31, 4, 37, 11, 43, 20, 49, 32, 55, 43, 61, 52, 67, 56, 73, 56, 79, 49, 85, 40, 91, 28, 97, 17, 103, 8, 109, 3, 115], [1, 7, 4, 13, 11, 19, 20, 25, 32, 31, 43, 37, 52, 43, 56, 49, 56, 55, 49, 61, 40, 67, 28, 73, 17, 79, 8, 85, 3, 91], [3, 35, 8, 41, 17, 47, 28, 53, 40, 59, 49, 65, 56, 71, 56, 77, 52, 83, 43, 89, 32, 95, 20, 101, 11, 107, 4, 113, 1, 119], [1, 16, 5, 22, 11, 28, 21, 34, 32, 40, 43, 46, 51, 52, 56, 58, 54, 64, 49, 70, 39, 76, 28, 82, 17, 88, 9, 94, 3, 100, 1, 106], [1, 22, 5, 28, 11, 34, 21, 40, 32, 46, 43, 52, 51, 58, 56, 64, 54, 70, 49, 76, 39, 82, 28, 88, 17, 94, 9, 100, 3, 106, 1, 112], [1, 14, 3, 20, 9, 26, 17, 32, 28, 38, 39, 44, 49, 50, 54, 56, 56, 62, 51, 68, 43, 74, 32, 80, 21, 86, 11, 92, 5, 98, 1, 104], [1, 20, 3, 26, 9, 32, 17, 38, 28, 44, 39, 50, 49, 56, 54, 62, 56, 68, 51, 74, 43, 80, 32, 86, 21, 92, 11, 98, 5, 104, 1, 110], [2, 33, 7, 39, 16, 45, 29, 51, 43, 57, 56, 63, 65, 69, 68, 75, 65, 81, 56, 87, 43, 93, 29, 99, 16, 105, 7, 111, 2, 117], [2, 9, 7, 15, 16, 21, 29, 27, 43, 33, 56, 39, 65, 45, 68, 51, 65, 57, 56, 63, 43, 69, 29, 75, 16, 81, 7, 87, 2, 93], [1, 21, 5, 27, 12, 33, 23, 39, 36, 45, 49, 51, 60, 57, 66, 63, 66, 69, 60, 75, 49, 81, 36, 87, 23, 93, 12, 99, 5, 105, 1, 111], [1, 15, 5, 21, 12, 27, 23, 33, 36, 39, 49, 45, 60, 51, 66, 57, 66, 63, 60, 69, 49, 75, 36, 81, 23, 87, 12, 93, 5, 99, 1, 105], [1, 17, 4, 23, 11, 29, 22, 35, 36, 41, 50, 47, 63, 53, 70, 59, 72, 65, 66, 71, 56, 77, 41, 83, 27, 89, 14, 95, 6, 101, 1, 107], [1, 19, 6, 25, 14, 31, 27, 37, 41, 43, 56, 49, 66, 55, 72, 61, 70, 67, 63, 73, 50, 79, 36, 85, 22, 91, 11, 97, 4, 103, 1, 109], [3, 21, 8, 27, 18, 33, 31, 39, 46, 45, 59, 51, 69, 57, 72, 63, 69, 69, 59, 75, 46, 81, 31, 87, 18, 93, 8, 99, 3, 105], [3, 21, 8, 27, 18, 33, 31, 39, 46, 45, 59, 51, 69, 57, 72, 63, 69, 69, 59, 75, 46, 81, 31, 87, 18, 93, 8, 99, 3, 105], [1, 27, 5, 33, 13, 39, 25, 45, 40, 51, 55, 57, 67, 63, 74, 69, 74, 75, 67, 81, 55, 87, 40, 93, 25, 99, 13, 105, 5, 111, 1, 117], [1, 9, 5, 15, 13, 21, 25, 27, 40, 33, 55, 39, 67, 45, 74, 51, 74, 57, 67, 63, 55, 69, 40, 75, 25, 81, 13, 87, 5, 93, 1, 99], [1, 18, 5, 24, 13, 30, 25, 36, 40, 42, 55, 48, 67, 54, 74, 60, 74, 66, 67, 72, 55, 78, 40, 84, 25, 90, 13, 96, 5, 102, 1, 108], [1, 18, 5, 24, 13, 30, 25, 36, 40, 42, 55, 48, 67, 54, 74, 60, 74, 66, 67, 72, 55, 78, 40, 84, 25, 90, 13, 96, 5, 102, 1, 108], [1, 18, 5, 24, 13, 30, 25, 36, 40, 42, 55, 48, 67, 54, 74, 60, 74, 66, 67, 72, 55, 78, 40, 84, 25, 90, 13, 96, 5, 102, 1, 108], [3, 27, 9, 33, 21, 39, 36, 45, 54, 51, 69, 57, 81, 63, 84, 69, 81, 75, 69, 81, 54, 87, 36, 93, 21, 99, 9, 105, 3, 111], [3, 15, 9, 21, 21, 27, 36, 33, 54, 39, 69, 45, 81, 51, 84, 57, 81, 63, 69, 69, 54, 75, 36, 81, 21, 87, 9, 93, 3, 99], [2, 16, 7, 22, 17, 28, 31, 34, 48, 40, 64, 46, 77, 52, 83, 58, 82, 64, 73, 70, 59, 76, 42, 82, 26, 88, 13, 94, 5, 100, 1, 106], [2, 22, 7, 28, 17, 34, 31, 40, 48, 46, 64, 52, 77, 58, 83, 64, 82, 70, 73, 76, 59, 82, 42, 88, 26, 94, 13, 100, 5, 106, 1, 112], [1, 14, 5, 20, 13, 26, 26, 32, 42, 38, 59, 44, 73, 50, 82, 56, 83, 62, 77, 68, 64, 74, 48, 80, 31, 86, 17, 92, 7, 98, 2, 104], [1, 20, 5, 26, 13, 32, 26, 38, 42, 44, 59, 50, 73, 56, 82, 62, 83, 68, 77, 74, 64, 80, 48, 86, 31, 92, 17, 98, 7, 104, 2, 110], [1, 11, 5, 17, 13, 23, 26, 29, 42, 35, 59, 41, 73, 47, 82, 53, 83, 59, 77, 65, 64, 71, 48, 77, 31, 83, 17, 89, 7, 95, 2, 101], [2, 25, 7, 31, 17, 37, 31, 43, 48, 49, 64, 55, 77, 61, 83, 67, 82, 73, 73, 79, 59, 85, 42, 91, 26, 97, 13, 103, 5, 109, 1, 115], [2, 13, 7, 19, 17, 25, 31, 31, 48, 37, 64, 43, 77, 49, 83, 55, 82, 61, 73, 67, 59, 73, 42, 79, 26, 85, 13, 91, 5, 97, 1, 103], [1, 23, 5, 29, 13, 35, 26, 41, 42, 47, 59, 53, 73, 59, 82, 65, 83, 71, 77, 77, 64, 83, 48, 89, 31, 95, 17, 101, 7, 107, 2, 113], [1, 16, 5, 22, 13, 28, 27, 34, 45, 40, 64, 46, 81, 52, 92, 58, 95, 64, 89, 70, 76, 76, 58, 82, 39, 88, 22, 94, 10, 100, 3, 106], [3, 20, 10, 26, 22, 32, 39, 38, 58, 44, 76, 50, 89, 56, 95, 62, 92, 68, 81, 74, 64, 80, 45, 86, 27, 92, 13, 98, 5, 104, 1, 110], [1, 24, 5, 30, 15, 36, 30, 42, 49, 48, 68, 54, 85, 60, 95, 66, 97, 72, 89, 78, 75, 84, 55, 90, 36, 96, 19, 102, 8, 108, 2, 114], [2, 12, 8, 18, 19, 24, 36, 30, 55, 36, 75, 42, 89, 48, 97, 54, 95, 60, 85, 66, 68, 72, 49, 78, 30, 84, 15, 90, 5, 96, 1, 102], [4, 28, 11, 34, 24, 40, 42, 46, 62, 52, 80, 58, 93, 64, 97, 70, 93, 76, 80, 82, 62, 88, 42, 94, 24, 100, 11, 106, 4, 112], [1, 10, 5, 16, 15, 22, 30, 28, 49, 34, 68, 40, 85, 46, 95, 52, 97, 58, 89, 64, 75, 70, 55, 76, 36, 82, 19, 88, 8, 94, 2, 100], [2, 26, 8, 32, 19, 38, 36, 44, 55, 50, 75, 56, 89, 62, 97, 68, 95, 74, 85, 80, 68, 86, 49, 92, 30, 98, 15, 104, 5, 110, 1, 116], [4, 14, 11, 20, 24, 26, 42, 32, 62, 38, 80, 44, 93, 50, 97, 56, 93, 62, 80, 68, 62, 74, 42, 80, 24, 86, 11, 92, 4, 98], [2, 16, 8, 22, 20, 28, 37, 34, 58, 40, 77, 46, 93, 52, 100, 58, 99, 64, 88, 70, 71, 76, 50, 82, 31, 88, 15, 94, 6, 100, 1, 106], [2, 22, 8, 28, 20, 34, 37, 40, 58, 46, 77, 52, 93, 58, 100, 64, 99, 70, 88, 76, 71, 82, 50, 88, 31, 94, 15, 100, 6, 106, 1, 112], [1, 14, 6, 20, 15, 26, 31, 32, 50, 38, 71, 44, 88, 50, 99, 56, 100, 62, 93, 68, 77, 74, 58, 80, 37, 86, 20, 92, 8, 98, 2, 104], [1, 20, 6, 26, 15, 32, 31, 38, 50, 44, 71, 50, 88, 56, 99, 62, 100, 68, 93, 74, 77, 80, 58, 86, 37, 92, 20, 98, 8, 104, 2, 110], [3, 17, 11, 23, 25, 29, 45, 35, 68, 41, 89, 47, 105, 53, 112, 59, 108, 65, 95, 71, 75, 77, 52, 83, 31, 89, 15, 95, 5, 101, 1, 107], [1, 19, 5, 25, 15, 31, 31, 37, 52, 43, 75, 49, 95, 55, 108, 61, 112, 67, 105, 73, 89, 79, 68, 85, 45, 91, 25, 97, 11, 103, 3, 109], [1, 13, 5, 19, 15, 25, 31, 31, 52, 37, 75, 43, 95, 49, 108, 55, 112, 61, 105, 67, 89, 73, 68, 79, 45, 85, 25, 91, 11, 97, 3, 103], [3, 23, 11, 29, 25, 35, 45, 41, 68, 47, 89, 53, 105, 59, 112, 65, 108, 71, 95, 77, 75, 83, 52, 89, 31, 95, 15, 101, 5, 107, 1, 113], [1, 11, 6, 17, 17, 23, 34, 29, 56, 35, 79, 41, 98, 47, 110, 53, 112, 59, 103, 65, 86, 71, 64, 77, 41, 83, 22, 89, 9, 95, 2, 101], [2, 25, 9, 31, 22, 37, 41, 43, 64, 49, 86, 55, 103, 61, 112, 67, 110, 73, 98, 79, 79, 85, 56, 91, 34, 97, 17, 103, 6, 109, 1, 115], [2, 13, 9, 19, 22, 25, 41, 31, 64, 37, 86, 43, 103, 49, 112, 55, 110, 61, 98, 67, 79, 73, 56, 79, 34, 85, 17, 91, 6, 97, 1, 103], [1, 23, 6, 29, 17, 35, 34, 41, 56, 47, 79, 53, 98, 59, 110, 65, 112, 71, 103, 77, 86, 83, 64, 89, 41, 95, 22, 101, 9, 107, 2, 113], [3, 24, 11, 30, 25, 36, 46, 42, 70, 48, 93, 54, 111, 60, 119, 66, 116, 72, 103, 78, 82, 84, 58, 90, 35, 96, 17, 102, 6, 108, 1, 114], [1, 12, 6, 18, 17, 24, 35, 30, 58, 36, 82, 42, 103, 48, 116, 54, 119, 60, 111, 66, 93, 72, 70, 78, 46, 84, 25, 90, 11, 96, 3, 102], [1, 21, 6, 27, 17, 33, 35, 39, 58, 45, 82, 51, 103, 57, 116, 63, 119, 69, 111, 75, 93, 81, 70, 87, 46, 93, 25, 99, 11, 105, 3, 111], [3, 15, 11, 21, 25, 27, 46, 33, 70, 39, 93, 45, 111, 51, 119, 57, 116, 63, 103, 69, 82, 75, 58, 81, 35, 87, 17, 93, 6, 99, 1, 105], [3, 16, 10, 22, 25, 28, 46, 34, 72, 40, 96, 46, 116, 52, 125, 58, 124, 64, 110, 70, 89, 76, 63, 82, 39, 88, 19, 94, 7, 100, 1, 106], [3, 22, 10, 28, 25, 34, 46, 40, 72, 46, 96, 52, 116, 58, 125, 64, 124, 70, 110, 76, 89, 82, 63, 88, 39, 94, 19, 100, 7, 106, 1, 112], [1, 14, 7, 20, 19, 26, 39, 32, 63, 38, 89, 44, 110, 50, 124, 56, 125, 62, 116, 68, 96, 74, 72, 80, 46, 86, 25, 92, 10, 98, 3, 104], [1, 20, 7, 26, 19, 32, 39, 38, 63, 44, 89, 50, 110, 56, 124, 62, 125, 68, 116, 74, 96, 80, 72, 86, 46, 92, 25, 98, 10, 104, 3, 110], [2, 17, 10, 23, 26, 29, 52, 35, 84, 41, 118, 47, 146, 53, 164, 59, 166, 65, 154, 71, 128, 77, 96, 83, 62, 89, 34, 95, 14, 101, 4, 107], [4, 19, 14, 25, 34, 31, 62, 37, 96, 43, 128, 49, 154, 55, 166, 61, 164, 67, 146, 73, 118, 79, 84, 85, 52, 91, 26, 97, 10, 103, 2, 109], [3, 18, 12, 24, 30, 30, 58, 36, 91, 42, 125, 48, 153, 54, 168, 60, 168, 66, 153, 72, 125, 78, 91, 84, 58, 90, 30, 96, 12, 102, 3, 108], [1, 15, 6, 21, 20, 27, 43, 33, 74, 39, 109, 45, 140, 51, 162, 57, 170, 63, 162, 69, 140, 75, 109, 81, 74, 87, 43, 93, 20, 99, 6, 105, 1, 111]])
(CHEVIE[:families])[:F42] = Dict{Symbol, Any}(:name => "Q(F_{42})", :explanation => "DrinfeldDouble(Frobenius group size 42)", :x => [Perm(), Perm(), Perm(), Perm(), Perm(), Perm(), Perm(), #= none:10 =# @perm_str("(2,3,7)(4,5,6)"), #= none:10 =# @perm_str("(2,3,7)(4,5,6)"), #= none:11 =# @perm_str("(2,3,7)(4,5,6)"), #= none:11 =# @perm_str("(2,3,7)(4,5,6)"), #= none:11 =# @perm_str("(2,3,7)(4,5,6)"), #= none:11 =# @perm_str("(2,3,7)(4,5,6)"), #= none:12 =# @perm_str("(2,4,7,6,3,5)"), #= none:12 =# @perm_str("(2,4,7,6,3,5)"), #= none:12 =# @perm_str("(2,4,7,6,3,5)"), #= none:12 =# @perm_str("(2,4,7,6,3,5)"), #= none:12 =# @perm_str("(2,4,7,6,3,5)"), #= none:13 =# @perm_str("(2,4,7,6,3,5)"), #= none:13 =# @perm_str("(2,5,3,6,7,4)"), #= none:13 =# @perm_str("(2,5,3,6,7,4)"), #= none:13 =# @perm_str("(2,5,3,6,7,4)"), #= none:13 =# @perm_str("(2,5,3,6,7,4)"), #= none:14 =# @perm_str("(2,5,3,6,7,4)"), #= none:14 =# @perm_str("(2,5,3,6,7,4)"), #= none:14 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:14 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:15 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:15 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:15 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:15 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:16 =# @perm_str("(2,7,3)(4,6,5)"), #= none:16 =# @perm_str("(2,7,3)(4,6,5)"), #= none:16 =# @perm_str("(2,7,3)(4,6,5)"), #= none:16 =# @perm_str("(2,7,3)(4,6,5)"), #= none:17 =# @perm_str("(2,7,3)(4,6,5)"), #= none:17 =# @perm_str("(2,7,3)(4,6,5)"), #= none:17 =# @perm_str("(1,2,3,5,7,4,6)"), #= none:17 =# @perm_str("(1,2,3,5,7,4,6)"), #= none:18 =# @perm_str("(1,2,3,5,7,4,6)"), #= none:18 =# @perm_str("(1,2,3,5,7,4,6)"), #= none:18 =# @perm_str("(1,2,3,5,7,4,6)"), #= none:18 =# @perm_str("(1,2,3,5,7,4,6)"), #= none:19 =# @perm_str("(1,2,3,5,7,4,6)")], :y => [Perm(), #= none:20 =# @perm_str("(2,3,7)(4,5,6)"), #= none:20 =# @perm_str("(2,4,7,6,3,5)"), #= none:20 =# @perm_str("(2,5,3,6,7,4)"), #= none:20 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:21 =# @perm_str("(2,7,3)(4,6,5)"), #= none:21 =# @perm_str("(1,2,3,5,7,4,6)"), Perm(), #= none:21 =# @perm_str("(2,3,7)(4,5,6)"), #= none:21 =# @perm_str("(2,4,7,6,3,5)"), #= none:22 =# @perm_str("(2,5,3,6,7,4)"), #= none:22 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:22 =# @perm_str("(2,7,3)(4,6,5)"), Perm(), #= none:22 =# @perm_str("(2,3,7)(4,5,6)"), #= none:23 =# @perm_str("(2,4,7,6,3,5)"), #= none:23 =# @perm_str("(2,5,3,6,7,4)"), #= none:23 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:23 =# @perm_str("(2,7,3)(4,6,5)"), Perm(), #= none:24 =# @perm_str("(2,3,7)(4,5,6)"), #= none:24 =# @perm_str("(2,4,7,6,3,5)"), #= none:24 =# @perm_str("(2,5,3,6,7,4)"), #= none:24 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:25 =# @perm_str("(2,7,3)(4,6,5)"), Perm(), #= none:25 =# @perm_str("(2,3,7)(4,5,6)"), #= none:25 =# @perm_str("(2,4,7,6,3,5)"), #= none:25 =# @perm_str("(2,5,3,6,7,4)"), #= none:26 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:26 =# @perm_str("(2,7,3)(4,6,5)"), Perm(), #= none:26 =# @perm_str("(2,3,7)(4,5,6)"), #= none:26 =# @perm_str("(2,4,7,6,3,5)"), #= none:27 =# @perm_str("(2,5,3,6,7,4)"), #= none:27 =# @perm_str("(2,6)(3,4)(5,7)"), #= none:27 =# @perm_str("(2,7,3)(4,6,5)"), Perm(), #= none:27 =# @perm_str("(1,2,3,5,7,4,6)"), #= none:28 =# @perm_str("(1,3,7,6,2,5,4)"), #= none:28 =# @perm_str("(1,4,5,2,6,7,3)"), #= none:28 =# @perm_str("(1,5,6,3,4,2,7)"), #= none:28 =# @perm_str("(1,6,4,7,5,3,2)"), #= none:29 =# @perm_str("(1,7,2,4,3,6,5)")], :charLabels => ["(1,1)", "(1,-1)", "(1,-\\zeta_3^2)", "(1,-\\zeta_3)", "(1,\\zeta_3^2)", "(1,\\zeta_3)", "(1,r)", "(g_6^4,1)", "(g_6^4,-1)", "(g_6^4,\\zeta_3)", "(g_6^4,-\\zeta_3)", "(g_6^4,\\zeta_3^2)", "(g_6^4,-\\zeta_3^2)", "(g_6,1)", "(g_6,-1)", "(g_6,\\zeta_3)", "(g_6,-\\zeta_3)", "(g_6,\\zeta_3^2)", "(g_6,-\\zeta_3^2)", "(g_6^3,1)", "(g_6^3,-1)", "(g_6^3,\\zeta_3)", "(g_6^3,-\\zeta_3)", "(g_6^3,\\zeta_3^2)", "(g_6^3,-\\zeta_3^2)", "(g_6^2,1)", "(g_6^2,-1)", "(g_6^2,\\zeta_3)", "(g_6^2,-\\zeta_3)", "(g_6^2,\\zeta_3^2)", "(g_6^2,-\\zeta_3^2)", "(g_6^5,1)", "(g_6^5,-1)", "(g_6^5,\\zeta_3)", "(g_6^5,-\\zeta_3)", "(g_6^5,\\zeta_3^2)", "(g_6^5,-\\zeta_3^2)", "(g_7,1)", "(g_7,\\zeta_7)", "(g_7,\\zeta_7^2)", "(g_7,\\zeta_7^3)", "(g_7,\\zeta_7^4)", "(g_7,\\zeta_7^5)", "(g_7,\\zeta_7^6)"], :eigenvalues => [1, 1, 1, 1, 1, 1, 1, 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, 1, -1, 1, -1, 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, E(7), E(7, 2), E(7, 3), E(7, 4), E(7, 5), E(7, 6)], :mellin => ApplyFunc(DiagonalMat, [[[1, 1, 1, 1, 1, 1, 6], [1, 1, E(3, 2), E(3), E(3, 2), E(3), 0], [1, -1, -(E(3, 2)), -(E(3)), E(3, 2), E(3), 0], [1, -1, -(E(3)), -(E(3, 2)), E(3), E(3, 2), 0], [1, -1, -1, -1, 1, 1, 0], [1, 1, E(3), E(3, 2), E(3), E(3, 2), 0], [1, 1, 1, 1, 1, 1, -1]], [[1, 1, 1, 1, 1, 1], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, -1, 1, -1, 1, -1], [1, 1, E(3, 2), E(3, 2), E(3), E(3)]], [[1, 1, 1, 1, 1, 1], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, -1, 1, -1, 1, -1], [1, 1, E(3, 2), E(3, 2), E(3), E(3)]], [[1, 1, 1, 1, 1, 1], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, -1, 1, -1, 1, -1], [1, 1, E(3, 2), E(3, 2), E(3), E(3)]], [[1, 1, 1, 1, 1, 1], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, -1, 1, -1, 1, -1], [1, 1, E(3, 2), E(3, 2), E(3), E(3)]], [[1, 1, 1, 1, 1, 1], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))], [1, -1, 1, -1, 1, -1], [1, 1, E(3, 2), E(3, 2), E(3), E(3)]], [[1, 1, 1, 1, 1, 1, 1], [1, E(7), E(7, 2), E(7, 3), E(7, 4), E(7, 5), E(7, 6)], [1, E(7, 2), E(7, 4), E(7, 6), E(7), E(7, 3), E(7, 5)], [1, E(7, 5), E(7, 3), E(7), E(7, 6), E(7, 4), E(7, 2)], [1, E(7, 3), E(7, 6), E(7, 2), E(7, 5), E(7), E(7, 4)], [1, E(7, 6), E(7, 5), E(7, 4), E(7, 3), E(7, 2), E(7)], [1, E(7, 4), E(7), E(7, 5), E(7, 2), E(7, 6), E(7, 3)]]]), :group => Group(#= none:64 =# @perm_str("(1,2,3,5,7,4,6)"), #= none:64 =# @perm_str("(2,4,7,6,3,5)")), :fourierMat => [[1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 6 // 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7], [1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 6 // 7, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7], [1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 6 // 7, E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -1, -1, -1, -1, -1, -1, E(3), E(3), E(3), E(3), E(3), E(3), 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7], [1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 6 // 7, E(3), E(3), E(3), E(3), E(3), E(3), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -1, -1, -1, -1, -1, -1, E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7], [1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 6 // 7, E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3), E(3), E(3), E(3), E(3), E(3), 1, 1, 1, 1, 1, 1, E(3), E(3), E(3), E(3), E(3), E(3), 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7], [1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 1 // 7, 6 // 7, E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), 1, 1, 1, 1, 1, 1, E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3, 2), 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7], [6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 36 // 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6 // 7, -6 // 7, -6 // 7, -6 // 7, -6 // 7, -6 // 7, -6 // 7], [1, 1, E(3, 2), E(3), E(3, 2), E(3), 0, 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3, 2), E(3), E(3, 2), E(3), 0, 1, 1, E(3), E(3), E(3, 2), E(3, 2), -1, -1, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), -1, -1, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), -1, -1, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3, 2), E(3), E(3, 2), E(3), 0, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3, 2), E(3, 2), 1, 1, E(3), E(3), 1, 1, E(3), E(3), E(3, 2), E(3, 2), E(3, 2), E(3, 2), 1, 1, E(3), E(3), 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3, 2), E(3), E(3, 2), E(3), 0, E(3), E(3), E(3, 2), E(3, 2), 1, 1, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), -1, -1, -(E(3, 2)), -(E(3, 2)), -1, -1, -(E(3)), -(E(3)), -1, -1, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), E(3, 2), E(3, 2), 1, 1, E(3), E(3), 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3, 2), E(3), E(3, 2), E(3), 0, E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, 1, E(3), E(3), E(3), E(3), E(3, 2), E(3, 2), 1, 1, 1, 1, E(3), E(3), E(3, 2), E(3, 2), E(3), E(3), E(3, 2), E(3, 2), 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3, 2), E(3), E(3, 2), E(3), 0, E(3, 2), E(3, 2), 1, 1, E(3), E(3), -(E(3, 2)), -(E(3, 2)), -1, -1, -(E(3)), -(E(3)), -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), -1, -1, -1, -1, -(E(3)), -(E(3)), -(E(3, 2)), -(E(3, 2)), E(3), E(3), E(3, 2), E(3, 2), 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3, 2)), -(E(3)), E(3, 2), E(3), 0, 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3, 2)), -(E(3)), E(3, 2), E(3), 0, 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), -1, 1, -(E(3)), E(3), -(E(3, 2)), E(3, 2), -1, 1, -(E(3)), E(3), -(E(3, 2)), E(3, 2), -1, 1, -(E(3)), E(3), -(E(3, 2)), E(3, 2), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3, 2)), -(E(3)), E(3, 2), E(3), 0, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3, 2)), -(E(3)), E(3, 2), E(3), 0, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, -(E(3)), E(3), -(E(3, 2)), E(3, 2), -1, 1, -(E(3, 2)), E(3, 2), -1, 1, -(E(3)), E(3), -1, 1, -(E(3)), E(3), -(E(3, 2)), E(3, 2), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3, 2)), -(E(3)), E(3, 2), E(3), 0, E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3, 2)), -(E(3)), E(3, 2), E(3), 0, E(3, 2), -(E(3, 2)), 1, -1, E(3), -(E(3)), -(E(3, 2)), E(3, 2), -1, 1, -(E(3)), E(3), -(E(3)), E(3), -(E(3, 2)), E(3, 2), -1, 1, -1, 1, -(E(3)), E(3), -(E(3, 2)), E(3, 2), E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3)), -(E(3, 2)), E(3), E(3, 2), 0, 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3)), -(E(3, 2)), E(3), E(3, 2), 0, 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), -1, 1, -(E(3, 2)), E(3, 2), -(E(3)), E(3), -1, 1, -(E(3, 2)), E(3, 2), -(E(3)), E(3), -1, 1, -(E(3, 2)), E(3, 2), -(E(3)), E(3), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3)), -(E(3, 2)), E(3), E(3, 2), 0, E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3)), -(E(3, 2)), E(3), E(3, 2), 0, E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), -(E(3)), E(3), -1, 1, -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3)), E(3), -1, 1, -1, 1, -(E(3, 2)), E(3, 2), -(E(3)), E(3), E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3)), -(E(3, 2)), E(3), E(3, 2), 0, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), 1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3)), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -(E(3)), -(E(3, 2)), E(3), E(3, 2), 0, E(3, 2), -(E(3, 2)), E(3), -(E(3)), 1, -1, -(E(3, 2)), E(3, 2), -(E(3)), E(3), -1, 1, -(E(3)), E(3), -1, 1, -(E(3, 2)), E(3, 2), -1, 1, -(E(3, 2)), E(3, 2), -(E(3)), E(3), E(3), -(E(3)), 1, -1, E(3, 2), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -1, -1, 1, 1, 0, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0], [1, -1, -1, -1, 1, 1, 0, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0], [1, -1, -1, -1, 1, 1, 0, E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), 1, -1, 1, -1, 1, -1, E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -1, -1, 1, 1, 0, E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -1, 1, -1, 1, -1, 1, E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -1, -1, 1, 1, 0, E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), 1, -1, 1, -1, 1, -1, E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), 0, 0, 0, 0, 0, 0, 0], [1, -1, -1, -1, 1, 1, 0, E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3, 2)), E(3, 2), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), E(3), -1, 1, -1, 1, -1, 1, E(3), -(E(3)), E(3), -(E(3)), E(3), -(E(3)), 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3), E(3, 2), E(3), E(3, 2), 0, 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3), E(3, 2), E(3), E(3, 2), 0, 1, 1, E(3, 2), E(3, 2), E(3), E(3), -1, -1, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), -1, -1, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), -1, -1, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3), E(3, 2), E(3), E(3, 2), 0, E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3, 2), E(3, 2), E(3), E(3), 1, 1, 1, 1, E(3, 2), E(3, 2), E(3), E(3), E(3, 2), E(3, 2), E(3), E(3), 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3), E(3, 2), E(3), E(3, 2), 0, E(3), E(3), 1, 1, E(3, 2), E(3, 2), -(E(3)), -(E(3)), -1, -1, -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), -1, -1, -1, -1, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), E(3, 2), E(3, 2), E(3), E(3), 1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3), E(3, 2), E(3), E(3, 2), 0, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3, 2), E(3, 2), E(3), E(3), 1, 1, E(3), E(3), 1, 1, E(3, 2), E(3, 2), 1, 1, E(3, 2), E(3, 2), E(3), E(3), E(3), E(3), 1, 1, E(3, 2), E(3, 2), 0, 0, 0, 0, 0, 0, 0], [1, 1, E(3), E(3, 2), E(3), E(3, 2), 0, E(3, 2), E(3, 2), E(3), E(3), 1, 1, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), -1, -1, -(E(3)), -(E(3)), -1, -1, -(E(3, 2)), -(E(3, 2)), -1, -1, -(E(3, 2)), -(E(3, 2)), -(E(3)), -(E(3)), E(3), E(3), 1, 1, E(3, 2), E(3, 2), 0, 0, 0, 0, 0, 0, 0], [6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, -6 // 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36 // 7, -6 // 7, -6 // 7, -6 // 7, -6 // 7, -6 // 7, -6 // 7], [6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, -6 // 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6 // 7, (12 * E(7, 6) + 6 * E(7, 5) + 6 * E(7, 2) + 12 * E(7)) // 7, (6 * E(7, 6) + 12 * E(7, 4) + 12 * E(7, 3) + 6 * E(7)) // 7, (((-12 * E(7, 6) - 12 * E(7, 5)) - 12 * E(7, 2)) - 12 * E(7)) // 7, (12 * E(7, 5) + 6 * E(7, 4) + 6 * E(7, 3) + 12 * E(7, 2)) // 7, (((-12 * E(7, 5) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7, 2)) // 7, (((-12 * E(7, 6) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7)) // 7], [6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, -6 // 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6 // 7, (6 * E(7, 6) + 12 * E(7, 4) + 12 * E(7, 3) + 6 * E(7)) // 7, (12 * E(7, 5) + 6 * E(7, 4) + 6 * E(7, 3) + 12 * E(7, 2)) // 7, (((-12 * E(7, 6) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7)) // 7, (12 * E(7, 6) + 6 * E(7, 5) + 6 * E(7, 2) + 12 * E(7)) // 7, (((-12 * E(7, 6) - 12 * E(7, 5)) - 12 * E(7, 2)) - 12 * E(7)) // 7, (((-12 * E(7, 5) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7, 2)) // 7], [6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, -6 // 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6 // 7, (((-12 * E(7, 6) - 12 * E(7, 5)) - 12 * E(7, 2)) - 12 * E(7)) // 7, (((-12 * E(7, 6) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7)) // 7, (6 * E(7, 6) + 12 * E(7, 4) + 12 * E(7, 3) + 6 * E(7)) // 7, (((-12 * E(7, 5) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7, 2)) // 7, (12 * E(7, 6) + 6 * E(7, 5) + 6 * E(7, 2) + 12 * E(7)) // 7, (12 * E(7, 5) + 6 * E(7, 4) + 6 * E(7, 3) + 12 * E(7, 2)) // 7], [6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, -6 // 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6 // 7, (12 * E(7, 5) + 6 * E(7, 4) + 6 * E(7, 3) + 12 * E(7, 2)) // 7, (12 * E(7, 6) + 6 * E(7, 5) + 6 * E(7, 2) + 12 * E(7)) // 7, (((-12 * E(7, 5) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7, 2)) // 7, (6 * E(7, 6) + 12 * E(7, 4) + 12 * E(7, 3) + 6 * E(7)) // 7, (((-12 * E(7, 6) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7)) // 7, (((-12 * E(7, 6) - 12 * E(7, 5)) - 12 * E(7, 2)) - 12 * E(7)) // 7], [6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, -6 // 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6 // 7, (((-12 * E(7, 5) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7, 2)) // 7, (((-12 * E(7, 6) - 12 * E(7, 5)) - 12 * E(7, 2)) - 12 * E(7)) // 7, (12 * E(7, 6) + 6 * E(7, 5) + 6 * E(7, 2) + 12 * E(7)) // 7, (((-12 * E(7, 6) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7)) // 7, (12 * E(7, 5) + 6 * E(7, 4) + 6 * E(7, 3) + 12 * E(7, 2)) // 7, (6 * E(7, 6) + 12 * E(7, 4) + 12 * E(7, 3) + 6 * E(7)) // 7], [6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, 6 // 7, -6 // 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6 // 7, (((-12 * E(7, 6) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7)) // 7, (((-12 * E(7, 5) - 12 * E(7, 4)) - 12 * E(7, 3)) - 12 * E(7, 2)) // 7, (12 * E(7, 5) + 6 * E(7, 4) + 6 * E(7, 3) + 12 * E(7, 2)) // 7, (((-12 * E(7, 6) - 12 * E(7, 5)) - 12 * E(7, 2)) - 12 * E(7)) // 7, (6 * E(7, 6) + 12 * E(7, 4) + 12 * E(7, 3) + 6 * E(7)) // 7, (12 * E(7, 6) + 6 * E(7, 5) + 6 * E(7, 2) + 12 * E(7)) // 7]] // 6, :special => 1)
chevieset(:G34, :UnipotentCharacters, function ()
        local J, r, cuspidal
        J = E(3)
        r = ER(-3)
        cuspidal = function (arg...,)
                local res, n
                n = "G_{34}"
                if length(arg) > 2 && IsInt(arg[3])
                    n *= SPrint("^", arg[3])
                end
                n *= SPrint("[", FormatTeX(arg[2]), "]")
                res = Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:6, :parameterExponents => [], :charNumbers => [arg[1]], :eigenvalue => arg[2], :cuspidalName => n)
                if length(arg) > 2 && !(IsInt(arg[length(arg)]))
                    res[:qEigen] = arg[length(arg)]
                end
                return res
            end
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:6, :rank => 6, :ST => 34), :levi => [], :parameterExponents => [1, 1, 1, 1, 1, 1], :charNumbers => 1:169, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [6, 5, 1], :rank => 3, :ST => 26), :levi => 2:4, :parameterExponents => [1, 3, 3], :charNumbers => [170, 171, 340, 341, 325, 324, 342, 326, 220, 185, 219, 186, 216, 274, 249, 226, 184, 173, 334, 332, 251, 225, 183, 174, 335, 333, 232, 253, 299, 310, 189, 208, 231, 255, 298, 309, 190, 209, 197, 198, 280, 281, 282, 279, 245, 224, 247, 223], :eigenvalue => J, :cuspidalName => "G_{3,3,3}[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [6, 5, 1], :rank => 3, :ST => 26), :levi => 2:4, :parameterExponents => [1, [3, 3, 0], [3, 3, 0]], :charNumbers => [176, 191, 348, 192, 347, 175, 331, 300, 193, 177, 330, 301, 244, 302, 187, 181, 278, 252, 338, 337, 339, 336, 188, 182, 277, 250, 311, 322, 256, 284, 207, 218, 206, 217, 312, 323, 254, 283, 227, 230, 314, 315, 228, 229, 276, 248, 275, 246], :eigenvalue => J ^ 2, :cuspidalName => "G_{3,3,3}[\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [4, 6], :rank => 2, :p => 6, :q => 1), :levi => [1, 2, 3, 348], :parameterExponents => [[5, 4, 1, 0, 1, 4], 4], :charNumbers => [235, 194, 236, 273, 237, 195, 286, 259, 289, 257, 205, 343, 328, 313, 258, 346, 327, 288, 344, 260, 285, 172, 179, 233, 287, 234, 178], :eigenvalue => -1, :cuspidalName => "D_4"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [6], :rank => 1, :p => 6, :q => 1), :levi => 1:5, :parameterExponents => [[5, 0, 7, 2, 7, 0]], :charNumbers => [221, 317, 199, 296, 200, 316], :eigenvalue => E(4), :cuspidalName => "G_{33}[i]", :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [6], :rank => 1, :p => 6, :q => 1), :levi => 1:5, :parameterExponents => [[5, 0, 7, 2, 7, 0]], :charNumbers => [222, 319, 201, 297, 202, 318], :eigenvalue => -(E(4)), :qEigen => 1 // 2, :cuspidalName => "G_{33}[-i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [6], :rank => 1, :p => 6, :q => 1), :levi => 1:5, :parameterExponents => [[3, 8, 7, 0, 7, 8]], :charNumbers => [329, 238, 261, 345, 263, 239], :eigenvalue => -J, :cuspidalName => "G_{33}[-\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [6], :rank => 1, :p => 6, :q => 1), :levi => 1:5, :parameterExponents => [[8, 1, 0, 5, 0, 1]], :charNumbers => [180, 262, 291, 196, 290, 264], :eigenvalue => -(J ^ 2), :cuspidalName => "G_{33}[-\\zeta_3^2]"), cuspidal(265, 1), cuspidal(266, -1), cuspidal(294, J), cuspidal(295, J, 2), cuspidal(242, J ^ 2), cuspidal(243, J ^ 2, 2), cuspidal(292, -J), cuspidal(293, -J, 2), cuspidal(240, -(J ^ 2)), cuspidal(241, -(J ^ 2), 2), cuspidal(267, E(7)), cuspidal(268, E(7, 2)), cuspidal(269, E(7, 3)), cuspidal(270, E(7, 4)), cuspidal(271, E(7, 5)), cuspidal(272, E(7, 6)), cuspidal(212, E(9), 1 // 3), cuspidal(214, E(9), 2, 2 // 3), cuspidal(307, E(9, 2), 2 // 3), cuspidal(303, E(9, 2), 2, 1 // 3), cuspidal(210, E(9, 4), 1 // 3), cuspidal(215, E(9, 4), 2, 2 // 3), cuspidal(304, E(9, 5), 2 // 3), cuspidal(305, E(9, 5), 2, 1 // 3), cuspidal(211, E(9, 7), 2 // 3), cuspidal(213, E(9, 7), 2, 1 // 3), cuspidal(306, E(9, 8), 1 // 3), cuspidal(308, E(9, 8), 2, 2 // 3), cuspidal(203, E(12, 7), 1 // 2), cuspidal(320, E(12, 11), 1 // 2), cuspidal(204, E(12), 1 // 2), cuspidal(321, E(12, 5), 1 // 2)], :families => [Family("C1", [1]), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [5, 3, 170], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 2)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [17, 15, 171], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1)), Family("C2", [24, 14, 20, 172], Dict{Symbol, Any}(:ennola => 1)), Family(((CHEVIE[:families])[:X])(3) * ComplexConjugate(Family("X5")), [42, 55, 178, 174, 8, 10, 53, 179, 173, 46, 176, 177, 180, 37, 175], Dict{Symbol, Any}(:signs => [1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1], :ennola => 10)), Family(((CHEVIE[:families])[:QZ])(3), [26, 59, 57, 31, 183, 181, 32, 182, 184], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, 1, -1, -1, 1], :special => 3, :cospecial => 2, :ennola => 6)), Family(((CHEVIE[:families])[:QZ])(3), [81, 68, 71, 45, 185, 188, 39, 187, 186], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, -1, -1], :ennola => 1)), Family(((CHEVIE[:families])[:X])(3) * ComplexConjugate(Family("X5")), [109, 89, 194, 190, 35, 33, 91, 195, 189, 107, 192, 193, 196, 116, 191], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1], :ennola => 6)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)) * Family("C'\"2"), [103, 96, 199, 201, 101, 98, 200, 202, 198, 197, 203, 204], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1], :ennola => 7)), Family("C1", [28]), Family("C2", [124, 63, 105, 205], Dict{Symbol, Any}(:ennola => 1)), Family(((CHEVIE[:families])[:QZ])(3), [22, 86, 84, 79, 208, 206, 78, 207, 209], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, 1, -1, -1, 1], :special => 3, :cospecial => 2, :ennola => 3)), Family(ComplexConjugate(Family("Z9")), [141, 215, 213, 145, 214, 212, 143, 211, 210], Dict{Symbol, Any}(:special => 7, :cospecial => 1, :ennola => 1)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [134, 136, 216], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 2)), Family(((CHEVIE[:families])[:QZ])(3), [129, 156, 154, 72, 219, 217, 74, 218, 220], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, 1, 1, -1, -1, -1], :special => 3, :cospecial => 2, :ennola => 5)), Family("C1", [67]), Family("C'\"2", [159, 161, 221, 222], Dict{Symbol, Any}(:ennola => 1)), Family(((CHEVIE[:families])[:QZ])(6), [65, 94, 148, 118, 146, 92, 49, 241, 225, 234, 227, 238, 162, 232, 243, 152, 224, 229, 83, 237, 113, 235, 111, 236, 164, 230, 223, 150, 242, 231, 47, 239, 228, 233, 226, 240], Dict{Symbol, Any}(:signs => [1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1], :special => 16, :cospecial => 28, :ennola => 8)), Family(((CHEVIE[:families])[:X])(3), [132, 130, 244], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1)), Family("F42", [169, 265, 122, 121, 12, 11, 52, 166, 119, 249, 245, 252, 248, 139, 257, 253, 261, 256, 264, 138, 258, 254, 262, 255, 263, 168, 266, 127, 259, 126, 260, 167, 120, 250, 246, 251, 247, 51, 267, 268, 269, 270, 271, 272], Dict{Symbol, Any}(:signs => [1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1], :ennola => 2)), Family("C2", [125, 61, 106, 273]), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [133, 131, 274], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1)), Family(((CHEVIE[:families])[:QZ])(6), [117, 149, 93, 64, 95, 147, 50, 290, 279, 286, 277, 293, 151, 295, 284, 163, 281, 276, 82, 288, 112, 287, 114, 289, 153, 275, 282, 165, 283, 294, 48, 292, 278, 285, 280, 291], Dict{Symbol, Any}(:signs => [1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1], :special => 13, :cospecial => 25, :ennola => 12)), Family("C'\"2", [160, 158, 296, 297], Dict{Symbol, Any}(:ennola => 1)), Family("C1", [66]), Family(((CHEVIE[:families])[:QZ])(3), [128, 73, 75, 157, 298, 301, 155, 300, 299], Dict{Symbol, Any}(:signs => [1, -1, -1, 1, 1, -1, 1, 1, -1], :special => 4, :cospecial => 7, :ennola => 3)), Family(((CHEVIE[:families])[:X])(3), [137, 135, 302], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 2)), Family("Z9", [140, 304, 303, 144, 308, 306, 142, 307, 305], Dict{Symbol, Any}(:special => 1, :cospecial => 4, :ennola => 2)), Family(((CHEVIE[:families])[:QZ])(3), [21, 77, 76, 85, 309, 312, 87, 311, 310], Dict{Symbol, Any}(:signs => [1, -1, -1, 1, 1, 1, 1, -1, -1], :special => 4, :cospecial => 7, :ennola => 4)), Family("C2", [123, 62, 104, 313], Dict{Symbol, Any}(:ennola => 1)), Family("C1", [27]), Family(((CHEVIE[:families])[:X])(3) * Family("C'\"2"), [97, 102, 316, 318, 99, 100, 317, 319, 315, 314, 320, 321], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1], :ennola => -5)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)) * Family("X5"), [108, 88, 327, 323, 34, 36, 90, 328, 322, 110, 325, 326, 329, 115, 324], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1], :ennola => 6)), Family(((CHEVIE[:families])[:QZ])(3), [80, 69, 70, 41, 332, 331, 44, 330, 333], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, -1, -1, 1, 1, 1], :ennola => 1)), Family(((CHEVIE[:families])[:QZ])(3), [25, 30, 29, 58, 334, 337, 60, 336, 335], Dict{Symbol, Any}(:signs => [1, -1, -1, 1, 1, 1, 1, -1, -1], :special => 4, :cospecial => 7, :ennola => 5)), Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)) * Family("X5"), [40, 56, 343, 339, 7, 9, 54, 344, 338, 43, 341, 342, 345, 38, 340], Dict{Symbol, Any}(:signs => [1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1], :ennola => 10)), Family("C2", [23, 13, 19, 346], Dict{Symbol, Any}(:ennola => 1)), Family(((CHEVIE[:families])[:X])(3), [18, 16, 347], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 1)), Family(((CHEVIE[:families])[:X])(3), [6, 4, 348], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 2)), Family("C1", [2])], :a => [0, 126, 1, 85, 1, 85, 46, 4, 46, 4, 15, 15, 57, 3, 2, 68, 2, 68, 57, 3, 28, 10, 57, 3, 41, 5, 45, 9, 41, 41, 5, 5, 7, 31, 7, 31, 4, 46, 6, 46, 36, 4, 46, 36, 6, 4, 13, 19, 13, 19, 15, 15, 4, 46, 4, 46, 5, 41, 5, 41, 18, 27, 9, 19, 13, 30, 12, 6, 36, 36, 6, 11, 23, 11, 23, 28, 28, 10, 10, 36, 6, 19, 13, 10, 28, 10, 28, 31, 7, 31, 7, 13, 19, 13, 19, 8, 29, 8, 29, 29, 8, 29, 8, 27, 9, 18, 7, 31, 7, 31, 13, 19, 13, 19, 31, 7, 19, 13, 15, 15, 15, 15, 27, 9, 18, 15, 15, 23, 11, 14, 20, 14, 20, 11, 23, 11, 23, 15, 15, 24, 10, 24, 10, 24, 10, 13, 19, 13, 19, 13, 19, 13, 19, 11, 23, 11, 23, 21, 12, 21, 12, 13, 19, 13, 19, 15, 15, 15, 15, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 21, 21, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 28, 28, 28, 28, 27, 29, 29, 29, 29, 29, 29, 29, 29, 31, 31, 31, 31, 31, 31, 31, 31, 36, 36, 36, 36, 41, 41, 41, 41, 46, 46, 46, 46, 46, 46, 46, 46, 57, 68, 85], :A => [0, 126, 41, 125, 41, 125, 122, 80, 122, 80, 111, 111, 123, 69, 58, 124, 58, 124, 123, 69, 116, 98, 123, 69, 121, 85, 117, 81, 121, 121, 85, 85, 95, 119, 95, 119, 80, 122, 90, 122, 120, 80, 122, 120, 90, 80, 107, 113, 107, 113, 111, 111, 80, 122, 80, 122, 85, 121, 85, 121, 108, 117, 99, 113, 107, 114, 96, 90, 120, 120, 90, 103, 115, 103, 115, 116, 116, 98, 98, 120, 90, 113, 107, 98, 116, 98, 116, 119, 95, 119, 95, 107, 113, 107, 113, 97, 118, 97, 118, 118, 97, 118, 97, 117, 99, 108, 95, 119, 95, 119, 107, 113, 107, 113, 119, 95, 113, 107, 111, 111, 111, 111, 117, 99, 108, 111, 111, 115, 103, 106, 112, 106, 112, 103, 115, 103, 115, 111, 111, 116, 102, 116, 102, 116, 102, 107, 113, 107, 113, 107, 113, 107, 113, 103, 115, 103, 115, 114, 105, 114, 105, 107, 113, 107, 113, 111, 111, 111, 111, 41, 58, 69, 80, 80, 80, 80, 80, 80, 80, 80, 85, 85, 85, 85, 90, 90, 90, 90, 95, 95, 95, 95, 95, 95, 95, 95, 97, 97, 97, 97, 97, 97, 97, 97, 99, 98, 98, 98, 98, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 105, 105, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 106, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 112, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 114, 114, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 117, 118, 118, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 123, 124, 125])
    end)
chevieset(:G34, :Invariants, function ()
        local r
        r = (ComplexReflectionGroup(34))[:roots]
        return [function (x, y, z, t, u, v)
                    return Sum(r, (a->begin
                                        ([x, y, z, t, u, v] * a) ^ 6
                                    end)) // 1944
                end, function (x, y, z, t, u, v)
                    return Sum(r, (a->begin
                                        ([x, y, z, t, u, v] * a) ^ 12
                                    end)) // 3888
                end, function (x, y, z, t, u, v)
                    return Sum(r, (a->begin
                                        ([x, y, z, t, u, v] * a) ^ 18
                                    end)) // 1944
                end, function (x, y, z, t, u, v)
                    return Sum(r, (a->begin
                                        ([x, y, z, t, u, v] * a) ^ 24
                                    end)) // 7776
                end, function (x, y, z, t, u, v)
                    return Sum(r, (a->begin
                                        ([x, y, z, t, u, v] * a) ^ 30
                                    end)) // 1944
                end, function (x, y, z, t, u, v)
                    return Sum(r, (a->begin
                                        ([x, y, z, t, u, v] * a) ^ 42
                                    end)) // 1944
                end]
    end)
chevieset(:imp, :PrintDiagram, function (arg...,)
        local p, q, r, indices, j, indent, title, g
        p = arg[1]
        q = arg[2]
        r = arg[3]
        indices = arg[4]
        title = arg[5]
        print(title, " ")
        indent = length(title) + 1
        g = (i->begin
                    pad("", indent - i)
                end)
        if q == 1
            print(indices[1], "(", p, ")")
            if length(indices) > 1
                print("===")
            end
            print(Join(indices[2:length(indices)], "--"), "\n")
        elseif p == q
            print(indices[1], "\n", g(0), "|\\\n")
            if p != 3
                print(pad(p, indent))
            else
                print(g(0))
            end
            print("|==", indices[3])
            for j = 4:r
                print(" - ", indices[j])
            end
            print("\n")
            print(g(0), "|/\n", g(0), indices[2], "\n")
        elseif q == 2
            print(indices[2], "\n", g(2), "/3|")
            if r >= 3
                print("\\")
            end
            print("\n")
            if p // q > 2
                print(g(length(string(p // q)) + 5), "(", p // q, ")")
            else
                print(g(3))
            end
            print(indices[1], "  | ")
            for j = 3:r
                print(indices[j + 1])
                if j != r
                    print("-")
                end
            end
            print("\n", g(2), "\\ |")
            if r >= 3
                print("/")
            end
            print("\n", pad(indices[3], indent + 1), "   ", IntListToString(indices[[1, 2, 3]]), "==", IntListToString(indices[[2, 3, 1]]), "==", IntListToString(indices[[3, 1, 2]]), "\n")
        else
            print(indices[2], "\n", g(2), "/", q + 1, " ")
            if r >= 3
                print("\\")
            end
            print("\n")
            if p // q > 2
                print(g(length(SPrint(p // q)) + 5), "(", p // q, ")")
            else
                print(g(3))
            end
            print(indices[1], "   ")
            if r >= 3
                print("==")
            end
            for j = 3:r
                print(indices[j + 1])
                if j != r
                    print("-")
                end
            end
            print("\n", g(2), "\\  ")
            if r >= 3
                print("/")
            end
            print("\n", pad(indices[3], indent + 1))
            j = (chevieget(:imp, :BraidRelations))(p, q, r)
            for g = 1:Minimum(3, r)
                print("   ", IntListToString(indices[(j[g])[1]]), "==", IntListToString(indices[(j[g])[2]]))
            end
            print("\n")
        end
    end)
chevieset(:imp, :SemisimpleRank, function (p, q, r)
        return r
    end)
chevieset(:imp, :BraidRelations, function (p, q, r)
        local i, b, res
        b = function (i, j, o)
                local p
                p = function (i, j)
                        return map((k->begin
                                        i * mod(k, 2) + j * mod(1 - k, 2)
                                    end), 1:o)
                    end
                return [p(i, j), p(j, i)]
            end
        res = []
        if q == 1
            if r >= 2
                if p == 1
                    push!(res, b(1, 2, 3))
                else
                    push!(res, b(1, 2, 4))
                end
            end
            res = Append(res, map((i->begin
                                b(i, i - 1, 3)
                            end), 3:r))
            for i = 3:r
                res = Append(res, map((j->begin
                                    b(i, j, 2)
                                end), 1:i - 2))
            end
        elseif p == q
            push!(res, b(1, 2, p))
            if r >= 3
                res = Append(res, [[[1, 2, 3, 1, 2, 3], [3, 1, 2, 3, 1, 2]], b(1, 3, 3), b(2, 3, 3)])
            end
            res = Append(res, map((i->begin
                                b(i, i - 1, 3)
                            end), 4:r))
            for i = 4:r
                res = Append(res, map((j->begin
                                    b(i, j, 2)
                                end), 1:i - 2))
            end
        else
            push!(res, [[1, 2, 3], [2, 3, 1]])
            i = b(2, 3, q - 1)
            push!(res, [Concatenation([1, 2], i[2]), Concatenation([3, 1], i[1])])
            if r >= 3
                if q != 2
                    push!(res, [[2, 3, 4, 2, 3, 4], [4, 2, 3, 4, 2, 3]])
                end
                res = Append(res, [b(2, 4, 3), b(3, 4, 3), b(1, 4, 2)])
            end
            res = Append(res, map((i->begin
                                b(i, i - 1, 3)
                            end), 5:r + 1))
            for i = 5:r + 1
                res = Append(res, map((j->begin
                                    b(i, j, 2)
                                end), 1:i - 2))
            end
        end
        return res
    end)
chevieset(:imp, :Size, function (p, q, r)
        return (p ^ r * factorial(r)) // q
    end)
chevieset(:imp, :ReflectionName, function (arg...,)
        local n, option
        option = arg[4]
        if arg[3] == 1 && arg[2] == 1
            if haskey(option, :TeX)
                return SPrint("Z_{", arg[1], "}")
            else
                return SPrint("Z", arg[1])
            end
        end
        if haskey(option, :TeX)
            n = SPrint("G_{", Join(arg[1:3]), "}")
        else
            n = SPrint("G", IntListToString(arg[1:3]))
        end
        if length(arg) == 5
            n *= SPrint("(", Format(arg[4], option), ")")
        end
        return n
    end)
chevieset(:imp, :GeneratingRoots, function (p, q, r)
        local roots, v, i
        if q == 1
            roots = [Concatenation([1], fill(0, max(0, (1 + r) - 2)))]
        else
            if q != p
                roots = [Concatenation([1], fill(0, max(0, (1 + r) - 2)))]
            end
            v = Concatenation([-(E(p)), 1], fill(0, max(0, (1 + r) - 3)))
            if r == 2 && (q > 1 && mod(q, 2) == 1)
                v = v * E(p)
            end
            if q == p
                roots = [v]
            else
                push!(roots, v)
            end
        end
        for i = 2:r
            v = fill(0, max(0, (1 + r) - 1))
            v[i] = 1
            v[i - 1] = -1
            push!(roots, v)
        end
        return roots
    end)
chevieset(:imp, :EigenvaluesGeneratingReflections, function (p, q, r)
        local res
        res = fill(0, max(0, (1 + r) - 1)) + 1 // 2
        if q == 1
            res[1] = 1 // p
        elseif q != p
            res = Concatenation([q // p], res)
        end
        return res
    end)
chevieset(:imp, :CartanMat, function (p, q, r)
        local rt, rbar, e
        rt = (chevieget(:imp, :GeneratingRoots))(p, q, r)
        rbar = ComplexConjugate(rt)
        e = (chevieget(:imp, :EigenvaluesGeneratingReflections))(p, q, r)
        e = 1 - map((x->begin
                            E(denominator(x), numerator(x))
                        end), e)
        e = map((i->begin
                        (e[i] * rbar[i]) // (rbar[i] * rt[i])
                    end), 1:length(e))
        return map((x->begin
                        map((y->begin
                                    x * y
                                end), rt)
                    end), e)
    end)
chevieset(:imp, :ReflectionDegrees, function (p, q, r)
        return Concatenation(p * (1:r - 1), [(r * p) // q])
    end)
chevieset(:imp, :ReflectionCoDegrees, function (p, q, r)
        local res
        res = p * (0:r - 1)
        if p == q && (p >= 2 && r > 2)
            res[r] = res[r] - r
        end
        return res
    end)
chevieset(:imp, :ParabolicRepresentatives, function (p, q, r, s)
        local t
        if q == 1
            if p == 1
                if s == 0
                    return [[]]
                end
                return map((j->begin
                                Concatenation(map((k->begin
                                                ((Sum(j[1:k - 1]) + k) - 1) + (1:j[k])
                                            end), 1:length(j)))
                            end), Concatenation(map((i->begin
                                        Partitions(s, i)
                                    end), 1:(r + 1) - s)))
            else
                return Concatenation(map((i->begin
                                    map((j->begin
                                                Concatenation(1:i, i + 1 + j)
                                            end), (chevieget(:imp, :ParabolicRepresentatives))(1, 1, (r - i) - 1, s - i))
                                end), 0:s))
            end
        elseif r == 2
            if q == 2
                t = [[[]], [[1], [2], [3]], [1:3]]
                return t[s + 1]
            elseif p == q
                if mod(p, 2) == 0
                    t = [[[]], [[1], [2]], [[1, 2]]]
                    return t[s + 1]
                else
                    t = [[], [1], [1, 2]]
                    return t[s + 1]
                end
            else
                return false
            end
        else
            return false
        end
    end)
chevieset(:imp, :NrConjugacyClasses, function (p, q, r)
        if [q, r] == [2, 2]
            return (p * (p + 6)) // 4
        elseif q == 1
            return NrPartitionTuples(r, p)
        else
            return length(((chevieget(:imp, :ClassInfo))(p, q, r))[:classtext])
        end
    end)
chevieset(:imp, :ClassInfo, function (p, q, r)
        local res, times, trans, I, i, j, a, S
        times = function (e, o)
                return Concatenation(map((x->begin
                                    o
                                end), 1:e))
            end
        if [q, r] == [2, 2] && !(haskey(CHEVIE, :othermethod))
            res = Dict{Symbol, Any}(:classtext => [], :classparams => [], :classnames => [])
            for i = 0:p - 1
                for j = 0:div((p - i) - 1, 2)
                    push!(res[:classparams], Concatenation(fill(0, max(0, (1 + j) - 1)) + 1, fill(0, max(0, (1 + i) - 1))))
                    push!(res[:classtext], Concatenation(fill(0, max(0, (1 + j) - 1)) + 1, times(i, [1, 2, 3])))
                    push!(res[:classnames], string(Concatenation(times(j, "1"), times(i, "z"))))
                end
            end
            for j = [2, 3]
                for i = 0:p // 2 - 1
                    push!(res[:classparams], Concatenation([j], fill(0, max(0, (1 + i) - 1))))
                    push!(res[:classtext], Concatenation([j], times(i, [1, 2, 3])))
                    push!(res[:classnames], string(Concatenation(string(j), times(i, "z"))))
                end
            end
            res[:malle] = []
            for a = 0:p - 1
                res[:malle] = Append(res[:malle], map((m->begin
                                    [3, a, m]
                                end), 0:div((p - a) - 1, 2)))
            end
            res[:malle] = Append(res[:malle], map((m->begin
                                [1, m]
                            end), 0:p // 2 - 1))
            res[:malle] = Append(res[:malle], map((m->begin
                                [2, m]
                            end), 0:p // 2 - 1))
            res[:orders] = map(function (c,)
                        if length(c) > 0 && c[1] in [2, 3]
                            return Lcm(2, p // gcd(count((x->begin
                                                        x == 0
                                                    end), c), p))
                        else
                            return Lcm(p // gcd(count((x->begin
                                                        x == 0
                                                    end), c), p), (p // 2) // gcd(count((x->begin
                                                        x == 1
                                                    end), c), p // 2))
                        end
                    end, res[:classparams])
            res[:classes] = map(function (c,)
                        if length(c) > 0 && c[1] in [2, 3]
                            return p // q
                        elseif 1 in c
                            return 2
                        else
                            return 1
                        end
                    end, res[:classparams])
            return res
        elseif q == 1
            res = Dict{Symbol, Any}(:classparams => PartitionTuples(r, p))
            res[:classtext] = map(function (S,)
                        local l, w, d
                        S = Concatenation(map((i->begin
                                            map((t->begin
                                                        [t, i - 1]
                                                    end), S[i])
                                        end), 1:p))
                        SortBy(S, (a->begin
                                    [a[1], -(a[2])]
                                end))
                        l = 0
                        w = []
                        for d = S
                            w = Append(w, times(d[2], Concatenation(l + 1:l - (l + 1):2, 1:l + 1)))
                            w = Append(w, l + 2:l + d[1])
                            l = l + d[1]
                        end
                        return w
                    end, res[:classparams])
            res[:classnames] = map(chevieget(:imp, :ClassName), res[:classparams])
            res[:orders] = map((m->begin
                            Lcm(map(function (i,)
                                        if length(m[i]) == 0
                                            return 1
                                        else
                                            return Lcm((m[i] * p) // gcd(i - 1, p))
                                        end
                                    end, 1:length(m)))
                        end), res[:classparams])
            res[:centralizers] = map((m->begin
                            p ^ Sum(m, length) * Product(map((pp->begin
                                                Product(Collected(pp), (y->begin
                                                            factorial(y[2]) * y[1] ^ y[2]
                                                        end))
                                            end), m))
                        end), res[:classparams])
            res[:classes] = map((x->begin
                            (p ^ r * factorial(r)) // x
                        end), res[:centralizers])
            return res
        else
            trans = function (w,)
                    local d, res, l, i, add, word
                    d = 0
                    res = []
                    word = function (l, i)
                            return map((j->begin
                                            1 + mod(j, 2)
                                        end), i + (l:(l - 1) - l:1))
                        end
                    add = function (a,)
                            local l
                            l = length(res)
                            if l > 0 && res[l] == a
                                res = res[1:l - 1]
                            elseif p == q && (a in [1, 2] && (l >= q && res[(l - q) + 1:l] == word(q, 3 - a)))
                                res = Concatenation(res[1:l - q], word(q - 1, 3 - a))
                            else
                                push!(res, a)
                            end
                        end
                    for l = w
                        if l == 1
                            d = d + 1
                        elseif l != 2
                            add(l)
                        else
                            d = mod(d, p)
                            if d == 0
                                add(2)
                            else
                                for i = 1:(p - d) - 1
                                    add(1)
                                    add(2)
                                end
                                add(1)
                            end
                        end
                    end
                    d = mod(d, p)
                    if mod(d, q) != 0
                        error()
                    elseif d != 0
                        res = Concatenation(1 + res, fill(0, max(0, (1 + d // q) - 1)) + 1)
                    elseif p != q
                        res = 1 + res
                    end
                    return res
                end
            I = (chevieget(:imp, :ClassInfo))(p, 1, r)
            res = Dict{Symbol, Any}(:classtext => [], :classparams => [], :classnames => [], :orders => [], :centralizers => [])
            for i = Filtered(1:length(I[:classparams]), (i->begin
                                mod(map(length, (I[:classparams])[i]) * (0:p - 1), q) == 0
                            end))
                S = (I[:classparams])[i]
                a = Concatenation(S)
                push!(a, q)
                a = Append(a, Filtered(1:p, (j->begin
                                        length(S[j]) != 0
                                    end)) - 1)
                a = ApplyFunc(gcd, a)
                for j = 0:a - 1
                    push!(res[:classtext], trans(Concatenation(fill(0, max(0, (1 + j) - 1)) + 1, (I[:classtext])[i], fill(0, max(0, (1 + (p - j)) - 1)) + 1)))
                    if a > 1
                        push!(res[:classparams], Concatenation(S, [(p * j) // a]))
                    else
                        push!(res[:classparams], S)
                    end
                    push!(res[:orders], (I[:orders])[i])
                    push!(res[:centralizers], ((I[:centralizers])[i] * a) // q)
                end
            end
            res[:classes] = map((x->begin
                            (res[:centralizers])[1] // x
                        end), res[:centralizers])
            res[:classnames] = map(chevieget(:imp, :ClassName), res[:classparams])
            return res
        end
    end)
chevieset(:imp, :ClassName, function (p,)
        local j, p1
        if IsList(p) && ForAll(p, IsList)
            if Sum(p, Sum) == 1
                return FormatTeX(E(length(p), Position(p, [1]) - 1))
            else
                return PartitionTupleToString(p)
            end
        elseif IsList(p) && ForAll(p, IsInt)
            return IntListToString(p)
        elseif IsList(p) && (ForAll(p[1:length(p) - 1], IsList) && IsInt(p[length(p)]))
            p1 = p[1:length(p) - 1]
            p1 = Append(p1, [length(p1), p[length(p)]])
            return PartitionTupleToString(p1)
        else
            error()
        end
    end)
chevieset(:imp, :PowerMaps, function (p, q, r)
        local pow, pp, pw, res
        if q == 1
            pow = function (p, n)
                    local e, res, k, l, g, j
                    e = length(p)
                    res = map((x->begin
                                    []
                                end), 1:e)
                    for k = 1:e
                        for l = p[k]
                            g = gcd(n, l)
                            for j = 1:g
                                push!(res[1 + mod(div(n * (k - 1), g), e)], l // g)
                            end
                        end
                    end
                    for k = 1:e
                        Sort(res[k])
                        res[k] = reverse(res[k])
                    end
                    return res
                end
            pp = ((chevieget(:imp, :ClassInfo))(p, q, r))[:classparams]
            res = []
            for pw = gapSet(Factors(factorial(r) * p))
                res[pw] = map((x->begin
                                Position(pp, pow(x, pw))
                            end), pp)
            end
            return res
        else
            InfoChevie("# PowerMaps  !  implemented for G(", p, ",", q, ",", r, ")\n")
            return false
        end
    end)
chevieset(:imp, :CharInfo, function (de, e, r)
        local d, ct, res, t, tt, s, fd
        res = Dict{Symbol, Any}()
        d = div(de, e)
        if e == 1
            res[:charparams] = PartitionTuples(r, de)
            s = fill(0, max(0, (1 + d) - 1))
            s[1] = 1
            res[:charSymbols] = map((x->begin
                            SymbolPartitionTuple(x, s)
                        end), res[:charparams])
        else
            res[:charparams] = []
            for t = PartitionTuples(r, de)
                tt = map((i->begin
                                circshift(t, i)
                            end), (1:e) * d)
                if t == Minimum(tt)
                    s = Position(tt, t)
                    if s == e
                        push!(res[:charparams], t)
                    else
                        t = t[1:s * d]
                        s = e // s
                        res[:charparams] = Append(res[:charparams], map((i->begin
                                            Concatenation(t, [s, i])
                                        end), 0:s - 1))
                    end
                end
            end
            if d == 1
                res[:charSymbols] = map((x->begin
                                SymbolPartitionTuple(x, 0)
                            end), res[:charparams])
            end
            if d > 1 && (mod(e, 2) == 0 && r == 2)
                res[:malle] = map(function (t,)
                            local pos, de
                            if IsInt(t[length(t)])
                                if t[length(t)] == 0
                                    return [1, 2, 1, Position(t, [1])]
                                else
                                    return [1, 1, 2, Position(t, [1])]
                                end
                            else
                                de = length(t) // 2
                                pos = Filtered(1:length(t), (i->begin
                                                length(t[i]) > 0
                                            end))
                                if length(pos) == 1
                                    if t[pos[1]] == [2]
                                        return [1, 1, 1, pos[1] - de]
                                    else
                                        return [1, 2, 2, pos[1] - de]
                                    end
                                elseif pos[1] <= de
                                    return [2, -1, pos[1], pos[2] - de]
                                else
                                    return [2, 1, pos[2] - de, pos[1] - de]
                                end
                            end
                        end, res[:charparams])
            elseif [de, e, r] == [3, 3, 3]
                res[:malle] = [[2, 3, 2], [2, 3, 3], [2, 3, 1], [3, 4], [3, 5], [1, 9], [3, 2], [3, 1], [2, 3, 4], [1, 0]]
            elseif [de, e, r] == [3, 3, 4]
                res[:malle] = [[12, 6], [4, 10], [6, 8], [4, 11], [1, 18], [12, 3], [6, 5, 2], [8, 4], [8, 5], [6, 5, 1], [3, 9], [6, 2], [2, 6], [4, 2], [4, 1], [3, 3], [1, 0]]
            elseif [de, e, r] == [3, 3, 5]
                res[:malle] = [[30, 10], [20, 12], [5, 19], [10, 14], [10, 15], [5, 20], [1, 30], [30, 7, 1], [40, 6], [30, 7, 2], [10, 11], [15, 10], [20, 9], [20, 8], [15, 11], [10, 12], [4, 18], [30, 4], [20, 5], [10, 8], [10, 7], [20, 6], [5, 12], [20, 3], [10, 6], [15, 4], [15, 5], [10, 5], [6, 9], [10, 3], [10, 2], [5, 6], [5, 2], [5, 1], [4, 3], [1, 0]]
            elseif [de, e, r] == [4, 4, 3]
                res[:malle] = [[6, 3], [3, 6, 1], [3, 5], [3, 6, 2], [1, 12], [3, 2, 1], [3, 2, 2], [3, 1], [2, 4], [1, 0]]
            end
        end
        t = map(function (i,)
                    local v
                    v = map((x->begin
                                    []
                                end), 1:de)
                    if i > 0
                        v[1] = [i]
                    end
                    v[2] = fill(0, max(0, (1 + (r - i)) - 1)) + 1
                    return v
                end, r:(r - 1) - r:0)
        if e > 1
            t = map((v->begin
                            Minimum(map((i->begin
                                            circshift(v, i * d)
                                        end), 1:e))
                        end), t)
        end
        res[:extRefl] = map((v->begin
                        Position(res[:charparams], v)
                    end), t)
        if e == 1 || d == 1
            res[:A] = map(HighestPowerGenericDegreeSymbol, res[:charSymbols])
            res[:a] = map(LowestPowerGenericDegreeSymbol, res[:charSymbols])
            res[:B] = map(HighestPowerFakeDegreeSymbol, res[:charSymbols])
            res[:b] = map(LowestPowerFakeDegreeSymbol, res[:charSymbols])
        end
        if e > 1 && d > 1
            res[:opdam] = PermListList(res[:charparams], map(function (s,)
                            if !(IsList(s[length(s)]))
                                s = Copy(s)
                                t = div(length(s) - 2, d)
                                s[(0:t - 1) * d + 1] = circshift(s[(0:t - 1) * d + 1], 1)
                                s[1:length(s) - 2] = Minimum(map((i->begin
                                                    circshift(s[1:length(s) - 2], i * d)
                                                end), 1:t))
                                return s
                            end
                            s = copy(s)
                            s[(0:e - 1) * d + 1] = circshift(s[(0:e - 1) * d + 1], 1)
                            return Minimum(map((i->begin
                                                circshift(s, i * d)
                                            end), 1:e))
                        end, res[:charparams]))
        end
        return res
    end)
chevieset(:imp, :LowestPowerFakeDegrees, function (p, q, r)
        local ci
        if q == 1 || p == q
            error("should  !  be called")
        end
        return false
    end)
chevieset(:imp, :HighestPowerFakeDegrees, function (p, q, r)
        local ci
        if q == 1 || p == q
            error("should  !  be called")
        end
        return false
    end)
chevieset(:imp, :CharSymbols, function (p, q, r)
        local s, ss, res
        if q == 1
            return SymbolsDefect(p, r, 0, 1)
        elseif q == p
            ss = SymbolsDefect(p, r, 0, 0)
            res = []
            for s = ss
                p = Position((Rotations(s))[2:length(s)], s)
                if p == false
                    push!(res, s)
                else
                    res = Append(res, map((i->begin
                                        Concatenation(map(copy, s[1:p]), [length(s) // p, i])
                                    end), 0:length(s) // p - 1))
                end
            end
            return res
        else
            return false
        end
    end)
chevieset(:imp, :FakeDegree, function (p, q, r, c, v)
        if q == 1
            c = CycPolFakeDegreeSymbol(SymbolPartitionTuple(c, 1))
        elseif q == p
            c = CycPolFakeDegreeSymbol(SymbolPartitionTuple(c, fill(0, max(0, (1 + p) - 1))))
        else
            return false
        end
        return Value(c, v)
    end)
chevieset(:imp, :CharName, function (p, q, r, s, option)
        if RankSymbol(s) == 1
            return Format(E(length(s), Position(s, [1]) - 1), option)
        else
            return PartitionTupleToString(s, option)
        end
    end)
chevieset(:imp, :SchurModel, function (p, q, r, phi)
        local l, i, j, res, s, t, ci, GenHooks, v, h, d
        if q == 1
            GenHooks = function (l, m)
                    if length(l) == 0
                        return []
                    end
                    m = conjugate_partition(m)
                    m = Append(m, fill(0, max(0, (1 + (l[1] - length(m))) - 1)))
                    m = (1 + m) - (1:length(m))
                    return Concatenation(map((i->begin
                                        (l[i] - i) + m[1:l[i]]
                                    end), 1:length(l)))
                end
            res = Dict{Symbol, Any}(:coeff => (-1) ^ (r * (p - 1)), :factor => fill(0, max(0, (1 + p) - 1)), :vcyc => [])
            l = Concatenation(phi)
            Sort(l)
            push!(res[:factor], ((1:length(l)) - length(l)) * l)
            for s = 1:p
                for t = 1:p
                    for h = GenHooks(phi[s], phi[t])
                        v = fill(0, max(0, (1 + p) - 1))
                        if s != t
                            v[[s, t]] = [1, -1]
                            push!(v, h)
                            push!(res[:vcyc], [v, 1])
                        else
                            push!(v, 1)
                            for d = DivisorsInt(h)
                                if d > 1
                                    push!(res[:vcyc], [v, d])
                                end
                            end
                        end
                    end
                end
            end
            return res
        elseif [q, r] == [2, 2]
            ci = (chevieget(:imp, :CharInfo))(p, q, r)
            phi = (ci[:malle])[Position(ci[:charparams], phi)]
            if phi[1] == 1
                res = Dict{Symbol, Any}(:coeff => 1, :factor => fill(0, max(0, (1 + (4 + p // 2)) - 1)), :vcyc => [])
                for l = [[1, -1, 0, 0], [0, 0, 1, -1]]
                    l = Append(l, fill(0, max(0, (1 + p // 2) - 1)))
                    push!(res[:vcyc], [l, 1])
                end
                for i = 2:p // 2
                    for l = [[0, 0, 0, 0, 1], [1, -1, 1, -1, 1]]
                        l = Append(l, fill(0, max(0, (1 + (p // 2 - 1)) - 1)))
                        l[4 + i] = -1
                        push!(res[:vcyc], [l, 1])
                    end
                end
            else
                res = Dict{Symbol, Any}(:coeff => -2, :factor => fill(0, max(0, (1 + (4 + p // 2)) - 1)), :vcyc => [], :root => fill(0, max(0, (1 + (4 + p // 2)) - 1)))
                res[:rootCoeff] = E(p // 2, (2 - phi[3]) - phi[4])
                (res[:root])[1:6] = [1, 1, 1, 1, 1, 1] // 2
                for i = 3:p // 2
                    for j = [1, 2]
                        l = fill(0, max(0, (1 + (4 + p // 2)) - 1))
                        l[4 + [j, i]] = [1, -1]
                        push!(res[:vcyc], [l, 1])
                    end
                end
                if haskey(CHEVIE, :old)
                    for l = [[0, -1, 0, -1, -1, 0], [0, -1, -1, 0, -1, 0], [-1, 0, -1, 0, -1, 0], [-1, 0, 0, -1, -1, 0]]
                        l = Append(l, fill(0, max(0, (1 + (p // 2 - 2)) - 1)))
                        push!(l, 1)
                        push!(res[:vcyc], [l, 1])
                    end
                else
                    for l = [[0, -1, 0, -1, -1, 0], [0, -1, -1, 0, 0, -1], [-1, 0, -1, 0, -1, 0], [-1, 0, 0, -1, 0, -1]]
                        l = Append(l, fill(0, max(0, (1 + (p // 2 - 2)) - 1)))
                        push!(l, 1)
                        push!(res[:vcyc], [l, 1])
                    end
                end
            end
            return res
        else
            error(" !  implemented")
        end
    end)
chevieset(:imp, :SchurData, function (p, q, r, phi)
        local ci, res
        if [q, r] == [2, 2]
            ci = (chevieget(:imp, :CharInfo))(p, q, r)
            phi = (ci[:malle])[Position(ci[:charparams], phi)]
            if phi[1] == 1
                res = Dict{Symbol, Any}(:order => [phi[2], 3 - phi[2], 2 + phi[3], 5 - phi[3], 4 + phi[4]])
                res[:order] = Append(res[:order], 4 + Difference(1:p // 2, [phi[4]]))
                return res
            else
                res = Dict{Symbol, Any}(:order => [1, 2, 3, 4, 4 + phi[3], 4 + phi[4]])
                res[:order] = Append(res[:order], 4 + Difference(1:p // 2, phi[[3, 4]]))
                res[:rootPower] = phi[2] * E(p, (phi[3] + phi[4]) - 2)
                return res
            end
        else
            error(" !  implemented")
        end
    end)
chevieset(:imp, :SchurElement, function (p, q, r, phi, para, root)
        local m
        if r == 1
            return VcycSchurElement(Concatenation(para[1], [0]), ((CHEVIE[:imp])[:SchurModel])(p, q, r, phi))
        elseif p == 1
            return VcycSchurElement([0, -((para[1])[1]) // (para[1])[2]], ((CHEVIE[:imp])[:SchurModel])(p, q, r, phi))
        elseif q == 1
            return VcycSchurElement(Concatenation(para[1], [-((para[2])[1]) // (para[2])[2]]), ((CHEVIE[:imp])[:SchurModel])(p, q, r, phi))
        elseif [q, r] == [2, 2]
            return VcycSchurElement(Concatenation(para[[2, 3, 1]]), ((CHEVIE[:imp])[:SchurModel])(p, q, r, phi), ((CHEVIE[:imp])[:SchurData])(p, q, r, phi))
        elseif p == q
            if IsInt(phi[length(phi)])
                m = length(phi) - 2
                phi = FullSymbol(phi)
            else
                m = p
            end
            return ((CHEVIE[:imp])[:SchurElement])(p, 1, r, phi, Concatenation([map((i->begin
                                            E(p, i)
                                        end), 0:p - 1)], para[2:length(para)]), []) // m
        elseif para[2] == para[3]
            if IsInt(phi[length(phi)])
                m = length(phi) - 2
                phi = FullSymbol(phi)
            else
                m = p
            end
            if para[1] == map((i->begin
                                E(p // q, i - 1)
                            end), 1:p // q)
                para = [map((i->begin
                                    E(p, i)
                                end), 0:p - 1), para[2]]
            else
                para = [Concatenation(TransposedMat(map((i->begin
                                            map((j->begin
                                                            E(q, j)
                                                        end), 0:q - 1) * GetRoot(i, q)
                                        end), para[1]))), para[2]]
            end
            return (p // q * ((CHEVIE[:imp])[:SchurElement])(p, 1, r, phi, para, [])) // m
        else
            ((CHEVIE[:compat])[:InfoChevie])("# SchurElements(H(G(", p, ",", q, ",", r, "),", para, ")  !  implemented\n")
            return false
        end
    end)
chevieset(:imp, :FactorizedSchurElement, function (p, q, r, phi, para, root)
        local m, F
        if r == 1
            return VFactorSchurElement(Concatenation(para[1], [0]), ((CHEVIE[:imp])[:SchurModel])(p, q, r, phi))
        elseif p == 1
            return VFactorSchurElement([0, -((para[1])[1]) // (para[1])[2]], ((CHEVIE[:imp])[:SchurModel])(p, q, r, phi))
        elseif q == 1
            return VFactorSchurElement(Concatenation(para[1], [-((para[2])[1]) // (para[2])[2]]), ((CHEVIE[:imp])[:SchurModel])(p, q, r, phi))
        elseif [q, r] == [2, 2]
            return VFactorSchurElement(Concatenation(para[[2, 3, 1]]), ((CHEVIE[:imp])[:SchurModel])(p, q, r, phi), ((CHEVIE[:imp])[:SchurData])(p, q, r, phi))
        elseif p == q
            if IsInt(phi[length(phi)])
                m = length(phi) - 2
                phi = FullSymbol(phi)
            else
                m = p
            end
            F = ((CHEVIE[:imp])[:FactorizedSchurElement])(p, 1, r, phi, Concatenation([map((i->begin
                                        E(p, i)
                                    end), 0:p - 1)], para[2:length(para)]), [])
            F[:factor] = F[:factor] // m
            return F
        elseif para[2] == para[3]
            if IsInt(phi[length(phi)])
                m = length(phi) - 2
                phi = FullSymbol(phi)
            else
                m = p
            end
            if para[1] == map((i->begin
                                E(p // q, i - 1)
                            end), 1:p // q)
                para = [map((i->begin
                                    E(p, i)
                                end), 0:p - 1), para[2]]
            else
                para = [Concatenation(TransposedMat(map((i->begin
                                            map((j->begin
                                                            E(q, j)
                                                        end), 0:q - 1) * GetRoot(i, q)
                                        end), para[1]))), para[2]]
            end
            F = ((CHEVIE[:imp])[:FactorizedSchurElement])(p, 1, r, phi, para, [])
            F[:factor] = p // (q * m) * F[:factor]
            return F
        else
            ((CHEVIE[:compat])[:InfoChevie])("# FactorizedSchurElements(H(G(", p, ",", q, ",", r, "),", para, ")  !  implemented\n")
            return false
        end
    end)
chevieset(:imp, :HeckeCharTable, function (p, q, r, para, root)
        local X, Y, Z, res, cl, GenericEntry, pow, d, I, LIM, HooksBeta, StripsBeta, Strips, Delta, StripsCache, chiCache, code, j, ci
        res = Dict{Symbol, Any}()
        res[:name] = SPrint("H(G(", p, ",", q, ",", r, "))")
        res[:identifier] = res[:name]
        res[:degrees] = (chevieget(:imp, :ReflectionDegrees))(p, q, r)
        res[:size] = Product(res[:degrees])
        res[:order] = res[:size]
        res[:dim] = r
        cl = (chevieget(:imp, :ClassInfo))(p, q, r)
        if r == 1
            Inherit(res, cl, ["classes", "orders"])
            res[:irreducibles] = map((i->begin
                            map((j->begin
                                        (para[1])[i] ^ j
                                    end), 0:p - 1)
                        end), 1:p)
            res[:powermap] = (chevieget(:imp, :PowerMaps))(p, q, r)
        elseif q == 1
            Inherit(res, cl)
            res[:powermap] = (chevieget(:imp, :PowerMaps))(p, q, r)
            HooksBeta = function (S, s)
                    local res, i, j, e, k, z, zi
                    res = []
                    e = length(S)
                    if e == 0
                        return res
                    end
                    j = e
                    for i = S[e] - 1:(S[e] - 2) - (S[e] - 1):0
                        if !(i in S)
                            while j > 0 && S[j] > i
                                j = j - 1
                            end
                            k = j + 1
                            while k <= e && S[k] - i <= s
                                z = [i]
                                z = Append(z, S[j + 1:k - 1])
                                zi = Filtered(2:length(z), (i->begin
                                                z[i] - z[i - 1] > 1
                                            end))
                                push!(res, Dict{Symbol, Any}(:area => S[k] - i, :hooklength => (k - j) - 1, :start => S[k], :startpos => k, :stoppos => j + 1, :DC => z[zi] - e, :SC => (z[Concatenation(zi - 1, [length(z)])] + 1) - e))
                                k = k + 1
                            end
                        end
                    end
                    return res
                end
            StripsBeta = function (S, s)
                    local res, j, hook, hs, h
                    res = [[]]
                    for hook = HooksBeta(S, s)
                        if s == hook[:area]
                            push!(res, [hook])
                        else
                            j = (hook[:stoppos] - 1) - length(S)
                            for hs = StripsBeta(S[1:hook[:stoppos] - 1], s - hook[:area])
                                for h = hs
                                    h[:SC] = h[:SC] + j
                                    h[:DC] = h[:DC] + j
                                end
                                push!(hs, hook)
                                push!(res, hs)
                            end
                        end
                    end
                    return res
                end
            StripsCache = Dict{Symbol, Any}()
            code = function (arg...,)
                    local S, res, p
                    res = []
                    for S = arg
                        for p = S
                            res = Append(res, p)
                            push!(res, -1)
                        end
                    end
                    p = ".0123456789abcdefghijklmnopqrstuvwxyz"
                    return p[2 + res]
                end
            Strips = function (S, s)
                    local apply, e, name, res, hs, ss, a, r
                    apply = function (S, hs)
                            local h
                            S = copy(S)
                            for h = hs
                                S[h[:stoppos]:h[:startpos]] = Concatenation([h[:start] - h[:area]], S[h[:stoppos]:h[:startpos] - 1])
                            end
                            while length(S) > 0 && S[1] == 0
                                S = S[2:length(S)] - 1
                            end
                            return S
                        end
                    e = length(S)
                    if e == 0
                        if s == 0
                            return [Dict{Symbol, Any}(:SC => [], :DC => [], :cc => 0, :hooklength => 0, :area => 0, :remainder => [])]
                        else
                            return []
                        end
                    end
                    name = code(S, [[s]])
                    if haskey(StripsCache, (name,))
                        return StripsCache[Symbol(name)]
                    end
                    res = []
                    for hs = StripsBeta(S[e], s)
                        hs = Dict{Symbol, Any}(:area => Sum(hs, (x->begin
                                                x[:area]
                                            end)), :cc => length(hs), :hooklength => Sum(hs, (x->begin
                                                x[:hooklength]
                                            end)), :SC => Concatenation(map((x->begin
                                                    map((y->begin
                                                                [e, y]
                                                            end), x[:SC])
                                                end), hs)), :DC => Concatenation(map((x->begin
                                                    map((y->begin
                                                                [e, y]
                                                            end), x[:DC])
                                                end), hs)), :remainder => apply(S[e], hs))
                        for a = Strips(S[1:e - 1], s - hs[:area])
                            ss = Dict{Symbol, Any}()
                            for r = RecFields(a)
                                ss[Symbol(r)] = copy(a[Symbol(r)])
                            end
                            ss[:SC] = Append(ss[:SC], hs[:SC])
                            ss[:DC] = Append(ss[:DC], hs[:DC])
                            push!(ss[:remainder], hs[:remainder])
                            ss[:cc] = ss[:cc] + hs[:cc]
                            ss[:hooklength] = ss[:hooklength] + hs[:hooklength]
                            ss[:area] = ss[:area] + hs[:area]
                            push!(res, ss)
                        end
                    end
                    StripsCache[Symbol(name)] = res
                    return res
                end
            Delta = function (k, hs, Q, v)
                    local res, ctSC, ctDC, q, ElementarySymmetricFunction, HomogeneousSymmetricFunction
                    res = 1
                    if hs[:cc] > 1
                        if k == 1 || Q[1] == -(Q[2])
                            return 0
                        else
                            res = res * (Q[1] + Q[2]) ^ (hs[:cc] - 1)
                        end
                    end
                    q = -(Q[1]) // Q[2]
                    res = res * (-1) ^ hs[:hooklength] * Q[1] ^ (hs[:area] - hs[:cc]) * q ^ -(hs[:hooklength])
                    if k == 0
                        return res
                    end
                    ctSC = map((x->begin
                                    v[x[1]] * q ^ x[2]
                                end), hs[:SC])
                    ctDC = map((x->begin
                                    v[x[1]] * q ^ x[2]
                                end), hs[:DC])
                    res = res * Product(ctSC) * Product(ctDC) ^ -1
                    if k == 1
                        return res
                    end
                    ElementarySymmetricFunction = function (t, v)
                            return Sum(Combinations(1:length(v), t), (x->begin
                                            Product(v[x])
                                        end))
                        end
                    HomogeneousSymmetricFunction = function (t, v)
                            return Sum(Combinations(Concatenation(map((x->begin
                                                        1:length(v)
                                                    end), 1:t)), t), (x->begin
                                            Product(v[x])
                                        end))
                        end
                    return res * (-1) ^ (hs[:cc] - 1) * Sum(map((t->begin
                                            (-1) ^ t * ElementarySymmetricFunction(t, ctDC) * HomogeneousSymmetricFunction((k - t) - hs[:cc], ctSC)
                                        end), 0:Minimum(length(ctDC), k - hs[:cc])))
                end
            chiCache = Dict{Symbol, Any}()
            LIM = r
            GenericEntry = function (lambda, mu)
                    local bp, i, rest, res, name, n
                    n = Sum(lambda, Sum)
                    if n == 0
                        return 1
                    end
                    if n < LIM
                        name = code(lambda, mu)
                        if haskey(chiCache, (name,))
                            return chiCache[Symbol(name)]
                        end
                    end
                    bp = maximum(Concatenation(lambda))
                    i = PositionProperty(lambda, (x->begin
                                    bp in x
                                end))
                    rest = copy(lambda)
                    rest[i] = (rest[i])[2:length(rest[i])]
                    res = (-(Product(para[2]))) ^ ((i - 1) * (n - bp)) * Sum(Strips(mu, bp), function (x,)
                                    local d
                                    d = Delta(i - 1, x, para[2], para[1])
                                    if d == 0
                                        return d
                                    else
                                        return d * GenericEntry(rest, x[:remainder])
                                    end
                                end)
                    if n < LIM
                        chiCache[Symbol(name)] = res
                    end
                    return res
                end
            res[:irreducibles] = map((x->begin
                            map((y->begin
                                        GenericEntry(y, x)
                                    end), cl[:classparams])
                        end), map((x->begin
                                map(BetaSet, x)
                            end), cl[:classparams]))
        elseif [q, r] == [2, 2] && !(haskey(CHEVIE, :othermethod))
            Inherit(res, cl, ["classes", "orders"])
            X = para[2]
            Y = para[3]
            Z = para[1]
            ci = (chevieget(:imp, :CharInfo))(p, q, r)
            GenericEntry = function (char, class)
                    local w
                    char = (ci[:malle])[Position(ci[:charparams], char)]
                    if char[1] == 1
                        w = [Z[char[4]], X[char[2]], Y[char[3]]]
                        return Product(class, function (i,)
                                    if i == 0
                                        return Product(w)
                                    else
                                        return w[i]
                                    end
                                end)
                    else
                        w = char[2] * GetRoot(X[1] * X[2] * Y[1] * Y[2] * Z[char[3]] * Z[char[4]] * E(p // q, (2 - char[3]) - char[4]), 2) * E(p, (char[3] + char[4]) - 2)
                        class = map((i->begin
                                        count((j->begin
                                                    i == j
                                                end), class)
                                    end), 0:3)
                        if class[2] > 0
                            char = Sum(Z[char[[3, 4]]], (x->begin
                                            x ^ class[2]
                                        end))
                        elseif class[3] > 0
                            char = Sum(X)
                        elseif class[4] > 0
                            char = Sum(Y)
                        else
                            char = 2
                        end
                        return w ^ class[1] * char
                    end
                end
            res[:irreducibles] = map((char->begin
                            map((class->begin
                                        GenericEntry(char, class)
                                    end), cl[:classparams])
                        end), ci[:charparams])
        else
            Inherit(res, cl, ["centralizers", "orders", "classnames"])
            res[:classes] = map((x->begin
                            res[:size] // x
                        end), res[:centralizers])
            res[:irreducibles] = map((i->begin
                            CharRepresentationWords((chevieget(:imp, :HeckeRepresentation))(p, q, r, para, [], i), cl[:classtext])
                        end), 1:length(res[:classes]))
        end
        res[:centralizers] = map((x->begin
                        res[:size] // x
                    end), res[:classes])
        res[:parameter] = para
        res[:irreducibles] = res[:irreducibles] * Product(para, Product) ^ 0
        return ((CHEVIE[:compat])[:MakeCharacterTable])(res)
    end)
chevieset(:imp, :HeckeRepresentation, function (p, q, r, para, root, i)
        local X, Y, t, x, a, v, d, T, S, m, extra, l, m1, p1rRep, f
        if !(IsList(para))
            para = [para]
        end
        if [q, r] == [1, 2]
            X = para[2]
            Y = para[1]
            t = (PartitionTuples(2, p))[i]
            if count((x->begin
                                x != []
                            end), t) == 1
                p = PositionProperty(t, (x->begin
                                x != []
                            end))
                if t[p] == [2]
                    return X[1] ^ 0 * [[[Y[p]]], [[X[1]]]]
                else
                    return X[1] ^ 0 * [[[Y[p]]], [[X[2]]]]
                end
            else
                p = Filtered(1:length(t), (i->begin
                                t[i] != []
                            end))
                return X[1] ^ 0 * [[[Y[p[1]], 0], [-1, Y[p[2]]]], [[X[1], X[1] * Y[p[1]] + X[2] * Y[p[2]]], [0, X[2]]]]
            end
        elseif [p, q, r] == [3, 3, 3]
            x = -((para[2])[1]) // (para[2])[2]
            f = function (x, j)
                    return [[[-1, 0, 0], [0, 0, 1], [0, x, -1 + x]], [[-1, 0, 0], [x - x ^ 2, -1 + x, j ^ 2], [j * x - j * x ^ 2, j * x, 0]], [[0, 1, 0], [x, -1 + x, 0], [0, 0, -1]]]
                end
            r = x ^ 0 * [[[[-1, 0], [-1, x]], [[x, -x], [0, -1]], [[x, -x], [0, -1]]], [[[-1, 0], [-1, x]], [[x, -x], [0, -1]], [[-1, 0], [-1, x]]], [[[-1, 0], [-1, x]], [[x, -x], [0, -1]], [[-1 + x, 1], [x, 0]]], f(x, E(3)), f(x, E(3, 2)), [[[-1]], [[-1]], [[-1]]], -x * f(x ^ -1, E(3, 2)), -x * f(x ^ -1, E(3)), [[[-1, 0], [-1, x]], [[-1, 0], [-1, x]], [[x, -x], [0, -1]]], [[[x]], [[x]], [[x]]]]
            return r[i]
        elseif [p, q, r] == [2, 2, 4]
            x = -((para[1])[1]) // (para[1])[2]
            r = [(x->begin
                            [[[-1 + x, -1, 0], [-x, 0, 0], [x - x ^ 2, -1 + x, -1]], [[0, 1, 0], [x, -1 + x, 0], [0, 0, -1]], [[-1, 0, 0], [0, 0, 1], [0, x, -1 + x]], [[0, 1, 0], [x, -1 + x, 0], [0, 0, -1]]]
                        end), (x->begin
                            [[[0, 1, 0], [x, -1 + x, 0], [0, 0, -1]], [[-1 + x, -1, 0], [-x, 0, 0], [x - x ^ 2, -1 + x, -1]], [[-1, 0, 0], [0, 0, 1], [0, x, -1 + x]], [[0, 1, 0], [x, -1 + x, 0], [0, 0, -1]]]
                        end), (x->begin
                            [[[-1, 0, 0, 0], [0, -1 + x, -1, 0], [0, -x, 0, 0], [0, 0, 0, -1]], [[-1, 1 - x, 1 - x, 0], [0, 0, 1, 0], [0, x, -1 + x, 0], [0, -1 + x, -1 + x, -1]], [[-1 + x, -x, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, -1]], [[0, 0, 0, 1], [0, -1, 0, 0], [0, 0, -1, 0], [x, 0, 0, -1 + x]]]
                        end), (x->begin
                            [[[-1]], [[-1]], [[-1]], [[-1]]]
                        end), (x->begin
                            [[[x, 1 - x, -1 + x, -x + x ^ 2, x - x ^ 2, 0], [0, -1 + x, 0, 0, -x, x - x ^ 2], [0, 0, -1 + x, -x, 0, x - x ^ 2], [0, 0, -1, 0, 0, -1 + x], [0, -1, 0, 0, 0, -1 + x], [0, 0, 0, 0, 0, -1]], [[x, 0, 0, 0, 0, 0], [0, 0, 0, 0, x, 0], [0, 0, 0, x, 0, 0], [0, 0, 1, -1 + x, 0, 0], [0, 1, 0, 0, -1 + x, 0], [0, 0, 0, 0, 0, -1]], [[0, 0, x, 0, 0, 0], [0, -1, 0, 0, 0, 0], [1, 0, -1 + x, 0, 0, 0], [0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, x], [0, 0, 0, 0, 1, -1 + x]], [[-1, 0, 0, 0, 0, 0], [0, -1 + x, 1, 0, 0, 0], [0, x, 0, 0, 0, 0], [0, 0, 0, 0, x, 0], [0, 0, 0, 1, -1 + x, 0], [0, 0, 0, 0, 0, x]]]
                        end), (x->begin
                            [[[-1 + x, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [-x, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, x, 0, 0, -1 + x, 0, 0, 0], [0, 0, 0, 0, 0, -1 + x, 0, x], [0, 0, 0, x, 0, 0, -1 + x, 0], [0, 0, 0, 0, 0, 1, 0, 0]], [[0, 0, 1, 0, 0, 0, 0, 0], [0, 0, -1 + x, 0, 1, 0, (-1 + x) // x, 0], [x, 0, -1 + x, 0, 0, 0, 0, 0], [0, 0, 0, -1 + x, 0, 0, -1, 0], [x - x ^ 2, x, 0, -1 + x, -1 + x, 0, ((1 - 2x) + x ^ 2) // x, 0], [-x + x ^ 2, 0, 0, -x + x ^ 2, 0, -1 + x, 1 - x, x], [0, 0, 0, -x, 0, 0, 0, 0], [0, 0, 1 - x, x - x ^ 2, 0, 1, -1 + x, 0]], [[0, 1, 0, 0, 0, 0, 0, 0], [x, -1 + x, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, x, -1 + x, 0, 0, 0, 0], [0, 0, 0, 0, -1 + x, 0, -1, 0], [0, 0, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, -x, 0, 0, 0], [0, 0, 0, 0, 0, -x, 0, -1]], [[-1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, -1, -x, 0, 0, 0, 0], [0, 0, 0, x, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, x, -1 + x, 0, 0], [0, 0, 0, 0, 0, 0, x, 0], [0, x, 0, 0, 0, 0, 0, -1 + x]]]
                        end), (x->begin
                            [[[-1, -1, 0], [0, x, 0], [0, 1, -1]], [[-1, -1, 0], [0, x, 0], [0, 1, -1]], [[-1 + x, x, 0], [1, 0, 0], [0, 0, -1]], [[0, 0, 1], [0, -1, 0], [x, 0, -1 + x]]]
                        end), 1, 2, (x->begin
                            [[[x, 0], [-1, -1]], [[x, 0], [-1, -1]], [[0, 1], [x, -1 + x]], [[x, 0], [-1, -1]]]
                        end), 3, 7, 4]
            if IsInt(r[i])
                return -x * (r[r[i]])(x ^ -1)
            else
                return (r[i])(x) * x ^ 0
            end
        elseif [p, q, r] == [3, 3, 4]
            x = -((para[2])[1]) // (para[2])[2]
            m = function (i,)
                    local f1, f2, f3, f5, f7, f8, f11, f13
                    f1 = (x->begin
                                x ^ 0 * [[[x, -1, 0, 0, 0, 0, 0, 0, 0, 0, ((1 - x) - x ^ 2) + x ^ 3, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1 + x, 0, x, 0, -x, 0, 0, 0, x - x ^ 2, 0], [0, 0, 0, -1 + x, 0, 0, -x, 0, 0, 0, x - x ^ 2, 0], [0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1 + x, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1 + x, 1, -1 + x, 0], [0, 0, 0, 0, 0, 0, 0, 0, x, 0, -1 + x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1 + x]], [[0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0], [0, 0, 0, 0, x, 0, 0, 1 - x, 0, 0, 0, 0], [0, 0, 0, 1, -1 + x, 0, 0, 1 - x, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1 - x, -1 + x, 1, 0, (1 - x) + x ^ 2], [0, 0, 1, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x], [0, 0, 0, 0, 0, x, 0, x - x ^ 2, -x, -1 + x, 0, x - x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1 + x]], [[0, (-1 + 2x) - x ^ 2, 1 - x, x, -x + x ^ 2, 0, 0, 0, (-1 + 2x) - x ^ 2, 0, 0, 0], [0, -1 + x, 1, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0], [0, x, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0], [1, -1 + x, 0, -1 + x, 0, 0, 1 - x, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1 + x, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, -1], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 + x, 0], [0, 0, 0, 0, 0, 0, 0, -x, 0, 0, 0, 0]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0], [0, 0, 0, 0, 0, x, 0, 0, 0, 0, 1 - x, x - x ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, x], [0, 0, 0, 1, 0, -1 + x, -1 + x, 0, 0, 0, 1 - x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x], [0, 0, 0, 0, 0, 0, 0, x, 0, 0, -1, 0], [0, 0, 1, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0], [0, 0, 0, 0, x, 0, -x, 0, 0, -1 + x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1 + x]]]
                            end)
                    f2 = function (x, j)
                            return [[[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, x, x, x]], [[-1, 0, 0, 0], [0, -1, 0, 0], [0, -(j ^ 2), x, 1], [0, 0, 0, -1]], [[-1, 0, 0, 0], [x, x, -j * x, 1], [0, 0, -1, 0], [0, 0, 0, -1]], [[x, 1, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, -1]]]
                        end
                    f3 = (x->begin
                                [[[x, -1, 0, -x, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, -1 + x, 0, 1, x], [0, 0, 0, -1, 0, 0], [0, 0, x, 0, 0, x], [0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0], [0, 0, 0, 0, x, 1], [0, 0, -1, 0, 0, 0], [-1, 0, -1, x, 0, -1 + x], [0, 1, 0, 0, -1 + x, 1], [0, 0, 0, 0, 0, -1]], [[0, x, 1, -1, -1, 0], [1, -1 + x, 1, -1, -1, 0], [0, 0, -1, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, 0, 1, 1, x]], [[x, -1, 0, 0, 1, x], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, 0, -1, x, 1, x], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1]]]
                            end)
                    f5 = (x->begin
                                [[[-1]], [[-1]], [[-1]], [[-1]]]
                            end)
                    f7 = function (x, j)
                            return [[[-1, 0, 0, 0, 0, 0], [x, x, 0, 0, 0, 0], [x, 0, x, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, 0, -j * x ^ 2, x, x]], [[x, 1, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, j ^ 2, x, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, x, x, 1], [0, 0, 0, 0, 0, -1]], [[x, 0, 1, 0, 1, 0], [0, x, j * x, 0, 0, 1], [0, 0, -1, 0, 0, 0], [0, 0, 0, x, 1, -(j ^ 2) * x ^ -1], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, 0, 0, x, 0, 0], [x, 0, 0, 0, x, 0], [0, x, 0, 0, 0, x]]]
                        end
                    f8 = function (x, j)
                            return [[[-1, 0, 0, 0, 0, 0, 0, 0], [1, x, 0, 0, 0, 0, 1, 0], [1, 0, x, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, -j * x, x, x, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, (j ^ 2 - j) * x, 0, 1, x]], [[x, x, 0, 0, 0, 0, -(j ^ 2), 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, j, x, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 1, x, 1, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -2 * j ^ 2 - j, 1, x]], [[x, 0, x, 0, x, 0, 0, 0], [0, x, j ^ 2 * x, 0, 0, 1, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, x, x, -(j ^ 2), 0, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, x, x], [0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, x, 0, 0, -(j ^ 2), 0], [1, 0, 0, 0, x, 0, 0, 0], [0, x, 0, 0, 0, x, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0], [0, 0, (j ^ 2 - j) * x, 0, 0, 0, 1, x]]]
                        end
                    f11 = (x->begin
                                [[[x, 1, 0], [0, -1, 0], [0, 0, -1]], [[x, 1, 0], [0, -1, 0], [0, 0, -1]], [[-1, 0, 0], [x, x, 1], [0, 0, -1]], [[-1, 0, 0], [0, -1, 0], [0, x, x]]]
                            end)
                    f13 = (x->begin
                                [[[-1, 0], [x, x]], [[-1, 0], [x, x]], [[x, 1], [0, -1]], [[-1, 0], [x, x]]]
                            end)
                    r = [f1(x), f2(x, E(3)), f3(x), f2(x, E(3, 2)), f5(x), -x * f1(x ^ -1), f7(x, E(3)), f8(x, E(3)), f8(x, E(3, 2)), -x * f7(x ^ -1, E(3)), f11(x), -x * f3(x ^ -1), f13(x), -x * f2(x ^ -1, E(3, 2)), -x * f2(x ^ -1, E(3)), -x * f11(x ^ -1), -x * f5(x ^ -1)]
                    return x ^ 0 * r[i]
                end
            return m(i)
        elseif [p, q, r] == [3, 3, 5]
            x = -((para[2])[1]) // (para[2])[2]
            m = function (i,)
                    local r, f1, f2, f3, f4, f8, f9, f11, f12, f13, f17, f20, f23, f29
                    f1 = function (x,)
                            return x ^ 0 * [[[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [E(3, 2) - E(3, 2) * x, E(3, 2) - E(3, 2) * x, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -(E(3, 2)) * x + E(3, 2) * x ^ 2, 0, E(3, 2) - E(3, 2) * x, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(-(E(3, 2)) - ER(-3) * x) + E(3) * x ^ 2, (E(3) - E(3) * x) + E(3) * x ^ 2, 0, 0, 0, E(3) - E(3) * x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, E(3, 2) * x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, E(3), -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, (E(3, 2) * x + ER(-3) * x ^ 2) - E(3) * x ^ 3, 0, (E(3) - E(3) * x) + E(3) * x ^ 2, 0, 0, 0, E(3) - E(3) * x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, E(3, 2) - E(3, 2) * x, 0, 0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * x, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * x, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * x, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, (-(E(3, 2)) - ER(-3) * x) + E(3) * x ^ 2, 0, 0, 0, 0, 0, 0, 0, (E(3) - E(3) * x) + E(3) * x ^ 2, 0, 0, 0, 0, E(3) - E(3) * x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, ((E(3, 2) - E(3, 2) * x) - E(3, 2) * x ^ 2) + E(3, 2) * x ^ 3, 0, (E(3) - ER(-3) * x) - E(3, 2) * x ^ 2, 0, 0, 0, -(E(3, 2)) + E(3, 2) * x, 0, -(E(3)) + ER(-3) * x + E(3, 2) * x ^ 2, 0, 0, 0, 0, E(3, 2) - E(3, 2) * x, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0], [E(3) - E(3) * x, 0, 0, (2 * E(3) - E(3) * x ^ -1) - E(3) * x, 0, 0, 0, 0, 0, 0, (-(E(3)) + 2 * E(3) * x) - E(3) * x ^ 2, 0, 0, 0, 0, -(E(3)) + E(3) * x, 0, 0, 0, E(3) - E(3) * x, 0, 0, E(3) - E(3) * x, 0, E(3), 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * x, 0, -1 + x, 0, 0, 0, 0, 0, 0], [-(E(3)) + ER(-3) * x + E(3, 2) * x ^ 2, 0, (x - 2 * x ^ 2) + x ^ 3, (1 - 3 * ER(-3)) // 2 + E(3) * x ^ -1 + (1 + 3 * ER(-3)) // 2 * x + E(3, 2) * x ^ 2, 0, 0, 0, 0, 0, 0, ((E(3) - 2 * E(3) * x) + 2 * E(3) * x ^ 2) - E(3) * x ^ 3, 0, 0, 0, 0, (E(3) - 2 * E(3) * x) + E(3) * x ^ 2, 0, -(E(3)) + E(3) * x, 0, (-(E(3)) + 2 * E(3) * x) - E(3) * x ^ 2, 0, 0, (E(3, 2) - E(3, 2) * x) + E(3, 2) * x ^ 2, 0, E(3, 2) - E(3, 2) * x, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + x, 0, -(E(3, 2)) + E(3, 2) * x, 0, 0, 0, -1 + x ^ -1, 0, E(3, 2) - E(3, 2) * x, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), -1 + x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + x, E(3) * x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, x, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 - x, 0, 0, 0, 0, 0, -1 + x, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1 + x ^ -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, x, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1 - 2x) + x ^ 2, (1 - 2x) + x ^ 2, (1 - 2x) + x ^ 2, 1 - x, (2 - x ^ -1) - x, 1 - x, 0, 0, 1 - x ^ -1, -1 + x, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 - x, 0, 0, 0, 0, 0, 0, 0, -1 + x, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1 - 2x) + x ^ 2, -x + x ^ 2, (1 - 2x) + x ^ 2, 1 - x, 1 - x, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 - x, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(2 - x ^ -1) - x, 1 - x, 0, 0, 0, 1 - x, -1 + x, -1 + x, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, x - x ^ 2, (-1 + 2x) - x ^ 2, 0, 0, 0, x - x ^ 2, 0, 0, 0, 0, 0, -1 + x, 0, 0, -1 + x, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + x, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(2 - x ^ -1) - x, 0, 1 - x, 0, 0, 0, -1 + x, 0, 0, 0, 0, 1 - x, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 - x ^ -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [((-1 + 3x) - 3 * x ^ 2) + x ^ 3, ((-1 + 3x) - 3 * x ^ 2) + x ^ 3, (x - 2 * x ^ 2) + x ^ 3, (2 - x ^ -1) - x, (-2 + x ^ -1 + 2x) - x ^ 2, (-1 + 2x) - x ^ 2, 0, (1 - 2x) + x ^ 2, -2 + x ^ -1 + x, 0, 0, -1 + x, -1 + x, (2 - x ^ -1) - x, 1 - x, 0, 0, 0, 1 - x, 0, 0, -1 + x, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [(-3 + x ^ -1 + 3x) - x ^ 2, (-1 + 2x) - x ^ 2, 0, (1 - 2x) + x ^ 2, 0, (-1 + 2x) - x ^ 2, (1 - 2x) + x ^ 2, (1 - 2x) + x ^ 2, -1 + x, x - x ^ 2, 0, (-1 + 2x) - x ^ 2, 0, 1 - x, 1 - x, 0, -1 + x, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, -1 + x, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [((1 - 3x) + 3 * x ^ 2) - x ^ 3, ((1 - 2x) + 2 * x ^ 2) - x ^ 3, ((1 - 3x) + 3 * x ^ 2) - x ^ 3, (1 - 2x) + x ^ 2, ((3 - x ^ -1) - 3x) + x ^ 2, (1 - 2x) + x ^ 2, 0, 0, (2 - x ^ -1) - x, 0, (-1 + 2x) - x ^ 2, 0, 1 - x, 0, 0, 0, 0, -1 + x, 0, 0, 1 - x, 0, (1 - 2x) + x ^ 2, 0, 1 - x, 0, -1 + x, x, 0, 0], [0, 0, 0, (2 - x ^ -1) - x, 0, -1 + x, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, -2 + x ^ -1 + x, 0, (2 - x ^ -1) - x, 0, 1 - x, -1 + x ^ -1, 0, -1 + x, 0, 0, 0, 1, 0, 0, 0], [(-1 + 2x) - x ^ 2, 0, 0, 0, 0, 0, (1 - 2x) + x ^ 2, -x + x ^ 2, 0, 0, 0, 0, 0, 0, 0, 1 - x, -1 + x, 0, 0, 0, 0, 0, 1 - x, 0, 0, 1 - x, 0, 0, 0, x], [0, 0, (1 - 2x) + x ^ 2, ((3 - x ^ -1) - 3x) + x ^ 2, 0, 0, 1 - x, (1 - 2x) + x ^ 2, 0, 0, -1 + x, 0, 0, (2 - x ^ -1) - x, 0, 0, 0, 0, 1 - x, 0, 0, 0, (2 - x ^ -1) - x, 0, 1 - x ^ -1, 1 - x, 0, 0, 1, -1 + x]], [[0, -x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, x, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0], [0, x - x ^ 2, 0, 0, 0, 0, 0, 0, 0, (1 - 2x) + x ^ 2, (-1 + 2x) - x ^ 2, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 1 - x, 0, (1 - 2x) + x ^ 2, 0, 0, 0, -1 + x, x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 1 - x, 0, 0, 0, 0, 0, 0, x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0], [1 - x, 0, 0, (2 - x ^ -1) - x, 0, 0, 0, 0, 0, 0, (-1 + 2x) - x ^ 2, 0, 0, 0, 0, -1 + x, 0, 0, 0, 1 - x, 0, 0, 1 - x, 0, 1, 0, 0, -1 + x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - x, 0, 0, 0, 0, 0, 1 - x ^ -1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1 + x]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, x, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 - x, 0, 0, 0, 0, 0, -1 + x, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, x, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 - x, 1 - x, 0, 0, 0, 1, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, x - x ^ 2, 0, 0, 0, 0, 0, 0, 0, -x + x ^ 2, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -x + x ^ 2, 0, 1 - x, 0, 0, 0, 1, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + x, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1 - x, 0, 0, 0, 0, 0, 0, 0, 1 - x, 0, 0, 0, 0, 1, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, -1 + x, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1 + x]], [[0, 0, -x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, x, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1 - x, 0, 0, 0, 0, 0, 0, 0, 1 - x, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, x, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1 - x, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 - x, 0, 0, 0, 0, 0, -1 + x, x, 0, 0, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 - x, 0, 0, (2 - x ^ -1) - x, 0, 0, 0, 0, 0, 0, (-1 + 2x) - x ^ 2, 0, 0, 0, 0, -1 + x, 0, 0, 0, 1 - x, 0, 0, 1 - x, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -x + x ^ 2, 0, 0, 0, 0, 1 - x, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0], [0, 0, x - x ^ 2, (-1 + 2x) - x ^ 2, 0, 0, 0, x - x ^ 2, 0, 0, 0, 0, 0, -1 + x, 0, 0, -1 + x, 0, x, 0, 0, 0, 0, 0, -1 + x, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x, 0, 0, 0, 0, -1 + x, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1 + x, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]]]
                        end
                    f2 = function (q,)
                            return q ^ 0 * [[[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-(E(3)) + ER(-3) * q + E(3, 2) * q ^ 2, E(3, 2) - E(3, 2) * q, 0, 0, -(E(3)) + E(3) * q, 0, (ER(-3) - E(3) * q ^ -1) + E(3, 2) * q, -(E(3, 2)) + E(3, 2) * q ^ -1 + E(3, 2) * q, 0, 0, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [E(3) * q - E(3) * q ^ 2, E(3) * q, 0, 0, 0, 0, E(3) - E(3) * q, E(3) - E(3) * q, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, E(3, 2) - E(3, 2) * q, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, 0, E(3, 2), 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0], [-(E(3)) + E(3) * q, 0, 0, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, -1 + q, -(E(3)), 0, 0, 0, 0, 0], [1 - q, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) * q, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, (-(E(3, 2)) - ER(-3) * q) + E(3) * q ^ 2, 0, (-(E(3, 2)) - ER(-3) * q) + E(3) * q ^ 2, 0, 0, (E(3) - E(3) * q) + E(3) * q ^ 2, 0, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, -1 + q, 0, 0], [(E(3) * q - 2 * E(3) * q ^ 2) + E(3) * q ^ 3, E(3) * q - E(3) * q ^ 2, 0, 0, 0, 0, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, 0, 0, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, 0, -(E(3)) + E(3) * q, 0, 0, 0, 0, -(E(3)) + E(3) * q, 0, E(3, 2) * q], [0, 0, 0, 0, 0, 0, 0, -(E(3)) + E(3) * q, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, E(3) - E(3) * q, 0, E(3), -1 + q]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1 + q, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, q ^ 3 - q ^ 4, 1 - q, -1 + q, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1 - 2q) + q ^ 2, 0, q ^ 3 - q ^ 4, 0, 0, 0, 0, 0, 1 - q, -1 + q, 0, 0, 1, 1 - q, 0, 0, 0, 0, 0, 0], [0, 0, q ^ 3 - q ^ 4, 1 - q, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [(1 - 2q) + q ^ 2, 0, q ^ 3 - q ^ 4, 0, 0, 0, 0, 0, 1 - q, q, 0, 0, 0, 0, 1 - q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, -1 + q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 1 - q, 0, -1 + q, 0, 0, 0, 0, 0, (2 - q ^ -1) - q, 0, 0, 0, 1 - q ^ -1, -1 + q, 1, 0, 0], [0, 0, 0, 1 - q, 0, -1 + q, 0, 0, 0, 0, 0, 1 - q, 0, 0, 0, 0, q, 0, 0, 0], [(-1 + 2q) - q ^ 2, 0, 0, 0, q - q ^ 2, (1 - 2q) + q ^ 2, 0, 0, 0, 0, 0, -1 + q, 0, 0, -1 + q, 0, 0, 0, -1 + q, q], [(2 - q ^ -1) - q, 0, (-(q ^ 3) + 2 * q ^ 4) - q ^ 5, (-1 + 2q) - q ^ 2, (1 - 2q) + q ^ 2, -2 + q ^ -1 + q, 0, 0, 0, 0, -1 + q, 0, 0, -1 + q, (2 - q ^ -1) - q, -1 + q ^ -1, 0, 0, 1, 0]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 - q, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [1 - q, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1 + q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1 + q, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1 + q]], [[0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -(q ^ -2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -(q ^ 3), -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-q, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1 + q, 0, 0, 0, 0, 1 - q, 0, 0, 0, 0, 0, -1 + q, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0], [0, 0, 0, 0, 0, 0, 1 - q, 0, 1 - q, 0, 0, 1 - q, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1 - q, 0, 1 - q, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0], [1 - q, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, q, 1 - q, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1 + q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1 + q, 0, -(q ^ 3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1 - 2q) + q ^ 2, 0, q ^ 3 - q ^ 4, 0, 0, 0, 0, 0, 1 - q, -1 + q, 0, 0, 1, 1 - q, 0, 0, 0, 0, 0, 0], [-(q ^ -2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 - q, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [q - q ^ 2, q, 0, 0, 0, 0, 1 - q, 1 - q, 0, 0, 1 - q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0], [0, 0, q ^ 3 - q ^ 4, 1 - q, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]]]
                        end
                    f3 = function (q, j)
                            return q ^ 0 * [[[-1, 0, 0, 0, 0], [0, -1, 0, 0, 0], [1, 0, 0, 0, -1], [1 + j * q, 0, 1 + j * q, -1, -1 - j * q], [-q, 0, -q, 0, -1 + q]], [[-1, 0, 0, 0, 0], [0, -1, 0, 0, 0], [1, 0, 0, -1, 0], [-q, 0, -q, -1 + q, 0], [-j, 0, -j, j, -1]], [[-1, 0, -1, 0, 0], [0, -1, 1, 0, 0], [0, 0, q, 0, 0], [0, 0, 0, -1, 0], [0, 0, 0, 0, -1]], [[q, 0, 0, 0, 0], [-1, -1, 0, 0, 0], [-q, 0, -1, 0, 0], [1, 0, 0, -1, 0], [1, 0, 0, 0, -1]], [[0, 1, 0, 0, 0], [q, -1 + q, 0, 0, 0], [0, 0, -1, 0, 0], [1, 1, 0, -1, 0], [1, 1, 0, 0, -1]]]
                        end
                    f4 = function (q, j)
                            return q ^ 0 * [[[-1 + q, 0, 0, q, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, (j ^ 2 * q + (-(j ^ 2) + j) * q ^ 2) - j * q ^ 3, 0, j - j * q, 0, (-j + j * q) - j * q ^ 2, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, j ^ 2 * q - j ^ 2 * q ^ 2, 0, -(j ^ 2), 0, j ^ 2 - j ^ 2 * q, 0, 0, 0], [-q + q ^ 2, 0, (j ^ 2 * q - 2 * j ^ 2 * q ^ 2) + j ^ 2 * q ^ 3, -q + q ^ 2, -(j ^ 2) + j ^ 2 * q, 0, -j + (-(j ^ 2) + j) * q + j ^ 2 * q ^ 2, -1, 0, 0], [0, q - q ^ 2, (j ^ 2 * q - 2 * j ^ 2 * q ^ 2) + j ^ 2 * q ^ 3, 0, -(j ^ 2) + j ^ 2 * q, 0, -j + (-(j ^ 2) + j) * q + j ^ 2 * q ^ 2, 0, -1, q - q ^ 2], [0, q, 0, 0, 0, 0, 0, 0, 0, -1 + q]], [[0, 0, j ^ 2 * q - j ^ 2 * q ^ 2, j ^ 2 * q, 0, 0, 0, 0, 0, 0], [0, -1 + q, -q + q ^ 2, 0, 0, 0, 0, 0, 0, j], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [j, 0, q - q ^ 2, -1 + q, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1 + q, 0, -q, 0, 0, 0], [q - q ^ 2, -(j ^ 2) * q + j ^ 2 * q ^ 2, ((j ^ 2 * q - j ^ 2 * q ^ 2) - j ^ 2 * q ^ 3) + j ^ 2 * q ^ 4, j ^ 2 * q ^ 2 - j ^ 2 * q ^ 3, 0, -1, 0, 0, 0, -1 + q], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, j ^ 2 * q, -(j ^ 2) * q + j ^ 2 * q ^ 2, 0, 0, 0, 0, 0, 0, 0]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, q, -1 + q, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, -1 + q, 0, 0, 0, q], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, -q, 0, 0, -1 + q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, -1 + q, 0, q, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, -q, -1 + q, 0], [q, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, -q + q ^ 2, -(q ^ 2) + q ^ 3, 0, -1 + q, 0, 0, 0, 0, j * q], [0, 0, 0, -(j ^ 2) * q + j ^ 2 * q ^ 2, 0, 0, j ^ 2 - j ^ 2 * q, -(j ^ 2), 0, 0], [0, -q, 0, 0, 0, 0, -1 + q, 0, 0, 0], [0, -q + q ^ 2, 0, q ^ 2 - q ^ 3, 0, -j * q, 0, -1 + q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, -(j ^ 2) * q + j ^ 2 * q ^ 2, 0, j ^ 2, 0, -(j ^ 2) + j ^ 2 * q, 0, 0, 0]]]
                        end
                    f11 = function (q, j)
                            return q ^ 0 * [[[q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-(j ^ 2) + j ^ 2 * q, j ^ 2 - j ^ 2 * q, j ^ 2, 0, 0, 0, 0, 0, 0, 0], [-j + (-(j ^ 2) + j) * q + j ^ 2 * q ^ 2, (j - j * q) + j * q ^ 2, j - j * q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, q, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, q, 0, -1 + q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, q, -1 + q, 0, 0, 0, 0, 0, 0, 0], [1 - q, 0, 0, -1 + q, 0, j, 0, 0, 0, 0], [1 - q, 0, 0, 0, -1 + q, 0, j, 0, 0, 0], [-(j ^ 2) * q + j ^ 2 * q ^ 2, 0, 0, j ^ 2 * q, 0, 0, 0, 0, 0, 0], [-(j ^ 2) * q + j ^ 2 * q ^ 2, 0, 0, 0, j ^ 2 * q, 0, 0, 0, 0, 0], [(-(j ^ 2) + 2 * j ^ 2 * q) - j ^ 2 * q ^ 2, j ^ 2 - j ^ 2 * q, j ^ 2 - j ^ 2 * q, -(j ^ 2) * q + j ^ 2 * q ^ 2, 0, -1 + q, 0, -1, 0, 0], [0, 0, 0, j ^ 2 * q - j ^ 2 * q ^ 2, -(j ^ 2) * q + j ^ 2 * q ^ 2, 1 - q, -1 + q, 0, -1, 0], [(-(j ^ 2) + 2 * j ^ 2 * q) - j ^ 2 * q ^ 2, j ^ 2 - j ^ 2 * q, j ^ 2 - j ^ 2 * q, 0, -(j ^ 2) * q + j ^ 2 * q ^ 2, 0, -1 + q, 0, 0, -1]], [[0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [-q, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, q, 0, -1 + q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, q, 0, 0, -1 + q]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [-1 + q, 0, 0, 1 - q, 0, -j, 0, 0, 0, 0], [0, -q, 0, -1 + q, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [j ^ 2 * q - j ^ 2 * q ^ 2, -(j ^ 2) * q + j ^ 2 * q ^ 2, -(j ^ 2) * q, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1 + q, -q], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, -q, -1 + q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, -q, -1 + q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1], [0, 0, 0, 0, 0, 0, 0, 0, q, 0], [0, 0, 0, 0, 0, 0, 0, -q, 0, -1 + q]]]
                        end
                    f12 = function (q, j)
                            returnq ^ 0 * [[[0, 0, 0, 0, -(j ^ 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -(j ^ 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -(j ^ 2), 0, 0, 0, 0, 0, 0, 0, 0], [-j * q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -j, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -j * q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0], [-(j ^ 2) + j ^ 2 * q, 0, 0, 0, j - j * q, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, j ^ 2 - j ^ 2 * q, 0, 0, -j + j * q, 0, -1, 0, 0, 0, 0, 0, 0], [0, (2 * j ^ 2 - j ^ 2 * q ^ -1) - j ^ 2 * q, 0, 0, 0, (j - 2 * j * q) + j * q ^ 2, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, (-1 + 2q) - q ^ 2, -q, 0, 0, (1 - 2q) + q ^ 2, 0, 0, 0, q, q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [j - j * q, 0, 0, -q + q ^ 2, (j ^ 2 + 2j + q ^ -1) - j * q, 0, 1 - q, -q, -q, 0, 0, 0, q, 0, 0], [0, -2 * j ^ 2 + j ^ 2 * q ^ -1 + j ^ 2 * q, 0, 0, 0, (-j + 2 * j * q) - j * q ^ 2, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, (1 - 2q) + q ^ 2, 0, 0, 0, (-1 + 2q) - q ^ 2, 0, 0, 0, 0, 0, q, 0, q, q]], [[-1 + q, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1 + q, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1 + q, 0, -1, 0, -1 + q ^ -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1 + q, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [-q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -q + q ^ 2, 0, 0, 1 - q, 0, -1, 0, 0, 0, 0, 0, 0], [0, -q + q ^ 2, 0, 0, 0, q - q ^ 2, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, (-1 + 2q) - q ^ 2, -q, 1 - q, 1 - q, -q + q ^ 2, 1 - q, 0, 0, q, q, 0, 0, 0, 0], [0, 0, 0, -1 + q, 0, 0, -1 + q ^ -1, 0, 0, 0, 0, -1, 0, 0, 0], [-(j ^ 2) + j ^ 2 * q, 1 - q ^ -1, 0, (1 - 2q) + q ^ 2, -(j ^ 2) + j ^ 2 * q, -1 + q, 1 - q, -q, -q, 0, 0, 0, q, 0, 0], [0, q - q ^ 2, 0, 0, 0, -q + q ^ 2, 0, 0, 0, 0, 0, 0, 0, -1, 0], [1 - q ^ -1, (((2 + q ^ -2) - 2 * q ^ -1) - 2q) + q ^ 2, 0, (2 - q ^ -1) - q, 1 - q ^ -1, (-2 + q ^ -1 + 2q) - q ^ 2, 1 - q ^ -1, 0, 0, 0, 0, q, 0, q, q]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1 + q, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [q, -1, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, (1 - 2q) + q ^ 2, 0, 0, 0, (-1 + 2q) - q ^ 2, 0, 0, 0, -q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0], [0, 0, ((-(j ^ 2) - 2j) - q ^ -1) + j * q, 0, -j + q ^ -2 + (j ^ 2 + 2j) * q ^ -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [-j + (j ^ 2 + 2j) * q + q ^ 2, 1 - q, 0, 0, ((-(j ^ 2) - 2j) - q ^ -1) + j * q, 0, -1 + q, q, q, 0, 1 - q, 0, -1, 0, 0], [0, (((3 - q ^ -1) - 4q) + 3 * q ^ 2) - q ^ 3, 0, 0, 0, ((-2 + 3q) - 3 * q ^ 2) + q ^ 3, 0, 0, 0, -q + q ^ 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, ((-4 + q ^ -1 + 6q) - 4 * q ^ 2) + q ^ 3, 0, 0, 0, ((2 - 5q) + 4 * q ^ 2) - q ^ 3, 0, 0, 0, (-1 + 2q) - q ^ 2, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1 + q]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-j + j * q, 0, 0, 0, ((-(j ^ 2) - 2j) - q ^ -1) + j * q, 0, 0, q, 0, 0, 0, 0, 0, 0, 0], [0, q ^ -1, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0], [-j + j * q, 0, 1, 0, ((-(j ^ 2) - 2j) - q ^ -1) + j * q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0], [0, -1 + q, 0, 0, 0, 1 - q, 0, 0, -1 + q, -1, 0, 0, 0, 0, 0], [0, 0, 0, -(q ^ 2) + q ^ 3, 0, 0, q - q ^ 2, 0, -q, 0, 0, 0, 0, 0, 0], [-j + j * q, 0, 0, q - q ^ 2, ((-(j ^ 2) - 2j) - q ^ -1) + j * q, 0, -1 + q, q, q, 0, 0, 0, -1, 0, 0], [0, (2 - q ^ -1) - q, 0, 0, 0, -2 + q ^ -1 + q, 0, 0, 0, 0, 0, -1 + q, 0, -1, 0], [0, (1 - 2q) + q ^ 2, q, 0, 0, (-1 + 2q) - q ^ 2, 0, 0, 0, -q, -q, 0, -1 + q, 0, 0], [0, 0, 0, (-q + 2 * q ^ 2) - q ^ 3, 0, 0, (1 - 2q) + q ^ 2, 0, 0, 0, 0, -q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [q, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, (-1 + 2q) - q ^ 2, 0, 0, 0, (1 - 2q) + q ^ 2, 0, 0, 0, q, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, ((2 * j ^ 2 + j) - j ^ 2 * q ^ -1) + q, 0, 0, 0, -(j ^ 2) + j ^ 2 * q, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1 - q, 0, 0, 1 - q ^ -1, 0, 0, 0, 0, 1, 0, 0, 0], [(1 - 2q) + q ^ 2, 0, 1, 0, (2 - q ^ -1) - q, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, q - q ^ 2, 0, 0, -1 + q, 0, q, 0, 0, -1 + q, 0, 0, 0], [0, (1 - 2q) + q ^ 2, 0, 0, 0, (-1 + 2q) - q ^ 2, 0, 0, 0, 0, 0, q, 0, q, q], [(j ^ 2 + (-2 * j ^ 2 - j) * q) - q ^ 2, 0, 0, 0, j ^ 2 - j ^ 2 * q, 0, 0, q, 0, 0, 0, 0, 0, -1 + q, 0], [j - j * q, 0, 0, -q + q ^ 2, (j ^ 2 + 2j + q ^ -1) - j * q, 0, 1 - q, -q, -q, 0, 0, 0, 1, 0, -1 + q]]]
                        end
                    f13 = function (q, j)
                            returnq ^ 0 * [[[j - j * q, (-1 + q) - q ^ 2, (-(j ^ 2) + 2 * j ^ 2 * q) - j ^ 2 * q ^ 2, -j + (-(j ^ 2) + j) * q + j ^ 2 * q ^ 2, -(j ^ 2) + (j ^ 2 - j) * q + j * q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, j ^ 2 - j ^ 2 * q, -1 + q, 1 - q, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -q, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -q, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-q, 0, -q + q ^ 2, 0, -q + q ^ 2, 1 - q, 0, j ^ 2 - j ^ 2 * q, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0], [0, 0, 1 - q, -1 + q, 0, 0, -1 + q, 0, j ^ 2 - j ^ 2 * q, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, (-(j ^ 2) + 2 * j ^ 2 * q) - j ^ 2 * q ^ 2, -j + (-(j ^ 2) + j) * q + j ^ 2 * q ^ 2, 0, 0, (j ^ 2 + (-(j ^ 2) + j) * q) - j * q ^ 2, 0, (1 - q) + q ^ 2, 0, j - j * q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j ^ 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1 - q, -1 + q, 1 - q, 0, 0, 0, 0, 0, j ^ 2 - j ^ 2 * q, 0, j ^ 2 * q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j * q, 0, -1 + q, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, (2 - q ^ -1) - q, ((2 * j ^ 2 + j) - j ^ 2 * q ^ -1) + q, ((-2 * j ^ 2 - j) - q ^ -1) + j ^ 2 * q, 0, 0, 0, 0, 0, -j + j * q ^ -1 + j * q, 0, j - j * q, 0, 0, 0, 0, 0], [0, (-1 + q) - q ^ 2, -q + q ^ 2, -j + (-(j ^ 2) + j) * q + j ^ 2 * q ^ 2, 1 - q, ((j ^ 2 - j) + j * q ^ -1) - j ^ 2 * q, 0, -1 + q ^ -1 + q, 0, 0, 0, 0, 0, 0, 0, j - j * q, 0, 0, 0, 0], [0, 0, 0, 0, ((j ^ 2 - j) - j ^ 2 * q ^ -1) + j * q, 0, -2j + j * q ^ -1 + j * q, 0, 0, ((-(j ^ 2) + j) - j * q ^ -1) + j ^ 2 * q, 0, 0, 0, 0, 0, 0, j - j * q, (1 - q ^ -1) - q, 0, 0], [0, 0, 0, 0, -1 + q, 0, -1 + q, 0, 0, 1 - q, 0, 0, 0, 0, 0, 0, -q, j ^ 2 - j ^ 2 * q, 0, 0], [0, (j * q + (j ^ 2 - j) * q ^ 2) - j ^ 2 * q ^ 3, (-q + 2 * q ^ 2) - q ^ 3, 0, (1 - 2q) + q ^ 2, 0, ((1 - q) - q ^ 2) + q ^ 3, -j + (-(j ^ 2) + j) * q + j ^ 2 * q ^ 2, (j * q + (j ^ 2 - j) * q ^ 2) - j ^ 2 * q ^ 3, 0, -q + q ^ 2, 0, -j + (-(j ^ 2) + j) * q + j ^ 2 * q ^ 2, 0, j ^ 2 * q - j ^ 2 * q ^ 2, q - q ^ 2, 0, 0, -1, 0], [1 - q, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, 0, 0, ((-1 + q ^ -1) - q) + q ^ 2, 0, ((-1 + q ^ -1) - q) + q ^ 2, 0, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, (2 - q ^ -1) - q, -1 + q, -j + j * q ^ -1, 0, -1 + q ^ -1, 0, 0, 1 - q, ((j ^ 2 - j) + j * q ^ -1) - j ^ 2 * q, 0, -1]], [[-1 + q, -(j ^ 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-j, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -q, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -q, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-j * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j * q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, j ^ 2 * q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1 + q, 0, 0, 0, 1 - q, 0, 0, -1 + q, 0, -1 + q, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0], [0, 0, -1 + q, 0, 0, 0, 0, 0, 0, q - q ^ 2, 0, q, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1 + q, 0, 0, 0, 0, 0], [0, -(j ^ 2) * q, 0, 0, 0, 0, 0, j ^ 2, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, -(j ^ 2), 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -j * q, 0, 0, 0], [0, j - j * q, 0, 0, 0, 0, 0, j - j * q ^ -1, j - j * q, 0, j ^ 2 - j ^ 2 * q, 0, j - j * q ^ -1, 0, -j + j * q, -(j ^ 2) + j ^ 2 * q, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1 + q, 0, 0, j, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, j ^ 2 * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, j ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, j ^ 2 * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, j * q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, j, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, -q + q ^ 2, q - q ^ 2, 0, 0, q - q ^ 2, 0, -(j ^ 2) * q + j ^ 2 * q ^ 2, 0, -q, 0, 0, q, 0, 0, 0, 0, 0, 0], [0, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, (-1 + 2q) - q ^ 2, 0, -2 + q ^ -1 + q, 0, ((-1 + q ^ -1) - q) + q ^ 2, ((-(j ^ 2) + j) - j * q ^ -1) + j ^ 2 * q, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, 0, -1 + q, 0, ((-(j ^ 2) + j) - j * q ^ -1) + j ^ 2 * q, 0, j ^ 2 - j ^ 2 * q, 1 - q, 0, 0, -1, 0], [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [-1 + q, ((-j + 3 * j * q) - 3 * j * q ^ 2) + j * q ^ 3, ((j - 3 * j * q) + 3 * j * q ^ 2) - j * q ^ 3, (-q + 2 * q ^ 2) - q ^ 3, ((j ^ 2 + 3j) - j * q ^ -1) + (-2 * j ^ 2 - 4j) * q + (j ^ 2 + 2j) * q ^ 2, -(j ^ 2) + (2 * j ^ 2 + j) * q + q ^ 2, ((j ^ 2 + 2j) - j * q ^ -1) + (-2 * j ^ 2 - j) * q + (j ^ 2 - j) * q ^ 2 + j * q ^ 3, (((-2 * j ^ 2 - 3j) - q ^ -1) + (j ^ 2 + 3j) * q) - j * q ^ 2, (-j + (j ^ 2 + 3j) * q + (-2 * j ^ 2 - 3j) * q ^ 2) - q ^ 3, 0, -(j ^ 2) + (j ^ 2 - j) * q + j * q ^ 2, 0, ((2 - q ^ -1) - 2q) + q ^ 2, 0, (-1 + q) - q ^ 2, -j + (-(j ^ 2) + j) * q + j ^ 2 * q ^ 2, 0, 0, j - j * q, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j * q, 0, 0, -1 + q]], [[q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, q, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j ^ 2 * q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(j ^ 2), 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1 - q, 0, 1 - q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, q, -(j ^ 2) + j ^ 2 * q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, -1 + q, 0, 0, 0, 1 - q, 0, 0, -1 + q, 0, -1 + q, 0, 1, 0, 0, -1 + q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -j * q, 0, 0, 0, 0, 0, -1 + q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, -j * q + (-(j ^ 2) + j) * q ^ 2 + j ^ 2 * q ^ 3, (q - 2 * q ^ 2) + q ^ 3, 0, (-1 + 2q) - q ^ 2, 0, (-1 + q + q ^ 2) - q ^ 3, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, -j * q + (-(j ^ 2) + j) * q ^ 2 + j ^ 2 * q ^ 3, 0, q - q ^ 2, 0, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, 0, -(j ^ 2) * q + j ^ 2 * q ^ 2, -q + q ^ 2, 0, 0, q, q]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j * q, 0, 0, 0, 0, 0, 0, 0, 0], [0, q, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-q, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, j ^ 2, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0], [-q, 0, -q + q ^ 2, 0, -q + q ^ 2, 1 - q, 0, j ^ 2 - j ^ 2 * q, 0, 0, 0, 0, 0, -1 + q, 0, q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j * q, 0, 0, 0], [0, 0, -1 + q, 0, 0, 0, 1 - q, 0, 0, -1 + q, -1, -1 + q, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, j ^ 2, 0, -1 + q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1 + q, 0, 0], [q - q ^ 2, (j * q + (j ^ 2 - j) * q ^ 2) - j ^ 2 * q ^ 3, 0, 0, ((1 - q) - q ^ 2) + q ^ 3, 0, ((1 - q) - q ^ 2) + q ^ 3, 0, (j * q + (j ^ 2 - j) * q ^ 2) - j ^ 2 * q ^ 3, (-1 + 2q) - q ^ 2, -q + q ^ 2, j - j * q, 0, 1 - q, 0, 0, q - q ^ 2, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, 0, -q], [0, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, (-1 + 2q) - q ^ 2, 0, -2 + q ^ -1 + q, 0, ((-1 + q ^ -1) - q) + q ^ 2, ((-(j ^ 2) + j) - j * q ^ -1) + j ^ 2 * q, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, 0, -1 + q, 0, ((-(j ^ 2) + j) - j * q ^ -1) + j ^ 2 * q, 0, j ^ 2 - j ^ 2 * q, 1 - q, 0, 0, -1, -1 + q]]]
                        end
                    f17 = function (q,)
                            returnq ^ 0 * [[[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [-(q ^ 4), q ^ 3, -(q ^ 2), q]], [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [-(q ^ 4), q ^ 3, -(q ^ 2), q]], [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 0, 1], [0, 0, q, -1 + q]], [[-1, 0, 0, 0], [0, 0, 1, 0], [0, q, -1 + q, 0], [0, 0, 0, -1]], [[0, 1, 0, 0], [q, -1 + q, 0, 0], [0, 0, -1, 0], [0, 0, 0, -1]]]
                        end
                    f20 = function (q, j)
                            returnq ^ 0 * [[[q, 0, -(q ^ 2), 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -(q ^ 2), q, 0, 0, 0, 0, 0], [0, -(q ^ 2), 0, 0, 0, q, 0, 0, 0, 0], [-j * q + (-(j ^ 2) + j) * q ^ 2 + j ^ 2 * q ^ 3, (j ^ 2 * q + (-(j ^ 2) + j) * q ^ 2) - j * q ^ 3, (-(j ^ 2) * q ^ 2 + 2 * j ^ 2 * q ^ 3) - j ^ 2 * q ^ 4, (j ^ 2 * q - 2 * j ^ 2 * q ^ 2) + j ^ 2 * q ^ 3, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, 0, j - j * q, (-j + j * q) - j * q ^ 2, 0, 0], [j ^ 2 * q - j ^ 2 * q ^ 2, j ^ 2 * q - j ^ 2 * q ^ 2, -(j ^ 2) * q ^ 2 + j ^ 2 * q ^ 3, j ^ 2 * q - j ^ 2 * q ^ 2, -(j ^ 2) + j ^ 2 * q, 0, -(j ^ 2), j ^ 2 - j ^ 2 * q, 0, 0], [-j * q ^ 2 + (-(j ^ 2) + j) * q ^ 3 + j ^ 2 * q ^ 4, (-j * q ^ 2 + 2 * j * q ^ 3) - j * q ^ 4, (j ^ 2 * q ^ 2 + (-2 * j ^ 2 + j) * q ^ 3 + (2 * j ^ 2 - j) * q ^ 4) - j ^ 2 * q ^ 5, (j ^ 2 * q ^ 2 + (-(j ^ 2) + j) * q ^ 3) - j * q ^ 4, 0, (j + (j ^ 2 - j) * q) - j ^ 2 * q ^ 2, 0, (-j * q + j * q ^ 2) - j * q ^ 3, j - j * q, ((j - j * q) + j * q ^ 2) // q], [0, 0, -(j ^ 2) * q ^ 3 + j ^ 2 * q ^ 4, 0, -(j ^ 2) * q ^ 2 + j ^ 2 * q ^ 3, j ^ 2 * q - j ^ 2 * q ^ 2, -(j ^ 2) * q ^ 2, 0, j ^ 2 * q, j ^ 2 - j ^ 2 * q]], [[q, 0, -(q ^ 2), 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -(q ^ 2), q, 0, 0, 0, 0, 0], [0, -(q ^ 2), 0, 0, 0, q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1 + q, -q, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -(q ^ 2), -1 + q, 1], [0, 0, 0, 0, 0, 0, -(q ^ 2), 0, q, 0]], [[-1 + q, 0, q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, q, -1 + q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -q, 0, 1 // q], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -q, 0, 0, 0, 0, 0, -1 + q, 0, 0], [0, 0, 0, 0, 0, 0, -(q ^ 2), 0, q, 0], [0, -(q ^ 3), 0, 0, 0, q ^ 2, 0, 0, 0, -1 + q]], [[q, 0, -(q ^ 2), 0, 0, 0, 0, 0, 0, 0], [0, -1 + q, 0, q, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, q, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, q, 0, -1 // q], [0, 0, 0, 0, 0, 0, q, 0, -1 + q, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, q, -1 + q, 0, 0, 0, 0, 0, 0], [q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0], [0, -(q ^ 2), 0, 0, 0, q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, -(q ^ 2), 0, q, 0], [0, 0, 0, 0, 0, 0, 0, -(q ^ 2), 0, q]]]
                        end
                    f23 = function (q,)
                            returnq ^ 0 * [[[-1, 0, 0, 0, 0], [0, -1, 0, 0, 0], [q ^ 3, -(q ^ 2), q, 0, 0], [0, 0, 0, -1, 0], [-(q ^ 3), 0, 0, -(q ^ 2), q]], [[-1, 0, 0, 0, 0], [0, -1, 0, 0, 0], [q ^ 3, -(q ^ 2), q, 0, 0], [0, 0, 0, -1, 0], [-(q ^ 3), 0, 0, -(q ^ 2), q]], [[-1, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, q, -1 + q, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, q, -1 + q]], [[0, 1, 0, 0, 0], [q, -1 + q, 0, 0, 0], [0, 0, -1, 0, 0], [0, 0, 0, -1, 0], [-(q ^ 4), q ^ 3, -(q ^ 2), -(q ^ 2), q]], [[-1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [0, q, 0, -1 + q, 0], [0, 0, q, 0, -1 + q]]]
                        end
                    f29 = function (q,)
                            returnq ^ 0 * [[[q, q ^ 4, 0, 0, -(q ^ 2), 0], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, q ^ 3, -(q ^ 2), q, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, q ^ 4, 0, -(q ^ 3), q]], [[q, q ^ 4, 0, 0, -(q ^ 2), 0], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, q ^ 3, -(q ^ 2), q, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, q ^ 4, 0, -(q ^ 3), q]], [[-1 + q, 0, 0, 0, q, 0], [0, -1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, q, -1 + q, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, q]], [[0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0], [0, q, -1 + q, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, q, 0], [q, 0, 0, 0, 0, -1 + q]], [[-1 + q, 0, 0, q, 0, 0], [0, q, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 0, q, 0, -1 + q, 0], [0, 0, 0, 0, 0, -1]]]
                        end
                    f9 = function (q,)
                            returnq ^ 0 * [[[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-q, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -q, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(E(3, 2) - 2 * E(3, 2) * q) + E(3, 2) * q ^ 2, (E(3) + (E(3, 2) - E(3)) * q) - E(3, 2) * q ^ 2, (E(3, 2) + (-(E(3, 2)) + E(3)) * q) - E(3) * q ^ 2, 0, 0, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (E(3) - E(3) * q) + E(3) * q ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0], [(-1 + 2q) - q ^ 2, (1 - 2q) + q ^ 2, (-1 + 2q) - q ^ 2, -1 + q, 0, -1 + q, 0, 1 - q, 0, E(3) - E(3) * q, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, (1 - 2q) + q ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(-3 + q ^ -1 + 3q) - q ^ 2, ((3 - q ^ -1) - 3q) + q ^ 2, (-3 + q ^ -1 + 3q) - q ^ 2, -2 + q ^ -1 + q, 0, (E(3, 2) + 2 * E(3) + q ^ -1) - E(3) * q, 0, (2 - q ^ -1) - q, 0, -(E(3, 2)) + E(3, 2) * q ^ -1 + E(3, 2) * q, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ((-(E(3, 2)) - 2 * E(3)) + E(3) * q ^ -1) - q, 0, ((2 - q ^ -1) - 2q) + q ^ 2, 0, 0], [-(E(3)) + E(3) * q, E(3) - E(3) * q, 0, -2 * E(3) + E(3) * q ^ -1 + E(3) * q, 0, 0, 0, 0, 0, 0, 0, -(E(3)) + E(3) * q, 0, 0, E(3) - E(3) * q, 0, 0, 0, E(3, 2), 0, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) + E(3, 2) * q, 0, E(3, 2) - E(3, 2) * q, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, -(E(3, 2)) + E(3, 2) * q, 0, 0, 0, 0], [0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q ^ -1, 0, 0, 0, 0, 0, -(E(3, 2)) + E(3, 2) * q, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1 - 2q) + q ^ 2, (E(3) + (-(E(3, 2)) - 2 * E(3)) * q) - q ^ 2, 0, ((3 - q ^ -1) - 3q) + q ^ 2, 0, 0, 0, 0, 0, 0, -1 + q, (1 + (E(3, 2) + 2 * E(3)) * q) - E(3) * q ^ 2, 0, 0, (E(3) - E(3) * q) + E(3) * q ^ 2, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, 0, (-1 + 2q) - q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (((E(3, 2) + 3 * E(3)) - E(3) * q ^ -1) + (-2 * E(3, 2) - 3 * E(3)) * q) - q ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, -2 * E(3, 2) + E(3, 2) * q ^ -1 + E(3, 2) * q, 0, 0, 0, 0, 0, (E(3, 2) + (-(E(3, 2)) + E(3)) * q) - E(3) * q ^ 2, 0, 0, 0, 0, (E(3) - E(3) * q) + E(3) * q ^ 2, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (E(3) + (E(3, 2) - E(3)) * q) - E(3, 2) * q ^ 2, 0, 0, 0], [0, 0, -(E(3)) + E(3) * q, 0, E(3) - E(3) * q, 0, -(E(3)) + E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, 0, 0, E(3) - E(3) * q, E(3) - E(3) * q, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1 + q, 0, 0, -2 + q ^ -1 + q, 0, 0, 0, 0, 0, 0, (2 - q ^ -1) - q, -1 + q, -2 + q ^ -1 + q, 0, 0, -2 + q ^ -1 + q, 0, 1 - q, 0, 0, 0, E(3) - E(3) * q, 1 - q, 0, 0, E(3), 0, 0, -1 + q ^ -1, 0, 0, 0, 0, 0, 0, (2 - q ^ -1) - q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1 - q ^ -1, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 1 - q, 0, 1, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -2 * E(3, 2) + E(3, 2) * q ^ -1 + E(3, 2) * q, 0, (2 * E(3, 2) + E(3) + q ^ -1) - E(3, 2) * q, 0, ((-2 * E(3, 2) - E(3)) + E(3, 2) * q ^ -1) - q, 0, 0, 0, 0, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, 0, 0, 0, 0, ((2 * E(3, 2) - E(3, 2) * q ^ -1) - 2 * E(3, 2) * q) + E(3, 2) * q ^ 2, 0, 0, (2 * E(3, 2) - E(3, 2) * q ^ -1) - E(3, 2) * q, -1 + q ^ -1 + q, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2 * E(3) + E(3) * q ^ -1 + E(3) * q, 0, 0, 0], [(1 + (E(3, 2) + 2 * E(3)) * q) - E(3) * q ^ 2, 0, 0, (((-2 * E(3, 2) - 3 * E(3)) - q ^ -1) + (E(3, 2) + 3 * E(3)) * q) - E(3) * q ^ 2, 0, 0, 0, 0, 0, 0, (-3 + q ^ -1 + 3q) - q ^ 2, (-(E(3)) + 2 * E(3) * q) - E(3) * q ^ 2, ((3 - q ^ -1) - 3q) + q ^ 2, 0, 0, ((2 - q ^ -1) - 2q) + q ^ 2, 0, (E(3) + (-(E(3, 2)) - 2 * E(3)) * q) - q ^ 2, 0, 0, 0, (E(3, 2) - E(3, 2) * q) + E(3, 2) * q ^ 2, (-1 + 2q) - q ^ 2, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, (2 - q ^ -1) - q, 0, 0, 0, 0, 0, 0, (-3 + q ^ -1 + 3q) - q ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, 0, 0, 0], [0, 0, -1 + q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 1 - q, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0, 0, (E(3, 2) - 2 * E(3, 2) * q) + E(3, 2) * q ^ 2, 0, 0, 0, E(3) - E(3) * q, 0, q, 1 - q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -q + q ^ 2, 0, 0, 1 - q, 0, 0, 0, (-(E(3)) + E(3) * q) - E(3) * q ^ 2, 0, (E(3) + (E(3, 2) - E(3)) * q) - E(3, 2) * q ^ 2, 0, 0, (E(3) - E(3) * q) + E(3) * q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, -(E(3)) + (-(E(3, 2)) + E(3)) * q + E(3, 2) * q ^ 2, 0, 0, 0, 0], [0, 0, ((E(3, 2) - E(3)) + E(3) * q ^ -1) - E(3, 2) * q, 0, 0, -2 + q ^ -1 + q, (2 * E(3, 2) - E(3, 2) * q ^ -1) - E(3, 2) * q, 0, 0, 0, 0, ((3 - q ^ -1) - 3q) + q ^ 2, (-(E(3, 2)) + E(3) + E(3, 2) * q ^ -1) - E(3) * q, 0, 0, 0, 0, -2 + q ^ -1 + q, 0, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, 0, 0, 0, ((2 - q ^ -1) - 2q) + q ^ 2, 0, 0, 0, -1 + q ^ -1 + q, 0, E(3, 2) - E(3, 2) * q, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 1 - q, 0, 0, 0, 0, (-(E(3)) + E(3) * q) - E(3) * q ^ 2, (E(3) + (E(3, 2) - E(3)) * q) - E(3, 2) * q ^ 2, 0, 0, 0, 0, 0, (1 - q) + q ^ 2, 0, 0, 0, 0, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, -(E(3)) + (-(E(3, 2)) + E(3)) * q + E(3, 2) * q ^ 2, 0, 0, 0], [(-1 + 2q) - q ^ 2, (((2 * E(3, 2) - E(3)) - E(3, 2) * q ^ -1) + (-(E(3, 2)) + 2 * E(3)) * q) - E(3) * q ^ 2, E(3) + (E(3, 2) - 2 * E(3)) * q + (-2 * E(3, 2) + E(3)) * q ^ 2 + E(3, 2) * q ^ 3, ((((7 * E(3, 2) + E(3, 2) * q ^ -2) - 4 * E(3, 2) * q ^ -1) - 7 * E(3, 2) * q) + 4 * E(3, 2) * q ^ 2) - E(3, 2) * q ^ 3, 0, (((-(E(3, 2)) + 2 * E(3)) - E(3) * q ^ -1) + (2 * E(3, 2) - E(3)) * q) - E(3, 2) * q ^ 2, ((3 * E(3, 2) - E(3, 2) * q ^ -1) - 3 * E(3, 2) * q) + E(3, 2) * q ^ 2, ((2 * E(3, 2) - E(3)) - E(3, 2) * q ^ -1) + (-2 * E(3, 2) + E(3)) * q + E(3, 2) * q ^ 2, 0, ((2 - q ^ -1) - 2q) + q ^ 2, (((-5 * E(3, 2) + 2 * E(3)) - E(3, 2) * q ^ -2) + (3 * E(3, 2) - E(3)) * q ^ -1 + (5 * E(3, 2) - E(3)) * q) - 2 * E(3, 2) * q ^ 2, (((3 * E(3, 2) - E(3)) - E(3, 2) * q ^ -1) + (-4 * E(3, 2) + 2 * E(3)) * q + (3 * E(3, 2) - E(3)) * q ^ 2) - E(3, 2) * q ^ 3, (E(3, 2) - 2 * E(3)) + E(3, 2) * q ^ -2 + (-2 * E(3, 2) + E(3)) * q ^ -1 + E(3) * q, (-1 + 2q) - q ^ 2, ((-(E(3, 2)) + 2 * E(3, 2) * q) - 2 * E(3, 2) * q ^ 2) + E(3, 2) * q ^ 3, (2 * E(3, 2) - 2 * E(3)) + E(3, 2) * q ^ -2 + (-2 * E(3, 2) + E(3)) * q ^ -1 + (-2 * E(3, 2) + E(3)) * q + E(3, 2) * q ^ 2, 0, -2 * E(3, 2) + E(3) + E(3, 2) * q ^ -1 + (E(3, 2) - 2 * E(3)) * q + E(3) * q ^ 2, (-1 + 2q) - q ^ 2, (-2 * E(3, 2) + E(3) + E(3, 2) * q ^ -1 + (2 * E(3, 2) - E(3)) * q) - E(3, 2) * q ^ 2, 0, (-2 + q ^ -1 + 2q) - q ^ 2, -3 * E(3, 2) + E(3) + E(3, 2) * q ^ -1 + (4 * E(3, 2) - 2 * E(3)) * q + (-3 * E(3, 2) + E(3)) * q ^ 2 + E(3, 2) * q ^ 3, (-(E(3, 2)) - 3 * E(3)) + E(3) * q ^ -1 + (2 * E(3, 2) + 4 * E(3)) * q + (-(E(3, 2)) - 3 * E(3)) * q ^ 2 + E(3) * q ^ 3, 0, -2 + q ^ -1 + q, (E(3) - E(3) * q) + E(3) * q ^ 2, (-2 + q ^ -1 + 2q) - q ^ 2, ((2 * E(3, 2) - E(3)) + E(3, 2) * q ^ -2 + (-2 * E(3, 2) + E(3)) * q ^ -1) - E(3, 2) * q, (E(3, 2) - 2 * E(3, 2) * q) + E(3, 2) * q ^ 2, (-2 * E(3, 2) + E(3) + E(3, 2) * q ^ -1 + (2 * E(3, 2) - E(3)) * q) - E(3, 2) * q ^ 2, E(3) - E(3) * q, (1 - q) + q ^ 2, 0, 0, ((((-5 * E(3, 2) + 2 * E(3)) - E(3, 2) * q ^ -2) + (3 * E(3, 2) - E(3)) * q ^ -1 + (6 * E(3, 2) - E(3)) * q) - 4 * E(3, 2) * q ^ 2) + E(3, 2) * q ^ 3, 0, (((2 * E(3, 2) - E(3)) - E(3, 2) * q ^ -1) + (-2 * E(3, 2) + 2 * E(3)) * q + (2 * E(3, 2) - E(3)) * q ^ 2) - E(3, 2) * q ^ 3, 0, 0], [0, -2 + q ^ -1 + q, (1 - 2q) + q ^ 2, ((-4 - q ^ -2) + 3 * q ^ -1 + 3q) - q ^ 2, 0, (2 - q ^ -1) - q, -2 + q ^ -1 + q, -2 + q ^ -1 + q, 0, -2 * E(3) + E(3) * q ^ -1 + E(3) * q, (((-3 * E(3, 2) - 4 * E(3)) + q ^ -2) - 3 * q ^ -1) + (E(3, 2) + 2 * E(3)) * q, (-3 + q ^ -1 + 3q) - q ^ 2, (-1 - q ^ -2) + 2 * q ^ -1, E(3) - E(3) * q, (1 - 2q) + q ^ 2, ((3 * E(3, 2) + 2 * E(3)) - q ^ -2) + (-3 * E(3, 2) - 2 * E(3)) * q ^ -1 + q, 0, (2 - q ^ -1) - q, E(3) - E(3) * q, (2 - q ^ -1) - q, 0, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, ((3 - q ^ -1) - 3q) + q ^ 2, ((2 * E(3, 2) - E(3)) - E(3, 2) * q ^ -1) + (-2 * E(3, 2) + E(3)) * q + E(3, 2) * q ^ 2, 0, E(3) - E(3) * q ^ -1, 1 - q, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, (-1 - q ^ -2) + 2 * q ^ -1, -1 + q, (2 - q ^ -1) - q, 1, E(3, 2) - E(3, 2) * q, 1, 0, (((4 + q ^ -2) - 3 * q ^ -1) - 3q) + q ^ 2, 0, (3 * E(3, 2) + 2 * E(3) + q ^ -1 + (-3 * E(3, 2) - 2 * E(3)) * q) - q ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)) * q, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0], [0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0], [-(E(3, 2)) + E(3, 2) * q, E(3, 2) - E(3, 2) * q, -(E(3, 2)) + E(3, 2) * q, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0], [0, 0, 0, -1 + q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 1 - q, 0, E(3) - E(3) * q, E(3) * q], [((3 - q ^ -1) - 3q) + q ^ 2, (-3 + q ^ -1 + 3q) - q ^ 2, ((3 - q ^ -1) - 3q) + q ^ 2, -(E(3, 2)) + E(3, 2) * q, 0, -(E(3, 2)) + E(3, 2) * q ^ -1, 0, -2 + q ^ -1 + q, -1 + q, (E(3, 2) - E(3, 2) * q ^ -1) - E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2 - q ^ -1) - q, ((E(3, 2) + 2 * E(3)) - E(3) * q ^ -1) + q, ((-(E(3, 2)) - 2 * E(3)) + E(3) * q ^ -1) - q, (-2 + q ^ -1 + 2q) - q ^ 2, -(E(3, 2)) + E(3, 2) * q ^ -1 + E(3, 2) * q, E(3, 2) - E(3, 2) * q]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-q, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -q, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0], [1 - q, 0, 1 - q, 0, 1 - q ^ -1, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 - q, 0, 0, 1 - q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 - q, 0, 0, 1 - q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -2 + q ^ -1 + q, 0, 0, -1 + q ^ -1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-2 + q ^ -1 + q, (2 - q ^ -1) - q, (-1 + 2q) - q ^ 2, ((3 - q ^ -1) - 3q) + q ^ 2, -2 + q ^ -1 + q, 0, (2 - q ^ -1) - q, (2 - q ^ -1) - q, -(E(3)) + E(3) * q, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, E(3) - E(3) * q, (1 - 2q) + q ^ 2, 0, 0, (-1 + 2q) - q ^ 2, 0, (3 * E(3, 2) + 2 * E(3) + q ^ -1 + (-3 * E(3, 2) - 2 * E(3)) * q) - q ^ 2, 0, -(E(3)) + E(3) * q, -2 + q ^ -1 + q, -2 + q ^ -1 + q, 0, (-1 + 2q) - q ^ 2, 0, E(3, 2) - E(3, 2) * q, 0, -1 + q, 0, 0, 0, 0, 0, 0, -1, -2 + q ^ -1 + q, (-1 + 2q) - q ^ 2, -2 + q ^ -1 + q, ((-3 * E(3, 2) - 2 * E(3)) - q ^ -1) + (3 * E(3, 2) + 2 * E(3)) * q + q ^ 2, -2 * E(3) + E(3) * q ^ -1 + E(3) * q, E(3) - E(3) * q], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, -1 + q, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0], [(2 * E(3) - E(3) * q ^ -1) - E(3) * q, -2 * E(3) + E(3) * q ^ -1 + E(3) * q, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, (-3 * E(3) + E(3) * q ^ -1 + 3 * E(3) * q) - E(3) * q ^ 2, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, 0, -2 * E(3) + E(3) * q ^ -1 + E(3) * q, -2 * E(3) + E(3) * q ^ -1 + E(3) * q, E(3, 2) - E(3, 2) * q, -2 * E(3, 2) + E(3, 2) * q ^ -1 + E(3, 2) * q, -(E(3, 2)) + E(3, 2) * q, (-(E(3)) + 2 * E(3) * q) - E(3) * q ^ 2, 0, 0, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, 0, ((E(3, 2) + 3 * E(3)) - E(3) * q ^ -1) + (-(E(3, 2)) - 3 * E(3)) * q + E(3) * q ^ 2, 0, E(3, 2) - E(3, 2) * q, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, 0, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, 0, -1 + q, 0, E(3) - E(3) * q, 0, 0, 0, 0, E(3), 0, E(3), (2 * E(3) - E(3) * q ^ -1) - E(3) * q, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, ((-(E(3, 2)) - 3 * E(3)) + E(3) * q ^ -1 + (E(3, 2) + 3 * E(3)) * q) - E(3) * q ^ 2, (2 * E(3, 2) - E(3, 2) * q ^ -1) - E(3, 2) * q, -(E(3, 2)) + E(3, 2) * q], [(-(E(3)) + 2 * E(3) * q) - E(3) * q ^ 2, (-1 + 2q) - q ^ 2, (-(E(3)) + 2 * E(3) * q) - E(3) * q ^ 2, (-(E(3, 2)) + 2 * E(3, 2) * q) - E(3, 2) * q ^ 2, (2 * E(3, 2) - E(3, 2) * q ^ -1) - E(3, 2) * q, (2 - q ^ -1) - q, (-(E(3, 2)) + 2 * E(3, 2) * q) - E(3, 2) * q ^ 2, E(3) - E(3) * q, (-(E(3, 2)) + 2 * E(3, 2) * q) - E(3, 2) * q ^ 2, -(E(3)) + E(3) * q, (E(3, 2) - 2 * E(3, 2) * q) + E(3, 2) * q ^ 2, (-1 + 2q) - q ^ 2, 0, 0, -q + q ^ 2, 0, (1 - 2q) + q ^ 2, 0, 0, -(E(3)) + E(3) * q, 1 - q, 0, E(3) * q - E(3) * q ^ 2, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, -(E(3)) + E(3) * q, (E(3, 2) - 2 * E(3, 2) * q) + E(3, 2) * q ^ 2, (1 - 2q) + q ^ 2, (-1 + 2q) - q ^ 2, E(3) - E(3) * q, 0], [1 - q, 0, 0, 0, 1 - q, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 + q]], [[0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-2 + q ^ -1 + q, (2 - q ^ -1) - q, (-1 + 2q) - q ^ 2, ((3 - q ^ -1) - 3q) + q ^ 2, -2 + q ^ -1 + q, 0, (2 - q ^ -1) - q, (2 - q ^ -1) - q, -(E(3)) + E(3) * q, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, E(3) - E(3) * q, (1 - 2q) + q ^ 2, 0, 0, (-1 + 2q) - q ^ 2, 0, (3 * E(3, 2) + 2 * E(3) + q ^ -1 + (-3 * E(3, 2) - 2 * E(3)) * q) - q ^ 2, 0, -(E(3)) + E(3) * q, -2 + q ^ -1 + q, -2 + q ^ -1 + q, 0, (-1 + 2q) - q ^ 2, 0, E(3, 2) - E(3, 2) * q, 0, -1 + q, 0, 0, 0, 0, 0, 0, -1, -2 + q ^ -1 + q, (-1 + 2q) - q ^ 2, -2 + q ^ -1 + q, ((-3 * E(3, 2) - 2 * E(3)) - q ^ -1) + (3 * E(3, 2) + 2 * E(3)) * q + q ^ 2, -2 * E(3) + E(3) * q ^ -1 + E(3) * q, E(3) - E(3) * q], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 - q, 0, 0, 1 - q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, -1 + q, 0, 0, 0, 0, 0, 0, 0], [(-3 * E(3, 2) + E(3, 2) * q ^ -1 + (4 * E(3, 2) + E(3)) * q + (-3 * E(3, 2) - 2 * E(3)) * q ^ 2) - q ^ 3, (3 * E(3, 2) - E(3, 2) * q ^ -1) + (-4 * E(3, 2) - E(3)) * q + (3 * E(3, 2) + 2 * E(3)) * q ^ 2 + q ^ 3, ((-4 * E(3, 2) - 2 * E(3)) - q ^ -1) + (6 * E(3, 2) + 2 * E(3)) * q + (-4 * E(3, 2) - E(3)) * q ^ 2 + E(3, 2) * q ^ 3, (E(3, 2) - 3 * E(3)) + E(3) * q ^ -1 + (-2 * E(3, 2) + 4 * E(3)) * q + (E(3, 2) - 3 * E(3)) * q ^ 2 + E(3) * q ^ 3, ((2 * E(3) - E(3) * q ^ -1) - 2 * E(3) * q) + E(3) * q ^ 2, (2 - q ^ -1) - q, (-2 * E(3) + E(3) * q ^ -1 + 2 * E(3) * q) - E(3) * q ^ 2, ((3 * E(3, 2) - E(3, 2) * q ^ -1) - 3 * E(3, 2) * q) + E(3, 2) * q ^ 2, 0, ((3 - q ^ -1) - 3q) + q ^ 2, 0, E(3, 2) + (-2 * E(3, 2) + E(3)) * q + (E(3, 2) - 2 * E(3)) * q ^ 2 + E(3) * q ^ 3, 0, E(3) - E(3) * q, (-(E(3, 2)) + (2 * E(3, 2) - E(3)) * q + (-(E(3, 2)) + 2 * E(3)) * q ^ 2) - E(3) * q ^ 3, 0, (((3 * E(3) - E(3) * q ^ -1) - 4 * E(3) * q) + 3 * E(3) * q ^ 2) - E(3) * q ^ 3, 0, -1 + (-2 * E(3, 2) - E(3)) * q + E(3, 2) * q ^ 2, ((2 * E(3) - E(3) * q ^ -1) - 2 * E(3) * q) + E(3) * q ^ 2, ((2 * E(3) - E(3) * q ^ -1) - 2 * E(3) * q) + E(3) * q ^ 2, 0, (-(E(3, 2)) + (2 * E(3, 2) - E(3)) * q + (-(E(3, 2)) + 2 * E(3)) * q ^ 2) - E(3) * q ^ 3, 0, (-1 + q) - q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, E(3) - E(3) * q, (((-(E(3, 2)) + 2 * E(3)) - E(3) * q ^ -1) + (2 * E(3, 2) - E(3)) * q) - E(3, 2) * q ^ 2, ((E(3) - 3 * E(3) * q) + 3 * E(3) * q ^ 2) - E(3) * q ^ 3, (((-(E(3, 2)) + 2 * E(3)) - E(3) * q ^ -1) + (2 * E(3, 2) - E(3)) * q) - E(3, 2) * q ^ 2, (((4 * E(3, 2) - E(3, 2) * q ^ -1) - 6 * E(3, 2) * q) + 4 * E(3, 2) * q ^ 2) - E(3, 2) * q ^ 3, (((3 * E(3, 2) + E(3)) - E(3, 2) * q ^ -1) + (-3 * E(3, 2) - 2 * E(3)) * q) - q ^ 2, -(E(3, 2)) + (2 * E(3, 2) + E(3)) * q + q ^ 2], [q - q ^ 2, -q + q ^ 2, q - q ^ 2, 0, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, -q + q ^ 2, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, -1 + q, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q]], [[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [q - q ^ 2, 0, q - q ^ 2, 0, -1 + q, 0, 0, 0, -q + q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 - q, 0, 0, 1 - q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1 - q ^ -1, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 1 - q, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(-1 + 2q) - q ^ 2, (1 - 2q) + q ^ 2, (q - 2 * q ^ 2) + q ^ 3, ((1 - 3q) + 3 * q ^ 2) - q ^ 3, (-1 + 2q) - q ^ 2, 0, (1 - 2q) + q ^ 2, (1 - 2q) + q ^ 2, E(3) * q - E(3) * q ^ 2, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, -(E(3)) * q + E(3) * q ^ 2, (-q + 2 * q ^ 2) - q ^ 3, 0, 0, (q - 2 * q ^ 2) + q ^ 3, 0, -1 + (-3 * E(3, 2) - 2 * E(3)) * q + (3 * E(3, 2) + 2 * E(3)) * q ^ 2 + q ^ 3, 0, E(3) * q - E(3) * q ^ 2, (-1 + 2q) - q ^ 2, (-1 + 2q) - q ^ 2, 0, (q - 2 * q ^ 2) + q ^ 3, 0, -(E(3, 2)) * q + E(3, 2) * q ^ 2, 0, q - q ^ 2, 0, 0, 0, 0, q, 0, q, (-1 + 2q) - q ^ 2, (q - 2 * q ^ 2) + q ^ 3, (-1 + 2q) - q ^ 2, (1 + (3 * E(3, 2) + 2 * E(3)) * q + (-3 * E(3, 2) - 2 * E(3)) * q ^ 2) - q ^ 3, (-(E(3)) + 2 * E(3) * q) - E(3) * q ^ 2, -(E(3)) * q + E(3) * q ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [-1 + q, 1 - q, -1 + q, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 1 - q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1 + q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 - q, 0, 0, 1 - q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [-1 + q, 1 - q, -1 + q, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [q - q ^ 2, 0, q - q ^ 2, 0, -1 + q, 0, 0, -q, -q + q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-2 + q ^ -1 + q, (2 - q ^ -1) - q, (-1 + 2q) - q ^ 2, ((3 - q ^ -1) - 3q) + q ^ 2, -2 + q ^ -1 + q, 0, (2 - q ^ -1) - q, (2 - q ^ -1) - q, -(E(3)) + E(3) * q, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, E(3) - E(3) * q, (1 - 2q) + q ^ 2, 0, 0, (-1 + 2q) - q ^ 2, 0, (3 * E(3, 2) + 2 * E(3) + q ^ -1 + (-3 * E(3, 2) - 2 * E(3)) * q) - q ^ 2, 0, -(E(3)) + E(3) * q, -2 + q ^ -1 + q, -2 + q ^ -1 + q, 0, (-1 + 2q) - q ^ 2, 0, E(3, 2) - E(3, 2) * q, 0, -1 + q, 0, 0, 0, 0, -1 + q, 0, -1, -2 + q ^ -1 + q, (-1 + 2q) - q ^ 2, -2 + q ^ -1 + q, ((-3 * E(3, 2) - 2 * E(3)) - q ^ -1) + (3 * E(3, 2) + 2 * E(3)) * q + q ^ 2, -2 * E(3) + E(3) * q ^ -1 + E(3) * q, E(3) - E(3) * q], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, (-1 + 2q) - q ^ 2, (-q + 2 * q ^ 2) - q ^ 3, ((-3 + q ^ -1 + 4q) - 3 * q ^ 2) + q ^ 3, 0, (1 - 2q) + q ^ 2, (-1 + 2q) - q ^ 2, (-1 + 2q) - q ^ 2, 0, (-(E(3)) + 2 * E(3) * q) - E(3) * q ^ 2, (3 - q ^ -1) + (3 * E(3, 2) + 4 * E(3)) * q + (-(E(3, 2)) - 2 * E(3)) * q ^ 2, ((-1 + 3q) - 3 * q ^ 2) + q ^ 3, -2 + q ^ -1 + q, -(E(3)) * q + E(3) * q ^ 2, (-q + 2 * q ^ 2) - q ^ 3, (3 * E(3, 2) + 2 * E(3) + q ^ -1 + (-3 * E(3, 2) - 2 * E(3)) * q) - q ^ 2, 0, (1 - 2q) + q ^ 2, -(E(3)) * q + E(3) * q ^ 2, (1 - 2q) + q ^ 2, 0, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, ((1 - 3q) + 3 * q ^ 2) - q ^ 3, (E(3, 2) + (-2 * E(3, 2) + E(3)) * q + (2 * E(3, 2) - E(3)) * q ^ 2) - E(3, 2) * q ^ 3, 0, E(3) - E(3) * q, -q + q ^ 2, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, -2 + q ^ -1 + q, q - q ^ 2, (1 - 2q) + q ^ 2, -q, -(E(3, 2)) * q + E(3, 2) * q ^ 2, 0, 0, (((3 - q ^ -1) - 4q) + 3 * q ^ 2) - q ^ 3, 0, -1 + (-3 * E(3, 2) - 2 * E(3)) * q + (3 * E(3, 2) + 2 * E(3)) * q ^ 2 + q ^ 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 1 - q, 0, 0, 1 - q, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]
                        end
                    f8 = function (q,)
                            returnq ^ 0 * [[[E(3) - E(3) * q, E(3) * q, 0, -q + q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-(E(3, 2)) + E(3, 2) * q ^ -1 + E(3, 2) * q, E(3, 2) - E(3, 2) * q, 0, -(E(3)) + (-3 + ER(-3)) // 2 * q + q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, E(3), -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-2 + q ^ -1 + q, 1 - q, -(E(3, 2)) + E(3, 2) * q ^ -1, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, E(3, 2) - E(3, 2) * q, (((5 + ER(-3)) // 2 - q ^ -1) + (-2 - ER(-3)) * q) - E(3, 2) * q ^ 2, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) + E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0], [((2 * E(3, 2) - E(3, 2) * q ^ -1) - 2 * E(3, 2) * q) + E(3, 2) * q ^ 2, (-(E(3, 2)) + 2 * E(3, 2) * q) - E(3, 2) * q ^ 2, ((-3 + ER(-3)) // 2 + q ^ -1) - E(3) * q, (-(E(3, 2)) + 2 * E(3, 2) * q) - E(3, 2) * q ^ 2, 0, 0, 0, (1 - q) + q ^ 2, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, (E(3) - ER(-3) * q) - E(3, 2) * q ^ 2, (((3 * E(3, 2) - E(3, 2) * q ^ -1) - 4 * E(3, 2) * q) + 3 * E(3, 2) * q ^ 2) - E(3, 2) * q ^ 3, 0, 0, 0, (E(3) - E(3) * q) + E(3) * q ^ 2, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, (E(3, 2) - 2 * E(3, 2) * q) + E(3, 2) * q ^ 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, E(3, 2) - E(3, 2) * q ^ -1, 0, (1 - 2q) + q ^ 2, 0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0, 0, 0, 0, 0, 0], [0, 0, (((-2 + ER(-3)) - E(3) * q ^ -1) + (5 - ER(-3)) // 2 * q) - q ^ 2, 0, 1 - q, 0, 0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0], [0, 0, (((-2 + ER(-3)) - E(3) * q ^ -1) + (5 - ER(-3)) // 2 * q) - q ^ 2, -(E(3, 2)) + E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0], [0, 0, (ER(-3) - E(3) * q ^ -1) + E(3, 2) * q, 0, E(3, 2) + (2 + ER(-3)) * q + (-5 - ER(-3)) // 2 * q ^ 2 + q ^ 3, 0, 0, 0, 0, 0, 0, (E(3) - E(3) * q) + E(3) * q ^ 2, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, -1 + q, 0, 0, (-1 + 2q) - q ^ 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, ((-4 - q ^ -2) + 3 * q ^ -1 + 3q) - q ^ 2, (ER(-3) - E(3) * q ^ -1) + E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)) + E(3) * q ^ -1 + E(3) * q, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) + E(3, 2) * q, (2 - q ^ -1) - q, 0, 0], [((3 - q ^ -1) - 3q) + q ^ 2, (-1 + 2q) - q ^ 2, 0, 0, ((-1 + 3q) - 3 * q ^ 2) + q ^ 3, (1 - 2q) + q ^ 2, (E(3, 2) * q - 2 * E(3, 2) * q ^ 2) + E(3, 2) * q ^ 3, (E(3) - ER(-3) * q) - E(3, 2) * q ^ 2, 0, -1 + q, 0, (E(3) - ER(-3) * q) - E(3, 2) * q ^ 2, 0, 0, -(E(3, 2)) + E(3, 2) * q, 0, -1, 0, 0, 0, 0, 0, (-1 + 2q) - q ^ 2, 0, 1 - q, E(3, 2) * q - E(3, 2) * q ^ 2, 0, 0, 0, 0], [0, 0, ((-4 * E(3) - E(3) * q ^ -2) + 3 * E(3) * q ^ -1 + 3 * E(3) * q) - E(3) * q ^ 2, 0, ((-3 + ER(-3)) // 2 + q ^ -1) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) + E(3, 2) * q ^ -1 + E(3, 2) * q, 0, 0, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, 0, 0], [-2 + q ^ -1 + q, 0, 0, (-3 + q ^ -1 + 3q) - q ^ 2, (((1 - 3 * ER(-3)) + ER(-3) * q ^ -1 + (-5 + 7 * ER(-3)) // 2 * q) - 4 * E(3) * q ^ 2) + E(3) * q ^ 3, (((-1 + 2 * ER(-3)) - ER(-3) * q ^ -1) - 3 * E(3) * q) + E(3) * q ^ 2, (((-3 + ER(-3)) // 2 + (7 - ER(-3)) // 2 * q) - 3 * q ^ 2) + q ^ 3, (((4 * E(3, 2) - E(3, 2) * q ^ -1) + (2 + 3 * ER(-3)) * q) - 2 * ER(-3) * q ^ 2) + E(3) * q ^ 3, 0, (((5 + ER(-3)) // 2 - q ^ -1) + (-2 - ER(-3)) * q) - E(3, 2) * q ^ 2, 0, (((-2 - ER(-3)) - E(3, 2) * q ^ -1) + (5 + ER(-3)) // 2 * q) - q ^ 2, ((-3 + ER(-3)) // 2 + q ^ -1) - E(3) * q, ((3 - q ^ -1) - 3q) + q ^ 2, -2 + q ^ -1 + q, (-1 + 2q) - q ^ 2, 0, -1 + q, -1, 0, (-(E(3, 2)) - ER(-3) * q) + E(3) * q ^ 2, 0, (-3 * E(3) + E(3) * q ^ -1 + 3 * E(3) * q) - E(3) * q ^ 2, 0, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, (-1 + 2q) - q ^ 2, (1 - 2q) + q ^ 2, (2 * E(3, 2) - E(3, 2) * q ^ -1) - E(3, 2) * q, 0, -(E(3)) + E(3) * q], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, 0, 0, 0], [(-4 + 2 * q ^ -1 + 3q) - q ^ 2, (1 - 2q) + q ^ 2, 0, -2 + q ^ -1 + q, 0, 0, 0, (((-1 - 2 * ER(-3)) - E(3, 2) * q ^ -1) + (1 + 5 * ER(-3)) // 2 * q) - ER(-3) * q ^ 2, 0, ((5 + ER(-3)) // 2 - q ^ -1) + (-3 - ER(-3)) // 2 * q, 0, 0, 0, (2 - q ^ -1) - q, 0, -1 + q, 0, 0, 0, 0, E(3) - E(3) * q, 0, 0, 0, 0, 0, 1 - q, 0, 0, -(E(3))], [0, 0, 0, 0, ((2 - ER(-3)) + E(3) * q ^ -1 + (-7 + ER(-3)) // 2 * q + 3 * q ^ 2) - q ^ 3, 0, 0, 0, 0, 0, 0, (((-1 - 2 * ER(-3)) - E(3, 2) * q ^ -1) + (1 + 5 * ER(-3)) // 2 * q) - ER(-3) * q ^ 2, -2 + q ^ -1 + q, 0, (2 * E(3, 2) - E(3, 2) * q ^ -1) - E(3, 2) * q, 0, 0, -1 + q, 0, -1 + q ^ -1, 0, E(3) - E(3) * q, (1 - 2q) + q ^ 2, 0, 0, 0, -1 + q, 0, -(E(3, 2)), 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0], [5 + 2 * ER(-3) + (-3 - ER(-3)) // 2 * q ^ -1 + (-6 - 3 * ER(-3)) * q + (3 + 2 * ER(-3)) * q ^ 2 + E(3, 2) * q ^ 3, ((E(3, 2) - 3 * E(3, 2) * q) + 3 * E(3, 2) * q ^ 2) - E(3, 2) * q ^ 3, 0, (((4 - q ^ -1) - 6q) + 4 * q ^ 2) - q ^ 3, (((-3 + 7 * ER(-3)) // 2 - ER(-3) * q ^ -1) + (11 - 9 * ER(-3)) // 2 * q + (-15 + 5 * ER(-3)) // 2 * q ^ 2 + (9 - ER(-3)) // 2 * q ^ 3) - q ^ 4, ((3 - 5 * ER(-3)) // 2 + ER(-3) * q ^ -1 + (-4 + 2 * ER(-3)) * q + (7 - ER(-3)) // 2 * q ^ 2) - q ^ 3, ((3 - ER(-3)) // 2 + (-9 + ER(-3)) // 2 * q + (5 + ER(-3)) * q ^ 2 + (-5 - 3 * ER(-3)) // 2 * q ^ 3) - E(3, 2) * q ^ 4, (3 + 5 * ER(-3)) // 2 + E(3, 2) * q ^ -1 + (-3 - 11 * ER(-3)) // 2 * q + 6 * ER(-3) * q ^ 2 + (1 - 3 * ER(-3)) * q ^ 3 + E(3) * q ^ 4, (1 + (-3 + ER(-3)) // 2 * q) - E(3) * q ^ 2, ((-4 - ER(-3)) + q ^ -1 + (11 + 5 * ER(-3)) // 2 * q + (-3 - 2 * ER(-3)) * q ^ 2) - E(3, 2) * q ^ 3, -(E(3)) + E(3) * q, ((3 + 5 * ER(-3)) // 2 + E(3, 2) * q ^ -1 + (-3 - 9 * ER(-3)) // 2 * q + (1 + 7 * ER(-3)) // 2 * q ^ 2) - ER(-3) * q ^ 3, ((3 - q ^ -1) - 3q) + q ^ 2, -3 + q ^ -1 + (9 + ER(-3)) // 2 * q + (-7 - ER(-3)) // 2 * q ^ 2 + q ^ 3, (-3 * E(3, 2) + E(3, 2) * q ^ -1 + 3 * E(3, 2) * q) - E(3, 2) * q ^ 2, (1 + (-5 - ER(-3)) // 2 * q + (5 + ER(-3)) // 2 * q ^ 2) - q ^ 3, 0, (1 - 2q) + q ^ 2, 0, (2 - q ^ -1) - q, E(3, 2) + (1 + 3 * ER(-3)) // 2 * q + (1 - 3 * ER(-3)) // 2 * q ^ 2 + E(3) * q ^ 3, (E(3, 2) + ER(-3) * q) - E(3) * q ^ 2, (-3 + ER(-3)) // 2 + (4 - ER(-3)) * q + (-7 + ER(-3)) // 2 * q ^ 2 + q ^ 3, -1, (2 - ER(-3)) + E(3) * q ^ -1 + (-5 + ER(-3)) // 2 * q + q ^ 2, 1 + (-5 - ER(-3)) // 2 * q + (2 + ER(-3)) * q ^ 2 + E(3, 2) * q ^ 3, (q - 2 * q ^ 2) + q ^ 3, (-(E(3, 2)) + 2 * E(3, 2) * q) - E(3, 2) * q ^ 2, E(3, 2) - E(3, 2) * q, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, -1 + q, 0, 0], [0, 0, (((-4 - q ^ -2) + 3 * q ^ -1 + 4q) - 3 * q ^ 2) + q ^ 3, 0, (-(E(3)) + 2 * E(3) * q) - E(3) * q ^ 2, 0, 0, 0, 0, 0, 0, (((3 * E(3) - E(3) * q ^ -1) - 4 * E(3) * q) + 3 * E(3) * q ^ 2) - E(3) * q ^ 3, ((2 - q ^ -1) - 2q) + q ^ 2, 0, (2 * E(3) - E(3) * q ^ -1) - E(3) * q, 0, 0, (1 - 2q) + q ^ 2, 0, 0, 0, (-(E(3)) + E(3) * q) - E(3) * q ^ 2, E(3, 2) - E(3, 2) * q, 0, 0, 0, (-(E(3, 2)) + 2 * E(3, 2) * q) - E(3, 2) * q ^ 2, ((2 - q ^ -1) - 2q) + q ^ 2, E(3, 2) - E(3, 2) * q, 0], [((-5 + 2 * q ^ -1 + 5q) - 3 * q ^ 2) + q ^ 3, ((2 - 4q) + 3 * q ^ 2) - q ^ 3, (1 - 2q) + q ^ 2, ((-(ER(-3)) - E(3, 2) * q ^ -1) + (-5 + ER(-3)) // 2 * q + 3 * q ^ 2) - q ^ 3, 0, 0, 0, ((-1 - 2 * ER(-3)) - E(3, 2) * q ^ -1) + (1 + 3 * ER(-3)) * q + (-1 - 5 * ER(-3)) // 2 * q ^ 2 + ER(-3) * q ^ 3, 0, ((7 + ER(-3)) // 2 - q ^ -1) + (-4 - ER(-3)) * q + (3 + ER(-3)) // 2 * q ^ 2, 0, 0, 0, ((2 - q ^ -1) - 2q) + q ^ 2, 0, (-1 + 2q) - q ^ 2, 0, 0, 0, 0, (-(E(3, 2)) + E(3, 2) * q) - E(3, 2) * q ^ 2, 0, 0, 0, 0, 0, 0, E(3) - E(3) * q, 0, E(3, 2) - E(3, 2) * q]], [[0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1 - 2q) + q ^ 2, q - q ^ 2, 0, 0, -(E(3)) + E(3) * q, -1 + q, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1 + q, 0, 0, 0, E(3) - E(3) * q, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, q - q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0, 1 - q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), 0], [0, 0, 0, 0, -q + q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [((-2 + ER(-3)) - E(3) * q ^ -1) + (4 - ER(-3)) * q + (-7 + ER(-3)) // 2 * q ^ 2 + q ^ 3, (-(E(3)) + (-2 + ER(-3)) * q + (5 - ER(-3)) // 2 * q ^ 2) - q ^ 3, 0, (-(E(3)) + 2 * E(3) * q) - E(3) * q ^ 2, 1 + 2 * ER(-3) + E(3, 2) * q ^ -1 + (-1 - 5 * ER(-3)) // 2 * q + ER(-3) * q ^ 2, 0, -(E(3)) + (-2 + ER(-3)) * q + (3 - ER(-3)) // 2 * q ^ 2, 0, (-(E(3)) + 2 * E(3) * q) - E(3) * q ^ 2, 0, -(E(3)) + E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)) + E(3) * q, 0, 0, 0, 0, -1 + q, E(3) * q, 0, 0, 0, 0], [(1 - 2q) + q ^ 2, 1 - q, 0, (1 - 2q) + q ^ 2, (1 - 2q) + q ^ 2, (-5 - ER(-3)) // 2 + q ^ -1 + (3 + ER(-3)) // 2 * q, 0, 0, 1 - q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (2 - q ^ -1) - q, 0, 0, 1 - q, 0, E(3, 2), 0, 0, 0, 0, 0], [0, 0, -(E(3)) + E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, E(3), 0, 0], [0, 0, q - q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) * q - E(3, 2) * q ^ 2, 1 - q, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) * q, 0, 0, 0, 0, 0, 0, -1 + q, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q]], [[0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 - q, q, 0, 1 - q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, E(3) * q, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -(E(3)) + E(3) * q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 - q, 0, 0, (1 - 2q) + q ^ 2, (E(3) - 2 * E(3) * q) + E(3) * q ^ 2, (-5 - ER(-3)) // 2 + q ^ -1 + (2 + ER(-3)) * q + E(3, 2) * q ^ 2, -q + q ^ 2, 0, (1 - 2q) + q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, -q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -(E(3, 2)) + E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, ((3 + ER(-3)) // 2 - q ^ -1) + E(3, 2) * q, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3))], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q ^ -1, 0, -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) - E(3) * q, 0, 0, -(E(3)) * q, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1 + q, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q + q ^ 2, 0, 0, -q + q ^ 2, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, E(3) * q, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, -1 + q, 0, 0, 0, 0, 0], [0, 0, 0, -1 + q, (2 - ER(-3)) + E(3) * q ^ -1 + (-5 + ER(-3)) // 2 * q + q ^ 2, 0, -1 + q, 0, -1 + q, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, 0, -1 + q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q ^ -1, 0, -(E(3)) + E(3) * q, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, (-(E(3, 2)) - ER(-3) * q) + E(3) * q ^ 2, 0, 0, 0, 0, 0, -(E(3, 2)) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1 - q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q ^ -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, E(3, 2) * q, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 - q, (((-2 + ER(-3)) - E(3) * q ^ -1) + (5 - ER(-3)) // 2 * q) - q ^ 2, 0, 0, 0, 1 - q, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3, 2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1 - 2q) + q ^ 2, q - q ^ 2, 0, 0, -(E(3)) + E(3) * q, -1 + q, q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, E(3) * q, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)) * q, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 - q, 0, -1 + q, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0], [1 - q, q, 0, -(E(3, 2)) * q + E(3, 2) * q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q - q ^ 2, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, q - q ^ 2, 0, 0, -q + q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0], [0, 0, 0, (-1 + 2q) - q ^ 2, ((5 - 3 * ER(-3)) // 2 + E(3) * q ^ -1 + (-9 + 3 * ER(-3)) // 2 * q + (7 - ER(-3)) // 2 * q ^ 2) - q ^ 3, 0, q - q ^ 2, 0, (-1 + 2q) - q ^ 2, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (1 - 2q) + q ^ 2, 0, 0, q, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, q - q ^ 2, 0, 0, 0, 0, 0, -q + q ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, E(3, 2) * q], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, E(3), 0]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1 + q, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, E(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-2 + q ^ -1 + q, 1 - q, -(E(3, 2)) + E(3, 2) * q ^ -1, 0, 0, 0, 0, E(3, 2) - E(3, 2) * q, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, E(3), 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1 - 2q) + q ^ 2, q - q ^ 2, 0, 0, -(E(3)) + E(3) * q, -1 + q, q, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) * q, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, -(E(3, 2)) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1 + q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0, -(E(3)), 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -q + q ^ 2, -(E(3)) + E(3) * q, 0, 0, 0, 0, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3)), 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 + q, 0, -(E(3, 2)) * q + E(3, 2) * q ^ 2, 0, 0, 0, 0, q, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0], [((4 - 2 * q ^ -1) - 3q) + q ^ 2, (-1 + 2q) - q ^ 2, 0, (2 - q ^ -1) - q, 0, 0, 0, 1 + 2 * ER(-3) + E(3, 2) * q ^ -1 + (-1 - 5 * ER(-3)) // 2 * q + ER(-3) * q ^ 2, 0, (-5 - ER(-3)) // 2 + q ^ -1 + (3 + ER(-3)) // 2 * q, 0, 0, 0, -2 + q ^ -1 + q, 0, 1 - q, 0, 0, 0, 0, -(E(3)) + E(3) * q, 0, 0, 0, 0, 0, -1 + q, 0, 0, E(3)], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1 + q, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) * q, 0, 0, 0, 0, -1 + q, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) + E(3, 2) * q, 0, 0, -(E(3, 2)) + E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, 0], [((-1 - 3 * ER(-3)) // 2 - E(3, 2) * q ^ -1) + (-1 + 5 * ER(-3)) // 2 * q + (1 - 2 * ER(-3)) * q ^ 2 + E(3) * q ^ 3, (-(E(3, 2)) + (-1 - 3 * ER(-3)) // 2 * q + (-1 + 3 * ER(-3)) // 2 * q ^ 2) - E(3) * q ^ 3, 0, (-(E(3, 2)) + 2 * E(3, 2) * q) - E(3, 2) * q ^ 2, (-7 - ER(-3)) // 2 + q ^ -1 + (4 + ER(-3)) * q + (-3 - ER(-3)) // 2 * q ^ 2, 0, -(E(3, 2)) + (-1 - 3 * ER(-3)) // 2 * q + ER(-3) * q ^ 2, 0, (-(E(3, 2)) + 2 * E(3, 2) * q) - E(3, 2) * q ^ 2, 0, -(E(3, 2)) + E(3, 2) * q, 0, 0, 0, 0, 0, 0, 0, 0, -(E(3, 2)) + E(3, 2) * q, 0, 0, 0, 0, -(E(3)) + E(3) * q, E(3, 2) * q, 0, 0, 0, -1 + q]]]
                        end
                    r = [f1(x), f2(x), f3(x, E(3)), f4(x, E(3)), f4(x, E(3, 2)), f3(x, E(3, 2)), [[[-1]], [[-1]], [[-1]], [[-1]], [[-1]]], f8(x), f9(x), f8(1 // x) * -x, f11(x, E(3)), f12(x, E(3)), f13(x, E(3)), f13(x, E(3, 2)), f12(x, E(3, 2)), f11(x, E(3, 2)), f17(x), f1(1 // x) * -x, f13(1 // x, E(3, 2)) * -x, f20(x, E(3)), f20(x, E(3, 2)), f13(1 // x, E(3)) * -x, f23(x), f2(1 // x) * -x, f11(1 // x, E(3, 2)) * -x, f12(1 // x, E(3)) * -x, f12(1 // x, E(3, 2)) * -x, f11(1 // x, E(3)) * -x, f29(x), f4(1 // x, E(3, 2)) * -x, f4(1 // x, E(3)) * -x, f23(1 // x) * -x, f3(1 // x, E(3, 2)) * -x, f3(1 // x, E(3)) * -x, f17(1 // x) * -x, [[[x]], [[x]], [[x]], [[x]], [[x]]]]
                    return r[i]
                end
            return m(i)
        elseif [p, q, r] == [4, 4, 3]
            x = -((para[2])[1]) // (para[2])[2]
            r = x ^ 0 * [[[[x, -1, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, -1 + x, -1, x, 0], [0, 1, -1, -1, 0, x]], [[-1, 0, 0, 0, 0, 0], [-x, x, 0, 0, 0, x], [0, 0, 0, 0, -x, 0], [0, 0, 0, x, 0, 0], [0, 0, -1, 0, -1 + x, 0], [0, 0, 0, 0, 0, -1]], [[x, -1, 0, 0, 0, -1], [0, -1, 0, 0, 0, 0], [0, 0, x, 0, 1, -1], [0, -x, 0, x, -1, 1 - x], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1]]], [[[-1, 0, 0], [0, 0, 1], [0, x, -1 + x]], [[x, 0, 0], [-1, -1, 0], [1, 0, -1]], [[0, 1, 0], [x, -1 + x, 0], [0, 0, -1]]], [[[x, 0, 0], [x, -1, 0], [x, 0, -1]], [[-1, 2, 0], [0, x, 0], [0, (-(E(4)) + 1) * x, -1]], [[-1, 0, 1], [0, -1, (E(4) + 1) // 2], [0, 0, x]]], [[[x, 0, 0], [x, -1, 0], [x, 0, -1]], [[-1, 2, 0], [0, x, 0], [0, (E(4) + 1) * x, -1]], [[-1, 0, 1], [0, -1, (-(E(4)) + 1) // 2], [0, 0, x]]], [[[-1]], [[-1]], [[-1]]], [[[x, -1, 0], [0, -1, 0], [0, -1, x]], [[-1 + x, 0, 1], [0, x, 0], [x, 0, 0]], [[0, x, 0], [1, -1 + x, 0], [0, 0, x]]], [[[-1, 0, 0], [-1, x, 0], [-1, 0, x]], [[x, -2x, 0], [0, -1, 0], [0, -(E(4)) - 1, x]], [[x, 0, -x], [0, x, (E(4) - 1) // 2 * x], [0, 0, -1]]], [[[-1, 0, 0], [-1, x, 0], [-1, 0, x]], [[x, -2x, 0], [0, -1, 0], [0, E(4) - 1, x]], [[x, 0, -x], [0, x, (-(E(4)) - 1) // 2 * x], [0, 0, -1]]], [[[-1, 0], [-1, x]], [[-1, 0], [-1, x]], [[x, -x], [0, -1]]], [[[x]], [[x]], [[x]]]]
            return r[i]
        else
            S = (((chevieget(:imp, :CharInfo))(p, q, r))[:charparams])[i]
            p1rRep = function ()
                    local Q, pos, ct
                    if r > 1
                        Q = -((para[2])[1]) // (para[2])[2]
                    else
                        Q = 0
                    end
                    pos = function (t, i)
                            local j, k, l
                            for j = 1:length(t)
                                for k = 1:length(t[j])
                                    l = Position((t[j])[k], i)
                                    if l != false
                                        return [j, k, l]
                                    end
                                end
                            end
                        end
                    ct = (p->begin
                                (para[1])[p[1]] * Q ^ (p[3] - p[2])
                            end)
                    T = Tableaux(S)
                    return Concatenation([DiagonalMat(map((S->begin
                                                    ct(pos(S, 1))
                                                end), T))], map((i->begin
                                            map(function (j,)
                                                    local S, v, a, b, p, tll
                                                    S = T[j]
                                                    a = pos(S, i)
                                                    b = pos(S, i - 1)
                                                    S = map((a->begin
                                                                    map(copy, a)
                                                                end), S)
                                                    ((S[a[1]])[a[2]])[a[3]] = i - 1
                                                    ((S[b[1]])[b[2]])[b[3]] = i
                                                    if (para[2])[1] == -((para[2])[2])
                                                        if a[1] == b[1]
                                                            tll = (para[2])[1] // (((a[3] + b[2]) - a[2]) - b[3])
                                                        else
                                                            tll = 0
                                                        end
                                                    else
                                                        tll = Sum(para[2]) // (1 - ct(b) // ct(a))
                                                    end
                                                    v = fill(0, max(0, (1 + length(T)) - 1))
                                                    v[j] = tll
                                                    p = Position(T, S)
                                                    if p != false
                                                        v[p] = tll - (para[2])[2]
                                                    end
                                                    return v
                                                end, 1:length(T))
                                        end), 2:r)) * Product(para, Product) ^ 0
                end
            if q == 1
                return p1rRep()
            elseif p == q
                para = [map((i->begin
                                    E(p, i)
                                end), 0:p - 1), para[1]]
            else
                if para[2] != para[3]
                    if mod(q, 2) == 0 && r == 2
                        S = (((chevieget(:imp, :CharInfo))(p, q, r))[:malle])[i]
                        if S[1] == 1
                            return [[[(para[1])[1 + mod(S[4] - 1, p // q)]]], [[(para[2])[S[2]]]], [[(para[3])[S[3]]]]]
                        else
                            Y = para[2]
                            T = para[3]
                            if q > 2
                                X = map((y->begin
                                                GetRoot(y, q // 2)
                                            end), para[1])
                                X = Concatenation(map((i->begin
                                                    E(q // 2, i) * X
                                                end), 1:q // 2))
                            else
                                X = para[1]
                            end
                            X = X[S[[3, 4]]]
                            v = S[2] * GetRoot(Product(X) * Product(Y) * Product(T) * E(p // q, (2 - S[3]) - S[4]), 2) * E(p, (S[3] + S[4]) - 2)
                            d = 1 + Sum(X) * 0 + Sum(Y) * 0 + Sum(T) * 0
                            return [(d * [[X[1], Sum(Y, (y->begin
                                                                    1 // y
                                                                end)) - X[2] // v * Sum(T)], [0, X[2]]]) ^ (q // 2), [[Sum(Y), 1 // X[1]], [-(Product(Y)) * X[1], 0]], [[0, -(Product(T)) // v], [v, Sum(T)]]]
                        end
                    else
                        error("should  !  happen")
                    end
                elseif para[1] == map((i->begin
                                    E(p // q, i - 1)
                                end), 1:p // q)
                    para = [map((i->begin
                                        E(p, i)
                                    end), 0:p - 1), para[2]]
                else
                    para = [Concatenation(TransposedMat(map((i->begin
                                                map((j->begin
                                                                E(q, j)
                                                            end), 0:q - 1) * GetRoot(i, q)
                                            end), para[1]))), para[2]]
                end
            end
            extra = false
            if IsInt(S[length(S)])
                extra = E(S[length(S) - 1], S[length(S)])
                d = length(S) - 2
                S = FullSymbol(S)
            end
            v = p1rRep()
            if p == q
                v = Concatenation([v[2] ^ v[1]], v[2:length(v)])
            elseif q > 1
                v = Concatenation([v[1] ^ q, v[2] ^ v[1]], v[2:length(v)])
            end
            if extra != false
                m = PermListList(T, map((S->begin
                                    S[Concatenation(d + 1:p, 1:d)]
                                end), T))
                m = Cycles(m, 1:length(T))
                l = map((i->begin
                                extra ^ i
                            end), 0:-1 - 0:1 - p // d)
                m1 = map((x->begin
                                x[1]
                            end), m)
                return map((x->begin
                                map((c->begin
                                            l * (x[c])[m1]
                                        end), m)
                            end), v)
            else
                return v
            end
        end
    end)
chevieset(:imp, :Representation, function (p, q, r, i)
        local o
        o = (chevieget(:imp, :EigenvaluesGeneratingReflections))(p, q, r)
        o = map(denominator, o)
        return (chevieget(:imp, :HeckeRepresentation))(p, q, r, map((x->begin
                            map((i->begin
                                        E(x, i)
                                    end), 0:x - 1)
                        end), o), [], i)
    end)
chevieset(:imp, :CharTable, function (p, q, r)
        local o
        o = (chevieget(:imp, :EigenvaluesGeneratingReflections))(p, q, r)
        o = map(denominator, o)
        return (chevieget(:imp, :HeckeCharTable))(p, q, r, map((x->begin
                            map((i->begin
                                        E(x, i)
                                    end), 0:x - 1)
                        end), o), [])
    end)
chevieset(:imp, :UnipotentCharacters, function (p, q, r)
        local uc, cusp, f, l, ci, seteig, s, extra, addextra
        if !(q in [1, p])
            return false
        end
        uc = Dict{Symbol, Any}(:charSymbols => (chevieget(:imp, :CharSymbols))(p, q, r))
        uc[:a] = map(LowestPowerGenericDegreeSymbol, uc[:charSymbols])
        uc[:A] = map(HighestPowerGenericDegreeSymbol, uc[:charSymbols])
        ci = (chevieget(:imp, :CharInfo))(p, q, r)
        if q == 1
            cusp = gapSet(map((S->begin
                                map(length, S) - Minimum(map(length, S))
                            end), uc[:charSymbols]))
            cusp = map((x->begin
                            map((y->begin
                                        0:y - 1
                                    end), x)
                        end), cusp)
            SortBy(cusp, RankSymbol)
            uc[:harishChandra] = map(function (c,)
                        local cr, res
                        cr = RankSymbol(c)
                        res = Dict{Symbol, Any}(:levi => 1:cr)
                        if cr < r
                            res[:parameterExponents] = [map(length, c)]
                        else
                            res[:parameterExponents] = []
                        end
                        res[:parameterExponents] = Append(res[:parameterExponents], fill(0, max(0, (1 + r) - (2 + cr))) + 1)
                        if r == cr
                            res[:relativeType] = Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0)
                        else
                            res[:relativeType] = Dict{Symbol, Any}(:series => "ST", :indices => 1 + cr:r, :rank => r - cr, :p => p, :q => 1)
                        end
                        res[:eigenvalue] = E(24, -2 * (p ^ 2 - 1) * div(Sum(c, length), p)) * E(2p, Sum(0:p - 1, (i->begin
                                                -((i ^ 2 + p * i)) * length(c[i + 1])
                                            end)))
                        res[:charNumbers] = map((x->begin
                                        Position(uc[:charSymbols], SymbolPartitionTuple(x, map(length, c)))
                                    end), map((x->begin
                                            map(PartBeta, x)
                                        end), ((chevieget(:imp, :CharSymbols))(p, 1, r - cr))[1:length(PartitionTuples(r - cr, p))]))
                        res[:cuspidalName] = ImprimitiveCuspidalName(c)
                        return res
                    end, cusp)
            uc[:b] = uc[:a] * 0
            uc[:B] = uc[:a] * 0
            (uc[:b])[((uc[:harishChandra])[1])[:charNumbers]] = ci[:b]
            (uc[:B])[((uc[:harishChandra])[1])[:charNumbers]] = ci[:B]
            uc[:families] = map((y->begin
                            MakeFamilyImprimitive(y, uc)
                        end), CollectBy(uc[:charSymbols], (x->begin
                                Collected(Concatenation(x))
                            end)))
            SortBy(uc[:families], (x->begin
                        x[:charNumbers]
                    end))
            if r == 1
                l = map(function (S,)
                            local p
                            p = Position(S, [])
                            if p == false
                                return 1
                            else
                                return (-1) ^ p
                            end
                        end, (uc[:charSymbols])[((uc[:families])[2])[:charNumbers]])
                ((uc[:families])[2])[:fourierMat] = ((uc[:families])[2])[:fourierMat] ^ DiagonalMat(l)
                uc[:cyclicparam] = map(function (s,)
                            if count((x->begin
                                                x == 1
                                            end), Flat(s)) == 1
                                return [1]
                            else
                                s = Copy(s)
                                l = PositionProperty(s, (p->begin
                                                1 in p
                                            end))
                                s[l] = []
                                return [PositionProperty(s, (p->begin
                                                        1 in p
                                                    end)) - 1, l - 1]
                            end
                        end, uc[:charSymbols])
            elseif r == 2 && p == 3
                ((uc[:families])[4])[:fourierMat] = ((uc[:families])[4])[:fourierMat] ^ DiagonalMat(-1, 1, 1)
                ((uc[:families])[1])[:fourierMat] = ((uc[:families])[1])[:fourierMat] ^ DiagonalMat(1, -1, -1, 1, 1, 1, 1, 1, 1)
            end
            return uc
        elseif p == q
            uc[:families] = []
            for f = CollectBy(1:length(uc[:charSymbols]), (i->begin
                                Collected(Concatenation(FullSymbol((uc[:charSymbols])[i])))
                            end))
                if length(gapSet(map(FullSymbol, (uc[:charSymbols])[f]))) > 1
                    push!(uc[:families], Dict{Symbol, Any}(:charNumbers => f))
                else
                    uc[:families] = Append(uc[:families], map((x->begin
                                        Family("C1", [x])
                                    end), f))
                end
            end
            SortBy(uc[:families], (x->begin
                        x[:charNumbers]
                    end))
            uc[:harishChandra] = map((l->begin
                            Dict{Symbol, Any}(:charNumbers => l)
                        end), CollectBy(1:length(uc[:charSymbols]), function (i,)
                            local s, l
                            s = FullSymbol((uc[:charSymbols])[i])
                            l = map(length, s)
                            return [Sum(s, (x->begin
                                                Sum(PartBeta(x))
                                            end)), l - Minimum(l)]
                        end))
            SortBy(uc[:harishChandra], (x->begin
                        x[:charNumbers]
                    end))
            extra = []
            for f = uc[:harishChandra]
                addextra = false
                s = FullSymbol((uc[:charSymbols])[(f[:charNumbers])[1]])
                l = r - Sum(s, (x->begin
                                    Sum(PartBeta(x))
                                end))
                f[:levi] = 1:l
                s = map(length, s)
                s = s - Minimum(s)
                f[:eigenvalue] = E(24, -2 * (p ^ 2 - 1) * div(Sum(s), p)) * E(2p, Sum(0:p - 1, (i->begin
                                        -((i ^ 2 + p * i)) * s[i + 1]
                                    end)))
                if l == r
                    f[:relativeType] = Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0)
                    f[:parameterExponents] = []
                    if length(f[:charNumbers]) == 2
                        addextra = true
                    end
                elseif l == 0
                    f[:relativeType] = Dict{Symbol, Any}(:series => "ST", :indices => 1:r, :rank => r, :p => p, :q => q)
                    f[:parameterExponents] = fill(0, max(0, (1 + r) - 1)) + 1
                else
                    f[:relativeType] = Dict{Symbol, Any}(:series => "ST", :indices => l + 1:r, :rank => r - l, :p => p, :q => 1)
                    f[:parameterExponents] = Concatenation([s], fill(0, max(0, (1 + ((r - l) - 1)) - 1)) + 1)
                end
                s = map((x->begin
                                0:x - 1
                            end), s)
                f[:cuspidalName] = ImprimitiveCuspidalName(s)
                if addextra
                    s = Copy(f[:charNumbers])
                    f[:charNumbers] = s[[1]]
                    f = Copy(f)
                    f[:charNumbers] = s[[2]]
                    push!(f[:cuspidalName], '2')
                    push!(extra, f)
                end
            end
            uc[:harishChandra] = Append(uc[:harishChandra], extra)
            for f = uc[:families]
                f[:eigenvalues] = map((i->begin
                                (First(uc[:harishChandra], (s->begin
                                            i in s[:charNumbers]
                                        end)))[:eigenvalue]
                            end), f[:charNumbers])
            end
            uc[:b] = fill(0, max(0, (1 + length(uc[:charSymbols])) - 1))
            uc[:B] = fill(0, max(0, (1 + length(uc[:charSymbols])) - 1))
            (uc[:b])[((uc[:harishChandra])[1])[:charNumbers]] = ci[:b]
            (uc[:B])[((uc[:harishChandra])[1])[:charNumbers]] = ci[:B]
            if [p, q, r] == [3, 3, 3]
                (uc[:families])[6] = Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [8, 7, 11], Dict{Symbol, Any}(:signs => [1, 1, -1]))
                (uc[:families])[4] = Family(((CHEVIE[:families])[:X])(3), [4, 5, 12], Dict{Symbol, Any}(:signs => [1, 1, -1]))
                uc[:curtis] = [1, 2, 3, 7, 8, 10, 4, 5, 9, 6, -12, -11]
            elseif [p, q, r] == [3, 3, 4]
                (uc[:families])[2] = Family(((CHEVIE[:families])[:X])(3), [2, 4, 23], Dict{Symbol, Any}(:signs => [1, 1, -1]))
                (uc[:families])[6] = Family(((CHEVIE[:families])[:QZ])(3), [13, 9, 8, 10, 19, 22, 7, 21, 20], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, 1, -1, -1, 1], :special => 3, :cospecial => 2))
                (uc[:families])[9] = Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [15, 14, 18], Dict{Symbol, Any}(:signs => [1, 1, -1]))
            elseif [p, q, r] == [3, 3, 5]
                (uc[:families])[3] = Family(((CHEVIE[:families])[:X])(3), [3, 6, 51], Dict{Symbol, Any}(:signs => [1, 1, -1]))
                (uc[:families])[4] = Family(((CHEVIE[:families])[:X])(3), [4, 5, 54], Dict{Symbol, Any}(:signs => [1, 1, -1]))
                (uc[:families])[6] = Family(((CHEVIE[:families])[:QZ])(3), [9, 10, 8, 21, 44, 46, 20, 49, 45], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, -1, -1]))
                (uc[:families])[7] = Family(((CHEVIE[:families])[:QZ])(3), [23, 11, 16, 12, 42, 50, 15, 48, 40], Dict{Symbol, Any}(:signs => [1, -1, -1, 1, 1, 1, 1, -1, -1], :special => 4, :cospecial => 7))
                (uc[:families])[8] = Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [14, 13, 41], Dict{Symbol, Any}(:signs => [1, 1, -1]))
                (uc[:families])[11] = Family(((CHEVIE[:families])[:X])(3), [19, 22, 47], Dict{Symbol, Any}(:signs => [1, 1, -1]))
                (uc[:families])[13] = Family(((CHEVIE[:families])[:QZ])(3), [32, 27, 26, 28, 38, 53, 25, 52, 39], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, 1, -1, -1, 1], :special => 3, :cospecial => 2))
                (uc[:families])[15] = Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [31, 30, 37], Dict{Symbol, Any}(:signs => [1, 1, -1]))
                (uc[:families])[16] = Family(ComplexConjugate(((CHEVIE[:families])[:X])(3)), [34, 33, 43], Dict{Symbol, Any}(:signs => [1, 1, -1]))
            elseif [p, q, r] == [4, 4, 3]
                (uc[:families])[2] = Family(((CHEVIE[:families])[:X])(4), [3, 2, 4, 14, 16, 13], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, -1, -1]))
                (uc[:families])[4] = Family(ComplexConjugate(((CHEVIE[:families])[:X])(4)), [8, 6, 7, 12, 15, 11], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, -1, -1]))
                uc[:curtis] = [1, 6, 7, 8, 10, 2, 3, 4, 9, 5, 14, 13, 12, 11, -16, -15]
            elseif [p, q, r] == [4, 4, 4]
                (uc[:families])[5] = Family(((CHEVIE[:families])[:X])(4), [5, 8, 9, 46, 53, 47], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, 1]))
                (uc[:families])[6] = Family("C2", [12, 7, 6, 42])
                (uc[:families])[7] = Family(((CHEVIE[:families])[:X])(4), [13, 10, 11, 41, 55, 43], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, -1], :special => 3, :cospecial => 1))
                (uc[:families])[9] = Family(((CHEVIE[:families])[:QZ])(4), [18, 21, 28, 22, 23, 49, 39, 54, 56, 40, 15, 36, 19, 52, 37, 51], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, -1], :special => 2, :cospecial => 4))
                (uc[:families])[10] = Family(ComplexConjugate(((CHEVIE[:families])[:X])(4)), [16, 17, 20, 38, 50, 34], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, 1, 1], :special => 3, :cospecial => 1))
                (uc[:families])[12] = Family("C2", [27, 26, 25, 35])
                (uc[:families])[13] = Family(ComplexConjugate(((CHEVIE[:families])[:X])(4)), [30, 29, 31, 44, 48, 45], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, -1], :special => 3, :cospecial => 1))
            else
                uc[:families] = map((x->begin
                                MakeFamilyImprimitive((uc[:charSymbols])[x[:charNumbers]], uc)
                            end), uc[:families])
            end
            return uc
        end
    end)
chevieset(:imp, :Invariants, function (p, q, r)
        local v
        v = map((i->begin
                        function (arg...,)
                            return Sum(Arrangements(1:r, i), (a->begin
                                            Product(arg[a]) ^ p
                                        end))
                        end
                    end), 1:r - 1)
        push!(v, function (arg...,)
                return Product(arg) ^ (p // q)
            end)
        return v
    end)
chevieset(:H3, :ReflectionDegrees, [2, 6, 10])
chevieset(:H3, :Size, 120)
chevieset(:H3, :GeneratingRoots, function ()
        local a
        a = (1 + ER(5)) // 2
        return [[a, -1, a - 1], [-a, 1, a - 1], [1, a - 1, -a]] // 2
    end)
chevieset(:H3, :NrConjugacyClasses, 10)
chevieset(:H3, :cyclestructure, [])
chevieset(:H3, :generators, [])
chevieset(:H3, :CartanMat, [[2, -((1 + ER(5))) // 2, 0], [-((1 + ER(5))) // 2, 2, -1], [0, -1, 2]])
chevieset(:H3, :PowerMaps, [nothing, [1, 1, 7, 1, 5, 3, 3, 5, 7, 1], [1, 2, 7, 4, 1, 9, 3, 10, 6, 10], nothing, [1, 2, 1, 4, 5, 10, 1, 8, 10, 10], nothing, [1, 2, 7, 4, 5, 9, 3, 8, 6, 10]])
chevieset(:H3, :WordsClassRepresentatives, [[], [1], [1, 2], [1, 3], [2, 3], [1, 2, 3], [1, 2, 1, 2], [1, 2, 1, 2, 3], [1, 2, 1, 2, 3, 2, 1, 2, 3], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3]])
chevieset(:H3, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3], [2, 3]], [1:3]]
        return t[s + 1]
    end)
chevieset(:H3, :ClassInfo, function ()
        local res
        res = Dict{Symbol, Any}(:classtext => chevieget(:H3, :WordsClassRepresentatives), :orders => [1, 2, 5, 2, 3, 10, 5, 6, 10, 2], :classes => [1, 15, 12, 15, 20, 12, 12, 20, 12, 1])
        res[:classnames] = map(IntListToString, res[:classtext])
        (res[:classnames])[1] = "."
        res[:classparams] = res[:classnames]
        return res
    end)
chevieset(:H3, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 15], [1, 0], [5, 5], [5, 2], [3, 6], [3, 8], [3, 1], [3, 3], [4, 3], [4, 4]], :gp => ["1_r'", "1_r", "5_r'", "5_r", "3_s", "overline{3}_s", "3_s'", "overline{3}_s'", "4_r'", "4_r"], :opdam => #= none:9 =# @perm_str("(9,10)"), :extRefl => [2, 7, 5, 1])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:H3, :vpolheckeirreducibles, [[[[1], 0], [[-1], 0], [[1], 0], [[1], 0], [[1], 0], [[-1], 0], [[1], 0], [[-1], 0], [[-1], 0], [[-1], 0]], [[[1], 0], [[1], 1], [[1], 2], [[1], 2], [[1], 2], [[1], 3], [[1], 4], [[1], 5], [[1], 9], [[1], 15]], [[[5], 0], [[-3, 2], 0], [[1, -1], 0], [[2, -2, 1], 0], [[1, -2], 0], [[], 0], [[1, 0, -1], 0], [[1], 2], [[], 0], [[-5], 6]], [[[5], 0], [[-2, 3], 0], [[-1, 1], 1], [[1, -2, 2], 0], [[-2, 1], 1], [[], 0], [[-1, 0, 1], 2], [[-1], 3], [[], 0], [[5], 9]], [[[3], 0], [[-2, 1], 0], [[1, (-1 + ER(5)) // 2], 0], [[1, -2], 0], [[1, -1], 0], [[(1 - ER(5)) // 2], 1], [[1, 0, (-1 - ER(5)) // 2], 0], [[], 0], [[(1 + ER(5)) // 2], 3], [[3], 5]], [[[3], 0], [[-2, 1], 0], [[1, (-1 - ER(5)) // 2], 0], [[1, -2], 0], [[1, -1], 0], [[(1 + ER(5)) // 2], 1], [[1, 0, (-1 + ER(5)) // 2], 0], [[], 0], [[(1 - ER(5)) // 2], 3], [[3], 5]], [[[3], 0], [[-1, 2], 0], [[(-1 + ER(5)) // 2, 1], 1], [[-2, 1], 1], [[-1, 1], 1], [[(-1 + ER(5)) // 2], 2], [[(-1 - ER(5)) // 2, 0, 1], 2], [[], 0], [[(-1 - ER(5)) // 2], 6], [[-3], 10]], [[[3], 0], [[-1, 2], 0], [[(-1 - ER(5)) // 2, 1], 1], [[-2, 1], 1], [[-1, 1], 1], [[(-1 - ER(5)) // 2], 2], [[(-1 + ER(5)) // 2, 0, 1], 2], [[], 0], [[(-1 + ER(5)) // 2], 6], [[-3], 10]], [[[4], 0], [[-2, 2], 0], [[-1], 1], [[1, -2, 1], 0], [[1, -1, 1], 0], [[1], 3 // 2], [[-1], 2], [[-1], 5 // 2], [[1], 9 // 2], [[-4], 15 // 2]], [[[4], 0], [[-2, 2], 0], [[-1], 1], [[1, -2, 1], 0], [[1, -1, 1], 0], [[-1], 3 // 2], [[-1], 2], [[1], 5 // 2], [[-1], 9 // 2], [[4], 15 // 2]]])
chevieset(:H3, :CycPolSchurElements, [[1, -15, 2, 2, 2, 3, 5, 6, 10], [1, 0, 2, 2, 2, 3, 5, 6, 10], [1, -5, 2, 2, 2, 3, 6], [1, -2, 2, 2, 2, 3, 6], [(5 + ER(5)) // 2, -6, 2, 2, 2, 2 // 5, 3 // 5, 1 // 10, 9 // 10], [(5 - ER(5)) // 2, -6, 2, 2, 2, 1 // 5, 4 // 5, 3 // 10, 7 // 10], [(5 + ER(5)) // 2, -1, 2, 2, 2, 2 // 5, 3 // 5, 1 // 10, 9 // 10], [(5 - ER(5)) // 2, -1, 2, 2, 2, 1 // 5, 4 // 5, 3 // 10, 7 // 10], [2, -3, 3, 5], [2, -3, 3, 5]])
chevieset(:H3, :sparseFakeDegrees, [[1, 15], [1, 0], [1, 5, 1, 7, 1, 9, 1, 11, 1, 13], [1, 2, 1, 4, 1, 6, 1, 8, 1, 10], [1, 6, 1, 10, 1, 14], [1, 8, 1, 10, 1, 12], [1, 1, 1, 5, 1, 9], [1, 3, 1, 5, 1, 7], [1, 3, 1, 7, 1, 9, 1, 11], [1, 4, 1, 6, 1, 8, 1, 12]])
chevieset(:H3, :HeckeCharTable, function (param, sqrtparam)
        local a, q, v, ci, tbl
        a = (1 + ER(5)) // 2
        q = -((param[1])[1]) // (param[1])[2]
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(q, 2, "CharTable(Hecke(H3))")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        ci = (chevieget(:H3, :ClassInfo))()
        tbl = Dict{Symbol, Any}(:identifier => "H(H3)", :text => "the representing matrices are those of Lusztig(1981)", :parameter => [q, q, q], :cartan => chevieget(:H3, :CartanMat), :size => 120, :order => 120, :powermap => chevieget(:H3, :PowerMaps), :irreducibles => map((i->begin
                                map(function (j,)
                                        local res
                                        res = horner(q, j[1])
                                        if IsInt(j[2])
                                            res = res * q ^ j[2]
                                        else
                                            res = res * v ^ (2 * j[2])
                                        end
                                        return res
                                    end, i)
                            end), chevieget(:H3, :vpolheckeirreducibles)), :irredinfo => chevieget(:H3, :IrredInfo))
        Inherit(tbl, ci)
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(:H3, :Representation, function (i,)
        return (chevieget(:H3, :HeckeRepresentation))([[1, -1], [1, -1], [1, -1]], [1, 1, 1], i)
    end)
chevieset(:H3, :WGraphs, [[[[1, 2, 3]], []], 1, [[[2], [1, 2], [1, 3], [1, 3], [2, 3]], [[-1, [[1, 3], [2, 4], [3, 5], [4, 5]]]]], 3, [[[1, 2], [1, 3], [2, 3]], [[-1, [[1, 2]]], [(-1 - ER(5)) // 2, [[2, 3]]]]], [[[1, 2], [1, 3], [2, 3]], [[-1, [[1, 2]]], [(-1 + ER(5)) // 2, [[2, 3]]]]], 5, 6, [[[1], [2], [1, 3], [2, 3]], [[1, [[1, 2, 3], [2, 3, 4], [3, 4]]]]], 9])
chevieset(:H3, :WGraph, function (i,)
        local gr
        gr = chevieget(:H3, :WGraphs)
        if IsInt(gr[i])
            return DualWGraph(3, gr[gr[i]])
        else
            return gr[i]
        end
    end)
chevieset(:H3, :HeckeRepresentation, function (param, sqrtparam, i)
        local v
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(-((param[1])[1]) // (param[1])[2], 2, "Representation(Hecke(H3),[", i, "])")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        return -((param[1])[2]) * WGraphToRepresentation(3, (chevieget(:H3, :WGraph))(i), v)
    end)
chevieset(:H3, :UnipotentCharacters, function ()
        local res
        res = Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "H", :indices => 1:3, :rank => 3), :levi => [], :eigenvalue => 1, :parameterExponents => [1, 1, 1], :cuspidalName => "", :charNumbers => 1:10), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [3], :rank => 1), :levi => 1:2, :eigenvalue => E(5, 2), :parameterExponents => [5], :cuspidalName => "I_2(5)[1,3]", :charNumbers => [11, 13]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [3], :rank => 1), :levi => 1:2, :eigenvalue => E(5, 3), :parameterExponents => [5], :cuspidalName => "I_2(5)[1,2]", :charNumbers => [12, 14]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :eigenvalue => E(4), :qEigen => 1 // 2, :parameterExponents => [], :cuspidalName => "H_3[i]", :charNumbers => [15]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:3, :eigenvalue => -(E(4)), :qEigen => 1 // 2, :parameterExponents => [], :cuspidalName => "H_3[-i]", :charNumbers => [16])], :families => [Family("C1", [2]), Family(((CHEVIE[:families])[:Dihedral])(5), [7, 8, 14, 13], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [4]), Family("C'\"2", [9, 10, 15, 16], Dict{Symbol, Any}(:ennola => 3)), Family("C1", [3], Dict{Symbol, Any}(:ennola => -1)), Family(((CHEVIE[:families])[:Dihedral])(5), [5, 6, 12, 11], Dict{Symbol, Any}(:ennola => 1)), Family("C1", [1], Dict{Symbol, Any}(:ennola => -1))], :a => [15, 0, 5, 2, 6, 6, 1, 1, 3, 3, 6, 6, 1, 1, 3, 3], :A => [15, 0, 13, 10, 14, 14, 9, 9, 12, 12, 14, 14, 9, 9, 12, 12])
        return res
    end)
chevieset(:H3, :Invariants, function ()
        local r, C
        C = chevieget(:H3, :CartanMat)
        r = RootsCartan(C) * C
        return map((d->begin
                        function (arg...,)
                            return Sum(r, (a->begin
                                            (arg * a) ^ d
                                        end))
                        end
                    end), chevieget(:H3, :ReflectionDegrees))
    end)
chevieset(:H3, :Discriminant, function ()
        return function (a, b, c)
                return (((((((131835937500 * a * b ^ 3 * c - 100195312500 * a ^ 2 * b * c ^ 2) + 395507812500 * c ^ 3) - 28369140625 * a ^ 3 * b ^ 4) + 1371093750 * a ^ 4 * b ^ 2 * c + 175781250000 * b ^ 5 + 1191796875 * a ^ 5 * c ^ 2 + 1162187500 * a ^ 6 * b ^ 3) - 74250000 * a ^ 7 * b * c) - 22233750 * a ^ 9 * b ^ 2) + 438750 * a ^ 10 * c + 213700 * a ^ 12 * b) - 829 * a ^ 15
            end
    end)
chevieset(:H3, :KLeftCellRepresentatives, [Dict{Symbol, Any}(:character => [2], :duflo => [1, 2, 3], :reps => ""), Dict{Symbol, Any}(:character => [1], :duflo => [16, 17, 18], :reps => ""), Dict{Symbol, Any}(:character => [3], :duflo => [1, 24, 3], :reps => ""), Dict{Symbol, Any}(:character => [4], :duflo => [2, 1, 28], :reps => ""), Dict{Symbol, Any}(:character => [6, 5], :duflo => [1, 20, 18], :reps => [[7, 19, 24]]), Dict{Symbol, Any}(:character => [8, 7], :duflo => [1, 6, 18], :reps => [[9, 2, 27]]), Dict{Symbol, Any}(:character => [10, 9], :duflo => [8, 18, 17], :reps => [[11, 17, 25], [11, 27, 10], [14, 30, 4]]), Dict{Symbol, Any}(:character => [10, 9], :duflo => [13, 30, 8], :reps => [[10, 29, 5], [12, 21, 22], [13, 22, 23]])])
chevieset(:H4, :ReflectionDegrees, [2, 12, 20, 30])
chevieset(:H4, :Size, 14400)
chevieset(:H4, :GeneratingRoots, function ()
        local a
        a = (1 + ER(5)) // 2
        return [[a, -1, a - 1, 0], [-a, 1, a - 1, 0], [1, a - 1, -a, 0], [-1, -a, 0, a - 1]] // 2
    end)
chevieset(:H4, :CartanMat, [[2, -((1 + ER(5))) // 2, 0, 0], [-((1 + ER(5))) // 2, 2, -1, 0], [0, -1, 2, -1], [0, 0, -1, 2]])
chevieset(:H4, :WordsClassRepresentatives, [[], [1], [1, 2], [1, 3], [2, 3], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 4, 3], [1, 2, 1, 2], [1, 2, 3, 4], [1, 2, 1, 2, 3], [1, 2, 1, 2, 4], [1, 2, 1, 2, 3, 4], [1, 2, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 3, 2, 1, 2, 3], [1, 2, 1, 2, 3, 2, 1, 2, 3, 4], [1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4], [1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 4, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4], [1, 2, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4], [2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 3, 2, 1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 4, 3, 2, 1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 2, 3, 4], [1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 4, 3, 2, 1, 2, 1, 3, 2, 1, 4, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 1, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 1, 3, 2, 1, 2, 3, 4]])
chevieset(:H4, :NrConjugacyClasses, 34)
chevieset(:H4, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3], [2, 3]], [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]], [1:4]]
        return t[s + 1]
    end)
chevieset(:H4, :ClassParameter, chevieget(:H4, :WordsClassRepresentatives))
chevieset(:H4, :PowerMaps, [nothing, [1, 1, 10, 1, 5, 3, 10, 5, 4, 3, 15, 5, 3, 18, 22, 10, 24, 26, 27, 1, 3, 15, 30, 32, 5, 33, 27, 22, 34, 33, 10, 32, 26, 1], [1, 2, 10, 4, 1, 16, 13, 2, 9, 3, 18, 20, 7, 23, 26, 6, 29, 30, 19, 20, 31, 33, 14, 34, 34, 33, 27, 30, 29, 18, 21, 1, 26, 34], nothing, [1, 2, 1, 4, 5, 20, 2, 8, 9, 1, 24, 12, 2, 29, 32, 20, 17, 34, 34, 20, 34, 32, 29, 24, 25, 1, 1, 24, 29, 34, 34, 32, 1, 34], nothing, [1, 2, 10, 4, 5, 16, 13, 8, 9, 3, 28, 12, 7, 23, 22, 6, 17, 30, 19, 20, 31, 15, 14, 24, 25, 33, 27, 11, 29, 18, 21, 32, 26, 34], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], nothing, [1, 2, 10, 4, 5, 16, 13, 8, 9, 3, 28, 12, 7, 23, 22, 6, 17, 30, 19, 20, 31, 15, 14, 24, 25, 33, 27, 11, 29, 18, 21, 32, 26, 34], nothing, nothing, nothing, [1, 2, 10, 4, 5, 16, 13, 8, 9, 3, 28, 12, 7, 23, 22, 6, 17, 30, 19, 20, 31, 15, 14, 24, 25, 33, 27, 11, 29, 18, 21, 32, 26, 34], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], nothing, nothing, nothing, [1, 2, 10, 4, 5, 16, 13, 8, 9, 3, 28, 12, 7, 23, 22, 6, 17, 30, 19, 20, 31, 15, 14, 24, 25, 33, 27, 11, 29, 18, 21, 32, 26, 34], nothing, nothing, nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]])
chevieset(:H4, :ClassInfo, function ()
        local res
        res = Dict{Symbol, Any}(:classtext => chevieget(:H4, :WordsClassRepresentatives), :orders => [1, 2, 5, 2, 3, 10, 10, 6, 4, 5, 30, 6, 10, 20, 15, 10, 12, 10, 10, 2, 10, 15, 20, 6, 6, 5, 5, 30, 4, 10, 10, 3, 5, 2], :classes => [1, 60, 144, 450, 400, 720, 720, 1200, 1800, 144, 480, 1200, 720, 720, 480, 720, 1200, 24, 288, 60, 144, 480, 720, 40, 400, 24, 288, 480, 60, 24, 144, 40, 24, 1])
        res[:classnames] = map(IntListToString, res[:classtext])
        (res[:classnames])[1] = "."
        res[:classparams] = res[:classnames]
        return res
    end)
chevieset(:H4, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 60], [4, 1], [4, 31], [4, 7], [4, 37], [6, 12], [6, 20], [8, 12], [8, 13], [9, 2], [9, 22], [9, 6], [9, 26], [10, 12], [16, 11], [16, 13], [16, 3], [16, 21], [16, 6], [16, 18], [18, 10], [24, 11], [24, 7], [24, 12], [24, 6], [25, 4], [25, 16], [30, 10, 1], [30, 10, 2], [36, 5], [36, 15], [40, 8], [48, 9]], :GeckPfeiffer => ["1_r", "1_r'", "4_t", "4_t'", "overline{4}_t", "overline{4}_t'", "6_s", "overline{6}_s", "8_r", "8_{rr}", "9_s", "9_s'", "overline{9}_s", "overline{9}_s'", "10_r", "16_t", "overline{16}_t", "16_{rr}", "16_{rr}'", "16_r", "16_r'", "18_r", "24_t", "overline{24}_t", "24_s", "overline{24}_s", "25_r", "25_r'", "30_s", "overline{30}_s", "36_{rr}", "36_{rr}'", "40_r", "48_{rr}"], :opdam => #= none:15 =# @perm_str("(18,20)(19,21)"), :extRefl => [1, 3, 7, 4, 2])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:H4, :vpolheckeirreducibles, [[[[1], 0], [[1], 2], [[1], 4], [[1], 4], [[1], 4], [[1], 6], [[1], 6], [[1], 6], [[1], 6], [[1], 8], [[1], 8], [[1], 10], [[1], 10], [[1], 12], [[1], 16], [[1], 18], [[1], 20], [[1], 24], [[1], 28], [[1], 30], [[1], 32], [[1], 32], [[1], 36], [[1], 40], [[1], 44], [[1], 48], [[1], 52], [[1], 56], [[1], 60], [[1], 72], [[1], 76], [[1], 80], [[1], 96], [[1], 120]], [[[1], 0], [[-1], 0], [[1], 0], [[1], 0], [[1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[1], 0], [[1], 0], [[-1], 0], [[-1], 0], [[1], 0], [[1], 0], [[-1], 0], [[1], 0], [[1], 0], [[1], 0], [[-1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0]], [[[4], 0], [[-1, 0, 3], 0], [[(-1 + ER(5)) // 2, 0, 2], 2], [[-2, 0, 2], 2], [[-1, 0, 2], 2], [[(-1 + ER(5)) // 2, 0, 1], 4], [[(-3 + ER(5)) // 2, 0, 1], 4], [[-2, 0, 1], 4], [[-1, 0, 1], 4], [[(-1 - ER(5)) // 2, 0, 0, 0, 2], 4], [[(-1 + ER(5)) // 2], 6], [[1], 10], [[(-1 - ER(5)) // 2, 0, -1, 0, 1], 6], [[], 0], [[(1 + ER(5)) // 2], 12], [[(-1 - ER(5)) // 2, 0, 0, 0, 0, 0, 1], 12], [[], 0], [[1 + ER(5)], 18], [[(1 - ER(5)) // 2, 0, (1 + ER(5)) // 2], 20], [[-3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 20], [[-2, 0, 0, 0, (1 + ER(5)) // 2], 22], [[(1 - ER(5)) // 2], 24], [[], 0], [[2], 30], [[-2, 0, 1], 32], [[-1 + ER(5)], 36], [[(-1 - ER(5)) // 2, 0, (-1 + ER(5)) // 2], 38], [[(-1 - ER(5)) // 2], 42], [[], 0], [[1 - ER(5)], 54], [[-2, 0, (1 - ER(5)) // 2], 56], [[-2], 60], [[-1 - ER(5)], 72], [[-4], 90]], [[[4], 0], [[-3, 0, 1], 0], [[2, 0, (-1 + ER(5)) // 2], 0], [[2, 0, -2], 0], [[2, 0, -1], 0], [[-1, 0, (1 - ER(5)) // 2], 0], [[-1, 0, (3 - ER(5)) // 2], 0], [[-1, 0, 2], 0], [[-1, 0, 1], 0], [[2, 0, 0, 0, (-1 - ER(5)) // 2], 0], [[(-1 + ER(5)) // 2], 2], [[-1], 0], [[-1, 0, 1, 0, (1 + ER(5)) // 2], 0], [[], 0], [[(1 + ER(5)) // 2], 4], [[-1, 0, 0, 0, 0, 0, (1 + ER(5)) // 2], 0], [[], 0], [[1 + ER(5)], 6], [[(1 + ER(5)) // 2, 0, (1 - ER(5)) // 2], 6], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], 0], [[(1 + ER(5)) // 2, 0, 0, 0, -2], 6], [[(1 - ER(5)) // 2], 8], [[], 0], [[2], 10], [[1, 0, -2], 10], [[-1 + ER(5)], 12], [[(-1 + ER(5)) // 2, 0, (-1 - ER(5)) // 2], 12], [[(-1 - ER(5)) // 2], 14], [[], 0], [[1 - ER(5)], 18], [[(1 - ER(5)) // 2, 0, -2], 18], [[-2], 20], [[-1 - ER(5)], 24], [[-4], 30]], [[[4], 0], [[-1, 0, 3], 0], [[(-1 - ER(5)) // 2, 0, 2], 2], [[-2, 0, 2], 2], [[-1, 0, 2], 2], [[(-1 - ER(5)) // 2, 0, 1], 4], [[(-3 - ER(5)) // 2, 0, 1], 4], [[-2, 0, 1], 4], [[-1, 0, 1], 4], [[(-1 + ER(5)) // 2, 0, 0, 0, 2], 4], [[(-1 - ER(5)) // 2], 6], [[1], 10], [[(-1 + ER(5)) // 2, 0, -1, 0, 1], 6], [[], 0], [[(1 - ER(5)) // 2], 12], [[(-1 + ER(5)) // 2, 0, 0, 0, 0, 0, 1], 12], [[], 0], [[1 - ER(5)], 18], [[(1 + ER(5)) // 2, 0, (1 - ER(5)) // 2], 20], [[-3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 20], [[-2, 0, 0, 0, (1 - ER(5)) // 2], 22], [[(1 + ER(5)) // 2], 24], [[], 0], [[2], 30], [[-2, 0, 1], 32], [[-1 - ER(5)], 36], [[(-1 + ER(5)) // 2, 0, (-1 - ER(5)) // 2], 38], [[(-1 + ER(5)) // 2], 42], [[], 0], [[1 + ER(5)], 54], [[-2, 0, (1 + ER(5)) // 2], 56], [[-2], 60], [[-1 + ER(5)], 72], [[-4], 90]], [[[4], 0], [[-3, 0, 1], 0], [[2, 0, (-1 - ER(5)) // 2], 0], [[2, 0, -2], 0], [[2, 0, -1], 0], [[-1, 0, (1 + ER(5)) // 2], 0], [[-1, 0, (3 + ER(5)) // 2], 0], [[-1, 0, 2], 0], [[-1, 0, 1], 0], [[2, 0, 0, 0, (-1 + ER(5)) // 2], 0], [[(-1 - ER(5)) // 2], 2], [[-1], 0], [[-1, 0, 1, 0, (1 - ER(5)) // 2], 0], [[], 0], [[(1 - ER(5)) // 2], 4], [[-1, 0, 0, 0, 0, 0, (1 - ER(5)) // 2], 0], [[], 0], [[1 - ER(5)], 6], [[(1 - ER(5)) // 2, 0, (1 + ER(5)) // 2], 6], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], 0], [[(1 - ER(5)) // 2, 0, 0, 0, -2], 6], [[(1 + ER(5)) // 2], 8], [[], 0], [[2], 10], [[1, 0, -2], 10], [[-1 - ER(5)], 12], [[(-1 - ER(5)) // 2, 0, (-1 + ER(5)) // 2], 12], [[(-1 + ER(5)) // 2], 14], [[], 0], [[1 + ER(5)], 18], [[(1 + ER(5)) // 2, 0, -2], 18], [[-2], 20], [[-1 + ER(5)], 24], [[-4], 30]], [[[6], 0], [[-3, 0, 3], 0], [[1, 0, -1 + ER(5), 0, 1], 0], [[1, 0, -4, 0, 1], 0], [[1, 0, -2, 0, 1], 0], [[(1 - ER(5)) // 2, 0, (-1 + ER(5)) // 2], 2], [[(3 - ER(5)) // 2, 0, (-3 + ER(5)) // 2], 2], [[2, 0, -2], 2], [[1, 0, -1], 2], [[1, 0, 0, 0, -1 - ER(5), 0, 0, 0, 1], 0], [[(1 - ER(5)) // 2], 4], [[], 0], [[1, 0, (1 + ER(5)) // 2, 0, (-1 - ER(5)) // 2, 0, -1], 2], [[(-1 - ER(5)) // 2], 6], [[(1 + ER(5)) // 2], 8], [[(1 + ER(5)) // 2, 0, 0, 0, 0, 0, (-1 - ER(5)) // 2], 6], [[-1], 10], [[(7 + ER(5)) // 2], 12], [[1, 0, -1, 0, 1], 12], [[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3], 10], [[1, 0, 0, 0, -1 - ER(5), 0, 0, 0, 1], 12], [[(1 - ER(5)) // 2], 16], [[(-1 + ER(5)) // 2], 18], [[3], 20], [[1, 0, -2, 0, 1], 20], [[(7 - ER(5)) // 2], 24], [[1, 0, -1, 0, 1], 24], [[(1 + ER(5)) // 2], 28], [[2], 30], [[(7 - ER(5)) // 2], 36], [[1, 0, -1 + ER(5), 0, 1], 36], [[3], 40], [[(7 + ER(5)) // 2], 48], [[6], 60]], [[[6], 0], [[-3, 0, 3], 0], [[1, 0, -1 - ER(5), 0, 1], 0], [[1, 0, -4, 0, 1], 0], [[1, 0, -2, 0, 1], 0], [[(1 + ER(5)) // 2, 0, (-1 - ER(5)) // 2], 2], [[(3 + ER(5)) // 2, 0, (-3 - ER(5)) // 2], 2], [[2, 0, -2], 2], [[1, 0, -1], 2], [[1, 0, 0, 0, -1 + ER(5), 0, 0, 0, 1], 0], [[(1 + ER(5)) // 2], 4], [[], 0], [[1, 0, (1 - ER(5)) // 2, 0, (-1 + ER(5)) // 2, 0, -1], 2], [[(-1 + ER(5)) // 2], 6], [[(1 - ER(5)) // 2], 8], [[(1 - ER(5)) // 2, 0, 0, 0, 0, 0, (-1 + ER(5)) // 2], 6], [[-1], 10], [[(7 - ER(5)) // 2], 12], [[1, 0, -1, 0, 1], 12], [[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3], 10], [[1, 0, 0, 0, -1 + ER(5), 0, 0, 0, 1], 12], [[(1 + ER(5)) // 2], 16], [[(-1 - ER(5)) // 2], 18], [[3], 20], [[1, 0, -2, 0, 1], 20], [[(7 + ER(5)) // 2], 24], [[1, 0, -1, 0, 1], 24], [[(1 - ER(5)) // 2], 28], [[2], 30], [[(7 + ER(5)) // 2], 36], [[1, 0, -1 - ER(5), 0, 1], 36], [[3], 40], [[(7 - ER(5)) // 2], 48], [[6], 60]], [[[8], 0], [[-4, 0, 4], 0], [[-2], 2], [[2, 0, -4, 0, 2], 0], [[2, 0, -2, 0, 2], 0], [[], 0], [[1, 0, -1], 2], [[-1, 0, 2, 0, -2, 0, 1], 0], [[-1, 0, 1, 0, -1, 0, 1], 0], [[-2], 4], [[], 0], [[], 0], [[1, 0, -1], 4], [[-1], 6], [[], 0], [[], 0], [[1], 10], [[3], 12], [[-2], 14], [[], 0], [[-2], 16], [[], 0], [[-1], 18], [[5], 20], [[2, 0, -2, 0, 2], 20], [[3], 24], [[-2], 26], [[], 0], [[4], 30], [[3], 36], [[-2], 38], [[5], 40], [[3], 48], [[8], 60]], [[[8], 0], [[-4, 0, 4], 0], [[-2], 2], [[2, 0, -4, 0, 2], 0], [[2, 0, -2, 0, 2], 0], [[], 0], [[1, 0, -1], 2], [[-1, 0, 2, 0, -2, 0, 1], 0], [[-1, 0, 1, 0, -1, 0, 1], 0], [[-2], 4], [[-1], 4], [[], 0], [[1, 0, -1], 4], [[], 0], [[1], 8], [[], 0], [[], 0], [[2], 12], [[-3], 14], [[], 0], [[2], 16], [[1], 16], [[], 0], [[4], 20], [[1, 0, -4, 0, 1], 20], [[-2], 24], [[3], 26], [[-1], 28], [[], 0], [[2], 36], [[2], 38], [[-4], 40], [[-2], 48], [[-8], 60]], [[[9], 0], [[-3, 0, 6], 0], [[(-3 + ER(5)) // 2, 0, 3], 2], [[1, 0, -4, 0, 4], 0], [[-3, 0, 3], 2], [[(-1 + ER(5)) // 2, 0, 1], 4], [[(1 - ER(5)) // 2, 0, -2, 0, 2], 2], [[1, 0, -3, 0, 2], 2], [[-2, 0, 1], 4], [[(-3 - ER(5)) // 2, 0, 0, 0, 3], 4], [[], 0], [[-1, 0, 0, 0, 1], 6], [[(1 + ER(5)) // 2, 0, -1, 0, -1, 0, 2], 4], [[(-1 + ER(5)) // 2], 8], [[], 0], [[(-1 - ER(5)) // 2, 0, 0, 0, 0, 0, 1], 12], [[], 0], [[(3 + 3 * ER(5)) // 2], 16], [[(-3 - ER(5)) // 2, 0, (1 + ER(5)) // 2], 18], [[5, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 18], [[1 - ER(5), 0, 0, 0, (1 + ER(5)) // 2], 20], [[], 0], [[(-1 - ER(5)) // 2], 24], [[], 0], [[], 0], [[(3 - 3 * ER(5)) // 2], 32], [[(-3 + ER(5)) // 2, 0, (1 - ER(5)) // 2], 34], [[], 0], [[-3], 40], [[(3 - 3 * ER(5)) // 2], 48], [[1 + ER(5), 0, (1 - ER(5)) // 2], 50], [[], 0], [[(3 + 3 * ER(5)) // 2], 64], [[9], 80]], [[[9], 0], [[-6, 0, 3], 0], [[3, 0, (-3 + ER(5)) // 2], 0], [[4, 0, -4, 0, 1], 0], [[3, 0, -3], 0], [[-1, 0, (1 - ER(5)) // 2], 0], [[-2, 0, 2, 0, (-1 + ER(5)) // 2], 0], [[-2, 0, 3, 0, -1], 0], [[-1, 0, 2], 0], [[3, 0, 0, 0, (-3 - ER(5)) // 2], 0], [[], 0], [[-1, 0, 0, 0, 1], 0], [[-2, 0, 1, 0, 1, 0, (-1 - ER(5)) // 2], 0], [[(-1 + ER(5)) // 2], 4], [[], 0], [[-1, 0, 0, 0, 0, 0, (1 + ER(5)) // 2], 0], [[], 0], [[(3 + 3 * ER(5)) // 2], 8], [[(1 + ER(5)) // 2, 0, (-3 - ER(5)) // 2], 8], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, -5], 0], [[(1 + ER(5)) // 2, 0, 0, 0, 1 - ER(5)], 8], [[], 0], [[(-1 - ER(5)) // 2], 12], [[], 0], [[], 0], [[(3 - 3 * ER(5)) // 2], 16], [[(1 - ER(5)) // 2, 0, (-3 + ER(5)) // 2], 16], [[], 0], [[-3], 20], [[(3 - 3 * ER(5)) // 2], 24], [[(1 - ER(5)) // 2, 0, 1 + ER(5)], 24], [[], 0], [[(3 + 3 * ER(5)) // 2], 32], [[9], 40]], [[[9], 0], [[-3, 0, 6], 0], [[(-3 - ER(5)) // 2, 0, 3], 2], [[1, 0, -4, 0, 4], 0], [[-3, 0, 3], 2], [[(-1 - ER(5)) // 2, 0, 1], 4], [[(1 + ER(5)) // 2, 0, -2, 0, 2], 2], [[1, 0, -3, 0, 2], 2], [[-2, 0, 1], 4], [[(-3 + ER(5)) // 2, 0, 0, 0, 3], 4], [[], 0], [[-1, 0, 0, 0, 1], 6], [[(1 - ER(5)) // 2, 0, -1, 0, -1, 0, 2], 4], [[(-1 - ER(5)) // 2], 8], [[], 0], [[(-1 + ER(5)) // 2, 0, 0, 0, 0, 0, 1], 12], [[], 0], [[(3 - 3 * ER(5)) // 2], 16], [[(-3 + ER(5)) // 2, 0, (1 - ER(5)) // 2], 18], [[5, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 18], [[1 + ER(5), 0, 0, 0, (1 - ER(5)) // 2], 20], [[], 0], [[(-1 + ER(5)) // 2], 24], [[], 0], [[], 0], [[(3 + 3 * ER(5)) // 2], 32], [[(-3 - ER(5)) // 2, 0, (1 + ER(5)) // 2], 34], [[], 0], [[-3], 40], [[(3 + 3 * ER(5)) // 2], 48], [[1 - ER(5), 0, (1 + ER(5)) // 2], 50], [[], 0], [[(3 - 3 * ER(5)) // 2], 64], [[9], 80]], [[[9], 0], [[-6, 0, 3], 0], [[3, 0, (-3 - ER(5)) // 2], 0], [[4, 0, -4, 0, 1], 0], [[3, 0, -3], 0], [[-1, 0, (1 + ER(5)) // 2], 0], [[-2, 0, 2, 0, (-1 - ER(5)) // 2], 0], [[-2, 0, 3, 0, -1], 0], [[-1, 0, 2], 0], [[3, 0, 0, 0, (-3 + ER(5)) // 2], 0], [[], 0], [[-1, 0, 0, 0, 1], 0], [[-2, 0, 1, 0, 1, 0, (-1 + ER(5)) // 2], 0], [[(-1 - ER(5)) // 2], 4], [[], 0], [[-1, 0, 0, 0, 0, 0, (1 - ER(5)) // 2], 0], [[], 0], [[(3 - 3 * ER(5)) // 2], 8], [[(1 - ER(5)) // 2, 0, (-3 + ER(5)) // 2], 8], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, -5], 0], [[(1 - ER(5)) // 2, 0, 0, 0, 1 + ER(5)], 8], [[], 0], [[(-1 + ER(5)) // 2], 12], [[], 0], [[], 0], [[(3 + 3 * ER(5)) // 2], 16], [[(1 + ER(5)) // 2, 0, (-3 - ER(5)) // 2], 16], [[], 0], [[-3], 20], [[(3 + 3 * ER(5)) // 2], 24], [[(1 + ER(5)) // 2, 0, 1 - ER(5)], 24], [[], 0], [[(3 - 3 * ER(5)) // 2], 32], [[9], 40]], [[[10], 0], [[-5, 0, 5], 0], [[1, 0, -2, 0, 1], 0], [[3, 0, -4, 0, 3], 0], [[1, 0, -4, 0, 1], 0], [[], 0], [[-1, 0, 1, 0, -1, 0, 1], 0], [[-1, 0, 2, 0, -2, 0, 1], 0], [[1, 0, -1], 2], [[1, 0, 0, 0, -2, 0, 0, 0, 1], 0], [[-1], 4], [[1, 0, -1], 4], [[-1, 0, 0, 0, 1, 0, -1, 0, 0, 0, 1], 0], [[1], 6], [[-1], 8], [[], 0], [[], 0], [[5], 12], [[1, 0, -2, 0, 1], 12], [[-5, 0, 0, 0, 0, 0, 5], 12], [[1, 0, 0, 0, -2, 0, 0, 0, 1], 12], [[-1], 16], [[1], 18], [[4], 20], [[1, 0, -4, 0, 1], 20], [[5], 24], [[1, 0, -2, 0, 1], 24], [[-1], 28], [[6], 30], [[5], 36], [[1, 0, -2, 0, 1], 36], [[4], 40], [[5], 48], [[10], 60]], [[[16], 0], [[-8, 0, 8], 0], [[2, 0, -3 + ER(5), 0, 2], 0], [[4, 0, -8, 0, 4], 0], [[2, 0, -6, 0, 2], 0], [[(1 - ER(5)) // 2, 0, (-1 + ER(5)) // 2], 2], [[-1, 0, (5 - ER(5)) // 2, 0, (-5 + ER(5)) // 2, 0, 1], 0], [[-1, 0, 4, 0, -4, 0, 1], 0], [[2, 0, -2], 2], [[2, 0, 0, 0, -3 - ER(5), 0, 0, 0, 2], 0], [[(-1 - ER(5)) // 2], 4], [[1, 0, -1], 4], [[-1, 0, 1, 0, (3 + ER(5)) // 2, 0, (-3 - ER(5)) // 2, 0, -1, 0, 1], 0], [[], 0], [[(1 - ER(5)) // 2], 8], [[(1 + ER(5)) // 2, 0, 0, 0, 0, 0, (-1 - ER(5)) // 2], 6], [[], 0], [[4 + 2 * ER(5)], 12], [[(1 + ER(5)) // 2, 0, -2 - ER(5), 0, (1 + ER(5)) // 2], 12], [[3, 0, -5, 0, 0, 0, 0, 0, 5, 0, -3], 10], [[(1 + ER(5)) // 2, 0, 0, 0, -2, 0, 0, 0, (1 + ER(5)) // 2], 12], [[(1 + ER(5)) // 2], 16], [[], 0], [[2], 20], [[1, 0, 0, 0, 1], 20], [[-4 + 2 * ER(5)], 24], [[(-1 + ER(5)) // 2, 0, 2 - ER(5), 0, (-1 + ER(5)) // 2], 24], [[(-1 + ER(5)) // 2], 28], [[], 0], [[4 - 2 * ER(5)], 36], [[(1 - ER(5)) // 2, 0, -2, 0, (1 - ER(5)) // 2], 36], [[-2], 40], [[-4 - 2 * ER(5)], 48], [[-16], 60]], [[[16], 0], [[-8, 0, 8], 0], [[2, 0, -3 - ER(5), 0, 2], 0], [[4, 0, -8, 0, 4], 0], [[2, 0, -6, 0, 2], 0], [[(1 + ER(5)) // 2, 0, (-1 - ER(5)) // 2], 2], [[-1, 0, (5 + ER(5)) // 2, 0, (-5 - ER(5)) // 2, 0, 1], 0], [[-1, 0, 4, 0, -4, 0, 1], 0], [[2, 0, -2], 2], [[2, 0, 0, 0, -3 + ER(5), 0, 0, 0, 2], 0], [[(-1 + ER(5)) // 2], 4], [[1, 0, -1], 4], [[-1, 0, 1, 0, (3 - ER(5)) // 2, 0, (-3 + ER(5)) // 2, 0, -1, 0, 1], 0], [[], 0], [[(1 + ER(5)) // 2], 8], [[(1 - ER(5)) // 2, 0, 0, 0, 0, 0, (-1 + ER(5)) // 2], 6], [[], 0], [[4 - 2 * ER(5)], 12], [[(1 - ER(5)) // 2, 0, -2 + ER(5), 0, (1 - ER(5)) // 2], 12], [[3, 0, -5, 0, 0, 0, 0, 0, 5, 0, -3], 10], [[(1 - ER(5)) // 2, 0, 0, 0, -2, 0, 0, 0, (1 - ER(5)) // 2], 12], [[(1 - ER(5)) // 2], 16], [[], 0], [[2], 20], [[1, 0, 0, 0, 1], 20], [[-4 - 2 * ER(5)], 24], [[(-1 - ER(5)) // 2, 0, 2 + ER(5), 0, (-1 - ER(5)) // 2], 24], [[(-1 - ER(5)) // 2], 28], [[], 0], [[4 + 2 * ER(5)], 36], [[(1 + ER(5)) // 2, 0, -2, 0, (1 + ER(5)) // 2], 36], [[-2], 40], [[-4 + 2 * ER(5)], 48], [[-16], 60]], [[[16], 0], [[-6, 0, 10], 0], [[-3, 0, 4], 2], [[2, 0, -8, 0, 6], 0], [[1, 0, -5, 0, 5], 0], [[1, -1, 0, 1], 3], [[1, 0, -4, 0, 2], 2], [[3, 0, -5, 0, 3], 2], [[1, 0, -3, 0, 2], 2], [[-3, 0, 0, 0, 4], 4], [[1], 5], [[-1, -1, 0, 0, 0, 1], 5], [[1, 0, -2, 0, -2, 0, 2], 4], [[], 0], [[-1], 10], [[1, 0, 0, -1, 0, 0, 0, 0, 0, 1], 9], [[], 0], [[4], 15], [[-2, 0, 1], 17], [[-4, 0, 0, 5, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 15], [[-2, 0, 0, 0, 1], 19], [[-1], 20], [[], 0], [[-4], 25], [[-1, 0, 2, 0, -2], 25], [[-4], 30], [[2, 0, -1], 32], [[1], 35], [[], 0], [[4], 45], [[-2, 0, 1], 47], [[4], 50], [[-4], 60], [[-16], 75]], [[[16], 0], [[-10, 0, 6], 0], [[4, 0, -3], 0], [[6, 0, -8, 0, 2], 0], [[5, 0, -5, 0, 1], 0], [[-1, 0, 1, -1], 0], [[-2, 0, 4, 0, -1], 0], [[-3, 0, 5, 0, -3], 0], [[-2, 0, 3, 0, -1], 0], [[4, 0, 0, 0, -3], 0], [[1], 3], [[-1, 0, 0, 0, 1, 1], 0], [[-2, 0, 2, 0, 2, 0, -1], 0], [[], 0], [[-1], 6], [[-1, 0, 0, 0, 0, 0, 1, 0, 0, -1], 0], [[], 0], [[4], 9], [[1, 0, -2], 9], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, -5, 0, 0, 4], 0], [[1, 0, 0, 0, -2], 9], [[-1], 12], [[], 0], [[-4], 15], [[-2, 0, 2, 0, -1], 15], [[-4], 18], [[-1, 0, 2], 18], [[1], 21], [[], 0], [[4], 27], [[1, 0, -2], 27], [[4], 30], [[-4], 36], [[-16], 45]], [[[16], 0], [[-6, 0, 10], 0], [[-3, 0, 4], 2], [[2, 0, -8, 0, 6], 0], [[1, 0, -5, 0, 5], 0], [[-1, -1, 0, 1], 3], [[1, 0, -4, 0, 2], 2], [[3, 0, -5, 0, 3], 2], [[1, 0, -3, 0, 2], 2], [[-3, 0, 0, 0, 4], 4], [[-1], 5], [[1, -1, 0, 0, 0, 1], 5], [[1, 0, -2, 0, -2, 0, 2], 4], [[], 0], [[-1], 10], [[-1, 0, 0, -1, 0, 0, 0, 0, 0, 1], 9], [[], 0], [[-4], 15], [[2, 0, -1], 17], [[4, 0, 0, 5, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 15], [[2, 0, 0, 0, -1], 19], [[-1], 20], [[], 0], [[4], 25], [[1, 0, -2, 0, 2], 25], [[-4], 30], [[2, 0, -1], 32], [[-1], 35], [[], 0], [[-4], 45], [[2, 0, -1], 47], [[4], 50], [[-4], 60], [[16], 75]], [[[16], 0], [[-10, 0, 6], 0], [[4, 0, -3], 0], [[6, 0, -8, 0, 2], 0], [[5, 0, -5, 0, 1], 0], [[-1, 0, 1, 1], 0], [[-2, 0, 4, 0, -1], 0], [[-3, 0, 5, 0, -3], 0], [[-2, 0, 3, 0, -1], 0], [[4, 0, 0, 0, -3], 0], [[-1], 3], [[-1, 0, 0, 0, 1, -1], 0], [[-2, 0, 2, 0, 2, 0, -1], 0], [[], 0], [[-1], 6], [[-1, 0, 0, 0, 0, 0, 1, 0, 0, 1], 0], [[], 0], [[-4], 9], [[-1, 0, 2], 9], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, -5, 0, 0, -4], 0], [[-1, 0, 0, 0, 2], 9], [[-1], 12], [[], 0], [[4], 15], [[2, 0, -2, 0, 1], 15], [[-4], 18], [[-1, 0, 2], 18], [[-1], 21], [[], 0], [[-4], 27], [[-1, 0, 2], 27], [[4], 30], [[-4], 36], [[16], 45]], [[[18], 0], [[-9, 0, 9], 0], [[1, 0, -4, 0, 1], 0], [[5, 0, -8, 0, 5], 0], [[3, 0, -6, 0, 3], 0], [[], 0], [[-1, 0, 2, 0, -2, 0, 1], 0], [[-2, 0, 4, 0, -4, 0, 2], 0], [[-1, 0, 2, 0, -2, 0, 1], 0], [[1, 0, 0, 0, -4, 0, 0, 0, 1], 0], [[], 0], [[1, 0, -1], 4], [[-1, 0, 0, 0, 2, 0, -2, 0, 0, 0, 1], 0], [[-1], 6], [[], 0], [[], 0], [[], 0], [[3], 12], [[1, 0, 1, 0, 1], 12], [[-5, 0, 0, 0, 0, 0, 5], 12], [[1, 0, 0, 0, -4, 0, 0, 0, 1], 12], [[], 0], [[-1], 18], [[], 0], [[], 0], [[3], 24], [[1, 0, 1, 0, 1], 24], [[], 0], [[-6], 30], [[3], 36], [[1, 0, -4, 0, 1], 36], [[], 0], [[3], 48], [[18], 60]], [[[24], 0], [[-12, 0, 12], 0], [[2, 0, -5 - ER(5), 0, 2], 0], [[6, 0, -12, 0, 6], 0], [[4, 0, -8, 0, 4], 0], [[(1 + ER(5)) // 2, 0, (-1 - ER(5)) // 2], 2], [[-1, 0, (7 + ER(5)) // 2, 0, (-7 - ER(5)) // 2, 0, 1], 0], [[-2, 0, 6, 0, -6, 0, 2], 0], [[-1, 0, 3, 0, -3, 0, 1], 0], [[2, 0, 0, 0, -5 + ER(5), 0, 0, 0, 2], 0], [[1], 4], [[1, 0, -1], 4], [[-1, 0, 1, 0, (5 - ER(5)) // 2, 0, (-5 + ER(5)) // 2, 0, -1, 0, 1], 0], [[], 0], [[-1], 8], [[(1 - ER(5)) // 2, 0, 0, 0, 0, 0, (-1 + ER(5)) // 2], 6], [[], 0], [[1 + 3 * ER(5)], 12], [[(1 + ER(5)) // 2, 0, -(ER(5)), 0, (1 + ER(5)) // 2], 12], [[3, 0, -5, 0, 0, 0, 0, 0, 5, 0, -3], 10], [[(1 + ER(5)) // 2, 0, 0, 0, -2 * ER(5), 0, 0, 0, (1 + ER(5)) // 2], 12], [[-1], 16], [[], 0], [[6], 20], [[2, 0, -4, 0, 2], 20], [[-1 + 3 * ER(5)], 24], [[(-1 + ER(5)) // 2, 0, -(ER(5)), 0, (-1 + ER(5)) // 2], 24], [[1], 28], [[], 0], [[1 - 3 * ER(5)], 36], [[(1 - ER(5)) // 2, 0, 2 * ER(5), 0, (1 - ER(5)) // 2], 36], [[-6], 40], [[-1 - 3 * ER(5)], 48], [[-24], 60]], [[[24], 0], [[-12, 0, 12], 0], [[2, 0, -5 + ER(5), 0, 2], 0], [[6, 0, -12, 0, 6], 0], [[4, 0, -8, 0, 4], 0], [[(1 - ER(5)) // 2, 0, (-1 + ER(5)) // 2], 2], [[-1, 0, (7 - ER(5)) // 2, 0, (-7 + ER(5)) // 2, 0, 1], 0], [[-2, 0, 6, 0, -6, 0, 2], 0], [[-1, 0, 3, 0, -3, 0, 1], 0], [[2, 0, 0, 0, -5 - ER(5), 0, 0, 0, 2], 0], [[1], 4], [[1, 0, -1], 4], [[-1, 0, 1, 0, (5 + ER(5)) // 2, 0, (-5 - ER(5)) // 2, 0, -1, 0, 1], 0], [[], 0], [[-1], 8], [[(1 + ER(5)) // 2, 0, 0, 0, 0, 0, (-1 - ER(5)) // 2], 6], [[], 0], [[1 - 3 * ER(5)], 12], [[(1 - ER(5)) // 2, 0, ER(5), 0, (1 - ER(5)) // 2], 12], [[3, 0, -5, 0, 0, 0, 0, 0, 5, 0, -3], 10], [[(1 - ER(5)) // 2, 0, 0, 0, 2 * ER(5), 0, 0, 0, (1 - ER(5)) // 2], 12], [[-1], 16], [[], 0], [[6], 20], [[2, 0, -4, 0, 2], 20], [[-1 - 3 * ER(5)], 24], [[(-1 - ER(5)) // 2, 0, ER(5), 0, (-1 - ER(5)) // 2], 24], [[1], 28], [[], 0], [[1 + 3 * ER(5)], 36], [[(1 + ER(5)) // 2, 0, -2 * ER(5), 0, (1 + ER(5)) // 2], 36], [[-6], 40], [[-1 + 3 * ER(5)], 48], [[-24], 60]], [[[24], 0], [[-12, 0, 12], 0], [[2, 0, -5 - ER(5), 0, 2], 0], [[6, 0, -12, 0, 6], 0], [[4, 0, -8, 0, 4], 0], [[(1 + ER(5)) // 2, 0, (-1 - ER(5)) // 2], 2], [[-1, 0, (7 + ER(5)) // 2, 0, (-7 - ER(5)) // 2, 0, 1], 0], [[-2, 0, 6, 0, -6, 0, 2], 0], [[-1, 0, 3, 0, -3, 0, 1], 0], [[2, 0, 0, 0, -5 + ER(5), 0, 0, 0, 2], 0], [[(1 - ER(5)) // 2], 4], [[1, 0, -1], 4], [[-1, 0, 1, 0, (5 - ER(5)) // 2, 0, (-5 + ER(5)) // 2, 0, -1, 0, 1], 0], [[1], 6], [[(1 + ER(5)) // 2], 8], [[(1 - ER(5)) // 2, 0, 0, 0, 0, 0, (-1 + ER(5)) // 2], 6], [[-1], 10], [[-1 + 2 * ER(5)], 12], [[(-1 + ER(5)) // 2, 0, -(ER(5)), 0, (-1 + ER(5)) // 2], 12], [[3, 0, -5, 0, 0, 0, 0, 0, 5, 0, -3], 10], [[(-1 + ER(5)) // 2, 0, 0, 0, 0, 0, 0, 0, (-1 + ER(5)) // 2], 12], [[(1 - ER(5)) // 2], 16], [[1], 18], [[3], 20], [[1, 0, -2, 0, 1], 20], [[-1 - 2 * ER(5)], 24], [[(-1 - ER(5)) // 2, 0, ER(5), 0, (-1 - ER(5)) // 2], 24], [[(1 + ER(5)) // 2], 28], [[-4], 30], [[-1 - 2 * ER(5)], 36], [[(-1 - ER(5)) // 2, 0, 0, 0, (-1 - ER(5)) // 2], 36], [[3], 40], [[-1 + 2 * ER(5)], 48], [[24], 60]], [[[24], 0], [[-12, 0, 12], 0], [[2, 0, -5 + ER(5), 0, 2], 0], [[6, 0, -12, 0, 6], 0], [[4, 0, -8, 0, 4], 0], [[(1 - ER(5)) // 2, 0, (-1 + ER(5)) // 2], 2], [[-1, 0, (7 - ER(5)) // 2, 0, (-7 + ER(5)) // 2, 0, 1], 0], [[-2, 0, 6, 0, -6, 0, 2], 0], [[-1, 0, 3, 0, -3, 0, 1], 0], [[2, 0, 0, 0, -5 - ER(5), 0, 0, 0, 2], 0], [[(1 + ER(5)) // 2], 4], [[1, 0, -1], 4], [[-1, 0, 1, 0, (5 + ER(5)) // 2, 0, (-5 - ER(5)) // 2, 0, -1, 0, 1], 0], [[1], 6], [[(1 - ER(5)) // 2], 8], [[(1 + ER(5)) // 2, 0, 0, 0, 0, 0, (-1 - ER(5)) // 2], 6], [[-1], 10], [[-1 - 2 * ER(5)], 12], [[(-1 - ER(5)) // 2, 0, ER(5), 0, (-1 - ER(5)) // 2], 12], [[3, 0, -5, 0, 0, 0, 0, 0, 5, 0, -3], 10], [[(-1 - ER(5)) // 2, 0, 0, 0, 0, 0, 0, 0, (-1 - ER(5)) // 2], 12], [[(1 + ER(5)) // 2], 16], [[1], 18], [[3], 20], [[1, 0, -2, 0, 1], 20], [[-1 + 2 * ER(5)], 24], [[(-1 + ER(5)) // 2, 0, -(ER(5)), 0, (-1 + ER(5)) // 2], 24], [[(1 - ER(5)) // 2], 28], [[-4], 30], [[-1 + 2 * ER(5)], 36], [[(-1 + ER(5)) // 2, 0, 0, 0, (-1 + ER(5)) // 2], 36], [[3], 40], [[-1 - 2 * ER(5)], 48], [[24], 60]], [[[25], 0], [[-10, 0, 15], 0], [[-5, 0, 5], 2], [[4, 0, -12, 0, 9], 0], [[2, 0, -8, 0, 7], 0], [[-1, 0, 1], 4], [[2, 0, -5, 0, 3], 2], [[-1, 0, 4, 0, -8, 0, 4], 0], [[2, 0, -4, 0, 3], 2], [[-5, 0, 0, 0, 5], 4], [[], 0], [[-2, 0, 0, 0, 1], 6], [[2, 0, -3, 0, -2, 0, 3], 4], [[], 0], [[], 0], [[-1, 0, 0, 0, 0, 0, 1], 12], [[-1], 12], [[], 0], [[], 0], [[10, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 18], [[], 0], [[], 0], [[], 0], [[-5], 24], [[-1, 0, 4, 0, -2], 24], [[], 0], [[], 0], [[], 0], [[5], 36], [[], 0], [[], 0], [[-5], 48], [[], 0], [[25], 72]], [[[25], 0], [[-15, 0, 10], 0], [[5, 0, -5], 0], [[9, 0, -12, 0, 4], 0], [[7, 0, -8, 0, 2], 0], [[-1, 0, 1], 0], [[-3, 0, 5, 0, -2], 0], [[-4, 0, 8, 0, -4, 0, 1], 0], [[-3, 0, 4, 0, -2], 0], [[5, 0, 0, 0, -5], 0], [[], 0], [[-1, 0, 0, 0, 2], 0], [[-3, 0, 2, 0, 3, 0, -2], 0], [[], 0], [[], 0], [[-1, 0, 0, 0, 0, 0, 1], 0], [[-1], 8], [[], 0], [[], 0], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, -10], 0], [[], 0], [[], 0], [[], 0], [[-5], 16], [[-2, 0, 4, 0, -1], 16], [[], 0], [[], 0], [[], 0], [[5], 24], [[], 0], [[], 0], [[-5], 32], [[], 0], [[25], 48]], [[[30], 0], [[-15, 0, 15], 0], [[3, 0, -6, 0, 3], 0], [[7, 0, -16, 0, 7], 0], [[5, 0, -10, 0, 5], 0], [[1, 0, -1], 2], [[-1, 0, 5, 0, -5, 0, 1], 0], [[-2, 0, 8, 0, -8, 0, 2], 0], [[-1, 0, 4, 0, -4, 0, 1], 0], [[3, 0, 0, 0, -6, 0, 0, 0, 3], 0], [[(-1 + ER(5)) // 2], 4], [[1, 0, -1], 4], [[-1, 0, 2, 0, 3, 0, -3, 0, -2, 0, 1], 0], [[(1 - ER(5)) // 2], 6], [[(-1 - ER(5)) // 2], 8], [[1, 0, 0, 0, 0, 0, -1], 6], [[1], 10], [[(5 + 5 * ER(5)) // 2], 12], [[(1 + ER(5)) // 2, 0, -1 - ER(5), 0, (1 + ER(5)) // 2], 12], [[6, 0, -5, 0, 0, 0, 0, 0, 5, 0, -6], 10], [[(1 + ER(5)) // 2, 0, 0, 0, -1 - ER(5), 0, 0, 0, (1 + ER(5)) // 2], 12], [[(-1 + ER(5)) // 2], 16], [[(1 + ER(5)) // 2], 18], [[-3], 20], [[-1, 0, 2, 0, -1], 20], [[(5 - 5 * ER(5)) // 2], 24], [[(1 - ER(5)) // 2, 0, -1 + ER(5), 0, (1 - ER(5)) // 2], 24], [[(-1 - ER(5)) // 2], 28], [[-2], 30], [[(5 - 5 * ER(5)) // 2], 36], [[(1 - ER(5)) // 2, 0, -1 + ER(5), 0, (1 - ER(5)) // 2], 36], [[-3], 40], [[(5 + 5 * ER(5)) // 2], 48], [[30], 60]], [[[30], 0], [[-15, 0, 15], 0], [[3, 0, -6, 0, 3], 0], [[7, 0, -16, 0, 7], 0], [[5, 0, -10, 0, 5], 0], [[1, 0, -1], 2], [[-1, 0, 5, 0, -5, 0, 1], 0], [[-2, 0, 8, 0, -8, 0, 2], 0], [[-1, 0, 4, 0, -4, 0, 1], 0], [[3, 0, 0, 0, -6, 0, 0, 0, 3], 0], [[(-1 - ER(5)) // 2], 4], [[1, 0, -1], 4], [[-1, 0, 2, 0, 3, 0, -3, 0, -2, 0, 1], 0], [[(1 + ER(5)) // 2], 6], [[(-1 + ER(5)) // 2], 8], [[1, 0, 0, 0, 0, 0, -1], 6], [[1], 10], [[(5 - 5 * ER(5)) // 2], 12], [[(1 - ER(5)) // 2, 0, -1 + ER(5), 0, (1 - ER(5)) // 2], 12], [[6, 0, -5, 0, 0, 0, 0, 0, 5, 0, -6], 10], [[(1 - ER(5)) // 2, 0, 0, 0, -1 + ER(5), 0, 0, 0, (1 - ER(5)) // 2], 12], [[(-1 - ER(5)) // 2], 16], [[(1 - ER(5)) // 2], 18], [[-3], 20], [[-1, 0, 2, 0, -1], 20], [[(5 + 5 * ER(5)) // 2], 24], [[(1 + ER(5)) // 2, 0, -1 - ER(5), 0, (1 + ER(5)) // 2], 24], [[(-1 + ER(5)) // 2], 28], [[-2], 30], [[(5 + 5 * ER(5)) // 2], 36], [[(1 + ER(5)) // 2, 0, -1 - ER(5), 0, (1 + ER(5)) // 2], 36], [[-3], 40], [[(5 - 5 * ER(5)) // 2], 48], [[30], 60]], [[[36], 0], [[-15, 0, 21], 0], [[1, 0, -7, 0, 7], 0], [[6, 0, -18, 0, 12], 0], [[3, 0, -12, 0, 9], 0], [[-2, 0, 1], 4], [[4, 0, -7, 0, 4], 2], [[-1, 0, 7, 0, -11, 0, 5], 0], [[3, 0, -6, 0, 3], 2], [[1, 0, 0, 0, -7, 0, 0, 0, 7], 0], [[], 0], [[1, 0, -2, 0, 0, 0, 1], 4], [[1, 0, 3, 0, -4, 0, -3, 0, 4], 2], [[], 0], [[], 0], [[-2, 0, 0, 0, 0, 0, 1], 12], [[], 0], [[-6], 14], [[-1, 0, 2, 0, -2], 14], [[-5, 0, 0, 0, 0, 0, 10, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 12], [[-1, 0, 0, 0, 2, 0, 0, 0, -2], 14], [[], 0], [[], 0], [[], 0], [[], 0], [[6], 28], [[1, 0, -2, 0, 2], 28], [[], 0], [[], 0], [[-6], 42], [[-1, 0, 2, 0, -2], 42], [[], 0], [[6], 56], [[-36], 70]], [[[36], 0], [[-21, 0, 15], 0], [[7, 0, -7, 0, 1], 0], [[12, 0, -18, 0, 6], 0], [[9, 0, -12, 0, 3], 0], [[-1, 0, 2], 0], [[-4, 0, 7, 0, -4], 0], [[-5, 0, 11, 0, -7, 0, 1], 0], [[-3, 0, 6, 0, -3], 0], [[7, 0, 0, 0, -7, 0, 0, 0, 1], 0], [[], 0], [[-1, 0, 0, 0, 2, 0, -1], 0], [[-4, 0, 3, 0, 4, 0, -3, 0, -1], 0], [[], 0], [[], 0], [[-1, 0, 0, 0, 0, 0, 2], 0], [[], 0], [[-6], 10], [[-2, 0, 2, 0, -1], 10], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, -10, 0, 0, 0, 0, 0, 5], 0], [[-2, 0, 0, 0, 2, 0, 0, 0, -1], 10], [[], 0], [[], 0], [[], 0], [[], 0], [[6], 20], [[2, 0, -2, 0, 1], 20], [[], 0], [[], 0], [[-6], 30], [[-2, 0, 2, 0, -1], 30], [[], 0], [[6], 40], [[-36], 50]], [[[40], 0], [[-20, 0, 20], 0], [[4, 0, -8, 0, 4], 0], [[10, 0, -20, 0, 10], 0], [[6, 0, -14, 0, 6], 0], [[1, 0, -1], 2], [[-2, 0, 6, 0, -6, 0, 2], 0], [[-3, 0, 10, 0, -10, 0, 3], 0], [[-1, 0, 5, 0, -5, 0, 1], 0], [[4, 0, 0, 0, -8, 0, 0, 0, 4], 0], [[1], 4], [[2, 0, -2], 4], [[-2, 0, 2, 0, 4, 0, -4, 0, -2, 0, 2], 0], [[-1], 6], [[1], 8], [[1, 0, 0, 0, 0, 0, -1], 6], [[1], 10], [[-5], 12], [[-1, 0, 2, 0, -1], 12], [[6, 0, -10, 0, 0, 0, 0, 0, 10, 0, -6], 10], [[-1, 0, 0, 0, 2, 0, 0, 0, -1], 12], [[1], 16], [[-1], 18], [[1], 20], [[-2], 22], [[-5], 24], [[-1, 0, 2, 0, -1], 24], [[1], 28], [[4], 30], [[-5], 36], [[-1, 0, 2, 0, -1], 36], [[1], 40], [[-5], 48], [[40], 60]], [[[48], 0], [[-24, 0, 24], 0], [[4, 0, -10, 0, 4], 0], [[12, 0, -24, 0, 12], 0], [[8, 0, -16, 0, 8], 0], [[1, 0, -1], 2], [[-2, 0, 7, 0, -7, 0, 2], 0], [[-4, 0, 12, 0, -12, 0, 4], 0], [[-2, 0, 6, 0, -6, 0, 2], 0], [[4, 0, 0, 0, -10, 0, 0, 0, 4], 0], [[-1], 4], [[2, 0, -2], 4], [[-2, 0, 2, 0, 5, 0, -5, 0, -2, 0, 2], 0], [[], 0], [[1], 8], [[1, 0, 0, 0, 0, 0, -1], 6], [[], 0], [[2], 12], [[1, 0, 0, 0, 1], 12], [[6, 0, -10, 0, 0, 0, 0, 0, 10, 0, -6], 10], [[1, 0, 0, 0, 0, 0, 0, 0, 1], 12], [[1], 16], [[], 0], [[-6], 20], [[-2, 0, 4, 0, -2], 20], [[-2], 24], [[-1, 0, 0, 0, -1], 24], [[-1], 28], [[], 0], [[2], 36], [[1, 0, 0, 0, 1], 36], [[6], 40], [[-2], 48], [[-48], 60]]])
chevieset(:H4, :CycPolSchurElements, [[1, 0, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 10, 10, 12, 15, 20, 30], [1, -60, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 10, 10, 12, 15, 20, 30], [(5 + ER(5)) // 2, -1, 2, 2, 2, 2, 3, 3, 5, 1 // 5, 4 // 5, 6, 6, 10, 3 // 10, 7 // 10, 2 // 15, 7 // 15, 8 // 15, 13 // 15, 1 // 30, 11 // 30, 19 // 30, 29 // 30], [(5 + ER(5)) // 2, -31, 2, 2, 2, 2, 3, 3, 5, 1 // 5, 4 // 5, 6, 6, 10, 3 // 10, 7 // 10, 2 // 15, 7 // 15, 8 // 15, 13 // 15, 1 // 30, 11 // 30, 19 // 30, 29 // 30], [(5 - ER(5)) // 2, -1, 2, 2, 2, 2, 3, 3, 5, 2 // 5, 3 // 5, 6, 6, 10, 1 // 10, 9 // 10, 1 // 15, 4 // 15, 11 // 15, 14 // 15, 7 // 30, 13 // 30, 17 // 30, 23 // 30], [(5 - ER(5)) // 2, -31, 2, 2, 2, 2, 3, 3, 5, 2 // 5, 3 // 5, 6, 6, 10, 1 // 10, 9 // 10, 1 // 15, 4 // 15, 11 // 15, 14 // 15, 7 // 30, 13 // 30, 17 // 30, 23 // 30], [45 + 15 * ER(5), -6, 2, 2, 2, 2, 2 // 5, 2 // 5, 3 // 5, 3 // 5, 1 // 30, 11 // 30, 19 // 30, 29 // 30], [45 - 15 * ER(5), -6, 2, 2, 2, 2, 1 // 5, 1 // 5, 4 // 5, 4 // 5, 7 // 30, 13 // 30, 17 // 30, 23 // 30], [8, -6, 3, 3, 5, 5], [10, -6, 3, 3, 4, 4, 5], [(5 + ER(5)) // 2, -2, 2, 2, 2, 2, 4, 4, 5, 1 // 5, 4 // 5, 10, 3 // 10, 7 // 10, 1 // 20, 9 // 20, 11 // 20, 19 // 20], [(5 + ER(5)) // 2, -22, 2, 2, 2, 2, 4, 4, 5, 1 // 5, 4 // 5, 10, 3 // 10, 7 // 10, 1 // 20, 9 // 20, 11 // 20, 19 // 20], [(5 - ER(5)) // 2, -2, 2, 2, 2, 2, 4, 4, 5, 2 // 5, 3 // 5, 10, 1 // 10, 9 // 10, 3 // 20, 7 // 20, 13 // 20, 17 // 20], [(5 - ER(5)) // 2, -22, 2, 2, 2, 2, 4, 4, 5, 2 // 5, 3 // 5, 10, 1 // 10, 9 // 10, 3 // 20, 7 // 20, 13 // 20, 17 // 20], [10, -6, 2, 2, 2, 2, 3, 3, 10], [20, -6, 3, 3, 2 // 5, 2 // 5, 3 // 5, 3 // 5, 1 // 20, 9 // 20, 11 // 20, 19 // 20], [20, -6, 3, 3, 1 // 5, 1 // 5, 4 // 5, 4 // 5, 3 // 20, 7 // 20, 13 // 20, 17 // 20], [2, -3, 2, 3, 3, 5, 5, 15], [2, -18, 2, 3, 3, 5, 5, 15], [2, -3, 2, 3, 3, 5, 5, 15], [2, -18, 2, 3, 3, 5, 5, 15], [10, -6, 2, 2, 2, 2, 5, 6, 6], [105 - 45 * ER(5), -6, 4, 4, 2 // 5, 2 // 5, 3 // 5, 3 // 5, 2 // 15, 7 // 15, 8 // 15, 13 // 15], [105 + 45 * ER(5), -6, 4, 4, 1 // 5, 1 // 5, 4 // 5, 4 // 5, 1 // 15, 4 // 15, 11 // 15, 14 // 15], [1080 - 480 * ER(5), -6, 2 // 5, 2 // 5, 3 // 5, 3 // 5, 6, 6, 3 // 10, 3 // 10, 7 // 10, 7 // 10], [1080 + 480 * ER(5), -6, 1 // 5, 1 // 5, 4 // 5, 4 // 5, 6, 6, 1 // 10, 1 // 10, 9 // 10, 9 // 10], [1, -4, 2, 2, 2, 2, 3, 3, 4, 4, 6, 6, 12], [1, -16, 2, 2, 2, 2, 3, 3, 4, 4, 6, 6, 12], [45 - 15 * ER(5), -6, 2, 2, 2, 2, 3 // 10, 3 // 10, 7 // 10, 7 // 10, 1 // 15, 4 // 15, 11 // 15, 14 // 15], [45 + 15 * ER(5), -6, 2, 2, 2, 2, 1 // 10, 1 // 10, 9 // 10, 9 // 10, 2 // 15, 7 // 15, 8 // 15, 13 // 15], [1, -5, 2, 2, 2, 2, 5, 5, 10, 10], [1, -15, 2, 2, 2, 2, 5, 5, 10, 10], [40, -6, 3, 3, 10, 10], [12, -6, 5, 5, 12]])
chevieset(:H4, :cycpolfakedegrees, [[1, 0], [1, 60], [1, 1, 4, 4, 12, 20, 36], [1, 31, 4, 4, 12, 20, 36], [1, 7, 4, 4, 12, 20], [1, 37, 4, 4, 12, 20], [[1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1], 12], [[1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 1], 20], [[1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], 12, 15, 30], [1, 13, 4, 4, 4, 12, 12, 20, 36], [1, 2, 3, 3, 6, 6, 12, 15, 24, 30], [1, 22, 3, 3, 6, 6, 12, 15, 24, 30], [1, 6, 3, 3, 6, 6, 12, 15, 30], [1, 26, 3, 3, 6, 6, 12, 15, 30], [[1, 1, 0, -1, 1, 2, 2, 0, -2, 0, 2, 2, 1, -1, 0, 1, 1], 12, 12], [1, 11, 4, 4, 4, 12, 16, 20, 36], [1, 13, 4, 4, 4, 8, 12, 20, 28], [[1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], 3, 4, 4, 12, 20], [[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], 21, 4, 4, 12, 20], [[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], 6, 4, 4, 12, 20], [[1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], 18, 4, 4, 12, 20], [1, 10, 3, 3, 6, 6, 8, 12, 15, 24, 30], [[1, 0, 0, -1, 2, -1, 2, -1, 0, 0, 1], 11, 4, 4, 4, 12, 20], [[1, -1, 1, -1, 1, 0, 1, -1, 1, 0, 1, -1, 1, -1, 1], 7, 4, 4, 4, 12, 20], [[1, 1, 0, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 0, 1, 1], 12], [[1, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1], 6], [1, 4, 5, 5, 10, 10, 15, 20, 30], [1, 16, 5, 5, 10, 10, 15, 20, 30], [[1, 1, 1, 0, 1, 2, 3, 1, 1, 3, 2, 3, 1, 1, 3, 2, 1, 0, 1, 1, 1], 10], [[1, 0, 1, 2, 1, 2, 1, 2, 3, 1, 2, 1, 3, 2, 1, 2, 1, 2, 1, 0, 1], 10], [1, 5, 3, 3, 4, 4, 6, 6, 12, 15, 20, 30], [1, 15, 3, 3, 4, 4, 6, 6, 12, 15, 20, 30], [[1, 0, 1, 1, 2, 2, 1, 2, 3, 3, 3, 2, 3, 3, 3, 2, 1, 2, 2, 1, 1, 0, 1], 8], [[1, 0, 0, 0, 1, -1, 1, 0, 0, 0, 1], 9, 4, 4, 4, 8, 12, 20]])
chevieset(:H4, :HeckeCharTable, function (param, sqrtparam)
        local a, v, q, tbl
        a = (1 + ER(5)) // 2
        q = -((param[1])[1]) // (param[1])[2]
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(q, 2, "CharTable(Hecke(H4))")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        tbl = Dict{Symbol, Any}(:identifier => "H(H4)", :text => "the ordering of the characters is that of Alvis-Lusztig(1982)", :parameter => [v ^ 2, v ^ 2, v ^ 2, v ^ 2], :cartan => chevieget(:H4, :CartanMat), :size => 14400, :powermap => chevieget(:H4, :PowerMaps), :irreducibles => map((i->begin
                                map((j->begin
                                            horner(v, j[1]) * v ^ j[2]
                                        end), i)
                            end), chevieget(:H4, :vpolheckeirreducibles)), :irredinfo => chevieget(:H4, :IrredInfo))
        Inherit(tbl, (chevieget(:H4, :ClassInfo))())
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(:H4, :WGraphs, [[[[]], []], 1, [[[1], [2], [3], [4]], [[1, [[1, 1], [2, 3], [3, 4]]], [(1 + ER(5)) // 2, [[1, 2]]]]], 3, [[[1], [2], [3], [4]], [[1, [[1, 1], [2, 3], [3, 4]]], [(1 - ER(5)) // 2, [[1, 2]]]]], 5, [[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]], [[1, [[1, 2], [2, 3], [4, 5], [5, 6]]], [(1 + ER(5)) // 2, [[2, 4], [3, 5]]]]], [[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]], [[1, [[1, 2], [2, 3], [4, 5], [5, 6]]], [(1 - ER(5)) // 2, [[2, 4], [3, 5]]]]], [[[1], [2], [1, 3], [1, 4], [2, 3], [2, 4], [1, 3, 4], [2, 3, 4]], [[1, [[1, 2, 7], [2, 3, 6, 8], [3, 4, 5, 7], [4, 6], [5, 6], [6, 7], [7, 8]]]]], [[[1], [2], [1, 3], [1, 4], [2, 3], [2, 4], [1, 3, 4], [2, 3, 4]], [[-1, [[1, 4], [5, 8]]], [1, [[1, 2, 7], [2, 3, 8], [3, 4, 5], [4, 6], [5, 6], [6, 7], [7, 8]]]]], [[[1], [2], 1, [3], 1, [4], [1, 3], [1, 4], [2, 4]], [[1, [[1, 2, 3], [2, 4, 9], [3, 7], [4, 6], [5, 9], [6, 9], [7, 8]]], [(1 + ER(5)) // 2, [[1, 8], [3, 9], [5, 7], [8, 9]]]]], 11, [[[1], [2], 1, [3], 1, [4], [1, 3], [1, 4], [2, 4]], [[1, [[1, 2, 3], [2, 4, 9], [3, 7], [4, 6], [5, 9], [6, 9], [7, 8]]], [(1 - ER(5)) // 2, [[1, 8], [3, 9], [5, 7], [8, 9]]]]], 13, [[[2], [3], [1, 3], 1, [1, 4], [2, 3], [2, 4], 1, [1, 2, 4], [1, 3, 4]], [[1, [[1, 3, 7], [2, 3, 7], [3, 5, 6], [4, 6, 9, 10], [5, 7, 8], [6, 8], [8, 9, 10]]]]], [[[2], [3], [1, 2], [1, 3], 2, [1, 4], 1, [2, 3], 1, [2, 4], 2, [3, 4], [1, 2, 4], [1, 3, 4]], [[1, [[1, 6, 11], [2, 6, 11], [3, 4, 15], [4, 8], [5, 9, 15, 16], [6, 7, 9], [7, 11, 12], [8, 15, 16], [9, 12], [10, 13], [12, 15, 16], [13, 14]]], [(3 - ER(5)) // 2, [[1, 10], [2, 10, 14]]], [(1 + ER(5)) // 2, [[4, 10], [8, 13], [14, 16]]], [(-1 + ER(5)) // 2, [[1, 3], [2, 5], [11, 15]]]]], [[[2], [3], [1, 2], [1, 3], 2, [1, 4], 1, [2, 3], 1, [2, 4], 2, [3, 4], [1, 2, 4], [1, 3, 4]], [[1, [[1, 6, 11], [2, 6, 11], [3, 4, 15], [4, 8], [5, 9, 15, 16], [6, 7, 9], [7, 11, 12], [8, 15, 16], [9, 12], [10, 13], [12, 15, 16], [13, 14]]], [(3 + ER(5)) // 2, [[1, 10], [2, 10, 14]]], [(1 - ER(5)) // 2, [[4, 10], [8, 13], [14, 16]]], [(-1 - ER(5)) // 2, [[1, 3], [2, 5], [11, 15]]]]], [[[1], 1, [2], 2, [3], 1, [4], [1, 3], 1, [1, 4], 1, [2, 3], [2, 4], 1, [3, 4]], [[1, [[1, 3, 4, 10, 12], [2, 5, 10, 11], [3, 9, 13, 15], [4, 6, 14], [5, 10, 13, 15], [6, 8, 10, 13, 16], [7, 9, 10, 13, 15, 16], [8, 12, 14], [9, 11], [10, 12, 13], [11, 15], [12, 14, 15], [13, 14], [14, 16]]]]], 18, [[[1], 1, [2], 2, [3], 1, [4], [1, 3], 1, [1, 4], 1, [2, 3], [2, 4], 1, [3, 4]], [[-1, [[1, 10], [2, 10], [3, 13], [5, 13], [6, 10], [7, 13, 16], [8, 12]]], [1, [[1, 3, 4, 12], [2, 5, 11], [3, 9, 15], [4, 6, 14], [5, 10, 15], [6, 8, 13, 16], [7, 9, 10, 15], [8, 14], [9, 11], [10, 12, 13], [11, 15], [12, 14, 15], [13, 14], [14, 16]]]]], 20, [[[1], [2], 1, [3], [1, 3], 2, [1, 4], 1, [2, 3], 1, [2, 4], 2, [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 7, 9, 16], [2, 7, 13], [3, 6, 10, 15, 18], [4, 7, 13], [5, 10, 15, 17], [6, 9, 11], [7, 8, 10], [8, 12, 13], [9, 14, 15], [10, 12], [11, 14, 18], [12, 15, 17], [14, 16], [16, 18]]], [2, [[3, 14], [4, 11, 16], [6, 16], [8, 16], [12, 18]]]]], [[[1], [2], 1, [3], [1, 2], [1, 3], 3, [1, 4], 2, [2, 3], 2, [2, 4], 3, [3, 4], [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 22], [2, 9, 16], [3, 8, 24], [4, 9, 16], [5, 6], [6, 11], [7, 13, 21, 23], [8, 12, 14], [9, 10, 13], [10, 16, 17], [12, 19], [13, 17], [14, 19], [15, 18], [17, 21, 23], [18, 20], [19, 22], [22, 24]]], [(5 - ER(5)) // 2, [[1, 5, 9], [3, 13, 19, 21], [8, 22], [12, 21]]], [2 - ER(5), [[4, 7], [16, 21]]], [(3 - ER(5)) // 2, [[1, 12], [2, 5], [4, 14, 22], [10, 22], [14, 24], [17, 24], [20, 23, 24]]], [(1 - ER(5)) // 2, [[2, 15], [4, 15, 20], [5, 21], [6, 15], [11, 18, 21, 23]]]]], [[[1], [2], 1, [3], [1, 2], [1, 3], 3, [1, 4], 2, [2, 3], 2, [2, 4], 3, [3, 4], [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 22], [2, 9, 16], [3, 8, 24], [4, 9, 16], [5, 6], [6, 11], [7, 13, 21, 23], [8, 12, 14], [9, 10, 13], [10, 16, 17], [12, 19], [13, 17], [14, 19], [15, 18], [17, 21, 23], [18, 20], [19, 22], [22, 24]]], [(5 + ER(5)) // 2, [[1, 5, 9], [3, 13, 19, 21], [8, 22], [12, 21]]], [2 + ER(5), [[4, 7], [16, 21]]], [(3 + ER(5)) // 2, [[1, 12], [2, 5], [4, 14, 22], [10, 22], [14, 24], [17, 24], [20, 23, 24]]], [(1 + ER(5)) // 2, [[2, 15], [4, 15, 20], [5, 21], [6, 15], [11, 18, 21, 23]]]]], [[[1], [2], 1, [3], [1, 2], [1, 3], 3, [1, 4], 2, [2, 3], 2, [2, 4], 3, [3, 4], [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 22], [2, 9, 16], [3, 8, 24], [4, 9, 16], [5, 6], [6, 11], [7, 13, 21, 23], [8, 12, 14], [9, 10, 13], [10, 16, 17], [12, 19], [13, 17], [14, 19], [15, 18], [17, 21, 23], [18, 20], [19, 22], [22, 24]]], [(5 - 3 * ER(5)) // 2, [[1, 5], [4, 7], [16, 21]]], [(5 - ER(5)) // 2, [[2, 5]]], [2 - ER(5), [[1, 9], [3, 13, 19, 21], [8, 22], [12, 21]]], [(3 - ER(5)) // 2, [[20, 23]]], [1 - ER(5), [[1, 12], [4, 14, 22], [10, 22], [14, 24], [17, 24], [20, 24]]], [(1 - ER(5)) // 2, [[5, 21], [6, 15], [11, 18, 21, 23]]], [-(ER(5)), [[2, 15], [4, 15, 20]]]]], [[[1], [2], 1, [3], [1, 2], [1, 3], 3, [1, 4], 2, [2, 3], 2, [2, 4], 3, [3, 4], [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 22], [2, 9, 16], [3, 8, 24], [4, 9, 16], [5, 6], [6, 11], [7, 13, 21, 23], [8, 12, 14], [9, 10, 13], [10, 16, 17], [12, 19], [13, 17], [14, 19], [15, 18], [17, 21, 23], [18, 20], [19, 22], [22, 24]]], [(5 + ER(5)) // 2, [[2, 5]]], [(5 + 3 * ER(5)) // 2, [[1, 5], [4, 7], [16, 21]]], [2 + ER(5), [[1, 9], [3, 13, 19, 21], [8, 22], [12, 21]]], [(3 + ER(5)) // 2, [[20, 23]]], [1 + ER(5), [[1, 12], [4, 14, 22], [10, 22], [14, 24], [17, 24], [20, 24]]], [(1 + ER(5)) // 2, [[5, 21], [6, 15], [11, 18, 21, 23]]], [ER(5), [[2, 15], [4, 15, 20]]]]], [[[1], 2, [2], 3, [3], 2, [4], [1, 3], 2, [1, 4], 2, [2, 3], 1, [2, 4], 3, [3, 4], [1, 3, 4]], [[1, [[1, 4, 13, 17], [2, 5, 6, 14, 16], [3, 7, 14, 15], [4, 14, 19, 20, 22], [5, 8, 21], [6, 12, 18, 23], [7, 13, 18, 23], [8, 11, 14, 19, 24], [9, 14, 19, 22, 24], [10, 12, 13, 23], [11, 17, 21], [12, 15], [13, 16, 19], [14, 17, 18, 25], [15, 23, 25], [16, 21, 23, 25], [17, 20, 22], [18, 20], [19, 21], [20, 25], [21, 24], [24, 25]]], [2, [[10, 18, 25]]]]], 27, [[[1], [2], 1, [3], [1, 2], 1, [1, 3], 4, [1, 4], 3, [2, 3], 3, [2, 4], 4, [3, 4], 1, [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[-1, [[1, 6]]], [1, [[1, 3, 5, 11, 29], [2, 5, 11, 16, 20], [3, 9, 18, 27, 30], [4, 10, 11, 16, 17, 20, 25, 29], [5, 7, 27], [6, 8], [7, 13, 16, 19], [8, 14, 19], [9, 12, 17], [10, 18, 27, 28], [11, 15, 18], [12, 24, 27], [13, 21, 22, 27, 28], [14, 22], [15, 20, 23, 29], [16, 21], [17, 24], [18, 23], [19, 22], [20, 27], [21, 25], [22, 26], [23, 27, 28, 30], [24, 29], [25, 28], [29, 30]]], [(7 - ER(5)) // 2, [[26, 28]]], [(5 - ER(5)) // 2, [[6, 27], [14, 27, 28], [26, 30]]], [(1 + ER(5)) // 2, [[3, 24], [9, 29]]], [(-1 + ER(5)) // 2, [[1, 12], [17, 30]]], [(-3 + ER(5)) // 2, [[25, 30]]]]], [[[1], [2], 1, [3], [1, 2], 1, [1, 3], 4, [1, 4], 3, [2, 3], 3, [2, 4], 4, [3, 4], 1, [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[-1, [[1, 6]]], [1, [[1, 3, 5, 11, 29], [2, 5, 11, 16, 20], [3, 9, 18, 27, 30], [4, 10, 11, 16, 17, 20, 25, 29], [5, 7, 27], [6, 8], [7, 13, 16, 19], [8, 14, 19], [9, 12, 17], [10, 18, 27, 28], [11, 15, 18], [12, 24, 27], [13, 21, 22, 27, 28], [14, 22], [15, 20, 23, 29], [16, 21], [17, 24], [18, 23], [19, 22], [20, 27], [21, 25], [22, 26], [23, 27, 28, 30], [24, 29], [25, 28], [29, 30]]], [(7 + ER(5)) // 2, [[26, 28]]], [(5 + ER(5)) // 2, [[6, 27], [14, 27, 28], [26, 30]]], [(1 - ER(5)) // 2, [[3, 24], [9, 29]]], [(-1 - ER(5)) // 2, [[1, 12], [17, 30]]], [(-3 - ER(5)) // 2, [[25, 30]]]]], [[[1], 2, [2], 4, [3], 3, [4], [1, 2], [1, 3], 4, [1, 4], 4, [2, 3], 2, [2, 4], 5, [3, 4], 1, [1, 3, 4]], [[1, [[1, 4, 16, 19, 22], [2, 5, 6, 23], [3, 8, 14, 15, 20], [4, 14, 15, 25, 27, 32, 33], [5, 10, 28], [6, 17, 29], [7, 16, 31], [8, 19, 26, 29], [9, 15, 25, 27, 33, 34, 35], [10, 13, 35], [11, 17, 19, 26, 29, 36], [12, 16, 26, 31, 36], [14, 18], [15, 22, 26, 36], [16, 24, 27], [17, 20], [18, 21, 27], [19, 23, 25], [20, 29, 36], [21, 30], [22, 32, 33], [23, 28, 29], [24, 30, 31, 36], [25, 28], [26, 32], [27, 30], [28, 35], [30, 34], [32, 36], [34, 36]]]]], 31, [[[1], [2], 2, [3], 1, [1, 2], 1, [1, 3], 6, [1, 4], 4, [2, 3], 4, [2, 4], 6, [3, 4], 1, [1, 2, 4], 1, [1, 3, 4], 2, [2, 3, 4]], [[-1, [[3, 8, 25], [5, 14, 25, 34], [30, 35]]], [1, [[1, 4, 37], [2, 8, 12, 22, 25, 27], [3, 15, 30], [4, 13, 40], [5, 15, 30], [6, 12, 14, 22, 25, 27, 33, 34], [7, 9, 36], [8, 10, 35], [9, 18, 22, 25], [10, 19, 25], [11, 21, 36, 38], [12, 17, 21], [13, 16, 23], [14, 24, 35, 39], [15, 20, 24], [16, 28], [17, 26, 27], [18, 31, 32, 36, 38], [19, 32, 35, 39], [20, 29, 30], [21, 26], [22, 31], [23, 28], [24, 29], [25, 32], [26, 36, 38], [27, 35], [28, 37], [29, 35, 39], [31, 33], [32, 34], [33, 38, 40], [34, 38, 39], [37, 40]]], [2, [[1, 7, 12, 16], [2, 7], [4, 21, 36], [5, 23, 37], [6, 11], [16, 36], [20, 37], [23, 40], [27, 36], [29, 40], [34, 40]]], [3, [[3, 7], [4, 28], [5, 11], [6, 23, 37], [13, 37], [17, 37], [26, 40], [30, 36]]], [4, [[3, 22], [5, 22, 33]]]]], [[[1], 1, [2], 3, [3], 1, [1, 2], 1, [1, 3], 7, [1, 4], 5, [2, 3], 5, [2, 4], 7, [3, 4], 1, [1, 2, 4], 1, [1, 3, 4], 3, [2, 3, 4], 1], [[-1, [[2, 10, 23], [28, 48], [40, 48]]], [1, [[1, 4, 9, 20, 43], [2, 5, 15, 45], [3, 15, 33], [4, 11, 47], [5, 12, 25, 42, 48], [6, 14, 32], [7, 14, 27, 32, 43], [8, 15, 28, 33, 45], [9, 18, 41], [10, 13, 42], [11, 20, 27], [12, 23, 28], [13, 21, 29], [14, 24, 26], [15, 19, 25], [16, 25, 42, 46], [17, 26, 41, 44], [18, 22, 29, 30], [19, 33, 37, 45], [20, 31], [21, 34, 42, 46], [22, 34, 35, 41, 44], [23, 38, 42], [24, 32, 36, 43], [25, 37], [26, 36], [27, 31, 47], [28, 38], [29, 34], [30, 35], [31, 43], [34, 39], [35, 40], [36, 41, 44, 47], [37, 42, 46, 48], [38, 45], [39, 44, 46, 48], [40, 44, 47], [43, 47], [45, 48]]], [2, [[4, 31], [11, 43]]], [3, [[1, 14], [4, 26, 41], [20, 41]]], [(3 - ER(5)) // 2, [[1, 10, 15, 23], [4, 25, 38, 42], [6, 9, 10, 29], [7, 16, 17, 29, 39], [11, 45], [20, 42], [27, 48], [32, 41, 42]]], [(3 + ER(5)) // 2, [[2, 9, 14, 20], [3, 30], [5, 26, 31, 41], [8, 30, 40], [12, 43], [23, 41], [28, 47]]], [1 + ER(5), [[3, 9], [8, 17], [33, 41]]], [(-1 + ER(5)) // 2, [[3, 10, 29], [8, 16, 29, 39], [33, 42]]]]]])
chevieset(:H4, :WGraph, function (i,)
        local gr
        gr = chevieget(:H4, :WGraphs)
        if IsInt(gr[i])
            return DualWGraph(4, gr[gr[i]])
        else
            return gr[i]
        end
    end)
chevieset(:H4, :HeckeRepresentation, function (param, sqrtparam, i)
        local v
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(-((param[1])[1]) // (param[1])[2], 2, "Representation(Hecke(H4),[", i, "])")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        return -((param[1])[2]) * WGraphToRepresentation(4, (chevieget(:H4, :WGraph))(i), v)
    end)
chevieset(:H4, :Representation, function (i,)
        return (chevieget(:H4, :HeckeRepresentation))([[1, -1], [1, -1], [1, -1], [1, -1]], [1, 1, 1, 1], i)
    end)
(CHEVIE[:families])[:HS4] = Dict{Symbol, Any}(:group => "SL2(5)", :name => "H4", :explanation => "DrinfeldDouble(SL_2(5))?ER(5)", :charLabels => map((i->begin
                        "?"
                    end), 1:74), :fourierMat => 1 // 60 * [[18, 0, -18, -6, -6, 18, 6, 6, 6, 6, -6, -6, -6, -6, 12, 0, 6, 6, -6, -6, -6, -6, 6, 6, 0, -18, 6, 6, 6, 6, -6, -6, 12, 0, 6, 6, -6, -6, -6, -6, 6, 6, 0, 0, 0, 0, 0, 0, -6, -6, 6, 6, -6, -6, 6, 6, 0, 0, 0, 0, -6, -6, -6, -6, 0, 0, 0, 0, -6, -6, -6, -6, 12, 12], [0, 45 // 2, 0, 0, 0, 0, -15, -15, 15 // 2, 15 // 2, 0, 0, 0, 0, -15 // 2, 15, 0, 0, 0, 0, 0, 0, 0, 0, 45 // 2, 0, -15, -15, 15 // 2, 15 // 2, 0, 0, -15 // 2, 15, 0, 0, 0, 0, 0, 0, 0, 0, -15, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15], [-18, 0, 18, -6, -6, 18, -6, -6, 6, 6, 6, 6, 6, 6, -12, 0, 6, 6, -6, -6, 6, 6, -6, -6, 0, -18, 6, 6, -6, -6, -6, -6, 12, 0, -6, -6, 6, 6, -6, -6, 6, 6, 0, 0, 0, 0, 0, 0, 6, 6, -6, -6, -6, -6, 6, 6, 0, 0, 0, 0, -6, -6, -6, -6, 0, 0, 0, 0, 6, 6, 6, 6, 12, -12], [-6, 0, -6, 12 - 2 * ER(5), 12 + 2 * ER(5), -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 - ER(5), 3 + ER(5), -2, -2, 12 + 2 * ER(5), 12 - 2 * ER(5), 6, -10, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 - ER(5), 3 + ER(5), -2, -2, 6, -10, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 0, 0, 10, 10, 10, 10, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -2 * ER(5), -2 * ER(5), -2 * ER(5), -2 * ER(5), -3 + ER(5), -3 + ER(5), -3 - ER(5), -3 - ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), -3 - ER(5), -3 - ER(5), -3 + ER(5), -3 + ER(5), 4, 4], [-6, 0, -6, 12 + 2 * ER(5), 12 - 2 * ER(5), -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + ER(5), 3 - ER(5), -2, -2, 12 - 2 * ER(5), 12 + 2 * ER(5), 6, -10, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + ER(5), 3 - ER(5), -2, -2, 6, -10, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 0, 0, 10, 10, 10, 10, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 2 * ER(5), 2 * ER(5), 2 * ER(5), 2 * ER(5), -3 - ER(5), -3 - ER(5), -3 + ER(5), -3 + ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), -3 + ER(5), -3 + ER(5), -3 - ER(5), -3 - ER(5), 4, 4], [18, 0, 18, -6, -6, 18, -6, -6, 6, 6, 6, 6, -6, -6, 12, 0, 6, 6, -6, -6, 6, 6, -6, -6, 0, 18, -6, -6, 6, 6, 6, 6, 12, 0, 6, 6, -6, -6, 6, 6, -6, -6, 0, 0, 0, 0, 0, 0, 6, 6, -6, -6, 6, 6, -6, -6, 0, 0, 0, 0, -6, -6, -6, -6, 0, 0, 0, 0, -6, -6, -6, -6, -12, -12], [6, -15, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), -6, 12, 12, 3, 3, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 9, 0, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 15, 6, -12, -12, -3, -3, -3 + 3 * ER(5), -3 - 3 * ER(5), -9, 0, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 6, -6], [6, -15, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 12, 12, 3, 3, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 9, 0, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 15, 6, -12, -12, -3, -3, -3 - 3 * ER(5), -3 + 3 * ER(5), -9, 0, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 6, -6], [6, 15 // 2, 6, 3 - ER(5), 3 + ER(5), 6, 3, 3, (9 - 4 * ER(5)) // 2, (9 + 4 * ER(5)) // 2, 7 - 3 * ER(5), 7 + 3 * ER(5), 3 + ER(5), 3 - ER(5), 3 // 2, 5, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 15 // 2, 6, 3, 3, (9 - 4 * ER(5)) // 2, (9 + 4 * ER(5)) // 2, 7 - 3 * ER(5), 7 + 3 * ER(5), 3 // 2, 5, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 15, 15, 10, 10, 10, 10, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 2 * ER(5), 2 * ER(5), 2 * ER(5), 2 * ER(5), 3 - ER(5), 3 - ER(5), 3 + ER(5), 3 + ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 3 + ER(5), 3 + ER(5), 3 - ER(5), 3 - ER(5), 1, 1], [6, 15 // 2, 6, 3 + ER(5), 3 - ER(5), 6, 3, 3, (9 + 4 * ER(5)) // 2, (9 - 4 * ER(5)) // 2, 7 + 3 * ER(5), 7 - 3 * ER(5), 3 - ER(5), 3 + ER(5), 3 // 2, 5, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 15 // 2, 6, 3, 3, (9 + 4 * ER(5)) // 2, (9 - 4 * ER(5)) // 2, 7 + 3 * ER(5), 7 - 3 * ER(5), 3 // 2, 5, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 15, 15, 10, 10, 10, 10, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -2 * ER(5), -2 * ER(5), -2 * ER(5), -2 * ER(5), 3 + ER(5), 3 + ER(5), 3 - ER(5), 3 - ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 3 - ER(5), 3 - ER(5), 3 + ER(5), 3 + ER(5), 1, 1], [-6, 0, 6, -2, -2, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), 7 - 3 * ER(5), 7 + 3 * ER(5), 2, 2, 2, 2, 6, 10, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -7 + 3 * ER(5), -7 - 3 * ER(5), -2, -2, -6, -10, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 0, 0, -10, -10, 10, 10, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -10, -10, 10, 10, 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 4, -4], [-6, 0, 6, -2, -2, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 7 + 3 * ER(5), 7 - 3 * ER(5), 2, 2, 2, 2, 6, 10, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), -7 - 3 * ER(5), -7 + 3 * ER(5), -2, -2, -6, -10, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 0, 0, -10, -10, 10, 10, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -10, -10, 10, 10, 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 4, -4], [-6, 0, 6, 12 + 2 * ER(5), 12 - 2 * ER(5), -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + ER(5), 3 - ER(5), 2, 2, 12 - 2 * ER(5), 12 + 2 * ER(5), 6, 10, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + ER(5), 3 - ER(5), 2, 2, 6, 10, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 0, 0, -10, -10, -10, -10, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 2 * ER(5), 2 * ER(5), 2 * ER(5), 2 * ER(5), -3 - ER(5), -3 - ER(5), -3 + ER(5), -3 + ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), -3 + ER(5), -3 + ER(5), -3 - ER(5), -3 - ER(5), -4, -4], [-6, 0, 6, 12 - 2 * ER(5), 12 + 2 * ER(5), -6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - ER(5), 3 + ER(5), 2, 2, 12 + 2 * ER(5), 12 - 2 * ER(5), 6, 10, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - ER(5), 3 + ER(5), 2, 2, 6, 10, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 0, 0, -10, -10, -10, -10, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -2 * ER(5), -2 * ER(5), -2 * ER(5), -2 * ER(5), -3 + ER(5), -3 + ER(5), -3 - ER(5), -3 - ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), -3 - ER(5), -3 - ER(5), -3 + ER(5), -3 + ER(5), -4, -4], [12, -15 // 2, -12, 6, 6, 12, 9, 9, 3 // 2, 3 // 2, 6, 6, 6, 6, 21 // 2, 15, -6, -6, 6, 6, 6, 6, -6, -6, -15 // 2, -12, 9, 9, 3 // 2, 3 // 2, 6, 6, 21 // 2, 15, -6, -6, 6, 6, 6, 6, -6, -6, -15, -15, 0, 0, 0, 0, 6, 6, -6, -6, 6, 6, -6, -6, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 6, 6, 6, 6, 3, 3], [0, 15, 0, -10, -10, 0, 0, 0, 5, 5, 10, 10, 10, 10, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -5, -5, -10, -10, -15, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, -10, -10, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, -10, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 10], [6, 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 0, -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 6], [6, 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 0, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 0, 0, 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 6, 6], [-6, 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 0, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, 0, 0, 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -6, -6], [-6, 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 0, 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -6, -6], [-6, 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, 0, -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -6, 6], [-6, 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, 0, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, 0, 0, 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 6], [6, 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -6, 0, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, 0, 0, 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 6, -6], [6, 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -6, 0, 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 6, -6], [0, 45 // 2, 0, 0, 0, 0, 15, 15, 15 // 2, 15 // 2, 0, 0, 0, 0, -15 // 2, -15, 0, 0, 0, 0, 0, 0, 0, 0, 45 // 2, 0, 15, 15, 15 // 2, 15 // 2, 0, 0, -15 // 2, -15, 0, 0, 0, 0, 0, 0, 0, 0, -15, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, -15], [-18, 0, -18, -6, -6, 18, 6, 6, 6, 6, -6, -6, 6, 6, -12, 0, 6, 6, -6, -6, -6, -6, 6, 6, 0, 18, -6, -6, -6, -6, 6, 6, 12, 0, -6, -6, 6, 6, 6, 6, -6, -6, 0, 0, 0, 0, 0, 0, -6, -6, 6, 6, 6, 6, -6, -6, 0, 0, 0, 0, -6, -6, -6, -6, 0, 0, 0, 0, 6, 6, 6, 6, -12, 12], [6, -15, 6, -3 - 3 * ER(5), -3 + 3 * ER(5), -6, -12, -12, 3, 3, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 9, 0, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 15, -6, 12, 12, -3, -3, 3 - 3 * ER(5), 3 + 3 * ER(5), -9, 0, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -6, 6], [6, -15, 6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, -12, -12, 3, 3, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 9, 0, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 15, -6, 12, 12, -3, -3, 3 + 3 * ER(5), 3 - 3 * ER(5), -9, 0, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -6, 6], [6, 15 // 2, -6, 3 - ER(5), 3 + ER(5), 6, -3, -3, (9 - 4 * ER(5)) // 2, (9 + 4 * ER(5)) // 2, -7 + 3 * ER(5), -7 - 3 * ER(5), 3 + ER(5), 3 - ER(5), 3 // 2, -5, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 15 // 2, -6, -3, -3, (9 - 4 * ER(5)) // 2, (9 + 4 * ER(5)) // 2, -7 + 3 * ER(5), -7 - 3 * ER(5), 3 // 2, -5, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 15, 15, -10, -10, -10, -10, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 2 * ER(5), 2 * ER(5), 2 * ER(5), 2 * ER(5), 3 - ER(5), 3 - ER(5), 3 + ER(5), 3 + ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 3 + ER(5), 3 + ER(5), 3 - ER(5), 3 - ER(5), -1, -1], [6, 15 // 2, -6, 3 + ER(5), 3 - ER(5), 6, -3, -3, (9 + 4 * ER(5)) // 2, (9 - 4 * ER(5)) // 2, -7 - 3 * ER(5), -7 + 3 * ER(5), 3 - ER(5), 3 + ER(5), 3 // 2, -5, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 15 // 2, -6, -3, -3, (9 + 4 * ER(5)) // 2, (9 - 4 * ER(5)) // 2, -7 - 3 * ER(5), -7 + 3 * ER(5), 3 // 2, -5, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 15, 15, -10, -10, -10, -10, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -2 * ER(5), -2 * ER(5), -2 * ER(5), -2 * ER(5), 3 + ER(5), 3 + ER(5), 3 - ER(5), 3 - ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 3 - ER(5), 3 - ER(5), 3 + ER(5), 3 + ER(5), -1, -1], [-6, 0, -6, -2, -2, 6, -3 + 3 * ER(5), -3 - 3 * ER(5), 7 - 3 * ER(5), 7 + 3 * ER(5), -2, -2, 2, 2, 6, -10, -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), -7 + 3 * ER(5), -7 - 3 * ER(5), 2, 2, -6, 10, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 0, 0, 10, 10, -10, -10, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), -10, -10, 10, 10, 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -4, 4], [-6, 0, -6, -2, -2, 6, -3 - 3 * ER(5), -3 + 3 * ER(5), 7 + 3 * ER(5), 7 - 3 * ER(5), -2, -2, 2, 2, 6, -10, -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), -7 - 3 * ER(5), -7 + 3 * ER(5), 2, 2, -6, 10, 3 + 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 0, 0, 10, 10, -10, -10, 3 - 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), -10, -10, 10, 10, 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -4, 4], [12, -15 // 2, 12, 6, 6, 12, -9, -9, 3 // 2, 3 // 2, -6, -6, 6, 6, 21 // 2, -15, -6, -6, 6, 6, -6, -6, 6, 6, -15 // 2, 12, -9, -9, 3 // 2, 3 // 2, -6, -6, 21 // 2, -15, -6, -6, 6, 6, -6, -6, 6, 6, -15, -15, 0, 0, 0, 0, -6, -6, 6, 6, -6, -6, 6, 6, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 6, 6, 6, 6, -3, -3], [0, 15, 0, -10, -10, 0, 0, 0, 5, 5, -10, -10, 10, 10, 15, -20, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -5, -5, 10, 10, -15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, -10, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, -10], [6, 0, -6, 3 + 3 * ER(5), 3 - 3 * ER(5), 6, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -6, -6], [6, 0, -6, 3 + 3 * ER(5), 3 - 3 * ER(5), 6, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, 0, 0, 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, -6], [-6, 0, 6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, 0, 0, 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 6], [-6, 0, 6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, 6], [-6, 0, -6, 3 + 3 * ER(5), 3 - 3 * ER(5), 6, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, 0, -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 0, 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, -6], [-6, 0, -6, 3 + 3 * ER(5), 3 - 3 * ER(5), 6, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, 0, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 0, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 0, 0, 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, -6], [6, 0, 6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -6, 0, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 0, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, 0, 0, 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -6, 6], [6, 0, 6, -3 + 3 * ER(5), -3 - 3 * ER(5), -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -6, 0, 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 0, -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 6], [0, -15, 0, 0, 0, 0, 0, 0, 15, 15, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 15, 15, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -15, 0, 0, 0, 0, 0, 0, 15, 15, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 15, 15, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 10, 10, 0, 0, 0, 10, 10, -10, -10, -10, -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -10, 10, 10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 20, -20, 10, 0, 0, 0, 0, 0, 0, 0, 0, -10, 20, 10, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, -10], [0, 0, 0, 10, 10, 0, 0, 0, 10, 10, -10, -10, -10, -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -10, 10, 10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, -10, 10, -20, 0, 0, 0, 0, 0, 0, 0, 0, 20, -10, -20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, -10], [0, 0, 0, 10, 10, 0, 0, 0, 10, 10, 10, 10, -10, -10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -10, -10, -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 10, -10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, -10, -20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 10], [0, 0, 0, 10, 10, 0, 0, 0, 10, 10, 10, 10, -10, -10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -10, -10, -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, -20, 20, -10, 0, 0, 0, 0, 0, 0, 0, 0, -10, 20, 10, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 10], [-6, 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), 6, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 0, 0, 0, 0, -12, 3 - 3 * ER(5), 3 + 3 * ER(5), -12, 0, 0, 0, 0, -3 - 3 * ER(5), 12, 12, -3 + 3 * ER(5), -6, 6], [-6, 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), 6, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, 0, 0, 0, 0, 3 - 3 * ER(5), -12, -12, 3 + 3 * ER(5), 0, 0, 0, 0, 12, -3 - 3 * ER(5), -3 + 3 * ER(5), 12, -6, 6], [6, 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 0, 0, 0, 0, -3 - 3 * ER(5), 12, 12, -3 + 3 * ER(5), 0, 0, 0, 0, -12, 3 - 3 * ER(5), 3 + 3 * ER(5), -12, 6, -6], [6, 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 0, 0, 0, 0, 12, -3 - 3 * ER(5), -3 + 3 * ER(5), 12, 0, 0, 0, 0, 3 - 3 * ER(5), -12, -12, 3 + 3 * ER(5), 6, -6], [-6, 0, -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 6, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), 0, 0, 0, 0, -12, 3 - 3 * ER(5), 3 + 3 * ER(5), -12, 0, 0, 0, 0, -3 - 3 * ER(5), 12, 12, -3 + 3 * ER(5), 6, -6], [-6, 0, -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 6, -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, 0, 0, 0, 0, 3 - 3 * ER(5), -12, -12, 3 + 3 * ER(5), 0, 0, 0, 0, 12, -3 - 3 * ER(5), -3 + 3 * ER(5), 12, 6, -6], [6, 0, 6, -3 - 3 * ER(5), -3 + 3 * ER(5), -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 6, 0, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, 0, 0, 0, 0, -3 - 3 * ER(5), 12, 12, -3 + 3 * ER(5), 0, 0, 0, 0, -12, 3 - 3 * ER(5), 3 + 3 * ER(5), -12, -6, 6], [6, 0, 6, -3 - 3 * ER(5), -3 + 3 * ER(5), -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 6, 0, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 0, 0, 0, 0, 12, -3 - 3 * ER(5), -3 + 3 * ER(5), 12, 0, 0, 0, 0, 3 - 3 * ER(5), -12, -12, 3 + 3 * ER(5), -6, 6], [0, 0, 0, -2 * ER(5), 2 * ER(5), 0, 0, 0, 2 * ER(5), -2 * ER(5), -10, -10, 2 * ER(5), -2 * ER(5), 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * ER(5), -2 * ER(5), -10, -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 20, 20, -10, 0, 0, 0, 0, 0, 0, 0, 0, -2 * ER(5), 4 * ER(5), -2 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), -4 * ER(5), 4 * ER(5), 4 * ER(5), -10, -10], [0, 0, 0, -2 * ER(5), 2 * ER(5), 0, 0, 0, 2 * ER(5), -2 * ER(5), -10, -10, 2 * ER(5), -2 * ER(5), 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * ER(5), -2 * ER(5), -10, -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, -10, -10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 4 * ER(5), -2 * ER(5), 4 * ER(5), -2 * ER(5), 4 * ER(5), 4 * ER(5), -4 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 4 * ER(5), 4 * ER(5), -10, -10], [0, 0, 0, -2 * ER(5), 2 * ER(5), 0, 0, 0, 2 * ER(5), -2 * ER(5), 10, 10, 2 * ER(5), -2 * ER(5), 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * ER(5), -2 * ER(5), 10, 10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, -20, -20, 10, 0, 0, 0, 0, 0, 0, 0, 0, -2 * ER(5), 4 * ER(5), -2 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), -4 * ER(5), 4 * ER(5), 4 * ER(5), 10, 10], [0, 0, 0, -2 * ER(5), 2 * ER(5), 0, 0, 0, 2 * ER(5), -2 * ER(5), 10, 10, 2 * ER(5), -2 * ER(5), 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * ER(5), -2 * ER(5), 10, 10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 10, 10, -20, 0, 0, 0, 0, 0, 0, 0, 0, 4 * ER(5), -2 * ER(5), 4 * ER(5), -2 * ER(5), 4 * ER(5), 4 * ER(5), -4 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 4 * ER(5), 4 * ER(5), 10, 10], [-6, 0, -6, -3 + ER(5), -3 - ER(5), -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - ER(5), 3 + ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 - ER(5), -3 + ER(5), 6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - ER(5), 3 + ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, 4 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 7 - ER(5), 2 + 2 * ER(5), 2 - 2 * ER(5), 7 + ER(5), -10 - 2 * ER(5), 10 - 2 * ER(5), 10 - 2 * ER(5), -10 - 2 * ER(5), 2 - 2 * ER(5), 7 + ER(5), 7 - ER(5), 2 + 2 * ER(5), -6, -6], [-6, 0, -6, -3 + ER(5), -3 - ER(5), -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - ER(5), 3 + ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 - ER(5), -3 + ER(5), 6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, -6, -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - ER(5), 3 + ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 2 + 2 * ER(5), 7 - ER(5), 7 + ER(5), 2 - 2 * ER(5), 10 - 2 * ER(5), -10 - 2 * ER(5), -10 - 2 * ER(5), 10 - 2 * ER(5), 7 + ER(5), 2 - 2 * ER(5), 2 + 2 * ER(5), 7 - ER(5), -6, -6], [-6, 0, -6, -3 - ER(5), -3 + ER(5), -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + ER(5), 3 - ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + ER(5), -3 - ER(5), 6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + ER(5), 3 - ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 2 - 2 * ER(5), 7 + ER(5), 7 - ER(5), 2 + 2 * ER(5), 10 + 2 * ER(5), -10 + 2 * ER(5), -10 + 2 * ER(5), 10 + 2 * ER(5), 7 - ER(5), 2 + 2 * ER(5), 2 - 2 * ER(5), 7 + ER(5), -6, -6], [-6, 0, -6, -3 - ER(5), -3 + ER(5), -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + ER(5), 3 - ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), -3 + ER(5), -3 - ER(5), 6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, -6, -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + ER(5), 3 - ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, -4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 7 + ER(5), 2 - 2 * ER(5), 2 + 2 * ER(5), 7 - ER(5), -10 + 2 * ER(5), 10 + 2 * ER(5), 10 + 2 * ER(5), -10 + 2 * ER(5), 2 + 2 * ER(5), 7 - ER(5), 7 + ER(5), 2 - 2 * ER(5), -6, -6], [0, 0, 0, -4 * ER(5), 4 * ER(5), 0, 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4 * ER(5), 8 * ER(5), -4 * ER(5), 8 * ER(5), -10 - 2 * ER(5), 10 - 2 * ER(5), 10 + 2 * ER(5), -10 + 2 * ER(5), 10 + 2 * ER(5), 20 - 4 * ER(5), -10 + 2 * ER(5), -20 - 4 * ER(5), 10 + 2 * ER(5), -10 + 2 * ER(5), -10 - 2 * ER(5), 10 - 2 * ER(5), 0, 0], [0, 0, 0, -4 * ER(5), 4 * ER(5), 0, 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), 10 - 2 * ER(5), -10 - 2 * ER(5), -10 + 2 * ER(5), 10 + 2 * ER(5), 20 - 4 * ER(5), 10 + 2 * ER(5), -20 - 4 * ER(5), -10 + 2 * ER(5), -10 + 2 * ER(5), 10 + 2 * ER(5), 10 - 2 * ER(5), -10 - 2 * ER(5), 0, 0], [0, 0, 0, -4 * ER(5), 4 * ER(5), 0, 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4 * ER(5), 8 * ER(5), -4 * ER(5), 8 * ER(5), 10 - 2 * ER(5), -10 - 2 * ER(5), -10 + 2 * ER(5), 10 + 2 * ER(5), -10 + 2 * ER(5), -20 - 4 * ER(5), 10 + 2 * ER(5), 20 - 4 * ER(5), -10 + 2 * ER(5), 10 + 2 * ER(5), 10 - 2 * ER(5), -10 - 2 * ER(5), 0, 0], [0, 0, 0, -4 * ER(5), 4 * ER(5), 0, 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 * ER(5), -4 * ER(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8 * ER(5), -4 * ER(5), 8 * ER(5), -4 * ER(5), -10 - 2 * ER(5), 10 - 2 * ER(5), 10 + 2 * ER(5), -10 + 2 * ER(5), -20 - 4 * ER(5), -10 + 2 * ER(5), 20 - 4 * ER(5), 10 + 2 * ER(5), 10 + 2 * ER(5), -10 + 2 * ER(5), -10 - 2 * ER(5), 10 - 2 * ER(5), 0, 0], [-6, 0, 6, -3 - ER(5), -3 + ER(5), -6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + ER(5), 3 - ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + ER(5), -3 - ER(5), 6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + ER(5), 3 - ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), -3 - 3 * ER(5), 12, -12, 3 - 3 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 2 - 2 * ER(5), 7 + ER(5), 7 - ER(5), 2 + 2 * ER(5), 10 + 2 * ER(5), -10 + 2 * ER(5), -10 + 2 * ER(5), 10 + 2 * ER(5), 7 - ER(5), 2 + 2 * ER(5), 2 - 2 * ER(5), 7 + ER(5), 6, 6], [-6, 0, 6, -3 - ER(5), -3 + ER(5), -6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + ER(5), 3 - ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 + ER(5), -3 - ER(5), 6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 6, 3 + 3 * ER(5), 3 - 3 * ER(5), 3 + ER(5), 3 - ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, 12, -3 - 3 * ER(5), 3 - 3 * ER(5), -12, -4 * ER(5), -4 * ER(5), -4 * ER(5), -4 * ER(5), 7 + ER(5), 2 - 2 * ER(5), 2 + 2 * ER(5), 7 - ER(5), -10 + 2 * ER(5), 10 + 2 * ER(5), 10 + 2 * ER(5), -10 + 2 * ER(5), 2 + 2 * ER(5), 7 - ER(5), 7 + ER(5), 2 - 2 * ER(5), 6, 6], [-6, 0, 6, -3 + ER(5), -3 - ER(5), -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - ER(5), 3 + ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - ER(5), -3 + ER(5), 6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - ER(5), 3 + ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, 0, 3 + 3 * ER(5), 3 - 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), 3 + 3 * ER(5), 3 - 3 * ER(5), 0, 0, 0, 0, 0, 0, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 12, -3 + 3 * ER(5), 3 + 3 * ER(5), -12, 4 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 7 - ER(5), 2 + 2 * ER(5), 2 - 2 * ER(5), 7 + ER(5), -10 - 2 * ER(5), 10 - 2 * ER(5), 10 - 2 * ER(5), -10 - 2 * ER(5), 2 - 2 * ER(5), 7 + ER(5), 7 - ER(5), 2 + 2 * ER(5), 6, 6], [-6, 0, 6, -3 + ER(5), -3 - ER(5), -6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - ER(5), 3 + ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 - ER(5), -3 + ER(5), 6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 6, 3 - 3 * ER(5), 3 + 3 * ER(5), 3 - ER(5), 3 + ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 6, 0, 3 - 3 * ER(5), 3 + 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), -3 + 3 * ER(5), -3 - 3 * ER(5), 3 - 3 * ER(5), 3 + 3 * ER(5), 0, 0, 0, 0, 0, 0, -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), -3 + 3 * ER(5), 12, -12, 3 + 3 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 4 * ER(5), 2 + 2 * ER(5), 7 - ER(5), 7 + ER(5), 2 - 2 * ER(5), 10 - 2 * ER(5), -10 - 2 * ER(5), -10 - 2 * ER(5), 10 - 2 * ER(5), 7 + ER(5), 2 - 2 * ER(5), 2 + 2 * ER(5), 7 - ER(5), 6, 6], [12, 15, 12, 4, 4, -12, 6, 6, 1, 1, 4, 4, -4, -4, 3, -10, 6, 6, -6, -6, -6, -6, 6, 6, -15, -12, -6, -6, -1, -1, -4, -4, -3, 10, -6, -6, 6, 6, 6, 6, -6, -6, 0, 0, 10, 10, -10, -10, -6, -6, 6, 6, 6, 6, -6, -6, -10, -10, 10, 10, -6, -6, -6, -6, 0, 0, 0, 0, 6, 6, 6, 6, 8, -8], [12, 15, -12, 4, 4, -12, -6, -6, 1, 1, -4, -4, -4, -4, 3, 10, 6, 6, -6, -6, 6, 6, -6, -6, -15, 12, 6, 6, -1, -1, 4, 4, -3, -10, -6, -6, 6, 6, -6, -6, 6, 6, 0, 0, -10, -10, 10, 10, 6, 6, -6, -6, -6, -6, 6, 6, -10, -10, 10, 10, -6, -6, -6, -6, 0, 0, 0, 0, 6, 6, 6, 6, -8, 8]], :eigenvalues => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, E(5, 3), E(5, 2), E(5, 3), E(5, 2), E(5, 3), E(5, 2), E(5, 3), E(5, 2), 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, E(5, 3), E(5, 2), E(5, 3), E(5, 2), -(E(5, 3)), -(E(5, 2)), -(E(5, 3)), -(E(5, 2)), E(4), -(E(4)), E(3), E(3, 2), -(E(3, 2)), -(E(3)), E(5, 4), E(5), E(5, 4), E(5), -(E(5, 4)), -(E(5)), -(E(5, 4)), -(E(5)), E(3), E(3, 2), E(3), E(3, 2), E(5, 4), E(5), E(5, 4), E(5), E(15, 2), E(15, 13), E(15, 8), E(15, 7), E(5, 4), E(5), E(5, 4), E(5), -1, 1], :perm => #= none:476 =# @perm_str("(17,18)(19,20)(21,22)(23,24)(35,36)(37,38)(39,40)(41,42)(43,44)(45,46)(47,48)(49,50)(51,52)(53,54)(55,56)(57,58)(59,60)(61,62)(63,64)(65,66)(67,68)(69,70)(71,72)"), :special => 9)
chevieset(:H4, :UnipotentCharacters, function ()
        local cuspidal
        cuspidal = function (arg...,)
                local res, n
                n = "H_4"
                if length(arg) > 2
                    n *= SPrint("^", arg[3])
                end
                n *= SPrint("[", FormatTeX(arg[2]), "]")
                res = Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [arg[1]], :eigenvalue => arg[2], :cuspidalName => n)
                return res
            end
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "H", :indices => 1:4, :rank => 4), :levi => [], :eigenvalue => 1, :parameterExponents => [1, 1, 1, 1], :cuspidalName => "", :charNumbers => 1:34), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "I", :indices => [4, 3], :rank => 2, :bond => 10), :levi => 1:2, :eigenvalue => E(5, 3), :parameterExponents => [1, 5], :cuspidalName => "I_2(5)[1,2]", :charNumbers => [35, 44, 37, 45, 47, 53, 49, 51]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "I", :indices => [4, 3], :rank => 2, :bond => 10), :levi => 1:2, :eigenvalue => E(5, 2), :parameterExponents => [1, 5], :cuspidalName => "I_2(5)[1,3]", :charNumbers => [36, 43, 38, 46, 48, 54, 50, 52]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [4], :rank => 1), :levi => 1:3, :eigenvalue => E(4), :parameterExponents => [15], :cuspidalName => "H_3[i]", :charNumbers => [41, 39], :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [4], :rank => 1), :levi => 1:3, :eigenvalue => -(E(4)), :parameterExponents => [15], :cuspidalName => "H_3[-i]", :charNumbers => [42, 40], :qEigen => 1 // 2), cuspidal(55, 1), cuspidal(56, -1), cuspidal(57, -1, 2), cuspidal(58, -1, 3), cuspidal(59, 1, 2), cuspidal(60, 1, 3), cuspidal(61, -1, 4), cuspidal(62, -1, 5), cuspidal(63, 1, 4), cuspidal(64, -1, 6), cuspidal(65, E(5, 3)), cuspidal(66, E(5, 2)), cuspidal(67, E(5, 3), 2), cuspidal(68, E(5, 2), 2), cuspidal(69, -(E(5, 3))), cuspidal(70, -(E(5, 2))), cuspidal(71, -(E(5, 3)), 2), cuspidal(72, -(E(5, 2)), 2), cuspidal(73, E(4)), cuspidal(74, -(E(4))), cuspidal(75, E(3)), cuspidal(76, E(3, 2)), cuspidal(77, -(E(3, 2))), cuspidal(78, -(E(3))), cuspidal(79, E(5, 4)), cuspidal(80, E(5)), cuspidal(81, E(5, 4), 2), cuspidal(82, E(5), 2), cuspidal(83, -(E(5, 4))), cuspidal(84, -(E(5))), cuspidal(85, -(E(5, 4)), 2), cuspidal(86, -(E(5)), 2), cuspidal(87, E(3), 2), cuspidal(88, E(3, 2), 2), cuspidal(89, E(3), 3), cuspidal(90, E(3, 2), 3), cuspidal(91, E(5, 4), 3), cuspidal(92, E(5), 3), cuspidal(93, E(5, 4), 4), cuspidal(94, E(5), 4), cuspidal(95, E(15, 2)), cuspidal(96, E(15, 13)), cuspidal(97, E(15, 8)), cuspidal(98, E(15, 7)), cuspidal(99, E(5, 4), 5), cuspidal(100, E(5), 5), cuspidal(101, E(5, 4), 6), cuspidal(102, E(5), 6), cuspidal(103, -1, 7), cuspidal(104, 1, 5)], :families => [Family("C1", [1]), Family("C1", [2]), Family("C1", [27]), Family("C1", [28]), Family("C1", [31], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [32], Dict{Symbol, Any}(:ennola => -1)), Family(((CHEVIE[:families])[:Dihedral])(5), [3, 5, 35, 36], Dict{Symbol, Any}(:ennola => -1)), Family(((CHEVIE[:families])[:Dihedral])(5), [11, 13, 37, 38], Dict{Symbol, Any}(:ennola => 1)), Family(((CHEVIE[:families])[:Dihedral])(5), [12, 14, 44, 43], Dict{Symbol, Any}(:ennola => 1)), Family(((CHEVIE[:families])[:Dihedral])(5), [4, 6, 45, 46], Dict{Symbol, Any}(:ennola => -1)), Family("C'\"2", [18, 20, 39, 40], Dict{Symbol, Any}(:ennola => 4)), Family("C'\"2", [21, 19, 41, 42], Dict{Symbol, Any}(:ennola => -4)), Family("HS4", [15, 9, 10, 7, 8, 22, 16, 17, 26, 25, 24, 23, 29, 30, 33, 34, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], Dict{Symbol, Any}(:ennola => 29))], :a => [0, 60, 1, 31, 1, 31, 6, 6, 6, 6, 2, 22, 2, 22, 6, 6, 6, 3, 18, 3, 18, 6, 6, 6, 6, 6, 4, 16, 6, 6, 5, 15, 6, 6, 1, 1, 2, 2, 3, 3, 18, 18, 22, 22, 31, 31, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], :A => [0, 60, 29, 59, 29, 59, 54, 54, 54, 54, 38, 58, 38, 58, 54, 54, 54, 42, 57, 42, 57, 54, 54, 54, 54, 54, 44, 56, 54, 54, 45, 55, 54, 54, 29, 29, 38, 38, 42, 42, 57, 57, 58, 58, 59, 59, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54])
    end)
chevieset(:H4, :Invariants, function ()
        local r, C
        C = chevieget(:H4, :CartanMat)
        r = RootsCartan(C) * C
        return map((d->begin
                        function (arg...,)
                            return Sum(r, (a->begin
                                            (arg * a) ^ d
                                        end))
                        end
                    end), chevieget(:H4, :ReflectionDegrees))
    end)
chevieset(:H4, :KLeftCellRepresentatives, [Dict{Symbol, Any}(:character => [1], :duflo => [1, 2, 3, 4], :reps => ""), Dict{Symbol, Any}(:character => [2], :duflo => [61, 62, 63, 64], :reps => ""), Dict{Symbol, Any}(:character => [5, 3], :duflo => [1, 2, 8, 64], :reps => [[16, 2, 3, 87]]), Dict{Symbol, Any}(:character => [6, 4], :duflo => [1, 66, 63, 64], :reps => [[9, 65, 71, 64]]), Dict{Symbol, Any}(:character => [13, 11], :duflo => [2, 1, 27, 103], :reps => [[3, 20, 1, 110]]), Dict{Symbol, Any}(:character => [14, 12], :duflo => [1, 66, 68, 4], :reps => [[9, 65, 76, 4]]), Dict{Symbol, Any}(:character => [20, 18], :duflo => [1, 2, 32, 120], :reps => [[23, 3, 2, 116], [24, 23, 112, 2], [33, 1, 110, 32]]), Dict{Symbol, Any}(:character => [20, 18], :duflo => [19, 85, 10, 20], :reps => [[12, 6, 10, 109], [13, 20, 97, 6], [19, 12, 80, 70]]), Dict{Symbol, Any}(:character => [21, 19], :duflo => [10, 63, 62, 94], :reps => [[15, 62, 73, 83], [15, 77, 13, 94], [21, 85, 5, 83]]), Dict{Symbol, Any}(:character => [21, 19], :duflo => [19, 85, 10, 88], :reps => [[13, 81, 6, 76], [17, 67, 69, 88], [19, 69, 70, 76]]), Dict{Symbol, Any}(:character => [27], :duflo => [2, 1, 24, 119], :reps => [[1, 35, 120, 39], [38, 2, 116, 24]]), Dict{Symbol, Any}(:character => [27], :duflo => [12, 21, 102, 30], :reps => [[1, 12, 25, 119], [35, 1, 107, 25]]), Dict{Symbol, Any}(:character => [27], :duflo => [33, 11, 115, 18], :reps => [[2, 30, 74, 100], [2, 30, 114, 40]]), Dict{Symbol, Any}(:character => [28], :duflo => [1, 76, 4, 3], :reps => [[27, 72, 73, 86], [28, 92, 14, 86]]), Dict{Symbol, Any}(:character => [28], :duflo => [36, 117, 54, 74], :reps => [[24, 102, 21, 18], [46, 110, 34, 100]]), Dict{Symbol, Any}(:character => [28], :duflo => [40, 102, 30, 96], :reps => [[19, 94, 16, 10], [32, 68, 77, 96]]), Dict{Symbol, Any}(:character => [31], :duflo => [1, 2, 3, 100], :reps => [[2, 28, 119, 44], [3, 39, 117, 1], [31, 1, 107, 3]]), Dict{Symbol, Any}(:character => [31], :duflo => [1, 31, 119, 46], :reps => [[1, 31, 85, 106], [15, 30, 114, 12], [34, 12, 116, 15]]), Dict{Symbol, Any}(:character => [31], :duflo => [1, 35, 106, 4], :reps => [[4, 17, 1, 117], [17, 16, 115, 48], [40, 4, 110, 1]]), Dict{Symbol, Any}(:character => [31], :duflo => [34, 107, 3, 52], :reps => [[3, 39, 116, 12], [6, 24, 73, 112], [6, 24, 119, 52]]), Dict{Symbol, Any}(:character => [32], :duflo => [2, 1, 79, 64], :reps => [[25, 97, 20, 1], [26, 64, 71, 101], [34, 96, 29, 101]]), Dict{Symbol, Any}(:character => [32], :duflo => [27, 106, 26, 13], :reps => [[4, 13, 92, 66], [34, 66, 70, 103], [42, 107, 36, 103]]), Dict{Symbol, Any}(:character => [32], :duflo => [31, 62, 63, 113], :reps => [[23, 10, 107, 62], [38, 117, 39, 10], [42, 105, 41, 113]]), Dict{Symbol, Any}(:character => [32], :duflo => [45, 109, 44, 110], :reps => [[16, 17, 102, 69], [32, 115, 36, 17], [37, 69, 67, 110]]), Dict{Symbol, Any}(:character => [34, 34, 33, 30, 29, 26, 25, 24, 23, 22, 10, 9], :duflo => [14, 64, 63, 62], :reps => [[5, 28, 100, 86], [5, 28, 117, 26], [5, 32, 105, 64], [10, 26, 90, 101], [10, 26, 120, 41], [13, 29, 110, 75], [13, 29, 118, 15], [15, 30, 102, 89], [15, 30, 120, 29], [16, 15, 111, 13], [16, 31, 112, 63], [17, 16, 88, 99], [17, 16, 117, 39], [17, 18, 92, 80], [17, 18, 108, 20], [18, 15, 80, 102], [18, 15, 116, 42], [20, 13, 77, 110], [20, 13, 119, 50], [24, 63, 62, 78], [24, 63, 82, 18], [26, 17, 101, 88], [26, 17, 119, 28], [28, 20, 103, 77], [28, 20, 116, 17], [29, 10, 91, 90], [29, 10, 114, 30], [30, 5, 89, 100], [30, 5, 118, 40], [33, 62, 78, 70], [33, 62, 92, 10], [36, 104, 5, 13], [37, 75, 98, 13], [37, 111, 13, 26], [41, 75, 64, 102], [41, 75, 106, 42], [42, 63, 113, 16], [42, 115, 16, 41], [43, 64, 109, 5], [43, 112, 5, 42], [45, 70, 80, 90], [45, 70, 103, 30], [46, 78, 70, 80], [46, 78, 91, 20], [47, 88, 99, 26], [47, 117, 26, 15], [49, 77, 110, 28], [49, 119, 28, 29], [50, 86, 63, 101], [50, 86, 105, 41], [52, 80, 102, 17], [53, 89, 100, 15], [53, 118, 15, 28], [55, 90, 101, 29]]), Dict{Symbol, Any}(:character => [34, 34, 33, 30, 29, 26, 25, 24, 23, 22, 10, 9], :duflo => [31, 62, 92, 14], :reps => [[4, 21, 104, 5], [4, 40, 115, 62], [5, 30, 103, 81], [5, 30, 117, 21], [11, 20, 97, 78], [11, 20, 113, 18], [11, 33, 109, 68], [14, 21, 88, 101], [14, 21, 119, 41], [15, 18, 82, 107], [15, 18, 120, 47], [18, 25, 107, 80], [18, 25, 118, 20], [20, 28, 106, 85], [20, 28, 119, 25], [21, 22, 101, 90], [21, 22, 120, 30], [22, 11, 90, 97], [22, 11, 117, 37], [25, 4, 80, 98], [25, 4, 113, 38], [25, 14, 93, 88], [25, 14, 114, 28], [26, 96, 11, 5], [27, 68, 62, 73], [28, 5, 85, 103], [28, 5, 118, 43], [30, 15, 100, 82], [30, 15, 116, 22], [31, 62, 73, 74], [34, 81, 89, 5], [34, 104, 5, 18], [39, 80, 98, 18], [39, 113, 18, 21], [41, 62, 110, 4], [41, 112, 4, 47], [42, 73, 74, 75], [42, 73, 93, 15], [43, 78, 62, 107], [43, 78, 109, 47], [46, 68, 111, 11], [46, 115, 11, 41], [47, 81, 68, 101], [47, 81, 108, 41], [48, 74, 75, 88], [48, 74, 100, 28], [49, 75, 88, 82], [49, 75, 106, 22], [50, 90, 97, 21], [50, 117, 21, 20], [51, 85, 103, 20], [51, 118, 20, 30], [52, 82, 107, 30], [55, 88, 101, 25]]), Dict{Symbol, Any}(:character => [34, 34, 33, 33, 30, 29, 26, 25, 24, 23, 22, 17, 16, 15], :duflo => [19, 97, 52, 86], :reps => [[1, 12, 64, 102], [1, 12, 106, 42], [1, 35, 106, 85], [1, 35, 119, 25], [7, 1, 88, 8], [7, 36, 111, 74], [7, 36, 120, 14], [8, 25, 107, 1], [12, 21, 77, 110], [12, 21, 119, 50], [14, 25, 91, 96], [14, 25, 118, 36], [16, 7, 87, 81], [16, 7, 102, 21], [16, 31, 108, 79], [16, 31, 118, 19], [17, 16, 94, 87], [17, 16, 115, 27], [17, 26, 104, 72], [18, 17, 95, 94], [18, 17, 119, 34], [19, 8, 76, 105], [19, 8, 115, 45], [19, 14, 86, 91], [21, 14, 114, 7], [25, 18, 96, 95], [25, 18, 120, 35], [26, 7, 72, 111], [26, 7, 116, 51], [27, 19, 109, 76], [27, 19, 117, 16], [31, 1, 79, 106], [31, 1, 117, 46], [32, 102, 17, 1], [34, 12, 103, 77], [35, 1, 107, 64], [38, 76, 105, 27], [38, 115, 27, 25], [40, 85, 90, 1], [40, 107, 1, 27], [41, 75, 74, 66], [43, 74, 66, 91], [43, 74, 97, 31], [44, 66, 91, 78], [44, 66, 108, 18], [45, 77, 74, 94], [45, 77, 110, 34], [45, 119, 34, 14], [46, 74, 100, 7], [46, 114, 7, 34], [48, 72, 111, 17], [48, 116, 17, 36], [49, 85, 72, 96], [49, 85, 103, 36], [50, 78, 79, 95], [50, 78, 109, 35], [51, 79, 106, 16], [51, 117, 16, 35], [54, 95, 94, 25], [56, 91, 96, 19], [57, 96, 95, 14]]), Dict{Symbol, Any}(:character => [34, 34, 33, 33, 30, 30, 29, 29, 26, 25, 24, 23, 17, 16, 8, 7], :duflo => [1, 35, 102, 64], :reps => [[1, 7, 63, 97], [1, 7, 100, 37], [1, 31, 100, 89], [1, 31, 118, 29], [2, 16, 64, 111], [2, 16, 113, 51], [2, 38, 113, 70], [2, 38, 119, 10], [7, 23, 80, 107], [7, 23, 118, 47], [10, 29, 93, 98], [10, 29, 120, 38], [11, 2, 77, 83], [11, 2, 97, 23], [11, 33, 105, 86], [11, 33, 120, 26], [13, 20, 91, 96], [13, 20, 118, 36], [13, 22, 95, 76], [16, 17, 73, 112], [16, 17, 119, 52], [17, 26, 112, 71], [17, 26, 117, 11], [20, 11, 96, 77], [20, 11, 111, 17], [20, 28, 110, 67], [22, 11, 76, 105], [22, 11, 115, 45], [23, 10, 109, 2], [26, 10, 88, 93], [26, 10, 114, 33], [28, 2, 67, 113], [28, 2, 116, 53], [29, 13, 98, 91], [29, 13, 119, 31], [31, 1, 104, 63], [31, 16, 103, 73], [33, 1, 86, 100], [33, 1, 117, 40], [34, 71, 101, 17], [34, 111, 17, 29], [36, 7, 102, 80], [38, 2, 109, 64], [38, 71, 64, 105], [38, 71, 108, 45], [39, 104, 1, 17], [40, 70, 99, 2], [40, 109, 2, 36], [41, 80, 70, 96], [41, 80, 107, 36], [41, 118, 36, 10], [42, 70, 76, 93], [42, 70, 103, 33], [43, 64, 107, 1], [43, 110, 1, 45], [45, 67, 113, 20], [45, 116, 20, 38], [47, 73, 86, 91], [47, 73, 112, 31], [47, 119, 31, 26], [48, 82, 70, 76], [49, 91, 96, 29], [50, 76, 105, 13], [52, 89, 67, 98], [52, 89, 102, 38], [53, 86, 100, 11], [53, 117, 11, 31], [56, 93, 98, 26], [57, 98, 91, 10]])])
chevieset(:I, :CartanMat, function (arg...,)
        local bond, type_, m
        m = [[2, 0], [0, 2]]
        bond = arg[1]
        if bond == 2
            return m
        end
        if length(arg) == 2
            type_ = arg[2]
        elseif mod(bond, 2) == 0
            type_ = 1
        else
            type_ = E(2bond) + E(2bond, -1)
        end
        (m[1])[2] = -type_
        (m[2])[1] = (2 + E(bond) + E(bond, -1)) // (m[1])[2]
        return m
    end)
chevieset(:I, :PrintDiagram, function (arg...,)
        local bond, indices, type_
        print(arg[3], " ")
        bond = arg[1]
        indices = arg[2]
        if length(arg) == 4
            type_ = arg[4]
        else
            type_ = E(2bond) + E(2bond, -1)
        end
        if type_ == E(2bond) + E(2bond, -1)
            print(indices[1], " -", string(bond), "- ", indices[2], "\n")
        elseif type_ == 1
            print(indices[1], " >", string(bond), "> ", indices[2], "\n")
        else
            print(indices[1], " ?", string(bond), "? ", indices[2], "\n")
        end
    end)
chevieset(:I, :ReflectionName, function (arg...,)
        local bond, type_, opt
        bond = arg[1]
        opt = arg[2]
        if length(arg) == 3
            type_ = arg[3]
        elseif mod(bond, 2) == 0
            type_ = 1
        else
            type_ = E(2bond) + E(2bond, -1)
        end
        if type_ == 1
            if haskey(opt, :TeX)
                return SPrint("I_2(", bond, ")")
            elseif haskey(opt, :arg)
                return SPrint("\"I\",2,", bond)
            else
                return SPrint("I2(", bond, ")")
            end
        elseif type_ == E(2bond) + E(2bond, -1)
            if mod(bond, 2) == 1
                if haskey(opt, :TeX)
                    return SPrint("I_2(", bond, ")")
                elseif haskey(opt, :arg)
                    return SPrint("\"I\",2,", bond)
                else
                    return SPrint("I2(", bond, ")")
                end
            else
                if haskey(opt, :TeX)
                    return SPrint("I_{\\hbox{sym}2}(", bond, ")")
                elseif haskey(opt, :arg)
                    return SPrint("\"Isym\",2,", bond)
                else
                    return SPrint("Isym2(", bond, ")")
                end
            end
        elseif haskey(opt, :TeX)
            return SPrint("I_?(", Format(type_ ^ 2 // (2 + E(bond) + E(bond, -1)), opt), ")(", bond, ")")
        elseif haskey(opt, :arg)
            return SPrint("\"Isym\",2,", bond, ",", Format(type_ ^ 2 // (2 + E(bond) + E(bond, -1)), opt))
        else
            return SPrint("I?(", type_ ^ 2 // (2 + E(bond) + E(bond, -1)), ")(", bond, ")")
        end
    end)
chevieset(:I, :SemisimpleRank, 2)
chevieset(:I, :GeneratingRoots, function (m,)
        local a, b, r
        a = E(2m, m - 1)
        b = ComplexConjugate(a)
        if mod(m, 2) == 0
            r = ER(m // 2)
        else
            r = 1
        end
        return [[1, 0], [(r * (a + b)) // 2, ((r * (a - b)) // 2) // E(4)]]
    end)
chevieset(:I, :EigenvaluesGeneratingReflections, (m->begin
            [-1, -1]
        end))
chevieset(:I, :Size, function (arg...,)
        return 2 * arg[1]
    end)
chevieset(:I, :ReflectionDegrees, (m->begin
            [2, m]
        end))
chevieset(:I, :NrConjugacyClasses, (m->begin
            div(m + 3, 2) + mod(m + 1, 2) * 2
        end))
chevieset(:I, :ParabolicRepresentatives, function (m, s)
        return (chevieget(:imp, :ParabolicRepresentatives))(m, m, 2, s)
    end)
chevieset(:I, :CharName, function (m, x, option)
        local s
        if IsList(x[1])
            return PartitionTupleToString(x)
        else
            if haskey(option, :TeX)
                s = "\\phi"
            else
                s = "phi"
            end
            s = SPrint(s, "{", x[1], ",", x[2], "}")
            if length(x) == 3
                s = Append(s, x[3])
            end
            return string(s)
        end
    end)
chevieset(:I, :CharInfo, function (m,)
        local res, applyf, v, m1
        res = Dict{Symbol, Any}(:charparams => [[1, 0]])
        if mod(m, 2) == 0
            res[:extRefl] = [1, 5, 4]
            m1 = div(m, 2)
            res[:charparams] = Append(res[:charparams], [[1, m1, "'"], [1, m1, "''"]])
        else
            res[:extRefl] = [1, 3, 2]
        end
        push!(res[:charparams], [1, m])
        res[:charparams] = Append(res[:charparams], map((i->begin
                            [2, i]
                        end), 1:div(m - 1, 2)))
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        res[:B] = map(function (phi,)
                    if phi[1] == 1
                        return phi[2]
                    else
                        return m - phi[2]
                    end
                end, res[:charparams])
        res[:a] = map(function (phi,)
                    if phi[1] != 1 || phi[2] == m // 2
                        return 1
                    else
                        return phi[2]
                    end
                end, res[:charparams])
        res[:A] = map(function (phi,)
                    if phi[1] == 1 || phi[2] == m // 2
                        return m - 1
                    else
                        return phi[2]
                    end
                end, res[:charparams])
        res[:charSymbols] = map(function (l,)
                    local S, k
                    S = map((i->begin
                                    [0]
                                end), 1:m)
                    k = 0
                    if k != 0
                        S[1] = [0, 1]
                        S[1 + mod(k + l, m)] = [0, 1]
                        S[k + 1] = []
                        S[l + 1] = []
                    else
                        S[1] = [1]
                        S[l + 1] = [1]
                    end
                    return S
                end, 1:div(m - 1, 2))
        v = map((x->begin
                        [0]
                    end), 1:m)
        v[m] = [1, 2]
        res[:charSymbols] = Concatenation([v], res[:charSymbols])
        if mod(m, 2) == 0
            v = map((x->begin
                            [0]
                        end), 1:m)
            v[m] = [1]
            v[m1] = [1]
            res[:charSymbols] = Concatenation([v], res[:charSymbols])
            v = map((x->begin
                            [0]
                        end), 1:m)
            v[m] = [1]
            v[m1] = [1]
            res[:charSymbols] = Concatenation([v], res[:charSymbols])
        end
        v = map((x->begin
                        [0, 1]
                    end), 1:m)
        v[m] = [2]
        res[:charSymbols] = Concatenation([v], res[:charSymbols])
        res[:malleParams] = map((x->begin
                        map(PartBeta, x)
                    end), res[:charSymbols])
        if mod(m, 2) == 0
#           (res[:malleParams])[2] = Concatenation(((res[:malleParams])[2])[1:m1], [1])
#           (res[:malleParams])[3] = Concatenation(((res[:malleParams])[3])[1:m1], [-1])
        end
        return res
    end)
chevieset(:I, :WordsClassRepresentatives, function (m,)
        local r, x, i
        if IsInt(m // 2)
            r = [[], [1], [2]]
        else
            r = [[], [1]]
        end
        x = [1, 2]
        for i = 1:div(m, 2)
            push!(r, copy(x))
            x = Append(x, [1, 2])
        end
        return r
    end)
chevieset(:I, :ClassInfo, function (m,)
        local r, i, clnp, cl, g1, g2, gen, perm, m1
        r = (chevieget(:I, :WordsClassRepresentatives))(m)
        clnp = map(IntListToString, r)
        g1 = Perm()
        i = 2
        while 2i <= m + 1
            g1 = g1 * Perm(i, (m - i) + 2)
            i = i + 1
        end
        g2 = Perm()
        i = 1
        while 2i <= m
            g2 = g2 * Perm(i, (m - i) + 1)
            i = i + 1
        end
        gen = [g1, g2]
        perm = function (l,)
                if length(l) == 0
                    return Perm()
                else
                    return Product(gen[l])
                end
            end
        m1 = div(m, 2)
        if mod(m, 2) == 0
            cl = [1, m1, m1]
            cl = Append(cl, fill(0, max(0, (1 + (m1 - 1)) - 1)) + 2)
            push!(cl, 1)
        else
            cl = [1, m]
            cl = Append(cl, fill(0, max(0, (1 + m1) - 1)) + 2)
        end
        return Dict{Symbol, Any}(:classtext => r, :classnames => clnp, :classparams => clnp, :orders => map((i->begin
                                OrderPerm(perm(i))
                            end), r), :classes => cl)
    end)
chevieset(:I, :HeckeCharTable, function (m, param, rootparam)
        local u, v, squv, cl, r, ct, tbl
        u = -((param[1])[1]) // (param[1])[2]
        v = -((param[2])[1]) // (param[2])[2]
        if mod(m, 2) != 0
            squv = u
        elseif rootparam[1] !== nothing && rootparam[2] !== nothing
            squv = rootparam[1] * rootparam[2]
        else
            squv = GetRoot(u * v, 2, "CharTable(Hecke(I2(", m, ")))")
        end
        ct = [[u, v]]
        if mod(m, 2) == 0
            ct = Append(ct, [[u, -(u ^ 0)], [-(v ^ 0), v]])
        end
        push!(ct, [-(v ^ 0), -(v ^ 0)])
        cl = (chevieget(:I, :ClassInfo))(m)
        r = cl[:classtext]
        ct = map((i->begin
                        map((x->begin
                                    Product(i[x])
                                end), r)
                    end), ct)
        ct = Append(ct, map((j->begin
                            map(function (i,)
                                    local k
                                    k = length(r[i]) // 2
                                    if r[i] == []
                                        return 2 * v ^ 0
                                    elseif r[i] == [1]
                                        return u - 1
                                    elseif r[i] == [2]
                                        return v - 1
                                    else
                                        return squv ^ k * (E(m, k * j) + E(m, -k * j))
                                    end
                                end, 1:length(r))
                        end), 1:div(m - 1, 2)))
        tbl = Dict{Symbol, Any}(:identifier => SPrint("H(I2(", m, "))"), :cartan => CartanMat("I", 2, m), :size => 2m, :irredinfo => map((x->begin
                                Dict{Symbol, Any}(:charparam => x, :charname => (chevieget(:I, :CharName))(m, x, Dict{Symbol, Any}(:TeX => true)))
                            end), ((chevieget(:I, :CharInfo))(m))[:charparams]), :parameter => [u, v], :powermap => [], :irreducibles => ct * v ^ 0)
        Inherit(tbl, cl)
        tbl[:centralizers] = map((i->begin
                        tbl[:size] // i
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(:I, :Representation, function (m, i)
        return (chevieget(:I, :HeckeRepresentation))(m, [[1, -1], [1, -1]], [1, 1], i)
    end)
chevieset(:I, :HeckeRepresentation, function (m, param, rootparam, i)
        local u, v, squv
        if i == 1
            return [[[(param[1])[1]]], [[(param[2])[1]]]]
        end
        if mod(m, 2) == 0
            i = i - 2
        end
        if i == 0
            return [[[(param[1])[1]]], [[(param[2])[2]]]]
        elseif i == 1
            return [[[(param[1])[2]]], [[(param[2])[1]]]]
        elseif i == 2
            return [[[(param[1])[2]]], [[(param[2])[2]]]]
        else
            u = -((param[1])[1]) // (param[1])[2]
            v = -((param[2])[1]) // (param[2])[2]
            if mod(m, 2) != 0
                squv = u
            elseif rootparam[1] !== nothing && rootparam[2] !== nothing
                squv = rootparam[1] * rootparam[2]
            else
                squv = GetRoot(u * v, 2, "Representation(Hecke(I2(", m, ")),[", i, "])")
            end
            return [-([[-(u ^ 0), u ^ 0], [0u, u]]) * (param[1])[2], -([[v, 0v], [u + v + squv * (E(m, i - 2) + E(m, 2 - i)), -(v ^ 0)]]) * (param[2])[2]]
        end
    end)
chevieset(:I, :Frobenius, function (m, sqrtu, j)
        return [[0, (1 // sqrtu) // (E(2m, j) + E(2m, -j))], [sqrtu * (E(2m, j) + E(2m, -j)), 0]] * sqrtu ^ 0
    end)
chevieset(:I, :PoincarePolynomial, function (m, param)
        local u, v
        u = -((param[1])[1]) // (param[1])[2]
        v = -((param[2])[1]) // (param[2])[2]
        if IsInt(m // 2)
            return Sum(1:m // 2, (i->begin
                                (u * v) ^ (i - 1)
                            end)) * (u + 1) * (v + 1)
        else
            return Sum(1:m, (i->begin
                                u ^ (i - 1)
                            end)) * (u + 1)
        end
    end)
chevieset(:I, :SchurElement, function (m, phi, para, rootpara)
        local u, v, ruv, e, ci
        if mod(m, 2) == 1
            ci = (chevieget(:I, :CharInfo))(m)
            ci = (ci[:malleParams])[Position(ci[:charparams], phi)]
            return (chevieget(:imp, :SchurElement))(m, 1, 2, ci, [map((i->begin
                                        E(m, i)
                                    end), 0:m - 1), para[2]], []) // m
        end
        u = -((para[1])[1]) // (para[1])[2]
        v = -((para[2])[1]) // (para[2])[2]
        if phi[1] == 1
            if phi[2] == m // 2
                e = (Sum(0:m // 2 - 1, (i->begin
                                        (u // v) ^ i
                                    end)) * (u + 1) * (v + 1)) // v
                if phi[3] == "'"
                    return e
                else
                    return (v // u) ^ (m // 2) * e
                end
            else
                e = Sum(0:m // 2 - 1, (i->begin
                                    (u * v) ^ i
                                end)) * (u + 1) * (v + 1)
                if phi[2] == 0
                    return e
                else
                    return (u * v) ^ (-m // 2) * e
                end
            end
        else
            e = E(m, phi[2]) + E(m, -(phi[2]))
            if ForAll([1, 2], (i->begin
                            rootpara[i] !== nothing
                        end))
                ruv = Product(rootpara)
            else
                ruv = GetRoot(u * v, 2, "SchurElement(Hecke(I2(", m, "),", phi, "))")
            end
            return (-m * ((u * v + 1) - ruv * e) * (u + v + e * ruv)) // (u * v * (e ^ 2 - 4))
        end
    end)
chevieset(:I, :FakeDegree, function (m, phi, q)
        if phi[1] == 1
            return q ^ phi[2]
        else
            return q ^ phi[2] + q ^ (m - phi[2])
        end
    end)
chevieset(:I, :CharTable, function (m,)
        local res
        res = (chevieget(:I, :HeckeCharTable))(m, [[1, -1], [1, -1]], [1, 1])
        res[:identifier] = SPrint("W(I2(", m, "))")
        return res
    end)
chevieset(:I, :DecompositionMatrix, function (n, p)
        local T, m
        T = (chevieget(:I, :CharTable))(n)
        T[:name] = T[:identifier]
        m = DecompositionMatrix(mod(T, p))
        return map((c->begin
                        [c[1], (m[c[1]])[c[2]]]
                    end), BlocksMat(m))
    end)
chevieset(:I, :FactorizedSchurElement, function (arg...,)
        local ci
        if mod(arg[1], 2) == 0 && (arg[3])[1] != (arg[3])[2]
            error(" !  implemented")
        end
        ci = (chevieget(:I, :CharInfo))(arg[1])
        ci = (ci[:malleParams])[Position(ci[:charparams], arg[2])]
        return (chevieget(:imp, :FactorizedSchurElement))(arg[1], arg[1], 2, ci, arg[3], 1)
    end)
chevieset(:I, :Invariants, function (arg...,)
        local e, type_, m
        e = arg[1]
        if length(arg) == 2
            type_ = arg[2]
        elseif mod(e, 2) == 0
            type_ = 1
        else
            type_ = -(E(e, (e + 1) // 2)) - E(e, (e + 3) // 2)
        end
        m = DiagonalMat(1 + E(e, -1), -type_) * (chevieget(:imp, :GeneratingRoots))(e, e, 2)
        return map((f->begin
                        function (arg...,)
                            return ApplyFunc(f, arg * m)
                        end
                    end), (chevieget(:imp, :Invariants))(e, e, 2))
    end)
chevieset(:I, :SymbolToParameter, function (S,)
        if S[1] != [0, 1] || !([]) in S
            return false
        end
        if mod(length(S), 2) == 1
            S = reverse(S)
            return [Position(S, []), Position(S, [0, 1]) - Position(S, [])]
        else
            return (Position(S, []) + [-(Position(S[2:length(S)], [0, 1])), 0]) - 1
        end
    end)
chevieset(:I, :ParameterToSymbol, function (e, p)
        local S
        if p == [0]
            S = map((x->begin
                            [0]
                        end), 1:e)
            S[e] = [2]
        elseif p == [1]
            S = map((x->begin
                            [0, 1]
                        end), 1:e)
            S[e] = [1, 2]
        elseif length(p) == 3
            S = map((x->begin
                            [0]
                        end), 1:e // 2 - 1)
            S = Append(S, [[1], 2, (p[3] + 1) // 2])
        elseif mod(e, 2) == 0
            S = map((x->begin
                            [0]
                        end), 1:e)
            if p[1] == 0
                S[[e, e - p[2]]] = [[1], [1]]
            else
                S[1 + [0, mod(p[2] - p[1], e)]] = [[0, 1], [0, 1]]
                S[1 + [mod(-(p[1]), e), p[2]]] = [[], []]
            end
        else
            S = map((i->begin
                            [0]
                        end), 1:e)
            if p[1] != 0
                S[1 + [0, mod(-(Sum(p)), e)]] = [[0, 1], [0, 1]]
                S[1 + map((x->begin
                                        mod(x, e)
                                    end), -p)] = [[], []]
            else
                S[e + [-(mod(p[2] - p[1], e)), 0]] = [[1], [1]]
            end
        end
        return S
    end)
chevieset(:I, :UnipotentCharacters, function (e,)
        local cusp, uc, f
        f = div(e, 2)
        uc = Dict{Symbol, Any}()
        uc[:harishChandra] = [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "I", :indices => [1, 2], :rank => 2, :bond => e), :parameterExponents => [1, 1], :levi => [], :eigenvalue => 1, :cuspidalName => "")]
        if mod(e, 2) != 0
            ((uc[:harishChandra])[1])[:charNumbers] = 1:f + 2
        else
            ((uc[:harishChandra])[1])[:charNumbers] = Concatenation([1, 3, 4, 2], 4 + (1:f - 1))
        end
        cusp = Concatenation(map((k->begin
                            map((l->begin
                                        [k, l]
                                    end), k + 1:(e - k) - 1)
                        end), 1:f - 1))
        f = (f + 1) - mod(e, 2)
        uc[:harishChandra] = Append(uc[:harishChandra], map((x->begin
                            Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :parameterExponents => [], :levi => [1, 2], :eigenvalue => E(e, -(Product(cusp[x]))), :cuspidalName => SPrint("I_2(", e, ")", FormatGAP(cusp[x])), :charNumbers => [x + f + 2])
                        end), 1:length(cusp)))
        uc[:families] = [Family(((CHEVIE[:families])[:Dihedral])(e), (1:length(cusp) + f) + 2), Family("C1", [1]), Family("C1", [2])]
        uc[:parameters] = Concatenation([[0], [1]], ((uc[:families])[1])[:parameters])
        uc[:charSymbols] = map((p->begin
                        (chevieget(:I, :ParameterToSymbol))(e, p)
                    end), uc[:parameters])
        uc[:a] = Concatenation([0, e], map((x->begin
                            1
                        end), ((uc[:families])[1])[:parameters]))
        uc[:A] = Concatenation([0, e], map((x->begin
                            e - 1
                        end), ((uc[:families])[1])[:parameters]))
        if e == 5
            uc[:curtis] = [2, 1, 3, 4, 6, 5]
        end
        return uc
    end)
chevieset(:A, :CartanMat, function (n,)
        local a, i
        a = IdentityMat(n)
        for i = 1:n
            (a[i])[i] = 2
            if i < n
                (a[i])[i + 1] = -1
            end
            if i > 1
                (a[i])[i - 1] = -1
            end
        end
        return a
    end)
chevieset(:A, :ReflectionDegrees, (n->begin
            2:n + 1
        end))
chevieset(:A, :PrintDiagram, function (r, indices, title)
        local i
        print(title, " ", Join(indices, " - "), "\n")
    end)
chevieset(:A, :GeneratingRoots, function (l,)
        local r, i
        r = map((i->begin
                        0 * (1:l + 1)
                    end), 1:l)
        for i = 1:l
            (r[i])[[i, i + 1]] = [1, -1]
        end
        return r
    end)
chevieset(:A, :ParabolicRepresentatives, function (l, s)
        return (chevieget(:imp, :ParabolicRepresentatives))(1, 1, l, s)
    end)
chevieset(:A, :WordClass, function (pi,)
        local w, i, l, r
        w = []
        i = 0
        for l = pi
            r = mod(l, 2)
            w = Append(w, i + Concatenation(1:3 - 1:(l - 1) - r, 2:4 - 2:(l + r) - 2))
            i = i + l
        end
        return w
    end)
chevieset(:A, :ClassInfo, function (n,)
        local res
        res = Dict{Symbol, Any}(:classparams => Partitions(n + 1))
        res[:classnames] = map(IntListToString, res[:classparams])
        res[:classtext] = map(chevieget(:A, :WordClass), res[:classparams])
        res[:classes] = map((pi->begin
                        factorial(n + 1) // ((CharTableSymmetric[:centralizers])[1])(n, pi)
                    end), res[:classparams])
        res[:orders] = map(Lcm, res[:classparams])
        return res
    end)
chevieset(:A, :NrConjugacyClasses, (n->begin
            NrPartitions(n + 1)
        end))
chevieset(:A, :WeightInfo, (n->begin
            Dict{Symbol, Any}(:minusculeWeights => 1:n, :decompositions => map((i->begin
                                [i]
                            end), 1:n), :moduli => [n + 1])
        end))
chevieset(:A, :ClassParameter, function (n, w)
        local i, x, res, mark, cyc
        x = Perm()
        for i = w
            x = x * Perm(i, i + 1)
        end
        res = []
        mark = 1:n + 1
        for i = 1:n + 1
            if mark[i] != 0
                cyc = CyclePermInt(x, i)
                push!(res, length(cyc))
                mark[cyc] = cyc * 0
            end
        end
        Sort(res)
        return reverse(res)
    end)
chevieset(:A, :CharParams, (n->begin
            Partitions(n + 1)
        end))
chevieset(:A, :LowestPowerFakeDegree, (p->begin
            p * (0:length(p) - 1)
        end))
chevieset(:A, :HighestPowerFakeDegree, (p->begin
            (Sum(p) * (Sum(p) - 1)) // 2 - (chevieget(:A, :LowestPowerFakeDegree))(conjugate_partition(p))
        end))
chevieset(:A, :CharName, function (arg...,)
        return IntListToString(arg[2])
    end)
chevieset(:A, :CharInfo, function (n,)
        local res
        res = Dict{Symbol, Any}(:charparams => (chevieget(:A, :CharParams))(n))
        res[:extRefl] = map((i->begin
                        Position(res[:charparams], Concatenation([(n + 1) - i], fill(0, max(0, (1 + i) - 1)) + 1))
                    end), 0:n)
        res[:b] = map(chevieget(:A, :LowestPowerFakeDegree), res[:charparams])
        res[:B] = map(chevieget(:A, :HighestPowerFakeDegree), res[:charparams])
        res[:a] = res[:b]
        res[:A] = res[:B]
        return res
    end)
chevieset(:A, :PoincarePolynomial, function (n, param)
        return Product(1:n, (i->begin
                        Sum(0:i, (k->begin
                                    (-((param[1])[1]) // (param[1])[2]) ^ k
                                end))
                    end))
    end)
chevieset(:A, :SchurElement, function (n, alpha, param, sqrtparam)
        local i, j, lambda, res, q
        q = -((param[1])[1]) // (param[1])[2]
        lambda = BetaSet(alpha)
        res = q ^ Binomial(length(lambda), 3)
        for i = lambda
            for j = 0:i - 1
                if j in lambda
                    res = res // q ^ j
                else
                    res = res * Sum(0:(i - j) - 1, (e->begin
                                        q ^ e
                                    end))
                end
            end
        end
        return res
    end)
chevieset(:A, :FactorizedSchurElement, function (arg...,)
        return (chevieget(:imp, :FactorizedSchurElement))(1, 1, arg[1] + 1, [arg[2]], arg[3], [])
    end)
chevieset(:A, :HeckeRepresentation, function (n, param, sqrtparam, i)
        local H
        H = Hecke(CoxeterGroup("A", n), -((param[1])[1]) // (param[1])[2])
        return SpechtModel(H, (Partitions(n + 1))[i])
    end)
chevieset(:A, :Representation, function (n, i)
        return ((chevieget(:imp, :Representation))(1, 1, n + 1, i))[2:n + 1]
    end)
chevieset(:A, :FakeDegree, function (n, p, q)
        return (chevieget(:A, :PoincarePolynomial))(Sum(p) - 1, [[q, -1]]) // (chevieget(:A, :SchurElement))(Sum(p) - 1, p, [[q, -1]], [])
    end)
chevieset(:A, :DecompositionMatrix, function (l, p)
        return [[1:NrPartitions(l + 1), MatrixDecompositionMatrix(DecompositionMatrix(Specht(p, p), l + 1))]]
    end)
chevieset(:A, :UnipotentCharacters, function (l,)
        local ci
        ci = (chevieget(:A, :CharInfo))(l)
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:levi => [], :relativeType => Dict{Symbol, Any}(:series => "A", :indices => 1:l, :rank => l), :parameterExponents => fill(0, max(0, (1 + l) - 1)) + 1, :cuspidalName => "", :eigenvalue => 1, :charNumbers => 1:length(ci[:charparams]))], :families => map((i->begin
                                Family("C1", [i])
                            end), 1:length(ci[:charparams])), :charParams => ci[:charparams], :charSymbols => map((x->begin
                                [BetaSet(x)]
                            end), ci[:charparams]), :a => ci[:a], :A => ci[:A])
    end)
chevieset(:A, :Invariants, function (n,)
        local m
        m = ((CHEVIE[:A])[:GeneratingRoots])(n)
        push!(m, fill(0, max(0, (1 + (n + 1)) - 1)) + 1)
        return map((i->begin
                        function (arg...,)
                            local v
                            v = copy(arg)
                            push!(v, 0 * v[1])
                            v = v * m
                            return Sum(Arrangements(1:n + 1, i), (a->begin
                                            Product(v[a])
                                        end))
                        end
                    end), 2:n + 1)
    end)
chevieset(:A, :UnipotentClasses, function (n, p)
        local uc, i, j, cl, d, ss
        uc = Dict{Symbol, Any}(:classes => map((p->begin
                                Dict{Symbol, Any}(:parameter => p)
                            end), Partitions(n + 1)), :springerSeries => Concatenation(map((d->begin
                                    map((i->begin
                                                Dict{Symbol, Any}(:relgroup => CoxeterGroup("A", (n + 1) // d - 1), :Z => [E(d, i)], :levi => Filtered(1:n + 1, (i->begin
                                                                    mod(i, d) != 0
                                                                end)), :locsys => [])
                                            end), PrimeResidues(d))
                                end), DivisorsInt(n + 1))))
        ss = (z->begin
                    First(uc[:springerSeries], (x->begin
                                x[:Z] == [z]
                            end))
                end)
        for i = 1:length(uc[:classes])
            cl = (uc[:classes])[i]
            p = cl[:parameter]
            d = gcd(p)
            cl[:name] = IntListToString(p)
            cl[:Au] = ComplexReflectionGroup(d, 1, 1)
            cl[:balacarter] = Concatenation(map((i->begin
                                Sum(p[1:i - 1]) + (1:p[i] - 1)
                            end), 1:length(p)))
            p = Concatenation(map((x->begin
                                1 - x:(3 - x) - (1 - x):x - 1
                            end), p))
            Sort(p)
            cl[:dynkin] = map((i->begin
                            p[i + 1] - p[i]
                        end), 1:length(p) - 1)
            cl[:red] = []
            p = 1
            for j = Collected(cl[:parameter])
                cl[:red] = Append(cl[:red], p:(p + j[2]) - 2)
                p = p + j[2]
            end
            cl[:red] = ReflectionSubgroup(CoxeterGroup("A", p - 2), cl[:red])
            cl[:AuAction] = ExtendedReflectionGroup(cl[:red], [IdentityMat((cl[:red])[:rank])])
            if d == 2
                push!((ss(1))[:locsys], [i, 2])
                push!((ss(-1))[:locsys], [i, 1])
            else
                for j = 0:d - 1
                    push!((ss(E(d, j)))[:locsys], [i, j + 1])
                end
            end
        end
        uc[:orderClasses] = Hasse(Poset(map((x->begin
                                map((y->begin
                                            Dominates(y[:parameter], x[:parameter])
                                        end), uc[:classes])
                            end), uc[:classes])))
        return uc
    end)
chevieset(:A, :KLeftCellRepresentatives, function (n,)
        local W, l, f
        f = function (i,)
                if i != Perm()
                    i = Product(CoxeterWord(W, i), (j->begin
                                    Perm(j, j + 1)
                                end))
                end
                i = map(length, (RobinsonSchenstedCorrespondent(n + 1, i))[:P])
                return Position(CharParams(W), [i])
            end
        W = CoxeterGroup("A", n)
        l = Filtered(Elements(W), (x->begin
                        x ^ 2 == Perm()
                    end))
        return map((x->begin
                        Dict{Symbol, Any}(:duflo => OnTuples(1:n, x), :reps => [], :character => [f(x)])
                    end), l)
    end)
chevieset(:B, :CartanMat, function (arg...,)
        local n, type_, a
        n = arg[1]
        if length(arg) == 2
            type_ = arg[2]
        else
            type_ = 2
        end
        a = (chevieget(:A, :CartanMat))(n)
        (a[1])[2] = -type_
        (a[2])[1] = 2 // (a[1])[2]
        return a
    end)
chevieset(:B, :PrintDiagram, function (r, indices, title, type_)
        local i
        print(title, " ")
        if type_ == 1
            print(indices[1], " >=> ", indices[2])
        elseif type_ == 2
            print(indices[1], " <=< ", indices[2])
        elseif type_ == ER(2)
            print(indices[1], " == ", indices[2])
        else
            print(indices[1], " ?==? ", indices[2])
        end
        for i = 3:r
            print(" - ", indices[i])
        end
        print("\n")
    end)
chevieset(:B, :ReflectionName, function (arg...,)
        local i, r, type_, option
        r = arg[1]
        option = arg[2]
        if length(arg) == 3
            type_ = arg[3]
        else
            type_ = 2
        end
        if type_ == 2
            if haskey(option, :TeX)
                return SPrint("B_", TeXBracket(r))
            elseif haskey(option, :arg)
                return SPrint("\"B\",", r)
            else
                return SPrint("B", r)
            end
        elseif type_ == 1
            if haskey(option, :TeX)
                return SPrint("C_", TeXBracket(r))
            elseif haskey(option, :arg)
                return SPrint("\"C\",", r)
            else
                return SPrint("C", r)
            end
        elseif type_ == ER(2)
            if haskey(option, :TeX)
                return SPrint("B^{\\hbox{sym}}_", TeXBracket(r))
            elseif haskey(option, :arg)
                return SPrint("\"Bsym\",", r)
            else
                return SPrint("Bsym", r)
            end
        elseif haskey(option, :TeX)
            return SPrint("B^?_", TeXBracket(r), "(", Format(type_, option), ")")
        elseif haskey(option, :arg)
            return SPrint("\"B?\",", r, ",", type_)
        else
            return SPrint("B?", r, "(", Format(type_), ")")
        end
    end)
chevieset(:B, :GeneratingRoots, function (l, type_)
        local rts, i
        rts = map((i->begin
                        0 * (1:l)
                    end), 1:l)
        for i = 1:l - 1
            (rts[i])[[i, i + 1]] = [1, -1]
        end
        (rts[l])[l] = 2 // type_
        return rts[l:(l - 1) - l:1]
    end)
chevieset(:B, :ParabolicRepresentatives, function (l, s)
        return (chevieget(:imp, :ParabolicRepresentatives))(2, 1, l, s)
    end)
chevieset(:B, :ReflectionDegrees, (n->begin
            2 * (1:n)
        end))
chevieset(:B, :Size, function (arg...,)
        return 2 ^ arg[1] * factorial(arg[1])
    end)
chevieset(:B, :NrConjugacyClasses, function (arg...,)
        return NrPartitionTuples(arg[1], 2)
    end)
chevieset(:B, :WeightInfo, function (n, type_)
        if type_ == 2
            return Dict{Symbol, Any}(:minusculeWeights => [1], :minusculeCoweights => [n], :decompositions => [[1]], :moduli => [2])
        else
            return Dict{Symbol, Any}(:minusculeWeights => [n], :minusculeCoweights => [1], :decompositions => [[1]], :moduli => [2])
        end
    end)
chevieset(:B, :WordClass, function (pi,)
        local w, i, l, r
        w = []
        i = 1
        for l = reverse(pi[2])
            w = Append(w, i:(i - 1) - i:2)
            w = Append(w, 1:(i + l) - 1)
            i = i + l
        end
        for l = pi[1]
            r = mod(l, 2)
            w = Append(w, i + Concatenation(1:3 - 1:(l - 1) - r, 2:4 - 2:(l + r) - 2))
            i = i + l
        end
        return w
    end)
chevieset(:B, :ClassInfo, function (n,)
        local res
        res = (chevieget(:imp, :ClassInfo))(2, 1, n)
        res[:classtext] = map(chevieget(:B, :WordClass), res[:classparams])
        res[:classes] = map((x->begin
                        (res[:centralizers])[1] // x
                    end), res[:centralizers])
        return res
    end)
chevieset(:B, :ClassParameter, function (n, w)
        local x, i, res, mark, cyc, j
        x = Perm()
        for i = w
            if i == 1
                x = x * Perm(1, n + 1)
            else
                x = x * (Perm(i - 1, i))((i - 1) + n, i + n)
            end
        end
        res = [[], []]
        mark = 1:n
        for i = 1:n
            if mark[i] != 0
                cyc = CyclePermInt(x, i)
                if i + n in cyc
                    push!(res[2], length(cyc) // 2)
                else
                    push!(res[1], length(cyc))
                end
                for j = cyc
                    if j > n
                        mark[j - n] = 0
                    else
                        mark[j] = 0
                    end
                end
            end
        end
        Sort(res[1])
        Sort(res[2])
        return [reverse(res[1]), reverse(res[2])]
    end)
chevieset(:B, :CharParams, (n->begin
            PartitionTuples(n, 2)
        end))
chevieset(:B, :CharName, function (arg...,)
        return PartitionTupleToString(arg[2])
    end)
chevieset(:B, :LowestPowerFakeDegree, function (p,)
        local pp, m, res
        pp = SymbolPartitionTuple(p, 1)
        m = length(pp[2])
        res = pp[1] * (m:(m - 1) - m:0)
        if pp[2] != []
            res = res + pp[2] * (m - 1:(m - 2) - (m - 1):0)
        end
        return (2res + Sum(pp[2])) - (m * (m - 1) * (4m + 1)) // 6
    end)
chevieset(:B, :CharInfo, function (n,)
        local res
        res = Dict{Symbol, Any}(:charparams => (chevieget(:B, :CharParams))(n))
        res[:extRefl] = Concatenation(map((i->begin
                            Position(res[:charparams], [[n - i], fill(0, max(0, (1 + i) - 1)) + 1])
                        end), 0:n - 1), [Position(res[:charparams], [[], fill(0, max(0, (1 + n) - 1)) + 1])])
        res[:a] = map((p->begin
                        LowestPowerGenericDegreeSymbol(SymbolPartitionTuple(p, 1))
                    end), res[:charparams])
        res[:A] = map((p->begin
                        HighestPowerGenericDegreeSymbol(SymbolPartitionTuple(p, 1))
                    end), res[:charparams])
        res[:b] = map(chevieget(:B, :LowestPowerFakeDegree), res[:charparams])
        res[:B] = (res[:a] + res[:A]) - res[:b]
        return res
    end)
chevieset(:B, :PoincarePolynomial, function (n, para)
        local q1, q2
        q1 = -((para[1])[1]) // (para[1])[2]
        q2 = -((para[2])[1]) // (para[2])[2]
        return Product(0:n - 1, (i->begin
                        (q2 ^ i * q1 + 1) * Sum(0:i, (k->begin
                                        q2 ^ k
                                    end))
                    end))
    end)
chevieset(:B, :SchurElement, function (arg...,)
        return (chevieget(:imp, :SchurElement))(2, 1, arg[1], arg[2], arg[3], [])
    end)
chevieset(:B, :FactorizedSchurElement, function (arg...,)
        return (chevieget(:imp, :FactorizedSchurElement))(2, 1, arg[1], arg[2], arg[3], [])
    end)
chevieset(:B, :HeckeRepresentation, function (arg...,)
        return (chevieget(:imp, :HeckeRepresentation))(2, 1, arg[1], arg[2], [], arg[4])
    end)
chevieset(:B, :Representation, function (n, i)
        return (chevieget(:imp, :Representation))(2, 1, n, i)
    end)
chevieset(:B, :FakeDegree, function (n, c, q)
        return Value(CycPolFakeDegreeSymbol(SymbolPartitionTuple(c, 1)), q)
    end)
chevieset(:B, :DecompositionMatrix, function (l, p)
        local pp, dd, pt, decS
        decS = (i->begin
                    MatrixDecompositionMatrix(DecompositionMatrix(Specht(p, p), i))
                end)
        pp = map(Partitions, 0:l)
        pt = PartitionTuples(l, 2)
        if p == 2
            return [[1:length(pt), map(function (p,)
                                    p = LittlewoodRichardsonRule(p[1], p[2])
                                    return map(function (x,)
                                                if x in p
                                                    return 1
                                                else
                                                    return 0
                                                end
                                            end, pp[l + 1])
                                end, pt) * decS(l)]]
        else
            dd = Concatenation([[[1]], [[1]]], map(decS, 2:l))
            return map((i->begin
                            [map((x->begin
                                            Position(pt, x)
                                        end), Cartesian(pp[i + 1], pp[(l + 1) - i])), map((x->begin
                                            map(Product, Cartesian(x))
                                        end), Cartesian(dd[i + 1], dd[(l + 1) - i]))]
                        end), 0:l)
        end
    end)
chevieset(:B, :UnipotentCharacters, function (arg...,)
        local uc, symbols, r, d, s, rank
        rank = arg[1]
        uc = Dict{Symbol, Any}(:harishChandra => [], :charSymbols => [])
        for d = 1 + 2 * (0:div(-1 + RootInt(1 + 4rank, 2), 2))
            s = div(d ^ 2 - 1, 4)
            s = Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "B", :indices => 1 + s:rank, :rank => rank - s), :levi => 1:s, :eigenvalue => (-1) ^ div(d + 1, 4), :parameterExponents => Concatenation([d], fill(0, max(0, (1 + rank) - (2 + s))) + 1), :cuspidalName => SPrint("B_{", s, "}"))
            push!(uc[:harishChandra], s)
            symbols = BDSymbols(rank, d)
            s[:charNumbers] = (1:length(symbols)) + length(uc[:charSymbols])
            FixRelativeType(s)
            uc[:charSymbols] = Append(uc[:charSymbols], symbols)
        end
        ((uc[:harishChandra])[1])[:cuspidalName] = ""
        uc[:a] = map(LowestPowerGenericDegreeSymbol, uc[:charSymbols])
        uc[:A] = map(HighestPowerGenericDegreeSymbol, uc[:charSymbols])
        uc[:families] = FamiliesClassical(uc[:charSymbols])
        if length(arg) == 2 && arg[2] == 1
            (((uc[:harishChandra])[1])[:relativeType])[:cartanType] = 1
        end
        return uc
    end)
chevieset(:B, :UnipotentClasses, function (r, type_, char)
        local cl, uc, i, l, s, cc, ss, symbol2para, part2dynkin, addSpringer, d, LuSpin, trspringer, j
        part2dynkin = function (part,)
                local p, res
                p = Concatenation(map((d->begin
                                    1 - d:(3 - d) - (1 - d):d - 1
                                end), part))
                Sort(p)
                p = p[div(3 + length(p), 2):length(p)]
                if type_ == 1
                    res = [2 * p[1]]
                else
                    res = [p[1]]
                end
                res = Append(res, p[2:length(p)] - p[1:length(p) - 1])
                return res
            end
        addSpringer = function (s,)
                local ss, p
                ss = First(uc[:springerSeries], (x->begin
                                x[:defect] == DefectSymbol(s[:symbol])
                            end))
                if s[:sp] == [[], []]
                    p = 1
                elseif s[:sp] == [[1], []]
                    p = 2
                elseif s[:sp] == [[], [1]]
                    p = 1
                else
                    p = Position(CharParams(ss[:relgroup]), [s[:sp]])
                end
                (ss[:locsys])[p] = [length(uc[:classes]), Position(CharParams(cc[:Au]), map(function (x,)
                                    if x
                                        return [1, 1]
                                    else
                                        return [2]
                                    end
                                end, s[:Au]))]
            end
        if type_ == ER(2)
            type_ = 2
            char = 2
        end
        if char == 2
            ss = XSP(4, 2, r)
        elseif type_ == 1
            ss = XSP(2, 1, r)
        else
            ss = XSP(2, 0, r)
        end
        l = Union(map((c->begin
                            map((x->begin
                                        [DefectSymbol(x[:symbol]), Sum(x[:sp], Sum)]
                                    end), c)
                        end), ss))
        SortBy(l, (x->begin
                    [AbsInt(x[1]), -(SignInt(x[1]))]
                end))
        uc = Dict{Symbol, Any}(:classes => [], :springerSeries => map(function (d,)
                            local res
                            res = Dict{Symbol, Any}(:relgroup => CoxeterGroup("C", d[2]), :defect => d[1], :locsys => [], :levi => 1:r - d[2])
                            if char == 2
                                res[:Z] = [1]
                            elseif type_ == 1
                                res[:Z] = [(-1) ^ (r - d[2])]
                            elseif IsInt(ER(2 * (r - d[2]) + 1))
                                res[:Z] = [1]
                            else
                                res[:Z] = [-1]
                            end
                            return res
                        end, l))
        if char != 2
            symbol2para = function (S,)
                    local c, i, l, part, d
                    c = Concatenation(S)
                    Sort(c)
                    i = 1
                    part = []
                    d = mod(type_, 2)
                    while i <= length(c)
                        if i == length(c) || c[i + 1] - c[i] > 0
                            push!(part, (2 * (c[i] - (i - 1)) + 1) - d)
                            i = i + 1
                        else
                            l = 2 * (c[i] - (i - 1)) - d
                            part = Append(part, [l, l])
                            i = i + 2
                        end
                    end
                    Sort(part)
                    part = Filtered(part, (y->begin
                                    y != 0
                                end))
                    return reverse(part)
                end
        else
            symbol2para = function (S,)
                    local c, i, l, part, ex
                    c = Concatenation(S)
                    Sort(c)
                    i = 1
                    part = []
                    ex = []
                    while i <= length(c)
                        if i == length(c) || c[i + 1] - c[i] > 1
                            push!(part, 2 * (c[i] - 2 * (i - 1)))
                            i = i + 1
                        elseif c[i] == c[i + 1]
                            l = 2 * (c[i] - 2 * (i - 1)) - 2
                            part = Append(part, [l, l])
                            push!(ex, l)
                            i = i + 2
                        elseif c[i] + 1 == c[i + 1]
                            l = 2 * (c[i] - 2 * (i - 1)) - 1
                            part = Append(part, [l, l])
                            i = i + 2
                        end
                    end
                    Sort(part)
                    part = Filtered(part, (y->begin
                                    y != 0
                                end))
                    return [reverse(part), ex]
                end
        end
        if char == 2
            type_ = 1
        end
        for cl = ss
            cc = Dict{Symbol, Any}(:parameter => symbol2para((cl[1])[:symbol]))
            cc[:Au] = ApplyFunc(CoxeterGroup, Concatenation(map((x->begin
                                    ["A", 1]
                                end), (cl[1])[:Au])))
            if char != 2
                cc[:dynkin] = part2dynkin(cc[:parameter])
                cc[:name] = IntListToString(cc[:parameter])
            else
                type_ = 1
                cc[:dimBu] = (cl[1])[:dimBu]
                cc[:name] = Join(map(function (x,)
                                local res
                                res = IntListToString(fill(0, max(0, (1 + x[2]) - 1)) + x[1], "[]")
                                if x[1] in (cc[:parameter])[2]
                                    return SPrint("(", res, ")")
                                end
                                return res
                            end, reverse(Collected((cc[:parameter])[1]))), "")
            end
            cc[:red] = CoxeterGroup()
            if char == 2
                j = (cc[:parameter])[1]
            else
                j = cc[:parameter]
            end
            for j = Collected(j)
                if mod(j[1], 2) == mod(type_, 2)
                    cc[:red] = cc[:red] * CoxeterGroup("C", j[2] // 2)
                elseif mod(j[2], 2) != 0
                    if j[2] > 1
                        cc[:red] = cc[:red] * CoxeterGroup("B", (j[2] - 1) // 2)
                    end
                elseif j[2] > 2
                    cc[:red] = cc[:red] * CoxeterGroup("D", j[2] // 2)
                else
                    cc[:red] = cc[:red] * Torus(1)
                end
            end
            push!(uc[:classes], cc)
            for s = cl
                addSpringer(s)
            end
        end
        uc[:orderClasses] = Hasse(Poset(map((x->begin
                                map(function (y,)
                                        local m, f, fx, fy, i
                                        if char != 2
                                            return Dominates(y[:parameter], x[:parameter])
                                        end
                                        m = maximum(((x[:parameter])[1])[1], ((y[:parameter])[1])[1])
                                        f = (x->begin
                                                    map((i->begin
                                                                Sum(Filtered(x, (z->begin
                                                                                    z < i
                                                                                end))) + i * count((z->begin
                                                                                    z >= i
                                                                                end), x)
                                                            end), 1:m)
                                                end)
                                        fx = f((x[:parameter])[1])
                                        fy = f((y[:parameter])[1])
                                        for i = 1:m
                                            if fx[i] < fy[i]
                                                return false
                                            elseif fx[i] == fy[i] && i in (y[:parameter])[2]
                                                if i in Difference((x[:parameter])[1], (x[:parameter])[2])
                                                    return false
                                                end
                                                if i < m && mod(fx[i + 1] - fy[i + 1], 2) == 1
                                                    return false
                                                end
                                            end
                                        end
                                        return true
                                    end, uc[:classes])
                            end), uc[:classes])))
        if char != 2 && type_ == 2
            LuSpin = function (p,)
                    local t, a, b, i, j, l, d
                    Sort(p)
                    a = []
                    b = []
                    d = [0, 1, 0, -1]
                    d = d[map((x->begin
                                        1 + mod(x, 4)
                                    end), p)]
                    i = 1
                    while i <= length(p)
                        l = p[i]
                        t = Sum(d[1:i - 1])
                        if 1 == mod(l, 4)
                            push!(a, (l - 1) // 4 - t)
                            i = i + 1
                        elseif 3 == mod(l, 4)
                            push!(b, (l - 3) // 4 + t)
                            i = i + 1
                        else
                            j = i
                            while i <= length(p) && p[i] == l
                                i = i + 1
                            end
                            j = fill(0, max(0, (1 + (i - j) // 2) - 1))
                            a = Append(a, (j + (l + mod(l, 4)) // 4) - t)
                            b = Append(b, j + (l - mod(l, 4)) // 4 + t)
                        end
                    end
                    a = Filtered(a, (x->begin
                                    x != 0
                                end))
                    a = reverse(a)
                    b = Filtered(b, (x->begin
                                    x != 0
                                end))
                    b = reverse(b)
                    if Sum(d) >= 1
                        return [a, b]
                    else
                        return [b, a]
                    end
                end
            addSpringer = function (f, i, s, k)
                    local ss, p
                    ss = First(uc[:springerSeries], f)
                    if s in [[[], [1]], [[], []]]
                        p = 1
                    elseif s == [[1], []]
                        p = 2
                    else
                        p = Position(CharParams(ss[:relgroup]), [s])
                    end
                    (ss[:locsys])[p] = [i, k]
                end
            trspringer = function (i, old, new)
                    local ss, c, p
                    for ss = uc[:springerSeries]
                        for c = ss[:locsys]
                            if c[1] == i
                                p = Position(old, c[2])
                                if p != false
                                    c[2] = new[p]
                                end
                            end
                        end
                    end
                end
            d = 0
            while 4 * d ^ 2 - 3d <= r
                i = 4 * d ^ 2 - 3d
                if mod(r - d, 2) == 0
                    l = Concatenation(1:i, i + 2:(i + 4) - (i + 2):r)
                    push!(uc[:springerSeries], Dict{Symbol, Any}(:relgroup => CoxeterGroup("B", (r - i) // 2), :levi => l, :Z => [-1], :locsys => []))
                    i = 4 * d ^ 2 + 3d
                    if i <= r && d != 0
                        l = Concatenation(1:i, i + 2:(i + 4) - (i + 2):r)
                        push!(uc[:springerSeries], Dict{Symbol, Any}(:relgroup => CoxeterGroup("B", (r - i) // 2), :levi => l, :Z => [-1], :locsys => []))
                    end
                end
                d = d + 1
            end
            l = Filtered(1:length(uc[:classes]), (i->begin
                            ForAll(Collected(((uc[:classes])[i])[:parameter]), (c->begin
                                        mod(c[1], 2) == 0 || c[2] == 1
                                    end))
                        end))
            for i = l
                cl = (uc[:classes])[i]
                s = LuSpin(cl[:parameter])
                if Size(cl[:Au]) == 1
                    cl[:Au] = CoxeterGroup("A", 1)
                    trspringer(i, [1], [2])
                    d = 1
                elseif Size(cl[:Au]) == 4
                    cl[:Au] = CoxeterGroup("B", 2)
                    trspringer(i, [1, 2, 3, 4], [1, 3, 5, 4])
                    d = 2
                else
                    error("Au non-commutative of order ", Size(cl[:Au]) * 2, "  !  implemented")
                end
                addSpringer((ss->begin
                            ss[:Z] == [-1] && (ss[:relgroup])[:rank] == Sum(s, Sum)
                        end), i, s, d)
            end
        end
        return uc
    end)
chevieset(:B, :Invariants, function (n, type_)
        local m
        m = fill(0, max(0, (1 + n) - 1)) + 1
        m[1] = 2 // type_
        m = DiagonalMat(m) * (chevieget(:imp, :GeneratingRoots))(2, 1, n)
        return map((f->begin
                        function (arg...,)
                            return ApplyFunc(f, arg * m)
                        end
                    end), ((CHEVIE[:imp])[:Invariants])(2, 1, n))
    end)
chevieset(:D, :CartanMat, function (n,)
        local a, m
        if n < 3
            m = 3
        else
            m = n
        end
        a = (chevieget(:A, :CartanMat))(m)
        (a[1:3])[1:3] = [[2, 0, -1], [0, 2, -1], [-1, -1, 2]]
        return (a[1:n])[1:n]
    end)
chevieset(:D, :Size, function (arg...,)
        return 2 ^ (arg[1] - 1) * factorial(arg[1])
    end)
chevieset(:D, :PrintDiagram, function (r, indices, title)
        local i, s
        print(title, " ", indices[1], "\n")
        s = pad("", length(title) + 1)
        print(s, " \\\n", s, "  ", indices[3])
        for i = 4:r
            print(" - ", indices[i])
        end
        print("\n")
        print(s, " /\n", s, indices[2], "\n")
    end)
chevieset(:D, :GeneratingRoots, function (l,)
        local r, rts, i
        rts = []
        for i = 1:l - 1
            r = 0 * (1:l)
            r[[i, i + 1]] = [1, -1]
            push!(rts, r)
        end
        r = 0 * (1:l)
        r[[l - 1, l]] = [1, 1]
        push!(rts, r)
        return reverse(rts)
    end)
chevieset(:D, :WeightInfo, function (n,)
        local res
        if mod(n, 2) == 1
            return Dict{Symbol, Any}(:minusculeWeights => [1, 2, n], :decompositions => [[1], [3], [2]], :moduli => [4])
        else
            return Dict{Symbol, Any}(:minusculeWeights => [1, 2, n], :decompositions => [[1, 0], [0, 1], [1, 1]], :moduli => [2, 2])
        end
    end)
chevieset(:D, :ParabolicRepresentatives, function (l, s)
        return (chevieget(:imp, :ParabolicRepresentatives))(2, 2, l, s)
    end)
chevieset(:D, :WordsClassRepresentatives, function (arg...,)
        local n, param, res, w, i, pi, l, r
        n = arg[1]
        if length(arg) == 2
            param = map((a->begin
                            map(copy, a)
                        end), arg[2])
        else
            param = PartitionTuples(n, 2)
        end
        res = []
        for pi = param
            if pi[2] == '+'
                pi[2] = []
            end
            if IsList(pi[2]) && mod(length(pi[2]), 2) == 0
                w = []
                i = 1
                for l = reverse(pi[2])
                    if i == 1
                        w = Append(w, 2:(i + l) - 1)
                    else
                        w = Append(w, i:(i - 1) - i:3)
                        w = Append(w, 1:(i + l) - 1)
                    end
                    i = i + l
                end
                for l = pi[1]
                    r = mod(l, 2)
                    w = Append(w, i + Concatenation(1:3 - 1:(l - 1) - r, 2:4 - 2:(l + r) - 2))
                    i = i + l
                end
                if w != [] && w[1] == 2
                    w[1] = 1
                end
                if pi[2] == [] && ForAll(pi[1], (x->begin
                                    mod(x, 2) == 0
                                end))
                    push!(res, w)
                    w = copy(w)
                    w[1] = 2
                end
                push!(res, w)
            end
        end
        return res
    end)
chevieset(:D, :ClassInfo, function (n,)
        local res
        res = (chevieget(:imp, :ClassInfo))(2, 2, n)
        res[:classparams] = map(function (x,)
                    if length(x) == 2
                        return x
                    end
                    if x[3] == 0
                        return [x[1], '+']
                    else
                        return [x[1], '-']
                    end
                end, res[:classparams])
        res[:classtext] = (chevieget(:D, :WordsClassRepresentatives))(n, res[:classparams])
        return res
    end)
chevieset(:D, :NrConjugacyClasses, function (n,)
        if mod(n, 2) == 1
            return NrPartitionTuples(n, 2) // 2
        else
            return (NrPartitionTuples(n, 2) + 3 * NrPartitions(n // 2)) // 2
        end
    end)
chevieset(:D, :CharInfo, (n->begin
            (chevieget(:imp, :CharInfo))(2, 2, n)
        end))
chevieset(:D, :CharName, function (arg...,)
        return PartitionTupleToString(arg[2])
    end)
chevieset(:D, :gensMODA, [nothing, nothing, nothing, [[#= none:15 =# @perm_str("(1,2)(7,8)"), #= none:15 =# @perm_str("(3,4)(5,6)"), #= none:15 =# @perm_str("(2,3)(6,7)"), #= none:15 =# @perm_str("(3,5)(4,6)")], [[4], [nothing, nothing, 2]], [[2], [1, nothing, 1]]], nothing, [[#= none:17 =# @perm_str("(1,2)(8,11)(12,14)(15,17)(16,18)(19,21)(22,25)(31,32)"), #= none:18 =# @perm_str("(3,4)(5,6)(7,9)(10,13)(20,23)(24,26)(27,28)(29,30)"), #= none:19 =# @perm_str("(2,3)(6,8)(9,12)(13,16)(17,20)(21,24)(25,27)(30,31)"), #= none:20 =# @perm_str("(3,5)(4,6)(12,15)(14,17)(16,19)(18,21)(27,29)(28,30)"), #= none:21 =# @perm_str("(5,7)(6,9)(8,12)(11,14)(19,22)(21,25)(24,27)(26,28)"), #= none:22 =# @perm_str("(7,10)(9,13)(12,16)(14,18)(15,19)(17,21)(20,24)(23,26)")], [[16], [4, nothing, 6], [1, nothing, nothing, nothing, 5]], [[12], [2, nothing, 6], [nothing, 2, nothing, nothing, 4]]], nothing, [[#= none:25 =# @perm_str("(1,2)(8,11)(12,15)(16,20)(17,21)(22,26)(23,27)(28,33)(29,34)(30,35)(36,41)(37,42)(43,50)(44,51)(52,59)(60,68)(61,69)(70,77)(78,85)(79,86)(87,92)(88,93)(94,99)(95,100)(96,101)(102,106)(103,107)(108,112)(109,113)(114,117)(118,121)(127,128)"), #= none:25 =# @perm_str("(3,4)(5,6)(7,9)(10,13)(14,18)(19,24)(25,31)(32,38)(39,45)(40,46)(47,53)(48,54)(49,55)(56,62)(57,63)(58,64)(65,71)(66,72)(67,73)(74,80)(75,81)(76,82)(83,89)(84,90)(91,97)(98,104)(105,110)(111,115)(116,119)(120,122)(123,124)(125,126)"), #= none:26 =# @perm_str("(2,3)(6,8)(9,12)(13,17)(18,23)(20,25)(24,30)(26,32)(33,39)(34,40)(41,48)(42,49)(50,57)(51,58)(53,61)(59,67)(62,70)(68,76)(71,78)(72,79)(80,87)(81,88)(89,95)(90,96)(97,103)(99,105)(104,109)(106,111)(112,116)(117,120)(121,123)(126,127)"), #= none:27 =# @perm_str("(3,5)(4,6)(12,16)(15,20)(17,22)(21,26)(23,29)(27,34)(30,37)(35,42)(39,47)(45,53)(48,56)(54,62)(57,65)(58,66)(63,71)(64,72)(67,75)(73,81)(76,84)(82,90)(87,94)(92,99)(95,102)(100,106)(103,108)(107,112)(109,114)(113,117)(123,125)(124,126)"), #= none:28 =# @perm_str("(5,7)(6,9)(8,12)(11,15)(22,28)(26,33)(29,36)(32,39)(34,41)(37,44)(38,45)(40,48)(42,51)(46,54)(49,58)(55,64)(65,74)(71,80)(75,83)(78,87)(81,89)(84,91)(85,92)(88,95)(90,97)(93,100)(96,103)(101,107)(114,118)(117,121)(120,123)(122,124)"), #= none:29 =# @perm_str("(7,10)(9,13)(12,17)(15,21)(16,22)(20,26)(25,32)(31,38)(36,43)(41,50)(44,52)(48,57)(51,59)(54,63)(56,65)(58,67)(62,71)(64,73)(66,75)(70,78)(72,81)(77,85)(79,88)(86,93)(91,98)(97,104)(103,109)(107,113)(108,114)(112,117)(116,120)(119,122)"), #= none:30 =# @perm_str("(10,14)(13,18)(17,23)(21,27)(22,29)(26,34)(28,36)(32,40)(33,41)(38,46)(39,48)(45,54)(47,56)(52,60)(53,62)(59,68)(61,70)(67,76)(69,77)(73,82)(75,84)(81,90)(83,91)(88,96)(89,97)(93,101)(95,103)(100,107)(102,108)(106,112)(111,116)(115,119)"), #= none:31 =# @perm_str("(14,19)(18,24)(23,30)(27,35)(29,37)(34,42)(36,44)(40,49)(41,51)(43,52)(46,55)(48,58)(50,59)(54,64)(56,66)(57,67)(62,72)(63,73)(65,75)(70,79)(71,81)(74,83)(77,86)(78,88)(80,89)(85,93)(87,95)(92,100)(94,102)(99,106)(105,111)(110,115)")], [[64], [16, nothing, 24], [nothing, nothing, 32], [4, nothing, nothing, nothing, 20], [nothing, nothing, nothing, nothing, nothing, nothing, 16]], [[56], [12, nothing, 24], [6, nothing, 28], [2, 4, nothing, nothing, 18], [1, nothing, 3, nothing, nothing, nothing, 14]]]])
chevieset(:D, :ClassParameter, function (n, w)
        local x, i, res, mark, cyc, j, tmp, gens
        x = Perm()
        for i = w
            if i == 1
                x = x * (Perm(1, n + 2))(2, n + 1)
            else
                x = x * (Perm(i - 1, i))((i - 1) + n, i + n)
            end
        end
        res = [[], []]
        mark = 1:n
        for i = 1:n
            if mark[i] != 0
                cyc = CyclePermInt(x, i)
                if i + n in cyc
                    push!(res[2], length(cyc) // 2)
                else
                    push!(res[1], length(cyc))
                end
                for j = cyc
                    if j > n
                        mark[j - n] = 0
                    else
                        mark[j] = 0
                    end
                end
            end
        end
        if res[2] == [] && ForAll(res[1], (i->begin
                            mod(i, 2) == 0
                        end))
            if !((CHEVIE.R("gensMODA", "D"))[n] !== nothing)
                tmp = CoxeterGroup("D", n)
                gens = PermCosetsSubgroup(tmp, ReflectionSubgroup(tmp, 2:n))
                tmp = (chevieget(:D, :ClassInfo))(n)
                tmp = (tmp[:classtext])[Filtered(1:length(tmp[:classnames]), (i->begin
                                    '+' in (tmp[:classnames])[i] || '-' in (tmp[:classnames])[i]
                                end))]
                tmp = map((a->begin
                                CycleStructurePerm(Product(gens[a]))
                            end), tmp)
                (chevieget(:D, :gensMODA))[n] = [gens, tmp[2 * (1:length(tmp) // 2) - 1], tmp[2 * (1:length(tmp) // 2)]]
            end
            tmp = CycleStructurePerm(Product((((chevieget(:D, :gensMODA))[n])[1])[w]))
            if tmp in ((chevieget(:D, :gensMODA))[n])[2] && !tmp in ((chevieget(:D, :gensMODA))[n])[3]
                res[2] = '+'
            elseif !tmp in ((chevieget(:D, :gensMODA))[n])[2] && tmp in ((chevieget(:D, :gensMODA))[n])[3]
                res[2] = '-'
            end
        end
        Sort(res[1])
        if IsList(res[2])
            Sort(res[2])
            return [reverse(res[1]), reverse(res[2])]
        else
            return [reverse(res[1]), res[2]]
        end
    end)
chevieset(:D, :FactorizedSchurElement, function (arg...,)
        local p, i, n
        p = arg[2]
        n = arg[1]
        if p[2] in "+-"
            p = [p[1], p[1]]
        end
        return (chevieget(:imp, :FactorizedSchurElement))(2, 2, n, p, arg[3], [])
    end)
chevieset(:D, :HeckeRepresentation, function (arg...,)
        local p, i, n
        i = arg[4]
        n = arg[1]
        p = (((chevieget(:D, :CharInfo))(n))[:charparams])[i]
        if p[length(p)] == 0
            i = i + 1
        elseif p[length(p)] == 1
            i = i - 1
        end
        return (chevieget(:imp, :HeckeRepresentation))(2, 2, n, arg[2], [], i)
    end)
chevieset(:D, :Representation, function (n, i)
        local p
        p = (((chevieget(:D, :CharInfo))(n))[:charparams])[i]
        if p[length(p)] == 0
            i = i + 1
        elseif p[length(p)] == 1
            i = i - 1
        end
        return (chevieget(:imp, :Representation))(2, 2, n, i)
    end)
chevieset(:D, :PoincarePolynomial, function (n, para)
        local q
        q = -((para[1])[1]) // (para[1])[2]
        return Sum(0:n - 1, (k->begin
                            q ^ k
                        end)) * Product(1:n - 1, (i->begin
                            (q ^ i + 1) * Sum(0:i - 1, (k->begin
                                            q ^ k
                                        end))
                        end))
    end)
chevieset(:D, :symbolcharparam, (c->begin
            SymbolPartitionTuple(c, 0)
        end))
chevieset(:D, :Invariants, function (n,)
        local m
        m = (chevieget(:imp, :GeneratingRoots))(2, 2, n)
        return map((f->begin
                        function (arg...,)
                            return ApplyFunc(f, arg * m)
                        end
                    end), ((CHEVIE[:imp])[:Invariants])(2, 2, n))
    end)
chevieset(:D, :CycPolGenericDegree, (c->begin
            CycPolGenericDegreeSymbol(SymbolPartitionTuple(c, 0))
        end))
chevieset(:D, :SchurElement, function (n, phi, q, sqrtparam)
        return (chevieget(:D, :PoincarePolynomial))(n, q) // Value((chevieget(:D, :CycPolGenericDegree))(phi), -((q[1])[1]) // (q[1])[2])
    end)
chevieset(:D, :FakeDegree, function (n, c, q)
        return Value(CycPolFakeDegreeSymbol(SymbolPartitionTuple(c, 0)), q)
    end)
chevieset(:D, :UnipotentCharacters, function (rank,)
        local uc, symbols, r, d, s
        uc = Dict{Symbol, Any}(:harishChandra => [], :charSymbols => [])
        for d = 4 * (0:RootInt(div(rank, 4), 2))
            r = div(d ^ 2, 4)
            s = Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "B", :indices => 1 + r:rank, :rank => rank - r), :levi => 1:r, :eigenvalue => (-1) ^ div(d + 1, 4), :parameterExponents => Concatenation([d], fill(0, max(0, (1 + rank) - (2 + r))) + 1))
            if r < 10
                s[:cuspidalName] = SPrint("D_", r, "")
            else
                s[:cuspidalName] = SPrint("D_{", r, "}")
            end
            if d == 0
                (s[:relativeType])[:series] = "D"
                s[:cuspidalName] = ""
                (s[:parameterExponents])[1] = 1
            end
            push!(uc[:harishChandra], s)
            symbols = BDSymbols(rank, d)
            s[:charNumbers] = (1:length(symbols)) + length(uc[:charSymbols])
            FixRelativeType(s)
            uc[:charSymbols] = Append(uc[:charSymbols], symbols)
        end
        uc[:a] = map(LowestPowerGenericDegreeSymbol, uc[:charSymbols])
        uc[:A] = map(HighestPowerGenericDegreeSymbol, uc[:charSymbols])
        uc[:families] = FamiliesClassical(uc[:charSymbols])
        return uc
    end)
chevieset(:D, :ReflectionDegrees, (n->begin
            Concatenation(2 * (1:n - 1), [n])
        end))
chevieset(:D, :UnipotentClasses, function (n, char)
        local s, uc, cl, cc, l, ss, k, d, i, symbol2partition, addSpringer, partition2DR, trspringer, LuSpin, j
        addSpringer = function (s, i)
                local ss, p
                ss = First(uc[:springerSeries], (x->begin
                                x[:defect] == DefectSymbol(s[:symbol])
                            end))
                if s[:sp] in [[[], [1]], [[], []]]
                    p = 1
                elseif s[:sp] == [[1], []]
                    p = 2
                else
                    p = Position(CharParams(ss[:relgroup]), [s[:sp]])
                end
                (ss[:locsys])[p] = [i, Position(CharParams(cc[:Au]), map(function (x,)
                                    if x
                                        return [1, 1]
                                    else
                                        return [2]
                                    end
                                end, s[:Au]))]
            end
        partition2DR = function (part,)
                local p
                p = Concatenation(map((x->begin
                                    1 - x:(3 - x) - (1 - x):x - 1
                                end), part))
                Sort(p)
                p = p[1 + length(p) // 2:length(p)]
                return Concatenation([p[1] + p[2]], map((i->begin
                                    p[i + 1] - p[i]
                                end), 1:length(p) - 1))
            end
        if char == 2
            ss = XSP(4, 0, n, 1)
            symbol2partition = function (S,)
                    local c, i, l, part, ex
                    c = Concatenation(S)
                    Sort(c)
                    i = 1
                    part = []
                    ex = []
                    while i <= length(c)
                        if i == length(c) || c[i + 1] - c[i] > 1
                            push!(part, 2 * (c[i] - 2 * (i - 1)) + 2)
                            i = i + 1
                        elseif c[i + 1] - c[i] > 0
                            l = 2 * (c[i] - 2 * (i - 1)) + 1
                            part = Append(part, [l, l])
                            i = i + 2
                        else
                            l = 2 * (c[i] - 2 * (i - 1))
                            part = Append(part, [l, l])
                            i = i + 2
                            push!(ex, l)
                        end
                    end
                    Sort(part)
                    part = Filtered(part, (y->begin
                                    y != 0
                                end))
                    return [reverse(part), ex]
                end
        else
            ss = XSP(2, 0, n, 1)
            symbol2partition = function (S,)
                    local c, i, l, part
                    c = Concatenation(S)
                    Sort(c)
                    i = 1
                    part = []
                    while i <= length(c)
                        if i == length(c) || c[i + 1] - c[i] > 0
                            push!(part, 2 * (c[i] - (i - 1)) + 1)
                            i = i + 1
                        else
                            l = 2 * (c[i] - (i - 1))
                            part = Append(part, [l, l])
                            i = i + 2
                        end
                    end
                    Sort(part)
                    part = Filtered(part, (y->begin
                                    y != 0
                                end))
                    return reverse(part)
                end
        end
        l = Union(map((c->begin
                            map((x->begin
                                        [DefectSymbol(x[:symbol]), Sum(FullSymbol(x[:sp]), Sum)]
                                    end), c)
                        end), ss))
        SortBy(l, (x->begin
                    [AbsInt(x[1]), -(SignInt(x[1]))]
                end))
        uc = Dict{Symbol, Any}(:classes => [], :springerSeries => map(function (d,)
                            local res
                            res = Dict{Symbol, Any}(:defect => d[1], :locsys => [], :levi => 1:n - d[2])
                            if mod(n - d[2], 4) == 0 || char == 2
                                if mod(n, 2) == 0
                                    res[:Z] = [1, 1]
                                else
                                    res[:Z] = [1]
                                end
                            else
                                if mod(n, 2) == 0
                                    res[:Z] = [-1, -1]
                                else
                                    res[:Z] = [-1]
                                end
                            end
                            if d[1] == 0
                                res[:relgroup] = CoxeterGroup("D", d[2])
                            else
                                res[:relgroup] = CoxeterGroup("B", d[2])
                            end
                            return res
                        end, l))
        for cl = ss
            cc = Dict{Symbol, Any}(:parameter => symbol2partition((cl[1])[:symbol]))
            if char == 2
                cc[:dimBu] = (cl[1])[:dimBu]
                cc[:name] = Join(map(function (x,)
                                local res
                                res = IntListToString(fill(0, max(0, (1 + x[2]) - 1)) + x[1], "[]")
                                if x[1] in (cc[:parameter])[2]
                                    return SPrint("(", res, ")")
                                end
                                return res
                            end, reverse(Collected((cc[:parameter])[1]))), "")
            else
                cc[:dynkin] = partition2DR(cc[:parameter])
                cc[:name] = IntListToString(cc[:parameter])
            end
            cc[:Au] = ApplyFunc(CoxeterGroup, Concatenation(map((x->begin
                                    ["A", 1]
                                end), (cl[1])[:Au])))
            CharNames(cc[:Au])
            if char != 2
                cc[:red] = CoxeterGroup()
                j = cc[:parameter]
                for j = Collected(j)
                    if mod(j[1], 2) == 0
                        cc[:red] = cc[:red] * CoxeterGroup("C", j[2] // 2)
                    elseif mod(j[2], 2) != 0
                        if j[2] > 1
                            cc[:red] = cc[:red] * CoxeterGroup("B", (j[2] - 1) // 2)
                        end
                    elseif j[2] > 2
                        cc[:red] = cc[:red] * CoxeterGroup("D", j[2] // 2)
                    else
                        cc[:red] = cc[:red] * Torus(1)
                    end
                end
            end
            if !(IsList(((cl[1])[:sp])[2]))
                ((cl[1])[:sp])[3] = 1 - mod(n // 2, 2)
            end
            push!(uc[:classes], cc)
            for s = cl
                addSpringer(s, length(uc[:classes]))
            end
            if !(IsList(((cl[1])[:sp])[2]))
                ((cl[1])[:sp])[3] = 1 - ((cl[1])[:sp])[3]
                push!(cc[:name], '+')
                cc = Copy(cc)
                (cc[:name])[length(cc[:name])] = '-'
                if haskey(cc, :dynkin)
                    (cc[:dynkin])[[1, 2]] = (cc[:dynkin])[[2, 1]]
                end
                push!(uc[:classes], cc)
                for s = cl
                    addSpringer(s, length(uc[:classes]))
                end
            end
        end
        if char == 2
            uc[:orderClasses] = Hasse(Poset(map((x->begin
                                    map(function (y,)
                                            local m, f, fx, fy, i
                                            m = maximum(((x[:parameter])[1])[1], ((y[:parameter])[1])[1])
                                            f = (x->begin
                                                        map((i->begin
                                                                    Sum(Filtered(x, (z->begin
                                                                                        z < i
                                                                                    end))) + i * count((z->begin
                                                                                        z >= i
                                                                                    end), x)
                                                                end), 1:m)
                                                    end)
                                            fx = f((x[:parameter])[1])
                                            fy = f((y[:parameter])[1])
                                            for i = 1:m
                                                if fx[i] < fy[i]
                                                    return false
                                                elseif fx[i] == fy[i] && i in (y[:parameter])[2]
                                                    if i in Difference((x[:parameter])[1], (x[:parameter])[2])
                                                        return false
                                                    end
                                                    if i < m && mod(fx[i + 1] - fy[i + 1], 2) == 1
                                                        return false
                                                    end
                                                end
                                            end
                                            if x[:parameter] == y[:parameter] && x != y
                                                return false
                                            end
                                            return true
                                        end, uc[:classes])
                                end), uc[:classes])))
        else
            uc[:orderClasses] = Hasse(Poset(map((i->begin
                                    map((j->begin
                                                Dominates(((uc[:classes])[j])[:parameter], ((uc[:classes])[i])[:parameter]) && (((uc[:classes])[j])[:parameter] != ((uc[:classes])[i])[:parameter] || i == j)
                                            end), 1:length(uc[:classes]))
                                end), 1:length(uc[:classes]))))
        end
        if char != 2
            d = 0
            while 4 * d ^ 2 - d <= n
                i = 4 * d ^ 2 - d
                if mod(n - d, 2) == 0
                    l = Concatenation(1:i, i + 2:(i + 4) - (i + 2):n)
                    s = Dict{Symbol, Any}(:relgroup => CoxeterGroup("B", (n - i) // 2), :levi => l, :locsys => [])
                    if mod(n, 2) == 0
                        s[:Z] = [1, -1]
                    else
                        s[:Z] = [E(4)]
                    end
                    push!(uc[:springerSeries], s)
                    if d == 0
                        l = Concatenation([1], 4:6 - 4:n)
                    end
                    s = Dict{Symbol, Any}(:relgroup => CoxeterGroup("B", (n - i) // 2), :levi => l, :locsys => [])
                    if mod(n, 2) == 0
                        s[:Z] = [-1, 1]
                    else
                        s[:Z] = [-(E(4))]
                    end
                    push!(uc[:springerSeries], s)
                    i = 4 * d ^ 2 + d
                    if d != 0 && i <= n
                        l = Concatenation(1:i, i + 2:(i + 4) - (i + 2):n)
                        s = Dict{Symbol, Any}(:relgroup => CoxeterGroup("B", (n - i) // 2), :levi => l, :locsys => [])
                        if mod(n, 2) == 0
                            s[:Z] = [1, -1]
                        else
                            s[:Z] = [E(4)]
                        end
                        push!(uc[:springerSeries], s)
                        s = Dict{Symbol, Any}(:relgroup => CoxeterGroup("B", (n - i) // 2), :levi => l, :locsys => [])
                        if mod(n, 2) == 0
                            s[:Z] = [1, 1]
                        else
                            s[:Z] = [-(E(4))]
                        end
                        push!(uc[:springerSeries], s)
                    end
                end
                d = d + 1
            end
            LuSpin = function (p,)
                    local t, a, b, i, j, l, d
                    Sort(p)
                    a = []
                    b = []
                    d = [0, 1, 0, -1]
                    d = d[map((x->begin
                                        1 + mod(x, 4)
                                    end), p)]
                    i = 1
                    while i <= length(p)
                        l = p[i]
                        t = Sum(d[1:i - 1])
                        if 1 == mod(l, 4)
                            push!(a, (l - 1) // 4 - t)
                            i = i + 1
                        elseif 3 == mod(l, 4)
                            push!(b, (l - 3) // 4 + t)
                            i = i + 1
                        else
                            j = i
                            while i <= length(p) && p[i] == l
                                i = i + 1
                            end
                            j = fill(0, max(0, (1 + (i - j) // 2) - 1))
                            a = Append(a, (j + (l + mod(l, 4)) // 4) - t)
                            b = Append(b, j + (l - mod(l, 4)) // 4 + t)
                        end
                    end
                    a = Filtered(a, (x->begin
                                    x != 0
                                end))
                    a = reverse(a)
                    b = Filtered(b, (x->begin
                                    x != 0
                                end))
                    b = reverse(b)
                    if Sum(d) >= 1
                        return [a, b]
                    else
                        return [b, a]
                    end
                end
            addSpringer = function (f, i, s, k)
                    local ss, p
                    ss = First(uc[:springerSeries], f)
                    if s in [[[], [1]], [[], []]]
                        p = 1
                    elseif s == [[1], []]
                        p = 2
                    else
                        p = Position(CharParams(ss[:relgroup]), [s])
                    end
                    (ss[:locsys])[p] = [i, k]
                end
            trspringer = function (i, new)
                    local ss, c
                    for ss = uc[:springerSeries]
                        for c = ss[:locsys]
                            if c[1] == i
                                c[2] = new[c[2]]
                            end
                        end
                    end
                end
            l = Filtered(1:length(uc[:classes]), (i->begin
                            ForAll(Collected(((uc[:classes])[i])[:parameter]), (c->begin
                                        mod(c[1], 2) == 0 || c[2] == 1
                                    end))
                        end))
            for i = l
                cl = (uc[:classes])[i]
                s = LuSpin(cl[:parameter])
                if Size(cl[:Au]) == 1
                    cl[:Au] = CoxeterGroup("A", 1)
                    trspringer(i, [2])
                    k = [1, 1]
                elseif Size(cl[:Au]) == 2
                    cl[:Au] = CoxeterGroup("A", 1, "A", 1)
                    trspringer(i, [2, 4])
                    k = [1, 3]
                elseif Size(cl[:Au]) == 8
                    cl[:Au] = CoxeterGroup("A", 1, "B", 2)
                    trspringer(i, [1, 6, 8, 5, 10, 3, 4, 9])
                    k = [2, 7]
                else
                    error("Au non-commutative of order ", Size(cl[:Au]) * 2, "  !  implemented")
                end
                if !'-' in cl[:name]
                    addSpringer((ss->begin
                                ss[:Z] in [[1, -1], [E(4)]] && (ss[:relgroup])[:rank] == Sum(s, Sum)
                            end), i, s, k[1])
                end
                if !'+' in cl[:name]
                    addSpringer((ss->begin
                                ss[:Z] in [[-1, 1], [-(E(4))]] && (ss[:relgroup])[:rank] == Sum(s, Sum)
                            end), i, s, k[2])
                end
            end
        end
        return uc
    end)
chevieset(Symbol("2D"), :ClassParams, function (n,)
        local B
        B = (chevieget(:B, :ClassParams))(n)
        return Filtered(B, (a->begin
                        mod(length(a[2]), 2) == 1
                    end))
    end)
chevieset(Symbol("2D"), :WordsClassRepresentatives, function (n,)
        return ((chevieget(Symbol("2D"), :ClassInfo))(n))[:classtext]
    end)
chevieset(Symbol("2D"), :ClassInfo, function (n,)
        local l, B
        B = (chevieget(:B, :ClassInfo))(n)
        l = Filtered(1:length(B[:classtext]), (i->begin
                        mod(length(((B[:classparams])[i])[2]), 2) == 1
                    end))
        return Dict{Symbol, Any}(:classnames => (B[:classnames])[l], :classparams => (B[:classparams])[l], :classes => (B[:classes])[l], :classtext => map(function (l,)
                            local res, i, n
                            res = []
                            n = 1
                            for i = 1:length(l)
                                if l[i] == 1
                                    n = mod(n + 1, 2)
                                elseif l[i] == 2
                                    push!(res, 2 - n)
                                else
                                    push!(res, l[i])
                                end
                            end
                            return res
                        end, (B[:classtext])[l]))
    end)
chevieset(Symbol("2D"), :NrConjugacyClasses, function (n,)
        if mod(n, 2) == 1
            return NrPartitionTuples(n, 2) // 2
        else
            return (NrPartitionTuples(n, 2) - NrPartitions(n // 2)) // 2
        end
    end)
chevieset(Symbol("2D"), :ClassParameter, function (n, w)
        local x, i, res, mark, cyc, j
        x = Perm()
        for i = w
            if i == 1
                x = x * (Perm(1, n + 2))(2, n + 1)
            else
                x = x * (Perm(i - 1, i))((i - 1) + n, i + n)
            end
        end
        x = x * Perm(1, n + 1)
        res = [[], []]
        mark = 1:n
        for i = 1:n
            if mark[i] != 0
                cyc = CyclePermInt(x, i)
                if i + n in cyc
                    push!(res[2], length(cyc) // 2)
                else
                    push!(res[1], length(cyc))
                end
                for j = cyc
                    if j > n
                        mark[j - n] = 0
                    else
                        mark[j] = 0
                    end
                end
            end
        end
        Sort(res[1])
        Sort(res[2])
        return [reverse(res[1]), reverse(res[2])]
    end)
chevieset(Symbol("2D"), :IsPreferred, function (pp,)
        pp = SymbolPartitionTuple(pp, 0)
        return pp[1] > pp[2]
    end)
chevieset(Symbol("2D"), :IsGood, (pp->begin
            pp[1] > pp[2]
        end))
chevieset(Symbol("2D"), :testchar, chevieget(Symbol("2D"), :IsPreferred))
chevieset(Symbol("2D"), :CharParams, (n->begin
            Filtered((chevieget(:B, :CharParams))(n), chevieget(Symbol("2D"), :testchar))
        end))
chevieset(Symbol("2D"), :CharName, function (arg...,)
        return PartitionTupleToString(arg[2])
    end)
chevieset(Symbol("2D"), :CharInfo, function (n,)
        local res, resparams
        res = Dict{Symbol, Any}(:charparams => (chevieget(Symbol("2D"), :CharParams))(n))
        res[:extRefl] = map((i->begin
                        [fill(0, max(0, (1 + i) - 1)) + 1, [n - i]]
                    end), 0:n - 2)
        res[:extRefl] = Append(res[:extRefl], [[[1], fill(0, max(0, (1 + (n - 1)) - 1)) + 1], [[], fill(0, max(0, (1 + n) - 1)) + 1]])
        res[:extRefl] = map((x->begin
                        PositionProperty(res[:charparams], (y->begin
                                    y == x || y == reverse(x)
                                end))
                    end), res[:extRefl])
        resparams = ((chevieget(:D, :CharInfo))(n))[:charparams]
        res[:charRestrictions] = map((x->begin
                        PositionProperty(resparams, (y->begin
                                    y == x || y == reverse(x)
                                end))
                    end), res[:charparams])
        res[:nrGroupClasses] = length(resparams)
        return res
    end)
chevieset(Symbol("2D"), :FakeDegree, function (n, c, q)
        return Value(CycPolFakeDegreeSymbol(SymbolPartitionTuple(c, 0), 1), q)
    end)
chevieset(Symbol("2D"), :PhiFactors, function (n,)
        local res
        res = fill(0, max(0, (1 + (n - 1)) - 1)) + 1
        push!(res, -1)
        return res
    end)
chevieset(Symbol("2D"), :UnipotentCharacters, function (rank,)
        local symbols, uc, n, i, d, s, r, f, z, Defect0to2
        uc = Dict{Symbol, Any}(:harishChandra => [], :charSymbols => [], :almostHarishChandra => [])
        for d = 4 * (0:div(RootInt(rank) - 1, 2)) + 2
            r = d ^ 2 // 4
            s = Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "B", :indices => 1 + r:rank, :rank => rank - r), :levi => 1:r, :eigenvalue => 1, :parameterExponents => Concatenation([d], fill(0, max(0, (1 + rank) - (2 + r))) + 1))
            if r < 10
                s[:cuspidalName] = SPrint("{}^2D_", r, "")
            else
                s[:cuspidalName] = SPrint("{}^2D_{", r, "}")
            end
            push!(uc[:harishChandra], s)
            if d == 2
                s[:levi] = []
                s[:cuspidalName] = ""
            end
            symbols = BDSymbols(rank, d)
            s[:charNumbers] = (1:length(symbols)) + length(uc[:charSymbols])
            FixRelativeType(s)
            uc[:charSymbols] = Append(uc[:charSymbols], symbols)
        end
        uc[:a] = map(LowestPowerGenericDegreeSymbol, uc[:charSymbols])
        uc[:A] = map(HighestPowerGenericDegreeSymbol, uc[:charSymbols])
        uc[:almostCharSymbols] = []
        for d = 4 * (0:RootInt(div(rank, 4), 2))
            r = d ^ 2 // 4
            s = Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "B", :indices => 1 + r:rank, :rank => rank - r), :levi => 1:r, :eigenvalue => (-1) ^ div(d + 1, 4))
            if r < 10
                s[:cuspidalName] = SPrint("D_", r, "")
            else
                s[:cuspidalName] = SPrint("D_{", r, "}")
            end
            r = (s[:relativeType])[:rank]
            symbols = BDSymbols(rank, d)
            if mod(div(d + 1, 4), 2) != 0
                symbols = map(reverse, symbols)
            end
            if d == 0
                (s[:relativeType])[:series] = "D"
                s[:relativeType] = Dict{Symbol, Any}(:orbit => [s[:relativeType]], :twist => #= none:58 =# @perm_str("(1,2)"))
                s[:cuspidalName] = ""
                symbols = map((x->begin
                                SymbolPartitionTuple(x, 0)
                            end), (chevieget(Symbol("2D"), :CharParams))(rank))
            end
            Defect0to2 = function (ST,)
                    local a
                    a = Minimum(SymmetricDifference(ST[1], ST[2]))
                    ST = [SymmetricDifference(ST[1], [a]), SymmetricDifference(ST[2], [a])]
                    if length(ST[1]) > length(ST[2])
                        return ST
                    else
                        return reverse(ST)
                    end
                end
            s[:charNumbers] = map((s->begin
                            Position(uc[:charSymbols], Defect0to2(s))
                        end), symbols)
            (uc[:almostCharSymbols])[s[:charNumbers]] = symbols
            if d != 0
                FixRelativeType(s)
            end
            push!(uc[:almostHarishChandra], s)
        end
        z = (x->begin
                    Dict{Symbol, Any}(:Z1 => SymmetricDifference(x[1], x[2]), :Z2 => Intersection(x))
                end)
        uc[:families] = map(function (f,)
                    local sharp, res
                    sharp = (s->begin
                                SymmetricDifference(Difference(s[2], f[:Z2]), (f[:Z1])[1:3 - 1:length(f[:Z1]) - 1])
                            end)
                    res = Dict{Symbol, Any}(:charNumbers => Filtered(1:length(uc[:charSymbols]), (i->begin
                                            z((uc[:charSymbols])[i]) == f
                                        end)))
                    res[:almostCharNumbers] = res[:charNumbers]
                    res[:fourierMat] = map((u->begin
                                    map((a->begin
                                                2 ^ -(div(length(f[:Z1]) - 1, 2)) * (-1) ^ length(Intersection(sharp(u), sharp(a)))
                                            end), (uc[:almostCharSymbols])[res[:almostCharNumbers]])
                                end), (uc[:charSymbols])[res[:charNumbers]])
                    if length(res[:fourierMat]) == 16
                        (res[:fourierMat])[16] = -((res[:fourierMat])[16])
                        ((res[:fourierMat])[1:16])[16] = -(((res[:fourierMat])[1:16])[16])
                    end
                    res[:eigenvalues] = res[:charNumbers] * 0 + 1
                    res[:sh] = map((y->begin
                                    1
                                end), res[:charNumbers])
                    if length(res[:eigenvalues]) == 1
                        res[:charLabels] = [""]
                        res[:special] = 1
                    else
                        res[:charLabels] = map(function (M,)
                                    local v, D, v1, v2, s
                                    M = SymmetricDifference(Difference(M[2], f[:Z2]), (f[:Z1])[3:5 - 3:length(f[:Z1]) - 1])
                                    v = map((z->begin
                                                    mod(count((y->begin
                                                                    y >= z
                                                                end), M), 2)
                                                end), f[:Z1])
                                    D = length(v)
                                    v1 = v[2:4 - 2:D - mod(D, 2)]
                                    v2 = v[3:5 - 3:(D - 1) + mod(D, 2)]
                                    if mod(D, 2) == 1
                                        push!(v1, 0)
                                    end
                                    v1 = map((i->begin
                                                    mod(Sum(v1[[i, i + 1]]), 2)
                                                end), 1:length(v2))
                                    s = "+-"
                                    return ConcatenationString(s[v2 + 1], ",", s[v1 + 1])
                                end, (uc[:charSymbols])[res[:charNumbers]])
                    end
                    res[:special] = PositionProperty(res[:charLabels], (x->begin
                                    ForAll(x, (y->begin
                                                y in "+,"
                                            end))
                                end))
                    res[:name] = Concatenation(f[:Z1], f[:Z2], f[:Z2])
                    Sort(res[:name])
                    res[:name] = IntListToString(res[:name])
                    res[:explanation] = "classical family"
                    res[:perm] = Perm()
                    res[:size] = length(res[:charNumbers])
                    res[:operations] = FamilyOps
                    return res
                end, gapSet(map(z, uc[:charSymbols])))
        return uc
    end)
chevieset(Symbol("2D"), :UnipotentClasses, function (r, p)
        return (chevieget(:D, :UnipotentClasses))(r, p)
    end)
chevieset(Symbol("2I"), :ReflectionName, function (m, option)
        if haskey(option, :TeX)
            return SPrint("{}^2I_2(", m, ")")
        else
            return SPrint("2I2(", m, ")")
        end
    end)
chevieset(Symbol("2I"), :NrConjugacyClasses, (m->begin
            div(m + 3, 2)
        end))
chevieset(Symbol("2I"), :WordsClassRepresentatives, function (m,)
        local r, x, i
        r = [[]]
        x = [1]
        for i = 1:div(m + 1, 2)
            push!(r, copy(x))
            x = Append(x, [2, 1])
        end
        return r
    end)
chevieset(Symbol("2I"), :ClassInfo, function (m,)
        local res
        res = Dict{Symbol, Any}(:classtext => (chevieget(Symbol("2I"), :WordsClassRepresentatives))(m))
        res[:classnames] = map(IntListToString, res[:classtext])
        res[:classparams] = res[:classnames]
        res[:classes] = [m]
        res[:classes] = Append(res[:classes], fill(0, max(0, (1 + div(m, 2)) - 1)) + 2)
        if mod(m, 2) == 1
            push!(res[:classes], 1)
        end
        res[:orders] = map((i->begin
                        (2m) // gcd(2m, length(i))
                    end), res[:classtext])
        (res[:orders])[1] = 2
        return res
    end)
chevieset(Symbol("2I"), :PhiFactors, (m->begin
            [1, -1]
        end))
chevieset(Symbol("2I"), :ClassParameter, function (m, w)
        local l
        if IsInt(length(w) // 2)
            return ""
        else
            l = copy(w)
            if l[1] == 2
                l = l[2:length(l)]
                push!(l, 1)
            end
            return IntListToString(l)
        end
    end)
chevieset(Symbol("2I"), :CharName, function (m, x, option)
        local s
        if IsList(x[1])
            return PartitionTupleToString(x)
        else
            if haskey(option, :TeX)
                s = "phi"
            else
                s = "\\phi_"
            end
            s = SPrint(s, "{", x[1], ",", x[2], "}")
            if length(x) == 3
                s = Append(s, x[3])
            end
            return string(s)
        end
    end)
chevieset(Symbol("2I"), :CharInfo, function (m,)
        local res
        res = Dict{Symbol, Any}(:extRefl => [1, 3, 2])
        if m == 4
            res[:charparams] = [[[2], []], [[], [1, 1]], [[1], [1]]]
        else
            res[:charparams] = Concatenation([[1, 0], [1, m]], map((i->begin
                                [2, i]
                            end), 1:div(m - 1, 2)))
        end
        return res
    end)
chevieset(Symbol("2I"), :HeckeCharTable, function (m, param, sqrtparam)
        local q, i, j, ct, cos, cl, l, ident, ord, v, tbl
        q = -((param[1])[1]) // (param[1])[2]
        if m == 4
            ident = "2B"
        elseif m == 6
            ident = "2G"
        else
            ident = "2I2"
        end
        ident = SPrint(ident, "(", m, ")")
        if q != 1
            ident = SPrint("H(", ident, ")")
        end
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(q, 2, "CharTable(", ident, ")")
        else
            v = sqrtparam[1]
        end
        cl = (chevieget(Symbol("2I"), :ClassInfo))(m)
        cos = (i->begin
                    E(2m, i) + E(2m, -i)
                end)
        ct = [map((i->begin
                            q ^ length(i)
                        end), cl[:classtext]), map((i->begin
                            (-1) ^ length(i)
                        end), cl[:classtext])]
        for i = 1:div(m - 1, 2)
            ct[i + 2] = [0]
            for j = 1:div(m + 1, 2)
                (ct[i + 2])[j + 1] = -(v ^ (2j - 1)) * cos(i * (2j - 1))
            end
        end
        tbl = Dict{Symbol, Any}(:identifier => ident, :name => ident, :cartan => [[2, -(cos(1))], [-(cos(1)), 2]], :size => 2m, :parameter => [q, q], :sqrtparameter => [v, v], :irreducibles => ct * v ^ 0, :irredinfo => map((x->begin
                                Dict{Symbol, Any}(:charparam => x, :charname => (chevieget(Symbol("2I"), :CharName))(m, x, Dict{Symbol, Any}(:TeX => true)))
                            end), ((chevieget(Symbol("2I"), :CharInfo))(m))[:charparams]))
        Inherit(tbl, cl)
        tbl[:centralizers] = map((i->begin
                        tbl[:size] // i
                    end), cl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(Symbol("2I"), :CharTable, (m->begin
            (chevieget(Symbol("2I"), :HeckeCharTable))(m, [[1, -1], [1, -1]], [1, 1])
        end))
chevieset(Symbol("2I"), :Representation, function (m, i)
        return (chevieget(Symbol("2I"), :HeckeRepresentation))(m, [[1, -1], [1, -1]], [1, 1], i)
    end)
chevieset(Symbol("2I"), :HeckeRepresentation, function (m, param, sqrtparam, i)
        local v, q, e
        q = -((param[1])[1]) // (param[1])[2]
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(q, 2, "Representation(Hecke(2I2(", m, ")),[", i, "])")
        else
            v = sqrtparam[1]
        end
        e = E(2m)
        if i == 1
            return Dict{Symbol, Any}(:gens => [[[v ^ 2]], [[v ^ 2]]], :F => [[1]])
        elseif i == 2
            return Dict{Symbol, Any}(:gens => [[[-1]], [[-1]]] * v ^ 0, :F => [[1]])
        else
            i = i - 2
            return Dict{Symbol, Any}(:gens => [[[-1, 0], [v * (e ^ i + e ^ -i), v ^ 2]], [[v ^ 2, v * (e ^ i + e ^ -i)], [0, -1]]] * v ^ 0, :F => -([[0, 1], [1, 0]]))
        end
    end)
chevieset(Symbol("2I"), :UnipotentCharacters, function (e,)
        local nc, uc, i, ac, c, n, symUnp, untUnp, TeXpref, eig
        uc = Dict{Symbol, Any}()
        n = div(e - 1, 2)
        nc = Concatenation(map((i->begin
                            map((j->begin
                                        [i, j]
                                    end), i + 1:(e - i) - 1)
                        end), 1:n))
        ac = Concatenation(map((l->begin
                            [0, l]
                        end), 1:n), nc)
        symUnp = Concatenation(map((i->begin
                            map((j->begin
                                        2 * [i, j] - 1
                                    end), i + 1:e - i)
                        end), 1:n))
        if mod(e, 2) == 1
            untUnp = map(function (s,)
                        local res
                        res = map((x->begin
                                        mod(x, e)
                                    end), (e - reverse(s)) // 2)
                        if res[1] > res[2]
                            res = map((x->begin
                                            mod(x, e)
                                        end), -res)
                        end
                        return res
                    end, symUnp)
            SortParallel(untUnp, symUnp)
        end
        if e == 4
            TeXpref = "B_2"
        elseif e == 6
            TeXpref = "G_2"
        else
            TeXpref = SPrint("I_2(", e, ")")
        end
        uc[:harishChandra] = Concatenation([Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [1], :rank => 1), :parameterExponents => [e], :levi => [], :eigenvalue => 1, :cuspidalName => "", :charNumbers => [2, 1])], map((x->begin
                            Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :parameterExponents => [], :levi => [1, 2], :eigenvalue => E(2e, Product(x)), :cuspidalName => SPrint("{}^2", TeXpref, "[", x[1], ",", x[2], "]"), :charNumbers => [2 + Position(symUnp, x)])
                        end), symUnp))
        uc[:almostHarishChandra] = Concatenation([Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:orbit => [Dict{Symbol, Any}(:series => "I", :indices => [1, 2], :rank => 2, :bond => e)], :twist => #= none:66 =# @perm_str("(1,2)")), :parameterExponents => [1, 1], :levi => [], :eigenvalue => 1, :cuspidalName => "", :charNumbers => 1:n + 2)], map((x->begin
                            Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :parameterExponents => [], :levi => [1, 2], :eigenvalue => E(e, -(Product(x))), :cuspidalName => SPrint(TeXpref, "[", x[1], ",", x[2], "]"), :charNumbers => [n + 2 + Position(nc, x)])
                        end), nc))
        if e == 4
            ((uc[:almostHarishChandra])[2])[:cuspidalName] = "B_2"
            ((((uc[:almostHarishChandra])[1])[:relativeType])[:orbit])[1] = Dict{Symbol, Any}(:series => "B", :indices => [1, 2], :rank => 2, :cartanType => ER(2))
        elseif e == 6
            eig = [E(3, 2), -1, E(3), 1]
            ((((uc[:almostHarishChandra])[1])[:relativeType])[:orbit])[1] = Dict{Symbol, Any}(:series => "G", :indices => [1, 2], :rank => 2, :cartanType => ER(3))
            for i = 1:4
                ((uc[:almostHarishChandra])[i + 1])[:cuspidalName] = SPrint("G2[", Format(eig[i], Dict{Symbol, Any}(:TeX => 1)), "]")
            end
        end
        uc[:charParams] = Concatenation((((chevieget(:I, :CharInfo))(e))[:charparams])[[1, 2]], ac)
        uc[:almostCharSymbols] = Concatenation([map((x->begin
                                [0]
                            end), 1:e), map((x->begin
                                [0, 1]
                            end), 1:e)], map(function (s,)
                        local S, k, l
                        S = map((i->begin
                                        [0]
                                    end), 1:e)
                        k = s[1]
                        l = s[2]
                        S[k + 1] = []
                        S[l + 1] = []
                        push!(S[1], 1)
                        push!(S[k + l + 1], 1)
                        return S
                    end, ac))
        ((uc[:almostCharSymbols])[1])[e] = [2]
        ((uc[:almostCharSymbols])[2])[e] = [1, 2]
        uc[:charSymbols] = Concatenation([map((x->begin
                                [0]
                            end), 1:e), map((x->begin
                                [0, 1]
                            end), 1:e)], map(function (s,)
                        local S, k, l
                        k = (s[1] + 1) // 2
                        l = (s[2] + 1) // 2
                        S = map(function (i,)
                                    if i == k + 1 || i == l + 1
                                        return []
                                    else
                                        return [0]
                                    end
                                end, 1:e)
                        push!(S[1], 1)
                        push!(S[k + l], 1)
                        return S
                    end, symUnp))
        ((uc[:charSymbols])[1])[[1, 2]] = [[0, 2], []]
        ((uc[:charSymbols])[2])[[1, 2]] = [[0, 1, 2], [1]]
        c = (a->begin
                    E(2e, a) + E(2e, -a)
                end)
        uc[:families] = [Family("C1", [1]), Family("C1", [2]), Family(Dict{Symbol, Any}(:eigenvalues => map((s->begin
                                        E(2e, s[1] * s[2])
                                    end), symUnp), :fourierMat => map((j->begin
                                        map((i->begin
                                                    (c(i * reverse(j)) - c(i * j)) // e
                                                end), symUnp)
                                    end), ac), :sh => map((s->begin
                                        E(e, -(s[1]) * s[2])
                                    end), ac), :charNumbers => 2 + (1:length(ac)), :special => 1))]
        uc[:a] = Concatenation([0, e], map((x->begin
                            1
                        end), ac))
        uc[:A] = Concatenation([0, e], map((x->begin
                            e - 1
                        end), ac))
        if e == 5
            (uc[:families])[3] = (uc[:families])[3] ^ 13
            for c = uc[:harishChandra]
                c[:eigenvalue] = GaloisCyc(c[:eigenvalue], 13)
            end
        end
        return uc
    end)
chevieset(Symbol("2E6"), :NrConjugacyClasses, 25)
chevieset(Symbol("2E6"), :ClassInfo, function ()
        local res
        res = Dict{Symbol, Any}(:classtext => [[1, 2, 3, 1, 4, 2, 3, 1, 4, 3, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 3, 1], [], [3, 4, 3, 5, 4, 3], [1, 2, 4, 3, 1, 5, 4, 3, 6, 5, 4, 3], [1, 2, 3, 1, 4, 3, 1, 5, 4, 3, 1, 6, 5, 4, 3, 1], [2, 3, 4, 2, 3, 4, 6, 5, 4, 2, 3, 4, 5, 6], [1, 4, 2, 3, 1, 4, 3, 5, 4, 2, 3, 1, 4, 6, 5, 4, 3, 1], [1, 2], [4, 5, 4, 2, 3, 1, 4, 5], [4, 2, 5, 4, 2, 3, 4, 5, 6, 5, 4, 2, 3, 4, 5, 6], [2, 4], [1, 5], [5, 4], [1, 2, 5, 4], [1, 2, 3, 1, 4, 3], [1, 3, 1, 4, 3, 1, 5, 4, 3, 1, 6, 5, 4, 3, 1], [2], [1], [2, 3, 4, 3, 5, 4, 3], [1, 3, 4, 3, 5, 4, 3], [1, 3, 1, 4, 3], [1, 2, 5], [2, 5, 4], [1, 5, 4], [1, 2, 4]], :classnames => ["A_0", "4A_1", "2A_1", "3A_2", "A_2", "2A_2", "D_4(a_1)", "A_3+A_1", "A_4", "E_6(a_2)", "D_4", "A_5+A_1", "A_2+2A_1", "E_6(a_1)", "E_6", "A_1", "3A_1", "A_3+2A_1", "A_3", "A_2+A_1", "2A_2+A_1", "A_5", "D_5", "A_4+A_1", "D_5(a_1)"], :classes => [1, 45, 270, 80, 240, 480, 540, 3240, 5184, 720, 1440, 1440, 2160, 5760, 4320, 36, 540, 540, 1620, 1440, 1440, 4320, 6480, 5184, 4320])
        res[:classparams] = res[:classnames]
        return res
    end)
chevieset(Symbol("2E6"), :CharInfo, function ()
        return (chevieget(:E6, :CharInfo))()
    end)
chevieset(Symbol("2E6"), :cyclestructure, [[], [36], [30], [nothing, 24], [nothing, 20], [nothing, 22], [nothing, nothing, 18], [5, nothing, 15], [nothing, nothing, nothing, 14], [nothing, nothing, nothing, nothing, 12], [6, nothing, nothing, nothing, 10], [3, nothing, nothing, nothing, 11], [6, 4, nothing, nothing, 8], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, 8], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 6], [21], [35], [6, nothing, 15], [4, nothing, 15], [3, 8, nothing, nothing, 6], [3, 10, nothing, nothing, 6], [2, nothing, nothing, nothing, 11], [nothing, nothing, nothing, nothing, nothing, nothing, 9], [1, nothing, nothing, 6, nothing, nothing, nothing, nothing, 4], [nothing, nothing, 3, nothing, 2, nothing, nothing, nothing, nothing, nothing, 4]])
chevieset(Symbol("2E6"), :generators, [#= none:3 =# @perm_str("(1,37)(3,7)(9,12)(13,17)(15,18)(19,22)(21,23)(24,26)(25,27)(28,30)(31,33)(39,43)(45,48)(49,53)(51,54)(55,58)(57,59)(60,62)(61,63)(64,66)(67,69)"), #= none:4 =# @perm_str("( 2,38)( 4, 8)( 9,13)(10,14)(12,17)(15,19)(16,20)(18,22)(21,25)(23,27)(35,36)(40,44)(45,49)(46,50)(48,53)(51,55)(52,56)(54,58)(57,61)(59,63)(71,72)"), #= none:5 =# @perm_str("( 1, 7)( 3,39)( 4, 9)( 8,13)(10,15)(14,19)(16,21)(20,25)(26,29)(30,32)(33,34)(37,43)(40,45)(44,49)(46,51)(50,55)(52,57)(56,61)(62,65)(66,68)(69,70)"), #= none:6 =# @perm_str("( 2, 8)( 3, 9)( 4,40)( 5,10)( 7,12)(11,16)(19,24)(22,26)(25,28)(27,30)(34,35)(38,44)(39,45)(41,46)(43,48)(47,52)(55,60)(58,62)(61,64)(63,66)(70,71)"), #= none:7 =# @perm_str("( 4,10)( 5,41)( 6,11)( 8,14)( 9,15)(12,18)(13,19)(17,22)(28,31)(30,33)(32,34)(40,46)(42,47)(44,50)(45,51)(48,54)(49,55)(53,58)(64,67)(66,69)(68,70)"), #= none:8 =# @perm_str("( 5,11)( 6,42)(10,16)(14,20)(15,21)(18,23)(19,25)(22,27)(24,28)(26,30)(29,32)(41,47)(46,52)(50,56)(51,57)(54,59)(55,61)(58,63)(60,64)(62,66)(65,68)")])
chevieset(Symbol("2E6"), :phi, #= none:3 =# @perm_str("(1,42)(2,38)(3,41)(4,40)(5,39)(6,37)(7,47)(8,44)(9,46)(10,45)(11,43)(12,52)(13,50)(14,49)(15,51)(16,48)(17,56)(18,57)(19,55)(20,53)(21,54)(22,61)(23,59)(24,60)(25,58)(26,64)(27,63)(28,62)(29,67)(30,66)(31,65)(32,69)(33,68)(34,70)(35,71)(36,72)"))
chevieset(Symbol("2E6"), :CartanMat, [[2, 0, -1, 0, 0, 0], [0, 2, 0, -1, 0, 0], [-1, 0, 2, -1, 0, 0], [0, -1, -1, 2, -1, 0], [0, 0, 0, -1, 2, -1], [0, 0, 0, 0, -1, 2]])
chevieset(Symbol("2E6"), :vpolheckeirreducibles, [[[[1], 72], [[1], 0], [[1], 12], [[1], 24], [[1], 32], [[1], 28], [[1], 36], [[1], 4], [[1], 16], [[1], 32], [[1], 4], [[1], 4], [[1], 4], [[1], 8], [[1], 12], [[1], 30], [[1], 2], [[1], 2], [[1], 14], [[1], 14], [[1], 10], [[1], 6], [[1], 6], [[1], 6], [[1], 6]], [[[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0]], [[[-10], 36], [[6], 0], [[-3, 0, 4, 0, -3], 4], [[-1], 12], [[-1, 0, 0, 0, 4, 0, 0, 0, -1], 12], [[-1, 0, -2, 0, -1], 12], [[-2], 18], [[2, 0, -2, 0, 2], 0], [[], 0], [[3], 16], [[1, 0, -2, 0, 1], 0], [[1, 0, -2, 0, 1], 0], [[-2], 2], [[-1], 4], [[1], 6], [[5, 0, 0, 0, 0, 0, -5], 12], [[-3, 0, 3], 0], [[-3, 0, 3], 0], [[-1, 0, 1], 6], [[1, 0, -2, 0, 2, 0, -1], 4], [[2, 0, -2], 4], [[-1, 0, 1, 0, -1, 0, 1], 0], [[], 0], [[], 0], [[-1, 0, 1, 0, -1, 0, 1], 0]], [[[-6], 60], [[2], 0], [[-3, 0, 0, 0, 1], 8], [[3], 20], [[-4, 0, 1], 26], [[-2, 0, 2], 22], [[-2], 30], [[-1, 0, 1], 2], [[-1], 12], [[-2, 0, 1], 26], [[-1], 2], [[2], 4], [[1], 4], [[], 0], [[1], 10], [[-5, 0, 0, 0, 0, 0, 1], 24], [[-1, 0, 1], 0], [[2], 2], [[-2], 10], [[-2, 0, 0, 0, 1], 10], [[1, 0, 1], 8], [[-1, 0, 1], 4], [[], 0], [[1], 6], [[-1], 4]], [[[-6], 12], [[2], 0], [[1, 0, 0, 0, -3], 0], [[3], 4], [[1, 0, -4], 4], [[2, 0, -2], 4], [[-2], 6], [[1, 0, -1], 0], [[-1], 4], [[1, 0, -2], 4], [[-1], 2], [[2], 0], [[1], 0], [[], 0], [[1], 2], [[-1, 0, 0, 0, 0, 0, 5], 0], [[-1, 0, 1], 0], [[-2], 0], [[2], 4], [[-1, 0, 0, 0, 2], 0], [[-1, 0, -1], 0], [[-1, 0, 1], 0], [[], 0], [[-1], 0], [[1], 2]], [[[-20], 36], [[-4], 0], [[-1, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, -1], 0], [[7], 12], [[-4, 0, 6, 0, -4], 14], [[2, 0, -6, 0, 2], 12], [[-4], 18], [[-1, 0, 2, 0, -1], 0], [[], 0], [[-2, 0, 3, 0, -2], 14], [[2], 2], [[2], 2], [[-1, 0, 0, 0, -1], 0], [[1], 4], [[-1], 6], [[-10, 0, 0, 0, 0, 0, 10], 12], [[2, 0, -2], 0], [[2, 0, -2], 0], [[-2, 0, 0, 0, 0, 0, 2], 4], [[1, 0, -1], 6], [[-1, 0, 1], 4], [[-1, 0, 1], 2], [[], 0], [[], 0], [[-1, 0, 1], 2]], [[[-15], 48], [[1], 0], [[-3, 0, 0, 0, 3, 0, 0, 0, 1], 4], [[-6], 16], [[-6, 0, 4, 0, -1], 20], [[-1, 0, 4, 0, -3], 16], [[-3], 24], [[1], 4], [[], 0], [[-3, 0, 2, 0, -1], 20], [[-1, 0, 0, 0, 2], 0], [[-1, 0, -1], 2], [[1], 4], [[], 0], [[], 0], [[-10, 0, 0, 0, 0, 0, 5], 18], [[1, 0, 2], 0], [[-1], 0], [[-1, 0, -1, 0, 0, 0, 0, 0, 1], 6], [[-1, 0, 0, 0, 2], 6], [[-1, 0, -1], 6], [[], 0], [[1], 6], [[], 0], [[-1, 0, -1, 0, 1], 2]], [[[-15], 24], [[1], 0], [[1, 0, 0, 0, 3, 0, 0, 0, -3], 0], [[-6], 8], [[-1, 0, 4, 0, -6], 8], [[-3, 0, 4, 0, -1], 8], [[-3], 12], [[1], 0], [[], 0], [[-1, 0, 2, 0, -3], 8], [[2, 0, 0, 0, -1], 0], [[-1, 0, -1], 0], [[1], 0], [[], 0], [[], 0], [[-5, 0, 0, 0, 0, 0, 10], 6], [[-2, 0, -1], 0], [[1], 2], [[-1, 0, 0, 0, 0, 0, 1, 0, 1], 0], [[-2, 0, 0, 0, 1], 4], [[1, 0, 1], 2], [[], 0], [[-1], 0], [[], 0], [[-1, 0, 1, 0, 1], 0]], [[[-15], 48], [[-7], 0], [[-4, 0, 3, 0, 0, 0, -2], 6], [[3], 16], [[4, 0, -4], 20], [[-4, 0, 1], 18], [[1], 24], [[-1, 0, 3, 0, -3], 0], [[], 0], [[1, 0, -2], 20], [[3, 0, -1], 2], [[2, 0, -3], 2], [[2, 0, -2], 2], [[], 0], [[1], 8], [[5, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1], 18], [[3, 0, -4], 0], [[2, 0, -5], 0], [[1, 0, -2, 0, 2], 6], [[-2, 0, 1, 0, 0, 0, -1], 8], [[2, 0, 0, 0, -1], 6], [[-1, 0, 2, 0, -2], 2], [[1], 4], [[1, 0, -1], 4], [[-1, 0, 2, 0, -1], 2]], [[[-15], 24], [[-7], 0], [[-2, 0, 0, 0, 3, 0, -4], 0], [[3], 8], [[-4, 0, 4], 10], [[1, 0, -4], 8], [[1], 12], [[-3, 0, 3, 0, -1], 0], [[], 0], [[-2, 0, 1], 10], [[-1, 0, 3], 0], [[-3, 0, 2], 0], [[-2, 0, 2], 0], [[], 0], [[1], 4], [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, -5], 0], [[4, 0, -3], 0], [[5, 0, -2], 0], [[-2, 0, 2, 0, -1], 4], [[1, 0, 0, 0, -1, 0, 2], 0], [[1, 0, 0, 0, -2], 0], [[2, 0, -2, 0, 1], 0], [[-1], 2], [[1, 0, -1], 0], [[1, 0, -2, 0, 1], 0]], [[[20], 54], [[4], 0], [[2, 0, 0, 0, 0, 0, 2], 6], [[2], 18], [[4, 0, 0, 0, 1], 22], [[-2, 0, 1], 20], [[], 0], [[-2, 0, 2], 2], [[], 0], [[-2], 24], [[-1, 0, 2], 2], [[-1, 0, 2], 2], [[-1, 0, 2], 2], [[-1], 6], [[], 0], [[9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 20], [[-1, 0, 3], 0], [[-1, 0, 3], 0], [[1, 0, 0, 0, 0, 0, 1], 8], [[1], 14], [[1], 10], [[-2, 0, 1], 4], [[-1, 0, 1], 4], [[-1, 0, 1], 4], [[-2, 0, 1], 4]], [[[20], 18], [[4], 0], [[2, 0, 0, 0, 0, 0, 2], 0], [[2], 6], [[1, 0, 0, 0, 4], 6], [[1, 0, -2], 6], [[], 0], [[2, 0, -2], 0], [[], 0], [[-2], 8], [[2, 0, -1], 0], [[2, 0, -1], 0], [[2, 0, -1], 0], [[-1], 2], [[], 0], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9], 0], [[-3, 0, 1], 0], [[-3, 0, 1], 0], [[-1, 0, 0, 0, 0, 0, -1], 0], [[-1], 0], [[-1], 0], [[-1, 0, 2], 0], [[-1, 0, 1], 0], [[-1, 0, 1], 0], [[-1, 0, 2], 0]], [[[24], 42], [[8], 0], [[-6, 0, 4, 0, 0, 0, 0, 0, 2], 4], [[6], 14], [[1, 0, 0, 0, 2, 0, -4, 0, 1], 14], [[2, 0, -2, 0, 3], 14], [[], 0], [[1, 0, -4, 0, 3], 0], [[-1], 10], [[1, 0, 0, 0, 1], 18], [[-2, 0, 4], 2], [[1, 0, -3, 0, 1], 0], [[-2, 0, 2], 2], [[], 0], [[], 0], [[5, 0, 0, 0, 0, 0, -10, 0, 9], 12], [[-2, 0, 6], 0], [[-4, 0, 4], 0], [[-1, 0, 0, 0, 0, 0, 0, 0, 1], 6], [[1, 0, -3], 4], [[2, 0, -1], 4], [[2, 0, -2, 0, 1], 2], [[-1, 0, 1], 4], [[-1], 4], [[1, 0, -3, 0, 2], 2]], [[[24], 30], [[8], 0], [[2, 0, 0, 0, 0, 0, 4, 0, -6], 0], [[6], 10], [[1, 0, -4, 0, 2, 0, 0, 0, 1], 10], [[3, 0, -2, 0, 2], 10], [[], 0], [[3, 0, -4, 0, 1], 0], [[-1], 6], [[1, 0, 0, 0, 1], 10], [[4, 0, -2], 0], [[1, 0, -3, 0, 1], 0], [[2, 0, -2], 0], [[], 0], [[], 0], [[-9, 0, 10, 0, 0, 0, 0, 0, -5], 10], [[-6, 0, 2], 0], [[-4, 0, 4], 0], [[-1, 0, 0, 0, 0, 0, 0, 0, 1], 0], [[3, 0, -1], 8], [[1, 0, -2], 4], [[-1, 0, 2, 0, -2], 0], [[-1, 0, 1], 0], [[1], 2], [[-2, 0, 3, 0, -1], 0]], [[[-30], 48], [[10], 0], [[-3, 0, 4, 0, -6, 0, 0, 0, 3], 4], [[-3], 16], [[-2, 0, 0, 0, -1], 20], [[-1, 0, 0, 0, -2], 16], [[2], 24], [[1, 0, -5, 0, 4], 0], [[], 0], [[2, 0, 0, 0, -1], 20], [[1, 0, -3, 0, 3], 0], [[-3, 0, 4], 2], [[-2, 0, 3], 2], [[], 0], [[-1], 8], [[-15, 0, 9, 0, 0, 0, -5, 0, 0, 0, 0, 0, 1], 18], [[-4, 0, 6], 0], [[-3, 0, 7], 0], [[1, 0, -2, 0, 0, 0, 1], 8], [[-1, 0, 2, 0, -3, 0, 0, 0, 1], 6], [[-3, 0, 1, 0, 1], 6], [[1, 0, -4, 0, 2], 2], [[-1, 0, 1], 4], [[-1, 0, 1], 4], [[2, 0, -3, 0, 2], 2]], [[[-30], 24], [[10], 0], [[3, 0, 0, 0, -6, 0, 4, 0, -3], 0], [[-3], 8], [[-1, 0, 0, 0, -2], 8], [[-2, 0, 0, 0, -1], 8], [[2], 12], [[4, 0, -5, 0, 1], 0], [[], 0], [[-1, 0, 0, 0, 2], 8], [[3, 0, -3, 0, 1], 0], [[4, 0, -3], 0], [[3, 0, -2], 0], [[], 0], [[-1], 4], [[-1, 0, 0, 0, 0, 0, 5, 0, 0, 0, -9, 0, 15], 0], [[-6, 0, 4], 0], [[-7, 0, 3], 0], [[-1, 0, 0, 0, 2, 0, -1], 0], [[-1, 0, 0, 0, 3, 0, -2, 0, 1], 0], [[-1, 0, -1, 0, 3], 0], [[-2, 0, 4, 0, -1], 0], [[-1, 0, 1], 0], [[-1, 0, 1], 0], [[-2, 0, 3, 0, -2], 0]], [[[-60], 36], [[-12], 0], [[-1, 0, 0, 0, 3, 0, -8, 0, 3, 0, 0, 0, -1], 0], [[3], 12], [[1, 0, 0, 0, 4, 0, 0, 0, 1], 12], [[1, 0, -2, 0, 1], 12], [[-4], 18], [[-3, 0, 6, 0, -3], 0], [[], 0], [[3], 16], [[-2, 0, 4, 0, -2], 0], [[-2, 0, 4, 0, -2], 0], [[-1, 0, 4, 0, -1], 0], [[], 0], [[-1], 6], [[9, 0, -5, 0, 0, 0, 0, 0, 5, 0, -9], 10], [[6, 0, -6], 0], [[6, 0, -6], 0], [[2, 0, -2], 6], [[-1, 0, 2, 0, -2, 0, 1], 4], [[-2, 0, 2], 4], [[1, 0, -3, 0, 3, 0, -1], 0], [[-1, 0, 1], 2], [[-1, 0, 1], 2], [[1, 0, -3, 0, 3, 0, -1], 0]], [[[-80], 36], [[16], 0], [[2, 0, 0, 0, -6, 0, 8, 0, -6, 0, 0, 0, 2], 0], [[10], 12], [[1, 0, -4, 0, 10, 0, -4, 0, 1], 12], [[3, 0, -8, 0, 3], 12], [[], 0], [[4, 0, -8, 0, 4], 0], [[], 0], [[-2, 0, 2, 0, -2], 14], [[2, 0, -6, 0, 2], 0], [[2, 0, -6, 0, 2], 0], [[2, 0, -4, 0, 2], 0], [[1], 4], [[], 0], [[-9, 0, 15, 0, 0, 0, 0, 0, -15, 0, 9], 10], [[-8, 0, 8], 0], [[-8, 0, 8], 0], [[2, 0, -2, 0, 2, 0, -2], 4], [[1, 0, -3, 0, 3, 0, -1], 4], [[3, 0, -3], 4], [[-1, 0, 4, 0, -4, 0, 1], 0], [[1, 0, -1], 2], [[1, 0, -1], 2], [[-1, 0, 4, 0, -4, 0, 1], 0]], [[[-90], 36], [[6], 0], [[1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1], 0], [[-9], 12], [[-1, 0, 4, 0, -6, 0, 4, 0, -1], 12], [[-3, 0, 6, 0, -3], 12], [[-2], 18], [[1, 0, -4, 0, 1], 0], [[], 0], [[2, 0, -1, 0, 2], 14], [[1, 0, -2, 0, 1], 0], [[1, 0, -2, 0, 1], 0], [[1, 0, -2, 0, 1], 0], [[], 0], [[1], 6], [[-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9], 10], [[-3, 0, 3], 0], [[-3, 0, 3], 0], [[-1, 0, 1], 6], [[], 0], [[], 0], [[2, 0, -2], 2], [[1, 0, -1], 2], [[1, 0, -1], 2], [[2, 0, -2], 2]], [[[-60], 42], [[4], 0], [[2, 0, -6], 6], [[-6], 14], [[4, 0, -4, 0, 4, 0, -1], 16], [[-1, 0, 6, 0, -2], 14], [[], 0], [[1, 0, -2, 0, 1], 0], [[], 0], [[-4, 0, 2], 18], [[2, 0, -1], 0], [[-1, 0, 2], 2], [[-1], 2], [[], 0], [[], 0], [[-5, 0, 0, 0, 0, 0, -5], 18], [[-3, 0, 1], 0], [[-1, 0, 3], 0], [[1, 0, 1], 6], [[2, 0, -3], 8], [[-2, 0, 1], 6], [[1, 0, -1, 0, 1], 2], [[], 0], [[], 0], [[-1, 0, 1, 0, -1], 0]], [[[-60], 30], [[4], 0], [[-6, 0, 2], 4], [[-6], 10], [[-1, 0, 4, 0, -4, 0, 4], 10], [[-2, 0, 6, 0, -1], 10], [[], 0], [[1, 0, -2, 0, 1], 0], [[], 0], [[2, 0, -4], 12], [[-1, 0, 2], 2], [[2, 0, -1], 0], [[-1], 2], [[], 0], [[], 0], [[5, 0, 0, 0, 0, 0, 5], 6], [[-1, 0, 3], 0], [[-3, 0, 1], 0], [[-1, 0, -1], 6], [[3, 0, -2], 4], [[-1, 0, 2], 2], [[-1, 0, 1, 0, -1], 0], [[], 0], [[], 0], [[1, 0, -1, 0, 1], 2]], [[[64], 45], [[], 0], [[], 0], [[-8], 15], [[4, 0, -2, 0, 4, 0, -2], 17], [[-2, 0, 4, 0, -4], 15], [[], 0], [[], 0], [[-1], 9], [[-1, 0, 2, 0, -1], 19], [[], 0], [[], 0], [[], 0], [[1], 5], [[], 0], [[16], 15], [[], 0], [[], 0], [[], 0], [[-1, 0, 0, 0, -1], 5], [[-2], 5], [[], 0], [[], 0], [[1], 3], [[], 0]], [[[-64], 27], [[], 0], [[], 0], [[8], 9], [[2, 0, -4, 0, 2, 0, -4], 9], [[4, 0, -4, 0, 2], 9], [[], 0], [[], 0], [[1], 7], [[1, 0, -2, 0, 1], 9], [[], 0], [[], 0], [[], 0], [[-1], 3], [[], 0], [[16], 15], [[], 0], [[], 0], [[], 0], [[-1, 0, 0, 0, -1], 5], [[-2], 5], [[], 0], [[], 0], [[1], 3], [[], 0]], [[[81], 40], [[9], 0], [[1, 0, 0, 0, 0, 0, 4, 0, -9, 0, 0, 0, 1], 0], [[], 0], [[], 0], [[], 0], [[-3], 20], [[2, 0, -5, 0, 2], 0], [[1], 8], [[], 0], [[3, 0, -3], 0], [[-3, 0, 3], 2], [[1, 0, -2, 0, 1], 0], [[], 0], [[], 0], [[10, 0, 0, 0, 0, 0, -5, 0, 9, 0, 0, 0, -5], 12], [[-6, 0, 3], 0], [[-3, 0, 6], 0], [[1, 0, -2], 8], [[3, 0, -3], 8], [[1, 0, -2, 0, 1], 4], [[2, 0, -3, 0, 1], 2], [[1], 2], [[-1], 4], [[-1, 0, 3, 0, -2], 0]], [[[81], 32], [[9], 0], [[1, 0, 0, 0, -9, 0, 4, 0, 0, 0, 0, 0, 1], 0], [[], 0], [[], 0], [[], 0], [[-3], 16], [[2, 0, -5, 0, 2], 0], [[1], 8], [[], 0], [[-3, 0, 3], 2], [[3, 0, -3], 0], [[1, 0, -2, 0, 1], 0], [[], 0], [[], 0], [[5, 0, 0, 0, -9, 0, 5, 0, 0, 0, 0, 0, -10], 6], [[-3, 0, 6], 0], [[-6, 0, 3], 0], [[2, 0, -1], 4], [[3, 0, -3], 4], [[-1, 0, 2, 0, -1], 2], [[-1, 0, 3, 0, -2], 0], [[-1], 4], [[1], 2], [[2, 0, -3, 0, 1], 2]]])
chevieset(Symbol("2E6"), :ClassParameter, function (w,)
        local x
        if w == []
            return " "
        end
        x = Product((chevieget(Symbol("2E6"), :generators))[w]) * chevieget(Symbol("2E6"), :phi)
        return (chevieget(Symbol("2E6"), :ClassNames))[Position(chevieget(Symbol("2E6"), :cyclestructure), CycleStructurePerm(x))]
    end)
chevieset(Symbol("2E6"), :HeckeCharTable, function (param, rootparam)
        local q, v, tbl
        q = -((param[1])[1]) // (param[1])[2]
        if !(rootparam[1] !== nothing)
            v = GetRoot(q, 2, "CharTable(Hecke(2E6))")
        else
            v = rootparam[1]
        end
        tbl = Dict{Symbol, Any}(:identifier => "H(^2E6)", :text => "origin: Jean Michel, June 1996", :parameter => map((i->begin
                                [q, -1]
                            end), 1:6), :sqrtParameter => fill(0, max(0, (1 + 6) - 1)) + v, :size => 51840, :cartan => chevieget(Symbol("2E6"), :CartanMat), :irreducibles => map((i->begin
                                map((j->begin
                                            horner(v, j[1]) * v ^ j[2]
                                        end), i)
                            end), chevieget(Symbol("2E6"), :vpolheckeirreducibles)), :irredinfo => chevieget(Symbol("2E6"), :IrredInfo))
        Inherit(tbl, (chevieget(Symbol("2E6"), :ClassInfo))())
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(Symbol("2E6"), :PhiFactors, [1, -1, 1, 1, -1, 1])
chevieset(Symbol("2E6"), :UnipotentCharacters, function ()
        local uc, p, h
        uc = Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "F", :indices => [2, 4, 5, 6], :rank => 4), :levi => [], :eigenvalue => 1, :parameterExponents => [1, 1, 2, 2], :cuspidalName => "", :charNumbers => [1, 9, 10, 2, 4, 5, 15, 16, 17, 7, 24, 25, 8, 3, 19, 6, 11, 20, 21, 12, 26, 27, 13, 14, 28]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [2], :rank => 1), :levi => [1, 3, 4, 5, 6], :eigenvalue => -1, :parameterExponents => [9], :cuspidalName => "{}^2A_5", :charNumbers => [23, 22]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:6, :eigenvalue => 1, :parameterExponents => [], :cuspidalName => "{}^2E_6[1]", :charNumbers => [18]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:6, :eigenvalue => E(3), :parameterExponents => [], :cuspidalName => "{}^2E_6[\\zeta_3]", :charNumbers => [29]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:6, :eigenvalue => E(3, 2), :parameterExponents => [], :cuspidalName => "{}^2E_6[\\zeta_3^2]", :charNumbers => [30])], :almostHarishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:orbit => [Dict{Symbol, Any}(:series => "E", :indices => 1:6, :rank => 6)], :twist => #= none:30 =# @perm_str("(1,6)(3,5)")), :levi => [], :eigenvalue => 1, :cuspidalName => "", :charNumbers => [1, 2, 3, 15, 16, 6, 7, 8, 10, 9, 11, 12, 26, 27, 4, 5, 17, 18, 19, 21, 20, 22, 23, 25, 24]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:orbit => [Dict{Symbol, Any}(:series => "A", :indices => [1, 6], :rank => 2)], :twist => #= none:36 =# @perm_str("(1,2)")), :levi => 2:5, :eigenvalue => -1, :cuspidalName => "D_4", :charNumbers => [14, 28, 13]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:6, :eigenvalue => E(3), :cuspidalName => "E_6[\\zeta_3]", :charNumbers => [29]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:6, :eigenvalue => E(3, 2), :cuspidalName => "E_6[\\zeta_3^2]", :charNumbers => [30])], :families => [Family("C1", [1]), Family("C1", [2]), Family("C1", [15]), Family("C1", [16]), Family("C1", [11]), Family("C1", [12]), Family("C1", [26]), Family("C1", [27]), Family("C1", [21]), Family("C1", [20]), Family("C'1", [22]), Family("C'1", [23]), Family("C1", [25]), Family("C1", [24]), Family("C2", [4, 7, 10, 13], Dict{Symbol, Any}(:name => "Cd_2", :eigenvalues => [1, 1, 1, 1], :fourierMat => 1 // 2 * [[1, 1, 1, 1], [1, 1, -1, -1], [1, -1, 1, -1], [-1, 1, 1, -1]], :sh => [1, 1, 1, 1])), Family("C2", [5, 8, 9, 14], Dict{Symbol, Any}(:eigenvalues => [1, 1, 1, 1], :name => "Cc_2", :sh => [1, 1, 1, 1])), Family("S3", [18, 17, 19, 3, 6, 28, 29, 30], Dict{Symbol, Any}(:name => "S3b", :eigenvalues => [1, 1, 1, 1, 1, 1, E(3), E(3, 2)], :sh => [1, 1, 1, 1, 1, 1, E(3, 2), E(3)]))], :a => [0, 36, 7, 3, 15, 7, 3, 15, 15, 3, 2, 20, 3, 15, 1, 25, 7, 7, 7, 11, 5, 4, 13, 10, 6, 6, 12, 7, 7, 7], :A => [0, 36, 29, 21, 33, 29, 21, 33, 33, 21, 16, 34, 21, 33, 11, 35, 29, 29, 29, 31, 25, 23, 32, 30, 26, 24, 30, 29, 29, 29])
        return uc
    end)
chevieset(Symbol("2E6"), :UnipotentClasses, function (p,)
        local uc, l
        uc = Copy((chevieget(:E6, :UnipotentClasses))(p))
        uc[:springerSeries] = Filtered(uc[:springerSeries], (x->begin
                        x[:Z] == [1]
                    end))
        l = [["1", #= none:9 =# @perm_str("(1,6)(3,5)")], ["A_1", #= none:9 =# @perm_str("(1,5)(2,4)")], ["A_2", #= none:9 =# @perm_str("(1,2)(3,4)")], ["D_4", #= none:10 =# @perm_str("(1,2)")], ["D_5", [[-1]]], ["D_5(a_1)", [[-1]]], ["A_4{+}A_1", [[-1]]], ["A_4", [[1, 0], [0, -1]]], ["D_4(a_1)", [[-1, 0], [0, -1]]], ["A_3{+}A_1", [[1, 0], [0, -1]]], ["A_2{+}2A_1", [[1, 0], [0, -1]]], ["A_3", DiagonalMat(1, 1, -1)], ["A_2{+}A_1", [[0, 1, 0], [1, 0, 0], [0, 0, -1]]], ["3A_1", #= none:14 =# @perm_str("(1,2)")], ["2A_1", DiagonalMat(1, 1, 1, -1)]]
        for p = l
            (First(uc[:classes], (x->begin
                            x[:name] == p[1]
                        end)))[:F] = p[2]
        end
        return uc
    end)
chevieset(Symbol("2F4"), :NrConjugacyClasses, 11)
chevieset(Symbol("2F4"), :ClassInfo, function ()
        local res
        res = Dict{Symbol, Any}(:classtext => [[], [2, 3, 2], [1], [1, 2, 1, 3, 2, 1, 4, 3, 2, 1], [1, 2], [2], [1, 2, 1, 3, 2, 1, 3, 2], [1, 2, 3, 2], [1, 2, 1, 3, 2, 1, 3, 2, 4, 3, 2, 1], [1, 2, 1, 3, 2, 1, 3, 2, 4, 3, 2, 1, 3, 2, 4, 3, 2, 1], [1, 2, 1, 3, 2, 1]], :orders => [2, 8, 4, 24, 24, 8, 8, 12, 4, 8, 8], :classes => [72, 144, 288, 96, 96, 144, 72, 192, 24, 12, 12], :classnames => ["2a", "8a", "4a", "24a", "24b", "8a", "8b", "12a", "4b", "8c", "8d"])
        res[:classparams] = map(IntListToString, res[:classtext])
        return res
    end)
chevieset(Symbol("2F4"), :CharInfo, function ()
        local res, resparams
        res = Dict{Symbol, Any}(:extRefl => [1, 9, 7, 10, 2], :charparams => [[1, 0], [1, 24], [4, 8], [9, 2], [9, 10], [6, 6, 1], [6, 6, 2], [12, 4], [4, 1], [4, 13], [16, 5]], :kondo => ["1_1", "1_4", "4_1", "9_1", "9_4", "6_1", "6_2", "12", "4_2", "4_5", "16"])
        resparams = ((chevieget(:F4, :CharInfo))())[:charparams]
        res[:charRestrictions] = map((x->begin
                        Position(resparams, x)
                    end), res[:charparams])
        res[:nrGroupClasses] = length(resparams)
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(Symbol("2F4"), :cyclestructure, [[24], [4, nothing, nothing, nothing, nothing, nothing, 5], [2, nothing, 11], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 2], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 2], [4, nothing, nothing, nothing, nothing, nothing, 5], [nothing, nothing, nothing, nothing, nothing, nothing, 6], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 4], [nothing, nothing, 12], [nothing, nothing, nothing, nothing, nothing, nothing, 6], [nothing, nothing, nothing, nothing, nothing, nothing, 6]])
chevieset(Symbol("2F4"), :generators, [#= none:4 =# @perm_str("( 1,25)( 2, 5)( 6, 9)( 7,11)(10,14)(12,15)(16,18)(21,23)(26,29)(30,33)(31,35)(34,38)(36,39)(40,42)(45,47)"), #= none:4 =# @perm_str("( 1, 5)( 2,26)( 3, 7)( 8,12)( 9,13)(14,17)(18,20)(19,21)(25,29)(27,31)(32,36)(33,37)(38,41)(42,44)(43,45)"), #= none:5 =# @perm_str("( 2, 6)( 3,27)( 4, 8)( 5, 9)(12,16)(15,18)(17,19)(20,22)(26,30)(28,32)(29,33)(36,40)(39,42)(41,43)(44,46)"), #= none:5 =# @perm_str("( 3, 8)( 4,28)( 6,10)( 7,12)( 9,14)(11,15)(13,17)(22,24)(27,32)(30,34)(31,36)(33,38)(35,39)(37,41)(46,48)")])
chevieset(Symbol("2F4"), :phi, #= none:4 =# @perm_str("( 1, 4)( 2, 3)( 5, 8)( 6, 7)( 9,12)(10,11)(13,16)(14,15)(17,18)(19,20)(21,22)(23,24)(25,28)(26,27)(29,32)(30,31)(33,36)(34,35)(37,40)(38,39)(41,42)(43,44)(45,46)(47,48)"))
chevieset(Symbol("2F4"), :CartanMat, [[2, -1, 0, 0], [-1, 2, -(ER(2)), 0], [0, -(ER(2)), 2, -1], [0, 0, -1, 2]])
chevieset(Symbol("2F4"), :ClassParameter, function (w,)
        local x, l
        if length(w) == 1
            if CycleStructurePerm(x * chevieget(Symbol("2F4"), :phi)) == [2, nothing, 11]
                return (chevieget(Symbol("2F4"), :classparams))[3]
            else
                return (chevieget(Symbol("2F4"), :classparams))[6]
            end
        else
            l = map(length, chevieget(Symbol("2F4"), :WordsClassRepresentatives))
            return (chevieget(Symbol("2F4"), :classparams))[Position(l, length(w))]
        end
    end)
chevieset(Symbol("2F4"), :HeckeCharTable, function (param, sqrtparam)
        local v, q, tbl
        q = -((param[1])[1]) // (param[1])[2]
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(q, 2, "CharTable(Hecke(2F4))")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        tbl = Dict{Symbol, Any}(:identifier => "H(2F4)", :parameter => [q, q, q, q], :sqrtparameter => [v, v, v, v], :cartan => chevieget(Symbol("2F4"), :CartanMat), :size => 1152, :irreducibles => [[1, v ^ 6, v ^ 2, v ^ 20, v ^ 4, v ^ 2, v ^ 16, v ^ 8, v ^ 24, v ^ 36, v ^ 12], [1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1], [2, v ^ 6 - 1, v ^ 2 - 1, -(v ^ 10), -(v ^ 2), v ^ 2 - 1, v ^ 10 + v ^ 6, -(v ^ 4), 2 * v ^ 12, 2 * v ^ 18, 2 * v ^ 6], [1, v ^ 6, -1, 0, 0, v ^ 2, v ^ 12 - 2 * v ^ 10, 0, -3 * v ^ 16, 3 * v ^ 24, 3 * v ^ 8], [-1, 1, -(v ^ 2), 0, 0, 1, 2 * v ^ 6 - v ^ 4, 0, 3 * v ^ 8, -3 * v ^ 12, -3 * v ^ 4], [0, 0, 0, v ^ 10, v ^ 2, 0, 2 * v ^ 8, -(v ^ 4), -4 * v ^ 12, -2 * v ^ 18, -2 * v ^ 6], [-2, -(v ^ 6) + 1, -(v ^ 2) + 1, v ^ 10, v ^ 2, -(v ^ 2) + 1, (v ^ 10 - 2 * v ^ 8) + v ^ 6, -(v ^ 4), 2 * v ^ 12, 4 * v ^ 18, 4 * v ^ 6], [2, v ^ 6 - 1, v ^ 2 - 1, v ^ 10, v ^ 2, v ^ 2 - 1, -(v ^ 10) - v ^ 6, -(v ^ 4), 2 * v ^ 12, -2 * v ^ 18, -2 * v ^ 6], [0, -(ER(2)) * v ^ 3, 0, -(ER(2)) * v ^ 15, ER(2) * v ^ 3, ER(2) * v, ER(2) * (v ^ 13 - v ^ 11), 0, 0, -2 * ER(2) * v ^ 27, 2 * ER(2) * v ^ 9], [0, -(ER(2)) * v ^ 3, 0, ER(2) * v ^ 5, -(ER(2)) * v, ER(2) * v, ER(2) * (v ^ 5 - v ^ 3), 0, 0, 2 * ER(2) * v ^ 9, -2 * ER(2) * v ^ 3], [0, 0, 0, ER(2) * v ^ 10, -(ER(2)) * v ^ 2, 0, ER(2) * ((v ^ 10 - 2 * v ^ 8) + v ^ 6), 0, 0, -4 * ER(2) * v ^ 18, 4 * ER(2) * v ^ 6]] * v ^ 0, :irredinfo => chevieget(Symbol("2F4"), :IrredInfo))
        Inherit(tbl, (chevieget(Symbol("2F4"), :ClassInfo))())
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(Symbol("2F4"), :PhiFactors, [1, -1, 1, -1])
chevieset(Symbol("2F4"), :Representation, function (i,)
        return (chevieget(Symbol("2F4"), :HeckeRepresentation))(map((x->begin
                            [1, -1]
                        end), 1:4), [1, 1, 1, 1], i)
    end)
chevieset(Symbol("2F4"), :HeckeRepresentation, function (para, rootpara, i)
        local v, res
        if rootpara[1] !== nothing
            v = rootpara[1] * (para[1])[2]
        else
            v = GetRoot(-((para[1])[1]) // (para[1])[2], 2, "Representation(Hecke(2F4),[", i, "])")
        end
        res = [Dict{Symbol, Any}(:gens => 1, :F => [[1]]), Dict{Symbol, Any}(:gens => 4, :F => [[1]]), Dict{Symbol, Any}(:gens => 9, :F => Permuted(IdentityMat(4), #= none:11 =# @perm_str("(1,4)"))), Dict{Symbol, Any}(:gens => 10, :F => Permuted(IdentityMat(9), #= none:12 =# @perm_str("(1,9)(2,6)(4,8)(5,7)"))), Dict{Symbol, Any}(:gens => 13, :F => -(Permuted(IdentityMat(9), #= none:13 =# @perm_str("(1,9)(2,6)(4,8)(5,7)")))), Dict{Symbol, Any}(:gens => 14, :F => Permuted(IdentityMat(6), #= none:14 =# @perm_str("(1,3)(2,5)(4,6)"))), Dict{Symbol, Any}(:gens => 15, :F => -([[0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0], [1 // 2, 0, 0, 0, 0, 0]])), Dict{Symbol, Any}(:gens => 16, :F => Permuted(IdentityMat(12), #= none:17 =# @perm_str("(1,12)(2,5)(3,10)(4,9)(7,11)"))), Dict{Symbol, Any}(:gens => 17, :F => -([[0, 0, 0, 1], [0, 0, 1, 0], [0, 2, 0, 0], [2, 0, 0, 0]]) // ER(2)), Dict{Symbol, Any}(:gens => 20, :F => [[0, 0, 0, 2], [0, 0, 2, 0], [0, 1, 0, 0], [1, 0, 0, 0]] // ER(2)), Dict{Symbol, Any}(:gens => 25, :F => -([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) // ER(2))]
        res = res[i]
        res[:gens] = -((para[1])[2]) * WGraphToRepresentation(4, (chevieget(:F4, :WGraph))(res[:gens]), v) * v ^ 0
        return res
    end)
(CHEVIE[:families])[:X2] = Dict{Symbol, Any}(:name => "X_2", :fourierMat => ER(2) // 2 * [[-1, -1], [-1, 1]], :eigenvalues => [E(8, 3), -(E(8))], :charLabels => ["1", "2"], :special => 1, :sh => [1, -1])
chevieset(Symbol("2F4"), :UnipotentCharacters, function ()
        local res
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "I", :indices => [1, 2], :bond => 8, :rank => 2), :parameterExponents => [2, 4], :levi => [], :eigenvalue => 1, :cuspidalName => "", :charNumbers => [1, 5, 4, 2, 3, 20, 19]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [1], :rank => 1), :parameterExponents => [12], :levi => [2, 3], :eigenvalue => E(8, 3), :cuspidalName => "{}^2B_2[1,3]", :charNumbers => [10, 9]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [1], :rank => 1), :parameterExponents => [12], :levi => [2, 3], :eigenvalue => -(E(8)), :cuspidalName => "{}^2B_2[1,5]", :charNumbers => [13, 12]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [6], :eigenvalue => -(E(3)), :cuspidalName => "{}^2F_4[-\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [7], :eigenvalue => -1, :cuspidalName => "{}^2F_4[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [8], :eigenvalue => -1, :cuspidalName => "{}^2F_4^2[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [11], :eigenvalue => -1, :cuspidalName => "{}^2F_4^3[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [14], :eigenvalue => -(E(4)), :cuspidalName => "{}^2F_4[-i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [15], :eigenvalue => E(4), :cuspidalName => "{}^2F_4[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [16], :eigenvalue => E(4), :cuspidalName => "{}^2F_4^2[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [17], :eigenvalue => -(E(4)), :cuspidalName => "{}^2F_4^2[-i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [18], :eigenvalue => -(E(3, 2)), :cuspidalName => "{}^2F_4[-\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :parameterExponents => [], :charNumbers => [21], :eigenvalue => -1, :cuspidalName => "{}^2F_4^4[-1]")], :families => [Family("C1", [1]), Family("C1", [2]), Family("C1", [4]), Family(Dict{Symbol, Any}(:name => "C''_1", :group => "C1", :charLabels => [""], :fourierMat => [[-1]], :eigenvalues => [1], :sh => [1]), [5]), Family("X2", [9, 12]), Family("X2", [10, 13]), Family(Dict{Symbol, Any}(:name => "X13", :fourierMat => Permuted(TransposedMat([[3, 0, -6, 3, ER(2) * 3, ER(2) * 3, ER(2) * 3, ER(2) * 3, 3, -3, 0, 0, 0], [3, 0, -6, 3, -(ER(2)) * 3, -(ER(2)) * 3, -(ER(2)) * 3, -(ER(2)) * 3, 3, -3, 0, 0, 0], [6, 0, 0, 6, 0, 0, 0, 0, -6, 6, 0, 0, 0], [-6, -4, -4, 2, 0, 0, 0, 0, -6, -2, -4, -4, 0], [-3, 4, -2, 1, -(ER(2)) * 3, ER(2) * 3, ER(2) * 3, -(ER(2)) * 3, -3, -1, 4, 4, 0], [-3, 4, -2, 1, ER(2) * 3, -(ER(2)) * 3, -(ER(2)) * 3, ER(2) * 3, -3, -1, 4, 4, 0], [-3, 0, 0, 3, ER(2) * 3, -(ER(2)) * 3, ER(2) * 3, -(ER(2)) * 3, 3, 3, 0, 0, 6], [-3, 0, 0, 3, ER(2) * 3, ER(2) * 3, -(ER(2)) * 3, -(ER(2)) * 3, 3, 3, 0, 0, -6], [-3, 0, 0, 3, -(ER(2)) * 3, -(ER(2)) * 3, ER(2) * 3, ER(2) * 3, 3, 3, 0, 0, -6], [-3, 0, 0, 3, -(ER(2)) * 3, ER(2) * 3, -(ER(2)) * 3, ER(2) * 3, 3, 3, 0, 0, 6], [0, 4, 4, 4, 0, 0, 0, 0, 0, -4, 4, -8, 0], [0, 4, 4, 4, 0, 0, 0, 0, 0, -4, -8, 4, 0], [0, -8, 4, 4, 0, 0, 0, 0, 0, -4, 4, 4, 0]] // 12), #= none:85 =# @perm_str("(8,13)")), :special => 4, :eigenvalues => [1, 1, 1, -1, -1, -1, -(E(4)), E(4), E(4), -(E(4)), -(E(3)), -(E(3, 2)), -1], :sh => [1, 1, 1, 1, 1, E(4), -(E(4)), -1, 1, 1, E(3), E(3, 2), -1]), [3, 19, 20, 7, 8, 11, 14, 15, 16, 17, 6, 18, 21])], :almostHarishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:orbit => [Dict{Symbol, Any}(:series => "F", :cartanType => ER(2), :indices => 1:4, :rank => 4)], :twist => #= none:93 =# @perm_str("(1,4)(2,3)")), :levi => [], :eigenvalue => 1, :cuspidalName => "", :charNumbers => [1, 2, 3, 4, 5, 19, 20, 7, 9, 10, 8]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:orbit => [Dict{Symbol, Any}(:series => "B", :indices => [1, 4], :cartanType => ER(2), :rank => 2)], :twist => #= none:97 =# @perm_str("(1,2)")), :levi => [2, 3], :eigenvalue => -1, :cuspidalName => "B_2", :charNumbers => [12, 13, 15]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => -1, :cuspidalName => "F_4[-1]", :charNumbers => [21]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => -(E(4)), :cuspidalName => "F_4[-i]", :charNumbers => [14]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => E(4), :cuspidalName => "F_4[i]", :charNumbers => [11]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => E(3), :cuspidalName => "F_4[\\zeta_3]", :charNumbers => [6]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => E(3, 2), :cuspidalName => "F_4[\\zeta_3^2]", :charNumbers => [18]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => 1, :cuspidalName => "F_4[1]", :charNumbers => [16]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => 1, :cuspidalName => "F_4^2[1]", :charNumbers => [17])], :a => [0, 24, 4, 2, 10, 4, 4, 4, 1, 13, 4, 1, 13, 4, 4, 4, 4, 4, 4, 4, 4], :A => [0, 24, 20, 14, 22, 20, 20, 20, 11, 23, 20, 11, 23, 20, 20, 20, 20, 20, 20, 20, 20])
    end)
chevieset(Symbol("3D4"), :cyclestructure, [[2, nothing, nothing, nothing, 3], [nothing, 6], [3, nothing, nothing, nothing, 3], [3, 2, nothing, nothing, 2], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 2], [nothing, 8], [nothing, nothing, nothing, nothing, 4]])
chevieset(Symbol("3D4"), :generators, [#= none:4 =# @perm_str("(1,13)(3,5)(6,8)(7,9)(10,11)(15,17)(18,20)(19,21)(22,23)"), #= none:5 =# @perm_str("( 2,14)( 3, 6)( 5, 8)( 7,10)( 9,11)(15,18)(17,20)(19,22)(21,23)"), #= none:6 =# @perm_str("( 1, 5)( 2, 6)( 3,15)( 4, 7)(11,12)(13,17)(14,18)(16,19)(23,24)"), #= none:7 =# @perm_str("( 3, 7)( 4,16)( 5, 9)( 6,10)( 8,11)(15,19)(17,21)(18,22)(20,23)")])
chevieset(Symbol("3D4"), :phi, #= none:3 =# @perm_str("(1,2,4)(5,6,7)(8,10,9)(13,14,16)(17,18,19)(20,22,21)"))
chevieset(Symbol("3D4"), :CharName, function (arg...,)
        return PartitionTupleToString(arg[1])
    end)
chevieset(Symbol("3D4"), :CartanMat, [[2, 0, -1, 0], [0, 2, -1, 0], [-1, -1, 2, -1], [0, 0, -1, 2]])
chevieset(Symbol("3D4"), :ClassParameter, function (w,)
        local x
        if w == []
            x = Perm()
        else
            x = Product((chevieget(Symbol("3D4"), :generators))[w])
        end
        return (chevieget(Symbol("3D4"), :classparams))[Position(chevieget(Symbol("3D4"), :cyclestructure), CycleStructurePerm(x * chevieget(Symbol("3D4"), :phi)))]
    end)
chevieset(Symbol("3D4"), :ClassInfo, function ()
        local res
        res = Dict{Symbol, Any}(:classtext => [[1], [], [1, 2, 3, 1, 2, 3], [3], [1, 3], [1, 2, 3, 1, 2, 4, 3, 2], [1, 2, 3, 2]], :classnames => ["C_3", "\\tilde A_2", "C_3+A_1", "\\tilde A_2+A_1", "F_4", "\\tilde A_2+A_2", "F_4(a_1)"], :orders => [6, 3, 6, 6, 12, 3, 6], :classes => [48, 16, 16, 48, 48, 8, 8])
        res[:classparams] = res[:classnames]
        return res
    end)
chevieset(Symbol("3D4"), :NrConjugacyClasses, 7)
chevieset(Symbol("3D4"), :CharInfo, function ()
        return Dict{Symbol, Any}(:extRefl => [1, 5, 4, 6, 2], :charparams => [[[], [4]], [[], [1, 1, 1, 1]], [[], [2, 2]], [[1, 1], [2]], [[1], [3]], [[1], [1, 1, 1]], [[1], [2, 1]]], :charRestrictions => [13, 4, 10, 5, 11, 3, 6], :nrGroupClasses => 13, :b => [0, 12, 4, 4, 1, 7, 3], :B => [0, 12, 8, 8, 5, 11, 9])
    end)
chevieset(Symbol("3D4"), :HeckeCharTable, function (param, sqrtparam)
        local q, tbl
        q = -((param[1])[1]) // (param[1])[2]
        tbl = Dict{Symbol, Any}(:identifier => "H(3D4)", :parameter => [q, q, q, q], :sqrtparameter => [], :cartan => chevieget(Symbol("3D4"), :CartanMat), :size => 192, :irreducibles => [[q, 1, q ^ 6, q, q ^ 2, q ^ 8, q ^ 4], [-1, 1, 1, -1, 1, 1, 1], [q - 1, 2, 2 * q ^ 3, q - 1, -q, -(q ^ 4), -(q ^ 2)], [0, 0, (q ^ 4 - 2 * q ^ 3) + q ^ 2, 0, -q, 3 * q ^ 4, 3 * q ^ 2], [q, 1, q ^ 5 - 2 * q ^ 4, -1, 0, -2 * q ^ 6, 2 * q ^ 3], [-1, 1, -2 * q ^ 2 + q, q, 0, -2 * q ^ 2, 2q], [q - 1, 2, -(q ^ 4) - q ^ 2, q - 1, 0, 2 * q ^ 4, -2 * q ^ 2]] * q ^ 0, :irredinfo => chevieget(Symbol("3D4"), :IrredInfo))
        Inherit(tbl, (chevieget(Symbol("3D4"), :ClassInfo))())
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(Symbol("3D4"), :PhiFactors, [1, E(3), 1, E(3, 2)])
chevieset(Symbol("3D4"), :Representation, function (i,)
        return (chevieget(Symbol("3D4"), :HeckeRepresentation))([[1, -1], [1, -1], [1, -1], [1, -1]], [1, 1, 1, 1], i)
    end)
chevieset(Symbol("3D4"), :HeckeRepresentation, function (param, sqrtparam, i)
        local q, v, res, x
        q = -((param[1])[1]) // (param[1])[2]
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(q, 2, "Representation(Hecke(3D4)[", i, "])")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        res = [Dict{Symbol, Any}(:gens => [[[v ^ 2]], [[v ^ 2]], [[v ^ 2]], [[v ^ 2]]], :F => [[1]]), Dict{Symbol, Any}(:gens => [[[-1]], [[-1]], [[-1]], [[-1]]], :F => [[1]]), Dict{Symbol, Any}(:gens => [[[-1, v], [0, v ^ 2]], [[-1, v], [0, v ^ 2]], [[v ^ 2, 0], [v, -1]], [[-1, v], [0, v ^ 2]]], :F => [[1, 0], [0, 1]]), Dict{Symbol, Any}(:gens => [[[v ^ 2, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, v ^ 2, 0, 0, 0], [0, 0, 0, v ^ 2, 0, 0], [0, 0, v, 0, -1, 0], [0, 0, 0, v, 0, -1]], [[-1, 0, 0, v, 0, 0], [0, v ^ 2, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, 0, 0, v ^ 2, 0, 0], [0, v, 0, 0, -1, 0], [0, 0, 0, 0, 0, v ^ 2]], [[v ^ 2, 0, 0, 0, 0, 0], [0, -1, 0, 0, v, v], [-v, 0, -1, 0, v, 0], [v, 0, 0, -1, 0, v], [0, 0, 0, 0, v ^ 2, 0], [0, 0, 0, 0, 0, v ^ 2]], [[-1, 0, -v, 0, 0, 0], [0, v ^ 2, 0, 0, 0, 0], [0, 0, v ^ 2, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, v ^ 2, 0], [0, v, 0, 0, 0, -1]]], :F => [[0, 0, 0, 0, 0, -1], [0, 0, -1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, -1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0]]), Dict{Symbol, Any}(:gens => [[[-1, v, 0, 0], [0, v ^ 2, 0, 0], [0, 0, v ^ 2, 0], [0, 0, 0, v ^ 2]], [[v ^ 2, 0, 0, 0], [0, v ^ 2, 0, 0], [0, v, -1, 0], [0, 0, 0, v ^ 2]], [[v ^ 2, 0, 0, 0], [v, -1, v, v], [0, 0, v ^ 2, 0], [0, 0, 0, v ^ 2]], [[v ^ 2, 0, 0, 0], [0, v ^ 2, 0, 0], [0, 0, v ^ 2, 0], [0, v, 0, -1]]], :F => [[0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]]), Dict{Symbol, Any}(:gens => [[[-1, 0, 0, 0], [0, v ^ 2, 0, 0], [0, v, -1, 0], [0, 0, 0, -1]], [[v ^ 2, 0, 0, 0], [0, -1, 0, 0], [v, 0, -1, 0], [0, 0, 0, -1]], [[-1, 0, v, 0], [0, -1, v, 0], [0, 0, v ^ 2, 0], [0, 0, v, -1]], [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, v], [0, 0, 0, v ^ 2]]], :F => [[0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]]), Dict{Symbol, Any}(:gens => [[[-1, v, 0, 0, 0, 0, 0, 2v], [0, v ^ 2, 0, 0, 0, 0, 0, 0], [0, v, -1, 0, 0, 0, 0, 0], [0, 0, 0, v ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, v ^ 2, 0, 0, 0], [0, 0, 0, v, 0, -1, 0, 0], [0, 0, 0, 0, v, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, v ^ 2]], [[-1, v, 0, 0, 0, 0, 2v, 0], [0, v ^ 2, 0, 0, 0, 0, 0, 0], [0, 0, v ^ 2, 0, 0, 0, 0, 0], [0, v, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, v ^ 2, 0, 0, 0], [0, 0, v, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, v ^ 2, 0], [0, 0, 0, 0, v, 0, 0, -1]], [[v ^ 2, 0, 0, 0, 0, 0, 0, 0], [v, -1, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, v, v, 0], [0, 0, 0, -1, 0, v, 0, v], [0, 0, 0, 0, -1, 0, v, v], [0, 0, 0, 0, 0, v ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, v ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, v ^ 2]], [[-1, v, 0, 0, 0, 2v, 0, 0], [0, v ^ 2, 0, 0, 0, 0, 0, 0], [0, 0, v ^ 2, 0, 0, 0, 0, 0], [0, 0, 0, v ^ 2, 0, 0, 0, 0], [0, v, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, v ^ 2, 0, 0], [0, 0, v, 0, 0, 0, -1, 0], [0, 0, 0, v, 0, 0, 0, -1]]], :F => [[1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0]])]
        res = res[i]
        res[:gens] = res[:gens] * v ^ 0
        return res
    end)
chevieset(Symbol("3D4"), :UnipotentCharacters, function ()
        local res
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "G", :indices => [1, 3], :rank => 2), :levi => [], :eigenvalue => 1, :parameterExponents => [3, 1], :cuspidalName => "", :charNumbers => [1, 2, 6, 5, 7, 3]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => 1, :parameterExponents => [], :cuspidalName => "{}^3D_4[1]", :charNumbers => [4]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => -1, :parameterExponents => [], :cuspidalName => "{}^3D_4[-1]", :charNumbers => [8])], :almostHarishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:orbit => [Dict{Symbol, Any}(:series => "D", :indices => 1:4, :rank => 4)], :twist => #= none:21 =# @perm_str("(1,2,4)")), :levi => [], :eigenvalue => 1, :cuspidalName => "", :charNumbers => 1:7), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:orbit => [Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0)], :twist => Perm()), :levi => 1:4, :eigenvalue => -1, :cuspidalName => "D_4", :charNumbers => [8])], :families => [Family("C1", [1]), Family("C1", [2]), Family("C1", [5]), Family("C1", [6]), Family("C2", [7, 4, 3, 8])], :a => [0, 12, 3, 3, 1, 7, 3, 3], :A => [0, 12, 9, 9, 5, 11, 9, 9])
    end)
chevieset(:E6, :ReflectionDegrees, [2, 5, 6, 8, 9, 12])
chevieset(:E6, :GeneratingRoots, [[1, -1, -1, -1, -1, -1, -1, 1] // 2, [1, 1, 0, 0, 0, 0, 0, 0], [-1, 1, 0, 0, 0, 0, 0, 0], [0, -1, 1, 0, 0, 0, 0, 0], [0, 0, -1, 1, 0, 0, 0, 0], [0, 0, 0, -1, 1, 0, 0, 0]])
chevieset(:E6, :WeightInfo, Dict{Symbol, Any}(:minusculeWeights => [1, 6], :decompositions => [[1], [2]], :moduli => [3]))
chevieset(:E6, :NrConjugacyClasses, 25)
chevieset(:E6, :ClassNames, ["A_0", "4A_1", "2A_1", "3A_2", "A_2", "2A_2", "D_4(a_1)", "A_3+A_1", "A_4", "E_6(a_2)", "D_4", "A_5+A_1", "A_2+2A_1", "E_6(a_1)", "E_6", "A_1", "3A_1", "A_3+2A_1", "A_3", "A_2+A_1", "2A_2+A_1", "A_5", "D_5", "A_4+A_1", "D_5(a_1)"])
chevieset(:E6, :ClassInfo, Dict{Symbol, Any}(:classtext => [[], [3, 4, 3, 2, 4, 3, 5, 4, 3, 2, 4, 5], [1, 4], [1, 3, 1, 4, 3, 1, 2, 4, 5, 4, 3, 1, 2, 4, 3, 5, 6, 5, 4, 3, 2, 4, 5, 6], [1, 3], [1, 3, 5, 6], [3, 4, 3, 2, 4, 5], [1, 4, 3, 6], [1, 4, 3, 2], [1, 2, 3, 1, 5, 4, 6, 5, 4, 2, 3, 4], [3, 4, 2, 5], [1, 2, 3, 4, 2, 3, 4, 6, 5, 4, 2, 3, 4, 5], [1, 3, 2, 5], [1, 3, 4, 3, 2, 4, 5, 6], [1, 4, 6, 2, 3, 5], [1], [1, 4, 6], [1, 3, 4, 3, 2, 4, 3, 5, 4, 3, 2, 4, 5], [1, 4, 3], [1, 3, 2], [1, 3, 2, 5, 6], [1, 4, 6, 3, 5], [1, 3, 4, 2, 5], [1, 4, 3, 2, 6], [1, 4, 2, 5, 4, 2, 3]], :classnames => chevieget(:E6, :ClassNames), :classparams => chevieget(:E6, :ClassNames), :orders => [1, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 9, 12, 2, 2, 4, 4, 6, 6, 6, 8, 10, 12], :classes => [1, 45, 270, 80, 240, 480, 540, 3240, 5184, 720, 1440, 1440, 2160, 5760, 4320, 36, 540, 540, 1620, 1440, 1440, 4320, 6480, 5184, 4320]))
chevieset(:E6, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3]], [1:3, [1, 2, 5], [1, 3, 4]], [1:4, [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 5, 6], 2:5], [1:5, [1, 3, 4, 5, 6], [1, 2, 3, 4, 6], [1, 2, 3, 5, 6]], [1:6]]
        return t[s + 1]
    end)
chevieset(:E6, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 36], [10, 9], [6, 1], [6, 25], [20, 10], [15, 5], [15, 17], [15, 4], [15, 16], [20, 2], [20, 20], [24, 6], [24, 12], [30, 3], [30, 15], [60, 8], [80, 7], [90, 8], [60, 5], [60, 11], [64, 4], [64, 13], [81, 6], [81, 10]], :frame => ["1_p", "1_p'", "10_s", "6_p", "6_p'", "20_s", "15_p", "15_p'", "15_q", "15_q'", "20_p", "20_p'", "24_p", "24_p'", "30_p", "30_p'", "60_s", "80_s", "90_s", "60_p", "60_p'", "64_p", "64_p'", "81_p", "81_p'"], :extRefl => [1, 4, 7, 6, 8, 5, 2])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:E6, :cyclestructure, [[], [36], [30], [nothing, 24], [nothing, 20], [nothing, 22], [nothing, nothing, 18], [5, nothing, 15], [nothing, nothing, nothing, 14], [nothing, nothing, nothing, nothing, 12], [6, nothing, nothing, nothing, 10], [3, nothing, nothing, nothing, 11], [6, 4, nothing, nothing, 8], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, 8], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 6], [21], [35], [6, nothing, 15], [4, nothing, 15], [3, 8, nothing, nothing, 6], [3, 10, nothing, nothing, 6], [2, nothing, nothing, nothing, 11], [nothing, nothing, nothing, nothing, nothing, nothing, 9], [1, nothing, nothing, 6, nothing, nothing, nothing, nothing, 4], [nothing, nothing, 3, nothing, 2, nothing, nothing, nothing, nothing, nothing, 4]])
chevieset(:E6, :generators, [#= none:4 =# @perm_str("( 1,37)( 3, 7)( 9,12)(13,17)(15,18)(19,22)(21,23)(24,26)(25,27)(28,30)(31,33)(39,43)(45,48)(49,53)(51,54)(55,58)(57,59)(60,62)(61,63)(64,66)(67,69)"), #= none:4 =# @perm_str("( 2,38)( 4, 8)( 9,13)(10,14)(12,17)(15,19)(16,20)(18,22)(21,25)(23,27)(35,36)(40,44)(45,49)(46,50)(48,53)(51,55)(52,56)(54,58)(57,61)(59,63)(71,72)"), #= none:4 =# @perm_str("( 1, 7)( 3,39)( 4, 9)( 8,13)(10,15)(14,19)(16,21)(20,25)(26,29)(30,32)(33,34)(37,43)(40,45)(44,49)(46,51)(50,55)(52,57)(56,61)(62,65)(66,68)(69,70)"), #= none:4 =# @perm_str("( 2, 8)( 3, 9)( 4,40)( 5,10)( 7,12)(11,16)(19,24)(22,26)(25,28)(27,30)(34,35)(38,44)(39,45)(41,46)(43,48)(47,52)(55,60)(58,62)(61,64)(63,66)(70,71)"), #= none:5 =# @perm_str("( 4,10)( 5,41)( 6,11)( 8,14)( 9,15)(12,18)(13,19)(17,22)(28,31)(30,33)(32,34)(40,46)(42,47)(44,50)(45,51)(48,54)(49,55)(53,58)(64,67)(66,69)(68,70)"), #= none:5 =# @perm_str("( 5,11)( 6,42)(10,16)(14,20)(15,21)(18,23)(19,25)(22,27)(24,28)(26,30)(29,32)(41,47)(46,52)(50,56)(51,57)(54,59)(55,61)(58,63)(60,64)(62,66)(65,68)")])
chevieset(:E6, :CartanMat, [[2, 0, -1, 0, 0, 0], [0, 2, 0, -1, 0, 0], [-1, 0, 2, -1, 0, 0], [0, -1, -1, 2, -1, 0], [0, 0, 0, -1, 2, -1], [0, 0, 0, 0, -1, 2]])
chevieset(:E6, :PowerMaps, [nothing, [1, 1, 1, 4, 5, 6, 2, 3, 9, 4, 5, 6, 5, 14, 10, 1, 1, 3, 3, 5, 6, 6, 7, 9, 13], [1, 2, 3, 1, 1, 1, 7, 8, 9, 2, 2, 2, 3, 4, 7, 16, 17, 18, 19, 16, 16, 17, 23, 24, 18], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 16, 25]])
chevieset(:E6, :vpolheckeirreducibles
chevieset(:E6, :CycPolSchurElements, [[1, 0, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 8, 9, 12], [1, -36, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 8, 9, 12], [3, -7, 2, 2, 2, 2, 3, 3, 3, 4, 4], [1, -1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 12], [1, -25, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 12], [6, -7, 2, 2, 2, 2, 3, 3, 3, 12], [2, -3, 2, 2, 2, 2, 3, 3, 3, 4, 4, 12], [2, -15, 2, 2, 2, 2, 3, 3, 3, 4, 4, 12], [2, -3, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6], [2, -15, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6], [1, -2, 2, 2, 2, 2, 3, 3, 3, 4, 6, 6, 9], [1, -20, 2, 2, 2, 2, 3, 3, 3, 4, 6, 6, 9], [1, -6, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6], [1, -12, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6], [2, -3, 2, 2, 2, 2, 3, 3, 3, 6, 6, 8], [2, -15, 2, 2, 2, 2, 3, 3, 3, 6, 6, 8], [2, -7, 2, 2, 2, 2, 3, 3, 3, 6, 6], [6, -7, 3, 3, 3, 4, 4, 6, 6], [3, -7, 2, 2, 2, 2, 4, 4, 9], [1, -5, 2, 2, 2, 2, 3, 3, 3, 4, 6, 6], [1, -11, 2, 2, 2, 2, 3, 3, 3, 4, 6, 6], [1, -4, 2, 3, 3, 3, 5, 9], [1, -13, 2, 3, 3, 3, 5, 9], [1, -6, 2, 2, 2, 2, 4, 4, 5, 8], [1, -10, 2, 2, 2, 2, 4, 4, 5, 8]])
chevieset(:E6, :sparseFakeDegrees, [[1, 0], [1, 36], [1, 9, 1, 13, 1, 15, 1, 16, 1, 17, 1, 19, 1, 20, 1, 21, 1, 23, 1, 27], [1, 1, 1, 4, 1, 5, 1, 7, 1, 8, 1, 11], [1, 25, 1, 28, 1, 29, 1, 31, 1, 32, 1, 35], [1, 10, 1, 12, 2, 13, 1, 14, 3, 16, 2, 17, 2, 19, 3, 20, 1, 22, 2, 23, 1, 24, 1, 26], [1, 5, 1, 6, 1, 8, 2, 9, 1, 11, 3, 12, 1, 13, 2, 15, 1, 16, 1, 18, 1, 19], [1, 17, 1, 18, 1, 20, 2, 21, 1, 23, 3, 24, 1, 25, 2, 27, 1, 28, 1, 30, 1, 31], [1, 4, 1, 6, 1, 7, 1, 8, 2, 10, 1, 11, 1, 12, 1, 13, 2, 14, 1, 16, 1, 17, 1, 18, 1, 20], [1, 16, 1, 18, 1, 19, 1, 20, 2, 22, 1, 23, 1, 24, 1, 25, 2, 26, 1, 28, 1, 29, 1, 30, 1, 32], [1, 2, 1, 3, 1, 4, 1, 5, 2, 6, 1, 7, 2, 8, 2, 9, 2, 10, 1, 11, 2, 12, 1, 13, 1, 14, 1, 15, 1, 16], [1, 20, 1, 21, 1, 22, 1, 23, 2, 24, 1, 25, 2, 26, 2, 27, 2, 28, 1, 29, 2, 30, 1, 31, 1, 32, 1, 33, 1, 34], [1, 6, 1, 8, 1, 9, 1, 10, 1, 11, 3, 12, 1, 13, 2, 14, 2, 15, 2, 16, 1, 17, 3, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 24], [1, 12, 1, 14, 1, 15, 1, 16, 1, 17, 3, 18, 1, 19, 2, 20, 2, 21, 2, 22, 1, 23, 3, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 30], [1, 3, 1, 5, 1, 6, 2, 7, 1, 8, 3, 9, 2, 10, 3, 11, 2, 12, 3, 13, 2, 14, 3, 15, 1, 16, 2, 17, 1, 18, 1, 19, 1, 21], [1, 15, 1, 17, 1, 18, 2, 19, 1, 20, 3, 21, 2, 22, 3, 23, 2, 24, 3, 25, 2, 26, 3, 27, 1, 28, 2, 29, 1, 30, 1, 31, 1, 33], [1, 8, 1, 9, 2, 10, 1, 11, 3, 12, 3, 13, 4, 14, 3, 15, 6, 16, 4, 17, 4, 18, 4, 19, 6, 20, 3, 21, 4, 22, 3, 23, 3, 24, 1, 25, 2, 26, 1, 27, 1, 28], [1, 7, 1, 9, 2, 10, 3, 11, 2, 12, 6, 13, 4, 14, 5, 15, 6, 16, 8, 17, 4, 18, 8, 19, 6, 20, 5, 21, 4, 22, 6, 23, 2, 24, 3, 25, 2, 26, 1, 27, 1, 29], [1, 8, 2, 9, 1, 10, 3, 11, 4, 12, 4, 13, 5, 14, 8, 15, 6, 16, 7, 17, 8, 18, 7, 19, 6, 20, 8, 21, 5, 22, 4, 23, 4, 24, 3, 25, 1, 26, 2, 27, 1, 28], [1, 5, 1, 6, 1, 7, 2, 8, 3, 9, 2, 10, 4, 11, 5, 12, 4, 13, 4, 14, 6, 15, 4, 16, 4, 17, 5, 18, 4, 19, 2, 20, 3, 21, 2, 22, 1, 23, 1, 24, 1, 25], [1, 11, 1, 12, 1, 13, 2, 14, 3, 15, 2, 16, 4, 17, 5, 18, 4, 19, 4, 20, 6, 21, 4, 22, 4, 23, 5, 24, 4, 25, 2, 26, 3, 27, 2, 28, 1, 29, 1, 30, 1, 31], [1, 4, 1, 5, 1, 6, 3, 7, 3, 8, 3, 9, 5, 10, 5, 11, 4, 12, 6, 13, 6, 14, 4, 15, 5, 16, 5, 17, 3, 18, 3, 19, 3, 20, 1, 21, 1, 22, 1, 23], [1, 13, 1, 14, 1, 15, 3, 16, 3, 17, 3, 18, 5, 19, 5, 20, 4, 21, 6, 22, 6, 23, 4, 24, 5, 25, 5, 26, 3, 27, 3, 28, 3, 29, 1, 30, 1, 31, 1, 32], [1, 6, 1, 7, 2, 8, 2, 9, 4, 10, 4, 11, 5, 12, 5, 13, 7, 14, 6, 15, 7, 16, 6, 17, 7, 18, 5, 19, 5, 20, 4, 21, 4, 22, 2, 23, 2, 24, 1, 25, 1, 26], [1, 10, 1, 11, 2, 12, 2, 13, 4, 14, 4, 15, 5, 16, 5, 17, 7, 18, 6, 19, 7, 20, 6, 21, 7, 22, 5, 23, 5, 24, 4, 25, 4, 26, 2, 27, 2, 28, 1, 29, 1, 30]])
chevieset(:E6, :ClassParameter, function (w,)
        if w == []
            return " "
        end
        return (chevieget(:E6, :ClassNames))[Position(chevieget(:E6, :cyclestructure), CycleStructurePerm(Product((chevieget(:E6, :generators))[w])))]
    end)
chevieset(:E6, :HeckeCharTable, function (param, sqrtparam)
        local q, tbl
        q = -((param[1])[1]) // (param[1])[2]
        tbl = Dict{Symbol, Any}(:identifier => "H(E6)", :text => "origin: Meinolf Geck, April 1992", :parameter => param, :rootparameter => sqrtparam, :cartan => chevieget(:E6, :CartanMat), :size => 51840, :powermap => chevieget(:E6, :PowerMaps), :irreducibles => map((i->begin
                                map((j->begin
                                            horner(q, j[1]) * q ^ j[2]
                                        end), i)
                            end), chevieget(:E6, :vpolheckeirreducibles)), :irredinfo => chevieget(:E6, :IrredInfo))
        Inherit(tbl, chevieget(:E6, :ClassInfo))
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(:E6, :WGraphs, [[[[]], []], 1, [[[4], [3, 5], [1, 2, 5], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [3, 4, 6], [1, 2, 4, 6], [1, 2, 3, 5, 6]], [[1, [[1, 4, 6, 8, 9], [2, 4, 6, 8, 10], [3, 4, 6, 9, 10], [4, 5], [5, 8, 9, 10], [6, 7], [7, 8, 9, 10]]]]], [[[1], [2], [3], [4], [5], [6]], [[1, [[1, 3], [2, 4], [3, 4], [4, 5], [5, 6]]]]], 4, [[[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [1, 5, 6], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6], [2, 5, 6], [3, 4, 5], [3, 4, 6], [3, 5, 6], [4, 5, 6]], [[1, [[1, 2], [2, 3, 11], [3, 4, 8, 12], [4, 9, 13], [5, 6], [6, 7, 8], [7, 9], [8, 9, 17], [9, 10, 18], [10, 19], [11, 12], [12, 13, 14, 17], [13, 15, 18], [14, 15], [15, 16], [17, 18], [18, 19], [19, 20]]], [-1, [[1, 5], [16, 20]]]]], [[[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6], [4, 5], [4, 6], [5, 6]], [[1, [[1, 3, 6], [2, 3], [3, 4, 10], [4, 5, 11], [5, 12], [6, 7, 10], [7, 8], [8, 9, 13], [9, 14], [10, 11], [11, 12], [13, 14], [14, 15]]], [-1, [[11, 13], [12, 14]]]]], 7, [[[2], [3], [4], 1, [5], [1, 4], [1, 5], [3, 5], [3, 6], [4, 6], [1, 2, 5], [1, 2, 6], [1, 4, 6], [2, 3, 5], [2, 3, 6]], [[1, [[1, 4, 12, 14], [2, 6, 9, 14], [3, 4, 6, 10, 14], [4, 8, 13], [5, 7, 10, 14], [6, 11, 13], [7, 8, 11, 13], [8, 9, 14], [9, 13, 15], [10, 13, 15], [11, 12, 14], [12, 13, 15], [14, 15]]]]], 9, [[[1], [2], [3], 1, [4], 2, [5], 1, [6], [1, 2], [1, 4], [1, 5], [1, 6], [2, 3], [2, 5], [2, 6], [3, 5], [3, 6], [4, 6]], [[1, [[1, 3, 14], [2, 6, 11, 17], [3, 5, 19], [4, 12, 15, 18], [5, 16, 20], [6, 12, 18, 20], [7, 8, 12, 15], [8, 10, 13], [9, 16, 18, 20], [10, 14], [11, 12, 15], [12, 13], [13, 14, 18], [14, 19], [16, 17], [17, 20], [18, 19], [19, 20]]]]], 11, [[[4], [1, 4], [1, 5], [1, 6], [2, 3], [2, 5], [3, 4], [3, 5], 1, [3, 6], [4, 5], [4, 6], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [2, 4, 6], [2, 5, 6], [3, 4, 6], [1, 3, 5, 6]], [[1, [[1, 7, 11, 14, 17, 19, 21, 23], [2, 3, 7, 13, 14], [3, 4, 9, 15], [4, 10, 16], [5, 7, 13, 14, 19], [6, 11, 19, 21, 22], [7, 9], [8, 17, 19, 23, 24], [9, 10, 11, 19], [10, 12, 20], [11, 12], [12, 21, 22], [14, 15], [15, 16, 17, 19], [16, 18, 20], [17, 18], [18, 23, 24], [19, 20], [20, 21, 23]]]]], 13, [[[2], [3], [4], 1, [5], [1, 2], [1, 3], [1, 4], 1, [1, 5], 1, [1, 6], [2, 3], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], 1, [3, 6], 1, [4, 5], [4, 6], 1, [5, 6], [1, 2, 5], [1, 2, 6], [1, 4, 6], [2, 3, 5], [2, 3, 6]], [[1, [[1, 4, 27, 29], [2, 8, 20, 29], [3, 4, 8, 23, 29], [4, 19, 28], [5, 10, 23, 29], [6, 9, 13], [7, 9], [8, 26, 28], [9, 11, 17], [10, 19, 26, 28], [11, 12, 18], [12, 21], [13, 14, 17], [14, 15], [15, 16, 22], [16, 24], [17, 18], [18, 21, 22], [19, 20, 29], [20, 28, 30], [21, 24], [22, 24], [23, 28, 30], [24, 25], [26, 27, 29], [27, 28, 30], [29, 30]]], [[2, 1], [[1, 14], [2, 7, 17], [3, 14, 17, 22], [5, 22, 25], [8, 9], [23, 24], [26, 6, 11], [27, 12], [29, 13, 15, 18], [30, 16, 21]]]]], 15, [[[4], [1, 4], 1, [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], 1, [3, 5], 2, [3, 6], [4, 5], 1, [4, 6], 1, [1, 2, 4], [1, 2, 5], 2, [1, 2, 6], [1, 3, 5], [1, 4, 5], 2, [1, 4, 6], 3, [2, 3, 5], 3, [2, 3, 6], 2, [2, 4, 6], [3, 4, 5], [3, 4, 6], 2, [3, 5, 6], [1, 2, 3, 5], 1, [1, 2, 3, 6], 1, [1, 2, 4, 5], [1, 2, 4, 6], 2, [1, 2, 5, 6], 1, [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 6], [2, 3, 5, 6], 1, [1, 2, 3, 5, 6]], [[1, [[1, 2, 6, 8, 15, 16, 26, 33, 39, 41, 48, 50, 57], [2, 9, 18, 24, 25, 30, 45, 51, 54], [3, 8, 28, 44, 48], [4, 10, 26, 28, 44, 48, 52, 60], [5, 9, 18, 31, 37, 45], [6, 18, 31, 38], [7, 14, 20, 31, 38, 59], [8, 32, 40], [9, 12, 39, 41, 57], [10, 11, 14, 32, 40, 59], [11, 12, 23, 26, 33, 39, 41, 43, 60], [12, 13, 25, 34, 45], [13, 29, 41, 46, 57, 58, 60], [14, 16, 26, 39, 48], [15, 17, 25, 34], [16, 30, 38, 40, 42, 49, 56, 59], [17, 29, 57, 58], [18, 21, 50], [19, 20, 25, 34, 45, 51, 53], [20, 21, 26, 33, 48, 50, 52, 60], [21, 22, 24, 31, 45], [22, 27, 36, 46, 50, 52, 60], [23, 24, 45, 54, 55], [24, 26, 27, 39], [25, 26, 29], [26, 30, 56], [27, 30, 42, 54, 55, 56], [28, 30, 40, 47, 49], [29, 30, 51, 53], [30, 41, 50, 60], [31, 33, 36, 39], [32, 33, 35, 44, 48], [33, 34, 37, 45, 59], [34, 57, 58], [35, 37, 40, 47, 49, 59], [36, 37, 38, 42, 59], [37, 41, 46, 50, 57, 60], [38, 50], [39, 42], [40, 41], [41, 42, 54], [42, 43], [43, 55, 56, 59], [44, 47], [45, 46, 60], [46, 51, 54], [47, 60], [48, 49], [49, 50, 52], [50, 51], [51, 57], [52, 56, 59], [53, 58, 60], [55, 60], [59, 60]]]]], [[[4], [1, 4], 1, [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], 1, [3, 5], 2, [3, 6], [4, 5], 1, [4, 6], 1, [1, 2, 3], [1, 2, 4], 1, [1, 2, 5], 3, [1, 2, 6], 1, [1, 3, 4], [1, 3, 5], 1, [1, 3, 6], [1, 4, 5], 3, [1, 4, 6], 4, [1, 5, 6], [2, 3, 4], [2, 3, 5], 4, [2, 3, 6], 3, [2, 4, 5], [2, 4, 6], 1, [2, 5, 6], [3, 4, 5], 1, [3, 4, 6], 3, [3, 5, 6], 1, [4, 5, 6], [1, 2, 3, 5], 1, [1, 2, 3, 6], 1, [1, 2, 4, 5], [1, 2, 4, 6], 2, [1, 2, 5, 6], 1, [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 6], [2, 3, 5, 6], 1, [1, 2, 3, 5, 6]], [[1, [[1, 32, 45, 58, 70], [2, 9, 19, 31, 34, 65, 71, 74], [3, 8, 36, 64, 68], [4, 10, 36, 64, 68, 73], [5, 9, 19, 43, 65], [6, 19, 43, 52], [7, 14, 43, 52, 78], [8, 42, 60], [9, 12, 55, 77], [10, 14, 42, 60, 78], [11, 32, 45, 58, 80], [12, 13, 34, 44, 65], [13, 39, 66, 77, 79], [14, 16, 55, 68], [15, 17, 34, 44], [16, 52, 59, 60, 69, 76, 78], [17, 39, 77, 79], [18, 20, 27], [19, 23], [20, 24, 41], [21, 34, 44, 65, 71, 72], [22, 32, 45, 70, 80], [23, 25, 31, 43, 65], [24, 26, 33, 46], [25, 37, 50, 66, 73], [26, 38, 47], [27, 28], [28, 30, 33], [29, 31, 65, 74, 75], [30, 38], [31, 37, 55], [32, 35], [33, 38, 56], [34, 39], [35, 58, 70, 80], [36, 60, 67, 69], [37, 59, 74, 75, 76], [38, 40, 57], [39, 71, 72], [40, 61], [41, 46], [42, 48, 64, 68], [43, 50, 55], [44, 77, 79], [45, 49], [46, 47, 51, 56], [47, 53, 57], [48, 60, 67, 69, 78], [49, 58, 70, 80], [50, 52, 59, 78], [51, 53], [53, 54], [54, 63], [55, 59], [56, 57], [57, 61], [59, 62], [61, 63], [62, 75, 76, 78], [64, 67], [65, 66], [66, 71, 74], [68, 69], [69, 73], [71, 77], [72, 79], [73, 76, 78]]], [[2, 1], [[3, 20, 27, 33], [4, 33, 40], [5, 18, 41], [6, 41, 51], [7, 51, 54], [8, 41, 56], [9, 27], [10, 56, 61], [12, 28, 56], [13, 30, 57], [14, 63], [15, 51, 56], [17, 53, 57, 63], [19, 20], [21, 24], [23, 24], [25, 26], [29, 28], [31, 33], [34, 33], [36, 38], [37, 38], [39, 38], [42, 46], [43, 46], [44, 46], [48, 47], [50, 47], [52, 53], [55, 56], [59, 57], [60, 57], [62, 61], [64, 18, 24, 28], [66, 18], [67, 26, 30], [68, 24, 51], [69, 26, 53], [71, 20, 26], [72, 26, 40], [73, 54], [74, 27, 30], [75, 30, 40], [76, 40, 63], [77, 41, 47], [79, 47, 54, 61]]], [[3, 1], [[1, 2, 6, 8, 15, 16, 55, 68, 77], [11, 10, 12, 29, 55, 62], [22, 7, 21, 23, 68, 73], [32, 4, 14, 31, 34, 76], [35, 2, 16, 36, 37, 39], [45, 42, 43, 44, 65, 78], [49, 5, 48, 50, 66, 77], [58, 9, 13, 59, 60, 74], [70, 19, 25, 52, 69, 71], [80, 4, 13, 25, 65, 67, 72, 75, 78]]], [2, [[2, 3], [4, 21, 29], [5, 42], [7, 44], [8, 9], [10, 44], [12, 42], [13, 48, 62], [14, 15], [16, 17], [19, 68], [34, 68], [36, 71, 74], [39, 69, 76], [52, 77], [60, 77], [64, 65], [66, 67], [72, 73], [78, 79]]]]], [[[1, 4], 1, [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], 1, [3, 5], 1, [3, 6], [4, 5], 1, [4, 6], 1, [1, 2, 3], 1, [1, 2, 4], 2, [1, 2, 5], 3, [1, 2, 6], 2, [1, 3, 4], 1, [1, 3, 5], 2, [1, 3, 6], 1, [1, 4, 5], 3, [1, 4, 6], 4, [1, 5, 6], 1, [2, 3, 4], 1, [2, 3, 5], 4, [2, 3, 6], 3, [2, 4, 5], 1, [2, 4, 6], 2, [2, 5, 6], 1, [3, 4, 5], 2, [3, 4, 6], 3, [3, 5, 6], 2, [4, 5, 6], 1, [1, 2, 3, 5], 1, [1, 2, 3, 6], 1, [1, 2, 4, 5], [1, 2, 4, 6], 1, [1, 2, 5, 6], 1, [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 6], [2, 3, 5, 6], 1], [[-1, [[2, 35, 82], [3, 31], [4, 50], [8, 9, 88], [9, 77], [11, 79], [16, 79], [17, 76, 79], [19, 80], [22, 77], [24, 76, 80], [26, 78, 81], [28, 30, 85], [29, 85], [34, 85, 86], [43, 85], [45, 86, 87], [58, 80], [61, 81], [62, 84], [74, 87], [79, 82]]], [[-1, 0], [[36, 24], [42, 26], [64, 49], [70, 53], [74, 63]]], [[1, 0], [[21, 38], [25, 40], [51, 65], [56, 68], [62, 75]]], [1, [[1, 7, 18, 29, 36, 43, 76, 80], [2, 8, 19, 37, 77, 85], [3, 10, 22, 36, 43, 45, 76, 80, 84], [4, 8, 17, 19, 47, 48, 77], [5, 19, 47, 48, 58, 60], [6, 12, 48, 52, 58, 60, 62, 90], [7, 46, 50, 64, 69], [8, 28, 66], [9, 11, 30, 35, 50, 52, 65], [10, 12, 50, 52, 64, 69, 71, 90], [11, 33, 39, 54, 68, 72, 88, 89], [12, 15, 66, 74, 80], [13, 14, 35, 52, 57, 58, 65], [14, 39, 59, 61, 68, 75, 88, 89], [15, 60, 67, 69, 81, 87, 90], [16, 18, 29], [17, 20, 28], [18, 21, 46, 82], [19, 23], [20, 24, 47, 82], [21, 25, 36, 51], [22, 35, 52, 82, 83], [23, 27, 37, 48, 77], [24, 26, 38, 49], [25, 42, 56, 82, 83], [26, 40, 53, 82, 83], [27, 41, 55, 79, 84], [29, 32], [30, 33, 38, 76], [31, 37, 77, 85, 86], [32, 34, 36], [33, 40, 78, 85, 86], [34, 42], [35, 39, 80], [36, 42, 64], [37, 41, 66], [38, 40, 65], [39, 81, 82, 83, 87], [40, 44, 68], [41, 67, 85, 86, 87], [42, 45, 70], [43, 69, 78, 81, 82], [44, 73, 86, 87], [45, 71, 83], [46, 51, 88], [47, 49, 88], [48, 55, 66], [49, 53, 58, 65], [50, 54, 76, 80], [51, 56, 57, 64], [52, 88, 89], [53, 61, 68, 88, 89], [54, 69, 78, 81, 90], [55, 60, 67, 90], [56, 59, 70, 88, 89], [57, 59], [58, 61], [59, 63], [60, 88], [61, 62], [62, 74, 89], [63, 75, 89], [64, 70], [65, 68], [66, 67], [67, 72], [68, 73], [69, 88], [70, 71], [71, 74, 89], [72, 86, 87, 90], [73, 75], [75, 87], [76, 78], [77, 79], [79, 85], [80, 81], [81, 84], [82, 88], [83, 89], [84, 87, 90]]], [2, [[16, 76], [21, 76, 80], [25, 78, 81], [32, 76], [34, 78], [44, 83], [57, 80], [59, 81], [63, 84], [73, 89]]]]], [[[3], [4], 2, [5], [1, 2], [1, 4], 2, [1, 5], 1, [2, 3], 1, [2, 4], [2, 5], 1, [2, 6], [3, 4], 1, [3, 5], 3, [3, 6], 1, [4, 5], 1, [4, 6], 2, [1, 2, 4], [1, 2, 5], 2, [1, 2, 6], 1, [1, 3, 5], [1, 3, 6], [1, 4, 5], 1, [1, 4, 6], 3, [1, 5, 6], [2, 3, 5], 2, [2, 3, 6], 2, [2, 4, 6], [3, 4, 6], 1, [3, 5, 6], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 6], [1, 2, 5, 6], [2, 3, 5, 6]], [[1, [[1, 9, 18, 21, 38, 46, 51, 53, 56], [2, 3, 18, 29, 31, 40, 48], [3, 4, 8, 14, 19, 26, 28, 39, 47, 54, 58], [4, 9, 27, 46, 52, 53], [5, 22, 27, 29, 34, 40, 45, 48, 60], [6, 7, 12, 31, 34, 36, 56], [7, 8, 19, 37, 39, 43], [8, 9, 18, 31, 40, 42, 56], [9, 33, 39, 43, 58], [10, 11, 22, 34, 40, 42, 45, 56], [11, 23, 33, 37, 39, 43, 59], [12, 13, 14, 19, 47, 49], [13, 18, 31, 48, 51, 56], [14, 16, 31, 52], [15, 16, 27, 34, 46, 52, 60], [16, 17, 26, 32, 47], [17, 30, 35, 51, 52, 60], [18, 19, 20, 54], [19, 21, 53], [20, 21, 22, 24, 40, 48, 56], [21, 23, 25, 37, 39, 47], [22, 23, 26, 47, 54, 55], [23, 27, 46, 53, 60], [24, 25, 44, 50, 54, 55, 57], [25, 38, 41, 51, 53, 60], [26, 27, 30, 40], [27, 28, 39], [28, 29, 30, 41, 52, 53, 60], [29, 44, 50, 54, 58], [30, 44, 54, 55], [31, 32, 58], [32, 34, 35, 40, 48, 56], [33, 34, 36, 46, 56], [34, 39, 47, 58, 59], [35, 44, 50, 57, 58, 59], [36, 43, 49, 57, 58, 59], [37, 38, 56], [38, 43, 57], [39, 40, 41], [40, 44], [41, 43, 44, 58, 59], [42, 43, 44, 54, 57, 58], [43, 53], [44, 45], [45, 55, 59], [46, 47, 49], [47, 48, 51, 56, 60], [48, 50], [49, 51, 52, 53, 60], [50, 51, 60], [51, 54, 57, 58], [52, 58], [53, 54], [55, 60], [56, 57], [59, 60]]]]], 20, [[[3], [4], 1, [5], [1, 2], 1, [1, 3], [1, 4], 3, [1, 5], 2, [1, 6], 1, [2, 3], 2, [2, 4], 1, [2, 5], 2, [2, 6], 1, [3, 4], 2, [3, 5], 3, [3, 6], 2, [4, 5], 2, [4, 6], 3, [5, 6], [1, 2, 3], [1, 2, 4], [1, 2, 5], 1, [1, 2, 6], 1, [1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], 1, [1, 5, 6], [2, 3, 5], 1, [2, 3, 6], 1, [2, 4, 6], [2, 5, 6], [3, 4, 6], [3, 5, 6]], [[1, [[1, 7, 8, 17, 28, 31, 52, 57, 63], [2, 3, 8, 21, 28, 37, 38, 57, 61, 63], [3, 20, 27, 29, 39, 43, 46, 53, 58], [4, 24, 32, 39, 43, 44, 53, 56, 58], [5, 10, 19, 48, 49], [6, 11, 18, 45, 46, 47], [7, 11, 45], [8, 11, 46, 47, 53, 55], [9, 11, 14, 29, 45, 46], [10, 27, 51, 53, 55], [11, 12, 28], [12, 14, 15, 30, 47], [13, 32, 47, 51, 53, 55, 56], [14, 16, 33, 48], [15, 16, 36, 49], [16, 34, 50], [17, 18, 29, 45, 46, 58], [18, 21, 28, 57], [19, 20, 27, 58, 60], [20, 23, 61], [21, 22, 46], [22, 25, 37, 48, 57], [23, 24, 26, 39, 58], [24, 38, 57, 61, 62], [25, 41, 50, 60], [26, 42, 59, 61, 62], [27, 31, 63], [28, 29, 30], [29, 33], [30, 33, 36, 38, 57], [31, 32, 35, 51, 53, 58], [32, 37, 57, 63, 64], [33, 34, 39, 58], [34, 36, 42, 59], [35, 52, 54, 59, 63, 64], [36, 40, 60], [37, 41, 53], [38, 39, 40], [39, 42], [40, 42, 61, 62], [41, 54, 63, 64], [42, 43, 44], [43, 54, 59, 61, 63], [44, 62], [46, 48], [47, 48, 49, 57], [48, 50, 53, 58], [49, 50, 55, 60], [50, 54, 59], [51, 52], [52, 55], [53, 54], [54, 55, 56], [55, 63], [56, 64], [57, 58, 60], [58, 59], [59, 60], [60, 61, 63]]]]], 22, [[[4], [1, 2], [1, 3], [1, 4], 2, [1, 5], 1, [2, 3], 1, [2, 4], 1, [2, 5], 1, [2, 6], [3, 4], 2, [3, 5], 3, [3, 6], 1, [4, 5], 2, [4, 6], 2, [5, 6], [1, 2, 3], [1, 2, 4], 1, [1, 2, 5], 3, [1, 2, 6], 2, [1, 3, 4], [1, 3, 5], 1, [1, 3, 6], 1, [1, 4, 5], 2, [1, 4, 6], 4, [1, 5, 6], 1, [2, 3, 4], [2, 3, 5], 3, [2, 3, 6], 3, [2, 4, 5], [2, 4, 6], 1, [2, 5, 6], [3, 4, 5], [3, 4, 6], 2, [3, 5, 6], 1, [4, 5, 6], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 6], [1, 2, 5, 6], [2, 3, 5, 6]], [[1, [[1, 4, 11, 12, 16, 26, 28, 48, 59, 70, 72, 79], [2, 6, 10, 37, 40], [3, 5, 45], [4, 17, 33, 34, 42, 47, 49, 50, 77], [5, 18, 36, 51], [6, 16, 44, 48, 51], [7, 20, 37, 47, 49, 50, 55, 56, 77], [8, 22, 36, 44, 48, 51, 80], [9, 17, 34, 61, 65, 77], [10, 12, 16, 32, 59, 63], [11, 34, 61, 67], [12, 14, 33, 68], [13, 25, 37, 61, 67, 81], [14, 15, 26, 35, 59, 69], [15, 29, 39, 65], [16, 21, 42, 73], [17, 19, 57, 70, 72], [18, 58, 73], [19, 20, 23, 49, 60, 77], [20, 26, 59, 70, 72, 74, 75], [21, 22, 24, 43, 44, 48, 59, 70], [22, 25, 58, 73, 81], [23, 54, 64, 72, 75, 78], [24, 45, 46, 52, 65, 71, 73, 81], [25, 28, 48, 66, 70], [26, 29, 49, 76], [27, 30, 49, 60], [28, 52, 67, 68, 71, 73, 76, 81], [29, 54, 72, 75], [30, 31, 54, 64], [31, 56], [32, 33, 42, 77], [33, 35, 57], [34, 38, 79], [35, 39, 49, 60, 77], [36, 40, 58], [37, 38, 48, 59, 79, 80], [38, 41, 47, 61, 77], [39, 54, 64, 78], [40, 51, 63, 80], [41, 53, 62, 78, 79, 80], [42, 43], [43, 46, 47, 77], [44, 45], [45, 51], [46, 53, 78], [47, 48, 53, 70], [48, 52], [49, 54], [50, 53, 54, 72, 78, 79], [51, 52, 73], [52, 53, 79, 80], [53, 55, 71], [54, 56], [55, 74, 80], [56, 75], [57, 60], [58, 63, 66], [59, 61, 65, 77, 81], [60, 64], [61, 62, 70], [62, 65, 67, 71, 81], [63, 68, 73, 81], [65, 72, 78, 79], [66, 68], [67, 79], [68, 69], [69, 76, 81], [70, 71], [71, 72, 74], [74, 76, 81], [77, 78], [80, 81]]]]], 24])
chevieset(:E6, :WGraph, function (i,)
        local gr
        gr = chevieget(:E6, :WGraphs)
        if IsInt(gr[i])
            return DualWGraph(6, gr[gr[i]])
        else
            return gr[i]
        end
    end)
chevieset(:E6, :HeckeRepresentation, function (param, sqrtparam, i)
        local v
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(-((param[1])[1]) // (param[1])[2], 2, "Representation(Hecke(E6),[", i, "])")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        return -((param[1])[2]) * WGraphToRepresentation(6, (chevieget(:E6, :WGraph))(i), v)
    end)
chevieset(:E6, :Representation, function (i,)
        return (chevieget(:E6, :HeckeRepresentation))([[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]], [1, 1, 1, 1, 1, 1], i)
    end)
chevieset(:E6, :DecompositionMatrix, function (p,)
        if p == 2
            return [[Concatenation(1:21, [24, 25]), [[1, 0, 0, 0, 0], [1, 0, 0, 0, 0], [2, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 1, 2, 0, 0], [1, 0, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 1, 0, 0], [1, 1, 1, 0, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 0], [2, 1, 0, 1, 0], [2, 1, 0, 1, 0], [2, 1, 1, 1, 0], [2, 1, 1, 1, 0], [0, 1, 2, 0, 1], [0, 2, 4, 0, 1], [2, 1, 2, 2, 1], [0, 0, 1, 1, 1], [0, 0, 1, 1, 1], [1, 1, 3, 1, 1], [1, 1, 3, 1, 1]]], [[22, 23], [[1], [1]]]]
        elseif p == 3
            return [[1:23, [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1]]]]
        elseif p == 5
            return [[[1, 13, 25, 23, 5], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[2, 14, 24, 22, 4], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]]]
        else
            return []
        end
    end)
chevieset(:E6, :UnipotentCharacters, Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "E", :indices => 1:6, :rank => 6), :levi => [], :eigenvalue => 1, :parameterExponents => [1, 1, 1, 1, 1, 1], :cuspidalName => "", :charNumbers => 1:25), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [1, 6], :rank => 2), :levi => 2:5, :eigenvalue => -1, :parameterExponents => [4, 4], :cuspidalName => "D_4", :charNumbers => [27, 28, 26]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:6, :eigenvalue => E(3), :parameterExponents => [], :cuspidalName => "E_6[\\zeta_3]", :charNumbers => [29]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:6, :eigenvalue => E(3, 2), :parameterExponents => [], :cuspidalName => "E_6[\\zeta_3^2]", :charNumbers => [30])], :families => [Family("C1", [1]), Family("C1", [2]), Family("C1", [4]), Family("C1", [5]), Family("C1", [11]), Family("C1", [12]), Family("C1", [13]), Family("C1", [14]), Family("C1", [20]), Family("C1", [21]), Family("C1", [22]), Family("C1", [23]), Family("C1", [24]), Family("C1", [25]), Family("C2", [15, 9, 7, 26]), Family("C2", [16, 10, 8, 27]), Family("S3", [18, 17, 3, 19, 6, 28, 29, 30])], :a => [0, 36, 7, 1, 25, 7, 3, 15, 3, 15, 2, 20, 6, 12, 3, 15, 7, 7, 7, 5, 11, 4, 13, 6, 10, 3, 15, 7, 7, 7], :A => [0, 36, 29, 11, 35, 29, 21, 33, 21, 33, 16, 34, 24, 30, 21, 33, 29, 29, 29, 25, 31, 23, 32, 26, 30, 21, 33, 29, 29, 29]))
chevieset(:E6, :Invariants, function ()
        local r, C
        C = chevieget(:E6, :CartanMat)
        r = RootsCartan(C) * C
        return [function (arg...,)
                    return Sum(r, (a->begin
                                    (arg * a) ^ 2
                                end))
                end, function (a, b, c, d, e, f)
                    return (((((((((((((((((((((((((((((-a * b * c * d ^ 2 - a * c * d * e ^ 2) - a * c * e * f ^ 2) + b * d * e * f ^ 2) - c * d * e * f ^ 2) + a * b * c ^ 2 * d + a * c * d ^ 2 * e + a * c * e ^ 2 * f) - b * d * e ^ 2 * f) + c * d * e ^ 2 * f + a * b ^ 2 * c * d) - a * c ^ 2 * d * e) - a * c ^ 2 * e * f) + b * d ^ 2 * e * f) - c * d ^ 2 * e * f) - a * b ^ 2 * c ^ 2) + a * c ^ 2 * e ^ 2 + a * c ^ 2 * f ^ 2) - b * d ^ 2 * f ^ 2) + c * d ^ 2 * f ^ 2) - a ^ 2 * b * c * d) + a ^ 2 * c * d * e + a ^ 2 * c * e * f) - b ^ 2 * d * e * f) + c ^ 2 * d * e * f + a ^ 2 * b * d ^ 2) - a ^ 2 * c * e ^ 2) - a ^ 2 * c * f ^ 2) + a ^ 2 * d * e ^ 2 + a ^ 2 * e * f ^ 2 + b ^ 2 * d * f ^ 2) - b ^ 2 * e * f ^ 2) - c ^ 2 * d * f ^ 2) + c ^ 2 * e * f ^ 2 + a ^ 2 * b ^ 2 * c) - a ^ 2 * b ^ 2 * d) - a ^ 2 * d ^ 2 * e) - a ^ 2 * e ^ 2 * f) + b ^ 2 * e ^ 2 * f) - c ^ 2 * e ^ 2 * f
                end, function (arg...,)
                    return Sum(r, (a->begin
                                    (arg * a) ^ 6
                                end))
                end, function (arg...,)
                    return Sum(r, (a->begin
                                    (arg * a) ^ 8
                                end))
                end, function (a, b, c, d, e, f)
                    return (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((-a * b * c * d ^ 6 - a * c * d * e ^ 6) - a * c * e * f ^ 6) + b * d * e * f ^ 6) - c * d * e * f ^ 6) + 3 * a * b * c ^ 2 * d ^ 5 + 3 * a * c * d ^ 2 * e ^ 5 + 3 * a * c * e ^ 2 * f ^ 5) - 3 * b * d * e ^ 2 * f ^ 5) + 3 * c * d * e ^ 2 * f ^ 5) - 5 * a * b * c ^ 3 * d ^ 4) - 5 * a * c * d ^ 3 * e ^ 4) - 5 * a * c * e ^ 3 * f ^ 4) + 5 * b * d * e ^ 3 * f ^ 4) - 5 * c * d * e ^ 3 * f ^ 4) + 5 * a * b * c ^ 4 * d ^ 3 + 5 * a * c * d ^ 4 * e ^ 3 + 5 * a * c * e ^ 4 * f ^ 3) - 5 * b * d * e ^ 4 * f ^ 3) + 5 * c * d * e ^ 4 * f ^ 3) - 3 * a * b * c ^ 5 * d ^ 2) - 3 * a * c * d ^ 5 * e ^ 2) - 3 * a * c * e ^ 5 * f ^ 2) + 3 * b * d * e ^ 5 * f ^ 2) - 3 * c * d * e ^ 5 * f ^ 2) + a * b * c ^ 6 * d + a * c * d ^ 6 * e + a * c * e ^ 6 * f) - b * d * e ^ 6 * f) + c * d * e ^ 6 * f + 3 * a * b ^ 2 * c * d ^ 5) - 3 * a * c ^ 2 * d * e ^ 5) - 3 * a * c ^ 2 * e * f ^ 5) + 3 * b * d ^ 2 * e * f ^ 5) - 3 * c * d ^ 2 * e * f ^ 5) + -15 // 2 * a * b ^ 2 * c ^ 2 * d ^ 4 + 15 // 2 * a * c ^ 2 * d ^ 2 * e ^ 4 + 15 // 2 * a * c ^ 2 * e ^ 2 * f ^ 4 + -15 // 2 * b * d ^ 2 * e ^ 2 * f ^ 4 + 15 // 2 * c * d ^ 2 * e ^ 2 * f ^ 4 + 10 * a * b ^ 2 * c ^ 3 * d ^ 3) - 10 * a * c ^ 2 * d ^ 3 * e ^ 3) - 10 * a * c ^ 2 * e ^ 3 * f ^ 3) + 10 * b * d ^ 2 * e ^ 3 * f ^ 3) - 10 * c * d ^ 2 * e ^ 3 * f ^ 3) + -15 // 2 * a * b ^ 2 * c ^ 4 * d ^ 2 + 15 // 2 * a * c ^ 2 * d ^ 4 * e ^ 2 + 15 // 2 * a * c ^ 2 * e ^ 4 * f ^ 2 + -15 // 2 * b * d ^ 2 * e ^ 4 * f ^ 2 + 15 // 2 * c * d ^ 2 * e ^ 4 * f ^ 2 + 3 * a * b ^ 2 * c ^ 5 * d) - 3 * a * c ^ 2 * d ^ 5 * e) - 3 * a * c ^ 2 * e ^ 5 * f) + 3 * b * d ^ 2 * e ^ 5 * f) - 3 * c * d ^ 2 * e ^ 5 * f) - a * b ^ 2 * c ^ 6) + a * c ^ 2 * e ^ 6 + a * c ^ 2 * f ^ 6) - b * d ^ 2 * f ^ 6) + c * d ^ 2 * f ^ 6) - 5 * a * b ^ 3 * c * d ^ 4) - 5 * a * c ^ 3 * d * e ^ 4) - 5 * a * c ^ 3 * e * f ^ 4) + 5 * b * d ^ 3 * e * f ^ 4) - 5 * c * d ^ 3 * e * f ^ 4) + 10 * a * b ^ 3 * c ^ 2 * d ^ 3 + 10 * a * c ^ 3 * d ^ 2 * e ^ 3 + 10 * a * c ^ 3 * e ^ 2 * f ^ 3) - 10 * b * d ^ 3 * e ^ 2 * f ^ 3) + 10 * c * d ^ 3 * e ^ 2 * f ^ 3) - 10 * a * b ^ 3 * c ^ 3 * d ^ 2) - 10 * a * c ^ 3 * d ^ 3 * e ^ 2) - 10 * a * c ^ 3 * e ^ 3 * f ^ 2) + 10 * b * d ^ 3 * e ^ 3 * f ^ 2) - 10 * c * d ^ 3 * e ^ 3 * f ^ 2) + 5 * a * b ^ 3 * c ^ 4 * d + 5 * a * c ^ 3 * d ^ 4 * e + 5 * a * c ^ 3 * e ^ 4 * f) - 5 * b * d ^ 3 * e ^ 4 * f) + 5 * c * d ^ 3 * e ^ 4 * f + 5 * a * b ^ 4 * c * d ^ 3) - 5 * a * c ^ 4 * d * e ^ 3) - 5 * a * c ^ 4 * e * f ^ 3) + 5 * b * d ^ 4 * e * f ^ 3) - 5 * c * d ^ 4 * e * f ^ 3) + -15 // 2 * a * b ^ 4 * c ^ 2 * d ^ 2 + 15 // 2 * a * c ^ 4 * d ^ 2 * e ^ 2 + 15 // 2 * a * c ^ 4 * e ^ 2 * f ^ 2 + -15 // 2 * b * d ^ 4 * e ^ 2 * f ^ 2 + 15 // 2 * c * d ^ 4 * e ^ 2 * f ^ 2 + 5 * a * b ^ 4 * c ^ 3 * d) - 5 * a * c ^ 4 * d ^ 3 * e) - 5 * a * c ^ 4 * e ^ 3 * f) + 5 * b * d ^ 4 * e ^ 3 * f) - 5 * c * d ^ 4 * e ^ 3 * f) + -5 // 2 * a * b ^ 4 * c ^ 4 + 5 // 2 * a * c ^ 4 * e ^ 4 + 5 // 2 * a * c ^ 4 * f ^ 4 + -5 // 2 * b * d ^ 4 * f ^ 4 + 5 // 2 * c * d ^ 4 * f ^ 4) - 3 * a * b ^ 5 * c * d ^ 2) - 3 * a * c ^ 5 * d * e ^ 2) - 3 * a * c ^ 5 * e * f ^ 2) + 3 * b * d ^ 5 * e * f ^ 2) - 3 * c * d ^ 5 * e * f ^ 2) + 3 * a * b ^ 5 * c ^ 2 * d + 3 * a * c ^ 5 * d ^ 2 * e + 3 * a * c ^ 5 * e ^ 2 * f) - 3 * b * d ^ 5 * e ^ 2 * f) + 3 * c * d ^ 5 * e ^ 2 * f + a * b ^ 6 * c * d) - a * c ^ 6 * d * e) - a * c ^ 6 * e * f) + b * d ^ 6 * e * f) - c * d ^ 6 * e * f) - a * b ^ 6 * c ^ 2) + a * c ^ 6 * e ^ 2 + a * c ^ 6 * f ^ 2) - b * d ^ 6 * f ^ 2) + c * d ^ 6 * f ^ 2) - 3 * a ^ 2 * b * c * d ^ 5) + 3 * a ^ 2 * c * d * e ^ 5 + 3 * a ^ 2 * c * e * f ^ 5) - 3 * b ^ 2 * d * e * f ^ 5) + 3 * c ^ 2 * d * e * f ^ 5 + 15 // 2 * a ^ 2 * b * c ^ 2 * d ^ 4 + -15 // 2 * a ^ 2 * c * d ^ 2 * e ^ 4 + -15 // 2 * a ^ 2 * c * e ^ 2 * f ^ 4 + 15 // 2 * b ^ 2 * d * e ^ 2 * f ^ 4 + -15 // 2 * c ^ 2 * d * e ^ 2 * f ^ 4) - 10 * a ^ 2 * b * c ^ 3 * d ^ 3) + 10 * a ^ 2 * c * d ^ 3 * e ^ 3 + 10 * a ^ 2 * c * e ^ 3 * f ^ 3) - 10 * b ^ 2 * d * e ^ 3 * f ^ 3) + 10 * c ^ 2 * d * e ^ 3 * f ^ 3 + 15 // 2 * a ^ 2 * b * c ^ 4 * d ^ 2 + -15 // 2 * a ^ 2 * c * d ^ 4 * e ^ 2 + -15 // 2 * a ^ 2 * c * e ^ 4 * f ^ 2 + 15 // 2 * b ^ 2 * d * e ^ 4 * f ^ 2 + -15 // 2 * c ^ 2 * d * e ^ 4 * f ^ 2) - 3 * a ^ 2 * b * c ^ 5 * d) + 3 * a ^ 2 * c * d ^ 5 * e + 3 * a ^ 2 * c * e ^ 5 * f) - 3 * b ^ 2 * d * e ^ 5 * f) + 3 * c ^ 2 * d * e ^ 5 * f + a ^ 2 * b * d ^ 6) - a ^ 2 * c * e ^ 6) - a ^ 2 * c * f ^ 6) + a ^ 2 * d * e ^ 6 + a ^ 2 * e * f ^ 6 + b ^ 2 * d * f ^ 6) - b ^ 2 * e * f ^ 6) - c ^ 2 * d * f ^ 6) + c ^ 2 * e * f ^ 6 + 15 // 2 * a ^ 2 * b ^ 2 * c * d ^ 4 + 15 // 2 * a ^ 2 * c ^ 2 * d * e ^ 4 + 15 // 2 * a ^ 2 * c ^ 2 * e * f ^ 4 + -15 // 2 * b ^ 2 * d ^ 2 * e * f ^ 4 + 15 // 2 * c ^ 2 * d ^ 2 * e * f ^ 4) - 15 * a ^ 2 * b ^ 2 * c ^ 2 * d ^ 3) - 15 * a ^ 2 * c ^ 2 * d ^ 2 * e ^ 3) - 15 * a ^ 2 * c ^ 2 * e ^ 2 * f ^ 3) + 15 * b ^ 2 * d ^ 2 * e ^ 2 * f ^ 3) - 15 * c ^ 2 * d ^ 2 * e ^ 2 * f ^ 3) + 15 * a ^ 2 * b ^ 2 * c ^ 3 * d ^ 2 + 15 * a ^ 2 * c ^ 2 * d ^ 3 * e ^ 2 + 15 * a ^ 2 * c ^ 2 * e ^ 3 * f ^ 2) - 15 * b ^ 2 * d ^ 2 * e ^ 3 * f ^ 2) + 15 * c ^ 2 * d ^ 2 * e ^ 3 * f ^ 2 + -15 // 2 * a ^ 2 * b ^ 2 * c ^ 4 * d + -15 // 2 * a ^ 2 * c ^ 2 * d ^ 4 * e + -15 // 2 * a ^ 2 * c ^ 2 * e ^ 4 * f + 15 // 2 * b ^ 2 * d ^ 2 * e ^ 4 * f + -15 // 2 * c ^ 2 * d ^ 2 * e ^ 4 * f + 3 * a ^ 2 * b ^ 2 * c ^ 5) - 3 * a ^ 2 * b ^ 2 * d ^ 5) - 3 * a ^ 2 * d ^ 2 * e ^ 5) - 3 * a ^ 2 * e ^ 2 * f ^ 5) + 3 * b ^ 2 * e ^ 2 * f ^ 5) - 3 * c ^ 2 * e ^ 2 * f ^ 5) - 10 * a ^ 2 * b ^ 3 * c * d ^ 3) + 10 * a ^ 2 * c ^ 3 * d * e ^ 3 + 10 * a ^ 2 * c ^ 3 * e * f ^ 3) - 10 * b ^ 2 * d ^ 3 * e * f ^ 3) + 10 * c ^ 2 * d ^ 3 * e * f ^ 3 + 15 * a ^ 2 * b ^ 3 * c ^ 2 * d ^ 2) - 15 * a ^ 2 * c ^ 3 * d ^ 2 * e ^ 2) - 15 * a ^ 2 * c ^ 3 * e ^ 2 * f ^ 2) + 15 * b ^ 2 * d ^ 3 * e ^ 2 * f ^ 2) - 15 * c ^ 2 * d ^ 3 * e ^ 2 * f ^ 2) - 10 * a ^ 2 * b ^ 3 * c ^ 3 * d) + 10 * a ^ 2 * c ^ 3 * d ^ 3 * e + 10 * a ^ 2 * c ^ 3 * e ^ 3 * f) - 10 * b ^ 2 * d ^ 3 * e ^ 3 * f) + 10 * c ^ 2 * d ^ 3 * e ^ 3 * f + 5 * a ^ 2 * b ^ 3 * d ^ 4) - 5 * a ^ 2 * c ^ 3 * e ^ 4) - 5 * a ^ 2 * c ^ 3 * f ^ 4) + 5 * a ^ 2 * d ^ 3 * e ^ 4 + 5 * a ^ 2 * e ^ 3 * f ^ 4 + 5 * b ^ 2 * d ^ 3 * f ^ 4) - 5 * b ^ 2 * e ^ 3 * f ^ 4) - 5 * c ^ 2 * d ^ 3 * f ^ 4) + 5 * c ^ 2 * e ^ 3 * f ^ 4 + 15 // 2 * a ^ 2 * b ^ 4 * c * d ^ 2 + 15 // 2 * a ^ 2 * c ^ 4 * d * e ^ 2 + 15 // 2 * a ^ 2 * c ^ 4 * e * f ^ 2 + -15 // 2 * b ^ 2 * d ^ 4 * e * f ^ 2 + 15 // 2 * c ^ 2 * d ^ 4 * e * f ^ 2 + -15 // 2 * a ^ 2 * b ^ 4 * c ^ 2 * d + -15 // 2 * a ^ 2 * c ^ 4 * d ^ 2 * e + -15 // 2 * a ^ 2 * c ^ 4 * e ^ 2 * f + 15 // 2 * b ^ 2 * d ^ 4 * e ^ 2 * f + -15 // 2 * c ^ 2 * d ^ 4 * e ^ 2 * f + 5 * a ^ 2 * b ^ 4 * c ^ 3) - 5 * a ^ 2 * b ^ 4 * d ^ 3) - 5 * a ^ 2 * d ^ 4 * e ^ 3) - 5 * a ^ 2 * e ^ 4 * f ^ 3) + 5 * b ^ 2 * e ^ 4 * f ^ 3) - 5 * c ^ 2 * e ^ 4 * f ^ 3) - 3 * a ^ 2 * b ^ 5 * c * d) + 3 * a ^ 2 * c ^ 5 * d * e + 3 * a ^ 2 * c ^ 5 * e * f) - 3 * b ^ 2 * d ^ 5 * e * f) + 3 * c ^ 2 * d ^ 5 * e * f + 3 * a ^ 2 * b ^ 5 * d ^ 2) - 3 * a ^ 2 * c ^ 5 * e ^ 2) - 3 * a ^ 2 * c ^ 5 * f ^ 2) + 3 * a ^ 2 * d ^ 5 * e ^ 2 + 3 * a ^ 2 * e ^ 5 * f ^ 2 + 3 * b ^ 2 * d ^ 5 * f ^ 2) - 3 * b ^ 2 * e ^ 5 * f ^ 2) - 3 * c ^ 2 * d ^ 5 * f ^ 2) + 3 * c ^ 2 * e ^ 5 * f ^ 2 + a ^ 2 * b ^ 6 * c) - a ^ 2 * b ^ 6 * d) - a ^ 2 * d ^ 6 * e) - a ^ 2 * e ^ 6 * f) + b ^ 2 * e ^ 6 * f) - c ^ 2 * e ^ 6 * f) - 5 * a ^ 3 * b * c * d ^ 4) - 5 * a ^ 3 * c * d * e ^ 4) - 5 * a ^ 3 * c * e * f ^ 4) + 5 * b ^ 3 * d * e * f ^ 4) - 5 * c ^ 3 * d * e * f ^ 4) + 10 * a ^ 3 * b * c ^ 2 * d ^ 3 + 10 * a ^ 3 * c * d ^ 2 * e ^ 3 + 10 * a ^ 3 * c * e ^ 2 * f ^ 3) - 10 * b ^ 3 * d * e ^ 2 * f ^ 3) + 10 * c ^ 3 * d * e ^ 2 * f ^ 3) - 10 * a ^ 3 * b * c ^ 3 * d ^ 2) - 10 * a ^ 3 * c * d ^ 3 * e ^ 2) - 10 * a ^ 3 * c * e ^ 3 * f ^ 2) + 10 * b ^ 3 * d * e ^ 3 * f ^ 2) - 10 * c ^ 3 * d * e ^ 3 * f ^ 2) + 5 * a ^ 3 * b * c ^ 4 * d + 5 * a ^ 3 * c * d ^ 4 * e + 5 * a ^ 3 * c * e ^ 4 * f) - 5 * b ^ 3 * d * e ^ 4 * f) + 5 * c ^ 3 * d * e ^ 4 * f + 10 * a ^ 3 * b ^ 2 * c * d ^ 3) - 10 * a ^ 3 * c ^ 2 * d * e ^ 3) - 10 * a ^ 3 * c ^ 2 * e * f ^ 3) + 10 * b ^ 3 * d ^ 2 * e * f ^ 3) - 10 * c ^ 3 * d ^ 2 * e * f ^ 3) - 15 * a ^ 3 * b ^ 2 * c ^ 2 * d ^ 2) + 15 * a ^ 3 * c ^ 2 * d ^ 2 * e ^ 2 + 15 * a ^ 3 * c ^ 2 * e ^ 2 * f ^ 2) - 15 * b ^ 3 * d ^ 2 * e ^ 2 * f ^ 2) + 15 * c ^ 3 * d ^ 2 * e ^ 2 * f ^ 2 + 10 * a ^ 3 * b ^ 2 * c ^ 3 * d) - 10 * a ^ 3 * c ^ 2 * d ^ 3 * e) - 10 * a ^ 3 * c ^ 2 * e ^ 3 * f) + 10 * b ^ 3 * d ^ 2 * e ^ 3 * f) - 10 * c ^ 3 * d ^ 2 * e ^ 3 * f) - 5 * a ^ 3 * b ^ 2 * c ^ 4) + 5 * a ^ 3 * c ^ 2 * e ^ 4 + 5 * a ^ 3 * c ^ 2 * f ^ 4) - 5 * b ^ 3 * d ^ 2 * f ^ 4) + 5 * c ^ 3 * d ^ 2 * f ^ 4) - 10 * a ^ 3 * b ^ 3 * c * d ^ 2) - 10 * a ^ 3 * c ^ 3 * d * e ^ 2) - 10 * a ^ 3 * c ^ 3 * e * f ^ 2) + 10 * b ^ 3 * d ^ 3 * e * f ^ 2) - 10 * c ^ 3 * d ^ 3 * e * f ^ 2) + 10 * a ^ 3 * b ^ 3 * c ^ 2 * d + 10 * a ^ 3 * c ^ 3 * d ^ 2 * e + 10 * a ^ 3 * c ^ 3 * e ^ 2 * f) - 10 * b ^ 3 * d ^ 3 * e ^ 2 * f) + 10 * c ^ 3 * d ^ 3 * e ^ 2 * f + 5 * a ^ 3 * b ^ 4 * c * d) - 5 * a ^ 3 * c ^ 4 * d * e) - 5 * a ^ 3 * c ^ 4 * e * f) + 5 * b ^ 3 * d ^ 4 * e * f) - 5 * c ^ 3 * d ^ 4 * e * f) - 5 * a ^ 3 * b ^ 4 * c ^ 2) + 5 * a ^ 3 * c ^ 4 * e ^ 2 + 5 * a ^ 3 * c ^ 4 * f ^ 2) - 5 * b ^ 3 * d ^ 4 * f ^ 2) + 5 * c ^ 3 * d ^ 4 * f ^ 2) - 5 * a ^ 4 * b * c * d ^ 3) + 5 * a ^ 4 * c * d * e ^ 3 + 5 * a ^ 4 * c * e * f ^ 3) - 5 * b ^ 4 * d * e * f ^ 3) + 5 * c ^ 4 * d * e * f ^ 3 + 15 // 2 * a ^ 4 * b * c ^ 2 * d ^ 2 + -15 // 2 * a ^ 4 * c * d ^ 2 * e ^ 2 + -15 // 2 * a ^ 4 * c * e ^ 2 * f ^ 2 + 15 // 2 * b ^ 4 * d * e ^ 2 * f ^ 2 + -15 // 2 * c ^ 4 * d * e ^ 2 * f ^ 2) - 5 * a ^ 4 * b * c ^ 3 * d) + 5 * a ^ 4 * c * d ^ 3 * e + 5 * a ^ 4 * c * e ^ 3 * f) - 5 * b ^ 4 * d * e ^ 3 * f) + 5 * c ^ 4 * d * e ^ 3 * f + 5 // 2 * a ^ 4 * b * d ^ 4 + -5 // 2 * a ^ 4 * c * e ^ 4 + -5 // 2 * a ^ 4 * c * f ^ 4 + 5 // 2 * a ^ 4 * d * e ^ 4 + 5 // 2 * a ^ 4 * e * f ^ 4 + 5 // 2 * b ^ 4 * d * f ^ 4 + -5 // 2 * b ^ 4 * e * f ^ 4 + -5 // 2 * c ^ 4 * d * f ^ 4 + 5 // 2 * c ^ 4 * e * f ^ 4 + 15 // 2 * a ^ 4 * b ^ 2 * c * d ^ 2 + 15 // 2 * a ^ 4 * c ^ 2 * d * e ^ 2 + 15 // 2 * a ^ 4 * c ^ 2 * e * f ^ 2 + -15 // 2 * b ^ 4 * d ^ 2 * e * f ^ 2 + 15 // 2 * c ^ 4 * d ^ 2 * e * f ^ 2 + -15 // 2 * a ^ 4 * b ^ 2 * c ^ 2 * d + -15 // 2 * a ^ 4 * c ^ 2 * d ^ 2 * e + -15 // 2 * a ^ 4 * c ^ 2 * e ^ 2 * f + 15 // 2 * b ^ 4 * d ^ 2 * e ^ 2 * f + -15 // 2 * c ^ 4 * d ^ 2 * e ^ 2 * f + 5 * a ^ 4 * b ^ 2 * c ^ 3) - 5 * a ^ 4 * b ^ 2 * d ^ 3) - 5 * a ^ 4 * d ^ 2 * e ^ 3) - 5 * a ^ 4 * e ^ 2 * f ^ 3) + 5 * b ^ 4 * e ^ 2 * f ^ 3) - 5 * c ^ 4 * e ^ 2 * f ^ 3) - 5 * a ^ 4 * b ^ 3 * c * d) + 5 * a ^ 4 * c ^ 3 * d * e + 5 * a ^ 4 * c ^ 3 * e * f) - 5 * b ^ 4 * d ^ 3 * e * f) + 5 * c ^ 4 * d ^ 3 * e * f + 5 * a ^ 4 * b ^ 3 * d ^ 2) - 5 * a ^ 4 * c ^ 3 * e ^ 2) - 5 * a ^ 4 * c ^ 3 * f ^ 2) + 5 * a ^ 4 * d ^ 3 * e ^ 2 + 5 * a ^ 4 * e ^ 3 * f ^ 2 + 5 * b ^ 4 * d ^ 3 * f ^ 2) - 5 * b ^ 4 * e ^ 3 * f ^ 2) - 5 * c ^ 4 * d ^ 3 * f ^ 2) + 5 * c ^ 4 * e ^ 3 * f ^ 2 + 5 // 2 * a ^ 4 * b ^ 4 * c + -5 // 2 * a ^ 4 * b ^ 4 * d + -5 // 2 * a ^ 4 * d ^ 4 * e + -5 // 2 * a ^ 4 * e ^ 4 * f + 5 // 2 * b ^ 4 * e ^ 4 * f + -5 // 2 * c ^ 4 * e ^ 4 * f) - 3 * a ^ 5 * b * c * d ^ 2) - 3 * a ^ 5 * c * d * e ^ 2) - 3 * a ^ 5 * c * e * f ^ 2) + 3 * b ^ 5 * d * e * f ^ 2) - 3 * c ^ 5 * d * e * f ^ 2) + 3 * a ^ 5 * b * c ^ 2 * d + 3 * a ^ 5 * c * d ^ 2 * e + 3 * a ^ 5 * c * e ^ 2 * f) - 3 * b ^ 5 * d * e ^ 2 * f) + 3 * c ^ 5 * d * e ^ 2 * f + 3 * a ^ 5 * b ^ 2 * c * d) - 3 * a ^ 5 * c ^ 2 * d * e) - 3 * a ^ 5 * c ^ 2 * e * f) + 3 * b ^ 5 * d ^ 2 * e * f) - 3 * c ^ 5 * d ^ 2 * e * f) - 3 * a ^ 5 * b ^ 2 * c ^ 2) + 3 * a ^ 5 * c ^ 2 * e ^ 2 + 3 * a ^ 5 * c ^ 2 * f ^ 2) - 3 * b ^ 5 * d ^ 2 * f ^ 2) + 3 * c ^ 5 * d ^ 2 * f ^ 2) - a ^ 6 * b * c * d) + a ^ 6 * c * d * e + a ^ 6 * c * e * f) - b ^ 6 * d * e * f) + c ^ 6 * d * e * f + a ^ 6 * b * d ^ 2) - a ^ 6 * c * e ^ 2) - a ^ 6 * c * f ^ 2) + a ^ 6 * d * e ^ 2 + a ^ 6 * e * f ^ 2 + b ^ 6 * d * f ^ 2) - b ^ 6 * e * f ^ 2) - c ^ 6 * d * f ^ 2) + c ^ 6 * e * f ^ 2 + a ^ 6 * b ^ 2 * c) - a ^ 6 * b ^ 2 * d) - a ^ 6 * d ^ 2 * e) - a ^ 6 * e ^ 2 * f) + b ^ 6 * e ^ 2 * f) - c ^ 6 * e ^ 2 * f
                end, function (arg...,)
                    return Sum(r, (a->begin
                                    (arg * a) ^ 12
                                end))
                end]
    end)
chevieset(:E6, :UnipotentClasses, function (p,)
        local uc, Z, c
        if p == 0
            p = 1
        end
        Z = (n->begin
                    ComplexReflectionGroup(n, 1, 1)
                end)
        uc = Dict{Symbol, Any}(:orderPicture => Concatenation("\tE_6\n", "\t |\n", "      E_6(a_1)\n", "\t |\n", "\tD_5\n", "\t |\n", "     E_6(a_3)\n", "     /   |\n", "  A_5    |\n", "   |   D_5(a_1)\n", "   |   /      \\\n", "A_4+A_1        \\\n", "   |           D_4\n", "  A_4         /\n", "     \\       /\n", "      D_4(a_1)\n", "\t |\n", "      A_3+A_1\n", "     /       \\\n", "  A_3     2A_2+A_1\n", "   |     /    |\n", "  A_2+2A_1   2A_2\n", "     \\       /\n", "      A_2+A_1\n", "\t |\n", "\tA_2\n", "\t |\n", "       3A_1\n", "\t |\n", "       2A_1\n", "\t |\n", "\tA_1\n", "\t |\n", "\t 1\n"), :classes => [Dict{Symbol, Any}(:name => "E_6", :succ => [], :dynkin => [2, 2, 2, 2, 2, 2], :Au => Z(3 * gcd(p, 2)), :balacarter => 1:6), Dict{Symbol, Any}(:name => "E_6(a_1)", :succ => ["E6"], :dynkin => [2, 2, 2, 0, 2, 2], :Au => Z(gcd(3, p ^ 2 - 1)), :balacarter => [1, 2, 3, -4, 5, 6]), Dict{Symbol, Any}(:name => "D_5", :succ => ["E6(a1)"], :dynkin => [2, 2, 0, 2, 0, 2], :Au => Z(gcd(2, p)), :balacarter => 1:5, :red => Torus(1)), Dict{Symbol, Any}(:name => "E_6(a_3)", :mizuno => "A_5{+}A_1", :succ => ["D5"], :dynkin => [2, 0, 0, 2, 0, 2], :Au => Z(gcd(3, p ^ 2 - 1) * 2), :balacarter => [1, -2, -3, 4, -5, 6]), Dict{Symbol, Any}(:name => "A_5", :succ => ["E6(a3)"], :dynkin => [2, 1, 1, 0, 1, 2], :Au => Z(gcd(3, p ^ 2 - 1)), :balacarter => [1, 3, 4, 5, 6], :red => Z(2)), Dict{Symbol, Any}(:name => "D_5(a_1)", :succ => ["E6(a3)"], :dynkin => [1, 2, 1, 0, 1, 1], :balacarter => [1, 2, 3, -4, 5], :red => Torus(1)), Dict{Symbol, Any}(:name => "A_4{+}A_1", :succ => ["A5", "D5(a1)"], :dynkin => [1, 1, 1, 0, 1, 1], :balacarter => [1, 2, 3, 4, 6], :red => Torus(1)), Dict{Symbol, Any}(:name => "D_4", :succ => ["D5(a1)"], :dynkin => [0, 2, 0, 2, 0, 0], :Au => Z(gcd(p, 2)), :balacarter => [2, 3, 4, 5], :red => CoxeterGroup("A", 2)), Dict{Symbol, Any}(:name => "A_4", :succ => ["A4+A1"], :dynkin => [2, 2, 0, 0, 0, 2], :balacarter => [1, 2, 3, 4], :red => Z(2) * Torus(1)), Dict{Symbol, Any}(:name => "D_4(a_1)", :succ => ["D4", "A4"], :dynkin => [0, 0, 0, 2, 0, 0], :Au => CoxeterGroup("A", 2), :balacarter => [2, 3, -4, 5], :red => Torus(2), :AuAction => ExtendedReflectionGroup(Torus(2), (CoxeterGroup("A", 2))[:matgens])), Dict{Symbol, Any}(:name => "A_3{+}A_1", :succ => ["D4(a1)"], :dynkin => [0, 1, 1, 0, 1, 0], :balacarter => [1, 2, 4, 5], :red => Z(2) * Torus(1)), Dict{Symbol, Any}(:name => "A_3", :succ => ["A3+A1"], :dynkin => [1, 2, 0, 0, 0, 1], :balacarter => [1, 3, 4], :red => CoxeterGroup("B", 2) * Torus(1)), Dict{Symbol, Any}(:name => "2A_2{+}A_1", :succ => ["A3+A1"], :dynkin => [1, 0, 0, 1, 0, 1], :Au => Z(gcd(3, p ^ 2 - 1)), :balacarter => [1, 2, 3, 5, 6], :red => Z(2)), Dict{Symbol, Any}(:name => "2A_2", :succ => ["2A2+A1"], :dynkin => [2, 0, 0, 0, 0, 2], :Au => Z(gcd(3, p ^ 2 - 1)), :balacarter => [1, 3, 5, 6], :red => CoxeterGroup("G", 2)), Dict{Symbol, Any}(:name => "A_2{+}2A_1", :succ => ["A3", "2A2+A1"], :dynkin => [0, 0, 1, 0, 1, 0], :balacarter => [1, 2, 3, 5], :red => Z(2) * Torus(1)), Dict{Symbol, Any}(:name => "A_2{+}A_1", :succ => ["2A2", "A2+2A1"], :dynkin => [1, 1, 0, 0, 0, 1], :balacarter => [1, 2, 3], :red => CoxeterGroup("A", 2) * Torus(1)), Dict{Symbol, Any}(:name => "A_2", :succ => ["A2+A1"], :dynkin => [0, 2, 0, 0, 0, 0], :Au => Z(2), :balacarter => [1, 3], :red => CoxeterGroup("A", 2, "A", 2), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 2, "A", 2), #= none:82 =# @perm_str("(1,3)(2,4)"))), Dict{Symbol, Any}(:name => "3A_1", :succ => ["A2"], :dynkin => [0, 0, 0, 1, 0, 0], :balacarter => [1, 2, 5], :red => CoxeterGroup("A", 2, "A", 1)), Dict{Symbol, Any}(:name => "2A_1", :succ => ["3A1"], :dynkin => [1, 0, 0, 0, 0, 1], :balacarter => [1, 2], :red => CoxeterGroup("B", 3) * Torus(1)), Dict{Symbol, Any}(:name => "A_1", :succ => ["2A1"], :dynkin => [0, 1, 0, 0, 0, 0], :balacarter => [1], :red => CoxeterGroup("A", 5)), Dict{Symbol, Any}(:name => "1", :succ => ["A1"], :dynkin => [0, 0, 0, 0, 0, 0], :balacarter => [], :red => CoxeterGroup("E", 6))], :springerSeries => [Dict{Symbol, Any}(:levi => [], :relgroup => CoxeterGroup("E", 6), :Z => [1], :locsys => [[1, 1], [21, 1], [13, 1], [2, 1], [20, 1], [10, 1], [4, 4], [17, 1], [5, 1], [18, 1], [3, 1], [19, 1], [8, 1], [14, 1], [4, 1], [17, 2], [11, 1], [10, 3], [10, 2], [7, 1], [15, 1], [6, 1], [16, 1], [9, 1], [12, 1]]), Dict{Symbol, Any}(:levi => [1, 3, 5, 6], :relgroup => CoxeterGroup("G", 2), :Z => [E(3)], :locsys => [[1, 2], [14, 2], [13, 2], [2, 2], [4, 3], [5, 2]]), Dict{Symbol, Any}(:levi => [1, 3, 5, 6], :relgroup => CoxeterGroup("G", 2), :Z => [E(3, 2)], :locsys => [[1, 3], [14, 3], [13, 3], [2, 3], [4, 5], [5, 3]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:6, :Z => [E(3)], :locsys => [[4, 2]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:6, :Z => [E(3, 2)], :locsys => [[4, 6]])])
        if p == 2
            push!(uc[:springerSeries], Dict{Symbol, Any}(:levi => [2, 3, 4, 5], :relgroup => CoxeterGroup("A", 2), :Z => [1], :locsys => [[8, 1], [3, 1], [1, 4]]))
            (((uc[:springerSeries])[1])[:locsys])[[11, 13]] = [[3, 2], [8, 2]]
            (((uc[:springerSeries])[2])[:locsys])[1] = [1, 3]
            (((uc[:springerSeries])[3])[:locsys])[1] = [1, 5]
            for c = [2, 6]
                push!(uc[:springerSeries], Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:6, :Z => [E(3, 1 - c)], :locsys => [[1, c]]))
            end
        elseif p == 3
            uc[:springerSeries] = (uc[:springerSeries])[[1]]
            ((((uc[:springerSeries])[1])[:locsys])[[7, 15]])[2] = [1, 2]
            for c = [2, 3]
                push!(uc[:springerSeries], Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:6, :Z => [1], :locsys => [[1, c]]))
            end
        end
        uc[:orderClasses] = map((c->begin
                        map((n->begin
                                    PositionProperty(uc[:classes], (c->begin
                                                (UnipotentClassOps[:Name])(c) == n
                                            end))
                                end), c[:succ])
                    end), uc[:classes])
        for c = uc[:classes]
            delete!(c, :succ)
            if !(haskey(c, :red))
                c[:red] = Z(1)
            end
            if !(haskey(c, :Au))
                c[:Au] = Z(1)
            end
            if !(haskey(c, :AuAction))
                c[:AuAction] = ExtendedReflectionGroup(c[:red], map((x->begin
                                    IdentityMat((c[:red])[:rank])
                                end), (c[:Au])[:generators]))
            end
        end
        return uc
    end)
chevieset(:E6, :KLeftCellRepresentatives, [Dict{Symbol, Any}(:character => [1], :reps => [], :duflo => [1, 2, 3, 4, 5, 6]), Dict{Symbol, Any}(:character => [2], :reps => [], :duflo => [42, 38, 41, 40, 39, 37]), Dict{Symbol, Any}(:character => [4], :reps => [], :duflo => [1, 2, 3, 4, 11, 42]), Dict{Symbol, Any}(:character => [5], :reps => [], :duflo => [23, 53, 42, 41, 40, 39]), Dict{Symbol, Any}(:character => [11], :reps => [], :duflo => [23, 3, 2, 4, 5, 67]), Dict{Symbol, Any}(:character => [12], :reps => [], :duflo => [36, 39, 38, 40, 41, 42]), Dict{Symbol, Any}(:character => [13], :reps => [], :duflo => [5, 2, 32, 63, 1, 62]), Dict{Symbol, Any}(:character => [14], :reps => [], :duflo => [34, 38, 39, 13, 60, 42]), Dict{Symbol, Any}(:character => [15, 7], :reps => [[23, 56, 57, 25, 10, 41]], :duflo => [1, 2, 3, 16, 42, 41]), Dict{Symbol, Any}(:character => [16, 8], :reps => [[38, 34, 45, 41, 42, 62]], :duflo => [1, 65, 21, 42, 41, 40]), Dict{Symbol, Any}(:character => [15, 9], :reps => [[18, 3, 2, 16, 47, 60], [33, 2, 3, 4, 64, 6]], :duflo => [18, 3, 2, 16, 67, 24]), Dict{Symbol, Any}(:character => [16, 10], :reps => [[53, 54, 32, 42, 55, 40], [32, 54, 57, 38, 40, 24]], :duflo => [41, 38, 34, 57, 37, 60]), Dict{Symbol, Any}(:character => [20], :reps => [], :duflo => [3, 6, 1, 24, 72, 2]), Dict{Symbol, Any}(:character => [21], :reps => [], :duflo => [37, 42, 33, 41, 40, 38]), Dict{Symbol, Any}(:character => [22], :reps => [], :duflo => [1, 11, 28, 56, 14, 46]), Dict{Symbol, Any}(:character => [23], :reps => [], :duflo => [1, 42, 43, 32, 71, 38]), Dict{Symbol, Any}(:character => [24], :reps => [], :duflo => [1, 41, 24, 40, 38, 20]), Dict{Symbol, Any}(:character => [25], :reps => [], :duflo => [50, 25, 22, 4, 66, 51]), Dict{Symbol, Any}(:character => [18, 17, 3], :reps => [[50, 30, 31, 52, 49, 54], [17, 23, 5, 70, 3, 20], [32, 55, 53, 52, 20, 18], [32, 55, 53, 52, 33, 54], [5, 2, 6, 63, 1, 3]], :duflo => [21, 19, 17, 72, 20, 18]), Dict{Symbol, Any}(:character => [19, 18, 17], :reps => [[56, 57, 54, 35, 40, 55], [28, 62, 45, 47, 23, 19], [9, 25, 22, 55, 66, 8], [1, 32, 19, 65, 56, 8], [45, 62, 56, 36, 55, 59]], :duflo => [20, 26, 9, 40, 70, 23]), Dict{Symbol, Any}(:character => [19, 19, 18, 6], :reps => [[33, 51, 50, 42, 28, 40], [59, 15, 33, 41, 40, 61], [69, 44, 35, 51, 42, 25], [50, 51, 59, 35, 40, 61]], :duflo => [33, 8, 9, 40, 55, 42])])
chevieset(:E7, :ReflectionDegrees, [2, 6, 8, 10, 12, 14, 18])
chevieset(:E7, :Size, 2903040)
chevieset(:E7, :GeneratingRoots, [[1, -1, -1, -1, -1, -1, -1, 1] // 2, [1, 1, 0, 0, 0, 0, 0, 0], [-1, 1, 0, 0, 0, 0, 0, 0], [0, -1, 1, 0, 0, 0, 0, 0], [0, 0, -1, 1, 0, 0, 0, 0], [0, 0, 0, -1, 1, 0, 0, 0], [0, 0, 0, 0, -1, 1, 0, 0]])
chevieset(:E7, :WeightInfo, Dict{Symbol, Any}(:minusculeWeights => [7], :decompositions => [[1]], :moduli => [2]))
chevieset(:E7, :NrConjugacyClasses, 60)
chevieset(:E7, :WordsClassRepresentatives, map((x->begin
                Replace(x, [0], [7, 6, 5, 4, 3, 2, 1])
            end), [[], [7, 6, 7, 5, 6, 7, 4, 5, 6, 7, 2, 4, 5, 6, 7, 3, 4, 5, 6, 7, 2, 4, 5, 6, 3, 4, 5, 2, 4, 3], [5, 4, 5, 2, 4, 5, 3, 4, 5, 2, 4, 3], [7, 5], [7, 5, 2, 3], [7, 6], [6, 5, 6, 4, 5, 6, 2, 4, 3, 4, 5, 6, 2, 4, 5, 3, 1, 3, 4, 5, 2, 4, 3, 1], [7, 6, 4, 2], [5, 4, 5, 2, 4, 3], [7, 5, 6, 2], [7, 5, 4, 5, 2, 4, 5, 3, 4, 5, 2, 4, 3, 1], [7, 6, 7, 5, 6, 4, 5, 2, 4, 5, 3, 4, 5, 2, 4, 3], [7, 5, 6, 3], [7, 6, 5, 4], [7, 6, 5, 4, 5, 2, 4, 5, 3, 4, 5, 2, 4, 3], [5, 4, 2, 3], [1, 2, 3, 1, 5, 4, 6, 5, 4, 2, 3, 4], [7, 6, 4, 1], [7, 6, 7, 5, 6, 4, 5, 2, 4, 3], [1, 2, 3, 4, 2, 3, 4, 6, 5, 4, 2, 3, 4, 5], [7, 5, 2, 6, 4, 1], [7, 6, 5, 4, 3, 1], [7, 5, 2, 3, 4, 1], [3, 4, 2, 3, 4, 7, 6, 5], [6, 5, 4, 5, 2, 4, 3, 1], [7, 6, 5, 4, 2, 3], [7, 5, 6, 2, 3, 1], [7, 5, 4, 5, 2, 4, 3, 1], [6, 4, 1, 5, 3, 2], [7, 6, 4, 2, 3, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [7], [7, 5, 2], [7, 5, 4, 5, 2, 4, 5, 3, 4, 5, 2, 4, 3], [7, 5, 3], [4, 2, 3, 5, 4, 2, 3, 4, 6, 5, 4, 2, 3, 4, 5, 7, 6, 5, 4, 2, 3, 4, 5, 6, 0], [0, 0, 0], [3, 4, 2, 3, 5, 4, 2, 3, 4, 6, 5, 4, 2, 3, 4, 5, 0], [5, 4, 2, 6, 5, 4, 2, 3, 4, 7, 6, 5, 4, 2, 3, 1, 4, 3, 5, 0, 0], [6, 5, 4, 5, 2, 4, 5, 3, 4, 5, 2, 4, 3], [7, 5, 6], [7, 5, 4, 5, 2, 4, 3], [7, 5, 6, 2, 3], [7, 6, 5, 4, 5, 2, 4, 5, 3, 4, 5, 2, 4, 3, 1], [7, 6, 4], [7, 5, 2, 3, 1], [7, 6, 5, 6, 4, 5, 6, 2, 4, 3, 4, 5, 6, 2, 4, 5, 3, 1, 3, 4, 5, 2, 4, 3, 1], [7, 5, 4, 2, 3], [7, 6, 4, 2, 1], [7, 5, 2, 6, 4], [7, 5, 3, 6, 4], [4, 2, 0], [6, 5, 4, 2, 3], [4, 2, 5, 4, 2, 3, 6, 5, 4, 2, 0], [0], [7, 5, 6, 4, 1], [3, 4, 2, 3, 4, 6, 5], [7, 5, 6, 3, 1], [6, 5, 4, 2, 0], [2, 4, 2, 3, 5, 4, 2, 7, 6, 5, 4, 3, 1]]))
chevieset(:E7, :ClassNames, ["A_0", "6A_1", "4A_1''", "2A_1", "4A_1'", "A_2", "3A_2", "2A_2", "D_4(a_1)", "A_3+A_1'", "A_3+3A_1", "D_4(a_1)+2A_1", "A_3+A_1''", "A_4", "D_4+2A_1", "D_4", "E_6(a_2)", "A_2+2A_1", "D_6(a_2)", "A_5+A_1''", "A_5+A_1'", "A_6", "D_5+A_1", "D_6(a_1)", "E_6(a_1)", "D_6", "A_3+A_2+A_1", "D_5(a_1)+A_1", "E_6", "A_4+A_2", "7A_1", "A_1", "3A_1'", "5A_1", "3A_1''", "D_4+3A_1", "E_7(a_4)", "D_6(a_2)+A_1", "2A_3+A_1", "A_3+2A_1''", "A_3", "D_4(a_1)+A_1", "A_3+2A_1'", "D_6+A_1", "A_2+A_1", "A_2+3A_1", "A_5+A_2", "D_4+A_1", "2A_2+A_1", "A_5'", "A_5''", "E_7(a_1)", "D_5", "A_7", "E_7", "A_4+A_1", "D_5(a_1)", "A_3+A_2", "E_7(a_2)", "E_7(a_3)"])
chevieset(:E7, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:E7, :WordsClassRepresentatives), :classnames => chevieget(:E7, :ClassNames), :classparams => chevieget(:E7, :ClassNames), :orders => [1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 8, 9, 10, 12, 12, 12, 15, 2, 2, 2, 2, 2, 6, 6, 6, 4, 4, 4, 4, 4, 10, 6, 6, 6, 6, 6, 6, 6, 14, 8, 8, 18, 10, 12, 12, 12, 30], :classes => [1, 63, 315, 945, 3780, 672, 2240, 13440, 3780, 7560, 7560, 11340, 45360, 48384, 10080, 10080, 20160, 30240, 40320, 40320, 120960, 207360, 90720, 90720, 161280, 145152, 60480, 60480, 120960, 96768, 1, 63, 315, 945, 3780, 672, 2240, 13440, 3780, 7560, 7560, 11340, 45360, 48384, 10080, 10080, 20160, 30240, 40320, 40320, 120960, 207360, 90720, 90720, 161280, 145152, 60480, 60480, 120960, 96768]))
chevieset(:E7, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3]], [1:3, [1, 2, 5], [1, 3, 4], [2, 5, 7]], [1:4, [1, 2, 3, 5], [1, 2, 4, 5], [1, 2, 5, 7], [1, 3, 5, 6], [2, 3, 4, 5], [2, 4, 5, 7]], [1:5, [1, 2, 3, 4, 6], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 4, 5, 7], [1, 3, 4, 5, 6], [1, 3, 4, 6, 7], [2, 3, 4, 5, 7], [2, 4, 5, 6, 7]], [1:6, [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 6, 7], [1, 2, 3, 5, 6, 7], [1, 2, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7]], [1:7]]
        return t[s + 1]
    end)
chevieset(:E7, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 63], [7, 46], [7, 1], [15, 28], [15, 7], [21, 6], [21, 33], [21, 36], [21, 3], [27, 2], [27, 37], [35, 22], [35, 13], [35, 4], [35, 31], [56, 30], [56, 3], [70, 18], [70, 9], [84, 12], [84, 15], [105, 26], [105, 5], [105, 6], [105, 21], [105, 12], [105, 15], [120, 4], [120, 25], [168, 6], [168, 21], [189, 10], [189, 17], [189, 22], [189, 5], [189, 20], [189, 7], [210, 6], [210, 21], [210, 10], [210, 13], [216, 16], [216, 9], [280, 18], [280, 9], [280, 8], [280, 17], [315, 16], [315, 7], [336, 14], [336, 11], [378, 14], [378, 9], [405, 8], [405, 15], [420, 10], [420, 13], [512, 12], [512, 11]], :frame => ["1_a", "1_a'", "7_a", "7_a'", "15_a", "15_a'", "21_a", "21_a'", "21_b", "21_b'", "27_a", "27_a'", "35_a", "35_a'", "35_b", "35_b'", "56_a", "56_a'", "70_a", "70_a'", "84_a", "84_a'", "105_a", "105_a'", "105_b", "105_b'", "105_c", "105_c'", "120_a", "120_a'", "168_a", "168_a'", "189_a", "189_a'", "189_b", "189_b'", "189_c", "189_c'", "210_a", "210_a'", "210_b", "210_b'", "216_a", "216_a'", "280_a", "280_a'", "280_b", "280_b'", "315_a", "315_a'", "336_a", "336_a'", "378_a", "378_a'", "405_a", "405_a'", "420_a", "420_a'", "512_a", "512_a'"], :opdam => #= none:24 =# @perm_str("(59,60)"), :extRefl => [1, 4, 7, 14, 13, 8, 3, 2])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:E7, :cyclestructure, [[], [62], [[60], [51]], [50], [[60], [59]], [nothing, 32], [nothing, 42], [nothing, 40], [nothing, nothing, 30], [7, nothing, 25], [13, nothing, 25], [2, nothing, 30], [11, nothing, 25], [nothing, nothing, nothing, 24], [14, nothing, nothing, nothing, 16], [12, nothing, nothing, nothing, 16], [nothing, 2, nothing, nothing, 20], [14, 8, nothing, nothing, 12], [2, nothing, nothing, nothing, 20], [[3, 2, nothing, nothing, 19], [nothing, 6, nothing, nothing, 17]], [[3, 2, nothing, nothing, 19], [2, 2, nothing, nothing, 19]], [nothing, nothing, nothing, nothing, nothing, 18], [3, nothing, nothing, nothing, nothing, nothing, 15], [nothing, nothing, 1, nothing, nothing, nothing, 15], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, 14], [2, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 12], [1, 4, 7, nothing, 2, nothing, nothing, nothing, nothing, nothing, 6], [1, nothing, 7, nothing, 4, nothing, nothing, nothing, nothing, nothing, 6], [nothing, 2, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 10], [nothing, 2, nothing, 6, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 6], [63], [33], [51], [61], [59], [15, nothing, nothing, nothing, 16], [nothing, nothing, nothing, nothing, 21], [3, nothing, nothing, nothing, 20], [3, nothing, 30], [[12, nothing, 25], [7, nothing, 25]], [6, nothing, 25], [1, nothing, 30], [[12, nothing, 25], [11, nothing, 25]], [3, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 12], [9, 16, nothing, nothing, 8], [15, 8, nothing, nothing, 12], [nothing, 8, nothing, nothing, 17], [13, nothing, nothing, nothing, 16], [3, 20, nothing, nothing, 10], [nothing, 6, nothing, nothing, 17], [2, 2, nothing, nothing, 19], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 9], [2, nothing, nothing, nothing, nothing, nothing, 15], [1, nothing, 1, nothing, nothing, nothing, 15], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 7], [3, nothing, nothing, 12, nothing, nothing, nothing, nothing, 6], [nothing, nothing, 7, nothing, 4, nothing, nothing, nothing, nothing, nothing, 6], [nothing, 4, 7, nothing, 2, nothing, nothing, nothing, nothing, nothing, 6], [nothing, nothing, nothing, nothing, 1, nothing, nothing, nothing, nothing, nothing, 10], [nothing, nothing, nothing, nothing, 1, nothing, nothing, nothing, 3, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 3]])
chevieset(:E7, :generators, [#= none:4 =# @perm_str("(1,64)(3,8)(10,14)(15,20)(17,21)(22,26)(24,27)(28,32)(29,33)(31,34)(35,38)(36,39)(40,43)(41,44)(45,48)(49,52)(62,63)(66,71)(73,77)(78,83)(80,84)(85,89)(87,90)(91,95)(92,96)(94,97)(98,101)(99,102)(103,106)(104,107)(108,111)(112,115)(125,126)"), #= none:4 =# @perm_str("(2,65)(4,9)(10,15)(11,16)(14,20)(17,22)(18,23)(21,26)(24,29)(25,30)(27,33)(31,36)(34,39)(50,53)(54,56)(57,58)(59,60)(67,72)(73,78)(74,79)(77,83)(80,85)(81,86)(84,89)(87,92)(88,93)(90,96)(94,99)(97,102)(113,116)(117,119)(120,121)(122,123)"), #= none:4 =# @perm_str("(1,8)(3,66)(4,10)(9,15)(11,17)(16,22)(18,24)(23,29)(25,31)(30,36)(32,37)(38,42)(43,46)(44,47)(48,51)(52,55)(61,62)(64,71)(67,73)(72,78)(74,80)(79,85)(81,87)(86,92)(88,94)(93,99)(95,100)(101,105)(106,109)(107,110)(111,114)(115,118)(124,125)"), #= none:4 =# @perm_str("(2,9)(3,10)(4,67)(5,11)(8,14)(12,18)(19,25)(22,28)(26,32)(29,35)(33,38)(36,41)(39,44)(46,50)(51,54)(55,57)(60,61)(65,72)(66,73)(68,74)(71,77)(75,81)(82,88)(85,91)(89,95)(92,98)(96,101)(99,104)(102,107)(109,113)(114,117)(118,120)(123,124)"), #= none:4 =# @perm_str("(4,11)(5,68)(6,12)(9,16)(10,17)(13,19)(14,21)(15,22)(20,26)(35,40)(38,43)(41,45)(42,46)(44,48)(47,51)(57,59)(58,60)(67,74)(69,75)(72,79)(73,80)(76,82)(77,84)(78,85)(83,89)(98,103)(101,106)(104,108)(105,109)(107,111)(110,114)(120,122)(121,123)"), #= none:5 =# @perm_str("(5,12)(6,69)(7,13)(11,18)(16,23)(17,24)(21,27)(22,29)(26,33)(28,35)(32,38)(37,42)(45,49)(48,52)(51,55)(54,57)(56,58)(68,75)(70,76)(74,81)(79,86)(80,87)(84,90)(85,92)(89,96)(91,98)(95,101)(100,105)(108,112)(111,115)(114,118)(117,120)(119,121)"), #= none:5 =# @perm_str("(6,13)(7,70)(12,19)(18,25)(23,30)(24,31)(27,34)(29,36)(33,39)(35,41)(38,44)(40,45)(42,47)(43,48)(46,51)(50,54)(53,56)(69,76)(75,82)(81,88)(86,93)(87,94)(90,97)(92,99)(96,102)(98,104)(101,107)(103,108)(105,110)(106,111)(109,114)(113,117)(116,119)")])
chevieset(:E7, :CartanMat, [[2, 0, -1, 0, 0, 0, 0], [0, 2, 0, -1, 0, 0, 0], [-1, 0, 2, -1, 0, 0, 0], [0, -1, -1, 2, -1, 0, 0], [0, 0, 0, -1, 2, -1, 0], [0, 0, 0, 0, -1, 2, -1], [0, 0, 0, 0, 0, -1, 2]])
chevieset(:E7, :PowerMaps, [nothing, [1, 1, 1, 1, 1, 6, 7, 8, 3, 4, 4, 3, 4, 14, 6, 6, 7, 6, 8, 8, 8, 22, 9, 12, 25, 14, 18, 18, 17, 30, 1, 1, 1, 1, 1, 6, 7, 8, 3, 4, 4, 3, 4, 14, 6, 6, 7, 6, 8, 8, 8, 22, 9, 12, 25, 14, 18, 18, 17, 30], [1, 2, 3, 4, 5, 1, 1, 1, 9, 10, 11, 12, 13, 14, 2, 3, 3, 4, 2, 3, 5, 22, 23, 24, 7, 26, 10, 11, 9, 14, 31, 32, 33, 34, 35, 31, 31, 31, 39, 40, 41, 42, 43, 44, 32, 33, 33, 34, 32, 33, 35, 52, 53, 54, 37, 56, 40, 41, 39, 44], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2, 27, 28, 29, 6, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 31, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 32, 57, 58, 59, 36], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 31, 53, 54, 55, 56, 57, 58, 59, 60]])
chevieset(:E7, :vpolheckeirreducibles, [[[[1], 0], [[1], 30], [[1], 12], [[1], 2], [[1], 4], [[1], 2], [[1], 24], [[1], 4], [[1], 6], [[1], 4], [[1], 14], [[1], 16], [[1], 4], [[1], 4], [[1], 14], [[1], 4], [[1], 12], [[1], 4], [[1], 10], [[1], 14], [[1], 6], [[1], 6], [[1], 6], [[1], 8], [[1], 8], [[1], 6], [[1], 6], [[1], 8], [[1], 6], [[1], 6], [[1], 63], [[1], 1], [[1], 3], [[1], 13], [[1], 3], [[1], 31], [[1], 21], [[1], 23], [[1], 33], [[1], 13], [[1], 3], [[1], 7], [[1], 5], [[1], 15], [[1], 3], [[1], 5], [[1], 25], [[1], 5], [[1], 5], [[1], 5], [[1], 5], [[1], 9], [[1], 5], [[1], 17], [[1], 7], [[1], 5], [[1], 7], [[1], 5], [[1], 11], [[1], 13]], [[[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0], [[-1], 0]], [[[7], 0], [[1, 0, 0, 0, 0, -6], 0], [[3, 0, 0, -4], 0], [[5, -2], 0], [[3, -4], 0], [[5, -1], 0], [[1, 0, 0, 0, -3], 0], [[3, -2], 0], [[3], 0], [[3, -2], 0], [[1, -1, 0, -3], 0], [[1, 0, 0, -2], 0], [[3, -2], 0], [[3, -1], 0], [[1, 0, 0, -3], 0], [[3, -1], 0], [[1, 0, 1], 0], [[3, -3], 0], [[1], 0], [[1, 0, 0, -2], 0], [[1, -2], 0], [[1, -1], 0], [[1, -2], 0], [[1], 0], [[1], 0], [[1, -1], 0], [[1, -3], 0], [[1, -1], 0], [[1, -1], 0], [[1, -2], 0], [[7], 9], [[-6, 1], 0], [[-4, 3], 0], [[-2, 1, 0, 4], 0], [[-4, 3], 0], [[-1, 0, 5], 3], [[-2], 3], [[-1, 2], 3], [[3], 5], [[-2, 0, 0, 3], 0], [[-4, 1], 0], [[-2, 1], 0], [[-2, 3], 0], [[2], 3], [[-4, 2], 0], [[-2, 4], 0], [[2], 4], [[-2, 2], 0], [[-2, 3], 0], [[-2, 1], 0], [[-2, 1], 0], [[], 0], [[-2, 1], 0], [[1], 3], [[1], 1], [[-2, 2], 0], [[-2], 0], [[-2, 2], 0], [[], 0], [[-1], 2]], [[[7], 0], [[-6, 0, 0, 0, 0, 1], 25], [[-4, 0, 0, 3], 9], [[-2, 5], 1], [[-4, 3], 3], [[-1, 5], 1], [[-3, 0, 0, 0, 1], 20], [[-2, 3], 3], [[3], 6], [[-2, 3], 3], [[-3, 0, -1, 1], 11], [[-2, 0, 0, 1], 13], [[-2, 3], 3], [[-1, 3], 3], [[-3, 0, 0, 1], 11], [[-1, 3], 3], [[1, 0, 1], 10], [[-3, 3], 3], [[1], 10], [[-2, 0, 0, 1], 11], [[-2, 1], 5], [[-1, 1], 5], [[-2, 1], 5], [[1], 8], [[1], 8], [[-1, 1], 5], [[-3, 1], 5], [[-1, 1], 7], [[-1, 1], 5], [[-2, 1], 5], [[-7], 54], [[-1, 6], 0], [[-3, 4], 2], [[-4, 0, -1, 2], 10], [[-3, 4], 2], [[-5, 0, 1], 26], [[2], 18], [[-2, 1], 19], [[-3], 28], [[-3, 0, 0, 2], 10], [[-1, 4], 2], [[-1, 2], 6], [[-3, 2], 4], [[-2], 12], [[-2, 4], 2], [[-4, 2], 4], [[-2], 21], [[-2, 2], 4], [[-3, 2], 4], [[-1, 2], 4], [[-1, 2], 4], [[], 0], [[-1, 2], 4], [[-1], 14], [[-1], 6], [[-2, 2], 4], [[2], 7], [[-2, 2], 4], [[], 0], [[1], 11]], [[[15], 0], [[-10, 0, 0, 5], 9], [[-4, 9, 0, 2], 3], [[7, -6, 2], 0], [[3, -7, 3, -1, 1], 0], [[5, -5], 0], [[-3], 8], [[3, -2, 2], 0], [[-3, 2], 2], [[1, -4], 0], [[-1, 3, -1], 3], [[2, -1, 2], 5], [[2, -2, 1], 0], [[1, -1], 0], [[-1, 1, 0, -2], 3], [[-1, -1], 1], [[1], 4], [[3, -4, 2, -1], 0], [[-1, 2], 3], [[1], 4], [[-1], 1], [[1], 0], [[1], 3], [[-1], 3], [[], 0], [[], 0], [[1, -2, 1], 0], [[-1, 0, -1], 2], [[-1], 2], [[1, -1], 0], [[15], 21], [[-10, 5], 0], [[-4, 9, 0, 2], 0], [[4, -6, 3, 0, 2], 3], [[-5, 6, -3, 1], 0], [[5, 0, -5], 9], [[-3], 7], [[-1, 4], 7], [[-3, 2], 11], [[1, -4], 3], [[-2, 3], 0], [[2, -1, 2], 2], [[-1, 3, -1], 0], [[], 0], [[-4, 4, -2], 0], [[-2, 4, -3, 0, -1], 0], [[2, -1], 8], [[1, 0, -1], 1], [[-2, 3, -1, 1], 0], [[1], 1], [[-1], 0], [[1], 3], [[1], 2], [[-1], 6], [[], 0], [[-1, 1], 0], [[1, -1], 2], [[-2, 1, -1], 0], [[-1], 4], [[], 0]], [[[15], 0], [[5, 0, 0, -10], 18], [[2, 0, 9, -4], 6], [[2, -6, 7], 0], [[1, -1, 3, -7, 3], 0], [[-5, 5], 1], [[-3], 16], [[2, -2, 3], 2], [[2, -3], 3], [[-4, 1], 3], [[-1, 3, -1], 9], [[2, -1, 2], 9], [[1, -2, 2], 2], [[-1, 1], 3], [[-2, 0, 1, -1], 8], [[-1, -1], 2], [[1], 8], [[-1, 2, -4, 3], 1], [[2, -1], 6], [[1], 10], [[-1], 5], [[1], 6], [[1], 3], [[-1], 5], [[], 0], [[], 0], [[1, -2, 1], 4], [[-1, 0, -1], 4], [[-1], 4], [[-1, 1], 5], [[-15], 42], [[-5, 10], 0], [[-2, 0, -9, 4], 0], [[-2, 0, -3, 6, -4], 6], [[-1, 3, -6, 5], 0], [[5, 0, -5], 20], [[3], 14], [[-4, 1], 15], [[-2, 3], 21], [[4, -1], 9], [[-3, 2], 2], [[-2, 1, -2], 3], [[1, -3, 1], 3], [[], 0], [[2, -4, 4], 1], [[1, 0, 3, -4, 2], 1], [[1, -2], 16], [[1, 0, -1], 2], [[-1, 1, -3, 2], 2], [[-1], 4], [[1], 5], [[-1], 6], [[-1], 3], [[1], 11], [[], 0], [[-1, 1], 4], [[1, -1], 4], [[1, -1, 2], 3], [[1], 7], [[], 0]], [[[21], 0], [[15, 0, 0, 0, 0, -6], 20], [[6, 0, 0, -12, 0, 0, 3], 6], [[1, -10, 10], 0], [[6, -12, 3], 2], [[1, -5, 10], 0], [[6, 0, 0, 0, -3], 16], [[3, -6, 3], 2], [[2, 0, 0, 3], 3], [[2, -6, 3], 2], [[3, 0, 4, -3, 0, -1], 8], [[1, 2, 0, -2], 10], [[2, -6, 3], 2], [[1, -3, 3], 2], [[3, 0, 0, -3], 8], [[-3, 3], 3], [[2, 0, 1], 8], [[4, -9, 3], 2], [[], 0], [[1, 0, 1, -2], 8], [[2, -2], 4], [[1, -1], 4], [[1, -2], 4], [[1], 5], [[], 0], [[-1], 5], [[5, -3], 4], [[1, 0, -1], 5], [[-1], 5], [[3, -2], 4], [[21], 45], [[-6, 15], 0], [[3, -12, 6], 1], [[6, 0, 4, -8, 0, -2, 1], 7], [[3, -12, 6], 1], [[10, 0, -5, 0, 1], 21], [[3], 15], [[1, -2, 1], 15], [[3, 2], 23], [[3, 0, 1, -6, 0, 0, 1], 7], [[1, -4, 6], 1], [[2, 0, -2, 1], 4], [[4, -6, 1], 3], [[1], 9], [[2, -8, 6], 1], [[7, -8, 1], 3], [[3], 17], [[1, -4, 1], 3], [[5, -6, 1], 3], [[1, -2, 1], 3], [[1, -2, 1], 3], [[], 0], [[-2, 1], 4], [[1], 12], [[], 0], [[2, -4, 1], 3], [[1, 0, 0, 1], 4], [[3, -4, 1], 3], [[-1], 8], [[1], 9]], [[[21], 0], [[-6, 0, 0, 0, 0, 15], 5], [[3, 0, 0, -12, 0, 0, 6], 0], [[10, -10, 1], 0], [[3, -12, 6], 0], [[10, -5, 1], 0], [[-3, 0, 0, 0, 6], 4], [[3, -6, 3], 0], [[3, 0, 0, 2], 0], [[3, -6, 2], 0], [[-1, 0, -3, 4, 0, 3], 1], [[-2, 0, 2, 1], 3], [[3, -6, 2], 0], [[3, -3, 1], 0], [[-3, 0, 0, 3], 3], [[3, -3], 0], [[1, 0, 2], 2], [[3, -9, 4], 0], [[], 0], [[-2, 1, 0, 1], 3], [[-2, 2], 1], [[-1, 1], 1], [[-2, 1], 1], [[1], 3], [[], 0], [[-1], 1], [[-3, 5], 1], [[-1, 0, 1], 1], [[-1], 1], [[-2, 3], 1], [[-21], 18], [[-15, 6], 0], [[-6, 12, -3], 0], [[-1, 2, 0, 8, -4, 0, -6], 0], [[-6, 12, -3], 0], [[-1, 0, 5, 0, -10], 6], [[-3], 6], [[-1, 2, -1], 6], [[-2, -3], 9], [[-1, 0, 0, 6, -1, 0, -3], 0], [[-6, 4, -1], 0], [[-1, 2, 0, -2], 0], [[-1, 6, -4], 0], [[-1], 6], [[-6, 8, -2], 0], [[-1, 8, -7], 0], [[-3], 8], [[-1, 4, -1], 0], [[-1, 6, -5], 0], [[-1, 2, -1], 0], [[-1, 2, -1], 0], [[], 0], [[-1, 2], 0], [[-1], 5], [[], 0], [[-1, 4, -2], 0], [[-1, 0, 0, -1], 0], [[-1, 4, -3], 0], [[1], 3], [[-1], 4]], [[[21], 0], [[-6, 5, 0, 0, -10], 5], [[4, 0, 0, -8, 9], 0], [[12, -8, 1], 0], [[6, -11, 3, -1], 0], [[11, -5], 0], [[1, 0, 0, 0, 0, 0, 2], 0], [[5, -6, 1], 0], [[4, 0, -3], 0], [[4, -7], 0], [[1, -1, 0, -4, 3, -2], 0], [[-2, 1, 2], 3], [[5, -5, 1], 0], [[4, -3], 0], [[-4, 2], 3], [[4, -2], 0], [[1, 0, 0, -2], 0], [[6, -7, 3], 0], [[-1, -1], 2], [[1, 0, 0, -1, 2], 0], [[1, -2, 1], 0], [[1, -1], 0], [[1, -2], 0], [[-1], 2], [[1, 0, -1], 0], [[-1], 1], [[2, -4, 2], 0], [[1, -1, -1, 1], 0], [[1], 0], [[2, -2, 1], 0], [[21], 15], [[-16, 5], 0], [[-8, 12, 0, 1], 0], [[-2, 2, 0, 8, -6, 3], 0], [[-9, 9, -3], 0], [[1, 0, 0, 0, 5], 5], [[3], 5], [[2, -2], 5], [[1], 9], [[-2, 0, 0, 4, -5], 0], [[-7, 4], 0], [[-2, 2, 2, -1], 0], [[-3, 6, -2], 0], [[1], 3], [[-8, 7, -1], 0], [[-4, 8, -3, 1], 0], [[1, -2], 5], [[-2, 4], 0], [[-4, 5, -3], 0], [[-1, 3], 0], [[-2, 2], 0], [[], 0], [[-2, 1], 0], [[-1], 5], [[], 0], [[-3, 3, -1], 0], [[-2, 0, 2], 0], [[-3, 4, -1], 0], [[1], 3], [[1], 3]], [[[21], 0], [[-10, 0, 0, 5, -6], 21], [[9, -8, 0, 0, 4], 8], [[1, -8, 12], 0], [[-1, 3, -11, 6], 1], [[-5, 11], 1], [[2, 0, 0, 0, 0, 0, 1], 18], [[1, -6, 5], 2], [[-3, 0, 4], 4], [[-7, 4], 3], [[-2, 3, -4, 0, -1, 1], 9], [[2, 1, -2], 11], [[1, -5, 5], 2], [[-3, 4], 3], [[2, -4], 10], [[-2, 4], 3], [[-2, 0, 0, 1], 9], [[3, -7, 6], 2], [[-1, -1], 7], [[2, -1, 0, 0, 1], 10], [[1, -2, 1], 4], [[-1, 1], 5], [[-2, 1], 5], [[-1], 6], [[-1, 0, 1], 6], [[-1], 5], [[2, -4, 2], 4], [[1, -1, -1, 1], 5], [[1], 6], [[1, -2, 2], 4], [[-21], 48], [[-5, 16], 0], [[-1, 0, -12, 8], 0], [[-3, 6, -8, 0, -2, 2], 8], [[3, -9, 9], 1], [[-5, 0, 0, 0, -1], 22], [[-3], 16], [[2, -2], 17], [[-1], 24], [[5, -4, 0, 0, 2], 9], [[-4, 7], 2], [[1, -2, -2, 2], 4], [[2, -6, 3], 3], [[-1], 12], [[1, -7, 8], 1], [[-1, 3, -8, 4], 2], [[2, -1], 19], [[-4, 2], 4], [[3, -5, 4], 3], [[-3, 1], 4], [[-2, 2], 4], [[], 0], [[-1, 2], 4], [[1], 12], [[], 0], [[1, -3, 3], 3], [[-2, 0, 2], 5], [[1, -4, 3], 3], [[-1], 8], [[-1], 10]], [[[27], 0], [[15, 0, 5, -6, 0, 0, 0, 0, 1], 22], [[9, -12, 0, 0, 6], 8], [[1, -10, 16], 0], [[6, -12, 9], 2], [[-6, 15], 1], [[2, 0, -3, 0, 0, 0, 1], 18], [[1, -8, 7], 2], [[-3, 0, 6], 4], [[1, -7, 7], 2], [[8, -4, 0, -1, 2], 10], [[-2, 0, 0, 1], 13], [[1, -7, 7], 2], [[-4, 6], 3], [[5, -3, 0, 0, 1], 10], [[-3, 6], 3], [[-2, 1, 0, 1], 9], [[3, -10, 8], 2], [[-1, 0, 1], 8], [[2, -3, 0, 0, 1], 10], [[1, -3, 2], 4], [[-2, 1], 5], [[1, -2, 2], 4], [[-2, 0, 1], 6], [[-1, 0, 1], 6], [[-1, 1], 5], [[3, -5, 3], 4], [[-2, -1, 2], 6], [[-1, 1], 5], [[1, -4, 2], 4], [[27], 49], [[-6, 21], 0], [[3, -12, 12], 1], [[13, -8, 0, -2, 4], 9], [[3, -12, 12], 1], [[9], 23], [[], 0], [[], 0], [[3], 25], [[5, -7, 0, 0, 3], 9], [[-5, 10], 2], [[-3, -2, 4], 5], [[3, -7, 5], 3], [[2], 11], [[1, -9, 11], 1], [[6, -9, 6], 3], [[], 0], [[1, -4, 4], 3], [[3, -8, 5], 3], [[-3, 3], 4], [[-3, 3], 4], [[-1], 7], [[-2, 3], 4], [[-1], 13], [[], 0], [[1, -5, 4], 3], [[-2, 0, 3], 5], [[1, -6, 4], 3], [[], 0], [[-1], 10]], [[[27], 0], [[1, 0, 0, 0, 0, -6, 5, 0, 15], 0], [[6, 0, 0, -12, 9], 0], [[16, -10, 1], 0], [[9, -12, 6], 0], [[15, -6], 0], [[1, 0, 0, 0, -3, 0, 2], 0], [[7, -8, 1], 0], [[6, 0, -3], 0], [[7, -7, 1], 0], [[2, -1, 0, -4, 8], 0], [[1, 0, 0, -2], 0], [[7, -7, 1], 0], [[6, -4], 0], [[1, 0, 0, -3, 5], 0], [[6, -3], 0], [[1, 0, 1, -2], 0], [[8, -10, 3], 0], [[1, 0, -1], 0], [[1, 0, 0, -3, 2], 0], [[2, -3, 1], 0], [[1, -2], 0], [[2, -2, 1], 0], [[1, 0, -2], 0], [[1, 0, -1], 0], [[1, -1], 0], [[3, -5, 3], 0], [[2, -1, -2], 0], [[1, -1], 0], [[2, -4, 1], 0], [[-27], 14], [[-21, 6], 0], [[-12, 12, -3], 0], [[-4, 2, 0, 8, -13], 0], [[-12, 12, -3], 0], [[-9], 8], [[], 0], [[], 0], [[-3], 8], [[-3, 0, 0, 7, -5], 0], [[-10, 5], 0], [[-4, 2, 3], 0], [[-5, 7, -3], 0], [[-2], 4], [[-11, 9, -1], 0], [[-6, 9, -6], 0], [[], 0], [[-4, 4, -1], 0], [[-5, 8, -3], 0], [[-3, 3], 0], [[-3, 3], 0], [[1], 2], [[-3, 2], 0], [[1], 4], [[], 0], [[-4, 5, -1], 0], [[-3, 0, 2], 0], [[-4, 6, -1], 0], [[], 0], [[1], 3]], [[[35], 0], [[15, 0, 0, 0, 0, -20], 10], [[1, 0, 0, -12, 0, 0, 18, 0, 0, -4], 0], [[10, -20, 5], 0], [[1, -12, 18, -4], 0], [[10, -10, 5], 0], [[6, 0, 0, 0, -7], 8], [[1, -6, 9, -2], 0], [[1, 0, 0, 6], 0], [[1, -6, 6, -2], 0], [[4, -1, 3, -6, 0, -1], 4], [[2, 1, 0, -4], 5], [[1, -6, 6, -2], 0], [[1, -3, 3, -1], 0], [[-1, 3, 0, 0, -1], 5], [[1, -3, 0, -1], 0], [[2, 0, 1], 4], [[1, -9, 12, -3], 0], [[-2], 5], [[1, 0, 1, -2], 4], [[2, -2], 2], [[1, -1], 2], [[1], 2], [[1], 3], [[-1], 4], [[], 0], [[5, -6], 2], [[1, -2], 3], [[1], 3], [[3, -3], 2], [[35], 27], [[-20, 15], 0], [[-4, 18, -12, 1], 0], [[1, 0, 4, -8, 0, -12, 6, 0, 4], 1], [[-4, 18, -12, 1], 0], [[5, 0, -10, 0, 10], 11], [[-1], 9], [[1, 2, -1], 9], [[6, 1], 14], [[3, -2, 0, -6, 3, 0, 1], 3], [[-4, 6, -4, 1], 0], [[1, 0, -4, 2], 1], [[3, -8, 4], 1], [[], 0], [[-4, 12, -8, 1], 0], [[4, -14, 7], 1], [[1, 0, 0, 2], 9], [[2, -2, 1], 1], [[3, -10, 5], 1], [[1, -2, 1], 1], [[1, -2, 1], 1], [[], 0], [[1], 1], [[1], 8], [[-1], 3], [[2, -4, 2], 1], [[-2, 1], 3], [[2, -6, 3], 1], [[1], 5], [[], 0]], [[[35], 0], [[-20, 0, 0, 0, 0, 15], 15], [[-4, 0, 0, 18, 0, 0, -12, 0, 0, 1], 3], [[5, -20, 10], 0], [[-4, 18, -12, 1], 1], [[5, -10, 10], 0], [[-7, 0, 0, 0, 6], 12], [[-2, 9, -6, 1], 1], [[6, 0, 0, 1], 3], [[-2, 6, -6, 1], 1], [[-1, 0, -6, 3, -1, 4], 5], [[-4, 0, 1, 2], 8], [[-2, 6, -6, 1], 1], [[-1, 3, -3, 1], 1], [[-1, 0, 0, 3, -1], 5], [[-1, 0, -3, 1], 1], [[1, 0, 2], 6], [[-3, 12, -9, 1], 1], [[-2], 5], [[-2, 1, 0, 1], 7], [[-2, 2], 3], [[-1, 1], 3], [[1], 4], [[1], 5], [[-1], 4], [[], 0], [[-6, 5], 3], [[-2, 1], 4], [[1], 3], [[-3, 3], 3], [[-35], 36], [[-15, 20], 0], [[-1, 12, -18, 4], 0], [[-4, 0, -6, 12, 0, 8, -4, 0, -1], 4], [[-1, 12, -18, 4], 0], [[-10, 0, 10, 0, -5], 16], [[1], 12], [[1, -2, -1], 12], [[-1, -6], 18], [[-1, 0, -3, 6, 0, 2, -3], 4], [[-1, 4, -6, 4], 0], [[-2, 4, 0, -1], 3], [[-4, 8, -3], 2], [[], 0], [[-1, 8, -12, 4], 0], [[-7, 14, -4], 2], [[-2, 0, 0, -1], 13], [[-1, 2, -2], 2], [[-5, 10, -3], 2], [[-1, 2, -1], 2], [[-1, 2, -1], 2], [[], 0], [[-1], 4], [[-1], 9], [[1], 4], [[-2, 4, -2], 2], [[-1, 2], 3], [[-3, 6, -2], 2], [[-1], 6], [[], 0]], [[[35], 0], [[9, -10, 15, 0, 0, 0, 0, 0, 0, 0, 1], 20], [[2, 0, 18, -12, 0, 0, 3], 6], [[3, -14, 18], 0], [[-3, 9, -13, 10], 1], [[-10, 15], 1], [[-3, 0, 2], 16], [[3, -8, 7], 2], [[2, -6, 0, 3], 3], [[3, -5, 7], 2], [[-3, 7, -4, 0, 0, 1], 9], [[-1, 4, -1, 0, 0, 0, 1], 10], [[2, -7, 6], 2], [[-4, 4], 3], [[3, -1, 0, 0, 1], 10], [[-1, -3, 3], 2], [[1, -2], 8], [[-1, 5, -11, 8], 1], [[-1, 0, 0, 1], 7], [[3, -1], 10], [[-2, 2], 5], [[-1, 1], 5], [[-1, -1, 1], 4], [[1, -1, 0, 1], 5], [[-1], 6], [[-1, 0, 1], 4], [[-1, 2, -5, 3], 3], [[2, -2, 0, 1], 5], [[-1], 4], [[1, -3, 2], 4], [[35], 45], [[-10, 25], 0], [[9, -12, 14], 1], [[2, -6, 16, -8, 0, 0, 3], 7], [[-1, 6, -15, 13], 0], [[5], 23], [[-1], 15], [[2], 16], [[-3, 2], 23], [[9, -5, 0, 0, 1], 9], [[-7, 8], 2], [[4, -4, 0, 3], 4], [[-1, 3, -6, 5], 2], [[], 0], [[3, -11, 11], 1], [[-3, 6, -10, 6], 2], [[-1], 17], [[-2, 3], 4], [[-1, 4, -8, 5], 2], [[-1, 3], 4], [[-2, 2], 4], [[], 0], [[-1, -1, 1], 3], [[1], 12], [[-1], 5], [[1, -4, 3], 3], [[1, -3, 0, 1], 4], [[2, -5, 4], 3], [[-1], 8], [[], 0]], [[[35], 0], [[1, 0, 0, 0, 0, 0, 0, 0, 15, -10, 9], 0], [[3, 0, 0, -12, 18, 0, 2], 0], [[18, -14, 3], 0], [[10, -13, 9, -3], 0], [[15, -10], 0], [[2, 0, -3], 6], [[7, -8, 3], 0], [[3, 0, -6, 2], 0], [[7, -5, 3], 0], [[1, 0, 0, -4, 7, -3], 0], [[1, 0, 0, 0, -1, 4, -1], 0], [[6, -7, 2], 0], [[4, -4], 0], [[1, 0, 0, -1, 3], 0], [[3, -3, -1], 0], [[-2, 1], 3], [[8, -11, 5, -1], 0], [[1, 0, 0, -1], 0], [[-1, 3], 3], [[2, -2], 0], [[1, -1], 0], [[1, -1, -1], 0], [[1, 0, -1, 1], 0], [[-1], 2], [[1, 0, -1], 0], [[3, -5, 2, -1], 0], [[1, 0, -2, 2], 0], [[-1], 2], [[2, -3, 1], 0], [[-35], 18], [[-25, 10], 0], [[-14, 12, -9], 0], [[-3, 0, 0, 8, -16, 6, -2], 0], [[-13, 15, -6, 1], 0], [[-5], 8], [[1], 6], [[-2], 7], [[-2, 3], 9], [[-1, 0, 0, 5, -9], 0], [[-8, 7], 0], [[-3, 0, 4, -4], 0], [[-5, 6, -3, 1], 0], [[], 0], [[-11, 11, -3], 0], [[-6, 10, -6, 3], 0], [[1], 8], [[-3, 2], 0], [[-5, 8, -4, 1], 0], [[-3, 1], 0], [[-2, 2], 0], [[], 0], [[-1, 1, 1], 0], [[-1], 5], [[1], 2], [[-3, 4, -1], 0], [[-1, 0, 3, -1], 0], [[-4, 5, -2], 0], [[1], 3], [[], 0]], [[[56], 0], [[1, 0, 0, 0, 0, -6, 0, 0, 15, -10, -24], 0], [[6, 0, 0, -24, 18, 0, -8], 0], [[28, -24, 4], 0], [[13, -25, 15, -3], 0], [[25, -15, 1], 0], [[-3, 0, 2, 0, 3], 4], [[10, -14, 6], 0], [[6, 0, -6], 0], [[10, -11, 5], 0], [[1, -1, 0, -7, 9, -3, -3], 0], [[1, 0, 0, -2, -1, 2], 0], [[9, -13, 4], 0], [[7, -7, 1], 0], [[1, 0, 0, -4, 3, 0, -3], 0], [[6, -6, 1], 0], [[1, -2, -1], 2], [[11, -20, 9, -1], 0], [[1, 0, 0, -1], 0], [[-3, 2, 0, -1], 3], [[2, -4, 2], 0], [[1, -2, 1], 0], [[1, -3, 2], 0], [[1, 0, -1], 0], [[-1], 2], [[1, -1, 1], 0], [[3, -8, 7, -1], 0], [[1, -1, -2, 1], 0], [[-1, 1], 1], [[2, -5, 4], 0], [[56], 18], [[-40, 16], 0], [[-20, 24, -12], 0], [[-4, 2, 0, 16, -20, 6, 8], 0], [[-19, 27, -9, 1], 0], [[1, 0, 0, 0, 10], 6], [[2], 6], [[1, 0, 1], 6], [[], 0], [[-2, 0, 0, 11, -8, 0, 3], 0], [[-14, 11, -1], 0], [[-4, 2, 4, -2], 0], [[-6, 12, -7, 1], 0], [[1], 6], [[-17, 19, -5], 0], [[-7, 18, -13, 3], 0], [[-2], 8], [[-4, 6, -3], 0], [[-6, 14, -9, 1], 0], [[-4, 3, -1], 0], [[-3, 4, -1], 0], [[], 0], [[-2, 3, -1], 0], [[], 0], [[-1], 2], [[-4, 8, -3], 0], [[-2, 0, 3], 0], [[-5, 9, -5], 0], [[], 0], [[1], 4]], [[[56], 0], [[-24, -10, 15, 0, 0, -6, 0, 0, 0, 0, 1], 20], [[-8, 0, 18, -24, 0, 0, 6], 6], [[4, -24, 28], 0], [[-3, 15, -25, 13], 1], [[1, -15, 25], 0], [[3, 0, 2, 0, -3], 16], [[6, -14, 10], 2], [[-6, 0, 6], 4], [[5, -11, 10], 2], [[-3, -3, 9, -7, 0, -1, 1], 8], [[2, -1, -2, 0, 0, 1], 11], [[4, -13, 9], 2], [[1, -7, 7], 2], [[-3, 0, 3, -4, 0, 0, 1], 8], [[1, -6, 6], 2], [[-1, -2, 1], 8], [[-1, 9, -20, 11], 1], [[-1, 0, 0, 1], 7], [[-1, 0, 2, -3], 8], [[2, -4, 2], 4], [[1, -2, 1], 4], [[2, -3, 1], 4], [[-1, 0, 1], 6], [[-1], 6], [[1, -1, 1], 4], [[-1, 7, -8, 3], 3], [[1, -2, -1, 1], 5], [[1, -1], 4], [[4, -5, 2], 4], [[-56], 45], [[-16, 40], 0], [[12, -24, 20], 1], [[-8, -6, 20, -16, 0, -2, 4], 7], [[-1, 9, -27, 19], 0], [[-10, 0, 0, 0, -1], 21], [[-2], 15], [[-1, 0, -1], 15], [[], 0], [[-3, 0, 8, -11, 0, 0, 2], 7], [[1, -11, 14], 1], [[2, -4, -2, 4], 4], [[-1, 7, -12, 6], 2], [[-1], 9], [[5, -19, 17], 1], [[-3, 13, -18, 7], 2], [[2], 17], [[3, -6, 4], 3], [[-1, 9, -14, 6], 2], [[1, -3, 4], 3], [[1, -4, 3], 3], [[], 0], [[1, -3, 2], 3], [[], 0], [[1], 5], [[3, -8, 4], 3], [[-3, 0, 2], 5], [[5, -9, 5], 3], [[], 0], [[-1], 9]], [[[70], 0], [[-10, 0, 0, 0, -30, 30], 9], [[-8, 18, 0, -20], 3], [[24, -32, 14], 0], [[10, -21, 21, -15, 3], 0], [[15, -25, 5], 0], [[6, 0, 1], 10], [[5, -10, 9, -4, 1], 0], [[-6, 8], 2], [[4, -6, 7, -3], 0], [[-1, 4, 0, -6, 8, -3], 3], [[2, 0, -2, 2], 5], [[3, -8, 6, -3], 0], [[1, -3, 2], 0], [[-1, 0, 0, -3, 3], 3], [[-2, 1], 1], [[2, -3], 5], [[7, -14, 15, -7, 2], 0], [[-1], 3], [[-3, 3, -1], 6], [[1], 0], [[], 0], [[], 0], [[], 0], [[1], 4], [[], 0], [[2, -3, 3, -3, 1, -1], 0], [[-1, 1, -1], 2], [[-1], 3], [[1, -1, 1, -1], 0], [[70], 27], [[-40, 30], 0], [[-16, 24, -24, 6], 0], [[8, -12, 6, 12, -8], 3], [[-15, 27, -21, 7], 0], [[1, 0, 0, 0, 5, -16, 5], 9], [[7], 9], [[3, -4, 2], 9], [[2], 15], [[1, -4, 0, 11, -6], 3], [[-4, 11, -5], 0], [[4, -6, 4], 2], [[-3, 5, -6, 4, -2], 0], [[], 0], [[-10, 19, -13, 3], 0], [[-5, 11, -13, 10, -5, 1], 0], [[-2, 1], 10], [[2, 0, 1], 1], [[-4, 7, -9, 6, -2, 1], 0], [[-1], 0], [[1], 1], [[], 0], [[], 0], [[], 0], [[1], 3], [[-1, 2, -2, 1], 0], [[1, -2], 2], [[-2, 4, -4, 2, -1], 0], [[-1], 5], [[], 0]], [[[70], 0], [[30, -30, 0, 0, 0, -10], 16], [[-20, 0, 18, -8], 6], [[14, -32, 24], 0], [[3, -15, 21, -21, 10], 0], [[5, -25, 15], 0], [[1, 0, 6], 12], [[1, -4, 9, -10, 5], 0], [[8, -6], 3], [[-3, 7, -6, 4], 1], [[-3, 8, -6, 0, 4, -1], 6], [[2, -2, 0, 2], 8], [[-3, 6, -8, 3], 1], [[2, -3, 1], 2], [[3, -3, 0, 0, -1], 7], [[1, -2], 2], [[-3, 2], 6], [[2, -7, 15, -14, 7], 0], [[-1], 7], [[-1, 3, -3], 6], [[1], 6], [[], 0], [[], 0], [[], 0], [[1], 4], [[], 0], [[-1, 1, -3, 3, -3, 2], 1], [[-1, 1, -1], 4], [[-1], 3], [[-1, 1, -1, 1], 3], [[-70], 36], [[-30, 40], 0], [[-6, 24, -24, 16], 0], [[8, -12, -6, 12, -8], 6], [[-7, 21, -27, 15], 0], [[-5, 16, -5, 0, 0, 0, -1], 16], [[-7], 12], [[-2, 4, -3], 12], [[-2], 18], [[6, -11, 0, 4, -1], 6], [[5, -11, 4], 1], [[-4, 6, -4], 3], [[2, -4, 6, -5, 3], 1], [[], 0], [[-3, 13, -19, 10], 0], [[-1, 5, -10, 13, -11, 5], 0], [[-1, 2], 14], [[-1, 0, -2], 2], [[-1, 2, -6, 9, -7, 4], 0], [[1], 5], [[-1], 4], [[], 0], [[], 0], [[], 0], [[-1], 4], [[-1, 2, -2, 1], 2], [[2, -1], 4], [[1, -2, 4, -4, 2], 1], [[1], 6], [[], 0]], [[[84], 0], [[5, 0, 0, -40, 30, 0, 0, 0, 9], 12], [[9, 0, -8, 0, 18, 0, 0, 0, 1], 4], [[20, -40, 24], 0], [[4, -22, 30, -18, 10], 0], [[10, -30, 14], 0], [[-3, 0, 6], 12], [[3, -6, 13, -10, 3], 0], [[-3, 12, -6, 0, 1], 2], [[-7, 9, -5, 3], 1], [[-1, -2, 5, -5, 0, 3], 5], [[-1, 2, 2, 0, -1, 2], 6], [[1, -5, 9, -7, 2], 0], [[-1, 3, -3], 1], [[1, 0, -2, 2, -3], 4], [[1, 0, 1], 2], [[-3, 2], 6], [[3, -13, 18, -15, 5], 0], [[2, -1], 4], [[-1, 2, -3, 1], 6], [[1], 2], [[], 0], [[1, -1], 3], [[-1, 0, 1], 3], [[], 0], [[-1], 4], [[-2, 4, -4, 3, -2, 1], 1], [[1, -2, 2, -1], 3], [[1], 3], [[-1, 1, -1, 1, -1], 1], [[84], 33], [[-40, 44], 0], [[-8, 36, -24, 16], 0], [[-6, 3, 4, -4, -6, 12, 0, 0, 0, 1], 4], [[-10, 30, -30, 14], 0], [[10, -16], 15], [[3], 11], [[1, 0, 2], 11], [[4], 18], [[-1, 0, 5, -7, 0, 3], 4], [[-1, 9, -11, 3], 0], [[2, -5, 10, -4, 0, 1], 2], [[4, -8, 6, -4, 2], 1], [[-1], 9], [[-6, 18, -22, 8], 0], [[-1, 9, -16, 15, -9, 4], 0], [[-2, 0, 1], 13], [[-2, -1, 0, 1], 2], [[-1, 6, -9, 10, -7, 2], 0], [[-1], 2], [[1], 3], [[], 0], [[1, -1], 2], [[], 0], [[], 0], [[1, -2, 2, -2], 1], [[-2, 3, -1], 3], [[-1, 2, -4, 5, -3, 1], 0], [[1], 6], [[-1], 7]], [[[84], 0], [[9, 0, 0, 0, 30, -40, 0, 0, 5], 10], [[1, 0, 0, 0, 18, 0, -8, 0, 9], 0], [[24, -40, 20], 0], [[10, -18, 30, -22, 4], 0], [[14, -30, 10], 0], [[6, 0, -3], 10], [[3, -10, 13, -6, 3], 0], [[1, 0, -6, 12, -3], 0], [[3, -5, 9, -7], 0], [[3, 0, -5, 5, -2, -1], 4], [[2, -1, 0, 2, 2, -1], 5], [[2, -7, 9, -5, 1], 0], [[-3, 3, -1], 1], [[-3, 2, -2, 0, 1], 6], [[1, 0, 1], 0], [[2, -3], 5], [[5, -15, 18, -13, 3], 0], [[-1, 2], 5], [[1, -3, 2, -1], 5], [[1], 4], [[], 0], [[-1, 1], 2], [[1, 0, -1], 3], [[], 0], [[-1], 2], [[1, -2, 3, -4, 4, -2], 0], [[-1, 2, -2, 1], 2], [[1], 3], [[-1, 1, -1, 1, -1], 1], [[-84], 30], [[-44, 40], 0], [[-16, 24, -36, 8], 0], [[-1, 0, 0, 0, -12, 6, 4, -4, -3, 6], 0], [[-14, 30, -30, 10], 0], [[16, -10], 15], [[-3], 10], [[-2, 0, -1], 10], [[-4], 15], [[-3, 0, 7, -5, 0, 1], 4], [[-3, 11, -9, 1], 0], [[-1, 0, 4, -10, 5, -2], 0], [[-2, 4, -6, 8, -4], 0], [[1], 6], [[-8, 22, -18, 6], 0], [[-4, 9, -15, 16, -9, 1], 0], [[-1, 0, 2], 10], [[-1, 0, 1, 2], 0], [[-2, 7, -10, 9, -6, 1], 0], [[1], 3], [[-1], 2], [[], 0], [[1, -1], 2], [[], 0], [[], 0], [[2, -2, 2, -1], 1], [[1, -3, 2], 2], [[-1, 3, -5, 4, -2, 1], 0], [[-1], 5], [[1], 6]], [[[105], 0], [[-6, 5, 0, 15, 0, -9, 0, -40], 5], [[8, 0, 0, -36, 27, 0, 2], 0], [[45, -50, 10], 0], [[17, -44, 36, -8], 0], [[40, -30, 5], 0], [[-3, 0, 2, 0, 6, -8], 4], [[11, -26, 14, -2], 0], [[8, 0, -9, 6], 0], [[11, -22, 11, -1], 0], [[1, -1, 0, -7, 13, -6, -2, -3], 0], [[-2, 0, 2, 1], 3], [[11, -22, 11, -1], 0], [[8, -12, 4], 0], [[-3, 6, 0, -2], 3], [[8, -9, 2], 0], [[1, -2, 2], 2], [[14, -34, 23, -4], 0], [[-1, 0, 2], 2], [[-3, 3, 0, 1], 3], [[1, -4, 5, -1], 0], [[-2, 2], 1], [[1, -3, 3], 0], [[-2, 1], 2], [[-1, 1], 2], [[-1, 1], 1], [[2, -10, 13, -6], 0], [[1, -1, -2, 4, -1], 0], [[-1], 1], [[1, -6, 7, -2], 0], [[105], 21], [[-70, 35], 0], [[-28, 51, -24, 2], 0], [[-4, 4, 0, 20, -34, 9, 4, 6], 0], [[-28, 51, -24, 2], 0], [[-1, 0, 0, 0, 0, 16], 7], [[-3], 7], [[-2, 0, -1], 7], [[3, 2], 11], [[-2, 0, 0, 14, -12, 0, -1], 0], [[-20, 20, -5], 0], [[-4, 4, 6, -7, 2], 0], [[-6, 18, -17, 4], 0], [[], 0], [[-24, 37, -13, 1], 0], [[-8, 27, -29, 11], 0], [[-1, 0, 2], 7], [[-4, 9, -6], 0], [[-6, 21, -20, 6], 0], [[-2, 6, -3], 0], [[-2, 6, -3], 0], [[], 0], [[-2, 4, -1], 0], [[-1], 6], [[], 0], [[-4, 11, -8, 1], 0], [[-2, 0, 4, -3], 0], [[-4, 14, -11, 2], 0], [[-1], 4], [[], 0]], [[[105], 0], [[-40, 0, -9, 0, 15, 0, 5, -6], 18], [[2, 0, 27, -36, 0, 0, 8], 6], [[10, -50, 45], 0], [[-8, 36, -44, 17], 1], [[5, -30, 40], 0], [[-8, 6, 0, 2, 0, -3], 15], [[-2, 14, -26, 11], 1], [[6, -9, 0, 8], 3], [[-1, 11, -22, 11], 1], [[-3, -2, -6, 13, -7, 0, -1, 1], 7], [[1, 2, 0, -2], 10], [[-1, 11, -22, 11], 1], [[4, -12, 8], 2], [[-2, 0, 6, -3], 8], [[2, -9, 8], 2], [[2, -2, 1], 8], [[-4, 23, -34, 14], 1], [[2, 0, -1], 6], [[1, 0, 3, -3], 8], [[-1, 5, -4, 1], 3], [[2, -2], 4], [[3, -3, 1], 4], [[1, -2], 5], [[1, -1], 5], [[1, -1], 4], [[-6, 13, -10, 2], 3], [[-1, 4, -2, -1, 1], 4], [[-1], 5], [[-2, 7, -6, 1], 3], [[-105], 42], [[-35, 70], 0], [[-2, 24, -51, 28], 0], [[-6, -4, -9, 34, -20, 0, -4, 4], 6], [[-2, 24, -51, 28], 0], [[-16, 0, 0, 0, 0, 1], 19], [[3], 14], [[1, 0, 2], 14], [[-2, -3], 21], [[1, 0, 12, -14, 0, 0, 2], 7], [[5, -20, 20], 1], [[-2, 7, -6, -4, 4], 3], [[-4, 17, -18, 6], 2], [[], 0], [[-1, 13, -37, 24], 0], [[-11, 29, -27, 8], 2], [[-2, 0, 1], 16], [[6, -9, 4], 3], [[-6, 20, -21, 6], 2], [[3, -6, 2], 3], [[3, -6, 2], 3], [[], 0], [[1, -4, 2], 3], [[1], 11], [[], 0], [[-1, 8, -11, 4], 2], [[3, -4, 0, 2], 4], [[-2, 11, -14, 4], 2], [[1], 7], [[], 0]], [[[105], 0], [[-30, 50, 0, 0, -10, 15], 17], [[-20, 0, 36, -24, 0, 0, 1], 6], [[16, -48, 41], 0], [[4, -13, 33, -39, 16], 0], [[5, -35, 30], 0], [[6], 14], [[-4, 14, -18, 11], 1], [[8, -12, 0, 1], 3], [[-2, 9, -17, 7], 1], [[-3, 6, -5, -4, 8, -5], 6], [[-2, -2, 2, -1], 9], [[-2, 10, -15, 8], 1], [[3, -7, 4], 2], [[3, -2, 0, 4, -1], 7], [[1, -6, 1], 2], [[2], 7], [[1, -8, 21, -27, 13], 0], [[2, -1], 6], [[1, -3, 0, 1], 7], [[2, -2, 1], 4], [[-1, 1], 5], [[-1], 5], [[-1], 6], [[], 0], [[], 0], [[1, -4, 8, -8, 3], 2], [[-1, 3, -2], 4], [[], 0], [[-1, 3, -4, 2], 3], [[105], 39], [[-40, 65], 0], [[-8, 24, -48, 25], 0], [[12, -8, -12, 32, -16, 0, 0, 1], 6], [[-7, 27, -45, 26], 0], [[-16, 15, 0, 0, 0, 1], 18], [[6], 13], [[2, -2, 3], 13], [[-3], 21], [[3, -11, 0, 11, -6], 6], [[5, -19, 11], 1], [[-4, 8, -8, 0, 1], 3], [[1, -4, 12, -13, 5], 1], [[], 0], [[-2, 17, -31, 20], 0], [[-1, 3, -13, 22, -23, 8], 0], [[1, 0, 1], 15], [[3, -4, 1], 3], [[2, -7, 15, -16, 7], 1], [[1, -3, 1], 3], [[1, -2, 2], 3], [[], 0], [[-1], 4], [[-1], 11], [[], 0], [[-1, 4, -6, 3], 2], [[3, -3], 4], [[-3, 7, -9, 5], 2], [[], 0], [[], 0]], [[[105], 0], [[15, -10, 0, 0, 50, -30], 8], [[1, 0, 0, -24, 36, 0, -20], 0], [[41, -48, 16], 0], [[16, -39, 33, -13, 4], 0], [[30, -35, 5], 0], [[6], 10], [[11, -18, 14, -4], 0], [[1, 0, -12, 8], 0], [[7, -17, 9, -2], 0], [[-5, 8, -4, -5, 6, -3], 3], [[-1, 2, -2, -2], 4], [[8, -15, 10, -2], 0], [[4, -7, 3], 0], [[-1, 4, 0, -2, 3], 3], [[1, -6, 1], 0], [[2], 5], [[13, -27, 21, -8, 1], 0], [[-1, 2], 3], [[1, 0, -3, 1], 4], [[1, -2, 2], 0], [[1, -1], 0], [[-1], 1], [[-1], 2], [[], 0], [[], 0], [[3, -8, 8, -4, 1], 0], [[-2, 3, -1], 2], [[], 0], [[2, -4, 3, -1], 0], [[-105], 24], [[-65, 40], 0], [[-25, 48, -24, 8], 0], [[-1, 0, 0, 16, -32, 12, 8, -12], 0], [[-26, 45, -27, 7], 0], [[-1, 0, 0, 0, -15, 16], 8], [[-6], 8], [[-3, 2, -2], 8], [[3], 12], [[6, -11, 0, 11, -3], 3], [[-11, 19, -5], 0], [[-1, 0, 8, -8, 4], 0], [[-5, 13, -12, 4, -1], 0], [[], 0], [[-20, 31, -17, 2], 0], [[-8, 23, -22, 13, -3, 1], 0], [[-1, 0, -1], 8], [[-1, 4, -3], 0], [[-7, 16, -15, 7, -2], 0], [[-1, 3, -1], 0], [[-2, 2, -1], 0], [[], 0], [[1], 1], [[1], 6], [[], 0], [[-3, 6, -4, 1], 0], [[3, -3], 2], [[-5, 9, -7, 3], 0], [[], 0], [[], 0]], [[[105], 0], [[10, 0, 0, -40, 45, 0, 0, 0, 0, -10], 12], [[1, 0, 0, 0, 18, 0, -8, 0, 18, -12], 0], [[23, -54, 28], 0], [[4, -25, 39, -31, 6], 0], [[15, -35, 20], 0], [[6], 10], [[1, -10, 20, -12, 4], 0], [[1, 0, -6, 8, -6], 0], [[-9, 15, -7, 4], 1], [[-2, -1, 4, 0, -4, 2], 5], [[-2, 0, 1, 0, 0, 2], 6], [[1, -7, 14, -11, 2], 0], [[-3, 6, -4, 1], 1], [[2, 1, 0, 0, -1], 7], [[1, 0, 4, -3], 0], [[2], 5], [[3, -14, 28, -21, 4], 0], [[1, -1, 0, -1], 4], [[1, -2], 5], [[1, -2, 1, -1], 2], [[-1, 1], 3], [[1], 4], [[-1], 4], [[], 0], [[], 0], [[-1, 4, -8, 8, -3], 1], [[2, -2, 2], 3], [[], 0], [[1, -4, 4, -1], 2], [[105], 33], [[-50, 55], 0], [[-8, 45, -36, 16], 0], [[1, 0, 0, -6, 12, 4, -4, -12, 10, -8], 1], [[-11, 36, -45, 13], 0], [[5, -16, 10, 0, 0, 0, 1], 15], [[6], 11], [[3, -2, 2], 11], [[-3], 17], [[-2, 1, 4, -2, -1, 4, -1], 4], [[-3, 12, -15, 5], 0], [[1, 2, -8, 8, -2], 1], [[4, -11, 12, -7, 1], 1], [[], 0], [[-6, 26, -28, 10], 0], [[-1, 9, -19, 26, -14, 1], 0], [[1, 0, 1], 11], [[1, -2, 3, -2], 1], [[-1, 4, -14, 18, -9, 1], 0], [[-3, 1, 0, 1], 2], [[-2, 2, -1], 2], [[], 0], [[1], 3], [[-1], 9], [[], 0], [[1, -4, 6, -3], 1], [[1, -2, 2, -1], 2], [[2, -7, 10, -4, 1], 1], [[], 0], [[], 0]], [[[105], 0], [[-10, 0, 0, 0, 0, 45, -40, 0, 0, 10], 9], [[-12, 18, 0, -8, 0, 18, 0, 0, 0, 1], 3], [[28, -54, 23], 0], [[6, -31, 39, -25, 4], 0], [[20, -35, 15], 0], [[6], 14], [[4, -12, 20, -10, 1], 0], [[-6, 8, -6, 0, 1], 2], [[4, -7, 15, -9], 0], [[2, -4, 0, 4, -1, -2], 4], [[2, 0, 0, 1, 0, -2], 5], [[2, -11, 14, -7, 1], 0], [[1, -4, 6, -3], 0], [[-1, 0, 0, 1, 2], 3], [[-3, 4, 0, 1], 1], [[2], 7], [[4, -21, 28, -14, 3], 0], [[-1, 0, -1, 1], 3], [[-2, 1], 8], [[-1, 1, -2, 1], 1], [[1, -1], 2], [[1], 2], [[-1], 4], [[], 0], [[], 0], [[-3, 8, -8, 4, -1], 1], [[2, -2, 2], 3], [[], 0], [[-1, 4, -4, 1], 1], [[-105], 30], [[-55, 50], 0], [[-16, 36, -45, 8], 0], [[8, -10, 12, 4, -4, -12, 6, 0, 0, -1], 3], [[-13, 45, -36, 11], 0], [[-1, 0, 0, 0, -10, 16, -5], 10], [[-6], 10], [[-2, 2, -3], 10], [[3], 16], [[1, -4, 1, 2, -4, -1, 2], 3], [[-5, 15, -12, 3], 0], [[2, -8, 8, -2, -1], 2], [[-1, 7, -12, 11, -4], 0], [[], 0], [[-10, 28, -26, 6], 0], [[-1, 14, -26, 19, -9, 1], 0], [[-1, 0, -1], 12], [[2, -3, 2, -1], 1], [[-1, 9, -18, 14, -4, 1], 0], [[-1, 0, -1, 3], 0], [[1, -2, 2], 1], [[], 0], [[-1], 2], [[1], 8], [[], 0], [[3, -6, 4, -1], 1], [[1, -2, 2, -1], 2], [[-1, 4, -10, 7, -2], 0], [[], 0], [[], 0]], [[[120], 0], [[45, 0, -9, -10, 15, 0, 5, -6], 18], [[-12, 0, 36, -40, 0, 0, 8], 6], [[12, -56, 52], 0], [[1, -9, 39, -51, 20], 0], [[5, -35, 45], 0], [[-8, 3, 0, 2, 0, -3], 15], [[-2, 16, -28, 14], 1], [[4, -12, 0, 8], 3], [[-1, 11, -26, 12], 1], [[3, -2, -5, 16, -8, 0, -1, 1], 7], [[-2, 0, 4, 0, -2], 9], [[-1, 12, -24, 13], 1], [[4, -13, 9], 2], [[5, -4], 10], [[3, -10, 8], 2], [[-1, -2, 1], 8], [[-5, 25, -38, 17], 1], [[-1, -1], 7], [[-1, 0, 2, -3], 8], [[-1, 5, -5, 1], 3], [[2, -2, 1], 4], [[-1, 3, -3, 1], 3], [[2, -2], 5], [[1, -1], 5], [[1, -1], 4], [[-6, 14, -12, 3], 3], [[4, -3, -1, 1], 5], [[1, -1], 4], [[-2, 7, -7, 2], 3], [[120], 42], [[-40, 80], 0], [[-4, 24, -60, 32], 0], [[8, -4, -12, 40, -24, 0, -4, 4], 6], [[-3, 27, -57, 33], 0], [[16, -5, 0, 5, 0, -1], 19], [[-6], 14], [[-1, 4, -3], 14], [[], 0], [[-5, 0, 14, -15, 0, 0, 2], 7], [[5, -23, 22], 1], [[8, -8, -4, 4], 4], [[-4, 18, -21, 7], 2], [[], 0], [[-1, 15, -41, 28], 0], [[1, -11, 32, -31, 10], 1], [[-3, 2, -1], 16], [[-1, 6, -10, 4], 2], [[-7, 21, -24, 8], 2], [[3, -7, 2], 3], [[3, -6, 3], 3], [[1], 6], [[2, -4, 2], 3], [[], 0], [[], 0], [[-1, 8, -12, 5], 2], [[2, -5, 0, 2], 4], [[-2, 12, -15, 6], 2], [[], 0], [[], 0]], [[[120], 0], [[-6, 5, 0, 15, -10, -9, 0, 45], 5], [[8, 0, 0, -40, 36, 0, -12], 0], [[52, -56, 12], 0], [[20, -51, 39, -9, 1], 0], [[45, -35, 5], 0], [[-3, 0, 2, 0, 3, -8], 4], [[14, -28, 16, -2], 0], [[8, 0, -12, 4], 0], [[12, -26, 11, -1], 0], [[1, -1, 0, -8, 16, -5, -2, 3], 0], [[-2, 0, 4, 0, -2], 3], [[13, -24, 12, -1], 0], [[9, -13, 4], 0], [[-4, 5], 3], [[8, -10, 3], 0], [[1, -2, -1], 2], [[17, -38, 25, -5], 0], [[-1, -1], 2], [[-3, 2, 0, -1], 3], [[1, -5, 5, -1], 0], [[1, -2, 2], 0], [[1, -3, 3, -1], 0], [[-2, 2], 2], [[-1, 1], 2], [[-1, 1], 1], [[3, -12, 14, -6], 0], [[1, -1, -3, 4], 0], [[-1, 1], 1], [[2, -7, 7, -2], 0], [[-120], 21], [[-80, 40], 0], [[-32, 60, -24, 4], 0], [[-4, 4, 0, 24, -40, 12, 4, -8], 0], [[-33, 57, -27, 3], 0], [[1, 0, -5, 0, 5, -16], 7], [[6], 7], [[3, -4, 1], 7], [[], 0], [[-2, 0, 0, 15, -14, 0, 5], 0], [[-22, 23, -5], 0], [[-4, 4, 8, -8], 0], [[-7, 21, -18, 4], 0], [[], 0], [[-28, 41, -15, 1], 0], [[-10, 31, -32, 11, -1], 0], [[1, -2, 3], 7], [[-4, 10, -6, 1], 0], [[-8, 24, -21, 7], 0], [[-2, 7, -3], 0], [[-3, 6, -3], 0], [[-1], 3], [[-2, 4, -2], 0], [[], 0], [[], 0], [[-5, 12, -8, 1], 0], [[-2, 0, 5, -2], 0], [[-6, 15, -12, 2], 0], [[], 0], [[], 0]], [[[168], 0], [[30, 0, 5, 0, -15, 0, 15, 0, 5], 16], [[-20, 0, 54, -32, 0, 0, 6], 6], [[24, -80, 64], 0], [[2, -24, 60, -56, 26], 0], [[10, -54, 50], 0], [[12, -8, 0, 0, 2], 14], [[1, -6, 23, -34, 13], 0], [[12, -18, 0, 6], 3], [[-4, 18, -26, 12], 1], [[5, -10, -6, 15, -5, 0, 0, 1], 7], [[2, -2, -2, 2], 8], [[-4, 18, -26, 12], 1], [[6, -14, 6], 2], [[-8, 0, 6], 8], [[4, -8, 6], 2], [[4, 0, -2], 7], [[1, -13, 38, -43, 19], 0], [[2, 0, -1], 6], [[1, -4, 1, 2, -1], 7], [[-2, 3, -3, 1], 3], [[1, -1], 4], [[-1, 1, -1, 1], 3], [[2, -2], 5], [[1, -1], 5], [[], 0], [[3, -10, 13, -10, 4], 2], [[-2, 5, -4, 0, 1], 4], [[], 0], [[1, -3, 6, -5, 2], 2], [[168], 39], [[-64, 104], 0], [[-8, 48, -72, 40], 0], [[4, -16, -18, 52, -16, 0, -2, 4], 6], [[-8, 48, -72, 40], 0], [[5, 0, 5, 0, -5, 0, 1], 17], [[6], 13], [[1, -6, 2], 13], [[], 0], [[3, -12, 0, 17, -9, 0, 0, 1], 6], [[10, -30, 20], 1], [[-4, 14, -12, -2, 4], 3], [[1, -11, 21, -19, 8], 1], [[-2], 9], [[-4, 26, -54, 30], 0], [[5, -25, 40, -31, 13], 1], [[4, -2], 15], [[-2, 6, -6, 4], 2], [[3, -14, 27, -24, 9], 1], [[3, -5, 1], 3], [[3, -5, 1], 3], [[], 0], [[1, -2, 1], 3], [[], 0], [[], 0], [[-3, 9, -10, 4], 2], [[5, -6, 0, 1], 4], [[1, -5, 14, -15, 5], 1], [[], 0], [[1], 8]], [[[168], 0], [[5, 0, 15, 0, -15, 0, 5, 0, 30], 6], [[6, 0, 0, -32, 54, 0, -20], 0], [[64, -80, 24], 0], [[26, -56, 60, -24, 2], 0], [[50, -54, 10], 0], [[2, 0, 0, -8, 12], 6], [[13, -34, 23, -6, 1], 0], [[6, 0, -18, 12], 0], [[12, -26, 18, -4], 0], [[1, 0, 0, -5, 15, -6, -10, 5], 0], [[2, -2, -2, 2], 5], [[12, -26, 18, -4], 0], [[6, -14, 6], 0], [[6, 0, -8], 4], [[6, -8, 4], 0], [[-2, 0, 4], 3], [[19, -43, 38, -13, 1], 0], [[-1, 0, 2], 2], [[-1, 2, 1, -4, 1], 3], [[1, -3, 3, -2], 0], [[-1, 1], 1], [[1, -1, 1, -1], 0], [[-2, 2], 2], [[-1, 1], 2], [[], 0], [[4, -10, 13, -10, 3], 0], [[1, 0, -4, 5, -2], 0], [[], 0], [[2, -5, 6, -3, 1], 0], [[-168], 24], [[-104, 64], 0], [[-40, 72, -48, 8], 0], [[-4, 2, 0, 16, -52, 18, 16, -4], 0], [[-40, 72, -48, 8], 0], [[-1, 0, 5, 0, -5, 0, -5], 8], [[-6], 8], [[-2, 6, -1], 8], [[], 0], [[-1, 0, 0, 9, -17, 0, 12, -3], 0], [[-20, 30, -10], 0], [[-4, 2, 12, -14, 4], 0], [[-8, 19, -21, 11, -1], 0], [[2], 6], [[-30, 54, -26, 4], 0], [[-13, 31, -40, 25, -5], 0], [[2, -4], 9], [[-4, 6, -6, 2], 0], [[-9, 24, -27, 14, -3], 0], [[-1, 5, -3], 0], [[-1, 5, -3], 0], [[], 0], [[-1, 2, -1], 0], [[], 0], [[], 0], [[-4, 10, -9, 3], 0], [[-1, 0, 6, -5], 0], [[-5, 15, -14, 5, -1], 0], [[], 0], [[-1], 5]], [[[189], 0], [[45, -20, 45, 0, -40, 0, -9], 14], [[-12, 9, 0, 6, 0, 27, -36, 0, 0, 3], 3], [[34, -100, 55], 0], [[3, -36, 78, -60, 12], 0], [[24, -60, 45], 0], [[2, 0, 0, -8, 6], 12], [[1, -14, 37, -30, 6], 0], [[-3, 18, -9, 0, 3], 2], [[1, -10, 28, -24, 6], 0], [[1, -1, 3, 1, 1, -7, 6, -3], 4], [[-2, 0, 1, 2], 8], [[1, -10, 28, -24, 6], 0], [[-4, 12, -12, 3], 1], [[-1, 0, 0, -2, -1, 1], 5], [[-3, 6, -9, 3], 1], [[-2, 0, 2], 6], [[2, -22, 54, -42, 9], 0], [[-2, 2], 5], [[-1, 0, 0, 0, 1], 6], [[1, -5, 5, -1], 2], [[-2, 2], 3], [[-2, 2, -1], 3], [[-2, 1], 4], [[-1, 1], 4], [[1], 4], [[7, -18, 17, -5], 2], [[1, -5, 5], 3], [[], 0], [[2, -9, 8, -2], 2], [[189], 35], [[-84, 105], 0], [[-12, 66, -84, 27], 0], [[4, -8, 9, -8, -2, -18, 29, -16, 0, -2, 1], 3], [[-12, 66, -84, 27], 0], [[9], 15], [[], 0], [[], 0], [[6, 3], 18], [[-2, 0, -1, 2, 0, 9, -7], 4], [[-4, 20, -30, 15], 0], [[-11, 16, -3, -2, 1], 3], [[4, -19, 29, -15, 2], 1], [[-1], 7], [[-8, 42, -58, 21], 0], [[9, -39, 51, -27, 3], 1], [[], 0], [[1, -4, 9, -6, 1], 1], [[5, -26, 37, -18, 2], 1], [[-3, 6, -3], 2], [[-3, 6, -3], 2], [[], 0], [[-1, 2, -2], 2], [[-1], 10], [[], 0], [[1, -8, 14, -7, 1], 1], [[-3, 6, -2], 3], [[2, -13, 21, -10, 1], 1], [[], 0], [[-1], 7]], [[[189], 0], [[-9, 0, -40, 0, 45, -20, 45], 10], [[3, 0, 0, -36, 27, 0, 6, 0, 9, -12], 0], [[55, -100, 34], 0], [[12, -60, 78, -36, 3], 0], [[45, -60, 24], 0], [[6, -8, 0, 0, 2], 8], [[6, -30, 37, -14, 1], 0], [[3, 0, -9, 18, -3], 0], [[6, -24, 28, -10, 1], 0], [[-3, 6, -7, 1, 1, 3, -1, 1], 3], [[2, 1, 0, -2], 5], [[6, -24, 28, -10, 1], 0], [[3, -12, 12, -4], 0], [[1, -1, -2, 0, 0, -1], 4], [[3, -9, 6, -3], 0], [[2, 0, -2], 4], [[9, -42, 54, -22, 2], 0], [[2, -2], 4], [[1, 0, 0, 0, -1], 4], [[-1, 5, -5, 1], 1], [[2, -2], 2], [[-1, 2, -2], 1], [[1, -2], 3], [[1, -1], 3], [[1], 2], [[-5, 17, -18, 7], 1], [[5, -5, 1], 3], [[], 0], [[-2, 8, -9, 2], 1], [[-189], 28], [[-105, 84], 0], [[-27, 84, -66, 12], 0], [[-1, 2, 0, 16, -29, 18, 2, 8, -9, 8, -4], 0], [[-27, 84, -66, 12], 0], [[-9], 16], [[], 0], [[], 0], [[-3, -6], 14], [[7, -9, 0, -2, 1, 0, 2], 3], [[-15, 30, -20, 4], 0], [[-1, 2, 3, -16, 11], 0], [[-2, 15, -29, 19, -4], 0], [[1], 8], [[-21, 58, -42, 8], 0], [[-3, 27, -51, 39, -9], 0], [[], 0], [[-1, 6, -9, 4, -1], 0], [[-2, 18, -37, 26, -5], 0], [[3, -6, 3], 1], [[3, -6, 3], 1], [[], 0], [[2, -2, 1], 1], [[1], 7], [[], 0], [[-1, 7, -14, 8, -1], 0], [[2, -6, 3], 2], [[-1, 10, -21, 13, -2], 0], [[], 0], [[1], 6]], [[[189], 0], [[-6, 0, 0, 15, -20, -15, 0, 5, -30], 5], [[6, 0, 0, -48, 63, 0, -24], 0], [[76, -88, 25], 0], [[30, -72, 60, -24, 3], 0], [[60, -60, 9], 0], [[2, 0, 0, -8, 6], 6], [[19, -38, 25, -6], 0], [[6, 0, -21, 12], 0], [[16, -31, 19, -3], 0], [[1, 0, 0, -9, 18, -9, -8, 8], 0], [[-2, -1, 6, -2, -4], 3], [[16, -31, 19, -3], 0], [[9, -16, 6], 0], [[-5, 4, 0, -5, 3], 3], [[6, -12, 3], 0], [[-2, 0, 2], 3], [[24, -52, 40, -12, 1], 0], [[-2, 2], 3], [[-1, 3, 0, -3, 1], 3], [[2, -5, 4, -1], 0], [[1, -2, 1], 0], [[1, -2, 2], 0], [[-1, 2], 2], [[-1, 1], 2], [[-1], 1], [[5, -15, 17, -8, 2], 0], [[1, 0, -4, 6, -2], 0], [[], 0], [[3, -8, 7, -3], 0], [[189], 23], [[-120, 69], 0], [[-48, 84, -48, 9], 0], [[-4, 2, 0, 32, -52, 27, 16, -8], 0], [[-48, 84, -48, 9], 0], [[9], 11], [[], 0], [[], 0], [[-3], 13], [[-1, 0, 0, 14, -22, 0, 13, -3], 0], [[-25, 35, -9], 0], [[-4, 2, 12, -17, 4], 0], [[-10, 26, -23, 9, -1], 0], [[-1], 7], [[-38, 60, -28, 3], 0], [[-15, 42, -45, 21, -6], 0], [[], 0], [[-4, 10, -6, 1], 0], [[-12, 31, -30, 13, -2], 0], [[-3, 6, -3], 0], [[-3, 6, -3], 0], [[], 0], [[-1, 3, -1], 0], [[1], 7], [[], 0], [[-6, 13, -10, 2], 0], [[-1, 0, 7, -5], 0], [[-8, 19, -15, 5], 0], [[], 0], [[-1], 5]], [[[189], 0], [[-30, 5, 0, -15, -20, 15, 0, 0, -6], 17], [[-24, 0, 63, -48, 0, 0, 6], 6], [[25, -88, 76], 0], [[3, -24, 60, -72, 30], 0], [[9, -60, 60], 0], [[6, -8, 0, 0, 2], 14], [[-6, 25, -38, 19], 1], [[12, -21, 0, 6], 3], [[-3, 19, -31, 16], 1], [[8, -8, -9, 18, -9, 0, 0, 1], 7], [[-4, -2, 6, -1, -2], 9], [[-3, 19, -31, 16], 1], [[6, -16, 9], 2], [[3, -5, 0, 4, -5], 7], [[3, -12, 6], 2], [[2, 0, -2], 7], [[1, -12, 40, -52, 24], 0], [[2, -2], 6], [[1, -3, 0, 3, -1], 7], [[-1, 4, -5, 2], 3], [[1, -2, 1], 4], [[2, -2, 1], 4], [[2, -1], 5], [[1, -1], 5], [[-1], 5], [[2, -8, 17, -15, 5], 2], [[-2, 6, -4, 0, 1], 4], [[], 0], [[-3, 7, -8, 3], 3], [[-189], 40], [[-69, 120], 0], [[-9, 48, -84, 48], 0], [[8, -16, -27, 52, -32, 0, -2, 4], 6], [[-9, 48, -84, 48], 0], [[-9], 20], [[], 0], [[], 0], [[3], 20], [[3, -13, 0, 22, -14, 0, 0, 1], 6], [[9, -35, 25], 1], [[-4, 17, -12, -2, 4], 3], [[1, -9, 23, -26, 10], 1], [[1], 8], [[-3, 28, -60, 38], 0], [[6, -21, 45, -42, 15], 1], [[], 0], [[-1, 6, -10, 4], 2], [[2, -13, 30, -31, 12], 1], [[3, -6, 3], 3], [[3, -6, 3], 3], [[], 0], [[1, -3, 1], 3], [[-1], 10], [[], 0], [[-2, 10, -13, 6], 2], [[5, -7, 0, 1], 4], [[-5, 15, -19, 8], 2], [[], 0], [[1], 8]], [[[189], 0], [[5, 0, 0, -10, -9, 0, 15, 0, 0, -40], 6], [[6, 0, 0, -36, 54, 0, -12, 0, 9], 0], [[67, -94, 28], 0], [[21, -69, 69, -27, 3], 0], [[54, -60, 15], 0], [[2, 0, 0, -8, 6], 6], [[12, -36, 31, -8, 1], 0], [[6, 0, -18, 12, -3], 0], [[9, -33, 22, -4, 1], 0], [[-1, 0, -5, 13, -8, -3, 4, 0, -1], 1], [[1, 4, -2, -2], 4], [[11, -29, 23, -6], 0], [[6, -15, 9, -1], 0], [[-1, 3, 0, -2, 2, 1], 3], [[6, -9, 6], 0], [[-2, 0, 2], 3], [[17, -48, 47, -16, 1], 0], [[-1, -1, 3, -1], 2], [[-1, 2, 1, -2], 3], [[-3, 6, -3], 1], [[-1, 2, -1], 1], [[-2, 2, -1], 1], [[-1, 2], 2], [[-1, 1], 2], [[1], 2], [[2, -10, 18, -13, 4], 0], [[-1, -3, 6, -3], 1], [[], 0], [[1, -5, 8, -6, 1], 0], [[189], 25], [[-114, 75], 0], [[-36, 93, -48, 12], 0], [[-2, 4, 0, 20, -46, 24, 8, -4, -6, 3], 0], [[-39, 84, -57, 9], 0], [[9], 15], [[], 0], [[], 0], [[-3], 13], [[-1, 0, 0, 9, -17, 1, 6, -2, -1], 0], [[-21, 33, -14, 1], 0], [[-2, 4, 10, -16, 6, -1], 0], [[-5, 22, -28, 12, -2], 0], [[-1], 5], [[-30, 61, -33, 5], 0], [[-9, 36, -48, 30, -6], 0], [[], 0], [[-2, 9, -8, 2], 0], [[-7, 25, -34, 19, -3], 0], [[6, -6], 1], [[-1, 5, -5, 1], 0], [[], 0], [[-1, 2, -2], 0], [[1], 7], [[], 0], [[-3, 11, -12, 5], 0], [[-1, 0, 6, -5, 1], 0], [[-4, 15, -19, 8, -1], 0], [[], 0], [[-1], 5]], [[[189], 0], [[-40, 0, 0, 15, 0, -9, -10, 0, 0, 5], 15], [[9, 0, -12, 0, 54, -36, 0, 0, 6], 4], [[28, -94, 67], 0], [[3, -27, 69, -69, 21], 0], [[15, -60, 54], 0], [[6, -8, 0, 0, 2], 14], [[1, -8, 31, -36, 12], 0], [[-3, 12, -18, 0, 6], 2], [[1, -4, 22, -33, 9], 0], [[-1, 0, 4, -3, -8, 13, -5, 0, -1], 5], [[-2, -2, 4, 1], 9], [[-6, 23, -29, 11], 1], [[-1, 9, -15, 6], 1], [[1, 2, -2, 0, 3, -1], 6], [[6, -9, 6], 2], [[2, 0, -2], 7], [[1, -16, 47, -48, 17], 0], [[-1, 3, -1, -1], 5], [[-2, 1, 2, -1], 8], [[-3, 6, -3], 3], [[-1, 2, -1], 3], [[-1, 2, -2], 3], [[2, -1], 5], [[1, -1], 5], [[1], 4], [[4, -13, 18, -10, 2], 2], [[-3, 6, -3, -1], 4], [[], 0], [[1, -6, 8, -5, 1], 2], [[-189], 38], [[-75, 114], 0], [[-12, 48, -93, 36], 0], [[-3, 6, 4, -8, -24, 46, -20, 0, -4, 2], 4], [[-9, 57, -84, 39], 0], [[-9], 16], [[], 0], [[], 0], [[3], 20], [[1, 2, -6, -1, 17, -9, 0, 0, 1], 5], [[-1, 14, -33, 21], 0], [[1, -6, 16, -10, -4, 2], 2], [[2, -12, 28, -22, 5], 1], [[1], 10], [[-5, 33, -61, 30], 0], [[6, -30, 48, -36, 9], 1], [[], 0], [[-2, 8, -9, 2], 2], [[3, -19, 34, -25, 7], 1], [[6, -6], 3], [[-1, 5, -5, 1], 2], [[], 0], [[2, -2, 1], 3], [[-1], 10], [[], 0], [[-5, 12, -11, 3], 2], [[-1, 5, -6, 0, 1], 3], [[1, -8, 19, -15, 4], 1], [[], 0], [[1], 8]], [[[210], 0], [[45, 0, 15, 0, -9, -10, 15, 0, 0, -6], 16], [[9, 0, -12, 0, 54, -56, 0, 0, 7], 4], [[28, -104, 78], 0], [[2, -27, 75, -81, 25], 0], [[15, -65, 65], 0], [[-8, 9, 0, 2], 15], [[-8, 34, -42, 16], 1], [[-3, 12, -18, 0, 7], 2], [[-5, 26, -34, 15], 1], [[1, 4, -2, -10, 18, -8, 0, -1], 6], [[1, -2, -2, 4, -1, -2], 8], [[-5, 25, -36, 14], 1], [[-1, 10, -18, 9], 1], [[1, 0, -2, 0, 4, -4], 6], [[6, -14, 7], 2], [[1, -2], 8], [[1, -14, 51, -59, 20], 0], [[3, -1], 6], [[3, -1], 10], [[-3, 7, -5, 1], 3], [[-1, 3, -2], 3], [[-1, 4, -3], 3], [[-1, 2, -1], 4], [[1, -1], 5], [[1, -1], 4], [[2, -14, 23, -14, 2], 2], [[-3, 6, -3, -1], 4], [[1], 4], [[-6, 12, -7, 1], 3], [[210], 39], [[-80, 130], 0], [[-8, 60, -96, 46], 0], [[9, 4, -8, -24, 54, -32, 0, -4, 3], 5], [[-9, 57, -99, 45], 0], [[10, 0, 5], 17], [[3], 13], [[-2, 2], 14], [[-2], 21], [[1, 2, -4, -1, 19, -16, 0, 0, 1], 5], [[-1, 14, -38, 27], 0], [[-7, 16, -10, -4, 3], 3], [[1, -13, 31, -28, 7], 1], [[], 0], [[-4, 35, -69, 37], 0], [[5, -28, 57, -45, 10], 1], [[-2, 1], 16], [[-2, 10, -12, 3], 2], [[2, -17, 41, -32, 8], 1], [[-1, 6, -6, 3], 2], [[-1, 6, -7, 2], 2], [[], 0], [[3, -4, 1], 3], [[], 0], [[], 0], [[-4, 15, -15, 4], 2], [[-1, 5, -6, 0, 1], 3], [[-8, 22, -20, 5], 2], [[1], 7], [[], 0]], [[[210], 0], [[-6, 0, 0, 15, -10, -9, 0, 15, 0, 45], 5], [[7, 0, 0, -56, 54, 0, -12, 0, 9], 0], [[78, -104, 28], 0], [[25, -81, 75, -27, 2], 0], [[65, -65, 15], 0], [[2, 0, 9, -8], 6], [[16, -42, 34, -8], 0], [[7, 0, -18, 12, -3], 0], [[15, -34, 26, -5], 0], [[-1, 0, -8, 18, -10, -2, 4, 1], 1], [[-2, -1, 4, -2, -2, 1], 3], [[14, -36, 25, -5], 0], [[9, -18, 10, -1], 0], [[-4, 4, 0, -2, 0, 1], 3], [[7, -14, 6], 0], [[-2, 1], 3], [[20, -59, 51, -14, 1], 0], [[-1, 3], 3], [[-1, 3], 3], [[1, -5, 7, -3], 0], [[-2, 3, -1], 1], [[-3, 4, -1], 1], [[-1, 2, -1], 2], [[-1, 1], 2], [[-1, 1], 1], [[2, -14, 23, -14, 2], 0], [[-1, -3, 6, -3], 1], [[1], 2], [[1, -7, 12, -6], 0], [[-210], 24], [[-130, 80], 0], [[-46, 96, -60, 8], 0], [[-3, 4, 0, 32, -54, 24, 8, -4, -9], 0], [[-45, 99, -57, 9], 0], [[-5, 0, -10], 12], [[-3], 8], [[-2, 2], 8], [[2], 12], [[-1, 0, 0, 16, -19, 1, 4, -2, -1], 0], [[-27, 38, -14, 1], 0], [[-3, 4, 10, -16, 7], 0], [[-7, 28, -31, 13, -1], 0], [[], 0], [[-37, 69, -35, 4], 0], [[-10, 45, -57, 28, -5], 0], [[-1, 2], 8], [[-3, 12, -10, 2], 0], [[-8, 32, -41, 17, -2], 0], [[-3, 6, -6, 1], 0], [[-2, 7, -6, 1], 0], [[], 0], [[-1, 4, -3], 0], [[], 0], [[], 0], [[-4, 15, -15, 4], 0], [[-1, 0, 6, -5, 1], 0], [[-5, 20, -22, 8], 0], [[-1], 4], [[], 0]], [[[210], 0], [[-30, 30, -40, 30, -30, 50], 13], [[-4, 18, 0, -52, 0, 36, -12], 3], [[50, -100, 60], 0], [[15, -46, 72, -58, 19], 0], [[25, -75, 35], 0], [[-12, 0, 6], 12], [[5, -18, 31, -24, 9], 0], [[-6, 24, -12], 2], [[3, -11, 22, -20, 4], 0], [[1, 0, -11, 19, -13, -1, 4, -1], 4], [[-2, 4, -2, -2], 7], [[2, -13, 22, -18, 5], 0], [[-3, 8, -6, 1], 1], [[-3, 8, -5, 0, 1], 6], [[-1, 5, -3], 1], [[-4, 2], 6], [[8, -30, 47, -37, 13], 0], [[-1, 2], 5], [[-1, 5, -3], 6], [[-1, 1, -1], 3], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[1, -3, 7, -10, 10, -6, 2], 0], [[2, -3, 3, -1], 3], [[], 0], [[-1, 2, -3, 3, -2, 1], 1], [[210], 33], [[-100, 110], 0], [[-28, 66, -84, 32], 0], [[4, -12, 6, 28, -24, -12, 28, -8], 3], [[-26, 72, -78, 34], 0], [[-5, 0, -15, 0, 5], 15], [[-6], 11], [[-2, 6, -1], 11], [[6], 17], [[-1, 0, 19, -24, 0, 5, -1], 4], [[-3, 22, -28, 7], 0], [[4, -14, 16, -8], 2], [[-2, 7, -16, 19, -13, 3], 0], [[], 0], [[-14, 47, -53, 21], 0], [[-5, 19, -36, 41, -26, 8], 0], [[2, -4], 12], [[1, -2, 4, -2], 1], [[-3, 12, -23, 26, -17, 6], 0], [[2, -1], 3], [[-1, 1, -1], 2], [[], 0], [[], 0], [[], 0], [[], 0], [[2, -5, 6, -4, 1], 1], [[-3, 5, -1], 3], [[-1, 5, -10, 12, -8, 3], 0], [[], 0], [[], 0]], [[[210], 0], [[50, -30, 30, -40, 30, -30], 12], [[-12, 36, 0, -52, 0, 18, -4], 3], [[60, -100, 50], 0], [[19, -58, 72, -46, 15], 0], [[35, -75, 25], 0], [[6, 0, -12], 10], [[9, -24, 31, -18, 5], 0], [[-12, 24, -6], 2], [[4, -20, 22, -11, 3], 0], [[-1, 4, -1, -13, 19, -11, 0, 1], 3], [[-2, -2, 4, -2], 6], [[5, -18, 22, -13, 2], 0], [[1, -6, 8, -3], 0], [[1, 0, -5, 8, -3], 4], [[-3, 5, -1], 1], [[2, -4], 5], [[13, -37, 47, -30, 8], 0], [[2, -1], 4], [[-3, 5, -1], 6], [[-1, 1, -1], 1], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[2, -6, 10, -10, 7, -3, 1], 0], [[-1, 3, -3, 2], 2], [[], 0], [[1, -2, 3, -3, 2, -1], 0], [[-210], 30], [[-110, 100], 0], [[-32, 84, -66, 28], 0], [[8, -28, 12, 24, -28, -6, 12, -4], 3], [[-34, 78, -72, 26], 0], [[-5, 0, 15, 0, 5], 12], [[6], 10], [[1, -6, 2], 10], [[-6], 16], [[1, -5, 0, 24, -19, 0, 1], 3], [[-7, 28, -22, 3], 0], [[8, -16, 14, -4], 2], [[-3, 13, -19, 16, -7, 2], 0], [[], 0], [[-21, 53, -47, 14], 0], [[-8, 26, -41, 36, -19, 5], 0], [[4, -2], 12], [[2, -4, 2, -1], 1], [[-6, 17, -26, 23, -12, 3], 0], [[1, -2], 1], [[1, -1, 1], 1], [[], 0], [[], 0], [[], 0], [[], 0], [[-1, 4, -6, 5, -2], 0], [[1, -5, 3], 2], [[-3, 8, -12, 10, -5, 1], 0], [[], 0], [[], 0]], [[[216], 0], [[-10, 0, 0, 10, -30, 0, -24, 30], 9], [[-24, 54, 0, -24, 0, 18], 3], [[68, -104, 44], 0], [[21, -69, 75, -39, 12], 0], [[45, -75, 21], 0], [[-3, 0, 6, 0, -3], 8], [[12, -30, 32, -16, 2], 0], [[-18, 24, -6], 2], [[6, -27, 23, -8, 2], 0], [[-2, 9, -5, -6, 13, -5, -1, 1], 3], [[2, -2, -2, 2], 5], [[8, -23, 24, -10, 1], 0], [[3, -9, 9, -2], 0], [[-1, 2, -1, -4, 5, -3, -1], 3], [[-6, 3], 1], [[1, 2, -3], 4], [[16, -45, 49, -26, 5], 0], [[-1, 4, -3], 3], [[1, 0, -3, 3, -1], 4], [[-2, 3, -1], 1], [[-1], 1], [[1, -1], 3], [[], 0], [[], 0], [[1], 3], [[2, -9, 14, -11, 5, -2], 0], [[-2, 5, -4, 2], 2], [[-1, 1], 2], [[1, -4, 5, -3, 2], 0], [[216], 28], [[-120, 96], 0], [[-36, 96, -60, 24], 0], [[16, -38, 24, 12, -12, -6, 12], 3], [[-39, 87, -69, 21], 0], [[-9], 16], [[], 0], [[], 0], [[], 0], [[3, -13, 1, 15, -10, -1, 1], 3], [[-12, 33, -19, 2], 0], [[10, -20, 14, -4], 2], [[-4, 18, -24, 14, -5, 1], 0], [[1], 8], [[-27, 59, -45, 10], 0], [[-9, 33, -48, 33, -15, 3], 0], [[], 0], [[4, -5], 1], [[-7, 23, -30, 22, -9, 1], 0], [[3, -3], 1], [[-1, 2, -2, 1], 0], [[-1], 4], [[1, -1], 2], [[], 0], [[], 0], [[-2, 7, -8, 5, -1], 0], [[3, -7, 3], 2], [[-4, 12, -14, 10, -3], 0], [[], 0], [[1], 6]], [[[216], 0], [[30, -24, 0, -30, 10, 0, 0, -10], 14], [[18, 0, -24, 0, 54, -24], 4], [[44, -104, 68], 0], [[12, -39, 75, -69, 21], 0], [[21, -75, 45], 0], [[-3, 0, 6, 0, -3], 12], [[2, -16, 32, -30, 12], 0], [[-6, 24, -18], 2], [[2, -8, 23, -27, 6], 0], [[1, -1, -5, 13, -6, -5, 9, -2], 4], [[2, -2, -2, 2], 8], [[1, -10, 24, -23, 8], 0], [[-2, 9, -9, 3], 1], [[-1, -3, 5, -4, -1, 2, -1], 5], [[3, -6], 2], [[-3, 2, 1], 6], [[5, -26, 49, -45, 16], 0], [[-3, 4, -1], 5], [[-1, 3, -3, 0, 1], 6], [[-1, 3, -2], 3], [[-1], 5], [[-1, 1], 2], [[], 0], [[], 0], [[1], 3], [[-2, 5, -11, 14, -9, 2], 1], [[2, -4, 5, -2], 3], [[1, -1], 3], [[2, -3, 5, -4, 1], 2], [[-216], 35], [[-96, 120], 0], [[-24, 60, -96, 36], 0], [[-12, 6, 12, -12, -24, 38, -16], 4], [[-21, 69, -87, 39], 0], [[9], 15], [[], 0], [[], 0], [[], 0], [[-1, 1, 10, -15, -1, 13, -3], 4], [[-2, 19, -33, 12], 0], [[4, -14, 20, -10], 2], [[-1, 5, -14, 24, -18, 4], 0], [[-1], 7], [[-10, 45, -59, 27], 0], [[-3, 15, -33, 48, -33, 9], 0], [[], 0], [[5, -4], 3], [[-1, 9, -22, 30, -23, 7], 0], [[3, -3], 3], [[-1, 2, -2, 1], 2], [[1], 5], [[1, -1], 2], [[], 0], [[], 0], [[1, -5, 8, -7, 2], 1], [[-3, 7, -3], 3], [[3, -10, 14, -12, 4], 1], [[], 0], [[-1], 7]], [[[280], 0], [[15, 0, -9, 0, 5, 0, 45, -96], 8], [[4, 0, 0, -56, 54, 0, -20, 0, 18, -8], 0], [[88, -144, 48], 0], [[24, -90, 114, -46, 6], 0], [[70, -90, 30], 0], [[9, -8, 0, 0, 9], 8], [[13, -46, 51, -18, 1], 0], [[4, 0, -18, 20, -6], 0], [[12, -36, 38, -14], 0], [[-4, 15, -9, -4, 4, -1, -1], 3], [[-1, 2, 0, -2, 1], 4], [[11, -38, 38, -12, 1], 0], [[6, -18, 16, -4], 0], [[4, -1, -2, 2, 0, -1], 4], [[4, -14, 10, -2], 0], [[1, 0, -3], 4], [[17, -67, 74, -29, 3], 0], [[2, -3], 4], [[1, 0, -1, 2, -1], 4], [[-3, 7, -6, 1], 1], [[-1, 3, -2], 1], [[-1, 4, -3], 1], [[-1, 2, -1], 2], [[1], 3], [[1, -1], 2], [[1, -10, 26, -24, 7], 0], [[-2, 6, -5, 1], 2], [[1, -1], 2], [[-5, 13, -10, 2], 1], [[280], 27], [[-160, 120], 0], [[-48, 120, -96, 16], 0], [[-2, 2, 0, 24, -62, 24, 12, -8, -12, 14], 0], [[-46, 126, -90, 18], 0], [[1, 0, -5, 0, 15, -16, 15], 9], [[10], 9], [[4, -6, 3], 9], [[], 0], [[12, -15, 1, 6, -4, -1, 1], 3], [[-24, 46, -26, 4], 0], [[-2, 2, 10, -20, 12, -2], 0], [[-5, 25, -41, 25, -4], 0], [[], 0], [[-36, 86, -58, 10], 0], [[-8, 43, -77, 50, -11, 1], 0], [[1, -2, 1, -2], 9], [[-2, 8, -14, 6], 0], [[-5, 32, -53, 32, -7], 0], [[-1, 5, -7, 4], 0], [[-1, 5, -8, 3], 0], [[], 0], [[3, -4, 1], 1], [[], 0], [[1], 3], [[-2, 13, -19, 9, -1], 0], [[4, -7, 3], 2], [[-3, 18, -29, 16, -2], 0], [[], 0], [[], 0]], [[[280], 0], [[-96, 45, 0, 5, 0, -9, 0, 15], 15], [[-8, 18, 0, -20, 0, 54, -56, 0, 0, 4], 3], [[48, -144, 88], 0], [[6, -46, 114, -90, 24], 0], [[30, -90, 70], 0], [[9, 0, 0, -8, 9], 12], [[1, -18, 51, -46, 13], 0], [[-6, 20, -18, 0, 4], 2], [[-14, 38, -36, 12], 1], [[-1, -1, 4, -4, -9, 15, -4], 5], [[1, -2, 0, 2, -1], 8], [[1, -12, 38, -38, 11], 0], [[-4, 16, -18, 6], 1], [[-1, 0, 2, -2, -1, 4], 5], [[-2, 10, -14, 4], 1], [[-3, 0, 1], 6], [[3, -29, 74, -67, 17], 0], [[-3, 2], 5], [[-1, 2, -1, 0, 1], 6], [[1, -6, 7, -3], 2], [[-2, 3, -1], 3], [[-3, 4, -1], 3], [[-1, 2, -1], 4], [[1], 5], [[-1, 1], 3], [[7, -24, 26, -10, 1], 2], [[1, -5, 6, -2], 3], [[-1, 1], 3], [[2, -10, 13, -5], 2], [[-280], 36], [[-120, 160], 0], [[-16, 96, -120, 48], 0], [[-14, 12, 8, -12, -24, 62, -24, 0, -2, 2], 4], [[-18, 90, -126, 46], 0], [[-15, 16, -15, 0, 5, 0, -1], 16], [[-10], 12], [[-3, 6, -4], 12], [[], 0], [[-1, 1, 4, -6, -1, 15, -12], 4], [[-4, 26, -46, 24], 0], [[2, -12, 20, -10, -2, 2], 2], [[4, -25, 41, -25, 5], 1], [[], 0], [[-10, 58, -86, 36], 0], [[-1, 11, -50, 77, -43, 8], 0], [[2, -1, 2, -1], 13], [[-6, 14, -8, 2], 2], [[7, -32, 53, -32, 5], 1], [[-4, 7, -5, 1], 2], [[-3, 8, -5, 1], 2], [[], 0], [[-1, 4, -3], 2], [[], 0], [[-1], 4], [[1, -9, 19, -13, 2], 1], [[-3, 7, -4], 3], [[2, -16, 29, -18, 3], 1], [[], 0], [[], 0]], [[[280], 0], [[-24, 75, -30, 5, 0, 9, -10, 15], 15], [[18, 0, -28, 0, 72, -40, 0, 0, 2], 4], [[52, -136, 92], 0], [[9, -53, 99, -87, 32], 0], [[25, -95, 65], 0], [[-3, 0, 6, -8, -3], 12], [[2, -18, 42, -44, 16], 0], [[-6, 28, -24, 0, 2], 2], [[-13, 33, -30, 14], 1], [[-1, -4, 12, -10, -9, 13, -5], 5], [[3, -4, -2, 4, -1], 8], [[1, -11, 32, -34, 12], 0], [[-2, 12, -15, 5], 1], [[-1, 0, 5, -5, -1, 4, -1], 5], [[5, -10, 2], 2], [[-3, 2, 1], 6], [[5, -30, 65, -63, 22], 0], [[-3, 2, -1], 5], [[-1, 3, -3, 0, 1], 6], [[1, -2, 3, -3, 1], 2], [[1, -1], 4], [[1, 0, -1], 3], [[-1, 2, -1], 4], [[1], 5], [[1, -1], 3], [[-1, 8, -15, 19, -13, 3], 1], [[1, -6, 7, -3], 3], [[1, -1], 3], [[2, -5, 8, -6, 1], 2], [[280], 36], [[-120, 160], 0], [[-20, 96, -108, 56], 0], [[-6, 12, 12, -16, -30, 58, -24, 0, 0, 2], 4], [[-23, 87, -117, 53], 0], [[-15, 16, -5, 0, 0, 0, -1], 16], [[-8], 12], [[-2, 4, -4], 12], [[], 0], [[-1, 1, 10, -17, -1, 19, -7], 4], [[-2, 23, -45, 20], 0], [[2, -16, 26, -14, 0, 2], 2], [[6, -21, 31, -24, 8], 1], [[], 0], [[-11, 55, -81, 38], 0], [[-2, 16, -46, 62, -46, 13], 0], [[-1, 2, -1], 14], [[-3, 6, -6, 2], 2], [[-1, 9, -28, 42, -33, 9], 0], [[-2, 3, -3, 2], 2], [[-1, 4, -4, 1], 2], [[], 0], [[1, 0, -1], 2], [[], 0], [[1], 4], [[1, -6, 13, -11, 3], 1], [[-3, 9, -5], 3], [[3, -12, 21, -18, 5], 1], [[], 0], [[], 0]], [[[280], 0], [[15, -10, 9, 0, 5, -30, 75, -24], 8], [[2, 0, 0, -40, 72, 0, -28, 0, 18], 0], [[92, -136, 52], 0], [[32, -87, 99, -53, 9], 0], [[65, -95, 25], 0], [[-3, -8, 6, 0, -3], 8], [[16, -44, 42, -18, 2], 0], [[2, 0, -24, 28, -6], 0], [[14, -30, 33, -13], 0], [[-5, 13, -9, -10, 12, -4, -1], 3], [[-1, 4, -2, -4, 3], 4], [[12, -34, 32, -11, 1], 0], [[5, -15, 12, -2], 0], [[-1, 4, -1, -5, 5, 0, -1], 3], [[2, -10, 5], 0], [[1, 2, -3], 4], [[22, -63, 65, -30, 5], 0], [[-1, 2, -3], 3], [[1, 0, -3, 3, -1], 4], [[1, -3, 3, -2, 1], 0], [[-1, 1], 1], [[-1, 0, 1], 1], [[-1, 2, -1], 2], [[1], 3], [[-1, 1], 2], [[3, -13, 19, -15, 8, -1], 0], [[-3, 7, -6, 1], 2], [[-1, 1], 2], [[1, -6, 8, -5, 2], 0], [[-280], 27], [[-160, 120], 0], [[-56, 108, -96, 20], 0], [[-2, 0, 0, 24, -58, 30, 16, -12, -12, 6], 0], [[-53, 117, -87, 23], 0], [[1, 0, 0, 0, 5, -16, 15], 9], [[8], 9], [[4, -4, 2], 9], [[], 0], [[7, -19, 1, 17, -10, -1, 1], 3], [[-20, 45, -23, 2], 0], [[-2, 0, 14, -26, 16, -2], 0], [[-8, 24, -31, 21, -6], 0], [[], 0], [[-38, 81, -55, 11], 0], [[-13, 46, -62, 46, -16, 2], 0], [[1, -2, 1], 9], [[-2, 6, -6, 3], 0], [[-9, 33, -42, 28, -9, 1], 0], [[-2, 3, -3, 2], 0], [[-1, 4, -4, 1], 0], [[], 0], [[1, 0, -1], 1], [[], 0], [[-1], 3], [[-3, 11, -13, 6, -1], 0], [[5, -9, 3], 2], [[-5, 18, -21, 12, -3], 0], [[], 0], [[], 0]], [[[315], 0], [[15, -10, -24, 0, 5, -30, 75, -76], 8], [[3, 0, 0, -52, 72, 0, -58, 0, 18, -4], 0], [[102, -156, 57], 0], [[33, -99, 117, -57, 9], 0], [[75, -105, 30], 0], [[3, -8, 6, 0, -10], 8], [[17, -50, 51, -20, 2], 0], [[3, 0, -24, 22, -6], 0], [[15, -36, 39, -15], 0], [[-5, 15, -8, -13, 18, -4], 3], [[-1, 2, -1, -4, 7], 4], [[13, -40, 38, -13, 1], 0], [[6, -18, 15, -3], 0], [[-1, 4, 0, -8, 5], 3], [[3, -13, 11, -1], 0], [[-1, 2, 2], 4], [[23, -72, 77, -33, 5], 0], [[-1, 2, -1], 3], [[-2, 1, 1], 6], [[1, -3, 5, -4, 1], 0], [[-1, 2, -1], 1], [[-1, 3, -3], 1], [[-1, 1, -1], 2], [[1, -1], 3], [[1, -1], 2], [[3, -13, 24, -21, 8, -1], 0], [[-3, 6, -4, 1], 2], [[1], 2], [[1, -6, 11, -8, 2], 0], [[315], 27], [[-180, 135], 0], [[-60, 126, -108, 21], 0], [[-2, 1, 0, 28, -66, 30, 36, -22, -12, 10], 0], [[-57, 135, -99, 24], 0], [[-1, 0, 5, 0, -15, 16, -5], 9], [[-9], 9], [[-3, 6, -3], 9], [[-6, 1], 14], [[10, -17, 1, 23, -13, -1], 3], [[-24, 51, -27, 3], 0], [[-2, 1, 14, -22, 14, -2], 0], [[-8, 27, -39, 25, -6], 0], [[], 0], [[-42, 93, -63, 12], 0], [[-13, 50, -76, 53, -16, 2], 0], [[2, -1, 2], 10], [[-2, 8, -12, 6], 0], [[-9, 36, -52, 33, -9, 1], 0], [[-2, 4, -5, 3], 0], [[-1, 5, -6, 2], 0], [[], 0], [[2, -4, 1], 1], [[-1], 8], [[], 0], [[-3, 13, -17, 8, -1], 0], [[5, -7, 2], 2], [[-5, 20, -27, 15, -3], 0], [[1], 5], [[], 0]], [[[315], 0], [[-76, 75, -30, 5, 0, -24, -10, 15], 15], [[-4, 18, 0, -58, 0, 72, -52, 0, 0, 3], 3], [[57, -156, 102], 0], [[9, -57, 117, -99, 33], 0], [[30, -105, 75], 0], [[-10, 0, 6, -8, 3], 12], [[2, -20, 51, -50, 17], 0], [[-6, 22, -24, 0, 3], 2], [[-15, 39, -36, 15], 1], [[-4, 18, -13, -8, 15, -5], 6], [[7, -4, -1, 2, -1], 8], [[1, -13, 38, -40, 13], 0], [[-3, 15, -18, 6], 1], [[5, -8, 0, 4, -1], 7], [[-1, 11, -13, 3], 1], [[2, 2, -1], 6], [[5, -33, 77, -72, 23], 0], [[-1, 2, -1], 5], [[1, 1, -2], 6], [[1, -4, 5, -3, 1], 2], [[-1, 2, -1], 3], [[-3, 3, -1], 3], [[-1, 1, -1], 4], [[-1, 1], 4], [[-1, 1], 3], [[-1, 8, -21, 24, -13, 3], 1], [[1, -4, 6, -3], 3], [[1], 4], [[2, -8, 11, -6, 1], 2], [[-315], 36], [[-135, 180], 0], [[-21, 108, -126, 60], 0], [[-10, 12, 22, -36, -30, 66, -28, 0, -1, 2], 4], [[-24, 99, -135, 57], 0], [[5, -16, 15, 0, -5, 0, 1], 16], [[9], 12], [[3, -6, 3], 12], [[-1, 6], 18], [[1, 13, -23, -1, 17, -10], 5], [[-3, 27, -51, 24], 0], [[2, -14, 22, -14, -1, 2], 2], [[6, -25, 39, -27, 8], 1], [[], 0], [[-12, 63, -93, 42], 0], [[-2, 16, -53, 76, -50, 13], 0], [[-2, 1, -2], 13], [[-6, 12, -8, 2], 2], [[-1, 9, -33, 52, -36, 9], 0], [[-3, 5, -4, 2], 2], [[-2, 6, -5, 1], 2], [[], 0], [[-1, 4, -2], 2], [[1], 9], [[], 0], [[1, -8, 17, -13, 3], 1], [[-2, 7, -5], 3], [[3, -15, 27, -20, 5], 1], [[-1], 6], [[], 0]], [[[336], 0], [[15, 0, 15, 0, 45, -96, 45, 0, -40], 10], [[2, 0, 0, -40, 54, 0, -12, 0, 36, -24], 0], [[88, -176, 72], 0], [[18, -94, 138, -74, 12], 0], [[66, -110, 50], 0], [[-8, 0, 0, 2], 9], [[8, -44, 64, -32, 4], 0], [[2, 0, -18, 28, -12], 0], [[6, -36, 48, -22, 4], 0], [[-1, 9, -8, 0, 5, -1, -6, 2], 3], [[2, -2, -2, 2], 5], [[7, -34, 48, -24, 3], 0], [[3, -15, 21, -9, 1], 0], [[1, -1, 1, 2, -1, -1, 1], 4], [[2, -10, 12, -6], 0], [[-2], 6], [[13, -63, 94, -49, 7], 0], [[3, -3, 2], 4], [[-1, 0, -1], 6], [[-1, 6, -8, 3], 1], [[2, -3, 1], 2], [[2, -3, 1], 2], [[2, -2], 3], [[1, -1], 3], [[-1], 3], [[-6, 23, -31, 16, -2], 1], [[-1, 6, -8, 3], 2], [[], 0], [[-2, 10, -14, 7], 1], [[336], 30], [[-176, 160], 0], [[-40, 144, -120, 32], 0], [[2, 0, 16, -48, 30, 0, -12, -24, 28, -8], 1], [[-42, 138, -126, 30], 0], [[-5, 16, -10, 0, 5], 14], [[-6], 10], [[-3, 4, -1], 10], [[], 0], [[5, -12, 2, 5, -3, -2, 6, -1], 3], [[-18, 48, -40, 10], 0], [[2, 8, -26, 20, -4], 1], [[-2, 20, -45, 37, -11, 1], 0], [[1], 6], [[-30, 94, -82, 20], 0], [[-5, 37, -84, 73, -25, 2], 0], [[-1, 2, -3], 10], [[6, -12, 10, -2], 1], [[-3, 25, -57, 51, -15, 1], 0], [[3, -9, 5, -1], 1], [[3, -8, 6, -1], 1], [[], 0], [[1, -3, 2], 1], [[], 0], [[], 0], [[-1, 8, -20, 16, -4], 0], [[3, -8, 6, -1], 2], [[-1, 13, -31, 26, -7], 0], [[], 0], [[1], 6]], [[[336], 0], [[-40, 0, 45, -96, 45, 0, 15, 0, 15], 12], [[-24, 36, 0, -12, 0, 54, -40, 0, 0, 2], 3], [[72, -176, 88], 0], [[12, -74, 138, -94, 18], 0], [[50, -110, 66], 0], [[2, 0, 0, -8], 12], [[4, -32, 64, -44, 8], 0], [[-12, 28, -18, 0, 2], 2], [[4, -22, 48, -36, 6], 0], [[2, -6, -1, 5, 0, -8, 9, -1], 4], [[2, -2, -2, 2], 8], [[3, -24, 48, -34, 7], 0], [[1, -9, 21, -15, 3], 0], [[1, -1, -1, 2, 1, -1, 1], 4], [[-6, 12, -10, 2], 1], [[-2], 6], [[7, -49, 94, -63, 13], 0], [[2, -3, 3], 4], [[-1, 0, -1], 6], [[3, -8, 6, -1], 2], [[1, -3, 2], 2], [[1, -3, 2], 2], [[-2, 2], 4], [[-1, 1], 4], [[-1], 3], [[-2, 16, -31, 23, -6], 1], [[3, -8, 6, -1], 3], [[], 0], [[7, -14, 10, -2], 2], [[-336], 33], [[-160, 176], 0], [[-32, 120, -144, 40], 0], [[8, -28, 24, 12, 0, -30, 48, -16, 0, -2], 3], [[-30, 126, -138, 42], 0], [[-5, 0, 10, -16, 5], 13], [[6], 11], [[1, -4, 3], 11], [[], 0], [[1, -6, 2, 3, -5, -2, 12, -5], 3], [[-10, 40, -48, 18], 0], [[4, -20, 26, -8, -2], 2], [[-1, 11, -37, 45, -20, 2], 0], [[-1], 9], [[-20, 82, -94, 30], 0], [[-2, 25, -73, 84, -37, 5], 0], [[3, -2, 1], 13], [[2, -10, 12, -6], 1], [[-1, 15, -51, 57, -25, 3], 0], [[1, -5, 9, -3], 1], [[1, -6, 8, -3], 1], [[], 0], [[-2, 3, -1], 2], [[], 0], [[], 0], [[4, -16, 20, -8, 1], 1], [[1, -6, 8, -3], 2], [[7, -26, 31, -13, 1], 1], [[], 0], [[-1], 7]], [[[378], 0], [[-15, 0, 5, -30, 75, -80, 45, -30], 10], [[3, 0, 0, -36, 72, 0, -60, 0, 27, -12], 0], [[110, -188, 80], 0], [[33, -108, 138, -84, 15], 0], [[75, -129, 45], 0], [[-8, 12, 0, -4], 9], [[14, -52, 62, -30, 6], 0], [[3, 0, -24, 36, -9], 0], [[11, -38, 47, -21, 3], 0], [[-4, 8, -7, -15, 25, -5, -1, 1], 3], [[2, -2, -4, 4, -2], 5], [[11, -38, 47, -21, 3], 0], [[3, -17, 18, -6], 0], [[1, 0, -8, 10], 4], [[3, -9, 12, -3], 0], [[4, -4], 5], [[22, -74, 93, -51, 9], 0], [[2, -2], 4], [[1, -5, 5, -1], 5], [[-2, 4, -4, 2], 1], [[1, -1], 2], [[-1, 1, -1, 1], 1], [[2, -2], 3], [[1, -1], 3], [[], 0], [[2, -12, 22, -24, 15, -4], 0], [[-2, 7, -8, 2], 2], [[], 0], [[1, -4, 9, -9, 5, -1], 0], [[378], 29], [[-204, 174], 0], [[-60, 150, -132, 36], 0], [[-2, 1, 0, 20, -52, 36, 36, -24, -18, 13, -8], 0], [[-60, 150, -132, 36], 0], [[-9], 13], [[], 0], [[], 0], [[6], 15], [[5, -14, 0, 27, -18, 0, 2], 3], [[-20, 55, -39, 6], 0], [[-2, 1, 12, -32, 22, -3], 0], [[-6, 26, -41, 34, -12, 1], 0], [[-2], 7], [[-40, 105, -83, 21], 0], [[-12, 51, -81, 72, -30, 3], 0], [[], 0], [[-2, 6, -10, 7, -2], 0], [[-8, 34, -56, 46, -18, 2], 0], [[3, -6, 3], 1], [[3, -6, 3], 1], [[], 0], [[1, -2, 1], 1], [[], 0], [[], 0], [[-2, 10, -17, 12, -3], 0], [[4, -10, 5], 2], [[-4, 17, -29, 21, -7, 1], 0], [[], 0], [[1], 6]], [[[378], 0], [[-30, 45, -80, 75, -30, 5, 0, -15], 13], [[-12, 27, 0, -60, 0, 72, -36, 0, 0, 3], 3], [[80, -188, 110], 0], [[15, -84, 138, -108, 33], 0], [[45, -129, 75], 0], [[-4, 0, 12, -8], 12], [[6, -30, 62, -52, 14], 0], [[-9, 36, -24, 0, 3], 2], [[3, -21, 47, -38, 11], 0], [[1, -1, -5, 25, -15, -7, 8, -4], 4], [[-2, 4, -4, -2, 2], 7], [[3, -21, 47, -38, 11], 0], [[-6, 18, -17, 3], 1], [[10, -8, 0, 1], 7], [[-3, 12, -9, 3], 1], [[-4, 4], 6], [[9, -51, 93, -74, 22], 0], [[-2, 2], 5], [[-1, 5, -5, 1], 6], [[2, -4, 4, -2], 2], [[-1, 1], 3], [[1, -1, 1, -1], 2], [[-2, 2], 4], [[-1, 1], 4], [[], 0], [[-4, 15, -24, 22, -12, 2], 1], [[2, -8, 7, -2], 3], [[], 0], [[-1, 5, -9, 9, -4, 1], 1], [[-378], 34], [[-174, 204], 0], [[-36, 132, -150, 60], 0], [[8, -13, 18, 24, -36, -36, 52, -20, 0, -1, 2], 3], [[-36, 132, -150, 60], 0], [[9], 18], [[], 0], [[], 0], [[-6], 18], [[-2, 0, 18, -27, 0, 14, -5], 4], [[-6, 39, -55, 20], 0], [[3, -22, 32, -12, -1, 2], 2], [[-1, 12, -34, 41, -26, 6], 0], [[2], 8], [[-21, 83, -105, 40], 0], [[-3, 30, -72, 81, -51, 12], 0], [[], 0], [[2, -7, 10, -6, 2], 1], [[-2, 18, -46, 56, -34, 8], 0], [[-3, 6, -3], 2], [[-3, 6, -3], 2], [[], 0], [[-1, 2, -1], 2], [[], 0], [[], 0], [[3, -12, 17, -10, 2], 1], [[-5, 10, -4], 3], [[-1, 7, -21, 29, -17, 4], 0], [[], 0], [[-1], 7]], [[[405], 0], [[75, -76, 45, -30, 50, 0, -9, -10], 14], [[-12, 27, 0, -66, 0, 81, -60, 0, 0, 3], 3], [[78, -204, 123], 0], [[15, -75, 153, -129, 33], 0], [[45, -135, 90], 0], [[-1, 0, 6, -8, 3], 12], [[3, -30, 69, -60, 18], 0], [[-9, 30, -27, 0, 3], 2], [[3, -18, 51, -51, 12], 0], [[-2, -8, 20, -11, -10, 13, -5], 5], [[8, -6, -1, 4], 8], [[2, -20, 52, -47, 14], 0], [[-6, 21, -21, 6], 1], [[-3, 5, -2, 0, 1, -1], 6], [[-3, 15, -15, 3], 1], [[-1, 2, -1], 6], [[7, -48, 103, -87, 25], 0], [[-1, 2, -1], 5], [[3, -3], 7], [[1, -6, 8, -3], 2], [[-2, 2, -1], 3], [[1, -3, 4, -1], 2], [[-2, 3], 4], [[-1, 1], 4], [[-1, 1], 3], [[-2, 12, -29, 31, -14, 2], 1], [[1, -7, 8, -2], 3], [[-1, 1], 3], [[4, -12, 13, -6, 1], 2], [[405], 35], [[-180, 225], 0], [[-36, 126, -180, 63], 0], [[4, -20, 15, 36, -30, -42, 67, -32, 0, -2, 1], 3], [[-33, 135, -171, 66], 0], [[], 0], [[], 0], [[], 0], [[-6, 3], 18], [[-1, 1, 15, -25, -1, 18, -10], 4], [[-6, 39, -63, 27], 0], [[4, -17, 32, -13, -2, 1], 2], [[-1, 9, -33, 53, -33, 6], 0], [[], 0], [[-18, 87, -117, 48], 0], [[-3, 24, -72, 99, -60, 12], 0], [[], 0], [[1, -8, 16, -10, 1], 1], [[-1, 14, -48, 67, -41, 9], 0], [[-3, 9, -6], 2], [[-4, 8, -5, 1], 2], [[-1], 5], [[-2, 5, -2], 2], [[1], 10], [[], 0], [[2, -13, 22, -14, 3], 1], [[-4, 9, -5], 3], [[5, -23, 35, -22, 5], 1], [[], 0], [[], 0]], [[[405], 0], [[-10, -9, 0, 50, -30, 45, -76, 75], 9], [[3, 0, 0, -60, 81, 0, -66, 0, 27, -12], 0], [[123, -204, 78], 0], [[33, -129, 153, -75, 15], 0], [[90, -135, 45], 0], [[3, -8, 6, 0, -1], 8], [[18, -60, 69, -30, 3], 0], [[3, 0, -27, 30, -9], 0], [[12, -51, 51, -18, 3], 0], [[-5, 13, -10, -11, 20, -8, -2], 3], [[4, -1, -6, 8], 5], [[14, -47, 52, -20, 2], 0], [[6, -21, 21, -6], 0], [[-1, 1, 0, -2, 5, -3], 3], [[3, -15, 15, -3], 0], [[-1, 2, -1], 4], [[25, -87, 103, -48, 7], 0], [[-1, 2, -1], 3], [[-3, 3], 6], [[-3, 8, -6, 1], 1], [[-1, 2, -2], 1], [[-1, 4, -3, 1], 1], [[3, -2], 3], [[1, -1], 3], [[1, -1], 2], [[2, -14, 31, -29, 12, -2], 0], [[-2, 8, -7, 1], 2], [[1, -1], 2], [[1, -6, 13, -12, 4], 0], [[-405], 28], [[-225, 180], 0], [[-63, 180, -126, 36], 0], [[-1, 2, 0, 32, -67, 42, 30, -36, -15, 20, -4], 0], [[-66, 171, -135, 33], 0], [[], 0], [[], 0], [[], 0], [[-3, 6], 14], [[10, -18, 1, 25, -15, -1, 1], 3], [[-27, 63, -39, 6], 0], [[-1, 2, 13, -32, 17, -4], 0], [[-6, 33, -53, 33, -9, 1], 0], [[], 0], [[-48, 117, -87, 18], 0], [[-12, 60, -99, 72, -24, 3], 0], [[], 0], [[-1, 10, -16, 8, -1], 0], [[-9, 41, -67, 48, -14, 1], 0], [[6, -9, 3], 1], [[-1, 5, -8, 4], 0], [[1], 4], [[2, -5, 2], 1], [[-1], 7], [[], 0], [[-3, 14, -22, 13, -2], 0], [[5, -9, 4], 2], [[-5, 22, -35, 23, -5], 0], [[], 0], [[], 0]], [[[420], 0], [[45, 0, 45, -136, 75, 0, 15, 0, -24], 12], [[-24, 45, 0, -52, 0, 72, -40, 0, 0, 3], 3], [[92, -216, 112], 0], [[16, -96, 168, -112, 28], 0], [[60, -140, 80], 0], [[-1, 0, 6, -8], 12], [[7, -38, 77, -54, 11], 0], [[-15, 32, -24, 0, 3], 2], [[4, -29, 57, -41, 9], 0], [[2, -5, -3, 16, -11, -8, 10, -1], 4], [[-1, -2, 4, -2, -3], 6], [[4, -29, 57, -41, 9], 0], [[1, -10, 24, -18, 3], 0], [[-1, 1, 4, -8, -1, 1], 5], [[-6, 17, -10, 3], 1], [[-1, 2], 6], [[10, -62, 112, -78, 18], 0], [[-4, 3], 5], [[2, -2, 1], 7], [[4, -8, 6, -1], 2], [[1, -3, 2], 2], [[1, -4, 3], 2], [[1, -2, 1], 3], [[-1, 1], 4], [[-1, 1], 3], [[-4, 20, -35, 26, -8, 1], 1], [[4, -8, 6, -2], 3], [[-1], 3], [[-1, 8, -15, 11, -3], 1], [[420], 33], [[-200, 220], 0], [[-40, 156, -168, 56], 0], [[8, -34, 27, 16, -36, -36, 60, -16, 0, -2, 1], 3], [[-40, 156, -168, 56], 0], [[5, 0, 0, 0, -5], 13], [[-3], 11], [[4, -1], 12], [[-4], 18], [[1, -5, 2, 14, -18, -2, 13, -5], 3], [[-11, 49, -59, 21], 0], [[6, -25, 28, -12, -2, 1], 2], [[-1, 15, -45, 51, -24, 4], 0], [[], 0], [[-26, 100, -116, 38], 0], [[-3, 34, -89, 99, -46, 9], 0], [[-1, 2], 13], [[2, -12, 15, -6, 1], 1], [[-2, 21, -60, 67, -32, 5], 0], [[1, -6, 9, -3], 1], [[1, -6, 9, -3], 1], [[], 0], [[-3, 4, -1], 2], [[], 0], [[], 0], [[5, -18, 22, -10, 1], 1], [[1, -6, 9, -4], 2], [[-1, 9, -30, 36, -16, 2], 0], [[-1], 6], [[], 0]], [[[420], 0], [[-24, 0, 15, 0, 75, -136, 45, 0, 45], 10], [[3, 0, 0, -40, 72, 0, -52, 0, 45, -24], 0], [[112, -216, 92], 0], [[28, -112, 168, -96, 16], 0], [[80, -140, 60], 0], [[-8, 6, 0, -1], 9], [[11, -54, 77, -38, 7], 0], [[3, 0, -24, 32, -15], 0], [[9, -41, 57, -29, 4], 0], [[-1, 10, -8, -11, 16, -3, -5, 2], 3], [[-3, -2, 4, -2, -1], 6], [[9, -41, 57, -29, 4], 0], [[3, -18, 24, -10, 1], 0], [[1, -1, -8, 4, 1, -1], 4], [[3, -10, 17, -6], 0], [[2, -1], 5], [[18, -78, 112, -62, 10], 0], [[3, -4], 4], [[1, -2, 2], 5], [[-1, 6, -8, 4], 1], [[2, -3, 1], 2], [[3, -4, 1], 2], [[1, -2, 1], 3], [[1, -1], 3], [[1, -1], 2], [[1, -8, 26, -35, 20, -4], 0], [[-2, 6, -8, 4], 2], [[-1], 3], [[-3, 11, -15, 8, -1], 1], [[-420], 30], [[-220, 200], 0], [[-56, 168, -156, 40], 0], [[-1, 2, 0, 16, -60, 36, 36, -16, -27, 34, -8], 0], [[-56, 168, -156, 40], 0], [[5, 0, 0, 0, -5], 14], [[3], 10], [[1, -4], 10], [[4], 15], [[5, -13, 2, 18, -14, -2, 5, -1], 3], [[-21, 59, -49, 11], 0], [[-1, 2, 12, -28, 25, -6], 0], [[-4, 24, -51, 45, -15, 1], 0], [[], 0], [[-38, 116, -100, 26], 0], [[-9, 46, -99, 89, -34, 3], 0], [[-2, 1], 11], [[-1, 6, -15, 12, -2], 0], [[-5, 32, -67, 60, -21, 2], 0], [[3, -9, 6, -1], 1], [[3, -9, 6, -1], 1], [[], 0], [[1, -4, 3], 1], [[], 0], [[], 0], [[-1, 10, -22, 18, -5], 0], [[4, -9, 6, -1], 2], [[-2, 16, -36, 30, -9, 1], 0], [[1], 5], [[], 0]], [[[512], 0], [[5, -30, 75, -100, 75, -30, 5], 12], [[-32, 72, 0, -80, 0, 72, -32], 3], [[128, -256, 128], 0], [[32, -128, 192, -128, 32], 0], [[80, -176, 80], 0], [[6, 0, -4, 0, 6], 10], [[12, -56, 84, -56, 12], 0], [[-24, 48, -24], 2], [[8, -40, 64, -40, 8], 0], [[-1, 6, -6, -14, 30, -14, -6, 6, -1], 3], [[-1, -4, 10, -4, -1], 6], [[8, -40, 64, -40, 8], 0], [[2, -14, 26, -14, 2], 0], [[1, -1, -5, 10, -5, -1, 1], 4], [[-8, 16, -8], 1], [[2, -4, 2], 5], [[20, -84, 128, -84, 20], 0], [[2, -4, 2], 4], [[-3, 6, -3], 6], [[-1, 4, -6, 4, -1], 1], [[1, -1, 1], 2], [[1, -2, 1], 2], [[1, -2, 1], 3], [[-1], 4], [[], 0], [[1, -9, 25, -34, 25, -9, 1], 0], [[-1, 6, -10, 6, -1], 2], [[], 0], [[-3, 9, -13, 9, -3], 1], [[512], 63 // 2], [[-256, 256], 0], [[-64, 192, -192, 64], 0], [[16, -52, 36, 40, -40, -36, 52, -16], 3], [[-64, 192, -192, 64], 0], [[-5, 0, 5, -16, 5, 0, -5], 25 // 2], [[8], 21 // 2], [[2, -8, 2], 21 // 2], [[], 0], [[2, -10, 2, 30, -30, -2, 10, -2], 3], [[-16, 64, -64, 16], 0], [[12, -36, 36, -12], 2], [[-4, 24, -52, 52, -24, 4], 0], [[2], 15 // 2], [[-40, 128, -128, 40], 0], [[-10, 52, -106, 106, -52, 10], 0], [[-2, 4, -2], 23 // 2], [[4, -12, 12, -4], 1], [[-6, 34, -70, 70, -34, 6], 0], [[2, -6, 6, -2], 1], [[2, -6, 6, -2], 1], [[1], 9 // 2], [[-2, 2], 2], [[], 0], [[-1], 7 // 2], [[-1, 8, -20, 20, -8, 1], 0], [[2, -10, 10, -2], 2], [[-2, 16, -34, 34, -16, 2], 0], [[], 0], [[-1], 13 // 2]], [[[512], 0], [[5, -30, 75, -100, 75, -30, 5], 12], [[-32, 72, 0, -80, 0, 72, -32], 3], [[128, -256, 128], 0], [[32, -128, 192, -128, 32], 0], [[80, -176, 80], 0], [[6, 0, -4, 0, 6], 10], [[12, -56, 84, -56, 12], 0], [[-24, 48, -24], 2], [[8, -40, 64, -40, 8], 0], [[-1, 6, -6, -14, 30, -14, -6, 6, -1], 3], [[-1, -4, 10, -4, -1], 6], [[8, -40, 64, -40, 8], 0], [[2, -14, 26, -14, 2], 0], [[1, -1, -5, 10, -5, -1, 1], 4], [[-8, 16, -8], 1], [[2, -4, 2], 5], [[20, -84, 128, -84, 20], 0], [[2, -4, 2], 4], [[-3, 6, -3], 6], [[-1, 4, -6, 4, -1], 1], [[1, -1, 1], 2], [[1, -2, 1], 2], [[1, -2, 1], 3], [[-1], 4], [[], 0], [[1, -9, 25, -34, 25, -9, 1], 0], [[-1, 6, -10, 6, -1], 2], [[], 0], [[-3, 9, -13, 9, -3], 1], [[-512], 63 // 2], [[-256, 256], 0], [[-64, 192, -192, 64], 0], [[16, -52, 36, 40, -40, -36, 52, -16], 3], [[-64, 192, -192, 64], 0], [[5, 0, -5, 16, -5, 0, 5], 25 // 2], [[-8], 21 // 2], [[-2, 8, -2], 21 // 2], [[], 0], [[2, -10, 2, 30, -30, -2, 10, -2], 3], [[-16, 64, -64, 16], 0], [[12, -36, 36, -12], 2], [[-4, 24, -52, 52, -24, 4], 0], [[-2], 15 // 2], [[-40, 128, -128, 40], 0], [[-10, 52, -106, 106, -52, 10], 0], [[2, -4, 2], 23 // 2], [[4, -12, 12, -4], 1], [[-6, 34, -70, 70, -34, 6], 0], [[2, -6, 6, -2], 1], [[2, -6, 6, -2], 1], [[-1], 9 // 2], [[-2, 2], 2], [[], 0], [[1], 7 // 2], [[-1, 8, -20, 20, -8, 1], 0], [[2, -10, 10, -2], 2], [[-2, 16, -34, 34, -16, 2], 0], [[], 0], [[1], 13 // 2]]])
chevieset(:E7, :longestperm, #= none:4 =# @perm_str("(  1, 64)(  2, 65)(  3, 66)(  4, 67)(  5, 68)(  6, 69)(  7, 70)(  8, 71)(  9, 72)( 10, 73)( 11, 74)( 12, 75)( 13, 76)( 14, 77)( 15, 78)( 16, 79)( 17, 80)( 18, 81)( 19, 82)( 20, 83)( 21, 84)( 22, 85)( 23, 86)( 24, 87)( 25, 88)( 26, 89)( 27, 90)( 28, 91)( 29, 92)( 30, 93)( 31, 94)( 32, 95)( 33, 96)( 34, 97)( 35, 98)( 36, 99)( 37,100)( 38,101)( 39,102)( 40,103)( 41,104)( 42,105)( 43,106)( 44,107)( 45,108)( 46,109)( 47,110)( 48,111)( 49,112)( 50,113)( 51,114)( 52,115)( 53,116)( 54,117)( 55,118)( 56,119)( 57,120)( 58,121)( 59,122)( 60,123)( 61,124)( 62,125)( 63,126)"))
chevieset(:E7, :CycPolSchurElements, [[1, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 10, 12, 14, 18], [1, -63, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 10, 12, 14, 18], [1, -46, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 9, 10, 18], [1, -1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 9, 10, 18], [2, -25, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 7], [2, -4, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 7], [2, -3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 18], [2, -30, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 18], [1, -36, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 10, 12], [1, -3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 10, 12], [1, -2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 10, 14], [1, -37, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 10, 14], [6, -16, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 18], [6, -7, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 18], [2, -3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 9, 10], [2, -30, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 9, 10], [2, -30, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 8, 9, 12], [2, -3, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 8, 9, 12], [3, -16, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6], [3, -7, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6], [2, -10, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6, 6], [2, -13, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6, 6], [2, -25, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 14], [2, -4, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 14], [1, -6, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8], [1, -21, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8], [1, -12, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8], [1, -15, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 8], [2, -4, 2, 2, 2, 3, 3, 3, 4, 4, 6, 7, 8, 12], [2, -25, 2, 2, 2, 3, 3, 3, 4, 4, 6, 7, 8, 12], [1, -6, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6, 6, 10], [1, -21, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 5, 6, 6, 6, 10], [2, -8, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 14], [2, -15, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 14], [1, -22, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 8, 10], [1, -5, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 8, 10], [1, -20, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 8, 10], [1, -7, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 8, 10], [1, -6, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 12], [1, -21, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6, 12], [1, -10, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6], [1, -13, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 6, 6, 6], [2, -15, 2, 2, 2, 3, 4, 4, 5, 7, 8], [2, -8, 2, 2, 2, 3, 4, 4, 5, 7, 8], [3, -16, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 12], [3, -7, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 12], [2, -7, 2, 2, 2, 3, 3, 3, 4, 4, 8, 9], [2, -16, 2, 2, 2, 3, 3, 3, 4, 4, 8, 9], [6, -16, 2, 2, 2, 2, 2, 2, 2, 4, 4, 6, 6, 6, 9], [6, -7, 2, 2, 2, 2, 2, 2, 2, 4, 4, 6, 6, 6, 9], [2, -13, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 12], [2, -10, 2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 12], [1, -14, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 10], [1, -9, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 10], [2, -8, 2, 2, 2, 2, 2, 2, 2, 4, 4, 6, 7, 10], [2, -15, 2, 2, 2, 2, 2, 2, 2, 4, 4, 6, 7, 10], [2, -10, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 10], [2, -13, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 6, 6, 6, 10], [2, -11, 3, 3, 3, 5, 7, 9], [2, -11, 3, 3, 3, 5, 7, 9]])
chevieset(:E7, :cycpolfakedegrees, [[1, 0], [1, 63], [1, 46, 7, 12, 14], [1, 1, 7, 12, 14], [1, 28, 5, 9, 10, 18, 20], [1, 7, 5, 9, 10, 18, 20], [1, 6, 7, 9, 14, 18], [1, 33, 7, 9, 14, 18], [1, 36, 7, 9, 14, 18], [1, 3, 7, 9, 14, 18], [1, 2, 3, 3, 6, 6, 9, 12, 18], [1, 37, 3, 3, 6, 6, 9, 12, 18], [1, 22, 5, 7, 10, 14, 20], [1, 13, 5, 7, 10, 14, 20], [1, 4, 5, 7, 10, 14, 20], [1, 31, 5, 7, 10, 14, 20], [1, 30, 4, 7, 8, 12, 14, 16], [1, 3, 4, 7, 8, 12, 14, 16], [[1, -1, -1, 3, -1, -1, 1], 18, 5, 7, 8, 10, 14], [[1, -1, -1, 3, -1, -1, 1], 9, 5, 7, 8, 10, 14], [1, 12, 7, 8, 9, 14, 16, 18], [1, 15, 7, 8, 9, 14, 16, 18], [1, 26, 5, 7, 9, 10, 14, 18], [1, 5, 5, 7, 9, 10, 14, 18], [1, 6, 5, 7, 9, 10, 12, 14, 18], [1, 21, 5, 7, 9, 10, 12, 14, 18], [1, 12, 5, 7, 9, 10, 12, 14, 18], [1, 15, 5, 7, 9, 10, 12, 14, 18], [1, 4, 4, 5, 8, 8, 9, 10, 12, 18], [1, 25, 4, 5, 8, 8, 9, 10, 12, 18], [1, 6, 4, 4, 7, 8, 9, 12, 14, 18], [1, 21, 4, 4, 7, 8, 9, 12, 14, 18], [1, 10, 3, 3, 6, 6, 7, 9, 12, 14, 18], [1, 17, 3, 3, 6, 6, 7, 9, 12, 14, 18], [1, 22, 3, 3, 6, 6, 7, 9, 12, 14, 18], [1, 5, 3, 3, 6, 6, 7, 9, 12, 14, 18], [1, 20, 3, 3, 6, 6, 7, 9, 12, 14, 18], [1, 7, 3, 3, 6, 6, 7, 9, 12, 14, 18], [1, 6, 5, 7, 8, 9, 10, 14, 18], [1, 21, 5, 7, 8, 9, 10, 14, 18], [1, 10, 5, 7, 8, 9, 10, 12, 14, 18], [1, 13, 5, 7, 8, 9, 10, 12, 14, 18], [1, 16, 3, 3, 4, 6, 6, 8, 9, 12, 16, 18], [1, 9, 3, 3, 4, 6, 6, 8, 9, 12, 16, 18], [[2, -3, 2], 18, 4, 4, 5, 7, 8, 10, 12, 14], [[2, -3, 2], 9, 4, 4, 5, 7, 8, 10, 12, 14], [[1, 1, -2, 1, 1], 8, 4, 5, 7, 8, 10, 12, 14], [[1, 1, -2, 1, 1], 17, 4, 5, 7, 8, 10, 12, 14], [[1, -1, 3, -1, 1], 16, 5, 7, 9, 10, 14, 18], [[1, -1, 3, -1, 1], 7, 5, 7, 9, 10, 14, 18], [1, 14, 4, 4, 4, 7, 8, 9, 12, 14, 18], [1, 11, 4, 4, 4, 7, 8, 9, 12, 14, 18], [1, 14, 3, 3, 6, 6, 7, 8, 9, 12, 14, 18], [1, 9, 3, 3, 6, 6, 7, 8, 9, 12, 14, 18], [1, 8, 3, 3, 3, 5, 6, 6, 6, 9, 10, 12, 12, 18], [1, 15, 3, 3, 3, 5, 6, 6, 6, 9, 10, 12, 12, 18], [1, 10, 5, 7, 8, 8, 9, 10, 14, 18], [1, 13, 5, 7, 8, 8, 9, 10, 14, 18], [[2, 2, 3, 4, 6, 6, 8, 6, 7, 6, 5, 3, 4, 1, 1], 12, 4, 4, 8, 12], [[1, 1, 4, 3, 5, 6, 7, 6, 8, 6, 6, 4, 3, 2, 2], 11, 4, 4, 8, 12]])
chevieset(:E7, :ClassParameter, function (w,)
        local x, exc, str
        if w == []
            return " "
        end
        exc = [[3, 2, nothing, nothing, 19], [12, nothing, 25], [60]]
        x = Product((chevieget(:E7, :generators))[w])
        str = CycleStructurePerm(x)
        if str in exc
            str = [str, CycleStructurePerm(x * chevieget(:E7, :longestperm))]
        end
        return (chevieget(:E7, :ClassNames))[Position(chevieget(:E7, :cyclestructure), str)]
    end)
chevieset(:E7, :HeckeCharTable, function (param, sqrtparam)
        local q, v, tbl
        q = -((param[1])[1]) // (param[1])[2]
        if sqrtparam[1] !== nothing
            v = -(sqrtparam[1]) // (param[1])[2]
        else
            v = GetRoot(q, 2, "CharTable(Hecke(E7))")
        end
        tbl = Dict{Symbol, Any}(:identifier => "H(E7)", :text => "origin: Meinolf Geck, July 1992", :cartan => chevieget(:E7, :CartanMat), :parameter => param, :rootparameter => sqrtparam, :size => 2903040, :powermap => chevieget(:E7, :PowerMaps), :irreducibles => map((i->begin
                                map(function (j,)
                                        local res
                                        res = horner(q, j[1])
                                        if IsInt(j[2])
                                            res = res * q ^ j[2]
                                        else
                                            res = res * v ^ (2 * j[2])
                                        end
                                        return res
                                    end, i)
                            end), chevieget(:E7, :vpolheckeirreducibles)), :irredinfo => chevieget(:E7, :IrredInfo))
        Inherit(tbl, chevieget(:E7, :ClassInfo))
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(:E7, :WGraphs, [[[[]], []], 1, 4, [[[1], [2], [3], [4], [5], [6], [7]], [[1, [[1, 3], [2, 4], [3, 4], [4, 5], [5, 6], [6, 7]]]]], 6, [[[2], [4], [5], [1, 5], [3, 5], [3, 6], [3, 7], [4, 6], [4, 7], [1, 2, 6], [1, 4, 6], [1, 4, 7], [2, 3, 6], [1, 2, 5, 7], [2, 3, 5, 7]], [[1, [[1, 2, 10, 15], [2, 5, 9, 11], [3, 4, 8, 15], [4, 5, 11, 14], [5, 6, 15], [6, 7, 11, 13], [7, 12, 15], [8, 9, 11, 13], [9, 12, 15], [10, 11, 13, 14], [11, 12], [12, 14], [13, 15], [14, 15]]]]], [[[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [3, 4], [3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7], [5, 6], [5, 7], [6, 7]], [[-1, [[4, 5], [13, 14, 16]]], [1, [[1, 3, 7], [2, 3], [3, 4, 12], [4, 13], [5, 6, 14], [6, 15], [7, 8, 12], [8, 9], [9, 10, 16], [10, 11, 17], [11, 18], [12, 13], [14, 15, 17], [15, 18], [16, 17], [17, 18, 19], [18, 20], [19, 20], [20, 21]]]]], 7, 10, [[[2], [3], [4], 1, [5], 1, [6], [7], [1, 2], [1, 4], [1, 5], [1, 6], [1, 7], [2, 3], [2, 6], [3, 5], [3, 6], [3, 7], [4, 6], [4, 7], [2, 5, 7]], [[1, [[1, 3, 9, 15], [2, 10, 14, 16], [3, 10, 16, 19], [4, 5, 10, 14], [5, 7, 11], [6, 16, 19, 21], [7, 8, 12], [8, 13], [9, 10, 14], [10, 11], [11, 12, 16], [12, 13, 17], [13, 18], [15, 19, 21], [16, 17], [17, 18, 19], [18, 20], [19, 20], [20, 21]]]]], [[[1], [2], [3], 1, [4], 2, [5], 1, [6], 1, [7], [1, 2], [1, 4], [1, 5], [1, 6], [1, 7], [2, 3], [2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7], [4, 6], [4, 7], [5, 7]], [[1, [[1, 4, 16], [2, 6, 13, 20], [3, 14, 18, 22], [4, 7, 23], [5, 9, 14, 18], [6, 14, 22, 25], [7, 19, 25], [8, 19, 22, 25, 27], [9, 11, 15], [10, 25, 27], [11, 12, 16], [12, 17], [13, 14, 18], [14, 15], [15, 16, 22], [16, 17, 23], [17, 24], [19, 20], [20, 21, 25], [21, 26], [22, 23], [23, 24, 25], [24, 26], [25, 26], [26, 27]]]]], 11, 14, [[[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 5, 6], [1, 5, 7], [1, 6, 7], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 5, 6], [2, 5, 7], [2, 6, 7], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 5, 6], [3, 5, 7], [3, 6, 7], [4, 5, 6], [4, 5, 7], [4, 6, 7], [5, 6, 7]], [[-1, [[2, 3], [3, 17], [4, 18], [5, 19], [10, 26], [11, 13, 27], [12, 14, 28], [21, 23], [22, 24]]], [1, [[1, 2, 6], [2, 16], [3, 4, 10], [4, 5, 11], [5, 12], [6, 7], [7, 8, 10], [8, 9, 11], [9, 12], [10, 11], [11, 12], [13, 14, 29], [14, 15, 30], [15, 31], [16, 17], [17, 18, 20, 26], [18, 19, 21, 27], [19, 22, 28], [20, 21], [21, 22], [23, 24, 32], [24, 25, 33], [25, 34], [26, 27], [27, 28, 29], [28, 30], [29, 30, 32], [30, 31, 33], [31, 34], [32, 33], [33, 34], [34, 35]]]]], [[[1], [2], [3], 1, [4], 2, [5], 1, [6], [1, 4], [1, 5], [1, 6], [2, 5], [2, 6], [2, 7], [3, 5], [3, 6], 1, [3, 7], [4, 6], 1, [4, 7], 1, [5, 7], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 4, 6], [1, 4, 7], [1, 5, 7], [2, 3, 5], [2, 3, 6], [2, 3, 7], [3, 5, 7]], [[1, [[1, 4, 11, 13], [2, 7, 16, 27, 32], [3, 11, 19, 32], [4, 6, 18], [5, 11, 21, 32], [6, 11, 14, 22], [7, 17, 23, 29], [8, 12, 14, 22, 35], [9, 12, 21, 25, 32], [10, 13, 21, 25], [11, 26, 29], [12, 17, 26, 29, 31], [13, 18, 29, 31], [14, 15, 26], [15, 16, 22, 27], [16, 23, 28], [17, 19, 32, 35], [18, 22, 35], [19, 20, 29, 33], [20, 30, 34, 35], [21, 24, 29, 33], [22, 23, 29], [23, 30, 35], [24, 25, 30, 34], [25, 31], [26, 27, 32], [27, 28, 29, 33], [28, 30, 34], [29, 30], [30, 31], [31, 35], [32, 33], [33, 34]]]]], 15, 18, [[[1], [2], [3], 1, [4], 2, [5], 1, [6], [1, 2], [1, 3], [1, 4], 1, [1, 5], 1, [1, 6], 1, [1, 7], [2, 3], [2, 4], [2, 5], 1, [2, 6], 1, [2, 7], 1, [3, 4], [3, 5], 1, [3, 6], 2, [3, 7], 1, [4, 5], [4, 6], 2, [4, 7], 2, [5, 6], [5, 7], 1, [6, 7], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 4, 6], [1, 4, 7], [1, 5, 7], [2, 3, 5], [2, 3, 6], [2, 3, 7], [3, 5, 7]], [[1, [[1, 3, 12, 13, 18], [2, 7, 21, 27, 48, 53], [3, 6, 33], [4, 12, 13, 28, 32, 53], [5, 13, 21, 28, 36, 38, 53], [6, 13, 23, 37], [7, 29, 42, 50], [8, 16, 36, 38, 43, 44, 53], [9, 16, 23, 37, 56], [10, 18, 38, 43, 44, 46], [11, 14, 20], [12, 14], [13, 47, 50], [14, 15, 28], [15, 17, 30], [16, 29, 47, 50, 52], [17, 19, 31], [18, 33, 50, 52], [19, 35], [20, 21, 28], [21, 22], [22, 25, 36], [23, 24, 47], [24, 27, 37, 48], [25, 26, 39], [26, 40], [27, 42, 49], [28, 30], [29, 32, 53, 56], [30, 31, 36], [31, 35, 39], [32, 34, 50, 54], [33, 37, 56], [34, 51, 55, 56], [35, 40], [36, 39], [37, 42, 50], [38, 41, 50, 54], [39, 40, 43], [40, 45], [41, 44, 51, 55], [42, 51, 56], [43, 45], [44, 52], [45, 46], [47, 48, 53], [48, 49, 50, 54], [49, 51, 55], [50, 51], [51, 52], [52, 56], [53, 54], [54, 55]]], [2, [[11, 47], [15, 47], [17, 48], [19, 49], [20, 53], [22, 53], [25, 54], [26, 55], [30, 53], [31, 54], [35, 55]]]]], 20, [[[3], [4], 1, [5], [1, 4], [1, 5], [2, 5], [2, 6], [3, 5], 1, [3, 6], 1, [4, 5], [4, 6], 2, [4, 7], 1, [1, 2, 5], 1, [1, 2, 6], 1, [1, 2, 7], [1, 3, 6], [1, 4, 5], [1, 4, 6], 3, [1, 4, 7], 1, [1, 5, 6], [1, 5, 7], [2, 3, 5], 1, [2, 3, 6], 2, [2, 3, 7], 1, [2, 4, 6], [2, 4, 7], [2, 5, 7], [3, 4, 6], 1, [3, 4, 7], 1, [3, 5, 6], [3, 5, 7], 2, [4, 5, 7], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], 1, [1, 3, 5, 7], [1, 4, 5, 7], 1, [1, 4, 6, 7], [2, 3, 5, 6], [2, 3, 5, 7], 1, [2, 3, 6, 7], [3, 4, 6, 7], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 3, 6, 7], [1, 2, 4, 6, 7]], [[1, [[1, 5, 9, 24, 34, 36, 45, 46, 49, 65, 68], [2, 17, 25, 35, 44, 53], [3, 5, 13, 18, 34, 41, 45], [4, 9, 13, 14, 20, 32, 51, 56, 59, 62, 63], [5, 19, 25, 29, 30, 53, 60, 70], [6, 10, 19, 25, 29, 33, 55, 58, 60, 67], [7, 13, 20, 34, 41, 43, 56, 62], [8, 15, 22, 41, 43, 62, 65], [9, 25, 35, 44, 50, 67], [10, 13, 34, 45, 49, 51, 62], [11, 28, 38, 44, 48, 50, 66, 67, 69], [12, 24, 27, 45, 49, 62, 65], [13, 16, 25, 52, 60], [14, 17, 28, 38, 44, 53, 66, 70], [15, 28, 48, 52, 66], [16, 18, 26, 27, 41, 45, 62], [17, 46, 54, 59, 63], [18, 30, 42, 47, 52, 60, 64, 66, 70], [19, 21, 34, 56, 68], [20, 25, 35, 53, 57, 67], [21, 23, 29, 37, 53, 55, 67, 69, 70], [22, 28, 38, 53, 55, 57, 67, 69, 70], [23, 31, 39, 54, 56, 68], [24, 29, 58, 67, 69], [25, 26, 59], [26, 30, 44, 53, 67], [27, 55, 60, 70], [28, 32, 59, 61], [29, 31, 45, 61], [30, 46, 54, 59, 61, 68], [31, 47, 58, 60], [32, 33, 48, 55, 67], [33, 51, 56, 59, 61, 68], [34, 37, 64], [35, 36, 63], [36, 40, 44, 53, 67], [37, 39, 41, 45, 62, 65], [38, 62, 63, 65], [39, 42, 47, 64], [40, 46, 54, 63, 65, 68], [41, 42, 53, 70], [42, 43, 54], [43, 52, 57, 64], [44, 46], [45, 47, 66], [46, 50, 66], [47, 49], [48, 51, 62], [49, 58, 60, 64], [50, 59, 63, 68], [51, 52, 64, 66], [52, 59], [53, 54], [54, 57, 70], [55, 56, 62], [56, 60, 64, 70], [57, 59, 63, 68], [58, 68], [61, 66, 69, 70], [62, 64, 67], [64, 65, 68], [65, 66, 69, 70], [67, 68], [68, 69]]]]], [[[4], [1, 4], [1, 5], [1, 6], [2, 5], [3, 4], [3, 5], 1, [3, 6], 1, [4, 5], [4, 6], 2, [4, 7], [1, 2, 5], [1, 2, 6], [1, 4, 5], [1, 4, 6], 3, [1, 4, 7], 1, [1, 5, 7], [2, 3, 5], 1, [2, 3, 6], 2, [2, 3, 7], 1, [2, 4, 6], [2, 4, 7], [2, 5, 6], [2, 5, 7], [3, 4, 6], 2, [3, 4, 7], 1, [3, 5, 6], [3, 5, 7], 2, [4, 5, 7], 1, [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], 1, [1, 2, 4, 7], 1, [1, 2, 5, 6], 1, [1, 2, 5, 7], 2, [1, 2, 6, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 4, 5, 6], [1, 4, 5, 7], 2, [1, 4, 6, 7], [2, 3, 5, 6], 1, [2, 3, 5, 7], 2, [2, 3, 6, 7], [2, 4, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 3, 6, 7], [1, 2, 4, 6, 7], [1, 3, 4, 6, 7], [1, 3, 5, 6, 7], [2, 3, 4, 6, 7]], [[1, [[1, 6, 13, 18, 23, 26, 34, 37, 46, 51, 53, 76, 84], [2, 6, 19, 48, 51], [3, 7, 18, 19, 25, 48, 51, 56, 78], [4, 10, 19, 21, 22, 25, 56, 61, 78, 80], [5, 11, 16, 33, 36, 69, 73], [6, 27, 38], [7, 11, 27, 38, 44, 69], [8, 18, 26, 37, 42, 43, 63, 76, 78], [9, 22, 37, 43, 70, 78, 80, 84], [10, 14, 38, 39, 44, 69, 74], [11, 13, 18, 47, 51, 76], [12, 22, 46, 70, 84], [13, 15, 20, 33, 38, 39, 52, 64, 69], [14, 22, 35, 47, 75], [15, 23, 34, 41, 47, 54, 66, 72, 75, 76, 77], [16, 18, 26, 51, 53, 56, 58, 60, 78], [17, 21, 29, 53, 56, 60, 61, 78, 80], [18, 20, 64, 65, 67], [19, 24, 38, 49, 52], [20, 23, 37, 53, 78], [21, 39, 62, 64, 65, 68, 82], [22, 57, 67, 81], [23, 40, 55, 65, 67, 79, 81, 82], [24, 25, 41, 50, 54], [25, 44, 59, 65, 67, 79], [26, 30, 69, 71, 73, 79], [27, 28, 48, 51], [28, 32, 38, 49, 52, 69], [29, 33, 39, 69, 73, 74], [30, 31, 37, 53, 78, 80, 84], [31, 40, 55, 73, 79], [32, 41, 50, 54, 72], [33, 34, 53, 75], [34, 55, 73], [35, 36, 57, 69], [36, 47, 58, 72, 75], [37, 40, 82], [38, 41], [39, 42, 76, 77], [40, 43, 76, 84], [41, 44], [42, 45, 62, 64, 69], [43, 67, 71, 79], [44, 47, 72, 76], [45, 63, 66, 72, 76, 77, 83], [46, 67, 71], [47, 67], [48, 49], [49, 50, 78], [50, 79], [51, 52], [52, 54, 56], [53, 55, 81], [54, 59], [55, 60], [56, 59, 64, 69], [57, 58, 70, 78], [58, 67, 71, 79, 81], [59, 61, 66, 72], [60, 65, 73, 79], [61, 68, 74], [62, 63, 78, 83], [63, 65, 79, 82], [64, 66], [65, 76], [66, 68], [68, 77, 83], [69, 72, 78], [70, 71], [71, 84], [72, 74, 79], [73, 76], [74, 75, 77, 80], [75, 81], [77, 82], [78, 79], [79, 80], [80, 81, 82], [81, 84]]]]], 21, 24, [[[3], [4], 1, [5], [6], [1, 2], 1, [1, 3], [1, 4], 3, [1, 5], 2, [1, 6], 2, [1, 7], 1, [2, 3], 2, [2, 4], 1, [2, 5], 2, [2, 6], 2, [2, 7], 1, [3, 4], 2, [3, 5], 3, [3, 6], 3, [3, 7], 2, [4, 5], 2, [4, 6], 4, [4, 7], 3, [5, 6], 1, [5, 7], 2, [6, 7], [1, 2, 3], [1, 2, 4], [1, 2, 5], 1, [1, 2, 6], 1, [1, 2, 7], 1, [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 5], [1, 4, 6], 1, [1, 4, 7], 1, [1, 5, 6], [1, 5, 7], 1, [1, 6, 7], [2, 3, 5], 1, [2, 3, 6], 1, [2, 3, 7], 1, [2, 4, 6], [2, 4, 7], [2, 5, 6], [2, 5, 7], 1, [2, 6, 7], [3, 4, 6], [3, 4, 7], [3, 5, 6], [3, 5, 7], 1, [3, 6, 7], [4, 5, 7], [4, 6, 7]], [[-1, [[1, 8, 21], [2, 34, 67], [6, 68], [7, 23, 69], [11, 35], [12, 67], [13, 37, 69], [17, 43, 70], [18, 20, 42, 71], [19, 72], [21, 87], [23, 90], [25, 67, 93], [28, 68, 95], [30, 55, 97], [32, 95], [33, 96], [35, 99], [37, 102], [39, 42, 49, 87], [43, 45], [45, 90], [50, 104], [54, 59], [59, 93], [60, 94], [63, 96], [65, 97], [68, 71, 77, 87], [94, 96], [95, 104]]], [1, [[1, 12, 35, 40, 75, 86, 98], [2, 24, 36, 49, 51, 77, 87], [3, 12, 25, 35, 48, 50, 86, 92, 98], [4, 26, 38, 49, 51, 61, 62, 77, 82, 87], [5, 30, 41, 51, 61, 62, 65, 82, 85], [6, 10, 22, 70], [7, 11, 66, 67, 72], [8, 11, 66, 76], [9, 15, 34, 66, 67], [10, 36, 74, 77, 79], [11, 13, 80], [12, 69, 77, 79], [13, 17, 84], [14, 38, 69, 74, 77, 79, 82, 84], [15, 18, 39, 68], [16, 41, 79, 82, 84, 85], [17, 19], [19, 45, 84, 85], [20, 47, 73], [21, 34, 66, 67], [22, 24, 36, 87, 88], [23, 25, 35, 86], [24, 27, 92], [25, 28], [26, 50, 86, 92, 94, 95], [27, 31, 49, 87], [28, 29, 48, 86], [29, 32, 53, 71, 88], [30, 92, 94, 95], [31, 33, 52, 89, 92, 94], [32, 57, 73, 90, 97], [33, 58, 91, 93], [34, 39], [35, 37], [36, 40, 98], [37, 43, 50, 86], [38, 48, 86, 98, 100, 102], [40, 44, 74, 77, 87], [41, 55, 98, 100, 102, 103], [42, 47, 52, 89], [43, 54, 88], [44, 46, 75, 78, 89, 98, 100], [45, 59, 102, 103], [46, 76, 81, 91, 99, 101], [47, 58, 91], [48, 53, 77, 104], [49, 52], [50, 54], [51, 56, 78, 89, 92, 98], [52, 58, 61], [53, 57, 78, 98, 100], [54, 92, 94], [55, 60, 104, 105], [56, 62, 81, 91, 93, 99], [57, 81, 99, 101, 104, 105], [58, 63], [59, 96, 104, 105], [60, 64, 100], [61, 63, 94], [62, 83, 95, 102], [63, 65], [64, 96, 101, 104, 105], [67, 68], [69, 70, 86], [70, 72, 79, 88], [71, 73, 78, 89], [72, 80, 90], [73, 81, 91], [74, 75], [75, 76, 79], [76, 80], [77, 78], [78, 81, 82], [79, 80, 98], [80, 84, 99], [81, 83], [82, 83, 100], [83, 85, 101], [84, 102], [85, 103], [86, 88], [87, 89], [88, 90, 92, 98], [89, 91], [90, 93, 99], [92, 93], [93, 95], [96, 97], [97, 105], [98, 99], [99, 102], [100, 101], [101, 103], [102, 104], [103, 105]]]]], [[[2], [3], [4], 2, [5], 1, [1, 2], [1, 4], 1, [1, 5], 2, [1, 6], [2, 3], [2, 4], [2, 5], 1, [2, 6], 1, [2, 7], [3, 4], [3, 5], 3, [3, 6], 3, [3, 7], 1, [4, 5], 1, [4, 6], 4, [4, 7], 3, [5, 6], [5, 7], [1, 2, 5], 1, [1, 2, 6], 2, [1, 2, 7], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 5], [1, 4, 6], 4, [1, 4, 7], 3, [1, 5, 6], [1, 5, 7], 1, [2, 3, 5], 1, [2, 3, 6], 3, [2, 3, 7], 1, [2, 4, 6], [2, 4, 7], [2, 5, 7], [3, 4, 6], 1, [3, 4, 7], 1, [3, 5, 6], [3, 5, 7], 2, [3, 6, 7], [4, 5, 7], [4, 6, 7], [1, 2, 3, 6], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], 2, [1, 2, 6, 7], [1, 4, 5, 7], [1, 4, 6, 7], [2, 3, 5, 6], [2, 3, 5, 7], 2, [2, 3, 6, 7], [1, 2, 3, 5, 7]], [[1, [[1, 5, 8, 18, 48, 72, 77, 103], [2, 9, 23, 32, 53, 69, 71, 80, 81, 105], [3, 16, 22, 34, 35, 41, 55, 61, 68, 79, 91], [4, 9, 33, 40, 69, 76, 80], [5, 10, 26, 33, 40, 58, 80], [6, 11, 13, 18, 25, 36, 44, 88, 103], [7, 24, 33, 37, 45, 46, 65, 98, 100, 102], [8, 10, 15, 46, 50, 92, 105], [9, 47, 55, 60, 61, 63, 91], [10, 22, 52, 55, 60, 61], [11, 24, 46, 59, 65, 98, 105], [12, 25, 47, 52, 55, 60, 66, 93], [13, 26, 58, 96], [14, 29, 48, 56, 60, 66, 90, 93, 97], [15, 16, 22, 68, 72, 75], [16, 17, 76, 92], [17, 19, 34, 68, 95], [18, 33, 46, 69, 76, 78, 100], [19, 21, 38, 49, 71, 76, 100], [20, 39, 49, 73, 76, 78, 100, 104], [21, 42, 75, 77, 95, 97, 101], [22, 23, 80, 81], [23, 28, 52, 55, 68, 84], [24, 34, 68, 79, 83, 84], [25, 33, 69, 80, 86, 100], [26, 27, 52, 103], [27, 32, 53, 58, 73, 80], [28, 31, 53, 57, 71, 80, 100], [29, 39, 73, 80, 86, 100, 104], [30, 56, 70, 79, 83, 84, 87, 90], [31, 54, 62, 75, 82, 84, 87, 101], [32, 54, 63, 82, 103], [33, 35, 55, 88], [34, 38, 98], [35, 43, 57, 76, 80, 100], [36, 40, 58, 59, 73, 76, 80], [37, 41, 56, 70, 79, 89, 91], [38, 42, 56, 79, 83], [39, 44, 56, 88, 89], [40, 61, 63, 77, 82, 88, 103], [41, 81, 92, 98, 102], [42, 81, 85, 98, 99], [43, 62, 77, 82, 88, 89, 101], [44, 45, 65, 100], [45, 67, 88, 89, 101], [46, 55, 68, 91, 93, 95], [47, 50, 69, 96, 105], [48, 58, 73, 96], [49, 56, 70, 90, 91, 93, 95, 97], [50, 51, 60, 72, 90, 91, 93], [51, 64, 74, 92, 94, 96, 105], [52, 53, 105], [53, 54, 60, 90], [54, 64, 105], [55, 57, 98], [56, 65, 98, 99], [57, 62, 91, 93], [58, 63], [59, 61, 79, 90, 91], [60, 64, 80], [61, 81, 92, 98, 105], [62, 92, 94, 98, 99], [63, 96], [64, 66, 82], [65, 67, 83, 93], [66, 86, 94, 96, 98, 105], [67, 85, 94, 98, 99], [68, 71, 100, 102, 105], [69, 72, 103], [70, 100, 102, 104], [71, 75, 79, 90, 91], [72, 74, 76, 80, 100], [73, 90, 103], [74, 77, 82, 101, 103], [75, 81, 92, 102, 105], [76, 77, 91], [77, 78, 92], [78, 88, 95, 101, 103], [79, 81], [80, 82], [81, 84], [82, 86], [83, 85, 100], [84, 98, 102, 105], [85, 87, 101], [86, 88, 101, 103], [87, 99, 104], [88, 98], [89, 99, 104], [90, 105], [91, 92], [92, 95], [93, 94, 100], [94, 97, 101], [95, 98, 102, 105], [96, 103], [97, 99, 104], [100, 101], [101, 104], [103, 105]]]]], 25, [[[1, 3], [1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5], [3, 6], [4, 5], [4, 6], [4, 7], [1, 2, 5], 1, [1, 2, 6], 1, [1, 2, 7], [1, 3, 4], [1, 3, 5], [1, 3, 6], 1, [1, 4, 5], [1, 4, 6], 3, [1, 4, 7], 1, [1, 5, 6], [1, 5, 7], [2, 3, 5], 1, [2, 3, 6], 2, [2, 3, 7], 1, [2, 4, 5], [2, 4, 6], 1, [2, 4, 7], 1, [2, 5, 6], [2, 5, 7], [2, 6, 7], [3, 4, 5], [3, 4, 6], 2, [3, 4, 7], 1, [3, 5, 6], 1, [3, 5, 7], 2, [3, 6, 7], [4, 5, 6], 1, [4, 5, 7], 1, [4, 6, 7], 1, [5, 6, 7], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], 1, [1, 2, 4, 7], 1, [1, 2, 5, 6], 1, [1, 2, 5, 7], 2, [1, 2, 6, 7], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 7], 1, [1, 4, 5, 6], [1, 4, 5, 7], 2, [1, 4, 6, 7], 1, [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], 1, [2, 3, 5, 7], 2, [2, 3, 6, 7], 1, [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 3, 6, 7], [1, 2, 4, 6, 7]], [[1, [[1, 2, 20], [2, 6, 12, 23], [3, 7, 12, 23, 72, 81, 85], [4, 30, 41, 68], [5, 9, 13, 39, 76, 92, 95], [6, 17, 31, 46], [7, 9, 18, 31, 46, 53, 92], [8, 19, 20, 25, 46, 48, 53, 92, 97], [9, 10, 21, 37, 85, 99], [10, 11, 22, 25, 38, 39, 46, 48, 58, 92], [11, 27, 40, 41, 50, 60, 85, 96, 99, 100, 105], [12, 14, 31], [13, 21, 30, 68, 74, 102], [14, 16, 23, 32, 72], [15, 24, 34, 68, 72, 74, 102, 104, 105], [16, 26, 35, 76], [17, 64, 78], [18, 21, 64, 78, 80, 102], [19, 24, 78, 80, 102, 104], [20, 23, 81], [21, 22, 45, 67, 83], [22, 27, 47, 68, 69, 78, 82, 102], [23, 26, 46], [24, 28, 48, 83, 87], [25, 72, 85, 105], [26, 50, 81, 85], [27, 49, 70, 71, 79, 83, 84, 87, 103], [28, 29, 51, 72, 82, 102], [29, 55, 76, 83, 84, 87, 88, 103], [30, 33, 45, 95], [31, 32, 37, 64], [32, 35, 38, 46, 65, 92], [33, 36, 47, 68, 102], [34, 39, 48, 92, 95, 97], [35, 40, 50, 66, 96], [36, 49, 70, 95, 97, 103], [37, 38, 67], [38, 40, 42, 69], [39, 41, 68, 105], [40, 43, 71], [41, 70, 95], [42, 43, 58, 73, 92], [43, 44, 60, 75, 96], [44, 61, 77, 97], [45, 47, 89, 99], [46, 50, 78], [47, 49, 52, 90], [48, 51, 99, 100], [49, 54, 91, 99, 100], [50, 53, 79], [51, 55, 58, 92], [52, 54, 82, 93, 102], [53, 80, 81, 85, 96, 99], [54, 56, 84, 94, 103], [55, 60, 96, 99, 100, 101], [56, 86, 98, 100, 101, 104], [57, 59, 82, 93], [58, 60, 82], [59, 62, 84, 94], [60, 61, 84], [61, 86, 100, 101], [62, 63, 86, 98], [63, 88], [64, 65, 67], [65, 66, 69, 78, 102], [66, 71, 79, 103], [67, 69, 89], [68, 70], [69, 71, 73, 90], [70, 74, 105], [71, 75, 91], [72, 76, 92], [73, 75, 82, 93, 102], [74, 83, 95, 103], [75, 77, 84, 94, 103], [76, 85, 96, 105], [77, 86, 98, 104], [78, 79], [79, 80], [80, 83, 103], [82, 84], [83, 99], [84, 86], [86, 88], [87, 100, 104, 105], [88, 101], [89, 90], [90, 91, 93], [91, 94], [92, 96, 102], [93, 94], [94, 98], [95, 99], [96, 97, 103], [97, 100, 104, 105], [102, 103], [103, 104]]]]], 27, [[[2], [3], [4], 2, [5], 1, [6], [1, 2], 1, [1, 3], [1, 4], 3, [1, 5], 3, [1, 6], 2, [1, 7], 1, [2, 3], 2, [2, 4], 1, [2, 5], 2, [2, 6], 2, [2, 7], 1, [3, 4], 2, [3, 5], 4, [3, 6], 4, [3, 7], 3, [4, 5], 2, [4, 6], 5, [4, 7], 4, [5, 6], 1, [5, 7], 2, [6, 7], [1, 2, 3], [1, 2, 4], [1, 2, 5], 1, [1, 2, 6], 2, [1, 2, 7], 1, [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 5], [1, 4, 6], 2, [1, 4, 7], 2, [1, 5, 6], [1, 5, 7], 1, [1, 6, 7], [2, 3, 5], 1, [2, 3, 6], 2, [2, 3, 7], 1, [2, 4, 6], [2, 4, 7], [2, 5, 6], [2, 5, 7], 1, [2, 6, 7], [3, 4, 6], [3, 4, 7], [3, 5, 6], [3, 5, 7], 1, [3, 6, 7], [4, 5, 7], [4, 6, 7], [1, 2, 5, 7], [2, 3, 5, 7]], [[1, [[1, 5, 9, 30, 80, 100, 106, 120], [2, 11, 15, 27, 40, 41, 85, 98, 111], [3, 28, 38, 39, 56, 62, 76, 87, 99], [4, 15, 29, 40, 55, 57, 98, 105, 111], [5, 13, 44, 55, 67, 89, 111], [6, 31, 42, 56, 62, 69, 71, 87, 94, 99], [7, 17, 31, 42, 59, 70, 117, 120], [8, 33, 46, 62, 69, 71, 74, 94, 97], [9, 13, 26, 78, 79], [10, 12, 25, 75, 76, 77, 82], [11, 12, 75, 86], [12, 19, 40, 93], [13, 39, 84, 87, 88], [14, 18, 38, 75, 76], [15, 76, 77, 87, 88], [16, 42, 77, 84, 87, 88, 94, 96], [17, 44, 89, 119], [18, 20, 45, 78], [19, 21, 43, 77, 96], [20, 24, 49, 81], [21, 23, 47, 79], [22, 46, 88, 94, 96, 97], [23, 52, 82, 96, 97], [24, 51, 83], [25, 29, 40, 98, 104], [26, 28, 39, 99, 100], [27, 38, 75, 76, 99], [28, 32, 105], [29, 30, 76, 106], [30, 35, 55, 78, 98, 108], [31, 57, 98, 105, 107, 108], [32, 34, 56, 99], [33, 58, 105, 107, 108, 110], [34, 36, 61, 101, 105, 107], [35, 37, 63, 81, 100], [36, 66, 103, 106, 109], [37, 64, 83, 104, 108, 110], [38, 45], [39, 41, 111], [40, 43, 112], [41, 48, 84, 87, 99], [42, 55, 98, 111, 113, 114], [43, 47, 57, 98, 114], [44, 50, 84, 120], [45, 49, 56, 99], [46, 58, 111, 113, 114, 116], [47, 52, 60, 100], [48, 53, 85, 90, 101, 111, 113], [49, 51, 61, 101], [50, 54, 85, 89, 102, 111], [51, 66, 103], [52, 68, 104, 114, 116], [53, 86, 92, 103, 112, 115], [54, 86, 91, 112, 120], [55, 63, 87, 117], [56, 61], [57, 60, 117], [58, 70, 117, 118], [59, 67, 89, 102, 105, 111], [60, 68, 105, 107], [61, 66, 69], [62, 65, 90, 101, 105, 111], [63, 64, 90, 111, 113], [64, 92, 112, 115, 117, 118], [65, 71, 92, 103, 106, 112], [66, 73], [67, 91, 106, 112, 117, 120], [68, 106, 109, 117, 118], [69, 73, 107], [70, 72, 107, 113], [71, 95, 108, 114], [72, 109, 115, 117, 118], [73, 74, 109], [74, 110], [76, 78], [77, 79, 98], [78, 81, 87, 99], [79, 82, 88, 100], [80, 89, 102, 119], [81, 83, 90, 101], [82, 93, 104], [83, 92, 103], [84, 85], [85, 86, 88], [86, 93], [87, 90], [88, 93, 111], [89, 91], [90, 92, 94], [91, 119], [92, 95], [93, 96, 112], [94, 95, 113], [95, 97, 115], [96, 114], [97, 116], [98, 100], [99, 101], [100, 104, 105, 111], [101, 103], [102, 120], [104, 106, 112], [105, 106], [106, 108], [107, 109], [108, 117], [109, 110], [110, 118], [111, 112], [112, 114], [113, 115], [114, 117], [115, 116], [116, 118], [119, 120]]], [2, [[2, 54], [4, 67], [15, 91], [22, 80], [33, 102], [46, 102], [77, 119], [82, 119], [96, 119], [98, 120], [104, 120], [108, 120], [114, 120]]]]], 29, [[[3], [4], 3, [5], 1, [6], [1, 2], [1, 4], 3, [1, 5], 2, [1, 6], 2, [1, 7], [2, 3], 2, [2, 4], [2, 5], 2, [2, 6], 2, [2, 7], [3, 4], 2, [3, 5], 5, [3, 6], 5, [3, 7], 2, [4, 5], 2, [4, 6], 7, [4, 7], 4, [5, 6], [5, 7], 1, [1, 2, 3], [1, 2, 4], 1, [1, 2, 5], 3, [1, 2, 6], 3, [1, 2, 7], 2, [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 5], 2, [1, 4, 6], 5, [1, 4, 7], 4, [1, 5, 6], 1, [1, 5, 7], 3, [1, 6, 7], [2, 3, 5], 3, [2, 3, 6], 4, [2, 3, 7], 3, [2, 4, 6], 1, [2, 4, 7], 1, [2, 5, 6], 1, [2, 5, 7], 3, [2, 6, 7], [3, 4, 6], 2, [3, 4, 7], 2, [3, 5, 6], 1, [3, 5, 7], 4, [3, 6, 7], [4, 5, 7], 2, [4, 6, 7], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], 1, [1, 2, 6, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 7], [1, 4, 6, 7], [2, 3, 5, 6], [2, 3, 5, 7], 1, [2, 3, 6, 7], [2, 4, 6, 7], [3, 4, 6, 7]], [[1, [[1, 12, 33, 37, 49, 84, 109, 115, 133, 149], [2, 32, 51, 64, 70, 86, 110, 121, 131], [3, 11, 24, 34, 52, 57, 64, 88, 108, 132, 152], [4, 33, 53, 71, 87, 107], [5, 12, 50, 65, 109, 120, 133], [6, 40, 50, 53, 68, 73, 87, 101, 107, 163], [7, 27, 36, 40, 50, 55, 66, 73, 100, 126, 143, 146, 161, 163, 165], [8, 41, 53, 54, 60, 68, 76, 101, 106, 163, 166], [9, 13, 23, 71, 73, 78, 80, 149], [10, 14, 32, 69, 70, 95], [11, 33, 71, 87, 92, 149], [12, 75, 88, 93, 97, 152], [13, 34, 83, 88, 93, 98], [14, 19, 35, 72, 103], [15, 38, 75, 83, 88, 93, 104, 105, 154], [16, 40, 73, 87, 92, 101, 103, 149], [17, 45, 93, 105, 154, 157], [18, 41, 76, 92, 101, 103, 106], [19, 20, 43, 77], [20, 48, 80, 103, 106], [21, 32, 69, 70, 110, 116], [22, 33, 71, 107, 115, 149], [23, 24, 34, 108, 111, 119], [24, 26, 71, 120, 123], [25, 50, 73, 109, 120, 126, 128, 163], [26, 28, 52, 74, 108, 127], [27, 51, 110, 121, 124, 127], [28, 31, 56, 79, 115, 120, 163], [29, 54, 76, 120, 128, 163, 166], [30, 58, 112, 121, 124, 125, 127, 130, 167], [31, 62, 81, 116, 122, 127, 130, 164, 167], [32, 35, 134], [33, 39, 132], [34, 37, 133, 135], [35, 43, 51, 110, 142], [36, 86, 110, 131, 141, 158], [37, 42, 83, 88, 108, 141], [38, 50, 109, 133, 140, 143, 163], [39, 46, 87, 107, 149], [40, 52, 108, 132, 138, 142], [41, 58, 112, 132, 138, 142, 144], [42, 49, 84, 89, 115, 133, 163], [43, 48, 59, 114], [44, 90, 112, 131, 137, 141, 158, 160, 168], [45, 60, 133, 140, 163, 166], [46, 47, 94, 113, 132, 138, 150], [47, 99, 118, 134, 139, 151], [48, 63, 119, 142, 144], [49, 85, 97, 116, 136, 141, 160, 164, 168], [50, 57, 88, 145, 147], [51, 59, 146], [52, 56, 87, 146], [53, 61, 94, 113, 132, 152], [54, 90, 137, 147, 168], [55, 64, 90, 112, 121, 131, 132, 152, 167, 168], [56, 62, 94, 132, 138], [57, 65, 89, 120, 133, 163], [58, 66, 146, 148], [59, 63, 121, 124], [60, 125, 145, 167], [61, 68, 99, 118, 134, 153], [62, 99, 134, 139, 146, 148], [63, 123, 129, 146, 148], [64, 123, 134, 135, 146, 153, 161, 165], [65, 97, 122, 136, 145, 147, 164, 167, 168], [66, 67, 124, 125, 138], [67, 126, 129, 139, 146, 148], [68, 102, 142, 145, 147, 155, 164], [69, 151], [70, 72, 153], [71, 74, 152], [72, 77, 86, 110, 155], [73, 88, 108, 152, 154, 155], [74, 79, 87, 107, 149], [75, 78, 109, 149, 156], [76, 90, 112, 152, 154, 155, 157], [77, 80, 91, 114], [78, 82, 93, 111, 150, 152, 154, 157], [79, 81, 94, 113, 150, 152, 154], [80, 98, 119, 155, 157], [81, 99, 118, 151, 153, 156], [82, 96, 117, 151, 153, 156], [83, 84, 149, 159], [84, 85, 93, 150, 160], [85, 96, 151], [86, 91, 161], [87, 94], [88, 89, 161], [89, 97, 152, 154], [90, 100, 161, 162], [91, 98, 131, 158], [92, 95, 132, 150, 152], [93, 96, 133, 162], [94, 99, 101], [95, 103, 134, 151, 153], [96, 105, 136], [97, 153, 156, 161, 162], [98, 135, 159, 161, 162], [99, 102], [100, 104, 137, 154, 158], [101, 102, 138, 154], [102, 106, 139, 156], [103, 142, 155], [104, 143, 156, 159, 161, 162], [105, 140, 156], [106, 144, 157], [107, 113], [108, 115, 149, 163, 165], [109, 111, 164], [110, 114, 165], [111, 117, 120, 133, 163, 166], [112, 163, 165, 166], [113, 118, 163], [114, 119, 121, 131], [115, 116, 132, 150, 152], [116, 134, 151, 153, 165], [117, 122, 136, 164], [118, 164], [119, 123, 135, 165, 166], [120, 122, 152, 167], [121, 123], [122, 128, 153], [123, 127, 167], [124, 129], [125, 126, 163], [126, 145, 164, 167], [127, 146, 165], [128, 147, 155, 164], [129, 130], [130, 148], [131, 135], [132, 134], [133, 136, 168], [134, 142], [135, 141, 168], [136, 140], [137, 143, 163], [138, 139, 163], [139, 144, 164], [140, 145, 164], [141, 159, 161, 165], [142, 146, 165], [143, 147, 164, 168], [144, 148, 166], [147, 161], [148, 167], [149, 150], [150, 151], [152, 153], [153, 155], [154, 156, 163], [155, 161, 165], [156, 157, 164], [157, 162, 166], [158, 159], [159, 160], [160, 162], [162, 168], [163, 164], [164, 166], [166, 167, 168]]]]], 31, [[[1, 4], 1, [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6], [3, 4], 1, [3, 5], 1, [3, 6], 1, [3, 7], [4, 5], 1, [4, 6], 2, [4, 7], 1, [5, 6], [5, 7], [1, 2, 3], 1, [1, 2, 4], 2, [1, 2, 5], 3, [1, 2, 6], 3, [1, 2, 7], 2, [1, 3, 4], 1, [1, 3, 5], 2, [1, 3, 6], 2, [1, 3, 7], 1, [1, 4, 5], 3, [1, 4, 6], 5, [1, 4, 7], 4, [1, 5, 6], 2, [1, 5, 7], 3, [1, 6, 7], 1, [2, 3, 4], 1, [2, 3, 5], 4, [2, 3, 6], 4, [2, 3, 7], 3, [2, 4, 5], 1, [2, 4, 6], 3, [2, 4, 7], 2, [2, 5, 6], 2, [2, 5, 7], 3, [2, 6, 7], 1, [3, 4, 5], 2, [3, 4, 6], 4, [3, 4, 7], 3, [3, 5, 6], 3, [3, 5, 7], 4, [3, 6, 7], 2, [4, 5, 6], 2, [4, 5, 7], 3, [4, 6, 7], 3, [5, 6, 7], [1, 2, 3, 5], 1, [1, 2, 3, 6], 1, [1, 2, 3, 7], 1, [1, 2, 4, 5], [1, 2, 4, 6], 1, [1, 2, 4, 7], 1, [1, 2, 5, 6], 1, [1, 2, 5, 7], 2, [1, 2, 6, 7], 1, [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], 1, [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], 1, [1, 4, 6, 7], 1, [1, 5, 6, 7], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], 1, [2, 3, 5, 7], 2, [2, 3, 6, 7], 1, [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7]], [[-1, [[1, 59], [3, 30, 45, 52, 54, 66, 145, 151], [4, 48, 66, 162], [5, 149, 176], [6, 176, 184], [7, 81, 102, 184], [8, 82, 102, 183, 185], [9, 164], [10, 116], [11, 14, 167], [12, 80, 81, 109, 111, 122], [13, 82, 122, 183], [14, 112, 115, 147, 175, 177], [15, 118, 149, 176, 181, 187, 188], [16, 134, 151], [19, 55], [20, 23, 94, 115, 134, 140], [21, 140], [22, 61], [23, 169, 178, 186], [24, 137, 171, 179], [27, 155], [30, 156, 159], [34, 148, 153], [36, 82, 152], [37, 148, 153, 156], [38, 150, 154], [40, 150, 154, 158], [43, 47], [46, 148], [47, 56], [49, 150], [50, 63], [51, 55, 170], [55, 152], [57, 67], [59, 152, 163], [60, 115], [61, 155], [62, 155, 164], [64, 71], [66, 156], [67, 165, 169], [68, 123], [69, 74, 158], [70, 167], [71, 166, 171], [72, 128, 174], [73, 168], [77, 180], [80, 86], [87, 180, 182], [93, 153], [95, 175], [96, 153], [97, 154], [98, 154], [99, 176, 184, 185], [100, 157], [101, 157], [103, 160], [104, 186], [105, 160], [106, 180], [110, 187], [114, 121], [116, 175], [117, 187, 188], [119, 176], [120, 127], [125, 130], [126, 180], [129, 131], [130, 168], [131, 182], [133, 169], [135, 169], [136, 171], [137, 184, 187], [138, 142], [139, 171], [142, 185], [143, 144], [144, 174], [145, 148], [151, 153], [155, 159], [156, 177], [158, 181], [159, 180], [160, 162], [161, 182], [170, 187], [171, 173], [172, 188], [179, 183]]], [1, [[1, 10, 28, 29, 41, 42, 52, 54, 145, 151], [2, 9, 27, 51, 53, 146, 152, 163], [3, 12, 59, 67, 70, 157], [4, 13, 36, 59, 67, 70, 73, 74, 157], [5, 9, 25, 27, 76, 77, 80, 146], [6, 27, 76, 77, 91, 95], [7, 16, 77, 91, 95, 100, 106, 178], [8, 20, 95, 100, 106, 108, 178, 186], [9, 11, 42, 110, 175], [10, 75, 76, 80, 109, 111], [11, 43, 51, 80, 81, 111, 146, 187], [12, 16, 116, 121, 126, 178], [13, 20, 116, 121, 126, 131, 132, 178], [14, 15, 47, 48, 55, 86, 124], [15, 50, 61, 90, 125, 167, 168], [16, 18, 110, 135, 137], [17, 19, 51, 81, 92, 111, 184, 187], [18, 21, 95, 113, 116, 153, 169, 178], [19, 22, 94, 96, 112, 115, 133, 134, 175, 177], [20, 135, 137, 142, 143], [21, 99, 117, 119, 137, 154, 171, 179], [22, 97, 118, 138, 139, 176, 181, 184, 185, 187, 188], [23, 24, 102, 123, 144], [24, 104, 128, 140, 174], [25, 29, 42, 145], [26, 28, 41, 145, 147], [27, 31, 151], [28, 33, 75, 152], [29, 32, 76], [30, 51, 81, 146, 152], [31, 35, 53, 77, 146, 159], [32, 34, 54, 79, 145, 151], [33, 37, 52, 78, 145, 151], [34, 38, 57, 84], [35, 39, 58, 83, 147, 157], [36, 60, 156, 159, 161], [37, 40, 56, 85, 152], [38, 64, 88], [39, 65, 87, 149, 159, 160, 161], [40, 63, 89, 155], [41, 44, 163], [42, 43], [43, 52, 145], [44, 46, 54, 145], [45, 53, 146, 163, 165, 167], [46, 49, 57, 163, 165], [47, 50, 148], [48, 60, 163, 165, 167, 168], [49, 64, 164, 166], [50, 150], [51, 151], [52, 56, 111], [53, 58, 110, 170], [54, 57, 109], [55, 61, 153, 156, 169], [56, 63, 66, 112], [57, 64, 114], [58, 65, 113, 163, 165, 169], [59, 62, 116, 148, 153], [60, 68, 170, 172], [61, 154, 158, 170, 171, 172], [62, 70, 119, 150, 154], [63, 69, 118], [64, 120], [65, 117, 164, 166, 170, 171, 172], [66, 69, 122], [67, 71, 121], [68, 72, 156, 165, 169], [69, 129], [70, 126, 159, 160], [71, 73, 127], [72, 158, 166, 170, 171, 172], [73, 132, 173], [74, 131, 161], [75, 78, 175], [76, 79], [77, 83, 110], [78, 85, 92, 111], [79, 84, 91, 109], [80, 145, 151], [81, 175, 177, 180], [82, 94, 115, 175, 177, 180, 182], [83, 87, 95, 113, 178], [84, 88, 93, 114], [85, 89, 96, 112, 175, 177], [86, 90, 116, 148, 153, 178], [87, 99, 117, 179], [88, 98, 120], [89, 97, 118, 176, 181], [90, 119, 150, 154, 179], [91, 93, 151], [92, 96, 151], [93, 98, 100], [94, 102, 184, 185], [95, 99], [96, 97, 101], [97, 105], [98, 103], [99, 106], [100, 103, 135], [101, 105, 133, 177], [102, 104, 134, 177], [103, 108, 136], [104, 138, 181, 184, 185], [105, 107, 139, 181], [106, 137, 179], [107, 141, 162, 182], [108, 143, 162], [109, 114], [110, 113], [111, 112], [112, 118, 122], [113, 117, 124], [114, 120], [115, 123, 187, 188], [116, 119], [117, 125], [118, 129], [119, 126], [121, 127, 135], [122, 129, 134, 177], [123, 128, 133, 177], [124, 125, 165, 169, 178], [125, 166, 171, 179], [126, 137, 179], [127, 132, 136], [128, 139, 181, 187, 188, 189], [129, 138, 181], [130, 173, 183, 188, 189], [131, 142], [132, 143], [133, 139], [134, 138], [135, 136], [136, 143], [139, 141], [140, 173, 183, 185, 188], [141, 173, 188, 189], [142, 186], [143, 173], [146, 147], [147, 149, 152, 163], [148, 150], [149, 155, 164], [152, 155, 175], [153, 154, 157], [154, 160], [155, 176], [156, 158], [157, 160, 169, 178], [158, 161], [159, 170], [160, 171, 179], [161, 172], [162, 173, 183], [163, 164], [164, 167], [165, 166], [166, 168], [167, 170], [168, 172], [169, 171], [173, 174], [174, 189], [175, 176], [176, 180], [177, 181], [178, 179], [180, 184, 187], [181, 182], [182, 185, 188]]]]], 33, 36, [[[2], [3], 1, [4], 4, [5], 2, [6], [1, 2], 1, [1, 3], [1, 4], 4, [1, 5], 4, [1, 6], 2, [1, 7], [2, 3], 2, [2, 4], 1, [2, 5], 3, [2, 6], 3, [2, 7], 1, [3, 4], 2, [3, 5], 6, [3, 6], 6, [3, 7], 3, [4, 5], 3, [4, 6], 8, [4, 7], 6, [5, 6], 1, [5, 7], 2, [1, 2, 4], [1, 2, 5], 3, [1, 2, 6], 4, [1, 2, 7], 2, [1, 3, 5], [1, 3, 6], 1, [1, 3, 7], [1, 4, 5], 1, [1, 4, 6], 6, [1, 4, 7], 5, [1, 5, 6], 1, [1, 5, 7], 3, [1, 6, 7], [2, 3, 5], 3, [2, 3, 6], 5, [2, 3, 7], 3, [2, 4, 6], 1, [2, 4, 7], 1, [2, 5, 6], [2, 5, 7], 2, [2, 6, 7], [3, 4, 6], 2, [3, 4, 7], 2, [3, 5, 6], 1, [3, 5, 7], 4, [3, 6, 7], 1, [4, 5, 7], 1, [4, 6, 7], 1, [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], 2, [1, 2, 6, 7], [1, 3, 5, 7], [1, 4, 5, 7], [1, 4, 6, 7], [2, 3, 5, 6], [2, 3, 5, 7], 2, [2, 3, 6, 7]], [[1, [[1, 8, 14, 33, 37, 40, 97, 132, 139, 142, 147, 175, 179, 187], [2, 17, 47, 52, 62, 106, 133, 135, 153, 172], [3, 15, 18, 45, 56, 105, 130, 140, 155, 164], [4, 18, 34, 45, 66, 68, 75, 79, 130, 145, 155], [5, 19, 33, 46, 67, 75, 79, 109, 132, 154, 175], [6, 47, 78, 91, 108, 131], [7, 17, 69, 80, 133, 144, 153], [8, 20, 53, 69, 71, 80, 115, 153, 156, 183], [9, 24, 37, 50, 73, 86, 169, 187], [10, 54, 69, 78, 90, 95, 108, 123, 131, 185], [11, 38, 49, 54, 69, 74, 87, 89, 95, 124, 168, 183, 185, 186], [12, 55, 72, 78, 90, 98, 123, 129, 185, 189], [13, 16, 30, 94, 99, 174, 176], [14, 20, 32, 91, 95, 99, 103, 172], [15, 16, 106, 174], [16, 22, 45, 114, 118], [17, 93, 109, 114, 119, 175], [18, 94, 113, 116, 176, 183], [19, 47, 91, 108, 112, 172], [20, 46, 104, 109, 114, 120], [21, 54, 95, 108, 112, 123, 127, 172], [22, 27, 48, 94, 127], [23, 49, 94, 116, 124, 182, 183], [24, 53, 95, 115, 124, 180, 183], [25, 50, 93, 104, 109, 114, 128, 177], [26, 55, 98, 112, 123, 127, 129], [27, 29, 60, 96, 114, 177], [28, 59, 97, 105, 111, 114, 128, 177, 181], [29, 65, 103, 121, 127, 129, 178], [30, 34, 45, 130, 139, 140], [31, 47, 91, 131, 135, 172], [32, 33, 46, 132, 139, 142], [33, 36, 91, 144, 146], [34, 35, 144, 176], [35, 40, 66, 130, 179], [36, 42, 67, 92, 132, 149], [37, 69, 95, 133, 144, 150, 185], [38, 68, 130, 145, 148, 149], [39, 70, 138, 145, 148, 149, 152], [40, 43, 71, 98, 137, 144, 185], [41, 72, 98, 134, 144, 150, 185, 189], [42, 44, 77, 100, 135, 144, 185], [43, 84, 142, 147, 179, 181, 188], [44, 81, 102, 140, 147, 149, 152, 188], [45, 48, 153, 158], [46, 52, 153, 156], [47, 51, 154], [48, 60, 68, 130, 161], [49, 66, 130, 155, 160, 164], [50, 69, 133, 153, 162, 185], [51, 58, 108, 131, 172], [52, 56, 104, 109, 132, 164], [53, 61, 104, 132, 160, 164, 187], [54, 67, 132, 154, 159, 161], [55, 70, 138, 154, 159, 161, 166], [56, 64, 106, 113, 135, 153, 185], [57, 105, 111, 138, 155, 160, 164, 167], [58, 63, 110, 136, 154, 159, 173], [59, 72, 134, 153, 162, 185, 189], [60, 65, 76, 137, 153, 185], [61, 62, 106, 115, 134, 135, 153], [62, 107, 119, 140, 157, 164, 187], [63, 117, 143, 158, 163, 174], [64, 107, 122, 140, 157, 164, 167, 188], [65, 85, 142, 157, 161, 166, 188], [66, 71, 183], [67, 77, 108, 168], [68, 76, 168], [69, 75, 109, 169], [70, 87, 168, 171], [71, 84, 111, 155, 160], [72, 86, 111, 169, 170], [73, 80, 115, 134, 144, 153], [74, 79, 111, 138, 145, 154, 155, 170, 175], [75, 82, 113, 144, 153, 185], [76, 85, 145, 148], [77, 81, 110, 154, 159], [78, 83, 110, 136, 154, 175], [79, 146, 156, 158, 168, 176, 183, 186], [80, 119, 147, 157, 169, 187], [81, 117, 158, 163, 168, 171], [82, 122, 147, 157, 169, 170, 188], [83, 90, 117, 143, 158, 176], [84, 156, 165, 183, 184], [85, 146, 151, 168, 171], [86, 89, 124, 185], [87, 88, 148, 159], [88, 151, 163, 168, 171], [89, 126, 169, 170, 188], [90, 125, 161, 169, 179, 188], [91, 92, 175], [92, 100, 108, 131, 172], [93, 99, 133, 172, 180], [94, 96, 130, 177, 179], [95, 109, 132, 175, 177, 179], [96, 103, 116, 137], [97, 115, 134, 180], [98, 111, 138, 175, 177, 179, 181], [99, 101, 114, 139, 173, 175, 177], [100, 102, 110, 136, 173, 175, 177], [101, 121, 141, 174, 176, 178, 180], [102, 117, 143, 174, 176, 178], [103, 120, 142, 179], [104, 106, 172, 182], [105, 116, 182], [106, 107, 114, 173], [107, 121, 174, 182], [108, 110], [109, 113, 183], [110, 117, 123], [111, 124, 183, 184], [112, 118, 154, 173, 175], [113, 122, 175, 177], [114, 121, 153], [115, 119, 175], [116, 120, 155], [117, 125], [118, 127, 158, 174, 176], [119, 176, 180, 183], [120, 156, 182, 183], [121, 128, 157], [122, 176, 178, 183, 184], [123, 125, 159, 177], [124, 126, 160, 177], [125, 129, 163, 178], [126, 165, 178, 183, 184], [127, 161, 179], [128, 162, 178, 180, 182, 183], [129, 166, 181], [130, 137, 185, 186], [131, 136], [132, 135, 172, 185, 186], [133, 139, 187], [134, 187], [135, 140, 154, 173, 175], [136, 143, 185], [137, 142, 145, 155], [138, 185, 186, 189], [139, 141, 144, 153, 185], [140, 158, 174, 176, 186], [141, 147, 157, 187, 188], [142, 146, 156, 186], [143, 188], [144, 147, 175], [145, 146], [146, 149], [147, 150, 176], [148, 151, 185], [149, 168, 186], [150, 169, 179, 187, 188], [151, 152, 188], [152, 171, 189], [153, 157], [154, 158], [155, 156], [156, 164], [157, 162], [158, 161], [159, 163, 185], [160, 165, 185], [161, 168, 186], [162, 169, 187, 188], [163, 166, 188], [164, 182, 183, 186], [165, 167, 188], [166, 171, 189], [167, 184, 189], [169, 183], [170, 184, 189], [172, 173], [173, 174], [175, 176], [176, 179], [177, 178, 185], [178, 181, 188], [179, 183, 186], [180, 187], [181, 184, 189], [185, 188], [188, 189]]]]], 38, [[[4], 1, [5], [1, 2], [1, 4], 2, [1, 5], 2, [1, 6], 1, [1, 7], [2, 3], 2, [2, 4], 1, [2, 5], 2, [2, 6], 2, [2, 7], [3, 4], 2, [3, 5], 5, [3, 6], 4, [3, 7], 2, [4, 5], 3, [4, 6], 6, [4, 7], 4, [5, 6], 1, [5, 7], 1, [6, 7], [1, 2, 3], 1, [1, 2, 4], 2, [1, 2, 5], 3, [1, 2, 6], 4, [1, 2, 7], 2, [1, 3, 4], [1, 3, 5], 1, [1, 3, 6], 1, [1, 3, 7], 1, [1, 4, 5], 3, [1, 4, 6], 6, [1, 4, 7], 5, [1, 5, 6], 2, [1, 5, 7], 3, [1, 6, 7], 1, [2, 3, 4], [2, 3, 5], 3, [2, 3, 6], 5, [2, 3, 7], 3, [2, 4, 6], 2, [2, 4, 7], 1, [2, 5, 6], 1, [2, 5, 7], 3, [2, 6, 7], [3, 4, 5], [3, 4, 6], 3, [3, 4, 7], 3, [3, 5, 6], 2, [3, 5, 7], 4, [3, 6, 7], 1, [4, 5, 6], [4, 5, 7], 2, [4, 6, 7], 1, [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], 2, [1, 2, 6, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 7], [1, 4, 6, 7], [2, 3, 5, 6], [2, 3, 5, 7], 2, [2, 3, 6, 7], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 6, 7]], [[1, [[1, 6, 17, 18, 27, 43, 51, 58, 91, 118, 141, 142, 169], [2, 28, 44, 58, 66, 90, 115, 130, 144], [3, 21, 30, 33, 46, 52, 59, 71, 106, 136, 157, 160, 161, 179, 181, 182], [4, 5, 14, 71, 73, 80], [5, 27, 83, 91, 94, 102], [6, 26, 67, 68, 81, 88, 89, 95, 166], [7, 9, 28, 65, 66, 100], [8, 30, 71, 88, 89, 95, 105, 107, 109, 166], [9, 12, 29, 70, 109], [10, 34, 83, 91, 94, 110, 171, 173], [11, 37, 77, 95, 105, 107, 109, 112, 113], [12, 13, 39, 76], [13, 41, 80, 109, 112, 113], [14, 18, 27, 64, 118, 122, 128], [15, 26, 68, 116, 119, 166], [16, 28, 65, 66, 115, 126], [17, 68, 116, 129], [18, 19, 67, 131, 133], [19, 24, 43, 69, 118, 135, 138], [20, 46, 71, 116, 129, 137, 181], [21, 44, 115, 130, 134, 138], [22, 50, 124, 130, 134, 135, 138, 140, 187, 188], [23, 48, 77, 129, 131, 137, 181, 185], [24, 25, 49, 75, 119], [25, 57, 78, 126, 138, 140], [26, 31, 114, 141, 142], [27, 32, 81, 145, 148], [28, 29, 147], [29, 39, 44, 115, 156], [30, 43, 118, 141, 142, 150, 151, 156], [31, 35, 89, 117, 166], [32, 36, 82, 83, 91, 118, 141, 154], [33, 90, 115, 144, 154, 176], [34, 46, 145, 157, 181, 183], [35, 42, 96, 120, 142, 150, 167], [36, 40, 84, 85, 92, 119, 143, 145, 181], [37, 50, 124, 142, 150, 151, 156, 158, 159], [38, 93, 124, 144, 152, 154, 176, 178, 189], [39, 41, 47, 123], [40, 86, 87, 103, 126, 146, 149, 154, 178, 184, 189], [41, 56, 128, 156, 158, 159], [42, 104, 125, 147, 153, 168], [43, 49, 89, 160, 161], [44, 47, 161], [45, 53, 89, 117], [46, 51, 91, 141, 163, 186], [47, 56, 130, 134], [48, 93, 152, 163, 189], [49, 57, 96, 142, 150], [50, 59, 160, 161, 164, 165], [51, 54, 92, 129, 131, 143, 145, 160, 181], [52, 58, 93, 124, 130, 142, 144, 169, 187, 189], [53, 55, 60, 96, 120], [54, 103, 132, 146, 149, 162, 163, 184, 186, 187, 189], [55, 62, 104, 125], [56, 133, 139, 161, 164, 165], [57, 104, 147, 153, 161, 164], [58, 133, 147, 148, 161, 170, 179, 182], [59, 61, 134, 150, 188], [60, 62, 107], [61, 139, 153, 161, 164], [62, 63, 111], [63, 113], [64, 67, 81, 166], [65, 168], [66, 70, 170], [67, 69, 114], [68, 72, 169], [69, 75, 89, 117, 166], [70, 76, 90, 115, 172], [71, 91, 118, 169, 171, 172], [72, 74, 88, 116, 166], [73, 94, 122, 171, 173, 175], [74, 79, 97, 121, 167, 169, 171], [75, 78, 96, 120, 167], [76, 80, 98, 123], [77, 93, 124, 169, 171, 172, 175], [78, 104, 125, 168], [79, 99, 127, 168, 170, 174], [80, 102, 128, 172, 175], [81, 82], [82, 85, 88, 166], [83, 84, 177], [84, 86, 94, 178], [85, 87, 97, 167], [86, 101], [87, 99, 168], [88, 97, 141], [89, 96], [90, 98, 179], [91, 92, 179], [92, 103, 169, 171], [93, 106, 179, 180], [94, 101, 145, 180], [95, 100, 142, 167, 169], [96, 104, 107], [97, 99, 105, 143], [98, 102, 144, 176], [99, 108, 146], [100, 109, 147, 168, 170], [101, 149, 173], [102, 148, 177, 179, 180], [103, 170, 174, 179, 180], [104, 111], [105, 108, 151, 171], [106, 110, 152, 171, 176], [107, 111, 150], [108, 112, 155, 174], [109, 156, 172], [110, 157, 174, 177, 179, 180], [111, 113, 153], [112, 159, 175], [113, 158], [114, 117], [115, 123, 182], [116, 121, 141], [117, 120], [118, 119, 166, 181, 182], [119, 126, 142, 167, 169], [120, 125], [121, 127, 129, 143, 181], [122, 131, 145, 181, 183, 185], [123, 128, 130, 144], [124, 181, 182, 185], [126, 147, 168, 170, 182], [127, 132, 146, 184], [128, 133, 148, 182, 185], [129, 132, 169], [130, 133], [131, 135, 186, 187], [132, 137, 170], [133, 138, 187], [134, 139], [135, 136, 160, 181], [136, 162, 184, 186, 187, 188], [137, 163, 172, 184, 186], [138, 161, 182], [139, 140, 188], [140, 164], [141, 143], [142, 147], [143, 146, 151], [144, 148], [145, 149, 189], [146, 155], [147, 156], [148, 154, 189], [149, 183], [150, 153], [151, 155, 160, 181], [152, 157, 181], [153, 158], [154, 177, 179, 182], [155, 159, 162, 184], [156, 161, 182], [157, 163, 184, 189], [158, 164], [159, 165, 185], [160, 162], [162, 165], [163, 179], [165, 187, 188], [166, 167], [167, 168], [169, 170], [170, 172], [171, 174, 181], [172, 179, 182], [173, 183], [174, 175, 184], [175, 180, 185], [176, 177], [177, 178], [178, 180], [180, 189], [181, 184], [183, 186], [184, 185], [185, 187, 189]]]]], [[[3], [4], 1, [5], [1, 2], 1, [1, 3], 1, [1, 4], 4, [1, 5], 3, [1, 6], 2, [1, 7], [2, 3], 2, [2, 4], 2, [2, 5], 3, [2, 6], 3, [2, 7], 1, [3, 4], 3, [3, 5], 5, [3, 6], 5, [3, 7], 2, [4, 5], 4, [4, 6], 7, [4, 7], 5, [5, 6], 2, [5, 7], 2, [6, 7], [1, 2, 3], [1, 2, 4], 1, [1, 2, 5], 4, [1, 2, 6], 4, [1, 2, 7], 3, [1, 3, 4], [1, 3, 5], 1, [1, 3, 6], 2, [1, 3, 7], 1, [1, 4, 5], 2, [1, 4, 6], 6, [1, 4, 7], 5, [1, 5, 6], 2, [1, 5, 7], 4, [1, 6, 7], 1, [2, 3, 4], [2, 3, 5], 4, [2, 3, 6], 5, [2, 3, 7], 4, [2, 4, 5], [2, 4, 6], 2, [2, 4, 7], 2, [2, 5, 6], 1, [2, 5, 7], 3, [2, 6, 7], 1, [3, 4, 5], [3, 4, 6], 3, [3, 4, 7], 3, [3, 5, 6], 2, [3, 5, 7], 5, [3, 6, 7], 2, [4, 5, 6], [4, 5, 7], 2, [4, 6, 7], 2, [5, 6, 7], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], 1, [1, 2, 6, 7], [1, 3, 5, 7], [1, 4, 5, 7], [1, 4, 6, 7], [2, 3, 5, 6], [2, 3, 5, 7], 1, [2, 3, 6, 7]], [[1, [[1, 7, 8, 13, 38, 41, 49, 104, 138, 147, 170, 182], [2, 13, 25, 38, 41, 57, 61, 63, 75, 138, 151, 154, 170], [3, 9, 26, 27, 40, 59, 63, 75, 110, 136, 166, 169, 198], [4, 31, 45, 46, 60, 64, 76, 79, 88, 126, 187, 189, 205, 207, 208], [5, 11, 24, 88, 95, 96], [6, 12, 22, 89, 94, 197, 199], [7, 12, 105, 197], [8, 10, 103], [9, 39, 84, 85, 100, 108, 109, 117, 195], [10, 41, 86, 113], [11, 40, 102, 110, 113, 119], [12, 17, 38, 116, 120], [13, 89, 112, 114, 199, 205], [14, 46, 89, 114, 126, 204, 205], [15, 45, 88, 108, 109, 117, 124, 125, 131, 195], [16, 43, 86, 102, 110, 113, 127, 200], [17, 19, 44, 89, 125, 131], [18, 53, 104, 113, 115, 127, 200, 203], [19, 21, 52, 92], [20, 51, 93, 117, 124, 125, 131, 132, 133], [21, 56, 96, 131, 132], [22, 25, 38, 138, 142, 147], [23, 39, 85, 135, 144, 195], [24, 27, 40, 83, 136, 140, 148], [25, 30, 153, 199], [26, 85, 135, 153], [27, 29, 84, 152, 156], [28, 60, 88, 135, 153, 161, 207], [29, 33, 59, 87, 136, 158, 163], [30, 32, 61, 138, 151, 201], [31, 57, 138, 151, 154, 158, 159, 163], [32, 37, 65, 93, 141, 152, 153, 207], [33, 36, 67, 91, 144], [34, 62, 143, 154, 158, 159, 163, 164, 165], [35, 69, 93, 153, 161, 207, 210], [36, 74, 97, 147, 163, 164], [37, 72, 148, 155, 157, 201, 203, 209], [38, 44, 167, 173], [39, 47, 134, 166, 169], [40, 42, 100, 168, 171], [41, 139, 168], [42, 49, 101, 102, 110, 136, 166, 182], [43, 60, 139, 168, 183, 207], [44, 52, 57, 138, 177, 181], [45, 59, 136, 166, 169, 175, 177, 181], [46, 61, 138, 170, 176, 182], [47, 48, 108, 137, 195], [48, 54, 111, 145, 169, 175, 196], [49, 55, 103, 105, 112, 144, 167, 168, 207], [50, 104, 115, 143, 170, 176, 182, 184], [51, 62, 143, 169, 175, 177, 181, 185, 186], [52, 56, 66, 141], [53, 69, 168, 183, 207, 210], [54, 121, 150, 173, 180, 197], [55, 106, 107, 123, 147, 172, 174, 182, 184, 209], [56, 71, 148, 181, 186], [57, 66, 187, 189], [58, 68, 108, 137], [59, 67, 108, 187, 189], [60, 63, 110, 151, 166, 190], [61, 65, 205], [62, 76, 187, 189, 191, 192], [63, 70, 112, 152, 153, 167, 168, 187, 207], [64, 75, 115, 143, 154, 169, 170, 193, 198], [65, 72, 115, 170, 176], [66, 71, 154, 159], [67, 74, 111, 169, 175], [68, 73, 77, 111, 145], [69, 78, 115, 190, 193], [70, 123, 155, 157, 172, 174, 188, 190, 193, 209], [71, 156, 162, 189, 191], [72, 171, 179, 205, 206], [73, 80, 121, 150], [74, 121, 173, 180, 189, 191], [75, 156, 171, 173, 189, 199, 205, 208], [76, 81, 159, 175, 194], [77, 80, 124], [78, 79, 126, 187, 207], [79, 129, 188, 190, 193, 194, 209], [80, 82, 128], [81, 162, 180, 189, 191], [82, 132], [83, 84, 100, 195], [84, 87, 134], [85, 90, 198], [86, 95, 139], [87, 91, 108, 137, 195], [88, 110, 136, 198, 200, 201], [89, 92, 138, 200, 201], [90, 94, 109, 135, 195], [91, 97, 111, 145, 196], [92, 96, 114, 141], [93, 115, 143, 198, 200, 201, 203], [94, 99, 116, 142, 196, 198, 200], [95, 98, 113, 140, 200], [96, 119, 148, 201], [97, 121, 150, 197], [98, 122, 149, 202], [99, 118, 146, 197, 199, 202], [100, 101], [101, 105, 109, 195], [102, 103, 204], [103, 107, 113], [104, 114, 204], [105, 106, 116, 196], [106, 118, 197], [107, 122, 204], [108, 111], [109, 116, 166], [110, 112, 205], [111, 121, 124], [112, 123, 198, 200], [113, 122, 168], [114, 119, 170], [115, 126, 205, 206], [116, 118, 125, 167], [117, 120, 169, 196, 198], [118, 130, 172], [119, 171, 204, 205], [120, 131, 173, 197, 199], [121, 128], [122, 127, 174], [123, 199, 202, 205, 206], [124, 128, 175], [125, 130, 177, 200], [126, 129, 176, 200], [127, 183, 202, 204, 205], [128, 132, 180], [129, 179, 202, 205, 206], [130, 133, 178, 202], [131, 181, 201], [132, 186], [133, 185, 203], [134, 137], [135, 142, 166], [136, 144, 195, 207, 208], [137, 145], [138, 141, 207, 208], [139, 140, 151], [140, 149, 152, 168, 207], [141, 148, 154, 170], [142, 146, 153, 167, 207], [143, 207, 208, 210], [144, 147, 169, 196, 198], [145, 150], [146, 155, 172, 209], [147, 173, 197, 199, 208], [148, 156, 171, 208], [149, 157, 174, 209], [151, 152], [152, 157, 158], [153, 155, 198], [154, 156], [155, 161, 199], [156, 163], [157, 160], [158, 160, 187, 207], [159, 162], [160, 165, 188, 209], [161, 190, 201, 209], [162, 164], [163, 189, 208], [164, 191], [165, 192, 210], [166, 167], [167, 172, 177], [168, 174], [169, 173], [170, 171], [171, 182], [172, 178], [173, 181], [174, 183], [175, 180], [176, 179, 207], [177, 178, 187, 207], [178, 185, 188, 209], [179, 184, 209], [180, 186], [181, 189, 208], [182, 204, 205, 208], [183, 190, 209], [184, 206, 210], [185, 192, 210], [186, 191], [187, 188], [188, 192], [190, 205], [192, 194], [193, 206, 210], [195, 196], [196, 197], [198, 199], [199, 201], [200, 202, 207], [201, 205, 208], [202, 203, 209], [203, 206, 210], [207, 209], [209, 210]]]]], 39, [[[4], 1, [5], [1, 4], [1, 5], 1, [2, 3], [2, 4], [2, 5], 1, [2, 6], [3, 4], [3, 5], 4, [3, 6], 2, [3, 7], [4, 5], 2, [4, 6], 5, [4, 7], 3, [1, 2, 4], [1, 2, 5], 3, [1, 2, 6], 3, [1, 2, 7], [1, 3, 5], [1, 3, 6], [1, 4, 5], 3, [1, 4, 6], 9, [1, 4, 7], 5, [1, 5, 6], 1, [1, 5, 7], 1, [2, 3, 5], 3, [2, 3, 6], 7, [2, 3, 7], 2, [2, 4, 6], 2, [2, 4, 7], 1, [2, 5, 6], [2, 5, 7], 1, [3, 4, 5], [3, 4, 6], 6, [3, 4, 7], 4, [3, 5, 6], 3, [3, 5, 7], 5, [3, 6, 7], [4, 5, 6], [4, 5, 7], 2, [4, 6, 7], [1, 2, 3, 5], [1, 2, 3, 6], 2, [1, 2, 3, 7], [1, 2, 4, 6], 4, [1, 2, 4, 7], 2, [1, 2, 5, 6], 3, [1, 2, 5, 7], 6, [1, 2, 6, 7], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], 1, [1, 3, 5, 7], 2, [1, 3, 6, 7], [1, 4, 5, 6], 1, [1, 4, 5, 7], 5, [1, 4, 6, 7], 3, [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], 3, [2, 3, 5, 7], 8, [2, 3, 6, 7], 2, [2, 4, 5, 7], [2, 4, 6, 7], [3, 4, 5, 7], 1, [3, 4, 6, 7], 2, [1, 2, 3, 5, 6], 1, [1, 2, 3, 5, 7], 3, [1, 2, 3, 6, 7], 1, [1, 2, 4, 5, 7], 1, [1, 2, 4, 6, 7], 2, [1, 2, 5, 6, 7], [1, 3, 4, 6, 7], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 7]], [[1, [[1, 4, 8, 24, 27, 31, 47, 73, 94, 100, 106, 129, 168, 202], [2, 4, 8, 24, 27, 30, 48, 64, 74, 90, 94, 98, 105, 106, 121, 128, 168, 188, 201, 202, 208], [3, 5, 14, 23, 28, 36, 67, 71, 91, 109, 116, 119, 140, 156, 160, 171, 178, 181, 186, 189, 209], [4, 12, 35, 49, 50, 55, 59, 65, 66, 123, 132, 148], [5, 17, 37, 45, 48, 51, 68, 136, 143, 152, 161, 163, 193, 195, 201, 210], [6, 13, 37, 45, 47, 48, 60, 68, 70, 138, 143, 152, 163, 193, 194, 197, 202], [7, 12, 35, 72, 81, 82, 123, 127, 169, 174, 182], [8, 35, 72, 86, 169, 186], [9, 23, 36, 39, 71, 72, 86, 91, 92, 171, 181, 186], [10, 22, 39, 71, 87, 91, 144, 173, 176, 181, 186], [11, 26, 40, 43, 75, 86, 91, 92, 130, 171, 185, 187, 209], [12, 16, 94, 98, 100, 105, 106, 149, 168], [13, 23, 71, 99, 109, 116, 171, 174, 181, 189], [14, 45, 47, 73, 94, 100, 107, 114, 194], [15, 45, 48, 74, 94, 98, 107, 108, 113, 152, 188, 193], [16, 20, 49, 71, 123, 153, 174, 182, 189], [17, 22, 71, 101, 109, 112, 173, 181, 182, 189], [18, 46, 58, 76, 80, 97, 100, 107, 110, 114, 117, 190, 194, 200], [19, 46, 54, 77, 80, 97, 98, 107, 108, 113, 117, 170, 192, 193, 199, 208, 210], [20, 21, 46, 57, 77, 80, 97, 98, 100, 107, 108, 126, 168, 172, 193, 194], [21, 61, 103, 104, 111, 112, 127, 153, 155, 169, 174, 179, 182, 184, 185, 189, 191, 196, 198, 207], [22, 30, 48, 118, 121, 161, 188, 201], [23, 27, 47, 48, 94, 118, 120, 121, 202], [24, 25, 49, 71, 186, 189], [25, 33, 57, 88, 97, 118, 168, 172], [26, 56, 58, 97, 110, 118, 120, 122, 190], [27, 34, 55, 59, 86, 96, 99, 130, 156, 171], [28, 31, 51, 58, 76, 88, 97, 100, 122, 129, 168, 190, 205, 208], [29, 54, 88, 97, 118, 121, 122, 170, 208], [30, 32, 59, 87, 95, 101, 131, 157, 166, 173], [31, 66, 103, 134, 160, 169, 178, 186, 189], [32, 64, 90, 105, 121, 161, 175, 188, 192, 201, 204, 208], [33, 61, 119, 169, 179, 186, 187, 189, 191], [34, 63, 64, 89, 102, 106, 120, 121, 122, 158, 180, 190, 202, 205, 208], [35, 38, 128, 129, 133, 201, 202], [36, 47, 73, 129, 138, 141, 194, 202], [37, 49, 71, 123, 132, 139, 145], [38, 41, 50, 72, 123, 145], [39, 48, 74, 128, 136, 138, 143, 146, 193, 201, 202], [40, 56, 78, 128, 136, 146, 193, 199, 204, 210], [41, 44, 53, 79, 126, 128, 129, 138, 193, 194], [42, 52, 75, 124, 125, 130, 131, 132, 137, 139, 145, 147, 203], [43, 58, 76, 129, 138, 141, 194, 200, 205, 206], [44, 62, 85, 127, 134, 135, 140, 145, 147, 196, 198, 203], [45, 50, 123, 148, 150, 153], [46, 52, 124, 125, 148, 150, 151, 153, 155, 207], [47, 55, 156, 160], [48, 59, 156, 157, 159, 162], [49, 57, 163, 201, 202], [50, 53, 94, 163], [51, 66, 101, 124, 131, 132, 148, 166, 203, 207], [52, 68, 97, 163, 167], [53, 62, 96, 148, 150, 156], [54, 130, 131, 137, 156, 157, 159, 165, 166, 203], [55, 63, 100, 129, 194], [56, 95, 151, 157, 162, 166, 207], [57, 61, 130, 131, 132, 139, 156, 157], [58, 67, 130, 156, 160, 164, 165], [59, 64, 98, 128, 193], [60, 65, 99, 125, 130, 132, 148, 164, 203, 207], [61, 133, 142, 158, 161, 163, 167, 201, 202, 204, 205], [62, 102, 149, 154, 158, 163, 167], [63, 103, 134, 160, 164, 196], [64, 104, 135, 159, 162, 166, 198, 203, 207], [65, 106, 133, 149, 163, 197, 202], [66, 105, 133, 149, 163, 195, 201], [67, 70, 110, 138, 194, 206], [68, 69, 109, 137, 139, 150, 151, 156, 157], [69, 115, 142, 143, 152, 154, 158, 161, 163, 167, 206, 210], [70, 116, 140, 160, 164, 196], [71, 168, 172, 177], [72, 79, 94, 177], [73, 81, 123, 171, 174, 178], [74, 82, 123, 171, 173, 174, 176, 181, 182, 198], [75, 88, 97, 168, 170, 172, 177, 183, 208], [76, 124, 171, 178, 185, 209], [77, 101, 124, 131, 173, 182, 184], [78, 87, 95, 173, 176, 184], [79, 85, 86, 96, 171], [80, 99, 125, 130, 171, 174, 185], [81, 83, 100, 126, 129, 168, 194], [82, 84, 98, 126, 128, 168, 193, 199, 208], [83, 103, 127, 134, 169, 174, 178, 185, 196], [84, 104, 127, 135, 169, 174, 176, 182, 184, 198], [85, 89, 102, 177, 180, 183, 208], [86, 89, 128, 129, 168, 208], [87, 90, 128, 168, 204, 208], [88, 91, 130, 131, 186, 187], [89, 92, 134, 135, 169, 186, 187], [90, 135, 169, 176, 186], [91, 93, 118, 136, 138, 170, 172], [92, 120, 141, 146, 177, 180, 202], [93, 119, 140, 144, 179, 181, 186, 187, 209], [94, 96, 189], [95, 108, 188, 192], [96, 102, 107], [97, 109, 189, 191], [98, 104, 148, 207], [99, 106, 168, 190, 208], [100, 103, 148], [101, 105, 168, 192, 208], [102, 111, 189, 191], [103, 114, 149, 190], [104, 113, 149, 188, 192, 208], [105, 169, 182, 189], [106, 169, 174, 189], [107, 111, 150, 156, 171], [108, 112, 151, 157, 173], [109, 115, 118, 170, 172], [110, 116, 151, 171, 209], [111, 117, 154, 158, 180], [112, 152, 161, 175, 188, 192, 210], [113, 153, 159, 174, 181, 182, 189, 198], [114, 153, 160, 174, 178, 189, 196], [115, 119, 179, 181, 189, 191, 209], [116, 120, 152, 180, 190], [117, 155, 165, 185, 191, 209], [118, 119, 156, 157], [119, 122, 158, 161], [120, 160, 162, 189], [121, 159, 181, 186, 189], [122, 165, 166, 187, 191, 209], [123, 126, 193, 194, 195, 197], [124, 193, 195, 199, 210], [125, 193, 194, 197, 199, 200], [126, 127, 132, 148], [127, 133, 149, 195, 197, 199], [128, 135, 203], [129, 134], [130, 138, 202, 205], [131, 136, 201, 204], [132, 133, 168], [133, 145, 169, 203], [134, 141, 202, 205], [135, 146, 201, 202, 204], [136, 144, 157, 173], [137, 143, 170, 193, 206, 210], [138, 140, 156, 171], [139, 142, 172, 193, 194], [140, 158, 180, 202, 205, 206], [141, 160, 178, 196], [142, 147, 179, 196, 198], [143, 159, 181, 198, 203], [144, 161, 175, 201, 204, 210], [145, 163, 177, 195, 197, 201, 202], [146, 162, 176, 198], [147, 167, 183, 199, 200, 204, 205, 206, 210], [148, 149], [149, 153, 207], [150, 154, 193, 194], [151, 152, 193, 210], [152, 162, 198, 207], [153, 163, 195, 197], [154, 155, 196, 198], [155, 167, 199, 200, 210], [156, 158], [157, 161], [158, 165], [159, 201, 202], [160, 202], [161, 166], [162, 188], [163, 189], [164, 190, 200, 205], [165, 205, 206], [166, 192, 204, 210], [167, 191, 203, 207], [168, 169], [169, 177, 208], [170, 181, 209], [171, 180, 193, 194], [172, 179], [173, 175, 193, 210], [174, 197, 202], [175, 184, 198], [176, 188], [177, 186, 189], [178, 195], [179, 183], [180, 185, 196, 198, 209], [181, 208], [182, 195, 201], [183, 187, 191, 209], [184, 192, 199, 204, 208, 210], [185, 190, 199, 200, 205, 208], [186, 201, 202], [187, 204, 205, 208], [190, 207], [191, 208], [192, 207], [193, 198], [194, 196], [196, 200], [198, 199, 210], [199, 203, 207], [203, 208], [206, 209], [209, 210]]]]], 41, 44, [[[4], 1, [5], [1, 2], [1, 4], 1, [1, 5], 2, [2, 3], 1, [2, 4], 1, [2, 5], 2, [2, 6], 1, [2, 7], [3, 4], 1, [3, 5], 5, [3, 6], 3, [3, 7], 1, [4, 5], 3, [4, 6], 6, [4, 7], 4, [5, 6], [5, 7], [1, 2, 4], [1, 2, 5], 3, [1, 2, 6], 4, [1, 2, 7], [1, 3, 5], 1, [1, 3, 6], 1, [1, 3, 7], [1, 4, 5], 3, [1, 4, 6], 9, [1, 4, 7], 6, [1, 5, 6], 2, [1, 5, 7], 2, [2, 3, 5], 3, [2, 3, 6], 7, [2, 3, 7], 2, [2, 4, 6], 2, [2, 4, 7], 1, [2, 5, 6], [2, 5, 7], 1, [3, 4, 5], [3, 4, 6], 5, [3, 4, 7], 4, [3, 5, 6], 3, [3, 5, 7], 5, [3, 6, 7], 1, [4, 5, 6], [4, 5, 7], 2, [4, 6, 7], 1, [1, 2, 3, 5], [1, 2, 3, 6], 2, [1, 2, 3, 7], [1, 2, 4, 6], 3, [1, 2, 4, 7], 2, [1, 2, 5, 6], 2, [1, 2, 5, 7], 6, [1, 2, 6, 7], 1, [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], 1, [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], 3, [1, 4, 6, 7], 3, [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], 2, [2, 3, 5, 7], 7, [2, 3, 6, 7], 2, [2, 4, 5, 7], [2, 4, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], 1, [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], 2, [1, 2, 3, 6, 7], [1, 2, 4, 5, 7], [1, 2, 4, 6, 7], [1, 2, 5, 6, 7], [2, 3, 5, 6, 7]], [[-1, [[3, 9], [38, 77], [46, 86], [105, 150], [193, 211]]], [1, [[1, 12, 20, 34, 40, 48, 70, 80, 84, 95, 113, 119, 154, 205], [2, 6, 13, 36, 41, 46, 71, 97, 118, 121, 128, 155, 187, 213], [3, 8, 14, 22, 35, 38, 50, 53, 91, 96, 133, 134, 143, 144, 169, 178, 182, 191, 193, 205, 216], [4, 5, 10, 55, 60, 62, 155, 208, 211, 213], [5, 20, 64, 70, 76, 80, 86, 87], [6, 21, 52, 68, 69, 80, 84, 148, 156, 172], [7, 27, 64, 70, 76, 93, 161, 164], [8, 23, 54, 55, 63, 71, 72, 89, 90, 94, 179, 180, 208, 210], [9, 26, 71, 77, 94, 160, 208, 211, 213], [10, 12, 20, 95, 99, 101, 109, 152, 196], [11, 21, 52, 98, 101, 107, 148], [12, 16, 111, 114, 155, 159, 187, 213], [13, 52, 98, 110, 113], [14, 37, 55, 112, 116, 190, 197], [15, 35, 53, 98, 110, 117, 191], [16, 17, 34, 53, 95, 96, 115, 117, 167], [17, 19, 39, 59, 100, 155, 187, 189, 208], [18, 42, 61, 103, 110, 115, 117, 153, 191, 200, 204, 216], [19, 47, 107, 117, 157, 167, 170, 188, 195, 200, 209], [20, 25, 121, 123, 127, 128, 173], [21, 24, 118, 121, 126, 187], [22, 63, 71, 97, 118, 121, 131, 136, 208], [23, 34, 95, 96, 119, 130, 133, 134, 135, 205], [24, 28, 69, 96, 135, 148], [25, 29, 64, 70, 95, 139, 176, 196, 205], [26, 35, 122, 134, 191, 196], [27, 37, 123, 138, 190, 199], [28, 32, 81, 121, 149, 187, 189, 208], [29, 33, 65, 66, 79, 100, 104, 120, 121, 123, 131, 140, 190, 208], [30, 75, 106, 119, 130, 135, 141, 151], [31, 66, 74, 104, 105, 120, 121, 131, 132, 136, 140, 207, 208, 212], [32, 83, 125, 135, 141, 152, 188, 195, 209], [33, 67, 85, 107, 125, 129, 139, 176, 177, 194, 196, 200, 205, 206, 209], [34, 39, 71, 142, 145, 180], [35, 41, 71, 118, 145, 213], [36, 44, 69, 96, 143], [37, 40, 70, 144, 203, 205], [38, 46, 72, 74, 105, 112, 120, 121, 147, 155, 187, 207, 214], [39, 47, 75, 80, 119, 130], [40, 49, 79, 111, 112, 120, 123, 142, 147, 190], [41, 48, 80, 110, 122, 124, 153, 178, 191], [42, 74, 120, 132, 142, 145, 147, 207], [43, 50, 75, 106, 143, 146], [44, 45, 81, 187, 189], [45, 83, 143, 146, 188, 195], [46, 84, 113, 125, 143, 157, 182, 188, 193, 205], [47, 82, 126, 137, 145, 180, 184, 207], [48, 82, 114, 127, 128, 145, 147, 181, 192, 207, 213, 214], [49, 85, 113, 129, 144, 194, 203, 204, 205, 206], [50, 51, 90, 189], [51, 92, 143, 146, 195], [52, 56, 155, 158], [53, 71, 97, 155, 160, 163, 208, 213], [54, 69, 96, 148, 156, 162, 167], [55, 70, 95, 154, 161, 165, 169], [56, 57, 68, 98, 148, 165], [57, 62, 78, 102, 149, 155, 160, 208], [58, 73, 103, 151, 154, 161, 165, 171], [59, 75, 106, 151, 156, 162, 167, 170], [60, 76, 99, 150, 153, 161, 164, 171], [61, 74, 105, 155, 160, 163, 208, 212, 214, 215], [62, 87, 109, 152, 157, 165, 169, 171, 209], [63, 68, 148, 172, 174, 176], [64, 65, 175, 208, 211], [65, 67, 76, 150, 177], [66, 73, 151, 172, 174, 176, 177], [67, 88, 211], [68, 78, 118, 179], [69, 81, 180], [70, 79, 179, 181, 213], [71, 80, 178, 182], [72, 84, 119, 151, 154, 156, 172, 185], [73, 89, 120, 179, 183], [74, 91, 153, 178, 182, 185, 186], [75, 90, 180, 184], [76, 88, 123, 183], [77, 86, 122, 150, 153, 185], [78, 87, 124, 172, 174, 178], [79, 85, 153, 154, 161, 178, 186], [80, 82, 121, 155, 208], [81, 83, 156, 162], [82, 125, 157, 182, 185, 209], [83, 159, 166, 180, 184], [84, 126, 158, 159, 173, 179, 180, 210], [85, 158, 168, 179, 181, 183, 213, 214], [86, 128, 211, 213], [87, 127, 173, 175, 179, 181, 183], [88, 129, 164], [89, 93, 133, 161, 174, 178], [90, 92, 130, 162], [91, 94, 132, 160, 208, 215], [92, 137, 166, 180, 184], [93, 138, 168, 175, 179, 181, 183, 215], [94, 134, 169, 182, 185, 209], [95, 100, 190, 192, 197, 208, 210], [96, 187, 189, 198], [97, 101, 148, 191, 193, 196], [98, 102, 118, 197], [99, 111, 123, 190, 199, 201], [100, 107, 119, 151, 154, 200], [101, 108, 121, 149, 155, 187, 208], [102, 109, 110, 124, 191], [103, 112, 120, 190, 197, 201], [104, 122, 150, 153, 191, 196, 200], [105, 151, 191, 193, 200, 216], [106, 187, 189, 198, 202], [107, 126, 158, 197, 210], [108, 125, 152, 157, 188, 193, 196, 200, 209], [109, 114, 127, 192, 197, 201], [110, 114, 155], [111, 115, 153, 203, 204], [112, 113, 154, 204], [113, 158, 197], [114, 117, 157, 204], [115, 116, 142, 160, 190], [116, 144, 169, 194, 203, 204, 216], [117, 145, 163, 192, 197, 213], [118, 124, 205], [119, 126, 187, 207], [120, 133, 205, 206], [121, 125, 172], [122, 128, 207], [123, 129, 206], [124, 127, 131], [125, 136, 173, 207], [126, 135, 188, 205], [127, 139, 205, 206], [128, 196], [129, 199], [130, 137, 189, 208], [131, 139, 174, 178, 191], [132, 134, 191, 216], [133, 138, 142, 190], [134, 145, 192, 207], [135, 180, 198, 210], [136, 176, 182, 193, 196, 205, 209], [137, 141, 195, 209], [138, 144, 194, 205, 206, 216], [139, 140, 175, 181, 192], [140, 177, 186, 200, 206, 216], [141, 184, 202, 207, 212], [142, 144, 178], [143, 180, 198], [144, 147, 181], [145, 182, 205], [146, 184, 202], [147, 186, 204, 206, 216], [148, 149, 208, 210], [149, 152, 156, 172], [150, 208, 211, 212], [151, 208, 210, 212], [152, 159, 173, 210], [153, 160, 213, 214], [154, 158, 214], [155, 157], [156, 159, 187], [157, 163, 213, 214], [158, 165], [159, 167, 188], [160, 169, 178, 191], [161, 168, 190, 208, 215], [162, 166, 189, 208], [163, 182, 193, 209], [164, 199, 211, 213], [165, 179, 197, 210], [166, 170, 195, 209], [167, 180, 198, 210], [168, 171, 194, 209], [169, 181, 192, 213, 214, 215], [170, 184, 202, 212], [171, 183, 201, 212, 214, 215], [172, 173], [173, 176], [174, 175, 208], [175, 177, 209], [176, 179, 210], [177, 183, 212], [178, 181], [179, 205], [181, 186], [182, 213], [183, 206], [185, 207, 212, 214], [186, 214, 215], [187, 188], [188, 198], [189, 195], [190, 194, 216], [191, 192, 208], [192, 200, 209, 216], [193, 210], [194, 201], [195, 202], [196, 211, 213], [197, 205], [199, 203], [200, 207, 212, 214], [201, 204, 206, 216], [203, 213], [204, 214], [208, 209], [209, 212], [215, 216]]]]], 46, [[[4], [1, 2], [1, 3], [1, 4], 3, [1, 5], 2, [1, 6], 1, [2, 3], 1, [2, 4], 1, [2, 5], 2, [2, 6], 1, [2, 7], [3, 4], 3, [3, 5], 4, [3, 6], 4, [3, 7], 1, [4, 5], 3, [4, 6], 6, [4, 7], 3, [5, 6], 1, [5, 7], 1, [1, 2, 3], 1, [1, 2, 4], 2, [1, 2, 5], 5, [1, 2, 6], 5, [1, 2, 7], 3, [1, 3, 4], 1, [1, 3, 5], 3, [1, 3, 6], 3, [1, 3, 7], 2, [1, 4, 5], 4, [1, 4, 6], 9, [1, 4, 7], 7, [1, 5, 6], 3, [1, 5, 7], 5, [1, 6, 7], 1, [2, 3, 4], 1, [2, 3, 5], 6, [2, 3, 6], 7, [2, 3, 7], 5, [2, 4, 5], 2, [2, 4, 6], 4, [2, 4, 7], 4, [2, 5, 6], 3, [2, 5, 7], 4, [2, 6, 7], 2, [3, 4, 5], 2, [3, 4, 6], 6, [3, 4, 7], 5, [3, 5, 6], 4, [3, 5, 7], 7, [3, 6, 7], 3, [4, 5, 6], 2, [4, 5, 7], 5, [4, 6, 7], 4, [5, 6, 7], 1, [1, 2, 3, 5], 1, [1, 2, 3, 6], 2, [1, 2, 3, 7], 1, [1, 2, 4, 5], [1, 2, 4, 6], 2, [1, 2, 4, 7], 2, [1, 2, 5, 6], 2, [1, 2, 5, 7], 4, [1, 2, 6, 7], 2, [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], 1, [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], 2, [1, 4, 6, 7], 2, [1, 5, 6, 7], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], 2, [2, 3, 5, 7], 4, [2, 3, 6, 7], 2, [2, 4, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7], [1, 2, 3, 5, 7]], [[-2, [[144, 268], [168, 268], [200, 268], [208, 255], [214, 258]]], [-1, [[2, 60, 224, 226, 231], [3, 80, 224], [5, 96, 249], [6, 62], [12, 247], [13, 59, 62, 127], [14, 128, 132, 133], [15, 62, 127, 150, 156], [16, 231], [18, 133, 151, 165], [19, 133], [20, 136, 143, 164, 165, 274, 276], [22, 172, 268], [23, 79], [25, 176], [30, 132], [32, 138], [33, 195], [34, 143, 274], [36, 143], [37, 147], [38, 203, 268], [40, 176], [42, 176, 208], [43, 255], [47, 54, 183, 208, 217], [48, 143], [49, 255], [50, 217, 258], [51, 268], [53, 218, 258], [54, 265], [56, 223, 268], [57, 211, 269], [62, 231, 236], [64, 71, 96, 133, 225, 242], [68, 224, 231], [70, 143], [71, 137, 239], [72, 227, 234], [75, 230, 237], [77, 149, 244], [79, 82], [81, 224], [86, 227, 249], [88, 249, 251], [89, 250, 252], [90, 230, 250], [95, 231], [98, 255], [102, 179], [104, 234], [110, 187], [111, 258], [113, 237], [116, 251, 255], [118, 255], [121, 252, 258], [124, 258, 262], [126, 254, 260], [133, 137], [143, 263, 267, 272, 273], [145, 268], [149, 270, 275], [152, 231], [157, 234], [159, 237], [161, 276], [166, 239], [169, 270], [170, 244], [171, 174, 268], [173, 247], [176, 179], [179, 195], [187, 203, 277, 278], [191, 208], [195, 265], [196, 214, 268], [202, 268, 279], [203, 269], [209, 255], [211, 277], [213, 258], [214, 219], [219, 222], [220, 223, 260], [222, 262], [239, 255], [243, 268], [244, 247, 258], [267, 268], [268, 273], [269, 274]]], [[1, 0], [[80, 82], [84, 79], [168, 174], [173, 171], [192, 208], [200, 214], [209, 191], [213, 196, 219], [220, 214]]], [1, [[1, 16, 25, 40, 45, 95, 112, 135, 160, 180, 233, 277], [2, 5, 14, 63, 64, 72], [3, 4, 86], [4, 24, 68, 99], [5, 25, 81, 95, 99], [6, 23, 94, 96, 112, 225, 232, 249], [7, 26, 60, 80, 93, 103, 224, 231], [8, 27, 63, 67, 83, 97, 115, 118, 256, 257, 280], [9, 28, 68, 81, 95, 99, 120, 240], [10, 29, 67, 83, 93, 103, 117, 122, 224, 231, 239], [11, 35, 99, 100, 120, 240, 248], [12, 34, 70, 85, 103, 117, 122, 125, 239], [13, 23, 58, 128, 132, 133, 148, 225], [14, 16, 25, 135, 139, 229], [15, 128, 133, 151, 160], [16, 19, 157, 235, 263], [17, 41, 63, 154, 167, 266, 270], [18, 42, 131, 150, 156, 163, 169, 265], [19, 21, 40, 131, 135, 150, 166, 245], [20, 47, 156, 163, 169, 174, 265], [21, 22, 43, 70, 137, 141, 155, 239, 263, 267], [22, 53, 148, 149, 158, 244, 245, 246, 264], [23, 31, 80, 176, 190, 263], [24, 134, 181], [25, 30, 181, 250], [26, 128, 132, 175, 184], [27, 40, 131, 135, 180, 193, 194, 201, 277], [28, 41, 134, 181, 198, 266], [29, 42, 131, 132, 175, 184, 191, 197, 265], [30, 32, 81, 95, 135, 253, 277], [31, 33, 82, 94, 131, 132, 177, 201, 225], [32, 37, 85, 86, 104, 141, 181, 183, 195, 266], [33, 38, 88, 98, 138, 182, 226, 263, 267], [34, 47, 184, 191, 197, 204, 265], [35, 44, 181, 183, 198, 266, 275], [36, 105, 180, 194, 201, 206, 228], [37, 90, 113, 148, 188, 203, 253, 254, 271, 277, 278], [38, 89, 111, 147, 186, 201, 206, 229, 264], [39, 46, 94, 131, 150, 177, 212], [40, 43, 210, 257], [41, 45, 95, 152, 215, 277], [42, 49, 209, 211, 231], [43, 53, 105, 179, 180, 194], [44, 164, 215, 276], [45, 52, 104, 154, 157, 181, 183, 210, 266], [46, 51, 98, 155, 182, 209, 263, 267], [47, 209, 211, 219], [48, 55, 105, 212, 221], [49, 50, 156, 179, 184, 234, 265], [50, 161, 185, 187, 211, 237, 269], [51, 111, 158, 186, 212, 213, 221, 264], [52, 113, 159, 160, 188, 215, 216, 271, 276, 277, 278], [53, 187, 190, 202, 257, 259], [54, 57, 164, 193, 222, 255], [55, 56, 118, 209, 267], [56, 124, 212, 213, 221], [57, 167, 199, 217, 258, 262], [58, 60, 80, 226], [59, 61, 79, 224], [60, 65, 128, 232], [61, 66, 127], [62, 64], [63, 95, 135, 233, 240, 242], [65, 74, 93, 129], [66, 69, 92, 130, 224, 231], [67, 94, 131, 225, 232, 238, 245], [68, 72, 134], [69, 76, 101, 140, 227, 234], [70, 105, 228, 232, 238, 245, 246], [71, 77, 102, 226], [72, 75, 99, 139, 240], [73, 100, 136, 228, 233, 240, 242, 248], [74, 78, 106, 142, 232, 238], [75, 108, 146, 241], [76, 114, 144, 230, 237], [77, 110, 229, 242, 248], [78, 107, 145, 235, 243], [80, 84, 249], [81, 86], [82, 88, 92, 224], [83, 96, 225, 249, 251, 253], [84, 87, 93], [85, 100, 228, 249, 251, 253, 254], [86, 90, 99], [87, 91, 106, 249, 251], [88, 89, 101, 227], [89, 114, 230], [90, 108], [91, 107, 250, 252], [92, 101, 177], [93, 106, 175], [94, 98, 231, 257], [95, 104, 256], [96, 102, 176, 256], [97, 112, 180, 228, 232, 233, 249], [98, 111, 232, 234, 238], [99, 108, 181], [100, 115, 183, 256, 261], [101, 114, 116, 182], [102, 110, 249, 251, 255], [103, 109, 184, 227, 232, 234, 249], [104, 113, 233, 240, 255], [105, 118, 257, 259], [106, 107, 117, 178], [107, 123, 189], [108, 120, 188], [109, 122, 185, 230, 235, 237, 250], [110, 250, 252, 256, 258, 261], [111, 235, 237, 243, 257, 259], [112, 190, 235, 236, 250, 256, 257, 280], [113, 236, 241, 256, 258, 261], [114, 121, 186], [115, 119, 193, 240, 251, 255], [116, 121, 192], [117, 123, 191, 238, 251, 255], [118, 124, 194, 238], [119, 199, 241, 252, 256, 258, 261, 262], [120, 198, 241, 256], [121, 126, 200], [122, 197, 244, 245, 253], [123, 125, 196, 243, 252, 258], [124, 202, 243, 257, 259], [125, 204, 246, 254, 260], [126, 205], [127, 130], [128, 129, 263], [129, 142, 151, 175], [130, 140, 150, 177], [131, 263, 267, 272], [132, 138, 224, 231], [133, 176, 270], [134, 139, 152], [135, 141, 266, 270, 280], [136, 154, 183, 266, 270, 275], [137, 149, 156, 179, 265], [138, 147, 184, 227, 234, 265], [139, 146, 157, 181, 266], [140, 144, 155, 182], [141, 148, 180, 228, 233], [142, 145, 153, 178, 263, 267], [144, 158, 186], [145, 162, 189, 264], [146, 159, 188, 271], [147, 185, 230, 237, 269], [148, 190, 236, 270, 280], [149, 161, 187, 269], [150, 155, 231], [151, 153], [152, 157], [153, 162, 165], [154, 160, 233, 276], [155, 158, 163, 234], [156, 161, 263], [157, 159, 166], [158, 168, 237], [159, 170], [160, 236, 270], [161, 169, 264], [162, 171], [163, 168, 209, 239], [164, 167, 266], [165, 171, 208, 267], [166, 170, 210, 266], [167, 215, 271, 276], [168, 173, 213, 244], [169, 211, 269, 272], [170, 172, 216, 271], [171, 214], [172, 218, 247, 275], [173, 220], [174, 219, 247, 273], [175, 178], [176, 277], [177, 182], [178, 189, 191], [179, 187], [180, 190, 263], [181, 188], [182, 186, 192], [183, 193, 277, 278], [184, 185, 263], [185, 197, 264], [186, 200], [188, 198], [189, 196], [190, 201, 264, 277], [191, 196, 267], [192, 200, 209], [193, 199, 210, 266], [194, 202, 267], [195, 203, 251, 255], [196, 204], [197, 211, 269, 272], [198, 215, 271, 277], [199, 216, 271, 277, 278, 279], [200, 205, 213], [201, 257, 272, 280], [202, 206], [203, 207, 252, 258], [204, 219, 273], [205, 220], [206, 259, 273], [207, 254, 260, 274, 278, 279], [208, 214], [209, 213], [210, 216, 255], [212, 257, 272], [213, 220], [216, 218, 258], [217, 260, 274, 276, 278], [218, 260, 278, 279], [219, 260], [221, 259, 273], [223, 262], [224, 227], [225, 226, 280], [226, 229, 232, 249], [227, 230], [228, 280], [229, 235, 250, 280], [231, 234], [232, 235, 263], [233, 236], [234, 237, 239], [235, 245, 264], [236, 242], [237, 244], [238, 243, 267], [239, 244, 265], [240, 241, 266], [241, 248, 271], [242, 256, 270, 280], [243, 246], [244, 269], [245, 257, 272, 280], [246, 259, 273], [247, 260, 274], [248, 261, 275], [249, 250], [250, 253], [251, 252], [252, 254], [253, 256, 280], [254, 261], [255, 258], [256, 277], [258, 260], [260, 262], [261, 278], [262, 279], [263, 264], [264, 272], [265, 269], [266, 271], [270, 277], [271, 275], [275, 276, 278]]], [2, [[58, 224], [59, 226], [61, 232], [65, 224, 231], [69, 232, 238], [74, 227, 234], [76, 235, 243], [78, 230, 237], [79, 249], [84, 224], [87, 227], [91, 230], [116, 238], [121, 243], [126, 246], [127, 263], [140, 263, 267], [144, 264], [151, 231], [153, 234], [162, 237], [163, 267], [165, 239], [171, 244], [173, 273], [192, 267], [205, 273]]]]], [[[3], [4], 2, [5], [1, 2], [1, 3], [1, 4], 4, [1, 5], 3, [1, 6], 1, [2, 3], 1, [2, 4], 1, [2, 5], 3, [2, 6], 2, [2, 7], [3, 4], 3, [3, 5], 6, [3, 6], 6, [3, 7], 1, [4, 5], 4, [4, 6], 9, [4, 7], 5, [5, 6], 1, [5, 7], 1, [1, 2, 4], [1, 2, 5], 5, [1, 2, 6], 5, [1, 2, 7], 2, [1, 3, 5], 1, [1, 3, 6], 2, [1, 3, 7], [1, 4, 5], 3, [1, 4, 6], 11, [1, 4, 7], 7, [1, 5, 6], 2, [1, 5, 7], 4, [2, 3, 5], 6, [2, 3, 6], 8, [2, 3, 7], 5, [2, 4, 5], [2, 4, 6], 3, [2, 4, 7], 3, [2, 5, 6], 1, [2, 5, 7], 3, [2, 6, 7], [3, 4, 5], [3, 4, 6], 6, [3, 4, 7], 5, [3, 5, 6], 3, [3, 5, 7], 8, [3, 6, 7], 1, [4, 5, 6], [4, 5, 7], 4, [4, 6, 7], 2, [1, 2, 3, 5], 1, [1, 2, 3, 6], 2, [1, 2, 3, 7], 1, [1, 2, 4, 5], [1, 2, 4, 6], 3, [1, 2, 4, 7], 3, [1, 2, 5, 6], 3, [1, 2, 5, 7], 6, [1, 2, 6, 7], 2, [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], 2, [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], 4, [1, 4, 6, 7], 3, [1, 5, 6, 7], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], 3, [2, 3, 5, 7], 6, [2, 3, 6, 7], 3, [2, 4, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], 1, [3, 5, 6, 7], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], 1, [1, 2, 3, 6, 7], [1, 2, 4, 6, 7]], [[1, [[1, 7, 11, 33, 34, 39, 46, 94, 132, 136, 141, 147, 171, 181, 190, 206, 236, 241, 268, 272, 278], [2, 8, 22, 31, 55, 60, 68, 100, 134, 168, 170, 213, 217, 254], [3, 11, 33, 51, 58, 66, 132, 152, 155, 160, 171, 272], [4, 21, 32, 54, 58, 66, 101, 105, 116, 135, 160, 169, 216, 272], [5, 13, 26, 39, 51, 53, 62, 73, 75, 82, 124, 131, 184, 187, 198, 226, 243, 246, 258, 259, 261, 272], [6, 10, 19, 78, 86, 90, 207, 213, 217, 276], [7, 12, 95, 207], [8, 34, 76, 98, 99, 105, 116, 206, 215, 236], [9, 31, 109, 207, 213], [10, 32, 92, 101, 103, 105, 120], [11, 81, 100, 108, 112, 118, 213, 217, 219, 244, 248, 280], [12, 33, 77, 103], [13, 38, 78, 80, 93, 100, 113, 122, 123, 129, 244, 245, 276, 277], [14, 35, 100, 109, 128, 207, 213, 225, 276], [15, 36, 77, 92, 101, 103, 127, 222], [16, 37, 81, 93, 100, 112, 123, 129, 224, 240, 244, 248, 276], [17, 45, 94, 103, 110, 111, 127, 222, 233], [18, 44, 106, 109, 128, 225, 235, 276, 279], [19, 21, 32, 135, 136, 141, 144, 148, 212], [20, 34, 76, 130, 141, 147, 206], [21, 24, 153, 158, 213, 217, 220, 254], [22, 76, 130, 154, 160], [23, 51, 82, 132, 152, 155, 162, 163, 226, 259], [24, 29, 54, 82, 131, 135, 162, 163, 229], [25, 53, 82, 130, 154, 166, 258], [26, 52, 78, 156, 164, 256, 260], [27, 64, 83, 142, 154, 161, 166, 258, 267, 271], [28, 61, 83, 142, 155, 162, 163, 167, 259, 268], [29, 30, 65, 85, 138, 217, 254, 257, 276], [30, 71, 147, 163, 221, 229, 234, 255, 262, 268, 278], [31, 136, 174], [32, 40, 170, 172, 179, 237], [33, 133, 172], [34, 41, 168, 170, 178, 254], [35, 53, 136, 174, 191, 258], [36, 52, 133, 172, 186, 256], [37, 51, 132, 171, 184, 187, 190, 259, 272], [38, 54, 131, 135, 169, 184, 185, 187, 189, 272], [39, 93, 100, 134, 168, 170, 182, 192, 276], [40, 46, 92, 101, 135, 136, 190, 241, 272], [41, 42, 99, 131, 189, 206], [42, 50, 104, 170, 209, 254, 257, 276], [43, 96, 106, 140, 170, 173, 182, 183, 192, 195, 273, 276, 279], [44, 64, 174, 191, 258, 267], [45, 59, 172, 173, 186, 256, 270], [46, 49, 95, 96, 108, 138, 139, 170, 172, 173, 182, 256, 276], [47, 102, 137, 169, 185, 189, 196, 210], [48, 94, 110, 171, 190, 259, 268], [49, 97, 114, 146, 147, 177, 181, 190, 194, 241, 242, 266, 268, 272, 274, 278], [50, 119, 181, 189, 196, 212, 255, 262, 278], [51, 57, 100, 197, 201, 248], [52, 58, 101, 152, 199, 272], [53, 60, 100, 168, 202, 213], [54, 65, 100, 197, 201, 245], [55, 56, 99, 131, 198], [56, 70, 104, 254, 257], [57, 66, 105, 110, 155, 171, 259], [58, 69, 108, 153, 156, 172, 173, 197, 256], [59, 110, 161, 199, 271], [60, 67, 105, 154, 174, 175, 214, 243, 258], [61, 106, 173, 183, 197, 201, 205, 273], [62, 68, 106, 113, 140, 156, 170, 173, 203, 217, 254, 273, 280], [63, 73, 102, 137, 198, 204], [64, 72, 106, 173, 202, 203], [65, 71, 102, 105, 169, 185], [66, 118, 158, 179, 201, 248, 264, 273, 280], [67, 118, 159, 176, 180, 202, 203, 218, 247, 263], [68, 116, 160, 181, 198, 221, 246, 255, 261, 272], [69, 114, 157, 160, 177, 199, 200, 266, 271, 272, 274], [70, 119, 198, 204, 255, 262], [71, 118, 178, 188, 201, 245, 252, 273], [72, 75, 124, 161, 184, 243, 258], [73, 74, 122, 257], [74, 126, 198, 204, 262], [75, 129, 164, 193, 202, 203, 247, 253, 263], [76, 79, 217, 219], [77, 86, 133, 207, 213], [78, 101, 135, 216, 222, 226, 232], [79, 84, 98, 130, 206, 232], [80, 99, 131, 206, 215, 223, 229], [81, 88, 132, 206, 222, 226, 232, 278], [82, 100, 134, 213, 217, 225, 227, 276], [83, 106, 140, 217, 224, 225, 227, 235, 276, 279, 280], [84, 89, 107, 143, 209, 217, 225, 276], [85, 102, 137, 210, 215, 223, 229, 234], [86, 91, 103, 144, 208, 214, 222], [87, 111, 142, 210, 216, 222, 232, 233], [88, 90, 112, 145, 209, 217, 224, 276, 279, 280], [89, 117, 150, 212, 221, 228, 232, 233, 278], [90, 120, 148, 212, 221, 226, 232, 278], [91, 115, 151, 211, 218, 230], [92, 95, 207, 240, 276], [93, 98, 206, 236, 238, 241], [94, 112, 240, 276, 279], [95, 97, 103, 208], [96, 111, 210, 236, 238, 241, 242], [97, 115, 211, 240], [98, 107, 168, 244], [99, 104, 245], [100, 105, 243, 246], [101, 108, 213, 244, 248], [102, 122, 245, 252], [103, 115, 172], [104, 119, 215, 223], [105, 118, 170, 217, 276], [106, 124, 243, 246, 250, 251], [107, 117, 175, 236, 238, 243], [108, 114, 214, 216, 222, 243], [109, 121, 174, 208, 214], [110, 224, 248, 280], [111, 123, 173, 244, 249], [112, 120, 171, 236, 250], [113, 116, 169, 210, 215, 216, 236, 250], [114, 218, 219, 230, 244, 247, 248, 249, 280], [115, 127, 177], [116, 178, 219, 220, 237, 244, 245, 277], [117, 176, 237, 239, 244, 247, 249], [118, 181, 221, 246, 250, 278], [119, 220, 231, 245, 252], [120, 179, 237, 240, 244, 248], [121, 128, 180, 211, 218], [122, 126, 185, 223], [123, 125, 184, 222, 238, 243], [124, 129, 183, 224, 253, 276], [125, 193, 230, 239, 244, 247, 249, 253], [126, 188, 231, 245, 252], [127, 186, 230, 240, 244, 248], [128, 191, 228, 246, 278], [129, 187, 226, 246, 250, 278], [130, 143, 168, 260], [131, 254, 257, 265], [132, 145, 256, 260, 264], [133, 144, 152], [134, 141, 206, 258, 261], [135, 138, 256, 260, 264, 276, 277], [136, 139, 207, 213], [137, 254, 257, 265, 269], [138, 147, 169, 210, 216, 268], [139, 146, 174, 208, 214, 258], [140, 210, 258, 259, 261, 267, 268], [141, 149, 170, 209, 217, 254, 276], [142, 156, 173, 256, 260, 270], [143, 150, 154, 175, 258], [144, 151, 153, 172, 256], [145, 148, 155, 171, 259, 268], [146, 180, 211, 218, 263], [147, 178, 219, 260, 277], [148, 158, 179, 260, 264], [149, 181, 212, 221, 255, 261, 268, 278], [150, 159, 176, 260, 263, 270], [151, 157, 177, 266], [152, 153, 213], [153, 157, 162, 214], [154, 159, 217], [155, 158, 217, 280], [156, 160, 216, 271], [157, 165, 218], [158, 163, 221], [159, 166, 221, 271], [160, 219, 260], [161, 164, 224, 256], [162, 165, 197, 225, 256], [163, 201, 227, 260, 264], [164, 199, 226, 266, 271], [165, 167, 200, 228, 266], [166, 202, 227, 260, 263], [167, 205, 235, 270], [168, 175, 272], [169, 178, 254, 273], [170, 181, 236], [171, 179, 273], [172, 177], [173, 184, 272, 274], [174, 180], [175, 176, 182], [176, 194, 272, 274], [177, 186], [178, 189, 255, 272], [179, 190, 272], [180, 191], [181, 192, 237, 273], [182, 194, 238, 243, 258], [183, 187, 259, 275], [184, 193, 197, 256], [185, 188, 257, 276], [186, 199, 266, 272], [187, 201, 264, 273], [188, 196, 262, 278], [189, 245, 265, 277], [190, 240, 248, 264], [191, 202, 263], [192, 241, 246, 261, 272, 278], [193, 200, 266, 272, 274, 275], [194, 195, 239, 247, 263], [195, 242, 251, 267, 274, 275], [196, 252, 269, 273, 279], [197, 200, 243], [198, 245, 265], [199, 248], [200, 205, 247], [201, 246, 272], [202, 246, 272], [203, 250, 251, 267, 271, 274], [204, 252, 269], [205, 251, 274, 275], [206, 209, 276, 277], [207, 208], [208, 211, 276], [209, 212, 215, 236], [210, 276, 277, 279], [211, 278], [212, 220, 237, 277], [213, 214], [214, 218, 225], [215, 220, 254], [216, 219, 280], [217, 221], [218, 228], [219, 232], [220, 229, 255], [221, 227, 280], [222, 230, 256, 276], [223, 231, 257, 276], [224, 226, 259], [225, 228, 243, 258], [226, 248, 264, 280], [227, 246, 261, 278], [228, 235, 247, 263], [229, 245, 265, 277], [230, 233, 266, 278], [231, 234, 262, 278], [232, 244, 260, 277], [233, 249, 270, 279, 280], [234, 252, 269, 279], [235, 251, 267], [236, 237], [237, 241], [238, 239, 276], [239, 242, 278], [240, 278], [241, 244, 277], [242, 249, 279], [243, 247], [244, 272], [247, 251], [249, 274], [250, 273, 279, 280], [251, 253], [253, 275], [254, 255], [255, 265], [256, 266], [257, 262], [258, 263, 276], [259, 264, 276], [260, 272], [261, 277], [262, 269], [263, 267, 278], [264, 268, 278], [266, 270], [267, 279], [268, 273, 279, 280], [270, 271, 274], [271, 280], [276, 278], [278, 279]]]]], 47, 50, [[[3], [4], 2, [5], [1, 2], [1, 3], [1, 4], 4, [1, 5], 3, [1, 6], 1, [2, 3], 1, [2, 4], 1, [2, 5], 3, [2, 6], 2, [2, 7], [3, 4], 3, [3, 5], 6, [3, 6], 6, [3, 7], 1, [4, 5], 4, [4, 6], 9, [4, 7], 5, [5, 6], 1, [5, 7], 1, [1, 2, 3], [1, 2, 4], 1, [1, 2, 5], 6, [1, 2, 6], 6, [1, 2, 7], 3, [1, 3, 4], [1, 3, 5], 2, [1, 3, 6], 3, [1, 3, 7], 1, [1, 4, 5], 4, [1, 4, 6], 12, [1, 4, 7], 8, [1, 5, 6], 3, [1, 5, 7], 5, [1, 6, 7], [2, 3, 4], [2, 3, 5], 7, [2, 3, 6], 9, [2, 3, 7], 6, [2, 4, 5], 1, [2, 4, 6], 4, [2, 4, 7], 4, [2, 5, 6], 2, [2, 5, 7], 4, [2, 6, 7], 1, [3, 4, 5], 1, [3, 4, 6], 7, [3, 4, 7], 6, [3, 5, 6], 4, [3, 5, 7], 9, [3, 6, 7], 2, [4, 5, 6], 1, [4, 5, 7], 5, [4, 6, 7], 3, [5, 6, 7], [1, 2, 3, 5], 1, [1, 2, 3, 6], 2, [1, 2, 3, 7], 1, [1, 2, 4, 5], [1, 2, 4, 6], 3, [1, 2, 4, 7], 3, [1, 2, 5, 6], 3, [1, 2, 5, 7], 6, [1, 2, 6, 7], 2, [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], 2, [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], 4, [1, 4, 6, 7], 3, [1, 5, 6, 7], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], 3, [2, 3, 5, 7], 6, [2, 3, 6, 7], 3, [2, 4, 6, 7], [3, 4, 5, 7], [3, 4, 6, 7], 1, [3, 5, 6, 7], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], 1, [1, 2, 3, 6, 7], [1, 2, 4, 6, 7]], [[1, [[1, 9, 40, 102, 151, 162, 201, 203, 222, 302, 313], [2, 67, 108, 148, 202, 249], [3, 21, 31, 54, 56, 69, 110, 123, 126, 152, 182, 197, 250, 307], [4, 9, 52, 69, 151, 174, 201], [5, 40, 52, 58, 79, 135, 223, 267, 283, 292, 297], [6, 8, 20, 80, 87, 93, 242, 248, 249, 311], [7, 11, 104, 242], [8, 31, 100, 110, 115, 123, 132], [9, 83, 108, 120, 128, 249, 280, 315], [10, 33, 77, 107, 111, 123, 126, 241, 252, 271], [11, 34, 85, 115], [12, 32, 112, 242, 248], [13, 35, 83, 108, 120, 139, 260, 274, 280, 311], [14, 36, 85, 100, 110, 115, 143, 259], [15, 41, 108, 112, 140, 242, 248, 258, 311], [16, 38, 80, 84, 99, 108, 116, 134, 137, 139, 279, 281, 311, 312], [17, 44, 102, 115, 119, 124, 143, 259, 270], [18, 48, 112, 117, 140, 258, 269, 311, 314], [19, 33, 77, 146, 162, 164, 241], [20, 21, 31, 152, 153, 157, 162, 167, 247], [21, 24, 177, 179, 248, 249, 254, 289], [22, 77, 146, 176, 182], [23, 51, 79, 146, 176, 187, 294], [24, 27, 54, 79, 147, 152, 183, 188, 264], [25, 53, 80, 175, 186, 291, 301], [26, 52, 79, 151, 174, 188, 267, 292], [27, 30, 64, 91, 156, 249, 289, 293, 311], [28, 63, 92, 174, 188, 292, 302], [29, 62, 92, 163, 176, 184, 187, 294, 303, 306], [30, 68, 164, 188, 256, 264, 268, 290, 296, 302, 313], [31, 39, 196, 202, 209, 272], [32, 153, 200], [33, 37, 193, 202, 206, 289], [34, 149, 196], [35, 52, 151, 201, 222, 223, 292], [36, 53, 149, 196, 224, 291], [37, 47, 111, 147, 219, 241], [38, 54, 147, 152, 197, 213, 214, 219, 223, 307], [39, 42, 100, 110, 152, 153, 222, 275, 307], [40, 108, 148, 202, 217, 311], [41, 51, 153, 200, 215, 294], [42, 49, 101, 104, 114, 156, 160, 195, 196, 202, 211, 291, 311], [43, 117, 159, 202, 212, 217, 308, 311, 314], [44, 61, 195, 196, 224, 291, 305], [45, 102, 119, 201, 222, 292, 302], [46, 113, 155, 197, 214, 219, 227, 244], [47, 50, 122, 202, 245, 289, 293, 311], [48, 62, 200, 215, 294, 303], [49, 106, 129, 164, 166, 203, 205, 216, 222, 275, 277, 299, 302, 307, 309, 313], [50, 131, 203, 219, 227, 247, 290, 296, 313], [51, 65, 108, 193, 234, 248], [52, 60, 108, 232, 280], [53, 56, 110, 171, 233, 307], [54, 64, 108, 228, 232, 281], [55, 59, 111, 147, 231], [56, 70, 114, 175, 177, 195, 196, 228, 291], [57, 72, 113, 155, 231, 236], [58, 67, 117, 159, 202, 249, 308, 315], [59, 66, 122, 289, 293], [60, 69, 119, 123, 174, 201, 292], [61, 119, 184, 233, 306], [62, 73, 117, 195, 234, 239], [63, 117, 212, 232, 308], [64, 68, 113, 123, 197, 214], [65, 71, 123, 176, 198, 200, 251, 278, 294], [66, 131, 231, 236, 290, 296], [67, 203, 256, 283, 297], [68, 128, 206, 221, 232, 281, 285, 308], [69, 128, 179, 209, 232, 280, 300, 308, 315], [70, 129, 178, 182, 205, 230, 233, 299, 306, 307, 309], [71, 128, 181, 207, 208, 234, 239, 253, 282, 298], [72, 75, 137, 293], [73, 74, 135, 184, 213, 278, 294], [74, 139, 186, 220, 234, 239, 282, 288, 298], [75, 142, 231, 236, 296], [76, 78, 97, 242, 245], [77, 81, 249, 255], [78, 82, 145, 252], [79, 108, 148, 249, 262, 311], [80, 110, 152, 250, 259, 266, 267], [81, 90, 107, 146, 241, 266], [82, 89, 109, 150, 242, 248], [83, 88, 151, 267, 313], [84, 111, 147, 241, 252, 257, 264], [85, 87, 149, 242, 248], [86, 124, 163, 244, 250, 259, 266, 270], [87, 95, 115, 157, 243, 251, 259], [88, 93, 120, 158, 249, 260, 311, 314, 315], [89, 96, 121, 154, 243, 251, 252, 257], [90, 94, 118, 161, 245, 249, 258, 311], [91, 113, 155, 244, 252, 257, 264, 268], [92, 117, 159, 249, 260, 262, 311, 314, 315], [93, 132, 167, 256, 267, 313], [94, 127, 170, 247, 256, 265, 266, 270, 313], [95, 133, 169, 246, 253, 261], [96, 125, 165, 246, 253, 254, 263], [97, 98, 271], [98, 103, 109, 242], [99, 107, 241, 271, 273, 275], [100, 104, 242, 274, 311], [101, 124, 244, 271, 273, 275, 277], [102, 120, 274, 311, 314], [103, 105, 121, 243, 271, 273], [104, 106, 115, 243], [105, 125, 246, 272, 276], [106, 133, 246, 274], [107, 118, 193, 279], [108, 123, 283], [109, 121, 194], [110, 114, 248, 279, 280], [111, 122, 281], [112, 130, 200, 243, 251], [113, 137, 281, 285], [114, 129, 250, 251, 259, 278], [115, 133, 196], [116, 126, 197, 244, 250, 252, 271, 287], [117, 135, 283, 287], [118, 127, 198, 271, 273, 278], [119, 260, 280, 315], [120, 132, 201, 287], [121, 125, 136, 199], [122, 131, 252, 257], [123, 128, 202, 249, 311], [124, 134, 195, 279, 284], [125, 141, 204], [126, 206, 254, 255, 272, 279, 281, 312], [127, 207, 272, 276, 279, 282, 284], [128, 203, 256, 283, 287, 313], [129, 253, 255, 261, 279, 280, 282, 284, 315], [130, 140, 208, 246, 253], [131, 254, 263, 281, 285], [132, 209, 274, 280], [133, 143, 205], [134, 138, 213, 259, 273, 278], [135, 139, 212, 260, 311], [136, 141, 210, 257, 273, 278], [137, 142, 214, 257], [138, 220, 261, 276, 279, 282, 284, 288], [139, 223, 267, 283, 287, 313], [140, 215, 265, 283, 313], [141, 144, 218, 263, 276, 282], [142, 221, 263, 281, 285], [143, 224, 261, 274, 279, 280], [144, 226, 268, 277, 286], [145, 150, 289], [146, 161, 193, 301], [147, 289, 293, 295], [148, 162, 297], [149, 157, 171], [150, 154, 172, 194], [151, 158, 300], [152, 156, 291, 300, 301, 311, 312], [153, 160, 242, 248], [154, 165, 173, 199, 289, 293], [155, 289, 293, 295, 304], [156, 164, 197, 244, 250, 302], [157, 169, 177, 196, 291], [158, 167, 174, 201, 292, 302], [159, 292, 297, 302], [160, 166, 200, 243, 251, 294], [161, 170, 176, 198, 294], [162, 168, 202, 249, 311], [163, 175, 195, 291, 301, 305], [164, 206, 255, 301, 312], [165, 180, 204, 290, 296], [166, 208, 246, 253, 298], [167, 179, 209, 300], [168, 203, 256, 297, 302, 313], [169, 178, 205, 299], [170, 181, 207, 298, 301, 305], [171, 177, 248], [172, 173, 248], [173, 180, 185, 251], [174, 179, 249, 315], [175, 182, 250, 306], [176, 181, 249], [177, 178, 183, 251], [178, 189, 253], [179, 188, 256], [180, 190, 253], [181, 187, 256, 306], [182, 255, 301], [183, 189, 228, 258, 291], [184, 186, 260, 291], [185, 190, 229, 258, 293], [186, 233, 267, 299, 306], [187, 234, 262, 298, 301], [188, 232, 262, 300], [189, 192, 230, 265, 299], [190, 191, 235, 265, 296], [191, 237, 269, 304], [192, 238, 269, 305], [193, 198, 307], [194, 199], [195, 213, 307, 309], [196, 205], [197, 206, 289, 308], [198, 207, 211], [199, 204, 210], [200, 208], [201, 209, 308], [202, 203], [203, 217, 308], [204, 218], [205, 224], [206, 219, 290, 307], [207, 216, 307, 309], [208, 215], [209, 222], [210, 218, 229, 293], [211, 216, 273, 278, 294], [212, 223, 292], [213, 220, 228, 291], [214, 221, 293, 311], [215, 234, 298], [216, 225, 276, 282, 298], [217, 283, 297, 313], [218, 226, 235, 296], [219, 281, 295, 312], [220, 230, 299, 307, 309, 310], [221, 227, 296, 313], [222, 274, 280, 300], [223, 232, 300, 308], [224, 233, 299, 307], [225, 277, 286, 303, 309, 310], [226, 237, 304], [227, 285, 304, 308, 314], [228, 230, 278], [229, 235, 278], [230, 238, 282], [231, 281, 295], [232, 283], [233, 280], [234, 283, 307], [235, 237, 282], [236, 285, 304], [237, 240, 286], [238, 286, 309, 310], [239, 286, 287, 303, 306, 309], [240, 288], [241, 245, 311, 312], [242, 243], [243, 246, 311], [244, 311, 312, 314], [245, 247, 252, 271], [246, 313], [247, 254, 272, 312], [248, 251], [249, 256], [250, 255, 315], [251, 253, 258], [252, 254, 289], [253, 265], [254, 264, 290], [255, 266], [256, 262, 315], [257, 263, 293, 311], [258, 265, 278, 294], [259, 261, 291, 311], [260, 267, 292], [261, 270, 299, 313], [262, 283, 297, 313], [263, 268, 296, 313], [264, 281, 295, 312], [265, 269, 282, 298], [266, 279, 301, 312], [267, 280, 300, 315], [268, 285, 304, 314], [269, 286, 303], [270, 284, 305, 314, 315], [271, 272], [272, 275], [273, 276, 311], [274, 313], [275, 279, 312], [276, 277, 313], [277, 284, 314], [278, 282], [279, 307], [282, 286], [284, 309], [286, 288], [287, 308, 314, 315], [288, 310], [289, 290], [290, 295], [291, 299], [292, 300, 311], [293, 296], [294, 298, 311], [296, 304], [298, 303, 313], [299, 305], [300, 302, 313], [301, 307], [302, 308, 314, 315], [303, 314], [305, 306, 309], [306, 315], [311, 313], [313, 314]]], [2, [[6, 78, 81, 245], [7, 97], [8, 107, 271], [12, 78, 97, 109], [15, 84, 99, 109, 136], [18, 91, 101, 136, 144], [19, 76, 145, 153], [20, 145, 146], [22, 145, 172], [23, 147, 172, 185], [24, 146, 172], [27, 161, 173, 258], [29, 155, 185, 191], [30, 170, 180, 192, 265], [31, 193], [32, 145, 194], [33, 97], [37, 98, 153, 194], [41, 147, 194, 210], [47, 103, 160, 199, 211], [48, 155, 210, 226], [50, 105, 166, 204, 216], [51, 229], [54, 193], [55, 172, 194], [59, 173, 199, 229], [62, 229, 237], [64, 198, 278], [66, 180, 204, 235], [68, 207, 238, 282], [72, 229], [73, 240], [75, 235, 240], [77, 248], [104, 271], [106, 272], [111, 248], [112, 252, 271], [122, 251, 278], [130, 254, 272], [131, 253, 282], [137, 278], [140, 264, 275], [142, 282, 288], [176, 289], [181, 290], [187, 295], [200, 289], [208, 290], [215, 295], [221, 310]]], [3, [[1, 7, 33, 34, 42, 153, 164, 241, 271, 275, 307], [2, 10, 22, 32, 55, 65, 193, 248, 289], [4, 34, 56, 171, 182, 307], [5, 16, 25, 51, 72, 74, 147, 213, 231, 278, 294, 307], [9, 114, 248, 255, 279], [13, 99, 134, 279], [26, 171, 183], [28, 163, 183, 192], [35, 213, 307], [40, 99, 193, 211], [43, 101, 195, 211, 225], [52, 228], [58, 116, 175, 195, 239, 289], [63, 195, 228, 238], [67, 126, 182, 231, 290, 307], [79, 248, 258], [83, 241, 259, 266], [88, 245], [92, 258, 269], [93, 247, 266], [108, 278], [117, 278, 286], [120, 271], [132, 272, 279], [135, 288], [148, 241, 294], [151, 291, 301], [159, 244, 294, 303], [162, 245, 289], [167, 301], [168, 247, 290], [188, 301], [202, 271], [203, 272], [209, 307], [212, 310], [217, 275, 307], [232, 307], [297, 312]]]]], 52, [[[1, 4], 1, [1, 5], [2, 3], [2, 4], [2, 5], [2, 6], [3, 4], 1, [3, 5], 2, [3, 6], 1, [3, 7], [4, 5], 2, [4, 6], 4, [4, 7], 2, [5, 6], [5, 7], [1, 2, 3], 1, [1, 2, 4], 3, [1, 2, 5], 5, [1, 2, 6], 5, [1, 2, 7], 2, [1, 3, 4], 1, [1, 3, 5], 3, [1, 3, 6], 3, [1, 3, 7], 1, [1, 4, 5], 6, [1, 4, 6], 10, [1, 4, 7], 7, [1, 5, 6], 4, [1, 5, 7], 4, [1, 6, 7], 1, [2, 3, 4], 2, [2, 3, 5], 7, [2, 3, 6], 8, [2, 3, 7], 4, [2, 4, 5], 2, [2, 4, 6], 5, [2, 4, 7], 3, [2, 5, 6], 3, [2, 5, 7], 4, [2, 6, 7], 1, [3, 4, 5], 4, [3, 4, 6], 8, [3, 4, 7], 6, [3, 5, 6], 6, [3, 5, 7], 7, [3, 6, 7], 3, [4, 5, 6], 3, [4, 5, 7], 5, [4, 6, 7], 4, [5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], 3, [1, 2, 3, 6], 4, [1, 2, 3, 7], 3, [1, 2, 4, 5], 1, [1, 2, 4, 6], 5, [1, 2, 4, 7], 4, [1, 2, 5, 6], 4, [1, 2, 5, 7], 7, [1, 2, 6, 7], 3, [1, 3, 4, 5], [1, 3, 4, 6], 2, [1, 3, 4, 7], 2, [1, 3, 5, 6], 2, [1, 3, 5, 7], 4, [1, 3, 6, 7], 2, [1, 4, 5, 6], 2, [1, 4, 5, 7], 5, [1, 4, 6, 7], 5, [1, 5, 6, 7], 1, [2, 3, 4, 6], 2, [2, 3, 4, 7], 2, [2, 3, 5, 6], 4, [2, 3, 5, 7], 8, [2, 3, 6, 7], 4, [2, 4, 5, 6], [2, 4, 5, 7], 2, [2, 4, 6, 7], 2, [2, 5, 6, 7], 1, [3, 4, 5, 6], [3, 4, 5, 7], 2, [3, 4, 6, 7], 3, [3, 5, 6, 7], 1, [4, 5, 6, 7], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], 1, [1, 2, 3, 6, 7], [1, 2, 4, 5, 7], [1, 2, 4, 6, 7], [1, 2, 5, 6, 7], [2, 3, 5, 6, 7]], [[-1, [[1, 71], [2, 50, 66, 81], [3, 39, 55, 62, 267, 329], [4, 118], [5, 33, 127, 128, 131], [6, 110, 141, 310], [8, 161], [9, 151, 166], [10, 104, 178], [11, 109, 318], [13, 161, 171, 329], [14, 161, 170, 171, 329], [15, 177, 184], [16, 62, 126, 152], [18, 62, 150], [22, 71, 162, 269], [23, 71, 128, 160, 268, 318], [24, 168, 271], [26, 165, 199, 273], [27, 269], [28, 271], [29, 208, 214], [30, 32, 209], [31, 36, 205, 224], [32, 223, 229], [34, 222], [35, 242], [37, 235], [39, 66, 232, 238], [40, 62, 329], [42, 329], [44, 223, 233], [45, 234], [46, 221, 235], [47, 243], [49, 217, 228, 230, 239, 242, 247, 331], [51, 249, 250], [53, 256], [54, 209, 256], [55, 259], [56, 256], [57, 213], [58, 250, 257], [59, 251, 258], [60, 253, 260], [62, 249, 275], [63, 267], [66, 267], [68, 272], [71, 86, 223, 252], [72, 268, 269], [73, 221, 251], [74, 267], [76, 221], [77, 269], [82, 271, 273], [83, 255, 272, 281], [88, 283], [89, 267, 329], [90, 256, 257, 268], [91, 258, 269], [93, 260, 273], [94, 283], [95, 261, 271], [99, 264, 279], [100, 284, 289], [102, 103, 286], [105, 125, 303], [108, 299], [109, 151, 293, 301], [110, 208, 294], [111, 132, 284, 292], [116, 131, 211, 291], [118, 123], [119, 285, 294], [120, 137, 288, 302, 303, 306], [124, 134, 215, 297], [125, 220], [126, 309, 310], [128, 135], [132, 222], [134, 310, 315], [139, 235], [141, 189, 294], [142, 195, 336], [145, 317], [150, 319], [151, 318], [152, 249, 318], [157, 285], [158, 318], [159, 285], [160, 252], [161, 169, 284], [165, 254], [168, 319, 322], [170, 291], [171, 292], [172, 327], [175, 318], [176, 256], [177, 185, 302], [179, 327], [184, 262, 297, 320], [188, 266, 308, 324], [189, 328], [190, 267], [191, 268], [192, 269], [193, 271], [194, 328], [195, 320], [196, 273], [199, 313, 324], [200, 279], [204, 283], [206, 329], [209, 330], [211, 329], [212, 329], [213, 217], [220, 333], [221, 231], [222, 228], [233, 269], [234, 268], [235, 244], [236, 329], [239, 271], [243, 273, 335], [248, 335], [251, 255], [252, 256], [256, 262], [261, 265, 331], [267, 274], [271, 280], [276, 283], [279, 334], [285, 287], [291, 329], [292, 329], [294, 296], [297, 336], [304, 336], [316, 335], [318, 320], [324, 327], [329, 331]]], [1, [[1, 8, 33, 34, 63, 67, 81, 206, 224, 249, 250], [2, 9, 32, 68, 71, 209, 220, 221, 251], [3, 11, 38, 53, 73, 88, 91, 94, 234, 270, 272, 330, 333], [4, 8, 29, 34, 102, 110, 206, 217, 287, 299], [5, 34, 102, 110, 287, 310], [6, 16, 40, 107, 127, 131, 140, 145, 291], [7, 20, 42, 114, 131, 140, 145, 147, 225, 291, 308], [8, 12, 51, 101, 152, 166, 255, 286], [9, 100, 108, 150, 161, 285], [10, 55, 62, 108, 150, 161, 171, 329], [11, 16, 107, 157, 172, 174, 179, 291, 299, 319, 321], [12, 14, 52, 67, 106, 107, 149, 206, 249, 259, 299, 319], [13, 59, 77, 112, 113, 156, 175, 178, 185, 325, 332], [14, 15, 58, 59, 72, 112, 117, 155, 156, 214, 252, 286, 290], [15, 60, 82, 121, 163, 169, 216, 254, 259, 265, 289, 298, 299, 308, 319, 322, 331], [16, 23, 189, 192, 194, 333], [17, 21, 67, 107, 127, 149, 311, 319], [18, 22, 104, 125, 153, 198, 219], [19, 27, 77, 113, 130, 156, 198, 202], [20, 77, 156, 175, 192, 194, 201, 325], [21, 25, 72, 130, 133, 155, 156, 191, 192, 286, 290], [22, 24, 132, 154, 190, 226, 284, 292], [23, 26, 131, 157, 225, 291], [24, 86, 137, 164, 197, 198, 202, 227, 288, 302], [25, 82, 136, 163, 193, 196, 289, 298, 311, 314, 319, 322], [26, 86, 134, 135, 166, 194, 297, 320, 325, 333, 334], [27, 28, 89, 138, 174, 190, 292], [28, 94, 144, 182, 197, 198, 202, 204, 282, 302], [29, 31, 51], [30, 50, 211, 216], [31, 102], [32, 35, 100], [33, 101, 208, 219, 223], [34, 37, 231, 333], [35, 44, 68, 105, 209, 220], [36, 43, 65, 103, 207, 208, 219], [37, 45, 63, 110, 206, 238], [38, 67, 107, 206, 224, 236, 242], [39, 109, 209, 220, 221, 235], [40, 104, 208, 219, 223, 233, 241], [41, 69, 114, 212, 224, 225, 236, 242, 247], [42, 77, 113, 223, 233, 241, 246, 332], [43, 48, 78, 115, 210, 211, 224, 226, 236], [44, 49, 70, 111, 213, 222, 329], [45, 47, 75, 116, 214], [46, 74, 119, 212, 225, 232, 238, 245, 248], [47, 84, 124, 216, 238, 245], [48, 87, 122, 215, 218, 227, 229, 237], [49, 83, 120], [50, 54, 252, 253], [51, 52, 205], [52, 58, 65, 207], [53, 63, 206, 249, 250, 257, 263], [54, 57, 66, 263], [55, 68, 209, 251, 258], [56, 74, 212, 250, 257, 263, 264, 266], [57, 61, 76], [58, 60, 78, 210], [59, 69, 212, 259, 265], [60, 87, 218], [61, 80, 217, 263, 264], [62, 71, 220, 269], [63, 75, 152, 270], [64, 79, 153, 207, 219], [65, 78, 149, 249], [66, 76, 151, 270], [67, 72, 219, 272, 333], [68, 70, 150], [69, 91, 156, 272, 281], [70, 83, 162, 251, 258, 269], [71, 161, 222, 267, 329], [72, 82, 224, 225, 226, 236], [73, 81, 157, 212, 224, 225, 250, 277], [74, 88, 158, 270, 276, 278], [75, 84, 160, 250, 257, 268], [76, 80, 159, 232], [77, 89, 225, 275, 277, 280], [78, 87, 90, 155, 252], [79, 85, 92, 154, 210, 226], [80, 167, 231, 240, 270, 278], [81, 166, 229, 231, 253, 255, 270, 272, 330, 333], [82, 227, 229, 237, 272, 281, 333, 334], [83, 168, 261, 271], [84, 165, 253, 260, 270, 273, 278], [85, 97, 164, 218, 227], [86, 169, 228, 230, 254, 274, 275, 277, 331], [87, 93, 163, 254], [88, 96, 172, 232, 257, 268], [89, 94, 175, 234, 282], [90, 93, 173, 236], [91, 95, 174, 236], [92, 97, 176, 233], [93, 99, 180, 237, 262], [94, 179, 243, 274, 275, 277, 331], [95, 182, 237, 272, 281, 282], [96, 183, 240, 260, 270, 273, 278, 335], [97, 98, 181, 239], [98, 186, 246], [99, 187, 247, 266], [100, 105], [101, 106, 205, 284], [103, 115, 127, 149], [104, 284, 292, 295], [105, 111, 150], [106, 117, 153, 207, 208, 219], [107, 286, 290, 303], [108, 118, 209, 220], [109, 126, 285, 294], [110, 116, 152, 301], [111, 120, 162], [112, 157, 212, 225, 291, 299, 308], [113, 284, 292, 295, 307], [114, 130, 156, 286, 290, 303, 306], [115, 122, 133, 155, 286, 290], [116, 124, 160], [117, 121, 154, 210, 211, 226, 284, 292], [118, 161, 213, 222, 285, 294, 329], [119, 129, 158, 293, 301, 304, 305], [120, 168], [121, 164, 215, 218, 227, 288, 302], [122, 136, 163, 289, 298], [123, 169, 217, 228, 287, 296, 299, 308, 331], [124, 165, 301, 305], [125, 132, 311], [126, 128, 220], [127, 133, 219], [128, 222, 285, 294], [129, 141, 225, 309, 310, 313, 315], [130, 138, 225, 311, 314], [131, 134, 223, 286], [132, 137, 139], [133, 136, 140, 226], [134, 145, 230, 289], [135, 228, 287, 296, 310, 313], [136, 143, 227], [137, 146, 228, 311, 314], [138, 144, 191, 234, 290], [139, 146, 190, 292], [140, 143, 192, 233, 290], [141, 142, 234, 317], [142, 243, 296, 310, 313], [143, 147, 193, 239, 298], [144, 196, 243, 298, 311, 314, 316], [145, 194, 241, 297, 303, 333], [146, 148, 197, 244, 302], [147, 201, 246, 306], [148, 203, 248, 307, 314, 316], [149, 155], [150, 162], [151, 159, 321], [152, 160, 321], [153, 154, 249], [154, 164, 176, 252], [155, 163, 173], [156, 174, 319, 322], [157, 166, 286, 325], [158, 172, 321, 323, 324], [159, 167, 293], [160, 165, 170], [161, 251, 318], [162, 168, 171], [163, 180], [164, 181, 254], [165, 184, 321, 323], [166, 287, 289, 299, 319, 321], [167, 287, 300, 321, 323], [168, 177], [169, 178, 255, 288, 320, 325], [170, 184, 256, 257, 268, 318], [171, 177, 258, 269], [172, 183, 189, 293], [173, 180, 191, 290], [174, 182, 192, 290], [175, 179, 291, 326], [176, 181, 190, 292], [177, 261, 271], [178, 259, 275, 295, 299, 319, 331], [179, 194, 297, 320, 325], [180, 187, 196, 298], [181, 186, 197, 262, 302], [182, 193, 298, 319, 322, 326], [183, 195, 300, 321, 323, 336], [184, 188, 260, 273], [185, 265, 280, 307, 322, 326], [186, 203, 266, 307], [187, 200, 306], [188, 264, 279, 323, 336], [189, 195, 268, 309, 318], [190, 197], [191, 196], [192, 193], [193, 201], [194, 275, 319], [195, 199, 273, 312], [196, 200], [197, 203, 274], [198, 275, 295, 311, 319], [199, 279, 315, 323, 328, 336], [200, 314, 316], [201, 280, 322, 326], [202, 277, 280, 307, 314, 322], [203, 204, 276], [204, 316], [205, 207], [206, 214, 330], [207, 210], [208, 211, 249], [209, 213, 329], [210, 218], [211, 215, 223, 252], [212, 330, 332], [213, 221, 251], [214, 216, 224, 250], [215, 230, 254, 331], [216, 229, 253, 330], [217, 231, 255, 330], [219, 226], [220, 222], [221, 285], [222, 235], [223, 230, 284], [224, 229, 286], [225, 234, 333, 334], [226, 227, 233], [227, 239], [228, 244, 333, 334], [229, 242, 289], [230, 241, 288], [231, 238, 287], [232, 240, 293], [233, 239, 292], [234, 243, 291], [235, 267, 294, 329], [236, 237, 290], [237, 247, 298, 331], [238, 270, 301, 330, 333], [239, 246, 302], [240, 245, 300], [241, 275, 295, 331], [242, 272, 303, 330, 333], [243, 297, 333, 334], [244, 248, 274, 296, 331], [245, 278, 305, 335], [246, 280, 307], [247, 281, 306, 332, 334], [248, 276, 304, 332, 334], [249, 252], [250, 253], [252, 254], [253, 263], [254, 262], [255, 259], [256, 267, 329], [257, 260], [258, 261, 329], [259, 272, 330], [260, 264], [262, 266, 274, 331], [263, 270, 330], [264, 278], [265, 281, 332], [266, 276, 332], [267, 318], [268, 273], [269, 271], [270, 321], [272, 319], [273, 279], [274, 276, 320], [275, 333], [276, 324], [277, 325, 332, 334], [278, 323], [279, 335], [280, 282], [281, 322], [282, 326], [283, 327, 335], [284, 288], [286, 289], [287, 301], [288, 295], [289, 303], [290, 298], [291, 297], [292, 302], [293, 300, 309], [294, 318], [296, 304, 320], [297, 308, 331], [298, 306], [299, 330, 333], [300, 305, 312], [301, 310, 321], [302, 307, 331], [303, 311, 319], [304, 313, 324], [305, 315, 323, 336], [306, 314, 322], [307, 332], [308, 325, 332, 334], [309, 312], [310, 333], [311, 333], [312, 315], [313, 334], [314, 334], [315, 317], [317, 328, 336], [320, 324], [327, 328, 336], [331, 332], [335, 336]]]]], 54, [[[4], 1, [5], [1, 4], 3, [1, 5], 2, [1, 6], 1, [2, 3], 1, [2, 4], 1, [2, 5], 2, [2, 6], 1, [3, 4], 3, [3, 5], 6, [3, 6], 5, [3, 7], 1, [4, 5], 4, [4, 6], 9, [4, 7], 5, [5, 6], [5, 7], [1, 2, 3], [1, 2, 4], 2, [1, 2, 5], 6, [1, 2, 6], 6, [1, 2, 7], 2, [1, 3, 4], [1, 3, 5], 2, [1, 3, 6], 2, [1, 3, 7], [1, 4, 5], 6, [1, 4, 6], 14, [1, 4, 7], 9, [1, 5, 6], 3, [1, 5, 7], 5, [1, 6, 7], [2, 3, 4], [2, 3, 5], 8, [2, 3, 6], 11, [2, 3, 7], 6, [2, 4, 5], [2, 4, 6], 5, [2, 4, 7], 3, [2, 5, 6], 3, [2, 5, 7], 5, [2, 6, 7], [3, 4, 5], 2, [3, 4, 6], 10, [3, 4, 7], 7, [3, 5, 6], 6, [3, 5, 7], 10, [3, 6, 7], 2, [4, 5, 6], 2, [4, 5, 7], 6, [4, 6, 7], 3, [1, 2, 3, 5], 3, [1, 2, 3, 6], 4, [1, 2, 3, 7], 3, [1, 2, 4, 5], 1, [1, 2, 4, 6], 6, [1, 2, 4, 7], 5, [1, 2, 5, 6], 5, [1, 2, 5, 7], 9, [1, 2, 6, 7], 3, [1, 3, 4, 6], 1, [1, 3, 4, 7], 1, [1, 3, 5, 6], 2, [1, 3, 5, 7], 4, [1, 3, 6, 7], 1, [1, 4, 5, 6], 2, [1, 4, 5, 7], 7, [1, 4, 6, 7], 5, [1, 5, 6, 7], [2, 3, 4, 6], 1, [2, 3, 4, 7], 1, [2, 3, 5, 6], 5, [2, 3, 5, 7], 10, [2, 3, 6, 7], 4, [2, 4, 5, 7], 1, [2, 4, 6, 7], 2, [2, 5, 6, 7], [3, 4, 5, 7], 2, [3, 4, 6, 7], 3, [3, 5, 6, 7], [1, 2, 3, 5, 6], 1, [1, 2, 3, 5, 7], 2, [1, 2, 3, 6, 7], 1, [1, 2, 4, 5, 7], [1, 2, 4, 6, 7], 1, [1, 2, 5, 6, 7], [1, 3, 4, 6, 7], [1, 3, 5, 6, 7], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7]], [[1, [[1, 4, 6, 15, 16, 23, 44, 45, 48, 51, 58, 99, 140, 187, 189, 200, 202, 257, 265, 324, 325, 371], [2, 6, 16, 22, 44, 46, 48, 93, 118, 144, 173, 187, 195, 202, 237, 258, 260, 324, 358, 371, 377], [3, 9, 32, 41, 42, 52, 63, 68, 127, 139, 143, 177, 179, 209, 215, 222, 238, 281, 306, 308, 309, 329, 331, 335, 338, 350, 351, 356, 357, 378], [4, 24, 66, 96, 98, 107, 123, 247, 259, 292], [5, 23, 67, 85, 94, 114, 246, 257], [6, 25, 65, 95, 97, 107, 109, 123, 245, 262, 293], [7, 22, 67, 85, 94, 113, 244, 258], [8, 29, 74, 88, 93, 94, 113, 126, 132, 244, 258, 275, 364], [9, 28, 71, 74, 86, 88, 93, 99, 106, 125, 128, 129, 274, 284, 302, 311, 313, 364, 365, 366, 371], [10, 27, 74, 88, 94, 99, 114, 126, 133, 246, 257, 273, 365], [11, 35, 76, 89, 103, 112, 113, 126, 132, 135, 275, 290, 364, 369], [12, 34, 76, 89, 105, 114, 126, 133, 135, 273, 288, 365, 370], [13, 24, 66, 137, 150, 247, 254, 327, 342], [14, 25, 64, 65, 136, 138, 141, 145, 150, 155, 245, 253, 326, 342], [15, 66, 137, 166, 327, 350], [16, 65, 136, 141, 165, 168, 326, 351], [17, 42, 68, 70, 139, 141, 143, 165, 168, 176, 177, 182, 329, 335, 351], [18, 41, 68, 137, 139, 166, 179, 184, 331, 350], [19, 43, 70, 139, 169, 179, 181, 330, 339, 350], [20, 49, 81, 157, 166, 179, 184, 331, 349, 352, 355], [21, 50, 80, 81, 148, 157, 168, 176, 177, 182, 186, 264, 329, 346, 354, 378], [22, 136, 145, 188, 191], [23, 136, 138, 188, 196], [24, 31, 189, 200, 202, 295, 325], [25, 26, 85, 187, 195, 200, 202, 294, 324], [26, 36, 87, 95, 138, 139, 145, 188, 245, 303, 342, 357], [27, 41, 138, 139, 188, 196, 211, 226, 331], [28, 42, 139, 143, 199, 209, 215, 222, 329, 335, 342, 356, 357], [29, 43, 139, 145, 188, 191, 211, 217, 330], [30, 88, 93, 144, 187, 195, 210, 212, 216, 302, 358, 364], [31, 38, 98, 143, 247, 300, 342, 356], [32, 86, 88, 99, 140, 187, 189, 200, 212, 213, 224, 365], [33, 89, 112, 151, 195, 198, 212, 216, 227, 328, 364, 369, 377], [34, 49, 157, 196, 211, 226, 229, 331, 349], [35, 54, 157, 190, 191, 211, 217, 229, 330, 348], [36, 40, 90, 91, 101, 146, 147, 151, 192, 194, 195, 200, 210, 212, 213, 250, 324, 332, 364, 365], [37, 89, 91, 105, 151, 156, 192, 198, 200, 212, 213, 214, 224, 227, 228, 359, 365, 370], [38, 39, 89, 104, 151, 198, 200, 212, 249, 325, 333, 365], [39, 121, 208, 225, 253, 300, 305, 326, 340, 342, 346, 356, 362, 368], [40, 92, 115, 158, 161, 204, 206, 208, 219, 220, 225, 254, 303, 304, 327, 334, 342, 346, 357, 361, 367, 368, 375], [41, 51, 99, 189, 231, 235, 257], [42, 48, 93, 99, 187, 230, 232, 237, 239, 371], [43, 46, 93, 231, 233, 258, 358], [44, 55, 95, 139, 165, 188, 350, 357], [45, 53, 98, 143, 351, 356], [46, 60, 109, 169, 190, 191, 263, 307, 330], [47, 112, 171, 198, 230, 237, 240, 328, 377], [48, 59, 107, 109, 168, 197, 199, 264, 308, 329], [49, 62, 105, 170, 192, 231, 235, 241, 242], [50, 103, 105, 192, 198, 214, 230, 232, 239, 240, 243, 359], [51, 57, 107, 166, 193, 196, 261, 306, 331], [52, 58, 105, 106, 156, 170, 171, 192, 198, 200, 240, 241, 265, 324, 325, 359, 372, 377], [53, 56, 104, 171, 198, 230, 325, 333], [54, 112, 170, 178, 231, 233, 242, 353], [55, 61, 101, 167, 170, 192, 194, 231, 232, 324, 332], [56, 121, 238, 326, 340, 351, 354, 356, 362], [57, 124, 172, 203, 205, 235, 241, 268, 314, 336], [58, 123, 208, 270, 309, 326, 327, 338, 350, 351, 356, 357], [59, 118, 124, 175, 201, 202, 237, 239, 240, 316, 341, 359, 371, 372, 377], [60, 118, 173, 207, 233, 266, 312, 343, 353, 358, 360], [61, 115, 174, 206, 234, 236, 327, 334, 350, 352, 357, 361], [62, 63, 127, 179, 209, 306, 331, 355], [63, 129, 185, 218, 235, 241, 314, 323, 336], [64, 67, 85, 244, 246, 250], [65, 73, 257, 258, 260, 265, 269, 371], [66, 72, 265, 267, 371], [67, 69, 136, 262], [68, 99, 140, 257, 265, 273, 274, 280, 365, 371], [69, 79, 94, 142, 244, 246, 257, 258], [70, 93, 144, 258, 260, 274, 275, 282, 284, 364, 371], [71, 98, 143, 247, 259, 277, 285], [72, 77, 96, 137, 247, 283], [73, 75, 97, 141, 245, 285], [74, 95, 139, 245, 262, 276, 283], [75, 84, 111, 153, 250, 260, 265, 274, 364, 365], [76, 108, 157, 248, 262, 264, 276, 283, 291], [77, 83, 110, 152, 249, 265, 273, 365], [78, 102, 148, 248, 259, 264, 272, 277, 285, 289, 373], [79, 82, 100, 149, 251, 252, 261, 262, 263, 276], [80, 103, 154, 260, 275, 282, 290, 364, 369], [81, 105, 156, 265, 273, 274, 280, 288, 365, 370, 372, 374], [82, 116, 162, 255, 256, 266, 267, 268, 279], [83, 122, 164, 253, 270, 283, 286, 291, 368], [84, 120, 160, 254, 270, 271, 281, 285, 289, 367, 368, 373], [85, 87, 293], [86, 96, 247, 292, 298, 303], [87, 90, 94, 244, 246], [88, 97, 245, 293, 297, 300], [89, 102, 248, 293, 297, 300, 305], [90, 92, 100, 251, 252, 293, 297], [91, 108, 248, 292, 296, 298, 303, 304, 375], [92, 116, 255, 256, 295, 299], [93, 109, 307, 308, 310, 315], [94, 100, 188], [95, 101, 257, 258, 313, 371], [96, 110, 189, 313], [97, 111, 187, 311], [98, 104, 311, 371], [99, 107, 306, 308, 309], [100, 116, 126, 194], [101, 115, 261, 262, 263, 264, 276, 306, 307, 308], [102, 125, 198, 311, 322], [103, 190, 296, 307, 310, 321, 375], [104, 121, 259, 264, 277, 308], [105, 127, 264, 306, 308, 309, 317, 318, 319], [106, 123, 199, 248, 259, 262, 264, 292, 293, 319, 373, 375], [107, 124, 200, 265, 365], [108, 128, 192, 313, 320], [109, 118, 195, 260, 364], [110, 122, 193, 292, 298, 306], [111, 120, 197, 293, 297, 308], [112, 264, 272, 308, 315, 317, 373], [113, 119, 191, 252, 262, 263, 293], [114, 117, 196, 251, 261, 262, 293], [115, 266, 267, 268, 279, 312, 313, 314, 316, 320, 371, 372], [116, 134, 206], [117, 133, 205, 256, 267, 268, 295], [118, 204, 271, 310, 315, 367, 373, 375], [119, 132, 207, 255, 266, 267, 295], [120, 201, 295, 299, 311, 316, 322], [121, 269, 287, 311, 316, 322, 371, 372], [122, 203, 294, 301, 313, 314, 320], [123, 202, 267, 269, 294, 295, 311, 313, 366, 371], [124, 208, 270, 309, 319, 368], [125, 131, 215, 272, 277, 297, 308], [126, 134, 211, 276, 297, 308], [127, 129, 214, 274, 323, 365, 374], [128, 130, 209, 276, 296, 298, 306, 307], [129, 222, 281, 309, 319, 368], [130, 218, 279, 301, 302, 312, 313, 314, 320, 323, 376], [131, 223, 284, 287, 299, 311, 316, 322, 374], [132, 217, 278, 283, 300, 310, 315, 367], [133, 226, 283, 286, 300, 309, 368], [134, 135, 221, 279, 299, 316], [135, 229, 291, 305, 317], [136, 142, 324], [137, 152, 189, 337], [138, 146, 246, 257], [139, 324, 332, 337], [140, 150, 245, 247, 329, 331, 338, 342], [141, 153, 187, 344], [142, 149, 165, 188], [143, 325, 333, 344], [144, 155, 245, 329, 330, 335, 339, 342, 367], [145, 147, 244, 258], [146, 161, 196, 251, 261, 331], [147, 158, 191, 252, 263, 330], [148, 171, 198, 325, 328, 333, 344, 345, 377], [149, 162, 167, 194, 324, 332], [150, 163, 200, 249, 250, 265, 324, 325, 365], [151, 199, 248, 264, 329, 342, 346], [152, 164, 166, 193, 331], [153, 160, 168, 197, 329], [154, 169, 190, 330, 339, 348], [155, 159, 195, 250, 260, 324, 364, 369, 377], [156, 248, 329, 331, 338, 346, 349, 378], [157, 170, 192, 324, 332, 337, 347], [158, 207, 255, 266, 343], [159, 204, 254, 271, 327, 339, 342, 367], [160, 175, 201, 341, 344, 345, 377], [161, 205, 256, 268, 336], [162, 174, 206, 327, 334], [163, 208, 253, 254, 270, 326, 327, 338, 342, 346, 368], [164, 172, 203, 336, 337, 347], [165, 167, 257, 258], [166, 172, 265, 324], [167, 174, 176, 261, 263], [168, 175, 260, 265, 324, 325, 377], [169, 173, 260, 324, 353], [170, 179, 264, 350, 352], [171, 177, 264, 351, 354], [172, 184, 270, 327, 350, 352], [173, 271, 327, 339, 350], [174, 180, 266, 268], [175, 182, 270, 271, 326, 327, 351, 354], [176, 180, 232, 273, 275, 332], [177, 183, 230, 274, 328, 333], [178, 181, 272, 330, 355], [179, 185, 231, 274, 332], [180, 186, 236, 278, 286, 334], [181, 233, 284, 343, 353], [182, 239, 280, 282, 337, 341, 344, 371], [183, 238, 281, 335, 340, 351, 354, 378], [184, 235, 280, 336, 337], [185, 234, 281, 334, 350, 352, 355], [186, 243, 288, 290, 347], [187, 197, 356], [188, 194], [189, 193, 357], [190, 210, 358, 360], [191, 207, 324], [192, 209, 357, 361], [193, 203, 213], [194, 206, 211], [195, 204, 293, 375], [196, 205, 324], [197, 201, 212], [198, 215, 356, 362], [199, 202, 324, 325, 359, 377], [200, 208, 292, 293], [201, 225, 356, 362], [202, 326, 327, 342, 356, 357], [203, 220, 357, 361], [204, 216, 295, 358, 377], [205, 226, 327], [206, 221], [207, 217, 327], [208, 224, 294, 295, 359], [209, 218, 232, 332], [210, 219, 296, 307, 330], [211, 221, 231, 332], [212, 225, 297, 308, 329], [213, 220, 298, 306, 331], [214, 222, 296, 329, 363, 378], [215, 223, 230, 328, 333], [216, 300, 315, 335, 342, 356, 367], [217, 233, 337, 343, 358], [218, 236, 334, 357, 361, 363], [219, 302, 312, 343, 358, 360, 376], [220, 228, 301, 314, 336], [221, 229, 234, 334], [222, 239, 302, 341, 359], [223, 238, 335, 340, 356, 362, 378], [224, 300, 303, 309, 338, 342, 356, 357, 368], [225, 227, 299, 316, 341], [226, 235, 336, 337], [227, 305, 317, 346, 362, 378], [228, 304, 318, 349, 361, 363], [229, 242, 347], [230, 238, 308], [231, 234, 308], [232, 236, 306, 307], [233, 315, 350], [234, 242, 316], [235, 309, 350, 357], [236, 243, 312, 314], [237, 315, 335, 351, 356], [238, 240, 316], [239, 309, 310, 356, 357], [240, 317, 354, 362, 378], [241, 318, 319, 349, 352, 361], [242, 317, 352, 355], [243, 318, 321, 361, 363], [244, 252], [245, 250, 364, 365, 366], [246, 251], [247, 249, 365, 366], [248, 364, 365, 366, 369, 370], [249, 253, 259, 292], [250, 254, 262, 293], [251, 256, 365], [252, 255, 364], [253, 269, 294, 366, 369], [254, 267, 295, 366], [255, 367], [256, 368], [257, 261], [258, 263], [259, 269, 325], [260, 271, 373], [261, 268, 273], [262, 267, 324], [263, 266, 275], [264, 274, 371, 372], [265, 270], [266, 278], [267, 283, 327], [268, 286], [269, 285, 326, 373], [270, 280, 371, 372], [271, 282, 371], [272, 284, 328, 364, 374], [273, 286, 306, 331], [274, 281, 308, 329], [275, 278, 307, 330], [276, 279, 332, 364, 365], [277, 287, 333, 365], [278, 290, 312, 343], [279, 291, 334, 367, 368], [280, 309, 338, 368], [281, 316, 341, 371, 372, 374], [282, 310, 339, 367], [283, 313, 337, 366, 371], [284, 315, 335, 367, 373], [285, 311, 344, 366, 371], [286, 288, 314, 336], [287, 289, 340, 368], [288, 318, 349], [289, 322, 345, 370, 372, 374], [290, 321, 348], [291, 320, 347, 369, 370, 372], [292, 294], [293, 295], [294, 303, 375], [295, 300], [296, 302, 364, 376], [297, 299, 364, 365], [298, 301, 365], [299, 305, 367, 368], [300, 311, 366], [301, 304, 368], [302, 310, 367, 375], [303, 313, 366], [304, 320, 370, 376], [305, 322, 369, 370], [306, 314], [307, 312], [308, 316], [309, 371], [310, 358], [311, 356], [312, 321], [313, 357], [314, 318], [315, 371], [316, 317], [317, 372, 374], [318, 323], [319, 359, 370, 372], [320, 361, 375], [321, 360, 376], [322, 362, 373], [323, 363], [324, 327], [325, 326], [326, 344, 377], [327, 337], [328, 335, 378], [329, 341, 364, 365], [330, 343, 364], [331, 336, 365], [332, 334], [333, 340], [334, 347], [335, 377], [336, 349, 368], [337, 350, 357], [338, 366], [339, 358], [340, 345], [341, 346, 367, 368, 378], [342, 366, 371], [343, 348, 367], [344, 351, 356], [345, 354, 362, 378], [346, 359, 369, 370, 372, 377], [347, 352, 361], [348, 353, 360, 369], [349, 370], [350, 371], [351, 371], [352, 372], [353, 373], [354, 372, 377], [355, 374], [359, 375], [360, 375], [362, 377], [363, 376], [364, 367], [365, 368], [367, 369], [368, 370], [369, 373, 375], [373, 377], [374, 378]]]]], [[[4], 1, [5], [1, 2], [1, 4], 3, [1, 5], 3, [1, 6], [2, 3], 2, [2, 4], 2, [2, 5], 3, [2, 6], 2, [2, 7], [3, 4], 3, [3, 5], 7, [3, 6], 5, [3, 7], 2, [4, 5], 5, [4, 6], 9, [4, 7], 6, [5, 6], 1, [5, 7], 1, [1, 2, 3], 1, [1, 2, 4], 3, [1, 2, 5], 7, [1, 2, 6], 8, [1, 2, 7], 3, [1, 3, 4], 1, [1, 3, 5], 4, [1, 3, 6], 4, [1, 3, 7], 2, [1, 4, 5], 7, [1, 4, 6], 15, [1, 4, 7], 11, [1, 5, 6], 5, [1, 5, 7], 6, [1, 6, 7], 1, [2, 3, 4], 1, [2, 3, 5], 8, [2, 3, 6], 12, [2, 3, 7], 6, [2, 4, 5], 1, [2, 4, 6], 6, [2, 4, 7], 4, [2, 5, 6], 3, [2, 5, 7], 5, [2, 6, 7], 1, [3, 4, 5], 3, [3, 4, 6], 10, [3, 4, 7], 8, [3, 5, 6], 7, [3, 5, 7], 10, [3, 6, 7], 4, [4, 5, 6], 3, [4, 5, 7], 6, [4, 6, 7], 5, [5, 6, 7], [1, 2, 3, 5], 2, [1, 2, 3, 6], 4, [1, 2, 3, 7], 2, [1, 2, 4, 5], [1, 2, 4, 6], 5, [1, 2, 4, 7], 4, [1, 2, 5, 6], 4, [1, 2, 5, 7], 9, [1, 2, 6, 7], 3, [1, 3, 4, 6], 1, [1, 3, 4, 7], 1, [1, 3, 5, 6], 1, [1, 3, 5, 7], 3, [1, 3, 6, 7], 1, [1, 4, 5, 6], 1, [1, 4, 5, 7], 5, [1, 4, 6, 7], 5, [1, 5, 6, 7], [2, 3, 4, 6], 1, [2, 3, 4, 7], 1, [2, 3, 5, 6], 4, [2, 3, 5, 7], 10, [2, 3, 6, 7], 4, [2, 4, 5, 7], 1, [2, 4, 6, 7], 1, [2, 5, 6, 7], [3, 4, 5, 7], 1, [3, 4, 6, 7], 2, [3, 5, 6, 7], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], 2, [1, 2, 3, 6, 7], [1, 2, 4, 5, 7], [1, 2, 4, 6, 7], [1, 2, 5, 6, 7], [2, 3, 5, 6, 7]], [[1, [[1, 7, 8, 17, 19, 30, 51, 53, 61, 62, 65, 120, 173, 226, 227, 239, 245, 303, 309, 361, 362, 402], [2, 18, 28, 49, 58, 69, 122, 135, 144, 177, 210, 236, 305, 391], [3, 10, 11, 23, 39, 50, 54, 63, 73, 75, 89, 154, 175, 178, 217, 253, 254, 262, 278, 283, 321, 346, 347, 351, 365, 367, 379, 387, 391, 392, 405], [4, 5, 14, 85, 86, 90, 99, 297, 309, 312, 397, 400, 402], [5, 28, 107, 119, 122, 134, 135, 143, 148, 335], [6, 30, 78, 79, 103, 104, 121, 124, 126, 292, 303], [7, 31, 81, 119, 125, 294, 308, 335], [8, 29, 80, 118, 123, 135, 144, 293, 306, 334], [9, 38, 88, 105, 121, 124, 126, 155, 157, 160, 292, 303, 316], [10, 37, 85, 87, 108, 120, 138, 156, 159, 164, 348, 349, 397, 399], [11, 35, 88, 105, 120, 127, 158, 164, 317, 353, 397, 400, 402], [12, 34, 107, 122, 134, 161, 315, 323], [13, 40, 95, 114, 126, 155, 157, 160, 167, 168, 316, 332], [14, 18, 28, 174, 177, 183, 190, 197, 302, 363, 375], [15, 29, 76, 80, 170, 171, 176, 190, 198, 293], [16, 31, 77, 81, 169, 171, 174, 294, 301, 363], [17, 81, 169, 174, 200, 206, 363, 387], [18, 21, 207, 212, 309, 313, 362, 402], [19, 80, 170, 176, 201, 204, 210], [20, 54, 174, 178, 200, 206, 216, 217, 219, 365, 387], [21, 26, 49, 89, 174, 175, 177, 200, 215, 218, 320], [22, 50, 89, 176, 178, 201, 204, 214, 218, 367], [23, 52, 85, 203, 221, 366, 370], [24, 55, 180, 206, 216, 217, 219, 225, 365, 383, 389, 390], [25, 59, 92, 180, 186, 204, 214, 215, 218, 224, 304, 367, 385, 388, 405], [26, 27, 57, 97, 184, 191, 208, 309, 316, 362, 368, 397], [27, 66, 196, 198, 213, 218, 224, 311, 320, 329, 331, 364, 377, 385, 398], [28, 36, 227, 231, 239, 244, 245, 337], [29, 32, 104, 226, 239, 246, 362], [30, 169, 170, 171, 228, 229, 232], [31, 33, 103, 227, 336, 361], [32, 44, 109, 118, 171, 175, 229, 261, 293], [33, 41, 106, 125, 171, 178, 228, 294, 343, 392], [34, 52, 231, 259, 366, 374], [35, 50, 178, 237, 253, 262, 367, 375, 392], [36, 45, 107, 122, 177, 260, 340, 375, 391], [37, 49, 175, 177, 236, 252, 254, 261, 262, 391], [38, 54, 171, 178, 228, 229, 232, 251, 256, 265, 365], [39, 105, 108, 120, 173, 226, 227, 239, 250, 255, 268, 397], [40, 55, 180, 232, 251, 256, 265, 269, 273, 365, 383], [41, 46, 111, 114, 140, 182, 235, 238, 250, 297, 361, 369], [42, 113, 114, 130, 185, 188, 234, 235, 239, 250, 255, 257, 268, 270, 271, 394, 397, 401], [43, 141, 192, 236, 252, 261, 272, 299], [44, 48, 110, 137, 182, 233, 239, 250, 296, 362, 368, 397], [45, 47, 112, 113, 131, 188, 191, 231, 234, 239, 255, 270, 366, 397], [46, 117, 151, 195, 241, 266, 301, 343, 345, 363, 378, 392, 395], [47, 116, 150, 198, 242, 248, 260, 340, 344, 373, 375, 385, 391, 393, 398], [48, 115, 145, 195, 242, 243, 261, 266, 272, 302, 364, 377, 398], [49, 57, 120, 227, 274, 284, 349], [50, 61, 120, 226, 276, 284, 402], [51, 60, 118, 175, 200, 229, 278], [52, 58, 122, 283, 386, 391], [53, 56, 125, 178, 201, 228, 387, 392], [54, 62, 227, 275, 277, 282, 303], [55, 72, 205, 235, 275, 277, 282, 286, 287, 289], [56, 70, 140, 202, 205, 235, 238, 276, 277, 361, 369], [57, 66, 135, 141, 230, 236, 252, 347], [58, 68, 131, 203, 207, 231, 234, 274, 288, 366], [59, 130, 234, 235, 257, 274, 276, 284, 285, 288, 394], [60, 71, 137, 208, 233, 275, 362, 368], [61, 69, 135, 204, 237, 240, 304, 346, 367], [62, 67, 206, 230, 232, 307, 347, 365], [63, 65, 127, 130, 138, 185, 203, 205, 234, 235, 239, 286, 288, 309, 361, 362, 394, 403], [64, 73, 141, 192, 278, 290], [65, 143, 144, 210, 242, 278, 311, 351, 363, 364, 379, 387, 391, 392], [66, 146, 246, 247, 258, 284, 285, 349, 352, 358, 394], [67, 211, 247, 249, 282, 286, 310, 352, 371], [68, 150, 210, 248, 283, 373, 386, 388, 391, 393], [69, 146, 212, 244, 245, 284, 288, 350, 376, 394, 402, 403], [70, 151, 209, 241, 279, 280, 363, 378, 387, 389, 392, 395], [71, 145, 213, 243, 278, 281, 290, 364, 377], [72, 75, 217, 253, 291, 347, 365, 390], [73, 74, 159, 275, 368], [74, 162, 278, 281, 290, 291, 377], [75, 222, 264, 282, 286, 352, 360, 371], [76, 79, 104, 292, 297], [77, 78, 103, 292], [78, 84, 169], [79, 82, 170, 308], [80, 83, 303, 309, 314], [81, 86, 303, 312], [82, 96, 124, 172, 292, 303], [83, 91, 123, 176, 293, 325], [84, 94, 121, 179, 292, 303], [85, 122, 177, 305, 315, 321, 325], [86, 98, 119, 174, 294, 327], [87, 118, 175, 293, 306, 318, 320], [88, 125, 178, 294, 308, 319, 327], [89, 120, 173, 303, 309, 316, 317, 324, 397, 402], [90, 134, 183, 298, 304, 315, 323, 333], [91, 99, 133, 187, 296, 309, 317, 397], [92, 130, 185, 309, 316, 317, 324, 332, 397, 401, 403, 404], [93, 139, 186, 299, 305, 315, 325, 333], [94, 102, 128, 181, 295, 307], [95, 136, 180, 308, 319, 327, 330], [96, 101, 129, 189, 295, 307, 308, 319], [97, 141, 192, 299, 306, 318, 320, 331], [98, 100, 132, 184, 297, 316], [99, 148, 197, 302, 311, 321, 325, 333, 398], [100, 142, 196, 301, 327, 329, 330], [101, 153, 199, 300, 310, 312, 326], [102, 147, 193, 300, 310], [103, 106], [104, 109, 335], [105, 119, 294, 335, 338, 343], [106, 111, 124, 292], [107, 112, 341, 397, 400], [108, 123, 293, 334, 339, 340], [109, 110, 121, 292], [110, 115, 128, 295, 335, 338], [111, 117, 129, 295], [112, 116, 134, 298, 335, 344], [113, 139, 299, 334, 339, 340, 344], [114, 136, 335, 338, 343, 345], [115, 147, 300, 336, 342], [116, 152, 336, 400], [117, 153, 300], [118, 137, 303, 349], [119, 132, 227, 353], [120, 135, 346, 347, 351], [121, 128, 229], [122, 131, 348, 350, 402], [123, 133, 226, 348], [124, 129, 228], [125, 140, 303, 353], [126, 149, 232, 295, 307, 308, 335], [127, 143, 237, 298, 304, 308, 335, 357], [128, 147, 157, 233], [129, 153, 155, 238], [130, 154, 304, 346, 347, 351, 354, 357, 359], [131, 150, 304, 305, 315, 346, 354], [132, 142, 230, 335, 338, 347], [133, 148, 240, 334, 339, 346], [134, 152, 231, 355], [135, 146, 239, 309, 397], [136, 158, 235, 353, 356], [137, 145, 306, 307, 318, 347], [138, 144, 236, 299, 305, 306, 334, 357], [139, 156, 234, 348, 355], [140, 151, 307, 308, 319, 347], [141, 159, 349, 358], [142, 247, 336, 342, 352, 353, 356], [143, 245, 312, 336, 353, 400, 402], [144, 246, 313, 314, 337, 348, 349, 399], [145, 310, 313, 322, 349, 352, 358], [146, 242, 311, 351, 357, 398], [147, 165, 243], [148, 244, 337, 341, 348, 350, 355], [149, 160, 249, 300, 310, 312, 336], [150, 314, 328, 348, 350, 355, 402, 403], [151, 310, 312, 326, 352, 353, 356], [152, 248, 323], [153, 166, 241], [154, 164, 257, 317, 360, 397, 404], [155, 166, 256, 319], [156, 161, 254, 315, 339, 346], [157, 165, 251, 338, 347], [158, 163, 253, 319, 338, 347], [159, 162, 252, 318, 347], [160, 265, 327, 329, 343], [161, 259, 328, 341, 348, 350, 355, 404], [162, 258, 322, 349, 352, 358, 360], [163, 264, 326, 342, 352, 353, 356, 360], [164, 262, 321, 351, 357, 398], [165, 167, 263, 342, 352], [166, 168, 267, 326], [167, 269, 345, 359], [168, 273, 330], [169, 179], [170, 172, 361], [171, 182, 292, 303], [172, 189, 201, 228], [173, 190, 293, 294, 365, 367, 375, 379], [174, 184, 227, 380], [175, 362, 368, 372], [176, 187, 226, 370], [177, 191, 366, 370, 376, 397, 399], [178, 361, 369, 380], [179, 181, 200, 229], [180, 205, 235, 361, 369, 380, 384], [181, 193, 208, 233], [182, 195, 232, 295, 307, 365], [183, 207, 231, 366, 374, 382], [184, 196, 206, 230, 365], [185, 298, 299, 365, 367, 379, 383, 385, 405], [186, 203, 234, 366, 370, 382], [187, 197, 204, 240, 367], [188, 237, 298, 304, 367, 375, 385], [189, 199, 202, 238, 361, 369], [190, 194, 239, 296, 297, 309, 361, 362, 397], [191, 198, 236, 299, 305, 385], [192, 362, 368, 372, 381], [193, 213, 243], [194, 242, 301, 302, 311, 363, 364, 375, 379, 385, 398], [195, 249, 300, 310, 371], [196, 211, 247, 371, 380, 384], [197, 212, 244, 370, 376, 382], [198, 246, 314, 370, 399], [199, 209, 241, 363, 378], [200, 208, 303], [201, 202, 303], [202, 209, 214, 307], [203, 210, 305, 388], [204, 212, 309, 361], [205, 217, 387, 389], [206, 211, 361], [207, 215, 304, 386, 388], [208, 213, 216, 307], [209, 223, 310], [210, 314, 370], [211, 219, 363, 387, 389], [212, 218, 311, 363, 388], [213, 220, 310], [214, 223, 276, 316, 369], [215, 221, 274, 317, 366], [216, 220, 275, 316], [217, 222, 277, 369], [218, 284, 324, 370, 376, 380, 402], [219, 282, 371, 380], [220, 225, 281, 329], [221, 283, 321, 373, 386, 388, 405], [222, 279, 378, 387, 389, 390], [223, 224, 280, 329, 378], [224, 285, 332, 384], [225, 287, 332], [226, 240, 391], [227, 230, 392], [228, 238], [229, 233], [230, 247, 250], [231, 248, 393], [232, 249, 361], [233, 243, 251], [234, 254, 391, 393], [235, 253, 392, 395], [236, 246, 362, 394], [237, 245, 361, 394], [238, 241, 256], [239, 242, 334, 335], [240, 244, 255], [241, 267], [242, 268, 336, 337, 394], [243, 263], [244, 260, 391, 393], [245, 363, 375, 392], [246, 261, 364, 391], [247, 266, 392, 395], [248, 374], [249, 265, 363], [250, 266, 338, 347, 365], [251, 263, 275], [252, 258, 368, 397], [253, 264, 276, 369], [254, 259, 274, 366], [255, 260, 339, 346, 367], [256, 267, 277, 369], [257, 262, 367, 396, 405], [258, 272, 377, 396, 398], [259, 283, 373, 391, 393, 405], [260, 270, 341, 350, 376], [261, 349, 372, 399], [262, 284, 376, 394], [263, 269, 281], [264, 280, 378, 392, 395, 396], [265, 282, 371, 380], [266, 271, 342, 352, 371], [267, 273, 279, 378], [268, 340, 343, 351, 375, 379, 391, 392, 398], [269, 287], [270, 344, 354, 385, 393, 405], [271, 345, 359, 383, 395, 396], [272, 358, 381, 394, 401], [273, 289, 384], [274, 283, 346], [275, 281, 347], [276, 280, 347], [277, 279], [278, 349, 372], [279, 289], [280, 285, 352], [281, 287, 352], [282, 387, 392], [283, 288, 350], [284, 351, 391, 392], [285, 359, 395, 396], [286, 359, 383, 389, 395], [287, 291, 359], [288, 354, 388, 393, 405], [289, 389, 390], [290, 358, 381], [291, 360], [292, 295], [293, 296, 397, 399], [294, 297], [295, 300], [296, 302, 306, 334], [297, 301, 308, 335], [298, 397, 400, 401], [299, 397, 399, 401], [301, 312, 336], [302, 313, 337, 399], [303, 307], [304, 317, 402, 403], [305, 314, 403], [306, 313, 362], [307, 310, 316], [308, 312, 361], [309, 311], [310, 329], [311, 324, 402, 403], [312, 327, 363], [313, 320, 364], [314, 325], [315, 328, 366, 397, 404], [316, 329, 347, 365], [317, 321, 346, 367], [318, 322, 368, 397], [319, 326, 369], [320, 349, 372, 399], [321, 350, 376, 402, 403, 404], [322, 331, 377, 398], [323, 374, 400, 402], [324, 351, 379, 398], [325, 348, 370, 399], [326, 330, 378], [327, 353, 380], [328, 333, 373, 398], [329, 332, 352, 371], [330, 356, 384], [331, 358, 381, 401], [332, 359, 383], [333, 355, 382, 401, 403, 404], [334, 337], [335, 336], [336, 343], [337, 340], [338, 342], [339, 341, 397], [340, 348, 399], [341, 344, 398], [342, 345], [343, 353], [344, 355, 401], [345, 356], [346, 350], [347, 352], [348, 391], [350, 354], [351, 402], [352, 359], [353, 392], [354, 403, 404], [355, 393], [356, 395], [357, 394, 401, 403], [359, 360], [360, 396], [361, 363], [362, 364], [363, 380], [364, 372], [365, 371], [366, 373, 405], [367, 376, 397], [368, 377], [369, 378], [370, 391], [371, 383], [373, 382], [374, 386], [375, 400, 402], [376, 385, 398, 405], [377, 381], [378, 384], [379, 399, 400], [380, 387, 392], [382, 388, 393, 405], [384, 389, 395], [385, 394, 401, 403], [386, 402], [388, 403], [397, 398], [398, 401], [404, 405]]], [2, [[7, 135, 143], [9, 87, 108, 120, 397], [13, 97, 113, 130, 397, 401], [16, 190, 375], [20, 89, 175], [24, 92, 192], [31, 239, 245], [33, 375], [38, 175], [40, 192], [41, 188, 239, 255, 397], [46, 242, 260, 375, 385, 398], [54, 120], [55, 130], [62, 135], [67, 146], [72, 154], [75, 164], [77, 296], [78, 306], [81, 309, 402], [94, 306, 318], [95, 298, 304], [98, 309, 397], [100, 311, 398], [102, 313, 322], [103, 334], [111, 334, 339], [114, 298], [117, 337, 341], [125, 402], [126, 306, 334], [140, 304, 346], [149, 313, 337], [151, 350, 402, 403], [155, 339, 346], [157, 318], [160, 320, 340, 351, 398], [165, 322], [166, 341, 350], [167, 331], [168, 344, 354], [169, 362], [181, 362, 368], [193, 364, 377], [205, 304], [206, 309, 362], [211, 311, 364], [216, 368], [217, 317], [219, 324, 372], [220, 377], [222, 321], [225, 381], [232, 362], [249, 364], [251, 368], [263, 377], [265, 372], [269, 381], [277, 346], [279, 350], [282, 351], [286, 357], [289, 354], [294, 397, 400], [295, 397], [300, 398], [301, 400], [319, 397], [326, 398], [327, 400, 402], [330, 401, 403], [338, 397], [342, 398], [343, 400], [345, 401], [365, 397], [371, 398], [383, 401], [387, 402], [389, 403], [390, 404]]]]], 55, [[[4], [1, 4], 2, [1, 5], 1, [1, 6], [2, 3], [2, 4], [2, 5], 1, [2, 6], [3, 4], 2, [3, 5], 4, [3, 6], 3, [3, 7], [4, 5], 3, [4, 6], 7, [4, 7], 3, [5, 6], [5, 7], [1, 2, 3], 1, [1, 2, 4], 3, [1, 2, 5], 6, [1, 2, 6], 6, [1, 2, 7], 2, [1, 3, 4], 1, [1, 3, 5], 3, [1, 3, 6], 3, [1, 3, 7], 1, [1, 4, 5], 7, [1, 4, 6], 14, [1, 4, 7], 9, [1, 5, 6], 4, [1, 5, 7], 5, [1, 6, 7], 1, [2, 3, 4], 2, [2, 3, 5], 9, [2, 3, 6], 11, [2, 3, 7], 6, [2, 4, 5], 2, [2, 4, 6], 6, [2, 4, 7], 4, [2, 5, 6], 4, [2, 5, 7], 5, [2, 6, 7], 1, [3, 4, 5], 4, [3, 4, 6], 11, [3, 4, 7], 8, [3, 5, 6], 7, [3, 5, 7], 10, [3, 6, 7], 3, [4, 5, 6], 3, [4, 5, 7], 7, [4, 6, 7], 4, [5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], 4, [1, 2, 3, 6], 5, [1, 2, 3, 7], 4, [1, 2, 4, 5], 2, [1, 2, 4, 6], 7, [1, 2, 4, 7], 6, [1, 2, 5, 6], 6, [1, 2, 5, 7], 10, [1, 2, 6, 7], 4, [1, 3, 4, 5], [1, 3, 4, 6], 2, [1, 3, 4, 7], 2, [1, 3, 5, 6], 3, [1, 3, 5, 7], 5, [1, 3, 6, 7], 2, [1, 4, 5, 6], 3, [1, 4, 5, 7], 8, [1, 4, 6, 7], 6, [1, 5, 6, 7], 1, [2, 3, 4, 6], 2, [2, 3, 4, 7], 2, [2, 3, 5, 6], 6, [2, 3, 5, 7], 11, [2, 3, 6, 7], 5, [2, 4, 5, 6], [2, 4, 5, 7], 2, [2, 4, 6, 7], 3, [2, 5, 6, 7], 1, [3, 4, 5, 6], [3, 4, 5, 7], 3, [3, 4, 6, 7], 4, [3, 5, 6, 7], 1, [4, 5, 6, 7], [1, 2, 3, 5, 6], 1, [1, 2, 3, 5, 7], 2, [1, 2, 3, 6, 7], 1, [1, 2, 4, 5, 7], [1, 2, 4, 6, 7], 1, [1, 2, 5, 6, 7], [1, 3, 4, 6, 7], [1, 3, 5, 6, 7], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7]], [[1, [[1, 4, 9, 13, 28, 33, 34, 79, 110, 128, 169, 186, 195, 204, 245, 269, 272, 352, 394, 413, 419], [2, 14, 47, 67, 80, 83, 95, 102, 256, 270, 273, 313], [3, 13, 48, 68, 84, 98, 255, 269], [4, 15, 46, 49, 82, 85, 95, 102, 254, 278, 310, 311], [5, 18, 50, 53, 69, 71, 86, 88, 112, 113, 121, 288, 330, 340, 341, 407, 410, 413], [6, 19, 50, 69, 79, 84, 98, 115, 122, 255, 269, 292, 406], [7, 21, 63, 74, 92, 93, 98, 115, 122, 124, 292, 307, 406, 411], [8, 15, 44, 46, 126, 135, 143, 254, 267, 355, 369], [9, 46, 49, 126, 135, 157, 163, 166, 355, 386], [10, 29, 52, 130, 160, 176, 181, 360, 376, 384], [11, 26, 54, 130, 135, 157, 163, 174, 175, 182, 363, 386], [12, 35, 59, 149, 163, 175, 182, 183, 274, 363, 378], [13, 126, 134, 187, 190], [14, 125, 136, 188, 189, 200, 204, 354], [15, 20, 68, 127, 186, 200, 204, 315, 352], [16, 71, 86, 132, 136, 188, 200, 217, 226, 407], [17, 69, 79, 128, 186, 195, 212, 218, 220, 324, 394, 406], [18, 26, 130, 133, 191, 211, 214, 222, 363, 369, 393, 395, 396], [19, 29, 130, 134, 187, 190, 213, 225, 360], [20, 24, 72, 85, 129, 130, 187, 254, 310, 321, 369, 396], [21, 31, 149, 190, 199, 213, 225, 231, 360, 382], [22, 74, 93, 139, 195, 198, 212, 220, 233, 364, 406, 411, 419], [23, 76, 97, 139, 140, 194, 200, 215, 217, 226, 230, 400, 407, 412], [24, 25, 75, 76, 87, 139, 148, 194, 197, 200, 212, 217, 259, 312, 352, 358, 407], [25, 77, 108, 156, 206, 209, 219, 227, 265, 316, 321, 329, 356, 369, 372, 378, 396, 402, 409], [26, 33, 86, 159, 186, 236, 237, 239, 413], [27, 32, 86, 132, 158, 185, 188, 240, 271], [28, 37, 85, 130, 157, 187, 384, 396], [29, 34, 79, 235, 238, 269, 394], [30, 42, 97, 140, 161, 194, 240, 249], [31, 93, 161, 173, 235, 238, 247, 390], [32, 41, 95, 162, 193, 196, 234, 279, 333, 353, 362], [33, 40, 95, 163, 166, 191, 201, 274, 332, 363, 393], [34, 38, 94, 160, 190, 199, 275, 331, 360], [35, 97, 194, 215, 237, 239, 248, 400], [36, 93, 165, 198, 236, 245, 250, 364, 419], [37, 39, 87, 161, 164, 194, 197, 235, 237, 352, 358], [38, 110, 169, 207, 238, 286, 342, 365, 390, 394, 398], [39, 108, 167, 206, 242, 243, 356, 372, 384, 387, 396, 402], [40, 111, 170, 171, 202, 204, 239, 250, 335, 370, 397, 400, 413, 415], [41, 111, 168, 205, 208, 240, 241, 249, 282, 338, 357, 375], [42, 43, 116, 176, 211, 234, 333, 362], [43, 121, 177, 229, 240, 241, 249, 251, 338, 350, 375], [44, 48, 68, 253, 259], [45, 47, 67, 256, 263, 265], [46, 56, 277, 283, 413], [47, 51, 125, 276, 280], [48, 55, 126, 252, 278], [49, 127, 253, 271, 276], [50, 85, 130, 254, 278, 293, 295], [51, 60, 83, 137, 256, 270, 295], [52, 79, 128, 269, 272, 288, 292, 300, 304, 406, 413], [53, 80, 133, 256, 270, 273, 287, 291, 296], [54, 86, 132, 253, 271, 276, 289, 303, 407], [55, 57, 84, 131, 253, 257, 271], [56, 61, 82, 135, 254, 291, 296], [57, 66, 89, 141, 262, 263, 278, 279, 293], [58, 99, 142, 261, 273, 274, 287, 291, 296, 305, 308], [59, 97, 140, 276, 289, 303, 306, 407, 412], [60, 65, 96, 146, 260, 276, 277, 289, 407], [61, 64, 101, 144, 259, 288], [62, 92, 138, 272, 292, 300, 307, 406, 411], [63, 91, 149, 261, 274, 278, 293, 295, 309], [64, 106, 150, 265, 296, 298, 305], [65, 103, 151, 267, 284, 285, 295, 299, 309, 409], [66, 109, 154, 264, 266, 280, 282, 302], [67, 70, 312, 314], [68, 72, 252, 310, 311], [69, 82, 254, 310, 311, 319, 320, 322], [70, 73, 80, 256, 319, 322], [71, 83, 256, 313, 318, 321], [72, 75, 84, 257], [73, 78, 90, 260], [74, 99, 261, 311, 319, 320, 322, 327, 328], [75, 77, 89, 262, 311, 320], [76, 91, 261, 313, 318, 321, 329], [77, 109, 266, 314, 326], [78, 104, 267, 322, 327], [79, 94, 331, 332, 336, 339], [80, 90, 189, 330, 340], [81, 100, 185, 257, 271], [82, 101, 186, 330, 340], [83, 96, 188, 341], [84, 89, 187, 310], [85, 87, 271, 341, 413], [86, 95, 270, 310, 333, 337], [87, 108, 274, 278, 279, 293, 332, 333], [88, 102, 191, 261, 273, 274, 278, 311, 313, 343], [89, 109, 115, 197, 312], [90, 104, 192, 273, 287], [91, 113, 194, 341, 349], [92, 199, 317, 331, 339, 344, 417], [93, 274, 290, 332, 336, 348, 414], [94, 110, 195, 272, 406], [95, 111, 200, 276, 277, 312, 330, 407], [96, 103, 193, 313, 318, 333], [97, 116, 274, 333, 337, 343, 345], [98, 107, 190, 258, 275, 278, 311], [99, 112, 198, 330, 340, 346, 347], [100, 105, 114, 196, 262, 279], [101, 106, 201, 311, 320, 332], [102, 204, 280, 283, 314, 315, 340, 341, 410, 413], [103, 208, 315, 323, 338, 341, 349], [104, 210, 283, 297, 340, 346], [105, 118, 205, 266, 282], [106, 202, 314, 326, 335, 340, 346], [107, 122, 207, 268, 280, 286, 314], [108, 280, 282, 302, 335, 338, 341, 349, 413, 415], [109, 120, 206, 316], [110, 203, 281, 336, 339, 408, 414, 417], [111, 209, 284, 285, 316, 334, 337, 343, 409], [112, 117, 214, 287, 320, 332, 351], [113, 119, 211, 293, 318, 333], [114, 118, 216, 289], [115, 120, 213, 293, 319, 320, 332], [116, 121, 215, 288, 330, 350, 407], [117, 221, 297, 326, 335, 340, 346, 416], [118, 123, 224, 299], [119, 229, 302, 323, 338, 341, 349, 350], [120, 124, 228, 302, 325, 326, 335], [121, 222, 298, 334, 337, 343, 351, 409], [122, 225, 294, 295, 322, 336, 339, 408], [123, 232, 306], [124, 231, 309, 327, 328, 348], [125, 137, 353, 356], [126, 131, 352], [127, 129, 252, 353], [128, 145, 254, 360, 363, 368, 369, 376, 408], [129, 148, 185, 253, 257, 271], [130, 352, 358, 374], [131, 141, 157, 187], [132, 353, 362, 371], [133, 159, 189, 354, 359, 361, 367], [134, 147, 255, 269], [135, 144, 186, 253, 361, 367], [136, 143, 256, 270, 369], [137, 146, 158, 188, 374], [138, 160, 199, 360, 376, 382], [139, 191, 261, 274, 363, 369, 378], [140, 353, 362, 371, 381], [141, 154, 164, 197, 352, 358], [142, 165, 198, 354, 359, 361, 367, 377, 380], [143, 155, 200, 260, 277, 354, 361, 407], [144, 150, 163, 201, 263, 363], [145, 152, 195, 259, 272, 352, 406, 411, 419], [146, 151, 162, 193, 353, 362], [147, 153, 190, 258, 275, 360], [148, 156, 196, 262, 263, 279, 353, 362], [149, 161, 194, 352, 358, 374, 379], [150, 170, 202, 264, 367, 370, 377], [151, 168, 208, 357, 374, 375, 379], [152, 203, 265, 281, 356, 369, 376, 408], [153, 207, 268, 286, 365], [154, 167, 206, 356, 372], [155, 209, 267, 285, 355, 366, 369, 378, 409], [156, 205, 264, 266, 282, 357, 375], [157, 164, 271], [158, 162, 270, 384], [159, 166, 270, 383, 386], [160, 169, 272, 352, 390], [161, 176, 274, 384, 387], [162, 168, 172, 277], [163, 170, 276, 352], [164, 167, 175, 279], [165, 174, 274, 383, 386, 388, 389], [166, 171, 277, 354, 361], [167, 180, 282], [168, 179, 285, 384, 387], [169, 281, 356, 376, 384], [170, 182, 284, 356, 386, 389], [171, 285, 355, 366, 386, 388], [172, 179, 234, 291, 362], [173, 181, 290, 360, 391], [174, 178, 236, 288, 361, 392], [175, 180, 237, 289, 358], [176, 177, 235, 288, 358], [177, 242, 298, 372, 384, 387, 391], [178, 244, 298, 366, 386, 388, 420], [179, 184, 241, 301, 375], [180, 183, 243, 299, 372], [181, 238, 304, 365, 390], [182, 239, 303, 370, 374, 392, 413], [183, 248, 306, 379], [184, 246, 308, 381, 387, 391], [185, 196, 310], [186, 201, 310, 393, 395], [187, 197], [188, 193, 396], [189, 192, 393, 395], [190, 207, 352], [191, 204, 352, 354, 400], [192, 210, 354, 359], [193, 208, 217], [194, 211, 396, 402], [195, 203, 311, 417], [196, 205, 216, 312], [197, 206, 213], [198, 214, 393, 395, 399, 401], [199, 218, 394, 398], [200, 209, 313, 353, 393], [201, 202, 212, 312], [202, 227, 316, 395, 401], [203, 220, 314, 394, 419], [204, 355, 356, 369, 395, 396], [205, 224, 316], [206, 228], [207, 225, 356], [208, 219, 396, 402], [209, 226, 315, 357, 397, 400], [210, 355, 373, 395, 401], [211, 229, 237, 358], [212, 227, 319, 320, 332, 363, 393], [213, 228, 235, 358], [214, 221, 236, 359, 403], [215, 222, 363, 393, 404], [216, 224, 234, 319, 362], [217, 219, 318, 333, 362], [218, 223, 317, 331, 360], [219, 230, 323, 338, 375], [220, 322, 336, 368, 369, 395, 408], [221, 244, 373, 395, 401, 420], [222, 239, 370, 397, 400, 403], [223, 324, 342, 365, 394, 398, 418], [224, 232, 241, 325, 375], [225, 238, 365, 374, 394], [226, 321, 337, 369, 371, 396, 409], [227, 233, 325, 326, 335, 370, 397], [228, 231, 242, 372], [229, 243, 372, 396, 402, 404], [230, 329, 345, 381, 402, 404], [231, 247, 379], [232, 246, 328, 381], [233, 327, 328, 348, 378, 399, 401, 420], [234, 241, 330], [235, 242, 332], [236, 244, 332, 383, 393, 405], [237, 243, 333], [238, 336, 384], [239, 337, 396, 405], [240, 337, 371, 384, 396], [241, 246, 334], [242, 247, 335], [243, 248, 338], [244, 250, 335, 385, 397], [245, 336, 368, 386, 395], [246, 251, 347], [247, 348, 387, 391], [248, 345, 402, 404], [249, 343, 345, 381, 387, 402], [250, 348, 388, 389, 399, 401, 405, 420], [251, 351, 391], [252, 257], [253, 263, 310], [254, 259, 407, 410], [255, 258], [256, 260, 407, 410], [257, 262], [258, 268, 406], [259, 265, 278, 311], [260, 267, 273, 313], [261, 407, 410, 412], [262, 266], [263, 264, 276, 312, 407], [264, 284, 316, 409], [265, 280, 314, 410], [267, 283, 315, 410], [268, 408], [269, 275], [270, 277, 413], [271, 279], [272, 281, 414], [273, 283, 354], [274, 288, 413, 415], [275, 286, 292], [276, 284, 353], [277, 285, 291], [278, 280, 352], [279, 282, 289], [280, 295, 356], [281, 300, 413], [282, 299], [283, 296, 355], [284, 303, 357], [285, 301, 413, 415], [286, 294], [287, 297, 359], [288, 298, 332, 363], [289, 299, 333, 362], [290, 304, 364, 406, 416], [291, 301, 330, 361, 407], [292, 294, 331, 360], [293, 302, 358, 407], [294, 307, 342, 365], [295, 341, 374, 410, 413], [296, 340, 367, 410, 413], [297, 305, 373], [298, 335, 370, 413, 415, 416], [299, 306, 338, 375], [300, 339, 376, 408], [301, 308, 334, 366, 409], [302, 309, 372, 409], [303, 337, 371, 409], [304, 336, 368, 408, 414], [305, 346, 377, 416], [306, 345, 381], [307, 344, 382], [308, 347, 380, 412, 415, 416], [309, 349, 379, 412, 415], [310, 312], [311, 314], [312, 316, 319], [313, 315], [314, 322], [315, 321], [316, 325], [317, 324, 406, 418], [318, 323, 407], [319, 325, 330, 407], [320, 326], [321, 341, 410], [322, 340, 410], [323, 329, 409], [324, 339, 408, 417], [325, 328, 334, 409], [326, 327], [327, 346], [328, 347, 412], [329, 349, 412], [330, 334, 393], [331, 342], [332, 335], [333, 338], [334, 347, 397], [335, 348], [336, 413], [337, 413], [338, 345], [339, 394], [340, 395], [341, 396], [342, 344], [343, 400, 412, 415], [344, 398, 418], [345, 350], [346, 401], [347, 351, 399], [348, 415, 416], [349, 402], [350, 404], [351, 403, 416], [352, 356], [353, 357], [354, 355], [355, 367], [356, 374], [357, 371], [358, 372], [359, 373, 383], [360, 365, 406], [361, 366, 393], [362, 375, 407], [363, 370, 407], [364, 368, 420], [365, 382, 408], [366, 380, 397], [367, 386, 395], [368, 419], [369, 410, 413], [370, 378, 409, 420], [372, 379], [373, 377, 385], [374, 384, 396], [375, 381, 409], [376, 394], [377, 389, 401, 420], [378, 400, 412, 415], [379, 387, 402], [380, 388, 399, 420], [381, 412], [382, 390, 398, 411], [383, 385], [384, 413], [385, 389], [386, 413], [387, 415], [388, 415], [389, 392], [390, 414], [391, 416], [392, 405, 420], [393, 397], [397, 399], [398, 417], [399, 403], [403, 405, 420], [406, 408], [407, 409], [408, 411], [409, 412], [411, 414, 417], [414, 419], [416, 420]]], [2, [[4, 94], [5, 79, 304, 324, 406], [8, 134, 145], [11, 52, 368], [12, 62], [15, 195], [18, 368], [20, 134], [24, 147, 195, 218, 406], [25, 153, 203, 223, 408, 417], [26, 79, 245], [33, 94], [35, 92], [40, 110, 245, 419], [44, 255], [46, 269, 272], [55, 255, 269], [57, 258, 275], [58, 290, 414], [61, 272, 406], [64, 281, 408, 414], [66, 268, 286], [72, 255], [75, 258], [76, 317, 417], [77, 268], [85, 269], [87, 275, 331], [88, 414, 417], [108, 286, 342], [112, 290], [113, 317, 331], [117, 304], [119, 324, 342, 418], [142, 364, 419], [150, 419], [157, 269], [163, 272, 419], [164, 275], [167, 286], [170, 281], [174, 364], [175, 292], [178, 368], [180, 294], [182, 300], [183, 307], [191, 419], [214, 364], [215, 317], [221, 368], [222, 324], [237, 331], [239, 339], [243, 342], [248, 344], [254, 406], [261, 406, 411], [267, 411], [283, 414], [293, 406], [302, 408], [309, 411], [315, 417], [320, 406], [326, 408], [327, 411], [329, 418], [346, 414], [349, 417], [355, 419], [363, 406], [370, 408], [378, 411, 419], [388, 419], [400, 417], [401, 419], [404, 418]]]]], 57, 60, [[[4], [1, 4], 2, [1, 5], 1, [2, 3], [2, 4], [2, 5], 1, [2, 6], [3, 4], 2, [3, 5], 5, [3, 6], 3, [3, 7], [4, 5], 4, [4, 6], 8, [4, 7], 4, [5, 6], [5, 7], [1, 2, 3], [1, 2, 4], 2, [1, 2, 5], 7, [1, 2, 6], 6, [1, 2, 7], 1, [1, 3, 4], [1, 3, 5], 3, [1, 3, 6], 3, [1, 3, 7], [1, 4, 5], 8, [1, 4, 6], 18, [1, 4, 7], 10, [1, 5, 6], 4, [1, 5, 7], 4, [2, 3, 4], 1, [2, 3, 5], 10, [2, 3, 6], 13, [2, 3, 7], 5, [2, 4, 5], 2, [2, 4, 6], 7, [2, 4, 7], 4, [2, 5, 6], 3, [2, 5, 7], 4, [2, 6, 7], [3, 4, 5], 4, [3, 4, 6], 14, [3, 4, 7], 9, [3, 5, 6], 8, [3, 5, 7], 11, [3, 6, 7], 2, [4, 5, 6], 3, [4, 5, 7], 7, [4, 6, 7], 4, [1, 2, 3, 5], 4, [1, 2, 3, 6], 7, [1, 2, 3, 7], 3, [1, 2, 4, 5], 2, [1, 2, 4, 6], 11, [1, 2, 4, 7], 8, [1, 2, 5, 6], 9, [1, 2, 5, 7], 14, [1, 2, 6, 7], 4, [1, 3, 4, 5], [1, 3, 4, 6], 4, [1, 3, 4, 7], 3, [1, 3, 5, 6], 4, [1, 3, 5, 7], 7, [1, 3, 6, 7], 2, [1, 4, 5, 6], 5, [1, 4, 5, 7], 13, [1, 4, 6, 7], 10, [1, 5, 6, 7], 1, [2, 3, 4, 6], 4, [2, 3, 4, 7], 4, [2, 3, 5, 6], 10, [2, 3, 5, 7], 18, [2, 3, 6, 7], 8, [2, 4, 5, 6], [2, 4, 5, 7], 3, [2, 4, 6, 7], 3, [2, 5, 6, 7], [3, 4, 5, 6], 1, [3, 4, 5, 7], 6, [3, 4, 6, 7], 7, [3, 5, 6, 7], 2, [4, 5, 6, 7], [1, 2, 3, 4, 6], [1, 2, 3, 4, 7], [1, 2, 3, 5, 6], 4, [1, 2, 3, 5, 7], 8, [1, 2, 3, 6, 7], 4, [1, 2, 4, 5, 6], [1, 2, 4, 5, 7], 3, [1, 2, 4, 6, 7], 5, [1, 2, 5, 6, 7], 2, [1, 3, 4, 5, 7], [1, 3, 4, 6, 7], 1, [1, 3, 5, 6, 7], [1, 4, 5, 6, 7], [2, 3, 4, 6, 7], 1, [2, 3, 5, 6, 7], 2, [1, 2, 3, 5, 6, 7]], [[1, [[1, 2, 3, 8, 14, 28, 29, 31, 37, 42, 83, 90, 111, 137, 162, 167, 171, 186, 187, 192, 196, 208, 215, 246, 275, 288, 296, 387, 390, 391, 447, 450, 488, 490, 492, 502, 508], [2, 13, 50, 80, 81, 89, 90, 99, 107, 111, 258, 281, 296, 332, 502], [3, 12, 48, 84, 85, 95, 113, 257, 276, 277, 328, 331, 467], [4, 14, 49, 68, 78, 82, 89, 90, 107, 259, 275, 280, 333], [5, 20, 52, 57, 69, 83, 86, 87, 118, 120, 122, 260, 304, 313, 339, 347, 358, 362, 370, 471, 472, 481, 492, 502], [6, 15, 54, 55, 70, 71, 79, 83, 85, 102, 117, 121, 125, 300, 313, 318, 344, 347, 359, 361, 364, 367, 469, 471, 473, 477, 488, 490, 512], [7, 13, 47, 50, 127, 132, 133, 135, 146, 148, 158, 258, 264, 271, 390, 396, 400, 420], [8, 48, 50, 127, 132, 161, 162, 164, 167, 171, 390, 396, 438], [9, 30, 56, 58, 129, 132, 139, 161, 164, 176, 179, 184, 399, 409, 438, 488], [10, 26, 56, 57, 129, 134, 160, 166, 177, 178, 181, 321, 397, 406, 409, 414, 418, 437, 440, 488], [11, 32, 62, 63, 141, 143, 145, 164, 170, 176, 179, 184, 185, 287, 300, 399, 407, 433, 441, 488, 494, 497, 507, 509, 512], [12, 128, 133, 187, 190, 202, 208, 390], [13, 17, 68, 186, 192, 193, 196, 211, 215, 331, 336, 387, 393, 467], [14, 127, 135, 188, 189, 193, 196, 215, 389], [15, 26, 131, 134, 187, 205, 216, 217, 230, 231, 400, 406, 409, 418, 420, 447, 448, 449], [16, 70, 79, 135, 139, 188, 193, 219, 227, 473], [17, 24, 69, 72, 80, 133, 134, 135, 187, 189, 190, 225, 258, 260, 343, 400, 420, 422, 448, 502], [18, 69, 71, 83, 137, 186, 187, 192, 218, 224, 225, 230, 339, 347, 400, 447, 450, 471, 502], [19, 69, 86, 133, 138, 187, 190, 202, 220, 233, 260, 400, 472], [20, 30, 129, 139, 200, 222, 223, 236, 399, 409, 410, 446, 451, 452], [21, 75, 76, 93, 142, 150, 192, 198, 201, 218, 224, 225, 237, 398, 400, 428, 455, 463, 471, 485, 508, 512], [22, 75, 105, 142, 149, 201, 202, 204, 220, 221, 233, 239, 266, 400, 428, 462, 472, 483], [23, 73, 100, 145, 150, 193, 199, 219, 224, 227, 238, 330, 407, 455, 473, 486, 507, 512], [24, 25, 73, 74, 92, 145, 146, 147, 150, 192, 193, 194, 196, 197, 199, 219, 224, 263, 330, 331, 339, 341, 387, 400, 403, 446, 447, 467, 469, 470, 471, 473], [25, 77, 112, 154, 156, 206, 207, 209, 210, 211, 225, 230, 232, 237, 270, 335, 343, 344, 345, 353, 392, 408, 412, 420, 422, 427, 428, 435, 448, 453, 454, 455, 457, 463, 468, 474, 475, 478, 480, 485, 502, 503, 504, 508, 512], [26, 31, 79, 83, 160, 187, 241, 242, 244, 246, 251, 364, 447, 450, 488, 490], [27, 39, 86, 138, 162, 187, 190, 250, 274], [28, 33, 79, 84, 139, 161, 188, 244, 452, 489], [29, 35, 80, 134, 160, 162, 187, 189, 246, 437, 448], [30, 37, 83, 86, 162, 186, 187, 240, 243, 245, 246, 492], [31, 42, 90, 99, 166, 167, 195, 196, 205, 254, 286, 354, 376, 406, 447, 488], [32, 88, 105, 195, 201, 204, 221, 240, 243, 245, 252, 254, 354, 376, 462], [33, 43, 90, 91, 163, 203, 204, 240, 279, 357, 391, 405], [34, 100, 170, 199, 241, 244, 253, 407, 507], [35, 41, 92, 167, 168, 170, 196, 197, 199, 241, 387, 403, 436, 446, 447, 488], [36, 93, 165, 169, 198, 201, 242, 243, 246, 254, 255, 398, 508], [37, 40, 95, 99, 164, 168, 191, 196, 200, 287, 355, 399, 446, 488], [38, 45, 105, 149, 165, 201, 204, 250, 256, 279], [39, 44, 95, 168, 194, 196, 278, 356, 388, 402, 446, 488], [40, 106, 111, 173, 175, 208, 209, 212, 245, 246, 254, 255, 371, 376, 426, 454, 462, 491, 492, 493, 508], [41, 112, 172, 173, 209, 210, 246, 247, 254, 255, 392, 412, 437, 439, 443, 448, 453, 454, 457, 491, 508], [42, 111, 115, 171, 172, 209, 215, 244, 246, 254, 364, 417, 450, 453, 455, 490, 491, 494, 507, 508], [43, 108, 115, 174, 213, 244, 248, 253, 368, 393, 411, 452, 460, 489, 498, 507], [44, 106, 173, 206, 209, 250, 256, 295, 373, 394, 415, 454, 491], [45, 46, 119, 177, 222, 223, 241, 302, 356, 402, 407, 446, 488], [46, 122, 183, 231, 234, 247, 250, 256, 322, 373, 385, 415, 418, 454, 464, 491, 499, 510], [47, 49, 68, 259, 261, 262, 264, 270], [48, 128, 261, 274, 282, 296], [49, 51, 127, 277, 283, 293, 467], [50, 53, 275, 276, 277, 284, 288, 290, 292, 488, 490], [51, 64, 78, 130, 259, 260, 261, 274, 275, 316], [52, 85, 129, 257, 276, 277, 301, 312, 469, 488], [53, 60, 81, 132, 258, 306, 319, 320], [54, 80, 134, 258, 260, 281, 307, 313, 316], [55, 82, 131, 259, 275, 280, 299, 306, 320], [56, 83, 137, 275, 288, 300, 304, 306, 313, 319, 321, 471, 488, 490, 492], [57, 79, 139, 283, 302, 318, 473, 476, 489], [58, 86, 138, 260, 261, 274, 282, 298, 315, 472], [59, 101, 143, 269, 277, 287, 301, 303, 312, 327, 469, 487, 488, 495, 497], [60, 66, 94, 140, 263, 277, 288, 304, 469, 471, 488], [61, 103, 152, 268, 280, 286, 299, 303, 306, 320, 323, 326, 495], [62, 88, 141, 262, 288, 300, 306, 319, 323, 471, 485, 494, 512], [63, 105, 149, 262, 266, 279, 282, 298, 305, 315, 324, 472, 483, 496], [64, 67, 96, 144, 265, 267, 277, 278, 283, 284, 301, 302, 467, 469, 470, 473, 488], [65, 97, 151, 262, 266, 268, 279, 281, 286, 305, 307, 316, 325, 496], [66, 116, 155, 270, 292, 294, 308, 319, 320, 323, 326, 474, 480, 485, 491, 494, 495, 512], [67, 109, 159, 271, 273, 289, 294, 295, 296, 310, 316, 322, 325, 468, 475, 478, 480, 491, 496], [68, 72, 328, 330, 331, 334], [69, 85, 257, 328, 331, 341, 349, 469], [70, 78, 259, 260, 333, 342, 343], [71, 81, 258, 332, 339, 340, 347, 350, 502], [72, 74, 82, 259, 339, 350], [73, 97, 266, 268, 333, 338, 342, 343, 353, 504], [74, 77, 104, 265, 331, 469], [75, 101, 269, 330, 331, 338, 341, 349, 352, 469, 487, 504], [76, 103, 268, 332, 339, 340, 350, 351, 503, 505], [77, 114, 271, 335, 350, 351, 480], [78, 96, 188, 328, 361], [79, 90, 275, 357, 363, 502], [80, 92, 275, 276, 361, 372, 488, 489, 490], [81, 94, 186, 359, 366, 367], [82, 104, 189, 359, 367], [83, 99, 354, 355, 359, 364, 366, 372, 488], [84, 91, 190, 260, 274, 370], [85, 89, 187, 358, 362], [86, 95, 276, 328, 356, 360, 488], [87, 113, 200, 269, 277, 283, 287, 330, 331, 374, 467, 495, 504], [88, 195, 330, 338, 354, 359, 366, 376, 381, 504], [89, 110, 196, 277, 331, 469, 488], [90, 115, 193, 283, 284, 330, 359, 473], [91, 108, 194, 278, 356, 467, 470], [92, 112, 279, 281, 284, 285, 286, 307, 354, 357, 358, 359, 488], [93, 286, 287, 303, 354, 355, 372, 376, 382, 488, 495, 497, 506], [94, 116, 191, 332, 340, 355], [95, 106, 202, 282, 285, 329, 358, 472], [96, 109, 203, 329, 333, 342, 357, 358], [97, 121, 199, 330, 361, 379], [98, 120, 204, 266, 279, 370, 380], [99, 111, 192, 288, 376, 471], [100, 279, 286, 305, 354, 357, 363, 376, 383, 496], [101, 118, 201, 358, 362, 375, 378], [102, 107, 205, 268, 280, 281, 286, 332, 333, 376, 378, 495, 496, 503, 504], [103, 117, 198, 359, 367, 381, 384], [104, 114, 197, 280, 299], [105, 119, 287, 330, 356, 360, 374, 377, 488, 497], [106, 214, 291, 297, 337, 360, 365, 374, 482], [107, 215, 290, 293, 334, 336, 361, 367, 477, 490], [108, 206, 295, 370, 373, 380, 468, 478], [109, 213, 336, 337, 348, 361, 365, 368, 379], [110, 209, 294, 335, 362, 378, 480, 491], [111, 211, 292, 366, 372, 376, 474, 495, 504], [112, 289, 291, 293, 314, 361, 364, 365, 368, 369, 372, 376, 379, 382, 489, 490, 491, 494, 495, 497, 498, 506], [113, 208, 294, 296, 335, 362, 370, 468, 481, 492, 502], [114, 210, 290, 317, 367, 384], [115, 207, 289, 296, 363, 369, 376, 475, 496, 502, 503], [116, 212, 334, 346, 366, 367, 371, 376, 381, 384, 504], [117, 126, 216, 299, 303, 340, 355, 505, 506], [118, 125, 222, 303, 338, 354, 386, 469, 488], [119, 122, 221, 304, 305, 339, 354, 358, 385, 472, 499], [120, 124, 223, 302, 356, 470], [121, 123, 217, 305, 307, 338, 339, 342, 354, 357, 358, 359], [122, 236, 308, 318, 344, 360, 364, 365, 374, 386, 482, 512], [123, 235, 314, 318, 344, 347, 348, 361, 364, 365, 368, 369, 379, 386, 500, 505, 506, 512], [124, 234, 322, 370, 373, 380, 385, 478], [125, 231, 313, 347, 362, 364, 378, 480, 491, 499, 512], [126, 228, 313, 317, 346, 367, 371, 384, 501], [127, 130, 390, 391, 392], [128, 136, 388, 393, 467], [129, 162, 187, 390, 400, 404, 416], [130, 144, 161, 188, 419], [131, 160, 189, 389, 397, 401, 423], [132, 140, 186, 261, 397, 414, 423], [133, 147, 257, 276, 410], [134, 387, 403, 409, 419], [135, 146, 259, 275, 400, 420], [136, 153, 190, 260, 261, 274, 422], [137, 148, 257, 258, 397, 399, 400, 406, 409, 410, 414, 417, 420, 473, 474, 476], [138, 388, 402, 425], [139, 260, 391, 405, 418, 422], [140, 155, 164, 191, 267, 390, 399, 400], [141, 166, 195, 262, 397, 406, 414, 434, 435], [142, 200, 269, 287, 399, 410, 433], [143, 165, 201, 390, 398, 400, 404, 416, 428, 432, 508], [144, 159, 163, 203, 390, 391, 400, 404, 405], [145, 204, 262, 266, 279, 391, 405, 422, 427], [146, 154, 193, 265, 284, 389, 397, 473], [147, 156, 202, 264, 285, 390, 400, 404, 472], [148, 158, 192, 262, 263, 264, 288, 387, 390, 391, 400, 435, 471, 485, 508], [149, 388, 402, 407, 425, 430, 507], [150, 205, 268, 286, 400, 406, 420, 428, 435], [151, 170, 199, 387, 403, 407, 419, 429, 507], [152, 169, 198, 389, 397, 398, 401, 423, 431, 434, 508], [153, 157, 194, 267, 278, 388, 402, 467, 470], [154, 207, 271, 289, 396, 420, 424, 435, 475], [155, 175, 212, 273, 395, 408, 414, 423, 426, 431, 434, 435, 508], [156, 214, 272, 291, 395, 408, 410, 413, 433, 482], [157, 206, 273, 295, 394, 415, 422, 427, 468, 478], [158, 211, 270, 272, 292, 392, 393, 395, 408, 410, 414, 420, 435, 474, 476], [159, 174, 213, 393, 395, 408, 411, 413, 419, 429, 507], [160, 167, 275, 436, 438], [161, 163, 274, 275, 437], [162, 168, 276, 440, 488], [163, 174, 179, 278, 284, 488], [164, 175, 282, 288, 390, 391, 488, 508], [165, 177, 287, 440, 442, 488, 497], [166, 171, 283, 288, 387, 390, 441, 494, 507, 508], [167, 172, 284, 389, 397], [168, 173, 285, 390, 404], [169, 176, 286, 436, 438, 441, 444], [170, 178, 279, 286, 437, 443], [171, 292, 296, 392, 395, 414, 437, 440], [172, 289, 396, 424, 438, 441], [173, 291, 395, 413, 440, 442], [174, 182, 289, 295, 437, 443, 491], [175, 184, 292, 297, 393, 395, 438, 441, 444, 491, 494, 507], [176, 181, 243, 300, 397, 398, 445], [177, 183, 242, 304, 398, 404, 499], [178, 180, 241, 300, 302, 403, 407, 436, 488], [179, 182, 240, 298, 306, 404, 405], [180, 247, 321, 322, 412, 418, 437, 439, 443, 445, 491, 499, 510], [181, 251, 321, 409, 424, 438, 441, 509], [182, 185, 248, 309, 311, 411, 413], [183, 249, 308, 409, 413, 440, 442, 511], [184, 245, 315, 319, 321, 414, 416, 418, 422, 426, 437, 445, 491, 492], [185, 252, 323, 324, 427, 432, 443, 445, 510], [186, 191, 328, 447, 449, 450], [187, 196, 446, 451], [188, 203, 448], [189, 197, 447, 449], [190, 194, 328, 452], [191, 212, 218, 329], [192, 211, 330, 331, 332, 455, 504], [193, 207, 333, 391, 447], [194, 206, 220, 329], [195, 224, 330, 447, 450, 455, 458], [196, 209, 390, 400], [197, 210, 389, 401], [198, 216, 447, 449, 458, 461], [199, 217, 448, 457], [200, 208, 390, 391, 462, 508], [201, 222, 446, 451, 456, 459], [202, 214, 331, 388, 446, 467], [203, 213, 219, 446], [204, 223, 330, 452, 460], [205, 215, 387, 389, 455, 459, 507, 508], [206, 226, 337, 452, 460], [207, 227, 336, 393, 453, 455, 507], [208, 393, 395, 410, 451, 452], [209, 395, 408, 451, 459], [210, 396, 421, 449, 461], [211, 225, 334, 335, 450, 455, 502, 508], [212, 229, 337, 449, 450, 455, 458, 461], [213, 232, 448, 454, 457], [214, 233, 335, 394, 454, 462, 468], [215, 392, 396, 420, 448, 449], [216, 228, 242, 398, 401, 463], [217, 235, 241, 403, 407, 446, 447], [218, 229, 340, 341, 355, 399, 400, 446], [219, 232, 342, 357, 400, 405], [220, 226, 341, 356, 402, 446, 470], [221, 236, 338, 399, 407, 446, 465, 509, 512], [222, 231, 243, 398, 400, 464], [223, 234, 240, 339, 405], [224, 230, 338, 339, 354, 406, 447, 463], [225, 349, 350, 372, 408, 409, 410, 420, 449, 451, 474], [226, 239, 345, 373, 415, 454, 478], [227, 343, 363, 418, 420, 422, 448, 475, 502], [228, 249, 409, 421, 449, 461, 511], [229, 237, 345, 346, 371, 408, 426, 454, 463], [230, 344, 347, 364, 417, 450, 453, 455, 463, 512], [231, 251, 408, 409, 451, 459, 509], [232, 238, 348, 368, 408, 411], [233, 349, 360, 408, 410, 425, 451, 452, 479, 482], [234, 248, 344, 411, 452, 460, 465], [235, 247, 412, 418, 448, 453, 454, 457, 463, 464, 510], [236, 245, 347, 418, 426, 454, 462, 464], [237, 351, 352, 382, 428, 433, 455, 456, 461, 463, 511, 512], [238, 353, 383, 427, 428, 457, 463, 510], [239, 352, 377, 430, 456, 460, 465, 484], [240, 248, 356, 359, 446], [241, 247, 354, 357], [242, 249, 355, 436, 446, 506], [243, 251, 354, 447, 466, 488], [244, 363, 418, 437, 448], [245, 360, 364, 366, 450, 451, 452, 466], [246, 372, 409, 438, 440, 449, 451], [247, 253, 364, 368, 466, 506], [248, 252, 369, 373, 454], [249, 255, 371, 439, 454], [250, 360, 425, 440, 451, 452, 489], [251, 254, 364, 453, 491], [252, 377, 381, 456, 460, 465, 466], [253, 376, 383, 443, 457, 510], [254, 376, 441, 458, 459, 497, 506, 509], [255, 382, 442, 444, 456, 461, 466, 511], [256, 374, 377, 430, 442, 456, 459, 460, 497, 498, 507], [257, 264, 472, 481], [258, 263, 469, 471, 473, 474, 476, 477], [259, 265, 469, 473, 477], [260, 467, 470, 479], [261, 267, 328, 476], [262, 283, 330, 473, 476, 486], [263, 270, 281, 332, 485], [264, 272, 277, 331, 467, 469], [265, 271, 280, 333], [266, 467, 470, 479, 484], [267, 273, 282, 329, 472], [268, 469, 471, 473, 477, 485, 486, 487, 512], [269, 471, 472, 481, 483, 485], [270, 293, 334, 476, 477, 486], [271, 290, 336, 477, 485], [272, 294, 335, 468, 480, 481, 485], [273, 297, 337, 476, 482, 486], [274, 278, 489], [275, 284, 488, 490], [276, 285, 492], [277, 294, 390], [278, 295, 298], [279, 302, 489, 498], [280, 290, 389], [281, 293, 387, 467, 495], [282, 297, 388, 467], [283, 296, 391, 496], [284, 289, 306], [285, 291, 301, 488], [286, 300, 488, 490, 494, 497], [287, 304, 492, 493], [288, 292, 488, 494, 495], [289, 309, 490, 494], [290, 320, 396, 495], [291, 310, 491, 492, 493], [292, 319, 490, 491, 492, 494], [293, 316, 392, 468, 496], [294, 312, 395, 495], [295, 311, 489, 498], [296, 393, 476, 489], [297, 315, 394, 468, 496], [298, 311, 356, 402, 470, 488], [299, 317, 401, 469, 488], [300, 321, 354, 406, 488, 499], [301, 310, 358, 404, 472], [302, 322, 357, 405], [303, 313, 398, 471, 499, 501, 512], [304, 308, 355, 399, 488], [305, 318, 407, 473, 500, 512], [306, 309, 359, 397, 473], [307, 314, 403, 469, 470, 471, 473, 488], [308, 371, 426, 491, 492, 493, 499, 501], [309, 323, 369, 424, 475], [310, 327, 365, 413, 482], [311, 324, 373, 415, 478, 491], [312, 362, 416, 480, 481, 491, 492], [313, 372, 409, 474, 495], [314, 325, 412, 474, 475, 478, 480, 491, 499, 501, 512], [315, 360, 425, 476, 479, 482, 489], [316, 361, 419, 476, 477, 479, 489, 490], [317, 326, 421, 480, 491], [318, 363, 418, 475, 496], [319, 366, 414, 474, 476], [320, 367, 423, 477, 490], [321, 364, 417, 490, 491, 494, 499, 512], [322, 368, 411, 489, 498, 500], [323, 381, 434, 486, 494, 499, 512], [324, 377, 430, 484, 497, 498, 500], [325, 379, 429, 484, 485, 486, 487, 494, 495, 497, 498, 500, 512], [326, 384, 431, 487, 497, 501], [327, 375, 432, 483, 493, 501], [328, 329, 502], [329, 337, 341], [330, 339, 502, 503], [331, 335], [332, 334, 504], [333, 336, 467], [334, 350, 502, 503], [335, 349, 504], [336, 343, 468, 504], [337, 345, 502, 503], [338, 347, 471, 505, 512], [339, 344, 359, 473], [340, 346, 469, 471], [341, 345, 358, 472], [342, 348, 469, 470, 473], [343, 361, 477, 479], [344, 369, 475, 502, 503, 505], [345, 352, 365, 482], [346, 351, 474, 480, 505, 512], [347, 366, 474, 504], [348, 353, 475, 478, 480], [349, 362, 480, 481, 502], [350, 367, 477], [351, 384, 485, 487, 504], [352, 375, 483, 503, 505], [353, 379, 484, 486, 487, 505, 512], [354, 364, 506], [355, 371, 488], [356, 373], [357, 368, 488], [358, 365, 446], [359, 369, 447], [360, 491, 492, 502], [361, 448, 502], [362, 451], [363, 489, 490], [364, 376, 506], [365, 375, 454], [366, 450, 502], [367, 449], [368, 383, 491], [369, 381, 453], [370, 452, 479, 489], [371, 382, 491, 506], [372, 490, 491, 492], [373, 377], [374, 462, 483, 493, 496, 503], [375, 386, 456], [376, 455, 494, 512], [377, 385], [378, 459, 487, 495, 497, 504], [379, 457, 496, 503, 504], [380, 460, 484, 498], [381, 458, 503, 505, 506], [382, 493, 497, 501, 506], [383, 497, 498, 500, 506], [384, 461, 495], [385, 465, 500], [386, 464, 501, 505, 506], [387, 392, 508], [388, 394], [389, 396], [390, 395], [391, 393, 467, 507], [392, 419, 507], [393, 422, 468], [394, 425, 507], [395, 416, 508], [396, 423, 508], [397, 424, 447], [398, 409, 509, 511], [399, 426, 471, 472], [400, 408, 469, 488], [401, 421, 436], [402, 415, 472], [403, 412], [404, 413, 446], [405, 411, 470, 473], [406, 417, 471, 473, 509, 512], [407, 418, 510], [408, 428, 480, 491], [409, 508], [410, 481, 492], [411, 427, 475, 478, 510], [412, 429, 509, 511], [413, 432, 454], [414, 450, 476], [415, 430, 482], [416, 440, 451], [417, 435, 474, 475, 509], [418, 507], [419, 437, 448], [420, 477, 490], [421, 431, 439], [422, 452, 476, 479, 489], [423, 438, 449], [424, 434, 453], [426, 433, 474, 482, 509, 511, 512], [427, 460, 484, 486, 498, 507], [428, 459, 487, 497, 509], [429, 443, 457, 508, 510], [430, 483, 510], [431, 444, 461, 511], [432, 442, 456, 511], [433, 462, 483, 485, 493, 508], [434, 441, 458, 509], [435, 455, 485, 486, 494, 507, 508, 512], [436, 439, 488], [437, 489, 490], [438, 490], [439, 444, 491], [440, 491, 492], [441, 494, 508], [442, 493, 508], [443, 494, 497, 498, 507], [444, 445, 497], [445, 466, 499, 511], [446, 454], [447, 453], [450, 502], [452, 502], [453, 458], [454, 456], [455, 503, 504], [456, 464], [457, 507], [458, 463], [459, 508], [460, 503], [461, 508], [462, 504, 507], [463, 505, 506, 509], [464, 466, 511], [465, 505, 510], [466, 506], [467, 468], [468, 479], [469, 480], [470, 478], [471, 474, 512], [472, 482], [473, 475], [474, 485, 512], [475, 486, 512], [476, 502], [478, 484], [480, 487], [482, 483], [483, 512], [485, 495, 504], [486, 496, 503], [487, 512], [488, 491], [491, 497], [495, 508], [496, 507], [497, 499], [499, 506, 509], [500, 510], [501, 511, 512], [505, 512], [509, 512], [510, 512]]]]]])
chevieset(:E7, :WGraph, function (i,)
        local gr
        gr = chevieget(:E7, :WGraphs)
        if IsInt(gr[i])
            return DualWGraph(7, gr[gr[i]])
        else
            return gr[i]
        end
    end)
chevieset(:E7, :HeckeRepresentation, function (param, sqrtparam, i)
        local v
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(-((param[1])[1]) // (param[1])[2], 2, "Representation(Hecke(E7),[", i, "])")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        return -((param[1])[2]) * WGraphToRepresentation(7, (chevieget(:E7, :WGraph))(i), v)
    end)
chevieset(:E7, :Representation, (i->begin
            (chevieget(:E7, :HeckeRepresentation))(map((i->begin
                            [1, -1]
                        end), 1:7), fill(0, max(0, (1 + 7) - 1)) + 1, i)
        end))
chevieset(:E7, :DecompositionMatrix, function (p,)
        if p == 2
            return [[1:58, [[1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0], [1, 2, 0, 1, 0, 0, 0], [1, 2, 0, 1, 0, 0, 0], [1, 2, 1, 1, 0, 0, 0], [1, 2, 1, 1, 0, 0, 0], [1, 2, 1, 1, 0, 0, 0], [1, 2, 1, 1, 0, 0, 0], [2, 3, 1, 2, 0, 0, 0], [2, 3, 1, 2, 0, 0, 0], [2, 1, 0, 1, 1, 0, 0], [2, 1, 0, 1, 1, 0, 0], [2, 2, 1, 1, 1, 0, 0], [2, 2, 1, 1, 1, 0, 0], [1, 2, 0, 2, 0, 1, 0], [1, 2, 0, 2, 0, 1, 0], [3, 3, 1, 2, 1, 0, 0], [3, 3, 1, 2, 1, 0, 0], [3, 3, 1, 2, 1, 0, 0], [3, 3, 1, 2, 1, 0, 0], [2, 3, 1, 2, 0, 1, 0], [2, 3, 1, 2, 0, 1, 0], [2, 2, 0, 3, 1, 1, 0], [2, 2, 0, 3, 1, 1, 0], [3, 4, 1, 3, 1, 1, 0], [3, 4, 1, 3, 1, 1, 0], [3, 4, 1, 3, 1, 1, 0], [3, 4, 1, 3, 1, 1, 0], [3, 4, 1, 3, 1, 1, 0], [3, 4, 1, 3, 1, 1, 0], [4, 5, 1, 4, 1, 1, 0], [4, 5, 1, 4, 1, 1, 0], [2, 3, 2, 1, 1, 0, 1], [2, 3, 2, 1, 1, 0, 1], [2, 3, 1, 2, 1, 0, 1], [2, 3, 1, 2, 1, 0, 1], [6, 6, 1, 5, 2, 1, 0], [6, 6, 1, 5, 2, 1, 0], [2, 3, 1, 2, 1, 1, 1], [2, 3, 1, 2, 1, 1, 1], [3, 5, 2, 3, 1, 1, 1], [3, 5, 2, 3, 1, 1, 1], [4, 6, 2, 4, 1, 1, 1], [4, 6, 2, 4, 1, 1, 1], [4, 5, 2, 4, 2, 1, 1], [4, 5, 2, 4, 2, 1, 1], [5, 7, 2, 5, 2, 1, 1], [5, 7, 2, 5, 2, 1, 1], [6, 8, 3, 5, 2, 1, 1], [6, 8, 3, 5, 2, 1, 1]]], [[59, 60], [[1], [1]]]]
        elseif p == 3
            return [[[1, 3, 5, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 39, 41, 45, 47, 49, 51, 57, 59], [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1]]], [[2, 4, 6, 8, 10, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 40, 42, 46, 48, 50, 52, 58, 60], [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 1]]], [[11, 43, 37], [[1, 0], [1, 1], [0, 1]]], [[12, 44, 38], [[1, 0], [1, 1], [0, 1]]], [[33, 53, 35], [[1, 0], [1, 1], [0, 1]]], [[36, 54, 34], [[1, 0], [1, 1], [0, 1]]]]
        elseif p == 5
            return [[[1, 21, 43, 35, 17], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[3, 53, 59, 31, 11], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[7, 33, 51, 37, 9], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[2, 22, 44, 36, 18], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[4, 54, 60, 32, 12], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[8, 34, 52, 38, 10], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]]]
        elseif p == 7
            return [[[1, 11, 29, 55, 59, 43, 5], [[1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1]]], [[2, 12, 30, 56, 60, 44, 6], [[1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1]]]]
        else
            return []
        end
    end)
chevieset(:E7, :UnipotentCharacters, function ()
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "E", :indices => 1:7, :rank => 7), :levi => [], :eigenvalue => 1, :parameterExponents => [1, 1, 1, 1, 1, 1, 1], :cuspidalName => "", :charNumbers => 1:60), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "B", :indices => [7, 6, 1], :cartanType => 1, :rank => 3), :levi => 2:5, :eigenvalue => -1, :parameterExponents => [1, 4, 4], :cuspidalName => "D_4", :charNumbers => [67, 66, 64, 61, 69, 65, 68, 62, 70, 63]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [7], :rank => 1), :levi => 1:6, :eigenvalue => E(3), :parameterExponents => [9], :cuspidalName => "E_6[\\zeta_3]", :charNumbers => [71, 72]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [7], :rank => 1), :levi => 1:6, :eigenvalue => E(3, 2), :parameterExponents => [9], :cuspidalName => "E_6[\\zeta_3^2]", :charNumbers => [73, 74]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:7, :eigenvalue => -(E(4)), :parameterExponents => [], :cuspidalName => "E_7[-i]", :charNumbers => [75], :qEigen => 1 // 2), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:7, :eigenvalue => E(4), :parameterExponents => [], :cuspidalName => "E_7[i]", :charNumbers => [76], :qEigen => 1 // 2)], :families => [Family("C1", [1]), Family("C1", [2], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [3]), Family("C1", [4], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [9]), Family("C1", [10], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [11]), Family("C1", [12], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [25]), Family("C1", [26], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [27]), Family("C1", [28], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [31]), Family("C1", [32], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [35]), Family("C1", [36], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [37]), Family("C1", [38], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [39]), Family("C1", [40], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [41]), Family("C1", [42], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [53]), Family("C1", [54], Dict{Symbol, Any}(:ennola => -1)), Family("C2", [18, 15, 7, 70], Dict{Symbol, Any}(:ennola => -4)), Family("C2", [29, 6, 24, 63], Dict{Symbol, Any}(:ennola => 4)), Family("C2", [55, 44, 33, 65], Dict{Symbol, Any}(:ennola => 3)), Family("C2", [57, 21, 52, 69], Dict{Symbol, Any}(:ennola => 2)), Family("C2", [58, 22, 51, 62], Dict{Symbol, Any}(:ennola => -2)), Family("C2", [56, 43, 34, 66], Dict{Symbol, Any}(:ennola => -3)), Family("C2", [30, 5, 23, 67], Dict{Symbol, Any}(:ennola => -4)), Family("C2", [17, 16, 8, 61], Dict{Symbol, Any}(:ennola => 4)), Family("C'2", [60, 59, 76, 75], Dict{Symbol, Any}(:ennola => 3)), Family("S3", [50, 47, 20, 46, 14, 68, 72, 74], Dict{Symbol, Any}(:ennola => -5)), Family("S3", [49, 48, 19, 45, 13, 64, 71, 73], Dict{Symbol, Any}(:ennola => 5))], :a => [0, 63, 46, 1, 25, 4, 3, 30, 36, 3, 2, 37, 16, 7, 3, 30, 30, 3, 16, 7, 10, 13, 25, 4, 6, 21, 12, 15, 4, 25, 6, 21, 8, 15, 22, 5, 20, 7, 6, 21, 10, 13, 15, 8, 16, 7, 7, 16, 16, 7, 13, 10, 14, 9, 8, 15, 10, 13, 11, 11, 30, 13, 4, 16, 8, 15, 25, 7, 10, 3, 16, 7, 16, 7, 11, 11], :A => [0, 63, 62, 17, 59, 38, 33, 60, 60, 27, 26, 61, 56, 47, 33, 60, 60, 33, 56, 47, 50, 53, 59, 38, 42, 57, 48, 51, 38, 59, 42, 57, 48, 55, 58, 41, 56, 43, 42, 57, 50, 53, 55, 48, 56, 47, 47, 56, 56, 47, 53, 50, 54, 49, 48, 55, 50, 53, 52, 52, 60, 53, 38, 56, 48, 55, 59, 47, 50, 33, 56, 47, 56, 47, 52, 52])
    end)
chevieset(:E7, :Invariants, function ()
        local r, C
        C = chevieget(:E7, :CartanMat)
        r = RootsCartan(C) * C
        return map((d->begin
                        function (arg...,)
                            return Sum(r, (a->begin
                                            (arg * a) ^ d
                                        end))
                        end
                    end), chevieget(:E7, :ReflectionDegrees))
    end)
chevieset(:E7, :UnipotentClasses, function (p,)
        local uc, Z, c, class
        if p == 0
            p = 1
        end
        Z = (n->begin
                    ComplexReflectionGroup(n, 1, 1)
                end)
        class = (n->begin
                    First(uc[:classes], (x->begin
                                x[:name] == n
                            end))
                end)
        uc = Dict{Symbol, Any}(:orderPicture => Join(["\t\t  E_7", "\t\t   |", "\t\tE_7(a_1)", "\t\t   |", "\t\tE_7(a_2)", "\t\t /    \\", "\t       E_6     E_7(a_3)", "\t\t \\    /     \\", "\t\tE_6(a_1)   D_6", "\t\t   |       /", "\t\t   |      /", "\t\t  E_7(a_4)", "\t       /   |       \\", "\t      /    |        \\", "       A_6        D_5+A_1   D_6(a_1)", "\t|      /          \\   |", "     E_7(a_5)                D_5", "\t|\\__________________  |", "\t|                   \\ |", "    D_6(a_2)               E_6(a_3)", "\t|\\__________________/ |", "\t|         |           |", "\t|        A_5     D_5(a_1)+A_1", "\t|         _ \\ _____/  |", "\t|         |  \\________|", "     A_5+A_1      |           |", "\t|     \\______________ |", "\t|                   A_4+A_2", "       A_5''      |           |", "\t|      D_5(a_1)       |", "\t|         |  \\_______ |", "\t|         |          \\|", "\t|     D_4+A_1      A_4+A_1", "      _ | ____/    \\______ /_ |", "     /   \\___ _      ____ /  \\|", "   D_4         \\    /    A_3+A_2+A_1", "    |           A_4           |", "    |             \\_________  |", "    |                       \\ |", "    |                      A_3+A_2", "    |                         |", "    |                    D_4(a_1)+A_1", "    |  ______________________/|", "    | /                       |", "  D_4(a_1)                 A_3+2A_1", "\t\\_______    _________/|", "\t\t\\  /          |", "\t      (A_3+A_1)'      |", "\t\t/   _\\_____(A_3+A_1)''", "\t2A_2+A_1 ] |  \\_____  |", "    ___/     |     |        \\ |", "   /          2A_2          A_3", "A_2+3A_1         |            |", "   |             |            |", "    \\___________ | __________/", "\t\t\\|/", "\t      A_2+2A_1", "\t\t |", "\t      A_2+A_1", "\t      /      \\", "\t 4A_1____    A_2", "\t /        \\     |", "      (3A_1)''     (3A_1)'", "\t \\            /", "\t      2A_1", "\t       |", "\t      A_1", "\t       |", "\t      A_0"], "\n"), :classes => [Dict{Symbol, Any}(:name => "E_7", :succ => [], :dynkin => [2, 2, 2, 2, 2, 2, 2], :Au => Z(2 * gcd(6, p)), :balacarter => 1:7), Dict{Symbol, Any}(:name => "E_7(a_1)", :succ => ["E7"], :dynkin => [2, 2, 2, 0, 2, 2, 2], :Au => Z(2), :balacarter => [1, 2, 3, -4, 5, 6, 7]), Dict{Symbol, Any}(:name => "E_7(a_2)", :succ => ["E7(a1)"], :dynkin => [2, 2, 2, 0, 2, 0, 2], :Au => Z(2), :balacarter => [1, 2, 3, -4, 5, -6, 7]), Dict{Symbol, Any}(:name => "E_6", :succ => ["E7(a2)"], :dynkin => [2, 0, 2, 2, 0, 2, 0], :Au => Z(gcd(6, p)), :balacarter => 1:6, :red => Z(2)), Dict{Symbol, Any}(:name => "E_7(a_3)", :mizuno => "D_6{+}A_1", :succ => ["E7(a2)"], :dynkin => [2, 0, 0, 2, 0, 2, 2], :Au => Z(2) * Z(gcd(2, p - 1)), :balacarter => [1, -2, -3, 4, -5, 6, 7]), Dict{Symbol, Any}(:name => "E_6(a_1)", :succ => ["E6", "E7(a3)"], :dynkin => [2, 0, 0, 2, 0, 2, 0], :Au => Z(2), :balacarter => [1, 2, 3, -4, 5, 6], :red => Torus(1), :AuAction => ExtendedReflectionGroup(Torus(1), [[-1]])), Dict{Symbol, Any}(:name => "D_6", :succ => ["E7(a3)"], :dynkin => [2, 1, 1, 0, 1, 2, 2], :Au => Z(2), :balacarter => 2:7, :red => Z(2)), Dict{Symbol, Any}(:name => "E_7(a_4)", :mizuno => "D_6(a_1){+}A_1", :succ => ["E6(a1)", "D6"], :dynkin => [2, 0, 0, 2, 0, 0, 2], :Au => Z(gcd(2, p - 1)) * Z(gcd(2, p - 1)), :balacarter => [1, -2, -3, 4, -5, -6, 7]), Dict{Symbol, Any}(:name => "A_6", :succ => ["E7(a4)"], :dynkin => [0, 0, 0, 2, 0, 2, 0], :Au => Z(gcd(2, p)), :balacarter => [1, 3, 4, 5, 6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "D_5{+}A_1", :succ => ["E7(a4)"], :dynkin => [2, 1, 1, 0, 1, 1, 0], :Au => Z(2), :balacarter => [1, 2, 3, 4, 5, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "D_6(a_1)", :succ => ["E7(a4)"], :dynkin => [2, 1, 1, 0, 1, 0, 2], :Au => Z(2), :balacarter => [2, 3, -4, 5, 6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "E_7(a_5)", :mizuno => "D_6(a_2){+}A_1", :succ => ["A6", "D5+A1", "D6(a1)"], :dynkin => [0, 0, 0, 2, 0, 0, 2], :Au => CoxeterGroup("A", 2) * Z(gcd(2, p - 1)), :balacarter => [-1, -2, -3, 4, -5, -6, 7]), Dict{Symbol, Any}(:name => "D_5", :succ => ["D5+A1", "D6(a1)"], :dynkin => [2, 0, 2, 0, 0, 2, 0], :Au => Z(gcd(2, p)), :balacarter => [1, 2, 3, 4, 5], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "D_6(a_2)", :succ => ["E7(a5)"], :dynkin => [0, 1, 1, 0, 1, 0, 2], :Au => Z(gcd(2, p - 1)), :balacarter => [2, 3, -4, 5, -6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "E_6(a_3)", :mizuno => "(A_5{+}A_1)'", :succ => ["E7(a5)", "D5"], :dynkin => [0, 0, 2, 0, 0, 2, 0], :Au => Z(2), :balacarter => [1, -2, -3, 4, -5, 6], :red => Z(2)), Dict{Symbol, Any}(:name => "A_5'", :succ => ["D6(a2)", "E6(a3)"], :dynkin => [1, 0, 0, 1, 0, 2, 0], :balacarter => [1, 3, 4, 5, 6], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "D_5(a_1){+}A_1", :succ => ["E6(a3)", "D6(a2)"], :dynkin => [2, 0, 0, 0, 2, 0, 0], :Au => Z(gcd(2, p - 1)), :balacarter => [1, 2, 3, -4, 5, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "A_5{+}A_1", :mizuno => "(A_5{+}A_1)''", :succ => ["D6(a2)"], :dynkin => [1, 0, 0, 1, 0, 1, 2], :Au => Z(gcd(2, p - 1)), :balacarter => [1, 2, 4, 5, 6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "A_4{+}A_2", :succ => ["A5'", "D5(a1)+A1", "A5+A1"], :dynkin => [0, 0, 0, 2, 0, 0, 0], :balacarter => [1, 2, 3, 4, 6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "A_5''", :succ => ["A5+A1"], :dynkin => [2, 0, 0, 0, 0, 2, 2], :Au => Z(gcd(2, p - 1)), :balacarter => [2, 4, 5, 6, 7], :red => CoxeterGroup("G", 2)), Dict{Symbol, Any}(:name => "D_5(a_1)", :succ => ["D5(a1)+A1"], :dynkin => [2, 0, 0, 1, 0, 1, 0], :Au => Z(2), :balacarter => [1, 2, 3, -4, 5], :red => ReflectionSubgroup(Z(2) * Z(2), [1]), :AuAction => ExtendedReflectionGroup(ReflectionSubgroup(Z(2) * Z(2), [1]), #= none:132 =# @perm_str("(2,4)"))), Dict{Symbol, Any}(:name => "D_4{+}A_1", :succ => ["D5(a1)"], :dynkin => [2, 1, 1, 0, 0, 0, 1], :Au => Z(2), :balacarter => [2, 3, 4, 5, 7], :red => CoxeterGroup("B", 2)), Dict{Symbol, Any}(:name => "A_4{+}A_1", :succ => ["A4+A2", "D5(a1)"], :dynkin => [1, 0, 0, 1, 0, 1, 0], :Au => Z(2), :balacarter => [1, 2, 3, 4, 6], :red => ReflectionSubgroup(Z(2) * Z(2), []), :AuAction => ExtendedReflectionGroup(ReflectionSubgroup(Z(2) * Z(2), []), #= none:137 =# @perm_str("(1,3)(2,4)"))), Dict{Symbol, Any}(:name => "D_4", :succ => ["D4+A1"], :dynkin => [2, 0, 2, 0, 0, 0, 0], :Au => Z(gcd(2, p)), :balacarter => [2, 3, 4, 5], :red => CoxeterGroup("C", 3)), Dict{Symbol, Any}(:name => "A_3{+}A_2{+}A_1", :succ => ["D4+A1", "A4+A1"], :dynkin => [0, 0, 0, 0, 2, 0, 0], :Au => Z(gcd(2, p - 1)), :balacarter => [1, 2, 3, 5, 6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "A_4", :succ => ["A5''", "A4+A1"], :dynkin => [2, 0, 0, 0, 0, 2, 0], :Au => Z(2), :balacarter => [1, 2, 3, 4], :red => ReflectionSubgroup(CoxeterGroup("A", 2, "A", 1), [1, 2]), :AuAction => ExtendedReflectionGroup(ReflectionSubgroup(CoxeterGroup("A", 2, "A", 1), [1, 2]), #= none:147 =# @perm_str("(1,2)(3,7)(5,6)"))), Dict{Symbol, Any}(:name => "A_3{+}A_2", :succ => ["A3+A2+A1", "A4"], :dynkin => [0, 0, 0, 1, 0, 1, 0], :Au => Z(gcd(2, p - 1)), :balacarter => [1, 3, 4, 6, 7], :red => ReflectionSubgroup(Z(2) * Z(2), [1]), :AuAction => ExtendedReflectionGroup(ReflectionSubgroup(Z(2) * Z(2), [1]), #= none:151 =# @perm_str("(2,4)"))), Dict{Symbol, Any}(:name => "D_4(a_1){+}A_1", :succ => ["A3+A2"], :dynkin => [0, 1, 1, 0, 0, 0, 1], :Au => Z(2) * Z(gcd(2, p - 1)), :balacarter => [2, 3, -4, 5, 7], :red => Z(2) * Z(2), :AuAction => ExtendedReflectionGroup(Z(2) * Z(2), [#= none:155 =# @perm_str("(1,2)"), Perm()])), Dict{Symbol, Any}(:name => "D_4(a_1)", :succ => ["D4", "D4(a1)+A1"], :dynkin => [0, 0, 2, 0, 0, 0, 0], :Au => CoxeterGroup("A", 2), :balacarter => [2, 3, -4, 5], :red => Z(2) * Z(2) * Z(2), :AuAction => ExtendedReflectionGroup(Z(2) * Z(2) * Z(2), [#= none:159 =# @perm_str("(1,2)"), #= none:159 =# @perm_str("(2,3)")])), Dict{Symbol, Any}(:name => "A_3{+}2A_1", :succ => ["D4(a1)+A1"], :dynkin => [1, 0, 0, 0, 1, 0, 1], :Au => Z(gcd(2, p - 1)), :balacarter => [1, 2, 4, 5, 7], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "(A_3{+}A_1)'", :succ => ["D4(a1)", "A3+2A1"], :dynkin => [1, 0, 0, 1, 0, 0, 0], :balacarter => [1, 2, 4, 5], :red => Z(2) * Z(2) * Z(2)), Dict{Symbol, Any}(:name => "(A_3{+}A_1)''", :succ => ["A3+2A1"], :dynkin => [2, 0, 0, 0, 0, 0, 2], :Au => Z(gcd(2, p - 1)), :balacarter => [2, 4, 5, 7], :red => CoxeterGroup("B", 3)), Dict{Symbol, Any}(:name => "2A_2{+}A_1", :succ => ["(A3+A1)'"], :dynkin => [0, 0, 1, 0, 0, 1, 0], :balacarter => [1, 2, 3, 5, 6], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "2A_2", :succ => ["(A3+A1)''", "2A2+A1"], :dynkin => [0, 0, 0, 0, 0, 2, 0], :balacarter => [1, 3, 5, 6], :red => CoxeterGroup("G", 2, "A", 1)), Dict{Symbol, Any}(:name => "A_3", :succ => ["(A3+A1)'", "(A3+A1)''"], :dynkin => [2, 0, 0, 0, 0, 1, 0], :balacarter => [1, 3, 4], :red => CoxeterGroup("B", 3, "A", 1)), Dict{Symbol, Any}(:name => "A_2{+}3A_1", :succ => ["2A2+A1"], :dynkin => [0, 2, 0, 0, 0, 0, 0], :Au => Z(gcd(2, p - 1)), :balacarter => [1, 2, 3, 5, 7], :red => CoxeterGroup("G", 2)), Dict{Symbol, Any}(:name => "A_2{+}2A_1", :succ => ["2A2", "A3", "A2+3A1"], :dynkin => [0, 0, 0, 1, 0, 0, 0], :balacarter => [1, 2, 3, 5], :red => Z(2) * Z(2) * Z(2)), Dict{Symbol, Any}(:name => "A_2{+}A_1", :succ => ["A2+2A1"], :dynkin => [1, 0, 0, 0, 0, 1, 0], :Au => Z(2), :balacarter => [1, 2, 3], :red => ReflectionSubgroup(CoxeterGroup("A", 3, "A", 1), 1:3), :AuAction => ExtendedReflectionGroup(ReflectionSubgroup(CoxeterGroup("A", 3, "A", 1), 1:3), #= none:185 =# @perm_str("(1,3)(4,11)"))), Dict{Symbol, Any}(:name => "4A_1", :succ => ["A2+A1"], :dynkin => [0, 1, 0, 0, 0, 0, 1], :Au => Z(gcd(2, p - 1)), :balacarter => [1, 2, 5, 7], :red => CoxeterGroup("C", 3)), Dict{Symbol, Any}(:name => "A_2", :succ => ["A2+A1"], :dynkin => [2, 0, 0, 0, 0, 0, 0], :Au => Z(2), :balacarter => [1, 3], :red => CoxeterGroup("A", 5), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 5), #= none:190 =# @perm_str("(1,5)(2,4)"))), Dict{Symbol, Any}(:name => "3A_1''", :succ => ["4A1"], :dynkin => [0, 0, 0, 0, 0, 0, 2], :Au => Z(gcd(2, p - 1)), :balacarter => [2, 5, 7], :red => CoxeterGroup("F", 4)), Dict{Symbol, Any}(:name => "3A_1'", :succ => ["4A1", "A2"], :dynkin => [0, 0, 1, 0, 0, 0, 0], :balacarter => [1, 2, 5], :red => CoxeterGroup("C", 3, "A", 1)), Dict{Symbol, Any}(:name => "2A_1", :succ => ["3A1''", "3A1'"], :dynkin => [0, 0, 0, 0, 0, 1, 0], :balacarter => [1, 2], :red => CoxeterGroup("B", 4, "A", 1)), Dict{Symbol, Any}(:name => "A_1", :succ => ["2A1"], :dynkin => [1, 0, 0, 0, 0, 0, 0], :balacarter => [1], :red => CoxeterGroup("D", 6)), Dict{Symbol, Any}(:name => "1", :succ => ["A1"], :dynkin => [0, 0, 0, 0, 0, 0, 0], :balacarter => [], :red => CoxeterGroup("E", 7))], :springerSeries => [Dict{Symbol, Any}(:relgroup => CoxeterGroup("E", 7), :levi => [], :Z => [1], :locsys => [[1, 2], [45, 1], [44, 1], [2, 2], [39, 2], [8, 2], [5, 2], [40, 1], [41, 2], [4, 1], [3, 2], [43, 1], [29, 1], [12, 2], [7, 2], [42, 1], [40, 2], [5, 4], [33, 1], [18, 2], [22, 2], [27, 1], [38, 1], [6, 1], [9, 1], [36, 2], [20, 2], [24, 1], [6, 2], [38, 2], [10, 2], [34, 1], [15, 1], [28, 2], [37, 1], [8, 4], [32, 2], [13, 1], [11, 2], [35, 1], [19, 1], [25, 2], [30, 2], [16, 1], [29, 2], [12, 4], [14, 2], [31, 1], [29, 3], [12, 6], [26, 1], [21, 1], [27, 2], [17, 2], [15, 2], [28, 4], [21, 2], [26, 2], [23, 1], [23, 2]]), Dict{Symbol, Any}(:levi => [2, 5, 7], :relgroup => CoxeterGroup("F", 4), :Z => [-1], :locsys => [[1, 1], [5, 3], [36, 1], [41, 1], [2, 1], [39, 1], [10, 1], [28, 3], [17, 1], [7, 1], [11, 1], [22, 1], [28, 1], [18, 1], [12, 3], [12, 5], [3, 1], [8, 1], [25, 1], [32, 1], [5, 1], [30, 1], [8, 3], [20, 1], [14, 1]]), Dict{Symbol, Any}(:relgroup => Z(1), :levi => [1, 2, 3, 4, 5, 6, 7], :Z => [-1], :locsys => [[12, 1]])])
        if p == 2
            push!(uc[:classes], Dict{Symbol, Any}(:name => "(A_3{+}A_2)_2", :succ => ["A3+A2"], :red => CoxeterGroup("A", 1, "A", 1), :dimBu => 15))
            push!((class("(A_3{+}A_1)'"))[:succ], "(A3+A2)2")
            c = class("A_6")
            c[:red] = Torus(1)
            c[:dimBu] = 6
            delete!(c, :dynkin)
            c[:AuAction] = ExtendedReflectionGroup(Torus(1), [[-1]])
            c = class("A_3{+}A_2")
            c[:red] = Z(2)
            c[:dimBu] = 14
            delete!(c, :dynkin)
            delete!(c, :AuAction)
            ((uc[:springerSeries])[1])[:locsys] = [[1, 1], [45, 1], [44, 1], [2, 2], [39, 1], [9, 1], [5, 1], [40, 1], [41, 1], [4, 2], [3, 2], [43, 1], [29, 1], [12, 1], [7, 2], [42, 1], [40, 2], [5, 2], [33, 1], [18, 1], [22, 2], [46, 1], [38, 1], [6, 1], [9, 2], [36, 1], [20, 1], [24, 2], [6, 2], [38, 2], [10, 2], [34, 1], [15, 1], [28, 1], [37, 1], [8, 1], [32, 1], [13, 2], [11, 2], [35, 1], [19, 1], [25, 1], [30, 1], [16, 1], [29, 2], [12, 2], [14, 1], [31, 1], [29, 3], [12, 3], [26, 1], [21, 1], [27, 1], [17, 1], [15, 2], [28, 2], [21, 2], [26, 2], [23, 1], [23, 2]]
            (uc[:springerSeries])[2:4] = [Dict{Symbol, Any}(:relgroup => CoxeterGroup("C", 3), :levi => [2, 3, 4, 5], :Z => [1], :locsys => [[22, 1], [11, 1], [13, 1], [24, 1], [7, 1], [4, 1], [3, 1], [10, 1], [2, 1], [1, 3]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:7, :Z => [1], :locsys => [[1, 2]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:7, :Z => [1], :locsys => [[1, 4]])]
        elseif p == 3
            (((uc[:springerSeries])[1])[:locsys])[1] = [1, 1]
            (((uc[:springerSeries])[2])[:locsys])[1] = [1, 4]
            uc[:springerSeries] = Append(uc[:springerSeries], [Dict{Symbol, Any}(:relgroup => CoxeterGroup("A", 1), :Z => [1], :levi => 1:6, :locsys => [[4, 2], [1, 3]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup("A", 1), :Z => [1], :levi => 1:6, :locsys => [[4, 3], [1, 5]])])
            for c = [2, 6]
                push!(uc[:springerSeries], Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :Z => [-1], :levi => 1:7, :locsys => [[1, c]]))
            end
        end
        uc[:orderClasses] = map((c->begin
                        map((n->begin
                                    PositionProperty(uc[:classes], (c->begin
                                                (UnipotentClassOps[:Name])(c) == n
                                            end))
                                end), c[:succ])
                    end), uc[:classes])
        for c = uc[:classes]
            delete!(c, :succ)
            if !(haskey(c, :red))
                c[:red] = Z(1)
            end
            if !(haskey(c, :Au))
                c[:Au] = Z(1)
            end
            if !(haskey(c, :AuAction))
                c[:AuAction] = ExtendedReflectionGroup(c[:red], map((x->begin
                                    IdentityMat((c[:red])[:rank])
                                end), (c[:Au])[:generators]))
            end
        end
        return uc
    end)
chevieset(:E7, :KLeftCellRepresentatives, [Dict{Symbol, Any}(:character => [1], :reps => [], :duflo => [1, 2, 3, 4, 5, 6, 7]), Dict{Symbol, Any}(:character => [2], :reps => [], :duflo => [64, 65, 66, 67, 68, 69, 70]), Dict{Symbol, Any}(:character => [4], :reps => [], :duflo => [64, 2, 8, 4, 5, 6, 7]), Dict{Symbol, Any}(:character => [3], :reps => [], :duflo => [1, 65, 71, 67, 68, 69, 70]), Dict{Symbol, Any}(:character => [10], :reps => [], :duflo => [6, 2, 5, 4, 3, 1, 126]), Dict{Symbol, Any}(:character => [9], :reps => [], :duflo => [69, 65, 68, 67, 66, 64, 63]), Dict{Symbol, Any}(:character => [11], :reps => [], :duflo => [100, 5, 3, 4, 2, 27, 7]), Dict{Symbol, Any}(:character => [12], :reps => [], :duflo => [37, 68, 66, 67, 65, 90, 70]), Dict{Symbol, Any}(:character => [18, 7], :reps => [[31, 102, 88, 44, 77, 21, 6]], :duflo => [94, 39, 3, 4, 5, 6, 90]), Dict{Symbol, Any}(:character => [17, 8], :reps => [[63, 69, 83, 68, 67, 66, 93]], :duflo => [47, 67, 94, 65, 84, 69, 52]), Dict{Symbol, Any}(:character => [18, 15], :reps => [[115, 7, 100, 42, 5, 4, 2], [52, 110, 111, 51, 109, 50, 2]], :duflo => [126, 7, 37, 6, 5, 4, 2]), Dict{Symbol, Any}(:character => [17, 16], :reps => [[52, 110, 69, 68, 67, 65, 53], [63, 70, 100, 69, 68, 67, 65]], :duflo => [62, 65, 66, 67, 68, 69, 70]), Dict{Symbol, Any}(:character => [28], :reps => [], :duflo => [100, 2, 3, 4, 5, 103, 70]), Dict{Symbol, Any}(:character => [27], :reps => [], :duflo => [37, 65, 66, 67, 68, 40, 7]), Dict{Symbol, Any}(:character => [25], :reps => [[97, 93, 91, 56, 89, 43, 101]], :duflo => [116, 10, 58, 120, 18, 51, 108]), Dict{Symbol, Any}(:character => [26], :reps => [[76, 73, 58, 65, 81, 71, 108]], :duflo => [53, 73, 121, 57, 81, 114, 45]), Dict{Symbol, Any}(:character => [25], :reps => [[50, 111, 109, 51, 110, 58, 112]], :duflo => [113, 48, 4, 3, 23, 121, 20]), Dict{Symbol, Any}(:character => [26], :reps => [[70, 62, 86, 66, 67, 68, 83]], :duflo => [50, 111, 67, 66, 86, 58, 83]), Dict{Symbol, Any}(:character => [29, 6], :reps => [[91, 5, 64, 14, 2, 25, 70], [28, 84, 79, 26, 83, 44, 70]], :duflo => [64, 5, 32, 79, 2, 25, 70]), Dict{Symbol, Any}(:character => [30, 5], :reps => [[76, 73, 84, 65, 81, 38, 45], [91, 48, 76, 68, 77, 65, 81]], :duflo => [28, 65, 100, 26, 68, 107, 7]), Dict{Symbol, Any}(:character => [31], :reps => [], :duflo => [108, 2, 5, 4, 3, 52, 126]), Dict{Symbol, Any}(:character => [32], :reps => [], :duflo => [45, 65, 68, 67, 66, 115, 63]), Dict{Symbol, Any}(:character => [38], :reps => [], :duflo => [116, 3, 2, 4, 5, 6, 112]), Dict{Symbol, Any}(:character => [37], :reps => [], :duflo => [53, 66, 65, 67, 68, 69, 49]), Dict{Symbol, Any}(:character => [36], :reps => [[43, 118, 101, 57, 117, 56, 93]], :duflo => [122, 33, 5, 4, 3, 30, 119]), Dict{Symbol, Any}(:character => [35], :reps => [[94, 61, 65, 67, 68, 69, 100]], :duflo => [59, 96, 68, 67, 66, 93, 56]), Dict{Symbol, Any}(:character => [36], :reps => [[28, 84, 79, 48, 88, 83, 38]], :duflo => [117, 8, 56, 102, 13, 43, 101]), Dict{Symbol, Any}(:character => [35], :reps => [[63, 81, 97, 65, 73, 68, 45]], :duflo => [54, 71, 119, 39, 76, 106, 38]), Dict{Symbol, Any}(:character => [39], :reps => [], :duflo => [125, 2, 3, 4, 5, 13, 70]), Dict{Symbol, Any}(:character => [40], :reps => [], :duflo => [62, 65, 66, 67, 68, 76, 7]), Dict{Symbol, Any}(:character => [42], :reps => [[110, 115, 74, 61, 72, 87, 89]], :duflo => [121, 28, 47, 117, 48, 89, 46]), Dict{Symbol, Any}(:character => [41], :reps => [[80, 79, 102, 60, 75, 78, 88]], :duflo => [58, 91, 110, 54, 111, 26, 109]), Dict{Symbol, Any}(:character => [41], :reps => [[30, 98, 27, 64, 94, 54, 74]], :duflo => [73, 34, 41, 107, 38, 69, 74]), Dict{Symbol, Any}(:character => [42], :reps => [[91, 87, 82, 83, 63, 84, 86]], :duflo => [10, 97, 104, 44, 101, 6, 11]), Dict{Symbol, Any}(:character => [29, 24], :reps => [[20, 104, 77, 54, 114, 55, 115]], :duflo => [94, 8, 36, 4, 5, 6, 115]), Dict{Symbol, Any}(:character => [30, 23], :reps => [[108, 63, 69, 84, 65, 67, 66]], :duflo => [27, 83, 69, 68, 67, 66, 62]), Dict{Symbol, Any}(:character => [53], :reps => [[58, 91, 86, 71, 88, 59, 87]], :duflo => [123, 24, 23, 98, 28, 74, 25]), Dict{Symbol, Any}(:character => [54], :reps => [[51, 79, 80, 76, 49, 75, 78]], :duflo => [60, 87, 86, 35, 91, 11, 88]), Dict{Symbol, Any}(:character => [53], :reps => [[91, 93, 69, 84, 43, 47, 83]], :duflo => [102, 45, 55, 125, 53, 86, 84]), Dict{Symbol, Any}(:character => [54], :reps => [[55, 45, 102, 80, 86, 53, 78]], :duflo => [39, 108, 118, 62, 116, 23, 21]), Dict{Symbol, Any}(:character => [58, 22], :reps => [[61, 84, 91, 69, 70, 31, 20], [61, 84, 91, 69, 70, 47, 83]], :duflo => [64, 59, 32, 124, 58, 105, 70]), Dict{Symbol, Any}(:character => [57, 21], :reps => [[55, 56, 82, 83, 80, 86, 43], [55, 80, 71, 93, 56, 78, 106]], :duflo => [1, 122, 95, 61, 121, 42, 7]), Dict{Symbol, Any}(:character => [55, 33], :reps => [[102, 77, 58, 92, 88, 59, 106]], :duflo => [84, 39, 5, 4, 3, 125, 53]), Dict{Symbol, Any}(:character => [56, 34], :reps => [[93, 54, 66, 67, 68, 83, 53]], :duflo => [21, 102, 68, 67, 66, 62, 116]), Dict{Symbol, Any}(:character => [55, 44], :reps => [[52, 50, 96, 74, 110, 56, 72], [96, 113, 88, 57, 110, 56, 72]], :duflo => [126, 18, 54, 88, 13, 16, 72]), Dict{Symbol, Any}(:character => [56, 43], :reps => [[53, 93, 96, 73, 68, 59, 81], [65, 76, 73, 106, 61, 108, 51]], :duflo => [62, 68, 91, 16, 65, 88, 7]), Dict{Symbol, Any}(:character => [50, 47, 20], :reps => [[27, 10, 84, 48, 88, 83, 103], [115, 84, 57, 104, 56, 83, 103], [30, 96, 37, 91, 97, 57, 5], [93, 96, 56, 91, 97, 57, 5], [100, 96, 93, 58, 98, 97, 59]], :duflo => [115, 2, 63, 119, 7, 35, 5]), Dict{Symbol, Any}(:character => [49, 48, 19], :reps => [[49, 46, 69, 68, 73, 65, 97], [112, 68, 62, 73, 65, 90, 70], [73, 58, 89, 69, 70, 103, 59], [56, 96, 93, 73, 68, 40, 34], [93, 69, 73, 89, 63, 97, 103]], :duflo => [49, 70, 118, 51, 68, 73, 65]), Dict{Symbol, Any}(:character => [57, 52], :reps => [[110, 4, 86, 60, 108, 64, 87]], :duflo => [86, 36, 33, 4, 5, 111, 87]), Dict{Symbol, Any}(:character => [58, 51], :reps => [[43, 105, 103, 62, 114, 67, 65]], :duflo => [1, 68, 71, 67, 65, 53, 7]), Dict{Symbol, Any}(:character => [50, 47, 46], :reps => [[118, 83, 57, 88, 48, 84, 86], [48, 46, 95, 75, 110, 57, 2], [48, 109, 95, 76, 57, 81, 23], [95, 109, 82, 51, 110, 57, 2], [95, 109, 82, 59, 81, 110, 58]], :duflo => [126, 5, 55, 4, 2, 93, 7]), Dict{Symbol, Any}(:character => [49, 48, 45], :reps => [[100, 70, 62, 87, 65, 67, 68], [49, 53, 87, 65, 67, 68, 110], [50, 111, 67, 66, 86, 49, 20], [112, 65, 61, 67, 68, 105, 70], [67, 70, 66, 106, 59, 112, 58]], :duflo => [62, 65, 66, 81, 70, 19, 68]), Dict{Symbol, Any}(:character => [50, 46, 46, 14], :reps => [[94, 81, 55, 71, 93, 44, 5], [55, 81, 96, 70, 44, 77, 21], [33, 99, 71, 81, 57, 107, 48], [96, 81, 94, 57, 77, 93, 48]], :duflo => [118, 2, 49, 14, 5, 106, 70]), Dict{Symbol, Any}(:character => [49, 45, 45, 13], :reps => [[23, 99, 54, 67, 68, 83, 87], [86, 99, 61, 67, 68, 83, 87], [7, 66, 50, 67, 68, 83, 112], [104, 60, 84, 65, 81, 66, 42]], :duflo => [55, 65, 112, 77, 68, 43, 7]), Dict{Symbol, Any}(:character => [60, 59], :reps => [[106, 69, 73, 57, 88, 71, 72], [74, 100, 96, 63, 97, 72, 87]], :duflo => [106, 37, 33, 105, 35, 72, 44]), Dict{Symbol, Any}(:character => [60, 59], :reps => [[73, 34, 41, 70, 69, 74, 83], [90, 98, 93, 61, 74, 83, 94]], :duflo => [93, 35, 52, 120, 54, 74, 83])])
chevieset(:E8, :ReflectionDegrees, [2, 8, 12, 14, 18, 20, 24, 30])
chevieset(:E8, :Size, 696729600)
chevieset(:E8, :GeneratingRoots, [[1, -1, -1, -1, -1, -1, -1, 1] // 2, [1, 1, 0, 0, 0, 0, 0, 0], [-1, 1, 0, 0, 0, 0, 0, 0], [0, -1, 1, 0, 0, 0, 0, 0], [0, 0, -1, 1, 0, 0, 0, 0], [0, 0, 0, -1, 1, 0, 0, 0], [0, 0, 0, 0, -1, 1, 0, 0], [0, 0, 0, 0, 0, -1, 1, 0]])
chevieset(:E8, :NrConjugacyClasses, 112)
chevieset(:E8, :WordsClassRepresentatives, map((x->begin
                Replace(x, [0], 1:8)
            end), [[], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5], [1, 6], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 6, 5, 4, 2, 3, 4, 5, 6, 7, 6, 5, 4, 2, 3, 4, 5, 6, 7], [2, 3, 1, 4, 2, 3, 1, 4, 5, 4, 2, 3, 4, 5, 6, 5, 4, 2, 3, 4, 5, 7, 6, 5, 4, 8, 7, 6, 0, 0, 0, 0], [2, 3, 5, 7], [6, 7], [1, 2, 3, 1, 4, 2, 3, 1, 4, 3, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 3, 7, 6, 5, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 2, 3, 4, 3, 1, 5, 4, 2, 3, 4, 5, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 6, 5], [3, 1, 4, 3, 1, 5, 4, 2, 3, 1, 4, 3, 5, 4, 6, 5, 7, 6, 0, 0, 0], [2, 4, 7, 8], [1, 2, 3, 1, 4, 3, 1, 5, 4, 3, 1, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 3, 7, 6, 5, 4, 0], [2, 4, 2, 3, 4, 5], [1, 2, 3, 1, 4, 2, 3, 1, 4, 3, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 6, 7, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 8, 7, 6, 5, 0, 0], [2, 3, 4, 2, 3, 4, 6, 5, 7, 6, 5, 4, 2, 3, 4, 5], [3, 7, 6, 8], [1, 2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 6, 0, 0, 0], [1, 4, 3, 7, 6, 8], [3, 5, 4, 6], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 6, 5, 4, 2, 3, 4, 5, 6, 7, 6, 5, 4, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 8, 7], [5, 4, 2, 3], [2, 3, 1, 4, 2, 3, 1, 5, 4, 3, 1, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 7, 6, 5, 0, 0], [1, 4, 5, 7], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 0, 0], [3, 4, 2, 3, 5, 4, 2, 3, 1, 4, 5, 6], [4, 3, 5, 4, 2, 3, 4, 5, 6, 5, 4, 2, 3, 4, 5, 6, 7, 6, 5, 4, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 3, 1, 7, 8], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 1, 4, 5, 6], [2, 5, 4, 3, 8, 7], [2, 3, 1, 5, 7, 8], [2, 5, 4, 6, 5, 4, 2, 3, 4, 7], [5, 4, 6, 5, 4, 2, 3, 7, 6, 5, 4, 2, 3, 8, 7, 6, 5, 4, 2, 3, 1, 4], [1, 4, 2, 6, 5, 7], [2, 5, 4, 6, 8, 7], [3, 4, 2, 3, 5, 4, 3, 6, 5, 4, 0], [2, 3, 5, 4, 6, 8], [2, 4, 2, 3, 4, 5, 6, 7], [3, 4, 3, 5, 4, 2, 3, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 3, 7, 6, 5, 4, 0], [3, 1, 4, 2, 5, 4, 2, 6], [2, 3, 4, 2, 3, 4, 5, 4, 0], [1, 3, 4, 2, 3, 1, 4, 3, 5, 4, 6, 5, 0, 0], [2, 3, 4, 3, 5, 4, 0], [1, 2, 6, 5, 7, 8], [2, 3, 5, 4, 7, 6], [4, 3, 5, 4, 0], [3, 4, 2, 3, 4, 5, 7, 8], [1, 3, 1, 4, 5, 4, 3, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 7, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 3, 7, 6, 5, 4, 0], [1, 2, 3, 4, 2, 3, 1, 4, 3, 5, 4, 2, 3, 4, 5, 6, 5, 4, 0], [1, 2, 3, 1, 4, 2, 5, 4, 2, 3, 4, 6, 5, 4, 0], [1, 4, 2, 3, 6, 5], [1, 2, 3, 1, 4, 2, 3, 1, 4, 3, 5, 4, 3, 6, 5, 4, 0], [1, 2, 3, 5, 7, 6], [1, 2, 3, 4, 2, 5, 4, 8], [3, 4, 0], [3, 1, 8, 7, 6, 5], [2, 4, 2, 3, 5, 4, 2, 3, 4, 6, 5, 4, 2, 3, 7, 6, 5, 4, 0], [0, 0], [0], [3], [1, 2, 3, 1, 4, 2, 3, 1, 4, 3, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 5, 4, 3, 1, 7, 6, 5, 4, 2, 3, 4, 5, 6, 7], [1, 6, 8], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 7], [1, 4, 3], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 6, 5, 4, 2, 3, 4, 5, 6, 7, 6, 5, 4, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 6], [3, 5, 4, 2, 3, 4, 8], [2, 4, 2, 3, 4, 5, 4, 2, 3, 1, 4, 3, 5, 6, 5, 4, 2, 3, 4, 5, 6, 7, 6, 5, 4, 2, 3, 1, 4, 3, 5, 6, 7], [2, 3, 4, 5, 4, 2, 3, 4, 5, 7, 6, 8, 7, 6, 5, 4, 2, 3, 4, 5, 6], [1, 2, 5, 4, 8], [1, 4, 2], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 6, 5, 4, 2, 3, 4, 5, 6, 7, 6, 5, 4, 2, 3, 1, 4, 5, 6, 7], [3, 1, 4, 3, 1, 5, 4, 2, 3, 1, 4, 5, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 2, 6, 8], [1, 2, 3, 4, 2, 3, 5, 4, 2, 3, 1, 4, 6, 5, 4, 2, 3, 4, 5, 6, 7], [2, 3, 1, 5, 8], [5, 4, 2, 3, 7], [3, 1, 6, 5, 8], [2, 3, 4, 2, 3, 1, 4, 5, 4, 2, 6, 5, 4, 2, 3, 1, 4, 3, 5, 4, 6, 5, 7], [1, 2, 3, 1, 4, 2, 3, 5, 4, 2, 3, 1, 4, 3, 5, 4, 6, 5, 4, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 2, 6, 5, 4, 2, 3, 4, 5, 8], [2, 5, 4, 7, 6], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 1, 4, 5, 6, 8], [2, 3, 1, 5, 4], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 4, 5, 7, 6, 8], [2, 3, 5, 6, 5, 4, 2, 3, 4, 7, 6, 5, 4, 2, 3, 1, 4], [1, 4, 3, 6, 5, 8, 7], [1, 2, 5, 4, 6], [1, 2, 3, 4, 2, 3, 4, 6, 5, 4, 2, 3, 4, 5, 7], [2, 3, 4, 2, 3, 4, 5, 4, 2, 3, 1, 4, 5, 8, 7], [4, 2, 5, 4, 2, 3, 1], [4, 2, 3, 7, 6], [2, 3, 4, 2, 3, 4, 5, 7, 6, 5, 4, 2, 3, 4, 5, 6, 8], [1, 4, 2, 5, 4, 2, 3, 7, 8], [6, 5, 4, 2, 3, 7, 8], [1, 4, 2, 3, 6, 5, 8], [4, 2, 5, 4, 3, 1, 6, 5, 7, 6, 5], [1, 2, 4, 6, 5, 8, 7], [3, 1, 4, 2, 5, 4, 2, 6, 7], [3, 1, 5, 4, 2, 3, 4, 6, 8], [2, 6, 5, 4, 3, 1, 7], [1, 4, 2, 3, 6, 8, 7], [2, 5, 4, 2, 3, 4, 7, 6, 8], [4, 2, 3, 1, 5, 7, 8], [4, 3, 5, 4, 2, 3, 4, 5, 6, 8, 7], [2, 3, 1, 6, 5, 8, 7], [2, 4, 2, 3, 1, 6, 5, 4, 2, 3, 4, 5, 7]]))
chevieset(:E8, :ClassNames, ["A_0", "8A_1", "4A_1'", "2A_1", "6A_1", "2D_4(a_1)", "4A_1''", "A_2", "D_4+4A_1", "4A_2", "E_8(a_8)", "3A_2", "E_7(a_4)+A_1", "2A_2", "2D_4", "D_4(a_1)", "2A_3+2A_1", "2A_3'", "A_3+A_1", "A_3+3A_1", "D_8(a_3)", "2A_3''", "A_4", "D_6+2A_1", "2A_4", "E_8(a_6)", "A_2+4A_1", "D_4", "E_6(a_2)+A_2", "A_2+2A_1", "D_4+2A_1", "E_8(a_3)", "E_6(a_2)", "A_5+A_2+A_1", "A_5+A_1'", "D_4+A_2", "2A_2+2A_1", "D_6(a_2)", "D_8(a_1)", "A_5+A_1''", "A_6", "D_8", "D_5+A_1", "D_6(a_1)", "A_7+A_1", "E_6(a_1)", "E_7+A_1", "A_8", "E_8(a_4)", "A_4+2A_1", "D_6", "E_8(a_2)", "D_4(a_1)+A_2", "D_5(a_1)+A_3", "E_6+A_2", "E_8(a_7)", "E_6", "E_7(a_2)+A_1", "A_3+A_2+A_1", "D_5(a_1)+A_1", "E_8(a_1)", "A_4+A_2", "D_8(a_2)", "E_8(a_5)", "E_8", "A_1", "7A_1", "3A_1", "5A_1", "A_3", "A_3+4A_1", "A_3+2A_1'", "D_4(a_1)+A_1", "2A_3+A_1", "D_4(a_1)+A_3", "A_3+2A_1''", "A_2+A_1", "D_4+3A_1", "3A_2+A_1", "E_7(a_4)", "A_2+3A_1", "D_4+A_1", "2A_2+A_1", "D_6(a_2)+A_1", "A_5+A_2", "E_6(a_2)+A_1", "A_5", "A_5+2A_1", "D_5", "D_5+2A_1", "A_7'", "A_7''", "A_4+A_1", "D_6+A_1", "A_3+A_2+2A_1", "D_5(a_1)", "A_3+A_2", "D_4+A_3", "D_5(a_1)+A_2", "D_7", "E_6+A_1", "E_7(a_2)", "A_6+A_1", "E_7(a_1)", "E_6(a_1)+A_1", "E_7", "A_4+A_3", "D_7(a_1)", "D_5+A_2", "D_7(a_2)", "A_4+A_2+A_1", "E_7(a_3)"])
chevieset(:E8, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:E8, :WordsClassRepresentatives), :classnames => chevieget(:E8, :ClassNames), :classparams => chevieget(:E8, :ClassNames), :orders => [1, 2, 2, 2, 2, 4, 2, 3, 6, 3, 6, 3, 6, 3, 6, 4, 4, 4, 4, 4, 8, 4, 5, 10, 5, 10, 6, 6, 6, 6, 6, 12, 6, 6, 6, 6, 6, 6, 12, 6, 7, 14, 8, 8, 8, 9, 18, 9, 18, 10, 10, 20, 12, 12, 12, 12, 12, 12, 12, 12, 24, 15, 30, 15, 30, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 18, 18, 20, 20, 24, 24, 30, 30], :classes => [1, 1, 3150, 3780, 3780, 15120, 113400, 2240, 2240, 4480, 4480, 89600, 89600, 268800, 268800, 37800, 37800, 680400, 907200, 907200, 3628800, 5443200, 580608, 580608, 1161216, 1161216, 100800, 100800, 403200, 604800, 604800, 2419200, 806400, 806400, 1612800, 3225600, 2419200, 2419200, 9676800, 14515200, 24883200, 24883200, 10886400, 5443200, 5443200, 6451200, 6451200, 12902400, 12902400, 8709120, 8709120, 34836480, 1209600, 1209600, 2419200, 2419200, 4838400, 4838400, 7257600, 7257600, 29030400, 11612160, 11612160, 23224320, 23224320, 120, 120, 37800, 37800, 45360, 45360, 151200, 453600, 453600, 907200, 2721600, 80640, 80640, 268800, 268800, 1209600, 1209600, 1612800, 1612800, 2419200, 2419200, 4838400, 4838400, 1814400, 1814400, 10886400, 43545600, 5806080, 5806080, 1209600, 1209600, 3628800, 3628800, 9676800, 29030400, 14515200, 14515200, 24883200, 24883200, 19353600, 19353600, 17418240, 17418240, 14515200, 14515200, 11612160, 11612160]))
chevieset(:E8, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 2], [1, 3]], [1:3, [1, 2, 5], [1, 3, 4]], [1:4, [1, 2, 3, 5], [1, 2, 4, 5], [1, 2, 5, 7], [1, 3, 5, 6], 2:5], [1:5, [1, 2, 3, 4, 6], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 4, 5, 7], [1, 3, 4, 5, 6], [1, 3, 4, 6, 7], [2, 3, 4, 5, 7]], [1:6, [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 8], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 8], [1, 2, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7], [1, 3, 4, 6, 7, 8], 2:7, [2, 3, 4, 5, 7, 8]], [1:7, [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 7, 8], [1, 2, 3, 4, 6, 7, 8], [1, 2, 3, 5, 6, 7, 8], [1, 2, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7, 8], 2:8], [1:8]]
        return t[s + 1]
    end)
chevieset(:E8, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 120], [28, 8], [28, 68], [35, 2], [35, 74], [70, 32], [50, 8], [50, 56], [84, 4], [84, 64], [168, 24], [175, 12], [175, 36], [210, 4], [210, 52], [420, 20], [300, 8], [300, 44], [350, 14], [350, 38], [525, 12], [525, 36], [567, 6], [567, 46], [1134, 20], [700, 16], [700, 28], [700, 6], [700, 42], [1400, 20], [840, 14], [840, 26], [1680, 22], [972, 12], [972, 32], [1050, 10], [1050, 34], [2100, 20], [1344, 8], [1344, 38], [2688, 20], [1400, 8], [1400, 32], [1575, 10], [1575, 34], [3150, 18], [2100, 16], [2100, 28], [4200, 18], [2240, 10], [2240, 28], [4480, 16], [2268, 10], [2268, 30], [4536, 18], [2835, 14], [2835, 22], [5670, 18], [3200, 16], [3200, 22], [4096, 12], [4096, 26], [4200, 12], [4200, 24], [6075, 14], [6075, 22], [8, 1], [8, 91], [56, 19], [56, 49], [112, 3], [112, 63], [160, 7], [160, 55], [448, 25], [400, 7], [400, 43], [448, 9], [448, 39], [560, 5], [560, 47], [1344, 19], [840, 13], [840, 31], [1008, 9], [1008, 39], [2016, 19], [1296, 13], [1296, 33], [1400, 11], [1400, 29], [1400, 7], [1400, 37], [2400, 17], [2400, 23], [2800, 13], [2800, 25], [5600, 19], [3240, 9], [3240, 31], [3360, 13], [3360, 25], [7168, 17], [4096, 11], [4096, 27], [4200, 15], [4200, 21], [4536, 13], [4536, 23], [5600, 15], [5600, 21]], :frame => ["1_x", "1_x'", "28_x", "28_x'", "35_x", "35_x'", "70_y", "50_x", "50_x'", "84_x", "84_x'", "168_y", "175_x", "175_x'", "210_x", "210_x'", "420_y", "300_x", "300_x'", "350_x", "350_x'", "525_x", "525_x'", "567_x", "567_x'", "1134_y", "700_xx", "700_xx'", "700_x", "700_x'", "1400_y", "840_x", "840_x'", "1680_y", "972_x", "972_x'", "1050_x", "1050_x'", "2100_y", "1344_x", "1344_x'", "2688_y", "1400_x", "1400_x'", "1575_x", "1575_x'", "3150_y", "2100_x", "2100_x'", "4200_y", "2240_x", "2240_x'", "4480_y", "2268_x", "2268_x'", "4536_y", "2835_x", "2835_x'", "5670_y", "3200_x", "3200_x'", "4096_x", "4096_x'", "4200_x", "4200_x'", "6075_x", "6075_x'", "8_z", "8_z'", "56_z", "56_z'", "112_z", "112_z'", "160_z", "160_z'", "448_w", "400_z", "400_z'", "448_z", "448_z'", "560_z", "560_z'", "1344_w", "840_z", "840_z'", "1008_z", "1008_z'", "2016_w", "1296_z", "1296_z'", "1400_zz", "1400_zz'", "1400_z", "1400_z'", "2400_z", "2400_z'", "2800_z", "2800_z'", "5600_w", "3240_z", "3240_z'", "3360_z", "3360_z'", "7168_w", "4096_z", "4096_z'", "4200_z", "4200_z'", "4536_z", "4536_z'", "5600_z", "5600_z'"], :opdam => #= none:40 =# @perm_str("( 62,105)( 63,106)"), :extRefl => [1, 68, 3, 70, 7, 71, 4, 69, 2])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:E8, :cyclestructure, [[], [120], [108], [90], [118], [nothing, nothing, 60], [116], [nothing, 56], [36, nothing, nothing, nothing, 28], [nothing, 80], [nothing, nothing, nothing, nothing, 40], [nothing, 78], [3, nothing, nothing, nothing, 39], [nothing, 76], [6, nothing, nothing, nothing, 38], [nothing, nothing, 54], [12, nothing, 54], [10, nothing, 54], [23, nothing, 45], [29, nothing, 45], [nothing, nothing, nothing, nothing, nothing, nothing, 30], [4, nothing, 58], [nothing, nothing, nothing, 44], [10, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 22], [nothing, nothing, nothing, 48], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 24], [36, 8, nothing, nothing, 24], [24, nothing, nothing, nothing, 28], [nothing, 8, nothing, nothing, 36], [30, 16, nothing, nothing, 20], [34, nothing, nothing, nothing, 28], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 20], [nothing, 6, nothing, nothing, 36], [3, 8, nothing, nothing, 35], [3, 6, nothing, nothing, 35], [6, 8, nothing, nothing, 34], [6, 20, nothing, nothing, 28], [4, nothing, nothing, nothing, 38], [nothing, nothing, 3, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 19], [5, 2, nothing, nothing, 37], [nothing, nothing, nothing, nothing, nothing, 34], [1, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 17], [11, nothing, nothing, nothing, nothing, nothing, 27], [nothing, nothing, 5, nothing, nothing, nothing, 27], [2, nothing, 5, nothing, nothing, nothing, 27], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, 26], [3, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 13], [nothing, 2, nothing, nothing, nothing, nothing, nothing, 26], [nothing, nothing, nothing, nothing, 1, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 13], [10, nothing, nothing, 12, nothing, nothing, nothing, nothing, 16], [8, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 22], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 12], [nothing, 8, 18, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 12], [nothing, nothing, 18, nothing, 4, nothing, nothing, nothing, nothing, nothing, 12], [nothing, 8, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 18], [nothing, nothing, nothing, nothing, 4, nothing, nothing, nothing, nothing, nothing, 18], [nothing, 6, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 18], [3, nothing, nothing, nothing, 3, nothing, nothing, nothing, nothing, nothing, 18], [5, 4, 15, nothing, 6, nothing, nothing, nothing, nothing, nothing, 10], [5, nothing, 15, nothing, 8, nothing, nothing, nothing, nothing, nothing, 10], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 10], [nothing, 6, nothing, 14, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 10], [1, nothing, nothing, nothing, 3, nothing, nothing, nothing, 7, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 5], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 16], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 8], [57], [119], [107], [117], [10, nothing, 45], [30, nothing, 45], [24, nothing, 45], [9, nothing, 54], [11, nothing, 54], [2, nothing, 59], [28, nothing, 45], [21, 32, nothing, nothing, 12], [35, nothing, nothing, nothing, 28], [3, 42, nothing, nothing, 18], [2, nothing, nothing, nothing, 39], [35, 8, nothing, nothing, 24], [33, nothing, nothing, nothing, 28], [3, 40, nothing, nothing, 18], [5, nothing, nothing, nothing, 38], [2, 8, nothing, nothing, 35], [3, 2, nothing, nothing, 38], [2, 6, nothing, nothing, 35], [6, 2, nothing, nothing, 37], [6, nothing, nothing, nothing, nothing, nothing, 27], [12, nothing, nothing, nothing, nothing, nothing, 27], [1, nothing, 5, nothing, nothing, nothing, 27], [nothing, nothing, 2, nothing, nothing, nothing, 29], [7, nothing, nothing, 24, nothing, nothing, nothing, nothing, 10], [9, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 22], [6, 4, 15, nothing, 6, nothing, nothing, nothing, nothing, nothing, 10], [nothing, nothing, 15, nothing, 8, nothing, nothing, nothing, nothing, nothing, 10], [4, 12, 15, nothing, 2, nothing, nothing, nothing, nothing, nothing, 10], [6, nothing, 15, nothing, 8, nothing, nothing, nothing, nothing, nothing, 10], [nothing, 4, 3, nothing, 8, nothing, nothing, nothing, nothing, nothing, 14], [2, nothing, 2, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 19], [3, 2, nothing, nothing, 2, nothing, nothing, nothing, nothing, nothing, 18], [2, nothing, nothing, nothing, 3, nothing, nothing, nothing, nothing, nothing, 18], [1, nothing, nothing, nothing, nothing, 18, nothing, nothing, nothing, nothing, nothing, nothing, 8], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 17], [3, nothing, nothing, nothing, nothing, nothing, nothing, 14, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 6], [2, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 13], [nothing, nothing, 5, 8, nothing, nothing, nothing, nothing, 2, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 8], [nothing, nothing, 5, nothing, nothing, nothing, nothing, nothing, 6, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 8], [nothing, 4, nothing, nothing, 2, nothing, 9, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 6], [nothing, nothing, nothing, nothing, 4, nothing, 9, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 6], [1, 2, nothing, 6, 2, nothing, nothing, nothing, 4, nothing, nothing, nothing, nothing, 6, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 2], [nothing, nothing, nothing, nothing, 3, nothing, nothing, nothing, 7, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 5]])
chevieset(:E8, :generators, [#= none:3 =# @perm_str("(  1,121)(  3,  9)( 11, 16)( 17, 23)( 19, 24)( 25, 30)( 27, 31)( 32, 37)( 33, 38)( 35, 39)( 40, 45)( 41, 46)( 43, 47)( 48, 52)( 49, 53)( 50, 54)( 55, 59)( 56, 60)( 61, 66)( 62, 67)( 68, 73)( 74, 79)( 93, 97)( 98,101)(102,104)(105,107)(108,109)(110,111)(112,113)(123,129)(131,136)(137,143)(139,144)(145,150)(147,151)(152,157)(153,158)(155,159)(160,165)(161,166)(163,167)(168,172)(169,173)(170,174)(175,179)(176,180)(181,186)(182,187)(188,193)(194,199)(213,217)(218,221)(222,224)(225,227)(228,229)(230,231)(232,233)"), #= none:3 =# @perm_str("(  2,122)(  4, 10)( 11, 17)( 12, 18)( 16, 23)( 19, 25)( 20, 26)( 24, 30)( 27, 33)( 28, 34)( 31, 38)( 35, 41)( 36, 42)( 39, 46)( 43, 50)( 47, 54)( 63, 69)( 70, 75)( 76, 80)( 77, 81)( 82, 85)( 83, 86)( 87, 90)( 88, 91)( 92, 95)( 96,100)(110,112)(111,113)(114,115)(124,130)(131,137)(132,138)(136,143)(139,145)(140,146)(144,150)(147,153)(148,154)(151,158)(155,161)(156,162)(159,166)(163,170)(167,174)(183,189)(190,195)(196,200)(197,201)(202,205)(203,206)(207,210)(208,211)(212,215)(216,220)(230,232)(231,233)(234,235)"), #= none:3 =# @perm_str("(  1,  9)(  3,123)(  4, 11)( 10, 17)( 12, 19)( 18, 25)( 20, 27)( 26, 33)( 28, 35)( 34, 41)( 36, 43)( 37, 44)( 42, 50)( 45, 51)( 52, 57)( 53, 58)( 59, 64)( 60, 65)( 66, 71)( 67, 72)( 73, 78)( 79, 84)( 89, 93)( 94, 98)( 99,102)(103,105)(106,108)(111,114)(113,115)(121,129)(124,131)(130,137)(132,139)(138,145)(140,147)(146,153)(148,155)(154,161)(156,163)(157,164)(162,170)(165,171)(172,177)(173,178)(179,184)(180,185)(186,191)(187,192)(193,198)(199,204)(209,213)(214,218)(219,222)(223,225)(226,228)(231,234)(233,235)"), #= none:3 =# @perm_str("(  2, 10)(  3, 11)(  4,124)(  5, 12)(  9, 16)( 13, 20)( 21, 28)( 25, 32)( 29, 36)( 30, 37)( 33, 40)( 38, 45)( 41, 49)( 46, 53)( 50, 56)( 54, 60)( 57, 63)( 64, 70)( 71, 76)( 72, 77)( 78, 83)( 84, 88)( 85, 89)( 90, 94)( 95, 99)(100,103)(108,110)(109,111)(115,116)(122,130)(123,131)(125,132)(129,136)(133,140)(141,148)(145,152)(149,156)(150,157)(153,160)(158,165)(161,169)(166,173)(170,176)(174,180)(177,183)(184,190)(191,196)(192,197)(198,203)(204,208)(205,209)(210,214)(215,219)(220,223)(228,230)(229,231)(235,236)"), #= none:3 =# @perm_str("(  4, 12)(  5,125)(  6, 13)( 10, 18)( 11, 19)( 14, 21)( 16, 24)( 17, 25)( 22, 29)( 23, 30)( 40, 48)( 45, 52)( 49, 55)( 51, 57)( 53, 59)( 56, 62)( 58, 64)( 60, 67)( 65, 72)( 76, 82)( 80, 85)( 83, 87)( 86, 90)( 88, 92)( 91, 95)(103,106)(105,108)(107,109)(116,117)(124,132)(126,133)(130,138)(131,139)(134,141)(136,144)(137,145)(142,149)(143,150)(160,168)(165,172)(169,175)(171,177)(173,179)(176,182)(178,184)(180,187)(185,192)(196,202)(200,205)(203,207)(206,210)(208,212)(211,215)(223,226)(225,228)(227,229)(236,237)"), #= none:4 =# @perm_str("(  5, 13)(  6,126)(  7, 14)( 12, 20)( 15, 22)( 18, 26)( 19, 27)( 24, 31)( 25, 33)( 30, 38)( 32, 40)( 37, 45)( 44, 51)( 55, 61)( 59, 66)( 62, 68)( 64, 71)( 67, 73)( 70, 76)( 72, 78)( 75, 80)( 77, 83)( 81, 86)( 92, 96)( 95,100)( 99,103)(102,105)(104,107)(117,118)(125,133)(127,134)(132,140)(135,142)(138,146)(139,147)(144,151)(145,153)(150,158)(152,160)(157,165)(164,171)(175,181)(179,186)(182,188)(184,191)(187,193)(190,196)(192,198)(195,200)(197,203)(201,206)(212,216)(215,220)(219,223)(222,225)(224,227)(237,238)"), #= none:4 =# @perm_str("(  6, 14)(  7,127)(  8, 15)( 13, 21)( 20, 28)( 26, 34)( 27, 35)( 31, 39)( 33, 41)( 38, 46)( 40, 49)( 45, 53)( 48, 55)( 51, 58)( 52, 59)( 57, 64)( 63, 70)( 68, 74)( 69, 75)( 73, 79)( 78, 84)( 83, 88)( 86, 91)( 87, 92)( 90, 95)( 94, 99)( 98,102)(101,104)(118,119)(126,134)(128,135)(133,141)(140,148)(146,154)(147,155)(151,159)(153,161)(158,166)(160,169)(165,173)(168,175)(171,178)(172,179)(177,184)(183,190)(188,194)(189,195)(193,199)(198,204)(203,208)(206,211)(207,212)(210,215)(214,219)(218,222)(221,224)(238,239)"), #= none:4 =# @perm_str("(  7, 15)(  8,128)( 14, 22)( 21, 29)( 28, 36)( 34, 42)( 35, 43)( 39, 47)( 41, 50)( 46, 54)( 49, 56)( 53, 60)( 55, 62)( 58, 65)( 59, 67)( 61, 68)( 64, 72)( 66, 73)( 70, 77)( 71, 78)( 75, 81)( 76, 83)( 80, 86)( 82, 87)( 85, 90)( 89, 94)( 93, 98)( 97,101)(119,120)(127,135)(134,142)(141,149)(148,156)(154,162)(155,163)(159,167)(161,170)(166,174)(169,176)(173,180)(175,182)(178,185)(179,187)(181,188)(184,192)(186,193)(190,197)(191,198)(195,201)(196,203)(200,206)(202,207)(205,210)(209,214)(213,218)(217,221)(239,240)")])
chevieset(:E8, :CartanMat, [[2, 0, -1, 0, 0, 0, 0, 0], [0, 2, 0, -1, 0, 0, 0, 0], [-1, 0, 2, -1, 0, 0, 0, 0], [0, -1, -1, 2, -1, 0, 0, 0], [0, 0, 0, -1, 2, -1, 0, 0], [0, 0, 0, 0, -1, 2, -1, 0], [0, 0, 0, 0, 0, -1, 2, -1], [0, 0, 0, 0, 0, 0, -1, 2]])
chevieset(:E8, :PowerMaps, [nothing, [1, 1, 1, 1, 1, 2, 1, 8, 8, 10, 10, 12, 12, 14, 14, 3, 3, 3, 4, 4, 6, 7, 23, 23, 25, 25, 8, 8, 10, 8, 8, 11, 12, 12, 14, 14, 14, 14, 15, 14, 41, 41, 16, 18, 18, 46, 46, 48, 48, 23, 23, 26, 27, 27, 29, 29, 33, 33, 30, 30, 32, 62, 62, 64, 64, 1, 1, 1, 1, 4, 4, 4, 3, 3, 5, 4, 8, 8, 12, 12, 8, 8, 14, 14, 12, 12, 14, 14, 16, 16, 18, 22, 23, 23, 30, 30, 30, 30, 37, 38, 33, 33, 41, 41, 46, 46, 50, 50, 53, 53, 62, 62], [1, 2, 3, 4, 5, 6, 7, 1, 2, 1, 2, 1, 2, 1, 2, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 3, 3, 3, 4, 5, 6, 3, 3, 3, 3, 4, 5, 6, 7, 41, 42, 43, 44, 45, 12, 13, 12, 13, 50, 51, 52, 16, 17, 16, 17, 16, 17, 19, 20, 21, 23, 24, 25, 26, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 66, 67, 66, 67, 68, 69, 66, 67, 68, 69, 68, 69, 89, 90, 91, 92, 93, 94, 72, 72, 70, 71, 72, 75, 73, 74, 103, 104, 79, 80, 107, 108, 89, 90, 93, 94], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 2, 1, 2, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 4, 5, 6, 53, 54, 55, 56, 57, 58, 59, 60, 61, 8, 9, 10, 11, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 66, 67, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 70, 71, 109, 110, 77, 78], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 66, 67, 105, 106, 107, 108, 109, 110, 111, 112]])
chevieset(:E8, :vpolheckeirreducibles, [[[[1], 0], [[1], 120], [[1], 12], [[1], 2], [[1], 30], [[1], 60], [[1], 4], [[1], 2], [[1], 64], [[1], 80], [[1], 40], [[1], 24], [[1], 42], [[1], 4], [[1], 44], [[1], 6], [[1], 66], [[1], 16], [[1], 4], [[1], 14], [[1], 30], [[1], 6], [[1], 4], [[1], 32], [[1], 48], [[1], 24], [[1], 14], [[1], 4], [[1], 44], [[1], 4], [[1], 14], [[1], 20], [[1], 12], [[1], 46], [[1], 14], [[1], 6], [[1], 6], [[1], 10], [[1], 22], [[1], 6], [[1], 6], [[1], 18], [[1], 6], [[1], 8], [[1], 34], [[1], 8], [[1], 16], [[1], 28], [[1], 14], [[1], 6], [[1], 6], [[1], 12], [[1], 8], [[1], 46], [[1], 26], [[1], 22], [[1], 6], [[1], 24], [[1], 6], [[1], 8], [[1], 10], [[1], 6], [[1], 26], [[1], 16], [[1], 8], [[1], 1], [[1], 63], [[1], 3], [[1], 13], [[1], 3], [[1], 31], [[1], 13], [[1], 7], [[1], 33], [[1], 21], [[1], 5], [[1], 3], [[1], 31], [[1], 25], [[1], 21], [[1], 5], [[1], 5], [[1], 5], [[1], 23], [[1], 25], [[1], 13], [[1], 5], [[1], 15], [[1], 5], [[1], 15], [[1], 17], [[1], 7], [[1], 5], [[1], 15], [[1], 15], [[1], 7], [[1], 5], [[1], 17], [[1], 9], [[1], 7], [[1], 7], [[1], 11], [[1], 7], [[1], 9], [[1], 9], [[1], 7], [[1], 7], [[1], 9], [[1], 7], [[1], 11], [[1], 7], [[1], 13]], nothing, [[[28], 0], [[28], 90], [[6, 0, 0, -16, 0, 0, 6], 6], [[1, -12, 15], 0], [[15, 0, 0, 0, 0, -12, 0, 0, 0, 0, 1], 20], [[4], 45], [[6, -16, 6], 2], [[1, -6, 15], 0], [[15, 0, 0, 0, -6, 0, 0, 0, 1], 46], [[10], 60], [[10], 30], [[6, 0, 0, 0, -6, 0, 0, 0, 1], 16], [[1, -6, 6], 30], [[3, -8, 6], 2], [[6, -8, 3], 32], [[2, 0, 0, 6], 3], [[6, 0, 0, 2], 48], [[1, 2, 0, -4, 0, 0, 1], 10], [[2, -8, 6], 2], [[3, 0, 4, -6, 0, -2, 1], 8], [[], 0], [[3, -4, 1], 4], [[1, -4, 6], 2], [[6, 0, -4, 0, 1], 22], [[3], 36], [[3], 18], [[6, 0, 4, -8, 1, -2, 1], 8], [[-4, 6], 3], [[3, -4, 3], 32], [[4, -12, 6], 2], [[3, 0, 0, -6, 0, 0, 1], 8], [[-2], 15], [[2, 0, 2, 0, 1], 8], [[8, -4, 1], 34], [[1, 0, 1, -4, 0, 0, 1], 8], [[2, -4, 1], 4], [[8, -8, 1], 4], [[1], 10], [[2, -1], 16], [[2, -4, 1], 4], [[1, -2, 1], 4], [[], 0], [[1, -4, 1], 4], [[1, 0, 0, 1], 5], [[1, 1], 24], [[1], 8], [[1], 10], [[1], 20], [[1], 10], [[4, -6, 1], 4], [[-2, 1], 5], [[-1], 9], [[2, 1, -2, 1], 5], [[3, -2, 1], 34], [[3, 0, 0, -1], 18], [[3, -1], 16], [[-2, 1], 5], [[1, -2, 1, -1], 16], [[5, -6, 1], 4], [[1, 0, -2, 1], 5], [[], 0], [[3, -4, 1], 4], [[-1, 1], 19], [[], 0], [[], 0], [[-7, 21], 0], [[21, 0, 0, 0, 0, 0, 0, 0, 0, -7], 45], [[3, -15, 10], 1], [[6, 0, 4, -12, 0, -3, 3], 7], [[1, -5, 10], 1], [[10, 0, 0, 0, 1, -5], 21], [[3, 0, 1, -9, 0, 0, 3], 7], [[2, 0, -3, 3], 4], [[3, 2, 0, 0, 0, -3], 23], [[3, 0, 0, -1], 15], [[4, -9, 3], 3], [[2, -10, 10], 1], [[10, 0, -5, 0, 1, -5, 0, 1], 21], [[6, 0, 0, 3, -3, 0, 0, -1], 17], [[3, 0, 0, 2], 15], [[7, -12, 3], 3], [[1, -6, 3], 3], [[5, -9, 3], 3], [[1, -2, 1, 0, -2, 1], 15], [[3, 0, 0, 0, -2], 17], [[2, -1, 1, -1], 9], [[1, -3, 3], 3], [[1, 0, 3, -2, 0, -1], 9], [[-3, 3], 4], [[3, 0, 0, -3], 9], [[1, 0, -1], 12], [[1, -1], 5], [[2, -6, 3], 3], [[1, 0, 0, -2], 9], [[3, 0, 4, -3, 1, -1], 9], [[1, 0, 0, 3], 4], [[3, -6, 3], 3], [[1, 1, 0, -2], 11], [[1, 1, -1], 6], [[-1], 6], [[1, -2], 5], [[-1], 8], [[2, -2], 5], [[], 0], [[-1], 8], [[-1], 6], [[3, -2], 5], [[1], 6], [[2, -2], 5], [[], 0], [[5, -3], 5], [[1, 0, 1], 9]], nothing, [[[35], 0], [[35], 96], [[9, -16, 0, 0, 10], 8], [[1, -12, 22], 0], [[15, 0, 5, -12, 0, 0, 0, 0, 3], 22], [[-5], 48], [[6, -16, 13], 2], [[-7, 21], 1], [[20, 0, -6], 50], [[5], 64], [[5], 32], [[2, 0, -6, 0, 0, 0, 3], 18], [[-4, 3], 33], [[1, -10, 11], 2], [[4, -4, 2], 34], [[-3, 0, 10], 4], [[9, 0, -2], 52], [[-4, 0, 0, 3], 13], [[1, -9, 11], 2], [[8, -7, 0, -2, 4], 10], [[-1], 24], [[1, -6, 4], 4], [[-5, 10], 3], [[5], 24], [[], 0], [[], 0], [[13, -8, 0, -3, 4], 10], [[-4, 10], 3], [[-4, 1], 35], [[3, -13, 12], 2], [[5, -6, 0, 0, 3], 10], [[1], 16], [[-2, 2, 0, 3], 9], [[4, -2, 1], 36], [[2, -5, 0, 0, 3], 10], [[1, -5, 4], 4], [[6, -10, 6], 4], [[-1, 0, 3], 8], [[-2], 17], [[1, -5, 4], 4], [[-3, 3], 5], [[], 0], [[1, -4, 4], 4], [[-2, 0, 3], 6], [[1], 26], [[-1, 0, 3], 6], [[2], 12], [[-1], 22], [[-1], 11], [[3, -7, 5], 4], [[-2, 3], 5], [[], 0], [[-3, -3, 4], 6], [[-2], 37], [[1], 22], [[1], 18], [[-2, 3], 5], [[1], 20], [[3, -8, 5], 4], [[-2, -2, 4], 6], [[-1], 8], [[1, -6, 4], 4], [[-1], 20], [[], 0], [[], 0], [[-7, 28], 0], [[27, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 1], 49], [[3, -15, 17], 1], [[13, -12, 0, -3, 7], 9], [[-6, 15], 2], [[10, 0, 4, -6, 0, 0, 0, 0, 1], 23], [[5, -10, 0, 0, 6], 9], [[-3, -3, 7], 5], [[3, 0, 0, -3, 0, 0, 0, 0, 1], 25], [[-3, 0, -1, 0, 0, 1], 16], [[3, -10, 8], 3], [[1, -11, 16], 1], [[9, 0, 0, -5, 0, 1, 0, 0, 1], 23], [[2, 3, -3, 0, 0, -1, 2], 19], [[2, 0, 0, 1], 18], [[6, -13, 9], 3], [[1, -6, 7], 3], [[3, -11, 8], 3], [[-2, 1, 0, 0, 1], 19], [[-2, 0, 0, 0, 1], 21], [[-3, 1, -1, 2], 10], [[-4, 6], 4], [[4, -3, 0, -1, 2], 11], [[-3, 6], 4], [[5, -3, 0, 0, 1], 11], [[-1, -1, 0, 0, 1], 13], [[-2, 1], 6], [[1, -7, 7], 3], [[2, -2, 0, 0, 1], 11], [[8, -4, 0, -2, 2], 11], [[-2, 0, 6], 5], [[1, -8, 7], 3], [[1, -2, 0, 0, 1], 13], [[-2, -2, 2], 7], [[-1, 1], 6], [[1, -2, 2], 5], [[1], 11], [[1, -3, 2], 5], [[-1, 0, 1], 7], [[-1, -1, 2], 7], [[-1, 1], 6], [[1, -4, 2], 5], [[-2, 0, 1], 7], [[1, -3, 2], 5], [[-1, 0, 1], 9], [[3, -5, 3], 5], [[-1, 1, 0, 1], 10]], nothing, [[[70], 0], [[70], 60], [[1, 0, 0, -16, 0, 0, 36, 0, 0, -16, 0, 0, 1], 0], [[15, -40, 15], 0], [[15, 0, 0, 0, 0, -40, 0, 0, 0, 0, 15], 10], [[6], 30], [[1, -16, 36, -16, 1], 0], [[15, -20, 15], 0], [[15, 0, 0, 0, -20, 0, 0, 0, 15], 28], [[19], 40], [[19], 20], [[6, 0, 0, 0, -14, 0, 0, 0, 6], 8], [[6, -14, 6], 20], [[1, -8, 18, -8, 1], 0], [[1, -8, 18, -8, 1], 20], [[1, 0, 0, 12, 0, 0, 1], 0], [[1, 0, 0, 12, 0, 0, 1], 30], [[2, 1, 0, -8, 0, 1, 2], 5], [[1, -8, 12, -8, 1], 0], [[4, -2, 3, -12, 3, -2, 4], 4], [[2], 15], [[3, -8, 3], 2], [[1, -4, 6, -4, 1], 0], [[1, 0, -4, 0, 6, 0, -4, 0, 1], 12], [[5], 24], [[5], 12], [[1, 0, 4, -8, 6, -12, 6, -8, 4, 0, 1], 2], [[1, -4, 0, -4, 1], 0], [[1, -4, 9, -4, 1], 20], [[1, -12, 24, -12, 1], 0], [[-2, 3, 0, 3, -2], 5], [[3], 10], [[2, 0, 2, 0, 2], 4], [[8, -10, 8], 22], [[1, 0, 1, -4, 1, 0, 1], 4], [[2, -4, 2], 2], [[8, -20, 8], 2], [[-4], 5], [[1, -2, 1], 10], [[2, -4, 2], 2], [[1, -2, 1], 2], [[], 0], [[1, 0, 1], 2], [[1, 0, 1], 3], [[1, 0, 0, 0, 1], 15], [[-2], 4], [[-2], 8], [[1], 14], [[1], 7], [[4, -8, 4], 2], [[], 0], [[1], 6], [[1, 2, -4, 2, 1], 2], [[3, -4, 3], 22], [[1, 0, 0, -3, 0, 0, 1], 10], [[1, -3, 1], 10], [[2], 3], [[1, -1, 2, -1, 1], 10], [[5, -12, 5], 2], [[1, -4, 1], 3], [[-1], 5], [[3, -6, 3], 2], [[1, -2, 1], 12], [[-1], 8], [[-1], 4], [[-35, 35], 0], [[35, 0, 0, 0, 0, 0, 0, 0, 0, -35], 27], [[-5, 30, -30, 5], 0], [[1, 0, 4, -12, 0, -18, 18, 0, 12, -4, 0, -1], 1], [[-5, 10, -10, 5], 0], [[5, 0, 0, 0, 10, -10, 0, 0, 0, -5], 11], [[3, -3, 0, -9, 9, 0, 3, -3], 3], [[1, 0, -6, 6, 0, -1], 1], [[6, 1, 0, 0, -1, -6], 14], [[3, 0, 0, -3], 9], [[3, -12, 12, -3], 1], [[-5, 20, -20, 5], 0], [[5, 0, -10, 0, 10, -10, 0, 10, 0, -5], 11], [[6, 0, 0, 7, -7, 0, 0, -6], 9], [[-1, 0, 0, 1], 9], [[4, -21, 21, -4], 1], [[2, -3, 3, -2], 1], [[3, -15, 15, -3], 1], [[1, 2, -1, 1, -2, -1], 9], [[1, 0, 0, 2, -2, 0, 0, -1], 9], [[2, -1, 1, -2], 5], [[1, -3, 3, -1], 1], [[1, 0, 3, -3, 0, -1], 5], [[1, 0, 0, -1], 1], [[-1, 0, 0, 1], 6], [[1, -1], 8], [[1, -1], 3], [[2, -6, 6, -2], 1], [[], 0], [[4, -1, 6, -6, 1, -4], 5], [[-3, 3], 3], [[2, -9, 9, -2], 1], [[1, 0, 2, -2, 0, -1], 6], [[2, -2], 4], [[], 0], [[-1, 1], 3], [[1, -1], 5], [[2, -2], 3], [[], 0], [[1, -1], 4], [[-1, 1], 3], [[4, -4], 3], [[], 0], [[1, -1], 3], [[1, -1], 5], [[6, -6], 3], [[], 0]], [[[50], 0], [[50], 84], [[4, 0, 27, -16, 0, 0, 3], 6], [[5, -20, 25], 0], [[5, 0, 9, -20, 15, 0, 0, 0, 0, 0, 0, 0, 1], 18], [[10], 42], [[1, -4, 12, -20, 13], 0], [[-15, 20], 1], [[-15, 0, 20], 44], [[5], 56], [[5], 28], [[-6, 0, 2], 16], [[-6, 2], 29], [[5, -10, 10], 2], [[8, -4, 1], 30], [[4, -9, 0, 3], 3], [[4, -9, 0, 3], 45], [[2, -2, 6, -1, 0, 0, 0, 1], 9], [[3, -9, 8], 2], [[-4, 10, -5, 0, 0, 1], 9], [[2], 21], [[2, -4, 4], 4], [[-5, 5], 3], [[], 0], [[], 0], [[], 0], [[-2, 0, -9, 13, -8, 0, 0, 3], 7], [[-2, -4, 3], 2], [[1, -4], 30], [[-2, 7, -15, 11], 1], [[-2, 0, 4, -2, 0, 0, 1], 8], [[1], 14], [[2, -2], 8], [[-2, 4, -2], 31], [[4, -1], 10], [[1, 1, -2, 3], 3], [[1, -2, 7, -10, 5], 2], [[2, -2, 0, 0, 1], 6], [[1], 16], [[-3, 2], 5], [[-1, 2], 5], [[1], 12], [[1, -1, -1, 1], 3], [[-1, 0, 1], 6], [[-1, 0, 1], 23], [[-1], 6], [[-1], 12], [[-1], 20], [[-1], 10], [[2, -5, 3], 4], [[-1, 0, 1], 4], [[], 0], [[-2, 3, -3, 0, 3], 4], [[1], 32], [[1], 17], [[1], 15], [[-2], 4], [[-2], 16], [[-1, 3, -7, 4], 3], [[-1, 2, -3, 0, 1], 4], [[-1], 7], [[1, -4, 3], 4], [[], 0], [[], 0], [[], 0], [[-15, 35], 0], [[-15, 0, 0, 35], 42], [[-2, 9, -21, 18], 0], [[-2, 2, -9, 22, -12, 0, 0, 3], 6], [[-10, 10], 2], [[4, -10, 5, 0, 0, 0, 0, 0, 0, 0, 1], 21], [[13, -6, 0, 0, 1], 9], [[-2, 5, -6, 0, 3], 3], [[-2, 3, -3, 2], 21], [[3, 0, 0, 0, 0, 0, 1], 15], [[-1, 4, -9, 6], 2], [[5, -15, 15], 1], [[5, 0, -5, 5], 20], [[3, -3, 0, 2], 16], [[3, -1], 14], [[1, -3, 9, -14, 8], 1], [[1, 0, -3, 3], 2], [[-2, 5, -11, 7], 2], [[-4, 3], 15], [[1, -3], 16], [[-1, 1, -2], 8], [[-2, 3], 4], [[-1, 3, -1], 10], [[-2, -1, 1], 3], [[-2, 0, 0, -1, 0, 0, 1], 9], [[1, 1], 11], [[-1, 1], 6], [[1, -5, 4], 3], [[], 0], [[-4, 6, -4, 0, 0, 1], 10], [[2, -4, 0, 1], 4], [[3, -6, 6], 3], [[1, -1, 3, -1, 0, 0, 0, 1], 10], [[-1, 1, -2, 0, 1], 5], [[1], 7], [[1, -1], 4], [[1, -1], 7], [[-2, 1], 6], [[-1], 6], [[-1], 7], [[-1], 5], [[1, -3, 2], 5], [[-1, 0, 0, 1], 6], [[1, 0, -1, 1], 4], [[1, -1, 0, 0, 1], 7], [[2, -4, 2], 5], [[], 0]], nothing, [[[84], 0], [[84], 90], [[2, 0, 36, -32, 0, 0, 14], 6], [[5, -32, 47], 0], [[9, -20, 30, 0, 10, -12, 0, 0, 0, 0, 3], 20], [[4], 45], [[-4, 18, -36, 26], 1], [[-21, 42], 1], [[15, 0, 0, 0, 6], 46], [[-6], 60], [[-6], 30], [[-3, 0, 6, 0, -3, 0, 0, 0, 3], 16], [[6, -3], 31], [[5, -22, 20], 2], [[-4, 8, -1], 32], [[2, -12, 0, 14], 3], [[2, 0, 0, 2], 48], [[-1, 6, 0, -4, 0, 0, 3], 10], [[4, -19, 19], 2], [[-5, 18, -12, 0, -2, 5], 9], [[], 0], [[3, -10, 7], 4], [[-11, 15], 3], [[4], 24], [[-1], 36], [[-1], 18], [[2, -9, 26, -16, 0, -4, 6], 8], [[-1, -8, 14], 2], [[-1, 4, -1], 32], [[-1, 11, -28, 23], 1], [[10, -8, 0, 0, 3], 10], [[-2], 15], [[1, -6, 1, 0, 3], 8], [[-5, 4], 34], [[7, -5, 0, 0, 3], 10], [[1, -8, 6], 4], [[-4, 12, -20, 11], 3], [[-2, -2, 0, 3], 7], [[2, -1], 16], [[2, -7, 6], 4], [[-4, 4], 5], [[], 0], [[-5, 5], 5], [[1, -4, 0, 3], 5], [[-1, 1], 24], [[-3, 0, 3], 6], [[], 0], [[], 0], [[], 0], [[-1, 5, -12, 8], 3], [[-1, -2, 3], 4], [[-1], 9], [[5, -6, -4, 6], 5], [[-1, 2], 34], [[-1, 0, 0, -1], 18], [[-1, -1], 16], [[-1, -1, 3], 4], [[2, 0, -1], 17], [[-1, 7, -14, 9], 3], [[3, -5, -2, 5], 5], [[], 0], [[3, -9, 7], 4], [[1], 19], [[-1], 12], [[-1], 6], [[-21, 63], 0], [[35, 0, 0, -21, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 45], [[-1, 12, -36, 35], 0], [[2, -9, 35, -24, 0, -4, 10], 7], [[-16, 26], 2], [[5, -10, 15, 0, 5, -6, 0, 0, 0, 0, 1], 21], [[19, -16, 0, 0, 7], 9], [[5, -9, -4, 10], 4], [[-3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 1], 23], [[5, -3, 0, -1, 0, 0, 1], 15], [[-1, 8, -19, 14], 2], [[5, -27, 31], 1], [[-5, 14, 0, 0, -1, 0, 0, 0, 0, 1], 22], [[-3, -2, 4, 0, -3, 0, 0, -1, 2], 17], [[-1, -3, 0, 0, 0, 0, 1], 15], [[-4, 15, -27, 17], 2], [[1, -10, 10], 3], [[-1, 10, -21, 15], 2], [[2, 2, -2, 0, 0, 0, 0, 1], 16], [[-1, 0, 2, -1, 0, 0, 0, 0, 1], 17], [[3, -4, 1, -1, 2], 9], [[-7, 8], 4], [[-2, 6, -4, 0, -1, 2], 10], [[-1, -4, 7], 3], [[5, -4, 0, 0, 1], 11], [[2, -1, 0, 0, 0, 1], 12], [[-2, 2], 6], [[3, -12, 11], 3], [[2, -1, 0, 0, 1], 11], [[-5, 13, -8, 0, -2, 3], 10], [[1, -7, 0, 7], 4], [[4, -15, 12], 3], [[-1, 3, 0, -2, 0, 0, 1], 11], [[3, -3, -2, 3], 6], [[-1, -1, 1], 5], [[-1, -2, 2], 5], [[-2, 0, 0, 1], 8], [[1, -4, 3], 5], [[-1, 0, 1], 7], [[1, -2, -1, 2], 6], [[-1, 0, 1], 5], [[2, -6, 4], 5], [[1, -2, 0, 1], 6], [[-4, 3], 6], [[-1, -1, 0, 1], 8], [[-1, 4, -9, 5], 4], [[-2, 0, 0, 1], 10]], nothing, [[[168], 0], [[168], 60], [[1, 0, 0, 0, 27, 0, -16, 0, 27, 0, 0, 0, 1], 0], [[44, -80, 44], 0], [[9, 0, 5, 0, 30, -80, 30, 0, 5, 0, 9], 10], [[24], 30], [[14, -40, 60, -40, 14], 0], [[24, -60, 24], 0], [[24, 0, -60, 0, 24], 30], [[15], 40], [[15], 20], [[6, 0, -6, 0, 6], 10], [[6, -6, 6], 20], [[6, -16, 26, -16, 6], 0], [[3, -4, 8, -4, 3], 20], [[1, 0, -9, 24, -9, 0, 1], 0], [[1, 0, -9, 24, -9, 0, 1], 30], [[2, -2, 2, 4, 2, -2, 2], 5], [[3, -12, 18, -12, 3], 0], [[3, -1, -7, 10, -7, -1, 3], 4], [[4], 15], [[1, -2, 3, -4, 3, -2, 1], 0], [[-4, 6, -4], 1], [[-4, 0, 6, 0, -4], 14], [[3], 24], [[3], 12], [[1, 0, 0, 0, 9, -9, -2, 6, -2, -9, 9, 0, 0, 0, 1], 0], [[1, 0, 2, 0, 1], 0], [[1, 0, 5, 0, 1], 20], [[8, -28, 36, -28, 8], 0], [[1, 0, -5, 4, -5, 0, 1], 4], [[3], 10], [[2, -6, 2], 5], [[1, 0, 1, -6, 1, 0, 1], 20], [[1, -4, 4, -4, 1], 5], [[1, 0, 1, 0, 1, 0, 1], 0], [[2, -8, 16, -18, 16, -8, 2], 0], [[2, -2, 2], 4], [[1, -2, 1], 10], [[1, 0, 1], 2], [[], 0], [[], 0], [[-1, 2, -1], 2], [[], 0], [[1, 0, -2, 0, 1], 15], [[], 0], [[], 0], [[], 0], [[], 0], [[-2, 3, -4, 3, -2], 1], [[-1, 0, -1], 2], [[-1], 6], [[1, 0, -3, 5, -10, 5, -3, 0, 1], 0], [[-4], 23], [[1, 0, 0, -3, 0, 0, 1], 10], [[1, -3, 1], 10], [[2], 3], [[1, -1, 2, -1, 1], 10], [[1, -4, 7, -8, 7, -4, 1], 0], [[-1, 3, -4, 3, -1], 2], [[1], 5], [[-2, 2, -2, 2, -2], 1], [[-2], 13], [[], 0], [[], 0], [[-84, 84], 0], [[-84, 0, 0, 84], 30], [[-24, 60, -60, 24], 0], [[-1, 0, 0, 0, -18, 9, 8, -8, -9, 18, 0, 0, 0, 1], 0], [[-4, 20, -20, 4], 0], [[-4, 0, 0, 0, 0, 20, -20, 0, 0, 0, 0, 4], 10], [[-4, 0, 12, -12, 0, 4], 4], [[-1, 0, 6, -15, 15, -6, 0, 1], 0], [[-4, 0, 0, 4], 15], [[], 0], [[-2, 8, -14, 14, -8, 2], 0], [[-14, 40, -40, 14], 0], [[26, -26], 15], [[-6, 0, 3, -3, 0, 6], 10], [[-3, 3], 10], [[-5, 18, -31, 31, -18, 5], 0], [[-1, 0, -1, 1, 0, 1], 0], [[-3, 13, -19, 19, -13, 3], 0], [[-2, 1, -1, 2], 10], [[-1, 0, 2, -2, 0, 1], 10], [[-2, 3, -3, 2], 5], [[-1, 1], 2], [[-1, 3, -3, 3, -3, 1], 5], [[2, -2], 2], [[2, 0, 0, -2], 6], [[], 0], [[], 0], [[3, -4, 4, -3], 1], [[1, 0, 0, -1], 6], [[-2, 1, 2, -5, 5, -2, -1, 2], 4], [[1, -5, 5, -1], 2], [[-2, 5, -9, 9, -5, 2], 0], [[-1, 1, -1, -1, 1, 1, -1, 1], 5], [[1, -1, 2, -2, 1, -1], 2], [[], 0], [[-1, 1], 3], [[-1, 1], 5], [[], 0], [[], 0], [[], 0], [[], 0], [[1, -1, 1, -1, 1, -1], 1], [[1, 0, 0, -1], 3], [[-1, 1], 3], [[-1, 0, 0, 1], 4], [[1, -2, 2, -2, 2, -1], 1], [[1, -1], 6]], [[[175], 0], [[175], 72], [[-40, 0, 54, -32, 0, 0, 1], 6], [[30, -80, 65], 0], [[30, -60, 50, 0, 0, -20, 15], 16], [[15], 36], [[7, -28, 54, -60, 26], 0], [[10, -60, 45], 0], [[10, 0, -60, 0, 45], 36], [[-5], 48], [[-5], 24], [[1, 0, 12], 12], [[1, 12], 24], [[1, -8, 23, -28, 16], 0], [[1, 4, -10, 8, 1], 24], [[16, -18, 0, 1], 3], [[16, -18, 0, 1], 39], [[2, -4, -2, 4, -1], 8], [[-5, 16, -23, 11], 1], [[-6, 14, -11, -4, 12, -6], 6], [[-1], 18], [[1, -2, 6, -6, 4], 2], [[5, -10, 5], 2], [[], 0], [[], 0], [[], 0], [[-6, 14, -6, -18, 26, -16, 0, 0, 1], 6], [[2, -8, 1], 2], [[-10, 4, 1], 26], [[3, -15, 36, -41, 20], 0], [[6, -5, 0, 4, -2], 7], [[3], 12], [[-3, 4], 6], [[-3, 8, -7, 2, 1], 26], [[-1, 4, -6, 0, 1], 6], [[-1, 2, -4, 1], 3], [[1, -2, 8, -16, 22, -20, 7], 0], [[2, -2], 6], [[1, -2, 1], 12], [[2, -2, 2], 4], [[-1, 1], 5], [[], 0], [[-1], 5], [[-1], 6], [[-1], 22], [[1], 4], [[1], 8], [[1], 16], [[1], 8], [[1, -3, 6, -7, 3], 2], [[], 0], [[], 0], [[2, -6, 8, -6, 0, 1], 3], [[2, -3], 27], [[-2, 0, 0, 1], 15], [[-2, 1], 13], [[-1], 3], [[-1, 0, -1, 1], 13], [[-1, 2, -7, 11, -11, 5], 1], [[-2, 4, -3], 4], [[-1], 6], [[-2, 4, -5, 3], 3], [[], 0], [[], 0], [[], 0], [[-70, 105], 0], [[-70, 0, 0, 105], 36], [[-14, 48, -72, 41], 0], [[20, -20, -18, 44, -24, 0, 0, 1], 6], [[10, -30, 15], 1], [[10, -20, 10, 0, 0, -10, 5], 17], [[9, -22, 0, 15, -7], 6], [[-8, 14, -12, 0, 1], 3], [[-2, 0, 0, -3], 18], [[3], 15], [[3, -8, 18, -18, 8], 1], [[-5, 30, -50, 30], 0], [[-5, 16, -21, 15, 0, 0, -1, 1], 16], [[-1, 0, -6, 6], 12], [[-7, 6], 12], [[-2, 8, -23, 35, -34, 13], 0], [[-1, 3, -6, 1], 2], [[-1, 4, -13, 24, -23, 11], 0], [[-2, 6, -5, 3], 12], [[-1, 3, 0, 1], 14], [[3, -2, 2], 6], [[1, -3, 2], 3], [[1, -3, 4, -3, 0, 1], 6], [[-1], 4], [[-1], 12], [[-1], 11], [[1], 7], [[-2, 6, -8, 4], 2], [[], 0], [[3, -6, 8, -3, -4, 8, -5], 6], [[5, -4], 4], [[1, -5, 11, -13, 7], 1], [[1, -1, 0, 2, -1], 9], [[-2, 2, -2], 5], [[], 0], [[1], 3], [[1], 6], [[-1, 1], 6], [[], 0], [[-1], 4], [[-1], 4], [[-1, 2, -3, 2], 4], [[], 0], [[-1], 6], [[-1], 8], [[1, -2, 4, -5, 2], 3], [[], 0]], nothing, [[[210], 0], [[210], 84], [[-20, 0, 63, -80, 0, 0, 23], 6], [[17, -92, 101], 0], [[45, 0, -33, -20, 45, 0, 10, -24, 0, 0, 0, 0, 3], 18], [[10], 42], [[1, -12, 60, -92, 45], 0], [[6, -57, 90], 0], [[64, -30, 0, 0, 0, 6, 0, 0, 0, -1], 43], [[-15], 56], [[-15], 28], [[-8, 6, 0, 6, 0, -12, 0, 0, 0, 2], 15], [[-3, 6, -9], 28], [[-2, 23, -52, 34], 1], [[4, -4, 8, -5], 29], [[4, -21, 0, 23], 3], [[12, -9, 0, 3], 45], [[-2, 0, 6, -1, -8, 0, 0, 3], 9], [[-1, 17, -46, 32], 1], [[3, -5, -8, 33, -22, 0, -4, 5], 7], [[-2], 21], [[-2, 14, -18, 8], 3], [[5, -25, 25], 2], [[5], 20], [[], 0], [[], 0], [[8, -4, -22, 51, -28, 2, -7, 7], 7], [[4, -20, 23], 2], [[1, 4, -4], 30], [[-6, 37, -71, 39], 1], [[-3, 0, 13, -14, 0, 0, 3], 8], [[1], 14], [[-2, -6, 4, 0, 2], 8], [[-2, -2, 4, -2], 31], [[-2, 0, 6, -11, 0, 0, 2], 8], [[-2, 10, -14, 7], 3], [[1, -16, 41, -40, 13], 2], [[-2, -2, 0, 3], 7], [[1], 16], [[-1, 8, -14, 6], 3], [[3, -7, 4], 4], [[], 0], [[-1, 6, -10, 5], 3], [[2, -5, 0, 3], 5], [[1, 0, -1], 23], [[1, -3, 0, 2], 5], [[], 0], [[], 0], [[], 0], [[-4, 19, -23, 9], 3], [[2, -4, 3], 4], [[], 0], [[10, -7, -7, 7], 5], [[2, 2, -1], 32], [[-3], 17], [[-3], 15], [[2, -4, 2], 4], [[-1, 2, -1], 15], [[-7, 24, -28, 10], 3], [[5, -7, -4, 5], 5], [[1], 7], [[-2, 12, -18, 7], 3], [[-1], 18], [[], 0], [[], 0], [[-63, 147], 0], [[120, 0, 0, -56, 0, 0, 0, 27, 0, 0, 0, 0, -7], 42], [[-4, 39, -99, 68], 0], [[8, -12, -18, 73, -52, 0, -9, 14], 6], [[6, -40, 50], 1], [[20, 0, -9, -10, 15, 0, 5, -6, 0, 0, 0, 0, 1], 19], [[-8, 0, 27, -36, 0, 0, 9], 7], [[10, -15, -9, 14], 4], [[3, 0, 0, -3], 25], [[7, -3, 0, -1, 0, 0, 1], 15], [[-5, 28, -43, 20], 2], [[-1, 21, -71, 60], 0], [[16, -5, -10, 5, 9, -1, -1, -5, 0, 1], 19], [[-11, 3, -2, 4, 6, -6, 0, 0, -1, 1], 16], [[-6, -2, 0, 0, 2], 14], [[1, -14, 51, -62, 25], 1], [[-1, 10, -22, 14], 2], [[-8, 33, -49, 21], 2], [[-1, 3, -3, -1, 0, -2, 1], 14], [[-3, 4, -1, 0, 0, -2], 16], [[1, 1, -6, 2, -1, 1], 8], [[4, -14, 11], 3], [[1, -1, -2, 9, -6, 0, -1, 1], 8], [[3, -10, 9], 3], [[5, -4, 0, 0, 1], 11], [[-1, -1], 13], [[2, -3, 1], 5], [[-1, 12, -27, 15], 2], [[-1, 0, 2, -2], 9], [[3, -2, -11, 22, -11, 1, -3, 2], 8], [[2, -10, 0, 9], 4], [[-2, 18, -32, 17], 2], [[-1, 0, 3, 0, -2, 0, 0, 1], 10], [[5, -3, -3, 2], 6], [[1, -1, 1], 5], [[-1, 3, -3, 1], 4], [[], 0], [[-1, 5, -6, 2], 4], [[1, -1], 6], [[2, -2, -1, 1], 6], [[1, -1], 5], [[-2, 9, -9, 3], 4], [[2, -2, 0, 1], 6], [[-2, 5, -6, 2], 4], [[-1, -1, 0, 1], 8], [[-6, 15, -14, 4], 4], [[-1, -1, 1], 9]], nothing, [[[420], 0], [[420], 60], [[-16, 54, 0, -104, 0, 54, -16], 3], [[110, -200, 110], 0], [[50, -60, 60, -80, 60, -60, 50], 12], [[36], 30], [[34, -104, 144, -104, 34], 0], [[60, -150, 60], 0], [[60, 0, -150, 0, 60], 30], [[24], 40], [[24], 20], [[6, 0, -24, 0, 6], 10], [[6, -24, 6], 20], [[14, -42, 62, -42, 14], 0], [[2, -12, 26, -12, 2], 20], [[-18, 48, -18], 2], [[-18, 48, -18], 32], [[-2, -4, 8, -4, -2], 6], [[7, -31, 44, -31, 7], 0], [[-1, 5, -1, -24, 38, -24, -1, 5, -1], 3], [[], 0], [[2, -4, 8, -8, 8, -4, 2], 0], [[1, -9, 16, -9, 1], 0], [[1, 0, -4, 0, 6, 0, -4, 0, 1], 12], [[5], 24], [[5], 12], [[-8, 22, -18, -14, 38, -14, -18, 22, -8], 3], [[-4, 10, -4], 1], [[-4, 16, -4], 21], [[21, -67, 94, -67, 21], 0], [[1, 0, -8, 16, -8, 0, 1], 4], [[], 0], [[2, -8, 2], 5], [[-2, 8, -16, 8, -2], 21], [[-4, 10, -4], 6], [[-2, 2, -4, 2, -2], 1], [[6, -20, 38, -46, 38, -20, 6], 0], [[2, -2, 2], 4], [[], 0], [[-1, 1, -2, 1, -1], 1], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[1, -4, 8, -10, 8, -4, 1], 0], [[], 0], [[1], 6], [[-6, 12, -18, 12, -6], 2], [[-6], 23], [[], 0], [[], 0], [[], 0], [[], 0], [[3, -9, 17, -20, 17, -9, 3], 0], [[-1, 5, -6, 5, -1], 2], [[], 0], [[1, -3, 5, -6, 5, -3, 1], 0], [[1, -2, 1], 12], [[-1], 8], [[-1], 4], [[-210, 210], 0], [[-210, 0, 0, 210], 30], [[-60, 150, -150, 60], 0], [[12, -40, 18, 52, -52, -18, 40, -12], 3], [[-10, 50, -50, 10], 0], [[-10, 20, -10, 20, -20, 10, -20, 10], 12], [[1, -6, 0, 43, -43, 0, 6, -1], 3], [[12, -30, 30, -12], 2], [[-6, 6], 16], [[], 0], [[-5, 20, -35, 35, -20, 5], 0], [[-35, 100, -100, 35], 0], [[-5, 0, 15, -5, 5, -15, 0, 5], 12], [[-6, 0, 12, -12, 0, 6], 10], [[6, -6], 10], [[-13, 45, -77, 77, -45, 13], 0], [[3, -6, 6, -3], 1], [[-9, 29, -49, 49, -29, 9], 0], [[1, -8, 8, -1], 10], [[6, -6], 12], [[-2, 4, -4, 2], 5], [[1, -2, 2, -1], 1], [[3, -6, 6, -3], 6], [[], 0], [[], 0], [[], 0], [[], 0], [[-1, 6, -11, 11, -6, 1], 0], [[], 0], [[1, -4, 1, 8, -19, 19, -8, -1, 4, -1], 3], [[1, -8, 8, -1], 2], [[-4, 13, -22, 22, -13, 4], 0], [[1, -2, 2, -1], 7], [[1, -2, 3, -3, 2, -1], 2], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[-1, 1, -2, 2, -2, 2, -1, 1], 0], [[], 0], [[], 0], [[], 0], [[-1, 2, -4, 5, -5, 4, -2, 1], 0], [[], 0]], [[[300], 0], [[300], 78], [[-18, 0, 90, -80, 0, 0, 20], 6], [[35, -140, 125], 0], [[30, 0, -35, 0, -24, 0, 45, 0, 15, -12, 0, 0, 0, 0, 1], 16], [[20], 39], [[2, -32, 102, -112, 52], 0], [[15, -90, 105], 0], [[84, -64, 15, 0, 0, 0, -6, 0, 0, 0, 1], 40], [[30], 52], [[30], 26], [[12, -16, 6, 0, 6, 0, -6, 0, 0, 0, 1], 14], [[6, -18, 15], 26], [[1, -8, 38, -68, 31], 0], [[1, -8, 14, -20, 7], 26], [[18, -30, 0, 20], 3], [[22, -18, 0, 4], 42], [[2, -2, -1, 4, 0, -4, 0, 0, 1], 8], [[-5, 30, -55, 30], 1], [[2, -12, -12, 36, -16, 0, -2, 4], 7], [[], 0], [[1, -6, 16, -16, 5], 2], [[10, -30, 20], 2], [[], 0], [[], 0], [[], 0], [[6, 4, -16, -35, 64, -16, 1, -7, 5], 6], [[6, -20, 20], 2], [[9, -8, 5], 28], [[1, -17, 64, -87, 41], 0], [[-10, 0, 17, -6, 0, 0, 1], 8], [[2], 13], [[4, 2, -6, 2, 0, 1], 7], [[3, -4, 10, -8, 2], 28], [[1, -3, 1, 7, -7, 0, 0, 1], 7], [[-4, 10, -11, 5], 3], [[9, -34, 51, -38, 14], 2], [[4, 0, -3, 0, 1], 6], [[1, 0, 1], 13], [[-3, 9, -10, 4], 3], [[3, -5, 1], 4], [[-1], 12], [[-1, 5, -6, 4], 3], [[3, -6, 0, 1], 5], [[-1, -1], 21], [[2, -3, 0, 1], 5], [[], 0], [[], 0], [[], 0], [[1, -11, 21, -19, 8], 2], [[1, -2, 1], 4], [[], 0], [[2, -4, 17, -11, -7, 5], 3], [[3, -2, 1], 30], [[1, 0, 0, 1], 16], [[1, 1], 14], [[-2, 1], 5], [[-2, 0, 1], 15], [[3, -16, 29, -25, 9], 2], [[-3, 9, -8, -2, 4], 4], [[], 0], [[1, -5, 14, -15, 5], 2], [[], 0], [[], 0], [[], 0], [[-105, 195], 0], [[168, 0, 0, -105, 0, 0, 0, 0, 0, 0, 27], 39], [[-10, 75, -135, 80], 0], [[-2, -20, -27, 99, -44, 0, -8, 12], 6], [[15, -55, 50], 1], [[10, 10, -10, 0, -14, 0, 10, 0, 5, -1], 17], [[3, -11, 0, 34, -30, 0, 0, 6], 6], [[-6, 21, -21, -8, 12], 3], [[-2, -3, 0, 0, 3], 21], [[6, 0, 0, 3, -3], 12], [[1, -15, 41, -44, 19], 1], [[-5, 40, -100, 65], 0], [[5, 0, -11, 0, -5, 0, 10, 1], 17], [[20, -14, 0, -2, 4, 3, -3, 0, 0, 0, 1], 15], [[6, 3], 13], [[5, -36, 75, -67, 27], 1], [[-2, 13, -19, 12], 2], [[3, -20, 50, -53, 20], 1], [[1, -5, 2, 2], 13], [[4, -4, 0, 1], 15], [[2, 2, -5, 1, 0, 1], 8], [[6, -14, 6], 3], [[-4, -2, 7, -4, 0, 0, 1], 9], [[2, -8, 6], 3], [[-5, 0, 5], 9], [[1, 0, -1], 11], [[1, -1], 5], [[-4, 18, -26, 12], 2], [[-2, 0, 2], 9], [[3, 5, -9, -14, 22, -5, 0, -2, 2], 7], [[8, -12, 0, 6], 4], [[1, -7, 26, -35, 13], 1], [[1, -4, -2, 2, 1], 9], [[1, -2, 7, -4, -2, 2], 4], [[], 0], [[1, -1, 1], 5], [[1], 7], [[-2, 3, -3, 1], 4], [[-1], 7], [[-1, 2, -2, 0, 1], 5], [[], 0], [[1, -4, 7, -6, 2], 3], [[2, -2], 6], [[-2, 3, -3, 2], 4], [[1, 0, -1], 7], [[3, -10, 13, -10, 4], 3], [[1, 0, -1], 8]], nothing, [[[350], 0], [[350], 72], [[-16, 9, 0, 32, 0, 54, -96, 0, 0, 15], 3], [[50, -180, 120], 0], [[45, -40, 45, 0, -80, 0, 12, 0, 15, 0, 5, -12], 14], [[-10], 36], [[3, -48, 138, -128, 33], 0], [[35, -105, 105], 0], [[70, 0, 0, -64, 15, 0, 20, 0, -6], 36], [[35], 48], [[35], 24], [[-5, 0, 0, -16, 24, 0, 2, 0, -6], 12], [[8, -24, 15], 24], [[1, -18, 63, -68, 21], 0], [[1, -12, 24, -20, 6], 24], [[-3, 32, -18, 0, 15], 2], [[9, 0, 18, 0, -1], 38], [[-6, 0, 4, 8, 0, -4], 8], [[1, -13, 47, -58, 21], 0], [[1, -2, 3, -8, 5, -14, 27, -13, 0, -2, 1], 4], [[-2], 18], [[3, -16, 24, -10, 1], 2], [[-5, 20, -30, 15], 1], [[], 0], [[], 0], [[], 0], [[4, -8, 15, -14, 7, -34, 41, -16, 4, -5, 1], 4], [[-4, 8, -24, 15], 1], [[-4, 8, -12, 3], 25], [[2, -29, 93, -94, 27], 0], [[-2, 0, 0, 2, -2, 7, -6], 5], [[-1], 12], [[-1, 0, 8, -2, 2], 6], [[7, -8, 13, -6, 1], 26], [[-1, -2, 3, 0, 6, -5], 6], [[1, -8, 16, -9, 1], 2], [[16, -56, 66, -30, 3], 2], [[-4, 4, 0, -1], 5], [[-1], 12], [[1, -8, 14, -7, 1], 2], [[-3, 6, -3], 3], [[], 0], [[-2, 7, -6, 1], 3], [[-2, 4, -2], 4], [[1, 0, -1], 20], [[-2, 2, -1], 4], [[-1], 8], [[-1], 16], [[-1], 8], [[4, -20, 29, -15, 2], 2], [[2, -2], 4], [[], 0], [[2, -16, 16, 1, -5, 1], 3], [[-2, 3, -2], 27], [[-1], 18], [[-1], 14], [[1, 0, -2], 3], [[-1], 16], [[7, -30, 40, -18, 2], 2], [[1, -8, 11, -2, -2, 1], 3], [[1], 6], [[2, -14, 21, -10, 1], 2], [[], 0], [[], 0], [[], 0], [[-140, 210], 0], [[189, -35, 0, 0, 0, 0, 0, -105, 0, 0, 21], 35], [[-15, 105, -165, 65], 0], [[4, -12, 9, -20, 12, -27, 75, -48, 0, -9, 6], 3], [[-5, 30, -60, 45], 0], [[15, -10, 20, 10, -20, -1, -5, 0, 0, 0, 1], 15], [[-3, 0, -4, 12, 0, 24, -30, 0, 0, 3], 4], [[-15, 29, -9, -9, 6], 3], [[5, -3, 0, -2, -3, 3, 2], 18], [[-3, -3, 0, 0, 4], 11], [[4, -27, 58, -42, 9], 1], [[-10, 65, -115, 55], 0], [[9, -10, 0, 10, -16, -5, 10, 0, -5, 1, 1], 15], [[7, 2, 0, 8, -20, 12, -2, 0, 3, -3], 12], [[1, 0, 3, 3], 12], [[9, -57, 101, -66, 12], 1], [[1, -5, 18, -21, 6], 1], [[5, -37, 72, -48, 9], 1], [[1, -2, 0, 1, 0, 1], 12], [[-2, 0, 0, -3, 3, 1], 13], [[-1, -2, -4, 6, -1, 1], 6], [[-4, 12, -12, 3], 2], [[1, -2, 1, -4, 5, -2], 7], [[-1, 3, -9, 3], 2], [[-1, 0, 0, -2, -1], 6], [[-1, -1, 1, 1], 9], [[-2, 2], 4], [[1, -11, 28, -24, 6], 1], [[-1, 0, 1], 7], [[1, -1, 6, -2, 7, -15, 12, -3, 1, -1], 5], [[-4, 12, -6, 0, 3], 3], [[2, -18, 41, -30, 6], 1], [[-1, 0, 0, 2], 9], [[2, -8, 5, 1, -1], 4], [[1], 5], [[-1, 0, 1, -1], 3], [[-1, 1, -1], 6], [[1, -5, 5, -1], 3], [[], 0], [[1, -2, 2], 4], [[1], 4], [[3, -11, 10, -2], 3], [[-1, 1], 5], [[-4, 5, -2], 4], [[-2, 1], 6], [[7, -19, 17, -5], 3], [[-1, 0, 1], 7]], nothing, [[[525], 0], [[525], 72], [[1, 0, 0, 0, 36, 0, -32, 0, 135, -112, 0, 0, 17], 0], [[80, -260, 185], 0], [[10, 0, 0, -80, 90, 0, 30, 0, -18, -40, 15, 0, 10, -12], 12], [[5], 36], [[9, -80, 186, -192, 58], 0], [[45, -165, 150], 0], [[24, 0, 0, 0, 24, -64, 45, 0, 0, 0, 0, 0, 0, 0, 1], 34], [[30], 48], [[30], 24], [[6, 0, 0, 0, 6, -16, 9, 0, 6, 0, 0, 0, 0, 0, 1], 10], [[9, -12, 15], 24], [[2, -26, 86, -96, 37], 0], [[2, -8, 14, -12, 7], 24], [[1, 0, -12, 32, -45, 0, 17], 0], [[1, 0, 0, 0, -9, 0, 1], 36], [[-2, 0, 2, -4, -4, 12, 1, -4], 6], [[1, -18, 63, -81, 32], 0], [[-3, 0, 12, -5, -24, 36, -17, 0, -3, 1], 5], [[-3], 18], [[4, -18, 29, -18, 4], 2], [[-5, 25, -40, 20], 1], [[], 0], [[], 0], [[], 0], [[1, 0, 0, -9, 16, 10, 8, -53, 63, -32, 5, -5, 2], 2], [[1, 0, 16, -28, 17], 0], [[1, 0, 4, -4, 5], 24], [[5, -44, 129, -135, 47], 0], [[2, 4, -3, 0, 9, -10], 6], [[2], 12], [[2, 0, 2, 1, -6, 0, 0, 1], 5], [[2, -4, 4, -4, 2], 26], [[1, -2, 0, -2, 1, 7, -3, 0, 0, 1], 5], [[2, -7, 19, -13, 2], 2], [[-4, 25, -68, 89, -52, 9], 1], [[1, -2, 6, -4, -2], 4], [[-2, 1], 13], [[1, -8, 15, -11, 2], 2], [[-3, 6, -4, 1], 3], [[], 0], [[-2, 7, -7, 1], 3], [[-2, 4, -3], 4], [[-1, 0, 1, 0, -1], 18], [[2, -3, 0, 1], 5], [[], 0], [[], 0], [[], 0], [[6, -21, 35, -24, 4], 2], [[2, -2], 4], [[], 0], [[1, 5, -22, 25, -4, -5, 2], 2], [[1, 0, 1], 28], [[1, 0, 0, 0, 0, 0, 1], 12], [[1, 0, 1], 12], [[1, 0, 1], 4], [[1, 0, 0, 0, 1], 12], [[-1, 10, -35, 51, -31, 6], 1], [[2, -8, 15, -7, -3, 1], 3], [[], 0], [[2, -16, 25, -15, 4], 2], [[], 0], [[], 0], [[], 0], [[-210, 315], 0], [[105, 0, 0, 0, 0, -189, 210, 0, 0, 0, 0, 0, 0, 0, 0, -21], 33], [[-29, 153, -237, 106], 0], [[1, 0, 0, -9, 27, 12, -20, -63, 116, -68, 0, -10, 7], 1], [[-5, 40, -90, 60], 0], [[4, 0, 0, -20, 20, -4, 11, 4, -5, -10, 5, -1, 1], 13], [[-2, 3, 8, -12, -3, 45, -30, 0, 0, 4], 4], [[1, 3, -21, 41, -24, -10, 7], 1], [[-3, 0, 0, 3, -2, 0, 0, -1], 17], [[-3, -3, 7], 13], [[7, -36, 73, -63, 16], 1], [[-15, 95, -165, 85], 0], [[5, -25, 20, 0, 5, 0, 1, -5, 0, 0, 0, -1], 15], [[6, 0, 0, -6, 8, -8, 9, -4, 2, 0, 0, 0, 0, -1], 11], [[6, 0, 3, 0, 0, -3], 11], [[-1, 20, -78, 134, -103, 24], 0], [[1, -6, 21, -27, 7], 1], [[-1, 9, -50, 96, -71, 20], 0], [[3, -2, 2, -2, 2, 0, 2, -2], 11], [[1, 0, 1, 0, 0, -2, 1, 0, 2, -1], 11], [[2, -2, 0, 5, -2, 0, -1], 6], [[-4, 13, -15, 5], 2], [[1, -2, 2, -1, -4, 5, -1, 0, -1], 6], [[6, -7, 4], 3], [[1, 2, 0, 0, 1, -1], 7], [[-1, -1, 0, 1], 9], [[-2, 2, -1], 4], [[1, -13, 34, -32, 10], 1], [[1, 0, -1], 10], [[-3, -3, 8, 6, -20, 17, -8, 2, -1], 6], [[1, -4, 12, -15, 0, 4], 2], [[3, -23, 52, -43, 13], 1], [[-1, 0, 1, 0, 0, 3, -1], 7], [[3, -9, 8, 0, -1], 4], [[1], 5], [[1, -1], 5], [[1, -1], 7], [[1, -4, 6, -3], 3], [[], 0], [[-1, 3, -1, -1], 5], [[], 0], [[3, -11, 13, -6, 1], 3], [[-1, 1], 5], [[-3, 6, -3], 4], [[-1, 2, -1], 6], [[-1, 7, -19, 23, -11, 1], 2], [[1, 0, -1], 8]], nothing, [[[567], 0], [[567], 80], [[9, 0, -24, 0, 153, -192, 0, 0, 45], 4], [[57, -264, 246], 0], [[45, 0, 20, 0, -36, -40, 75, 0, 20, -48, 0, 0, 0, 0, 3], 16], [[-9], 40], [[3, -48, 180, -240, 96], 0], [[27, -162, 216], 0], [[81], 40], [[], 0], [[], 0], [[-24, 27, 0, 12, 0, -18, 0, 0, 0, 3], 15], [[], 0], [[-12, 75, -132, 69], 1], [[], 0], [[-3, 24, -51, 0, 45], 2], [[9, 0, 9, 0, -3], 42], [[1, -4, 0, 16, -1, -16, 0, 0, 3], 8], [[-7, 56, -115, 65], 1], [[1, 4, -6, -26, 71, -44, 0, -8, 7], 6], [[3], 20], [[-12, 38, -38, 11], 3], [[-1, 20, -61, 49], 1], [[4, 0, 0, 0, 4, 0, -1], 18], [[-3], 32], [[-3], 16], [[9, 6, -3, -57, 114, -60, 6, -15, 9], 6], [[12, -48, 45], 2], [[], 0], [[1, -24, 118, -180, 82], 0], [[1, 0, -4, 0, 25, -28, 0, 0, 3], 6], [[], 0], [[3, -12, 6, 0, 3], 8], [[], 0], [[15, -18, 0, 0, 3], 10], [[-6, 27, -30, 9], 3], [[9, -56, 113, -88, 22], 2], [[5, -4, -4, 0, 3], 6], [[], 0], [[-5, 23, -27, 9], 3], [[-1, 9, -13, 5], 3], [[], 0], [[-2, 14, -20, 7], 3], [[-1, 6, -9, 0, 3], 4], [[-2, 0, 1], 22], [[3, -6, 0, 3], 5], [[], 0], [[], 0], [[], 0], [[1, -17, 50, -49, 14], 2], [[4, -8, 3], 4], [[1], 8], [[-12, 27, -12, -15, 9], 4], [[-3], 30], [[], 0], [[], 0], [[3, -6, 3], 4], [[], 0], [[2, -27, 67, -59, 16], 2], [[-4, 17, -13, -8, 7], 4], [[], 0], [[-10, 35, -35, 11], 3], [[2, -1], 17], [[], 0], [[], 0], [[-189, 378], 0], [[210, 0, 0, 15, 0, 0, -35, 0, 0, -21, 27, 0, 0, 0, 0, -7], 39], [[-15, 126, -270, 156], 0], [[9, 6, -18, -54, 171, -120, 0, -21, 24], 5], [[-1, 26, -106, 110], 0], [[20, 0, 11, 4, -14, -10, 25, -1, 6, -12], 17], [[1, 2, -8, -1, 64, -76, 0, 0, 15], 5], [[-9, 36, -33, -21, 24], 3], [[-4, -3, 3, 1, 3, 0, 0, -3], 21], [[-3, -3, 11, -6, 0, -2], 13], [[1, -22, 82, -101, 37], 1], [[-6, 72, -192, 135], 0], [[10, 0, 5, -5, 0, 0, 4, 0, 0, -6, 0, 1], 17], [[8, -25, 18, -6, 6, 9, -9, 0, 0, -2, 1], 15], [[3, -3, 1, -3, 0, 2], 13], [[6, -54, 147, -150, 48], 1], [[-3, 27, -51, 24], 2], [[2, -31, 102, -113, 40], 1], [[-2, 6, -3, 2, -2, -2, 1], 14], [[-7, 8, 0, 2, -1, -2], 16], [[-1, 8, -9, 3, -2, 1], 8], [[-1, 14, -31, 18], 2], [[-7, 17, -9, 0, -2, 1], 10], [[7, -21, 15], 3], [[1, 0, -2, 0, 9, -7], 7], [[1, 2, -1, -1], 11], [[-1, 5, -4, 1], 4], [[-6, 38, -60, 27], 2], [[2, -3], 11], [[1, 4, 1, -28, 44, -19, 3, -5, 2], 7], [[-1, 11, -22, 0, 15], 3], [[-12, 55, -74, 30], 2], [[-2, 0, 5, 0, -4], 10], [[-6, 12, -3, -5, 2], 5], [[2, -2], 5], [[-1, 5, -5, 1], 4], [[2, -2], 7], [[-4, 12, -10, 2], 4], [[1, -1], 6], [[-1, 5, -3, -2, 1], 5], [[1, -1], 5], [[-10, 22, -16, 3], 4], [[-1, 3, -3], 5], [[-4, 13, -10, 2], 4], [[3, -1, -1], 7], [[2, -20, 38, -26, 5], 3], [[-2, 1], 10]], nothing, [[[1134], 0], [[1134], 60], [[6, 0, 0, -96, 135, 0, -108, 0, 135, -96, 0, 0, 6], 0], [[279, -576, 279], 0], [[-24, 0, -35, -60, 210, -200, 210, -60, -35, 0, -24], 10], [[30], 30], [[63, -288, 432, -288, 63], 0], [[189, -378, 189], 0], [[15, -64, 84, 0, -70, 0, 84, -64, 15], 28], [[81], 40], [[81], 20], [[6, -16, 12, 0, -4, 0, 12, -16, 6], 8], [[27, -54, 27], 20], [[27, -126, 198, -126, 27], 0], [[9, -36, 54, -36, 9], 20], [[6, 0, -45, 108, -45, 0, 6], 0], [[2, 0, -9, 44, -9, 0, 2], 30], [[4, -1, -6, 4, -6, -1, 4], 5], [[21, -93, 150, -93, 21], 0], [[-7, 16, -16, -16, 52, -16, -16, 16, -7], 3], [[2], 15], [[1, -10, 30, -44, 30, -10, 1], 0], [[6, -39, 60, -39, 6], 0], [[1, 0, -4, 0, 0, 0, -4, 0, 1], 12], [[4], 24], [[4], 12], [[1, -2, 1, -16, 41, -61, 18, 36, 18, -61, 41, -16, 1, -2, 1], 0], [[6, -24, 36, -24, 6], 0], [[3, -12, 27, -12, 3], 20], [[42, -189, 294, -189, 42], 0], [[2, -2, -10, 20, -10, -2, 2], 4], [[-3], 10], [[2, 4, -12, 4, 2], 4], [[1, -6, 18, -26, 18, -6, 1], 20], [[1, 1, -7, 10, -7, 1, 1], 4], [[1, -6, 15, -20, 15, -6, 1], 0], [[4, -44, 122, -164, 122, -44, 4], 0], [[4, -8, 4], 4], [[-1, 2, -1], 10], [[-3, 12, -18, 12, -3], 1], [[3, -6, 3], 2], [[], 0], [[-2, 4, -6, 4, -2], 1], [[3, -8, 3], 3], [[-2], 17], [[2, -4, 2], 3], [[], 0], [[], 0], [[], 0], [[1, -12, 37, -50, 37, -12, 1], 0], [[1, 0, 1], 2], [[], 0], [[1, -2, -2, 33, -60, 33, -2, -2, 1], 0], [[3, -6, 3], 22], [[-1, 0, 0, -1, 0, 0, -1], 10], [[-1, -1, -1], 10], [[], 0], [[-1, 0, 2, 0, -1], 10], [[2, -21, 61, -84, 61, -21, 2], 0], [[-2, 15, -26, 15, -2], 2], [[-1], 5], [[1, -7, 24, -36, 24, -7, 1], 0], [[1, -2, 1], 12], [[1], 8], [[1], 4], [[-567, 567], 0], [[-189, 378, 0, 0, 0, 0, -378, 189], 28], [[-135, 432, -432, 135], 0], [[-3, 3, 0, 48, -102, 81, 54, -54, -81, 102, -48, 0, -3, 3], 0], [[-45, 144, -144, 45], 0], [[5, -4, 0, 0, -35, 35, -35, 35, 0, 0, 4, -5], 10], [[12, -27, 0, 42, -42, 0, 27, -12], 3], [[-3, 3, 18, -81, 81, -18, -3, 3], 0], [[-3, 0, 0, 0, 0, 3], 14], [[3, 0, 0, 0, 0, -3], 8], [[-9, 57, -123, 123, -57, 9], 0], [[-90, 288, -288, 90], 0], [[-9, 0, 9, -9, 0, 9], 13], [[-6, 8, -8, 12, 2, -2, -12, 8, -8, 6], 8], [[], 0], [[-18, 117, -243, 243, -117, 18], 0], [[-3, 15, -30, 30, -15, 3], 0], [[-12, 75, -165, 165, -75, 12], 0], [[], 0], [[], 0], [[-2, 0, 10, -10, 0, 2], 4], [[6, -18, 18, -6], 1], [[-1, 0, 2, -11, 11, -2, 0, 1], 4], [[3, -6, 6, -3], 1], [[1, 0, -8, 8, 0, -1], 5], [[1, 0, 0, -1], 7], [[1, -1], 3], [[-3, 21, -51, 51, -21, 3], 0], [[-3, 3], 7], [[3, -6, 10, -5, -26, 26, 5, -10, 6, -3], 3], [[6, -24, 24, -6], 2], [[-6, 36, -84, 84, -36, 6], 0], [[-2, 2], 8], [[-5, 15, -15, 5], 3], [[], 0], [[], 0], [[], 0], [[-2, 4, -4, 2], 2], [[], 0], [[-1, 3, -3, 1], 3], [[], 0], [[2, -8, 15, -15, 8, -2], 1], [[1, -1], 4], [[1, -2, 3, -3, 2, -1], 1], [[2, -2], 5], [[4, -17, 29, -29, 17, -4], 1], [[2, -2], 6]], [[[700], 0], [[700], 66], [[2, 0, 0, 0, 72, 0, -66, 0, 162, -80, 0, 0, 2], 0], [[145, -340, 215], 0], [[9, 0, 10, 0, 60, -128, 120, -60, 25, 0, 9, -40, 15], 10], [[20], 33], [[36, -136, 246, -216, 66], 0], [[75, -240, 145], 0], [[-24, 0, 0, 0, -60, 64], 32], [[-20], 44], [[-20], 22], [[12, 0, -9, 0, 12, -8, -9], 10], [[-6, 12, -8], 22], [[8, -54, 109, -94, 38], 0], [[-1, 12, -8, 8, -4], 22], [[2, 0, -24, 74, -54, 0, 2], 0], [[2, 0, 0, 14, -18, 0, 2], 33], [[2, -3, 0, 8, -2, -6, 10, -1], 5], [[5, -35, 80, -75, 25], 0], [[4, -4, -15, 34, -18, -20, 27, -8], 4], [[], 0], [[-2, 8, -18, 23, -16, 5], 1], [[-10, 30, -30, 10], 1], [[], 0], [[], 0], [[], 0], [[-1, 0, 0, 9, -27, 5, 26, 8, -58, 60, -28, 0, 0, 2], 1], [[2, 0, 12, -20, 2], 0], [[-1, 0, -6, 4, -1], 22], [[18, -86, 162, -146, 48], 0], [[-2, -6, 14, -12, -2, 8, -4], 5], [[-4], 11], [[4, -9, 4, 3], 5], [[2, -4, 4, -1, 2, -1], 23], [[2, -7, 8, -7, 0, 3], 5], [[-1, -1, -5, 11, -7, 2], 1], [[3, -18, 46, -82, 92, -52, 10], 0], [[1, -8, 10, -4], 4], [[-1, 2, -2], 11], [[2, -5, 8, -7, 1], 2], [[-1, 2, -2, 1], 3], [[], 0], [[-2, 4, 1, -1], 2], [[1, -2, 0, -1], 3], [[-1, -1], 18], [[1], 5], [[1], 10], [[1], 16], [[1], 8], [[-3, 9, -20, 28, -17, 3], 1], [[-1, 2, -1], 2], [[], 0], [[-1, -3, 21, -35, 28, -12, 0, 2], 1], [[], 0], [[-1, 0, 0, 2, 0, 0, -1], 11], [[-1, 2, -1], 11], [[3, -3], 3], [[-1, 1, 0, 1, -1], 11], [[1, -6, 20, -38, 46, -29, 6], 0], [[-1, 7, -15, 15, -6], 2], [[], 0], [[-1, 6, -13, 18, -13, 3], 1], [[], 0], [[], 0], [[], 0], [[-315, 385], 0], [[-84, 0, 0, 105, 0, -216, 280, 0, 0, 0, 0, 0, -15], 30], [[-70, 225, -285, 120], 0], [[-1, 1, 0, 0, -36, 36, 30, -36, -72, 118, -52, 0, 0, 2], 0], [[-10, 65, -105, 40], 0], [[10, -34, 25, -15, 5, 0, 4, -10, 5], 15], [[-7, 3, 31, -39, -3, 41, -12], 4], [[-1, 1, 12, -50, 60, -30, 0, 2], 0], [[-4, 0, -3, 0, 0, 0, -2, 3], 15], [[-1, 0, 0, 3, -3, 0, 3], 9], [[-3, 19, -52, 76, -56, 14], 0], [[-35, 150, -190, 85], 0], [[30, -41, 26, -5, 0, 5, 1, -6], 15], [[-6, 6, 6, -3, -6, 6, -2, -3], 10], [[-3, 6, -8, 0, 3], 10], [[-10, 50, -113, 155, -106, 26], 0], [[-1, 1, -3, 16, -13, 2], 0], [[-5, 29, -75, 100, -74, 20], 0], [[-2, 3, -5, 6, -4, -4, 1], 10], [[-1, 1, 2, 1, -1, 2, 0, -2], 10], [[-2, 8, -5, 0, 1], 5], [[-5, 8, -7, 3], 2], [[-1, 5, -8, 7, -3, -2, 1], 5], [[3, -2, -1], 2], [[-3, 2, 2, -1, 1, -1], 7], [[-1, 0, 1], 9], [[1, -1], 5], [[5, -17, 29, -23, 6], 1], [[1, -1], 6], [[-1, 3, 4, -16, 17, 2, -15, 13, -5], 4], [[2, -11, 21, -10], 2], [[-1, 11, -34, 50, -37, 13], 0], [[1, 0, -1, 3, -2, -1, 3, -1], 6], [[-3, 7, -9, 7, -3], 3], [[-1], 3], [[-2, 3, -1], 3], [[-1, 0, 1], 5], [[-1, 3, -2], 4], [[1, -1], 5], [[1], 6], [[1], 4], [[-1, 3, -7, 10, -6, 1], 2], [[1, -1], 5], [[1, -3, 1, 2, -1], 2], [[1, -2, 2, -1], 5], [[1, -3, 7, -15, 18, -9, 1], 1], [[1, -1], 6]], nothing, [[[700], 0], [[700], 78], [[-82, 0, 234, -192, 0, 0, 36], 6], [[85, -320, 295], 0], [[30, -60, 105, 0, -54, -60, 105, 0, 15, -24, 0, 0, 0, 0, 3], 16], [[-20], 39], [[10, -76, 222, -268, 124], 0], [[30, -215, 240], 0], [[24, 0, 30, 0, 0, 0, 0, 0, 0, 0, 1], 40], [[10], 52], [[10], 26], [[24, -24, 3, 0, 12, 0, -9, 0, 0, 0, 1], 14], [[3, -2, 6], 26], [[1, -18, 88, -148, 81], 0], [[1, 0, 4, -4, 3], 26], [[38, -78, 0, 36], 3], [[-18, 18, 0, -4], 42], [[2, -10, -7, 20, -4, -8, 0, 0, 3], 8], [[-10, 66, -123, 71], 1], [[-3, 22, -28, -30, 81, -42, 0, -3, 7], 6], [[], 0], [[1, -12, 34, -40, 17], 2], [[20, -65, 45], 2], [[], 0], [[], 0], [[], 0], [[-8, 24, -17, -84, 141, -60, 1, -11, 13], 6], [[11, -48, 36], 2], [[-1, 0, 3], 28], [[3, -40, 141, -201, 100], 0], [[6, -18, 0, 30, -18, 0, 0, 3], 7], [[-2], 13], [[8, -1, -12, 3, 0, 1], 7], [[-2, 0, 2, -2, 1], 28], [[3, -12, 1, 15, -12, 0, 0, 1], 7], [[1, -6, 20, -26, 13], 2], [[-2, 19, -68, 115, -98, 34], 1], [[6, -6, -3, 0, 3], 6], [[-1, 0, -1], 13], [[-4, 17, -24, 11], 3], [[5, -11, 6], 4], [[], 0], [[-2, 8, -13, 7], 3], [[7, -10, 0, 3], 5], [[1, -1], 21], [[3, -6, 0, 1], 5], [[-2], 10], [[1], 18], [[1], 9], [[2, -18, 44, -47, 19], 2], [[1, -4, 3], 4], [[], 0], [[-15, 38, -26, -11, 13], 4], [[-2, 0, 1], 30], [[3, 0, 0, -1], 16], [[3, -1], 14], [[1, -3, 1], 4], [[1, -2, 1, -1], 14], [[6, -30, 64, -63, 24], 2], [[-5, 21, -19, -3, 7], 4], [[], 0], [[1, -9, 29, -36, 15], 2], [[], 0], [[], 0], [[], 0], [[-245, 455], 0], [[273, -189, 0, 120, 0, 0, -21, 0, 0, 0, 27], 39], [[-29, 168, -312, 191], 0], [[32, -50, -81, 225, -120, 0, -12, 24], 6], [[30, -130, 110], 1], [[-15, 35, 0, -19, -20, 30, 0, 5, -7, 0, 0, 0, 0, 1], 18], [[9, -44, 0, 86, -67, 0, 0, 10], 6], [[-12, 53, -51, -12, 24], 3], [[3, -3, 0, -3, 2, 3], 20], [[-3, -6, 0, 9, -6, 0, -1, 0, 0, 1], 12], [[3, -30, 87, -104, 46], 1], [[-10, 95, -225, 155], 0], [[5, -16, 36, -14, -15, 5, 16, -1, -1], 17], [[-6, 26, -19, 0, -4, 8, 3, -6, 0, 0, 0, 1], 14], [[12, -6, -3], 13], [[-1, 15, -76, 164, -164, 65], 0], [[-4, 25, -42, 24], 2], [[7, -43, 109, -125, 52], 1], [[3, -9, 8, -1, -1], 13], [[5, -5, 4, -1], 15], [[-2, 7, 4, -9, 2, 0, 1], 7], [[11, -28, 17], 3], [[-1, 6, -8, -4, 14, -8, 0, 0, 1], 7], [[4, -16, 10], 3], [[3, -10, 0, 9, -5, 0, 0, 1], 8], [[-1, -1, 1, -1], 10], [[2, -4, 2], 5], [[-7, 36, -58, 29], 2], [[1, -3, 0, 2], 8], [[-6, 16, -12, -31, 50, -21, 0, -3, 4], 7], [[16, -29, 0, 10], 4], [[1, -15, 56, -78, 37], 1], [[1, -1, -4, 7, -1, -2, 0, 0, 1], 9], [[-6, 15, -10, -3, 4], 5], [[-1, 1], 6], [[-1, 1, -2, 1], 4], [[-1], 8], [[-2, 7, -9, 4], 4], [[1, -1], 6], [[-1, 4, -4, 0, 1], 5], [[], 0], [[1, -7, 17, -18, 7], 3], [[2, -3, 0, 1], 6], [[1, -2, 6, -8, 4], 3], [[3, -2, -1, 0, 1], 7], [[4, -17, 31, -28, 10], 3], [[2, -1, -1], 8]], nothing, [[[1400], 0], [[1400], 60], [[7, 0, 0, -128, 189, 0, -144, 0, 189, -128, 0, 0, 7], 0], [[340, -720, 340], 0], [[15, 0, -33, 0, 65, 0, 165, -464, 165, 0, 65, 0, -33, 0, 15], 8], [[40], 30], [[74, -344, 564, -344, 74], 0], [[240, -460, 240], 0], [[45, -64, 24, 0, 10, 0, 24, -64, 45], 28], [[65], 40], [[65], 20], [[9, -16, 6, 0, 16, 0, 6, -16, 9], 8], [[24, -34, 24], 20], [[32, -156, 256, -156, 32], 0], [[8, -24, 40, -24, 8], 20], [[7, 0, -63, 104, -63, 0, 7], 0], [[3, 0, -27, 40, -27, 0, 3], 30], [[-1, 2, -4, -6, 10, -6, -4, 2, -1], 4], [[25, -120, 190, -120, 25], 0], [[-5, 27, -23, -19, 40, -19, -23, 27, -5], 3], [[4], 15], [[1, -10, 41, -64, 41, -10, 1], 0], [[10, -50, 80, -50, 10], 0], [[], 0], [[], 0], [[], 0], [[1, -2, 2, -8, 67, -103, 18, 54, 18, -103, 67, -8, 2, -2, 1], 0], [[7, -32, 54, -32, 7], 0], [[4, -8, 9, -8, 4], 20], [[48, -236, 372, -236, 48], 0], [[5, -4, -9, 12, -9, -4, 5], 4], [[1], 10], [[1, 2, -8, 2, 1], 4], [[1, -4, 9, -14, 9, -4, 1], 20], [[1, 1, -4, 8, -4, 1, 1], 4], [[1, -4, 21, -38, 21, -4, 1], 0], [[5, -46, 152, -226, 152, -46, 5], 0], [[5, -14, 5], 4], [[-2], 11], [[-4, 18, -28, 18, -4], 1], [[-1, 6, -10, 6, -1], 1], [[], 0], [[-1, 8, -14, 8, -1], 1], [[-1, 4, -6, 4, -1], 2], [[1, 0, -2, 0, 1], 15], [[2, -2, 2], 3], [[2], 8], [[-1], 14], [[-1], 7], [[1, -13, 49, -74, 49, -13, 1], 0], [[2, -4, 2], 2], [[], 0], [[1, -2, -7, 39, -58, 39, -7, -2, 1], 0], [[1, 2, 1], 22], [[1], 13], [[1], 11], [[1, -4, 1], 2], [[-2], 12], [[2, -22, 79, -118, 79, -22, 2], 0], [[-4, 17, -26, 17, -4], 2], [[1], 5], [[-9, 34, -50, 34, -9], 1], [[], 0], [[], 0], [[], 0], [[-700, 700], 0], [[280, 0, 0, -420, 0, 0, 420, 0, 0, -280], 27], [[-160, 540, -540, 160], 0], [[-3, 4, 0, 48, -170, 99, 72, -72, -99, 170, -48, 0, -4, 3], 0], [[-60, 180, -180, 60], 0], [[4, 0, -20, 0, 0, 96, -96, 0, 0, 20, 0, -4], 10], [[18, -34, 6, 42, -42, -6, 34, -18], 3], [[-3, 4, 30, -85, 85, -30, -4, 3], 0], [[4, 0, 0, -4], 15], [[1, -3, 3, -1], 9], [[-10, 68, -162, 162, -68, 10], 0], [[-110, 360, -360, 110], 0], [[1, 0, -5, 0, 20, -11, 15, -15, 11, -20, 0, 5, 0, -1], 9], [[17, -14, 0, -8, 8, 0, 14, -17], 9], [[10, 3, -3, -10], 9], [[-21, 134, -315, 315, -134, 21], 0], [[-3, 16, -47, 47, -16, 3], 0], [[-12, 92, -212, 212, -92, 12], 0], [[4, -5, -1, 1, 5, -4], 9], [[1, -2, -1, -1, 1, 1, 2, -1], 9], [[-1, 4, -4, 1], 5], [[-1, 9, -26, 26, -9, 1], 0], [[3, -5, 5, -3], 6], [[4, -12, 12, -4], 1], [[1, -1, -2, 2, 1, -1], 5], [[], 0], [[-1, 3, -3, 1], 2], [[-3, 29, -68, 68, -29, 3], 0], [[], 0], [[-8, 20, -5, -19, 19, 5, -20, 8], 4], [[9, -25, 25, -9], 2], [[-6, 45, -111, 111, -45, 6], 0], [[2, 1, -3, 3, -1, -2], 6], [[1, -7, 15, -15, 7, -1], 2], [[1, -1], 3], [[3, -3], 3], [[1, -1], 5], [[-3, 9, -9, 3], 2], [[], 0], [[-1, 2, -2, 1], 3], [[1, -1], 3], [[1, -10, 25, -25, 10, -1], 1], [[-1, 1, -1, 1], 3], [[-2, 9, -9, 2], 2], [[3, -3], 5], [[3, -19, 46, -46, 19, -3], 1], [[], 0]], [[[840], 0], [[840], 66], [[-16, 54, 0, -140, 0, 180, -80, 0, 0, 10], 3], [[174, -408, 258], 0], [[5, -60, 75, -160, 165, -60, 60, 0, -21, 0, 15, 0, 5], 12], [[-40], 33], [[36, -176, 300, -240, 88], 0], [[90, -288, 174], 0], [[20, 0, 0, -64, 0, 0, 20], 34], [[30], 44], [[30], 22], [[-19, 0, 36, -16, 0, 0, 2], 12], [[9, -18, 12], 22], [[15, -60, 129, -120, 39], 0], [[3, -12, 18, -12, 6], 22], [[-18, 84, -60, 0, 10], 2], [[18, -36, 36, 0, -2], 35], [[-1, -2, 12, -8, -7, 6], 6], [[6, -43, 96, -89, 30], 0], [[2, -2, -18, 54, -43, -14, 30, -10, 0, 0, 1], 4], [[], 0], [[1, -4, 12, -22, 24, -16, 5], 0], [[-10, 35, -40, 10], 1], [[-5], 18], [[], 0], [[], 0], [[-8, 13, -18, 1, 52, -19, -71, 73, -16, 0, -3, 4], 3], [[-4, 22, -20, 10], 1], [[-4, 1, -8, 1], 23], [[21, -107, 196, -169, 59], 0], [[1, 0, -5, 20, -24, 0, 8], 4], [[2], 11], [[-11, 12, 0, -2], 6], [[-2, 5, -4, 3, -4, 1], 23], [[-3, 13, -15, 3, 2, -1], 6], [[-2, 5, -10, 9, -7, 4], 1], [[2, -22, 67, -102, 97, -56, 17], 0], [[2, -4, 6, 0, -1], 4], [[1, -2], 11], [[3, -7, 8, -6, 1], 2], [[-1, 2, -1], 3], [[], 0], [[1, -1, 1, -2, 1], 2], [[-1, -2, 5, -2], 3], [[], 0], [[-1, 2, -1], 4], [[], 0], [[], 0], [[], 0], [[-3, 15, -27, 27, -18, 5], 1], [[-1], 4], [[], 0], [[-3, 14, -34, 41, -15, -3, 4], 2], [[4], 25], [[-3, 0, 0, 1], 14], [[-3, 1], 12], [[1], 3], [[-1, 2, -1, 1], 12], [[1, -9, 29, -48, 48, -30, 9], 0], [[5, -15, 17, -8, 0, 1], 3], [[], 0], [[-3, 9, -16, 19, -12, 4], 1], [[1], 14], [[], 0], [[], 0], [[-378, 462], 0], [[294, -378, 0, 0, 0, 0, 168], 33], [[-80, 282, -330, 148], 0], [[12, -31, 27, 60, -80, -72, 144, -44, 0, -3, 7], 3], [[-10, 80, -124, 50], 0], [[15, -25, 20, -40, 10, -5, 20, 0, 0, 0, 0, 0, 1], 13], [[-4, 0, 45, -70, 0, 39, -15, 0, 0, 1], 4], [[9, -45, 72, -36, -3, 7], 2], [[6, -2], 17], [[-3, -3, 0, 3, -3, 0, 2], 9], [[-3, 24, -69, 87, -62, 19], 0], [[-45, 174, -234, 99], 0], [[5, -16, -10, 9, 10, 0, -5, 0, 1], 15], [[4, -15, -12, 32, -8, 0, 0, 2], 12], [[-3, 0, 6], 11], [[-9, 63, -149, 177, -117, 37], 0], [[3, -13, 19, -14, 7], 1], [[-6, 39, -92, 119, -82, 25], 0], [[-1, 6, 2, -6, 2], 11], [[2, -6, 0, 5, -2], 12], [[4, -11, 8, 0, -2], 6], [[-4, 11, -9, 1], 2], [[1, -7, 13, -11, 2, 2, -1], 6], [[2, -3, 1], 3], [[-3, 0, 8, -5], 6], [[], 0], [[], 0], [[6, -22, 34, -26, 7], 1], [[2, -3], 8], [[-1, 1, 1, -18, 36, -17, -13, 17, -5, 0, 0, 1], 4], [[-10, 23, -12, 0, 1], 3], [[-3, 15, -40, 60, -43, 13], 0], [[2, -1, 4, -2, -3, 2], 7], [[-2, 5, -10, 9, -4, 0, 1], 3], [[-1], 5], [[1], 4], [[1], 6], [[1, -1, 1, -1], 3], [[], 0], [[1, -1, 1, -1], 4], [[], 0], [[1, -3, 6, -7, 7, -5, 2], 1], [[1], 6], [[-1, 1, 0, 0, -1, 1], 2], [[-1, 1], 6], [[1, -7, 13, -16, 14, -9, 3], 1], [[-2, 1], 7]], nothing, [[[1680], 0], [[1680], 60], [[10, 0, 0, -192, 198, 0, -16, 0, 198, -192, 0, 0, 10], 0], [[400, -880, 400], 0], [[15, 0, 12, 0, -60, 0, 225, -464, 225, 0, -60, 0, 12, 0, 15], 8], [[-16], 30], [[76, -416, 696, -416, 76], 0], [[300, -540, 300], 0], [[30, 0, 0, 0, 0, 0, 0, 0, 30], 28], [[6], 40], [[6], 20], [[21, -24, 0, 0, 12, 0, 0, -24, 21], 8], [[3, 0, 3], 20], [[34, -192, 322, -192, 34], 0], [[1, 0, 4, 0, 1], 20], [[10, 0, -66, 144, -66, 0, 10], 0], [[-2, 0, 18, 0, 18, 0, -2], 30], [[-1, 8, 0, -4, -6, -4, 0, 8, -1], 4], [[30, -150, 240, -150, 30], 0], [[-8, 37, -34, 1, 8, 1, -34, 37, -8], 3], [[], 0], [[-10, 54, -88, 54, -10], 1], [[14, -66, 104, -66, 14], 0], [[-1, 0, 4, 0, -6, 0, 4, 0, -1], 12], [[-5], 24], [[-5], 12], [[-3, 4, -12, 78, -123, 46, 0, 46, -123, 78, -12, 4, -3], 1], [[10, -48, 56, -48, 10], 0], [[1, 0, -4, 0, 1], 20], [[52, -284, 468, -284, 52], 0], [[7, -8, -1, 8, -1, -8, 7], 4], [[2], 10], [[5, 0, -12, 0, 5], 4], [[-1, 0, -1], 22], [[3, 0, -4, 0, -4, 0, 3], 4], [[-6, 29, -48, 29, -6], 1], [[3, -48, 190, -292, 190, -48, 3], 0], [[9, -20, 9], 4], [[1, 0, 1], 10], [[-5, 25, -42, 25, -5], 1], [[-1, 9, -16, 9, -1], 1], [[], 0], [[-2, 10, -16, 10, -2], 1], [[-1, 6, -10, 6, -1], 2], [[], 0], [[3, -6, 3], 3], [[], 0], [[], 0], [[], 0], [[1, -15, 65, -102, 65, -15, 1], 0], [[2, -4, 2], 2], [[-1], 6], [[-3, -2, 45, -84, 45, -2, -3], 1], [[-2, 0, -2], 22], [[1, 0, 0, 0, 0, 0, 1], 10], [[1, 0, 1], 10], [[1, 0, 1], 2], [[1, 0, 0, 0, 1], 10], [[1, -23, 101, -158, 101, -23, 1], 0], [[-3, 23, -40, 23, -3], 2], [[], 0], [[-9, 45, -72, 45, -9], 1], [[-1, 2, -1], 12], [[1], 8], [[1], 4], [[-840, 840], 0], [[315, -189, 0, 336, 0, 0, -336, 0, 189, -315], 27], [[-180, 660, -660, 180], 0], [[-3, 7, 0, 72, -201, 117, 8, -8, -117, 201, -72, 0, -7, 3], 0], [[-80, 220, -220, 80], 0], [[1, 20, -10, -20, 101, -101, 20, 10, -20, -1], 11], [[28, -48, 6, 6, -6, -6, 48, -28], 3], [[-3, 7, 27, -111, 111, -27, -7, 3], 0], [[3, -5, 0, 0, 5, -3], 14], [[4, 0, 0, -4], 9], [[-10, 82, -208, 208, -82, 10], 0], [[-130, 440, -440, 130], 0], [[1, 0, 0, 0, 0, -21, 60, -60, 21, 0, 0, 0, 0, -1], 9], [[-6, 23, -16, 0, -6, 6, 0, 16, -23, 6], 8], [[9, -6, 6, -9], 9], [[-19, 156, -395, 395, -156, 19], 0], [[-3, 25, -58, 58, -25, 3], 0], [[-11, 105, -271, 271, -105, 11], 0], [[5, -7, 7, -7, 7, -5], 9], [[2, -3, 3, -3, 3, -3, 3, -2], 9], [[-2, 3, 6, -6, -3, 2], 4], [[-1, 13, -37, 37, -13, 1], 0], [[-1, 2, 2, -2, 2, -2, -2, 1], 4], [[7, -13, 13, -7], 1], [[2, 0, -2, 2, 0, -2], 5], [[1, 1, -1, -1], 7], [[-1, 5, -5, 1], 2], [[-4, 36, -92, 92, -36, 4], 0], [[1, -1, 1, -1], 6], [[-10, 28, -17, -3, 3, 17, -28, 10], 4], [[10, -36, 36, -10], 2], [[-5, 54, -145, 145, -54, 5], 0], [[-1, 2, 0, -1, 1, 0, -2, 1], 5], [[-7, 24, -24, 7], 3], [[1, -1], 3], [[1, -1], 3], [[1, -1], 5], [[-4, 14, -14, 4], 2], [[], 0], [[-1, 5, -5, 1], 3], [[], 0], [[-12, 36, -36, 12], 2], [[2, -2], 4], [[-3, 11, -11, 3], 2], [[-1, 5, -5, 1], 4], [[2, -24, 64, -64, 24, -2], 1], [[2, -2], 6]], [[[972], 0], [[972], 70], [[54, 0, -90, 0, 270, -144, 0, 0, 18], 4], [[171, -468, 333], 0], [[5, 0, 30, -128, 135, -60, 35, 0, 3, -40, 45, 0, 10, 0, 0, 0, 0, 0, 1], 12], [[36], 35], [[30, -168, 342, -312, 120], 0], [[81, -324, 243], 0], [[], 0], [[], 0], [[], 0], [[-9, 0, 36, -24, -9, 0, 6], 12], [[], 0], [[9, -54, 144, -162, 63], 0], [[], 0], [[-18, 90, -90, 0, 18], 2], [[-18, 30, -18, 0, 6], 37], [[-1, 2, 9, -10, -10, 18, -1, 0, 0, 0, 1], 6], [[3, -36, 108, -126, 51], 0], [[1, -4, -11, 39, -34, -31, 60, -21, 0, -1, 2], 4], [[], 0], [[-2, 9, -24, 36, -28, 9], 1], [[-6, 39, -60, 24], 1], [[4, 0, -6, 0, 0, 0, -1], 16], [[-3], 28], [[-3], 14], [[9, -18, 3, 30, -6, -102, 120, -36, 0, -6, 6], 4], [[18, -36, 18], 2], [[], 0], [[15, -99, 222, -225, 87], 0], [[1, -2, -4, 14, -22, -2, 18, -4, 0, 0, 1], 4], [[], 0], [[-9, 12, 3, -6], 6], [[], 0], [[-3, 9, -15, 3, 9, -3], 6], [[3, -9, 15, -15, 6], 2], [[1, -14, 59, -116, 131, -86, 25], 0], [[2, -8, 11, -4, -2, 0, 1], 4], [[], 0], [[2, -8, 15, -13, 4], 2], [[-1, 4, -5, 1], 3], [[-1], 10], [[-1, 1, 1, -5, 2], 2], [[-1, -1, 8, -5, 0, 1], 3], [[1, 1], 19], [[3, -3], 5], [[], 0], [[], 0], [[], 0], [[-1, 12, -31, 43, -32, 10], 1], [[2, -2, 0, 1], 3], [[1], 7], [[-3, 12, -39, 54, -24, -6, 6], 2], [[], 0], [[], 0], [[], 0], [[3, -3], 3], [[], 0], [[-5, 24, -54, 69, -49, 15], 1], [[4, -17, 27, -15, -1, 2], 3], [[], 0], [[-1, 7, -18, 29, -24, 7], 1], [[1, -1], 15], [[], 0], [[], 0], [[-405, 567], 0], [[84, 0, -216, 280, 0, -189, 168, 0, 0, 0, 0, 0, 35], 33], [[-72, 297, -405, 198], 0], [[-27, 27, 36, -54, -108, 222, -84, 0, -6, 12], 4], [[-6, 75, -159, 84], 0], [[14, -30, 10, -5, 5, 0, 0, -10, 5, 0, 5], 15], [[-3, 3, 30, -57, -3, 78, -33, 0, 0, 3], 4], [[9, -45, 90, -54, -6, 12], 2], [[4, 0, 3, 0, 0, -3, 2], 18], [[3, 0, 4, -6, 0, 5], 10], [[-1, 18, -67, 113, -93, 32], 0], [[-36, 180, -288, 144], 0], [[19, -40, 21, -5, 5, 0, -5, -1, 6], 15], [[3, -6, -12, 32, -13, -6, -2, 4], 12], [[3, -8, 6, 0, -1], 11], [[-6, 51, -153, 219, -165, 54], 0], [[-9, 24, -27, 12], 2], [[-3, 30, -93, 147, -120, 39], 0], [[1, -2, 7, -10, 2, 2], 11], [[-2, -1, 7, -3, -1], 13], [[3, -10, 7, 4, -4], 6], [[-3, 15, -18, 6], 2], [[1, -5, 11, -11, -1, 7, -2], 6], [[3, 0, -6, 3], 2], [[1, -1, 0, 5, -7, 0, 3, -1], 5], [[-1, 0, 1], 10], [[1, -1], 5], [[3, -21, 45, -45, 15], 1], [[-1, 0, -3, 1], 7], [[2, 0, -12, 26, -12, -27, 33, -10, 0, -1, 1], 5], [[-9, 30, -24, 0, 3], 3], [[-1, 10, -39, 75, -68, 23], 0], [[-2, 4, -3, -4, 5], 8], [[-1, 5, -13, 16, -7, -1, 1], 3], [[1, -1], 4], [[-1, 3, -2], 3], [[1, 0, -1], 6], [[1, -2, 4, -3, 1], 3], [[1], 5], [[-1, 3, -2], 5], [[1, -1], 4], [[-2, 5, -10, 13, -10, 3], 2], [[-1, 0, 1, -1], 4], [[1, 1, -3, 1], 4], [[1, -2, 3, -1, -1], 5], [[-4, 13, -22, 25, -17, 5], 2], [[-2, 2], 7]], nothing, [[[1050], 0], [[1050], 72], [[45, 0, -104, 0, 306, -208, 0, 0, 19], 4], [[170, -500, 380], 0], [[30, -48, 120, -120, 90, 0, -6, -80, 75, 0, 0, -12, 0, 0, 0, 0, 1], 14], [[-30], 36], [[31, -160, 354, -368, 137], 0], [[75, -345, 285], 0], [[-60, 0, 60, 0, 15], 36], [[15], 48], [[15], 24], [[-6, 0, 24, -24, -3, 0, 6], 12], [[3, -12, 6], 24], [[4, -52, 152, -182, 84], 0], [[1, -4, 14, -8, 3], 24], [[-15, 88, -102, 0, 19], 2], [[9, -32, 18, 0, -5], 38], [[6, -12, -12, 24, -5, -4, 0, 0, 1], 8], [[2, -31, 113, -148, 66], 0], [[1, -2, -11, 43, -31, -41, 76, -34, 0, -1, 2], 4], [[-2], 18], [[6, -24, 43, -40, 13], 2], [[-5, 40, -70, 35], 1], [[], 0], [[], 0], [[], 0], [[-18, -3, 34, 3, -111, 145, -68, 0, -6, 7], 5], [[16, -52, 19], 2], [[10, -4, 1], 26], [[13, -92, 233, -261, 106], 0], [[-2, -2, 16, -20, -2, 22, -14, 0, 0, 1], 5], [[3], 12], [[-6, 8, 5, -6], 6], [[3, -8, 7, -2, 1], 26], [[-2, 8, -12, 0, 13, -3], 6], [[-8, 22, -23, 7], 3], [[1, -12, 49, -114, 159, -110, 29], 0], [[-6, 15, -8, 0, 0, 1], 5], [[1, -2, 1], 12], [[1, -7, 19, -20, 7], 2], [[-1, 5, -8, 4], 3], [[], 0], [[-1, 2, 5, -8, 2], 2], [[-2, 6, -5, 0, 1], 4], [[1, 0, -1], 20], [[3, -3], 5], [[], 0], [[], 0], [[], 0], [[-1, 8, -29, 54, -45, 13], 1], [[2, -1, -2, 1], 3], [[], 0], [[14, -42, 53, -27, -6, 7], 3], [[-4, 3], 27], [[-2, 0, 0, 1], 15], [[-2, 1], 13], [[2, -3], 3], [[-1, 0, -1, 1], 13], [[-3, 18, -53, 84, -66, 19], 1], [[3, -17, 29, -17, -1, 2], 3], [[1], 6], [[4, -18, 36, -33, 11], 2], [[], 0], [[], 0], [[], 0], [[-420, 630], 0], [[-216, 280, 0, 0, 315, -189, 0, -15, 0, 0, 35], 35], [[-71, 297, -453, 229], 0], [[-18, 27, 46, -58, -126, 256, -132, 0, -6, 13], 4], [[-5, 70, -180, 105], 0], [[-5, -9, 25, -30, 20, 0, -5, -20, 20, 0, 0, -6], 15], [[-2, 3, 28, -60, -3, 97, -52, 0, 0, 3], 4], [[6, -47, 92, -60, -6, 13], 2], [[3, -7, 3, -3, 2], 20], [[1, -9, 0, 6, -3, 0, -1], 12], [[-1, 14, -62, 125, -118, 40], 0], [[-30, 185, -315, 175], 0], [[9, -15, 26, -21, 20, -4, 0, -6, 6], 15], [[3, -3, -12, 20, -10, 3, -2, 4], 12], [[-8, 9, 3, -1], 12], [[-6, 46, -144, 243, -203, 63], 0], [[-5, 30, -39, 13], 2], [[-2, 24, -89, 163, -146, 50], 0], [[-2, 6, -8, 1, 3], 12], [[-1, 3, -2, -1], 14], [[3, -7, 2, 5, -4], 6], [[-3, 16, -23, 12], 2], [[1, -5, 10, -6, -5, 9, -2], 6], [[2, 1, -10, 3], 2], [[-1, -3, 5, -4, -1, 5, -5], 6], [[-1, 0, 1], 10], [[2, -3, 1], 5], [[2, -18, 51, -57, 22], 1], [[-1, 1], 7], [[1, 2, -17, 25, -3, -34, 43, -18, 0, -1, 1], 5], [[-7, 31, -28, 0, 3], 3], [[6, -38, 82, -84, 33], 1], [[3, -3, -3, 6, -2, -2], 9], [[6, -13, 17, -8, -1, 1], 4], [[1, 0, -1], 4], [[-1, 3, -1], 3], [[2, -1], 7], [[-2, 7, -7, 2], 4], [[1, -1], 5], [[-1, 3, -2], 5], [[1, -1], 4], [[3, -11, 20, -16, 4], 3], [[1, 0, -1], 5], [[-2, 0, 5, -5, 1], 3], [[-3, 4, -2], 6], [[-2, 8, -24, 37, -25, 6], 2], [[-1, 1], 7]], nothing, [[[2100], 0], [[2100], 60], [[12, 0, 0, -176, 306, 0, -168, 0, 306, -176, 0, 0, 12], 0], [[510, -1080, 510], 0], [[5, 0, 0, -20, -18, 0, 60, 0, 255, -624, 255, 0, 60, 0, -18, -20, 0, 0, 5], 6], [[20], 30], [[108, -528, 828, -528, 108], 0], [[360, -690, 360], 0], [[20, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 20], 26], [[30], 40], [[30], 20], [[2, 0, 0, -24, 18, 0, 2, 0, 18, -24, 0, 0, 2], 6], [[9, -24, 9], 20], [[48, -234, 384, -234, 48], 0], [[3, -12, 30, -12, 3], 20], [[12, 0, -102, 160, -102, 0, 12], 0], [[-18, 16, -18], 32], [[1, 8, -10, -8, 14, -8, -10, 8, 1], 4], [[37, -181, 284, -181, 37], 0], [[-1, 0, -7, 38, -42, -19, 58, -19, -42, 38, -7, 0, -1], 1], [[], 0], [[1, -16, 61, -96, 61, -16, 1], 0], [[15, -75, 120, -75, 15], 0], [[], 0], [[], 0], [[], 0], [[-3, 6, -20, 92, -143, 46, 58, 46, -143, 92, -20, 6, -3], 1], [[12, -44, 78, -44, 12], 0], [[-8, 6, -8], 21], [[73, -351, 562, -351, 73], 0], [[-2, 6, -4, -7, 20, -7, -4, 6, -2], 3], [[2], 10], [[-2, 0, 6, -6, 6, 0, -2], 3], [[-2, 9, -12, 9, -2], 21], [[-1, 2, 3, -8, 4, -8, 3, 2, -1], 3], [[-8, 33, -48, 33, -8], 1], [[7, -72, 230, -330, 230, -72, 7], 0], [[-1, -2, 12, -18, 12, -2, -1], 2], [[1, 0, 1], 10], [[-6, 27, -42, 27, -6], 1], [[-1, 9, -16, 9, -1], 1], [[], 0], [[-2, 10, -16, 10, -2], 1], [[-1, 6, -10, 6, -1], 2], [[], 0], [[-1, 3, -4, 3, -1], 2], [[], 0], [[], 0], [[], 0], [[1, -21, 74, -108, 74, -21, 1], 0], [[2, -4, 2], 2], [[], 0], [[-3, -6, 59, -102, 59, -6, -3], 1], [[-2], 23], [[-2], 13], [[-2], 11], [[-2], 3], [[-1, 0, -1], 11], [[3, -34, 119, -174, 119, -34, 3], 0], [[-1, -6, 29, -42, 29, -6, -1], 1], [[], 0], [[1, -12, 50, -78, 50, -12, 1], 0], [[], 0], [[], 0], [[], 0], [[-1050, 1050], 0], [[189, 0, 0, 0, 0, -189, 0, 0, 189, 0, 0, 0, 0, -189], 25], [[-240, 810, -810, 240], 0], [[-3, 9, 0, 76, -235, 171, 84, -84, -171, 235, -76, 0, -9, 3], 0], [[-90, 270, -270, 90], 0], [[1, 0, 0, 0, -4, -11, 8, -20, 116, -116, 20, -8, 11, 4, 0, 0, 0, -1], 7], [[-1, 0, 0, 22, -59, 12, 54, -54, -12, 59, -22, 0, 0, 1], 0], [[-3, 9, 45, -137, 137, -45, -9, 3], 0], [[-3, 0, 4, 3, -3, -4, 0, 3], 13], [[3, 3, 1, -3, 3, -1, -3, -3], 7], [[-14, 105, -241, 241, -105, 14], 0], [[-165, 540, -540, 165], 0], [[-1, 0, 0, 0, -10, 56, -56, 10, 0, 0, 0, 1], 10], [[2, 0, 8, -22, 12, -1, 1, -12, 22, -8, 0, -2], 7], [[-9, 9], 10], [[-30, 207, -468, 468, -207, 30], 0], [[-3, 28, -64, 64, -28, 3], 0], [[-20, 134, -320, 320, -134, 20], 0], [[-4, 6, -6, 4], 10], [[-1, 1, -3, 3, -1, 1], 10], [[-2, -2, 7, -7, 2, 2], 4], [[-1, 14, -39, 39, -14, 1], 0], [[-1, 1, 5, -7, 7, -5, -1, 1], 4], [[-1, 4, -15, 15, -4, 1], 0], [[-1, 1, -1, -3, 3, 1, -1, 1], 4], [[1, 1, -1, -1], 7], [[-1, 5, -5, 1], 2], [[-5, 42, -103, 103, -42, 5], 0], [[-1, 1, 0, 0, -1, 1], 5], [[-1, 1, -11, 29, -16, -27, 27, 16, -29, 11, -1, 1], 2], [[-1, 0, 17, -39, 39, -17, 0, 1], 0], [[-9, 67, -167, 167, -67, 9], 0], [[2, -1, -4, 4, 1, -2], 6], [[-10, 27, -27, 10], 3], [[1, -1], 3], [[1, -1], 3], [[1, -1], 5], [[-5, 13, -13, 5], 2], [[], 0], [[-2, 4, -4, 2], 3], [[], 0], [[2, -15, 37, -37, 15, -2], 1], [[2, -2], 4], [[-4, 10, -10, 4], 2], [[-2, 4, -4, 2], 4], [[5, -31, 66, -66, 31, -5], 1], [[-1, 1, -1, 1], 5]], [[[1344], 0], [[1344], 75], [[36, 0, -104, 0, 396, -320, 0, 0, 56], 4], [[184, -640, 520], 0], [[-64, 150, -60, 50, 0, -48, -80, 120, 0, 30, -36, 0, 0, 0, 0, 2], 15], [[], 0], [[20, -176, 456, -496, 196], 0], [[84, -420, 420], 0], [[60, 0, -24, 64, -15, 0, 0, 0, 0, 0, 0, 0, -1], 37], [[-24], 50], [[-24], 25], [[-3, 0, 30, -56, 12, 0, 18, 0, -9, 0, 0, 0, 2], 12], [[-6, 12, -12], 25], [[4, -50, 190, -270, 120], 0], [[-2, 4, -14, 12, -6], 25], [[-12, 88, -132, 0, 56], 2], [[], 0], [[6, -16, -10, 32, -2, -12, 0, 0, 2], 8], [[1, -31, 144, -221, 107], 0], [[-2, -3, 33, -37, -58, 124, -59, 0, -6, 8], 5], [[], 0], [[6, -32, 68, -60, 18], 2], [[-4, 51, -114, 66], 1], [[-4, 0, 6, 0, -4, 0, 1], 17], [[4], 30], [[4], 15], [[-9, 14, 30, -13, -150, 221, -88, 5, -19, 13], 5], [[28, -80, 56], 2], [[-8, 4, -4], 27], [[9, -95, 300, -365, 155], 0], [[-1, 2, 10, -24, -1, 42, -26, 0, 0, 2], 5], [[], 0], [[-3, 10, 4, -18, 3, 0, 2], 6], [[-1, 6, -9, 4, -2], 27], [[-1, 5, -12, 2, 23, -15, 0, 0, 2], 6], [[2, -15, 39, -41, 13], 2], [[-6, 52, -154, 220, -158, 44], 1], [[-4, 14, -8, -6, 0, 2], 5], [[], 0], [[1, -13, 35, -35, 12], 2], [[-2, 12, -15, 5], 3], [[], 0], [[-3, 15, -20, 8], 3], [[-2, 14, -14, 0, 2], 4], [[], 0], [[7, -9, 0, 2], 5], [[], 0], [[], 0], [[], 0], [[9, -45, 85, -73, 23], 2], [[1, 2, -6, 2], 3], [[], 0], [[7, -41, 74, -34, -19, 13], 3], [[4, -3, 0, -1], 28], [[], 0], [[], 0], [[1, 0, -3, 2], 3], [[], 0], [[-1, 19, -73, 124, -98, 29], 1], [[1, -17, 41, -27, -6, 8], 3], [[], 0], [[4, -27, 58, -53, 17], 2], [[-2, 1], 16], [[1], 10], [[1], 5], [[-504, 840], 0], [[280, 0, -189, 378, -189, 0, 15, 0, 0, 35, 0, 0, -21, 27], 36], [[-64, 360, -600, 320], 0], [[-9, 27, 34, -70, -153, 371, -192, 0, -24, 32], 4], [[-4, 80, -240, 180], 0], [[-15, 30, -5, 16, 4, -23, -20, 30, -1, 7, -7], 16], [[-1, 3, 20, -56, -3, 139, -100, 0, 0, 14], 4], [[3, -39, 109, -81, -24, 32], 2], [[6, -4, -3, -3, 1, 3], 20], [[4, -9, -3, 15, -6, 0, -1], 12], [[11, -75, 177, -177, 64], 1], [[-29, 210, -430, 255], 0], [[-24, 31, -5, 10, -14, -5, -1, 15, 0, 0, -1], 16], [[-3, -12, 42, -38, 6, -8, 10, 3, -6, 0, 0, -1, 1], 13], [[-8, 9, -3, -1, -3], 12], [[-2, 39, -176, 328, -285, 94], 0], [[-11, 49, -72, 32], 2], [[-1, 19, -105, 225, -211, 73], 0], [[-2, 5, -12, 8, 1, 2, -2], 12], [[-1, 6, -10, 2, 0, 2, -1], 14], [[-7, 4, 10, -11, 2, -1, 1], 7], [[-3, 27, -46, 20], 2], [[-2, 8, -9, -9, 19, -9, 0, -1, 1], 7], [[1, 9, -24, 14], 2], [[-1, 1, 5, -10, 0, 10, -5], 6], [[-2, 1, 2, -1], 10], [[-1, 4, -4, 1], 4], [[1, -22, 78, -95, 39], 1], [[1, -2, 1, 2, -1], 8], [[-2, -6, 26, -10, -54, 71, -26, 1, -5, 3], 6], [[-5, 35, -46, 0, 14], 3], [[5, -42, 118, -131, 48], 1], [[3, -6, -5, 9, -1, -2], 9], [[3, -18, 26, -11, -5, 3], 4], [[1, 0, -1], 4], [[1, 1, -3, 1], 4], [[2, -2], 7], [[1, -6, 13, -11, 3], 3], [[1, -1], 6], [[-3, 8, -5, -1, 1], 5], [[1, -1], 4], [[5, -18, 31, -23, 6], 3], [[-1, 5, -3], 5], [[1, -4, 11, -11, 3], 3], [[-2, 5, -2, -1], 6], [[-1, 14, -39, 56, -39, 10], 2], [[3, 0, -2], 8]], nothing, [[[2688], 0], [[2688], 60], [[4, 0, 0, -192, 396, 0, -288, 0, 396, -192, 0, 0, 4], 0], [[672, -1344, 672], 0], [[15, -20, 24, 0, 0, -120, 345, -488, 345, -120, 0, 0, 24, -20, 15], 8], [[64], 30], [[168, -672, 1008, -672, 168], 0], [[432, -912, 432], 0], [[-15, -64, 60, 0, -10, 0, 60, -64, -15], 28], [[60], 40], [[60], 20], [[-6, -16, 24, 0, -16, 0, 24, -16, -6], 8], [[18, -48, 18], 20], [[68, -296, 444, -296, 68], 0], [[5, -32, 42, -32, 5], 20], [[4, 0, -132, 256, -132, 0, 4], 0], [[4, 0, -36, 64, -36, 0, 4], 30], [[-1, 8, -8, -16, 34, -16, -8, 8, -1], 4], [[48, -216, 336, -216, 48], 0], [[-10, 46, -42, -54, 120, -54, -42, 46, -10], 3], [[], 0], [[2, -24, 66, -88, 66, -24, 2], 0], [[16, -80, 136, -80, 16], 0], [[1, 0, 0, 0, 6, 0, 0, 0, 1], 12], [[3], 24], [[3], 12], [[-2, 0, -28, 131, -163, 9, 90, 9, -163, 131, -28, 0, -2], 1], [[4, -48, 72, -48, 4], 0], [[1, -12, 18, -12, 1], 20], [[108, -444, 672, -444, 108], 0], [[-2, 10, -8, -22, 44, -22, -8, 10, -2], 3], [[4], 10], [[2, 8, -24, 8, 2], 4], [[-6, 14, -20, 14, -6], 21], [[2, 0, -16, 24, -16, 0, 2], 4], [[-9, 29, -38, 29, -9], 1], [[17, -108, 276, -370, 276, -108, 17], 0], [[-2, 15, -26, 15, -2], 3], [[1, -4, 1], 10], [[1, -8, 24, -34, 24, -8, 1], 0], [[-2, 6, -8, 6, -2], 1], [[], 0], [[-1, 4, -6, 4, -1], 1], [[-1, 6, -10, 6, -1], 2], [[], 0], [[2, -4, 2], 3], [[], 0], [[], 0], [[], 0], [[4, -28, 78, -108, 78, -28, 4], 0], [[-1, 2, -1], 2], [[-1], 6], [[-2, -21, 87, -128, 87, -21, -2], 1], [[1, -2, 1], 22], [[1, 0, 0, -2, 0, 0, 1], 10], [[1, -2, 1], 10], [[-2, 4, -2], 2], [[1, -1, 0, -1, 1], 10], [[7, -51, 135, -182, 135, -51, 7], 0], [[-8, 36, -56, 36, -8], 2], [[], 0], [[2, -18, 52, -70, 52, -18, 2], 0], [[1, 0, 1], 12], [[], 0], [[], 0], [[-1344, 1344], 0], [[-280, 216, 0, 336, 0, 0, -336, 0, -216, 280], 27], [[-336, 1008, -1008, 336], 0], [[-2, 2, 0, 96, -294, 198, 144, -144, -198, 294, -96, 0, -2, 2], 0], [[-96, 336, -336, 96], 0], [[15, -5, -25, 75, -75, 25, 5, -15], 12], [[20, -72, 12, 120, -120, -12, 72, -20], 3], [[-2, 2, 66, -194, 194, -66, -2, 2], 0], [[], 0], [[3, -4, -3, 3, 4, -3], 8], [[-24, 132, -276, 276, -132, 24], 0], [[-216, 672, -672, 216], 0], [[1, 0, 0, 0, 0, -21, 50, -50, 21, 0, 0, 0, 0, -1], 9], [[3, 5, -20, 12, 8, -8, -12, 20, -5, -3], 8], [[8, -6, 6, -8], 9], [[-54, 276, -558, 558, -276, 54], 0], [[-2, 26, -60, 60, -26, 2], 0], [[-34, 182, -370, 370, -182, 34], 0], [[4, -7, 7, -7, 7, -4], 9], [[1, -3, 3, -3, 3, -3, 3, -1], 9], [[-1, -3, 16, -16, 3, 1], 4], [[-2, 14, -34, 34, -14, 2], 0], [[-1, 1, 8, -20, 20, -8, -1, 1], 4], [[2, -6, 6, -2], 1], [[-1, 2, 4, -7, 7, -4, -2, 1], 4], [[], 0], [[-1, 1, -1, 1], 2], [[-8, 48, -108, 108, -48, 8], 0], [[1, -1, 1, -1], 6], [[2, -18, 30, 8, -58, 58, -8, -30, 18, -2], 3], [[16, -56, 56, -16], 2], [[-14, 88, -182, 182, -88, 14], 0], [[-1, 1, 3, -11, 11, -3, -1, 1], 5], [[2, -15, 30, -30, 15, -2], 2], [[-1, 1], 3], [[1, -3, 3, -1], 2], [[], 0], [[1, -4, 7, -7, 4, -1], 1], [[-1, 1], 4], [[-1, 3, -3, 1], 3], [[-1, 1], 3], [[4, -17, 29, -29, 17, -4], 1], [[], 0], [[-2, 3, -3, 2], 2], [[-2, 5, -5, 2], 4], [[-1, 10, -35, 61, -61, 35, -10, 1], 0], [[2, -2], 6]], [[[1400], 0], [[1400], 72], [[-16, 54, 0, -200, 0, 360, -304, 0, 0, 34], 3], [[220, -680, 500], 0], [[75, -152, 165, -120, 170, 0, -90, -80, 90, 0, 5, -24, 0, 0, 0, 0, 1], 14], [[40], 36], [[34, -208, 492, -496, 170], 0], [[110, -450, 390], 0], [[10, 0, 60, -64, 30, 0, 20, 0, -6], 36], [[50], 48], [[50], 24], [[-11, 0, 24, -40, 21, 0, 8, 0, -6], 12], [[11, -36, 21], 24], [[5, -70, 215, -250, 105], 0], [[2, -16, 38, -28, 9], 24], [[-18, 88, -120, 0, 34], 2], [[-18, 32, -36, 0, 6], 38], [[16, -20, -8, 24, -5, -8, 0, 0, 1], 8], [[3, -44, 160, -206, 87], 0], [[-2, -14, 59, -44, -49, 97, -47, 0, -3, 3], 5], [[], 0], [[9, -40, 67, -50, 14], 2], [[-10, 60, -100, 50], 1], [[], 0], [[], 0], [[], 0], [[4, -26, -4, 68, -6, -145, 186, -84, 4, -11, 8], 4], [[-4, 40, -76, 34], 1], [[-4, 10, -16, 4], 25], [[15, -121, 326, -355, 133], 0], [[-2, 16, -22, 0, 25, -20, 0, 0, 1], 6], [[-2], 12], [[1, 8, -3, -8, 2], 6], [[6, -16, 16, -8, 2], 26], [[1, 6, -13, 0, 11, -8], 6], [[3, -22, 40, -32, 8], 2], [[1, -12, 65, -170, 225, -140, 32], 0], [[-2, 11, -8, -1, 0, 1], 5], [[2, -1], 13], [[2, -15, 33, -27, 8], 2], [[-4, 11, -11, 4], 3], [[], 0], [[1, -8, 18, -14, 3], 2], [[-4, 10, -7, 0, 1], 4], [[], 0], [[-2, 5, -4], 4], [[-1], 8], [[-1], 16], [[-1], 8], [[-1, 12, -49, 83, -60, 15], 1], [[-2, 5, -4, 1], 3], [[], 0], [[12, -46, 65, -26, -11, 8], 3], [[2, 2, -2], 27], [[2], 15], [[2], 13], [[-1, 5, -2], 3], [[1, 0, 1], 13], [[-3, 25, -83, 124, -84, 21], 1], [[2, -17, 34, -19, -3, 3], 3], [[], 0], [[6, -32, 57, -43, 12], 2], [[], 0], [[], 0], [[], 0], [[-560, 840], 0], [[405, -315, 0, 0, 315, -189, 0, 120, 0, 0, -56], 35], [[-86, 402, -618, 294], 0], [[4, -30, 36, 90, -110, -153, 331, -180, 0, -15, 19], 3], [[-10, 100, -240, 150], 0], [[10, -41, 45, -40, 40, 9, -18, -20, 20, 0, 1, -6], 15], [[-1, 3, 36, -84, -3, 109, -82, 0, 0, 6], 4], [[6, -46, 105, -69, -15, 19], 2], [[-7, 9, 3, -5], 18], [[9, 2, -9, 0, 10, -3, 0, -1], 11], [[-1, 18, -89, 183, -160, 49], 0], [[-40, 250, -430, 230], 0], [[5, -6, -1, 36, -19, -10, 6, 1, -1, -1], 16], [[10, -1, -12, 28, -30, 15, -4, 4, 3, -3], 12], [[9, 9, -6, -2], 12], [[-6, 55, -201, 344, -269, 75], 0], [[1, -18, 56, -60, 19], 1], [[-2, 29, -126, 235, -194, 59], 0], [[3, -4, -2, 8, -3, -1], 12], [[-2, 1, -1, -5, 6, -1], 13], [[-2, -5, 6, 3, -5, 1], 6], [[-7, 28, -35, 15], 2], [[-1, -2, 10, -7, -5, 10, -4], 6], [[-3, 16, -19, 6], 2], [[-3, 5, -2, 0, 5, -5], 7], [[1, 0, -1], 9], [[-2, 4, -3, 1], 4], [[3, -29, 79, -81, 28], 1], [[1, -1], 8], [[1, -23, 35, -4, -45, 53, -21, 1, -2, 1], 6], [[-7, 31, -34, 0, 6], 3], [[8, -56, 123, -114, 39], 1], [[4, -5, -1, 6, -2, -2], 9], [[4, -17, 20, -7, -2, 1], 4], [[-1, 1, -1], 4], [[-3, 4, -1], 4], [[-1, 1], 6], [[1, -7, 12, -8, 2], 3], [[-1, 1], 5], [[1, -3, 5, -2], 4], [[1], 5], [[6, -22, 30, -18, 4], 3], [[-2, 3, -1], 5], [[2, -8, 12, -7, 1], 3], [[-1, 3, -2], 6], [[-2, 15, -43, 54, -30, 6], 2], [[1, -1], 8]], nothing, [[[1575], 0], [[1575], 72], [[-32, 63, 0, -128, 0, 360, -368, 0, 0, 48], 3], [[240, -780, 555], 0], [[120, -192, 180, -60, 40, 0, -78, -60, 90, 0, 10, -36, 0, 0, 0, 0, 1], 14], [[15], 36], [[30, -228, 576, -564, 177], 0], [[135, -495, 450], 0], [[100, 0, -60, 64, 0, 0, -20, 0, 6], 36], [[-45], 48], [[-45], 24], [[10, 0, 12, -56, 45, 0, 10, 0, -12], 12], [[-9, 36, -18], 24], [[5, -80, 255, -290, 110], 0], [[-1, 16, -36, 28, -7], 24], [[-21, 104, -120, 0, 48], 2], [[-9, 16, 0, 0, 4], 38], [[8, -16, -2, 28, -4, -12, 0, 0, 1], 8], [[4, -52, 191, -241, 97], 0], [[1, -4, -5, 37, -28, -59, 112, -54, 0, -5, 4], 4], [[-1], 18], [[11, -54, 85, -54, 11], 2], [[-15, 75, -120, 60], 1], [[], 0], [[], 0], [[], 0], [[8, -34, 17, 40, 7, -161, 201, -84, 8, -16, 8], 4], [[-8, 46, -92, 48], 1], [[4, -14, 16, -3], 25], [[14, -135, 383, -408, 140], 0], [[-2, -2, 10, -15, -2, 28, -24, 0, 0, 1], 5], [[3], 12], [[-6, 4, 5, -10, 4], 6], [[-8, 16, -18, 8, -1], 26], [[-2, 6, -7, 0, 16, -13], 6], [[4, -29, 54, -37, 8], 2], [[-10, 73, -210, 269, -150, 28], 1], [[-6, 13, -6, -2, 0, 1], 5], [[1, -2, 1], 12], [[3, -23, 45, -32, 7], 2], [[-7, 17, -13, 3], 3], [[], 0], [[1, -10, 25, -19, 4], 2], [[-6, 14, -8, 0, 1], 4], [[1], 20], [[-2, 7, -5], 4], [[], 0], [[], 0], [[], 0], [[-1, 15, -66, 106, -68, 14], 1], [[-2, 7, -6, 1], 3], [[], 0], [[12, -56, 73, -19, -16, 8], 3], [[4, -4, 2], 27], [[-2, 0, 0, 1], 15], [[-2, 1], 13], [[-2, 5, -4], 3], [[-1, 0, -1, 1], 13], [[-2, 30, -106, 153, -91, 18], 1], [[3, -23, 41, -18, -5, 4], 3], [[-1], 6], [[8, -44, 74, -48, 10], 2], [[], 0], [[], 0], [[], 0], [[-630, 945], 0], [[594, -280, 0, 0, 210, -189, 0, 15, 0, 0, -35], 35], [[-87, 459, -711, 318], 0], [[8, -42, 45, 50, -78, -162, 362, -204, 0, -24, 24], 3], [[-15, 120, -270, 180], 0], [[25, -51, 55, -10, 10, 8, -23, -10, 15, 0, 2, -6], 15], [[-4, 3, 23, -50, -3, 118, -105, 0, 0, 9], 4], [[6, -53, 120, -66, -24, 24], 2], [[6, 3, -4, -3, 3, 2], 19], [[6, -1, -9, 0, 11, -3, 0, -1], 11], [[-1, 19, -108, 223, -184, 50], 0], [[-45, 285, -495, 255], 0], [[9, -15, 26, -15, 5, -9, 0, 4, -5], 15], [[-9, 1, -6, 30, -50, 27, -6, 4, 6, -6], 12], [[-10, 3, -3, 1], 12], [[-4, 56, -235, 410, -301, 74], 0], [[2, -22, 71, -75, 24], 1], [[-1, 30, -150, 283, -219, 57], 0], [[-3, 6, -6, 6, -3], 12], [[2, -1, 2, -8, 8], 13], [[3, -5, 0, 9, -6, 2], 6], [[-11, 39, -44, 16], 2], [[1, -4, 7, -3, -9, 14, -6], 6], [[-4, 19, -27, 9], 2], [[-1, -3, 5, -4, -1, 5, -4], 6], [[-1, 1, 1], 10], [[-4, 6, -3], 4], [[4, -38, 101, -97, 30], 1], [[-1, 1], 7], [[1, -3, -11, 25, 6, -56, 57, -19, 2, -3, 1], 5], [[-11, 38, -36, 0, 9], 3], [[9, -69, 153, -131, 38], 1], [[2, -4, -1, 6, -1, -2], 9], [[6, -23, 23, -4, -3, 1], 4], [[-1, 2, -1], 4], [[1, -3, 5, -2], 3], [[2, -1], 7], [[2, -12, 17, -8, 1], 3], [[-1, 1], 5], [[-5, 7, -2], 5], [[-1, 1], 4], [[9, -32, 38, -17, 2], 3], [[-3, 4, -1], 5], [[2, -12, 17, -8, 1], 3], [[-3, 4, -1], 6], [[-2, 21, -60, 67, -30, 4], 2], [[-1, 1], 7]], nothing, [[[3150], 0], [[3150], 60], [[6, 0, 0, -208, 423, 0, -556, 0, 423, -208, 0, 0, 6], 0], [[795, -1560, 795], 0], [[-20, -24, 0, 115, -240, 480, -592, 480, -240, 115, 0, -24, -20], 9], [[30], 30], [[207, -792, 1152, -792, 207], 0], [[495, -1080, 495], 0], [[30, -64, 24, 0, -70, 0, 24, -64, 30], 28], [[45], 40], [[45], 20], [[3, -16, 42, 0, -40, 0, 42, -16, 3], 8], [[18, -18, 18], 20], [[85, -340, 510, -340, 85], 0], [[7, -16, 18, -16, 7], 20], [[6, 0, -141, 292, -141, 0, 6], 0], [[2, 0, -9, 36, -9, 0, 2], 30], [[8, -7, -26, 56, -26, -7, 8], 5], [[56, -248, 382, -248, 56], 0], [[-13, 43, -33, -100, 204, -100, -33, 43, -13], 3], [[-2], 15], [[5, -30, 72, -96, 72, -30, 5], 0], [[15, -90, 150, -90, 15], 0], [[], 0], [[], 0], [[], 0], [[1, -2, 1, -44, 144, -164, -27, 188, -27, -164, 144, -44, 1, -2, 1], 0], [[6, -52, 98, -52, 6], 0], [[3, -4, -1, -4, 3], 20], [[133, -516, 772, -516, 133], 0], [[-2, 5, -2, -34, 72, -34, -2, 5, -2], 3], [[-3], 10], [[-1, 14, -32, 14, -1], 4], [[1, -4, 1, -2, 1, -4, 1], 20], [[1, -23, 44, -23, 1], 5], [[1, -13, 34, -44, 34, -13, 1], 0], [[24, -134, 316, -412, 316, -134, 24], 0], [[-2, 10, -16, 10, -2], 3], [[-1, 2, -1], 10], [[1, -8, 24, -34, 24, -8, 1], 0], [[-1, 5, -8, 5, -1], 1], [[], 0], [[-2, 9, -12, 9, -2], 1], [[7, -12, 7], 3], [[2], 17], [[2, -4, 2], 3], [[], 0], [[], 0], [[], 0], [[5, -33, 85, -114, 85, -33, 5], 0], [[1, -2, 1], 2], [[], 0], [[1, -2, -23, 94, -142, 94, -23, -2, 1], 0], [[-2, 2, -2], 22], [[-1, 0, 0, 3, 0, 0, -1], 10], [[-1, 3, -1], 10], [[1, -4, 1], 2], [[-1, 1, -2, 1, -1], 10], [[11, -63, 151, -200, 151, -63, 11], 0], [[-8, 36, -58, 36, -8], 2], [[1], 5], [[4, -21, 55, -76, 55, -21, 4], 0], [[], 0], [[], 0], [[], 0], [[-1575, 1575], 0], [[70, -405, 378, -210, 0, 0, 210, -378, 405, -70], 27], [[-405, 1170, -1170, 405], 0], [[-3, 3, 0, 116, -308, 207, 278, -278, -207, 308, -116, 0, -3, 3], 0], [[-105, 390, -390, 105], 0], [[5, -4, -15, 35, -70, 96, -96, 70, -35, 15, 4, -5], 10], [[21, -65, 6, 205, -205, -6, 65, -21], 3], [[-3, 3, 72, -215, 215, -72, -3, 3], 0], [[-3, 14, -6, 6, -14, 3], 14], [[6, -3, -12, 12, 3, -6], 8], [[-30, 155, -310, 310, -155, 30], 0], [[-255, 780, -780, 255], 0], [[1, 0, 0, -5, -4, -1, 0, 0, 1, 4, 5, 0, 0, -1], 9], [[-3, 8, -26, 24, 20, -20, -24, 26, -8, 3], 8], [[7, 6, -6, -7], 9], [[-69, 330, -636, 636, -330, 69], 0], [[-3, 32, -72, 72, -32, 3], 0], [[-46, 213, -421, 421, -213, 46], 0], [[3, -3, -6, 6, 3, -3], 9], [[-2, 1, 6, -6, -1, 2], 10], [[1, -6, 24, -24, 6, -1], 4], [[-1, 14, -35, 35, -14, 1], 0], [[12, -34, 34, -12], 6], [[3, -14, 14, -3], 1], [[-1, 0, 3, -13, 13, -3, 0, 1], 4], [[-1, 0, 0, 1], 7], [[1, -1], 3], [[-9, 53, -118, 118, -53, 9], 0], [[-2, 2], 7], [[6, -20, 24, 24, -101, 101, -24, -24, 20, -6], 3], [[15, -58, 58, -15], 2], [[-20, 101, -204, 204, -101, 20], 0], [[4, -11, 11, -4], 7], [[3, -14, 31, -31, 14, -3], 2], [[], 0], [[-1, 2, -2, 1], 2], [[-1, 1], 5], [[1, -3, 6, -6, 3, -1], 1], [[1, -1], 4], [[-1, 3, -3, 1], 3], [[1, -1], 3], [[-1, 7, -18, 30, -30, 18, -7, 1], 0], [[2, -2], 4], [[1, -4, 6, -6, 4, -1], 1], [[-1, 2, -2, 1], 4], [[-2, 14, -39, 63, -63, 39, -14, 2], 0], [[1, -1], 6]], [[[2100], 0], [[2100], 66], [[2, 0, 0, -112, 180, 0, -94, 0, 378, -336, 0, 0, 34], 0], [[405, -1080, 615], 0], [[15, 0, 20, 0, 180, -504, 300, 0, -55, 0, -39, -20, 45, 0, 10, -12], 10], [[20], 33], [[60, -412, 834, -636, 158], 0], [[270, -675, 480], 0], [[64, 0, 0, 10, 0, -24, 64, -45, 0, 0, 0, 6], 31], [[-60], 44], [[-60], 22], [[-8, 0, 0, 7, 0, 12, -56, 36, 0, 6, 0, -3], 9], [[-18, 36, -24], 22], [[22, -166, 381, -316, 82], 0], [[-5, 20, -36, 32, -8], 22], [[2, 0, -60, 162, -126, 0, 34], 0], [[2, 0, 0, 26, -18, 0, 2], 33], [[2, -3, -4, 4, -10, -6, 18, -1, -4], 5], [[16, -123, 284, -254, 73], 0], [[-1, 14, -23, -1, 30, -19, -63, 90, -29, 0, -3, 1], 3], [[], 0], [[-4, 38, -96, 93, -34, 3], 1], [[5, -45, 120, -120, 40], 0], [[], 0], [[], 0], [[], 0], [[2, -4, 41, -98, 67, 28, 21, -194, 175, -44, 10, -11, 2], 2], [[2, -28, 71, -84, 34], 0], [[-1, 8, -10, 12, -5], 22], [[37, -262, 561, -449, 116], 0], [[2, -6, 3, 12, -15, -6, 21, -8], 4], [[-4], 11], [[-9, 4, 8, -6, 1], 6], [[2, -7, 12, -16, 8, -1], 23], [[-4, 2, -5, 2, 11, -5], 6], [[-1, 17, -51, 56, -22, 2], 1], [[1, -30, 166, -334, 302, -118, 16], 0], [[5, -18, 20, -2, -2], 4], [[-1, 2, -2], 11], [[-1, 15, -44, 47, -18, 2], 1], [[4, -16, 18, -6], 2], [[], 0], [[4, -17, 22, -10, 1], 2], [[3, -10, 12, -5], 3], [[1, -1], 18], [[1, -5, 7, -3], 3], [[], 0], [[], 0], [[], 0], [[-6, 47, -113, 112, -46, 6], 1], [[-4, 6, -2], 3], [[], 0], [[-1, 38, -94, 80, -11, -11, 2], 2], [[2, -1, 2], 25], [[-1, 0, 0, 2, 0, 0, -1], 11], [[-1, 2, -1], 11], [[-1, 2, -1], 3], [[-1, 1, 0, 1, -1], 11], [[-12, 79, -178, 167, -65, 8], 1], [[-1, 15, -43, 43, -13, -3, 1], 2], [[], 0], [[-3, 30, -79, 79, -30, 3], 1], [[], 0], [[], 0], [[], 0], [[-945, 1155], 0], [[336, 0, 0, 84, 0, 189, -315, 0, -189, 210, 0, 0, -105], 30], [[-163, 726, -894, 317], 0], [[2, 0, 36, -139, 117, 24, -70, -189, 369, -156, 0, -21, 13], 1], [[-50, 220, -320, 160], 0], [[5, 0, 4, 0, 76, -121, 50, 16, -19, 8, -9, 0, 0, -1, 1], 11], [[7, -27, 9, 26, -33, -9, 105, -72, 0, 0, 4], 3], [[2, 21, -111, 153, -63, -21, 13], 1], [[1, -3, 3, -4, -3], 18], [[3, -3, 0, 4, -3, -3, 4], 9], [[-4, 57, -204, 287, -166, 32], 0], [[-105, 465, -615, 240], 0], [[-5, 35, -60, 26, 0, -11, 0, 0, -1, 0, 1], 14], [[-8, 0, -4, 3, -6, 38, -45, 15, -4, 2, 3], 10], [[-6, 3, -9, 3, 3], 10], [[-11, 127, -411, 532, -290, 54], 0], [[11, -49, 86, -60, 13], 1], [[-6, 78, -273, 370, -203, 37], 0], [[-3, 5, -3, 6, -6, 2, 2], 10], [[-1, 2, -3, 2, -1, 3, -6, 1, 1], 10], [[4, -7, -3, 7, -3], 6], [[5, -29, 53, -34, 6], 1], [[2, -2, 4, -4, -6, 8, -1], 6], [[1, -10, 21, -18, 4], 1], [[1, -2, -1, 4, -3, -2, 1], 5], [[-1, -2, 1], 9], [[3, -7, 4], 3], [[-1, 19, -83, 130, -81, 16], 0], [[1, -1, 0, -1, 1], 6], [[-2, 13, -16, -5, 22, 13, -56, 36, -5, 2, -1], 4], [[5, -29, 51, -30, 0, 4], 2], [[-2, 34, -137, 201, -115, 20], 0], [[1, -1, 0, 5, -4, -3, 3], 6], [[-3, 20, -33, 19, -1, -1], 3], [[-2, 1], 4], [[-2, 2], 4], [[-2, 2], 6], [[-1, 10, -19, 12, -2], 2], [[], 0], [[3, -7, 5, -1], 4], [[], 0], [[-5, 29, -48, 30, -6], 2], [[1, -3, 2], 4], [[7, -16, 12, -2], 3], [[3, -6, 4], 5], [[-13, 55, -85, 56, -14, 1], 2], [[1, -2, 1], 6]], nothing, [[[4200], 0], [[4200], 60], [[9, 0, 0, -256, 603, 0, -608, 0, 603, -256, 0, 0, 9], 0], [[1060, -2080, 1060], 0], [[15, -20, -21, 0, 145, -240, 585, -888, 585, -240, 145, 0, -21, -20, 15], 8], [[-40], 30], [[278, -1048, 1548, -1048, 278], 0], [[660, -1440, 660], 0], [[-15, 0, 0, 0, -90, 0, 0, 0, -15], 28], [[15], 40], [[15], 20], [[-6, -24, 54, 0, -60, 0, 54, -24, -6], 8], [[3, -18, 3], 20], [[114, -452, 682, -452, 114], 0], [[-8, 22, -8], 21], [[9, 0, -201, 408, -201, 0, 9], 0], [[-3, 0, 27, -24, 27, 0, -3], 30], [[-1, 10, -16, -26, 58, -26, -16, 10, -1], 4], [[75, -330, 510, -330, 75], 0], [[-15, 64, -51, -118, 240, -118, -51, 64, -15], 3], [[-4], 15], [[7, -40, 97, -128, 97, -40, 7], 0], [[20, -120, 200, -120, 20], 0], [[], 0], [[], 0], [[], 0], [[3, -3, 0, -48, 196, -239, -11, 212, -11, -239, 196, -48, 0, -3, 3], 0], [[9, -64, 118, -64, 9], 0], [[-4, 7, -4], 21], [[176, -692, 1024, -692, 176], 0], [[-2, 12, -8, -50, 88, -50, -8, 12, -2], 3], [[-1], 10], [[2, 18, -44, 18, 2], 4], [[5, -14, 5], 22], [[2, 3, -30, 52, -30, 3, 2], 4], [[3, -15, 41, -56, 41, -15, 3], 0], [[31, -178, 422, -552, 422, -178, 31], 0], [[-2, 19, -36, 19, -2], 3], [[2], 11], [[1, -11, 33, -44, 33, -11, 1], 0], [[-2, 7, -10, 7, -2], 1], [[], 0], [[-2, 6, -8, 6, -2], 1], [[-1, 8, -14, 8, -1], 2], [[-1, 0, 2, 0, -1], 15], [[3, -6, 3], 3], [[], 0], [[], 0], [[], 0], [[6, -44, 114, -152, 114, -44, 6], 0], [[-1, 2, -1], 2], [[], 0], [[3, -3, -36, 133, -194, 133, -36, -3, 3], 0], [[1, -2, 1], 22], [[3], 13], [[3], 11], [[-2, 4, -2], 2], [[1, -2, 1], 11], [[14, -84, 203, -266, 203, -84, 14], 0], [[-13, 54, -82, 54, -13], 2], [[-1], 5], [[4, -30, 75, -98, 75, -30, 4], 0], [[], 0], [[], 0], [[], 0], [[-2100, 2100], 0], [[-280, 216, 378, -714, 0, 0, 714, -378, -216, 280], 27], [[-540, 1560, -1560, 540], 0], [[-6, 3, 0, 136, -435, 288, 304, -304, -288, 435, -136, 0, -3, 6], 0], [[-140, 520, -520, 140], 0], [[5, 0, -35, 25, -50, 155, -155, 50, -25, 35, 0, -5], 10], [[26, -98, 12, 244, -244, -12, 98, -26], 3], [[-6, 3, 105, -300, 300, -105, -3, 6], 0], [[6, -6, 6, -6], 15], [[6, -4, -6, 6, 4, -6], 8], [[-40, 206, -414, 414, -206, 40], 0], [[-340, 1040, -1040, 340], 0], [[1, 0, 0, -5, 1, 4, 45, -45, -4, -1, 5, 0, 0, -1], 9], [[3, 13, -38, 24, 30, -30, -24, 38, -13, -3], 8], [[8, 6, -6, -8], 9], [[-92, 438, -850, 850, -438, 92], 0], [[-6, 37, -89, 89, -37, 6], 0], [[-59, 289, -559, 559, -289, 59], 0], [[4, -4, -9, 9, 4, -4], 9], [[1, -3, -1, 9, -9, 1, 3, -1], 9], [[-1, -9, 30, -30, 9, 1], 4], [[-2, 18, -47, 47, -18, 2], 0], [[-1, -1, 17, -40, 40, -17, 1, 1], 4], [[3, -9, 9, -3], 1], [[-1, 2, 4, -15, 15, -4, -2, 1], 4], [[], 0], [[-1, 1, -1, 1], 2], [[-11, 73, -156, 156, -73, 11], 0], [[1, -3, 3, -1], 6], [[6, -28, 38, 24, -118, 118, -24, -38, 28, -6], 3], [[23, -85, 85, -23], 2], [[-27, 135, -272, 272, -135, 27], 0], [[-1, 3, 4, -16, 16, -4, -3, 1], 5], [[5, -23, 43, -43, 23, -5], 2], [[-1, 1], 3], [[1, -3, 3, -1], 2], [[], 0], [[1, -5, 8, -8, 5, -1], 1], [[-1, 1], 4], [[-2, 4, -4, 2], 3], [[-1, 1], 3], [[-1, 9, -26, 40, -40, 26, -9, 1], 0], [[], 0], [[1, -3, 4, -4, 3, -1], 1], [[-2, 6, -6, 2], 4], [[-2, 18, -53, 85, -85, 53, -18, 2], 0], [[3, -3], 6]], [[[2240], 0], [[2240], 69], [[-32, 108, 0, -360, 0, 540, -352, 0, 0, 32], 3], [[408, -1088, 744], 0], [[-60, 150, -296, 360, -240, 220, 0, -78, -80, 90, 0, 10, -12], 13], [[], 0], [[76, -400, 792, -720, 252], 0], [[204, -748, 540], 0], [[-20, 0, -24, 64, -30, 0, 0, 0, 6], 35], [[-40], 46], [[-40], 23], [[-29, 0, 66, -56, 6, 0, 6, 0, -3], 12], [[-12, 20, -18], 23], [[20, -138, 342, -358, 136], 0], [[-4, 12, -18, 20, -8], 23], [[-36, 184, -180, 0, 32], 2], [[], 0], [[-4, 30, -32, -14, 28, -4, -4], 7], [[9, -91, 256, -281, 107], 0], [[2, -4, -38, 124, -93, -59, 114, -48, 0, -1, 3], 4], [[], 0], [[-4, 22, -60, 84, -60, 18], 1], [[-20, 95, -130, 50], 1], [[-5], 17], [[], 0], [[], 0], [[-4, 21, -40, -17, 118, -35, -208, 251, -92, 2, -10, 10], 3], [[-8, 60, -88, 32], 1], [[4, 0, 8, -4], 24], [[39, -237, 524, -507, 185], 0], [[-1, -6, 42, -46, -1, 30, -14], 5], [[], 0], [[-13, 22, -2, -6, 1], 6], [[2, 1, 2, -7, 6, -2], 24], [[-3, 23, -30, 2, 9, -5], 6], [[-1, 10, -28, 44, -33, 10], 1], [[4, -36, 138, -274, 306, -188, 48], 0], [[-8, 16, -8, -2], 5], [[], 0], [[5, -21, 35, -27, 8], 2], [[-4, 10, -9, 3], 3], [[], 0], [[2, -8, 14, -11, 3], 2], [[-6, 14, -8], 4], [[], 0], [[-2, 7, -3], 4], [[2], 9], [[-1], 16], [[-1], 8], [[-4, 28, -75, 100, -69, 19], 1], [[-1, 2, -2], 3], [[], 0], [[-3, 28, -86, 104, -43, -10, 10], 2], [[-4, 2, 2], 26], [[], 0], [[], 0], [[-1, 2, -1], 3], [[], 0], [[1, -12, 57, -130, 161, -106, 29], 0], [[7, -34, 50, -25, -1, 3], 3], [[], 0], [[-2, 16, -47, 68, -49, 15], 1], [[1], 15], [[], 0], [[], 0], [[-952, 1288], 0], [[210, -378, 405, -105, 0, 0, 273, -189, 0, 120], 33], [[-176, 696, -936, 432], 0], [[16, -61, 63, 162, -198, -225, 459, -208, 0, -12, 20], 3], [[-20, 184, -360, 180], 0], [[-15, 30, -66, 55, -50, 50, 4, -24, -20, 20, 0, 1, -1], 14], [[-5, 3, 90, -168, -3, 141, -78, 0, 0, 4], 4], [[15, -99, 181, -105, -12, 20], 2], [[6, -15, 9, 3, -3], 17], [[-3, 9, 0, -12, 0, 9, -3], 10], [[-4, 45, -161, 263, -207, 64], 0], [[-89, 434, -654, 315], 0], [[-5, -15, 6, -2, 41, -19, -5, 4, 2, -1], 15], [[13, -16, -30, 60, -35, 3, -2, 4, 0, -3], 12], [[-6, -6, 12, -6], 11], [[-17, 125, -359, 511, -371, 109], 0], [[4, -31, 69, -64, 20], 1], [[-9, 71, -225, 345, -263, 81], 0], [[-2, 5, 4, -13, 9, -3], 11], [[2, -6, -1, 7, -6, 3, -1], 12], [[5, -18, 13, 1, -4, 1], 6], [[-11, 35, -38, 12], 2], [[1, -12, 26, -18, -2, 7, -4], 6], [[-3, 15, -16, 4], 2], [[-3, 13, -13, 0, 5, -2], 7], [[1, 0, -1], 9], [[-1, 2, -2, 1], 4], [[9, -52, 108, -95, 31], 1], [[3, -2], 8], [[2, 9, -46, 77, -27, -53, 62, -23, 0, -1, 2], 5], [[-17, 57, -42, 0, 4], 3], [[-2, 25, -98, 176, -147, 48], 0], [[-3, 9, -5, -4, 7, -2], 8], [[-1, 11, -26, 28, -11, -1, 2], 3], [[], 0], [[1, -1, 1, -1], 3], [[], 0], [[2, -6, 9, -7, 2], 3], [[-1, 1], 5], [[1, -4, 5, -2], 4], [[], 0], [[-3, 12, -26, 31, -21, 6], 2], [[-2, 2, -1], 5], [[-1, 3, -6, 8, -6, 2], 2], [[-2, 4, -2], 6], [[1, -8, 30, -54, 59, -36, 9], 1], [[-1, 2], 7]], nothing, [[[4480], 0], [[4480], 60], [[12, 0, 0, -320, 612, 0, -736, 0, 612, -320, 0, 0, 12], 0], [[1120, -2240, 1120], 0], [[15, -20, -72, 0, 180, -240, 645, -1016, 645, -240, 180, 0, -72, -20, 15], 8], [[64], 30], [[280, -1120, 1680, -1120, 280], 0], [[720, -1520, 720], 0], [[-30, 64, -24, 0, -100, 0, -24, 64, -30], 28], [[-44], 40], [[-44], 20], [[6, -32, 48, 0, -64, 0, 48, -32, 6], 8], [[-18, 16, -18], 20], [[116, -488, 748, -488, 116], 0], [[-7, 16, -14, 16, -7], 20], [[12, 0, -204, 384, -204, 0, 12], 0], [[4, 0, -36, 64, -36, 0, 4], 30], [[-1, 8, -12, -32, 74, -32, -12, 8, -1], 4], [[80, -360, 560, -360, 80], 0], [[-18, 66, -54, -122, 256, -122, -54, 66, -18], 3], [[], 0], [[6, -40, 110, -152, 110, -40, 6], 0], [[24, -136, 224, -136, 24], 0], [[-1, 0, 4, 0, -6, 0, 4, 0, -1], 12], [[-5], 24], [[-5], 12], [[2, -4, 2, -52, 207, -259, -15, 254, -15, -259, 207, -52, 2, -4, 2], 0], [[12, -80, 152, -80, 12], 0], [[-3, 4, 2, 4, -3], 20], [[180, -740, 1120, -740, 180], 0], [[-2, 10, -4, -46, 84, -46, -4, 10, -2], 3], [[4], 10], [[-2, 16, -24, 16, -2], 4], [[-1, 4, -1, 0, -1, 4, -1], 20], [[2, -22, 44, -22, 2], 5], [[2, -17, 53, -78, 53, -17, 2], 0], [[29, -180, 460, -618, 460, -180, 29], 0], [[-2, 15, -26, 15, -2], 3], [[1, -4, 1], 10], [[1, -12, 40, -58, 40, -12, 1], 0], [[-2, 10, -16, 10, -2], 1], [[], 0], [[-3, 16, -26, 16, -3], 1], [[-1, 10, -18, 10, -1], 2], [[], 0], [[4, -10, 4], 3], [[-2], 8], [[1], 14], [[1], 7], [[6, -46, 130, -180, 130, -46, 6], 0], [[3, -6, 3], 2], [[-1], 6], [[2, -4, -31, 131, -196, 131, -31, -4, 2], 0], [[2, -4, 2], 22], [[1, 0, 0, -2, 0, 0, 1], 10], [[1, -2, 1], 10], [[2, -4, 2], 2], [[1, -1, 0, -1, 1], 10], [[13, -85, 225, -306, 225, -85, 13], 0], [[-12, 52, -80, 52, -12], 2], [[], 0], [[4, -30, 86, -120, 86, -30, 4], 0], [[-1, 2, -1], 12], [[1], 8], [[1], 4], [[-2240, 2240], 0], [[315, -405, 378, -630, 0, 0, 630, -378, 405, -315], 27], [[-560, 1680, -1680, 560], 0], [[-6, 6, 0, 160, -466, 306, 368, -368, -306, 466, -160, 0, -6, 6], 0], [[-160, 560, -560, 160], 0], [[9, -9, -35, 35, -70, 182, -182, 70, -35, 35, 9, -9], 10], [[36, -96, 12, 256, -256, -12, 96, -36], 3], [[-6, 6, 102, -294, 294, -102, -6, 6], 0], [[-9, 17, -6, 6, -17, 9], 14], [[6, -5, -15, 15, 5, -6], 8], [[-40, 220, -460, 460, -220, 40], 0], [[-360, 1120, -1120, 360], 0], [[-1, 0, 5, -5, -19, 36, -10, 10, -36, 19, 5, -5, 0, 1], 9], [[-3, 19, -40, 24, 32, -32, -24, 40, -19, 3], 8], [[-9, 9, -9, 9], 9], [[-90, 460, -930, 930, -460, 90], 0], [[-6, 46, -116, 116, -46, 6], 0], [[-58, 302, -618, 618, -302, 58], 0], [[-3, 8, -15, 15, -8, 3], 9], [[2, -3, 9, -9, 3, -2], 10], [[1, -9, 20, -20, 9, -1], 4], [[-2, 22, -58, 58, -22, 2], 0], [[-1, 12, -33, 33, -12, 1], 5], [[6, -26, 26, -6], 1], [[-1, 1, 3, -15, 15, -3, -1, 1], 4], [[-1, -1, 1, 1], 7], [[-1, 3, -3, 1], 2], [[-12, 80, -180, 180, -80, 12], 0], [[-2, 2], 7], [[6, -28, 40, 20, -126, 126, -20, -40, 28, -6], 3], [[24, -80, 80, -24], 2], [[-26, 144, -306, 306, -144, 26], 0], [[1, 5, -16, 16, -5, -1], 6], [[4, -21, 44, -44, 21, -4], 2], [[1, -1], 3], [[-1, 3, -3, 1], 2], [[2, -2], 5], [[1, -6, 13, -13, 6, -1], 1], [[1, -1], 4], [[-2, 7, -7, 2], 3], [[], 0], [[-1, 8, -28, 51, -51, 28, -8, 1], 0], [[-1, 3, -3, 1], 3], [[1, -6, 14, -14, 6, -1], 1], [[-1, 4, -4, 1], 4], [[-2, 17, -58, 103, -103, 58, -17, 2], 0], [[1, -1], 6]], [[[2268], 0], [[2268], 70], [[-48, 126, 0, -258, 0, 522, -432, 0, 0, 54], 3], [[381, -1128, 759], 0], [[45, 0, 120, -424, 315, -60, 115, 0, -141, -60, 105, 0, 20, -24, 0, 0, 0, 0, 1], 12], [[-36], 35], [[54, -372, 846, -756, 240], 0], [[216, -729, 594], 0], [[81], 34], [[], 0], [[], 0], [[-3, 0, 36, -72, 36, 0, 12, 0, -9], 12], [[], 0], [[15, -132, 372, -390, 135], 0], [[], 0], [[-42, 150, -174, 0, 54], 2], [[18, -42, 18, 0, -6], 37], [[-1, -2, 23, -22, -10, 26, -3, -8, 0, 0, 1], 6], [[8, -91, 278, -316, 117], 0], [[2, -9, -15, 71, -61, -73, 137, -55, 0, -5, 4], 4], [[], 0], [[-2, 23, -80, 108, -62, 13], 1], [[1, -25, 110, -154, 66], 0], [[1, 0, 0, 0, 0, 0, -4, 0, 1], 14], [[3], 28], [[3], 14], [[21, -60, 33, 84, -24, -231, 270, -84, 9, -18, 9], 4], [[-12, 75, -108, 54], 1], [[], 0], [[28, -225, 559, -546, 181], 0], [[-2, 0, 18, -37, -2, 37, -18, 0, 0, 1], 5], [[], 0], [[-3, 12, 0, -12, 3], 6], [[], 0], [[9, -15, 3, 15, -12], 7], [[9, -45, 66, -39, 9], 2], [[1, -22, 131, -314, 351, -186, 39], 0], [[-10, 19, -6, -4, 0, 1], 5], [[], 0], [[7, -34, 54, -34, 7], 2], [[1, -10, 20, -13, 2], 2], [[], 0], [[2, -17, 29, -18, 4], 2], [[1, -7, 16, -11, 0, 1], 3], [[-1, 1], 19], [[-3, 9, -6], 4], [[], 0], [[], 0], [[], 0], [[-2, 30, -98, 132, -77, 17], 1], [[-4, 9, -4, 1], 3], [[-1], 7], [[-3, 24, -81, 99, -33, -18, 9], 2], [[-3], 26], [[], 0], [[], 0], [[-3, 6, -3], 3], [[], 0], [[-7, 56, -159, 195, -109, 23], 1], [[7, -33, 52, -26, -5, 4], 3], [[], 0], [[-1, 18, -64, 92, -55, 11], 1], [[1, -1, 1], 14], [[], 0], [[], 0], [[-945, 1323], 0], [[420, 0, 405, -595, 0, -189, 378, 0, 0, 15, 0, 0, -56], 33], [[-147, 702, -990, 429], 0], [[12, -81, 81, 96, -162, -225, 501, -228, 0, -27, 27], 3], [[-26, 190, -374, 220], 0], [[10, 0, 51, -116, 50, -5, 36, 13, -37, -10, 15, -1, 5, -1], 13], [[1, -7, 7, 53, -101, -7, 150, -111, 0, 0, 9], 3], [[15, -87, 165, -99, -27, 27], 2], [[-11, 9, 3, -4, -3], 18], [[-6, 3, 4, -9, -3, 8, -3], 10], [[-2, 38, -173, 306, -229, 62], 0], [[-81, 435, -693, 330], 0], [[5, 0, 0, -19, 10, 0, 10, -5, -15, 5, 1, 0, -1], 13], [[1, -2, -12, 56, -61, 15, -6, 6, 6, -3], 12], [[-3, -1, 9, -3, -2], 11], [[-9, 102, -372, 570, -387, 99], 0], [[3, -39, 96, -84, 27], 1], [[-4, 59, -237, 391, -281, 72], 0], [[4, 0, -9, 7, -1, -1], 12], [[-1, 2, 4, -10, 5], 13], [[1, -6, 7, 5, -8, 1], 6], [[1, -17, 52, -51, 15], 1], [[-3, 11, -11, -6, 14, -5], 7], [[-7, 27, -27, 9], 2], [[-1, 1, 7, -10, -1, 7, -1], 6], [[1, 0, 1], 9], [[1, -5, 6, -2], 3], [[9, -62, 135, -117, 33], 1], [[-3, 1], 9], [[3, -5, -19, 49, -10, -71, 68, -18, 2, -3, 1], 5], [[1, -17, 52, -48, 0, 9], 2], [[-1, 21, -109, 210, -164, 44], 0], [[-1, 8, -7, -4, 5], 8], [[-1, 11, -29, 29, -8, -3, 1], 3], [[-2, 2], 4], [[1, -5, 5, -1], 3], [[-2, 2], 6], [[5, -16, 17, -7, 1], 3], [[-1, 1], 5], [[1, -6, 8, -3], 4], [[-1, 1], 4], [[-2, 18, -43, 42, -18, 3], 2], [[1, -3, 4, -2], 4], [[5, -17, 17, -7, 1], 3], [[-4, 5, -1, -1], 6], [[-6, 39, -81, 76, -33, 6], 2], [[2, -1], 8]], nothing, [[[4536], 0], [[4536], 60], [[15, 0, 0, -384, 621, 0, -576, 0, 621, -384, 0, 0, 15], 0], [[1116, -2304, 1116], 0], [[30, -20, -51, 0, 105, -120, 600, -1160, 600, -120, 105, 0, -51, -20, 30], 8], [[-24], 30], [[258, -1128, 1764, -1128, 258], 0], [[756, -1512, 756], 0], [[15, -64, 84, 0, -70, 0, 84, -64, 15], 28], [[81], 40], [[81], 20], [[15, -40, 30, 0, -10, 0, 30, -40, 15], 8], [[27, -54, 27], 20], [[108, -504, 792, -504, 108], 0], [[9, -36, 54, -36, 9], 20], [[15, 0, -207, 360, -207, 0, 15], 0], [[-1, 0, 9, -40, 9, 0, -1], 30], [[-2, 10, -10, -26, 64, -26, -10, 10, -2], 4], [[81, -378, 594, -378, 81], 0], [[-18, 78, -69, -84, 186, -84, -69, 78, -18], 3], [[-4], 15], [[3, -36, 123, -180, 123, -36, 3], 0], [[30, -150, 246, -150, 30], 0], [[6], 16], [[1], 24], [[1], 12], [[1, -5, 4, -40, 218, -295, 21, 192, 21, -295, 218, -40, 4, -5, 1], 0], [[15, -96, 162, -96, 15], 0], [[3, -12, 27, -12, 3], 20], [[168, -756, 1176, -756, 168], 0], [[-2, 14, -8, -32, 56, -32, -8, 14, -2], 3], [[-3], 10], [[-1, 10, -18, 10, -1], 4], [[1, -6, 18, -26, 18, -6, 1], 20], [[1, 1, -16, 28, -16, 1, 1], 4], [[1, -15, 63, -98, 63, -15, 1], 0], [[22, -164, 482, -680, 482, -164, 22], 0], [[-2, 18, -32, 18, -2], 3], [[-1, 2, -1], 10], [[1, -13, 50, -76, 50, -13, 1], 0], [[-3, 15, -24, 15, -3], 1], [[], 0], [[-3, 21, -36, 21, -3], 1], [[-2, 12, -20, 12, -2], 2], [[-1, 0, 2, 0, -1], 15], [[5, -10, 5], 3], [[], 0], [[], 0], [[], 0], [[5, -45, 146, -214, 146, -45, 5], 0], [[4, -10, 4], 2], [[1], 6], [[1, -5, -26, 129, -198, 129, -26, -5, 1], 0], [[3, -6, 3], 22], [[-1, 0, 0, -1, 0, 0, -1], 10], [[-1, -1, -1], 10], [[3, -6, 3], 2], [[-1, 0, 2, 0, -1], 10], [[9, -78, 243, -348, 243, -78, 9], 0], [[-12, 54, -84, 54, -12], 2], [[-1], 5], [[2, -29, 99, -144, 99, -29, 2], 0], [[], 0], [[1], 8], [[1], 4], [[-2268, 2268], 0], [[595, -405, 0, -84, 0, 0, 84, 0, 405, -595], 27], [[-540, 1728, -1728, 540], 0], [[-6, 9, 0, 168, -513, 324, 288, -288, -324, 513, -168, 0, -9, 6], 0], [[-180, 576, -576, 180], 0], [[4, -9, -5, 5, -45, 218, -218, 45, -5, 5, 9, -4], 10], [[48, -108, 18, 186, -186, -18, 108, -48], 3], [[-6, 9, 99, -288, 288, -99, -9, 6], 0], [[-9, 11, 0, 0, -11, 9], 14], [[3, -4, -15, 15, 4, -3], 8], [[-36, 222, -498, 498, -222, 36], 0], [[-360, 1152, -1152, 360], 0], [[36, -36], 15], [[-3, 28, -42, 12, 5, -5, -12, 42, -28, 3], 8], [[1, -3, 3, -1], 9], [[-78, 450, -984, 984, -450, 78], 0], [[-6, 51, -135, 135, -51, 6], 0], [[-48, 300, -660, 660, -300, 48], 0], [[1, -2, 1, -1, 2, -1], 9], [[1, -1, 0, -2, 2, 0, 1, -1], 9], [[1, -6, 13, -13, 6, -1], 4], [[-3, 27, -72, 72, -27, 3], 0], [[9, -21, 21, -9], 6], [[9, -33, 33, -9], 1], [[-1, 2, 4, -9, 9, -4, -2, 1], 4], [[-1, -1, 1, 1], 7], [[-2, 6, -6, 2], 2], [[-12, 87, -204, 204, -87, 12], 0], [[1, 0, 0, -1], 6], [[2, -28, 53, 1, -90, 90, -1, -53, 28, -2], 3], [[27, -81, 81, -27], 2], [[-21, 147, -336, 336, -147, 21], 0], [[-1, 2, 4, -15, 15, -4, -2, 1], 5], [[3, -21, 48, -48, 21, -3], 2], [[2, -2], 3], [[-1, 5, -5, 1], 2], [[2, -2], 5], [[1, -8, 21, -21, 8, -1], 1], [[1, -1], 4], [[-2, 8, -8, 2], 3], [[1, -1], 3], [[5, -30, 66, -66, 30, -5], 1], [[-1, 4, -4, 1], 3], [[-7, 21, -21, 7], 2], [[-2, 6, -6, 2], 4], [[-1, 13, -61, 127, -127, 61, -13, 1], 0], [[1, -1], 6]], [[[2835], 0], [[2835], 64], [[-96, 279, 0, -480, 0, 531, -288, 0, 0, 9], 3], [[627, -1392, 816], 0], [[60, -120, 315, -480, 435, -300, 180, 0, -24, -60, 45], 12], [[-45], 32], [[150, -612, 1026, -804, 243], 0], [[351, -972, 540], 0], [[-81], 32], [[], 0], [[], 0], [[18, 0, -48, 0, 54, -24], 10], [[], 0], [[48, -246, 447, -366, 117], 0], [[], 0], [[-93, 264, -177, 0, 9], 2], [[27, -48, 27, 0, -3], 34], [[-4, -12, 50, -32, -12, 16, -3], 6], [[28, -170, 334, -278, 81], 0], [[-3, 18, -17, -79, 175, -103, -49, 79, -26], 3], [[3], 16], [[1, -14, 45, -80, 82, -46, 11], 0], [[5, -50, 130, -110, 30], 0], [[5], 16], [[], 0], [[], 0], [[-12, 81, -111, -36, 162, -30, -204, 213, -72, 0, -3, 3], 3], [[-24, 78, -72, 9], 1], [[], 0], [[86, -387, 680, -543, 167], 0], [[3, -4, -24, 62, -42, -4, 18, -6], 4], [[], 0], [[6, -24, 18], 5], [[], 0], [[-12, 36, -27, 0, 3], 6], [[-3, 18, -36, 39, -21, 3], 1], [[15, -82, 228, -360, 332, -170, 37], 0], [[6, -18, 18, -6], 4], [[], 0], [[-3, 12, -27, 30, -16, 4], 1], [[2, -5, 7, -5, 1], 2], [[], 0], [[2, -8, 9, -4], 2], [[2, -8, 8, -3], 3], [[-2, 0, 1], 18], [[-3, 3], 4], [[], 0], [[], 0], [[], 0], [[2, -15, 53, -97, 97, -50, 11], 0], [[1], 4], [[], 0], [[-15, 69, -120, 108, -39, -3, 3], 2], [[3], 24], [[], 0], [[], 0], [[], 0], [[], 0], [[5, -34, 102, -171, 166, -87, 20], 0], [[-3, 22, -49, 47, -16], 2], [[], 0], [[1, -9, 33, -62, 64, -36, 8], 0], [[-1], 14], [[], 0], [[], 0], [[-1323, 1512], 0], [[-210, 0, 0, 210, 0, 189, -105, 0, 0, 105], 30], [[-303, 972, -1116, 444], 0], [[48, -192, 135, 234, -246, -234, 417, -168, 0, -3, 6], 3], [[-55, 296, -400, 140], 0], [[5, -25, 65, -85, 60, -55, 30, 0, -9, -10, 5], 13], [[5, -29, 8, 160, -205, -8, 108, -42], 3], [[48, -171, 216, -99, -3, 6], 2], [[-6, 6, -9, 9, 0, -3], 16], [[-3, -6, 9, 3, -9, 0, 3], 9], [[-15, 97, -240, 304, -188, 47], 0], [[-171, 636, -756, 300], 0], [[-5, 0, 15, 4, -10, 1, -11, 20, -5, 0, -1, 1], 12], [[-12, 6, 28, -20, -24, 38, -16], 10], [[6, -6, -6, 6], 10], [[-45, 228, -516, 609, -372, 93], 0], [[12, -48, 72, -45, 6], 1], [[-26, 142, -333, 404, -253, 66], 0], [[1, -8, 7, 3, -6, 3], 10], [[6, -8, -1, 3, -1, 1], 12], [[-4, 14, -20, 10], 5], [[5, -22, 35, -24, 6], 1], [[7, -23, 30, -15, -1, 2], 6], [[-5, 12, -6], 2], [[1, 3, -8, 10, -5, -1, 2, -1], 5], [[1, 1, -1], 9], [[-1, 1, -1], 4], [[-3, 27, -85, 117, -75, 18], 0], [[-1], 7], [[1, -7, 12, 24, -82, 91, -26, -39, 41, -12], 3], [[5, -40, 65, -27], 2], [[-8, 60, -155, 198, -130, 34], 0], [[2, -10, 13, -7, -1, 3, -1], 7], [[1, -8, 21, -30, 23, -7], 2], [[], 0], [[], 0], [[], 0], [[-1, 3, -6, 6, -3, 1], 2], [[], 0], [[1, -3, 2], 4], [[], 0], [[2, -8, 20, -29, 26, -13, 3], 1], [[1], 6], [[3, -5, 5, -2], 3], [[2, -3, 3, -1], 5], [[-1, 5, -20, 45, -62, 51, -24, 5], 0], [[-1], 7]], nothing, [[[5670], 0], [[5670], 60], [[21, 0, 0, -480, 756, 0, -684, 0, 756, -480, 0, 0, 21], 0], [[1395, -2880, 1395], 0], [[30, -20, -75, 0, 70, -180, 810, -1360, 810, -180, 70, 0, -75, -20, 30], 8], [[6], 30], [[321, -1416, 2196, -1416, 321], 0], [[945, -1890, 945], 0], [[-15, 64, -84, 0, 70, 0, -84, 64, -15], 28], [[-81], 40], [[-81], 20], [[21, -56, 42, 0, -14, 0, 42, -56, 21], 8], [[-27, 54, -27], 20], [[135, -630, 990, -630, 135], 0], [[-9, 36, -54, 36, -9], 20], [[21, 0, -252, 468, -252, 0, 21], 0], [[1, 0, 0, 4, 0, 0, 1], 30], [[-2, 14, -11, -32, 68, -32, -11, 14, -2], 4], [[102, -471, 744, -471, 102], 0], [[-25, 94, -85, -100, 238, -100, -85, 94, -25], 3], [[-2], 15], [[4, -46, 153, -224, 153, -46, 4], 0], [[36, -189, 306, -189, 36], 0], [[1, 0, -4, 0, 6, 0, -4, 0, 1], 12], [[5], 24], [[5], 12], [[2, -7, 5, -56, 259, -356, 39, 228, 39, -356, 259, -56, 5, -7, 2], 0], [[21, -120, 198, -120, 21], 0], [[-3, 12, -27, 12, -3], 20], [[210, -945, 1470, -945, 210], 0], [[-2, 16, -10, -42, 76, -42, -10, 16, -2], 3], [[3], 10], [[1, 14, -30, 14, 1], 4], [[-1, 6, -18, 26, -18, 6, -1], 20], [[2, 2, -23, 38, -23, 2, 2], 4], [[2, -21, 78, -118, 78, -21, 2], 0], [[26, -208, 604, -844, 604, -208, 26], 0], [[-2, 22, -40, 22, -2], 3], [[1, -2, 1], 10], [[1, -16, 62, -94, 62, -16, 1], 0], [[-3, 18, -30, 18, -3], 1], [[], 0], [[-5, 25, -42, 25, -5], 1], [[-2, 15, -28, 15, -2], 2], [[-1, 0, 0, 0, -1], 15], [[7, -14, 7], 3], [[], 0], [[], 0], [[], 0], [[6, -57, 183, -264, 183, -57, 6], 0], [[5, -10, 5], 2], [[1], 6], [[2, -7, -28, 162, -258, 162, -28, -7, 2], 0], [[-3, 6, -3], 22], [[1, 0, 0, 1, 0, 0, 1], 10], [[1, 1, 1], 10], [[3, -6, 3], 2], [[1, 0, -2, 0, 1], 10], [[11, -99, 304, -432, 304, -99, 11], 0], [[-14, 69, -110, 69, -14], 2], [[1], 5], [[3, -36, 123, -180, 123, -36, 3], 0], [[1, -2, 1], 12], [[-1], 8], [[-1], 4], [[-2835, 2835], 0], [[595, -594, 378, -84, 0, 0, 84, -378, 594, -595], 27], [[-675, 2160, -2160, 675], 0], [[-9, 12, 0, 216, -615, 405, 342, -342, -405, 615, -216, 0, -12, 9], 0], [[-225, 720, -720, 225], 0], [[9, -13, -5, 5, -80, 253, -253, 80, -5, 5, 13, -9], 10], [[60, -135, 18, 228, -228, -18, 135, -60], 3], [[-9, 12, 117, -369, 369, -117, -12, 9], 0], [[-12, 11, 0, 0, -11, 12], 14], [[6, -4, -15, 15, 4, -6], 8], [[-45, 279, -621, 621, -279, 45], 0], [[-450, 1440, -1440, 450], 0], [[-9, 0, 45, -45, 0, 9], 13], [[-9, 36, -50, 24, 7, -7, -24, 50, -36, 9], 8], [[1, -3, 3, -1], 9], [[-96, 567, -1227, 1227, -567, 96], 0], [[-9, 66, -165, 165, -66, 9], 0], [[-60, 375, -825, 825, -375, 60], 0], [[1, -2, 1, -1, 2, -1], 9], [[1, -1, 0, -2, 2, 0, 1, -1], 9], [[-1, -6, 23, -23, 6, 1], 4], [[-3, 33, -90, 90, -33, 3], 0], [[-1, 0, 11, -32, 32, -11, 0, 1], 4], [[12, -39, 39, -12], 1], [[-1, 3, 4, -17, 17, -4, -3, 1], 4], [[-1, 1], 8], [[-2, 7, -7, 2], 2], [[-15, 108, -255, 255, -108, 15], 0], [[1, -3, 3, -1], 6], [[5, -34, 63, -4, -116, 116, 4, -63, 34, -5], 3], [[33, -105, 105, -33], 2], [[-27, 183, -420, 420, -183, 27], 0], [[-1, 2, 4, -17, 17, -4, -2, 1], 5], [[3, -26, 63, -63, 26, -3], 2], [[2, -2], 3], [[-1, 5, -5, 1], 2], [[2, -2], 5], [[1, -10, 25, -25, 10, -1], 1], [[1, -1], 4], [[-3, 11, -11, 3], 3], [[1, -1], 3], [[7, -38, 81, -81, 38, -7], 1], [[-1, 5, -5, 1], 3], [[1, -9, 24, -24, 9, -1], 1], [[-2, 8, -8, 2], 4], [[-1, 17, -78, 156, -156, 78, -17, 1], 0], [[3, -3], 6]], [[[3200], 0], [[3200], 63], [[-160, 360, 0, -384, 0, 576, -288, 0, 0, 24], 3], [[720, -1600, 880], 0], [[-20, 0, 0, 30, -120, 330, -680, 510, -120, 80, 0, -30, -20, 30, 0, 10], 9], [[], 0], [[152, -736, 1200, -864, 248], 0], [[440, -1080, 600], 0], [[15, 0, 0, 0, 10, 0, -60, 0, 15, 0, -20], 29], [[-40], 42], [[-40], 21], [[-3, 0, 18, 0, -20, 0, 66, -48, -3, 0, 4], 8], [[-10, 36, -12], 21], [[64, -292, 532, -412, 104], 0], [[-2, 20, -38, 20, -4], 21], [[-120, 288, -192, 0, 24], 2], [[], 0], [[4, -6, -12, 40, -24, -18, 16], 5], [[38, -214, 400, -306, 82], 0], [[-4, 28, -36, -49, 149, -88, -61, 84, -23, 0, -1, 1], 3], [[], 0], [[2, -20, 66, -108, 94, -40, 6], 0], [[10, -70, 160, -130, 30], 0], [[], 0], [[], 0], [[], 0], [[-28, 97, -145, 41, 132, -8, -242, 208, -44, 3, -9, 3], 3], [[-40, 96, -72, 24], 1], [[8, -12, 12], 22], [[96, -468, 800, -592, 164], 0], [[-2, 6, -6, -14, 52, -46, -6, 18, -2], 3], [[], 0], [[1, 6, -24, 22, 1, -4], 4], [[2, -12, 18, -10, 4], 22], [[1, 0, -13, 28, -29, 6, 5, -2], 4], [[-7, 30, -51, 41, -20, 3], 1], [[10, -96, 300, -442, 360, -164, 32], 0], [[-2, 12, -26, 20, -2, -2], 3], [[], 0], [[-5, 23, -42, 37, -15, 2], 1], [[-1, 5, -11, 11, -3], 1], [[1], 9], [[6, -11, 9, -5, 1], 2], [[2, -12, 14, -4], 3], [[], 0], [[-5, 6, -2], 4], [[-1], 7], [[-1], 14], [[-1], 7], [[1, -21, 81, -130, 109, -49, 9], 0], [[], 0], [[], 0], [[-15, 75, -147, 126, -33, -9, 3], 2], [[-1, 2, -1], 23], [[], 0], [[], 0], [[-1, 2, -1], 2], [[], 0], [[4, -43, 142, -219, 183, -82, 15], 0], [[-4, 30, -63, 55, -18, -1, 1], 2], [[], 0], [[1, -14, 52, -86, 74, -32, 5], 0], [[], 0], [[], 0], [[], 0], [[-1520, 1680], 0], [[216, 0, -105, 0, 0, 168, -378, 0, 280, 0, -189, 168], 28], [[-336, 1152, -1248, 464], 0], [[80, -242, 198, 172, -212, -270, 450, -144, 0, -12, 12], 3], [[-80, 360, -440, 160], 0], [[-5, 15, -40, 105, -131, 40, 0, 11, 9, -4, 0, 0, -1, 1], 12], [[10, -52, 12, 132, -166, -12, 118, -44, 0, 0, 2], 3], [[54, -198, 246, -102, -12, 12], 2], [[3, 0, -6, 0, 3], 16], [[3, -3, -6, 3, 10, -6, -3, 2], 8], [[-16, 124, -308, 352, -196, 44], 0], [[-210, 740, -860, 310], 0], [[-1, 0, 0, 0, -10, 36, -70, 21, 4, 5, 0, -5, -1, 1], 10], [[-3, -6, 12, 6, -14, -30, 60, -24, -3, -2, 2], 9], [[-6, 6, -8, 6], 10], [[-41, 276, -637, 693, -384, 89], 0], [[20, -70, 82, -48, 12], 1], [[-27, 175, -415, 469, -261, 57], 0], [[-2, 4, -5, 9, -10, 2], 10], [[-1, 0, -2, 8, -3], 12], [[-1, 14, -24, 12, 3, -2], 5], [[-1, 9, -33, 51, -27, 3], 0], [[1, 5, -19, 30, -19, 1, 4, -1], 5], [[-8, 14, -8, 2], 2], [[-1, 2, -5, -3, 15, -8, -1, 1], 4], [[1, 0, -1], 8], [[-1, 2, -2, 1], 2], [[-4, 40, -116, 144, -80, 16], 0], [[3, -4, 1], 8], [[1, -9, 21, -7, -57, 88, -19, -48, 38, -7, 0, -1], 3], [[10, -52, 74, -34, 0, 2], 2], [[-12, 78, -198, 240, -134, 26], 0], [[3, -8, 14, -6, -5, 2], 7], [[1, -10, 30, -40, 26, -6, -1], 2], [[1, -1], 4], [[-1, 2, -1], 3], [[], 0], [[-4, 9, -10, 6, -2], 2], [[-1], 4], [[3, -5, 4, -1], 4], [[1], 4], [[3, -17, 35, -38, 25, -9, 1], 1], [[-2, 2], 5], [[-3, 7, -5, 3, -2], 2], [[-1, 4, -6, 3], 4], [[6, -35, 72, -77, 51, -20, 3], 1], [[1, -3, 2], 6]], nothing, [[[4096], 0], [[4096], 135, false], [[-128, 288, 0, -448, 0, 864, -640, 0, 0, 64], 3], [[768, -2048, 1280], 0], [[10, -60, 330, -744, 630, -180, 110, 0, -132, -80, 120, 0, 20, -24], 12], [[], 0], [[128, -768, 1536, -1280, 384], 0], [[448, -1344, 960], 0], [[60, 0, 0, 0, -10, 0, 0, 0, 84, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6], 65, false], [[64], 45], [[64], 45, false], [[6, 0, -10, 0, 66, -112, 36, 0, 12, 0, -6], 10], [[16, 0, -48, 0, 24], 45, false], [[40, -288, 680, -640, 200], 0], [[4, 0, -24, 0, 44, 0, -40, 0, 8], 45, false], [[-96, 320, -288, 0, 64], 2], [[], 0], [[-2, -8, 40, -40, -18, 40, -4, -8], 6], [[24, -200, 512, -504, 168], 0], [[-1, 12, -24, -36, 152, -104, -116, 188, -71, 0, -4, 4], 3], [[], 0], [[-8, 56, -144, 168, -88, 16], 1], [[4, -60, 204, -236, 84], 0], [[-1, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 4, 0, 0, 0, -1], 27, false], [[-4], 27], [[-4], 27, false], [[-8, 58, -130, 50, 144, -12, -376, 396, -120, 10, -22, 10], 3], [[-32, 128, -160, 64], 1], [[-8, 0, 20, 0, -16, 0, 4], 47, false], [[72, -472, 1024, -904, 280], 0], [[2, -6, -6, 48, -58, -6, 46, -20], 4], [[], 0], [[2, -18, 22, 4, -12, 2], 5], [[-2, 0, 9, 0, -20, 0, 22, 0, -10, 0, 1], 47, false], [[-7, 24, -29, 4, 18, -10], 6], [[-2, 24, -74, 94, -52, 10], 1], [[4, -64, 288, -572, 576, -288, 56], 0], [[4, -24, 32, -8, -4], 4], [[], 0], [[-1, 18, -60, 78, -43, 8], 1], [[3, -17, 27, -14, 2], 2], [[1], 21, false], [[5, -24, 35, -20, 4], 2], [[2, -16, 26, -12], 3], [[], 0], [[-7, 14, -6], 4], [[1], 15, false], [[1], 15], [[1], 15, false], [[-10, 70, -176, 202, -108, 22], 1], [[-4, 8, -4], 3], [[], 0], [[-6, 62, -170, 176, -50, -22, 10], 2], [[-2, 0, 4, 0, -2], 51, false], [[], 0], [[], 0], [[-2, 4, -2], 3], [[], 0], [[1, -23, 129, -288, 311, -161, 31], 0], [[-1, 20, -72, 88, -35, -4, 4], 2], [[], 0], [[-5, 43, -117, 139, -75, 14], 1], [[-1, 0, 1, 0, -1], 27, false], [[-1], 9], [[-1], 9, false], [[-1792, 2304], 0], [[512, 0, 0, 84, 0, -378, 0, 594, 0, -315, 0, 0, 0, -189, 0, 378, 0, -189, 0, 0, 0, 15], 63, false], [[-320, 1344, -1728, 704], 0], [[48, -188, 180, 184, -264, -396, 772, -336, 0, -32, 32], 3], [[-64, 384, -640, 320], 0], [[-15, 96, -172, 95, -10, 21, 17, -37, -10, 15, -1, 2, -1], 14], [[4, -28, 12, 116, -188, -12, 228, -140, 0, 0, 8], 3], [[36, -196, 316, -156, -32, 32], 2], [[-11, 12, 6, -4, -3], 18], [[-6, 9, 8, -15, -3, 10, -3], 10], [[-8, 96, -344, 520, -352, 88], 0], [[-184, 848, -1200, 520], 0], [[-5, 0, 0, 0, 5, 19, -16, -50, 5, 31, 0, 4, -5, 10, 0, -14, 0, -5, 0, 4, 0, 1], 25, false], [[6, 3, -7, -30, 92, -74, 18, -6, 6, 3, -3], 11], [[8, 3, 0, -9, 0, 9, 0, -3], 21, false], [[-26, 240, -726, 986, -624, 150], 0], [[12, -76, 148, -116, 32], 1], [[-14, 142, -470, 674, -442, 106], 0], [[2, 1, -8, -2, 2, 7, 0, -13, 0, 8, 0, -1], 21, false], [[-2, 0, 4, 2, -2, -1, 0, 7, 0, -11, 0, 3], 23, false], [[9, -21, 10, 8, -7, 1], 6], [[4, -36, 84, -68, 16], 1], [[2, -14, 28, -18, -7, 14, -5], 6], [[-12, 36, -32, 8], 2], [[1, -2, -4, 17, -15, -2, 6, -1], 5], [[1, -2, 1], 9], [[2, -6, 6, -2], 3], [[-1, 26, -126, 226, -166, 43], 0], [[-1, 2, 3, 0, -3, 0, 1], 14, false], [[-2, 11, -8, -51, 97, -12, -101, 90, -23, 1, -3, 1], 4], [[4, -44, 100, -68, 0, 8], 2], [[-4, 56, -220, 356, -248, 60], 0], [[-5, 15, -10, -6, 7, -1], 8], [[-4, 28, -56, 45, -11, -3, 1], 3], [[-1, 1], 4], [[1, -3, 3, -1], 3], [[-2, 2], 6], [[-1, 10, -22, 21, -8, 1], 2], [[1, -1, 0, 1], 9, false], [[3, -11, 10, -3], 4], [[-1], 7, false], [[-8, 37, -67, 59, -24, 3], 2], [[1, -5, 5, -1], 4], [[-1, 9, -20, 19, -8, 1], 2], [[2, -8, 7, -1], 5], [[1, -21, 78, -130, 110, -46, 7], 1], [[-1, -3, 0, 3], 13, false]], nothing, [[[4200], 0], [[4200], 66], [[-128, 342, 0, -596, 0, 864, -544, 0, 0, 38], 3], [[850, -2080, 1270], 0], [[55, -120, 375, -752, 645, -300, 230, 0, -111, -80, 105, 0, 5, -12], 12], [[40], 33], [[172, -840, 1548, -1256, 384], 0], [[480, -1410, 900], 0], [[-60, 0, 90, 0, -60], 32], [[-30], 44], [[-30], 22], [[12, 0, -33, 0, 84, -72, 18, 0, 6], 10], [[-6, 30, -9], 22], [[53, -324, 679, -604, 193], 0], [[-1, 12, -32, 20, -2], 22], [[-114, 356, -288, 0, 38], 2], [[-18, 44, -36, 0, 2], 35], [[-3, -14, 56, -44, -23, 30, -6, -4], 6], [[31, -223, 510, -467, 149], 0], [[-2, 17, -23, -71, 210, -136, -98, 158, -56, 0, -1, 2], 3], [[], 0], [[1, -12, 62, -132, 146, -82, 17], 0], [[5, -65, 200, -205, 65], 0], [[], 0], [[], 0], [[], 0], [[-12, 80, -145, 2, 196, -35, -352, 373, -112, 3, -13, 9], 3], [[-32, 124, -136, 38], 1], [[4, -17, 8, -1], 23], [[96, -524, 1026, -872, 272], 0], [[2, -6, -17, 70, -69, -6, 38, -14], 4], [[-2], 11], [[4, -25, 28, 2, -6], 5], [[-8, 20, -13, 4], 24], [[-10, 39, -38, 3, 12, -3], 6], [[-3, 25, -64, 77, -41, 9], 1], [[10, -92, 313, -558, 545, -276, 59], 0], [[4, -26, 32, -8, -1], 4], [[-1, 2], 11], [[-2, 18, -50, 61, -35, 7], 1], [[3, -12, 18, -11, 2], 2], [[], 0], [[4, -18, 24, -12, 2], 2], [[3, -14, 19, -8], 3], [[], 0], [[-6, 9, -3], 4], [[], 0], [[], 0], [[], 0], [[1, -15, 74, -161, 175, -94, 20], 0], [[-2, 4, -2], 3], [[], 0], [[-12, 81, -177, 170, -60, -13, 9], 2], [[2, -4], 25], [[-1, 0, 0, -1], 14], [[-1, -1], 12], [[-1, 2], 3], [[2, 0, -1], 13], [[3, -35, 140, -273, 283, -150, 32], 0], [[-2, 26, -73, 80, -32, -1, 2], 2], [[], 0], [[-9, 46, -104, 119, -66, 14], 1], [[], 0], [[], 0], [[], 0], [[-1890, 2310], 0], [[630, -378, 189, -315, 0, 0, 483, -189], 33], [[-382, 1404, -1716, 698], 0], [[56, -225, 189, 266, -330, -387, 725, -296, 0, -16, 22], 3], [[-70, 410, -630, 270], 0], [[-10, 5, -15, 96, -161, 80, -40, 45, 9, -33, -10, 15, 0, 0, -1], 12], [[5, -32, 12, 174, -255, -12, 203, -102, 0, 0, 3], 3], [[51, -225, 323, -159, -16, 22], 2], [[6, -17, 9, 3, -5], 17], [[3, -6, 12, 9, -15, 0, 4, -3], 9], [[-14, 116, -354, 490, -324, 82], 0], [[-215, 900, -1180, 495], 0], [[5, 0, 4, -25, 11, -12, 30, -9, -5, -1, 2], 13], [[-6, 6, 12, -21, -36, 80, -49, 9, -2, 4], 10], [[-9, -9, 15], 11], [[-43, 288, -750, 959, -600, 150], 0], [[14, -73, 131, -90, 22], 1], [[-23, 176, -483, 646, -419, 106], 0], [[-2, 8, 5, -15, 7], 11], [[2, -5, 1, 7, -6, 2], 12], [[-2, 14, -25, 15, 3, -4], 5], [[5, -34, 69, -52, 13], 1], [[5, -23, 38, -22, -3, 8, -2], 6], [[-10, 27, -20, 3], 2], [[1, 2, -8, 17, -15, -2, 6, -1], 5], [[1, 0, -1], 9], [[1, -3, 4, -2], 3], [[-2, 32, -126, 202, -142, 36], 0], [[-1, 3, -2], 7], [[-4, 14, 10, -85, 121, -30, -82, 79, -21, 0, -1, 1], 4], [[5, -50, 101, -57, 0, 3], 2], [[-7, 70, -226, 329, -226, 58], 0], [[-1, -9, 19, -10, -5, 5, -1], 7], [[-8, 30, -50, 40, -13, -1, 1], 3], [[1], 5], [[-2, 1], 4], [[-2, 1], 6], [[-1, 7, -15, 15, -7, 1], 2], [[], 0], [[3, -7, 6, -2], 4], [[], 0], [[1, -10, 33, -55, 50, -23, 4], 1], [[1, -2, 2, -1], 4], [[-1, 6, -14, 13, -5, 1], 2], [[2, -7, 6, -1], 5], [[4, -25, 72, -112, 95, -42, 8], 1], [[-2, 2], 7]], nothing, [[[6075], 0], [[6075], 64], [[9, 0, 0, -288, 621, 0, -720, 0, 1080, -720, 0, 0, 45], 0], [[1305, -3060, 1710], 0], [[-24, 0, 60, -120, 705, -1296, 900, -300, 170, 0, -108, -100, 75, 0, 5, -12], 10], [[-45], 32], [[267, -1308, 2304, -1740, 456], 0], [[810, -2025, 1215], 0], [[], 0], [[], 0], [[], 0], [[-24, 36, 0, -21, 0, 72, -96, 27, 0, 6], 9], [[], 0], [[90, -540, 1035, -810, 225], 0], [[], 0], [[9, 0, -207, 504, -360, 0, 45], 0], [[-3, 0, 9, -48, 36, 0, -3], 32], [[4, -12, -20, 69, -52, -22, 40, -4, -4], 5], [[63, -384, 777, -627, 174], 0], [[-8, 46, -58, -90, 260, -130, -136, 179, -59, 0, -2, 1], 3], [[3], 16], [[1, -24, 115, -222, 209, -90, 14], 0], [[15, -135, 315, -270, 75], 0], [[], 0], [[], 0], [[], 0], [[-3, 3, -24, 159, -279, 42, 240, 42, -468, 420, -132, 9, -15, 6], 1], [[9, -72, 198, -180, 45], 0], [[], 0], [[159, -837, 1545, -1188, 321], 0], [[6, -10, -32, 86, -58, -10, 34, -16], 4], [[], 0], [[12, -33, 24, 3, -6], 5], [[], 0], [[3, -21, 42, -36, 3, 12, -3], 5], [[-9, 51, -111, 111, -48, 6], 1], [[16, -152, 515, -866, 767, -332, 52], 0], [[15, -42, 38, -10, -1], 4], [[], 0], [[-6, 40, -91, 90, -38, 5], 1], [[9, -28, 28, -11, 1], 2], [[-1], 10], [[-1, 12, -34, 37, -14, 1], 1], [[8, -27, 26, -6], 3], [[1, 0, -1, 0, 1], 16], [[3, -12, 12, -3], 3], [[], 0], [[], 0], [[], 0], [[2, -32, 137, -264, 250, -109, 16], 0], [[1, -6, 7, -2], 2], [[], 0], [[-3, -18, 135, -276, 222, -51, -15, 6], 1], [[], 0], [[], 0], [[], 0], [[-3, 3], 3], [[], 0], [[5, -63, 243, -438, 400, -174, 27], 0], [[-7, 50, -116, 105, -31, -2, 1], 2], [[], 0], [[1, -17, 88, -180, 170, -73, 11], 0], [[], 0], [[], 0], [[], 0], [[-2835, 3240], 0], [[378, -84, 0, 0, 189, -378, 783, -315, 0, -189, 210, -189], 29], [[-594, 2133, -2457, 891], 0], [[-3, 6, 0, 120, -438, 351, 342, -378, -540, 888, -372, 0, -24, 21], 0], [[-150, 660, -870, 345], 0], [[-9, 0, -1, -45, 197, -263, 125, -39, 30, 17, -23, -10, 5, 0, 1], 11], [[21, -81, 21, 222, -279, -21, 243, -120, 0, 0, 3], 3], [[-3, 6, 90, -351, 450, -180, -24, 21], 0], [[10, 0, -3, -17, 15, 6, -2], 15], [[-6, -9, 18, 5, -18, 0, 7], 9], [[-26, 207, -572, 721, -414, 85], 0], [[-360, 1395, -1665, 630], 0], [[-9, 0, 49, -76, 36, 4, 5, -9, 1, -1], 13], [[8, -28, 24, 11, -10, -42, 78, -57, 18, -4, 2], 9], [[-3, 9, -9, 3], 10], [[-69, 468, -1173, 1398, -783, 159], 0], [[-3, 36, -132, 195, -117, 21], 0], [[-39, 291, -777, 948, -534, 111], 0], [[-2, 4, -5, 8, -7, 2], 10], [[-1, 1, -2, 3, -1, 3, -4, 1], 10], [[-4, 23, -32, 9, 6, -2], 5], [[15, -72, 108, -63, 12], 1], [[-1, 10, -33, 42, -18, -6, 7, -1], 5], [[3, -24, 45, -24, 3], 1], [[2, 1, -15, 21, -6, -3, 4, -1], 5], [[-1], 10], [[4, -8, 6, -1], 3], [[-6, 66, -222, 303, -177, 36], 0], [[1, -4, 3, -1, 1], 6], [[1, -13, 36, -1, -116, 137, 4, -106, 77, -19, 1, -1], 3], [[18, -90, 135, -66, 0, 3], 2], [[-13, 127, -381, 489, -281, 59], 0], [[1, 1, -15, 20, -8, -3, 5, -1], 6], [[1, -15, 55, -79, 47, -8, -1], 2], [[-1, 1], 4], [[1, -3, 2], 3], [[1, -2, 1], 5], [[-4, 17, -29, 21, -6], 2], [[-1], 5], [[-1, 7, -13, 8, -1], 3], [[], 0], [[2, -21, 64, -93, 67, -21, 2], 1], [[3, -6, 3], 4], [[-3, 14, -25, 19, -5], 2], [[6, -11, 6, -1], 5], [[8, -49, 130, -179, 128, -42, 4], 1], [[2, -4, 2], 6]], nothing, [[[8], 0], [[-8], 105], [[-4, 0, 0, 4], 9], [[-2, 6], 1], [[-6, 0, 0, 0, 0, 2], 25], [[], 0], [[-4, 4], 3], [[-1, 6], 1], [[-6, 0, 0, 0, 1], 55], [[-4], 70], [[4], 35], [[-3, 0, 0, 0, 2], 20], [[-2, 3], 36], [[-2, 4], 3], [[-4, 2], 38], [[4], 6], [[-4], 57], [[-2, 0, 0, 2], 13], [[-2, 4], 3], [[-3, 0, -1, 2], 11], [[], 0], [[-2, 2], 5], [[-1, 4], 3], [[-4, 0, 1], 27], [[-2], 42], [[2], 21], [[-4, 0, -1, 2], 11], [[-1, 4], 3], [[-2, 2], 38], [[-3, 4], 3], [[-3, 0, 0, 2], 11], [[], 0], [[1, 0, 2], 10], [[-4, 1], 40], [[-2, 0, 0, 2], 11], [[-2, 2], 5], [[-4, 2], 5], [[2], 10], [[], 0], [[-2, 2], 5], [[-1, 2], 5], [[-1], 15], [[-2, 2], 5], [[2], 8], [[-2], 29], [[2], 8], [[-2], 13], [[-1], 24], [[1], 12], [[-3, 2], 5], [[-1, 2], 5], [[], 0], [[-1, 2], 7], [[-2, 1], 40], [[-2], 22], [[2], 19], [[-1, 2], 5], [[-2, 1], 20], [[-3, 2], 5], [[-1, 2], 7], [[], 0], [[-2, 2], 5], [[-1, 1], 22], [[1], 14], [[-1], 7], [[-1, 7], 0], [[-7, 0, 0, 0, 0, 0, 0, 0, 0, 1], 54], [[-3, 5], 2], [[-4, 0, -1, 3], 10], [[-1, 5], 2], [[-5, 0, 0, 0, 0, 1], 26], [[-3, 0, 0, 3], 10], [[-1, 3], 6], [[-3, 0, 0, 0, 0, 1], 28], [[-1, 0, 0, 1], 18], [[-3, 3], 4], [[-2, 5], 2], [[-5, 0, 1, 0, 0, 1], 26], [[-3, 0, 0, -1, 1], 21], [[2, 0, 0, 1], 18], [[-4, 3], 4], [[-2, 3], 4], [[-3, 3], 4], [[-2, 1, 0, 0, 1], 19], [[-2, 0, 0, 0, 1], 21], [[1, -1, 1], 11], [[-1, 3], 4], [[-2, 0, -1, 1], 12], [[-1, 3], 4], [[-3, 0, 0, 1], 12], [[-1, 0, 0, 1], 14], [[-1, 1], 6], [[-2, 3], 4], [[-2, 0, 0, 1], 12], [[-3, 0, -1, 1], 12], [[3], 7], [[-2, 3], 4], [[-2, 0, 0, 1], 14], [[-1, 1], 8], [[-1, 1], 6], [[-2, 1], 6], [[1], 11], [[-2, 1], 6], [[1], 9], [[-1, 1], 8], [[-1, 1], 6], [[-2, 1], 6], [[1], 9], [[-2, 1], 6], [[1], 11], [[-3, 1], 6], [[1, 0, 1], 11]], nothing, [[[56], 0], [[-56], 75], [[-4, 0, 0, 24, 0, 0, -24, 0, 0, 4], 3], [[6, -30, 20], 0], [[-20, 0, 0, 0, 0, 30, 0, 0, 0, 0, -6], 15], [[], 0], [[-4, 24, -24, 4], 1], [[6, -15, 20], 0], [[-20, 0, 0, 0, 15, 0, 0, 0, -6], 37], [[-16], 50], [[16], 25], [[-7, 0, 0, 0, 12, 0, 0, 0, -3], 12], [[3, -12, 7], 25], [[-2, 12, -12, 4], 1], [[-4, 12, -12, 2], 26], [[8, 0, 0, 4], 3], [[-4, 0, 0, -8], 39], [[-4, 0, 2, 4, 0, -2], 8], [[-2, 8, -12, 4], 1], [[-1, 0, -6, 6, -1, 8, -3, 0, -1], 5], [[], 0], [[-4, 6, -2], 3], [[-1, 4, -6, 4], 1], [[-4, 0, 6, 0, -4, 0, 1], 17], [[-4], 30], [[4], 15], [[-4, 0, -6, 12, -4, 8, -4, 2, -1], 5], [[-1, 0, -6, 4], 1], [[-2, 6, -6, 2], 26], [[-3, 16, -18, 4], 1], [[-1, 0, 0, 6, -1, 0, -3], 5], [[], 0], [[1, 0, 4, 0, 1], 6], [[-10, 8, -4], 28], [[-2, 2, 0, 2, -2], 7], [[-2, 4, -2], 3], [[-10, 16, -4], 3], [[-2], 5], [[], 0], [[-2, 4, -2], 3], [[-1, 2, -1], 3], [[], 0], [[2, -2], 4], [[2], 5], [[-2], 20], [[-1], 4], [[1], 11], [[-1], 18], [[1], 9], [[-4, 8, -3], 3], [[-1], 5], [[], 0], [[-2, 4, 2, -1], 4], [[-4, 3, -2], 28], [[-2, 0, 0, 2], 14], [[2, -2], 13], [[1, 0, -1], 3], [[1, -2, 2, -1], 13], [[-6, 10, -3], 3], [[-2, 2, 0, -1], 4], [[], 0], [[-3, 6, -2], 3], [[-2, 1], 16], [[-1], 10], [[1], 5], [[-21, 35], 0], [[-35, 0, 0, 0, 0, 0, 0, 0, 0, 21], 36], [[-1, 15, -30, 10], 0], [[-4, 0, -6, 18, 0, 12, -12, 0, -3, 1], 4], [[-1, 5, -10, 10], 0], [[-10, 0, 0, 0, -5, 10, 0, 0, 0, 1], 16], [[-1, 0, -3, 9, 0, 3, -9, 0, 0, 1], 4], [[-2, 6, 0, -3, 1], 3], [[-1, -6, 0, 0, 0, 3, 2], 18], [[-3, 0, 0, 3], 12], [[-4, 12, -9, 1], 2], [[-1, 10, -20, 10], 0], [[-10, 0, 10, 0, -5, 10, 0, -5, 0, 1], 16], [[-7, 0, 0, -6, 6, 0, 0, 3], 13], [[1, 0, 0, 3], 12], [[-7, 21, -12, 1], 2], [[-1, 3, -6, 1], 2], [[-5, 15, -9, 1], 2], [[1, -2, -1, 1, -2, 1], 12], [[-2, 0, 0, -1, 3], 13], [[1, -2, 2, -1], 7], [[-1, 3, -3, 1], 2], [[-3, 1, -1, 3], 8], [[-3, 1], 4], [[-1, 0, 0, 3], 6], [[-1, 0, 0, 1], 9], [[-1, 1], 4], [[-2, 6, -6, 1], 2], [[1], 9], [[-1, 0, -6, 3, -4, 4, 0, 1], 6], [[-1, 3, 0, 0, 1], 3], [[-3, 9, -6, 1], 2], [[-2, 0, 0, 1], 9], [[-2, 1, 1], 5], [[], 0], [[1, 1], 4], [[-1, 0, -1], 6], [[-2, 2], 4], [[], 0], [[-1], 5], [[1], 4], [[-4, 3], 4], [[1], 6], [[-1, 2], 4], [[-1], 6], [[-6, 5], 4], [[1], 9]], nothing, [[[112], 0], [[-112], 90], [[-8, 0, 36, -48, 0, 0, 20], 6], [[6, -44, 62], 0], [[-24, -20, 30, 0, 10, -24, 0, 0, 0, 0, 4], 20], [[], 0], [[-4, 24, -52, 32], 1], [[1, -27, 57], 0], [[-30, 0, 0, 0, 0, 0, 0, 0, -1], 46], [[4], 60], [[-4], 30], [[3, 0, 6, 0, -9, 0, 0, 0, 4], 16], [[-1, 0, -3], 30], [[8, -30, 26], 2], [[-2, 0, -2], 32], [[-12, 0, 20], 4], [[-8], 48], [[4, 0, -8, 0, 0, 4], 11], [[6, -27, 25], 2], [[-3, -5, 20, -18, 0, -4, 6], 8], [[], 0], [[6, -14, 8], 4], [[1, -15, 21], 2], [[-6, 0, 0, 0, -1], 22], [[2], 36], [[-2], 18], [[-8, -9, 30, -24, 1, -6, 7], 8], [[1, -12, 20], 2], [[2, 0, -2], 32], [[-1, 15, -40, 29], 1], [[-3, 0, 10, -14, 0, 0, 4], 8], [[], 0], [[-1, -6, 3, 0, 4], 8], [[1, 0, -1], 34], [[-1, 0, 6, -9, 0, 0, 4], 8], [[5, -12, 7], 4], [[-4, 20, -28, 12], 3], [[-2, -2, 0, 4], 7], [[], 0], [[4, -11, 7], 4], [[1, -6, 5], 4], [[], 0], [[3, -9, 6], 4], [[-4, 0, 4], 6], [[], 0], [[-3, 0, 4], 6], [[-1], 10], [[1], 20], [[-1], 10], [[-1, 9, -18, 9], 3], [[1, -4, 4], 4], [[], 0], [[3, -5, -6, 7], 5], [[2, 0, -1], 34], [[2], 18], [[-2], 16], [[1, -3, 4], 4], [[-1, 0, -1], 16], [[-1, 12, -20, 10], 3], [[2, -5, -4, 6], 5], [[], 0], [[6, -13, 8], 4], [[-1], 20], [[-1], 12], [[1], 6], [[-28, 84], 0], [[-56, 0, 0, -21, 27, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 1], 45], [[-1, 15, -51, 45], 0], [[-8, -9, 39, -36, 0, -7, 13], 7], [[1, -21, 36], 1], [[-15, -10, 15, 0, 4, -11, 0, 0, 0, 0, 1], 21], [[-3, 0, 18, -25, 0, 0, 10], 7], [[3, -9, -7, 13], 4], [[-1, 3, 0, 0, -3, 0, 0, 0, 0, 1], 24], [[4, -3, 0, -2, 0, 0, 1], 15], [[-1, 12, -28, 17], 2], [[7, -37, 41], 1], [[-10, -5, 9, 0, -1, -6, 0, 1, 0, 0, 1], 21], [[3, -2, 4, 3, -6, 0, 0, -2, 2], 17], [[-2, -3, 0, 2, 0, 0, 1], 15], [[-4, 22, -39, 20], 2], [[4, -16, 13], 3], [[-1, 15, -30, 18], 2], [[-1, 0, 1, -2, -2, 1, 0, 0, 1], 15], [[2, 0, 2, -1, -2, 0, 0, 0, 1], 17], [[1, -5, 2, -2, 2], 9], [[1, -10, 11], 3], [[-1, -2, 7, -6, 0, -2, 2], 9], [[1, -7, 10], 3], [[-3, 0, 5, -7, 0, 0, 1], 9], [[1, -1, -1, 0, 0, 1], 12], [[1, -3, 2], 5], [[5, -18, 14], 3], [[-1, 0, 2, -3, 0, 0, 1], 9], [[-3, -5, 15, -11, 1, -3, 3], 9], [[-7, 0, 10], 5], [[7, -21, 15], 3], [[2, 0, -4, 0, 0, 1], 12], [[2, -2, -3, 3], 6], [[1, -2, 1], 5], [[2, -4, 2], 5], [[-1, 0, 0, 1], 8], [[3, -6, 3], 5], [[-1, 0, 1], 7], [[1, -2, -2, 2], 6], [[1, -1, 1], 5], [[5, -8, 4], 5], [[-2, 0, 1], 7], [[4, -6, 3], 5], [[-1, -1, 0, 1], 8], [[-1, 9, -12, 5], 4], [[-1, -2, 1, 0, 1], 9]], nothing, [[[160], 0], [[-160], 84], [[8, 0, 36, -64, 0, 0, 20], 6], [[12, -72, 76], 0], [[-40, 0, 6, 0, 30, 0, 10, -24, 0, 0, 0, 0, 2], 18], [[], 0], [[-8, 48, -72, 32], 1], [[6, -42, 70], 0], [[-64, 15, 0, 20, 0, -6, 0, 0, 0, 1], 43], [[-20], 56], [[20], 28], [[-8, 12, 0, 4, 0, -12, 0, 0, 0, 2], 15], [[3, -12, 11], 28], [[-2, 18, -42, 24], 1], [[-4, 12, -12, 6], 29], [[8, -12, 0, 20], 3], [[-16], 45], [[2, 4, 0, -8, 0, 0, 2], 10], [[-1, 14, -37, 24], 1], [[-3, 1, -6, 25, -17, 0, -4, 4], 7], [[], 0], [[-2, 12, -14, 4], 3], [[5, -20, 20], 2], [[-5], 20], [[], 0], [[], 0], [[-6, -4, -13, 38, -20, 2, -7, 4], 7], [[2, -16, 20], 2], [[4, -8, 4], 30], [[-4, 30, -56, 28], 1], [[1, 0, 11, -12, 0, 0, 2], 8], [[], 0], [[4, -4, 4, 0, 2], 8], [[-8, 6, -6, 2], 31], [[2, 0, 6, -10, 0, 0, 2], 8], [[-1, 9, -12, 4], 3], [[-14, 34, -30, 8], 3], [[2, 0, -2, 0, 2], 6], [[], 0], [[-1, 8, -11, 4], 3], [[3, -6, 2], 4], [[1], 12], [[5, -9, 4], 4], [[2, -4, 0, 2], 5], [[], 0], [[1, -2, 0, 2], 5], [[-1], 12], [[1], 20], [[-1], 10], [[-4, 17, -18, 6], 3], [[1, -4, 2], 4], [[], 0], [[-2, 7, -4, -7, 4], 4], [[3, -2, 1], 32], [[-2], 17], [[2], 15], [[-4, 2], 5], [[1, 0, 1], 15], [[-6, 21, -21, 6], 3], [[-1, 5, -4, -4, 4], 4], [[], 0], [[-2, 11, -14, 4], 3], [[1], 18], [[], 0], [[], 0], [[-48, 112], 0], [[-105, 0, 0, 21, 0, 0, 0, 27, 0, 0, 0, 0, -7], 42], [[-2, 30, -78, 50], 0], [[-6, 2, -9, 51, -40, 0, -9, 11], 6], [[6, -30, 40], 1], [[-20, 0, -5, 0, 10, 0, 5, -6], 19], [[4, 0, 18, -30, 0, 0, 8], 7], [[-2, 9, -9, -9, 11], 3], [[-2, -3, 3, 2, 3, 0, 0, -3], 21], [[4, -3, 0, -1], 15], [[-4, 24, -34, 14], 2], [[-1, 16, -56, 45], 0], [[-16, 0, 10, 0, 4, 1, 1, -5, 0, 1], 19], [[-14, 6, -2, 2, 6, -6, 0, 0, -1, 1], 16], [[3, 3, 0, 0, 2], 14], [[-11, 42, -48, 17], 2], [[8, -19, 11], 3], [[-6, 28, -38, 14], 2], [[1, 1, 0, 1, 0, -2, 1], 14], [[-2, 3, 1, 0, 0, -2], 16], [[-2, 4, -4, 2, -1, 1], 8], [[4, -12, 8], 3], [[-1, 1, -3, 8, -5, 0, -1, 1], 8], [[1, -9, 8], 3], [[-2, 0, 5, -3], 9], [[1, 1, -1, -1], 11], [[2, -2], 5], [[-1, 11, -22, 11], 2], [[1, 0, 2, -2], 9], [[-3, -2, -9, 16, -7, 1, -3, 1], 8], [[4, -6, 0, 8], 4], [[-2, 15, -26, 11], 2], [[1, 2, 1, -2], 11], [[-1, 4, -1, -3, 1], 5], [[1, -1], 5], [[2, -3, 1], 5], [[1, -1], 7], [[-1, 5, -4, 1], 4], [[-1], 7], [[2, -1, -1, 1], 6], [[-1], 6], [[-2, 8, -6, 1], 4], [[1, -2], 6], [[-1, 5, -5, 1], 4], [[1, 0, -1], 7], [[-6, 13, -10, 2], 4], [[1, -1, 1], 9]], nothing, [[[448], 0], [[-448], 60], [[4, 0, 0, -64, 36, 0, 48, 0, 36, -64, 0, 0, 4], 0], [[104, -240, 104], 0], [[6, 0, -40, 0, 90, -80, 90, 0, -40, 0, 6], 10], [[], 0], [[16, -112, 192, -112, 16], 0], [[84, -140, 84], 0], [[15, -64, 0, 0, 70, 0, 0, -64, 15], 28], [[-44], 40], [[44], 20], [[12, -8, 0, 0, -10, 0, 0, -8, 12], 8], [[15, -28, 15], 20], [[8, -52, 92, -52, 8], 0], [[4, -20, 28, -20, 4], 20], [[4, 0, -12, 48, -12, 0, 4], 0], [[-32], 33], [[4, 2, 0, -12, 0, 2, 4], 5], [[8, -42, 68, -42, 8], 0], [[-3, 11, -10, 7, -10, 7, -10, 11, -3], 3], [[], 0], [[-2, 16, -28, 16, -2], 1], [[4, -20, 30, -20, 4], 0], [[1, 0, 0, 0, 0, 0, 0, 0, 1], 12], [[-2], 24], [[2], 12], [[-1, 2, -4, 20, -29, 26, -16, 26, -29, 20, -4, 2, -1], 1], [[4, -16, 12, -16, 4], 0], [[2, -8, 12, -8, 2], 20], [[12, -76, 132, -76, 12], 0], [[1, -4, 1, 0, 1, -4, 1], 4], [[], 0], [[4, 0, -2, 0, 4], 4], [[-4, 9, -16, 9, -4], 21], [[2, 0, 0, -4, 0, 0, 2], 4], [[-2, 9, -14, 9, -2], 1], [[-10, 54, -84, 54, -10], 1], [[2, -8, 2], 4], [[], 0], [[-1, 8, -14, 8, -1], 1], [[3, -6, 3], 2], [[], 0], [[-1, 3, -4, 3, -1], 1], [[2, -4, 2], 3], [[], 0], [[1, -4, 1], 3], [[2], 8], [[1], 14], [[-1], 7], [[-4, 19, -32, 19, -4], 1], [[1, 0, 1], 2], [[], 0], [[-1, 2, 11, -28, 11, 2, -1], 1], [[3, -2, 3], 22], [[2], 13], [[-2], 11], [[2], 3], [[-1, 0, -1], 11], [[-5, 29, -48, 29, -5], 1], [[7, -14, 7], 3], [[], 0], [[-2, 13, -24, 13, -2], 1], [[1, 0, 1], 12], [[1], 8], [[-1], 4], [[-224, 224], 0], [[35, -189, 0, 0, 0, 0, 0, 0, 189, -35], 27], [[-44, 180, -180, 44], 0], [[-1, 3, 0, 24, -49, 27, -24, 24, -27, 49, -24, 0, -3, 1], 0], [[-24, 60, -60, 24], 0], [[1, 0, -10, -20, 25, -25, 20, 10, 0, -1], 11], [[10, -14, 0, -12, 12, 0, 14, -10], 3], [[-1, 3, 3, -33, 33, -3, -3, 1], 0], [[3, -5, 0, 0, 5, -3], 14], [[3, 3, -3, -3], 9], [[-2, 22, -60, 60, -22, 2], 0], [[-34, 120, -120, 34], 0], [[5, 0, -10, 0, 19, -19, 0, 10, 0, -5], 11], [[-6, 6, -8, 0, 5, -5, 0, 8, -6, 6], 8], [[-1, 0, 0, 1], 9], [[-3, 40, -111, 111, -40, 3], 0], [[-1, 9, -16, 16, -9, 1], 0], [[-2, 26, -78, 78, -26, 2], 0], [[1, 2, -1, 1, -2, -1], 9], [[1, 0, 0, 2, -2, 0, 0, -1], 9], [[-2, 2, 1, -1, -2, 2], 4], [[4, -12, 12, -4], 1], [[-1, 1, 0, 2, -2, 0, -1, 1], 4], [[3, -3, 3, -3], 1], [[1, -1, 0, 0, 1, -1], 5], [[1, 1, -1, -1], 7], [[2, -2], 3], [[-1, 10, -28, 28, -10, 1], 0], [[-1, 1], 7], [[-4, 7, -10, 5, -5, 10, -7, 4], 4], [[2, -12, 12, -2], 2], [[-1, 14, -43, 43, -14, 1], 0], [[1, 0, 1, -1, 0, -1], 6], [[-1, 9, -9, 1], 3], [[], 0], [[-1, 1], 3], [[1, -1], 5], [[-1, 5, -5, 1], 2], [[], 0], [[3, -3], 4], [[-1, 1], 3], [[-3, 12, -12, 3], 2], [[1, -1], 4], [[-1, 3, -3, 1], 2], [[2, -2], 5], [[-7, 20, -20, 7], 2], [[1, -1], 6]], [[[400], 0], [[-400], 78], [[-48, 0, 144, -112, 0, 0, 16], 6], [[50, -180, 170], 0], [[-60, 60, 0, -30, -60, 60, 0, 0, -12, 0, 0, 0, 0, 2], 17], [[], 0], [[8, -44, 120, -156, 72], 0], [[15, -125, 135], 0], [[60, -64, -15, 0, 0, 0, -6], 40], [[-20], 52], [[20], 26], [[12, -8, -3, 0, 6, 0, -3], 14], [[3, -16, 9], 26], [[-10, 50, -80, 50], 1], [[-8, 10, -16, 4], 27], [[24, -48, 0, 16], 3], [[8], 42], [[-4, -6, 16, -4, -4, 0, 0, 2], 9], [[-5, 36, -68, 41], 1], [[-3, 14, -16, -20, 45, -26, 0, -1, 3], 6], [[], 0], [[-6, 18, -24, 12], 3], [[10, -35, 25], 2], [[], 0], [[], 0], [[], 0], [[2, 20, -1, -49, 77, -44, 0, -4, 8], 6], [[3, -28, 16], 2], [[6, -8, 2], 28], [[2, -23, 77, -114, 59], 0], [[6, -12, 0, 15, -12, 0, 0, 2], 7], [[], 0], [[4, 1, -6, 1], 7], [[1, -4, 8, -6, 1], 28], [[2, -7, 0, 10, -5], 7], [[-1, -2, 10, -15, 8], 2], [[-2, 10, -34, 64, -60, 20], 1], [[6, -6, 0, 0, 2], 6], [[], 0], [[-1, 8, -14, 7], 3], [[2, -6, 5], 4], [[-1], 12], [[1, 3, -7, 3], 3], [[2, -4, 0, 2], 5], [[], 0], [[1, -3], 5], [[2], 10], [[1], 18], [[-1], 9], [[1, -7, 23, -28, 11], 2], [[-2, 2], 5], [[], 0], [[2, -11, 21, -15, -4, 8], 3], [[1, -2], 30], [[-2], 16], [[2], 14], [[-1, -1], 4], [[1, 0, 1], 14], [[3, -14, 35, -38, 15], 2], [[-4, 12, -11, -1, 3], 4], [[], 0], [[-4, 15, -21, 10], 3], [[], 0], [[], 0], [[], 0], [[-140, 260], 0], [[105, -189, 0, -15, 0, 0, -21], 39], [[-19, 93, -177, 111], 0], [[18, -30, -54, 126, -76, 0, -4, 12], 6], [[15, -75, 60], 1], [[10, -25, 25, 0, -5, -20, 20, 0, 0, -6, 0, 0, 0, 0, 1], 17], [[6, -27, 0, 54, -37, 0, 0, 4], 6], [[-10, 32, -30, -4, 12], 3], [[3, -5, 3, -3, 2], 20], [[3, -6, 0, 6, -3, 0, -1, 0, 0, 1], 12], [[2, -15, 46, -60, 27], 1], [[-5, 55, -125, 90], 0], [[-16, 15, -4, -10, -5, 6, 0, -1], 18], [[-6, 6, -5, 0, -2, 4, 0, -3], 14], [[6, 3, -3], 13], [[-1, 10, -40, 89, -97, 38], 0], [[12, -23, 12], 3], [[4, -23, 59, -72, 32], 1], [[2, -2, -2, 3, -1], 13], [[1, 1], 15], [[-2, 1, 2, -4, 1], 7], [[5, -14, 11], 3], [[-1, 4, -4, -4, 7, -4], 7], [[-8, 4], 4], [[3, 1, 0, 4, -5, 0, 0, 1], 8], [[-1, 0, 1], 10], [[1, -3, 2], 5], [[-3, 18, -32, 17], 2], [[1, -1], 8], [[-3, 11, -1, -17, 28, -16, 0, -1, 2], 7], [[10, -17, 0, 4], 4], [[-8, 30, -43, 24], 2], [[-3, -2, 5, -2, -2, 0, 0, 1], 10], [[1, -4, 8, -6, -1, 2], 4], [[-1, 1], 6], [[1, 0, -1], 4], [[1, -1], 7], [[4, -6, 3], 5], [[-1], 6], [[2, -2], 6], [[], 0], [[-3, 10, -12, 5], 4], [[-1, 0, 1], 7], [[-1, 0, 3, -5, 2], 3], [[2, -2, 0, 0, 1], 7], [[1, -7, 18, -18, 6], 3], [[1, -1], 8]], nothing, [[[448], 0], [[-448], 75], [[-64, 0, 144, -96, 0, 0, 16], 6], [[64, -208, 176], 0], [[60, -60, 10, 0, -30, -40, 30, 0, 10, -12], 16], [[], 0], [[8, -64, 144, -160, 72], 0], [[24, -144, 136], 0], [[-10, 0, -24, 64, -45, 0, 0, 0, 0, 0, 0, 0, -1], 37], [[16], 50], [[-16], 25], [[1, 0, 24, -16, 0, 0, 6, 0, 0, 0, 0, 0, 1], 12], [[-6, 0, -10], 25], [[2, -16, 58, -88, 42], 0], [[-2, 4, 2, 4, -6], 25], [[32, -48, 0, 16], 3], [[], 0], [[4, -8, -4, 12, 0, -4], 8], [[-10, 44, -70, 36], 1], [[-3, 21, -24, -17, 40, -19, 0, -1, 3], 6], [[], 0], [[2, -8, 18, -20, 8], 2], [[14, -36, 20], 2], [[6, 0, -4], 19], [[-2], 30], [[2], 15], [[-2, 18, -17, -45, 77, -32, 1, -5, 5], 6], [[8, -24, 16], 2], [[4, 0, -4], 27], [[4, -32, 96, -116, 56], 0], [[6, -16, 0, 12, -10], 7], [[], 0], [[-3, 8, 0, -6, 0, 0, 1], 6], [[-1, -6, 5, 4, -2], 27], [[-1, 5, -10, 1, 7, -3, 0, 0, 1], 6], [[1, -3, 10, -13, 5], 2], [[-4, 18, -46, 66, -52, 20], 1], [[4, -4, -2], 6], [[], 0], [[-3, 8, -10, 5], 3], [[2, -4, 2], 4], [[], 0], [[-1, 3, -5, 3], 3], [[4, -4], 5], [[], 0], [[1, 2, -3, 0, 1], 4], [[-1], 11], [[1], 18], [[-1], 9], [[3, -12, 23, -22, 10], 2], [[-2], 5], [[], 0], [[2, -13, 25, -14, -5, 5], 3], [[-2, 3, 0, -1], 28], [[], 0], [[], 0], [[-1, 0, 0, 1], 3], [[], 0], [[-1, 6, -21, 35, -32, 13], 1], [[-5, 13, -10, -1, 3], 4], [[], 0], [[1, -7, 15, -16, 8], 2], [[-1], 16], [[1], 10], [[-1], 5], [[-168, 280], 0], [[-70, 0, 0, 168, -189, 0, 0, 0, 0, 0, 0, 0, -21], 36], [[-24, 120, -192, 112], 0], [[20, -44, -54, 122, -64, 0, -6, 10], 6], [[24, -80, 56], 1], [[10, -5, 5, 0, -15, -10, 15, 0, 1, -1], 17], [[12, -36, 0, 48, -28, 0, 0, 4], 6], [[-12, 38, -30, -6, 10], 3], [[-2, 0, 3, 0, 0, 0, -1], 18], [[3, -6, 0, 6, -3], 12], [[4, -24, 52, -56, 24], 1], [[-10, 68, -140, 86], 0], [[-5, 21, -5, 5, -9, -5, -6, 1, 0, 0, -1], 16], [[1, -12, 20, -8, 0, -2, 4, 0, 0, 0, 0, 0, 1], 13], [[-7, 6, 0, 0, -3], 12], [[-1, 16, -57, 101, -92, 37], 0], [[-4, 12, -22, 10], 2], [[-1, 7, -33, 69, -67, 29], 0], [[-2, 5, -9, 2, 0, 2, -2], 12], [[-1, 6, -2, 0, 0, 2, -1], 14], [[-7, 4, 2, -4, 0, 0, 1], 7], [[6, -14, 6], 3], [[-2, 8, -7, -2, 6, -2, 0, 0, 1], 7], [[2, -6, 4], 3], [[3, -6, 0, 4, -1], 8], [[-1, 0, 1], 10], [[-1, 1], 6], [[-6, 22, -28, 14], 2], [[1, -2, 0, 0, -1], 8], [[-5, 16, -12, -15, 25, -10, 0, -1, 2], 7], [[12, -16, 0, 4], 4], [[2, -12, 34, -42, 18], 1], [[2, -3, -1, 3, -1], 9], [[1, -5, 8, -5, -1, 2], 4], [[], 0], [[-1, 0, 0, 1], 4], [[1, 0, -1], 6], [[-1, 2, -3, 2], 4], [[], 0], [[2, -2, 0, 1], 6], [[-1], 4], [[1, -4, 7, -8, 4], 3], [[1, -1], 6], [[-1, 2, -3, 2], 4], [[1, -1], 7], [[-1, 3, -10, 14, -13, 6], 2], [[2, 0, -1], 8]], nothing, [[[560], 0], [[-560], 81], [[-40, 0, 180, -184, 0, 0, 44], 6], [[56, -252, 252], 0], [[-30, 10, 0, -48, -60, 90, 0, 20, -42, 0, 0, 0, 0, 4], 17], [[], 0], [[4, -48, 168, -232, 108], 0], [[20, -162, 216], 0], [[-60, 0, 0, 0, -20, 0, 6], 41], [[20], 54], [[-20], 27], [[6, -24, 9, 0, 14, 0, -15, 0, 0, 0, 3], 14], [[-2, 18, -9], 27], [[-10, 66, -130, 76], 1], [[4, -18, 16, -4], 28], [[24, -60, 0, 44], 3], [[-8], 45], [[-6, -2, 20, -2, -14, 0, 0, 4], 9], [[-5, 50, -111, 70], 1], [[8, -15, -28, 74, -46, 0, -6, 9], 7], [[], 0], [[-8, 32, -40, 16], 3], [[15, -60, 50], 2], [[-5], 21], [[], 0], [[], 0], [[10, -11, -62, 119, -64, 3, -14, 13], 7], [[8, -46, 44], 2], [[-8, 10, -2], 29], [[1, -23, 108, -175, 91], 0], [[3, -10, 0, 28, -27, 0, 0, 4], 7], [[], 0], [[2, 1, -14, 5, 0, 3], 7], [[10, -12, 6, -1], 30], [[1, -4, 0, 17, -17, 0, 0, 3], 7], [[-4, 21, -30, 13], 3], [[10, -48, 102, -92, 30], 2], [[4, -6, -4, 0, 4], 6], [[], 0], [[-3, 18, -27, 12], 3], [[6, -13, 7], 4], [[], 0], [[-1, 10, -18, 9], 3], [[6, -10, 0, 4], 5], [[], 0], [[3, -7, 0, 3], 5], [[1], 9], [[-1], 18], [[1], 9], [[1, -13, 43, -49, 19], 2], [[2, -7, 4], 4], [[], 0], [[-9, 30, -18, -14, 13], 4], [[-4, 2], 31], [[2], 18], [[-2], 15], [[1, -5, 3], 4], [[2, -1], 16], [[2, -22, 58, -62, 22], 2], [[-3, 18, -16, -6, 9], 4], [[], 0], [[-7, 28, -37, 15], 3], [[1], 17], [[], 0], [[], 0], [[-182, 378], 0], [[-189, 0, 15, 0, 0, -21, 0, 0, -21, 27, 0, 0, 0, 0, -7], 40], [[-16, 120, -258, 166], 0], [[10, -30, -63, 181, -120, 0, -17, 27], 6], [[20, -106, 110], 1], [[-10, 5, 0, -24, -20, 30, 0, 6, -12, 0, 0, 0, 0, 1], 18], [[3, -20, 0, 75, -73, 0, 0, 15], 6], [[-6, 39, -39, -17, 27], 3], [[3, -2, -3, -3, 1, 3, 0, 0, -3], 20], [[-6, 0, 13, -6, 0, -2, 0, 0, 1], 13], [[1, -19, 73, -99, 44], 1], [[-5, 66, -186, 141], 0], [[-14, -10, 0, 14, 0, -1, -6, 0, 1], 20], [[14, -16, 9, -6, 8, 6, -9, 0, 0, -1, 2], 15], [[-3, -3, -3, 0, 2], 14], [[7, -50, 134, -149, 58], 1], [[-2, 22, -47, 27], 2], [[2, -28, 90, -114, 48], 1], [[3, 1, 1, -2, -2, 1], 15], [[-5, 3, 0, 2, -1, -2], 16], [[2, 7, -10, 3, -1, 2], 8], [[10, -30, 20], 3], [[2, -3, -7, 17, -10, 0, -1, 2], 8], [[4, -19, 15], 3], [[3, -5, 0, 9, -8, 0, 0, 1], 8], [[-1, 1, 2, -1, -1], 10], [[3, -5, 2], 5], [[-4, 32, -58, 31], 2], [[1, -1, 0, 2, -3], 8], [[8, -5, -27, 47, -23, 1, -5, 4], 8], [[11, -26, 0, 15], 4], [[-9, 47, -74, 36], 2], [[-2, -1, 7, -1, -4, 0, 0, 1], 10], [[-5, 13, -7, -5, 4], 5], [[1, -2, 1], 5], [[3, -4, 2], 5], [[1, -2], 7], [[-2, 9, -11, 4], 4], [[1, -1], 6], [[-1, 5, -4, -1, 2], 5], [[-1], 6], [[-6, 18, -19, 6], 4], [[3, -3, 0, 1], 6], [[-2, 9, -11, 4], 4], [[2, -2, -1, 0, 1], 7], [[2, -14, 33, -29, 9], 3], [[1, -1, -2, 1], 8]], nothing, [[[1344], 0], [[-1344], 60], [[4, 0, 0, -64, 180, 0, -240, 0, 180, -64, 0, 0, 4], 0], [[344, -656, 344], 0], [[-6, 0, 60, -120, 210, -320, 210, -120, 60, 0, -6], 10], [[], 0], [[96, -336, 480, -336, 96], 0], [[204, -468, 204], 0], [[-64, 84, 0, 20, 0, 84, -64], 29], [[-60], 40], [[60], 20], [[-8, 24, 0, -38, 0, 24, -8], 9], [[21, -36, 21], 20], [[40, -140, 212, -140, 40], 0], [[8, -28, 28, -28, 8], 20], [[4, 0, -60, 144, -60, 0, 4], 0], [[-32], 33], [[4, -6, -8, 20, -8, -6, 4], 5], [[24, -102, 156, -102, 24], 0], [[-5, 17, -10, -51, 98, -51, -10, 17, -5], 3], [[], 0], [[4, -14, 28, -36, 28, -14, 4], 0], [[4, -36, 58, -36, 4], 0], [[1, 0, -4, 0, 12, 0, -4, 0, 1], 12], [[-6], 24], [[6], 12], [[2, -1, 0, -20, 56, -67, -18, 84, -18, -67, 56, -20, 0, -1, 2], 0], [[4, -16, 36, -16, 4], 0], [[2, -8, 12, -8, 2], 20], [[60, -220, 316, -220, 60], 0], [[3, 0, -21, 40, -21, 0, 3], 4], [[], 0], [[8, -22, 8], 5], [[1, -6, 10, -4, 10, -6, 1], 20], [[2, -14, 24, -14, 2], 5], [[2, -6, 11, -14, 11, -6, 2], 0], [[12, -62, 130, -164, 130, -62, 12], 0], [[6, -8, 6], 4], [[], 0], [[-3, 8, -10, 8, -3], 1], [[1, -2, 1], 2], [[], 0], [[-1, 1, 0, 1, -1], 1], [[2, -4, 2], 3], [[], 0], [[1, -2, 1], 3], [[], 0], [[], 0], [[], 0], [[2, -14, 33, -40, 33, -14, 2], 0], [[-1, 0, -1], 2], [[], 0], [[2, -1, -12, 41, -64, 41, -12, -1, 2], 0], [[4], 23], [[2], 13], [[-2], 11], [[2], 3], [[-1, 0, -1], 11], [[6, -29, 61, -76, 61, -29, 6], 0], [[-4, 17, -26, 17, -4], 2], [[], 0], [[2, -10, 21, -26, 21, -10, 2], 0], [[1, -2, 1], 12], [[], 0], [[], 0], [[-672, 672], 0], [[378, -294, 0, 0, 294, -378], 29], [[-180, 492, -492, 180], 0], [[-3, 1, 0, 40, -123, 81, 120, -120, -81, 123, -40, 0, -1, 3], 0], [[-40, 164, -164, 40], 0], [[1, 0, -10, 30, -25, 60, -60, 25, -30, 10, 0, -1], 10], [[6, -26, 0, 100, -100, 0, 26, -6], 3], [[-3, 1, 33, -99, 99, -33, -1, 3], 0], [[2, -6, 6, -2], 15], [[3, 0, -3, 3, 0, -3], 8], [[-14, 66, -124, 124, -66, 14], 0], [[-110, 328, -328, 110], 0], [[-5, -9, 15, 21, -21, -15, 9, 5], 12], [[8, -12, 12, 19, -19, -12, 12, -8], 9], [[3, -3], 10], [[-33, 144, -261, 261, -144, 33], 0], [[-3, 11, -24, 24, -11, 3], 0], [[-22, 94, -170, 170, -94, 22], 0], [[-1, -7, 7, 1], 10], [[-1, 0, 8, -8, 0, 1], 10], [[-4, 15, -15, 4], 5], [[4, -12, 12, -4], 1], [[-1, 8, -19, 19, -8, 1], 5], [[1, -1, 1, -1], 1], [[2, -8, 8, -2], 6], [[], 0], [[], 0], [[-3, 22, -44, 44, -22, 3], 0], [[1, -2, 2, -1], 6], [[4, -8, 9, 14, -49, 49, -14, -9, 8, -4], 3], [[6, -28, 28, -6], 2], [[-11, 42, -81, 81, -42, 11], 0], [[-1, 1, 0, -4, 4, 0, -1, 1], 5], [[2, -7, 13, -13, 7, -2], 2], [[], 0], [[-1, 1], 3], [[-1, 1], 5], [[-1, 1, -1, 1], 2], [[], 0], [[-1, 1, -1, 1], 3], [[], 0], [[-1, 4, -8, 10, -10, 8, -4, 1], 0], [[1, 0, 0, -1], 3], [[1, -1, 0, 0, 1, -1], 1], [[-1, 1, -1, 1], 4], [[-1, 7, -16, 22, -22, 16, -7, 1], 0], [[2, -2], 6]], [[[840], 0], [[-840], 69], [[-24, 36, 0, -72, 0, 180, -140, 0, 0, 20], 3], [[148, -418, 274], 0], [[-30, 90, -100, 150, -30, -70, 0, -48, 0, 30, 0, 10, -6], 13], [[], 0], [[20, -152, 312, -268, 88], 0], [[84, -273, 210], 0], [[-70, 0, 84, -64, 15, 0, 20, 0, -6], 35], [[-60], 46], [[60], 23], [[-2, 0, 24, -32, 12, 0, 4, 0, -3], 12], [[15, -42, 24], 23], [[8, -52, 136, -142, 44], 0], [[4, -20, 44, -32, 10], 23], [[-12, 72, -60, 0, 20], 2], [[-8, 0, 0, -12], 36], [[-2, 4, -6, -2, 8, 0, -2], 7], [[4, -36, 104, -110, 40], 0], [[2, -2, -2, 28, -26, -26, 42, -19, 0, -1, 2], 4], [[], 0], [[-2, 10, -28, 36, -20, 4], 1], [[-10, 40, -55, 20], 1], [[5], 17], [[], 0], [[], 0], [[-4, 8, -13, 26, 22, -18, -83, 84, -24, 2, -7, 4], 3], [[-6, 24, -35, 20], 1], [[-6, 18, -16, 4], 24], [[12, -90, 208, -193, 64], 0], [[-1, 0, 10, -20, -1, 14, -3], 5], [[], 0], [[-6, 8, 4, -4, 1], 6], [[-2, 8, -22, 19, -8, 2], 24], [[-2, 6, -8, 2, 6, -4], 6], [[-1, 4, -14, 20, -13, 4], 1], [[-10, 58, -116, 118, -66, 14], 1], [[-4, 8, 0, -2], 5], [[], 0], [[3, -12, 17, -10, 2], 2], [[-3, 6, -3], 3], [[], 0], [[1, -4, 7, -6, 2], 2], [[-4, 6, -4], 4], [[2], 20], [[-2, 4, -2], 4], [[], 0], [[], 0], [[], 0], [[-1, 14, -36, 42, -26, 6], 1], [[2, -1], 4], [[], 0], [[11, -34, 41, -10, -7, 4], 3], [[-6, 3, -2], 26], [[2], 13], [[-2], 12], [[-1], 5], [[-1, 2], 12], [[-4, 25, -58, 65, -37, 8], 1], [[3, -16, 21, -8, -1, 2], 3], [[], 0], [[-1, 8, -23, 30, -17, 4], 1], [[-1], 15], [[], 0], [[], 0], [[-357, 483], 0], [[-378, 189, 0, 0, 0, 168, 0, 0, -105], 34], [[-58, 270, -357, 155], 0], [[12, -21, 27, 14, -58, -81, 167, -72, 0, -9, 11], 3], [[-10, 74, -135, 75], 0], [[-15, 15, -20, 30, 10, -10, 4, -19, 0, 0, 0, 1], 14], [[-4, 0, 20, -36, 0, 52, -35, 0, 0, 3], 4], [[3, -39, 69, -33, -9, 11], 2], [[3, 0, -2, -3], 19], [[-3, -3, 6, -3, 0, 3], 10], [[-1, 17, -68, 108, -78, 22], 0], [[-34, 164, -254, 115], 0], [[9, 0, 5, 9, -11, 0, -5, 0, 1, 1], 15], [[-2, -4, -12, 28, -22, 6, -2, 2, 0, -3], 12], [[6, 3], 13], [[-3, 44, -147, 201, -136, 36], 0], [[3, -13, 31, -27, 11], 1], [[-2, 26, -92, 140, -97, 25], 0], [[1, -5, 2, 2], 13], [[4, -4, 0, 1], 15], [[2, -8, 2, 4, -2, 1], 6], [[-6, 18, -17, 3], 2], [[1, -2, 9, -5, -2, 4, -3], 6], [[-2, 6, -9, 3], 2], [[8, -5, -1], 8], [[-1, 1], 10], [[-1, 1], 4], [[4, -24, 48, -38, 11], 1], [[-1, 2, -2], 7], [[-1, 1, -4, -4, 24, -8, -23, 19, -7, 0, -1, 1], 4], [[-8, 24, -16, 0, 3], 3], [[-1, 10, -41, 75, -56, 14], 0], [[3, -4, -2, 2], 9], [[-1, 5, -13, 11, -2, -1, 1], 3], [[], 0], [[-1], 6], [[1], 7], [[2, -4, 4, -2], 3], [[], 0], [[1, -3, 3, -1], 4], [[], 0], [[-2, 7, -13, 12, -6, 1], 2], [[-1, 2], 5], [[2, -3, 4, -3, 1], 3], [[-2, 1], 6], [[-4, 17, -25, 23, -12, 2], 2], [[-2, 1], 7]], nothing, [[[1008], 0], [[-1008], 75], [[-8, 36, 0, -56, 0, 252, -272, 0, 0, 48], 3], [[132, -492, 384], 0], [[-136, 90, 0, 40, 0, -54, -40, 90, 0, 20, -36, 0, 0, 0, 0, 2], 15], [[], 0], [[12, -120, 360, -384, 132], 0], [[72, -306, 324], 0], [[-90, 0, -24, 64, -45, 0, 0, 0, 6, 0, 0, 0, -1], 37], [[36], 50], [[-36], 25], [[9, 0, 6, -40, 36, 0, 12, 0, -15, 0, 0, 0, 1], 12], [[-9, 18, -18], 25], [[2, -38, 156, -206, 86], 0], [[-2, 8, -18, 20, -8], 25], [[-12, 56, -84, 0, 48], 2], [[-8], 39], [[2, -8, -2, 20, -2, -12, 0, 0, 2], 8], [[1, -25, 116, -175, 79], 0], [[-2, 0, 12, -13, -41, 96, -46, 0, -7, 5], 5], [[], 0], [[4, -32, 62, -44, 10], 2], [[-6, 45, -90, 54], 1], [[-4, 0, 0, 0, 0, 0, 1], 17], [[-2], 30], [[2], 15], [[-17, 16, 16, -4, -113, 160, -64, 8, -16, 8], 5], [[-2, 28, -68, 48], 1], [[2, -4, 8, -6], 26], [[5, -69, 236, -285, 107], 0], [[-1, 2, 4, -8, -1, 30, -22, 0, 0, 2], 5], [[], 0], [[-3, 2, 4, -12, 5, 0, 1], 6], [[-1, 6, -8, 8, -2], 27], [[-1, 2, -3, 1, 16, -16, 0, 0, 1], 6], [[1, -18, 41, -32, 8], 2], [[-2, 34, -128, 186, -114, 24], 1], [[-4, 10, -4, -4, 0, 2], 5], [[], 0], [[1, -14, 35, -29, 7], 2], [[-4, 14, -13, 3], 3], [[], 0], [[-6, 20, -19, 5], 3], [[-2, 10, -10, 0, 2], 4], [[], 0], [[5, -6, 0, 1], 5], [[], 0], [[], 0], [[], 0], [[6, -41, 78, -57, 13], 2], [[-1, 6, -6, 2], 3], [[], 0], [[5, -28, 49, -16, -16, 8], 3], [[-2, -1, 2, -1], 28], [[2], 14], [[-2], 13], [[-1, 4, -5, 1], 3], [[-1, 2], 13], [[13, -64, 109, -72, 16], 2], [[1, -12, 28, -17, -7, 5], 3], [[], 0], [[3, -26, 55, -41, 9], 2], [[-1, 1], 16], [[1], 10], [[-1], 5], [[-378, 630], 0], [[-280, 0, -189, 210, 0, 0, 15, 0, 0, -35, 0, 0, 0, 27], 36], [[-42, 270, -468, 228], 0], [[-17, 27, 18, -38, -99, 273, -152, 0, -24, 24], 4], [[-6, 66, -180, 144], 0], [[-45, 20, 0, 11, 4, -18, -10, 15, -1, 6, -6], 16], [[-1, 3, 8, -20, -3, 91, -90, 0, 0, 12], 4], [[3, -27, 71, -51, -24, 24], 2], [[3, -4, -3, 3, 2, 3], 20], [[-1, -3, -3, 11, -3, 0, -1], 12], [[7, -59, 149, -139, 42], 1], [[-21, 162, -330, 189], 0], [[-24, 26, -15, 5, 0, 0, 4, 4], 16], [[9, 0, 22, -42, 18, -6, 6, 9, -6, 0, 0, -1], 13], [[-10, 3, -3, 1], 12], [[-1, 23, -133, 269, -217, 59], 0], [[-11, 49, -62, 24], 2], [[12, -82, 186, -162, 46], 1], [[-3, 6, -6, 6, -3], 12], [[2, -1, 2, -8, 8], 13], [[-3, 0, 8, -9, 2, -1], 7], [[-5, 27, -38, 16], 2], [[-1, 2, -3, -7, 17, -7, 0, -1], 7], [[-1, 13, -24, 12], 2], [[-1, 1, 2, -4, 0, 6, -4], 6], [[-1, 1, 1, -1], 10], [[-3, 6, -3], 4], [[1, -20, 68, -79, 27], 1], [[1, 2], 10], [[-2, -1, 10, 2, -45, 52, -16, 3, -4, 1], 6], [[-5, 23, -30, 0, 12], 3], [[3, -36, 102, -101, 32], 1], [[1, -3, -2, 6, 0, -2], 9], [[2, -13, 18, -4, -4, 1], 4], [[-1, 2, -1], 4], [[-3, 5, -3], 4], [[2, -1], 7], [[1, -9, 15, -8, 1], 3], [[1, -1], 6], [[-2, 6, -3, -1], 5], [[-1, 1], 4], [[4, -22, 30, -15, 2], 3], [[-1, 4, -2], 5], [[1, -9, 15, -8, 1], 3], [[-2, 4, -1, -1], 6], [[11, -41, 52, -26, 4], 3], [[1, 0, -1], 8]], nothing, [[[2016], 0], [[-2016], 60], [[-112, 288, 0, -352, 0, 288, -112], 3], [[516, -984, 516], 0], [[-20, 0, 0, 70, -180, 270, -328, 270, -180, 70, 0, 0, -20], 9], [[], 0], [[144, -504, 720, -504, 144], 0], [[306, -702, 306], 0], [[-15, 0, 60, 0, 0, 0, 60, 0, -15], 28], [[-36], 40], [[36], 20], [[-3, 0, 30, 0, -36, 0, 30, 0, -3], 8], [[9, -36, 9], 20], [[58, -214, 312, -214, 58], 0], [[2, -20, 36, -20, 2], 20], [[-96, 208, -96], 2], [[-16], 33], [[4, -6, -16, 36, -16, -6, 4], 5], [[35, -155, 232, -155, 35], 0], [[-6, 31, -19, -72, 140, -72, -19, 31, -6], 3], [[], 0], [[4, -20, 42, -52, 42, -20, 4], 0], [[9, -51, 90, -51, 9], 0], [[1, 0, -4, 0, 0, 0, -4, 0, 1], 12], [[-4], 24], [[4], 12], [[-28, 103, -103, -29, 120, -29, -103, 103, -28], 3], [[-28, 50, -28], 1], [[-8, 16, -8], 21], [[91, -327, 478, -327, 91], 0], [[-2, 5, -4, -28, 52, -28, -4, 5, -2], 3], [[], 0], [[1, 10, -28, 10, 1], 4], [[-2, 13, -16, 13, -2], 21], [[1, 0, -18, 34, -18, 0, 1], 4], [[-7, 17, -20, 17, -7], 1], [[20, -90, 194, -248, 194, -90, 20], 0], [[-2, 10, -16, 10, -2], 3], [[], 0], [[1, -5, 12, -16, 12, -5, 1], 0], [[-1, 2, -2, 2, -1], 1], [[], 0], [[1, -2, 1], 2], [[2, -4, 2], 3], [[], 0], [[], 0], [[], 0], [[], 0], [[], 0], [[4, -21, 48, -64, 48, -21, 4], 0], [[2], 3], [[], 0], [[-21, 65, -90, 65, -21], 2], [[1, 0, 1], 22], [[-2], 13], [[2], 11], [[-1, 0, -1], 2], [[1, 0, 1], 11], [[9, -42, 90, -116, 90, -42, 9], 0], [[-6, 25, -36, 25, -6], 2], [[], 0], [[3, -14, 31, -40, 31, -14, 3], 0], [[1, -2, 1], 12], [[-1], 8], [[1], 4], [[-1008, 1008], 0], [[70, 216, 0, -210, 0, 0, 210, 0, -216, -70], 27], [[-270, 738, -738, 270], 0], [[68, -206, 126, 176, -176, -126, 206, -68], 3], [[-60, 246, -246, 60], 0], [[-15, 15, -35, 49, -49, 35, -15, 15], 12], [[9, -44, 6, 145, -145, -6, 44, -9], 3], [[54, -146, 146, -54], 2], [[2, -6, 6, -2], 15], [[3, -3, 0, 0, 3, -3], 8], [[-21, 98, -187, 187, -98, 21], 0], [[-165, 492, -492, 165], 0], [[1, 0, 0, -5, 5, -1, 9, -9, 1, -5, 5, 0, 0, -1], 9], [[3, 0, -18, 12, 18, -18, -12, 18, 0, -3], 8], [[7, 6, -6, -7], 9], [[-51, 213, -393, 393, -213, 51], 0], [[17, -36, 36, -17], 1], [[-34, 138, -256, 256, -138, 34], 0], [[3, -3, -6, 6, 3, -3], 9], [[-2, 1, 6, -6, -1, 2], 10], [[-1, -6, 18, -18, 6, 1], 4], [[-1, 8, -17, 17, -8, 1], 0], [[-1, 0, 10, -25, 25, -10, 0, 1], 4], [[-2, 2], 2], [[-1, 1, 3, -5, 5, -3, -1, 1], 4], [[], 0], [[], 0], [[-6, 32, -67, 67, -32, 6], 0], [[-1, 1], 7], [[3, -16, 16, 23, -69, 69, -23, -16, 16, -3], 3], [[9, -40, 40, -9], 2], [[-14, 65, -120, 120, -65, 14], 0], [[4, -11, 11, -4], 7], [[3, -11, 18, -18, 11, -3], 2], [[], 0], [[1, 0, 0, -1], 2], [[-1, 1], 5], [[1, -1, 2, -2, 1, -1], 1], [[-1, 1], 4], [[], 0], [[1, -1], 3], [[-1, 5, -10, 15, -15, 10, -5, 1], 0], [[-1, 1], 4], [[1, -1], 3], [[-1, 2, -2, 1], 4], [[-2, 10, -22, 34, -34, 22, -10, 2], 0], [[1, -1], 6]], [[[1296], 0], [[-1296], 70], [[-48, 72, 0, -24, 0, 252, -288, 0, 0, 36], 3], [[210, -660, 426], 0], [[-40, 0, 90, -232, 180, 0, 0, 0, 0, -20, 60, 0, 10, -24], 12], [[], 0], [[24, -204, 504, -444, 120], 0], [[135, -405, 351], 0], [[-81], 34], [[], 0], [[], 0], [[6, 0, 0, -48, 45, 0, 6, 0, -9], 12], [[], 0], [[6, -78, 228, -228, 72], 0], [[], 0], [[-24, 96, -84, 0, 36], 2], [[-24], 38], [[-2, -8, 0, 20, -2, -8], 8], [[5, -55, 170, -190, 66], 0], [[3, -9, 2, 8, -3, -46, 85, -34, 0, -4, 2], 4], [[], 0], [[14, -56, 72, -34, 4], 2], [[1, -19, 71, -94, 42], 0], [[-1, 0, 4, 0, -6, 0, 4, 0, -2], 14], [[6], 28], [[-6], 14], [[12, -42, 30, 6, 30, -129, 150, -48, 9, -12, 3], 4], [[-12, 39, -72, 36], 1], [[], 0], [[13, -126, 337, -321, 94], 0], [[1, -4, 0, 4, -1, -4, 21, -14], 4], [[], 0], [[-6, 0, 9, -6, 3], 6], [[], 0], [[-3, 0, 0, 0, 12, -9], 6], [[6, -30, 45, -24, 3], 2], [[-8, 72, -198, 220, -100, 14], 1], [[2, -10, 12, -2, -2], 4], [[], 0], [[5, -26, 39, -21, 3], 2], [[1, -9, 16, -8, 1], 2], [[-1], 10], [[1, -10, 20, -13, 2], 2], [[-6, 12, -6], 4], [[], 0], [[-3, 6, -3], 4], [[], 0], [[], 0], [[], 0], [[-1, 18, -67, 89, -45, 7], 1], [[-2, 5, -4], 3], [[], 0], [[12, -54, 57, -9, -12, 3], 3], [[3], 26], [[], 0], [[], 0], [[3, -3], 4], [[], 0], [[-2, 32, -105, 126, -60, 8], 1], [[5, -24, 33, -11, -4, 2], 3], [[], 0], [[11, -46, 63, -31, 4], 2], [[-1, 2, -2], 14], [[], 0], [[], 0], [[-540, 756], 0], [[-336, 0, 189, -315, 0, 0, 210, 0, 0, 15, 0, 0, 21], 33], [[-75, 405, -585, 231], 0], [[12, -54, 54, 12, -12, -117, 279, -144, 0, -21, 15], 3], [[-20, 115, -215, 136], 0], [[-10, 0, 25, -76, 40, 0, -9, 3, 1, 0, 10, -1, 2, -1], 13], [[1, -10, 4, 5, -8, -4, 84, -78, 0, 0, 6], 3], [[6, -54, 99, -45, -21, 15], 2], [[5, -3, 0, -4, -3, 3, 2], 18], [[3, 3, -4, -3, -3, 7, -3], 10], [[-1, 20, -106, 193, -136, 30], 0], [[-45, 255, -405, 186], 0], [[-5, 0, 19, -41, 31, -5, 5, -5, 10, 4, -5, 0, 1], 13], [[-2, 4, 0, 24, -48, 21, -4, 2, 6, -3], 12], [[6, -9, 3, -3, 3], 11], [[-3, 51, -219, 351, -222, 45], 0], [[3, -24, 60, -57, 15], 1], [[-1, 29, -144, 244, -161, 33], 0], [[1, -6, 7, -7, 7, -3, 1], 11], [[3, -3, 3, -9, 6], 13], [[2, -4, -4, 9, -4, 1], 6], [[1, -14, 37, -33, 9], 1], [[1, -2, 0, 0, -7, 11, -3], 6], [[-4, 15, -21, 6], 2], [[1, -2, 1, 2, -1, -1, 4], 5], [[-1, -1, 1, 1], 9], [[1, -5, 5, -1], 3], [[6, -41, 90, -72, 18], 1], [[-1], 7], [[3, -7, -1, 5, 14, -48, 39, -8, 2, -2], 5], [[1, -14, 34, -24, 0, 6], 2], [[11, -70, 135, -96, 21], 1], [[-1, 0, -2, -2, 4], 8], [[8, -22, 17, -1, -2], 4], [[-1, 1], 4], [[-2, 3, -1], 4], [[-1, 2, -1], 6], [[4, -14, 13, -4], 3], [[1], 6], [[1, -5, 5, -1], 4], [[], 0], [[13, -33, 29, -8], 3], [[-3, 3, -1], 5], [[3, -12, 12, -4], 3], [[1, -4, 4], 5], [[-2, 26, -59, 51, -16, 1], 2], [[-2, 0, 1], 7]], nothing, [[[1400], 0], [[-1400], 69], [[-8, 72, 0, -224, 0, 360, -212, 0, 0, 12], 3], [[260, -670, 470], 0], [[-30, 60, -164, 210, -210, 130, 0, -30, -80, 60, 0, 0, -6], 13], [[], 0], [[56, -248, 480, -452, 164], 0], [[120, -475, 330], 0], [[90, 0, -60, 0, 15, 0, -20], 35], [[20], 46], [[-20], 23], [[-27, 0, 42, -24, -6, 0, 2], 12], [[-3, 22, -6], 23], [[12, -86, 206, -216, 92], 0], [[8, -26, 12, -2], 24], [[-24, 128, -120, 0, 12], 2], [[-8, 0, 0, 12], 36], [[-2, 18, -18, -12, 20, -4, -2], 7], [[5, -55, 152, -171, 67], 0], [[2, -2, -30, 84, -61, -37, 74, -29, 0, 0, 1], 4], [[], 0], [[-2, 12, -32, 48, -40, 14], 1], [[-10, 55, -75, 30], 1], [[], 0], [[], 0], [[], 0], [[13, -27, -11, 80, -17, -125, 167, -68, 0, -3, 6], 4], [[-2, 28, -53, 12], 1], [[2, -10, 8], 24], [[27, -147, 316, -314, 121], 0], [[-2, -6, 32, -34, -2, 20, -11], 5], [[], 0], [[-11, 14, 2, -2], 6], [[-5, 12, -12, 2], 25], [[-3, 17, -20, 0, 7, -1], 6], [[2, -12, 24, -20, 6], 2], [[4, -26, 80, -158, 188, -122, 34], 0], [[-8, 16, -8], 5], [[], 0], [[2, -9, 18, -17, 6], 2], [[-1, 4, -6, 3], 3], [[], 0], [[-1, 0, 5, -5, 1], 2], [[-2, 4, -4], 4], [[2], 20], [[3, -1], 5], [[-2], 9], [[-1], 16], [[1], 8], [[-3, 14, -39, 58, -43, 13], 1], [[1, 0, -1], 3], [[], 0], [[-3, 25, -56, 63, -33, -3, 6], 2], [[2, -1], 26], [[2], 13], [[-2], 12], [[1, -2], 3], [[-1, 2], 12], [[1, -8, 32, -72, 96, -69, 21], 0], [[6, -22, 31, -17, 0, 1], 3], [[], 0], [[-1, 8, -24, 38, -32, 11], 1], [[], 0], [[], 0], [[], 0], [[-595, 805], 0], [[210, 0, -216, -105, 0, 0, 105, -189, 0, -15], 33], [[-118, 426, -579, 277], 0], [[4, -40, 36, 100, -124, -144, 292, -136, 0, -3, 9], 3], [[-10, 110, -225, 105], 0], [[15, -34, 45, -40, 40, 0, -5, -20, 20, 0, 0, -1], 15], [[-3, 3, 64, -114, -3, 95, -43, 0, 0, 1], 4], [[12, -72, 116, -72, -3, 9], 2], [[6, -3, 6, 3, -5, 3], 17], [[6, -9, 0, 6, -3], 12], [[-3, 28, -93, 155, -129, 42], 0], [[-55, 270, -400, 200], 0], [[4, -15, 1, -11, 20, -9, 0, -6, 1], 15], [[15, -12, -18, 32, -13, -3, 0, 2], 12], [[-6, -6, 6, 3], 11], [[-14, 81, -212, 310, -235, 73], 0], [[1, -12, 36, -37, 9], 1], [[-7, 45, -133, 205, -166, 56], 0], [[-2, 5, 3, -6, -1, 1], 11], [[2, -6, -1, 3, 0, -1], 12], [[7, -10, 7, 1, -2], 6], [[-5, 17, -21, 9], 2], [[2, -10, 17, -11, -2, 5, -1], 6], [[1, 3, -7, 1], 2], [[-3, 5, -2, -1, 5, -2], 7], [[1, -1], 9], [[1, -2, 1], 5], [[5, -28, 60, -57, 20], 1], [[-1, 1], 7], [[-1, 1, 7, -36, 47, -17, -32, 43, -16, 0, 0, 1], 4], [[-11, 39, -26, 0, 1], 3], [[-1, 15, -57, 101, -91, 34], 0], [[-3, 8, -7, -2, 5, -2], 8], [[-2, 8, -15, 17, -9, 0, 1], 3], [[], 0], [[-1, 1, -1], 3], [[1], 7], [[-2, 5, -5, 2], 4], [[1, -1], 5], [[-1, 2, -1], 5], [[], 0], [[-1, 5, -13, 19, -15, 5], 2], [[1, 0, -1], 5], [[1, -1, -1, 4, -3, 1], 2], [[-2, 3, -2], 6], [[1, -4, 13, -29, 36, -24, 7], 1], [[-1, 1], 7]], nothing, [[[1400], 0], [[-1400], 75], [[-4, 36, 0, -144, 0, 396, -344, 0, 0, 60], 3], [[190, -670, 540], 0], [[-116, 150, -60, 50, 0, -114, -80, 120, 0, 30, -42, 0, 0, 0, 0, 2], 15], [[], 0], [[20, -180, 480, -520, 200], 0], [[90, -435, 440], 0], [[-80, 0, 24, -64, 30, 0, 0, 0, -6, 0, 0, 0, 1], 37], [[-40], 50], [[40], 25], [[-10, 0, 30, -56, 24, 0, 18, 0, -12, 0, 0, 0, 2], 12], [[9, -24, 19], 25], [[4, -52, 202, -282, 124], 0], [[2, -8, 26, -24, 8], 25], [[-12, 80, -132, 0, 60], 2], [[-4, 0, 0, 8], 39], [[10, -16, -8, 28, -2, -14, 0, 0, 2], 8], [[1, -33, 152, -233, 111], 0], [[-1, -3, 39, -43, -57, 128, -62, 0, -7, 8], 5], [[], 0], [[6, -36, 74, -62, 18], 2], [[-5, 55, -120, 70], 1], [[], 0], [[], 0], [[], 0], [[-13, 14, 40, -33, -154, 229, -92, 7, -20, 13], 5], [[-1, 36, -86, 60], 1], [[-2, 6, -10, 6], 26], [[9, -98, 316, -383, 159], 0], [[2, 10, -30, 0, 42, -29, 0, 0, 2], 6], [[], 0], [[2, 10, 0, -18, 4, 0, 2], 6], [[1, -8, 13, -8, 2], 27], [[1, 3, -12, 2, 21, -17, 0, 0, 2], 6], [[2, -19, 47, -43, 13], 2], [[-6, 52, -164, 236, -162, 44], 1], [[-2, 14, -8, -6, 0, 2], 5], [[], 0], [[1, -15, 39, -37, 12], 2], [[-3, 14, -16, 5], 3], [[], 0], [[-7, 21, -22, 8], 3], [[-2, 12, -14, 0, 2], 4], [[2], 20], [[-1, 7, -9, 0, 2], 4], [[1], 11], [[-1], 18], [[1], 9], [[9, -49, 93, -76, 23], 2], [[-1, 6, -7, 2], 3], [[], 0], [[7, -39, 70, -32, -20, 13], 3], [[2, -2, 1], 29], [[-2, 0, 0, -2], 14], [[2, 2], 13], [[4, -4, 2], 4], [[1, -2, -2, 1], 13], [[-1, 19, -79, 134, -101, 29], 1], [[1, -15, 39, -27, -7, 8], 3], [[], 0], [[4, -30, 64, -55, 17], 2], [[], 0], [[], 0], [[], 0], [[-525, 875], 0], [[-315, 0, -189, 378, -189, 0, 15, 0, 0, -56, 0, 0, -21, 27], 36], [[-65, 375, -630, 330], 0], [[-13, 27, 44, -100, -153, 383, -204, 0, -27, 33], 4], [[-5, 85, -250, 190], 0], [[-35, 30, -5, 16, 9, -43, -20, 30, -1, 6, -7], 16], [[3, 23, -65, -3, 136, -109, 0, 0, 15], 5], [[3, -37, 103, -81, -27, 33], 2], [[-1, 6, 6, -4, -3, 0, -1, 3], 18], [[5, -9, -3, 14, -6, 0, -1], 12], [[11, -79, 189, -186, 65], 1], [[-30, 220, -450, 265], 0], [[-4, -1, 15, 10, -19, -15, 1, 10, 0, -1, -1], 16], [[-10, -12, 42, -44, 12, -8, 10, 6, -6, 0, 0, -1, 1], 13], [[9, 9, -3, -2, -3], 12], [[-2, 39, -183, 349, -297, 95], 0], [[-14, 58, -78, 33], 2], [[-1, 19, -110, 240, -220, 74], 0], [[3, -5, -5, 7, -1, 1, -2], 12], [[-2, 1, 2, -9, 5, 0, 2, -1], 13], [[-2, 6, 8, -12, 2, -1, 1], 7], [[-4, 30, -49, 21], 2], [[7, -8, -8, 20, -9, 0, -1, 1], 8], [[-1, 15, -27, 15], 2], [[1, 5, -13, 0, 10, -5], 7], [[1, -2, 1, 1, -1], 9], [[-2, 5, -4, 1], 4], [[1, -24, 84, -101, 40], 1], [[1, -3, 1, 2, -1], 8], [[-1, -6, 32, -13, -56, 73, -26, 2, -5, 3], 6], [[-4, 32, -46, 0, 15], 3], [[5, -45, 127, -137, 49], 1], [[5, -6, -3, 8, -1, -2], 9], [[3, -16, 25, -10, -5, 3], 4], [[-1, 2, -1], 4], [[-2, 4, -3, 1], 4], [[-1, 2, -1], 6], [[1, -8, 15, -11, 3], 3], [[1, -1], 6], [[-4, 8, -5, -1, 1], 5], [[1], 5], [[5, -22, 34, -23, 6], 3], [[-1, 4, -3], 5], [[1, -9, 15, -11, 3], 3], [[-1, 5, -2, -1], 6], [[-1, 14, -45, 61, -39, 10], 2], [[3, -1, -2], 8]], nothing, [[[2400], 0], [[-2400], 63], [[8, 0, 0, -176, 252, 0, -144, 0, 360, -320, 0, 0, 20], 0], [[520, -1240, 640], 0], [[-18, 0, -50, 0, 330, -560, 360, -30, 50, 0, -6, -20, 30, 0, 0, -6], 10], [[], 0], [[96, -528, 960, -672, 144], 0], [[360, -780, 480], 0], [[-15, 0, -24, 0, 10, 0, -60, 64, -15, 0, -20], 29], [[60], 42], [[-60], 21], [[6, -24, 6, 0, 8, 0, 6, -40, 33, 0, 2], 8], [[-18, 42, -21], 21], [[34, -232, 442, -312, 74], 0], [[-4, 28, -46, 24, -8], 21], [[8, 0, -84, 192, -120, 0, 20], 0], [[-16], 36], [[4, -4, -4, 10, -14, -4, 16, -2, -2], 5], [[29, -172, 330, -248, 61], 0], [[-5, 28, -34, -16, 50, -14, -57, 70, -21, 0, -1], 3], [[], 0], [[-8, 56, -112, 90, -28, 2], 1], [[10, -70, 140, -110, 30], 0], [[], 0], [[], 0], [[], 0], [[-2, 4, -8, 74, -137, 38, 50, 71, -189, 149, -40, 7, -6, 1], 1], [[8, -44, 84, -80, 20], 0], [[-2, 8, -18, 14, -2], 21], [[60, -348, 648, -460, 104], 0], [[4, -7, -12, 15, -4, -7, 12, -5], 4], [[], 0], [[2, 2, -12, 2, 5, -2], 4], [[4, -14, 24, -14, 4, -1], 22], [[1, 1, -6, 5, -6, 0, 6, -1], 4], [[-4, 29, -60, 50, -16, 1], 1], [[4, -54, 220, -388, 312, -106, 10], 0], [[10, -20, 14, -2], 4], [[], 0], [[-3, 23, -51, 43, -13, 1], 1], [[7, -19, 15, -4], 2], [[1], 9], [[-1, 9, -21, 19, -6], 1], [[4, -14, 12, -2], 3], [[], 0], [[3, -7, 5, -1], 3], [[], 0], [[], 0], [[], 0], [[1, -13, 67, -130, 109, -37, 3], 0], [[2, -5, 4, -1], 2], [[], 0], [[-2, -2, 53, -113, 81, -8, -6, 1], 1], [[-3, 2, -3], 23], [[-2], 15], [[2], 12], [[-2, 3], 3], [[-2, 1], 13], [[1, -23, 110, -206, 168, -55, 5], 0], [[-3, 23, -51, 40, -8, -1], 2], [[], 0], [[-7, 44, -92, 76, -23, 2], 1], [[], 0], [[], 0], [[], 0], [[-1140, 1260], 0], [[-189, 0, -84, 0, 0, -336, 0, 594, -315, 0, 0, 210], 28], [[-228, 876, -984, 312], 0], [[-2, 6, 0, 64, -211, 153, 84, -60, -198, 338, -144, 0, -13, 7], 0], [[-80, 280, -340, 140], 0], [[-4, 10, -16, -30, 101, -127, 55, -4, 5, 3, 6, 0, 0, 0, 1], 11], [[18, -45, 9, 41, -48, -9, 88, -55, 0, 0, 1], 3], [[-2, 6, 33, -139, 170, -54, -13, 7], 0], [[-3, -2, 0, 0, -1, 0, 0, -2], 14], [[-5, 0, 9, -4, -3, 0, 3], 9], [[-10, 88, -256, 308, -154, 24], 0], [[-150, 580, -660, 230], 0], [[-5, 0, 35, -60, 31, -5, 5, 0, 0, -1], 13], [[14, -16, 6, -3, 5, -6, 24, -34, 15, -2], 9], [[-3, 6, -9, 3], 10], [[-23, 184, -503, 583, -284, 43], 0], [[-2, 22, -67, 89, -49, 7], 0], [[-12, 118, -340, 402, -192, 30], 0], [[-2, 1, -7, 7, -7, 2], 10], [[-1, 0, -2, 3, -3, 3, -4, 1], 10], [[2, 7, -9, -2, 5], 5], [[10, -41, 53, -26, 4], 1], [[1, 3, -7, 6, -2, -4, 3], 5], [[4, -15, 23, -13, 1], 1], [[2, -2, -5, 4, 2, -2, 1], 5], [[1, 0, -1], 7], [[4, -7, 3], 3], [[-3, 33, -108, 136, -69, 11], 0], [[1, -1, 1, -1], 6], [[-6, 23, -12, -26, 21, 25, -47, 25, -4, 1], 4], [[10, -41, 52, -22, 0, 1], 2], [[-4, 55, -177, 213, -103, 16], 0], [[1, 2, -4, 2, -1, -2, 2], 6], [[-6, 26, -36, 16], 3], [[1, -1], 3], [[1, -3, 1], 3], [[1, -1, 1], 5], [[-2, 13, -19, 10, -1], 2], [[-1], 5], [[-1, 5, -7, 3], 3], [[], 0], [[-9, 37, -51, 27, -4], 2], [[2, -4, 2], 4], [[-2, 11, -16, 8, -1], 2], [[4, -6, 2], 5], [[2, -21, 69, -91, 51, -10], 1], [[2, -2], 6]], nothing, [[[2800], 0], [[-2800], 66], [[4, 0, 0, -112, 252, 0, -304, 0, 540, -416, 0, 0, 36], 0], [[550, -1420, 830], 0], [[-24, 0, 30, 0, 240, -696, 420, -60, 210, 0, -78, -60, 60, 0, 10, -12], 10], [[], 0], [[96, -548, 1080, -852, 224], 0], [[345, -915, 625], 0], [[-64, 24, 0, -10, 0, 84, -128, 45, 0, 0, 0, -6], 31], [[-80], 44], [[80], 22], [[-8, 12, 0, -2, 0, 24, -64, 27, 0, 6, 0, -3], 9], [[24, -48, 32], 22], [[30, -220, 490, -410, 120], 0], [[6, -32, 44, -40, 12], 22], [[4, 0, -84, 200, -180, 0, 36], 0], [[24], 36], [[-6, -4, 28, -24, -12, 24, -2, -4], 6], [[21, -158, 364, -329, 98], 0], [[-1, 14, -25, -28, 94, -49, -75, 113, -37, 0, -3, 1], 3], [[], 0], [[-6, 46, -114, 116, -50, 8], 1], [[5, -55, 150, -150, 50], 0], [[], 0], [[], 0], [[], 0], [[-1, 2, -4, 50, -125, 24, 102, 29, -252, 235, -72, 10, -11, 4], 1], [[4, -28, 101, -104, 36], 0], [[2, -8, 16, -16, 6], 22], [[55, -348, 723, -595, 164], 0], [[2, -4, -9, 26, -21, -4, 23, -12], 4], [[], 0], [[4, -6, 8, -1, -6, 1], 5], [[-4, 11, -16, 17, -10, 2], 23], [[2, -5, 10, -12, 2, 8, -5], 5], [[-2, 22, -62, 67, -29, 4], 1], [[4, -48, 212, -416, 394, -170, 26], 0], [[6, -18, 18, -6, -2], 4], [[], 0], [[-1, 17, -49, 55, -25, 3], 1], [[4, -17, 20, -8, 1], 2], [[], 0], [[6, -23, 27, -11, 1], 2], [[2, -12, 16, -6], 3], [[], 0], [[1, -5, 8, -3], 3], [[-1], 10], [[1], 16], [[-1], 8], [[-9, 56, -133, 140, -63, 9], 1], [[1, -6, 7, -2], 2], [[], 0], [[-1, -4, 47, -117, 108, -23, -11, 4], 1], [[-2, 1, -2], 25], [[], 0], [[], 0], [[-4, 5, -1], 3], [[], 0], [[1, -18, 99, -216, 213, -94, 14], 0], [[-2, 18, -48, 54, -19, -3, 1], 2], [[], 0], [[-4, 36, -92, 97, -43, 6], 1], [[], 0], [[], 0], [[], 0], [[-1260, 1540], 0], [[-420, 0, 0, 189, 0, 405, -595, 0, -189, 210, 0, 0, 120], 30], [[-233, 951, -1179, 437], 0], [[-1, 3, 0, 36, -175, 153, 150, -154, -261, 487, -208, 0, -21, 15], 0], [[-60, 285, -425, 200], 0], [[-5, 0, 4, 0, 96, -167, 55, -19, 46, 8, -13, -10, 5, -1, 1], 11], [[7, -28, 12, 75, -108, -12, 134, -84, 0, 0, 4], 3], [[-1, 3, 33, -137, 201, -93, -21, 15], 0], [[4, 0, -3, -11, 9, 3, -2], 15], [[-2, -3, 12, -5, -6, -3, 7], 9], [[-7, 76, -256, 363, -222, 46], 0], [[-140, 615, -805, 325], 0], [[5, 15, -51, 20, -5, 21, -5, 1, 5, 0, -1], 14], [[-14, 6, 2, 0, -12, 44, -47, 12, -4, 2, 3], 10], [[3, 9, -1, 3, -6], 10], [[-21, 177, -524, 687, -396, 80], 0], [[-1, 12, -64, 108, -73, 15], 0], [[-11, 107, -348, 470, -277, 57], 0], [[1, 0, -2, 4, -4, 6, -3], 10], [[-1, 1, 3, 0, 1, -6, 3, -1], 11], [[-2, 4, -8, 5, 4, -3], 5], [[5, -34, 61, -41, 9], 1], [[-1, 3, -8, 11, -7, -4, 7, -1], 5], [[1, -13, 31, -19, 4], 1], [[1, -2, -4, 6, -5, -1, 2, -1], 5], [[], 0], [[3, -7, 5, -1], 3], [[-1, 24, -100, 159, -104, 22], 0], [[-1, 1], 9], [[-1, 14, -6, -39, 51, 11, -67, 49, -10, 2, -1], 4], [[7, -34, 60, -40, 0, 4], 2], [[-3, 45, -171, 251, -152, 33], 0], [[-1, -5, 6, -2, -4, 4, -1], 7], [[-4, 21, -38, 26, -4, -1], 3], [[1, -2, 1], 3], [[2, -5, 3], 3], [[1, -2, 1], 5], [[-1, 10, -20, 15, -4], 2], [[-1, 1], 5], [[3, -7, 6, -1], 4], [[-1], 4], [[-6, 32, -55, 40, -12, 1], 2], [[1, -4, 3], 4], [[-1, 10, -19, 14, -3], 2], [[2, -6, 4, -1], 5], [[1, -16, 62, -100, 74, -23, 2], 1], [[-1, 1], 7]], nothing, [[[5600], 0], [[-5600], 60], [[20, 0, 0, -464, 756, 0, -624, 0, 756, -464, 0, 0, 20], 0], [[1380, -2840, 1380], 0], [[30, -20, -42, 0, 70, -180, 810, -1256, 810, -180, 70, 0, -42, -20, 30], 8], [[], 0], [[320, -1400, 2160, -1400, 320], 0], [[930, -1870, 930], 0], [[30, -64, 84, 0, -90, 0, 84, -64, 30], 28], [[-100], 40], [[100], 20], [[15, -56, 42, 0, 0, 0, 42, -56, 15], 8], [[33, -68, 33], 20], [[134, -622, 972, -622, 134], 0], [[10, -44, 72, -44, 10], 20], [[20, 0, -252, 480, -252, 0, 20], 0], [[-16], 33], [[-2, 16, -12, -32, 60, -32, -12, 16, -2], 4], [[101, -463, 732, -463, 101], 0], [[-25, 92, -87, -97, 226, -97, -87, 92, -25], 3], [[], 0], [[4, -46, 150, -216, 150, -46, 4], 0], [[35, -185, 300, -185, 35], 0], [[], 0], [[], 0], [[], 0], [[2, -7, 4, -56, 255, -348, 49, 208, 49, -348, 255, -56, 4, -7, 2], 0], [[20, -116, 186, -116, 20], 0], [[4, -16, 24, -16, 4], 20], [[209, -933, 1446, -933, 209], 0], [[-2, 16, -12, -39, 76, -39, -12, 16, -2], 3], [[], 0], [[3, 14, -40, 14, 3], 4], [[1, -6, 22, -28, 22, -6, 1], 20], [[3, 2, -26, 42, -26, 2, 3], 4], [[2, -21, 74, -110, 74, -21, 2], 0], [[26, -208, 596, -824, 596, -208, 26], 0], [[-2, 22, -44, 22, -2], 3], [[], 0], [[1, -16, 60, -90, 60, -16, 1], 0], [[-3, 17, -28, 17, -3], 1], [[], 0], [[-5, 22, -34, 22, -5], 1], [[-2, 16, -28, 16, -2], 2], [[], 0], [[7, -12, 7], 3], [[-2], 8], [[-1], 14], [[1], 7], [[6, -57, 179, -256, 179, -57, 6], 0], [[3, -6, 3], 2], [[], 0], [[2, -7, -29, 164, -262, 164, -29, -7, 2], 0], [[2, -2, 2], 22], [[-2], 13], [[2], 11], [[1, -4, 1], 2], [[1, 0, 1], 11], [[11, -99, 299, -420, 299, -99, 11], 0], [[-14, 70, -114, 70, -14], 2], [[], 0], [[3, -36, 120, -174, 120, -36, 3], 0], [[], 0], [[], 0], [[], 0], [[-2800, 2800], 0], [[-594, 378, -84, 0, 0, 84, -378, 594], 28], [[-670, 2130, -2130, 670], 0], [[-9, 11, 0, 212, -603, 405, 312, -312, -405, 603, -212, 0, -11, 9], 0], [[-220, 710, -710, 220], 0], [[9, -8, -5, 5, -80, 233, -233, 80, -5, 5, 8, -9], 10], [[57, -138, 18, 219, -219, -18, 138, -57], 3], [[-9, 11, 117, -375, 375, -117, -11, 9], 0], [[-6, 10, 0, 0, -10, 6], 14], [[6, -3, -15, 15, 3, -6], 8], [[-45, 276, -609, 609, -276, 45], 0], [[-445, 1420, -1420, 445], 0], [[2, 0, -5, 0, 11, -32, 65, -65, 32, -11, 0, 5, 0, -2], 9], [[-9, 30, -50, 24, 0, 0, -24, 50, -30, 9], 8], [[18, -3, 3, -18], 9], [[-96, 563, -1206, 1206, -563, 96], 0], [[-9, 64, -156, 156, -64, 9], 0], [[-60, 372, -810, 810, -372, 60], 0], [[8, -12, 6, -6, 12, -8], 9], [[2, -5, 2, -4, 4, -2, 5, -2], 9], [[-1, -4, 28, -28, 4, 1], 4], [[-3, 32, -87, 87, -32, 3], 0], [[-1, 1, 13, -35, 35, -13, -1, 1], 4], [[11, -33, 33, -11], 1], [[-1, 3, 3, -17, 17, -3, -3, 1], 4], [[], 0], [[-2, 6, -6, 2], 2], [[-15, 106, -249, 249, -106, 15], 0], [[1, -3, 3, -1], 6], [[5, -34, 61, -5, -110, 110, 5, -61, 34, -5], 3], [[33, -108, 108, -33], 2], [[-27, 181, -411, 411, -181, 27], 0], [[-1, 3, 4, -15, 15, -4, -3, 1], 5], [[3, -26, 65, -65, 26, -3], 2], [[], 0], [[-1, 2, -2, 1], 2], [[1, -1], 5], [[1, -10, 23, -23, 10, -1], 1], [[1, -1], 4], [[-3, 10, -10, 3], 3], [[], 0], [[7, -38, 77, -77, 38, -7], 1], [[-1, 5, -5, 1], 3], [[1, -9, 19, -19, 9, -1], 1], [[-2, 9, -9, 2], 4], [[-1, 17, -78, 150, -150, 78, -17, 1], 0], [[3, -3], 6]], [[[3240], 0], [[-3240], 71], [[-36, 144, 0, -384, 0, 828, -624, 0, 0, 72], 3], [[534, -1578, 1128], 0], [[-30, 150, -416, 390, -240, 180, 0, -144, -140, 180, 0, 20, -36, 0, 0, 0, 0, 2], 13], [[], 0], [[84, -516, 1152, -1104, 384], 0], [[270, -1053, 864], 0], [[-81], 37], [[], 0], [[], 0], [[-12, 0, 72, -96, 27, 0, 18, 0, -9], 12], [[], 0], [[18, -174, 498, -564, 222], 0], [[], 0], [[-48, 240, -276, 0, 72], 2], [[12], 37], [[-2, 28, -40, -20, 52, -8, -12, 0, 0, 2], 7], [[9, -112, 374, -454, 185], 0], [[2, -7, -29, 127, -102, -111, 208, -92, 0, -5, 7], 4], [[], 0], [[-2, 26, -92, 144, -104, 28], 1], [[-25, 140, -220, 100], 1], [[5], 19], [[], 0], [[], 0], [[21, -57, 15, 126, -21, -330, 411, -156, 6, -24, 18], 4], [[-9, 84, -156, 72], 1], [[], 0], [[40, -303, 760, -792, 292], 0], [[-3, -4, 43, -58, -3, 58, -32, 0, 0, 2], 5], [[], 0], [[-12, 24, 3, -18, 3], 6], [[], 0], [[-3, 21, -33, 3, 27, -15], 6], [[9, -45, 81, -63, 18], 2], [[2, -34, 172, -402, 492, -302, 72], 0], [[-14, 30, -14, -4, 0, 2], 5], [[], 0], [[6, -35, 68, -54, 15], 2], [[-8, 22, -21, 6], 3], [[1], 11], [[1, -12, 30, -26, 7], 2], [[-8, 24, -16, 0, 2], 4], [[-2], 19], [[-3, 12, -9], 4], [[], 0], [[], 0], [[], 0], [[-3, 34, -116, 176, -124, 32], 1], [[-1, 6, -6, 2], 3], [[], 0], [[-3, 33, -120, 156, -63, -24, 18], 2], [[3], 27], [[], 0], [[], 0], [[3, -3], 4], [[], 0], [[-10, 69, -195, 268, -178, 45], 1], [[8, -48, 82, -43, -5, 7], 3], [[], 0], [[-1, 19, -73, 121, -89, 24], 1], [[-1], 15], [[], 0], [[], 0], [[-1323, 1917], 0], [[-378, 189, -315, 0, -189, 483, -378, 0, 15, 0, 0, -21], 34], [[-213, 963, -1404, 660], 0], [[12, -78, 90, 156, -228, -351, 741, -360, 0, -30, 42], 3], [[-25, 245, -544, 320], 0], [[45, -96, 75, -45, 50, 13, -42, -30, 35, 0, 6, -7], 15], [[-6, 7, 86, -179, -7, 247, -160, 0, 0, 12], 4], [[18, -126, 261, -159, -30, 42], 2], [[-13, 9, 9, -7, -3, -3, 2], 18], [[6, 6, -21, 0, 16, -6, 0, -1], 11], [[-3, 49, -220, 412, -344, 106], 0], [[-105, 594, -984, 504], 0], [[9, -34, 31, -12, 25, -23, -15, 4, 7, 0, -1], 15], [[4, -8, -30, 82, -65, 18, -8, 10, 3, -6], 12], [[-9, 15, -3, -3], 12], [[-15, 144, -492, 780, -588, 168], 0], [[3, -39, 117, -120, 42], 1], [[-6, 80, -307, 531, -425, 127], 0], [[-2, 7, -15, 10, 1, -1], 12], [[-1, 7, -11, 5], 14], [[4, -18, 13, 10, -11, 2], 6], [[-16, 62, -73, 27], 2], [[1, -10, 27, -20, -10, 21, -9], 6], [[-3, 25, -36, 12], 2], [[-1, -3, 15, -14, -1, 12, -6], 6], [[1, -2, 0, 1], 9], [[-3, 7, -5, 1], 4], [[9, -72, 176, -171, 57], 1], [[-1, 4, -3, 1], 7], [[3, 1, -41, 83, -18, -98, 112, -39, 1, -4, 3], 5], [[-22, 83, -76, 0, 12], 3], [[-1, 25, -135, 277, -247, 80], 0], [[-3, 12, -10, -6, 12, -2, -2], 8], [[-1, 14, -42, 47, -17, -4, 3], 3], [[1, -1], 5], [[-1, 3, -2], 4], [[-1, 2, -1], 6], [[3, -14, 22, -15, 3], 3], [[1], 6], [[1, -7, 11, -5], 4], [[], 0], [[-2, 17, -46, 60, -36, 8], 2], [[-3, 5, -3], 5], [[3, -12, 20, -13, 3], 3], [[-5, 8, -3, -1], 6], [[-8, 41, -94, 109, -62, 13], 2], [[-2, 4, -1], 7]], nothing, [[[3360], 0], [[-3360], 66], [[-112, 288, 0, -424, 0, 684, -464, 0, 0, 28], 3], [[676, -1672, 1012], 0], [[-30, -60, 300, -592, 480, -240, 170, 0, -42, -80, 90, 0, 0, -12], 12], [[], 0], [[136, -664, 1248, -1016, 296], 0], [[390, -1122, 726], 0], [[60, 0, -70, 0, 60, -64, 0, 0, 20], 32], [[-60], 44], [[60], 22], [[12, 0, -14, 0, 48, -56, 18, 0, 4], 10], [[15, -48, 21], 22], [[38, -264, 550, -484, 154], 0], [[4, -24, 50, -32, 8], 22], [[-96, 280, -228, 0, 28], 2], [[16], 36], [[-2, -8, 44, -36, -16, 28, -6, -4], 6], [[25, -180, 414, -378, 119], 0], [[-2, 15, -23, -53, 150, -87, -84, 130, -46, 0, -1, 1], 3], [[], 0], [[-8, 50, -110, 122, -66, 12], 1], [[5, -55, 165, -165, 55], 0], [[-5], 18], [[], 0], [[], 0], [[-4, 67, -127, 1, 144, 16, -281, 300, -96, 3, -10, 5], 3], [[-28, 98, -116, 28], 1], [[-8, 22, -16, 2], 23], [[75, -417, 830, -703, 213], 0], [[3, -6, -16, 50, -39, -6, 30, -14], 4], [[], 0], [[4, -18, 16, 2, -4], 5], [[-2, 13, -24, 20, -8, 1], 23], [[-9, 26, -25, 0, 10, -2], 6], [[-1, 20, -54, 64, -34, 5], 1], [[8, -70, 246, -456, 448, -220, 42], 0], [[6, -22, 26, -8], 4], [[], 0], [[-2, 15, -43, 53, -29, 6], 1], [[3, -11, 16, -10, 2], 2], [[], 0], [[3, -15, 21, -10, 1], 2], [[2, -12, 16, -6], 3], [[], 0], [[-5, 7, -2], 4], [[], 0], [[], 0], [[], 0], [[1, -12, 59, -134, 148, -76, 15], 0], [[-2, 3, -2], 3], [[], 0], [[-9, 67, -143, 137, -45, -10, 5], 2], [[-6, 4], 25], [[2], 14], [[-2], 12], [[2], 4], [[-1, 0, -1], 12], [[2, -26, 111, -225, 235, -120, 23], 0], [[-2, 21, -60, 65, -24, -1, 1], 2], [[], 0], [[-6, 37, -88, 100, -54, 10], 1], [[1], 14], [[], 0], [[], 0], [[-1512, 1848], 0], [[-336, 0, 189, -315, 0, 0, 315, -189], 33], [[-302, 1122, -1386, 550], 0], [[44, -194, 162, 206, -218, -315, 581, -252, 0, -13, 15], 3], [[-60, 330, -506, 220], 0], [[10, -10, -10, 76, -121, 70, -35, 25, 9, -3, -10, 15, 0, 1, -1], 12], [[5, -30, 12, 123, -179, -12, 166, -87, 0, 0, 2], 3], [[42, -180, 259, -123, -13, 15], 2], [[-7, 9, 3, -5], 18], [[-6, -3, 12, 6, -12, 0, 6, -3], 9], [[-11, 92, -285, 403, -262, 63], 0], [[-170, 726, -946, 396], 0], [[-5, 0, 19, -41, 31, -21, 20, -9, 0, -1, 1], 13], [[-6, 6, 8, -6, -24, 48, -41, 9, -2, 2], 10], [[6, -9, 9], 11], [[-34, 225, -601, 782, -483, 113], 0], [[11, -60, 108, -76, 15], 1], [[-17, 137, -391, 527, -337, 81], 0], [[1, -6, 9, -9, 5], 11], [[3, -3, 4, -4, 2], 13], [[-2, 10, -18, 7, 3, -2], 5], [[5, -30, 58, -43, 12], 1], [[4, -18, 25, -13, -5, 6, -1], 6], [[-8, 23, -17, 2], 2], [[1, -1, -8, 9, -4, -2, 6, -1], 5], [[1, 0, -1], 9], [[1, -3, 4, -2], 3], [[-2, 26, -104, 168, -116, 29], 0], [[-1, 1, -1], 7], [[-3, 13, 7, -67, 79, -7, -69, 64, -16, 0, -1], 4], [[5, -42, 80, -45, 0, 2], 2], [[-4, 55, -186, 269, -183, 45], 0], [[3, -8, 15, -8, -2, 5, -1], 7], [[-6, 25, -42, 33, -9, -1], 3], [[], 0], [[-1, 1], 4], [[-1, 1], 6], [[-1, 6, -14, 14, -6, 1], 2], [[], 0], [[2, -6, 5, -1], 4], [[], 0], [[-7, 27, -48, 43, -18, 2], 2], [[1, -2, 3, -1], 4], [[5, -12, 11, -4], 3], [[2, -6, 5, -1], 5], [[3, -18, 59, -96, 81, -33, 5], 1], [[-2, 1], 7]], nothing, [[[7168], 0], [[-7168], 60], [[16, 0, 0, -512, 1008, 0, -1024, 0, 1008, -512, 0, 0, 16], 0], [[1792, -3584, 1792], 0], [[30, -40, -48, 0, 180, -360, 990, -1504, 990, -360, 180, 0, -48, -40, 30], 8], [[], 0], [[448, -1792, 2688, -1792, 448], 0], [[1152, -2432, 1152], 0], [[45, 0, -36, 0, 110, 0, -36, 0, 45], 28], [[16], 40], [[-16], 20], [[-48, 72, 0, -80, 0, 72, -48], 9], [[32], 21], [[184, -784, 1192, -784, 184], 0], [[2, 16, -28, 16, 2], 20], [[16, 0, -336, 640, -336, 0, 16], 0], [[], 0], [[-2, 16, -20, -48, 108, -48, -20, 16, -2], 4], [[128, -576, 896, -576, 128], 0], [[-28, 112, -96, -176, 376, -176, -96, 112, -28], 3], [[], 0], [[8, -64, 176, -240, 176, -64, 8], 0], [[40, -216, 360, -216, 40], 0], [[-4, 0, 0, 0, -4], 14], [[-2], 24], [[2], 12], [[2, -6, 2, -80, 338, -422, -6, 344, -6, -422, 338, -80, 2, -6, 2], 0], [[16, -128, 224, -128, 16], 0], [[2, 8, -20, 8, 2], 20], [[288, -1184, 1792, -1184, 288], 0], [[-4, 20, -12, -68, 128, -68, -12, 20, -4], 3], [[], 0], [[24, -48, 24], 5], [[1, 2, -13, 20, -13, 2, 1], 20], [[2, 2, -38, 68, -38, 2, 2], 4], [[2, -26, 82, -116, 82, -26, 2], 0], [[46, -288, 736, -988, 736, -288, 46], 0], [[-4, 30, -52, 30, -4], 3], [[], 0], [[2, -20, 64, -92, 64, -20, 2], 0], [[-4, 16, -24, 16, -4], 1], [[], 0], [[-4, 20, -32, 20, -4], 1], [[-2, 16, -28, 16, -2], 2], [[], 0], [[6, -14, 6], 3], [[2], 8], [[1], 14], [[-1], 7], [[10, -74, 208, -288, 208, -74, 10], 0], [[2, -4, 2], 2], [[], 0], [[2, -6, -52, 218, -324, 218, -52, -6, 2], 0], [[-3, 6, -3], 22], [[], 0], [[], 0], [[], 0], [[], 0], [[20, -136, 360, -488, 360, -136, 20], 0], [[-20, 88, -136, 88, -20], 2], [[], 0], [[6, -48, 138, -190, 138, -48, 6], 0], [[-2], 13], [[1], 8], [[-1], 4], [[-3584, 3584], 0], [[35, -189, 378, -294, 0, 0, 294, -378, 189, -35], 27], [[-896, 2688, -2688, 896], 0], [[-8, 8, 0, 256, -760, 504, 512, -512, -504, 760, -256, 0, -8, 8], 0], [[-256, 896, -896, 256], 0], [[9, -9, -20, 30, -95, 257, -257, 95, -30, 20, 9, -9], 10], [[56, -168, 24, 376, -376, -24, 168, -56], 3], [[-8, 8, 168, -488, 488, -168, -8, 8], 0], [[-9, 17, -6, 6, -17, 9], 14], [[9, -9, -18, 18, 9, -9], 8], [[-64, 352, -736, 736, -352, 64], 0], [[-576, 1792, -1792, 576], 0], [[5, -5, -19, 15, 40, -40, -15, 19, 5, -5], 11], [[24, -60, 36, 40, -40, -36, 60, -24], 9], [[-1, 3, -3, 1], 9], [[-144, 736, -1488, 1488, -736, 144], 0], [[-8, 72, -176, 176, -72, 8], 0], [[-92, 484, -988, 988, -484, 92], 0], [[1, 1, -8, 8, -1, -1], 9], [[1, -1, 0, 6, -6, 0, 1, -1], 9], [[-12, 36, -36, 12], 5], [[-4, 36, -92, 92, -36, 4], 0], [[-1, 0, 20, -53, 53, -20, 0, 1], 4], [[8, -32, 32, -8], 1], [[-2, 3, 7, -22, 22, -7, -3, 2], 4], [[-1, -1, 1, 1], 7], [[-2, 4, -4, 2], 2], [[-20, 128, -288, 288, -128, 20], 0], [[1, -3, 3, -1], 6], [[8, -46, 70, 28, -184, 184, -28, -70, 46, -8], 3], [[40, -136, 136, -40], 2], [[-40, 232, -488, 488, -232, 40], 0], [[-1, 2, 8, -27, 27, -8, -2, 1], 5], [[6, -36, 74, -74, 36, -6], 2], [[], 0], [[], 0], [[2, -2], 5], [[2, -10, 20, -20, 10, -2], 1], [[], 0], [[-3, 10, -10, 3], 3], [[-1, 1], 3], [[-1, 12, -45, 80, -80, 45, -12, 1], 0], [[-1, 3, -3, 1], 3], [[1, -8, 17, -17, 8, -1], 1], [[-3, 9, -9, 3], 4], [[-3, 27, -93, 164, -164, 93, -27, 3], 0], [[3, -3], 6]], [[[4096], 0], [[-4096], 135, false], [[-128, 288, 0, -448, 0, 864, -640, 0, 0, 64], 3], [[768, -2048, 1280], 0], [[10, -60, 330, -744, 630, -180, 110, 0, -132, -80, 120, 0, 20, -24], 12], [[], 0], [[128, -768, 1536, -1280, 384], 0], [[448, -1344, 960], 0], [[-60, 0, 0, 0, 10, 0, 0, 0, -84, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], 65, false], [[64], 45], [[-64], 45, false], [[6, 0, -10, 0, 66, -112, 36, 0, 12, 0, -6], 10], [[-16, 0, 48, 0, -24], 45, false], [[40, -288, 680, -640, 200], 0], [[-4, 0, 24, 0, -44, 0, 40, 0, -8], 45, false], [[-96, 320, -288, 0, 64], 2], [[], 0], [[-2, -8, 40, -40, -18, 40, -4, -8], 6], [[24, -200, 512, -504, 168], 0], [[-1, 12, -24, -36, 152, -104, -116, 188, -71, 0, -4, 4], 3], [[], 0], [[-8, 56, -144, 168, -88, 16], 1], [[4, -60, 204, -236, 84], 0], [[1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, -4, 0, 0, 0, 1], 27, false], [[-4], 27], [[4], 27, false], [[-8, 58, -130, 50, 144, -12, -376, 396, -120, 10, -22, 10], 3], [[-32, 128, -160, 64], 1], [[8, 0, -20, 0, 16, 0, -4], 47, false], [[72, -472, 1024, -904, 280], 0], [[2, -6, -6, 48, -58, -6, 46, -20], 4], [[], 0], [[2, -18, 22, 4, -12, 2], 5], [[2, 0, -9, 0, 20, 0, -22, 0, 10, 0, -1], 47, false], [[-7, 24, -29, 4, 18, -10], 6], [[-2, 24, -74, 94, -52, 10], 1], [[4, -64, 288, -572, 576, -288, 56], 0], [[4, -24, 32, -8, -4], 4], [[], 0], [[-1, 18, -60, 78, -43, 8], 1], [[3, -17, 27, -14, 2], 2], [[-1], 21, false], [[5, -24, 35, -20, 4], 2], [[2, -16, 26, -12], 3], [[], 0], [[-7, 14, -6], 4], [[-1], 15, false], [[1], 15], [[-1], 15, false], [[-10, 70, -176, 202, -108, 22], 1], [[-4, 8, -4], 3], [[], 0], [[-6, 62, -170, 176, -50, -22, 10], 2], [[2, 0, -4, 0, 2], 51, false], [[], 0], [[], 0], [[-2, 4, -2], 3], [[], 0], [[1, -23, 129, -288, 311, -161, 31], 0], [[-1, 20, -72, 88, -35, -4, 4], 2], [[], 0], [[-5, 43, -117, 139, -75, 14], 1], [[1, 0, -1, 0, 1], 27, false], [[-1], 9], [[1], 9, false], [[-1792, 2304], 0], [[-512, 0, 0, 84, 0, -378, 0, 594, 0, -315, 0, 0, 0, -189, 0, 378, 0, -189, 0, 0, 0, 15], 63, false], [[-320, 1344, -1728, 704], 0], [[48, -188, 180, 184, -264, -396, 772, -336, 0, -32, 32], 3], [[-64, 384, -640, 320], 0], [[-15, 96, -172, 95, -10, 21, 17, -37, -10, 15, -1, 2, -1], 14], [[4, -28, 12, 116, -188, -12, 228, -140, 0, 0, 8], 3], [[36, -196, 316, -156, -32, 32], 2], [[-11, 12, 6, -4, -3], 18], [[-6, 9, 8, -15, -3, 10, -3], 10], [[-8, 96, -344, 520, -352, 88], 0], [[-184, 848, -1200, 520], 0], [[5, 0, 0, 0, -5, 19, 16, -50, -5, 31, 0, 4, 5, 10, 0, -14, 0, -5, 0, 4, 0, 1], 25, false], [[6, 3, -7, -30, 92, -74, 18, -6, 6, 3, -3], 11], [[-8, 3, 0, -9, 0, 9, 0, -3], 21, false], [[-26, 240, -726, 986, -624, 150], 0], [[12, -76, 148, -116, 32], 1], [[-14, 142, -470, 674, -442, 106], 0], [[-2, 1, 8, -2, -2, 7, 0, -13, 0, 8, 0, -1], 21, false], [[2, 0, -4, 2, 2, -1, 0, 7, 0, -11, 0, 3], 23, false], [[9, -21, 10, 8, -7, 1], 6], [[4, -36, 84, -68, 16], 1], [[2, -14, 28, -18, -7, 14, -5], 6], [[-12, 36, -32, 8], 2], [[1, -2, -4, 17, -15, -2, 6, -1], 5], [[1, -2, 1], 9], [[2, -6, 6, -2], 3], [[-1, 26, -126, 226, -166, 43], 0], [[-1, -2, 3, 0, -3, 0, 1], 14, false], [[-2, 11, -8, -51, 97, -12, -101, 90, -23, 1, -3, 1], 4], [[4, -44, 100, -68, 0, 8], 2], [[-4, 56, -220, 356, -248, 60], 0], [[-5, 15, -10, -6, 7, -1], 8], [[-4, 28, -56, 45, -11, -3, 1], 3], [[-1, 1], 4], [[1, -3, 3, -1], 3], [[-2, 2], 6], [[-1, 10, -22, 21, -8, 1], 2], [[-1, -1, 0, 1], 9, false], [[3, -11, 10, -3], 4], [[1], 7, false], [[-8, 37, -67, 59, -24, 3], 2], [[1, -5, 5, -1], 4], [[-1, 9, -20, 19, -8, 1], 2], [[2, -8, 7, -1], 5], [[1, -21, 78, -130, 110, -46, 7], 1], [[1, -3, 0, 3], 13, false]], nothing, [[[4200], 0], [[-4200], 63], [[8, 0, 0, -180, 468, 0, -616, 0, 720, -416, 0, 0, 16], 0], [[950, -2090, 1160], 0], [[-30, 0, 40, -150, 510, -912, 630, -300, 240, 0, -48, -60, 60], 10], [[], 0], [[224, -932, 1560, -1168, 316], 0], [[570, -1425, 780], 0], [[64, -24, 0, 40, 0, -24, 64, -45], 30], [[60], 42], [[-60], 21], [[-16, 42, 0, -40, 0, 60, -40, 9], 9], [[-21, 30, -24], 21], [[74, -392, 692, -522, 154], 0], [[-8, 20, -32, 24, -10], 21], [[8, 0, -156, 376, -240, 0, 16], 0], [[-4], 33], [[4, -10, -18, 60, -36, -16, 20, -4], 5], [[50, -275, 518, -399, 108], 0], [[-7, 36, -35, -101, 227, -115, -76, 102, -33], 3], [[], 0], [[2, -22, 78, -136, 126, -60, 12], 0], [[10, -95, 205, -160, 40], 0], [[], 0], [[], 0], [[], 0], [[1, -3, 1, -20, 127, -194, -21, 212, 9, -299, 271, -88, 1, -5, 5], 0], [[8, -45, 128, -104, 16], 0], [[-2, 6, -8, 8, -4], 21], [[131, -604, 1036, -787, 217], 0], [[4, -6, -38, 81, -46, -6, 24, -6], 4], [[], 0], [[14, -32, 20, 1], 5], [[-1, 2, -8, 8, -8, 6, -2], 21], [[4, -22, 44, -31, 1, 4], 5], [[1, -8, 32, -65, 62, -27, 5], 0], [[20, -126, 362, -564, 498, -226, 38], 0], [[10, -30, 24, -6], 4], [[], 0], [[-5, 25, -50, 49, -22, 3], 1], [[5, -13, 13, -6, 1], 2], [[], 0], [[-1, 6, -16, 17, -6], 1], [[6, -16, 12, -4], 3], [[2], 17], [[2, -7, 5], 3], [[], 0], [[], 0], [[], 0], [[3, -26, 92, -161, 150, -68, 10], 0], [[-2, 2], 3], [[], 0], [[1, -3, -20, 108, -188, 147, -44, -5, 5], 0], [[-1], 25], [[-2], 12], [[2], 11], [[1], 4], [[1, -2], 11], [[7, -54, 168, -277, 251, -116, 20], 0], [[-7, 39, -78, 66, -19], 2], [[], 0], [[1, -16, 59, -106, 101, -47, 8], 0], [[], 0], [[], 0], [[], 0], [[-1995, 2205], 0], [[378, -504, 0, 0, 315, -378, 189, -315, 0, 0, 105], 29], [[-457, 1479, -1656, 608], 0], [[-4, 4, 0, 84, -321, 243, 314, -302, -342, 570, -224, 0, -6, 10], 0], [[-105, 465, -580, 200], 0], [[5, -5, 0, 5, -25, 146, -171, 85, -60, 50, 4, -9, -10, 5], 10], [[14, -59, 12, 208, -247, -12, 144, -60], 3], [[-4, 4, 75, -263, 308, -126, -6, 10], 0], [[6, 0, 3, -13, 9, 0, -3], 15], [[3, -6, -6, 15, 0, -9, 0, 3], 8], [[-25, 156, -385, 463, -265, 56], 0], [[-270, 980, -1110, 415], 0], [[-9, 5, 25, -51, 11, -17, 20, 0, 1, -1, 1], 13], [[8, -32, 18, 24, -16, -30, 46, -24, 9], 9], [[-9, 6], 12], [[-66, 353, -801, 921, -523, 111], 0], [[-4, 25, -82, 118, -62, 10], 0], [[-37, 225, -526, 614, -354, 78], 0], [[-1, -3, 1, 7, -7, 3], 10], [[-1, -1, 5, -3, -1, 3, -2, 1], 10], [[-8, 22, -26, 10, 1], 5], [[10, -45, 59, -33, 7], 1], [[-2, 14, -33, 37, -15, -1, 2], 5], [[2, -12, 22, -10], 1], [[1, 3, -16, 14, -3, -2, 2, -1], 5], [[1, -1], 10], [[1, -3, 3, -1], 3], [[-5, 50, -144, 184, -106, 21], 0], [[1, -3, 2], 6], [[1, -14, 23, 23, -111, 112, -10, -59, 46, -14], 3], [[14, -67, 92, -36], 2], [[-13, 98, -255, 307, -178, 42], 0], [[1, 2, -14, 15, -5, -3, 4, -1], 6], [[2, -14, 37, -48, 30, -7], 2], [[], 0], [[1], 5], [[-1], 6], [[-2, 8, -13, 11, -4], 2], [[], 0], [[-1, 4, -6, 3], 3], [[], 0], [[3, -15, 37, -52, 41, -16, 2], 1], [[1, -2, 1], 4], [[-2, 6, -11, 9, -3], 2], [[4, -6, 4, -1], 5], [[-1, 8, -35, 79, -104, 79, -29, 3], 0], [[2, -2], 6]], nothing, [[[4536], 0], [[-4536], 65], [[-144, 396, 0, -696, 0, 900, -492, 0, 0, 36], 3], [[960, -2238, 1338], 0], [[110, -180, 450, -856, 720, -360, 180, 0, -108, -80, 60, 0, 10, -6], 12], [[], 0], [[204, -960, 1656, -1308, 408], 0], [[540, -1539, 918], 0], [[81], 35], [[], 0], [[], 0], [[18, 0, -60, 0, 108, -72, 0, 0, 6], 10], [[], 0], [[72, -366, 726, -624, 192], 0], [[], 0], [[-132, 408, -300, 0, 36], 2], [[-12], 37], [[-6, -16, 66, -48, -24, 32, -2, -2], 6], [[39, -257, 544, -473, 145], 0], [[-3, 22, -26, -91, 257, -165, -90, 146, -49, 0, -1, 2], 3], [[], 0], [[2, -20, 72, -136, 142, -78, 18], 0], [[6, -74, 211, -203, 56], 0], [[-1, 0, 4, 0, -6, 0, 8, 0, -1], 13], [[6], 26], [[-6], 13], [[-24, 102, -159, 0, 234, -57, -354, 357, -108, 3, -12, 9], 3], [[-36, 132, -123, 36], 1], [[], 0], [[119, -597, 1100, -900, 281], 0], [[4, -5, -24, 90, -82, -5, 30, -11], 4], [[], 0], [[6, -36, 36, 0, -6], 5], [[], 0], [[-15, 51, -48, 6, 9, -3], 6], [[-6, 30, -63, 69, -39, 9], 1], [[14, -118, 364, -590, 548, -282, 64], 0], [[8, -28, 30, -8, -2], 4], [[], 0], [[-3, 21, -49, 55, -30, 6], 1], [[3, -11, 15, -8, 1], 2], [[], 0], [[5, -15, 18, -10, 2], 2], [[2, -14, 20, -6], 3], [[-2], 19], [[-6, 9, -3], 4], [[], 0], [[], 0], [[], 0], [[1, -21, 87, -165, 167, -89, 20], 0], [[-1, 2, -1], 3], [[], 0], [[-18, 93, -195, 186, -60, -12, 9], 2], [[-3], 25], [[], 0], [[], 0], [[], 0], [[], 0], [[5, -48, 164, -285, 279, -148, 34], 0], [[-3, 31, -81, 83, -32, -1, 2], 2], [[], 0], [[1, -13, 54, -107, 112, -62, 14], 0], [[-1, 3, -1], 13], [[], 0], [[], 0], [[-2079, 2457], 0], [[-210, 0, 0, 714, -756, 189, -105, 0, -189, 168, -189], 30], [[-444, 1548, -1809, 735], 0], [[72, -261, 207, 306, -390, -405, 711, -276, 0, -15, 21], 3], [[-80, 460, -659, 259], 0], [[-10, 30, -40, 125, -161, 90, -35, 45, 9, -29, -10, 5, 0, 1], 12], [[6, -39, 11, 220, -304, -11, 197, -83, 0, 0, 3], 3], [[63, -255, 357, -165, -15, 21], 2], [[-6, 6, -21, 9, 6], 16], [[-9, 9, 12, -18, 0, 6], 10], [[-18, 143, -389, 503, -322, 83], 0], [[-255, 990, -1248, 504], 0], [[-5, 5, 15, 14, -35, 1, 23, 10, -14, -5, -1, 1], 12], [[-6, 12, 24, -36, -48, 92, -40, 0, -2, 4], 10], [[6, -6, -6, 6], 10], [[-54, 345, -828, 996, -615, 159], 0], [[18, -81, 123, -84, 21], 1], [[-33, 211, -533, 669, -424, 110], 0], [[1, -7, 11, 3, -10, 2], 10], [[6, -11, 1, 7, -3], 12], [[-2, 20, -36, 20, 2, -4], 5], [[6, -35, 67, -47, 9], 1], [[6, -31, 50, -30, 0, 7, -2], 6], [[-9, 23, -15, 3], 2], [[1, -1, -10, 23, -16, -1, 3, -1], 5], [[1, -1], 9], [[1, -2, 2, -1], 3], [[-3, 39, -138, 202, -135, 33], 0], [[-1, 5, -3, 1], 7], [[1, -8, 16, 11, -104, 150, -47, -74, 73, -21, 0, -1, 1], 3], [[6, -59, 109, -56, 0, 3], 2], [[-12, 87, -246, 338, -223, 57], 0], [[1, -11, 21, -11, -5, 5, -1], 7], [[1, -10, 34, -53, 41, -13, -1, 1], 2], [[], 0], [[], 0], [[], 0], [[-2, 7, -12, 11, -5, 1], 2], [[], 0], [[3, -7, 6, -2], 4], [[], 0], [[3, -15, 36, -51, 44, -22, 5], 1], [[-2, 2], 5], [[-2, 6, -10, 9, -5, 1], 2], [[3, -6, 5, -1], 5], [[7, -34, 79, -106, 87, -41, 9], 1], [[-4, 3], 7]], nothing, [[[5600], 0], [[-5600], 63], [[8, 0, 0, -336, 612, 0, -656, 0, 936, -608, 0, 0, 44], 0], [[1240, -2840, 1520], 0], [[-20, -18, 0, 140, -120, 660, -1304, 870, -150, 130, 0, -132, -40, 60, 0, 10, -6], 9], [[], 0], [[248, -1264, 2160, -1536, 392], 0], [[800, -1860, 1080], 0], [[-30, 0, -24, 0, 0, 0, 0, 64, -30], 29], [[20], 42], [[-20], 21], [[3, -24, 24, 0, -12, 0, 72, -88, 30, 0, 6], 8], [[-8, 6, -9], 21], [[98, -524, 974, -724, 178], 0], [[-2, 8, -8, 4, -4], 21], [[8, 0, -204, 448, -312, 0, 44], 0], [[16], 36], [[8, -10, -24, 66, -38, -22, 24, -2, -2], 5], [[67, -386, 730, -554, 143], 0], [[-9, 54, -64, -71, 223, -120, -116, 148, -44, 0, -2, 1], 3], [[], 0], [[2, -28, 122, -220, 184, -68, 8], 0], [[20, -140, 300, -240, 60], 0], [[], 0], [[], 0], [[], 0], [[-2, 4, -36, 171, -282, 79, 214, -1, -431, 357, -84, 10, -15, 4], 1], [[8, -84, 196, -152, 44], 0], [[-2, 0, 2, 2, -2], 21], [[156, -816, 1448, -1052, 268], 0], [[-2, 6, -9, -18, 67, -62, -9, 30, -7], 3], [[], 0], [[-1, 8, -24, 24, 2, -6], 4], [[2, -2, -2, 0, 0, -1], 22], [[1, -15, 33, -31, 6, 9, -3], 5], [[-11, 59, -115, 99, -36, 4], 1], [[14, -150, 520, -830, 672, -270, 42], 0], [[-2, 14, -38, 34, -4, -2], 3], [[], 0], [[-8, 46, -93, 80, -28, 3], 1], [[-1, 12, -30, 26, -7], 1], [[], 0], [[-1, 17, -40, 34, -11, 1], 1], [[10, -26, 22, -6], 3], [[], 0], [[3, -12, 11, -3], 3], [[1], 7], [[-1], 14], [[1], 7], [[2, -34, 148, -260, 218, -86, 12], 0], [[2, -9, 8, -1], 2], [[], 0], [[-2, -17, 128, -252, 191, -41, -15, 4], 1], [[2, 0, 2], 23], [[2], 15], [[-2], 12], [[1, -6, 4], 2], [[2, -1], 13], [[5, -66, 252, -425, 351, -137, 20], 0], [[-7, 51, -106, 89, -26, -2, 1], 2], [[], 0], [[1, -21, 96, -178, 150, -55, 7], 0], [[], 0], [[], 0], [[], 0], [[-2660, 2940], 0], [[-405, 0, -189, 0, 0, 504, -378, 594, -595, 0, -189, 378], 28], [[-564, 2028, -2232, 776], 0], [[-2, 6, 0, 144, -453, 351, 288, -368, -468, 788, -288, 0, -25, 19], 0], [[-160, 640, -780, 300], 0], [[-4, -15, 19, -50, 218, -268, 95, -4, 16, 22, -28, 0, 0, -1], 11], [[28, -89, 21, 197, -238, -21, 198, -99, 0, 0, 3], 3], [[-2, 6, 87, -329, 392, -156, -25, 19], 0], [[-3, 10, 3, 0, -15, 12, 3, -2], 14], [[3, 4, -18, 12, 10, -9, -3, 1], 8], [[-26, 212, -564, 660, -350, 68], 0], [[-360, 1320, -1520, 540], 0], [[-1, 0, 0, 5, -10, 51, -50, 10, 9, 10, 0, -5, 0, 1], 10], [[11, -22, 18, 3, -9, -36, 84, -58, 12, -4, 2], 9], [[-9, 0, -1, 9], 10], [[-64, 460, -1140, 1276, -668, 132], 0], [[-2, 42, -141, 183, -97, 19], 0], [[-39, 293, -755, 871, -453, 87], 0], [[-4, 3, 0, 2, -9, 4], 10], [[-1, 0, -3, 1, 1, 5, -5, 1], 10], [[-3, 17, -25, 10, 4, -2], 5], [[-1, 19, -74, 104, -53, 7], 0], [[6, -24, 34, -19, -3, 5, -1], 6], [[4, -31, 45, -21, 3], 1], [[-1, 2, 1, -8, 19, -12, -3, 2], 4], [[-1, 1, 1, -1], 7], [[-1, 6, -9, 4], 2], [[-7, 73, -224, 280, -149, 27], 0], [[1, -1, 2, -3, 1], 6], [[1, -15, 42, -15, -89, 127, -6, -93, 59, -11, 1, -1], 3], [[20, -85, 118, -56, 0, 3], 2], [[-16, 133, -375, 453, -237, 42], 0], [[1, -1, -10, 20, -7, -5, 2], 6], [[1, -16, 54, -70, 38, -6, -1], 2], [[1, -2, 1], 3], [[4, -5, 2], 3], [[1, -3, 1], 5], [[-6, 22, -29, 16, -3], 2], [[1, -1], 4], [[-1, 8, -12, 7, -1], 3], [[-1], 4], [[3, -26, 72, -89, 52, -13, 1], 1], [[4, -6, 2], 4], [[-5, 20, -27, 15, -3], 2], [[-1, 6, -10, 5], 4], [[8, -56, 141, -168, 102, -30, 3], 1], [[1, -3, 2], 6]], nothing])
chevieset(:E8, :CycPolSchurElements, [[1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 8, 8, 9, 10, 10, 12, 12, 14, 15, 18, 20, 24, 30], [1, -120, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 8, 8, 9, 10, 10, 12, 12, 14, 15, 18, 20, 24, 30], [2, -3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 8, 9, 10, 10, 12, 30], [2, -63, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 8, 9, 10, 10, 12, 30], [1, -2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 8, 8, 9, 10, 12, 12, 18, 24], [1, -74, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 8, 8, 9, 10, 12, 12, 18, 24], [30, -16, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 30], [2, -4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 7, 9, 10, 12, 12], [2, -52, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 7, 9, 10, 12, 12], [2, -3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 8, 10, 10, 12, 15, 18], [2, -63, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 8, 10, 10, 12, 15, 18], [8, -16, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 5, 5, 6, 6, 6, 6], [3, -8, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 8, 8], [3, -32, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 8, 8], [2, -4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 12, 12, 14, 18], [2, -52, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 12, 12, 14, 18], [5, -16, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6], [2, -6, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 7, 8, 12, 18], [2, -42, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 7, 8, 12, 18], [6, -8, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 24], [6, -32, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 24], [1, -12, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 8, 8, 12, 12], [1, -36, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 8, 8, 12, 12], [1, -6, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 8, 8, 10, 10, 20], [1, -46, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 6, 8, 8, 10, 10, 20], [6, -16, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 5, 5, 6, 18], [2, -13, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 8, 9], [2, -25, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 8, 9], [2, -6, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 8, 9, 12, 14], [2, -42, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 8, 9, 12, 14], [24, -16, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 10, 10, 12, 12], [2, -12, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 12], [2, -24, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 12], [20, -16, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 6, 6, 20], [2, -10, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 5, 5, 6, 7, 8, 10, 10], [2, -30, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 5, 5, 6, 7, 8, 10, 10], [2, -8, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 12, 12], [2, -32, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 12, 12], [1, -20, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 12, 12], [2, -7, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 8, 12, 15], [2, -37, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 8, 12, 15], [8, -16, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 12, 12], [6, -8, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 6, 6, 8, 8, 12, 12], [6, -32, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 6, 6, 8, 8, 12, 12], [3, -8, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 6, 8, 8, 9, 18], [3, -32, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 6, 8, 8, 9, 18], [6, -16, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 9, 10, 10], [2, -13, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 8, 18], [2, -25, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 8, 18], [8, -16, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 6, 6, 10, 10], [2, -10, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 8, 9, 12], [2, -28, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 8, 9, 12], [120, -16, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 6, 6, 10, 10], [2, -10, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 8, 10, 10, 14], [2, -30, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 8, 10, 10, 14], [24, -16, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 6, 6, 6, 6, 12, 12], [1, -14, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 6, 8, 8, 10], [1, -22, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 6, 8, 8, 10], [30, -16, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 6, 6, 6, 6, 15], [2, -15, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 7, 9, 12], [2, -21, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 7, 9, 12], [2, -11, 2, 3, 3, 3, 3, 5, 5, 7, 9, 15], [2, -26, 2, 3, 3, 3, 3, 5, 5, 7, 9, 15], [2, -12, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 10, 12], [2, -24, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 10, 12], [1, -14, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 7, 8, 8, 14], [1, -22, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 7, 8, 8, 14], [1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 8, 9, 10, 10, 12, 14, 15, 18, 30], [1, -91, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 8, 9, 10, 10, 12, 14, 15, 18, 30], [6, -7, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 30], [6, -37, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 30], [2, -3, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 8, 9, 12, 12, 15, 20], [2, -63, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 8, 9, 12, 12, 15, 20], [2, -4, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 12, 24], [2, -52, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 12, 24], [12, -16, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 24], [2, -6, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 7, 8, 9, 12, 12], [2, -42, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 6, 6, 7, 8, 9, 12, 12], [3, -7, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 5, 5, 6, 6, 6, 6, 10, 10, 12], [3, -37, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 5, 5, 6, 6, 6, 6, 10, 10, 12], [1, -5, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 9, 10, 12, 18], [1, -47, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 9, 10, 12, 18], [4, -16, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 12], [2, -10, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 18], [2, -28, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 6, 6, 6, 18], [3, -7, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 6, 9, 10, 10, 18], [3, -37, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 6, 9, 10, 10, 18], [6, -16, 2, 2, 2, 2, 3, 4, 4, 5, 5, 8, 8, 9], [2, -10, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 7, 8, 20], [2, -30, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 7, 8, 20], [2, -10, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 9, 10], [2, -28, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 9, 10], [6, -7, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 10, 10, 15], [6, -37, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 10, 10, 15], [2, -15, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 6, 6, 7, 18], [2, -21, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 6, 6, 7, 18], [2, -13, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 8, 9, 12, 12], [2, -25, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 8, 9, 12, 12], [6, -16, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 8, 8, 15], [1, -9, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 10, 14], [1, -31, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 7, 8, 10, 14], [2, -12, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 12, 12], [2, -24, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 12, 12], [12, -16, 3, 3, 3, 3, 5, 5, 6, 6, 8, 8, 12], [2, -11, 2, 3, 3, 3, 3, 5, 5, 7, 9, 15], [2, -26, 2, 3, 3, 3, 3, 5, 5, 7, 9, 15], [1, -15, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 8, 12], [1, -21, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 8, 12], [1, -13, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 6, 8, 10, 10], [1, -23, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 5, 6, 8, 10, 10], [2, -15, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 6, 6, 9, 14], [2, -21, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 6, 6, 9, 14]])
chevieset(:E8, :cycpolfakedegrees, [[1, 0], [1, 120], [1, 8, 7, 8, 8, 14, 15, 24, 30], [1, 68, 7, 8, 8, 14, 15, 24, 30], [1, 2, 5, 7, 10, 14, 15, 20, 30], [1, 74, 5, 7, 10, 14, 15, 20, 30], [[1, -1, 1, 1, -1, 1, 1, -2, 4, 0, -2, 4, -2, 0, 4, -2, 1, 1, -1, 1, 1, -1, 1], 32, 7, 14], [1, 8, 5, 5, 10, 10, 15, 20, 30, 32], [1, 56, 5, 5, 10, 10, 15, 20, 30, 32], [1, 4, 7, 8, 9, 14, 18, 24, 32], [1, 64, 7, 8, 9, 14, 18, 24, 32], [[1, 0, 1, -1, 2, -2, 2, -1, 4, -1, 2, -2, 2, -1, 1, 0, 1], 24, 7, 9, 14, 15, 18, 30], [[1, -1, 0, 0, 0, 1, 0, 0, 0, -1, 1], 12, 5, 5, 7, 10, 10, 14, 15, 20, 30], [[1, -1, 0, 0, 0, 1, 0, 0, 0, -1, 1], 36, 5, 5, 7, 10, 10, 14, 15, 20, 30], [1, 4, 5, 7, 9, 10, 14, 15, 16, 18, 20, 30], [1, 52, 5, 7, 9, 10, 14, 15, 16, 18, 20, 30], [[1, 1, -1, -3, 0, 5, 5, -2, -7, -2, 5, 5, 0, -3, -1, 1, 1], 20, 7, 8, 8, 9, 12, 12, 14, 18, 24], [1, 8, 5, 5, 8, 8, 9, 10, 10, 15, 18, 20, 24, 30], [1, 44, 5, 5, 8, 8, 9, 10, 10, 15, 18, 20, 24, 30], [[1, -1, 1, 1, -2, 1, 1, -1, 1], 14, 5, 5, 7, 10, 10, 14, 15, 20, 30], [[1, -1, 1, 1, -2, 1, 1, -1, 1], 38, 5, 5, 7, 10, 10, 14, 15, 20, 30], [1, 12, 5, 5, 7, 9, 10, 10, 14, 15, 18, 20, 24, 30], [1, 36, 5, 5, 7, 9, 10, 10, 14, 15, 18, 20, 24, 30], [1, 6, 3, 3, 3, 6, 6, 6, 7, 9, 12, 12, 14, 15, 18, 24, 30], [1, 46, 3, 3, 3, 6, 6, 6, 7, 9, 12, 12, 14, 15, 18, 24, 30], [[1, 0, 1, 2, 1, 2, 5, 0, 1, 6, 2, 2, 8, 2, 2, 6, 1, 0, 5, 2, 1, 2, 1, 0, 1], 20, 7, 9, 14, 18, 20], [1, 16, 5, 5, 7, 8, 8, 10, 10, 14, 15, 20, 24, 24, 30], [1, 28, 5, 5, 7, 8, 8, 10, 10, 14, 15, 20, 24, 24, 30], [1, 6, 5, 5, 7, 8, 10, 10, 14, 15, 16, 20, 24, 30], [1, 42, 5, 5, 7, 8, 10, 10, 14, 15, 16, 20, 24, 30], [[1, -1, 2, 0, -1, 2, 2, -2, 2, 2, -1, 0, 2, -1, 1], 20, 5, 5, 7, 10, 10, 14, 15, 20, 30], [1, 14, 5, 7, 8, 8, 9, 10, 14, 15, 16, 18, 20, 24, 30], [1, 26, 5, 7, 8, 8, 9, 10, 14, 15, 16, 18, 20, 24, 30], [[1, 1, 1, -1, 2, 2, 1, 0, 1, 4, 1, 0, 1, 2, 2, -1, 1, 1, 1], 22, 7, 8, 8, 9, 14, 18, 24], [1, 12, 3, 3, 3, 3, 6, 6, 6, 6, 8, 8, 9, 12, 12, 15, 18, 24, 24, 30], [1, 32, 3, 3, 3, 3, 6, 6, 6, 6, 8, 8, 9, 12, 12, 15, 18, 24, 24, 30], [[1, 0, 1, -2, 1, 0, 1], 10, 5, 5, 7, 9, 10, 10, 14, 15, 18, 20, 30], [[1, 0, 1, -2, 1, 0, 1], 34, 5, 5, 7, 9, 10, 10, 14, 15, 18, 20, 30], [1, 20, 5, 5, 7, 8, 8, 9, 10, 10, 14, 15, 18, 20, 24, 30], [[1, 1, 0, -2, 0, 1, 1], 8, 4, 4, 4, 7, 8, 8, 9, 12, 12, 14, 18, 20, 24], [[1, 1, 0, -2, 0, 1, 1], 38, 4, 4, 4, 7, 8, 8, 9, 12, 12, 14, 18, 20, 24], [[2, 1, 3, 2, 5, 1, 4, 1, 5, 2, 3, 1, 2], 20, 7, 8, 8, 9, 14, 15, 18, 24, 30], [[1, -1, 0, 2, 0, -1, 1], 8, 5, 5, 7, 8, 8, 10, 10, 14, 15, 20, 24, 30], [[1, -1, 0, 2, 0, -1, 1], 32, 5, 5, 7, 8, 8, 10, 10, 14, 15, 20, 24, 30], [[1, 1, -1, 1, -1, 1, 1], 10, 5, 5, 7, 9, 10, 10, 14, 15, 18, 20, 30], [[1, 1, -1, 1, -1, 1, 1], 34, 5, 5, 7, 9, 10, 10, 14, 15, 18, 20, 30], [[1, 1, -1, 1, -1, 1, 1], 18, 5, 5, 7, 9, 10, 10, 14, 15, 16, 18, 20, 30], [2, 16, 5, 5, 7, 8, 9, 10, 10, 14, 15, 18, 20, 24, 30], [2, 28, 5, 5, 7, 8, 9, 10, 10, 14, 15, 18, 20, 24, 30], [[1, 1, 1, -1, 2, 0, 2, -1, 1, 1, 1], 18, 5, 5, 7, 9, 10, 10, 14, 15, 18, 20, 30], [1, 10, 4, 4, 4, 5, 7, 8, 8, 10, 12, 12, 14, 15, 16, 20, 24, 30], [1, 28, 4, 4, 4, 5, 7, 8, 8, 10, 12, 12, 14, 15, 16, 20, 24, 30], [[1, -1, 1, 3, 2, 1, 5, 5, 6, 6, 8, 8, 12, 7, 9, 14, 9, 7, 12, 8, 8, 6, 6, 5, 5, 1, 2, 3, 1, -1, 1], 16, 7, 8, 8, 14, 24], [1, 10, 3, 3, 3, 6, 6, 6, 7, 8, 9, 12, 12, 14, 15, 16, 18, 24, 30], [1, 30, 3, 3, 3, 6, 6, 6, 7, 8, 9, 12, 12, 14, 15, 16, 18, 24, 30], [[1, 1, 1, 2, 5, 2, 8, 5, 7, 10, 11, 8, 16, 12, 11, 16, 11, 12, 16, 8, 11, 10, 7, 5, 8, 2, 5, 2, 1, 1, 1], 18, 7, 9, 14, 18], [1, 14, 3, 3, 3, 5, 6, 6, 6, 7, 9, 10, 12, 12, 14, 15, 18, 20, 24, 30], [1, 22, 3, 3, 3, 5, 6, 6, 6, 7, 9, 10, 12, 12, 14, 15, 18, 20, 24, 30], [[1, 1, 3, 2, 3, 8, 4, 9, 11, 10, 13, 16, 12, 16, 19, 14, 19, 16, 12, 16, 13, 10, 11, 9, 4, 8, 3, 2, 3, 1, 1], 18, 7, 9, 14, 18], [1, 16, 4, 4, 4, 4, 4, 5, 5, 8, 8, 10, 10, 12, 12, 15, 20, 20, 24, 30], [1, 22, 4, 4, 4, 4, 4, 5, 5, 8, 8, 10, 10, 12, 12, 15, 20, 20, 24, 30], [[1, 2, 1, 2, 3, 3, 4, 5, 3, 5, 4, 4, 5, 5, 2, 4, 3, 3, 2, 2, 0, 1], 12, 4, 4, 4, 4, 8, 8, 12, 12, 20, 24], [[1, 0, 2, 2, 3, 3, 4, 2, 5, 5, 4, 4, 5, 3, 5, 4, 3, 3, 2, 1, 2, 1], 26, 4, 4, 4, 4, 8, 8, 12, 12, 20, 24], [1, 12, 5, 5, 7, 8, 8, 8, 9, 10, 10, 14, 15, 18, 20, 24, 30], [1, 24, 5, 5, 7, 8, 8, 8, 9, 10, 10, 14, 15, 18, 20, 24, 30], [1, 14, 3, 3, 3, 3, 5, 5, 6, 6, 6, 6, 9, 10, 10, 12, 12, 15, 18, 20, 24, 30], [1, 22, 3, 3, 3, 3, 5, 5, 6, 6, 6, 6, 9, 10, 10, 12, 12, 15, 18, 20, 24, 30], [1, 1, 4, 4, 8, 12, 20, 24], [1, 91, 4, 4, 8, 12, 20, 24], [[1, 0, -1, 1, -1, 0, 1], 19, 4, 4, 7, 8, 12, 14, 20, 24], [[1, 0, -1, 1, -1, 0, 1], 49, 4, 4, 7, 8, 12, 14, 20, 24], [1, 3, 4, 4, 4, 7, 8, 12, 14, 20, 24, 28], [1, 63, 4, 4, 4, 7, 8, 12, 14, 20, 24, 28], [1, 7, 4, 4, 4, 5, 8, 8, 10, 12, 15, 20, 24, 30], [1, 55, 4, 4, 4, 5, 8, 8, 10, 12, 15, 20, 24, 30], [[1, -1, 0, 2, -2, 0, 2, 0, -2, 2, 0, -1, 1], 25, 4, 4, 4, 7, 8, 8, 12, 14, 20, 24], [1, 7, 4, 4, 4, 5, 5, 8, 10, 10, 12, 15, 20, 20, 24, 30], [1, 43, 4, 4, 4, 5, 5, 8, 10, 10, 12, 15, 20, 20, 24, 30], [1, 9, 4, 4, 4, 4, 7, 8, 8, 12, 12, 14, 20, 24, 24, 28], [1, 39, 4, 4, 4, 4, 7, 8, 8, 12, 12, 14, 20, 24, 24, 28], [1, 5, 4, 4, 5, 7, 8, 8, 10, 12, 14, 15, 20, 24, 30], [1, 47, 4, 4, 5, 7, 8, 8, 10, 12, 14, 15, 20, 24, 30], [1, 19, 4, 4, 4, 7, 8, 8, 9, 12, 14, 15, 16, 18, 20, 24, 30], [1, 13, 4, 4, 5, 7, 8, 9, 10, 12, 14, 15, 18, 20, 24, 30], [1, 31, 4, 4, 5, 7, 8, 9, 10, 12, 14, 15, 18, 20, 24, 30], [[1, 1, -1, 0, 1, 0, -1, 1, 1], 9, 4, 4, 7, 8, 8, 9, 12, 14, 18, 20, 24], [[1, 1, -1, 0, 1, 0, -1, 1, 1], 39, 4, 4, 7, 8, 8, 9, 12, 14, 18, 20, 24], [[1, 1, -1, 0, 1, 0, -1, 1, 1], 19, 4, 4, 4, 7, 8, 8, 9, 12, 14, 18, 20, 20, 24], [1, 13, 3, 3, 3, 4, 4, 4, 6, 6, 6, 8, 9, 12, 12, 15, 18, 20, 24, 30], [1, 33, 3, 3, 3, 4, 4, 4, 6, 6, 6, 8, 9, 12, 12, 15, 18, 20, 24, 30], [1, 11, 4, 4, 5, 5, 7, 8, 10, 10, 12, 14, 15, 20, 20, 24, 30], [1, 29, 4, 4, 5, 5, 7, 8, 10, 10, 12, 14, 15, 20, 20, 24, 30], [1, 7, 4, 4, 5, 5, 7, 8, 10, 10, 12, 12, 14, 15, 20, 24, 30], [1, 37, 4, 4, 5, 5, 7, 8, 10, 10, 12, 12, 14, 15, 20, 24, 30], [1, 17, 4, 4, 5, 5, 8, 8, 8, 9, 10, 10, 12, 15, 18, 20, 24, 30], [1, 23, 4, 4, 5, 5, 8, 8, 8, 9, 10, 10, 12, 15, 18, 20, 24, 30], [1, 13, 4, 4, 4, 5, 5, 7, 8, 10, 10, 12, 12, 12, 14, 15, 20, 24, 30], [1, 25, 4, 4, 4, 5, 5, 7, 8, 10, 10, 12, 12, 12, 14, 15, 20, 24, 30], [[2, -3, 2], 19, 4, 4, 4, 5, 5, 7, 8, 8, 10, 10, 12, 14, 15, 20, 24, 30], [1, 9, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 9, 10, 12, 12, 15, 18, 20, 24, 30], [1, 31, 3, 3, 3, 4, 4, 5, 6, 6, 6, 8, 9, 10, 12, 12, 15, 18, 20, 24, 30], [1, 13, 4, 4, 4, 5, 7, 8, 8, 9, 10, 12, 14, 15, 18, 20, 24, 30], [1, 25, 4, 4, 4, 5, 7, 8, 8, 9, 10, 12, 14, 15, 18, 20, 24, 30], [[1, 0, 1, 0, 1, -1, 2, 0, 2, -1, 1, 0, 1, 0, 1], 17, 4, 4, 4, 4, 4, 7, 8, 8, 12, 12, 12, 14, 20, 24], [[1, 0, 2, 2, 3, 3, 4, 2, 5, 5, 4, 4, 5, 3, 5, 4, 3, 3, 2, 1, 2, 1], 11, 4, 4, 4, 4, 8, 8, 12, 12, 20, 24], [[1, 2, 1, 2, 3, 3, 4, 5, 3, 5, 4, 4, 5, 5, 2, 4, 3, 3, 2, 2, 0, 1], 27, 4, 4, 4, 4, 8, 8, 12, 12, 20, 24], [1, 15, 4, 4, 5, 5, 7, 8, 9, 10, 10, 12, 14, 15, 18, 20, 24, 30], [1, 21, 4, 4, 5, 5, 7, 8, 9, 10, 10, 12, 14, 15, 18, 20, 24, 30], [1, 13, 3, 3, 3, 4, 4, 6, 6, 6, 7, 8, 9, 12, 12, 14, 15, 18, 20, 24, 30], [1, 23, 3, 3, 3, 4, 4, 6, 6, 6, 7, 8, 9, 12, 12, 14, 15, 18, 20, 24, 30], [1, 15, 4, 4, 5, 5, 7, 8, 8, 10, 10, 12, 14, 15, 16, 20, 24, 30], [1, 21, 4, 4, 5, 5, 7, 8, 8, 10, 10, 12, 14, 15, 16, 20, 24, 30]])
chevieset(:E8, :ClassParameter, function (w,)
        if w == []
            return " "
        end
        return (chevieget(:E8, :ClassNames))[Position(chevieget(:E8, :cyclestructure), CycleStructurePerm(Product((chevieget(:E8, :generators))[w])))]
    end)
chevieset(:E8, :HeckeCharTable, function (param, sqrtparam)
        local q, v, tbl, p
        q = -((param[1])[1]) // (param[1])[2]
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(q, 2, "CharTable(Hecke(E8))")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        tbl = Dict{Symbol, Any}(:identifier => "H(E8)", :text => "origin: Jean Michel, March 1995", :cartan => chevieget(:E8, :CartanMat), :parameter => param, :rootparameter => sqrtparam, :size => 696729600, :powermap => chevieget(:E8, :PowerMaps), :irredinfo => chevieget(:E8, :IrredInfo))
        Inherit(tbl, chevieget(:E8, :ClassInfo))
        p = chevieget(:E8, :vpolheckeirreducibles)
        tbl[:irreducibles] = map(function (i,)
                    if p[i] !== nothing
                        return map(function (j,)
                                    if length(j) == 3
                                        return horner(v, j[1]) * v ^ j[2]
                                    else
                                        return horner(q, j[1]) * q ^ j[2]
                                    end
                                end, p[i])
                    else
                        return map(function (k,)
                                    local j, l
                                    j = (p[i - 1])[k]
                                    l = length((tbl[:classtext])[k])
                                    if length(j) == 3
                                        return horner(v ^ -1, j[1]) * v ^ -(j[2]) * (-q) ^ l
                                    else
                                        return horner(q ^ -1, j[1]) * q ^ -(j[2]) * (-q) ^ l
                                    end
                                end, 1:length(tbl[:classes]))
                    end
                end, 1:length(tbl[:irredinfo]))
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(:E8, :WGraphs, [[[[]], []], nothing, [[[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 5], [4, 6], [4, 7], [4, 8], [5, 6], [5, 7], [5, 8], [6, 7], [6, 8], [7, 8]], [[-1, [[4, 5], [15, 16, 19]]], [1, [[1, 3, 8], [2, 3], [3, 4, 14], [4, 15], [5, 6, 16], [6, 7, 17], [7, 18], [8, 9, 14], [9, 10], [10, 11, 19], [11, 12, 20], [12, 13, 21], [13, 22], [14, 15], [16, 17, 20], [17, 18, 21], [18, 22], [19, 20], [20, 21, 23], [21, 22, 24], [22, 25], [23, 24], [24, 25, 26], [25, 27], [26, 27], [27, 28]]]]], nothing, [[[1], [2], [3], 1, [4], 2, [5], 1, [6], 1, [7], 1, [8], [1, 2], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 3], [2, 5], [2, 6], [2, 7], [2, 8], [3, 5], [3, 6], [3, 7], [3, 8], [4, 6], [4, 7], [4, 8], [5, 7], [5, 8], [6, 8]], [[1, [[1, 4, 18], [2, 6, 15, 23], [3, 16, 21, 26], [4, 5, 27], [5, 22, 30], [6, 16, 26, 30], [7, 9, 16, 21], [8, 22, 26, 30, 33], [9, 10, 17], [10, 13, 18], [11, 30, 33, 35], [12, 33, 35], [13, 14, 19], [14, 20], [15, 16, 21], [16, 17], [17, 18, 26], [18, 19, 27], [19, 20, 28], [20, 29], [22, 23], [23, 24, 30], [24, 25, 31], [25, 32], [26, 27], [27, 28, 30], [28, 29, 31], [29, 32], [30, 31], [31, 32, 33], [32, 34], [33, 34], [34, 35]]]]], nothing, [[[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 4, 8], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 6, 7], [1, 2, 6, 8], [1, 2, 7, 8], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 4, 8], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 6, 7], [1, 3, 6, 8], [1, 3, 7, 8], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 5, 8], [1, 4, 6, 7], [1, 4, 6, 8], [1, 4, 7, 8], [1, 5, 6, 7], [1, 5, 6, 8], [1, 5, 7, 8], [1, 6, 7, 8], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 4, 8], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 6, 7], [2, 3, 6, 8], [2, 3, 7, 8], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 6, 7], [2, 4, 6, 8], [2, 4, 7, 8], [2, 5, 6, 7], [2, 5, 6, 8], [2, 5, 7, 8], [2, 6, 7, 8], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 5, 8], [3, 4, 6, 7], [3, 4, 6, 8], [3, 4, 7, 8], [3, 5, 6, 7], [3, 5, 6, 8], [3, 5, 7, 8], [3, 6, 7, 8], [4, 5, 6, 7], [4, 5, 6, 8], [4, 5, 7, 8], [4, 6, 7, 8], [5, 6, 7, 8]], [[-1, [[2, 3, 16], [6, 7], [10, 26], [11, 27], [12, 28], [13, 29], [14, 30], [15, 31], [36, 37], [40, 56], [41, 57], [42, 58], [43, 59], [44, 60], [45, 61]]], [1, [[1, 2], [2, 6], [3, 4, 7, 17], [4, 5, 8, 18], [5, 9, 19], [6, 36], [7, 8, 10, 37], [8, 9, 11, 38], [9, 12, 39], [10, 11, 40], [11, 12, 13, 41], [12, 14, 42], [13, 14, 43], [14, 15, 44], [15, 45], [16, 17], [17, 18, 20], [18, 19, 21], [19, 22], [20, 21, 26], [21, 22, 23, 27], [22, 24, 28], [23, 24, 29], [24, 25, 30], [25, 31], [26, 27, 56], [27, 28, 29, 57], [28, 30, 58], [29, 30, 32, 59], [30, 31, 33, 60], [31, 34, 61], [32, 33, 62], [33, 34, 63], [34, 35, 64], [35, 65], [37, 38, 40], [38, 39, 41], [39, 42], [40, 41, 46], [41, 42, 43, 47], [42, 44, 48], [43, 44, 49], [44, 45, 50], [45, 51], [46, 47], [47, 48, 49], [48, 50], [49, 50, 52], [50, 51, 53], [51, 54], [52, 53, 66], [53, 54, 67], [54, 55, 68], [55, 69], [56, 57], [57, 58, 59], [58, 60], [59, 60, 62], [60, 61, 63], [61, 64], [62, 63, 66], [63, 64, 67], [64, 65, 68], [65, 69], [66, 67], [67, 68], [68, 69], [69, 70]]]]], [[[1], [2], [3], [4], 1, [5], 1, [6], [1, 5], [1, 6], [2, 5], [2, 6], [2, 7], [2, 8], [3, 5], [3, 6], 1, [3, 7], 1, [3, 8], [4, 6], 1, [4, 7], 2, [4, 8], 1, [5, 7], [5, 8], [1, 2, 6], [1, 2, 7], [1, 4, 6], [1, 4, 7], 1, [1, 4, 8], [1, 5, 7], [1, 5, 8], [2, 3, 6], [2, 3, 7], [3, 5, 7], [3, 5, 8], [3, 6, 8], [4, 6, 8], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 6, 8], [1, 4, 6, 8], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 6, 8]], [[1, [[1, 3, 10, 35, 44], [2, 4, 14, 30, 48], [3, 5, 17, 20, 48], [4, 15, 24, 26, 32], [5, 11, 21, 24, 35], [6, 9, 22, 29, 48], [7, 11, 21, 37, 40], [8, 10, 28, 38, 43], [9, 15, 32, 37, 44], [10, 17, 30, 36, 47], [11, 12, 45, 48], [12, 13, 21, 38, 46], [13, 14, 23, 31, 48], [14, 26, 46, 49], [15, 16, 41, 48], [16, 18, 32, 38, 42], [17, 21, 38, 40, 42], [18, 20, 34, 48], [19, 33, 39, 40, 42], [20, 35, 42, 49], [21, 23, 47], [22, 24, 32, 38, 43], [23, 26, 33, 40], [24, 27, 34, 48], [25, 28, 33, 39, 43], [26, 41, 47], [27, 35, 43, 49], [28, 29, 36, 48], [29, 37, 43, 49], [30, 32, 38, 44, 46], [31, 33, 39, 44, 46], [32, 34, 47], [33, 36, 47], [34, 35, 44], [35, 45, 47], [36, 37, 40, 44], [37, 41, 45, 47], [38, 48, 50], [39, 48, 50], [40, 41, 48], [41, 42, 49], [42, 47, 50], [43, 47, 50], [44, 45, 48], [45, 46, 49], [46, 47, 50], [48, 49], [49, 50]]]]], nothing, "84a", nothing, "168", "175a", nothing, "210a", nothing, "420", "300a", nothing, "350a", nothing, "525a", nothing, "567a", nothing, "1134", "700b", nothing, "700a", nothing, "1400d", "840b", nothing, "1680", "972a", nothing, "1050a", nothing, "2100b", "1344a", nothing, "2688", "1400b", nothing, "1575a", nothing, "3150", "2100a", nothing, "4200c", "2240a", nothing, "4480", "2268a", nothing, "4536b", "2835a", nothing, "5670", "3200a", nothing, "4096b", nothing, "4200a", nothing, "6075a", nothing, [[[1], [2], [3], [4], [5], [6], [7], [8]], [[1, [[1, 3], [2, 4], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]]]], nothing, [[[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 3, 8], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 5, 6], [1, 5, 7], [1, 5, 8], [1, 6, 7], [1, 6, 8], [1, 7, 8], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 3, 8], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 5, 6], [2, 5, 7], [2, 5, 8], [2, 6, 7], [2, 6, 8], [2, 7, 8], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 5, 6], [3, 5, 7], [3, 5, 8], [3, 6, 7], [3, 6, 8], [3, 7, 8], [4, 5, 6], [4, 5, 7], [4, 5, 8], [4, 6, 7], [4, 6, 8], [4, 7, 8], [5, 6, 7], [5, 6, 8], [5, 7, 8], [6, 7, 8]], [[-1, [[2, 3], [3, 23], [4, 24], [5, 25], [6, 26], [12, 37], [13, 16, 38], [14, 17, 39], [15, 18, 40], [28, 31], [29, 32], [30, 33]]], [1, [[1, 2, 7], [2, 22], [3, 4, 12], [4, 5, 13], [5, 6, 14], [6, 15], [7, 8], [8, 9, 12], [9, 10, 13], [10, 11, 14], [11, 15], [12, 13], [13, 14], [14, 15], [16, 17, 41], [17, 18, 19, 42], [18, 20, 43], [19, 20, 44], [20, 21, 45], [21, 46], [22, 23], [23, 24, 27, 37], [24, 25, 28, 38], [25, 26, 29, 39], [26, 30, 40], [27, 28], [28, 29], [29, 30], [31, 32, 47], [32, 33, 34, 48], [33, 35, 49], [34, 35, 50], [35, 36, 51], [36, 52], [37, 38], [38, 39, 41], [39, 40, 42], [40, 43], [41, 42, 47], [42, 43, 44, 48], [43, 45, 49], [44, 45, 50], [45, 46, 51], [46, 52], [47, 48], [48, 49, 50], [49, 51], [50, 51, 53], [51, 52, 54], [52, 55], [53, 54], [54, 55], [55, 56]]]]], nothing, "112a", nothing, "160a", nothing, "448b", "400a", nothing, "448a", nothing, "560a", nothing, "1344b", "840a", nothing, "1008a", nothing, "2016", "1296a", nothing, "1400c", nothing, "1400a", nothing, "2400a", nothing, "2800a", nothing, "5600b", "3240a", nothing, "3360a", nothing, "7168", "4096a", nothing, "4200b", nothing, "4536a", nothing, "5600a", nothing])
chevieset(:E8, :WGraph, function (i,)
        local gr
        gr = chevieget(:E8, :WGraphs)
        if !(gr[i] !== nothing)
            gr[i] = DualWGraph(8, (chevieget(:E8, :WGraph))(i - 1))
            return gr[i]
        elseif IsString(gr[i])
            ReadChv(Concatenation("tbl/e8wgraph/rep", gr[i]))
            return gr[i]
        else
            return gr[i]
        end
    end)
chevieset(:E8, :HeckeRepresentation, function (param, sqrtparam, i)
        local v, gr
        if !(sqrtparam[1] !== nothing)
            v = GetRoot(-((param[1])[1]) // (param[1])[2], 2, "Representation(Hecke(E8),[", i, "])")
        else
            v = -(sqrtparam[1]) // (param[1])[2]
        end
        gr = (chevieget(:E8, :WGraph))(i)
        if gr == false
            return false
        else
            return -((param[1])[2]) * WGraphToRepresentation(8, gr, v)
        end
    end)
chevieset(:E8, :Representation, function (i,)
        return (chevieget(:E8, :HeckeRepresentation))(map((i->begin
                            [1, -1]
                        end), 1:8), fill(0, max(0, (1 + 8) - 1)) + 1, i)
    end)
(CHEVIE[:families])[:S5] = Dict{Symbol, Any}(:group => Group(#= none:2 =# @perm_str("(1,5)"), #= none:2 =# @perm_str("(2,5)"), #= none:2 =# @perm_str("(3,5)"), #= none:2 =# @perm_str("(4,5)")), :lusztig => true, :charLabels => ["(1,1)", "(1,\\lambda^4)", "(1,\\lambda^3)", "(1,\\lambda)", "(1,\\nu)", "(1,\\nu')", "(1,\\lambda^2)", "(g_2,1)", "(g_2,-\\varepsilon)", "(g_2,-1)", "(g_2,\\varepsilon)", "(g_2,-\\rho)", "(g_2,\\rho)", "(g'_2,1)", "(g'_2,\\varepsilon)", "(g'_2,\\varepsilon')", "(g'_2,\\varepsilon'')", "(g'_2,\\rho)", "(g_3,1)", "(g_3,\\varepsilon)", "(g_3,\\zeta_3)", "(g_3,\\varepsilon\\zeta_3)", "(g_3,\\zeta_3^2)", "(g_3,\\varepsilon\\zeta_3^2)", "(g_6,1)", "(g_6,-1)", "(g_6,\\zeta_3)", "(g_6,-\\zeta_3)", "(g_6,\\zeta_3^2)", "(g_6,-\\zeta_3^2)", "(g_4,1)", "(g_4,-1)", "(g_4,i)", "(g_4,-i)", "(g_5,1)", "(g_5,\\zeta_5)", "(g_5,\\zeta_5^2)", "(g_5,\\zeta_5^3)", "(g_5,\\zeta_5^4)"], :size => 39, :eigenvalues => [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, E(3), E(3), E(3, 2), E(3, 2), 1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2)), 1, -1, E(4), -(E(4)), 1, E(5), E(5, 2), E(5, 3), E(5, 4)], :name => "D(S_5)", :mellin => ApplyFunc(DiagonalMat, [[[1, 1, 4, 4, 5, 5, 6], [1, -1, -2, 2, 1, -1, 0], [1, 1, 0, 0, 1, 1, -2], [1, 1, 1, 1, -1, -1, 0], [1, -1, 1, -1, 1, -1, 0], [1, -1, 0, 0, -1, 1, 0], [1, 1, -1, -1, 0, 0, 1]], [[1, 1, 1, 1, 2, 2], [1, -1, 1, -1, 0, 0], [1, 1, 1, 1, -1, -1], [1, -1, -1, 1, -2, 2], [1, 1, -1, -1, 0, 0], [1, -1, -1, 1, 1, -1]], [[1, 1, 1, 1, 2], [1, -1, -1, 1, 0], [1, 1, 1, 1, -2], [1, -1, 1, -1, 0], [1, 1, -1, -1, 0]], [[1, 1, 1, 1, 1, 1], [1, -1, 1, -1, 1, -1], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, 1, E(3, 2), E(3, 2), E(3), E(3)], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))]], [[1, 1, 1, 1, 1, 1], [1, -1, 1, -1, 1, -1], [1, 1, E(3), E(3), E(3, 2), E(3, 2)], [1, -1, E(3), -(E(3)), E(3, 2), -(E(3, 2))], [1, 1, E(3, 2), E(3, 2), E(3), E(3)], [1, -1, E(3, 2), -(E(3, 2)), E(3), -(E(3))]], [[1, 1, 1, 1], [1, -1, E(4), -(E(4))], [1, 1, -1, -1], [1, -1, -(E(4)), E(4)]], [[1, 1, 1, 1, 1], [1, E(5), E(5, 2), E(5, 3), E(5, 4)], [1, E(5, 2), E(5, 4), E(5), E(5, 3)], [1, E(5, 3), E(5), E(5, 4), E(5, 2)], [1, E(5, 4), E(5, 3), E(5, 2), E(5)]]]), :mellinLabels => ["(1,1)", "(1,g_2)", "(1,g'_2)", "(1,g_3)", "(1,g_6)", "(1,g_4)", "(1,g_5)", "(g_2,1)", "(g_2,g''_2)", "(g_2,g'_3)", "(g_2,g_2)", "(g_2,g'''_2)", "(g_2,g'_6)", "(g'_2,1)", "(g'_2,g''''_2)", "(g'_2,g'_2)", "(g'_2,g'''''_2)", "(g'_2,g'_4)", "(g_3,1)", "(g_3,g''_2)", "(g_3,g_3)", "(g_3,g_6)", "(g_3,g_3^2)", "(g_3,g_6^5)", "(g_6,1)", "(g_6,g''_2)", "(g_6,g_3)", "(g_6,g_6)", "(g_6,g_3^2)", "(g_6,g_6^5)", "(g_4,1)", "(g_4,g_4)", "(g_4,g'''''_2)", "(g_4,g_4^-1)", "(g_5,1)", "(g_5,g_5)", "(g_5,g_5^2)", "(g_5,g_5^3)", "(g_5,g_5^4)"], :fourierMat => [[1 // 10, 1 // 10, 2 // 5, 2 // 5, 1 // 2, 1 // 2, 3 // 5, 1, 1, 1, 1, 2, 2, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 12 // 5, 12 // 5, 12 // 5, 12 // 5, 12 // 5], [1 // 10, 1 // 10, 2 // 5, 2 // 5, 1 // 2, 1 // 2, 3 // 5, -1, -1, -1, -1, -2, -2, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 3, 2, 2, 2, 2, 2, 2, -2, -2, -2, -2, -2, -2, -3, -3, -3, -3, 12 // 5, 12 // 5, 12 // 5, 12 // 5, 12 // 5], [2 // 5, 2 // 5, 8 // 5, 8 // 5, 2, 2, 12 // 5, -2, -2, -2, -2, -4, -4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, -12 // 5, -12 // 5, -12 // 5, -12 // 5, -12 // 5], [2 // 5, 2 // 5, 8 // 5, 8 // 5, 2, 2, 12 // 5, 2, 2, 2, 2, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, -2, -2, -2, -2, -2, -2, 0, 0, 0, 0, -12 // 5, -12 // 5, -12 // 5, -12 // 5, -12 // 5], [1 // 2, 1 // 2, 2, 2, 5 // 2, 5 // 2, 3, 1, 1, 1, 1, 2, 2, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 3, -2, -2, -2, -2, -2, -2, 2, 2, 2, 2, 2, 2, -3, -3, -3, -3, 0, 0, 0, 0, 0], [1 // 2, 1 // 2, 2, 2, 5 // 2, 5 // 2, 3, -1, -1, -1, -1, -2, -2, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 3, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 3, 3, 3, 3, 0, 0, 0, 0, 0], [3 // 5, 3 // 5, 12 // 5, 12 // 5, 3, 3, 18 // 5, 0, 0, 0, 0, 0, 0, -3, -3, -3, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12 // 5, 12 // 5, 12 // 5, 12 // 5, 12 // 5], [1, -1, -2, 2, 1, -1, 0, 4, -4, 2, -2, -2, 2, 3, -3, -3, 3, 0, 2, -2, 2, -2, 2, -2, 2, -2, 2, -2, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, -1, -2, 2, 1, -1, 0, -4, 4, -2, 2, 2, -2, 3, -3, -3, 3, 0, 2, -2, 2, -2, 2, -2, -2, 2, -2, 2, -2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, -1, -2, 2, 1, -1, 0, 2, -2, 4, -4, 2, -2, -3, 3, 3, -3, 0, 2, -2, 2, -2, 2, -2, -2, 2, -2, 2, -2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, -1, -2, 2, 1, -1, 0, -2, 2, -4, 4, -2, 2, -3, 3, 3, -3, 0, 2, -2, 2, -2, 2, -2, 2, -2, 2, -2, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, -2, -4, 4, 2, -2, 0, -2, 2, 2, -2, 4, -4, 0, 0, 0, 0, 0, -2, 2, -2, 2, -2, 2, 2, -2, 2, -2, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, -2, -4, 4, 2, -2, 0, 2, -2, -2, 2, -4, 4, 0, 0, 0, 0, 0, -2, 2, -2, 2, -2, 2, -2, 2, -2, 2, -2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3 // 2, 3 // 2, 0, 0, 3 // 2, 3 // 2, -3, 3, 3, -3, -3, 0, 0, 9 // 2, -3 // 2, 9 // 2, -3 // 2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, -3, -3, 0, 0, 0, 0, 0], [3 // 2, 3 // 2, 0, 0, 3 // 2, 3 // 2, -3, -3, -3, 3, 3, 0, 0, -3 // 2, 9 // 2, -3 // 2, 9 // 2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, -3, -3, 0, 0, 0, 0, 0], [3 // 2, 3 // 2, 0, 0, 3 // 2, 3 // 2, -3, -3, -3, 3, 3, 0, 0, 9 // 2, -3 // 2, 9 // 2, -3 // 2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, 3, 3, 0, 0, 0, 0, 0], [3 // 2, 3 // 2, 0, 0, 3 // 2, 3 // 2, -3, 3, 3, -3, -3, 0, 0, -3 // 2, 9 // 2, -3 // 2, 9 // 2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, 3, 3, 0, 0, 0, 0, 0], [3, 3, 0, 0, 3, 3, -6, 0, 0, 0, 0, 0, 0, -3, -3, -3, -3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, -2, -2, 0, 2, 2, 2, 2, -2, -2, 0, 0, 0, 0, 0, 4, 4, -2, -2, -2, -2, 4, 4, -2, -2, -2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, -2, -2, 0, -2, -2, -2, -2, 2, 2, 0, 0, 0, 0, 0, 4, 4, -2, -2, -2, -2, -4, -4, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, -2, -2, 0, 2, 2, 2, 2, -2, -2, 0, 0, 0, 0, 0, -2, -2, 4, 4, -2, -2, -2, -2, 4, 4, -2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, -2, -2, 0, -2, -2, -2, -2, 2, 2, 0, 0, 0, 0, 0, -2, -2, 4, 4, -2, -2, 2, 2, -4, -4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, -2, -2, 0, 2, 2, 2, 2, -2, -2, 0, 0, 0, 0, 0, -2, -2, -2, -2, 4, 4, -2, -2, -2, -2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, -2, -2, 0, -2, -2, -2, -2, 2, 2, 0, 0, 0, 0, 0, -2, -2, -2, -2, 4, 4, 2, 2, 2, 2, -4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, -2, 2, -2, 2, -2, 0, 2, -2, -2, 2, 2, -2, 0, 0, 0, 0, 0, 4, -4, -2, 2, -2, 2, 4, -4, -2, 2, -2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, -2, 2, -2, 2, -2, 0, -2, 2, 2, -2, -2, 2, 0, 0, 0, 0, 0, 4, -4, -2, 2, -2, 2, -4, 4, 2, -2, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, -2, 2, -2, 2, -2, 0, 2, -2, -2, 2, 2, -2, 0, 0, 0, 0, 0, -2, 2, 4, -4, -2, 2, -2, 2, 4, -4, -2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, -2, 2, -2, 2, -2, 0, -2, 2, 2, -2, -2, 2, 0, 0, 0, 0, 0, -2, 2, 4, -4, -2, 2, 2, -2, -4, 4, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, -2, 2, -2, 2, -2, 0, 2, -2, -2, 2, 2, -2, 0, 0, 0, 0, 0, -2, 2, -2, 2, 4, -4, -2, 2, -2, 2, 4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, -2, 2, -2, 2, -2, 0, -2, 2, 2, -2, -2, 2, 0, 0, 0, 0, 0, -2, 2, -2, 2, 4, -4, 2, -2, 2, -2, -4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, -3, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, -6, 0, 0, 0, 0, 0, 0, 0], [3, -3, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 6, 0, 0, 0, 0, 0, 0, 0], [3, -3, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, 0, -3, -3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, -6, 0, 0, 0, 0, 0], [3, -3, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, 0, -3, -3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 6, 0, 0, 0, 0, 0], [12 // 5, 12 // 5, -12 // 5, -12 // 5, 0, 0, 12 // 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48 // 5, -12 // 5, -12 // 5, -12 // 5, -12 // 5], [12 // 5, 12 // 5, -12 // 5, -12 // 5, 0, 0, 12 // 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12 // 5, (18 + 6 * ER(5)) // 5, (-12 + 12 * ER(5)) // 5, (-12 - 12 * ER(5)) // 5, (18 - 6 * ER(5)) // 5], [12 // 5, 12 // 5, -12 // 5, -12 // 5, 0, 0, 12 // 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12 // 5, (-12 + 12 * ER(5)) // 5, (18 - 6 * ER(5)) // 5, (18 + 6 * ER(5)) // 5, (-12 - 12 * ER(5)) // 5], [12 // 5, 12 // 5, -12 // 5, -12 // 5, 0, 0, 12 // 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12 // 5, (-12 - 12 * ER(5)) // 5, (18 + 6 * ER(5)) // 5, (18 - 6 * ER(5)) // 5, (-12 + 12 * ER(5)) // 5], [12 // 5, 12 // 5, -12 // 5, -12 // 5, 0, 0, 12 // 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12 // 5, (18 - 6 * ER(5)) // 5, (-12 - 12 * ER(5)) // 5, (-12 + 12 * ER(5)) // 5, (18 + 6 * ER(5)) // 5]] // 12, :perm => #= none:93 =# @perm_str("(21,23)(22,24)(27,29)(28,30)(33,34)(36,39)(37,38)"), :x => [Perm(), Perm(), Perm(), Perm(), Perm(), Perm(), Perm(), #= none:94 =# @perm_str("(1,2)"), #= none:94 =# @perm_str("(1,2)"), #= none:94 =# @perm_str("(1,2)"), #= none:94 =# @perm_str("(1,2)"), #= none:94 =# @perm_str("(1,2)"), #= none:94 =# @perm_str("(1,2)"), #= none:94 =# @perm_str("(1,2)(3,4)"), #= none:94 =# @perm_str("(1,\n2)(3,4)"), #= none:95 =# @perm_str("(1,2)(3,4)"), #= none:95 =# @perm_str("(1,2)(3,4)"), #= none:95 =# @perm_str("(1,2)(3,4)"), #= none:95 =# @perm_str("(1,2,3)"), #= none:95 =# @perm_str("(1,2,3)"), #= none:95 =# @perm_str("(1,2,3)"), #= none:95 =# @perm_str("(1,2,3)"), #= none:95 =# @perm_str("(1,\n2,3)"), #= none:96 =# @perm_str("(1,2,3)"), #= none:96 =# @perm_str("(1,2,3)(4,5)"), #= none:96 =# @perm_str("(1,2,3)(4,5)"), #= none:96 =# @perm_str("(1,2,3)(4,5)"), #= none:96 =# @perm_str("(1,2,3)(4,5)"), #= none:96 =# @perm_str("(1,2,3)(4,\n5)"), #= none:97 =# @perm_str("(1,2,3)(4,5)"), #= none:97 =# @perm_str("(1,2,3,4)"), #= none:97 =# @perm_str("(1,2,3,4)"), #= none:97 =# @perm_str("(1,2,3,4)"), #= none:97 =# @perm_str("(1,2,3,4)"), #= none:97 =# @perm_str("(1,2,3,4,5)"), #= none:97 =# @perm_str("(1,2,3,\n4,5)"), #= none:98 =# @perm_str("(1,2,3,4,5)"), #= none:98 =# @perm_str("(1,2,3,4,5)"), #= none:98 =# @perm_str("(1,2,3,4,5)")], :y => [Perm(), #= none:99 =# @perm_str("(1,2)"), #= none:99 =# @perm_str("(1,2)(3,4)"), #= none:99 =# @perm_str("(1,2,3)"), #= none:99 =# @perm_str("(1,2,3)(4,5)"), #= none:99 =# @perm_str("(1,2,3,4)"), #= none:99 =# @perm_str("(1,2,3,4,5)"), Perm(), #= none:99 =# @perm_str("(4,5)"), #= none:100 =# @perm_str("(3,4,5)"), #= none:100 =# @perm_str("(1,2)"), #= none:100 =# @perm_str("(1,2)(4,5)"), #= none:100 =# @perm_str("(1,2)(3,4,5)"), Perm(), #= none:100 =# @perm_str("(3,4)"), #= none:100 =# @perm_str("(1,2)(3,4)"), #= none:100 =# @perm_str("(1,3)(2,4)"), #= none:100 =# @perm_str("(1,3,2,\n4)"), Perm(), #= none:101 =# @perm_str("(4,5)"), #= none:101 =# @perm_str("(1,2,3)"), #= none:101 =# @perm_str("(1,2,3)(4,5)"), #= none:101 =# @perm_str("(1,3,2)"), #= none:101 =# @perm_str("(1,3,2)(4,5)"), Perm(), #= none:101 =# @perm_str("(4,5)"), #= none:101 =# @perm_str("(1,2,3)"), #= none:101 =# @perm_str("(1,2,\n3)(4,5)"), #= none:102 =# @perm_str("(1,3,2)"), #= none:102 =# @perm_str("(1,3,2)(4,5)"), Perm(), #= none:102 =# @perm_str("(1,2,3,4)"), #= none:102 =# @perm_str("(1,3)(2,4)"), #= none:102 =# @perm_str("(1,4,3,2)"), Perm(), #= none:102 =# @perm_str("(1,2,3,4,\n5)"), #= none:103 =# @perm_str("(1,3,5,2,4)"), #= none:103 =# @perm_str("(1,4,2,5,3)"), #= none:103 =# @perm_str("(1,5,4,3,2)")], :special => 1)
chevieset(:E8, :DecompositionMatrix, function (p,)
        if p == 2
            return [[Concatenation(1:61, 64:104, 107:112), [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0], [2, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0], [4, 0, 1, 2, 0, 1, 0, 0, 0, 0, 0], [5, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [5, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0], [2, 1, 1, 3, 0, 0, 0, 0, 1, 0, 0], [2, 1, 1, 3, 0, 0, 0, 0, 1, 0, 0], [7, 1, 1, 4, 1, 1, 0, 0, 1, 0, 0], [7, 1, 1, 4, 1, 1, 0, 0, 1, 0, 0], [3, 2, 1, 3, 1, 0, 1, 0, 1, 0, 0], [3, 2, 1, 3, 1, 0, 1, 0, 1, 0, 0], [6, 2, 3, 6, 0, 1, 0, 1, 2, 0, 0], [2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0], [2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0], [6, 1, 2, 4, 1, 1, 1, 0, 1, 0, 0], [6, 1, 2, 4, 1, 1, 1, 0, 1, 0, 0], [12, 4, 3, 8, 2, 2, 0, 1, 2, 0, 0], [4, 2, 2, 3, 1, 1, 0, 1, 1, 0, 0], [4, 2, 2, 3, 1, 1, 0, 1, 1, 0, 0], [8, 4, 4, 6, 2, 2, 2, 1, 2, 0, 0], [2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0], [2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0], [4, 3, 3, 4, 1, 1, 1, 1, 1, 0, 0], [4, 3, 3, 4, 1, 1, 1, 1, 1, 0, 0], [8, 6, 6, 8, 2, 2, 2, 2, 2, 0, 0], [2, 2, 2, 4, 0, 0, 1, 0, 1, 1, 0], [2, 2, 2, 4, 0, 0, 1, 0, 1, 1, 0], [4, 4, 4, 8, 0, 0, 0, 1, 2, 0, 1], [6, 4, 4, 7, 1, 1, 1, 1, 2, 0, 0], [6, 4, 4, 7, 1, 1, 1, 1, 2, 0, 0], [7, 3, 2, 5, 2, 1, 1, 0, 1, 1, 0], [7, 3, 2, 5, 2, 1, 1, 0, 1, 1, 0], [14, 4, 5, 10, 2, 3, 0, 1, 2, 0, 1], [4, 5, 4, 5, 2, 1, 2, 1, 1, 1, 0], [4, 5, 4, 5, 2, 1, 2, 1, 1, 1, 0], [8, 8, 9, 10, 2, 3, 2, 3, 2, 0, 1], [2, 6, 4, 4, 2, 1, 1, 2, 1, 1, 0], [2, 6, 4, 4, 2, 1, 1, 2, 1, 1, 0], [4, 8, 10, 8, 2, 3, 4, 3, 2, 0, 1], [8, 5, 4, 8, 2, 1, 1, 1, 2, 1, 0], [8, 5, 4, 8, 2, 1, 1, 1, 2, 1, 0], [16, 8, 9, 16, 2, 3, 2, 2, 4, 0, 1], [7, 4, 5, 7, 1, 2, 1, 1, 1, 0, 1], [7, 4, 5, 7, 1, 2, 1, 1, 1, 0, 1], [14, 10, 9, 14, 4, 3, 2, 2, 2, 2, 1], [10, 4, 4, 8, 2, 2, 0, 0, 1, 1, 1], [10, 4, 4, 8, 2, 2, 0, 0, 1, 1, 1], [14, 6, 6, 11, 3, 3, 1, 1, 2, 1, 1], [14, 6, 6, 11, 3, 3, 1, 1, 2, 1, 1], [17, 11, 11, 17, 4, 4, 3, 3, 4, 1, 1], [17, 11, 11, 17, 4, 4, 3, 3, 4, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [4, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0], [4, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 0, 1, 2, 0, 0, 0, 0], [4, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0], [4, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0], [6, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0], [6, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0], [2, 2, 2, 4, 0, 0, 1, 0, 1, 0, 0], [2, 2, 2, 4, 0, 0, 1, 0, 1, 0, 0], [0, 4, 4, 0, 2, 2, 2, 2, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [8, 2, 2, 6, 1, 1, 1, 0, 2, 0, 0], [8, 2, 2, 6, 1, 1, 1, 0, 2, 0, 0], [8, 2, 2, 4, 2, 2, 0, 0, 0, 0, 1], [6, 3, 2, 6, 1, 0, 0, 0, 1, 1, 0], [6, 3, 2, 6, 1, 0, 0, 0, 1, 1, 0], [2, 5, 4, 4, 1, 1, 1, 2, 1, 0, 0], [2, 5, 4, 4, 1, 1, 1, 2, 1, 0, 0], [2, 3, 2, 4, 1, 0, 1, 0, 1, 1, 0], [2, 3, 2, 4, 1, 0, 1, 0, 1, 1, 0], [10, 6, 6, 10, 2, 2, 2, 2, 3, 0, 0], [10, 6, 6, 10, 2, 2, 2, 2, 3, 0, 0], [6, 7, 6, 6, 3, 2, 3, 2, 1, 1, 0], [6, 7, 6, 6, 3, 2, 3, 2, 1, 1, 0], [12, 10, 8, 12, 4, 3, 2, 2, 2, 2, 1], [10, 7, 6, 10, 3, 2, 2, 2, 3, 1, 0], [10, 7, 6, 10, 3, 2, 2, 2, 3, 1, 0], [10, 4, 4, 8, 2, 2, 1, 0, 1, 1, 1], [10, 4, 4, 8, 2, 2, 1, 0, 1, 1, 1], [8, 12, 14, 16, 2, 3, 4, 4, 4, 0, 2], [18, 7, 8, 14, 3, 4, 1, 2, 3, 0, 1], [18, 7, 8, 14, 3, 4, 1, 2, 3, 0, 1], [12, 7, 8, 12, 2, 3, 1, 2, 2, 1, 1], [12, 7, 8, 12, 2, 3, 1, 2, 2, 1, 1], [20, 10, 10, 18, 4, 4, 2, 2, 4, 1, 1], [20, 10, 10, 18, 4, 4, 2, 2, 4, 1, 1]]], [[62, 63, 105, 106], [[1], [1], [1], [1]]]]
        elseif p == 3
            return [[Concatenation(1:23, 27:34, 37:53, 60:65), [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 2, 2, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 1, 2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 2, 1, 1, 0, 1, 0, 0, 1, 2, 1, 0, 0, 1, 0, 1, 1, 0, 1]]], [Concatenation(68:88, 91:99, 102:108, [111, 112]), [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 2, 2, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0], [1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [2, 2, 1, 1, 0, 0, 2, 1, 1, 0, 0, 1, 1], [1, 1, 1, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [2, 2, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 1, 2, 0, 0, 1, 2, 0, 1, 0, 1, 0], [1, 2, 2, 1, 0, 0, 1, 0, 2, 0, 1, 0, 1], [1, 2, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 0], [2, 1, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 2, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 2, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1]]], [[24, 58, 55], [[1, 0], [1, 1], [0, 1]]], [[54, 57, 25], [[1, 0], [1, 1], [0, 1]]], [[100, 109, 90], [[1, 0], [1, 1], [0, 1]]], [[89, 110, 101], [[1, 0], [1, 1], [0, 1]]], [[26, 59, 56], [[1, 0], [1, 1], [0, 1]]]]
        elseif p == 5
            return [[[1, 2, 3, 4, 10, 11, 12, 24, 25, 26, 35, 36, 40, 41, 42, 54, 55, 56, 62, 63], [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1]]], [[68, 69, 70, 71, 72, 73, 76, 79, 80, 83, 86, 87, 88, 89, 90, 104, 105, 106, 109, 110], [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1]]], [[5, 32, 58, 52, 16], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[74, 84, 103, 101, 82], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[15, 51, 57, 33, 6], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[81, 100, 102, 85, 75], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]], [[7, 34, 59, 53, 17], [[1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]]]]
        elseif p == 7
            return [[[1, 18, 62, 66, 61, 36, 9], [[1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1]]], [[68, 74, 89, 95, 106, 101, 78], [[1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1]]], [[8, 35, 60, 67, 63, 19, 2], [[1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1]]], [[77, 100, 105, 96, 90, 75, 69], [[1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1]]]]
        else
            return []
        end
    end)
chevieset(:E8, :UnipotentCharacters, function ()
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "E", :indices => 1:8, :rank => 8), :levi => [], :eigenvalue => 1, :parameterExponents => [1, 1, 1, 1, 1, 1, 1, 1], :cuspidalName => "", :charNumbers => 1:112), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [8], :rank => 1), :levi => 1:7, :eigenvalue => -(E(4)), :parameterExponents => [15], :cuspidalName => "E_7[-i]", :qEigen => 1 // 2, :charNumbers => [114, 113]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [8], :rank => 1), :levi => 1:7, :eigenvalue => E(4), :parameterExponents => [15], :cuspidalName => "E_7[i]", :qEigen => 1 // 2, :charNumbers => [116, 115]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "F", :indices => [8, 7, 6, 1], :rank => 4), :levi => 2:5, :eigenvalue => -1, :parameterExponents => [1, 1, 4, 4], :cuspidalName => "D_4", :charNumbers => [117, 119, 118, 120, 126, 123, 125, 124, 131, 139, 141, 140, 138, 132, 133, 121, 128, 130, 129, 127, 135, 136, 134, 137, 122]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "G", :indices => [8, 7], :rank => 2), :levi => 1:6, :eigenvalue => E(3), :parameterExponents => [1, 9], :cuspidalName => "E_6[\\zeta_3]", :charNumbers => [142, 145, 143, 144, 152, 153]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "G", :indices => [8, 7], :rank => 2), :levi => 1:6, :eigenvalue => E(3, 2), :parameterExponents => [1, 9], :cuspidalName => "E_6[\\zeta_3^2]", :charNumbers => [148, 151, 149, 150, 146, 147]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => -1, :parameterExponents => [], :cuspidalName => "E_8[-1]", :charNumbers => [154]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => -(E(3, 2)), :parameterExponents => [], :cuspidalName => "E_8[-\\zeta_3^2]", :charNumbers => [155]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => -(E(3)), :parameterExponents => [], :cuspidalName => "E_8[-\\zeta_3]", :charNumbers => [156]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => -(E(4)), :parameterExponents => [], :cuspidalName => "E_8[-i]", :charNumbers => [157]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => E(3, 2), :parameterExponents => [], :cuspidalName => "E_8[\\zeta_3^2]", :charNumbers => [158]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => E(3), :parameterExponents => [], :cuspidalName => "E_8[\\zeta_3]", :charNumbers => [159]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => E(5, 4), :parameterExponents => [], :cuspidalName => "E_8[\\zeta_5^4]", :charNumbers => [160]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => E(5, 3), :parameterExponents => [], :cuspidalName => "E_8[\\zeta_5^3]", :charNumbers => [161]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => E(5, 2), :parameterExponents => [], :cuspidalName => "E_8[\\zeta_5^2]", :charNumbers => [162]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => E(5), :parameterExponents => [], :cuspidalName => "E_8[\\zeta_5]", :charNumbers => [163]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => E(4), :parameterExponents => [], :cuspidalName => "E_8[i]", :charNumbers => [164]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => 1, :parameterExponents => [], :cuspidalName => "E_8[1]", :charNumbers => [165]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:8, :eigenvalue => 1, :parameterExponents => [], :cuspidalName => "E_8^2[1]", :charNumbers => [166])], :families => [Family("C1", [1]), Family("C1", [2]), Family("C1", [5]), Family("C1", [6]), Family("C1", [22]), Family("C1", [23]), Family("C1", [24]), Family("C1", [25]), Family("C1", [39]), Family("C1", [57]), Family("C1", [58]), Family("C1", [66]), Family("C1", [67]), Family("C1", [68], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [69], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [81], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [82], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [100], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [101], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [107], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [108], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [109], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [110], Dict{Symbol, Any}(:ennola => -1)), Family("C2", [72, 10, 3, 117], Dict{Symbol, Any}(:ennola => -4)), Family("C2", [15, 8, 74, 125], Dict{Symbol, Any}(:ennola => 2)), Family("C2", [29, 77, 18, 118], Dict{Symbol, Any}(:ennola => 3)), Family("C2", [54, 35, 89, 139], Dict{Symbol, Any}(:ennola => 2)), Family("C2", [51, 91, 84, 129], Dict{Symbol, Any}(:ennola => 4)), Family("C2", [64, 32, 102, 126], Dict{Symbol, Any}(:ennola => 2)), Family("C2", [97, 27, 48, 140], Dict{Symbol, Any}(:ennola => -4)), Family("C2", [111, 60, 95, 135], Dict{Symbol, Any}(:ennola => -3)), Family("C2", [112, 61, 96, 136], Dict{Symbol, Any}(:ennola => -3)), Family("C2", [65, 33, 103, 123], Dict{Symbol, Any}(:ennola => 2)), Family("C2", [98, 28, 49, 141], Dict{Symbol, Any}(:ennola => -4)), Family("C2", [52, 92, 85, 130], Dict{Symbol, Any}(:ennola => 4)), Family("C2", [55, 36, 90, 138], Dict{Symbol, Any}(:ennola => 2)), Family("C2", [30, 78, 19, 119], Dict{Symbol, Any}(:ennola => 3)), Family("C2", [16, 9, 75, 124], Dict{Symbol, Any}(:ennola => 2)), Family("C2", [73, 11, 4, 120], Dict{Symbol, Any}(:ennola => -4)), Family("C'2", [105, 62, 115, 113], Dict{Symbol, Any}(:ennola => 4)), Family("C'2", [63, 106, 116, 114], Dict{Symbol, Any}(:ennola => -4)), Family("S3", [93, 40, 79, 86, 70, 128, 142, 148], Dict{Symbol, Any}(:ennola => -5)), Family("S3", [43, 37, 13, 45, 20, 134, 143, 149], Dict{Symbol, Any}(:ennola => 1)), Family("S3", [44, 38, 14, 46, 21, 137, 144, 150], Dict{Symbol, Any}(:ennola => 1)), Family("S3", [94, 41, 80, 87, 71, 127, 145, 151], Dict{Symbol, Any}(:ennola => -5)), Family("S5", [53, 165, 7, 59, 56, 31, 34, 104, 154, 121, 76, 133, 99, 50, 166, 12, 42, 122, 47, 26, 152, 159, 146, 158, 88, 132, 153, 156, 147, 155, 83, 131, 164, 157, 17, 163, 162, 161, 160], Dict{Symbol, Any}(:ennola => 2))], :a => [0, 120, 3, 63, 2, 74, 16, 4, 52, 3, 63, 16, 8, 32, 4, 52, 16, 6, 42, 8, 32, 12, 36, 6, 46, 16, 13, 25, 6, 42, 16, 12, 24, 16, 10, 30, 8, 32, 20, 7, 37, 16, 8, 32, 8, 32, 16, 13, 25, 16, 10, 28, 16, 10, 30, 16, 14, 22, 16, 15, 21, 11, 26, 12, 24, 14, 22, 1, 91, 7, 37, 3, 63, 4, 52, 16, 6, 42, 7, 37, 5, 47, 16, 10, 28, 7, 37, 16, 10, 30, 10, 28, 7, 37, 15, 21, 13, 25, 16, 9, 31, 12, 24, 16, 11, 26, 15, 21, 13, 23, 15, 21, 11, 26, 11, 26, 3, 6, 42, 63, 16, 16, 24, 52, 4, 12, 37, 7, 10, 28, 16, 16, 16, 8, 15, 21, 32, 30, 10, 13, 25, 7, 8, 32, 37, 16, 16, 7, 8, 32, 37, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], :A => [0, 120, 57, 117, 46, 118, 104, 68, 116, 57, 117, 104, 88, 112, 68, 116, 104, 78, 114, 88, 112, 84, 108, 74, 114, 104, 95, 107, 78, 114, 104, 96, 108, 104, 90, 110, 88, 112, 100, 83, 113, 104, 88, 112, 88, 112, 104, 95, 107, 104, 92, 110, 104, 90, 110, 104, 98, 106, 104, 99, 105, 94, 109, 96, 108, 98, 106, 29, 119, 83, 113, 57, 117, 68, 116, 104, 78, 114, 83, 113, 73, 115, 104, 92, 110, 83, 113, 104, 90, 110, 92, 110, 83, 113, 99, 105, 95, 107, 104, 89, 111, 96, 108, 104, 94, 109, 99, 105, 97, 107, 99, 105, 94, 109, 94, 109, 57, 78, 114, 117, 104, 104, 108, 116, 68, 96, 113, 83, 92, 110, 104, 104, 104, 88, 99, 105, 112, 110, 90, 95, 107, 83, 88, 112, 113, 104, 104, 83, 88, 112, 113, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104])
    end)
chevieset(:E8, :Invariants, function ()
        local r, C
        C = chevieget(:E8, :CartanMat)
        r = RootsCartan(C) * C
        return map((d->begin
                        function (arg...,)
                            return Sum(r, (a->begin
                                            (arg * a) ^ d
                                        end))
                        end
                    end), chevieget(:E8, :ReflectionDegrees))
    end)
chevieset(:E8, :UnipotentClasses, function (p,)
        local uc, Z, l, l1, i, s, c, class
        if p == 0
            p = 1
        end
        Z = (n->begin
                    ComplexReflectionGroup(n, 1, 1)
                end)
        class = (n->begin
                    First(uc[:classes], (x->begin
                                x[:name] == n
                            end))
                end)
        uc = Dict{Symbol, Any}(:classes => [Dict{Symbol, Any}(:name => "E_8", :succ => "", :dynkin => [2, 2, 2, 2, 2, 2, 2, 2], :Au => Z(gcd(60, p ^ 2)), :balacarter => 1:8), Dict{Symbol, Any}(:name => "E_8(a_1)", :succ => ["E8"], :dynkin => [2, 2, 2, 0, 2, 2, 2, 2], :Au => Z(gcd(12, p ^ 2)), :balacarter => [1, 2, 3, -4, 5, 6, 7, 8]), Dict{Symbol, Any}(:name => "E_8(a_2)", :succ => ["E8(a1)"], :dynkin => [2, 2, 2, 0, 2, 0, 2, 2], :Au => Z(gcd(2, p)), :balacarter => [1, 2, 3, -4, 5, -6, 7, 8]), Dict{Symbol, Any}(:name => "E_8(a_3)", :mizuno => "E_7{+}A_1", :succ => ["E8(a2)"], :dynkin => [2, 0, 0, 2, 0, 2, 2, 2], :Au => Z(2) * Z(gcd(6, p)), :balacarter => [1, -2, -3, 4, -5, 6, 7, 8]), Dict{Symbol, Any}(:name => "E_7", :succ => ["E8(a3)"], :dynkin => [2, 1, 1, 0, 1, 2, 2, 2], :Au => Z(gcd(12, p ^ 2)), :balacarter => [1, 2, 3, 4, 5, 6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "E_8(a_4)", :mizuno => "D_8", :succ => ["E8(a3)"], :dynkin => [2, 0, 0, 2, 0, 2, 0, 2], :Au => Z(2), :balacarter => [1, -2, -3, 4, -5, 6, -7, 8]), Dict{Symbol, Any}(:name => "E_8(b_4)", :mizuno => "E_7(a_1){+}A_1", :succ => ["E7", "E8(a4)"], :dynkin => [2, 0, 0, 2, 0, 0, 2, 2], :Au => Z(2), :balacarter => [1, -2, -3, 4, -5, -6, 7, 8]), Dict{Symbol, Any}(:name => "E_7(a_1)", :succ => ["E8(b4)"], :dynkin => [2, 1, 1, 0, 1, 0, 2, 2], :Au => Z(gcd(2, p)), :balacarter => [1, 2, 3, -4, 5, 6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "E_8(a_5)", :mizuno => "D_8(a_1)", :succ => ["E8(b4)"], :dynkin => [2, 0, 0, 2, 0, 0, 2, 0], :Au => CoxeterGroup("B", gcd(2, p)), :balacarter => [1, -2, -3, 4, -5, -6, 7, -8]), Dict{Symbol, Any}(:name => "E_8(b_5)", :mizuno => "E_7(a_2){+}A_1", :succ => ["E7(a1)", "E8(a5)"], :dynkin => [0, 0, 0, 2, 0, 0, 2, 2], :Au => CoxeterGroup("A", 2) * Z(gcd(2, p)), :balacarter => [-1, -2, -3, 4, -5, -6, 7, 8]), Dict{Symbol, Any}(:name => "D_7", :succ => ["E8(a5)"], :dynkin => [2, 1, 1, 0, 1, 1, 0, 1], :Au => Z(gcd(2, p)), :balacarter => [2, 3, 4, 5, 6, 7, 8], :red => Z(2)), Dict{Symbol, Any}(:name => "E_7(a_2)", :succ => ["E8(b5)"], :dynkin => [0, 1, 1, 0, 1, 0, 2, 2], :Au => Z(gcd(2, p)), :balacarter => [1, 2, 3, -4, 5, -6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "E_8(a_6)", :mizuno => "A_8", :succ => ["E8(b5)", "D7"], :dynkin => [0, 0, 0, 2, 0, 0, 2, 0], :Au => CoxeterGroup("A", 2), :balacarter => [-1, -2, -3, 4, -5, -6, 7, -8]), Dict{Symbol, Any}(:name => "E_6{+}A_1", :succ => ["E7(a2)"], :dynkin => [1, 0, 0, 1, 0, 1, 2, 2], :Au => Z(gcd(6, p)), :balacarter => [1, 2, 3, 4, 5, 6, 8], :red => Z(2)), Dict{Symbol, Any}(:name => "D_7(a_1)", :succ => ["E7(a2)", "E8(a6)"], :dynkin => [2, 0, 0, 0, 2, 0, 0, 2], :Au => Z(gcd(2, p - 1)), :balacarter => [2, 3, -4, 5, 6, 7, 8], :red => Torus(1), :AuAction => ExtendedReflectionGroup(Torus(1), [[-1]])), Dict{Symbol, Any}(:name => "E_6", :succ => ["E6+A1"], :dynkin => [2, 0, 0, 0, 0, 2, 2, 2], :Au => Z(gcd(6, p)), :balacarter => [1, 2, 3, 4, 5, 6], :red => CoxeterGroup("G", 2)), Dict{Symbol, Any}(:name => "E_7(a_3)", :mizuno => "D_6{+}A_1", :succ => ["D7(a1)"], :dynkin => [2, 0, 0, 1, 0, 1, 0, 2], :Au => Z(2), :balacarter => [1, -2, -3, 4, -5, 6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "E_8(b_6)", :mizuno => "D_8(a_3)", :succ => ["D7(a1)", "E6+A1"], :dynkin => [0, 0, 0, 2, 0, 0, 0, 2], :Au => CoxeterGroup("A", 2 - (gcd(3, p) - 1) // 2), :balacarter => [-1, -2, -3, 4, -5, -6, -7, 8]), Dict{Symbol, Any}(:name => "D_6", :succ => ["E7(a3)"], :dynkin => [2, 1, 1, 0, 0, 0, 1, 2], :Au => Z(gcd(2, p)), :balacarter => [2, 3, 4, 5, 6, 7], :red => CoxeterGroup("B", 2)), Dict{Symbol, Any}(:name => "E_6(a_1){+}A_1", :succ => ["E7(a3)", "E8(b6)"], :dynkin => [1, 0, 0, 1, 0, 1, 0, 2], :Au => Z(2), :balacarter => [1, 2, 3, -4, 5, 6, 8], :red => Torus(1), :AuAction => ExtendedReflectionGroup(Torus(1), [[-1]])), Dict{Symbol, Any}(:name => "A_7", :succ => ["E8(b6)"], :dynkin => [1, 0, 0, 1, 0, 1, 1, 0], :balacarter => [1, 3, 4, 5, 6, 7, 8], :red => Z(2)), Dict{Symbol, Any}(:name => "D_7(a_2)", :succ => ["E6(a1)+A1", "A7"], :dynkin => [1, 0, 0, 1, 0, 1, 0, 1], :Au => Z(2), :balacarter => [2, 3, -4, 5, -6, 7, 8], :red => Torus(1), :AuAction => ExtendedReflectionGroup(Torus(1), [[-1]])), Dict{Symbol, Any}(:name => "E_6(a_1)", :succ => ["E6", "E6(a1)+A1"], :dynkin => [2, 0, 0, 0, 0, 2, 0, 2], :Au => Z(2), :balacarter => [1, 2, 3, -4, 5, 6], :red => CoxeterGroup("A", 2), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 2), #= none:66 =# @perm_str("(1,2)"))), Dict{Symbol, Any}(:name => "D_5{+}A_2", :succ => ["D6", "D7(a2)"], :dynkin => [0, 0, 0, 0, 2, 0, 0, 2], :Au => Z(gcd(2, p - 1)), :balacarter => [1, 2, 3, 4, 5, 7, 8], :red => Torus(1), :AuAction => ExtendedReflectionGroup(Torus(1), [[-1]])), Dict{Symbol, Any}(:name => "E_7(a_4)", :mizuno => "D_6(a_1){+}A_1", :succ => ["E6(a1)", "D5+A2"], :dynkin => [0, 0, 0, 1, 0, 1, 0, 2], :Au => Z(gcd(2, p - 1)), :balacarter => [1, -2, -3, 4, -5, -6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "A_6{+}A_1", :succ => ["D5+A2"], :dynkin => [1, 0, 0, 1, 0, 1, 0, 0], :balacarter => [1, 2, 4, 5, 6, 7, 8], :red => Z(2)), Dict{Symbol, Any}(:name => "D_6(a_1)", :succ => ["E7(a4)"], :dynkin => [0, 1, 1, 0, 0, 0, 1, 2], :Au => Z(2) * Z(gcd(2, p)), :balacarter => [2, 3, -4, 5, 6, 7], :red => Z(2) * Z(2), :AuAction => ExtendedReflectionGroup(Z(2) * Z(2), #= none:77 =# @perm_str("(1,2)"))), Dict{Symbol, Any}(:name => "A_6", :succ => ["E7(a4)", "A6+A1"], :dynkin => [2, 0, 0, 0, 0, 2, 0, 0], :Au => Z(gcd(2, p)), :balacarter => [1, 3, 4, 5, 6, 7], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "E_8(a_7)", :mizuno => "2A_4", :succ => ["D6(a1)", "A6"], :dynkin => [0, 0, 0, 0, 2, 0, 0, 0], :Au => CoxeterGroup("A", 4), :balacarter => [-1, -2, -3, -4, 5, -6, -7, -8]), Dict{Symbol, Any}(:name => "D_5{+}A_1", :succ => ["D6(a1)"], :dynkin => [1, 0, 0, 0, 1, 0, 1, 2], :Au => Z(gcd(2, p)), :balacarter => [1, 2, 3, 4, 5, 7], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "E_7(a_5)", :mizuno => "A_5{+}A_2", :succ => ["E8(a7)", "D5+A1"], :dynkin => [0, 0, 0, 1, 0, 1, 0, 0], :Au => CoxeterGroup("A", 2), :balacarter => [-1, -2, -3, 4, -5, -6, 7], :red => Z(2)), Dict{Symbol, Any}(:name => "D_5", :succ => ["D5+A1"], :dynkin => [2, 0, 0, 0, 0, 0, 2, 2], :Au => Z(gcd(2, p)), :balacarter => [1, 2, 3, 4, 5], :red => CoxeterGroup("B", 3)), Dict{Symbol, Any}(:name => "E_6(a_3){+}A_1", :mizuno => "A_5{+}2A_1", :succ => ["E7(a5)"], :dynkin => [1, 0, 0, 0, 1, 0, 1, 0], :Au => Z(2), :balacarter => [1, -2, -3, 4, -5, 6, 8], :red => Z(2)), Dict{Symbol, Any}(:name => "D_6(a_2)", :succ => ["E7(a5)"], :dynkin => [0, 1, 1, 0, 0, 0, 1, 0], :Au => Z(2), :balacarter => [2, 3, -4, 5, -6, 7], :red => Z(2) * Z(2), :AuAction => ExtendedReflectionGroup(Z(2) * Z(2), #= none:95 =# @perm_str("(1,2)"))), Dict{Symbol, Any}(:name => "E_6(a_3)", :mizuno => "(A_5{+}A_1)''", :succ => ["D5", "E6(a3)+A1"], :dynkin => [2, 0, 0, 0, 0, 0, 2, 0], :Au => Z(2), :balacarter => [1, -2, -3, 4, -5, 6], :red => CoxeterGroup("G", 2)), Dict{Symbol, Any}(:name => "A_5{+}A_1", :mizuno => "(A_5{+}A_1)'", :succ => ["E6(a3)+A1", "D6(a2)"], :dynkin => [1, 0, 0, 1, 0, 0, 0, 1], :balacarter => [1, 2, 4, 5, 6, 7], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "D_5(a_1){+}A_2", :succ => ["E6(a3)+A1", "D6(a2)"], :dynkin => [0, 0, 1, 0, 0, 1, 0, 1], :balacarter => [1, 2, 3, -4, 5, 7, 8], :red => Z(2)), Dict{Symbol, Any}(:name => "A_4{+}A_3", :succ => ["A5+A1", "D5(a1)+A2"], :dynkin => [0, 0, 0, 1, 0, 0, 1, 0], :balacarter => [1, 2, 3, 4, 6, 7, 8], :red => Z(2)), Dict{Symbol, Any}(:name => "D_4{+}A_2", :succ => ["D5(a1)+A2"], :dynkin => [0, 2, 0, 0, 0, 0, 0, 2], :Au => Z(gcd(2, p - 1)), :balacarter => [2, 3, 4, 5, 7, 8], :red => CoxeterGroup("A", 2), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 2), #= none:109 =# @perm_str("(1,2)"))), Dict{Symbol, Any}(:name => "A_5", :succ => ["E6(a3)", "A5+A1"], :dynkin => [2, 0, 0, 0, 0, 1, 0, 1], :balacarter => [1, 3, 4, 5, 6], :red => CoxeterGroup("G", 2, "A", 1)), Dict{Symbol, Any}(:name => "A_4{+}A_2{+}A_1", :succ => ["A4+A3", "D4+A2"], :dynkin => [0, 0, 1, 0, 0, 1, 0, 0], :balacarter => [1, 2, 3, 5, 6, 7, 8], :red => Z(2)), Dict{Symbol, Any}(:name => "D_5(a_1){+}A_1", :succ => ["E6(a3)", "D4+A2"], :dynkin => [0, 0, 0, 1, 0, 0, 0, 2], :balacarter => [1, 2, 3, -4, 5, 7], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "D_5(a_1)", :succ => ["D5(a1)+A1"], :dynkin => [1, 0, 0, 0, 0, 1, 0, 2], :Au => Z(2), :balacarter => [1, 2, 3, -4, 5], :red => CoxeterGroup("A", 3), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 3), #= none:118 =# @perm_str("(1,3)"))), Dict{Symbol, Any}(:name => "A_4{+}A_2", :succ => ["A5", "A4+A2+A1", "D5(a1)+A1"], :dynkin => [0, 0, 0, 0, 0, 2, 0, 0], :balacarter => [1, 2, 3, 4, 6, 7], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "A_4{+}2A_1", :succ => ["A4+A2"], :dynkin => [0, 0, 0, 1, 0, 0, 0, 1], :Au => Z(2), :balacarter => [1, 2, 3, 4, 6, 8], :red => Z(2) * Torus(1), :AuAction => ExtendedReflectionGroup(Z(2) * Torus(1), DiagonalMat(1, -1))), Dict{Symbol, Any}(:name => "D_4{+}A_1", :succ => ["D5(a1)"], :dynkin => [0, 1, 0, 0, 0, 0, 1, 2], :Au => Z(gcd(2, p)), :balacarter => [2, 3, 4, 5, 7], :red => CoxeterGroup("C", 3)), Dict{Symbol, Any}(:name => "A_4{+}A_1", :succ => ["A4+2A1", "D5(a1)"], :dynkin => [1, 0, 0, 0, 0, 1, 0, 1], :Au => Z(2), :balacarter => [1, 2, 3, 4, 6], :red => ReflectionSubgroup(CoxeterGroup("A", 2, "A", 1), [1, 2]), :AuAction => ExtendedReflectionGroup(ReflectionSubgroup(CoxeterGroup("A", 2, "A", 1), [1, 2]), #= none:130 =# @perm_str("(1,2)(3,7)(5,6)"))), Dict{Symbol, Any}(:name => "2A_3", :succ => ["A4+2A1"], :dynkin => [1, 0, 0, 0, 1, 0, 0, 0], :balacarter => [1, 3, 4, 6, 7, 8], :red => CoxeterGroup("B", 2)), Dict{Symbol, Any}(:name => "D_4", :succ => ["D4+A1"], :dynkin => [0, 0, 0, 0, 0, 0, 2, 2], :Au => Z(gcd(2, p)), :balacarter => [2, 3, 4, 5], :red => CoxeterGroup("F", 4)), Dict{Symbol, Any}(:name => "A_4", :succ => ["A4+A1"], :dynkin => [2, 0, 0, 0, 0, 0, 0, 2], :Au => Z(2), :balacarter => [1, 2, 3, 4], :red => CoxeterGroup("A", 4), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 4), #= none:137 =# @perm_str("(1,4)(2,3)"))), Dict{Symbol, Any}(:name => "D_4(a_1){+}A_2", :succ => ["A4+A1", "2A3"], :dynkin => [0, 2, 0, 0, 0, 0, 0, 0], :Au => Z(2), :balacarter => [2, 3, -4, 5, 7, 8], :red => CoxeterGroup("A", 2), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 2), #= none:140 =# @perm_str("(1,2)"))), Dict{Symbol, Any}(:name => "A_3{+}A_2{+}A_1", :succ => ["D4+A1", "D4(a1)+A2"], :dynkin => [0, 0, 0, 1, 0, 0, 0, 0], :balacarter => [1, 2, 3, 5, 6, 7], :red => Z(2) * Z(2)), Dict{Symbol, Any}(:name => "A_3{+}A_2", :succ => ["A4", "A3+A2+A1"], :dynkin => [1, 0, 0, 0, 0, 1, 0, 0], :Au => Z(gcd(2, p - 1)), :balacarter => [1, 3, 4, 6, 7], :red => CoxeterGroup("B", 2) * Torus(1), :AuAction => ExtendedReflectionGroup(CoxeterGroup("B", 2) * Torus(1), DiagonalMat(1, 1, -1))), Dict{Symbol, Any}(:name => "D_4(a_1){+}A_1", :succ => ["A3+A2"], :dynkin => [0, 1, 0, 0, 0, 0, 1, 0], :Au => CoxeterGroup("A", 2), :balacarter => [2, 3, -4, 5, 7], :red => Z(2) * Z(2) * Z(2), :AuAction => ExtendedReflectionGroup(Z(2) * Z(2) * Z(2), [#= none:149 =# @perm_str("(1,2)"), #= none:149 =# @perm_str("(2,3)")])), Dict{Symbol, Any}(:name => "A_3{+}2A_1", :succ => ["D4(a1)+A1"], :dynkin => [0, 0, 1, 0, 0, 0, 0, 1], :balacarter => [1, 2, 4, 5, 7], :red => CoxeterGroup("B", 2, "A", 1)), Dict{Symbol, Any}(:name => "D_4(a_1)", :succ => ["D4", "D4(a1)+A1"], :dynkin => [0, 0, 0, 0, 0, 0, 2, 0], :Au => CoxeterGroup("A", 2), :balacarter => [2, 3, -4, 5], :red => CoxeterGroup("D", 4), :AuAction => ExtendedReflectionGroup(CoxeterGroup("D", 4), [#= none:154 =# @perm_str("(1,2)"), #= none:154 =# @perm_str("(2,4)")])), Dict{Symbol, Any}(:name => "2A_2{+}2A_1", :succ => ["A3+2A1"], :dynkin => [0, 0, 0, 0, 1, 0, 0, 0], :balacarter => [1, 2, 3, 5, 6, 8], :red => CoxeterGroup("B", 2)), Dict{Symbol, Any}(:name => "A_3{+}A_1", :succ => ["A3+2A1", "D4(a1)"], :dynkin => [0, 0, 0, 0, 0, 1, 0, 1], :balacarter => [1, 2, 4, 5], :red => CoxeterGroup("B", 3, "A", 1)), Dict{Symbol, Any}(:name => "2A_2{+}A_1", :succ => ["2A2+2A1", "A3+A1"], :dynkin => [1, 0, 0, 0, 0, 0, 1, 0], :balacarter => [1, 2, 3, 5, 6], :red => CoxeterGroup("G", 2, "A", 1)), Dict{Symbol, Any}(:name => "A_3", :succ => ["D4(a1)", "A3+A1"], :dynkin => [1, 0, 0, 0, 0, 0, 0, 2], :balacarter => [1, 3, 4], :red => CoxeterGroup("B", 5)), Dict{Symbol, Any}(:name => "2A_2", :succ => ["2A2+A1"], :dynkin => [2, 0, 0, 0, 0, 0, 0, 0], :Au => Z(2), :balacarter => [1, 3, 5, 6], :red => CoxeterGroup("G", 2, "G", 2), :AuAction => ExtendedReflectionGroup(CoxeterGroup("G", 2, "G", 2), #= none:165 =# @perm_str("(1,3)(2,4)"))), Dict{Symbol, Any}(:name => "A_2{+}3A_1", :succ => ["2A2"], :dynkin => [0, 0, 1, 0, 0, 0, 0, 0], :balacarter => [1, 2, 3, 5, 7], :red => CoxeterGroup("G", 2, "A", 1)), Dict{Symbol, Any}(:name => "A_2{+}2A_1", :succ => ["A3", "A2+3A1"], :dynkin => [0, 0, 0, 0, 0, 1, 0, 0], :balacarter => [1, 2, 3, 5], :red => CoxeterGroup("B", 3, "A", 1)), Dict{Symbol, Any}(:name => "A_2{+}A_1", :succ => ["A2+2A1"], :dynkin => [1, 0, 0, 0, 0, 0, 0, 1], :Au => Z(2), :balacarter => [1, 2, 3], :red => CoxeterGroup("A", 5), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 5), #= none:172 =# @perm_str("(1,5)(2,4)"))), Dict{Symbol, Any}(:name => "4A_1", :succ => ["A2+A1"], :dynkin => [0, 1, 0, 0, 0, 0, 0, 0], :balacarter => [1, 2, 5, 7], :red => CoxeterGroup("C", 4)), Dict{Symbol, Any}(:name => "A_2", :succ => ["A2+A1"], :dynkin => [0, 0, 0, 0, 0, 0, 0, 2], :Au => Z(2), :balacarter => [1, 3], :red => CoxeterGroup("E", 6), :AuAction => ExtendedReflectionGroup(CoxeterGroup("E", 6), #= none:177 =# @perm_str("(1,6)(3,5)"))), Dict{Symbol, Any}(:name => "3A_1", :succ => ["4A1", "A2"], :dynkin => [0, 0, 0, 0, 0, 0, 1, 0], :balacarter => [1, 2, 5], :red => CoxeterGroup("F", 4, "A", 1)), Dict{Symbol, Any}(:name => "2A_1", :succ => ["3A1"], :dynkin => [1, 0, 0, 0, 0, 0, 0, 0], :balacarter => [1, 2], :red => CoxeterGroup("B", 6)), Dict{Symbol, Any}(:name => "A_1", :succ => ["2A1"], :dynkin => [0, 0, 0, 0, 0, 0, 0, 1], :balacarter => [1], :red => CoxeterGroup("E", 7)), Dict{Symbol, Any}(:name => "1", :succ => ["A1"], :dynkin => [0, 0, 0, 0, 0, 0, 0, 0], :balacarter => [], :red => CoxeterGroup("E", 8))], :springerSeries => [Dict{Symbol, Any}(:relgroup => CoxeterGroup("E", 8), :levi => "", :Z => [], :locsys => [[1, 1], [70, 1], [4, 1], [66, 1], [3, 1], [68, 1], [29, 2], [7, 1], [65, 1], [5, 1], [67, 1], [39, 1], [18, 2], [57, 1], [6, 2], [64, 2], [38, 1], [9, 1], [61, 1], [13, 1], [54, 1], [16, 1], [49, 1], [8, 1], [60, 1], [33, 1], [25, 1], [46, 1], [9, 2], [61, 2], [29, 3], [24, 1], [48, 1], [29, 4], [19, 1], [53, 1], [15, 1], [55, 1], [32, 1], [12, 1], [58, 1], [34, 1], [13, 3], [54, 3], [13, 2], [54, 2], [33, 2], [23, 1], [43, 1], [34, 2], [18, 3], [51, 2], [29, 7], [17, 2], [50, 2], [29, 5], [26, 1], [41, 1], [29, 6], [30, 1], [40, 1], [20, 1], [47, 2], [22, 2], [45, 2], [25, 2], [42, 1], [2, 1], [69, 1], [10, 1], [56, 1], [4, 2], [66, 2], [6, 1], [64, 1], [31, 1], [11, 1], [62, 1], [14, 1], [59, 1], [7, 2], [63, 1], [37, 1], [18, 1], [51, 1], [10, 2], [56, 2], [36, 1], [17, 1], [50, 1], [21, 1], [52, 1], [10, 3], [56, 3], [27, 1], [35, 1], [23, 2], [43, 2], [31, 2], [15, 2], [53, 2], [22, 1], [45, 1], [31, 3], [20, 2], [47, 1], [28, 1], [39, 2], [24, 2], [44, 1], [27, 2], [35, 2]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[29, 1]], :parameter => [165])], :operations => UnipotentClassesOps)
        if p == 2
            uc[:classes] = Append(uc[:classes], [Dict{Symbol, Any}(:name => "(D_7(a_1))_2", :succ => ["D7(a1)"], :red => Z(2), :dimBu => 10, :Au => Z(2)), Dict{Symbol, Any}(:name => "(D_5{+}A_2)_2", :succ => ["D5+A2"], :red => Z(2), :dimBu => 14, :Au => Z(2)), Dict{Symbol, Any}(:name => "(D_4{+}A_2)_2", :succ => ["D4+A2"], :red => CoxeterGroup("G", 2), :dimBu => 24, :Au => Z(2)), Dict{Symbol, Any}(:name => "(A_3{+}A_2)_2", :succ => ["A3+A2"], :red => CoxeterGroup("A", 1, "B", 2), :dimBu => 32)])
            for c = ["D_6", "A_7"]
                push!((class(c))[:succ], "(D7(a1))2")
            end
            for c = ["E_8(a_7)", "D_5{+}A_1"]
                push!((class(c))[:succ], "(D5+A2)2")
            end
            for c = ["D_4{+}A_1", "2A_3"]
                push!((class(c))[:succ], "(D4+A2)2")
            end
            push!((class("A_3{+}2A_1"))[:succ], "(A3+A2)2")
            c = class("D_6(a_1)")
            c[:AuAction] = ExtendedReflectionGroup(Z(2) * Z(2), [#= none:220 =# @perm_str("(1,2)"), #= none:220 =# @perm_str("(1,2)")])
            c = class("D_7(a_1)")
            c[:red] = Z(1)
            c[:dimBu] = 9
            delete!(c, :dynkin)
            delete!(c, :AuAction)
            c = class("D_5{+}A_2")
            c[:red] = Z(1)
            c[:dimBu] = 13
            delete!(c, :dynkin)
            delete!(c, :AuAction)
            c = class("A_6")
            c[:red] = Z(2) * Torus(1)
            c[:dimBu] = 15
            delete!(c, :dynkin)
            c[:AuAction] = ExtendedReflectionGroup(Z(2) * Torus(1), DiagonalMat(1, -1))
            c = class("D_4{+}A_2")
            c[:red] = Z(2)
            c[:dimBu] = 21
            delete!(c, :dynkin)
            delete!(c, :AuAction)
            c = class("A_3{+}A_2")
            c[:red] = CoxeterGroup("B", 2)
            c[:dimBu] = 31
            delete!(c, :dynkin)
            delete!(c, :AuAction)
            ((uc[:springerSeries])[1])[:locsys] = [[1, 1], [70, 1], [4, 1], [66, 1], [3, 2], [68, 1], [29, 2], [9, 1], [65, 1], [5, 1], [67, 1], [73, 2], [18, 2], [57, 1], [6, 2], [64, 2], [38, 1], [9, 2], [61, 1], [13, 1], [54, 1], [16, 2], [49, 2], [8, 2], [60, 1], [33, 1], [28, 1], [46, 2], [9, 4], [61, 2], [29, 3], [72, 2], [48, 1], [29, 4], [19, 2], [74, 1], [71, 2], [55, 1], [32, 2], [12, 2], [58, 1], [34, 1], [13, 3], [54, 3], [13, 2], [54, 2], [33, 2], [23, 1], [43, 1], [34, 2], [18, 3], [51, 2], [29, 7], [17, 2], [50, 2], [29, 5], [26, 1], [41, 1], [29, 6], [30, 2], [40, 1], [20, 1], [47, 2], [22, 2], [45, 2], [25, 1], [42, 1], [2, 1], [69, 1], [10, 2], [56, 1], [4, 4], [66, 2], [6, 1], [64, 1], [31, 1], [11, 2], [62, 1], [14, 2], [59, 1], [7, 2], [63, 1], [37, 1], [18, 1], [51, 1], [10, 4], [56, 2], [36, 1], [17, 1], [50, 1], [21, 1], [52, 1], [10, 6], [56, 3], [27, 1], [35, 1], [23, 2], [43, 2], [31, 2], [15, 1], [53, 1], [22, 1], [45, 1], [31, 3], [20, 2], [47, 1], [28, 2], [39, 1], [24, 1], [44, 1], [27, 4], [35, 2]]
            l = [["E8", 3, "1_1"], ["E8(a1)", 3, "2_1"], ["E8(a2)", 1, "4_2"], ["E7+A1", 2, "8_1"], ["E7+A1", 3, "1_2"], ["E7", 3, "9_1"], ["E7(a1)+A1", 1, "4_3"], ["E7(a1)", 1, "9_2"], ["D8(a1)", 3, "8_3"], ["D7", 1, "2_3"], ["E7(a2)+A1", 5, "12"], ["E7(a2)+A1", 3, "6_2"], ["E7(a2)", 1, "16"], ["E6+A1", 1, "6_1"], ["(D7(a1))2", 1, "4_1"], ["E6", 1, "8_4"], ["D6", 1, "9_3"], ["(D5+A2)2", 1, "4_4"], ["D6(a1)", 2, "9_4"], ["D6(a1)", 3, "2_4"], ["D5+A1", 1, "8_2"], ["D5", 1, "4_5"], ["(D4+A2)2", 1, "1_3"], ["D4+A1", 1, "2_2"], ["D4", 1, "1_4"]]
            push!(uc[:springerSeries], Dict{Symbol, Any}(:relgroup => CoxeterGroup("F", 4), :levi => 2:5, :Z => [], :locsys => map(function (i,)
                                local s
                                s = PositionProperty(l, (x->begin
                                                x[3] == (((chevieget(:F4, :CharInfo))())[:kondo])[i]
                                            end))
                                return [PositionProperty(uc[:classes], (i->begin
                                                    (UnipotentClassOps[:Name])(i, Dict{Symbol, Any}(:mizuno => true)) == (l[s])[1]
                                                end)), (l[s])[2]]
                            end, 1:length(l))))
            uc[:springerSeries] = Append(uc[:springerSeries], [Dict{Symbol, Any}(:relgroup => CoxeterGroup("A", 1), :levi => 1:7, :Z => [], :locsys => [[5, 2], [1, 2]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup("A", 1), :levi => 1:7, :Z => [], :locsys => [[5, 4], [1, 4]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[2, 2]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[2, 4]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[9, 5]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[10, 1]])])
        elseif p == 3
            push!(uc[:classes], Dict{Symbol, Any}(:name => "(A_7)_3", :succ => ["A7"], :red => Z(2), :dimBu => 12))
            push!(((uc[:classes])[26])[:succ], "(A7)3")
            c = class("A_7")
            c[:red] = Z(1)
            c[:dimBu] = 11
            delete!(c, :dynkin)
            uc[:springerSeries] = Append(uc[:springerSeries], [Dict{Symbol, Any}(:relgroup => CoxeterGroup("G", 2), :levi => 1:6, :Z => [], :locsys => [[1, 2], [16, 2], [14, 2], [2, 2], [4, 5], [5, 2]], :warning => "As conjectured by Lusztig, Arxiv 1608[:02223] conjecture 6[:2]"), Dict{Symbol, Any}(:relgroup => CoxeterGroup("G", 2), :levi => 1:6, :Z => [], :locsys => [[1, 3], [16, 3], [14, 3], [2, 3], [4, 6], [5, 3]], :warning => "As conjectured by Lusztig, Arxiv 1608[:02223] conjecture 6[:2]"), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[4, 2]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[4, 3]])])
            ((((uc[:springerSeries])[1])[:locsys])[72])[2] = 4
            (((uc[:springerSeries])[1])[:locsys])[[13, 51]] = [[71, 1], [18, 2]]
        elseif p == 5
            uc[:springerSeries] = Append(uc[:springerSeries], [Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[1, 2]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[1, 3]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[1, 4]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => 1:8, :Z => [], :locsys => [[1, 5]])])
        end
        uc[:orderClasses] = map((c->begin
                        map((n->begin
                                    PositionProperty(uc[:classes], (c->begin
                                                (UnipotentClassOps[:Name])(c) == n
                                            end))
                                end), c[:succ])
                    end), uc[:classes])
        for c = uc[:classes]
            delete!(c, :succ)
            if !(haskey(c, :red))
                c[:red] = Z(1)
            end
            if !(haskey(c, :Au))
                c[:Au] = Z(1)
            end
            if !(haskey(c, :AuAction))
                c[:AuAction] = ExtendedReflectionGroup(c[:red], map((x->begin
                                    IdentityMat((c[:red])[:rank])
                                end), (c[:Au])[:generators]))
            end
        end
        return uc
    end)
chevieset(:E8, :KLeftCellRepresentatives, [Dict{Symbol, Any}(:character => [1], :reps => [], :duflo => [1, 2, 3, 4, 5, 6, 7, 8]), Dict{Symbol, Any}(:character => [68], :reps => [], :duflo => [1, 2, 3, 4, 5, 6, 15, 128]), Dict{Symbol, Any}(:character => [5], :reps => [], :duflo => [47, 3, 2, 4, 5, 6, 7, 194]), Dict{Symbol, Any}(:character => [72, 3], :reps => [[43, 174, 156, 60, 136, 24, 6, 7]], :duflo => [163, 54, 3, 4, 5, 6, 7, 159]), Dict{Symbol, Any}(:character => [72, 10], :reps => [[6, 2, 5, 4, 84, 199, 218, 101], [1, 2, 3, 4, 5, 6, 7, 239]], :duflo => [6, 2, 5, 4, 3, 1, 74, 240]), Dict{Symbol, Any}(:character => [74, 15], :reps => [[23, 176, 136, 77, 192, 78, 193, 79]], :duflo => [163, 9, 50, 4, 5, 6, 7, 199]), Dict{Symbol, Any}(:character => [15, 8], :reps => [[152, 5, 121, 16, 2, 28, 127, 15], [152, 2, 44, 150, 5, 53, 127, 15]], :duflo => [121, 5, 37, 138, 2, 28, 127, 15]), Dict{Symbol, Any}(:character => [81], :reps => [[96, 211, 212, 95, 210, 94, 9, 121]], :duflo => [194, 81, 7, 6, 5, 4, 3, 234]), Dict{Symbol, Any}(:character => [24], :reps => [], :duflo => [121, 2, 9, 4, 5, 6, 7, 239]), Dict{Symbol, Any}(:character => [29, 18], :reps => [[143, 197, 30, 83, 198, 84, 159, 162], [107, 212, 211, 95, 210, 94, 157, 44]], :duflo => [182, 2, 5, 4, 3, 73, 7, 224]), Dict{Symbol, Any}(:character => [77, 29], :reps => [[190, 5, 174, 107, 191, 156, 43, 34], [70, 187, 184, 72, 185, 91, 194, 96], [102, 220, 219, 103, 203, 87, 202, 97], [222, 100, 3, 4, 5, 23, 221, 8]], :duflo => [190, 67, 4, 3, 34, 31, 227, 23]), Dict{Symbol, Any}(:character => [93, 79, 40], :reps => [[5, 162, 4, 100, 186, 163, 195, 104], [107, 67, 185, 179, 188, 108, 4, 2], [107, 187, 185, 181, 108, 184, 70, 2], [47, 3, 2, 4, 5, 6, 238, 97], [6, 2, 5, 4, 3, 1, 221, 8]], :duflo => [66, 5, 3, 4, 2, 47, 240, 68]), Dict{Symbol, Any}(:character => [93, 86, 40], :reps => [[163, 4, 172, 90, 162, 171, 107, 224], [107, 92, 211, 144, 188, 90, 4, 3], [211, 212, 151, 109, 150, 188, 94, 3], [222, 5, 3, 4, 2, 39, 68, 238], [164, 5, 3, 4, 2, 31, 7, 239]], :duflo => [189, 3, 2, 4, 5, 6, 104, 240]), Dict{Symbol, Any}(:character => [43, 37, 13], :reps => [[159, 44, 46, 150, 67, 135, 165, 175], [81, 166, 164, 156, 47, 49, 52, 165], [81, 166, 164, 156, 88, 169, 89, 165], [217, 14, 116, 223, 20, 95, 212, 47], [223, 8, 107, 221, 52, 102, 215, 2]], :duflo => [201, 11, 91, 208, 36, 97, 209, 55]), Dict{Symbol, Any}(:character => [45, 43, 37], :reps => [[77, 138, 144, 142, 29, 23, 28, 127], [130, 136, 163, 77, 132, 174, 79, 127], [144, 138, 176, 81, 143, 149, 79, 127], [197, 9, 81, 150, 5, 53, 127, 193], [144, 23, 72, 185, 11, 79, 127, 214]], :duflo => [176, 18, 77, 157, 23, 28, 127, 193]), Dict{Symbol, Any}(:character => [100], :reps => [[71, 55, 166, 139, 146, 69, 137, 50], [71, 175, 166, 75, 164, 146, 90, 170], [166, 175, 147, 93, 164, 146, 90, 170]], :duflo => [46, 175, 191, 93, 189, 26, 24, 50]), Dict{Symbol, Any}(:character => [91, 51], :reps => [[34, 160, 31, 121, 155, 70, 132, 36], [34, 160, 31, 121, 155, 88, 142, 132], [151, 160, 154, 89, 157, 155, 88, 156], [151, 79, 83, 223, 89, 157, 155, 58], [99, 183, 179, 142, 47, 61, 155, 58], [179, 183, 176, 110, 181, 167, 107, 178]], :duflo => [131, 39, 49, 173, 45, 126, 132, 36]), Dict{Symbol, Any}(:character => [89, 54], :reps => [[109, 136, 166, 188, 103, 148, 201, 102]], :duflo => [155, 46, 3, 4, 5, 6, 151, 232]), Dict{Symbol, Any}(:character => [105, 62], :reps => [[144, 215, 169, 119, 191, 156, 143, 65], [100, 150, 149, 196, 111, 180, 175, 102]], :duflo => [217, 2, 71, 4, 5, 65, 240, 73]), Dict{Symbol, Any}(:character => [93, 86, 86, 70], :reps => [[163, 148, 84, 129, 162, 60, 5, 6], [84, 148, 166, 128, 60, 136, 24, 6], [166, 148, 163, 88, 136, 162, 67, 6], [204, 143, 88, 148, 128, 42, 24, 6]], :duflo => [204, 2, 74, 16, 5, 6, 186, 128]), Dict{Symbol, Any}(:character => [102, 64], :reps => [[164, 174, 154, 113, 172, 176, 159, 92], [65, 169, 142, 150, 113, 165, 182, 159], [193, 185, 103, 154, 183, 117, 182, 159]], :duflo => [221, 22, 116, 223, 20, 95, 182, 159]), Dict{Symbol, Any}(:character => [45, 45, 43, 20], :reps => [[166, 136, 91, 170, 148, 92, 187, 73], [91, 136, 176, 141, 92, 192, 78, 193], [176, 53, 129, 154, 95, 212, 96, 193], [176, 136, 166, 104, 192, 148, 96, 193]], :duflo => [144, 46, 5, 4, 3, 73, 216, 201]), Dict{Symbol, Any}(:character => [22], :reps => [], :duflo => [6, 2, 5, 4, 3, 1, 217, 128]), Dict{Symbol, Any}(:character => [64, 32], :reps => [[70, 187, 184, 109, 151, 154, 163, 143], [221, 2, 8, 70, 6, 5, 228, 3], [220, 187, 103, 169, 151, 114, 163, 143]], :duflo => [235, 43, 41, 37, 6, 5, 226, 42]), Dict{Symbol, Any}(:character => [97, 27], :reps => [[111, 143, 144, 188, 127, 84, 18, 11], [152, 2, 44, 150, 5, 53, 127, 238]], :duflo => [121, 5, 37, 138, 2, 28, 127, 238]), Dict{Symbol, Any}(:character => [109], :reps => [[99, 165, 179, 170, 115, 164, 134, 207], [201, 220, 148, 119, 184, 165, 163, 87]], :duflo => [225, 21, 3, 4, 38, 62, 207, 195]), Dict{Symbol, Any}(:character => [84, 51], :reps => [[149, 150, 92, 155, 180, 107, 151, 154], [38, 149, 150, 95, 161, 180, 202, 114], [194, 195, 158, 113, 187, 196, 114, 185]], :duflo => [233, 41, 38, 4, 29, 44, 234, 82]), Dict{Symbol, Any}(:character => [57], :reps => [[213, 132, 98, 198, 130, 113, 150, 208]], :duflo => [229, 75, 71, 213, 48, 146, 86, 28]), Dict{Symbol, Any}(:character => [100], :reps => [[4, 179, 72, 128, 178, 107, 151, 194], [109, 203, 220, 103, 173, 182, 102, 155], [220, 203, 144, 111, 173, 182, 102, 155]], :duflo => [222, 100, 3, 4, 5, 23, 217, 128]), Dict{Symbol, Any}(:character => [111, 60], :reps => [[114, 153, 183, 127, 193, 103, 30, 143], [168, 2, 5, 4, 3, 164, 194, 120]], :duflo => [164, 2, 3, 4, 5, 168, 127, 119]), Dict{Symbol, Any}(:character => [107], :reps => [[108, 46, 175, 129, 146, 135, 81, 137], [86, 147, 128, 154, 164, 102, 204, 109]], :duflo => [55, 220, 184, 115, 218, 43, 52, 187]), Dict{Symbol, Any}(:character => [81], :reps => [[32, 144, 138, 59, 148, 143, 45, 15]], :duflo => [190, 9, 75, 166, 14, 52, 165, 60]), Dict{Symbol, Any}(:character => [104, 88, 83, 53, 50, 47, 17], :reps => [[65, 126, 131, 150, 156, 111, 159, 130], [132, 73, 77, 128, 159, 130, 147, 150], [107, 131, 126, 179, 128, 94, 130, 177], [186, 104, 131, 150, 142, 132, 94, 130], [66, 174, 126, 132, 178, 88, 69, 130], [65, 159, 89, 152, 126, 150, 156, 87], [185, 159, 116, 152, 126, 150, 156, 87], [66, 174, 126, 132, 178, 116, 130, 177], [116, 146, 152, 159, 128, 87, 147, 150], [233, 40, 66, 196, 70, 132, 87, 177], [89, 86, 152, 126, 150, 156, 178, 114], [152, 65, 159, 128, 200, 118, 147, 150], [152, 113, 126, 179, 128, 178, 114, 177], [186, 160, 113, 150, 142, 132, 178, 114], [81, 179, 174, 131, 146, 80, 36, 57], [113, 126, 174, 152, 159, 114, 177, 156], [81, 179, 174, 131, 146, 80, 87, 177], [218, 82, 32, 209, 80, 178, 104, 150], [81, 179, 174, 131, 146, 118, 177, 156], [237, 78, 81, 206, 40, 131, 88, 156], [98, 132, 128, 191, 130, 113, 150, 208], [32, 147, 109, 179, 128, 178, 146, 103], [152, 147, 117, 179, 128, 178, 146, 103], [229, 81, 78, 218, 48, 146, 103, 156], [82, 152, 179, 126, 192, 90, 58, 36], [117, 174, 179, 147, 130, 103, 156, 178], [82, 152, 179, 126, 192, 90, 88, 156], [82, 152, 179, 126, 192, 120, 156, 178], [230, 79, 82, 229, 78, 126, 80, 178], [225, 75, 56, 219, 79, 174, 90, 146]], :duflo => [227, 70, 65, 197, 67, 150, 69, 130]), Dict{Symbol, Any}(:character => [104, 104, 99, 88, 59, 56, 53, 50, 47, 42], :reps => [[83, 178, 142, 132, 158, 66, 81, 130], [46, 151, 94, 138, 142, 164, 148, 92], [203, 132, 127, 158, 113, 130, 149, 164], [83, 178, 142, 132, 158, 113, 130, 192], [113, 176, 138, 151, 127, 92, 149, 164], [63, 138, 91, 178, 128, 148, 158, 109], [138, 166, 151, 176, 86, 92, 149, 164], [183, 138, 116, 178, 128, 148, 158, 109], [142, 127, 132, 171, 116, 130, 192, 186], [116, 142, 178, 138, 151, 109, 192, 148], [178, 183, 138, 142, 56, 38, 28, 72], [138, 166, 151, 176, 120, 149, 164, 148], [2, 171, 88, 127, 128, 186, 152, 117], [87, 95, 163, 138, 129, 148, 206, 116], [178, 183, 138, 142, 56, 38, 92, 192], [95, 172, 166, 163, 130, 86, 28, 44], [163, 109, 138, 151, 127, 206, 116, 164], [95, 172, 166, 163, 130, 86, 70, 164], [178, 183, 138, 142, 56, 109, 192, 148], [109, 138, 166, 163, 165, 116, 164, 148], [91, 156, 127, 171, 138, 117, 192, 186], [58, 186, 129, 152, 142, 83, 95, 212], [95, 172, 166, 163, 130, 116, 164, 148], [75, 132, 127, 171, 162, 120, 192, 186], [95, 132, 127, 198, 130, 116, 164, 186], [178, 183, 138, 142, 120, 192, 148, 158], [240, 64, 91, 195, 18, 76, 148, 158], [18, 149, 114, 183, 127, 158, 176, 103], [11, 182, 109, 151, 127, 189, 142, 103], [87, 138, 183, 142, 184, 102, 38, 28], [117, 178, 183, 149, 130, 103, 148, 158], [166, 151, 163, 138, 117, 164, 148, 206], [237, 58, 95, 204, 43, 66, 148, 206], [87, 138, 183, 142, 184, 102, 66, 148], [234, 46, 102, 215, 29, 89, 148, 206], [87, 189, 132, 142, 184, 95, 76, 186], [87, 138, 183, 142, 184, 119, 148, 158], [106, 169, 186, 128, 184, 84, 63, 2], [114, 166, 151, 152, 149, 106, 148, 206], [106, 169, 186, 128, 184, 114, 183, 69], [183, 138, 149, 178, 119, 148, 158, 176], [239, 20, 114, 207, 29, 69, 158, 176], [63, 163, 151, 138, 178, 119, 148, 206], [103, 202, 200, 128, 127, 84, 18, 11], [106, 196, 154, 128, 184, 115, 158, 152], [238, 2, 106, 215, 72, 49, 152, 142], [96, 183, 163, 154, 129, 58, 90, 206], [230, 31, 89, 186, 14, 90, 206, 184], [238, 2, 89, 154, 14, 62, 176, 184], [232, 11, 80, 196, 28, 78, 142, 184], [218, 5, 93, 205, 2, 96, 194, 129]], :duflo => [240, 5, 94, 138, 2, 70, 164, 186]), Dict{Symbol, Any}(:character => [97, 48], :reps => [[100, 150, 149, 169, 151, 111, 180, 65]], :duflo => [185, 29, 3, 4, 30, 6, 238, 112]), Dict{Symbol, Any}(:character => [105, 62], :reps => [[24, 185, 2, 88, 127, 165, 149, 152], [121, 5, 101, 210, 2, 96, 204, 209]], :duflo => [188, 2, 106, 215, 72, 49, 152, 227]), Dict{Symbol, Any}(:character => [66], :reps => [[115, 190, 191, 128, 154, 103, 165, 52]], :duflo => [202, 38, 5, 4, 3, 34, 195, 188]), Dict{Symbol, Any}(:character => [104, 99, 83, 59, 53, 50, 47, 26], :reps => [[131, 126, 166, 132, 111, 167, 130, 177], [193, 104, 131, 150, 134, 132, 89, 130], [73, 166, 126, 132, 185, 88, 69, 130], [58, 167, 94, 152, 126, 150, 148, 82], [178, 167, 116, 152, 126, 150, 148, 82], [107, 131, 126, 150, 156, 94, 130, 202], [116, 146, 152, 129, 156, 87, 147, 179], [126, 166, 187, 131, 116, 130, 177, 148], [94, 80, 152, 126, 150, 148, 185, 114], [193, 160, 113, 150, 134, 132, 185, 114], [195, 94, 126, 132, 174, 131, 88, 57], [75, 187, 166, 131, 146, 86, 28, 57], [113, 126, 166, 152, 167, 114, 177, 148], [152, 178, 167, 146, 118, 147, 150, 148], [195, 94, 126, 132, 174, 131, 114, 177], [193, 80, 94, 130, 147, 150, 148, 185], [75, 187, 166, 131, 146, 86, 82, 177], [99, 150, 199, 131, 146, 80, 87, 202], [237, 71, 75, 200, 40, 131, 65, 28], [166, 187, 152, 126, 118, 177, 148, 185], [237, 96, 99, 223, 40, 131, 58, 8], [93, 109, 147, 166, 132, 185, 146, 103], [99, 134, 156, 150, 160, 118, 202, 185], [147, 117, 166, 152, 167, 146, 103, 148], [195, 191, 117, 132, 174, 131, 146, 103], [147, 117, 199, 152, 129, 146, 80, 8], [87, 152, 187, 126, 184, 85, 65, 28], [117, 166, 187, 147, 130, 103, 148, 185], [229, 99, 96, 230, 48, 146, 80, 8], [87, 152, 187, 126, 184, 85, 88, 148], [57, 152, 150, 126, 212, 106, 58, 8], [96, 169, 156, 129, 168, 117, 179, 206], [230, 79, 87, 229, 71, 126, 26, 65], [187, 152, 147, 166, 119, 148, 185, 146], [119, 187, 195, 147, 98, 176, 129, 146], [93, 46, 169, 150, 126, 212, 120, 185], [235, 56, 93, 230, 96, 134, 7, 26], [225, 81, 49, 219, 79, 166, 64, 26], [198, 85, 68, 232, 81, 187, 79, 19]], :duflo => [233, 40, 73, 203, 77, 132, 28, 57]), Dict{Symbol, Any}(:character => [39], :reps => [], :duflo => [201, 3, 2, 4, 5, 168, 127, 74]), Dict{Symbol, Any}(:character => [54, 35], :reps => [[71, 75, 141, 143, 139, 146, 52, 50], [32, 200, 164, 97, 202, 27, 7, 90]], :duflo => [1, 202, 157, 89, 200, 51, 7, 90]), Dict{Symbol, Any}(:character => [108], :reps => [[134, 131, 80, 122, 140, 129, 175, 108], [114, 166, 164, 140, 170, 112, 169, 125]], :duflo => [69, 131, 200, 76, 140, 184, 55, 78]), Dict{Symbol, Any}(:character => [112, 61], :reps => [[112, 92, 211, 125, 124, 123, 193, 101], [44, 122, 123, 124, 125, 48, 7, 239]], :duflo => [48, 122, 125, 124, 123, 44, 74, 240]), Dict{Symbol, Any}(:character => [58], :reps => [[163, 140, 114, 164, 134, 125, 206, 112]], :duflo => [97, 140, 234, 96, 134, 210, 86, 55]), Dict{Symbol, Any}(:character => [107], :reps => [[80, 152, 146, 129, 148, 111, 180, 147], [191, 207, 152, 110, 148, 185, 146, 113]], :duflo => [191, 88, 61, 230, 87, 193, 86, 59]), Dict{Symbol, Any}(:character => [100], :reps => [[77, 138, 144, 142, 79, 148, 143, 45], [99, 159, 154, 128, 22, 30, 143, 45], [154, 159, 197, 104, 150, 142, 73, 165]], :duflo => [219, 2, 104, 166, 14, 52, 165, 149]), Dict{Symbol, Any}(:character => [110], :reps => [[122, 128, 112, 169, 125, 126, 157, 123], [112, 82, 200, 125, 124, 123, 193, 101]], :duflo => [62, 122, 125, 124, 123, 193, 118, 181]), Dict{Symbol, Any}(:character => [104, 104, 99, 99, 59, 59, 56, 56, 53, 50, 42, 34, 31], :reps => [[156, 136, 103, 146, 127, 147, 174, 109], [103, 161, 146, 136, 149, 109, 179, 147], [165, 105, 127, 153, 156, 129, 109, 202], [45, 156, 146, 129, 169, 119, 179, 147], [161, 173, 105, 147, 135, 146, 129, 109], [83, 153, 163, 121, 169, 58, 42, 82], [83, 153, 163, 121, 169, 58, 106, 202], [105, 127, 163, 146, 136, 111, 202, 174], [146, 156, 136, 161, 119, 179, 147, 174], [223, 85, 111, 172, 127, 147, 143, 149], [83, 153, 163, 121, 169, 119, 202, 162], [83, 170, 147, 121, 169, 119, 212, 146], [184, 111, 146, 136, 149, 169, 105, 147], [163, 51, 146, 136, 161, 119, 202, 174], [163, 153, 165, 127, 119, 202, 162, 129], [92, 136, 156, 161, 172, 89, 78, 147], [165, 179, 118, 153, 156, 129, 169, 91], [111, 146, 156, 129, 175, 108, 147, 211], [147, 86, 135, 146, 136, 161, 119, 229], [65, 162, 143, 147, 127, 41, 111, 229], [92, 136, 156, 161, 172, 118, 147, 174], [163, 16, 3, 42, 82, 238, 127, 49], [105, 177, 203, 127, 146, 89, 29, 23], [85, 165, 153, 127, 207, 110, 9, 42], [205, 111, 163, 121, 160, 127, 91, 162], [85, 165, 153, 127, 207, 110, 54, 162], [156, 70, 129, 175, 165, 118, 147, 211], [114, 153, 203, 127, 172, 113, 143, 149], [108, 203, 153, 127, 172, 113, 162, 129], [118, 163, 153, 121, 175, 95, 162, 178], [156, 136, 184, 146, 118, 147, 174, 169], [105, 207, 171, 127, 146, 85, 60, 174], [97, 146, 171, 127, 207, 108, 60, 174], [85, 165, 153, 127, 207, 120, 162, 129], [184, 153, 114, 136, 149, 169, 172, 113], [153, 209, 121, 163, 83, 95, 162, 178], [114, 156, 136, 153, 179, 113, 174, 169], [153, 165, 179, 163, 120, 162, 129, 169], [225, 156, 108, 177, 127, 146, 113, 174], [153, 114, 156, 129, 175, 165, 113, 211], [86, 205, 165, 135, 147, 87, 49, 9], [221, 42, 127, 146, 163, 105, 5, 4], [93, 129, 190, 146, 163, 83, 95, 211], [51, 184, 136, 146, 163, 120, 174, 169], [86, 205, 165, 135, 147, 87, 58, 129], [82, 163, 42, 146, 127, 221, 115, 4], [205, 170, 113, 121, 160, 127, 207, 114], [143, 3, 2, 4, 109, 238, 135, 8], [153, 55, 40, 9, 42, 233, 163, 87], [113, 153, 165, 135, 202, 114, 129, 169], [180, 95, 153, 127, 172, 163, 114, 129], [171, 64, 33, 4, 54, 233, 163, 87], [110, 149, 175, 136, 153, 115, 211, 172], [115, 136, 184, 162, 147, 110, 169, 172], [95, 153, 184, 156, 143, 65, 89, 169], [221, 58, 86, 5, 4, 219, 147, 43], [54, 153, 129, 156, 195, 102, 45, 5], [99, 160, 175, 121, 170, 115, 178, 207], [165, 8, 52, 49, 9, 224, 153, 2], [215, 33, 42, 24, 49, 230, 143, 65], [174, 33, 42, 16, 5, 207, 195, 102], [184, 15, 3, 52, 49, 232, 136, 23], [160, 42, 4, 3, 52, 221, 175, 75]], :duflo => [185, 2, 3, 36, 97, 238, 127, 49]), Dict{Symbol, Any}(:character => [91, 51], :reps => [[157, 184, 149, 109, 158, 148, 185, 91], [71, 190, 36, 149, 165, 113, 154, 185], [191, 190, 96, 149, 165, 113, 154, 185], [156, 190, 191, 114, 192, 165, 113, 211], [198, 197, 195, 116, 196, 162, 106, 172], [238, 5, 78, 4, 2, 35, 222, 44]], :duflo => [240, 34, 36, 44, 6, 5, 202, 35]), Dict{Symbol, Any}(:character => [111, 95], :reps => [[4, 162, 115, 171, 127, 172, 163, 96]], :duflo => [213, 2, 3, 4, 5, 14, 127, 188]), Dict{Symbol, Any}(:character => [100], :reps => [[81, 166, 164, 156, 88, 52, 165, 175], [113, 183, 186, 135, 36, 58, 169, 55], [113, 183, 186, 135, 88, 178, 64, 175]], :duflo => [222, 42, 110, 226, 5, 107, 221, 69]), Dict{Symbol, Any}(:character => [104, 99, 99, 76, 59, 59, 56, 53, 47, 34, 26], :reps => [[136, 103, 153, 148, 128, 166, 109, 172], [60, 148, 162, 129, 160, 118, 172, 163], [162, 148, 136, 153, 118, 172, 163, 166], [42, 143, 128, 148, 153, 118, 172, 204], [16, 177, 106, 148, 128, 166, 160, 105], [136, 177, 111, 148, 128, 166, 160, 105], [177, 111, 162, 136, 141, 160, 80, 43], [177, 111, 162, 136, 141, 160, 105, 163], [5, 153, 103, 148, 128, 166, 183, 114], [82, 136, 148, 153, 187, 94, 46, 43], [180, 172, 120, 170, 148, 129, 160, 80], [106, 180, 148, 153, 144, 114, 163, 166], [111, 162, 148, 129, 168, 108, 163, 200], [82, 136, 148, 153, 187, 120, 163, 166], [113, 156, 173, 177, 114, 185, 141, 160], [148, 183, 129, 162, 60, 108, 163, 200], [148, 136, 177, 162, 120, 163, 166, 160], [148, 113, 128, 166, 168, 136, 114, 225], [57, 170, 88, 136, 141, 160, 187, 113], [177, 170, 114, 136, 141, 160, 187, 113], [143, 205, 148, 128, 42, 114, 204, 160], [185, 108, 148, 153, 144, 162, 94, 46], [65, 177, 136, 162, 155, 92, 40, 46], [114, 148, 136, 170, 172, 113, 166, 160], [185, 108, 148, 153, 144, 162, 113, 166], [170, 114, 148, 129, 168, 180, 113, 200], [65, 177, 136, 162, 155, 119, 166, 160], [194, 114, 143, 147, 179, 128, 90, 4], [128, 113, 178, 146, 144, 194, 108, 4], [74, 202, 154, 128, 178, 104, 33, 4], [104, 200, 179, 128, 155, 74, 57, 4], [185, 57, 50, 4, 46, 239, 92, 187], [110, 141, 168, 136, 170, 115, 200, 187], [136, 177, 170, 148, 119, 166, 160, 187], [84, 148, 166, 128, 213, 112, 16, 5], [115, 173, 205, 128, 155, 110, 160, 144], [63, 176, 168, 129, 148, 119, 200, 187], [179, 146, 128, 178, 115, 177, 194, 110], [115, 136, 177, 154, 163, 110, 160, 187], [85, 170, 177, 148, 143, 116, 160, 187], [228, 2, 74, 24, 40, 236, 65, 128], [204, 28, 43, 23, 5, 237, 112, 162], [205, 50, 34, 24, 40, 236, 58, 155], [166, 50, 34, 16, 5, 237, 93, 155], [176, 34, 4, 3, 67, 237, 69, 143], [144, 46, 5, 4, 3, 222, 81, 189]], :duflo => [217, 2, 57, 28, 65, 240, 94, 160]), Dict{Symbol, Any}(:character => [102, 64], :reps => [[144, 185, 30, 88, 127, 165, 149, 152], [91, 150, 185, 148, 111, 165, 149, 152], [222, 34, 110, 226, 29, 97, 159, 206]], :duflo => [207, 30, 106, 215, 50, 70, 152, 227]), Dict{Symbol, Any}(:character => [77, 29], :reps => [[159, 154, 152, 75, 150, 52, 165, 60], [189, 20, 159, 46, 11, 67, 180, 175], [69, 186, 183, 76, 178, 104, 180, 175], [213, 2, 102, 215, 5, 103, 214, 101]], :duflo => [189, 11, 80, 196, 20, 64, 175, 99]), Dict{Symbol, Any}(:character => [92, 52], :reps => [[131, 128, 125, 134, 189, 118, 140, 129], [73, 125, 128, 134, 183, 122, 115, 129], [109, 140, 234, 110, 175, 206, 80, 134], [213, 122, 118, 140, 129, 176, 125, 134], [184, 107, 128, 134, 172, 131, 122, 112], [120, 175, 176, 129, 140, 122, 80, 134]], :duflo => [93, 125, 218, 90, 122, 216, 84, 129]), Dict{Symbol, Any}(:character => [112, 96], :reps => [[93, 122, 123, 124, 125, 134, 74, 188]], :duflo => [93, 122, 123, 124, 125, 134, 7, 68]), Dict{Symbol, Any}(:character => [55, 36], :reps => [[72, 152, 170, 121, 147, 127, 58, 106], [152, 80, 44, 217, 82, 147, 127, 210]], :duflo => [121, 82, 37, 209, 80, 171, 127, 210]), Dict{Symbol, Any}(:character => [104, 99, 83, 59, 56, 53, 50, 50, 31, 12], :reps => [[66, 142, 77, 144, 130, 147, 127, 58], [186, 142, 111, 144, 130, 147, 127, 58], [130, 110, 37, 231, 107, 171, 135, 8], [77, 89, 144, 130, 147, 127, 193, 107], [181, 114, 80, 236, 99, 179, 142, 73], [130, 181, 163, 121, 111, 132, 171, 127], [144, 186, 142, 152, 116, 143, 147, 127], [197, 130, 110, 147, 127, 172, 142, 107], [176, 89, 77, 132, 143, 147, 127, 193], [130, 74, 147, 135, 186, 111, 132, 178], [144, 79, 126, 135, 209, 116, 143, 155], [82, 194, 147, 121, 152, 77, 26, 58], [82, 194, 147, 121, 152, 77, 80, 178], [82, 163, 181, 121, 152, 116, 171, 127], [132, 116, 191, 130, 163, 121, 79, 127], [147, 92, 154, 144, 142, 152, 94, 58], [147, 92, 154, 144, 142, 152, 116, 178], [143, 114, 181, 144, 142, 152, 99, 127], [24, 65, 80, 143, 147, 127, 193, 152], [181, 163, 144, 130, 116, 171, 127, 193], [92, 147, 194, 121, 152, 89, 65, 178], [65, 144, 163, 130, 191, 93, 79, 127], [23, 179, 74, 142, 152, 191, 114, 26], [91, 121, 142, 175, 171, 114, 197, 94], [132, 116, 204, 130, 147, 121, 66, 8], [143, 114, 194, 144, 126, 152, 89, 8], [202, 171, 119, 154, 163, 121, 152, 94], [135, 114, 91, 239, 106, 188, 157, 32], [74, 179, 135, 147, 130, 116, 178, 193], [163, 104, 74, 239, 118, 206, 132, 32], [187, 118, 104, 239, 74, 163, 130, 32], [91, 179, 135, 126, 164, 114, 155, 214], [65, 144, 163, 130, 191, 119, 127, 193], [92, 185, 144, 154, 147, 71, 94, 193], [185, 130, 132, 191, 119, 127, 188, 121], [163, 144, 143, 181, 119, 127, 193, 152], [154, 104, 163, 143, 132, 191, 118, 193], [119, 185, 200, 132, 94, 162, 147, 121], [202, 113, 87, 240, 105, 126, 164, 9], [144, 113, 87, 240, 102, 175, 171, 71], [51, 144, 147, 130, 204, 102, 66, 8], [97, 61, 179, 147, 130, 204, 120, 193], [154, 202, 171, 135, 84, 94, 188, 121], [179, 200, 147, 135, 74, 101, 193, 152], [206, 43, 127, 147, 187, 106, 9, 32], [132, 109, 37, 233, 112, 218, 127, 15], [34, 188, 101, 143, 132, 191, 135, 102], [143, 112, 44, 237, 109, 198, 127, 15]], :duflo => [144, 107, 44, 236, 110, 147, 135, 8]), Dict{Symbol, Any}(:character => [98, 49], :reps => [[125, 101, 126, 157, 123, 156, 122, 112]], :duflo => [101, 126, 185, 125, 124, 122, 112, 213]), Dict{Symbol, Any}(:character => [108], :reps => [[127, 93, 146, 123, 124, 125, 143, 81], [115, 173, 171, 125, 176, 110, 155, 146]], :duflo => [63, 179, 124, 123, 146, 80, 143, 81]), Dict{Symbol, Any}(:character => [109], :reps => [[143, 95, 163, 154, 144, 111, 193, 152], [106, 150, 154, 203, 116, 152, 159, 170]], :duflo => [164, 2, 98, 210, 5, 107, 204, 209]), Dict{Symbol, Any}(:character => [106, 63], :reps => [[200, 110, 125, 124, 123, 162, 151, 101], [200, 150, 116, 124, 123, 162, 151, 175]], :duflo => [105, 124, 163, 122, 151, 175, 117, 164]), Dict{Symbol, Any}(:character => [103, 65], :reps => [[218, 122, 118, 140, 129, 169, 125, 142], [134, 149, 172, 131, 122, 115, 129, 175], [186, 129, 119, 169, 125, 142, 183, 122]], :duflo => [109, 140, 234, 110, 182, 200, 69, 22]), Dict{Symbol, Any}(:character => [67], :reps => [[97, 140, 159, 122, 131, 125, 55, 78]], :duflo => [70, 129, 195, 46, 134, 172, 45, 108]), Dict{Symbol, Any}(:character => [103, 65], :reps => [[69, 170, 96, 140, 129, 154, 131, 125], [164, 163, 140, 122, 159, 119, 169, 125], [87, 150, 226, 95, 170, 190, 32, 107]], :duflo => [102, 154, 230, 106, 149, 217, 39, 86]), Dict{Symbol, Any}(:character => [23], :reps => [], :duflo => [126, 122, 125, 124, 123, 121, 97, 8]), Dict{Symbol, Any}(:character => [67], :reps => [[163, 94, 122, 124, 125, 126, 164, 93]], :duflo => [87, 158, 125, 124, 123, 162, 112, 181]), Dict{Symbol, Any}(:character => [66], :reps => [[87, 148, 144, 170, 165, 113, 138, 32]], :duflo => [190, 9, 75, 166, 14, 52, 165, 228]), Dict{Symbol, Any}(:character => [91, 51], :reps => [[164, 166, 162, 113, 172, 169, 167, 92], [66, 162, 166, 91, 169, 167, 189, 117], [66, 178, 56, 162, 183, 117, 175, 167], [186, 178, 103, 162, 183, 117, 175, 167], [109, 65, 193, 178, 182, 110, 183, 69], [213, 5, 98, 210, 2, 96, 204, 9]], :duflo => [229, 20, 114, 230, 55, 86, 200, 14]), Dict{Symbol, Any}(:character => [94, 80, 41], :reps => [[81, 125, 122, 124, 123, 121, 188, 118], [167, 123, 122, 124, 125, 126, 118, 217], [114, 174, 123, 124, 125, 126, 195, 112], [107, 187, 186, 123, 124, 122, 75, 68], [186, 125, 123, 124, 122, 167, 120, 188]], :duflo => [126, 122, 125, 124, 123, 121, 101, 128]), Dict{Symbol, Any}(:character => [101], :reps => [[117, 149, 172, 131, 122, 148, 129, 107], [134, 120, 125, 176, 129, 140, 122, 190], [140, 154, 150, 131, 149, 62, 39, 86]], :duflo => [99, 122, 224, 46, 134, 172, 45, 29]), Dict{Symbol, Any}(:character => [98, 28], :reps => [[134, 131, 144, 122, 140, 45, 55, 78], [1, 125, 157, 18, 122, 148, 7, 118]], :duflo => [32, 122, 164, 30, 125, 173, 7, 118]), Dict{Symbol, Any}(:character => [109], :reps => [[162, 4, 144, 109, 186, 163, 143, 175], [197, 198, 161, 115, 150, 196, 162, 106]], :duflo => [182, 2, 5, 4, 3, 73, 238, 61]), Dict{Symbol, Any}(:character => [78, 30], :reps => [[93, 212, 131, 122, 140, 129, 107, 134], [131, 135, 122, 140, 129, 175, 119, 134], [134, 116, 187, 131, 122, 140, 129, 175], [69, 131, 200, 76, 140, 184, 55, 219]], :duflo => [93, 122, 222, 95, 125, 223, 94, 221]), Dict{Symbol, Any}(:character => [104, 99, 99, 76, 59, 59, 59, 56, 56, 56, 53, 34, 34, 34, 31, 31, 7], :reps => [[20, 136, 91, 154, 128, 155, 158, 109], [140, 136, 103, 154, 128, 155, 158, 109], [136, 103, 170, 140, 127, 158, 71, 67], [136, 103, 170, 140, 127, 158, 109, 187], [2, 165, 88, 127, 128, 181, 129, 109], [103, 170, 154, 136, 133, 109, 187, 155], [53, 140, 154, 129, 176, 86, 92, 187], [173, 105, 128, 161, 140, 129, 109, 212], [53, 140, 154, 129, 176, 120, 187, 155], [91, 163, 127, 146, 136, 111, 187, 191], [76, 161, 147, 121, 176, 65, 106, 212], [105, 162, 181, 136, 111, 207, 127, 158], [154, 140, 136, 170, 120, 187, 155, 158], [154, 105, 128, 155, 143, 140, 111, 229], [34, 143, 127, 140, 170, 120, 187, 191], [16, 192, 106, 140, 127, 158, 176, 105], [136, 192, 111, 140, 127, 158, 176, 105], [192, 111, 154, 136, 133, 176, 86, 35], [192, 111, 154, 136, 133, 176, 105, 155], [5, 170, 103, 140, 127, 158, 197, 114], [147, 178, 154, 128, 50, 111, 212, 158], [80, 35, 171, 127, 140, 170, 120, 229], [87, 136, 140, 170, 179, 99, 71, 155], [173, 187, 119, 161, 140, 129, 176, 86], [106, 173, 140, 170, 144, 114, 155, 158], [111, 154, 140, 129, 182, 108, 155, 206], [87, 136, 140, 170, 179, 119, 155, 158], [5, 128, 105, 161, 140, 129, 219, 113], [72, 105, 128, 161, 136, 133, 219, 113], [215, 111, 147, 121, 169, 128, 65, 26], [101, 146, 143, 163, 179, 95, 76, 191], [113, 148, 165, 192, 114, 178, 133, 176], [140, 77, 129, 182, 173, 119, 155, 206], [108, 196, 161, 128, 179, 113, 146, 129], [114, 161, 196, 128, 179, 113, 143, 133], [140, 136, 192, 154, 119, 155, 158, 176], [140, 113, 127, 158, 182, 136, 114, 225], [105, 202, 178, 128, 154, 95, 45, 158], [104, 154, 178, 128, 202, 108, 45, 158], [192, 161, 114, 136, 133, 176, 179, 113], [207, 16, 72, 26, 35, 191, 176, 179], [225, 140, 108, 184, 128, 154, 99, 38], [143, 90, 140, 192, 154, 119, 191, 176], [114, 140, 136, 161, 187, 113, 158, 176], [20, 158, 81, 182, 136, 154, 119, 225], [225, 140, 108, 184, 128, 154, 113, 158], [207, 76, 108, 155, 146, 129, 176, 179], [225, 64, 50, 20, 23, 158, 197, 154], [102, 129, 197, 154, 147, 76, 90, 206], [58, 192, 136, 154, 147, 118, 158, 176], [225, 143, 114, 202, 128, 127, 95, 4], [211, 171, 113, 179, 128, 181, 108, 4], [161, 62, 49, 9, 26, 206, 179, 147], [110, 133, 182, 136, 161, 115, 206, 179], [108, 140, 210, 127, 171, 80, 77, 176], [115, 165, 210, 127, 147, 110, 176, 144], [234, 23, 105, 5, 4, 209, 128, 127], [115, 136, 192, 146, 155, 110, 176, 179], [217, 86, 58, 5, 4, 197, 154, 147], [228, 2, 61, 24, 56, 214, 127, 171], [191, 20, 35, 23, 5, 144, 154, 218]], :duflo => [171, 2, 3, 20, 104, 229, 169, 128]), Dict{Symbol, Any}(:character => [110], :reps => [[122, 134, 131, 125, 165, 118, 188, 129], [114, 134, 131, 150, 140, 170, 86, 55]], :duflo => [44, 122, 218, 90, 125, 227, 84, 89]), Dict{Symbol, Any}(:character => [58], :reps => [[127, 162, 102, 123, 124, 125, 143, 181]], :duflo => [97, 211, 171, 125, 124, 94, 146, 61]), Dict{Symbol, Any}(:character => [90, 55], :reps => [[97, 126, 143, 125, 124, 123, 154, 112]], :duflo => [58, 124, 155, 122, 144, 126, 66, 98]), Dict{Symbol, Any}(:character => [106, 63], :reps => [[134, 131, 144, 122, 140, 45, 108, 198], [68, 122, 226, 95, 192, 169, 32, 107]], :duflo => [1, 125, 221, 90, 122, 216, 84, 89]), Dict{Symbol, Any}(:character => [92, 52], :reps => [[163, 118, 122, 140, 129, 152, 134, 125], [217, 152, 119, 134, 125, 185, 140, 122], [129, 119, 152, 134, 125, 165, 163, 122], [74, 140, 163, 122, 159, 152, 117, 125], [172, 95, 163, 122, 148, 129, 152, 116], [91, 163, 215, 72, 129, 214, 73, 70]], :duflo => [106, 134, 229, 84, 163, 195, 70, 86]), Dict{Symbol, Any}(:character => [110], :reps => [[172, 149, 123, 124, 122, 112, 175, 126], [163, 161, 110, 124, 125, 126, 164, 162]], :duflo => [105, 149, 123, 124, 158, 175, 117, 201]), Dict{Symbol, Any}(:character => [57], :reps => [[185, 150, 154, 113, 165, 149, 152, 159]], :duflo => [217, 20, 114, 216, 14, 90, 206, 175]), Dict{Symbol, Any}(:character => [94, 87, 41], :reps => [[126, 123, 125, 124, 122, 159, 119, 194], [102, 125, 123, 124, 122, 159, 188, 118], [199, 122, 123, 124, 125, 126, 118, 217], [211, 158, 125, 124, 123, 44, 68, 39], [69, 123, 122, 124, 125, 126, 224, 120]], :duflo => [44, 125, 123, 124, 122, 151, 127, 119]), Dict{Symbol, Any}(:character => [101], :reps => [[118, 167, 140, 122, 131, 125, 134, 74], [109, 128, 125, 134, 164, 140, 122, 112], [64, 186, 125, 131, 122, 167, 101, 74]], :duflo => [102, 162, 230, 106, 125, 227, 101, 189]), Dict{Symbol, Any}(:character => [65, 33], :reps => [[110, 85, 169, 125, 126, 157, 123, 162], [101, 122, 128, 190, 126, 125, 108, 123], [207, 175, 118, 126, 150, 124, 123, 162]], :duflo => [115, 163, 161, 157, 126, 125, 106, 162]), Dict{Symbol, Any}(:character => [107], :reps => [[106, 150, 154, 163, 165, 116, 152, 159], [117, 169, 164, 149, 165, 83, 46, 159]], :duflo => [189, 11, 80, 196, 20, 64, 175, 198]), Dict{Symbol, Any}(:character => [85, 52], :reps => [[169, 118, 125, 126, 157, 123, 156, 122], [120, 123, 194, 157, 126, 125, 85, 122], [221, 123, 120, 156, 122, 190, 126, 125]], :duflo => [100, 169, 126, 150, 156, 123, 114, 202]), Dict{Symbol, Any}(:character => [92, 52], :reps => [[144, 120, 146, 135, 147, 143, 141, 152], [147, 144, 135, 146, 178, 119, 141, 152], [147, 119, 143, 141, 152, 142, 144, 146], [59, 135, 144, 146, 155, 143, 116, 152], [111, 142, 151, 152, 141, 143, 80, 146], [11, 159, 169, 53, 165, 6, 12, 156]], :duflo => [31, 199, 203, 103, 209, 37, 35, 178]), Dict{Symbol, Any}(:character => [25], :reps => [], :duflo => [1, 122, 129, 124, 125, 126, 127, 119]), Dict{Symbol, Any}(:character => [73, 11], :reps => [[96, 211, 126, 125, 124, 123, 121, 101], [126, 122, 125, 124, 123, 121, 194, 120]], :duflo => [121, 122, 123, 124, 125, 126, 127, 119]), Dict{Symbol, Any}(:character => [101], :reps => [[118, 81, 188, 143, 125, 124, 123, 154], [188, 117, 143, 125, 124, 123, 154, 151], [170, 126, 124, 125, 178, 119, 154, 221]], :duflo => [102, 220, 123, 124, 125, 143, 97, 8]), Dict{Symbol, Any}(:character => [78, 30], :reps => [[118, 143, 126, 125, 124, 123, 154, 128], [123, 126, 124, 125, 143, 194, 120, 128], [120, 151, 128, 154, 123, 124, 125, 143], [70, 187, 124, 123, 154, 151, 107, 143]], :duflo => [102, 220, 123, 124, 125, 143, 101, 128]), Dict{Symbol, Any}(:character => [46, 44, 38], :reps => [[125, 120, 165, 163, 122, 148, 129, 152], [53, 144, 148, 122, 131, 193, 94, 84], [143, 120, 140, 170, 144, 134, 138, 131], [24, 143, 192, 65, 131, 199, 7, 94], [77, 129, 201, 30, 125, 173, 7, 73]], :duflo => [56, 138, 197, 37, 143, 148, 7, 73]), Dict{Symbol, Any}(:character => [108], :reps => [[143, 119, 147, 154, 144, 142, 152, 94], [143, 154, 104, 144, 142, 152, 191, 118]], :duflo => [175, 100, 64, 235, 98, 163, 172, 67]), Dict{Symbol, Any}(:character => [101], :reps => [[119, 144, 127, 146, 131, 149, 143, 81], [154, 118, 144, 126, 152, 149, 143, 155], [78, 166, 149, 131, 146, 144, 82, 81]], :duflo => [166, 55, 71, 213, 69, 146, 144, 170]), Dict{Symbol, Any}(:character => [30, 19], :reps => [[117, 123, 125, 124, 122, 151, 127, 188], [107, 212, 151, 122, 124, 123, 98, 188]], :duflo => [62, 122, 125, 124, 123, 193, 127, 104]), Dict{Symbol, Any}(:character => [44, 38, 14], :reps => [[120, 125, 128, 169, 129, 140, 122, 69], [103, 128, 227, 101, 172, 222, 95, 122], [97, 134, 236, 103, 140, 215, 92, 167], [119, 125, 186, 131, 122, 156, 129, 101], [66, 162, 140, 129, 169, 125, 92, 69]], :duflo => [81, 131, 211, 88, 156, 217, 89, 175]), Dict{Symbol, Any}(:character => [82], :reps => [[135, 159, 140, 122, 131, 125, 55, 101]], :duflo => [70, 129, 195, 46, 134, 172, 45, 180]), Dict{Symbol, Any}(:character => [46, 46, 44, 21], :reps => [[116, 155, 124, 122, 144, 126, 182, 106], [119, 123, 166, 124, 125, 126, 201, 101], [124, 119, 123, 154, 144, 126, 182, 143], [119, 193, 154, 123, 124, 125, 143, 81]], :duflo => [24, 166, 125, 124, 123, 193, 96, 81]), Dict{Symbol, Any}(:character => [82], :reps => [[113, 129, 122, 124, 125, 126, 127, 218]], :duflo => [74, 201, 127, 126, 125, 124, 123, 114]), Dict{Symbol, Any}(:character => [75, 16], :reps => [[120, 127, 182, 126, 144, 122, 124, 123]], :duflo => [31, 143, 126, 125, 124, 123, 199, 120]), Dict{Symbol, Any}(:character => [94, 87, 87, 71], :reps => [[170, 126, 124, 125, 143, 155, 114, 34], [170, 126, 124, 125, 143, 155, 119, 154], [123, 126, 124, 125, 143, 194, 119, 8], [188, 134, 143, 125, 124, 123, 102, 31]], :duflo => [84, 122, 194, 136, 125, 126, 66, 8]), Dict{Symbol, Any}(:character => [16, 9], :reps => [[134, 131, 144, 122, 140, 135, 60, 55], [32, 122, 164, 30, 125, 173, 7, 135]], :duflo => [1, 125, 157, 18, 122, 148, 7, 135]), Dict{Symbol, Any}(:character => [73, 4], :reps => [[127, 143, 126, 125, 124, 123, 162, 120]], :duflo => [65, 124, 163, 122, 144, 126, 127, 79]), Dict{Symbol, Any}(:character => [6], :reps => [], :duflo => [167, 123, 122, 124, 125, 126, 127, 74]), Dict{Symbol, Any}(:character => [69], :reps => [], :duflo => [121, 122, 123, 124, 125, 126, 135, 8]), Dict{Symbol, Any}(:character => [2], :reps => [], :duflo => [121, 122, 123, 124, 125, 126, 127, 128])])
chevieset(:F4, :CartanMat, function (arg...,)
        local a, type_
        if length(arg) == 1
            type_ = arg[1]
        else
            type_ = 1
        end
        a = (chevieget(:A, :CartanMat))(4)
        (a[2])[3] = -type_
        (a[3])[2] = 2 // (a[2])[3]
        return a
    end)
chevieset(:F4, :PrintDiagram, function (indices, title, type_)
        print(title, " ", indices[1], " - ", indices[2])
        if type_ == 1
            print(" >=> ")
        elseif type_ == ER(2)
            print(" == ")
        else
            print(" ?==? ")
        end
        print(indices[3], " - ", indices[4], "\n")
    end)
chevieset(:F4, :ReflectionName, function (arg...,)
        local i, opt, type_
        if length(arg) == 1
            return "F4(?)"
        end
        type_ = arg[2]
        opt = arg[1]
        if type_ == 1
            if haskey(opt, :TeX)
                return "F_4"
            elseif haskey(opt, :arg)
                return "\"F\",4"
            else
                return "F4"
            end
        elseif type_ == ER(2)
            if haskey(opt, :TeX)
                return "F_{\\hbox{sym}4}"
            elseif haskey(opt, :arg)
                return "\"Fsym\",4"
            else
                return "Fsym4"
            end
        elseif haskey(opt, :TeX)
            return SPrint("F_4(", Format(type_ ^ 2 // 2, opt), ")")
        elseif haskey(opt, :arg)
            return SPrint("\"F\",", 4, ",", Format(type_ ^ 2 // 2, opt))
        else
            return SPrint("F4(", Format(type_ ^ 2 // 2), ")")
        end
    end)
chevieset(:F4, :GeneratingRoots, [[0, 1, -1, 0], [0, 0, 1, -1], [0, 0, 0, 1], [1, -1, -1, -1] // 2])
chevieset(:F4, :HyperplaneRepresentatives, [1, 3])
chevieset(:F4, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1], [3]], [[1, 2], [1, 3], [2, 3], [3, 4]], [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]], [1:4]]
        return t[s + 1]
    end)
chevieset(:F4, :Size, 1152)
chevieset(:F4, :ReflectionDegrees, [2, 6, 8, 12])
chevieset(:F4, :NrConjugacyClasses, 25)
chevieset(:F4, :ClassInfo, function ()
        local res
        res = Dict{Symbol, Any}(:classtext => map((x->begin
                                Replace(x, [0], 1:4)
                            end), [[], [0, 0, 0, 0, 0, 0], [2, 3, 2, 3], [2, 1], [0, 2, 3, 2, 3, 4, 3], [0, 0, 0], [4, 3], [1, 2, 1, 3, 2, 3, 0], [0, 0, 0, 0], [0, 0], [0], [1], [2, 3, 2, 3, 4, 3, 2, 3, 4], [1, 4, 3], [4, 3, 2], [2, 3, 2, 1, 3], [3], [1, 2, 1, 3, 2, 1, 3, 2, 3], [2, 1, 4], [3, 2, 1], [2, 4, 3, 2, 3], [1, 3], [3, 2], [0, 0, 0, 2, 3], [0, 2, 3]]), :classnames => ["A_0", "4A_1", "2A_1", "A_2", "D_4", "D_4(a_1)", "\\tilde A_2", "C_3+A_1", "A_2+\\tilde A_2", "F_4(a_1)", "F_4", "A_1", "3A_1", "\\tilde A_2+A_1", "C_3", "A_3", "\\tilde A_1", "2A_1+\\tilde A_1", "A_2+\\tilde A_1", "B_3", "B_2+A_1", "A_1+\\tilde A_1", "B_2", "A_3+\\tilde A_1", "B_4"], :classes => [1, 1, 18, 32, 32, 12, 32, 32, 16, 16, 96, 12, 12, 96, 96, 72, 12, 12, 96, 96, 72, 72, 36, 36, 144], :orders => [1, 2, 2, 3, 6, 4, 3, 6, 3, 6, 12, 2, 2, 6, 6, 4, 2, 2, 6, 6, 4, 2, 4, 4, 8])
        res[:classparams] = res[:classnames]
        return res
    end)
chevieset(:F4, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 12, 2], [1, 12, 1], [1, 24], [2, 4, 2], [2, 16, 1], [2, 4, 1], [2, 16, 2], [4, 8], [9, 2], [9, 6, 2], [9, 6, 1], [9, 10], [6, 6, 1], [6, 6, 2], [12, 4], [4, 1], [4, 7, 2], [4, 7, 1], [4, 13], [8, 3, 2], [8, 9, 1], [8, 3, 1], [8, 9, 2], [16, 5]], :kondo => ["1_1", "1_2", "1_3", "1_4", "2_1", "2_2", "2_3", "2_4", "4_1", "9_1", "9_2", "9_3", "9_4", "6_1", "6_2", "12", "4_2", "4_3", "4_4", "4_5", "8_1", "8_2", "8_3", "8_4", "16"], :spaltenstein => ["1_1", "1_2", "1_3", "1_4", "2_1", "2_2", "2_3", "2_4", "4", "9_1", "9_2", "9_3", "9_4", "6_1", "6_2", "12", "4_1", "4_2", "4_3", "4_4", "8_1", "8_2", "8_3", "8_4", "16"], :extRefl => [1, 17, 15, 20, 4], :a => [0, 4, 4, 24, 1, 13, 1, 13, 4, 2, 4, 4, 10, 4, 4, 4, 1, 4, 4, 13, 3, 9, 3, 9, 4], :A => [0, 20, 20, 24, 11, 23, 11, 23, 20, 14, 20, 20, 22, 20, 20, 20, 11, 20, 20, 23, 15, 21, 15, 21, 20])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        return res
    end)
chevieset(:F4, :cyclestructure, [[[], []], [[12], [12]], [[10], [10]], [[nothing, 8], [nothing, 6]], [[nothing, nothing, nothing, nothing, 4], [3, nothing, nothing, nothing, 3]], [[nothing, nothing, 6], [nothing, nothing, 6]], [[nothing, 6], [nothing, 8]], [[3, nothing, nothing, nothing, 3], [nothing, nothing, nothing, nothing, 4]], [[nothing, 8], [nothing, 8]], [[nothing, nothing, nothing, nothing, 4], [nothing, nothing, nothing, nothing, 4]], [[nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 2], [nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, nothing, 2]], [[9], [6]], [[11], [12]], [[3, 2, nothing, nothing, 2], [nothing, 4, nothing, nothing, 2]], [[2, nothing, nothing, nothing, 3], [nothing, nothing, nothing, nothing, 4]], [[2, nothing, 5], [1, nothing, 5]], [[6], [9]], [[12], [11]], [[nothing, 4, nothing, nothing, 2], [3, 2, nothing, nothing, 2]], [[nothing, nothing, nothing, nothing, 4], [2, nothing, nothing, nothing, 3]], [[1, nothing, 5], [2, nothing, 5]], [[11], [11]], [[nothing, nothing, 5], [nothing, nothing, 5]], [[2, nothing, 5], [2, nothing, 5]], [[nothing, nothing, nothing, nothing, nothing, nothing, 3], [nothing, nothing, nothing, nothing, nothing, nothing, 3]]])
chevieset(:F4, :generators, [#= none:4 =# @perm_str("(1,25)(2,5)(6,8)(9,11)(10,12)(13,15)(16,18)(23,24)(26,29)(30,32)(33,35)(34,36)(37,39)(40,42)(47,48)"), #= none:4 =# @perm_str("(1,5)(2,26)(3,6)(7,10)(11,14)(15,17)(18,20)(22,23)(25,29)(27,30)(31,34)(35,38)(39,41)(42,44)(46,47)"), #= none:5 =# @perm_str("(2,9)(3,27)(4,7)(5,11)(10,13)(12,15)(17,19)(20,22)(26,33)(28,31)(29,35)(34,37)(36,39)(41,43)(44,46)"), #= none:5 =# @perm_str("(3,7)(4,28)(6,10)(8,12)(9,16)(11,18)(14,20)(19,21)(27,31)(30,34)(32,36)(33,40)(35,42)(38,44)(43,45)")])
chevieset(:F4, :orbits, [[1, 25, 5, 29, 2, 11, 26, 35, 9, 14, 18, 33, 38, 42, 16, 20, 40, 44, 22, 46, 23, 47, 24, 48], [3, 6, 27, 7, 8, 10, 30, 31, 4, 12, 13, 32, 34, 28, 15, 36, 37, 17, 39, 19, 41, 21, 43, 45]])
chevieset(:F4, :PowerMaps, [nothing, [1, 1, 1, 4, 4, 2, 7, 7, 9, 9, 10, 1, 1, 7, 7, 3, 1, 1, 4, 4, 3, 1, 3, 3, 6], [1, 2, 3, 1, 2, 6, 1, 2, 1, 2, 6, 12, 13, 12, 13, 16, 17, 18, 17, 18, 21, 22, 23, 24, 25]])
chevieset(:F4, :sparseFakeDegrees, [[1, 0], [1, 12], [1, 12], [1, 24], [1, 4, 1, 8], [1, 16, 1, 20], [1, 4, 1, 8], [1, 16, 1, 20], [1, 8, 2, 12, 1, 16], [1, 2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12, 1, 14], [1, 6, 1, 8, 2, 10, 1, 12, 2, 14, 1, 16, 1, 18], [1, 6, 1, 8, 2, 10, 1, 12, 2, 14, 1, 16, 1, 18], [1, 10, 1, 12, 2, 14, 1, 16, 2, 18, 1, 20, 1, 22], [1, 6, 1, 8, 2, 12, 1, 16, 1, 18], [1, 6, 1, 8, 2, 12, 1, 16, 1, 18], [1, 4, 2, 8, 2, 10, 2, 12, 2, 14, 2, 16, 1, 20], [1, 1, 1, 5, 1, 7, 1, 11], [1, 7, 1, 11, 1, 13, 1, 17], [1, 7, 1, 11, 1, 13, 1, 17], [1, 13, 1, 17, 1, 19, 1, 23], [1, 3, 1, 5, 1, 7, 2, 9, 1, 11, 1, 13, 1, 15], [1, 9, 1, 11, 1, 13, 2, 15, 1, 17, 1, 19, 1, 21], [1, 3, 1, 5, 1, 7, 2, 9, 1, 11, 1, 13, 1, 15], [1, 9, 1, 11, 1, 13, 2, 15, 1, 17, 1, 19, 1, 21], [1, 5, 2, 7, 2, 9, 3, 11, 3, 13, 2, 15, 2, 17, 1, 19]])
chevieset(:F4, :ClassParameter, function (w,)
        local x
        if w == []
            return " "
        end
        x = Product((chevieget(:F4, :generators))[w])
        return (chevieget(:F4, :classparams))[Position(chevieget(:F4, :cyclestructure), [CycleStructurePerm(RestrictedPerm(x, (chevieget(:F4, :orbits))[1])), CycleStructurePerm(RestrictedPerm(x, (chevieget(:F4, :orbits))[2]))])]
    end)
chevieset(:F4, :HeckeCharTable, function (param, sqrtparam)
        local u, v, c, tbl, f2, f4, f6, f8, f11, f13, f18, f20, f22, f24, dual
        u = -((param[1])[1]) // (param[1])[2]
        v = -((param[3])[1]) // (param[3])[2]
        tbl = Dict{Symbol, Any}(:identifier => "H(F4)", :text => "origin: Meinolf Geck, April 1992", :parameter => [u, u, v, v], :size => 1152, :powermap => chevieget(:F4, :PowerMaps))
        Inherit(tbl, (chevieget(:F4, :ClassInfo))())
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        dual = (f->begin
                    map(function (a, w)
                            return a * (-u) ^ count((j->begin
                                                    j in [1, 2]
                                                end), w) * (-v) ^ count((j->begin
                                                    j in [3, 4]
                                                end), w)
                        end, f(u ^ -1, v ^ -1), tbl[:classtext])
                end)
        f4 = function (u, v)
                return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1]
            end
        f2 = function (u, v)
                return [1, u ^ 12, u ^ 2, u ^ 2, u ^ 4, u ^ 6, 1, u ^ 6, u ^ 8, u ^ 4, u ^ 2, u, u ^ 3, u, u, u ^ 3, -1, -(u ^ 6), -(u ^ 2), -(u ^ 2), -(u ^ 2), -u, -u, -(u ^ 7), -(u ^ 3)]
            end
        f6 = function (u, v)
                return [2, 2 * v ^ 6, v ^ 2 + 1, 2, 2 * v ^ 3, 2 * v ^ 3, -v, -(v ^ 2), -(v ^ 4), -(v ^ 2), -v, -2, -2 * v ^ 3, v, v, -1 - v ^ 2, v - 1, -1 + v ^ 3, v - 1, v - 1, 0, 1 - v, 1 - v, v ^ 3 - v ^ 4, 0]
            end
        f8 = function (u, v)
                return [2, 2 * u ^ 6, u ^ 2 + 1, -u, -(u ^ 2), 2 * u ^ 3, 2, 2 * u ^ 3, -(u ^ 4), -(u ^ 2), -u, -1 + u, u ^ 3 - 1, -1 + u, -1 + u, 0, -2, -2 * u ^ 3, u, u, -(u ^ 2) - 1, -u + 1, -u + 1, -(u ^ 4) + u ^ 3, 0]
            end
        f11 = function (u, v)
                return [9, 9 * v ^ 4 * u ^ 8, ((v ^ 2 * u ^ 2 + 1) - 4 * u * v) + 3 * u ^ 2, -3u + 3 * u ^ 2, 0, -3 * v ^ 2 * u ^ 4, 3 - 3v, 0, 0, 0, 0, 6u - 3, -3 * v ^ 2 * u ^ 2 + 2 * v ^ 3 * u ^ 3 + 3 * u * v ^ 2 + u ^ 3, ((2u - 2 * u * v) - 1) + v, -u * v + u, u ^ 3 - 2 * u ^ 2 * v, -6 + 3v, ((3 * u ^ 4 * v - 3 * v ^ 2 * u ^ 4) - u ^ 6) - 2 * u ^ 3, ((u ^ 2 * v - 2 * u ^ 2) - u * v) + 2u, u - u ^ 2, -(u ^ 2) + 2 * u * v, (-4u + 2 * u * v + 2) - v, -3u + u * v + 1, (-(v ^ 3) * u ^ 5 + v ^ 2 * u ^ 5) - v ^ 2 * u ^ 4, u ^ 2 * v]
            end
        f13 = function (u, v)
                return [9, 9 * v ^ 4 * u ^ 4, (3 - 4 * u * v) + u ^ 2 + v ^ 2, -3u + 3, 0, -3 * v ^ 2 * u ^ 2, 3 - 3v, 0, 0, 0, 0, -6 + 3u, ((-1 + 3 * u * v ^ 2) - 3 * v ^ 2 * u ^ 2) - 2 * v ^ 3, ((-u * v + u) - 2) + 2v, v - 1, -1 + 2 * u * v, -6 + 3v, ((-1 + 3 * u ^ 2 * v) - 2 * u ^ 3) - 3 * v ^ 2 * u ^ 2, (-u * v + 2u + v) - 2, -1 + u, -1 + 2 * u * v, ((4 - 2v) + u * v) - 2u, (3 - v) - u, (v ^ 3 * u ^ 2 - v ^ 2 * u ^ 2) + v ^ 2 * u ^ 3, -u * v]
            end
        f18 = function (u, v)
                return [4, -4 * v ^ 3 * u ^ 9, 2 * u ^ 2 - 2 * u * v, 2 * u ^ 2 - u, u ^ 3 * v - 2 * v ^ 2 * u ^ 3, 0, -v + 2, -2 * u ^ 4 * v + u ^ 5 * v, -2 * v ^ 2 * u ^ 6, 2 * u ^ 3 * v, 0, 3u - 1, u ^ 3 - 3 * v ^ 2 * u ^ 2, (-u * v + u) - 1, u, u ^ 3 - u ^ 2 * v, -3 + v, -(u ^ 6) + 3 * u ^ 4 * v, (u ^ 2 * v - u ^ 2) + u, -(u ^ 2), -(u ^ 2) + u * v, (u * v - 2u) + 1, -2u, 2 * v ^ 2 * u ^ 5, 0]
            end
        f20 = function (u, v)
                return [4, -4 * v ^ 3 * u ^ 3, 2 - 2 * u * v, 2 - u, -2 * u * v ^ 2 + u * v, 0, -v + 2, u * v - 2 * u ^ 2 * v, -2 * v ^ 2 * u ^ 2, 2 * u * v, 0, -3 + u, 3 * u * v ^ 2 - 1, (v - 1) + u, -1, -1 + u * v, -3 + v, -1 + 3 * u ^ 2 * v, (v - 1) + u, -1, -1 + u * v, (2 - v) - u, 2, -2 * v ^ 2 * u ^ 2, 0]
            end
        f22 = function (u, v)
                return [8, -8 * v ^ 6 * u ^ 3, (2 * v ^ 2 - 4 * u * v) + 2, 4 - 2u, -(v ^ 4) * u - u * v ^ 2, 0, -3v + 1 + v ^ 2, 2 * v ^ 2 * u ^ 2 - u * v ^ 2, 2 * v ^ 4 * u ^ 2, -2 * u * v ^ 2, 0, -6 + 2u, -2 * v ^ 3 + 3 * u * v ^ 2 + 3 * v ^ 4 * u, ((-u * v - 1) - v ^ 2) + 2v, v, (2 * u * v - 1) - v ^ 2, 4v - 4, ((v ^ 3 - 3 * v ^ 2 * u ^ 2) + 3 * u ^ 2 * v) - 1, ((-u * v + u) - 2) + 2v, v - 1, -u * v ^ 2 + u * v, ((u * v - u) - 3v) + 3, 2 - 2v, 0, 0]
            end
        f24 = function (u, v)
                return [8, -8 * v ^ 3 * u ^ 6, (2 * u ^ 2 - 4 * u * v) + 2, -3u + 1 + u ^ 2, -(u ^ 2) * v + 2 * v ^ 2 * u ^ 2, 0, -2v + 4, -(u ^ 4) * v - u ^ 2 * v, 2 * v ^ 2 * u ^ 4, -2 * u ^ 2 * v, 0, -4 + 4u, ((u ^ 3 - 3 * v ^ 2 * u ^ 2) + 3 * u * v ^ 2) - 1, (-u * v + 2u + v) - 2, -1 + u, u * v - u ^ 2 * v, -6 + 2v, -2 * u ^ 3 + 3 * u ^ 2 * v + 3 * u ^ 4 * v, ((-(u ^ 2) - u * v) + 2u) - 1, u, (-(u ^ 2) + 2 * u * v) - 1, ((-3u + u * v) - v) + 3, -2u + 2, 0, 0]
            end
        tbl[:irreducibles] = [dual(f4), f2(u, v), dual(f2), f4(u, v), dual(f6), f6(u, v), dual(f8), f8(u, v), [4, 4 * u ^ 6 * v ^ 6, v ^ 2 + v ^ 2 * u ^ 2 + u ^ 2 + 1, -2u, -2 * v ^ 3 * u ^ 2, 4 * v ^ 3 * u ^ 3, -2v, -2 * v ^ 2 * u ^ 3, v ^ 4 * u ^ 4, v ^ 2 * u ^ 2, u * v, 2u - 2, -2 * v ^ 3 + 2 * v ^ 3 * u ^ 3, v - u * v, v - u * v, 0, 2v - 2, 2 * v ^ 3 * u ^ 3 - 2 * u ^ 3, -u * v + u, -u * v + u, 0, ((u * v - v) + 1) - u, ((u * v - v) + 1) - u, ((-(v ^ 4) * u ^ 3 + v ^ 4 * u ^ 4) - v ^ 3 * u ^ 4) + v ^ 3 * u ^ 3, 0], dual(f13), f11(u, v), dual(f11), f13(u, v), [6, 6 * u ^ 6 * v ^ 6, (u ^ 2 - 4 * u * v) + v ^ 2, (1 - 2u) + u ^ 2, (v ^ 2 * u ^ 2 + v ^ 4 * u ^ 2) - 2 * v ^ 3 * u ^ 2, 2 * v ^ 3 * u ^ 3, (1 + v ^ 2) - 2v, (v ^ 2 * u ^ 2 - 2 * v ^ 2 * u ^ 3) + v ^ 2 * u ^ 4, 3 * v ^ 4 * u ^ 4, 3 * v ^ 2 * u ^ 2, -u * v, -3 + 3u, -3 * v ^ 2 * u ^ 2 + 3 * v ^ 4 * u, ((u * v ^ 2 - u * v) + v) - 1, 0, u * v - u ^ 2 * v, -3 + 3v, -3 * v ^ 2 * u ^ 2 + 3 * u ^ 4 * v, ((u ^ 2 * v - u * v) + u) - 1, 0, -u * v ^ 2 + u * v, ((-u + 2 * u * v) - v) + 2, -v - u, -(v ^ 4) * u ^ 3 - v ^ 3 * u ^ 4, 0], [6, 6 * u ^ 6 * v ^ 6, -4 * u * v + v ^ 2 * u ^ 2 + 1, (1 - 2u) + u ^ 2, (v ^ 2 * u ^ 2 + v ^ 4 * u ^ 2) - 2 * v ^ 3 * u ^ 2, 2 * v ^ 3 * u ^ 3, (1 + v ^ 2) - 2v, (v ^ 2 * u ^ 2 - 2 * v ^ 2 * u ^ 3) + v ^ 2 * u ^ 4, 3 * v ^ 4 * u ^ 4, 3 * v ^ 2 * u ^ 2, -u * v, -3 + 3u, 3 * u * v ^ 2 - 3 * v ^ 4 * u ^ 2, ((-(v ^ 2) + v) - u * v) + u, 0, u * v - u ^ 2 * v, -3 + 3v, -3 * v ^ 2 * u ^ 4 + 3 * u ^ 2 * v, (-(u ^ 2) - u * v) + u + v, 0, -u * v ^ 2 + u * v, ((-2u + u * v) - 2v) + 1, u * v + 1, v ^ 4 * u ^ 4 + v ^ 3 * u ^ 3, 0], [12, 12 * u ^ 6 * v ^ 6, ((1 + v ^ 2 * u ^ 2) - 8 * u * v) + u ^ 2 + v ^ 2, (2 * u ^ 2 - 4u) + 2, (2 * v ^ 3 * u ^ 2 - v ^ 4 * u ^ 2) - v ^ 2 * u ^ 2, 4 * v ^ 3 * u ^ 3, (2 - 4v) + 2 * v ^ 2, (2 * v ^ 2 * u ^ 3 - v ^ 2 * u ^ 4) - v ^ 2 * u ^ 2, -3 * v ^ 4 * u ^ 4, -3 * v ^ 2 * u ^ 2, u * v, -6 + 6u, ((-3 * v ^ 2 * u ^ 2 + 3 * u * v ^ 2) - 3 * v ^ 4 * u ^ 2) + 3 * v ^ 4 * u, (((-2 * u * v + u + u * v ^ 2) - v ^ 2) + 2v) - 1, 0, 2 * u * v - 2 * u ^ 2 * v, -6 + 6v, ((-3 * v ^ 2 * u ^ 2 + 3 * u ^ 2 * v) - 3 * v ^ 2 * u ^ 4) + 3 * u ^ 4 * v, (((u ^ 2 * v - u ^ 2) - 2 * u * v) + 2u + v) - 1, 0, -2 * u * v ^ 2 + 2 * u * v, ((3 - 3u) - 3v) + 3 * u * v, ((u * v - v) + 1) - u, ((-(v ^ 4) * u ^ 3 + v ^ 4 * u ^ 4) - v ^ 3 * u ^ 4) + v ^ 3 * u ^ 3, 0], dual(f20), f18(u, v), dual(f18), f20(u, v), dual(f22), f22(u, v), dual(f24), f24(u, v), [16, -16 * u ^ 6 * v ^ 6, ((2 + 2 * v ^ 2 * u ^ 2) - 8 * u * v) + 2 * v ^ 2 + 2 * u ^ 2, -6u + 2 * u ^ 2 + 2, v ^ 4 * u ^ 2 + v ^ 2 * u ^ 2, 0, (2 * v ^ 2 - 6v) + 2, v ^ 2 * u ^ 4 + v ^ 2 * u ^ 2, -2 * v ^ 4 * u ^ 4, 2 * v ^ 2 * u ^ 2, 0, -8 + 8u, v ^ 2 * (u - 1) * (((2 * u ^ 2 * v - 3u) - 3 * u * v ^ 2) + 2 * u * v + 2v), ((((u * v ^ 2 - 3 * u * v) - v ^ 2) + 3v) - 1) + u, v - u * v, 2 * u * v - 2 * u ^ 2 * v, -8 + 8v, -(u ^ 2) * (v - 1) * (((-2 * u * v ^ 2 + 3 * u ^ 2 * v + 3v) - 2 * u * v) - 2u), ((u ^ 2 - 3u) + 1) * (v - 1), -u * v + u, -2 * u * v * (v - 1), 4 * (v - 1) * (u - 1), 2 * (v - 1) * (u - 1), 0, 0]] * u ^ 0 * v ^ 0
        tbl[:irredinfo] = chevieget(:F4, :IrredInfo)
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        ((CHEVIE[:compat])[:AdjustHeckeCharTable])(tbl, param)
        return tbl
    end)
chevieset(:F4, :PoincarePolynomial, function (param,)
        return (chevieget(:F4, :SchurElement))([1, 0], param, false)
    end)
chevieset(:F4, :SchurModels, Dict{Symbol, Any}(:f1_0 => Dict{Symbol, Any}(:vcyc => [[[0, 0, 1, -1], 1], [[0, 0, 1, -1], 6], [[1, -1, 0, 0], 1], [[1, -1, 0, 0], 6], [[1, -1, 2, -2], 1], [[1, -1, 1, -1], 6], [[2, -2, 1, -1], 1], [[1, -1, 1, -1], 4], [[1, -1, 1, -1], 2], [[1, -1, 1, -1], 2]]), :f2_4s => Dict{Symbol, Any}(:coeff => -1, :factor => [0, 0, -1, 1], :vcyc => [[[0, 0, 1, -1], 6], [[1, -1, 0, 0], 3], [[1, -1, 0, 0], 6], [[1, -1, 0, 0], 1], [[1, -1, 0, 0], 1], [[2, -2, 1, -1], 1], [[1, -1, 1, -1], 2], [[1, -1, -1, 1], 2], [[2, -2, -1, 1], 1]]), :f4_8 => Dict{Symbol, Any}(:coeff => 2, :vcyc => [[[0, 0, 1, -1], 6], [[-1, 1, 0, 0], 6], [[1, -1, -1, 1], 2], [[1, -1, -1, 1], 2], [[-1, 1, -1, 1], 2], [[1, -1, 1, -1], 2]]), :f9_2 => Dict{Symbol, Any}(:vcyc => [[[0, 0, 1, -1], 1], [[1, -1, 0, 0], 1], [[1, -1, -2, 2], 1], [[1, -1, 1, -1], 4], [[-2, 2, 1, -1], 1], [[1, -1, 1, -1], 2], [[1, -1, 1, -1], 2]]), :f6_6s => Dict{Symbol, Any}(:coeff => 3, :vcyc => [[[0, 0, -1, 1], 1], [[0, 0, -1, 1], 1], [[-1, 1, 0, 0], 1], [[-1, 1, 0, 0], 1], [[1, -1, 1, -1], 6], [[1, -1, -1, 1], 2], [[-1, 1, 1, -1], 2]]), :f12_4 => Dict{Symbol, Any}(:coeff => 6, :vcyc => [[[0, 0, 1, -1], 3], [[-1, 1, 0, 0], 3], [[1, -1, -1, 1], 2], [[1, -1, -1, 1], 2], [[1, -1, 1, -1], 2], [[-1, 1, -1, 1], 2]]), :f4_1 => Dict{Symbol, Any}(:vcyc => [[[0, 0, 1, -1], 1], [[0, 0, 1, -1], 6], [[-1, 1, 0, 0], 1], [[1, -1, 0, 0], 6], [[1, -1, -1, 1], 2], [[1, -1, 1, -1], 6], [[1, -1, 1, -1], 2], [[1, -1, 1, -1], 2]]), :f8_3s => Dict{Symbol, Any}(:coeff => -1, :factor => [0, 0, -1, 1], :vcyc => [[[0, 0, 1, -1], 6], [[1, -1, 0, 0], 6], [[1, -1, 0, 0], 1], [[-1, 1, 0, 0], 1], [[1, -1, 0, 0], 3], [[1, -1, -2, 2], 1], [[1, -1, 2, -2], 1]]), :f16_5 => Dict{Symbol, Any}(:coeff => 2, :factor => [-1, 1, -1, 1], :vcyc => [[[0, 0, 1, -1], 6], [[-1, 1, 0, 0], 6], [[1, -1, -1, 1], 4], [[1, -1, 1, -1], 4]])))
chevieset(:F4, :SchurData, [Dict{Symbol, Any}(:name => "f1_0", :order => [1, 2, 3, 4]), Dict{Symbol, Any}(:name => "f1_0", :order => [1, 2, 4, 3]), Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1, 3, 4]), Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1, 4, 3]), Dict{Symbol, Any}(:name => "f2_4s", :order => [1, 2, 3, 4]), Dict{Symbol, Any}(:name => "f2_4s", :order => [2, 1, 3, 4]), Dict{Symbol, Any}(:name => "f2_4s", :order => [3, 4, 1, 2]), Dict{Symbol, Any}(:name => "f2_4s", :order => [4, 3, 1, 2]), Dict{Symbol, Any}(:name => "f4_8", :order => [1, 2, 3, 4]), Dict{Symbol, Any}(:name => "f9_2", :order => [1, 2, 3, 4]), Dict{Symbol, Any}(:name => "f9_2", :order => [1, 2, 4, 3]), Dict{Symbol, Any}(:name => "f9_2", :order => [2, 1, 3, 4]), Dict{Symbol, Any}(:name => "f9_2", :order => [2, 1, 4, 3]), Dict{Symbol, Any}(:name => "f6_6s", :order => [1, 2, 4, 3]), Dict{Symbol, Any}(:name => "f6_6s", :order => [1, 2, 3, 4]), Dict{Symbol, Any}(:name => "f12_4", :order => [1, 2, 3, 4]), Dict{Symbol, Any}(:name => "f4_1", :order => [1, 2, 3, 4]), Dict{Symbol, Any}(:name => "f4_1", :order => [1, 2, 4, 3]), Dict{Symbol, Any}(:name => "f4_1", :order => [2, 1, 3, 4]), Dict{Symbol, Any}(:name => "f4_1", :order => [2, 1, 4, 3]), Dict{Symbol, Any}(:name => "f8_3s", :order => [1, 2, 3, 4]), Dict{Symbol, Any}(:name => "f8_3s", :order => [2, 1, 3, 4]), Dict{Symbol, Any}(:name => "f8_3s", :order => [3, 4, 1, 2]), Dict{Symbol, Any}(:name => "f8_3s", :order => [4, 3, 1, 2]), Dict{Symbol, Any}(:name => "f16_5", :order => [1, 2, 3, 4])])
chevieset(:F4, :Representation, function (i,)
        return (chevieget(:F4, :HeckeRepresentation))(map((x->begin
                            [1, -1]
                        end), 1:4), [1, 1, 1, 1], i)
    end)
chevieset(:F4, :WGraphs, [[[[]], []], [[[3, 4]], []], 2, 1, [[[3], [4]], [[1, [[1, 2]]]]], 5, [[[1], [2]], [[1, [[1, 2]]]]], 7, [[[1, 3], [1, 4], [2, 3], [2, 4]], [[1, [[1, 2, 3], [2, 4], [3, 4]]]]], [[[1], [1, 3], [1, 4], [2], 1, [2, 4], [3], 1, [4]], [[1, [[1, 2, 5], [2, 3, 4, 8], [3, 6], [4, 6, 7], [5, 8], [6, 8, 9], [7, 9]]]]], [[[1, 3], [1, 3, 4], [1, 4], [2, 3], [2, 4], 1, [3], [3, 4], 1], [[[2, 1], [[5, 8]]], [-2, [[2, 9]]], [1, [[1, 3, 4], [2, 3, 6, 8], [3, 5], [4, 5], [6, 7], [7, 8, 9]]], [2, [[4, 7]]]]], 11, 10, [[[1, 2, 4], [1, 3], [1, 3, 4], [2], [2, 4], [3]], [[1, [[1, 2, 5], [2, 3, 4, 6], [3, 5], [4, 5], [5, 6]]]]], [[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]], [[[2, 1], [[1, 2], [5, 6]]], [1, [[2, 3, 4], [3, 5], [4, 5]]]]], [[[1, 2], [1, 2, 4], [1, 3], 1, [1, 3, 4], [1, 4], [2], [2, 3], [2, 4], 1, [3], [3, 4]], [[[1, 2], [[1, 4]]], [[2, 1], [[9, 12]]], [1, [[1, 7], [2, 3], [3, 7], [4, 6, 8], [5, 10], [6, 9], [8, 9], [10, 11], [11, 12]]], [2, [[2, 10], [3, 5, 11], [7, 8, 10], [8, 11]]], [3, [[1, 2], [2, 6], [5, 6, 12]]]]], [[[1], [2], [3], [4]], [[[-1, -2], [[2, 3]]], [-1, [[1, 2], [3, 4]]]]], [[[1, 3, 4], [2, 4], [3], [3, 4]], [[-1, [[3, 4]]], [1, [[1, 2, 4], [2, 3]]]]], 18, 17, [[[1, 3], [1, 4], [2], [2, 4], [3], 1, [3, 4], [4]], [[1, [[1, 2, 3, 5], [2, 4], [3, 4, 6], [4, 5, 7], [6, 7, 8]]]]], 21, [[[1], [1, 2], [1, 3], [1, 4], [2], 1, [2, 4], [3]], [[1, [[1, 6], [2, 3, 6], [3, 4, 5, 8], [4, 7], [5, 7], [6, 8], [7, 8]]]]], 23, [[[1, 2], [1, 2, 4], [1, 3], 2, [1, 3, 4], [1, 4], 1, [2], [2, 3], 1, [2, 4], 2, [3], [3, 4]], [[[1, 2], [[13, 16]]], [1, [[1, 2, 4, 5, 9], [2, 3, 7, 8, 14], [3, 9, 15], [4, 7, 10], [5, 8, 11], [6, 14, 16], [7, 12], [8, 13], [9, 10, 11], [10, 12], [11, 13, 15], [14, 15], [15, 16]]], [2, [[3, 6], [6, 8], [9, 14]]]]]])
chevieset(:F4, :WGraph, function (i,)
        local gr
        gr = chevieget(:F4, :WGraphs)
        if IsInt(gr[i])
            return DualWGraph(4, gr[gr[i]])
        else
            return gr[i]
        end
    end)
chevieset(:F4, :HeckeRepresentation, function (param, sqrtparam, i)
        local u, v, r, res
        u = -((param[1])[1]) // (param[1])[2]
        v = -((param[3])[1]) // (param[3])[2]
        if !(sqrtparam[1] !== nothing)
            u = GetRoot(u, 2, "Representation(Hecke(F4),[", i, "])")
        else
            u = -(sqrtparam[1]) // (param[1])[2]
        end
        if !(sqrtparam[3] !== nothing)
            v = GetRoot(v, 2, "Representation(Hecke(F4),[", i, "])")
        else
            v = -(sqrtparam[3]) // (param[3])[2]
        end
        if u == v
            return -((param[1])[2]) * WGraphToRepresentation(4, (chevieget(:F4, :WGraph))(i), v)
        else
            r = [[[[u ^ 2]], [[u ^ 2]], [[v ^ 2]], [[v ^ 2]]], [[[u ^ 2]], [[u ^ 2]], [[-1]], [[-1]]], [[[-1]], [[-1]], [[v ^ 2]], [[v ^ 2]]], [[[-1]], [[-1]], [[-1]], [[-1]]], [[[u ^ 2, 0], [0, u ^ 2]], [[u ^ 2, 0], [0, u ^ 2]], [[-1, 0], [v, v ^ 2]], [[v ^ 2, v], [0, -1]]], [[[-1, 0], [0, -1]], [[-1, 0], [0, -1]], [[-1, 0], [v, v ^ 2]], [[v ^ 2, v], [0, -1]]], [[[-1, 0], [u, u ^ 2]], [[u ^ 2, u], [0, -1]], [[v ^ 2, 0], [0, v ^ 2]], [[v ^ 2, 0], [0, v ^ 2]]], [[[-1, 0], [u, u ^ 2]], [[u ^ 2, u], [0, -1]], [[-1, 0], [0, -1]], [[-1, 0], [0, -1]]], [[[-1, 0, 0, 0], [u, u ^ 2, 0, 0], [0, 0, -1, 0], [0, 0, u, u ^ 2]], [[u ^ 2, u, 0, 0], [0, -1, 0, 0], [0, 0, u ^ 2, u], [0, 0, 0, -1]], [[-1, 0, 0, 0], [0, -1, 0, 0], [v, 0, v ^ 2, 0], [0, v, 0, v ^ 2]], [[v ^ 2, 0, v, 0], [0, v ^ 2, 0, v], [0, 0, -1, 0], [0, 0, 0, -1]]], [[[u ^ 2, 0, u, 0, 0, 0, 0, 0, 0], [0, u ^ 2, 0, 0, u, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, u, u ^ 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, u, u ^ 2, 0, 0, 0], [0, 0, u, 0, 0, 0, u ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, u ^ 2, u], [0, 0, 0, 0, 0, 0, 0, 0, -1]], [[u ^ 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, u ^ 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, u ^ 2, u, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, u ^ 2, u, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, u ^ 2, u, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, u, u ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0], [v, v ^ 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0], [1 // u ^ 2 * v ^ 2 + u ^ 2, 0, 1 // u * v ^ 2 + u, v ^ 2, 0, 0, 0, 0, 0], [0, 0, v, 0, v ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, v ^ 2, v, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 1 // u * v ^ 2 + u, v ^ 2, 0], [0, 0, 1 // u * v ^ 2 + u, 0, 0, 0, 0, 0, v ^ 2]], [[v ^ 2, v, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, v ^ 2, 0, v, 0, 0, 0, 0], [0, 0, 0, v ^ 2, 0, v, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, v, v ^ 2, 0, 0], [0, 0, 0, 0, 0, (-u - 1 // u) * v, 0, v ^ 2, 0], [0, 0, 0, 0, (-u - 1 // u) * v, 0, 0, 0, v ^ 2]]], [[[u ^ 2, u, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0], [0, u, u ^ 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, u ^ 2, 0, 0, 0, 0, 0], [0, u, 0, 0, u ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, u ^ 2, 0, u, 0], [0, 0, 0, 0, 0, 0, u ^ 2, 0, u], [0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1]], [[u ^ 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, u ^ 2, u, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, u ^ 2, 0, u, 0, 0, 0], [0, 0, 0, 0, u ^ 2, 0, u, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, u, 0, u ^ 2, 0], [0, 0, 0, 0, 0, 0, u, 0, u ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0], [1 // u ^ 2 * v ^ 2 + u ^ 2, 1 // u * v ^ 2 + u, v ^ 2, v, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 1 // u * v ^ 2 + u, v, v ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 1 // u * v ^ 2 + u, 0, 0, 0, 0, 0, v, v ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0], [(u ^ 2 + 1 // u ^ 2) * v, (u + 1 // u) * v, v, v ^ 2, v, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, v ^ 2, v, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, v ^ 2, v], [0, 0, 0, 0, 0, 0, 0, 0, -1]]], [[[u ^ 2, 0, u, 0, 0, 0, 0, 0, 0], [0, u ^ 2, 0, 0, u, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, u, 0, 0, u, u ^ 2, u], [0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0], [u, 0, u ^ 2, u, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0], [0, u, 0, 0, u ^ 2, u, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, u ^ 2, u, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0], [v, v ^ 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 1 // u * v ^ 2 + u, v ^ 2, 0, 0, 0, 0, 0], [0, 0, v, 0, v ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, v ^ 2, v, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0], [1 // u * v ^ 2 + u, 0, 0, 0, 0, 0, 1 // u * v ^ 2 + u, v ^ 2, 0], [0, 0, 0, 0, 0, 0, -1 // u ^ 2 * v ^ 2 - u ^ 2, 0, v ^ 2]], [[v ^ 2, v, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, v ^ 2, 0, v, 0, 0, 0, 0], [0, 0, 0, v ^ 2, 0, v, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, v, v ^ 2, 0, 0], [0, 0, 0, 0, 0, (-u - 1 // u) * v, 0, v ^ 2, 0], [0, 0, 0, 0, 0, (u ^ 2 + 1 // u ^ 2) * v, 0, 0, v ^ 2]]], [[[u ^ 2, u, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, u, u ^ 2, 0, 0, u, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, u, 0, 0, u, u ^ 2, 0, u], [0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0], [u, u ^ 2, u, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, u ^ 2, u, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, u ^ 2, u, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 1 // u * v ^ 2 + u, v ^ 2, v, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [1 // u * v ^ 2 + u, 0, 0, 0, v, 1 // u * v ^ 2 + u, v ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1 // u ^ 2 * v ^ 2 - u ^ 2, 0, v, v ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0], [0, (u + 1 // u) * v, v, v ^ 2, 0, v, 0, 0, 0], [(u + 1 // u) * v, 0, 0, 0, v ^ 2, 0, v, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, v ^ 2, v], [0, 0, 0, 0, 0, 0, 0, 0, -1]]], [[[-1, 0, 0, 0, 0, 0], [u, u ^ 2, 0, u, 0, 0], [0, 0, u ^ 2, 0, u, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, u, u ^ 2]], [[u ^ 2, u, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, u ^ 2, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, u ^ 2, u], [0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0], [1 // u * v ^ 2 + u, v ^ 2, v, 0, 0, 0], [0, 0, -1, 0, 0, 0], [-1 // u ^ 2 * v ^ 2 - u ^ 2, 0, 0, v ^ 2, v, 0], [0, 0, 0, 0, -1, 0], [0, 0, 1 // u ^ 2 * v ^ 2 + u ^ 2, 0, 1 // u * v ^ 2 + u, v ^ 2]], [[-1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [(u + 1 // u) * v, v, v ^ 2, 0, 0, 0], [0, 0, 0, -1, 0, 0], [((-(u ^ 2) - 1) - 1 // u ^ 2) * v, 0, 0, v, v ^ 2, 0], [0, ((-(u ^ 2) - 1) - 1 // u ^ 2) * v, 0, (-u - 1 // u) * v, 0, v ^ 2]]], [[[u ^ 2, 0, 0, 0, 0, 0], [0, u ^ 2, u, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, 0, 0, u ^ 2, u, 0], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1]], [[u ^ 2, 0, 0, -u, 0, 0], [0, -1, 0, 0, 0, 0], [0, u, u ^ 2, 0, 0, u], [0, 0, 0, -1, 0, 0], [0, 0, 0, u, u ^ 2, 0], [0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [-1 // u * v ^ 2 - u, v, 0, v ^ 2, 0, 0], [0, 0, v, 0, v ^ 2, 0], [0, 0, 1 // u * v ^ 2 + u, 0, 0, v ^ 2]], [[-1, 0, 0, 0, 0, 0], [0, v ^ 2, 0, v, 0, 0], [0, 0, v ^ 2, 0, v, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, v ^ 2]]], [[[u ^ 2, 0, 0, u, 0, 0, 0, 0, 0, 0, 0, 0], [0, u ^ 2, 0, 0, u, 0, 0, 0, 0, 0, 0, 0], [0, 0, u ^ 2, 0, 0, 0, 0, u, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, u, 0, u ^ 2, 0, 0, 0, u, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, u ^ 2, 0, u, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 3u, 0, 0, 0, u, u ^ 2]], [[u ^ 2, 0, u, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, u ^ 2, 0, u, 0, 0, 0, 0, 0, 0], [0, u, 0, 0, u ^ 2, 0, u, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, u, 0, 0, 0, 0, u ^ 2, 0, u, 0, 0], [0, 3u, 0, 0, 0, 0, 0, 0, u ^ 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, u ^ 2, u], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1 // u * v ^ 2 + u, v, v ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 // u * v ^ 2 + u, 0, v ^ 2, 0, 0, v, 0, 0, 0], [0, 0, 0, 0, 1 // u * v ^ 2 + u, 0, v ^ 2, 0, 0, 0, 0, 0], [0, 0, 0, 1 // u * v ^ 2 + u, v, 0, 0, v ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, -1 // u ^ 2 * v ^ 2 - u ^ 2, 0, 0, 0, 0, 0, v ^ 2, v, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 3 // u * v ^ 2 + 3u, 0, 0, 0, 0, 0, 0, 1 // u ^ 2 * v ^ 2 + u ^ 2, 0, 1 // u * v ^ 2 + u, v ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, v ^ 2, v, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, v ^ 2, 0, 0, v, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, v ^ 2, 0, 0, v, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [3v, 0, 0, (u + 1 // u) * v, 0, v, 0, 0, v ^ 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, ((-(u ^ 2) + 2) - 1 // u ^ 2) * v, 0, 0, 0, 0, 0, v, v ^ 2, 0], [0, 0, 0, 0, 0, ((-(u ^ 2) + 2) - 1 // u ^ 2) * v, 0, 0, 0, (-u - 1 // u) * v, 0, v ^ 2]]], [[[u ^ 2, 0, 0, 0], [0, u ^ 2, 0, 0], [0, 0, u ^ 2, u], [0, 0, 0, -1]], [[u ^ 2, 0, u, 0], [0, u ^ 2, 0, 0], [0, 0, -1, 0], [0, 0, u, u ^ 2]], [[-1, 0, 0, 0], [v, v ^ 2, 0, 0], [1 // u * v ^ 2 + u, 0, v ^ 2, 0], [0, 0, 0, v ^ 2]], [[v ^ 2, v, 0, 0], [0, -1, 0, 0], [0, 0, v ^ 2, 0], [0, 0, 0, v ^ 2]]], [[[u ^ 2, u, 0, 0], [0, -1, 0, 0], [0, u, u ^ 2, 0], [0, 0, 0, u ^ 2]], [[u ^ 2, 0, 0, 0], [0, u ^ 2, u, 0], [0, 0, -1, 0], [0, 0, 0, u ^ 2]], [[-1, 0, 0, 0], [0, -1, 0, 0], [1 // u ^ 2 * v ^ 2 + u ^ 2, 1 // u * v ^ 2 + u, v ^ 2, v], [0, 0, 0, -1]], [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [(u ^ 2 + 1 + 1 // u ^ 2) * v, (u + 1 // u) * v, v, v ^ 2]]], [[[-1, 0, 0, 0], [0, -1, 0, 0], [0, u, u ^ 2, u], [0, 0, 0, -1]], [[-1, 0, 0, 0], [0, u ^ 2, u, 0], [0, 0, -1, 0], [0, 0, 0, -1]], [[v ^ 2, v, 0, 0], [0, -1, 0, 0], [0, 1 // u * v ^ 2 + u, v ^ 2, 0], [0, -1 // u ^ 2 * v ^ 2 - u ^ 2, 0, v ^ 2]], [[-1, 0, 0, 0], [v, v ^ 2, 0, 0], [(-u - 1 // u) * v, 0, v ^ 2, 0], [(u ^ 2 + 1 + 1 // u ^ 2) * v, 0, 0, v ^ 2]]], [[[u ^ 2, 0, u, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, -1]], [[-1, 0, 0, 0], [0, -1, 0, 0], [u, 0, u ^ 2, u], [0, 0, 0, -1]], [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, v, 1 // u * v ^ 2 + u, v ^ 2]], [[-1, 0, 0, 0], [0, v ^ 2, 0, v], [0, 0, -1, 0], [0, 0, 0, -1]]], [[[u ^ 2, 0, 0, 0, 0, 0, 0, 0], [0, u ^ 2, 0, u, 0, 0, 0, 0], [0, 0, u ^ 2, 0, u, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, u, u ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, u ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, u ^ 2]], [[u ^ 2, u, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, 0, u ^ 2, 0, 0, 0, 0, 0], [0, u, 0, u ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, u ^ 2, u, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, u ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, u ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0], [1 // u * v ^ 2 + u, v ^ 2, v, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, v ^ 2, v, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 1 // u ^ 2 * v ^ 2 + u ^ 2, 0, 1 // u * v ^ 2 + u, v ^ 2, v, 0], [0, 0, 0, 0, 0, 0, -1, 0], [(u ^ 3 + 1 // u ^ 3) * v, 0, 0, 0, 0, 0, v, v ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [(u + 1 // u) * v, v, v ^ 2, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, v, v ^ 2, 0, 0, 0], [0, v, 0, 0, 0, v ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, v ^ 2, v], [0, 0, 0, 0, 0, 0, 0, -1]]], [[[-1, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [0, 0, u, u ^ 2, 0, u, 0, 0], [0, 0, 0, 0, u ^ 2, 0, u, 0], [0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, 0, u ^ 2, u, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, u, 0, u ^ 2, u], [0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0], [v, v ^ 2, v, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 1 // u * v ^ 2 + u, v ^ 2, v, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, -1 // u ^ 2 * v ^ 2 - u ^ 2, 0, 0, v ^ 2, v, 0], [0, 0, 0, 0, 0, 0, -1, 0], [(-(u ^ 3) - 1 // u ^ 3) * v, 0, 0, 0, 0, 0, 1 // u * v ^ 2 + u, v ^ 2]], [[v ^ 2, v, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, v, v ^ 2, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0], [0, 0, v, 0, 0, v, v ^ 2, 0], [0, 0, 0, 0, 0, (-u - 1 // u) * v, 0, v ^ 2]]], [[[u ^ 2, 0, u, 0, 0, 0, 0, 0], [0, u ^ 2, 0, 0, u, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, u ^ 2, 0, 0, u, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, u, u ^ 2, 0, u], [0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0], [0, u ^ 2, 0, u, 0, 0, 0, 0], [u, 0, u ^ 2, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, u ^ 2, u, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, u, 0, 0, u ^ 2, u], [0, 0, 0, 0, 0, 0, 0, -1]], [[v ^ 2, v, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, 0, v ^ 2, 0, v, 0, 0, 0], [0, 1 // u * v ^ 2 + u, 0, v ^ 2, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 1 // u * v ^ 2 + u, v ^ 2, 0, 0], [0, 0, 0, 0, 1 // u * v ^ 2 + u, 0, v ^ 2, 0], [0, 0, 0, 0, -1 // u ^ 2 * v ^ 2 - u ^ 2, 0, 0, v ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0], [v, v ^ 2, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [(-u - 1 // u) * v, 0, 0, v ^ 2, 0, 0, 0, 0], [0, 0, v, 0, v ^ 2, 0, 0, 0], [v, 0, 0, 0, 0, v ^ 2, 0, 0], [0, 0, (-u - 1 // u) * v, 0, 0, 0, v ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, v ^ 2]]], [[[u ^ 2, 0, u, 0, 0, 0, 0, 0], [0, u ^ 2, 0, 0, u, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [0, 0, u, u ^ 2, 0, 0, u, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, u ^ 2, 0, u], [0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, -1]], [[u ^ 2, u, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, 0, u ^ 2, u, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0], [0, u, 0, 0, u ^ 2, 0, u, 0], [0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, u, 0, u ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [1 // u ^ 2 * v ^ 2 + u ^ 2, 1 // u * v ^ 2 + u, 1 // u * v ^ 2 + u, v ^ 2, 0, v, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 1 // u * v ^ 2 + u, 0, v ^ 2, v], [0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0], [0, (u + 1 // u) * v, 0, v, 0, v ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0], [0, 0, v, 0, (u + 1 // u) * v, 0, v, v ^ 2]]], [[[u ^ 2, 0, u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, u ^ 2, 0, 0, u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, u ^ 2, 0, 0, u, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, u ^ 2, 0, 0, 0, u, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, u, u ^ 2, 0, 0, 0, u, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, u ^ 2, 0, 0, 0, u, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, u ^ 2, 0, 0, 0, u, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, u, u, u ^ 2]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [u, 0, u ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, u ^ 2, 0, u, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, u, 0, 0, u ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, u ^ 2, u, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, u, 0, 0, 0, u ^ 2, 0, u, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, u, 0, u ^ 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, u, 0, 0, 0, u ^ 2, u, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, u ^ 2, u], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [v, v ^ 2, 0, 2v, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, v, 0, v ^ 2, 0, 2v, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1 // u * v ^ 2 + u, 0, v ^ 2, 0, 0, v, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1 // u * v ^ 2 + u, v ^ 2, 0, 0, v, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1 // u * v ^ 2 + u, 0, 0, v ^ 2, 0, 0, v, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1 // u ^ 2 * v ^ 2 - u ^ 2, 0, 0, 0, 0, v ^ 2, 0, 0, v, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 0, -v, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 // u * v ^ 2 + u, v ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0], [-v, 0, 0, 0, 0, 0, 0, 0, 1 // u * v ^ 2 + u, 0, 1 // u ^ 2 * v ^ 2 + u ^ 2, 0, 0, 0, 1 // u * v ^ 2 + u, v ^ 2]], [[v ^ 2, v, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, v ^ 2, 0, v, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, v, 0, 0, v ^ 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, v, 0, 0, (u + 1 // u) * v, v, 0, 0, v ^ 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, v, 0, 0, v ^ 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v, 0, v ^ 2, 0, 0], [0, 0, 0, 0, 0, 0, (-(u ^ 2) - 1 // u ^ 2) * v, 0, 0, 0, 0, v, 0, 0, v ^ 2, 0], [0, 0, 0, 0, 0, 0, 0, (-(u ^ 2) - 1 // u ^ 2) * v, 0, 0, 0, (-u - 1 // u) * v, 0, 0, 0, v ^ 2]]]]
            res = r[i]
            for i = 1:4
                res[i] = -(res[i]) * (param[i])[2]
            end
            return res * u ^ 0 * v ^ 0
        end
    end)
(CHEVIE[:families])[:S4] = Dict{Symbol, Any}(:group => Group(#= none:2 =# @perm_str("(1,4)"), #= none:2 =# @perm_str("(2,4)"), #= none:2 =# @perm_str("(3,4)")), :lusztig => true, :charLabels => ["(1,1)", "(1,\\lambda^{\\wedge3})", "(1,\\sigma)", "(1,\\lambda^{\\wedge2})", "(1,\\lambda)", "(g_2,1)", "(g_2,\\varepsilon')", "(g_2,\\varepsilon'')", "(g_2,\\varepsilon)", "(g'_2,1)", "(g'_2,\\varepsilon)", "(g'_2,\\varepsilon')", "(g'_2,\\varepsilon'')", "(g'_2,r)", "(g_3,1)", "(g_3,\\zeta_3)", "(g_3,\\zeta_3^2)", "(g_4,1)", "(g_4,-1)", "(g_4,-i)", "(g_4,i)"], :size => 21, :eigenvalues => [1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, 1, E(3), E(3, 2), 1, -1, E(4), -(E(4))], :name => "D(S_4)", :explanation => "Lusztig'sDrinfeldDouble(S_4)", :mellin => ApplyFunc(DiagonalMat, [[[1, 1, 2, 3, 3], [1, -1, 0, -1, 1], [1, 1, 2, -1, -1], [1, 1, -1, 0, 0], [1, -1, 0, 1, -1]], [[1, 1, 1, 1], [1, 1, -1, -1], [1, -1, 1, -1], [1, -1, -1, 1]], [[1, 1, 1, 1, 2], [1, -1, -1, 1, 0], [1, 1, 1, 1, -2], [1, -1, 1, -1, 0], [1, 1, -1, -1, 0]], [[1, 1, 1], [1, E(3), E(3, 2)], [1, E(3, 2), E(3)]], [[1, 1, 1, 1], [1, -1, E(4), -(E(4))], [1, 1, -1, -1], [1, -1, -(E(4)), E(4)]]]), :mellinLabels => ["(1,1)", "(1,g_2)", "(1,g'_2)", "(1,g_3)", "(1,g_4)", "(g_2,1)", "(g_2,g_2)", "(g_2,g'_2)", "(g_2,2c)", "(g'_2,1)", "(g'_2,g_2)", "(g'_2,g'_2)", "(g'_2,2c)", "(g'_2,g_4)", "(g_3,1)", "(g_3,g_3)", "(g_3,g_3^2)", "(g_4,1)", "(g_4,g_4)", "(g_4,g_2)", "(g_4,g_4^{-1})"], :fourierMat => [[1, 1, 2, 3, 3, 6, 6, 6, 6, 3, 3, 3, 3, 6, 8, 8, 8, 6, 6, 6, 6], [1, 1, 2, 3, 3, -6, -6, -6, -6, 3, 3, 3, 3, 6, 8, 8, 8, -6, -6, -6, -6], [2, 2, 4, 6, 6, 0, 0, 0, 0, 6, 6, 6, 6, 12, -8, -8, -8, 0, 0, 0, 0], [3, 3, 6, 9, 9, -6, -6, -6, -6, -3, -3, -3, -3, -6, 0, 0, 0, 6, 6, 6, 6], [3, 3, 6, 9, 9, 6, 6, 6, 6, -3, -3, -3, -3, -6, 0, 0, 0, -6, -6, -6, -6], [6, -6, 0, -6, 6, 12, 0, 0, -12, 6, -6, -6, 6, 0, 0, 0, 0, 0, 0, 0, 0], [6, -6, 0, -6, 6, 0, 12, -12, 0, -6, 6, 6, -6, 0, 0, 0, 0, 0, 0, 0, 0], [6, -6, 0, -6, 6, 0, -12, 12, 0, -6, 6, 6, -6, 0, 0, 0, 0, 0, 0, 0, 0], [6, -6, 0, -6, 6, -12, 0, 0, 12, 6, -6, -6, 6, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 6, -3, -3, 6, -6, -6, 6, 9, -3, 9, -3, -6, 0, 0, 0, 6, 6, -6, -6], [3, 3, 6, -3, -3, -6, 6, 6, -6, -3, 9, -3, 9, -6, 0, 0, 0, 6, 6, -6, -6], [3, 3, 6, -3, -3, -6, 6, 6, -6, 9, -3, 9, -3, -6, 0, 0, 0, -6, -6, 6, 6], [3, 3, 6, -3, -3, 6, -6, -6, 6, -3, 9, -3, 9, -6, 0, 0, 0, -6, -6, 6, 6], [6, 6, 12, -6, -6, 0, 0, 0, 0, -6, -6, -6, -6, 12, 0, 0, 0, 0, 0, 0, 0], [8, 8, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, -8, -8, 0, 0, 0, 0], [8, 8, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 16, -8, 0, 0, 0, 0], [8, 8, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, -8, 16, 0, 0, 0, 0], [6, -6, 0, 6, -6, 0, 0, 0, 0, 6, 6, -6, -6, 0, 0, 0, 0, 12, -12, 0, 0], [6, -6, 0, 6, -6, 0, 0, 0, 0, 6, 6, -6, -6, 0, 0, 0, 0, -12, 12, 0, 0], [6, -6, 0, 6, -6, 0, 0, 0, 0, -6, -6, 6, 6, 0, 0, 0, 0, 0, 0, 12, -12], [6, -6, 0, 6, -6, 0, 0, 0, 0, -6, -6, 6, 6, 0, 0, 0, 0, 0, 0, -12, 12]] // 24, :perm => #= none:38 =# @perm_str("(16,17)(20,21)"), :x => [Perm(), Perm(), Perm(), Perm(), Perm(), #= none:39 =# @perm_str("(1,2)"), #= none:39 =# @perm_str("(1,2)"), #= none:39 =# @perm_str("(1,2)"), #= none:39 =# @perm_str("(1,2)"), #= none:39 =# @perm_str("(1,2)(3,4)"), #= none:39 =# @perm_str("(1,2)(3,4)"), #= none:40 =# @perm_str("(1,2)(3,4)"), #= none:40 =# @perm_str("(1,2)(3,4)"), #= none:40 =# @perm_str("(1,2)(3,4)"), #= none:40 =# @perm_str("(1,2,3)"), #= none:40 =# @perm_str("(1,2,3)"), #= none:40 =# @perm_str("(1,2,3)"), #= none:40 =# @perm_str("(1,2,3,4)"), #= none:41 =# @perm_str("(1,2,3,4)"), #= none:41 =# @perm_str("(1,2,3,4)"), #= none:41 =# @perm_str("(1,2,3,4)")], :y => [Perm(), #= none:42 =# @perm_str("(1,2)"), #= none:42 =# @perm_str("(1,2)(3,4)"), #= none:42 =# @perm_str("(1,2,3)"), #= none:42 =# @perm_str("(1,2,3,4)"), Perm(), #= none:42 =# @perm_str("(3,4)"), #= none:42 =# @perm_str("(1,2)"), #= none:42 =# @perm_str("(1,2)(3,4)"), Perm(), #= none:43 =# @perm_str("(3,4)"), #= none:43 =# @perm_str("(1,2)(3,4)"), #= none:43 =# @perm_str("(1,3)(2,4)"), #= none:43 =# @perm_str("(1,3,2,4)"), Perm(), #= none:43 =# @perm_str("(1,2,3)"), #= none:43 =# @perm_str("(1,3,2)"), Perm(), #= none:43 =# @perm_str("(1,2,3,4)"), #= none:44 =# @perm_str("(1,3)(2,4)"), #= none:44 =# @perm_str("(1,4,3,2)")], :special => 1)
chevieset(:F4, :UnipotentCharacters, function ()
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "F", :indices => 1:4, :rank => 4), :levi => [], :eigenvalue => 1, :parameterExponents => [1, 1, 1, 1], :cuspidalName => "", :charNumbers => 1:25), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "B", :cartanType => 2, :indices => [4, 1], :rank => 2), :levi => 2:3, :eigenvalue => -1, :parameterExponents => [3, 3], :cuspidalName => "B_2", :charNumbers => [29, 27, 26, 30, 28]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => -1, :parameterExponents => [], :cuspidalName => "F_4[-1]", :charNumbers => [31]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => -(E(4)), :parameterExponents => [], :cuspidalName => "F_4[-i]", :charNumbers => [32]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => E(4), :parameterExponents => [], :cuspidalName => "F_4[i]", :charNumbers => [33]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => E(3), :parameterExponents => [], :cuspidalName => "F_4[\\zeta_3]", :charNumbers => [34]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => E(3, 2), :parameterExponents => [], :cuspidalName => "F_4[\\zeta_3^2]", :charNumbers => [35]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => 1, :parameterExponents => [], :cuspidalName => "F_4[1]", :charNumbers => [36]), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:4, :eigenvalue => 1, :parameterExponents => [], :cuspidalName => "F_4^2[1]", :charNumbers => [37])], :families => [Family("C1", [1]), Family("C1", [4]), Family("C1", [10]), Family("C1", [13]), Family("C1", [21], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [22], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [23], Dict{Symbol, Any}(:ennola => -1)), Family("C1", [24], Dict{Symbol, Any}(:ennola => -1)), Family("C2", [17, 5, 7, 30], Dict{Symbol, Any}(:ennola => -4)), Family("C2", [20, 8, 6, 26], Dict{Symbol, Any}(:ennola => -4)), Family("S4", [16, 37, 15, 3, 12, 25, 29, 19, 31, 11, 36, 2, 9, 27, 14, 34, 35, 18, 28, 33, 32], Dict{Symbol, Any}(:ennola => 2))], :a => [0, 4, 4, 24, 1, 13, 1, 13, 4, 2, 4, 4, 10, 4, 4, 4, 1, 4, 4, 13, 3, 9, 3, 9, 4, 13, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4], :A => [0, 20, 20, 24, 11, 23, 11, 23, 20, 14, 20, 20, 22, 20, 20, 20, 11, 20, 20, 23, 15, 21, 15, 21, 20, 23, 20, 20, 20, 11, 20, 20, 20, 20, 20, 20, 20])
    end)
chevieset(:F4, :Invariants, [function (x, y, z, t)
            return ((-t * z - 2 * x * y) - 2 * y * z) + t ^ 2 + 2 * x ^ 2 + 2 * y ^ 2 + z ^ 2
        end, function (x, y, z, t)
            return ((((((((((((((((((((((((((((((((((((16 * t * x * y * z ^ 3 - 12 * t * x * y ^ 2 * z ^ 2) - 8 * t * x * y ^ 3 * z) - 4 * t * y * z ^ 4) - 8 * x * y * z ^ 4) + 12 * t * x ^ 2 * y * z ^ 2 + 12 * t * x ^ 2 * y ^ 2 * z) - 16 * t * x ^ 2 * z ^ 3) + 8 * t * y ^ 2 * z ^ 3 + 32 * x * y ^ 2 * z ^ 3) - 8 * t * x ^ 3 * y * z) - 8 * t * y ^ 3 * z ^ 2) - 64 * x * y ^ 3 * z ^ 2) + 4 * t * x ^ 4 * z + 4 * t * y ^ 4 * z + 64 * x * y ^ 4 * z) - 24 * x * y ^ 5) - 24 * t ^ 2 * x * y * z ^ 2) + 12 * t ^ 2 * x * y ^ 2 * z + 8 * t ^ 2 * x * y ^ 3) - 4 * t ^ 2 * y * z ^ 3) - 32 * x ^ 2 * y * z ^ 3) - 12 * t ^ 2 * x ^ 2 * y * z) - 12 * t ^ 2 * x ^ 2 * y ^ 2) + 24 * t ^ 2 * x ^ 2 * z ^ 2 + 60 * x ^ 2 * y ^ 2 * z ^ 2 + 8 * t ^ 2 * x ^ 3 * y + 8 * t ^ 2 * y ^ 3 * z) - 56 * x ^ 2 * y ^ 3 * z) - 4 * t ^ 2 * x ^ 4) - 4 * t ^ 2 * y ^ 4) + 3 * t ^ 2 * z ^ 4 + 24 * x ^ 2 * y ^ 4 + 8 * x ^ 2 * z ^ 4 + 4 * y ^ 2 * z ^ 4 + 16 * t ^ 3 * x * y * z + 16 * t ^ 3 * y * z ^ 2 + 8 * x ^ 3 * y * z ^ 2) - 16 * t ^ 3 * x ^ 2 * z) - 16 * t ^ 3 * y ^ 2 * z) - 16 * x ^ 3 * y ^ 2 * z) - 6 * t ^ 3 * z ^ 3) - 8 * x ^ 3 * y ^ 3) - 16 * y ^ 3 * z ^ 3) - 8 * t ^ 4 * x * y) - 8 * t ^ 4 * y * z) + 8 * x ^ 4 * y * z + 8 * t ^ 4 * x ^ 2 + 8 * t ^ 4 * y ^ 2 + 3 * t ^ 4 * z ^ 2 + 24 * x ^ 4 * y ^ 2) - 4 * x ^ 4 * z ^ 2) + 28 * y ^ 4 * z ^ 2) - 24 * x ^ 5 * y) - 24 * y ^ 5 * z) + 8 * x ^ 6 + 8 * y ^ 6
        end, function (x, y, z, t)
            return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((-24 * t * x * y * z ^ 5 + 180 * t * x * y ^ 2 * z ^ 4) - 416 * t * x * y ^ 3 * z ^ 3) + 360 * t * x * y ^ 4 * z ^ 2) - 96 * t * x * y ^ 5 * z) + 4 * t * y * z ^ 6 + 8 * x * y * z ^ 6) - 180 * t * x ^ 2 * y * z ^ 4) + 408 * t * x ^ 2 * y ^ 2 * z ^ 3) - 288 * t * x ^ 2 * y ^ 3 * z ^ 2) + 24 * t * x ^ 2 * y ^ 4 * z + 24 * t * x ^ 2 * z ^ 5) - 12 * t * y ^ 2 * z ^ 5) - 48 * x * y ^ 2 * z ^ 5) + 16 * t * x ^ 3 * y * z ^ 3) - 144 * t * x ^ 3 * y ^ 2 * z ^ 2) + 112 * t * x ^ 3 * y ^ 3 * z) - 16 * t * y ^ 3 * z ^ 4) + 88 * x * y ^ 3 * z ^ 4 + 72 * t * x ^ 4 * y * z ^ 2 + 24 * t * x ^ 4 * y ^ 2 * z) - 8 * t * x ^ 4 * z ^ 3) + 88 * t * y ^ 4 * z ^ 3) - 32 * x * y ^ 4 * z ^ 3) - 96 * t * x ^ 5 * y * z) - 96 * t * y ^ 5 * z ^ 2) - 48 * x * y ^ 5 * z ^ 2) + 32 * t * x ^ 6 * z + 32 * t * y ^ 6 * z + 32 * x * y ^ 6 * z + 6 * t ^ 2 * x * y * z ^ 4) - 144 * t ^ 2 * x * y ^ 2 * z ^ 3) + 408 * t ^ 2 * x * y ^ 3 * z ^ 2) - 360 * t ^ 2 * x * y ^ 4 * z) + 96 * t ^ 2 * x * y ^ 5 + 6 * t ^ 2 * y * z ^ 5 + 48 * x ^ 2 * y * z ^ 5 + 144 * t ^ 2 * x ^ 2 * y * z ^ 3) - 396 * t ^ 2 * x ^ 2 * y ^ 2 * z ^ 2) + 288 * t ^ 2 * x ^ 2 * y ^ 3 * z) - 24 * t ^ 2 * x ^ 2 * y ^ 4) - 6 * t ^ 2 * x ^ 2 * z ^ 4) + 6 * t ^ 2 * y ^ 2 * z ^ 4) - 84 * x ^ 2 * y ^ 2 * z ^ 4) - 24 * t ^ 2 * x ^ 3 * y * z ^ 2) + 144 * t ^ 2 * x ^ 3 * y ^ 2 * z) - 112 * t ^ 2 * x ^ 3 * y ^ 3) + 8 * t ^ 2 * y ^ 3 * z ^ 3 + 16 * x ^ 2 * y ^ 3 * z ^ 3) - 72 * t ^ 2 * x ^ 4 * y * z) - 24 * t ^ 2 * x ^ 4 * y ^ 2) + 12 * t ^ 2 * x ^ 4 * z ^ 2) - 84 * t ^ 2 * y ^ 4 * z ^ 2) + 24 * x ^ 2 * y ^ 4 * z ^ 2 + 96 * t ^ 2 * x ^ 5 * y + 96 * t ^ 2 * y ^ 5 * z + 48 * x ^ 2 * y ^ 5 * z) - 32 * t ^ 2 * x ^ 6) - 32 * t ^ 2 * y ^ 6) - 3 * t ^ 2 * z ^ 6) - 48 * x ^ 2 * y ^ 6) - 8 * x ^ 2 * z ^ 6) - 4 * y ^ 2 * z ^ 6) + 28 * t ^ 3 * x * y * z ^ 3) - 72 * t ^ 3 * x * y ^ 2 * z ^ 2) + 16 * t ^ 3 * x * y ^ 3 * z) - 28 * t ^ 3 * y * z ^ 4) - 8 * x ^ 3 * y * z ^ 4) + 72 * t ^ 3 * x ^ 2 * y * z ^ 2) - 24 * t ^ 3 * x ^ 2 * y ^ 2 * z) - 28 * t ^ 3 * x ^ 2 * z ^ 3) + 20 * t ^ 3 * y ^ 2 * z ^ 3 + 32 * x ^ 3 * y ^ 2 * z ^ 3 + 16 * t ^ 3 * x ^ 3 * y * z + 16 * t ^ 3 * y ^ 3 * z ^ 2 + 80 * x ^ 3 * y ^ 3 * z ^ 2) - 8 * t ^ 3 * x ^ 4 * z) - 8 * t ^ 3 * y ^ 4 * z) - 224 * x ^ 3 * y ^ 4 * z) + 9 * t ^ 3 * z ^ 5 + 144 * x ^ 3 * y ^ 5 + 24 * y ^ 3 * z ^ 5 + 6 * t ^ 4 * x * y * z ^ 2 + 36 * t ^ 4 * x * y ^ 2 * z) - 8 * t ^ 4 * x * y ^ 3) + 34 * t ^ 4 * y * z ^ 3) - 16 * x ^ 4 * y * z ^ 3) - 36 * t ^ 4 * x ^ 2 * y * z) + 12 * t ^ 4 * x ^ 2 * y ^ 2) - 6 * t ^ 4 * x ^ 2 * z ^ 2) - 30 * t ^ 4 * y ^ 2 * z ^ 2) - 120 * x ^ 4 * y ^ 2 * z ^ 2) - 8 * t ^ 4 * x ^ 3 * y) - 8 * t ^ 4 * y ^ 3 * z) + 272 * x ^ 4 * y ^ 3 * z + 4 * t ^ 4 * x ^ 4 + 4 * t ^ 4 * y ^ 4) - 12 * t ^ 4 * z ^ 4) - 192 * x ^ 4 * y ^ 4) + 4 * x ^ 4 * z ^ 4) - 52 * y ^ 4 * z ^ 4) - 24 * t ^ 5 * x * y * z) - 24 * t ^ 5 * y * z ^ 2) + 96 * x ^ 5 * y * z ^ 2 + 24 * t ^ 5 * x ^ 2 * z + 24 * t ^ 5 * y ^ 2 * z) - 192 * x ^ 5 * y ^ 2 * z) + 9 * t ^ 5 * z ^ 3 + 144 * x ^ 5 * y ^ 3 + 48 * y ^ 5 * z ^ 3 + 8 * t ^ 6 * x * y + 8 * t ^ 6 * y * z + 64 * x ^ 6 * y * z) - 8 * t ^ 6 * x ^ 2) - 8 * t ^ 6 * y ^ 2) - 3 * t ^ 6 * z ^ 2) - 48 * x ^ 6 * y ^ 2) - 32 * x ^ 6 * z ^ 2) - 16 * y ^ 6 * z ^ 2
        end, function (x, y, z, t)
            return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((200 * t * x * y * z ^ 9 + 4812 * t * x * y ^ 2 * z ^ 8) - 46976 * t * x * y ^ 3 * z ^ 7) + 172024 * t * x * y ^ 4 * z ^ 6) - 338160 * t * x * y ^ 5 * z ^ 5) + 383248 * t * x * y ^ 6 * z ^ 4) - 235264 * t * x * y ^ 7 * z ^ 3) + 60096 * t * x * y ^ 8 * z ^ 2) - 20 * t * y * z ^ 10) - 40 * x * y * z ^ 10) - 4812 * t * x ^ 2 * y * z ^ 8) + 75984 * t * x ^ 2 * y ^ 2 * z ^ 7) - 369808 * t * x ^ 2 * y ^ 3 * z ^ 6) + 891240 * t * x ^ 2 * y ^ 4 * z ^ 5) - 1178544 * t * x ^ 2 * y ^ 5 * z ^ 4) + 815104 * t * x ^ 2 * y ^ 6 * z ^ 3) - 225024 * t * x ^ 2 * y ^ 7 * z ^ 2) - 3840 * t * x ^ 2 * y ^ 8 * z) - 200 * t * x ^ 2 * z ^ 9) + 100 * t * y ^ 2 * z ^ 9 + 400 * x * y ^ 2 * z ^ 9) - 58016 * t * x ^ 3 * y * z ^ 7) + 395568 * t * x ^ 3 * y ^ 2 * z ^ 6) - 1063008 * t * x ^ 3 * y ^ 3 * z ^ 5) + 1483824 * t * x ^ 3 * y ^ 4 * z ^ 4) - 1110112 * t * x ^ 3 * y ^ 5 * z ^ 3) + 336544 * t * x ^ 3 * y ^ 6 * z ^ 2 + 15360 * t * x ^ 3 * y ^ 7 * z + 160 * t * y ^ 3 * z ^ 8) - 1480 * x * y ^ 3 * z ^ 8) - 197784 * t * x ^ 4 * y * z ^ 6) + 423624 * t * x ^ 4 * y ^ 2 * z ^ 5) - 474992 * t * x ^ 4 * y ^ 3 * z ^ 4) + 486112 * t * x ^ 4 * y ^ 4 * z ^ 3) - 237408 * t * x ^ 4 * y ^ 5 * z ^ 2) - 30720 * t * x ^ 4 * y ^ 6 * z) + 29008 * t * x ^ 4 * z ^ 7) - 2160 * t * y ^ 4 * z ^ 7) + 2240 * x * y ^ 4 * z ^ 7 + 129456 * t * x ^ 5 * y * z ^ 5) - 320304 * t * x ^ 5 * y ^ 2 * z ^ 4) - 71200 * t * x ^ 5 * y ^ 3 * z ^ 3) + 229728 * t * x ^ 5 * y ^ 4 * z ^ 2 + 38400 * t * x ^ 5 * y ^ 5 * z + 6080 * t * y ^ 5 * z ^ 6) - 160 * x * y ^ 5 * z ^ 6) + 106768 * t * x ^ 6 * y * z ^ 4 + 280288 * t * x ^ 6 * y ^ 2 * z ^ 3) - 321184 * t * x ^ 6 * y ^ 3 * z ^ 2) - 30720 * t * x ^ 6 * y ^ 4 * z) - 43152 * t * x ^ 6 * z ^ 5) - 8000 * t * y ^ 6 * z ^ 5) - 3520 * x * y ^ 6 * z ^ 5) - 219904 * t * x ^ 7 * y * z ^ 3) + 209664 * t * x ^ 7 * y ^ 2 * z ^ 2 + 15360 * t * x ^ 7 * y ^ 3 * z + 5120 * t * y ^ 7 * z ^ 4 + 3840 * x * y ^ 7 * z ^ 4) - 52416 * t * x ^ 8 * y * z ^ 2) - 3840 * t * x ^ 8 * y ^ 2 * z) + 54976 * t * x ^ 8 * z ^ 3) - 1280 * t * y ^ 8 * z ^ 3) - 1280 * x * y ^ 8 * z ^ 3) - 210 * t ^ 2 * x * y * z ^ 8) - 24768 * t ^ 2 * x * y ^ 2 * z ^ 7) + 179696 * t ^ 2 * x * y ^ 3 * z ^ 6) - 530472 * t ^ 2 * x * y ^ 4 * z ^ 5) + 839160 * t ^ 2 * x * y ^ 5 * z ^ 4) - 748576 * t ^ 2 * x * y ^ 6 * z ^ 3) + 345216 * t ^ 2 * x * y ^ 7 * z ^ 2) - 60096 * t ^ 2 * x * y ^ 8 * z) - 50 * t ^ 2 * y * z ^ 9) - 400 * x ^ 2 * y * z ^ 9) + 24768 * t ^ 2 * x ^ 2 * y * z ^ 7) - 218172 * t ^ 2 * x ^ 2 * y ^ 2 * z ^ 6) + 745512 * t ^ 2 * x ^ 2 * y ^ 3 * z ^ 5) - 1404624 * t ^ 2 * x ^ 2 * y ^ 4 * z ^ 4) + 1592304 * t ^ 2 * x ^ 2 * y ^ 5 * z ^ 3) - 972528 * t ^ 2 * x ^ 2 * y ^ 6 * z ^ 2) + 225024 * t ^ 2 * x ^ 2 * y ^ 7 * z + 3840 * t ^ 2 * x ^ 2 * y ^ 8 + 210 * t ^ 2 * x ^ 2 * z ^ 8) - 3666 * t ^ 2 * y ^ 2 * z ^ 8) - 5772 * x ^ 2 * y ^ 2 * z ^ 8) + 76952 * t ^ 2 * x ^ 3 * y * z ^ 6) - 430080 * t ^ 2 * x ^ 3 * y ^ 2 * z ^ 5) + 1027368 * t ^ 2 * x ^ 3 * y ^ 3 * z ^ 4) - 1491200 * t ^ 2 * x ^ 3 * y ^ 4 * z ^ 3) + 1197552 * t ^ 2 * x ^ 3 * y ^ 5 * z ^ 2) - 336544 * t ^ 2 * x ^ 3 * y ^ 6 * z) - 15360 * t ^ 2 * x ^ 3 * y ^ 7) + 28688 * t ^ 2 * y ^ 3 * z ^ 7 + 55776 * x ^ 2 * y ^ 3 * z ^ 7 + 215040 * t ^ 2 * x ^ 4 * y * z ^ 5) - 254784 * t ^ 2 * x ^ 4 * y ^ 2 * z ^ 4) + 254960 * t ^ 2 * x ^ 4 * y ^ 3 * z ^ 3) - 538560 * t ^ 2 * x ^ 4 * y ^ 4 * z ^ 2) + 237408 * t ^ 2 * x ^ 4 * y ^ 5 * z + 30720 * t ^ 2 * x ^ 4 * y ^ 6) - 38476 * t ^ 2 * x ^ 4 * z ^ 6) - 93692 * t ^ 2 * y ^ 4 * z ^ 6) - 194744 * x ^ 2 * y ^ 4 * z ^ 6) - 310680 * t ^ 2 * x ^ 5 * y * z ^ 4) + 588768 * t ^ 2 * x ^ 5 * y ^ 2 * z ^ 3 + 158640 * t ^ 2 * x ^ 5 * y ^ 3 * z ^ 2) - 229728 * t ^ 2 * x ^ 5 * y ^ 4 * z) - 38400 * t ^ 2 * x ^ 5 * y ^ 5) + 168600 * t ^ 2 * y ^ 5 * z ^ 5 + 360720 * x ^ 2 * y ^ 5 * z ^ 5) - 196256 * t ^ 2 * x ^ 6 * y * z ^ 3) - 437712 * t ^ 2 * x ^ 6 * y ^ 2 * z ^ 2) + 321184 * t ^ 2 * x ^ 6 * y ^ 3 * z + 30720 * t ^ 2 * x ^ 6 * y ^ 4 + 103560 * t ^ 2 * x ^ 6 * z ^ 4) - 178504 * t ^ 2 * y ^ 6 * z ^ 4) - 383728 * x ^ 2 * y ^ 6 * z ^ 4) + 329856 * t ^ 2 * x ^ 7 * y * z ^ 2) - 209664 * t ^ 2 * x ^ 7 * y ^ 2 * z) - 15360 * t ^ 2 * x ^ 7 * y ^ 3) + 104832 * t ^ 2 * y ^ 7 * z ^ 3 + 222464 * x ^ 2 * y ^ 7 * z ^ 3 + 52416 * t ^ 2 * x ^ 8 * y * z + 3840 * t ^ 2 * x ^ 8 * y ^ 2) - 82464 * t ^ 2 * x ^ 8 * z ^ 2) - 26208 * t ^ 2 * y ^ 8 * z ^ 2) - 54336 * x ^ 2 * y ^ 8 * z ^ 2) + 15 * t ^ 2 * z ^ 10 + 40 * x ^ 2 * z ^ 10 + 20 * y ^ 2 * z ^ 10) - 360 * t ^ 3 * x * y * z ^ 7) + 45388 * t ^ 3 * x * y ^ 2 * z ^ 6) - 261608 * t ^ 3 * x * y ^ 3 * z ^ 5) + 668712 * t ^ 3 * x * y ^ 4 * z ^ 4) - 958848 * t ^ 3 * x * y ^ 5 * z ^ 3) + 730656 * t ^ 3 * x * y ^ 6 * z ^ 2) - 219904 * t ^ 3 * x * y ^ 7 * z) + 4036 * t ^ 3 * y * z ^ 8 + 14504 * x ^ 3 * y * z ^ 8) - 45388 * t ^ 3 * x ^ 2 * y * z ^ 6) + 275508 * t ^ 3 * x ^ 2 * y ^ 2 * z ^ 5) - 648800 * t ^ 3 * x ^ 2 * y ^ 3 * z ^ 4) + 915768 * t ^ 3 * x ^ 2 * y ^ 4 * z ^ 3) - 827520 * t ^ 3 * x ^ 2 * y ^ 5 * z ^ 2) + 314848 * t ^ 3 * x ^ 2 * y ^ 6 * z + 360 * t ^ 3 * x ^ 2 * z ^ 7) - 15224 * t ^ 3 * y ^ 2 * z ^ 7) - 116032 * x ^ 3 * y ^ 2 * z ^ 7) - 27800 * t ^ 3 * x ^ 3 * y * z ^ 5) - 39824 * t ^ 3 * x ^ 3 * y ^ 2 * z ^ 4) + 221360 * t ^ 3 * x ^ 3 * y ^ 3 * z ^ 3 + 14752 * t ^ 3 * x ^ 3 * y ^ 4 * z ^ 2) - 174880 * t ^ 3 * x ^ 3 * y ^ 5 * z) - 6392 * t ^ 3 * y ^ 3 * z ^ 6) + 375424 * x ^ 3 * y ^ 3 * z ^ 6 + 19912 * t ^ 3 * x ^ 4 * y * z ^ 4) - 448680 * t ^ 3 * x ^ 4 * y ^ 2 * z ^ 3) + 440064 * t ^ 3 * x ^ 4 * y ^ 3 * z ^ 2 + 104896 * t ^ 3 * x ^ 4 * y ^ 4 * z + 13900 * t ^ 3 * x ^ 4 * z ^ 5 + 130092 * t ^ 3 * y ^ 4 * z ^ 5) - 628096 * x ^ 3 * y ^ 4 * z ^ 5) + 405600 * t ^ 3 * x ^ 5 * y * z ^ 3) - 536928 * t ^ 3 * x ^ 5 * y ^ 2 * z ^ 2) - 174880 * t ^ 3 * x ^ 5 * y ^ 3 * z) - 306208 * t ^ 3 * y ^ 5 * z ^ 4) + 517008 * x ^ 3 * y ^ 5 * z ^ 4 + 178976 * t ^ 3 * x ^ 6 * y * z ^ 2 + 314848 * t ^ 3 * x ^ 6 * y ^ 2 * z) - 135200 * t ^ 3 * x ^ 6 * z ^ 3) + 358624 * t ^ 3 * y ^ 6 * z ^ 3) - 46656 * x ^ 3 * y ^ 6 * z ^ 3) - 219904 * t ^ 3 * x ^ 7 * y * z) - 219904 * t ^ 3 * y ^ 7 * z ^ 2) - 227584 * x ^ 3 * y ^ 7 * z ^ 2) + 54976 * t ^ 3 * x ^ 8 * z + 54976 * t ^ 3 * y ^ 8 * z + 111232 * x ^ 3 * y ^ 8 * z) - 75 * t ^ 3 * z ^ 9) - 200 * y ^ 3 * z ^ 9) + 1320 * t ^ 4 * x * y * z ^ 6) - 43956 * t ^ 4 * x * y ^ 2 * z ^ 5) + 135728 * t ^ 4 * x * y ^ 3 * z ^ 4) - 213896 * t ^ 4 * x * y ^ 4 * z ^ 3) + 371544 * t ^ 4 * x * y ^ 5 * z ^ 2) - 365328 * t ^ 4 * x * y ^ 6 * z) + 109952 * t ^ 4 * x * y ^ 7) - 4636 * t ^ 4 * y * z ^ 7) + 58016 * x ^ 4 * y * z ^ 7 + 43956 * t ^ 4 * x ^ 2 * y * z ^ 5) - 137340 * t ^ 4 * x ^ 2 * y ^ 2 * z ^ 4) + 67880 * t ^ 4 * x ^ 2 * y ^ 3 * z ^ 3) - 180384 * t ^ 4 * x ^ 2 * y ^ 4 * z ^ 2) + 413760 * t ^ 4 * x ^ 2 * y ^ 5 * z) - 157424 * t ^ 4 * x ^ 2 * y ^ 6) - 1320 * t ^ 4 * x ^ 2 * z ^ 6) + 49128 * t ^ 4 * y ^ 2 * z ^ 6) - 151752 * x ^ 4 * y ^ 2 * z ^ 6) + 3224 * t ^ 4 * x ^ 3 * y * z ^ 4 + 292032 * t ^ 4 * x ^ 3 * y ^ 2 * z ^ 3) - 485880 * t ^ 4 * x ^ 3 * y ^ 3 * z ^ 2) - 7376 * t ^ 4 * x ^ 3 * y ^ 4 * z) + 87440 * t ^ 4 * x ^ 3 * y ^ 5) - 110560 * t ^ 4 * y ^ 3 * z ^ 5) + 98288 * x ^ 4 * y ^ 3 * z ^ 5) - 146016 * t ^ 4 * x ^ 4 * y * z ^ 3) + 501840 * t ^ 4 * x ^ 4 * y ^ 2 * z ^ 2) - 220032 * t ^ 4 * x ^ 4 * y ^ 3 * z) - 52448 * t ^ 4 * x ^ 4 * y ^ 4) - 1612 * t ^ 4 * x ^ 4 * z ^ 4) + 81732 * t ^ 4 * y ^ 4 * z ^ 4 + 320928 * x ^ 4 * y ^ 4 * z ^ 4) - 310680 * t ^ 4 * x ^ 5 * y * z ^ 2) + 268464 * t ^ 4 * x ^ 5 * y ^ 2 * z + 87440 * t ^ 4 * x ^ 5 * y ^ 3 + 45224 * t ^ 4 * y ^ 5 * z ^ 3) - 856000 * x ^ 4 * y ^ 5 * z ^ 3) - 89488 * t ^ 4 * x ^ 6 * y * z) - 157424 * t ^ 4 * x ^ 6 * y ^ 2) + 103560 * t ^ 4 * x ^ 6 * z ^ 2) - 143352 * t ^ 4 * y ^ 6 * z ^ 2) + 733248 * x ^ 4 * y ^ 6 * z ^ 2 + 109952 * t ^ 4 * x ^ 7 * y + 109952 * t ^ 4 * y ^ 7 * z) - 111232 * x ^ 4 * y ^ 7 * z) - 27488 * t ^ 4 * x ^ 8) - 27488 * t ^ 4 * y ^ 8) - 1176 * t ^ 4 * z ^ 8) - 83424 * x ^ 4 * y ^ 8) - 7252 * x ^ 4 * z ^ 8) + 820 * y ^ 4 * z ^ 8) - 1860 * t ^ 5 * x * y * z ^ 5) + 46716 * t ^ 5 * x * y ^ 2 * z ^ 4) - 46520 * t ^ 5 * x * y ^ 3 * z ^ 3) - 144552 * t ^ 5 * x * y ^ 4 * z ^ 2) + 129456 * t ^ 5 * x * y ^ 5 * z) - 16760 * t ^ 5 * y * z ^ 6) - 43152 * x ^ 5 * y * z ^ 6) - 46716 * t ^ 5 * x ^ 2 * y * z ^ 4) + 60420 * t ^ 5 * x ^ 2 * y ^ 2 * z ^ 3 + 307824 * t ^ 5 * x ^ 2 * y ^ 3 * z ^ 2) - 333000 * t ^ 5 * x ^ 2 * y ^ 4 * z) + 1860 * t ^ 5 * x ^ 2 * z ^ 5) - 9612 * t ^ 5 * y ^ 2 * z ^ 5) + 258912 * x ^ 5 * y ^ 2 * z ^ 5) - 27800 * t ^ 5 * x ^ 3 * y * z ^ 3) - 326544 * t ^ 5 * x ^ 3 * y ^ 2 * z ^ 2) + 450240 * t ^ 5 * x ^ 3 * y ^ 3 * z + 95896 * t ^ 5 * y ^ 3 * z ^ 4) - 618352 * x ^ 5 * y ^ 3 * z ^ 4) + 163272 * t ^ 5 * x ^ 4 * y * z ^ 2) - 333000 * t ^ 5 * x ^ 4 * y ^ 2 * z) + 13900 * t ^ 5 * x ^ 4 * z ^ 3) - 155828 * t ^ 5 * y ^ 4 * z ^ 3) + 747328 * x ^ 5 * y ^ 4 * z ^ 3 + 129456 * t ^ 5 * x ^ 5 * y * z + 129456 * t ^ 5 * y ^ 5 * z ^ 2) - 124032 * x ^ 5 * y ^ 5 * z ^ 2) - 43152 * t ^ 5 * x ^ 6 * z) - 43152 * t ^ 5 * y ^ 6 * z) - 556160 * x ^ 5 * y ^ 6 * z) + 5154 * t ^ 5 * z ^ 7 + 333696 * x ^ 5 * y ^ 7) - 1760 * y ^ 5 * z ^ 7) + 1320 * t ^ 6 * x * y * z ^ 4) - 50908 * t ^ 6 * x * y ^ 2 * z ^ 3) + 83192 * t ^ 6 * x * y ^ 3 * z ^ 2 + 48184 * t ^ 6 * x * y ^ 4 * z) - 43152 * t ^ 6 * x * y ^ 5) + 38636 * t ^ 6 * y * z ^ 5) - 86304 * x ^ 6 * y * z ^ 5) + 50908 * t ^ 6 * x ^ 2 * y * z ^ 3) - 121668 * t ^ 6 * x ^ 2 * y ^ 2 * z ^ 2) - 102608 * t ^ 6 * x ^ 2 * y ^ 3 * z) + 111000 * t ^ 6 * x ^ 2 * y ^ 4) - 1320 * t ^ 6 * x ^ 2 * z ^ 4) - 63688 * t ^ 6 * y ^ 2 * z ^ 4) + 77840 * x ^ 6 * y ^ 2 * z ^ 4 + 76952 * t ^ 6 * x ^ 3 * y * z ^ 2 + 108848 * t ^ 6 * x ^ 3 * y ^ 2 * z) - 150080 * t ^ 6 * x ^ 3 * y ^ 3) + 35720 * t ^ 6 * y ^ 3 * z ^ 3 + 264000 * x ^ 6 * y ^ 3 * z ^ 3) - 54424 * t ^ 6 * x ^ 4 * y * z) + 111000 * t ^ 6 * x ^ 4 * y ^ 2) - 38476 * t ^ 6 * x ^ 4 * z ^ 2) + 18100 * t ^ 6 * y ^ 4 * z ^ 2) - 990848 * x ^ 6 * y ^ 4 * z ^ 2) - 43152 * t ^ 6 * x ^ 5 * y) - 43152 * t ^ 6 * y ^ 5 * z) + 1223552 * x ^ 6 * y ^ 5 * z + 14384 * t ^ 6 * x ^ 6 + 14384 * t ^ 6 * y ^ 6) - 7836 * t ^ 6 * z ^ 6) - 500544 * x ^ 6 * y ^ 6) + 14384 * x ^ 6 * z ^ 6 + 2080 * y ^ 6 * z ^ 6) - 360 * t ^ 7 * x * y * z ^ 3) + 30288 * t ^ 7 * x * y ^ 2 * z ^ 2) - 58016 * t ^ 7 * x * y ^ 3 * z) - 28088 * t ^ 7 * y * z ^ 4) + 109952 * x ^ 7 * y * z ^ 4) - 30288 * t ^ 7 * x ^ 2 * y * z ^ 2) + 87024 * t ^ 7 * x ^ 2 * y ^ 2 * z + 360 * t ^ 7 * x ^ 2 * z ^ 3 + 57096 * t ^ 7 * y ^ 2 * z ^ 3) - 439808 * x ^ 7 * y ^ 2 * z ^ 3) - 58016 * t ^ 7 * x ^ 3 * y * z) - 58016 * t ^ 7 * y ^ 3 * z ^ 2) + 884736 * x ^ 7 * y ^ 3 * z ^ 2 + 29008 * t ^ 7 * x ^ 4 * z + 29008 * t ^ 7 * y ^ 4 * z) - 889856 * x ^ 7 * y ^ 4 * z) + 5154 * t ^ 7 * z ^ 5 + 333696 * x ^ 7 * y ^ 5) - 1280 * y ^ 7 * z ^ 5) - 210 * t ^ 8 * x * y * z ^ 2) - 7572 * t ^ 8 * x * y ^ 2 * z) + 14504 * t ^ 8 * x * y ^ 3 + 6722 * t ^ 8 * y * z ^ 3 + 109952 * x ^ 8 * y * z ^ 3 + 7572 * t ^ 8 * x ^ 2 * y * z) - 21756 * t ^ 8 * x ^ 2 * y ^ 2) + 210 * t ^ 8 * x ^ 2 * z ^ 2) - 13974 * t ^ 8 * y ^ 2 * z ^ 2) - 221184 * x ^ 8 * y ^ 2 * z ^ 2) + 14504 * t ^ 8 * x ^ 3 * y + 14504 * t ^ 8 * y ^ 3 * z + 222464 * x ^ 8 * y ^ 3 * z) - 7252 * t ^ 8 * x ^ 4) - 7252 * t ^ 8 * y ^ 4) - 1176 * t ^ 8 * z ^ 4) - 83424 * x ^ 8 * y ^ 4) - 27488 * x ^ 8 * z ^ 4) + 320 * y ^ 8 * z ^ 4 + 200 * t ^ 9 * x * y * z + 200 * t ^ 9 * y * z ^ 2) - 200 * t ^ 9 * x ^ 2 * z) - 200 * t ^ 9 * y ^ 2 * z) - 75 * t ^ 9 * z ^ 3) - 40 * t ^ 10 * x * y) - 40 * t ^ 10 * y * z) + 40 * t ^ 10 * x ^ 2 + 40 * t ^ 10 * y ^ 2 + 15 * t ^ 10 * z ^ 2
        end])
chevieset(:F4, :Discriminant, function ()
        return function (x1, x2, x3, x4)
                return ((((((((((((((((((((((((((((((((((((((((364500 * x1 * x2 ^ 3 * x3 ^ 2 * x4 + 54158625 * x1 * x2 ^ 5 * x3 ^ 2) - 189324 * x1 ^ 2 * x3 * x4 ^ 3) - 84457998 * x1 ^ 2 * x2 ^ 2 * x3 * x4 ^ 2) + 702196650 * x1 ^ 2 * x2 ^ 2 * x3 ^ 4 + 192564 * x2 ^ 2 * x4 ^ 3) - 4814100 * x2 ^ 2 * x3 ^ 3 * x4) + 4733100 * x1 ^ 2 * x3 ^ 4 * x4) - 12556317582 * x1 ^ 2 * x2 ^ 4 * x3 * x4) - 622114976971 * x1 ^ 2 * x2 ^ 6 * x3) - 186084 * x1 ^ 3 * x2 * x4 ^ 3) + 5016600 * x1 ^ 3 * x2 * x3 ^ 3 * x4) - 16200 * x3 ^ 3 * x4 ^ 2) - 82928718 * x1 ^ 3 * x2 ^ 3 * x4 ^ 2) + 692591400 * x1 ^ 3 * x2 ^ 3 * x3 ^ 3) - 12316379112 * x1 ^ 3 * x2 ^ 5 * x4) - 609597781711 * x1 ^ 3 * x2 ^ 7) + 324 * x4 ^ 4 + 42908589 * x2 ^ 4 * x4 ^ 2 + 41452209 * x1 ^ 4 * x3 ^ 2 * x4 ^ 2 + 12337192062 * x1 ^ 4 * x2 ^ 2 * x3 ^ 2 * x4) - 357875325 * x2 ^ 4 * x3 ^ 3) + 917712897954 * x1 ^ 4 * x2 ^ 4 * x3 ^ 2) - 345333825 * x1 ^ 4 * x3 ^ 5) + 81618138 * x1 ^ 5 * x2 * x3 * x4 ^ 2) - 731778525 * x1 ^ 5 * x2 * x3 ^ 4) + 24268541184 * x1 ^ 5 * x2 ^ 3 * x3 * x4 + 1803617805378 * x1 ^ 5 * x2 ^ 5 * x3 + 202500 * x3 ^ 6 + 4248528834 * x2 ^ 6 * x4 + 38588049 * x1 ^ 6 * x2 ^ 2 * x4 ^ 2) - 600612059326 * x1 ^ 6 * x2 ^ 2 * x3 ^ 3) - 3240 * x1 ^ 6 * x4 ^ 3) - 4030577814 * x1 ^ 6 * x3 ^ 3 * x4) + 11676178602 * x1 ^ 6 * x2 ^ 4 * x4 + 872143520439 * x1 ^ 6 * x2 ^ 6) - 11922426972 * x1 ^ 7 * x2 * x3 ^ 2 * x4) - 1773880309848 * x1 ^ 7 * x2 ^ 3 * x3 ^ 2) + 157714619689 * x2 ^ 8 + 1383480 * x1 ^ 8 * x3 * x4 ^ 2) - 11304558162 * x1 ^ 8 * x2 ^ 2 * x3 * x4) + 146854662829 * x1 ^ 8 * x3 ^ 4) - 1710859325763 * x1 ^ 8 * x2 ^ 4 * x3) + 1432080 * x1 ^ 9 * x2 * x4 ^ 2 + 580036214806 * x1 ^ 9 * x2 * x3 ^ 3) - 3397335204 * x1 ^ 9 * x2 ^ 3 * x4) - 535990067941 * x1 ^ 9 * x2 ^ 5) - 196915320 * x1 ^ 10 * x3 ^ 2 * x4) + 827101062789 * x1 ^ 10 * x2 ^ 2 * x3 ^ 2) - 407665440 * x1 ^ 11 * x2 * x3 * x4) + 499325143276 * x1 ^ 11 * x2 ^ 3 * x3) - 210993120 * x1 ^ 12 * x2 ^ 2 * x4) + 9342537960 * x1 ^ 12 * x3 ^ 3 + 105367602964 * x1 ^ 12 * x2 ^ 4 + 29012190480 * x1 ^ 13 * x2 * x3 ^ 2 + 30031354080 * x1 ^ 14 * x2 ^ 2 * x3 + 10362106560 * x1 ^ 15 * x2 ^ 3
            end
    end)
chevieset(:F4, :UnipotentClasses, function (c, p)
        local uc, Z, class
        if p == 0
            p = 1
        end
        Z = (n->begin
                    ComplexReflectionGroup(n, 1, 1)
                end)
        class = (n->begin
                    First(uc[:classes], (x->begin
                                x[:name] == n
                            end))
                end)
        uc = Dict{Symbol, Any}(:orderPicture => Concatenation("      \tF_4\n", "        |\n", "      F_4(a_1)\n", "        |\n", "      F_4(a_2)\n", "      /      \\\n", "   B_3       C_3\n", "      \\     /\n", "      F_4(a_3)\n", "\t |\n", "      C_3(a_1)\n", "     /       |\n", "~A_2+A_1     B_2\n", "    |   \\    |\n", "    |     A_2+~A_1\n", "    |        |\n", "  ~A_2      A_2\n", "     \\       |\n", "      A_1+~A_1\n", "\t |\n", "       ~A_1\n", "\t |\n", "\tA_1\n", "\t |\n", "\t 1"), :classes => [Dict{Symbol, Any}(:name => "1", :succ => ["A1"], :dynkin => [0, 0, 0, 0], :balacarter => [], :red => CoxeterGroup("F", 4)), Dict{Symbol, Any}(:name => "A_1", :succ => ["~A1"], :dynkin => [1, 0, 0, 0], :balacarter => [1], :red => CoxeterGroup("C", 3)), Dict{Symbol, Any}(:name => "\\tilde A_1", :succ => ["A1+~A1"], :dynkin => [0, 0, 0, 1], :Au => Z(gcd(2, p - 1)), :balacarter => [3], :red => CoxeterGroup("A", 3), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 3), #= none:44 =# @perm_str("(1,3)"))), Dict{Symbol, Any}(:name => "A_1{+}\\tilde A_1", :succ => ["A2", "~A2"], :dynkin => [0, 1, 0, 0], :balacarter => [1, 3], :red => CoxeterGroup("A", 1, "A", 1)), Dict{Symbol, Any}(:name => "\\tilde A_2", :succ => ["~A2+A1"], :dynkin => [0, 0, 0, 2], :Au => Z(gcd(2, p)), :balacarter => [3, 4], :red => CoxeterGroup("G", 2)), Dict{Symbol, Any}(:name => "A_2", :succ => ["A2+~A1"], :dynkin => [2, 0, 0, 0], :Au => Z(2), :balacarter => [1, 2], :red => CoxeterGroup("A", 2), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 2), #= none:51 =# @perm_str("(1,2)"))), Dict{Symbol, Any}(:name => "A_2{+}\\tilde A_1", :succ => ["~A2+A1", "B2"], :dynkin => [0, 0, 1, 0], :balacarter => [1, 2, 4], :red => Z(2)), Dict{Symbol, Any}(:name => "\\tilde A_2{+}A_1", :succ => ["C3(a1)"], :dynkin => [0, 1, 0, 1], :balacarter => [1, 3, 4], :red => Z(2)), Dict{Symbol, Any}(:name => "B_2", :succ => ["C3(a1)"], :dynkin => [2, 0, 0, 1], :Au => Z(gcd(p - 1, 2)), :balacarter => [2, 3], :red => CoxeterGroup("A", 1, "A", 1), :AuAction => ExtendedReflectionGroup(CoxeterGroup("A", 1, "A", 1), #= none:58 =# @perm_str("(1,2)"))), Dict{Symbol, Any}(:name => "C_3(a_1)", :shoji => "A_1{+}B_2", :succ => ["F4(a3)"], :dynkin => [1, 0, 1, 0], :Au => Z(gcd(p - 1, 2)), :balacarter => [2, -3, 4], :red => Z(2)), Dict{Symbol, Any}(:name => "F_4(a_3)", :shoji => "A_3{+}\\tilde A_1", :succ => ["C3", "B3"], :dynkin => [0, 2, 0, 0], :Au => CoxeterGroup("A", 4 - gcd(p, 2)), :balacarter => [-1, 2, -3, -4]), Dict{Symbol, Any}(:name => "C_3", :succ => ["F4(a2)"], :dynkin => [1, 0, 1, 2], :Au => Z(gcd(p, 2)), :balacarter => [2, 3, 4], :red => Z(2)), Dict{Symbol, Any}(:name => "B_3", :succ => ["F4(a2)"], :dynkin => [2, 2, 0, 0], :Au => Z(gcd(p, 2)), :balacarter => [1, 2, 3], :red => Z(2)), Dict{Symbol, Any}(:name => "F_4(a_2)", :shoji => "C_3{+}A_1", :succ => ["F4(a1)"], :dynkin => [0, 2, 0, 2], :Au => CoxeterGroup("B", gcd(p, 2)), :balacarter => [-1, 2, -3, 4]), Dict{Symbol, Any}(:name => "F_4(a_1)", :shoji => "B_4", :succ => ["F4"], :dynkin => [2, 2, 0, 2], :Au => Z(2), :balacarter => [1, 2, -3, 4]), Dict{Symbol, Any}(:name => "F_4", :succ => [], :dynkin => [2, 2, 2, 2], :Au => Z(gcd(12, p ^ 2)), :balacarter => [1, 2, 3, 4])], :springerSeries => [Dict{Symbol, Any}(:relgroup => CoxeterGroup("F", 4), :levi => [], :Z => [], :locsys => [[16, 1], [6, 1], [11, 2], [1, 1], [14, 1], [3, 1], [15, 1], [2, 1], [9, 1], [14, 2], [9, 2], [11, 4], [4, 1], [8, 1], [11, 3], [11, 5], [15, 2], [7, 1], [10, 1], [3, 2], [13, 1], [5, 1], [12, 1], [6, 2], [10, 2]]), Dict{Symbol, Any}(:relgroup => Z(1), :levi => [1, 2, 3, 4], :Z => [], :locsys => [[11, 1]], :parameter => [37])])
        if p == 2
            uc[:classes] = Append(uc[:classes], [Dict{Symbol, Any}(:name => "(\\tilde A_1)_2", :succ => ["~A1"], :red => CoxeterGroup("B", 3), :dimBu => 16), Dict{Symbol, Any}(:name => "(B_2)_2", :succ => ["B2", "C3(a1)2"], :red => CoxeterGroup("B", 2), :dimBu => 8, :Au => Z(2)), Dict{Symbol, Any}(:name => "(\\tilde A_2{+}A_1)_2", :succ => ["~A2+A1", "C3(a1)2"], :red => Z(2), :dimBu => 7), Dict{Symbol, Any}(:name => "C_3(a_1)_2", :succ => ["C3(a1)"], :red => Z(2), :dimBu => 6)])
            push!((class("1"))[:succ], "(~A1)2")
            push!((class("A_1{+}\\tilde A_1"))[:succ], "(B2)2")
            (class("\\tilde A_2"))[:succ] = ["(~A2+A1)2"]
            c = class("\\tilde A_2{+}A_1")
            c[:red] = Z(1)
            c[:dimBu] = 6
            delete!(c, :dynkin)
            c = class("B_2")
            c[:red] = Z(2)
            c[:dimBu] = 6
            delete!(c, :dynkin)
            delete!(c, :AuAction)
            c = class("C_3(a_1)")
            c[:red] = Z(1)
            c[:dimBu] = 5
            delete!(c, :dynkin)
            c = class("\\tilde A_2")
            c[:red] = CoxeterGroup("A", 2)
            c[:dimBu] = 9
            delete!(c, :dynkin)
            c[:AuAction] = ExtendedReflectionGroup(CoxeterGroup("A", 2), #= none:114 =# @perm_str("(1,2)"))
            c = class("\\tilde A_1")
            c[:red] = CoxeterGroup("B", 2)
            c[:dimBu] = 13
            delete!(c, :dynkin)
            delete!(c, :AuAction)
            uc[:springerSeries] = [Dict{Symbol, Any}(:relgroup => CoxeterGroup("F", 4), :levi => [], :Z => [], :locsys => [[16, 1], [6, 1], [5, 1], [1, 1], [14, 1], [17, 1], [14, 5], [2, 1], [18, 2], [14, 4], [9, 1], [20, 1], [4, 1], [8, 1], [11, 2], [11, 3], [15, 2], [7, 1], [19, 1], [3, 1], [13, 2], [5, 2], [12, 2], [6, 2], [10, 1]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup("B", 2), :levi => [2, 3], :Z => [], :locsys => [[12, 1], [14, 2], [18, 1], [16, 3], [13, 1]])]
            uc[:springerSeries] = Append(uc[:springerSeries], map((c->begin
                                Dict{Symbol, Any}(:relgroup => Z(1), :levi => [1, 2, 3, 4], :Z => [], :locsys => [c])
                            end), [[11, 1], [16, 2], [16, 4], [15, 1], [14, 3]]))
        elseif p == 3
            uc[:springerSeries] = Append(uc[:springerSeries], [Dict{Symbol, Any}(:relgroup => Z(1), :levi => [1, 2, 3, 4], :Z => [], :locsys => [[16, 2]]), Dict{Symbol, Any}(:relgroup => Z(1), :levi => [1, 2, 3, 4], :Z => [], :locsys => [[16, 3]])])
        end
        uc[:orderClasses] = map((c->begin
                        map((n->begin
                                    PositionProperty(uc[:classes], (c->begin
                                                (UnipotentClassOps[:Name])(c) == n
                                            end))
                                end), c[:succ])
                    end), uc[:classes])
        for c = uc[:classes]
            delete!(c, :succ)
            if !(haskey(c, :red))
                c[:red] = Z(1)
            end
            if !(haskey(c, :Au))
                c[:Au] = Z(1)
            end
            if !(haskey(c, :AuAction))
                c[:AuAction] = ExtendedReflectionGroup(c[:red], map((x->begin
                                    IdentityMat((c[:red])[:rank])
                                end), (c[:Au])[:generators]))
            end
        end
        return uc
    end)
chevieset(:F4, :KLeftCellRepresentatives, [Dict{Symbol, Any}(:character => [1], :duflo => [1, 2, 3, 4], :reps => ""), Dict{Symbol, Any}(:character => [4], :duflo => [25, 26, 27, 28], :reps => ""), Dict{Symbol, Any}(:character => [10], :duflo => [2, 1, 13, 45], :reps => ""), Dict{Symbol, Any}(:character => [13], :duflo => [1, 29, 31, 4], :reps => ""), Dict{Symbol, Any}(:character => [17, 5], :duflo => [1, 2, 7, 28], :reps => [[18, 40, 10, 3]]), Dict{Symbol, Any}(:character => [17, 7], :duflo => [5, 26, 6, 4], :reps => [[5, 9, 4, 34]]), Dict{Symbol, Any}(:character => [20, 6], :duflo => [35, 26, 6, 37], :reps => [[11, 25, 30, 31]]), Dict{Symbol, Any}(:character => [20, 8], :duflo => [14, 26, 27, 36], :reps => [[26, 35, 8, 36]]), Dict{Symbol, Any}(:character => [21], :duflo => [1, 2, 3, 43], :reps => ""), Dict{Symbol, Any}(:character => [22], :duflo => [20, 26, 39, 8], :reps => ""), Dict{Symbol, Any}(:character => [23], :duflo => [1, 23, 45, 4], :reps => ""), Dict{Symbol, Any}(:character => [24], :duflo => [2, 1, 32, 28], :reps => ""), Dict{Symbol, Any}(:character => [25, 18, 16, 14, 11], :duflo => [16, 14, 43, 15], :reps => [[1, 16, 31, 41], [1, 16, 45, 17], [2, 1, 36, 4], [2, 44, 4, 8], [14, 18, 39, 34], [14, 18, 45, 10], [14, 35, 15, 45], [14, 47, 10, 15], [16, 14, 30, 39], [18, 2, 41, 8], [18, 48, 8, 10], [38, 40, 10, 15], [42, 38, 8, 10]]), Dict{Symbol, Any}(:character => [25, 18, 16, 15, 11, 11, 2], :duflo => [22, 2, 30, 28], :reps => [[1, 9, 27, 41], [1, 9, 43, 17], [1, 23, 43, 28], [1, 35, 19, 45], [2, 18, 28, 43], [2, 18, 45, 19], [9, 20, 34, 39], [9, 20, 45, 15], [11, 2, 41, 12], [11, 48, 12, 6], [20, 11, 43, 6], [20, 42, 15, 43], [20, 47, 6, 15], [33, 42, 15, 10], [35, 44, 12, 6], [44, 33, 6, 15]]), Dict{Symbol, Any}(:character => [25, 19, 16, 14, 12], :duflo => [20, 47, 13, 8], :reps => [[1, 42, 4, 3], [11, 16, 37, 36], [11, 16, 45, 12], [11, 33, 13, 45], [11, 48, 12, 13], [16, 1, 39, 3], [16, 46, 3, 12], [20, 11, 32, 37], [20, 11, 43, 13], [22, 48, 8, 4], [29, 40, 4, 19], [35, 44, 12, 13], [40, 35, 3, 12]]), Dict{Symbol, Any}(:character => [25, 19, 16, 15, 12, 12, 3], :duflo => [25, 33, 3, 17], :reps => [[9, 18, 39, 34], [9, 18, 45, 10], [9, 35, 15, 45], [9, 47, 10, 15], [11, 20, 36, 30], [18, 46, 3, 10], [20, 9, 30, 39], [20, 9, 43, 15], [20, 26, 6, 43], [20, 48, 15, 6], [22, 47, 6, 4], [23, 48, 12, 3], [25, 47, 19, 4], [26, 42, 4, 19], [33, 44, 10, 15], [42, 33, 3, 10]]), Dict{Symbol, Any}(:character => [25, 25, 16, 15, 12, 11, 9], :duflo => [14, 26, 27, 13], :reps => [[1, 23, 41, 27], [5, 16, 34, 39], [5, 16, 45, 15], [5, 48, 15, 10], [11, 20, 41, 31], [11, 20, 45, 7], [11, 46, 7, 17], [14, 16, 34, 27], [16, 11, 27, 41], [16, 11, 43, 17], [20, 48, 8, 7], [22, 5, 41, 10], [22, 35, 8, 41], [22, 47, 10, 8], [26, 35, 8, 13], [26, 46, 19, 4], [29, 46, 15, 10], [35, 40, 7, 17], [44, 35, 8, 7]])])
chevieset(:G2, :CartanMat, function (arg...,)
        local a, type_
        if length(arg) > 0
            type_ = arg[1]
        else
            type_ = 1
        end
        a = [[2, -1], [-3, 2]]
        (a[1])[2] = -type_
        (a[2])[1] = 3 // (a[1])[2]
        return a
    end)
chevieset(:G2, :PrintDiagram, function (indices, title, type_)
        print(title, " ", indices[1])
        if type_ == 1
            print(" >>> ")
        elseif type_ == ER(3)
            print(" ==6== ")
        else
            print(" ?6? ")
        end
        print(indices[2], " \n")
    end)
chevieset(:G2, :ReflectionName, function (arg...,)
        local i, opt, type_
        if length(arg) == 1
            return "G2(?)"
        end
        type_ = arg[2]
        opt = arg[1]
        if type_ == 1
            if haskey(opt, :TeX)
                return "G_2"
            elseif haskey(opt, :arg)
                return "\"G\",2"
            else
                return "G2"
            end
        elseif type_ == ER(3)
            if haskey(opt, :TeX)
                return "G_{\\hbox{sym}2}"
            elseif haskey(opt, :arg)
                return "\"Gsym\",2"
            else
                return "Gsym2"
            end
        elseif haskey(opt, :TeX)
            return SPrint("G_2(", Format(type_ ^ 2 // 3, opt), ")")
        elseif haskey(opt, :arg)
            return SPrint("\"G\",", 2, ",", Format(type_ ^ 2 // 3, opt))
        else
            return SPrint("G2(", Format(type_ ^ 2 // 3, opt), ")")
        end
    end)
chevieset(:G2, :ParabolicRepresentatives, (s->begin
            (chevieget(:imp, :ParabolicRepresentatives))(6, 6, 2, s)
        end))
chevieset(:G2, :GeneratingRoots, [[1, -1, 0], [-2, 1, 1]])
chevieset(:G2, :HyperplaneRepresentatives, [1, 2])
chevieset(:G2, :Size, 12)
chevieset(:G2, :ReflectionDegrees, [2, 6])
chevieset(:G2, :NrConjugacyClasses, 6)
chevieset(:G2, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 6], [1, 3, 1], [1, 3, 2], [2, 1], [2, 2]], :extRefl => [1, 5, 2], :a => [0, 6, 1, 1, 1, 1], :A => [0, 6, 5, 5, 5, 5])
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        res[:B] = [0, 6, 3, 3, 5, 4]
        res[:spaltenstein] = ["1", "\\varepsilon", "\\varepsilon_l", "\\varepsilon_c", "\\theta'", "\\theta''"]
        return res
    end)
chevieset(:G2, :ClassNames, ["A_0", "\\tilde A_1", "A_1", "G_2", "A_2", "A_1+\\tilde A_1"])
chevieset(:G2, :ClassInfo, Dict{Symbol, Any}(:classtext => [[], [2], [1], [1, 2], [1, 2, 1, 2], [1, 2, 1, 2, 1, 2]], :classnames => chevieget(:G2, :ClassNames), :classparams => chevieget(:G2, :ClassNames), :orders => [1, 2, 2, 6, 3, 2], :classes => [1, 3, 3, 2, 2, 1]))
chevieset(:G2, :PowerMaps, [nothing, [1, 1, 1, 5, 5, 1], [1, 2, 3, 6, 1, 6]])
chevieset(:G2, :sparseFakeDegrees, [[1, 0], [1, 6], [1, 3], [1, 3], [1, 1, 1, 5], [1, 2, 1, 4]])
chevieset(:G2, :ClassParameter, (w->begin
            (chevieget(:G2, :ClassNames))[PositionProperty([[[]], [[2], [1, 2, 1], [2, 1, 2, 1, 2]], [[1], [2, 1, 2], [1, 2, 1, 2, 1]], [[2, 1], [1, 2]], [[2, 1, 2, 1], [1, 2, 1, 2]], [[1, 2, 1, 2, 1, 2]]], (x->begin
                            w in x
                        end))]
        end))
chevieset(:G2, :squv, function (para, sqrtpara)
        local u, v
        u = Product(para[1])
        v = Product(para[2])
        if u == v
            return u
        elseif u == v ^ 3
            return -(v ^ 2)
        elseif v == u ^ 3
            return -(u ^ 2)
        elseif sqrtpara[1] !== nothing && sqrtpara[2] !== nothing
            return sqrtpara[1] * sqrtpara[2]
        else
            return GetRoot(u * v, 2, "Hecke(G2)")
        end
    end)
chevieset(:G2, :HeckeCharTable, function (para, sqrtpara)
        local x, y, z, t, tbl, f1, f2, one
        x = (para[1])[1]
        y = (para[1])[2]
        z = (para[2])[1]
        t = (para[2])[2]
        one = (x * y * z * t) ^ 0
        f1 = function (u, v)
                return [1, v, u, v * u, v ^ 2 * u ^ 2, v ^ 3 * u ^ 3] * one
            end
        f2 = function (x, y, z, t, eps)
                local squv
                squv = eps * (chevieget(:G2, :squv))(para, sqrtpara)
                return [2, z + t, x + y, -squv, -x * y * z * t, 2 * squv ^ 3] * one
            end
        tbl = Dict{Symbol, Any}(:identifier => "H(G2)", :parameter => [[x, y], [z, t]], :size => 12, :powermap => chevieget(:G2, :PowerMaps), :irreducibles => [f1(x, z), f1(y, t), f1(y, z), f1(x, t), f2(x, y, z, t, 1), f2(x, y, z, t, -1)], :irredinfo => chevieget(:G2, :IrredInfo))
        Inherit(tbl, chevieget(:G2, :ClassInfo))
        tbl[:centralizers] = map((x->begin
                        tbl[:size] // x
                    end), tbl[:classes])
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        return tbl
    end)
chevieset(:G2, :HeckeRepresentation, function (para, sqrtpara, i)
        local one, squv, x, y, z, t
        one = Product(para[1]) ^ 0 * Product(para[2]) ^ 0
        x = (para[1])[1]
        y = (para[1])[2]
        z = (para[2])[1]
        t = (para[2])[2]
        if i == 1
            return [[[x]], [[z]]] * one
        elseif i == 2
            return [[[y]], [[t]]] * one
        elseif i == 3
            return [[[y]], [[z]]] * one
        elseif i == 4
            return [[[x]], [[t]]] * one
        else
            squv = (chevieget(:G2, :squv))(para, sqrtpara)
            if i == 6
                squv = -squv
            end
            return [[[y, -1], [0, x]], [[z, 0], [squv + y * z + x * t, t]]] * one
        end
    end)
chevieset(:G2, :Representation, function (i,)
        local para
        return (chevieget(:G2, :HeckeRepresentation))([[1, -1], [1, -1]], [1, 1], i)
    end)
chevieset(:G2, :PoincarePolynomial, function (param,)
        local u, v
        u = -((param[1])[1]) // (param[1])[2]
        v = -((param[2])[1]) // (param[2])[2]
        return (1 + u) * (v + 1) * (1 + u * v + u ^ 2 * v ^ 2)
    end)
chevieset(:G2, :SchurModels, Dict{Symbol, Any}(:f1 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0, 0], 1], [[0, 0, 1, -1], 1], [[1, -1, 1, -1], 3]]), :f2 => Dict{Symbol, Any}(:coeff => -2, :root => [1, -1, 1, -1] // 2, :factor => [-1, 1, 0, 0], :vcyc => [[[0, 0, 0, 0, 1], 3], [[0, 0, -1, 1, 1], 3]])))
chevieset(:G2, :SchurData, [Dict{Symbol, Any}(:name => "f1", :order => [1, 2, 3, 4]), Dict{Symbol, Any}(:name => "f1", :order => [2, 1, 4, 3]), Dict{Symbol, Any}(:name => "f1", :order => [2, 1, 3, 4]), Dict{Symbol, Any}(:name => "f1", :order => [1, 2, 4, 3]), Dict{Symbol, Any}(:name => "f2", :order => [1, 2, 3, 4], :rootPower => -1), Dict{Symbol, Any}(:name => "f2", :order => [1, 2, 3, 4], :rootPower => 1)])
chevieset(:G2, :SchurElement, function (phi, para, sqrtpara)
        local u, v, squv, p
        u = -((para[1])[1]) // (para[1])[2]
        v = -((para[2])[1]) // (para[2])[2]
        p = Position(((chevieget(:G2, :CharInfo))())[:charparams], phi)
        if p == 1
            return (1 + u) * (v + 1) * (u ^ 2 * v ^ 2 + u * v + 1)
        elseif p == 2
            return (((1 + u) * (v + 1) * (u ^ 2 * v ^ 2 + u * v + 1)) // u ^ 3) // v ^ 3
        elseif p == 3
            return ((u ^ 2 + v ^ 2 + u * v) * (1 + u) * (v + 1)) // u ^ 3
        elseif p == 4
            return ((u ^ 2 + v ^ 2 + u * v) * (1 + u) * (v + 1)) // v ^ 3
        end
        squv = ((chevieget(:G2, :squv))(para, sqrtpara) // (para[1])[2]) // (para[2])[2]
        if p == 6
            squv = -squv
        end
        return 2 * (u * v) ^ -1 * (u * v + 1 + squv) * ((u + v) - squv)
    end)
chevieset(:G2, :UnipotentCharacters, function ()
        return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "G", :indices => 1:2, :rank => 2), :levi => [], :parameterExponents => [1, 1], :charNumbers => 1:6, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [10], :eigenvalue => E(3, 2), :cuspidalName => "G_2[\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [7], :eigenvalue => -1, :cuspidalName => "G_2[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [9], :eigenvalue => E(3), :cuspidalName => "G_2[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [8], :eigenvalue => 1, :cuspidalName => "G_2[1]")], :families => [Family("S3", [5, 6, 4, 3, 8, 7, 9, 10], Dict{Symbol, Any}(:ennola => -5)), Family("C1", [1]), Family("C1", [2])], :a => [0, 6, 1, 1, 1, 1, 1, 1, 1, 1], :A => [0, 6, 5, 5, 5, 5, 5, 5, 5, 5], :charSymbols => [[[0], [0], [0], [0], [0], [2]], [[0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [1, 2]], [[0], [0], [1], 2, 0], [[0], [0], [1], 2, 1], [[0], [0], [0], [0], [1], [1]], [[0], [0], [0], [1], [0], [1]], [[0, 1], [0], [0, 1], [], [0], []], [[0, 1], [0, 1], [0], [], [], [0]], [[0, 1], [0], [0], [0, 1], [], []], [[0, 1], [0, 1], [], [0], [0], []]])
    end)
chevieset(:G2, :Invariants, [function (x, y)
            return -3 * x * y + 3 * x ^ 2 + y ^ 2
        end, function (x, y)
            return (((x ^ 2 * y ^ 4 - 6 * x ^ 3 * y ^ 3) + 13 * x ^ 4 * y ^ 2) - 12 * x ^ 5 * y) + 4 * x ^ 6
        end])
chevieset(:G2, :Discriminant, function ()
        return function (x, y)
                return 4 * x ^ 3 * y - 27 * y ^ 2
            end
    end)
chevieset(:G2, :UnipotentClasses, function (c, p)
        local uc, Z
        if p == 0
            p = 1
        end
        Z = (n->begin
                    ComplexReflectionGroup(n, 1, 1)
                end)
        uc = Dict{Symbol, Any}(:classes => [Dict{Symbol, Any}(:name => "1", :succ => ["A1"], :dynkin => [0, 0], :balacarter => [], :red => CoxeterGroup("G", 2)), Dict{Symbol, Any}(:name => "A_1", :succ => ["~A1"], :dynkin => [1, 0], :balacarter => [1], :red => Z(2)), Dict{Symbol, Any}(:name => "\\tilde A_1", :succ => ["G2(a1)"], :dynkin => [0, 1], :balacarter => [2], :red => Z(2 - (gcd(p, 3) - 1) // 2)), Dict{Symbol, Any}(:name => "G_2(a_1)", :succ => ["G2"], :dynkin => [2, 0], :balacarter => [1, -2], :Au => CoxeterGroup("A", 2 - (gcd(p, 3) - 1) // 2)), Dict{Symbol, Any}(:name => "G_2", :succ => [], :dynkin => [2, 2], :Au => Z(gcd(p, 6)), :balacarter => [1, 2])], :springerSeries => [Dict{Symbol, Any}(:relgroup => CoxeterGroup("G", 2), :levi => "", :Z => [], :locsys => [[5, 1], [1, 1], [4, 2], [2, 1], [4, 3], [3, 1]]), Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => [1, 2], :Z => [], :locsys => [[4, 1]], :parameter => [8])])
        if p == 2
            (((uc[:springerSeries])[1])[:locsys])[1] = [5, 2]
            push!(uc[:springerSeries], Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => [1, 2], :Z => [], :locsys => [[5, 1]]))
        elseif p == 3
            push!(uc[:classes], Dict{Symbol, Any}(:name => "(\\tilde A_1)_3", :succ => ["~A1"], :dimBu => 3, :red => Z(2), :Au => CoxeterGroup()))
            push!(((uc[:classes])[1])[:succ], "(~A1)3")
            ((uc[:classes])[3])[:dimBu] = 2
            delete!(uc.classes[3], :dynkin)
            (((uc[:springerSeries])[1])[:locsys])[[3, 5]] = [[6, 1], [4, 2]]
            for c = [2, 3]
                push!(uc[:springerSeries], Dict{Symbol, Any}(:relgroup => CoxeterGroup(), :levi => [1, 2], :Z => [], :locsys => [[5, c]]))
            end
        end
        uc[:orderClasses] = map((c->begin
                        map((n->begin
                                    PositionProperty(uc[:classes], (c->begin
                                                (UnipotentClassOps[:Name])(c) == n
                                            end))
                                end), c[:succ])
                    end), uc[:classes])
        for c = uc[:classes]
            delete!(c, :succ)
            if !(haskey(c, :red))
                c[:red] = Z(1)
            end
            if !(haskey(c, :Au))
                c[:Au] = Z(1)
            end
            c[:AuAction] = ExtendedReflectionGroup(c[:red], map((x->begin
                                IdentityMat(Rank(c[:red]))
                            end), 1:SemisimpleRank(c[:Au])))
        end
        return uc
    end)
chevieset(:G2, :KLeftCellRepresentatives, [Dict{Symbol, Any}(:character => [1], :duflo => [1, 2], :reps => ""), Dict{Symbol, Any}(:character => [2], :duflo => [7, 8], :reps => ""), Dict{Symbol, Any}(:character => [3, 5, 6], :duflo => [5, 8], :reps => [[6, 10], [12, 3]]), Dict{Symbol, Any}(:character => [4, 5, 6], :duflo => [7, 3], :reps => [[5, 10], [12, 4]])])
chevieset(["2E6", "E6", "E7", "E8", "2F4", "F4", "G2", "H3", "H4", "2G5", "G24", "G25", "G26", "G27", "G29", "G31", "G32", "G33", "G34"], :CharName, (t->begin
            function (x, option)
                local s, f
                for f = ["frame", "kondo", "spaltenstein", "gp"]
                    if haskey(option, (f,))
                        s = (chevieget(t, :CharInfo))()
                        if haskey(s, (f,))
                            s = (s[Symbol(f)])[Position(s[:charparams], x)]
                            if haskey(option, :TeX)
                                return s
                            else
                                return TeXStrip(s)
                            end
                        end
                    end
                end
                if haskey(option, :TeX)
                    s = "\\phi_"
                else
                    s = "phi"
                end
                s *= SPrint("{", x[1], ",", x[2], "}")
                if length(x) == 3
                    s = Append(s, map((y->begin
                                        '\''
                                    end), 1:x[3]))
                end
                return string(s)
            end
        end))
chevieset(["G24", "G25", "G26", "G27", "G29", "G31", "G32", "G33", "G34", "H3", "H4", "2E6", "2F4", "3D4", "E6", "E7", "E8", "F4", "G2"], :IrredInfo, (t->begin
            map((x->begin
                        Dict{Symbol, Any}(:charparam => x, :charname => (chevieget(t, :CharName))(x, Dict{Symbol, Any}(:TeX => true)))
                    end), ((chevieget(t, :CharInfo))())[:charparams])
        end))
chevieset(["G24", "G25", "G26", "G27", "G29", "G31", "G32", "G33", "G34", "E6", "E7", "E8", "2E6", "2F4", "3D4", "H3", "H4"], :ReflectionName, (t->begin
            function (option,)
                local i, o
                i = ["G24", "G25", "G26", "G27", "G29", "G31", "G32", "G33", "G34", "E6", "E7", "E8", "2E6", "2F4", "3D4", "H3", "H4"]
                o = ["G_{24}", "G_{25}", "G_{26}", "G_{27}", "G_{29}", "G_{31}", "G_{32}", "G_{33}", "G_{34}", "E_6", "E_7", "E_8", "{}^2E_6", "{}^2F_4", "{}^3D_4", "H_3", "H_4"]
                if haskey(option, :TeX)
                    return o[Position(i, t)]
                else
                    return t
                end
            end
        end))
chevieset(["A", "D", "2A", "2D"], :ReflectionName, (t->begin
            function (r, option)
                local i, o
                i = ["A", "D", "2A", "2D"]
                o = ["A", "D", "{}^2A", "{}^2D"]
                if haskey(option, :arg)
                    return SPrint(FormatGAP(t), ",", r)
                elseif haskey(option, :TeX)
                    return SPrint(o[Position(i, t)], "_", TeXBracket(r))
                else
                    return SPrint(t, r)
                end
            end
        end))
chevieset(["3D4", "E6", "2E6", "E7", "E8", "F4", "2F4", "G2", "H3", "H4"], :CharTable, (t->begin
            function ()
                local res, rank
                rank = Position("12345678", t[length(t)])
                res = (chevieget(t, :HeckeCharTable))(map((x->begin
                                    [1, -1]
                                end), 1:rank), map((x->begin
                                    1
                                end), [1, rank]))
                ((CHEVIE[:compat])[:ChangeIdentifier])(res, SPrint("W(", t, ")"))
                return res
            end
        end))
chevieset(["G24", "G27", "G29", "G33", "G34", "H3", "H4", "E6", "E7", "E8"], :PoincarePolynomial, (t->begin
            function (q,)
                return Product(chevieget(t, :ReflectionDegrees), (x->begin
                                Sum(0:x - 1, (y->begin
                                            (-((q[1])[1]) // (q[1])[2]) ^ y
                                        end))
                            end))
            end
        end))
chevieset(["G24", "G25", "G26", "G27", "G29"], :Representation, (t->begin
            function (i,)
                local para
                para = chevieget(t, :EigenvaluesGeneratingReflections)
                para = map((x->begin
                                map((j->begin
                                            E(1 // x, j)
                                        end), 0:1 // x - 1)
                            end), para)
                return (chevieget(t, :HeckeRepresentation))(para, [], i)
            end
        end))
chevieset(["G2", "F4", "H3", "E6", "G24", "G25", "G26", "G27", "G29", "G31", "G32", "G33", "G34"], :SemisimpleRank, function (t,)
        local r
        r = chevieget(t, :GeneratingRoots)
        if r isa Function
            r = r()
        end
        return length(r[1])
    end)
chevieset(["A", "B", "D"], :SemisimpleRank, (t->begin
            r->begin
                    r
                end
        end))
chevieset(["G2", "F4", "H3", "E6", "G24", "G25", "G26", "G27", "G29", "G32", "G33", "G34"], :FakeDegree, (t->begin
            function (phi, q)
                local f
                f = (chevieget(t, :sparseFakeDegrees))[Position(((chevieget(t, :CharInfo))())[:charparams], phi)]
                return Sum(1:3 - 1:length(f) - 1, (i->begin
                                f[i] * q ^ f[i + 1]
                            end))
            end
        end))
chevieset(["H4", "E7", "E8", "G31"], :FakeDegree, (t->begin
            function (phi, q)
                local f, res
                f = (chevieget(t, :cycpolfakedegrees))[Position(((chevieget(t, :CharInfo))())[:charparams], phi)]
                if IsList(f[1])
                    res = horner(q ^ 2, f[1])
                else
                    res = f[1]
                end
                f = copy(f)
                f[1] = 1
                return res * Value(CycPol(f), q)
            end
        end))
chevieset(["H4", "E7", "E8", "G31"], :HighestPowerFakeDegrees, (t->begin
            function ()
                return map(function (f,)
                            local res
                            if IsList(f[1])
                                res = (2 * length(f[1]) + f[2]) - 2
                            else
                                res = f[2]
                            end
                            return res + Sum(f[3:length(f)], Phi)
                        end, chevieget(t, :cycpolfakedegrees))
            end
        end))
chevieset(["E6", "G32", "G33", "G34", "G2", "F4", "H3", "G24", "G25", "G26", "G27", "G29"], :HighestPowerFakeDegrees, (t->begin
            function ()
                return map((x->begin
                                x[length(x)]
                            end), chevieget(t, :sparseFakeDegrees))
            end
        end))
chevieset(["G2", "F4", "H3", "H4", "G24", "G25", "G26", "G27", "G29", "E6", "E7", "E8", "G31", "G32", "G33", "G34"], :LowestPowerFakeDegrees, (t->begin
            function ()
                return map((x->begin
                                x[2]
                            end), chevieget(t, :sparseFakeDegrees))
            end
        end))
chevieset(["E6", "E7", "E8"], :PrintDiagram, (t->begin
            function (indices, title)
                local i, r, digits, l
                digits = "678"
                print(title, " ")
                r = Position(digits, t[2]) + 5
                l = length(string(indices[1])) + length(string(indices[3])) + 4
                print(pad("", l - 1), indices[2], "\n")
                print(pad("", length(title) + l), "|\n")
                print(SPrint(pad("", length(title) - 2), indices[1]))
                for i = 3:r
                    print(" - ", indices[i])
                end
                print("\n")
            end
        end))
chevieset(["H3", "H4"], :PrintDiagram, (t->begin
            function (indices, title)
                local i
                print(title, " ")
                print(SPrint(pad("", length(string(indices[1])) - 1), "5 \n"))
                print(pad("", length(title) - 1), indices[1], " - ", indices[2], " - ", indices[3])
                if t == "H4"
                    print(" - ", indices[4])
                end
                print("\n")
            end
        end))
chevieset(["G24", "G27", "G29", "G33", "G34", "H3", "H4", "E6", "E7", "E8"], :HighestPowerGenericDegrees, (t->begin
            function ()
                local N
                N = Sum(chevieget(t, :ReflectionDegrees), (x->begin
                                x - 1
                            end))
                return map((x->begin
                                N - Degree(CycPol(x))
                            end), chevieget(t, :CycPolSchurElements))
            end
        end))
chevieset(["G24", "G27", "G29", "G33", "G34", "H3", "H4", "E6", "E7", "E8"], :LowestPowerGenericDegrees, (t->begin
            function ()
                return map((x->begin
                                -(x[2])
                            end), chevieget(t, :CycPolSchurElements))
            end
        end))
chevieset(["F4", "G2", "G25", "G26"], :DecompositionMatrix, (t->begin
            function (p,)
                local T, m
                T = (chevieget(t, :CharTable))()
                T[:name] = T[:identifier]
                m = DecompositionMatrix(mod(T, p))
                return map((c->begin
                                [c[1], (m[c[1]])[c[2]]]
                            end), BlocksMat(m))
            end
        end))
chevieset(["G24", "G27", "G29", "G33", "G34", "E6", "E7", "E8", "H3", "H4"], :SchurElement, (t->begin
            function (arg...,)
                return Value(CycPol((chevieget(t, :CycPolSchurElements))[Position(((chevieget(t, :CharInfo))())[:charparams], arg[1])]), -(((arg[2])[1])[1]) // ((arg[2])[1])[2])
            end
        end))
chevieset(["G24", "G27", "G29", "G33", "G34", "E6", "E7", "E8", "H3", "H4"], :FactorizedSchurElement, (t->begin
            function (arg...,)
                local c, q, res, v, e
                c = (chevieget(t, :CycPolSchurElements))[Position(((chevieget(t, :CharInfo))())[:charparams], arg[1])]
                q = -(((arg[2])[1])[1]) // ((arg[2])[1])[2]
                res = Dict{Symbol, Any}(:factor => Mvp(c[1] * q ^ c[2]), :operations => FactorizedSchurElementsOps)
                res[:vcyc] = map((v->begin
                                Dict{Symbol, Any}(:monomial => q, :pol => CycPol([1, 0, v]))
                            end), c[3:length(c)])
                return (FactorizedSchurElementsOps[:Simplify])(res)
            end
        end))
chevieset(["G2", "F4", "G25", "G26", "G32"], :FactorizedSchurElement, (t->begin
            function (arg...,)
                local Y, ci
                Y = Concatenation((arg[2])[chevieget(t, :HyperplaneRepresentatives)])
                ci = (chevieget(t, :SchurData))[Position(((chevieget(t, :CharInfo))())[:charparams], arg[1])]
                return ApplyFunc(VFactorSchurElement, Concatenation([Y, (chevieget(t, :SchurModels))[Symbol(ci[:name])], ci], arg[3:length(arg)]))
            end
        end))
chevieset(["F4", "G25", "G26", "G32"], :SchurElement, (t->begin
            function (arg...,)
                local Y, ci
                Y = Concatenation((arg[2])[chevieget(t, :HyperplaneRepresentatives)])
                ci = (chevieget(t, :SchurData))[Position(((chevieget(t, :CharInfo))())[:charparams], arg[1])]
                return VcycSchurElement(Y, (chevieget(t, :SchurModels))[Symbol(ci[:name])], ci)
            end
        end))
VFactorSchurElement = function (arg...,)
        local para, r, data, res, n, monomial, den, root
        n = length(arg[1])
        if length(arg) >= 3
            data = arg[3]
            para = (arg[1])[data[:order]]
        else
            para = copy(arg[1])
        end
        monomial = (v->begin
                    Product(1:length(v), (i->begin
                                para[i] ^ v[i]
                            end))
                end)
        r = arg[2]
        res = Dict{Symbol, Any}()
        if haskey(r, :coeff)
            res[:factor] = r[:coeff]
        else
            res[:factor] = 1
        end
        if haskey(r, :factor)
            res[:factor] = res[:factor] * monomial(r[:factor])
        end
        if haskey(r, :root)
            den = Lcm(map(denominator, r[:root]))
            root = monomial(r[:root] * den)
            if haskey(r, :rootCoeff)
                root = root * r[:rootCoeff]
            end
            para[n + 1] = GetRoot(root, den)
            if IsBound(data)
                para[n + 1] = para[n + 1] * data[:rootPower]
            end
        elseif haskey(r, :rootUnity)
            para[n + 1] = r[:rootUnity] ^ data[:rootUnityPower]
        end
        res[:vcyc] = map((v->begin
                        Dict{Symbol, Any}(:monomial => monomial(v[1]), :pol => CycPol([1, 0, v[2]]))
                    end), r[:vcyc])
        if res[:factor] == 0 || res[:vcyc] == []
            return res[:factor]
        end
        res[:operations] = FactorizedSchurElementsOps
        return (FactorizedSchurElementsOps[:Simplify])(res)
    end