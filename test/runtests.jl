# auto-generated tests from julia-repl docstrings
using Test, Gapjm
function mytest(a::String,b::String)
  omit=a[end]==';'
  a=repr(MIME("text/plain"),eval(Meta.parse(a)),context=:limit=>true)
  if omit a="nothing" end
  a=replace(a,r" *(\n|$)"s=>s"\1")
  a=replace(a,r"\n$"s=>"")
  b=replace(b,r" *(\n|$)"s=>s"\1")
  b=replace(b,r"\n$"s=>"")
  i=1
  while i<=lastindex(a) && i<=lastindex(b) && a[i]==b[i]
    i=nextind(a,i)
  end
  if a!=b print("exec=$(repr(a[i:end]))\nmanl=$(repr(b[i:end]))\n") end
  a==b
end
@testset "Chars.jl" begin
@test mytest("W=coxgroup(:A,3)","A₃")
@test mytest("CharTable(W)","CharTable(H(G(1,1,4)))\n    │1111 211 22 31  4\n────┼──────────────────\n1111│   1  -1  1  1 -1\n211 │   3  -1 -1  .  1\n22  │   2   .  2 -1  .\n31  │   3   1 -1  . -1\n4   │   1   1  1  1  1")
@test mytest("W=coxgroup(:G,2)","G₂")
@test mytest("ct=CharTable(W)","CharTable(W(G2))\n     │A₀ Ã₁ A₁ G₂ A₂ A₁+Ã₁\n─────┼─────────────────────\nφ₁‚₀ │ 1  1  1  1  1     1\nφ₁‚₆ │ 1 -1 -1  1  1     1\nφ′₁‚₃│ 1  1 -1 -1  1    -1\nφ″₁‚₃│ 1 -1  1 -1  1    -1\nφ₂‚₁ │ 2  .  .  1 -1    -2\nφ₂‚₂ │ 2  .  . -1 -1     2")
@test mytest("ct.charnames","6-element Array{String,1}:\n \"\\\\phi_{1,0}\"\n \"\\\\phi_{1,6}\"\n \"\\\\phi_{1,3}'\"\n \"\\\\phi_{1,3}''\"\n \"\\\\phi_{2,1}\"\n \"\\\\phi_{2,2}\"")
@test mytest("ct.classnames","6-element Array{String,1}:\n \"A_0\"\n \"\\\\tilde A_1\"\n \"A_1\"\n \"G_2\"\n \"A_2\"\n \"A_1+\\\\tilde A_1\"")
@test mytest("Chars.fakedegree(coxgroup(:A,2),[[2,1]],Pol(:q))","Pol{Cyc{Int64}}: q²+q")
@test mytest("fakedegrees(coxgroup(:A,2),Pol(:q))","3-element Array{Pol,1}:\n q³\n q²+q\n 1")
@test mytest("charinfo(coxgroup(:G,2))[:charparams]","6-element Array{Array{Array{Int64,1},1},1}:\n [[1, 0]]\n [[1, 6]]\n [[1, 3, 1]]\n [[1, 3, 2]]\n [[2, 1]]\n [[2, 2]]")
@test mytest("charinfo(coxgroup(:D,4))[:positionId]","13")
@test mytest("charinfo(coxgroup(:D,4))[:positionDet]","4")
@test mytest("charinfo(coxgroup(:D,4))[:extRefl]","5-element Array{Int64,1}:\n 13\n 11\n  5\n  3\n  4")
@test mytest("charinfo(coxgroup(:D,4))[:b]","13-element Array{Int64,1}:\n  6\n  6\n  7\n 12\n  4\n  3\n  6\n  2\n  2\n  4\n  1\n  2\n  0")
@test mytest("charinfo(coxgroup(:D,4))[:B]","13-element Array{Int64,1}:\n 10\n 10\n 11\n 12\n  8\n  9\n 10\n  6\n  6\n  8\n  5\n  6\n  0")
@test mytest("charinfo(coxgroup(:D,4))[:a]","13-element Array{Int64,1}:\n  6\n  6\n  7\n 12\n  3\n  3\n  6\n  2\n  2\n  3\n  1\n  2\n  0")
@test mytest("charinfo(coxgroup(:D,4))[:A]","13-element Array{Int64,1}:\n 10\n 10\n 11\n 12\n  9\n  9\n 10\n  6\n  6\n  9\n  5\n  6\n  0")
@test mytest("charinfo(ComplexReflectionGroup(22))[:opdam]","(3,5)(4,6)(11,13)(12,14)(17,18)")
@test mytest("charinfo(coxgroup(:A,2))","Dict{Symbol,Any} with 9 entries:\n  :a           => [3, 1, 0]\n  :b           => [3, 1, 0]\n  :positionId  => 3\n  :charnames   => [\"111\", \"21\", \"3\"]\n  :A           => [3, 2, 0]\n  :B           => [3, 2, 0]\n  :extRefl     => [3, 2, 1]\n  :charparams  => Array{Array{Int64,1},1}[[[1, 1, 1]], [[2, 1]], [[3]]]\n  :positionDet => 1")
@test mytest("charinfo(coxgroup(:G,2))[:spaltenstein]","6-element Array{String,1}:\n \"1\"\n \"\\\\varepsilon\"\n \"\\\\varepsilon_l\"\n \"\\\\varepsilon_c\"\n \"\\\\theta'\"\n \"\\\\theta''\"")
@test mytest("classinfo(coxgroup(:A,2))","Dict{Symbol,Any} with 5 entries:\n  :classes     => [1, 3, 2]\n  :orders      => [1, 2, 3]\n  :classtext   => Array{Int64,1}[[], [1], [1, 2]]\n  :classnames  => [\"111\", \"21\", \"3\"]\n  :classparams => Array{Int64,1}[[1, 1, 1], [2, 1], [3]]")
@test mytest("representation(ComplexReflectionGroup(24),3)","3-element Array{Array{Cyc{Rational{Int64}},2},1}:\n [1 0 0; -1 -1 0; -1 0 -1]\n [-1 0 -1; 0 -1 (1-√-7)/2; 0 0 1]\n [-1 -1 0; 0 1 0; 0 (1+√-7)/2 -1]")
@test mytest("representations(coxgroup(:B,2))","5-element Array{Array{Array{Int64,2},1},1}:\n [[1], [-1]]\n [[1 0; -1 -1], [1 2; 0 -1]]\n [[-1], [-1]]\n [[1], [1]]\n [[-1], [1]]")
@test mytest("W=coxgroup(:G,2)","G₂")
@test mytest("charnames(W;limit=true)","6-element Array{String,1}:\n \"φ₁‚₀\"\n \"φ₁‚₆\"\n \"φ′₁‚₃\"\n \"φ″₁‚₃\"\n \"φ₂‚₁\"\n \"φ₂‚₂\"")
@test mytest("charnames(W;TeX=true)","6-element Array{String,1}:\n \"\\\\phi_{1,0}\"\n \"\\\\phi_{1,6}\"\n \"\\\\phi_{1,3}'\"\n \"\\\\phi_{1,3}''\"\n \"\\\\phi_{2,1}\"\n \"\\\\phi_{2,2}\"")
@test mytest("charnames(W;spaltenstein=true,limit=true)","6-element Array{String,1}:\n \"1\"\n \"ε\"\n \"εₗ\"\n \"ε_c\"\n \"θ′\"\n \"θ″\"")
@test mytest("charnames(W;spaltenstein=true,TeX=true)","6-element Array{String,1}:\n \"1\"\n \"\\\\varepsilon\"\n \"\\\\varepsilon_l\"\n \"\\\\varepsilon_c\"\n \"\\\\theta'\"\n \"\\\\theta''\"")
@test mytest("g=coxgroup(:G,2)","G₂")
@test mytest("u=reflection_subgroup(g,[1,6])","G₂₍₁₅₎=A₂")
@test mytest("InductionTable(u,g)","Induction Table\n     │111 21 3\n─────┼─────────\nφ₁‚₀ │  .  . 1\nφ₁‚₆ │  1  . .\nφ′₁‚₃│  1  . .\nφ″₁‚₃│  .  . 1\nφ₂‚₁ │  .  1 .\nφ₂‚₂ │  .  1 .")
end
@testset "Combinat.jl" begin
@test mytest("combinations([1,2,2,3])","12-element Array{Array{Int64,1},1}:\n []\n [1]\n [2]\n [3]\n [1, 2]\n [1, 3]\n [2, 2]\n [2, 3]\n [1, 2, 2]\n [1, 2, 3]\n [2, 2, 3]\n [1, 2, 2, 3]")
@test mytest("partitions(7)","15-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1, 1, 1, 1]\n [2, 1, 1, 1, 1, 1]\n [2, 2, 1, 1, 1]\n [2, 2, 2, 1]\n [3, 1, 1, 1, 1]\n [3, 2, 1, 1]\n [3, 2, 2]\n [3, 3, 1]\n [4, 1, 1, 1]\n [4, 2, 1]\n [4, 3]\n [5, 1, 1]\n [5, 2]\n [6, 1]\n [7]")
@test mytest("partition_tuples(3,2)","10-element Array{Array{Array{Int64,1},1},1}:\n [[1, 1, 1], []]\n [[1, 1], [1]]\n [[1], [1, 1]]\n [[], [1, 1, 1]]\n [[2, 1], []]\n [[1], [2]]\n [[2], [1]]\n [[], [2, 1]]\n [[3], []]\n [[], [3]]")
@test mytest("conjugate_partition([4,2,1])","4-element Array{Int64,1}:\n 3\n 2\n 1\n 1")
@test mytest("conjugate_partition([6])","6-element Array{Int64,1}:\n 1\n 1\n 1\n 1\n 1\n 1")
@test mytest("dominates([5,4],[4,4,1])","true")
@test mytest("compositions(4)","8-element Array{Array{Int64,1},1}:\n [1, 1, 1, 1]\n [2, 1, 1]\n [1, 2, 1]\n [3, 1]\n [1, 1, 2]\n [2, 2]\n [1, 3]\n [4]")
@test mytest("compositions(4,2)","3-element Array{Array{Int64,1},1}:\n [3, 1]\n [2, 2]\n [1, 3]")
end
@testset "Cosets.jl" begin
@test mytest("W=coxgroup(:B,2)","B₂")
@test mytest("W=coxgroup(:Bsym,2)","Bsym₂")
@test mytest("spets(W,Perm(1,2))","²Bsym₂")
@test mytest("CharTable(W)","CharTable(H(G(2,1,2)))\n   │11. 1.1 .11 2. .2\n───┼──────────────────\n11.│  1   1   1 -1 -1\n1.1│  2   .  -2  .  .\n.11│  1  -1   1 -1  1\n2. │  1   1   1  1  1\n.2 │  1  -1   1  1 -1")
@test mytest("W=coxgroup(:Bsym,2)","Bsym₂")
@test mytest("WF=spets(W,Perm(1,2))","²Bsym₂")
@test mytest("subspets(WF,Int[],W(1))",".Φ‴₈")
@test mytest("W=coxgroup(:B,2)","B₂")
@test mytest("twistings(W,[1])","2-element Array{spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}},1}:\n Ã₁Φ₁\n Ã₁Φ₂")
@test mytest("twistings(W,[2])","2-element Array{spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}},1}:\n A₁Φ₁\n A₁Φ₂")
@test mytest("W=coxgroup(:B,2)","B₂")
@test mytest("twistings(W,[2,4])","2-element Array{spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}},1}:\n A₁×A₁\n (A₁A₁)")
end
@testset "CoxGroups.jl" begin
@test mytest("W=CoxSym(4)","𝔖 ₄")
@test mytest("p=W(1,3,2,1,3)","Perm{UInt8}: (1,4)")
@test mytest("word(W,p)","5-element Array{Int64,1}:\n 1\n 2\n 3\n 2\n 1")
@test mytest("word(W,longest(W))","6-element Array{Int64,1}:\n 1\n 2\n 1\n 3\n 2\n 1")
@test mytest("w0=longest(W)","Perm{UInt8}: (1,4)(2,3)")
@test mytest("length(W,w0)","6")
@test mytest("map(i->word(W,reflection(W,i)),1:nref(W))","6-element Array{Array{Int64,1},1}:\n [1]\n [2]\n [3]\n [1, 2, 1]\n [2, 3, 2]\n [1, 2, 3, 2, 1]")
@test mytest("[length(elements(W,i)) for i in 0:nref(W)]","7-element Array{Int64,1}:\n 1\n 3\n 5\n 6\n 5\n 3\n 1")
@test mytest("W=CoxSym(3)","𝔖 ₃")
@test mytest("firstleftdescent(W,Perm(2,3))","2")
@test mytest("W=coxgroup(:A,3)","A₃")
@test mytest("w=perm\"(1,11)(3,10)(4,9)(5,7)(6,12)\"","(1,11)(3,10)(4,9)(5,7)(6,12)")
@test mytest("w in W","true")
@test mytest("word(W,w)","5-element Array{Int64,1}:\n 1\n 2\n 3\n 2\n 1")
@test mytest("W=coxgroup(:F,4)","F₄")
@test mytest("p=W(1,2,3,4,2)","(1,44,38,25,20,14)(2,5,40,47,48,35)(3,7,13,21,19,15)(4,6,12,28,30,36)(8,34,41,32,10,17)(9,18)(11,26,29,16,23,24)(27,31,37,45,43,39)(33,42)")
@test mytest("length(W,p)","5")
@test mytest("word(W,p)","5-element Array{Int64,1}:\n 1\n 2\n 3\n 2\n 4")
@test mytest("W=coxgroup(:G,2)","G₂")
@test mytest("H=reflection_subgroup(W,[2,6])","G₂₍₂₆₎=Ã₁×A₁")
@test mytest("word.(Ref(W),Set(reduced.(Ref(H),elements(W))))","3-element Array{Array{Int64,1},1}:\n []\n [1, 2]\n [1]")
@test mytest("W=coxgroup(:G,2)","G₂")
@test mytest("H=reflection_subgroup(W,[2,6])","G₂₍₂₆₎=Ã₁×A₁")
@test mytest("[word(W,w) for S in reduced(H,W) for w in S]","3-element Array{Array{Int64,1},1}:\n []\n [1]\n [1, 2]")
@test mytest("W=coxgroup(:H,3)","H₃")
@test mytest("w=W(1,2,1,3);","nothing")
@test mytest("b=filter(x->bruhatless(W,x,w),elements(W));","nothing")
@test mytest("word.(Ref(W),b)","12-element Array{Array{Int64,1},1}:\n []\n [3]\n [2]\n [1]\n [2, 3]\n [1, 3]\n [2, 1]\n [1, 2]\n [2, 1, 3]\n [1, 2, 3]\n [1, 2, 1]\n [1, 2, 1, 3]")
@test mytest("W=CoxSym(3)","𝔖 ₃")
@test mytest("bruhatless(W,Perm(1,3))","4-element Array{Array{Perm{UInt8},1},1}:\n [()]\n [(1,2), (2,3)]\n [(1,2,3), (1,3,2)]\n [(1,3)]")
@test mytest("W=CoxSym(4)","𝔖 ₄")
@test mytest("coxmat(W)","3×3 Array{Int64,2}:\n 1  3  2\n 3  1  3\n 2  3  1")
@test mytest("W=ComplexReflectionGroup(29)","G₂₉")
@test mytest("braid_relations(W)","7-element Array{Array{Array{Int64,1},1},1}:\n [[1, 2, 1], [2, 1, 2]]\n [[2, 4, 2], [4, 2, 4]]\n [[3, 4, 3], [4, 3, 4]]\n [[2, 3, 2, 3], [3, 2, 3, 2]]\n [[1, 3], [3, 1]]\n [[1, 4], [4, 1]]\n [[4, 3, 2, 4, 3, 2], [3, 2, 4, 3, 2, 4]]")
@test mytest("W=CoxSym(3)","𝔖 ₃")
@test mytest("e=elements(W)","6-element Array{Perm{UInt8},1}:\n ()\n (2,3)\n (1,2)\n (1,2,3)\n (1,3,2)\n (1,3)")
@test mytest("length.(Ref(W),e)","6-element Array{Int64,1}:\n 0\n 1\n 1\n 2\n 2\n 3")
end
@testset "CycPols.jl" begin
@test mytest("Pol(:q)","Pol{Int64}: q")
@test mytest("p=CycPol(q^25-q^24-2q^23-q^2+q+2)","(q-2)Φ₁Φ₂Φ₂₃")
@test mytest("p(q)","Pol{Cyc{Int64}}: q²⁵-q²⁴-2q²³-q²+q+2")
@test mytest("p*inv(CycPol(q^2+q+1))","(q-2)Φ₁Φ₂Φ₃⁻¹Φ₂₃")
@test mytest("CycPol(3*q^3-3)","3Φ₁Φ₃")
end
@testset "Cycs.jl" begin
@test mytest("E(3)+E(4)","Cyc{Int64}: ζ₁₂⁴-ζ₁₂⁷-ζ₁₂¹¹")
@test mytest("E(3,2)","Cyc{Int64}: ζ₃²")
@test mytest("1+E(3,2)","Cyc{Int64}: -ζ₃")
@test mytest("a=E(4)-E(4)","Cyc{Int64}: 0")
@test mytest("conductor(a)","1")
@test mytest("typeof(convert(Int,a))","Int64")
@test mytest("c=inv(1+E(4))","Cyc{Rational{Int64}}: 1/2-ζ₄/2")
@test mytest("typeof(c)","Cyc{Rational{Int64}}")
@test mytest("typeof(1+E(4))","Cyc{Int64}")
@test mytest("Cyc(1+im)","Cyc{Int64}: 1+ζ₄")
@test mytest("1//(1+E(4))","Cyc{Rational{Int64}}: 1/2-ζ₄/2")
@test mytest("typeof(Cyc(1//2))","Cyc{Rational{Int64}}")
@test mytest("conj(1+E(4))","Cyc{Int64}: 1-ζ₄")
@test mytest("c=E(9)","Cyc{Int64}: -ζ₉⁴-ζ₉⁷")
@test mytest("Root1(c)","Root1: 1/9")
@test mytest("c=Complex(E(3))","-0.4999999999999998 + 0.8660254037844387im")
@test mytest("galois(1+E(4),-1)","Cyc{Int64}: 1-ζ₄")
@test mytest("galois(ER(5),2)==-ER(5)","true")
@test mytest("ER(-1)","Cyc{Int64}: ζ₄")
@test mytest("ER(3)","Cyc{Int64}: √3")
@test mytest("r=Root1(-E(9,2)-E(9,5))","Root1: 8/9")
@test mytest("E(r)","Cyc{Int64}: -ζ₉²-ζ₉⁵")
@test mytest("Root1(-E(9,4)-E(9,5))","nothing")
@test mytest("Root1(1)","Root1: 0/1")
@test mytest("Quadratic(1+E(3))","(1+√-3)/2")
@test mytest("Quadratic(1+E(5))","nothing")
end
@testset "Eigenspaces.jl" begin
@test mytest("W=coxgroup(:E,8)","E₈")
@test mytest("relative_degrees(W,4)","4-element Array{Int64,1}:\n  8\n 12\n 20\n 24")
@test mytest("W=coxgroup(:E,8)","E₈")
@test mytest("PositionRegularClass(W,30)","65")
@test mytest("W=ComplexReflectionGroup(6)","G₆")
@test mytest("L=twistings(W,[2])[2]","G₃‚₁‚₁[ζ₄]Φ′₄")
@test mytest("PositionRegularClass(L,7//12)","3")
@test mytest("W=coxgroup(:A,3)","A₃")
@test mytest("w=W(1:3...)","(1,12,3,2)(4,11,10,5)(6,9,8,7)")
@test mytest("p=eigenspace_projector(W,w,1//4)","3×3 Array{Cyc{Rational{Int64}},2}:\n  1/4+ζ₄/4   ζ₄/2  -1/4+ζ₄/4\n  1/4-ζ₄/4    1/2   1/4+ζ₄/4\n -1/4-ζ₄/4  -ζ₄/2   1/4-ζ₄/4")
@test mytest("GLinearAlgebra.rank(p)","1")
@test mytest("W=coxgroup(:A,3)","A₃")
@test mytest("SplitLevis(W,4)","2-element Array{Any,1}:\n A₃\n .Φ₂Φ₄")
@test mytest("W=spets(coxgroup(:D,4),Perm(1,2,4))","³D₄")
@test mytest("SplitLevis(W,3)","3-element Array{Any,1}:\n ³D₄\n A₂Φ₃\n ³D₄")
@test mytest("W=coxgroup(:E,8)","E₈")
end
@testset "GLinearAlgebra.jl" begin
@test mytest("Pol(:q)","Pol{Int64}: q")
@test mytest("M=[q^6 q^0 q^3 q^3 q^5+q q^4+q^2; q^0 q^6 q^3 q^3 q^5+q q^4+q^2; q^3 q^3 q^6 q^0 q^4+q^2 q^5+q; q^3 q^3 q^0 q^6 q^4+q^2 q^5+q; q^5+q q^5+q q^4+q^2 q^4+q^2 q^6+q^4+q^2+1 q^5+2*q^3+q; q^4+q^2 q^4+q^2 q^5+q q^5+q q^5+2*q^3+q q^6+q^4+q^2+1]","6×6 Array{Pol{Int64},2}:\n q⁶     1      q³     q³     q⁵+q        q⁴+q²\n 1      q⁶     q³     q³     q⁵+q        q⁴+q²\n q³     q³     q⁶     1      q⁴+q²       q⁵+q\n q³     q³     1      q⁶     q⁴+q²       q⁵+q\n q⁵+q   q⁵+q   q⁴+q²  q⁴+q²  q⁶+q⁴+q²+1  q⁵+2q³+q\n q⁴+q²  q⁴+q²  q⁵+q   q⁵+q   q⁵+2q³+q    q⁶+q⁴+q²+1")
@test mytest("bb=[[2],[4],[6],[3,5],[1]];","nothing")
@test mytest("(P,L)=bigcell_decomposition(M,bb);","nothing")
@test mytest("P","6×6 Array{Pol{Int64},2}:\n 1    0  0    0    0        0\n q⁻⁶  1  q⁻³  q⁻³  q⁻¹+q⁻⁵  q⁻²+q⁻⁴\n 0    0  1    0    0        0\n q⁻³  0  0    1    q⁻²      q⁻¹\n q⁻¹  0  0    0    1        0\n q⁻²  0  q⁻¹  0    q⁻¹      1")
@test mytest("L","6×6 Array{Pol{Int64},2}:\n q⁶-q⁴-1+q⁻²  0   0            0     0            0\n 0            q⁶  0            0     0            0\n 0            0   q⁶-q⁴-1+q⁻²  0     0            0\n 0            0   0            q⁶-1  0            0\n 0            0   0            0     q⁶-q⁴-1+q⁻²  0\n 0            0   0            0     0            q⁶-1")
@test mytest("M==permutedims(P)*L*P","true")
@test mytest("M=[1 2 3 4;2 3 4 1;3 4 1 2;4 1 2 3]","4×4 Array{Int64,2}:\n 1  2  3  4\n 2  3  4  1\n 3  4  1  2\n 4  1  2  3")
@test mytest("exterior_power(M,2)","6×6 Array{Int64,2}:\n  -1   -2   -7   -1  -10  -13\n  -2   -8  -10  -10  -12    2\n  -7  -10  -13    1    2    1\n  -1  -10    1  -13    2    7\n -10  -12    2    2    8   10\n -13    2    1    7   10   -1")
@test mytest("m=[0 0 0 1;0 0 1 0;0 1 0 0;1 0 0 0]","4×4 Array{Int64,2}:\n 0  0  0  1\n 0  0  1  0\n 0  1  0  0\n 1  0  0  0")
@test mytest("diagblocks(m)","2-element Array{Array{Int64,1},1}:\n [1, 4]\n [2, 3]")
@test mytest("m[[1,4],[1,4]]","2×2 Array{Int64,2}:\n 0  1\n 1  0")
end
@testset "Garside.jl" begin
@test mytest("W=coxgroup(:A,4)","A₄")
@test mytest("B=BraidMonoid(W)","BraidMonoid(A₄)")
@test mytest("w=B(1,2,3,4)","1234")
@test mytest("w^3","121321432.343")
@test mytest("word(W,α(w^3))","9-element Array{Int64,1}:\n 1\n 2\n 1\n 3\n 2\n 1\n 4\n 3\n 2")
@test mytest("w^4","δ.232432")
@test mytest("inv(w)","(1234)⁻¹")
@test mytest("repr(w^-1,context=IOContext(stdout,:greedy=>true,:limit=>true))","\"δ⁻¹.232432\"")
@test mytest("repr(w)","\"B(1,2,3,4)\"")
@test mytest("repr(w^3)","\"B(1,2,1,3,2,1,4,3,2,3,4,3)\"")
@test mytest("repr(w^-1)","\"B(-4,-3,-2,-1)\"")
@test mytest("b=B(2,1,4,1,4)","214.14")
@test mytest("c=B(1,4,1,4,3)","14.143")
@test mytest("d=representative_operation(b,c)","(1)⁻¹21321432")
@test mytest("b^d","14.143")
@test mytest("centralizer_generators(b)","3-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 21.1\n 321432.213243\n 4")
@test mytest("C=conjcat(b;ss=:ss)","category with 10 objects and 32 generating maps")
@test mytest("C.obj","10-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 1214.4\n 214.14\n 124.24\n 1343.1\n 14.124\n 143.13\n 24.214\n 134.14\n 13.134\n 14.143")
@test mytest("word(W,preferred_prefix(b))","2-element Array{Int64,1}:\n 2\n 1")
@test mytest("b^B(preferred_prefix(b))","1214.4")
@test mytest("b1=b^B(preferred_prefix(b))","1214.4")
@test mytest("C=conjcat(b)","category with 2 objects and 6 generating maps")
@test mytest("C.obj","2-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 1214.4\n 1343.1")
@test mytest("W=coxgroup(:A,3)","A₃")
@test mytest("B=BraidMonoid(W)","BraidMonoid(A₃)")
@test mytest("pi=B(B.delta)^2","δ²")
@test mytest("root(pi,2)","δ")
@test mytest("root(pi,3)","1232")
@test mytest("root(pi,4)","132")
@test mytest("B=BraidMonoid(coxgroup(:A,3))","BraidMonoid(A₃)")
@test mytest("word(B,B.delta)","6-element Array{Int64,1}:\n 1\n 2\n 1\n 3\n 2\n 1")
@test mytest("W=coxgroup(:A,3)","A₃")
@test mytest("B=BraidMonoid(W)","BraidMonoid(A₃)")
@test mytest("map(x->B.(x),Garside.left_divisors(B,W(1,3,2)))","4-element Array{Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1},1}:\n [.]\n [1, 3]\n [13]\n [132]")
@test mytest("B=DualBraidMonoid(W)","DualBraidMonoid(A₃,c=[1, 3, 2])")
@test mytest("map(x->B.(x),Garside.left_divisors(B,W(1,3,2)))","4-element Array{Array{Gapjm.Garside.GarsideElm{Perm{Int16},DualBraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1},1}:\n [.]\n [1, 2, 3, 4, 5, 6]\n [12, 13, 15, 25, 34, 45]\n [δ]")
@test mytest("M=BraidMonoid(coxgroup(:A,2))","BraidMonoid(A₂)")
@test mytest("elements(M,4)","12-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n δ.1\n 21.1.1\n 2.2.2.2\n 12.2.2\n 1.1.12\n 12.21\n δ.2\n 2.2.21\n 1.12.2\n 1.1.1.1\n 21.12\n 2.21.1")
@test mytest("W=coxgroup(:A,3)","A₃")
@test mytest("B=DualBraidMonoid(W)","DualBraidMonoid(A₃,c=[1, 3, 2])")
@test mytest("B(2,1,2,1,1)","12.1.1.1")
@test mytest("B(-1,-2,-3,1,1)","(25.1)⁻¹1.1")
@test mytest("B=BraidMonoid(coxgroup(:A,3))","BraidMonoid(A₃)")
@test mytest("b=B( 2, 1, -3, 1, 1)","(23)⁻¹321.1.1")
@test mytest("fraction(b)","(23, 321.1.1)")
@test mytest("W=coxgroup(:A,3)","A₃")
@test mytest("b=BraidMonoid(W)(2,1,2,1,1)","121.1.1")
@test mytest("word(W,α(b))","3-element Array{Int64,1}:\n 1\n 2\n 1")
@test mytest("B=BraidMonoid(coxgroup(:A,3))","BraidMonoid(A₃)")
@test mytest("b=B(2,1,2,1,1)*inv(B(2,2))","(21)⁻¹1.12.21")
@test mytest("word(b)","7-element Array{Int64,1}:\n -1\n -2\n  1\n  1\n  2\n  2\n  1")
@test mytest("W=coxgroup(:A,4)","A₄")
@test mytest("w=BraidMonoid(W)(4,3,3,2,1)","43.321")
@test mytest("conjcat(w)","category with 2 objects and 4 generating maps")
@test mytest("conjcat(w).obj","2-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 32143\n 21324")
@test mytest("conjcat(w;ss=:ss).obj","4-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 32143\n 13243\n 21432\n 21324")
@test mytest("W=coxgroup(:D,4)","D₄")
@test mytest("B=BraidMonoid(W)","BraidMonoid(D₄)")
@test mytest("b=B(2,3,1,2,4,3);b1=B(1,4,3,2,2,2)","1432.2.2")
@test mytest("representative_operation(b,b1)","(134312.23)⁻¹")
@test mytest("c=representative_operation(b,b1;ss=:cyc)","232.2")
@test mytest("b^c","1432.2.2")
@test mytest("WF=spets(W,Perm(1,2,4))","³D₄")
@test mytest("F=Frobenius(WF)","(::Gapjm.Cosets.var\"#f#25\"{spets{FiniteCoxeterGroup{Perm{Int16},Int64}}}) (generic function with 2 methods)")
@test mytest("c=B(3,4,3,3,2,4)","343.324")
@test mytest("representative_operation(b,c,F)","2312")
@test mytest("^(b,B(2,3,1,2),F)","343.324")
@test mytest("W=coxgroup(:D,4)","D₄")
@test mytest("B=BraidMonoid(W)","BraidMonoid(D₄)")
@test mytest("w=B(4,4,4)","4.4.4")
@test mytest("cc=centralizer_generators(w)","8-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n (31432)⁻¹231432\n 1\n (2)⁻¹34.432\n (1)⁻¹34.431\n 34.43\n 4\n (32431)⁻¹132431\n 2")
@test mytest("shrink(cc)","5-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 4\n 2\n 1\n 34.43\n (3243)⁻¹13243")
@test mytest("centralizer_generators(w;ss=:cyc)","Set(Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}}[4])")
@test mytest("F=Frobenius(spets(W,Perm(1,2,4)))","(::Gapjm.Cosets.var\"#f#25\"{spets{FiniteCoxeterGroup{Perm{Int16},Int64}}}) (generic function with 2 methods)")
@test mytest("centralizer_generators(w,F)","2-element Array{Gapjm.Garside.GarsideElm{Perm{Int16},BraidMonoid{Perm{Int16},FiniteCoxeterGroup{Perm{Int16},Int64}}},1}:\n 124\n 312343123")
@test mytest("B=BraidMonoid(CoxSym(3))","BraidMonoid(𝔖 ₃)")
@test mytest("b=[B(1)^3,B(2)^3,B(-2,-1,-1,2,2,2,2,1,1,2),B(1,1,1,2)]","4-element Array{Gapjm.Garside.GarsideElm{Perm{UInt8},BraidMonoid{Perm{UInt8},CoxSym{UInt8}}},1}:\n 1.1.1\n 2.2.2\n (1.12)⁻¹2.2.2.21.12\n 1.1.12")
@test mytest("shrink(b)","2-element Array{Gapjm.Garside.GarsideElm{Perm{UInt8},BraidMonoid{Perm{UInt8},CoxSym{UInt8}}},1}:\n 2\n 1")
end
@testset "Groups.jl" begin
@test mytest("G=Group([Perm(1,2),Perm(1,2,3)])","Group([perm\"(1,2)\",perm\"(1,2,3)\"])")
@test mytest("gens(G)","2-element Array{Perm{Int16},1}:\n (1,2)\n (1,2,3)")
@test mytest("nbgens(G)","2")
@test mytest("G(2,1,-2)","(1,3)")
@test mytest("orbit([Perm(1,2),Perm(2,3)],1)","3-element Array{Int64,1}:\n 1\n 2\n 3")
@test mytest("G=Group([Perm(1,2),Perm(2,3)]);","nothing")
@test mytest("orbit(G,1)","3-element Array{Int64,1}:\n 1\n 2\n 3")
@test mytest("G=Group([Perm(1,2),Perm(2,3)]);","nothing")
@test mytest("transversal(G,1)","Dict{Int64,Perm{Int16}} with 3 entries:\n  2 => (1,2)\n  3 => (1,3,2)\n  1 => ()")
@test mytest("transversal(G,[1,2],action=(x,y)->x.^y)","Dict{Array{Int64,1},Perm{Int16}} with 6 entries:\n  [1, 3] => (2,3)\n  [1, 2] => ()\n  [2, 3] => (1,2,3)\n  [3, 2] => (1,3)\n  [2, 1] => (1,2)\n  [3, 1] => (1,3,2)")
@test mytest("G=Group([Perm(1,2),Perm(2,3)]);","nothing")
@test mytest("orbits(G,1:4)","2-element Array{Array{Int64,1},1}:\n [1, 2, 3]\n [4]")
@test mytest("G=Group([Perm(1,2),Perm(1,2,3)]);","nothing")
@test mytest("centralizer(G,1)","Group([perm\"(2,3)\"])")
@test mytest("G=Group([Perm(1,2),Perm(1,2,3)]);","nothing")
@test mytest("minimal_words(G)","Dict{Perm{Int16},Array{Int64,1}} with 6 entries:\n  ()      => Int64[]\n  (2,3)   => [2, 1]\n  (1,3,2) => [1, 2, 1]\n  (1,3)   => [1, 2]\n  (1,2)   => [1]\n  (1,2,3) => [2]")
end
@testset "HasType.jl" begin
@test mytest("G=ComplexReflectionGroup(4)","G₄")
@test mytest("degrees(G)","2-element Array{Int64,1}:\n 4\n 6")
@test mytest("length(G)","24")
@test mytest("fakedegrees(G,Pol(:q))","7-element Array{Pol{Int64},1}:\n 1\n q⁴\n q⁸\n q⁷+q⁵\n q⁵+q³\n q³+q\n q⁶+q⁴+q²")
@test mytest("ComplexReflectionGroup(2,1,6)","B₆")
@test mytest("CycPol([3,-5,6,3//7])","3q⁻⁵Φ₆(q-ζ₇³)")
@test mytest("W=coxgroup(:F,4)","F₄")
@test mytest("r=classinfo(W)[:classtext];","nothing")
@test mytest("R=representation(W,17)","4-element Array{Array{Int64,2},1}:\n [-1 -1 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1]\n [1 0 0 0; -1 -1 -1 0; 0 0 1 0; 0 0 0 1]\n [1 0 0 0; 0 1 0 0; 0 -2 -1 -1; 0 0 0 1]\n [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 -1 -1]")
@test mytest("traces_words_mats(R,r)==CharTable(W).irr[17,:]","true")
end
@testset "HeckeAlgebras.jl" begin
@test mytest("W=coxgroup(:A,2)","A₂")
@test mytest("H=hecke(W,0)","hecke(A₂,0)")
@test mytest("T=Tbasis(H);","nothing")
@test mytest("el=words(W)","6-element Array{Array{Int8,1},1}:\n []\n [2]\n [1]\n [2, 1]\n [1, 2]\n [1, 2, 1]")
@test mytest("T.(el)*permutedims(T.(el))","6×6 Array{HeckeTElt{Perm{Int16},Int64,FiniteCoxeterGroup{Perm{Int16},Int64}},2}:\n T.    T₂     T₁     T₂₁    T₁₂    T₁₂₁\n T₂    -T₂    T₂₁    -T₂₁   T₁₂₁   -T₁₂₁\n T₁    T₁₂    -T₁    T₁₂₁   -T₁₂   -T₁₂₁\n T₂₁   T₁₂₁   -T₂₁   -T₁₂₁  -T₁₂₁  T₁₂₁\n T₁₂   -T₁₂   T₁₂₁   -T₁₂₁  -T₁₂₁  T₁₂₁\n T₁₂₁  -T₁₂₁  -T₁₂₁  T₁₂₁   T₁₂₁   -T₁₂₁")
@test mytest("W=coxgroup(:B,2)","B₂")
@test mytest("Pol(:q)","Pol{Int64}: q")
@test mytest("H=hecke(W,q)","hecke(B₂,q)")
@test mytest("H.para","2-element Array{Array{Pol{Int64},1},1}:\n [q, -1]\n [q, -1]")
@test mytest("H=hecke(W,q^2,rootpara=q)","hecke(B₂,q²,rootpara=q)")
@test mytest("[H.para,rootpara(H)]","2-element Array{Array{T,1} where T,1}:\n Array{Pol{Int64},1}[[q², -1], [q², -1]]\n Pol{Int64}[q, q]")
@test mytest("H=hecke(W,[q^2,q^4],rootpara=[q,q^2])","hecke(B₂,Pol{Int64}[q², q⁴],rootpara=Pol{Int64}[q, q²])")
@test mytest("[H.para,rootpara(H)]","2-element Array{Array{T,1} where T,1}:\n Array{Pol{Int64},1}[[q², -1], [q⁴, -1]]\n Pol{Int64}[q, q²]")
@test mytest("H=hecke(W,9,rootpara=3)","hecke(B₂,9,rootpara=3)")
@test mytest("[H.para,rootpara(H)]","2-element Array{Array{T,1} where T,1}:\n Array{Int64,1}[[9, -1], [9, -1]]\n [3, 3]")
@test mytest("H=hecke(coxgroup(:H,3),Pol(:q))","hecke(H₃,q)")
@test mytest("central_monomials(H)","10-element Array{Pol{Cyc{Int64}},1}:\n 1\n q³⁰\n q¹²\n q¹⁸\n q¹⁰\n q¹⁰\n q²⁰\n q²⁰\n q¹⁵\n q¹⁵")
@test mytest("W=CoxSym(4)","𝔖 ₄")
@test mytest("H=hecke(W,Pol(:q))","hecke(𝔖 ₄,q)")
@test mytest("h=Tbasis(H)(longest(W))","T₁₂₁₃₂₁")
@test mytest("p=class_polynomials(h)","5-element Array{Pol{Int64},1}:\n 0\n 0\n q²\n q³-2q²+q\n q³-q²+q-1")
@test mytest("W=coxgroup(:B,2)","B₂")
@test mytest("H=hecke(W,q^2;rootpara=q)","hecke(B₂,q²,rootpara=q)")
@test mytest("HeckeAlgebras.char_values(Cpbasis(H)(1,2,1))","5-element Array{Pol{Int64},1}:\n -q-q⁻¹\n q+q⁻¹\n 0\n q³+2q+2q⁻¹+q⁻³\n 0")
end
@testset "KL.jl" begin
@test mytest("W=coxgroup(:H,3)","H₃")
@test mytest("c=LeftCells(W)","22-element Array{LeftCell{FiniteCoxeterGroup{Perm{Int16},Cyc{Int64}}},1}:\n LeftCell<H₃: duflo= character=φ₁‚₀>\n LeftCell<H₃: duflo=123 character=φ₁‚₁₅>\n LeftCell<H₃: duflo=(15) character=φ₅‚₅>\n LeftCell<H₃: duflo=(10) character=φ₅‚₅>\n LeftCell<H₃: duflo=(14) character=φ₅‚₅>\n LeftCell<H₃: duflo=7 character=φ₅‚₅>\n LeftCell<H₃: duflo=(12) character=φ₅‚₅>\n LeftCell<H₃: duflo=(9,12) character=φ₅‚₂>\n LeftCell<H₃: duflo=(5,11) character=φ₅‚₂>\n LeftCell<H₃: duflo=13 character=φ₅‚₂>\n ⋮\n LeftCell<H₃: duflo=(8,13) character=φ₃‚₆+φ₃‚₈>\n LeftCell<H₃: duflo=(1,15) character=φ₃‚₆+φ₃‚₈>\n LeftCell<H₃: duflo=3 character=φ₃‚₁+φ₃‚₃>\n LeftCell<H₃: duflo=2 character=φ₃‚₁+φ₃‚₃>\n LeftCell<H₃: duflo=1 character=φ₃‚₁+φ₃‚₃>\n LeftCell<H₃: duflo=6 character=φ₄‚₃+φ₄‚₄>\n LeftCell<H₃: duflo=(13) character=φ₄‚₃+φ₄‚₄>\n LeftCell<H₃: duflo=(11) character=φ₄‚₃+φ₄‚₄>\n LeftCell<H₃: duflo=9 character=φ₄‚₃+φ₄‚₄>")
@test mytest("W=coxgroup(:F,4)","F₄")
@test mytest("w=longest(W)*gens(W)[1];length(W,w)","23")
@test mytest("y=W(1:4...);length(W,y)","4")
@test mytest("cr=KL.critical_pair(W,y,w);length(W,cr)","16")
@test mytest("Pol(:x);KLPol(W,y,w)","Pol{Int64}: x³+1")
@test mytest("KLPol(W,cr,w)","Pol{Int64}: x³+1")
@test mytest("W=coxgroup(:B,3)","B₃")
@test mytest("map(i->map(x->KLPol(W,one(W),x),elements(W,i)),1:W.N)","9-element Array{Array{Pol{Int64},1},1}:\n [1, 1, 1]\n [1, 1, 1, 1, 1]\n [1, 1, 1, 1, 1, 1, 1]\n [1, 1, 1, x+1, 1, 1, 1, 1]\n [x+1, 1, 1, x+1, x+1, 1, x+1, 1]\n [1, x+1, 1, x+1, x+1, x²+1, 1]\n [x+1, x+1, x²+x+1, 1, 1]\n [x²+1, x+1, 1]\n [1]")
@test mytest("W=coxgroup(:B,3)","B₃")
@test mytest("Pol(:v);H=hecke(W,v^2,rootpara=v)","hecke(B₃,v²,rootpara=v)")
@test mytest("C=Cpbasis(H)","(::Gapjm.KL.var\"#f#10\"{Pol{Int64},Perm{Int16},HeckeAlgebra{Pol{Int64},FiniteCoxeterGroup{Perm{Int16},Int64}}}) (generic function with 4 methods)")
@test mytest("T=Tbasis(H)","(::Gapjm.HeckeAlgebras.var\"#f#35\"{Pol{Int64},Perm{Int16},HeckeAlgebra{Pol{Int64},FiniteCoxeterGroup{Perm{Int16},Int64}}}) (generic function with 4 methods)")
@test mytest("T(C(1,2))","v⁻²T.+v⁻²T₂+v⁻²T₁+v⁻²T₁₂")
@test mytest("c=LeftCells(coxgroup(:G,2))[3]","LeftCell<G₂: duflo=2 character=φ₂‚₁+φ′₁‚₃+φ₂‚₂>")
@test mytest("character(c)","3-element Array{Int64,1}:\n 3\n 5\n 6")
@test mytest("W=coxgroup(:H,3)","H₃")
@test mytest("c=LeftCells(W)[3]","LeftCell<H₃: duflo=(15) character=φ₅‚₅>")
@test mytest("Pol(:q);H=hecke(W,q^2;rootpara=q)","hecke(H₃,q²,rootpara=q)")
@test mytest("representation(c,H)","3-element Array{Array{Pol{Int64},2},1}:\n [-1 0 … q 0; 0 -1 … q q; … ; 0 0 … q² 0; 0 0 … 0 q²]\n [-1 0 … 0 0; 0 q² … 0 0; … ; 0 q … -1 0; 0 q … 0 -1]\n [q² 0 … 0 0; 0 -1 … q 0; … ; 0 0 … q² 0; 0 0 … q -1]")
@test mytest("W=coxgroup(:G,2)","G₂")
@test mytest("LeftCells(W)","4-element Array{LeftCell{FiniteCoxeterGroup{Perm{Int16},Int64}},1}:\n LeftCell<G₂: duflo= character=φ₁‚₀>\n LeftCell<G₂: duflo=12 character=φ₁‚₆>\n LeftCell<G₂: duflo=2 character=φ₂‚₁+φ′₁‚₃+φ₂‚₂>\n LeftCell<G₂: duflo=1 character=φ₂‚₁+φ″₁‚₃+φ₂‚₂>")
@test mytest("W=coxgroup(:G,2);","nothing")
@test mytest("LeftCells(W,1)","2-element Array{LeftCell{FiniteCoxeterGroup{Perm{Int16},Int64}},1}:\n LeftCell<G₂: duflo=2 character=φ₂‚₁+φ′₁‚₃+φ₂‚₂>\n LeftCell<G₂: duflo=1 character=φ₂‚₁+φ″₁‚₃+φ₂‚₂>")
@test mytest("W=coxgroup(:E,8)","E₈")
@test mytest("LeftCell(W,W((1:8)...))","LeftCell<E₈: duflo=(42,43) character=φ₃₅‚₂>")
end
@testset "ModuleElts.jl" begin
@test mytest("a=ModuleElt(:xy=>1,:yx=>-1)",":xy-:yx")
@test mytest("a-a","0")
@test mytest("a*99","99:xy-99:yx")
@test mytest("push!(a,:yy=>2)",":xy-:yx+2:yy")
@test mytest("a+ModuleElt(:yx=>1)",":xy+2:yy")
@test mytest("a[:xy]","1")
@test mytest("haskey(a,:xx)","false")
@test mytest("a=ModuleElt(:yy=>1, :yx=>2, :xy=>3, :yy=>-1)",":yy+2:yx+3:xy-:yy")
@test mytest("a=ModuleElt([:yy=>1, :yx=>2, :xy=>3, :yy=>-1];check=true)","3:xy+2:yx")
@test mytest("a","3:xy+2:yx")
end
@testset "Mvps.jl" begin
@test mytest("@Mvp x,y","nothing")
@test mytest("(x+y)^3","Mvp{Int64}: x³+3x²y+3xy²+y³")
@test mytest("Pol(:q)","Pol{Int64}: q")
@test mytest("Mvp(q^2+q)","Mvp{Int64}: q²+q")
@test mytest("degree(Mvp(1))","0")
@test mytest("(x^2-y^2)//(x-y)","Mvp{Int64}: x+y")
@test mytest("a=x^2+x*y","Mvp{Int64}: x²+xy")
@test mytest("degree(a)","2")
@test mytest("degree(a,:y)","1")
@test mytest("degree(a,:x)","2")
@test mytest("a=x^2+x*y","Mvp{Int64}: x²+xy")
@test mytest("valuation(a)","2")
@test mytest("valuation(a,:y)","0")
@test mytest("valuation(a,:x)","1")
@test mytest("p=(x+y+inv(y))^4","Mvp{Int64}: x⁴+4x³y+4x³y⁻¹+6x²y²+12x²+6x²y⁻²+4xy³+12xy+12xy⁻¹+4xy⁻³+y⁴+4y²+6+4y⁻²+y⁻⁴")
@test mytest("coefficients(p,:x)","Dict{Int64,Mvp{Int64}} with 5 entries:\n  0 => y⁴+4y²+6+4y⁻²+y⁻⁴\n  4 => 1\n  2 => 6y²+12+6y⁻²\n  3 => 4y+4y⁻¹\n  1 => 4y³+12y+12y⁻¹+4y⁻³")
@test mytest("coefficients(p,:y)","Dict{Int64,Mvp{Int64}} with 9 entries:\n  0  => x⁴+12x²+6\n  4  => 1\n  -4 => 1\n  -3 => 4x\n  2  => 6x²+4\n  -2 => 6x²+4\n  -1 => 4x³+12x\n  3  => 4x\n  1  => 4x³+12x")
@test mytest("variables(x+x^4+y)","2-element Array{Symbol,1}:\n :x\n :y")
@test mytest("p=-2+7x^5*inv(y)","Mvp{Int64}: 7x⁵y⁻¹-2")
@test mytest("p(x=2)","Mvp{Int64}: -2+224y⁻¹")
@test mytest("p(y=1)","Mvp{Int64}: 7x⁵-2")
@test mytest("p(x=2,y=1)","Mvp{Int64}: 222")
@test mytest("p(x=y)","Mvp{Int64}: 7y⁴-2")
@test mytest("p(x=y,y=x)","Mvp{Int64}: 7x⁴-2")
end
@testset "PermGroups.jl" begin
@test mytest("G=Group([Perm(i,i+1) for i in 1:2])","Group([perm\"(1,2)\",perm\"(2,3)\"])")
@test mytest("collect(G)","6-element Array{Perm{Int16},1}:\n (1,2)\n (1,3,2)\n ()\n (1,2,3)\n (1,3)\n (2,3)")
@test mytest("degree(G)","3")
@test mytest("Perm(1,2) in G","true")
@test mytest("Perm(1,2,4) in G","false")
@test mytest("base(G)","2-element Array{Int16,1}:\n 1\n 2")
@test mytest("centralizers(G)","2-element Array{PermGroup{Int16},1}:\n Group([perm\"(1,2)\",perm\"(2,3)\"])\n Group([perm\"(2,3)\"])")
@test mytest("transversals(G)","2-element Array{Dict{Int16,Perm{Int16}},1}:\n Dict(2 => (1,2),3 => (1,3,2),1 => ())\n Dict(2 => (),3 => (2,3))")
end
@testset "PermRoot.jl" begin
@test mytest("W=coxgroup(:B,2)","B₂")
@test mytest("hyperplane_orbits(W)","2-element Array{NamedTuple{(:s, :cl_s, :order, :N_s, :det_s),Tuple{Int16,Array{Int64,1},Int64,Int64,Array{Int64,1}}},1}:\n (s = 2, cl_s = [4], order = 2, N_s = 2, det_s = [1])\n (s = 1, cl_s = [2], order = 2, N_s = 2, det_s = [3])")
@test mytest("bipartite_decomposition(coxgroup(:E,8))","([1, 4, 6, 8], [3, 2, 5, 7])")
@test mytest("catalan(8)","1430")
@test mytest("catalan(coxgroup(:A,7))","1430")
@test mytest("catalan(ComplexReflectionGroup(7),2)","16//1")
@test mytest("catalan(ComplexReflectionGroup(7),2,q)","Pol{Int64}: q⁷²+2q⁶⁰+3q⁴⁸+4q³⁶+3q²⁴+2q¹²+1")
@test mytest("reflection([-1 0 0;1 1 0;0 0 1])","(root = [2, 0, 0], coroot = Rational{Int64}[1//1, -1//2, 0//1], eig = 1/2, isOrthogonal = false)")
@test mytest("reflection([-1 0 0;1 1 0;0 0 1],[1,0,0])","(root = [1, 0, 0], coroot = Rational{Int64}[2//1, -1//1, 0//1], eig = 1/2, isOrthogonal = false)")
end
@testset "Perms.jl" begin
@test mytest("a=Perm(1,2,3)","(1,2,3)")
@test mytest("vec(a)","3-element Array{Int16,1}:\n 2\n 3\n 1")
@test mytest("a==Perm(vec(a))","true")
@test mytest("b=Perm(1,2,3,4)","(1,2,3,4)")
@test mytest("a*b","(1,3,2,4)")
@test mytest("inv(a)","(1,3,2)")
@test mytest("a/b","(3,4)")
@test mytest("a\\b","(1,4)")
@test mytest("a^b","(2,3,4)")
@test mytest("b^2","(1,3)(2,4)")
@test mytest("1^a","2")
@test mytest("one(a)","()")
@test mytest("sign(a)","1")
@test mytest("order(a)","3")
@test mytest("largest_moved_point(a)","3")
@test mytest("smallest_moved_point(a)","1")
@test mytest("Perm{Int8}(a)","Perm{Int8}: (1,2,3)")
@test mytest("Matrix(b)","4×4 Array{Bool,2}:\n 0  1  0  0\n 0  0  1  0\n 0  0  0  1\n 1  0  0  0")
@test mytest("[5,4,6,1,7,5]^Perm(1,3,5,6,4)","6-element Array{Int64,1}:\n 1\n 4\n 5\n 5\n 6\n 7")
@test mytest("orbits(Perm(1,2)*Perm(4,5),1:5)","3-element Array{Array{Int16,1},1}:\n [1, 2]\n [3]\n [4, 5]")
@test mytest("cycles(Perm(1,2)*Perm(4,5))","2-element Array{Array{Int16,1},1}:\n [1, 2]\n [4, 5]")
@test mytest("cycletype(Perm(1,2)*Perm(3,4))","1-element Array{Pair{Tuple{Int64,Int64},Int64},1}:\n (2, 1) => 2")
end
@testset "Pols.jl" begin
@test mytest("Pol(:q)","Pol{Int64}: q")
@test mytest("Pol([1,2],0)","Pol{Int64}: 2q+1")
@test mytest("p=Pol([1,2],-1)","Pol{Int64}: 2+q⁻¹")
@test mytest("valuation(p)","-1")
@test mytest("p=(q+1)^2","Pol{Int64}: q²+2q+1")
@test mytest("degree(p)","2")
@test mytest("p(1//2)","9//4")
@test mytest("p[0], p[1], p[-1]","(1, 2, 0)")
@test mytest("divrem(q^3+1,q+2)","(1.0q²-2.0q+4.0, -7.0)")
@test mytest("divrem1(q^3+1,q+2)","(q²-2q+4, -7)")
@test mytest("cyclotomic_polynomial(24)","Pol{Int64}: q⁸-q⁴+1")
@test mytest("gcd(q+1,q^2-1)","Pol{Float64}: 1.0q+1.0")
@test mytest("gcd(q+1//1,q^2-1//1)","Pol{Rational{Int64}}: (1//1)q+1//1")
@test mytest("cyclotomic_polynomial(5)","Pol{Int64}: q⁴+q³+q²+q+1")
end
@testset "Posets.jl" begin
@test mytest("p=Poset(coxgroup(:A,2))","<1,2<21,12<121")
@test mytest("hasse(p)","6-element Array{Array{Int64,1},1}:\n [2, 3]\n [4, 5]\n [4, 5]\n [6]\n [6]\n []")
@test mytest("incidence(p)","6×6 Array{Bool,2}:\n 1  1  1  1  1  1\n 0  1  0  1  1  1\n 0  0  1  1  1  1\n 0  0  0  1  0  1\n 0  0  0  0  1  1\n 0  0  0  0  0  1")
@test mytest("lcm_partitions([[1,2],[3,4],[5,6]],[[1],[2,5],[3],[4],[6]])","2-element Array{Array{Int64,1},1}:\n [1, 2, 5, 6]\n [3, 4]")
@test mytest("gcd_partitions([[1,2],[3,4],[5,6]],[[1],[2,5],[3],[4],[6]])","6-element Array{Array{Int64,1},1}:\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]")
@test mytest("m=[j-i in [0,1] for i in 1:5, j in 1:5]","5×5 Array{Bool,2}:\n 1  1  0  0  0\n 0  1  1  0  0\n 0  0  1  1  0\n 0  0  0  1  1\n 0  0  0  0  1")
@test mytest("transitive_closure(m)","5×5 Array{Bool,2}:\n 1  1  1  1  1\n 0  1  1  1  1\n 0  0  1  1  1\n 0  0  0  1  1\n 0  0  0  0  1")
@test mytest("Poset(Bool[1 1 1 1 1;0 1 0 1 1;0 0 1 1 1;0 0 0 1 0;0 0 0 0 1])","1<2,3<4,5")
@test mytest("Poset([[2,3],[4,5],[4,5],Int[],Int[]])","1<2,3<4,5")
@test mytest("p=Poset([j%i==0 for i in 1:5, j in 1:5])","1<3,5\n1<2<4")
@test mytest("linear_extension(p)","5-element Array{Int64,1}:\n 1\n 2\n 3\n 5\n 4")
@test mytest("p=Poset([j%i==0 for i in 1:5, j in 1:5])","1<3,5\n1<2<4")
@test mytest("hasse(p)","5-element Array{Array{Int64,1},1}:\n [2, 3, 5]\n [4]\n []\n []\n []")
@test mytest("p=Poset(push!([[i+1] for i in 1:5],Int[]))","1<2<3<4<5<6")
@test mytest("incidence(p)","6×6 Array{Bool,2}:\n 1  1  1  1  1  1\n 0  1  1  1  1  1\n 0  0  1  1  1  1\n 0  0  0  1  1  1\n 0  0  0  0  1  1\n 0  0  0  0  0  1")
@test mytest("p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("reverse(p)","3,7<2,6<1,5<4,8")
@test mytest("p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("partition(p)","4-element Array{Array{Int64,1},1}:\n [4, 8]\n [2, 6]\n [3, 7]\n [1, 5]")
@test mytest("p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("restricted(p,2:6)","3<4<1,5<2")
@test mytest("p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("is_join_lattice(p)","false")
@test mytest("p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("is_meet_lattice(p)","false")
@test mytest("W=coxgroup(:A,2)","A₂")
@test mytest("Poset(W)","<1,2<21,12<121")
@test mytest("W=coxgroup(:A,3)","A₃")
@test mytest("Poset(W,W(1,3))","<3,1<13")
end
@testset "SPerms.jl" begin
@test mytest("SPerm([-2,-1,-3])","SPerm{Int64}: (1,-2)(3,-3)")
@test mytest("p=SPerm(-1)","(1,-1)")
@test mytest("q=SPerm(1,2)","(1,2)")
@test mytest("elements(Group([p,q]))","8-element Array{SPerm{Int16},1}:\n ()\n (1,-1)(2,-2)\n (1,-2,-1,2)\n (1,-2)\n (1,2)\n (1,2,-1,-2)\n (2,-2)\n (1,-1)")
@test mytest("SPerm([-2,-1,-3])==SPerm([-2,-1,-3,4])","true")
@test mytest("p=SPerm([-2,-1,-3])","SPerm{Int64}: (1,-2)(3,-3)")
@test mytest("[20,30,40]^p","3-element Array{Int64,1}:\n -30\n -20\n -40")
@test mytest("Matrix(SPerm([-2,-1,-3]))","3×3 Array{Int64,2}:\n  0  -1   0\n -1   0   0\n  0   0  -1")
@test mytest("elements(CoxHyperoctaedral(2))","8-element Array{SPerm{Int8},1}:\n ()\n (1,2)\n (1,-1)\n (1,2,-1,-2)\n (1,-2,-1,2)\n (2,-2)\n (1,-2)\n (1,-1)(2,-2)")
end
@testset "Symbols.jl" begin
@test mytest("shiftβ([4,5],3)","5-element Array{Int64,1}:\n 0\n 1\n 2\n 7\n 8")
@test mytest("shiftβ([0,1,4,5],-2)","2-element Array{Int64,1}:\n 2\n 3")
@test mytest("βset([3,3,1])","3-element Array{Int64,1}:\n 1\n 4\n 5")
@test mytest("partβ([0,4,5])","2-element Array{Int64,1}:\n 3\n 3")
@test mytest("symbol_partition_tuple([[1,2],[1]],1)","2-element Array{Array{Int64,1},1}:\n [2, 2]\n [1]")
@test mytest("symbol_partition_tuple([[1,2],[1]],0)","2-element Array{Array{Int64,1},1}:\n [2, 2]\n [0, 2]")
@test mytest("symbol_partition_tuple([[1,2],[1]],-1)","2-element Array{Array{Int64,1},1}:\n [2, 2]\n [0, 1, 3]")
@test mytest("ranksymbol([[1,2],[1,5,6]])","11")
@test mytest("degree_gendeg_symbol([[1,5,6],[1,2]])","91")
@test mytest("defectsymbol([[1,2],[1,5,6]])","-1")
@test mytest("degree_feg_symbol([[1,5,6],[1,2]])","88")
@test mytest("valuation_feg_symbol([[1,2],[1,5,6]])","-1")
@test mytest("stringsymbol.(symbols(3,2,1))","14-element Array{String,1}:\n \"(12,0,0)\"\n \"(02,1,0)\"\n \"(02,0,1)\"\n \"(012,12,01)\"\n \"(01,1,1)\"\n \"(012,01,12)\"\n \"(2,,)\"\n \"(01,2,0)\"\n \"(01,0,2)\"\n \"(1,012,012)\"\n \"(,02,01)\"\n \"(,01,02)\"\n \"(0,,012)\"\n \"(0,012,)\"")
@test mytest("stringsymbol.(symbols(3,3,0))","10-element Array{String,1}:\n \"(1,1,1)\"\n \"(01,12,02)\"\n \"(01,02,12)\"\n \"(012,012,123)\"\n \"(0,1,2)\"\n \"(0,2,1)\"\n \"(01,01,13)\"\n \"(0,0,3)\"\n \"(012,,)\"\n \"(012,012,)\"")
@test mytest("fegsymbol([[1,5,6],[1,2]])","q¹⁶Φ₅Φ₇Φ₈Φ₉Φ₁₀Φ₁₁Φ₁₄Φ₁₆Φ₁₈Φ₂₀Φ₂₂")
@test mytest("tableaux([[2,1],[1]])","8-element Array{Any,1}:\n Array{Array{Int64,1},1}[[[2, 4], [3]], [[1]]]\n Array{Array{Int64,1},1}[[[1, 4], [3]], [[2]]]\n Array{Array{Int64,1},1}[[[1, 4], [2]], [[3]]]\n Array{Array{Int64,1},1}[[[2, 3], [4]], [[1]]]\n Array{Array{Int64,1},1}[[[1, 3], [4]], [[2]]]\n Array{Array{Int64,1},1}[[[1, 2], [4]], [[3]]]\n Array{Array{Int64,1},1}[[[1, 3], [2]], [[4]]]\n Array{Array{Int64,1},1}[[[1, 2], [3]], [[4]]]")
@test mytest("tableaux([2,2])","2-element Array{Array{Array{Int64,1},1},1}:\n [[1, 3], [2, 4]]\n [[1, 2], [3, 4]]")
end
@testset "Uch.jl" begin
@test mytest("W=coxgroup(:G,2)","G₂")
@test mytest("uc=UnipotentCharacters(W)","UnipotentCharacters(G₂)\n      γ│      Deg(γ)  Feg Fr(γ)    label\n───────┼─────────────────────────────────\nφ₁‚₀   │           1    1     1\nφ₁‚₆   │          q⁶   q⁶     1\nφ′₁‚₃  │  (1/3)qΦ₃Φ₆   q³     1    (1,ρ)\nφ″₁‚₃  │  (1/3)qΦ₃Φ₆   q³     1   (g₃,1)\nφ₂‚₁   │ (1/6)qΦ₂²Φ₃  qΦ₈     1    (1,1)\nφ₂‚₂   │ (1/2)qΦ₂²Φ₆ q²Φ₄     1   (g₂,1)\nG₂[-1] │ (1/2)qΦ₁²Φ₃    0    -1   (g₂,ε)\nG₂[1]  │ (1/6)qΦ₁²Φ₆    0     1    (1,ε)\nG₂[ζ₃] │(1/3)qΦ₁²Φ₂²    0    ζ₃  (g₃,ζ₃)\nG₂[ζ₃²]│(1/3)qΦ₁²Φ₂²    0   ζ₃² (g₃,ζ₃²)")
@test mytest("uc.families[1]","Family(D(S₃):[5, 6, 4, 3, 8, 7, 9, 10])\n   label│eigen\n────────┼─────────────────────────────────────────────────────\n(1,1)   │    1 1//6  1//2  1//3  1//3  1//6  1//2  1//3  1//3\n(g₂,1)  │    1 1//2  1//2  0//1  0//1 -1//2 -1//2  0//1  0//1\n(g₃,1)  │    1 1//3  0//1  2//3 -1//3  1//3  0//1 -1//3 -1//3\n(1,ρ)   │    1 1//3  0//1 -1//3  2//3  1//3  0//1 -1//3 -1//3\n(1,ε)   │    1 1//6 -1//2  1//3  1//3  1//6 -1//2  1//3  1//3\n(g₂,ε)  │   -1 1//2 -1//2  0//1  0//1 -1//2  1//2  0//1  0//1\n(g₃,ζ₃) │   ζ₃ 1//3  0//1 -1//3 -1//3  1//3  0//1  2//3 -1//3\n(g₃,ζ₃²)│  ζ₃² 1//3  0//1 -1//3 -1//3  1//3  0//1 -1//3  2//3")
@test mytest("UnipotentCharacters(ComplexReflectionGroup(4))","UnipotentCharacters(G₄)\n    γ│              Deg(γ)    Feg Fr(γ)   label\n─────┼──────────────────────────────────────────\nφ₁‚₀ │                   1      1     1\nφ₁‚₄ │  (-√-3/6)q⁴Φ″₃Φ₄Φ″₆     q⁴     1  1∧-ζ₃²\nφ₁‚₈ │   (√-3/6)q⁴Φ′₃Φ₄Φ′₆     q⁸     1  -1∧ζ₃²\nφ₂‚₅ │        (1/2)q⁴Φ₂²Φ₆   q⁵Φ₄     1   1∧ζ₃²\nφ₂‚₃ │((3+√-3)/6)qΦ″₃Φ₄Φ′₆   q³Φ₄     1   1∧ζ₃²\nφ₂‚₁ │((3-√-3)/6)qΦ′₃Φ₄Φ″₆    qΦ₄     1    1∧ζ₃\nφ₃‚₂ │              q²Φ₃Φ₆ q²Φ₃Φ₆     1\nZ₃:2 │     (-√-3/3)qΦ₁Φ₂Φ₄      0   ζ₃²  ζ₃∧ζ₃²\nZ₃:11│    (-√-3/3)q⁴Φ₁Φ₂Φ₄      0   ζ₃²  ζ₃∧-ζ₃\nG₄   │       (-1/2)q⁴Φ₁²Φ₃      0    -1 -ζ₃²∧-1")
@test mytest("W=coxgroup(:B,2)","B₂")
@test mytest("uc=UnipotentCharacters(W)","UnipotentCharacters(B₂)\n  γ│   Deg(γ) Feg Fr(γ) label\n───┼──────────────────────────\n11.│ (1/2)qΦ₄  q²     1   +,-\n1.1│(1/2)qΦ₂² qΦ₄     1   +,+\n.11│       q⁴  q⁴     1\n2. │        1   1     1\n.2 │ (1/2)qΦ₄  q²     1   -,+\nB₂ │(1/2)qΦ₁²   0    -1   -,-")
end
@testset "Ucl.jl" begin
@test mytest("UnipotentClasses(rootdatum(:sl,4))","UnipotentClasses(A₃)\n1111<211<22<31<4\n   u│D-R dBu B-C     C(u) A₃(A₃₍₎) A₁(A₃₍₁₃₎=A₁×A₁)/-1 .(A₃)/ζ₄ .(A₃)/-ζ₄\n────┼─────────────────────────────────────────────────────────────────────\n4   │222   0 222    q³.Z₄      1:4                -1:2    ζ₄:Id    -ζ₄:Id\n31  │202   1 22.      q⁴.    Id:31\n22  │020   2 2.2 q⁴.A₁.Z₂     2:22               11:11\n211 │101   3 2..    q⁵.A₁   Id:211\n1111│000   6 ...      .A₃  Id:1111")
@test mytest("UnipotentClasses(coxgroup(:A,3))","UnipotentClasses(A₃)\n1111<211<22<31<4\n   u│D-R dBu B-C  C(u) A₃(A₃₍₎)\n────┼───────────────────────────\n4   │222   0 222    q³     Id:4\n31  │202   1 22.   q⁴.    Id:31\n22  │020   2 2.2 q⁴.A₁    Id:22\n211 │101   3 2.. q⁵.A₁   Id:211\n1111│000   6 ...   .A₃  Id:1111")
@test mytest("UnipotentClasses(coxgroup(:G,2))","UnipotentClasses(G₂)\n1<A₁<Ã₁<G₂(a₁)<G₂\n     u│D-R dBu B-C  C(u)        G₂(G₂₍₎)  .(G₂)\n──────┼─────────────────────────────────────────\nG₂    │ 22   0  22    q²         Id:φ₁‚₀\nG₂(a₁)│ 20   1  20 q⁴.S₃ 21:φ′₁‚₃ 3:φ₂‚₁ 111:Id\nÃ₁    │ 01   2  .2 q³.A₁         Id:φ₂‚₂\nA₁    │ 10   3  2. q⁵.A₁        Id:φ″₁‚₃\n1     │ 00   6  ..   .G₂         Id:φ₁‚₆")
@test mytest("UnipotentClasses(coxgroup(:G,2),3)","UnipotentClasses(G₂)\n1<A₁,(Ã₁)₃<Ã₁<G₂(a₁)<G₂\n     u│dBu B-C  C(u) G₂(G₂₍₎) .(G₂) .(G₂)  .(G₂)\n──────┼──────────────────────────────────────────\nG₂    │  0  22 q².Z₃   1:φ₁‚₀       ζ₃:Id ζ₃²:Id\nG₂(a₁)│  1  20 q⁴.Z₂   2:φ₂‚₁ 11:Id\nÃ₁    │  2  .2    q⁶  Id:φ₂‚₂\nA₁    │  3  2. q⁵.A₁ Id:φ″₁‚₃\n(Ã₁)₃ │  3  ?? q⁵.A₁ Id:φ′₁‚₃\n1     │  6  ..   .G₂  Id:φ₁‚₆")
@test mytest("uc=UnipotentClasses(coxgroup(:G,2));","nothing")
@test mytest("t=ICCTable(uc)","Coefficients of Xᵩ on Y_ψ for G₂\n      │G₂ G₂(a₁)⁽²¹⁾ G₂(a₁) Ã₁ A₁  1\n──────┼──────────────────────────────\nXφ₁‚₀ │ 1          0      1  1  1  1\nXφ′₁‚₃│ 0          1      0  1  0 q²\nXφ₂‚₁ │ 0          0      1  1  1 Φ₈\nXφ₂‚₂ │ 0          0      0  1  1 Φ₄\nXφ″₁‚₃│ 0          0      0  0  1  1\nXφ₁‚₆ │ 0          0      0  0  0  1")
@test mytest("W=coxgroup(:F,4)","F₄")
@test mytest("H=reflection_subgroup(W,[1,3])","F₄₍₁₃₎=A₁×Ã₁")
@test mytest("Ucl.induced_linear_form(W,H,[2,2])","4-element Array{Int64,1}:\n 0\n 1\n 0\n 0")
@test mytest("uc=UnipotentClasses(W);","nothing")
@test mytest("uc.classes[4].prop","Dict{Symbol,Any} with 7 entries:\n  :dynkin     => [0, 1, 0, 0]\n  :dimred     => 6\n  :red        => A₁×A₁\n  :Au         => .\n  :balacarter => [1, 3]\n  :dimunip    => 18\n  :AuAction   => Extended(coxgroup(:A,1)*coxgroup(:A,1),Array{Int64,2}[[1 0; 0 …")
@test mytest("uc.classes[4]","UnipotentClass(A₁+Ã₁)")
@test mytest("W=rootdatum(:sl,4)","A₃")
@test mytest("uc=UnipotentClasses(W);","nothing")
@test mytest("uc.classes","5-element Array{Gapjm.Ucl.UnipotentClass,1}:\n UnipotentClass(1111)\n UnipotentClass(211)\n UnipotentClass(22)\n UnipotentClass(31)\n UnipotentClass(4)")
@test mytest("t=ICCTable(uc)","Coefficients of Xᵩ on Y_ψ for A₃\n     │4 31 22 211 1111\n─────┼─────────────────\nX4   │1  1  1   1    1\nX31  │0  1  1  Φ₂   Φ₃\nX22  │0  0  1   1   Φ₄\nX211 │0  0  0   1   Φ₃\nX1111│0  0  0   0    1")
end
@testset "Weyl.jl" begin
@test mytest("W=coxgroup(:D,4)","D₄")
@test mytest("cartan(W)","4×4 Array{Int64,2}:\n  2   0  -1   0\n  0   2  -1   0\n -1  -1   2  -1\n  0   0  -1   2")
@test mytest("W=coxgroup(:A,2)*coxgroup(:B,2)","A₂×B₂")
@test mytest("cartan(W)","4×4 Array{Int64,2}:\n  2  -1   0   0\n -1   2   0   0\n  0   0   2  -2\n  0   0  -1   2")
@test mytest("W=coxgroup(:D,4)","D₄")
@test mytest("p=W(1,3,2,1,3)","(1,14,13,2)(3,17,8,18)(4,12)(5,20,6,15)(7,10,11,9)(16,24)(19,22,23,21)")
@test mytest("word(W,p)","5-element Array{Int64,1}:\n 1\n 3\n 1\n 2\n 3")
@test mytest("cartan([1 3;3 1])","2×2 Array{Cyc{Int64},2}:\n  2  -1\n -1   2")
@test mytest("cartan(:A,4)","4×4 Array{Int64,2}:\n  2  -1   0   0\n -1   2  -1   0\n  0  -1   2  -1\n  0   0  -1   2")
@test mytest("Weyl.two_tree(cartan(:A,4))","4-element Array{Int64,1}:\n 1\n 2\n 3\n 4")
@test mytest("Weyl.two_tree(cartan(:E,8))","(4, [2], [3, 1], [5, 6, 7, 8])")
@test mytest("W=coxgroup(:A,2)","A₂")
@test mytest("w=longest(W)","(1,5)(2,4)(3,6)")
@test mytest("describe_involution(W,w)","1-element Array{Int64,1}:\n 3")
@test mytest("w==longest(reflection_subgroup(W,[3]))","true")
@test mytest("W=coxgroup(:G,2)","G₂")
@test mytest("Diagram(W)","O⇛ O\n1  2")
@test mytest("H=reflection_subgroup(W,[2,6])","G₂₍₂₆₎=Ã₁×A₁")
@test mytest("Diagram(H)","O\n1\nO\n2")
@test mytest("inclusion(H)","4-element Array{Int64,1}:\n  2\n  6\n  8\n 12")
@test mytest("restriction(H)","12-element Array{Int64,1}:\n 0\n 1\n 0\n 0\n 0\n 2\n 0\n 3\n 0\n 0\n 0\n 4")
@test mytest("word(W,H(2))","5-element Array{Int64,1}:\n 1\n 2\n 1\n 2\n 1")
@test mytest("elH=word.(Ref(H),elements(H))","4-element Array{Array{Int64,1},1}:\n []\n [2]\n [1]\n [1, 2]")
@test mytest("elW=word.(Ref(W),elements(H))","4-element Array{Array{Int64,1},1}:\n []\n [1, 2, 1, 2, 1]\n [2]\n [1, 2, 1, 2, 1, 2]")
@test mytest("map(w->H(w...),elH)==map(w->W(w...),elW)","true")
end
@testset "families.jl" begin
@test mytest("HasType.Family(family_imprimitive([[0,1],[1],[0]]))","Family(0011:3)\nlabel│eigen      1         2         3\n─────┼─────────────────────────────────\n1    │  ζ₃²  √-3/3    -√-3/3     √-3/3\n2    │    1 -√-3/3 (3-√-3)/6 (3+√-3)/6\n3    │    1  √-3/3 (3+√-3)/6 (3-√-3)/6")
@test mytest("HasType.FamiliesClassical(HasType.BDSymbols(3,1))","6-element Array{Family,1}:\n Family(01123:[1, 3, 8])\n Family(3:[9])\n Family(013:[5, 7, 10])\n Family(0112233:[4])\n Family(112:[2])\n Family(022:[6])")
end
