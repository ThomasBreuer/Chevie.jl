# auto-generated tests from julia-repl docstrings
using Test, Gapjm
#include("../tools/Gap4.jl")
function mytest(f::String,a::String,b::String)
  println(f," ",a)
  omit=a[end]==';'
  a=replace(a,"\\\\"=>"\\")
  a=repr(MIME("text/plain"),eval(Meta.parse(a)),context=:limit=>true)
  if omit a="nothing" end
  a=replace(a,r" *(\n|$)"s=>s"\1")
  a=replace(a,r"\n$"s=>"")
  b=replace(b,r" *(\n|$)"s=>s"\1")
  b=replace(b,r"\n$"s=>"")
  i=1
  while i<=lastindex(a) && i<=lastindex(b) && a[i]==b[i]
    i=nextind(a,i)
  end
  if a!=b print("exec=$(repr(a[i:end]))\nmanl=$(repr(b[i:end]))\n") end
  a==b
end
@testset verbose = true "Gapjm" begin
@testset "Chars.jl" begin
@test mytest("Chars.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Chars.jl","CharTable(W)","CharTable(A₃)\n    │1111 211 22 31  4\n────┼──────────────────\n1111│   1  -1  1  1 -1\n211 │   3  -1 -1  .  1\n22  │   2   .  2 -1  .\n31  │   3   1 -1  . -1\n4   │   1   1  1  1  1")
@test mytest("Chars.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Chars.jl","ct=CharTable(W)","CharTable(G₂)\n     │A₀ Ã₁ A₁ G₂ A₂ A₁+Ã₁\n─────┼─────────────────────\nφ₁‚₀ │ 1  1  1  1  1     1\nφ₁‚₆ │ 1 -1 -1  1  1     1\nφ′₁‚₃│ 1  1 -1 -1  1    -1\nφ″₁‚₃│ 1 -1  1 -1  1    -1\nφ₂‚₁ │ 2  .  .  1 -1    -2\nφ₂‚₂ │ 2  .  . -1 -1     2")
@test mytest("Chars.jl","ct.charnames","6-element Vector{String}:\n \"\\\\phi_{1,0}\"\n \"\\\\phi_{1,6}\"\n \"\\\\phi_{1,3}'\"\n \"\\\\phi_{1,3}''\"\n \"\\\\phi_{2,1}\"\n \"\\\\phi_{2,2}\"")
@test mytest("Chars.jl","ct.classnames","6-element Vector{String}:\n \"A_0\"\n \"\\\\tilde A_1\"\n \"A_1\"\n \"G_2\"\n \"A_2\"\n \"A_1+\\\\tilde A_1\"")
@test mytest("Chars.jl","Chars.fakedegree(coxgroup(:A,2),[[2,1]],Pol(:q))","Pol{Cyc{Int64}}: q²+q")
@test mytest("Chars.jl","fakedegrees(coxgroup(:A,2),Pol(:q))","3-element Vector{Pol{Int64}}:\n q³\n q²+q\n 1")
@test mytest("Chars.jl","charinfo(coxgroup(:G,2))[:charparams]","6-element Vector{Vector{Vector{Int64}}}:\n [[1, 0]]\n [[1, 6]]\n [[1, 3, 1]]\n [[1, 3, 2]]\n [[2, 1]]\n [[2, 2]]")
@test mytest("Chars.jl","charinfo(coxgroup(:D,4))[:positionId]","13")
@test mytest("Chars.jl","charinfo(coxgroup(:D,4))[:positionDet]","4")
@test mytest("Chars.jl","charinfo(coxgroup(:D,4))[:extRefl]","5-element Vector{Int64}:\n 13\n 11\n  5\n  3\n  4")
@test mytest("Chars.jl","charinfo(coxgroup(:D,4))[:b]","13-element Vector{Int64}:\n  6\n  6\n  7\n 12\n  4\n  3\n  6\n  2\n  2\n  4\n  1\n  2\n  0")
@test mytest("Chars.jl","charinfo(coxgroup(:D,4))[:B]","13-element Vector{Int64}:\n 10\n 10\n 11\n 12\n  8\n  9\n 10\n  6\n  6\n  8\n  5\n  6\n  0")
@test mytest("Chars.jl","charinfo(coxgroup(:D,4))[:a]","13-element Vector{Int64}:\n  6\n  6\n  7\n 12\n  3\n  3\n  6\n  2\n  2\n  3\n  1\n  2\n  0")
@test mytest("Chars.jl","charinfo(coxgroup(:D,4))[:A]","13-element Vector{Int64}:\n 10\n 10\n 11\n 12\n  9\n  9\n 10\n  6\n  6\n  9\n  5\n  6\n  0")
@test mytest("Chars.jl","charinfo(ComplexReflectionGroup(22))[:hgal]","(3,5)(4,6)(11,13)(12,14)(17,18)")
@test mytest("Chars.jl","charinfo(coxgroup(:A,2))","Dict{Symbol, Any} with 9 entries:\n  :a           => [3, 1, 0]\n  :b           => [3, 1, 0]\n  :positionId  => 3\n  :charnames   => [\"111\", \"21\", \"3\"]\n  :A           => [3, 2, 0]\n  :B           => [3, 2, 0]\n  :extRefl     => [3, 2, 1]\n  :charparams  => [[[1, 1, 1]], [[2, 1]], [[3]]]\n  :positionDet => 1")
@test mytest("Chars.jl","charinfo(coxgroup(:G,2))[:spaltenstein]","6-element Vector{String}:\n \"1\"\n \"\\\\varepsilon\"\n \"\\\\varepsilon_l\"\n \"\\\\varepsilon_c\"\n \"\\\\theta'\"\n \"\\\\theta''\"")
@test mytest("Chars.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Chars.jl","detPerm(W)","(1,8)(2,9)(3,11)(4,13)(7,12)")
@test mytest("Chars.jl","W=ComplexReflectionGroup(4)","G₄")
@test mytest("Chars.jl","conjPerm(W)","(2,3)(5,6)")
@test mytest("Chars.jl","classinfo(coxgroup(:A,2))","Dict{Symbol, Any} with 5 entries:\n  :classes     => [1, 3, 2]\n  :orders      => [1, 2, 3]\n  :classtext   => [Int64[], [1], [1, 2]]\n  :classnames  => [\"111\", \"21\", \"3\"]\n  :classparams => [[1, 1, 1], [2, 1], [3]]")
@test mytest("Chars.jl","W=spets(coxgroup(:D,4),Perm(1,2,4))","³D₄")
@test mytest("Chars.jl","CharTable(W)","CharTable(³D₄)\n     │C₃ Ã₂ C₃+A₁ Ã₂+A₁ F₄ Ã₂+A₂ F₄(a₁)\n─────┼──────────────────────────────────\n.4   │ 1  1     1     1  1     1      1\n.1111│-1  1     1    -1  1     1      1\n.22  │ .  2     2     . -1    -1     -1\n11.2 │ .  .     .     . -1     3      3\n1.3  │ 1  1    -1    -1  .    -2      2\n1.111│-1  1    -1     1  .    -2      2\n1.21 │ .  2    -2     .  .     2     -2")
@test mytest("Chars.jl","WF=rootdatum(\"3D4\")","³D₄")
@test mytest("Chars.jl","on_chars(Group(WF),WF.phi)","(1,2,7)(8,9,12)")
@test mytest("Chars.jl","representation(ComplexReflectionGroup(24),3)","3-element Vector{Matrix{Cyc{Int64}}}:\n [1 0 0; -1 -1 0; -1 0 -1]\n [-1 0 -1; 0 -1 (1-√-7)/2; 0 0 1]\n [-1 -1 0; 0 1 0; 0 (1+√-7)/2 -1]")
@test mytest("Chars.jl","representations(coxgroup(:B,2))","5-element Vector{Vector{Matrix{Int64}}}:\n [[1], [-1]]\n [[1 0; -1 -1], [1 2; 0 -1]]\n [[-1], [-1]]\n [[1], [1]]\n [[-1], [1]]")
@test mytest("Chars.jl","W=coxgroup(:H,3)","H₃")
@test mytest("Chars.jl","g=Wgraph(W,3)","2-element Vector{Vector{Vector{Any}}}:\n [[2], [1, 2], [1, 3], [1, 3], [2, 3]]\n [[-1, [[1, 3], [2, 4], [3, 5], [4, 5]]]]")
@test mytest("Chars.jl","toM.(WGraphToRepresentation(3,g,Pol(:x)))","3-element Vector{Matrix{Pol{Int64}}}:\n [x² 0 … 0 0; 0 -1 … 0 0; … ; 0 0 … -1 -x; 0 0 … 0 x²]\n [-1 0 … 0 0; 0 -1 … -x 0; … ; 0 0 … x² 0; 0 0 … -x -1]\n [x² 0 … 0 0; 0 x² … 0 0; … ; 0 -x … -1 0; 0 0 … 0 -1]")
@test mytest("Chars.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Chars.jl","charnames(W;limit=true)","6-element Vector{String}:\n \"φ₁‚₀\"\n \"φ₁‚₆\"\n \"φ′₁‚₃\"\n \"φ″₁‚₃\"\n \"φ₂‚₁\"\n \"φ₂‚₂\"")
@test mytest("Chars.jl","charnames(W;TeX=true)","6-element Vector{String}:\n \"\\\\phi_{1,0}\"\n \"\\\\phi_{1,6}\"\n \"\\\\phi_{1,3}'\"\n \"\\\\phi_{1,3}''\"\n \"\\\\phi_{2,1}\"\n \"\\\\phi_{2,2}\"")
@test mytest("Chars.jl","charnames(W;spaltenstein=true,limit=true)","6-element Vector{String}:\n \"1\"\n \"ε\"\n \"εₗ\"\n \"ε_c\"\n \"θ′\"\n \"θ″\"")
@test mytest("Chars.jl","charnames(W;spaltenstein=true,TeX=true)","6-element Vector{String}:\n \"1\"\n \"\\\\varepsilon\"\n \"\\\\varepsilon_l\"\n \"\\\\varepsilon_c\"\n \"\\\\theta'\"\n \"\\\\theta''\"")
@test mytest("Chars.jl","g=coxgroup(:G,2)","G₂")
@test mytest("Chars.jl","u=reflection_subgroup(g,[1,6])","G₂₍₁₅₎=A₂")
@test mytest("Chars.jl","t=InductionTable(u,g)","Induction Table from G₂₍₁₅₎=A₂ to G₂\n     │111 21 3\n─────┼─────────\nφ₁‚₀ │  .  . 1\nφ₁‚₆ │  1  . .\nφ′₁‚₃│  1  . .\nφ″₁‚₃│  .  . 1\nφ₂‚₁ │  .  1 .\nφ₂‚₂ │  .  1 .")
@test mytest("Chars.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Chars.jl","H=reflection_subgroup(W,[1,3])","D₄₍₁₃₎=A₂Φ₁²")
@test mytest("Chars.jl","jInductionTable(H,W)","j-Induction Table from D₄₍₁₃₎=A₂Φ₁² to D₄\n     │111 21 3\n─────┼─────────\n11+  │  .  . .\n11-  │  .  . .\n1.111│  .  . .\n.1111│  .  . .\n11.2 │  .  . .\n1.21 │  1  . .\n.211 │  .  . .\n2+   │  .  . .\n2-   │  .  . .\n.22  │  .  . .\n1.3  │  .  1 .\n.31  │  .  . .\n.4   │  .  . 1")
@test mytest("Chars.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Chars.jl","H=reflection_subgroup(W,[1,3])","D₄₍₁₃₎=A₂Φ₁²")
@test mytest("Chars.jl","JInductionTable(H,W)","J-Induction Table from D₄₍₁₃₎=A₂Φ₁² to D₄\n     │111 21 3\n─────┼─────────\n11+  │  .  . .\n11-  │  .  . .\n1.111│  .  . .\n.1111│  .  . .\n11.2 │  1  . .\n1.21 │  1  . .\n.211 │  .  . .\n2+   │  .  . .\n2-   │  .  . .\n.22  │  .  . .\n1.3  │  .  1 .\n.31  │  .  . .\n.4   │  .  . 1")
@test mytest("Chars.jl","W=ComplexReflectionGroup(4);@Mvp x,y","nothing")
@test mytest("Chars.jl","discriminant(W)(x,y)","Mvp{Int64}: x³-y²")
end
@testset "Combinat.jl" begin
@test mytest("Combinat.jl","groupby(iseven,1:10)","Dict{Bool, Vector{Int64}} with 2 entries:\n  0 => [1, 3, 5, 7, 9]\n  1 => [2, 4, 6, 8, 10]")
@test mytest("Combinat.jl","tally(\"a tally test\")","7-element Vector{Pair{Char, Int64}}:\n ' ' => 2\n 'a' => 2\n 'e' => 1\n 'l' => 2\n 's' => 1\n 't' => 3\n 'y' => 1")
@test mytest("Combinat.jl","l=[:Jan,:Feb,:Mar,:Apr,:May,:Jun,:Jul,:Aug,:Sep,:Oct,:Nov,:Dec];","nothing")
@test mytest("Combinat.jl","collectby(x->first(string(x)),l)","8-element Vector{Vector{Symbol}}:\n [:Apr, :Aug]\n [:Dec]\n [:Feb]\n [:Jan, :Jun, :Jul]\n [:Mar, :May]\n [:Nov]\n [:Oct]\n [:Sep]")
@test mytest("Combinat.jl","collectby(\"JFMAMJJASOND\",l)","8-element Vector{Vector{Symbol}}:\n [:Apr, :Aug]\n [:Dec]\n [:Feb]\n [:Jan, :Jun, :Jul]\n [:Mar, :May]\n [:Nov]\n [:Oct]\n [:Sep]")
@test mytest("Combinat.jl","ncombinations([1,2,2,3])","12")
@test mytest("Combinat.jl","combinations([1,2,2,3])","12-element Vector{Vector{Int64}}:\n []\n [1]\n [2]\n [3]\n [1, 2]\n [1, 3]\n [2, 2]\n [2, 3]\n [1, 2, 2]\n [1, 2, 3]\n [2, 2, 3]\n [1, 2, 2, 3]")
@test mytest("Combinat.jl","narrangements(collect(\"settle\"),4)","102")
@test mytest("Combinat.jl","narrangements(collect(\"settle\"))","523")
@test mytest("Combinat.jl","String.(arrangements(collect(\"settle\"),2))","14-element Vector{String}:\n \"ee\"\n \"el\"\n \"es\"\n \"et\"\n \"le\"\n \"ls\"\n \"lt\"\n \"se\"\n \"sl\"\n \"st\"\n \"te\"\n \"tl\"\n \"ts\"\n \"tt\"")
@test mytest("Combinat.jl","npartitions(7)","15")
@test mytest("Combinat.jl","partitions(7)","15-element Vector{Vector{Int64}}:\n [1, 1, 1, 1, 1, 1, 1]\n [2, 1, 1, 1, 1, 1]\n [2, 2, 1, 1, 1]\n [2, 2, 2, 1]\n [3, 1, 1, 1, 1]\n [3, 2, 1, 1]\n [3, 2, 2]\n [3, 3, 1]\n [4, 1, 1, 1]\n [4, 2, 1]\n [4, 3]\n [5, 1, 1]\n [5, 2]\n [6, 1]\n [7]")
@test mytest("Combinat.jl","npartitions(7,3)","4")
@test mytest("Combinat.jl","partitions(7,3)","4-element Vector{Vector{Int64}}:\n [3, 2, 2]\n [3, 3, 1]\n [4, 2, 1]\n [5, 1, 1]")
@test mytest("Combinat.jl","nrestrictedpartitions(17,[10,5,2])","3")
@test mytest("Combinat.jl","restrictedpartitions(17,[10,5,2])","3-element Vector{Vector{Int64}}:\n [5, 2, 2, 2, 2, 2, 2]\n [5, 5, 5, 2]\n [10, 5, 2]")
@test mytest("Combinat.jl","restrictedpartitions(17,[10,5,2],3)","1-element Vector{Vector{Int64}}:\n [10, 5, 2]")
@test mytest("Combinat.jl","nrestrictedpartitions(17,[10,5,2],3)","1")
@test mytest("Combinat.jl","conjugate_partition([4,2,1])","4-element Vector{Int64}:\n 3\n 2\n 1\n 1")
@test mytest("Combinat.jl","conjugate_partition([6])","6-element Vector{Int64}:\n 1\n 1\n 1\n 1\n 1\n 1")
@test mytest("Combinat.jl","dominates([5,4],[4,4,1])","true")
@test mytest("Combinat.jl","npartition_tuples(3,2)","10")
@test mytest("Combinat.jl","partition_tuples(3,2)","10-element Vector{Vector{Vector{Int64}}}:\n [[1, 1, 1], []]\n [[1, 1], [1]]\n [[1], [1, 1]]\n [[], [1, 1, 1]]\n [[2, 1], []]\n [[1], [2]]\n [[2], [1]]\n [[], [2, 1]]\n [[3], []]\n [[], [3]]")
@test mytest("Combinat.jl","compositions(4)","8-element Vector{Vector{Int64}}:\n [1, 1, 1, 1]\n [2, 1, 1]\n [1, 2, 1]\n [3, 1]\n [1, 1, 2]\n [2, 2]\n [1, 3]\n [4]")
@test mytest("Combinat.jl","compositions(4,2)","3-element Vector{Vector{Int64}}:\n [3, 1]\n [2, 2]\n [1, 3]")
@test mytest("Combinat.jl","compositions(4,2;start=0)","5-element Vector{Vector{Int64}}:\n [4, 0]\n [3, 1]\n [2, 2]\n [1, 3]\n [0, 4]")
@test mytest("Combinat.jl","submultisets(1:4,3)","20-element Vector{Vector{Int64}}:\n [1, 1, 1]\n [1, 1, 2]\n [1, 1, 3]\n [1, 1, 4]\n [1, 2, 2]\n [1, 2, 3]\n [1, 2, 4]\n [1, 3, 3]\n [1, 3, 4]\n [1, 4, 4]\n [2, 2, 2]\n [2, 2, 3]\n [2, 2, 4]\n [2, 3, 3]\n [2, 3, 4]\n [2, 4, 4]\n [3, 3, 3]\n [3, 3, 4]\n [3, 4, 4]\n [4, 4, 4]")
@test mytest("Combinat.jl","npartitions_set(1:3)","5")
@test mytest("Combinat.jl","partitions_set(1:3)","5-element Vector{Vector{Vector{Int64}}}:\n [[1], [2], [3]]\n [[1], [2, 3]]\n [[1, 2], [3]]\n [[1, 2, 3]]\n [[1, 3], [2]]")
@test mytest("Combinat.jl","npartitions_set(1:4,2)","7")
@test mytest("Combinat.jl","partitions_set(1:4,2)","7-element Vector{Vector{Vector{Int64}}}:\n [[1], [2, 3, 4]]\n [[1, 2], [3, 4]]\n [[1, 2, 3], [4]]\n [[1, 2, 4], [3]]\n [[1, 3], [2, 4]]\n [[1, 3, 4], [2]]\n [[1, 4], [2, 3]]")
@test mytest("Combinat.jl","lcm_partitions([[1,2],[3,4],[5,6]],[[1],[2,5],[3],[4],[6]])","2-element Vector{Vector{Int64}}:\n [1, 2, 5, 6]\n [3, 4]")
@test mytest("Combinat.jl","gcd_partitions([[1,2],[3,4],[5,6]],[[1],[2,5],[3],[4],[6]])","6-element Vector{Vector{Int64}}:\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]")
@test mytest("Combinat.jl","bell.(0:6)","7-element Vector{Int64}:\n   1\n   1\n   2\n   5\n  15\n  52\n 203")
@test mytest("Combinat.jl","bell(14)","190899322")
@test mytest("Combinat.jl","stirling2.(4,0:4)","5-element Vector{Int64}:\n 0\n 1\n 7\n 6\n 1")
@test mytest("Combinat.jl","[stirling2(i,j) for i in 0:6, j in 0:6]","7×7 Matrix{Int64}:\n 1  0   0   0   0   0  0\n 0  1   0   0   0   0  0\n 0  1   1   0   0   0  0\n 0  1   3   1   0   0  0\n 0  1   7   6   1   0  0\n 0  1  15  25  10   1  0\n 0  1  31  90  65  15  1")
@test mytest("Combinat.jl","stirling2(50,big(10))","26154716515862881292012777396577993781727011")
@test mytest("Combinat.jl","catalan(8)","1430")
end
@testset "ComplexR.jl" begin
@test mytest("ComplexR.jl","G=ComplexReflectionGroup(4)","G₄")
@test mytest("ComplexR.jl","degrees(G)","2-element Vector{Int64}:\n 4\n 6")
@test mytest("ComplexR.jl","length(G)","24")
@test mytest("ComplexR.jl","fakedegrees(G,Pol(:q))","7-element Vector{Pol{Int64}}:\n 1\n q⁴\n q⁸\n q⁷+q⁵\n q⁵+q³\n q³+q\n q⁶+q⁴+q²")
@test mytest("ComplexR.jl","ComplexReflectionGroup(2,1,6)","B₆")
@test mytest("ComplexR.jl","W=ComplexReflectionGroup(30)","H₄")
@test mytest("ComplexR.jl","degrees(W)","4-element Vector{Int64}:\n  2\n 12\n 20\n 30")
@test mytest("ComplexR.jl","length(W)","14400")
@test mytest("ComplexR.jl","W=coxgroup(:E,6)","E₆")
@test mytest("ComplexR.jl","WF=spets(W)","E₆")
@test mytest("ComplexR.jl","phi=W(6,5,4,2,3,1,4,3,5,4,2,6,5,4,3,1);","nothing")
@test mytest("ComplexR.jl","HF=subspets(WF,2:5,phi)","E₆₍₂₃₄₅₎=³D₄Φ₃")
@test mytest("ComplexR.jl","Diagram(HF)","ϕ acts as (1,2,4) on the component below\n  O 2\n  ￨\nO—O—O\n1 3 4")
@test mytest("ComplexR.jl","degrees(HF)","6-element Vector{Tuple{Int64, Cyc{Int64}}}:\n (1, ζ₃)\n (1, ζ₃²)\n (2, 1)\n (4, ζ₃)\n (6, 1)\n (4, ζ₃²)")
@test mytest("ComplexR.jl","W=ComplexReflectionGroup(4)","G₄")
@test mytest("ComplexR.jl","codegrees(W)","2-element Vector{Int64}:\n 0\n 2")
end
@testset "Cosets.jl" begin
@test mytest("Cosets.jl","W=ComplexReflectionGroup(14)","G₁₄")
@test mytest("Cosets.jl","R=reflection_subgroup(W,[2,4])","G₁₄₍₂₄₎=G₅")
@test mytest("Cosets.jl","RF=spets(R,W(1))","G₁₄₍₂₄₎=²G₅")
@test mytest("Cosets.jl","degrees(RF)","2-element Vector{Tuple{Int64, Cyc}}:\n (6, 1)\n (12, -1)")
@test mytest("Cosets.jl","W=coxgroup(:B,2)","B₂")
@test mytest("Cosets.jl","W=coxgroup(:Bsym,2)","Bsym₂")
@test mytest("Cosets.jl","WF=spets(W,Perm(1,2))","²Bsym₂")
@test mytest("Cosets.jl","CharTable(WF)","CharTable(²Bsym₂)\n   │    1 121\n───┼──────────\n2. │1   1   1\n.11│1  -1  -1\n1.1│. -√2  √2")
@test mytest("Cosets.jl","W=coxgroup(:Bsym,2)","Bsym₂")
@test mytest("Cosets.jl","WF=spets(W,Perm(1,2))","²Bsym₂")
@test mytest("Cosets.jl","subspets(WF,Int[],W(1))","²Bsym₂₍₎=Φ‴₈")
@test mytest("Cosets.jl","W=coxgroup(:B,2)","B₂")
@test mytest("Cosets.jl","twistings(W,[1])","2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n B₂₍₁₎=Ã₁Φ₁\n B₂₍₁₎=Ã₁Φ₂")
@test mytest("Cosets.jl","twistings(W,[2])","2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n B₂₍₂₎=A₁Φ₁\n B₂₍₂₎=A₁Φ₂")
@test mytest("Cosets.jl","W=coxgroup(:B,2)","B₂")
@test mytest("Cosets.jl","twistings(W,[2,4])","2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n B₂₍₂₄₎=A₁×A₁\n B₂₍₂₄₎=(A₁A₁)")
@test mytest("Cosets.jl","W=coxgroup(:E,6)","E₆")
@test mytest("Cosets.jl","WF=spets(W,Perm(1,6)*Perm(3,5))","²E₆")
@test mytest("Cosets.jl","twistings(W,2:5)","3-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n E₆₍₂₃₄₅₎=D₄Φ₁²\n E₆₍₂₃₄₅₎=³D₄Φ₃\n E₆₍₂₃₄₅₎=²D₄Φ₁Φ₂")
@test mytest("Cosets.jl","twistings(WF,2:5)","3-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n ²E₆₍₂₅₄₃₎=²D₄₍₁₄₃₂₎Φ₁Φ₂\n ²E₆₍₂₅₄₃₎=³D₄₍₁₄₃₂₎Φ₆\n ²E₆₍₂₃₄₅₎=D₄Φ₂²")
@test mytest("Cosets.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Cosets.jl","Cosets.graph_automorphisms(refltype(W*W))","Group([(1,5)(2,6)(3,7)(4,8),(1,2),(1,4)])")
@test mytest("Cosets.jl","twistings(coxgroup(:A,3)*coxgroup(:A,3))","8-element Vector{Spets{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n A₃×A₃\n A₃×²A₃\n ²A₃×A₃\n ²A₃×²A₃\n (A₃A₃)\n ²(A₃A₃)\n ²(A₃A₃)₍₁₂₃₆₅₄₎\n (A₃A₃)₍₁₂₃₆₅₄₎")
@test mytest("Cosets.jl","twistings(coxgroup(:D,4))","6-element Vector{Spets{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n D₄\n ²D₄₍₂₄₃₁₎\n ²D₄\n ³D₄\n ²D₄₍₁₄₃₂₎\n ³D₄₍₁₄₃₂₎")
@test mytest("Cosets.jl","W=rootdatum(:so,8)","D₄")
@test mytest("Cosets.jl","twistings(W)","2-element Vector{Spets{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n D₄\n ²D₄")
@test mytest("Cosets.jl","W=rootdatum(:gl,3)","A₂Φ₁")
@test mytest("Cosets.jl","gu3=spets(W,-reflrep(W,W()))","²A₂Φ₂")
@test mytest("Cosets.jl","F4=coxgroup(:F,4);D4=reflection_subgroup(F4,[1,2,16,48])","F₄₍₉‚₂‚₁‚₁₆₎=D₄₍₃₂₁₄₎")
@test mytest("Cosets.jl","spets(D4,[1 0 0 0;0 1 2 0;0 0 0 1;0 0 -1 -1])","F₄₍₉‚₁₆‚₁‚₂₎=³D₄₍₃₄₁₂₎")
@test mytest("Cosets.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Cosets.jl","spets(W,Perm(1,3))","²A₃")
@test mytest("Cosets.jl","torus([0 -1;1 -1])","Φ₃")
@test mytest("Cosets.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Cosets.jl","twistings(W,Int[])","5-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n A₃₍₎=Φ₁³\n A₃₍₎=Φ₁²Φ₂\n A₃₍₎=Φ₁Φ₂²\n A₃₍₎=Φ₁Φ₃\n A₃₍₎=Φ₂Φ₄")
@test mytest("Cosets.jl","torus(W,2)","A₃₍₎=Φ₁²Φ₂")
@test mytest("Cosets.jl","WF=spets(W,Perm(1,3))","²A₃")
@test mytest("Cosets.jl","twistings(WF,Int[])","5-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n ²A₃₍₎=Φ₂³\n ²A₃₍₎=Φ₁Φ₂²\n ²A₃₍₎=Φ₁²Φ₂\n ²A₃₍₎=Φ₂Φ₆\n ²A₃₍₎=Φ₁Φ₄")
@test mytest("Cosets.jl","torus(WF,2)","²A₃₍₎=Φ₁Φ₂²")
@test mytest("Cosets.jl","WF=spets(coxgroup(:F,4))","F₄")
@test mytest("Cosets.jl","w=transporting_elt(Group(WF),[1,2,9,16],[1,9,16,2],action=(s,g)->s.^g);","nothing")
@test mytest("Cosets.jl","LF=subspets(WF,[1,2,9,16],w)","F₄₍₉‚₁₆‚₁‚₂₎=³D₄₍₃₄₁₂₎")
@test mytest("Cosets.jl","Diagram(LF)","ϕ acts as (2,3,4) on the component below\n  O 4\n  ￨\nO—O—O\n3 1 2")
@test mytest("Cosets.jl","spets(\"3G422\")","³G₄‚₂‚₂")
@test mytest("Cosets.jl","spets(\"2G5\")","²G₅")
@test mytest("Cosets.jl","spets(\"3G333\")","³G₃‚₃‚₃₍₁‚₂‚₃‚₄₄₎")
@test mytest("Cosets.jl","spets(\"3pG333\")","³G₃‚₃‚₃₍₁‚₂‚₃‚₄₄₎")
@test mytest("Cosets.jl","spets(\"4G333\")","⁴G₃‚₃‚₃₍₁‚₂‚₃‚₁₂₎")
end
@testset "CoxGroups.jl" begin
@test mytest("CoxGroups.jl","W=CoxSym(4)","𝔖 ₄")
@test mytest("CoxGroups.jl","p=W(1,3,2,1,3)","Perm{UInt8}: (1,4)")
@test mytest("CoxGroups.jl","word(W,p)","5-element Vector{Int64}:\n 1\n 2\n 3\n 2\n 1")
@test mytest("CoxGroups.jl","word(W,longest(W))","6-element Vector{Int64}:\n 1\n 2\n 1\n 3\n 2\n 1")
@test mytest("CoxGroups.jl","w0=longest(W)","Perm{UInt8}: (1,4)(2,3)")
@test mytest("CoxGroups.jl","length(W,w0)","6")
@test mytest("CoxGroups.jl","map(i->word(W,reflection(W,i)),1:nref(W))","6-element Vector{Vector{Int64}}:\n [1]\n [2]\n [3]\n [1, 2, 1]\n [2, 3, 2]\n [1, 2, 3, 2, 1]")
@test mytest("CoxGroups.jl","[length(elements(W,i)) for i in 0:nref(W)]","7-element Vector{Int64}:\n 1\n 3\n 5\n 6\n 5\n 3\n 1")
@test mytest("CoxGroups.jl","W=CoxSym(3)","𝔖 ₃")
@test mytest("CoxGroups.jl","firstleftdescent(W,Perm(2,3))","2")
@test mytest("CoxGroups.jl","W=CoxSym(3)","𝔖 ₃")
@test mytest("CoxGroups.jl","leftdescents(W,Perm(1,3))","2-element Vector{Int64}:\n 1\n 2")
@test mytest("CoxGroups.jl","W=coxgroup(:A,3)","A₃")
@test mytest("CoxGroups.jl","w=perm\"(1,11)(3,10)(4,9)(5,7)(6,12)\"","(1,11)(3,10)(4,9)(5,7)(6,12)")
@test mytest("CoxGroups.jl","w in W","true")
@test mytest("CoxGroups.jl","word(W,w)","5-element Vector{Int64}:\n 1\n 2\n 3\n 2\n 1")
@test mytest("CoxGroups.jl","W=CoxSym(4)","𝔖 ₄")
@test mytest("CoxGroups.jl","p=W(1,2,3,1,2,3)","Perm{UInt8}: (1,3)(2,4)")
@test mytest("CoxGroups.jl","length(W,p)","4")
@test mytest("CoxGroups.jl","word(W,p)","4-element Vector{Int64}:\n 2\n 1\n 3\n 2")
@test mytest("CoxGroups.jl","longest(CoxSym(4))","Perm{UInt8}: (1,4)(2,3)")
@test mytest("CoxGroups.jl","longest(CoxSym(4))","Perm{UInt8}: (1,4)(2,3)")
@test mytest("CoxGroups.jl","W=coxgroup(:G,2)","G₂")
@test mytest("CoxGroups.jl","H=reflection_subgroup(W,[2,6])","G₂₍₂₆₎=Ã₁×A₁")
@test mytest("CoxGroups.jl","word.(Ref(W),unique(reduced.(Ref(H),elements(W))))","3-element Vector{Vector{Int64}}:\n []\n [1]\n [1, 2]")
@test mytest("CoxGroups.jl","W=coxgroup(:G,2)","G₂")
@test mytest("CoxGroups.jl","H=reflection_subgroup(W,[2,6])","G₂₍₂₆₎=Ã₁×A₁")
@test mytest("CoxGroups.jl","[word(W,w) for S in reduced(H,W) for w in S]","3-element Vector{Vector{Int64}}:\n []\n [1]\n [1, 2]")
@test mytest("CoxGroups.jl","W=coxgroup(:H,3)","H₃")
@test mytest("CoxGroups.jl","w=W(1,2,1,3);","nothing")
@test mytest("CoxGroups.jl","b=filter(x->bruhatless(W,x,w),elements(W));","nothing")
@test mytest("CoxGroups.jl","word.(Ref(W),b)","12-element Vector{Vector{Int64}}:\n []\n [3]\n [2]\n [1]\n [2, 3]\n [1, 3]\n [2, 1]\n [1, 2]\n [2, 1, 3]\n [1, 2, 3]\n [1, 2, 1]\n [1, 2, 1, 3]")
@test mytest("CoxGroups.jl","W=CoxSym(3)","𝔖 ₃")
@test mytest("CoxGroups.jl","bruhatless(W,Perm(1,3))","4-element Vector{Vector{Perm{Int16}}}:\n [()]\n [(1,2), (2,3)]\n [(1,2,3), (1,3,2)]\n [(1,3)]")
@test mytest("CoxGroups.jl","W=coxgroup(:A,2)","A₂")
@test mytest("CoxGroups.jl","Poset(W)",".<1,2<21,12<121")
@test mytest("CoxGroups.jl","W=coxgroup(:A,3)","A₃")
@test mytest("CoxGroups.jl","Poset(W,W(1,3))",".<3,1<13")
@test mytest("CoxGroups.jl","W=coxgroup(:A,3)","A₃")
@test mytest("CoxGroups.jl","words(W,longest(W))","16-element Vector{Vector{Int64}}:\n [1, 2, 1, 3, 2, 1]\n [1, 2, 3, 1, 2, 1]\n [1, 2, 3, 2, 1, 2]\n [1, 3, 2, 1, 3, 2]\n [1, 3, 2, 3, 1, 2]\n [2, 1, 2, 3, 2, 1]\n [2, 1, 3, 2, 1, 3]\n [2, 1, 3, 2, 3, 1]\n [2, 3, 1, 2, 1, 3]\n [2, 3, 1, 2, 3, 1]\n [2, 3, 2, 1, 2, 3]\n [3, 1, 2, 1, 3, 2]\n [3, 1, 2, 3, 1, 2]\n [3, 2, 1, 2, 3, 2]\n [3, 2, 1, 3, 2, 3]\n [3, 2, 3, 1, 2, 3]")
@test mytest("CoxGroups.jl","W=coxgroup(:A,3)","A₃")
@test mytest("CoxGroups.jl","inversions(W,W(1,2,1))","3-element Vector{Int64}:\n 1\n 2\n 4")
@test mytest("CoxGroups.jl","CoxGroups.standard_parabolic_class(coxgroup(:E,8),[7,8])","7-element Vector{Vector{Int64}}:\n [7, 8]\n [6, 7]\n [5, 6]\n [4, 5]\n [2, 4]\n [3, 4]\n [1, 3]")
@test mytest("CoxGroups.jl","C=cartan(:H,3)","3×3 Matrix{Cyc{Int64}}:\n       2  ζ₅²+ζ₅³   0\n ζ₅²+ζ₅³        2  -1\n       0       -1   2")
@test mytest("CoxGroups.jl","coxmat(C)","3×3 Matrix{Int64}:\n 1  5  2\n 5  1  3\n 2  3  1")
@test mytest("CoxGroups.jl","W=CoxSym(4)","𝔖 ₄")
@test mytest("CoxGroups.jl","coxmat(W)","3×3 Matrix{Int64}:\n 1  3  2\n 3  1  3\n 2  3  1")
@test mytest("CoxGroups.jl","W=ComplexReflectionGroup(29)","G₂₉")
@test mytest("CoxGroups.jl","braid_relations(W)","7-element Vector{Vector{Vector{Int64}}}:\n [[1, 2, 1], [2, 1, 2]]\n [[2, 4, 2], [4, 2, 4]]\n [[3, 4, 3], [4, 3, 4]]\n [[2, 3, 2, 3], [3, 2, 3, 2]]\n [[1, 3], [3, 1]]\n [[1, 4], [4, 1]]\n [[4, 3, 2, 4, 3, 2], [3, 2, 4, 3, 2, 4]]")
@test mytest("CoxGroups.jl","W=CoxSym(3)","𝔖 ₃")
@test mytest("CoxGroups.jl","e=elements(W)","6-element Vector{Perm{UInt8}}:\n ()\n (2,3)\n (1,2)\n (1,2,3)\n (1,3,2)\n (1,3)")
@test mytest("CoxGroups.jl","length.(Ref(W),e)","6-element Vector{Int64}:\n 0\n 1\n 1\n 2\n 2\n 3")
@test mytest("CoxGroups.jl","W=CoxSym(3)","𝔖 ₃")
@test mytest("CoxGroups.jl","isleftdescent(W,Perm(1,2),1)","true")
@test mytest("CoxGroups.jl","W=GenCox([2 -2;-2 2])","GenCox([2 -2; -2 2])")
end
@testset "CycPols.jl" begin
@test mytest("CycPols.jl","@Pol q","Pol{Int64}: q")
@test mytest("CycPols.jl","p=CycPol(q^25-q^24-2q^23-q^2+q+2)","(q-2)Φ₁Φ₂Φ₂₃")
@test mytest("CycPols.jl","p(q)","Pol{Int64}: q²⁵-q²⁴-2q²³-q²+q+2")
@test mytest("CycPols.jl","p*inv(CycPol(q^2+q+1))","(q-2)Φ₁Φ₂Φ₃⁻¹Φ₂₃")
@test mytest("CycPols.jl","cyclotomic_polynomial(5)","Pol{Int64}: q⁴+q³+q²+q+1")
@test mytest("CycPols.jl","cyclotomic_polynomial(24)","Pol{Int64}: q⁸-q⁴+1")
@test mytest("CycPols.jl","CycPol(3*q^3-3)","3Φ₁Φ₃")
end
@testset "Cycs.jl" begin
@test mytest("Cycs.jl","E(3)+E(4)","Cyc{Int64}: ζ₁₂⁴-ζ₁₂⁷-ζ₁₂¹¹")
@test mytest("Cycs.jl","E(3,2)","Cyc{Int64}: ζ₃²")
@test mytest("Cycs.jl","1+E(3,2)","Cyc{Int64}: -ζ₃")
@test mytest("Cycs.jl","a=E(4)-E(4)","Cyc{Int64}: 0")
@test mytest("Cycs.jl","conductor(a)","1")
@test mytest("Cycs.jl","typeof(convert(Int,a))","Int64")
@test mytest("Cycs.jl","inv(1+E(4))","Cyc{Rational{Int64}}: (1-ζ₄)/2")
@test mytest("Cycs.jl","inv(E(5)+E(5,4))","Cyc{Int64}: -ζ₅²-ζ₅³")
@test mytest("Cycs.jl","Cyc(1//2+im)","Cyc{Rational{Int64}}: (1+2ζ₄)/2")
@test mytest("Cycs.jl","conj(1+E(4))","Cyc{Int64}: 1-ζ₄")
@test mytest("Cycs.jl","real(E(5))","Cyc{Rational{Int64}}: (-1+√5)/4")
@test mytest("Cycs.jl","imag(E(5))","Cyc{Rational{Int64}}: (ζ₅-ζ₅⁴)/2")
@test mytest("Cycs.jl","c=E(9)","Cyc{Int64}: -ζ₉⁴-ζ₉⁷")
@test mytest("Cycs.jl","Root1(c)","Root1: ζ₉")
@test mytest("Cycs.jl","Root1(1+E(4))","nothing")
@test mytest("Cycs.jl","Root1(4,1)","Root1: ζ₄")
@test mytest("Cycs.jl","c=Root1(;r=1//4)*Root1(3,1)","Root1: ζ₁₂⁷")
@test mytest("Cycs.jl","E(c)","Cyc{Int64}: ζ₁₂⁷")
@test mytest("Cycs.jl","c=Complex{Float64}(E(3))","-0.4999999999999999 + 0.8660254037844387im")
@test mytest("Cycs.jl","-1<Cyc(0)<1","true")
@test mytest("Cycs.jl","conductor(E(9))","9")
@test mytest("Cycs.jl","conductor([E(3),1//2,E(4)])","12")
@test mytest("Cycs.jl","coefficients(E(9))","9-element Vector{Int64}:\n  0\n  0\n  0\n  0\n -1\n  0\n  0\n -1\n  0")
@test mytest("Cycs.jl","galois(1+E(4),-1)","Cyc{Int64}: 1-ζ₄")
@test mytest("Cycs.jl","galois(root(5),2)==-root(5)","true")
@test mytest("Cycs.jl","r=Root1(-E(9,2)-E(9,5))","Root1: ζ₉⁸")
@test mytest("Cycs.jl","conductor(r)","9")
@test mytest("Cycs.jl","exponent(r)","8")
@test mytest("Cycs.jl","E(r)","Cyc{Int64}: -ζ₉²-ζ₉⁵")
@test mytest("Cycs.jl","Root1(-E(9,4)-E(9,5))","nothing")
@test mytest("Cycs.jl","Quadratic(1+E(3))","(1+√-3)/2")
@test mytest("Cycs.jl","Quadratic(1+E(5))","nothing")
@test mytest("Cycs.jl","root(-1)","Cyc{Int64}: ζ₄")
@test mytest("Cycs.jl","root(E(4))","Cyc{Int64}: ζ₈")
@test mytest("Cycs.jl","root(27,6)","Cyc{Int64}: √3")
end
@testset "Eigenspaces.jl" begin
@test mytest("Eigenspaces.jl","W=coxgroup(:E,8)","E₈")
@test mytest("Eigenspaces.jl","relative_degrees(W,4)","4-element Vector{Int64}:\n  8\n 12\n 20\n 24")
@test mytest("Eigenspaces.jl","regular_eigenvalues(coxgroup(:G,2))","6-element Vector{Root1}:\n   1\n  -1\n  ζ₃\n ζ₃²\n  ζ₆\n ζ₆⁵")
@test mytest("Eigenspaces.jl","W=ComplexReflectionGroup(6)","G₆")
@test mytest("Eigenspaces.jl","L=twistings(W,[2])[2]","G₆₍₂₎=G₃‚₁‚₁[ζ₄]Φ′₄")
@test mytest("Eigenspaces.jl","regular_eigenvalues(L)","3-element Vector{Root1}:\n    ζ₄\n  ζ₁₂⁷\n ζ₁₂¹¹")
@test mytest("Eigenspaces.jl","W=coxgroup(:E,8)","E₈")
@test mytest("Eigenspaces.jl","position_regular_class(W,30)","65")
@test mytest("Eigenspaces.jl","W=ComplexReflectionGroup(6)","G₆")
@test mytest("Eigenspaces.jl","L=twistings(W,[2])[2]","G₆₍₂₎=G₃‚₁‚₁[ζ₄]Φ′₄")
@test mytest("Eigenspaces.jl","position_regular_class(L,7//12)","2")
@test mytest("Eigenspaces.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Eigenspaces.jl","w=W(1:3...)","(1,12,3,2)(4,11,10,5)(6,9,8,7)")
@test mytest("Eigenspaces.jl","p=eigenspace_projector(W,w,1//4)","3×3 Matrix{Cyc{Rational{Int64}}}:\n  (1+ζ₄)/4   ζ₄/2  (-1+ζ₄)/4\n  (1-ζ₄)/4    1/2   (1+ζ₄)/4\n (-1-ζ₄)/4  -ζ₄/2   (1-ζ₄)/4")
@test mytest("Eigenspaces.jl","GLinearAlgebra.rank(p)","1")
@test mytest("Eigenspaces.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Eigenspaces.jl","split_levis(W,4)","2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n A₃\n A₃₍₎=Φ₂Φ₄")
@test mytest("Eigenspaces.jl","W=spets(coxgroup(:D,4),Perm(1,2,4))","³D₄")
@test mytest("Eigenspaces.jl","split_levis(W,3)","3-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n ³D₄\n ³D₄₍₁₃₎=A₂Φ₃\n ³D₄₍₎=Φ₃²")
@test mytest("Eigenspaces.jl","W=coxgroup(:E,8)","E₈")
@test mytest("Eigenspaces.jl","split_levis(W,4,2)","3-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n E₈₍₃₂₄₅₎=D₄₍₁₃₂₄₎Φ₄²\n E₈₍₅₇₂₃₎=(A₁A₁)×(A₁A₁)Φ₄²\n E₈₍₃₁₅₆₎=²(A₂A₂)₍₁₄₂₃₎Φ₄²")
@test mytest("Eigenspaces.jl","split_levis(ComplexReflectionGroup(5))","4-element Vector{Spets{PRSG{Cyc{Rational{Int64}}, Int16}}}:\n G₅\n G₅₍₁₎=G₃‚₁‚₁Φ₁\n G₅₍₂₎=G₃‚₁‚₁Φ₁\n G₅₍₎=Φ₁²")
end
@testset "FFfac.jl" begin
@test mytest("FFfac.jl","@Pol q","Pol{Int64}: q")
@test mytest("FFfac.jl","f=(q^4-1)*Z(3)^0","Pol{FFE{3}}: q⁴-1")
@test mytest("FFfac.jl","factor(f)","3-element Vector{Pol{FFE{3}}}:\n q²+1\n q+1\n q-1")
@test mytest("FFfac.jl","factor(f,GF(9))","4-element Vector{Pol{FFE{3}}}:\n q+1\n q-1\n q+Z₉²\n q+Z₉⁶")
end
@testset "FFields.jl" begin
@test mytest("FFields.jl","Mod(5,19)","Mod{UInt64}: 5₁₉")
@test mytest("FFields.jl","a=Mod(5,19)","Mod{UInt64}: 5₁₉")
@test mytest("FFields.jl","a^2","Mod{UInt64}: 6₁₉")
@test mytest("FFields.jl","inv(a)","Mod{UInt64}: 4₁₉")
@test mytest("FFields.jl","a*inv(a)","Mod{UInt64}: 1₁₉")
@test mytest("FFields.jl","a+2","Mod{UInt64}: 7₁₉")
@test mytest("FFields.jl","a*2","Mod{UInt64}: -9₁₉")
@test mytest("FFields.jl","a+1//2","Mod{UInt64}: -4₁₉")
@test mytest("FFields.jl","Integer(a)","5")
@test mytest("FFields.jl","order(a)","9")
@test mytest("FFields.jl","a=Z(64)","FFE{2}: Z₆₄")
@test mytest("FFields.jl","a^9","FFE{2}: Z₈")
@test mytest("FFields.jl","a^21","FFE{2}: Z₄")
@test mytest("FFields.jl","a+1","FFE{2}: Z₆₄⁵⁶")
@test mytest("FFields.jl","a=Z(19)+3","FFE{19}: 5")
@test mytest("FFields.jl","Mod(a)","Mod{UInt64}: 5₁₉")
@test mytest("FFields.jl","Int(a)","5")
@test mytest("FFields.jl","order(a)","9")
@test mytest("FFields.jl","a=Z(8)^5","FFE{2}: Z₈⁵")
@test mytest("FFields.jl","F=field(a)","GF(2^3)")
@test mytest("FFields.jl","char(F)","2")
@test mytest("FFields.jl","char(a)","2")
@test mytest("FFields.jl","degree(F)","3")
@test mytest("FFields.jl","degree(a)","3")
@test mytest("FFields.jl","length(F)","8")
@test mytest("FFields.jl","log(a)","5")
@test mytest("FFields.jl","elements(F)","8-element Vector{FFE{2}}:\n   0\n   1\n  Z₈\n Z₈²\n Z₈³\n Z₈⁴\n Z₈⁵\n Z₈⁶")
@test mytest("FFields.jl","FFE{19}(2)","FFE{19}: 2")
@test mytest("FFields.jl","FFE{19}(Mod(2,19))","FFE{19}: 2")
@test mytest("FFields.jl","z=Z(16)","FFE{2}: Z₁₆")
@test mytest("FFields.jl","z^5","FFE{2}: Z₄")
end
@testset "Fact.jl" begin
@test mytest("Fact.jl","Fact.LogInt(1030,2)","10")
@test mytest("Fact.jl","Fact.LogInt(1,10)","0")
end
@testset "Families.jl" begin
@test mytest("Families.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Families.jl","uc=UnipotentCharacters(W);","nothing")
@test mytest("Families.jl","uc.families","3-element Vector{Family}:\n Family(D(𝔖 ₃),[5, 6, 4, 3, 8, 7, 9, 10])\n Family(C₁,[1])\n Family(C₁,[2])")
@test mytest("Families.jl","uc.families[1]","Family(D(𝔖 ₃),[5, 6, 4, 3, 8, 7, 9, 10])\nDrinfeld double of 𝔖 ₃, Lusztig′s version\n   label│eigen\n────────┼─────────────────────────────────────────────\n(1,1)   │    1 1/6  1/2  1/3  1/3  1/6  1/2  1/3  1/3\n(g₂,1)  │    1 1/2  1/2    0    0 -1/2 -1/2    0    0\n(g₃,1)  │    1 1/3    0  2/3 -1/3  1/3    0 -1/3 -1/3\n(1,ρ)   │    1 1/3    0 -1/3  2/3  1/3    0 -1/3 -1/3\n(1,ε)   │    1 1/6 -1/2  1/3  1/3  1/6 -1/2  1/3  1/3\n(g₂,ε)  │   -1 1/2 -1/2    0    0 -1/2  1/2    0    0\n(g₃,ζ₃) │   ζ₃ 1/3    0 -1/3 -1/3  1/3    0  2/3 -1/3\n(g₃,ζ₃²)│  ζ₃² 1/3    0 -1/3 -1/3  1/3    0 -1/3  2/3")
@test mytest("Families.jl","charnames(uc)[uc.families[1].charNumbers]","8-element Vector{String}:\n \"phi2,1\"\n \"phi2,2\"\n \"phi1,3''\"\n \"phi1,3'\"\n \"G2[1]\"\n \"G2[-1]\"\n \"G2[E3]\"\n \"G2[E3^2]\"")
@test mytest("Families.jl","Family(\"C2\")","Family(C₂,4)\nDrinfeldDouble(Z/2)\n label│eigen\n──────┼─────────────────────────\n(1,1) │    1 1/2  1/2  1/2  1/2\n(g₂,1)│    1 1/2  1/2 -1/2 -1/2\n(1,ε) │    1 1/2 -1/2  1/2 -1/2\n(g₂,ε)│   -1 1/2 -1/2 -1/2  1/2")
@test mytest("Families.jl","Family(\"C2\",4:7,Dict(:signs=>[1,-1,1,-1]))","Family(C₂,4:7)\nDrinfeldDouble(Z/2)\n label│eigen signs\n──────┼───────────────────────────────\n(1,1) │    1     1  1/2 -1/2 1/2 -1/2\n(g₂,1)│    1    -1 -1/2  1/2 1/2 -1/2\n(1,ε) │    1     1  1/2  1/2 1/2  1/2\n(g₂,ε)│   -1    -1 -1/2 -1/2 1/2  1/2")
@test mytest("Families.jl","f=UnipotentCharacters(ComplexReflectionGroup(3,1,1)).families[2]","Family(0011,[4, 3, 2])\nclassical family\nlabel│eigen      1        2        3\n─────┼───────────────────────────────\n1    │  ζ₃²  √-3/3    √-3/3   -√-3/3\n2    │    1  √-3/3 ζ₃²√-3/3 -ζ₃√-3/3\n3    │    1 -√-3/3 -ζ₃√-3/3 ζ₃²√-3/3")
@test mytest("Families.jl","galois(f,-1)","Family(overline 0011,[4, 3, 2])\nComplexConjugate(classical family)\nlabel│eigen      1        2        3\n─────┼───────────────────────────────\n1    │   ζ₃ -√-3/3   -√-3/3    √-3/3\n2    │    1 -√-3/3 -ζ₃√-3/3 ζ₃²√-3/3\n3    │    1  √-3/3 ζ₃²√-3/3 -ζ₃√-3/3")
@test mytest("Families.jl","f=UnipotentCharacters(ComplexReflectionGroup(3,1,1)).families[2]","Family(0011,[4, 3, 2])\nclassical family\nlabel│eigen      1        2        3\n─────┼───────────────────────────────\n1    │  ζ₃²  √-3/3    √-3/3   -√-3/3\n2    │    1  √-3/3 ζ₃²√-3/3 -ζ₃√-3/3\n3    │    1 -√-3/3 -ζ₃√-3/3 ζ₃²√-3/3")
@test mytest("Families.jl","f^Perm(1,2,3)","Family(0011,[2, 4, 3])\nPermuted((1,2,3),classical family)\nlabel│eigen        3      1        2\n─────┼───────────────────────────────\n3    │    1 ζ₃²√-3/3 -√-3/3 -ζ₃√-3/3\n1    │  ζ₃²   -√-3/3  √-3/3    √-3/3\n2    │    1 -ζ₃√-3/3  √-3/3 ζ₃²√-3/3")
@test mytest("Families.jl","Families.ndrinfeld_double(ComplexReflectionGroup(5))","378")
@test mytest("Families.jl","Family(family_imprimitive([[0,1],[1],[0]]))","Family(0011,3)\nclassical family\nlabel│eigen      1        2        3\n─────┼───────────────────────────────\n1    │  ζ₃²  √-3/3   -√-3/3    √-3/3\n2    │    1 -√-3/3 ζ₃²√-3/3 -ζ₃√-3/3\n3    │    1  √-3/3 -ζ₃√-3/3 ζ₃²√-3/3")
@test mytest("Families.jl","FamiliesClassical(symbols(2,3,1))","6-element Vector{Family}:\n Family(0112233,[4])\n Family(3,[9])\n Family(013,[5, 7, 10, 12])\n Family(112,[2])\n Family(022,[6])\n Family(01123,[1, 3, 8, 11])")
@test mytest("Families.jl","W=ComplexReflectionGroup(4)","G₄")
@test mytest("Families.jl","uc=UnipotentCharacters(W);f=uc.families[4];","nothing")
@test mytest("Families.jl","A=fusion_algebra(fourier(f),1)","Fusion Algebra dim.5")
@test mytest("Families.jl","b=basis(A)","5-element Vector{AlgebraElt{Gapjm.Families.FusionAlgebra, Int64}}:\n B₁\n B₂\n B₃\n B₄\n B₅")
@test mytest("Families.jl","b*permutedims(b)","5×5 Matrix{AlgebraElt{Gapjm.Families.FusionAlgebra, Int64}}:\n B₁  B₂      B₃      B₄        B₅\n B₂  -B₄+B₅  B₁+B₄   B₂-B₃     B₃\n B₃  B₁+B₄   -B₄+B₅  -B₂+B₃    B₂\n B₄  B₂-B₃   -B₂+B₃  B₁+B₄-B₅  -B₄\n B₅  B₃      B₂      -B₄       B₁")
@test mytest("Families.jl","CharTable(A)","CharTable(Fusion Algebra dim.5)\n │1    2    3  4  5\n─┼──────────────────\n1│1  √-3 -√-3  2 -1\n2│1    1    1  .  1\n3│1   -1   -1  .  1\n4│1    .    . -1 -1\n5│1 -√-3  √-3  2 -1")
end
@testset "GLinearAlgebra.jl" begin
@test mytest("GLinearAlgebra.jl","@Pol q","Pol{Int64}: q")
@test mytest("GLinearAlgebra.jl","M=[q^6 q^0 q^3 q^3 q^5+q q^4+q^2; q^0 q^6 q^3 q^3 q^5+q q^4+q^2; q^3 q^3 q^6 q^0 q^4+q^2 q^5+q; q^3 q^3 q^0 q^6 q^4+q^2 q^5+q; q^5+q q^5+q q^4+q^2 q^4+q^2 q^6+q^4+q^2+1 q^5+2*q^3+q; q^4+q^2 q^4+q^2 q^5+q q^5+q q^5+2*q^3+q q^6+q^4+q^2+1]","6×6 Matrix{Pol{Int64}}:\n q⁶     1      q³     q³     q⁵+q        q⁴+q²\n 1      q⁶     q³     q³     q⁵+q        q⁴+q²\n q³     q³     q⁶     1      q⁴+q²       q⁵+q\n q³     q³     1      q⁶     q⁴+q²       q⁵+q\n q⁵+q   q⁵+q   q⁴+q²  q⁴+q²  q⁶+q⁴+q²+1  q⁵+2q³+q\n q⁴+q²  q⁴+q²  q⁵+q   q⁵+q   q⁵+2q³+q    q⁶+q⁴+q²+1")
@test mytest("GLinearAlgebra.jl","bb=[[2],[4],[6],[3,5],[1]];","nothing")
@test mytest("GLinearAlgebra.jl","(P,L)=bigcell_decomposition(M,bb);","nothing")
@test mytest("GLinearAlgebra.jl","P","6×6 Matrix{Pol{Int64}}:\n 1    0  0    0    0        0\n q⁻⁶  1  q⁻³  q⁻³  q⁻¹+q⁻⁵  q⁻²+q⁻⁴\n 0    0  1    0    0        0\n q⁻³  0  0    1    q⁻²      q⁻¹\n q⁻¹  0  0    0    1        0\n q⁻²  0  q⁻¹  0    q⁻¹      1")
@test mytest("GLinearAlgebra.jl","L","6×6 Matrix{Pol{Int64}}:\n q⁶-q⁴-1+q⁻²  0   0            0     0            0\n 0            q⁶  0            0     0            0\n 0            0   q⁶-q⁴-1+q⁻²  0     0            0\n 0            0   0            q⁶-1  0            0\n 0            0   0            0     q⁶-q⁴-1+q⁻²  0\n 0            0   0            0     0            q⁶-1")
@test mytest("GLinearAlgebra.jl","M==permutedims(P)*L*P","true")
@test mytest("GLinearAlgebra.jl","M=[1 2 3 4;2 3 4 1;3 4 1 2;4 1 2 3]","4×4 Matrix{Int64}:\n 1  2  3  4\n 2  3  4  1\n 3  4  1  2\n 4  1  2  3")
@test mytest("GLinearAlgebra.jl","exterior_power(M,2)","6×6 Matrix{Int64}:\n  -1   -2   -7   -1  -10  -13\n  -2   -8  -10  -10  -12    2\n  -7  -10  -13    1    2    1\n  -1  -10    1  -13    2    7\n -10  -12    2    2    8   10\n -13    2    1    7   10   -1")
@test mytest("GLinearAlgebra.jl","permanent([0 1 1 1;1 0 1 1;1 1 0 1;1 1 1 0])","9")
@test mytest("GLinearAlgebra.jl","permanent([1 1 0 1 0 0 0; 0 1 1 0 1 0 0;0 0 1 1 0 1 0; 0 0 0 1 1 0 1;1 0 0 0 1 1 0;0 1 0 0 0 1 1;1 0 1 0 0 0 1])","24")
@test mytest("GLinearAlgebra.jl","m=[1 2;3 4]","2×2 Matrix{Int64}:\n 1  2\n 3  4")
@test mytest("GLinearAlgebra.jl","Int.(symmetric_power(m,2))","3×3 Matrix{Int64}:\n 1   2   4\n 6  10  16\n 9  12  16")
@test mytest("GLinearAlgebra.jl","m=cartan(:A,3)","3×3 Matrix{Int64}:\n  2  -1   0\n -1   2  -1\n  0  -1   2")
@test mytest("GLinearAlgebra.jl","schur_functor(m,[2,2])","6×6 Matrix{Rational{Int64}}:\n   9//1   -6//1    4//1   3//2   -2//1    1//1\n -12//1   16//1  -16//1  -4//1    8//1   -4//1\n   4//1   -8//1   16//1   2//1   -8//1    4//1\n  12//1  -16//1   16//1  10//1  -16//1   12//1\n  -4//1    8//1  -16//1  -4//1   16//1  -12//1\n   1//1   -2//1    4//1   3//2   -6//1    9//1")
@test mytest("GLinearAlgebra.jl","m=[0 0 0 1;0 0 1 0;0 1 0 0;1 0 0 0]","4×4 Matrix{Int64}:\n 0  0  0  1\n 0  0  1  0\n 0  1  0  0\n 1  0  0  0")
@test mytest("GLinearAlgebra.jl","diagblocks(m)","2-element Vector{Vector{Int64}}:\n [1, 4]\n [2, 3]")
@test mytest("GLinearAlgebra.jl","m[[1,4],[1,4]]","2×2 Matrix{Int64}:\n 0  1\n 1  0")
@test mytest("GLinearAlgebra.jl","m=[1 0 0 0;0 1 0 0;1 0 1 0;0 0 0 1;0 0 1 0]","5×4 Matrix{Int64}:\n 1  0  0  0\n 0  1  0  0\n 1  0  1  0\n 0  0  0  1\n 0  0  1  0")
@test mytest("GLinearAlgebra.jl","blocks(m)","3-element Vector{Tuple{Vector{Int64}, Vector{Int64}}}:\n ([1, 3, 5], [1, 3])\n ([2], [2])\n ([4], [4])")
@test mytest("GLinearAlgebra.jl","m[[1,3,5,2,4],[1,3,2,4]]","5×4 Matrix{Int64}:\n 1  0  0  0\n 1  1  0  0\n 0  1  0  0\n 0  0  1  0\n 0  0  0  1")
@test mytest("GLinearAlgebra.jl","solutionmat([2 -4 1;0 0 -4;1 -2 -1],[10, -20, -10])","3-element Vector{Rational{Int64}}:\n  5//1\n 15//4\n  0//1")
@test mytest("GLinearAlgebra.jl","solutionmat([2 -4 1;0 0 -4;1 -2 -1],[10, 20, -10])","nothing")
end
@testset "Garside.jl" begin
@test mytest("Garside.jl","W=coxgroup(:A,4)","A₄")
@test mytest("Garside.jl","B=BraidMonoid(W)","BraidMonoid(A₄)")
@test mytest("Garside.jl","w=B(1,2,3,4)","1234")
@test mytest("Garside.jl","w^3","121321432.343")
@test mytest("Garside.jl","word(α(w^3))","9-element Vector{Int64}:\n 1\n 2\n 1\n 3\n 2\n 1\n 4\n 3\n 2")
@test mytest("Garside.jl","w^4","Δ.232432")
@test mytest("Garside.jl","inv(w)","(1234)⁻¹")
@test mytest("Garside.jl","repr(w^-1,context=IOContext(stdout,:greedy=>true,:limit=>true))","\"Δ⁻¹.232432\"")
@test mytest("Garside.jl","repr(w)","\"B(1,2,3,4)\"")
@test mytest("Garside.jl","repr(w^3)","\"B(1,2,1,3,2,1,4,3,2,3,4,3)\"")
@test mytest("Garside.jl","repr(w^-1)","\"B(-4,-3,-2,-1)\"")
@test mytest("Garside.jl","b=B(2,1,4,1,4)","214.14")
@test mytest("Garside.jl","c=B(1,4,1,4,3)","14.143")
@test mytest("Garside.jl","d=conjugating_elt(b,c)","(1)⁻¹21321432")
@test mytest("Garside.jl","b^d","14.143")
@test mytest("Garside.jl","centralizer_gens(b)","3-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 321432.213243\n 21.1\n 4")
@test mytest("Garside.jl","C=conjcat(b;ss=:ss)","category with 10 objects and 32 generating maps")
@test mytest("Garside.jl","C.obj","10-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 1214.4\n 214.14\n 124.24\n 1343.1\n 14.124\n 143.13\n 24.214\n 134.14\n 13.134\n 14.143")
@test mytest("Garside.jl","word(W,preferred_prefix(b))","2-element Vector{Int64}:\n 2\n 1")
@test mytest("Garside.jl","b^B(preferred_prefix(b))","1214.4")
@test mytest("Garside.jl","b1=b^B(preferred_prefix(b))","1214.4")
@test mytest("Garside.jl","C=conjcat(b)","category with 2 objects and 6 generating maps")
@test mytest("Garside.jl","C.obj","2-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 1214.4\n 1343.1")
@test mytest("Garside.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Garside.jl","B=BraidMonoid(W)","BraidMonoid(A₃)")
@test mytest("Garside.jl","Pi=B(B.δ)^2","Δ²")
@test mytest("Garside.jl","root(Pi,2)","Δ")
@test mytest("Garside.jl","root(Pi,3)","1232")
@test mytest("Garside.jl","root(Pi,4)","132")
@test mytest("Garside.jl","B=BraidMonoid(coxgroup(:A,3))","BraidMonoid(A₃)")
@test mytest("Garside.jl","word(B,B.δ)","6-element Vector{Int64}:\n 1\n 2\n 1\n 3\n 2\n 1")
@test mytest("Garside.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Garside.jl","B=BraidMonoid(W)","BraidMonoid(A₃)")
@test mytest("Garside.jl","map(x->B.(x),Garside.left_divisors(B,W(1,3,2)))","4-element Vector{Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}}:\n [.]\n [1, 3]\n [13]\n [132]")
@test mytest("Garside.jl","B=DualBraidMonoid(W)","DualBraidMonoid(A₃,c=[1, 3, 2])")
@test mytest("Garside.jl","map(x->B.(x),Garside.left_divisors(B,W(1,3,2)))","4-element Vector{Vector{GarsideElt{Perm{Int16}, DualBraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}}:\n [.]\n [1, 2, 3, 4, 5, 6]\n [12, 13, 15, 25, 34, 45]\n [δ]")
@test mytest("Garside.jl","M=BraidMonoid(coxgroup(:A,2))","BraidMonoid(A₂)")
@test mytest("Garside.jl","elements(M,4)","12-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 12.21\n 21.12\n 1.1.1.1\n 2.2.2.2\n 1.1.12\n 1.12.2\n 12.2.2\n 2.2.21\n 21.1.1\n 2.21.1\n Δ.1\n Δ.2")
@test mytest("Garside.jl","W=coxgroup(:E,8);B=BraidMonoid(W)","BraidMonoid(E₈)")
@test mytest("Garside.jl","w=B(2,3,4,2,3,4,5,4,2,3,4,5,6,5,4,2,3,4,5,6,7,6,5,4,2,3,4,5,6,7,8)","2342345423456542345676542345678")
@test mytest("Garside.jl","Brieskorn_normal_form(w)","2-element Vector{Vector{Int64}}:\n [2, 3, 4, 5, 6, 7]\n [8]")
@test mytest("Garside.jl","Brieskorn_normal_form(w^2)","2-element Vector{Vector{Int64}}:\n [2, 3, 4, 5, 6, 7, 8]\n [2, 3, 4, 5, 6]")
@test mytest("Garside.jl","B=BraidMonoid(coxgroup(:A,3))","BraidMonoid(A₃)")
@test mytest("Garside.jl","b=B( 2, 1, -3, 1, 1)","(23)⁻¹321.1.1")
@test mytest("Garside.jl","fraction(b)","(23, 321.1.1)")
@test mytest("Garside.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Garside.jl","b=BraidMonoid(W)(2,1,2,1,1)","121.1.1")
@test mytest("Garside.jl","α(b)","121")
@test mytest("Garside.jl","W=coxgroup(:A,4);B=BraidMonoid(W)","BraidMonoid(A₄)")
@test mytest("Garside.jl","w0=B(longest(W))","Δ")
@test mytest("Garside.jl","α(w0,[1,2,3])","121321")
@test mytest("Garside.jl","B=BraidMonoid(coxgroup(:A,3))","BraidMonoid(A₃)")
@test mytest("Garside.jl","b=B(2,1,2,1,1)*inv(B(2,2))","(21)⁻¹1.12.21")
@test mytest("Garside.jl","word(b)","7-element Vector{Int64}:\n -1\n -2\n  1\n  1\n  2\n  2\n  1")
@test mytest("Garside.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Garside.jl","B=BraidMonoid(W)","BraidMonoid(A₃)")
@test mytest("Garside.jl","leftgcd(B(2,1,2)^2,B(3,2)^2;complements=true)","(2, (121.21, 32.2))")
@test mytest("Garside.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Garside.jl","B=BraidMonoid(W)","BraidMonoid(A₃)")
@test mytest("Garside.jl","rightgcd(B(2,1,2)^2,B(3,2)^2;complements=true)","(2.2, (12.21, 23))")
@test mytest("Garside.jl","B=BraidMonoid(coxgroup(:A,3))","BraidMonoid(A₃)")
@test mytest("Garside.jl","leftlcm(B(2,1,2)^2,B(3,2)^2;complements=true)","(Δ.121, (123, 23.321))")
@test mytest("Garside.jl","B=BraidMonoid(coxgroup(:A,3))","BraidMonoid(A₃)")
@test mytest("Garside.jl","rightlcm(B(2,1,2)^2,B(3,2)^2;complements=true)","(Δ², (321.123, 12321.321))")
@test mytest("Garside.jl","W=CoxSym(4)","𝔖 ₄")
@test mytest("Garside.jl","b=BraidMonoid(W)(2,1,2,1,1)","121.1.1")
@test mytest("Garside.jl","p=image(b)","Perm{UInt8}: (1,3)")
@test mytest("Garside.jl","word(W,p)","3-element Vector{Int64}:\n 1\n 2\n 1")
@test mytest("Garside.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Garside.jl","B=DualBraidMonoid(W)","DualBraidMonoid(A₃,c=[1, 3, 2])")
@test mytest("Garside.jl","B(2,1,2,1,1)","12.1.1.1")
@test mytest("Garside.jl","B(-1,-2,-3,1,1)","(25.1)⁻¹1.1")
@test mytest("Garside.jl","W=coxgroup(:A,4)","A₄")
@test mytest("Garside.jl","w=BraidMonoid(W)(4,3,3,2,1)","43.321")
@test mytest("Garside.jl","C=conjcat(w)","category with 2 objects and 4 generating maps")
@test mytest("Garside.jl","C.obj","2-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 32143\n 21324")
@test mytest("Garside.jl","conjcat(w;ss=:ss).obj","4-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 32143\n 13243\n 21432\n 21324")
@test mytest("Garside.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Garside.jl","B=BraidMonoid(W)","BraidMonoid(D₄)")
@test mytest("Garside.jl","b=B(2,3,1,2,4,3);b1=B(1,4,3,2,2,2)","1432.2.2")
@test mytest("Garside.jl","conjugating_elt(b,b1)","(134312.23)⁻¹")
@test mytest("Garside.jl","c=conjugating_elt(b,b1;ss=:cyc)","232.2")
@test mytest("Garside.jl","b^c","1432.2.2")
@test mytest("Garside.jl","WF=spets(W,Perm(1,2,4))","³D₄")
@test mytest("Garside.jl","F=Frobenius(WF);","nothing")
@test mytest("Garside.jl","c=B(3,4,3,1,2,3)","343123")
@test mytest("Garside.jl","conjugating_elt(b,c,F)","124312")
@test mytest("Garside.jl","^(b,B(1,2,4,3,1,2),F)","343123")
@test mytest("Garside.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Garside.jl","B=BraidMonoid(W)","BraidMonoid(D₄)")
@test mytest("Garside.jl","w=B(4,4,4)","4.4.4")
@test mytest("Garside.jl","cc=centralizer_gens(w)","8-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 1\n (31432)⁻¹231432\n (1)⁻¹34.431\n (2)⁻¹34.432\n (32431)⁻¹132431\n 4\n 34.43\n 2")
@test mytest("Garside.jl","shrink(cc)","5-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 4\n 2\n 1\n 34.43\n (3243)⁻¹13243")
@test mytest("Garside.jl","centralizer_gens(w;ss=:cyc)","Set{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}} with 1 element:\n  4")
@test mytest("Garside.jl","F=Frobenius(spets(W,Perm(1,2,4)));","nothing")
@test mytest("Garside.jl","centralizer_gens(w,F)","2-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 124\n 312343123")
@test mytest("Garside.jl","M=DualBraidMonoid(coxgroup(:A,3))","DualBraidMonoid(A₃,c=[1, 3, 2])")
@test mytest("Garside.jl","p=Presentation(M)","Presentation: 6 generators, 15 relators, total length 62")
@test mytest("Garside.jl","B=BraidMonoid(CoxSym(3))","BraidMonoid(𝔖 ₃)")
@test mytest("Garside.jl","b=[B(1)^3,B(2)^3,B(-2,-1,-1,2,2,2,2,1,1,2),B(1,1,1,2)]","4-element Vector{GarsideElt{Perm{UInt8}, BraidMonoid{Perm{UInt8}, CoxSym{UInt8}}}}:\n 1.1.1\n 2.2.2\n (1.12)⁻¹2.2.2.21.12\n 1.1.12")
@test mytest("Garside.jl","shrink(b)","2-element Vector{GarsideElt{Perm{UInt8}, BraidMonoid{Perm{UInt8}, CoxSym{UInt8}}}}:\n 2\n 1")
end
@testset "Groups.jl" begin
@test mytest("Groups.jl","G=Group([Perm(1,2),Perm(1,2,3)])","Group([(1,2),(1,2,3)])")
@test mytest("Groups.jl","gens(G)","2-element Vector{Perm{Int16}}:\n (1,2)\n (1,2,3)")
@test mytest("Groups.jl","ngens(G)","2")
@test mytest("Groups.jl","minimal_words(G)","Dict{Perm{Int16}, Vector{Int64}} with 6 entries:\n  ()      => []\n  (1,2)   => [1]\n  (1,3)   => [1, 2]\n  (1,2,3) => [2]\n  (2,3)   => [2, 1]\n  (1,3,2) => [2, 2]")
@test mytest("Groups.jl","G.prop","Dict{Symbol, Any} with 1 entry:\n  :minwords => Dict(()=>[], (1,2)=>[1], (1,3)=>[1, 2], (1,2,3)=>[2], (2,3)=>[2,…")
@test mytest("Groups.jl","G=Group([Perm(1,2),Perm(1,2,3)])","Group([(1,2),(1,2,3)])")
@test mytest("Groups.jl","G(2,1,-2)","(1,3)")
@test mytest("Groups.jl","orbit([Perm(1,2),Perm(2,3)],1)","3-element Vector{Int64}:\n 1\n 2\n 3")
@test mytest("Groups.jl","orbit([Perm(1,2),Perm(2,3)],[1,3];action=(v,g)->v.^g)","6-element Vector{Vector{Int64}}:\n [1, 3]\n [2, 3]\n [1, 2]\n [3, 2]\n [2, 1]\n [3, 1]")
@test mytest("Groups.jl","orbit([Perm(1,2),Perm(2,3)],[1,3];action=(v,g)->sort(v.^g))","3-element Vector{Vector{Int64}}:\n [1, 3]\n [2, 3]\n [1, 2]")
@test mytest("Groups.jl","G=Group([Perm(1,2),Perm(2,3)]);","nothing")
@test mytest("Groups.jl","transversal(G,1)","Dict{Int64, Perm{Int16}} with 3 entries:\n  2 => (1,2)\n  3 => (1,3,2)\n  1 => ()")
@test mytest("Groups.jl","transversal(G,[1,2],action=(x,y)->x.^y)","Dict{Vector{Int64}, Perm{Int16}} with 6 entries:\n  [3, 2] => (1,3)\n  [1, 2] => ()\n  [2, 1] => (1,2)\n  [1, 3] => (2,3)\n  [2, 3] => (1,2,3)\n  [3, 1] => (1,3,2)")
@test mytest("Groups.jl","G=Group([Perm(1,2),Perm(2,3)]);","nothing")
@test mytest("Groups.jl","orbits(G,1:4)","2-element Vector{Vector{Int64}}:\n [1, 2, 3]\n [4]")
@test mytest("Groups.jl","G=Group([Perm(1,2),Perm(1,2,3)]);","nothing")
@test mytest("Groups.jl","centralizer(G,1)","Group([(2,3)])")
@test mytest("Groups.jl","G=Group([Perm(1,2),Perm(1,2,3,4)])","Group([(1,2),(1,2,3,4)])")
@test mytest("Groups.jl","centralizer(G,[1,2];action=(s,g)->sort(s.^g))","Group([(3,4),(1,2),(1,2)(3,4)])")
@test mytest("Groups.jl","stabilizer(G,[1,2])","Group([(3,4),(1,2),(1,2)(3,4)])")
@test mytest("Groups.jl","G=Group([Perm(1,2),Perm(1,2,3)]);","nothing")
@test mytest("Groups.jl","minimal_words(G)","Dict{Perm{Int16}, Vector{Int64}} with 6 entries:\n  ()      => []\n  (1,2)   => [1]\n  (1,3)   => [1, 2]\n  (1,2,3) => [2]\n  (2,3)   => [2, 1]\n  (1,3,2) => [2, 2]")
@test mytest("Groups.jl","g=Group(perm\"(1,2,3)(6,7)\",perm\"(3,4,5)(7,8)\")","Group([(1,2,3)(6,7),(3,4,5)(7,8)])")
@test mytest("Groups.jl","transporting_elt(g,1,5)","(1,5,4,3,2)")
@test mytest("Groups.jl","transporting_elt(g,1,6)","nothing")
@test mytest("Groups.jl","transporting_elt(g,[1,2,3,4],[2,3,4,5];action=(s,g)->sort(s.^g))","(1,2,3,4,5)(6,7,8)")
@test mytest("Groups.jl","transporting_elt(g,[1,2,3,4],[3,4,5,2];action=(s,g)->s.^g)","nothing")
@test mytest("Groups.jl","G=Group([[-1 -1;1 0]])","Gapjm.Groups.Groupof{Matrix{Int64}}([[-1 -1; 1 0]], [1 0; 0 1], Dict{Symbol, Any}())")
@test mytest("Groups.jl","elements(G)","3-element Vector{Matrix{Int64}}:\n [0 1; -1 -1]\n [1 0; 0 1]\n [-1 -1; 1 0]")
end
@testset "Gt.jl" begin
@test mytest("Gt.jl","t=ClassTypes(rootdatum(:sl,3))","ClassTypes(A₂,good characteristic)\n    C_G(s)│ |C_G(s)|\n──────────┼──────────\nA₂₍₎=Φ₁²  │      Φ₁²\nA₂₍₎=Φ₁Φ₂ │     Φ₁Φ₂\nA₂₍₎=Φ₃   │       Φ₃\nA₂₍₁₎=A₁Φ₁│   qΦ₁²Φ₂\nA₂        │q³Φ₁²Φ₂Φ₃")
end
@testset "HasType.jl" begin
@test mytest("HasType.jl","W=coxgroup(:F,4)","F₄")
@test mytest("HasType.jl","r=classinfo(W)[:classtext];","nothing")
@test mytest("HasType.jl","R=representation(W,17)","4-element Vector{Matrix{Int64}}:\n [-1 -1 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1]\n [1 0 0 0; -1 -1 -1 0; 0 0 1 0; 0 0 0 1]\n [1 0 0 0; 0 1 0 0; 0 -2 -1 -1; 0 0 0 1]\n [1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 -1 -1]")
@test mytest("HasType.jl","traces_words_mats(R,r)==CharTable(W).irr[17,:]","true")
end
@testset "HeckeAlgebras.jl" begin
@test mytest("HeckeAlgebras.jl","W=coxgroup(:A,2)","A₂")
@test mytest("HeckeAlgebras.jl","H=hecke(W,0)","hecke(A₂,0)")
@test mytest("HeckeAlgebras.jl","T=Tbasis(H);","nothing")
@test mytest("HeckeAlgebras.jl","el=words(W)","6-element Vector{Vector{Int8}}:\n []\n [2]\n [1]\n [2, 1]\n [1, 2]\n [1, 2, 1]")
@test mytest("HeckeAlgebras.jl","T.(el)*permutedims(T.(el))","6×6 Matrix{HeckeTElt{Perm{Int16}, Int64, HeckeAlgebra{Int64, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n T.    T₂     T₁     T₂₁    T₁₂    T₁₂₁\n T₂    -T₂    T₂₁    -T₂₁   T₁₂₁   -T₁₂₁\n T₁    T₁₂    -T₁    T₁₂₁   -T₁₂   -T₁₂₁\n T₂₁   T₁₂₁   -T₂₁   -T₁₂₁  -T₁₂₁  T₁₂₁\n T₁₂   -T₁₂   T₁₂₁   -T₁₂₁  -T₁₂₁  T₁₂₁\n T₁₂₁  -T₁₂₁  -T₁₂₁  T₁₂₁   T₁₂₁   -T₁₂₁")
@test mytest("HeckeAlgebras.jl","W=coxgroup(:B,2)","B₂")
@test mytest("HeckeAlgebras.jl","@Pol q","Pol{Int64}: q")
@test mytest("HeckeAlgebras.jl","H=hecke(W,q)","hecke(B₂,q)")
@test mytest("HeckeAlgebras.jl","H.para","2-element Vector{Vector{Pol{Int64}}}:\n [q, -1]\n [q, -1]")
@test mytest("HeckeAlgebras.jl","H=hecke(W,q^2,rootpara=q)","hecke(B₂,q²,rootpara=q)")
@test mytest("HeckeAlgebras.jl","H.para,rootpara(H)","(Vector{Pol{Int64}}[[q², -1], [q², -1]], Pol{Int64}[q, q])")
@test mytest("HeckeAlgebras.jl","H=hecke(W,[q^2,q^4],rootpara=[q,q^2])","hecke(B₂,Pol{Int64}[q², q⁴],rootpara=Pol{Int64}[q, q²])")
@test mytest("HeckeAlgebras.jl","H.para,rootpara(H)","(Vector{Pol{Int64}}[[q², -1], [q⁴, -1]], Pol{Int64}[q, q²])")
@test mytest("HeckeAlgebras.jl","H=hecke(W,9,rootpara=3)","hecke(B₂,9,rootpara=3)")
@test mytest("HeckeAlgebras.jl","H.para,rootpara(H)","([[9, -1], [9, -1]], [3, 3])")
@test mytest("HeckeAlgebras.jl","@Mvp x,y,z,t","nothing")
@test mytest("HeckeAlgebras.jl","H=hecke(W,[[x,y]])","hecke(B₂,Vector{Mvp{Int64, Int64}}[[x, y]])")
@test mytest("HeckeAlgebras.jl","H.para,rootpara(H)","(Vector{Mvp{Int64, Int64}}[[x, y], [x, y]], Mvp{Cyc{Int64}, Rational{Int64}}[ζ₄x½y½, ζ₄x½y½])")
@test mytest("HeckeAlgebras.jl","H=hecke(W,[[x,y],[z,t]])","hecke(B₂,Vector{Mvp{Int64, Int64}}[[x, y], [z, t]])")
@test mytest("HeckeAlgebras.jl","H.para,rootpara(H)","(Vector{Mvp{Int64, Int64}}[[x, y], [z, t]], Mvp{Cyc{Int64}, Rational{Int64}}[ζ₄x½y½, ζ₄t½z½])")
@test mytest("HeckeAlgebras.jl","H=hecke(coxgroup(:F,4))","hecke(F₄,1)")
@test mytest("HeckeAlgebras.jl","isrepresentation(H,reflrep(H))","true")
@test mytest("HeckeAlgebras.jl","isrepresentation(H,Tbasis(H).(1:4))","true")
@test mytest("HeckeAlgebras.jl","W=coxgroup(:B,2);H=hecke(W,Pol(:q))","hecke(B₂,q)")
@test mytest("HeckeAlgebras.jl","reflrep(H)","2-element Vector{Matrix{Pol{Int64}}}:\n [-1 0; -q q]\n [q -2; 0 -1]")
@test mytest("HeckeAlgebras.jl","H=hecke(coxgroup(:H,3))","hecke(H₃,1)")
@test mytest("HeckeAlgebras.jl","reflrep(H)","3-element Vector{Matrix{Cyc{Int64}}}:\n [-1 0 0; -1 1 0; 0 0 1]\n [1 (-3-√5)/2 0; 0 -1 0; 0 -1 1]\n [1 0 0; 0 1 -1; 0 0 -1]")
@test mytest("HeckeAlgebras.jl","W=coxgroup(:H,3)","H₃")
@test mytest("HeckeAlgebras.jl","H=hecke(W,Pol(:x)^2)","hecke(H₃,x²)")
@test mytest("HeckeAlgebras.jl","g=Wgraph(W,3)","2-element Vector{Vector{Vector{Any}}}:\n [[2], [1, 2], [1, 3], [1, 3], [2, 3]]\n [[-1, [[1, 3], [2, 4], [3, 5], [4, 5]]]]")
@test mytest("HeckeAlgebras.jl","WGraphToRepresentation(H,g)","3-element Vector{Matrix{Pol{Int64}}}:\n [x² 0 … 0 0; 0 -1 … 0 0; … ; 0 0 … -1 x; 0 0 … 0 x²]\n [-1 0 … 0 0; 0 -1 … x 0; … ; 0 0 … x² 0; 0 0 … x -1]\n [x² 0 … 0 0; 0 x² … 0 0; … ; 0 x … -1 0; 0 0 … 0 -1]")
@test mytest("HeckeAlgebras.jl","H=hecke(coxgroup(:H,3),Pol(:q))","hecke(H₃,q)")
@test mytest("HeckeAlgebras.jl","central_monomials(H)","10-element Vector{Pol{Cyc{Int64}}}:\n 1\n q³⁰\n q¹²\n q¹⁸\n q¹⁰\n q¹⁰\n q²⁰\n q²⁰\n q¹⁵\n q¹⁵")
@test mytest("HeckeAlgebras.jl","W=coxgroup(:G,2);H=hecke(W,Pol(:q))","hecke(G₂,q)")
@test mytest("HeckeAlgebras.jl","T=Tbasis(H);h=T(1,2)*T(2,1)","q²T.+(q²-q)T₁+(q-1)T₁₂₁")
@test mytest("HeckeAlgebras.jl","alt(h)","q⁻²T.+(q⁻²-q⁻³)T₁+(q⁻³-q⁻⁴)T₁₂₁")
@test mytest("HeckeAlgebras.jl","W=CoxSym(4)","𝔖 ₄")
@test mytest("HeckeAlgebras.jl","H=hecke(W,Pol(:q))","hecke(𝔖 ₄,q)")
@test mytest("HeckeAlgebras.jl","h=Tbasis(H,longest(W))","T₁₂₁₃₂₁")
@test mytest("HeckeAlgebras.jl","p=class_polynomials(h)","5-element Vector{Pol{Int64}}:\n 0\n 0\n q²\n q³-2q²+q\n q³-q²+q-1")
@test mytest("HeckeAlgebras.jl","W=coxgroup(:B,2)","B₂")
@test mytest("HeckeAlgebras.jl","H=hecke(W,q^2;rootpara=q)","hecke(B₂,q²,rootpara=q)")
@test mytest("HeckeAlgebras.jl","char_values(Cpbasis(H)(1,2,1))","5-element Vector{Pol{Int64}}:\n -q-q⁻¹\n q+q⁻¹\n 0\n q³+2q+2q⁻¹+q⁻³\n 0")
@test mytest("HeckeAlgebras.jl","H=hecke(ComplexReflectionGroup(4),Pol(:q))","hecke(G₄,q)")
@test mytest("HeckeAlgebras.jl","s=schur_elements(H)","7-element Vector{Pol{Cyc{Rational{Int64}}}}:\n q⁸+2q⁷+3q⁶+4q⁵+4q⁴+4q³+3q²+2q+1\n 2√-3+(6+4√-3)q⁻¹+12q⁻²+(6-4√-3)q⁻³-2√-3q⁻⁴\n -2√-3+(6-4√-3)q⁻¹+12q⁻²+(6+4√-3)q⁻³+2√-3q⁻⁴\n 2+2q⁻¹+4q⁻²+2q⁻³+2q⁻⁴\n ζ₃²√-3q³+(3-√-3)q²+3q+3+√-3-ζ₃√-3q⁻¹\n -ζ₃√-3q³+(3+√-3)q²+3q+3-√-3+ζ₃²√-3q⁻¹\n q²+2q+2+2q⁻¹+q⁻²")
@test mytest("HeckeAlgebras.jl","CycPol.(s)","7-element Vector{CycPol{Cyc{Rational{Int64}}}}:\n Φ₂²Φ₃Φ₄Φ₆\n 2√-3q⁻⁴Φ₂²Φ′₃Φ′₆\n -2√-3q⁻⁴Φ₂²Φ″₃Φ″₆\n 2q⁻⁴Φ₃Φ₄\n ζ₃²√-3q⁻¹Φ₂²Φ′₃Φ″₆\n -ζ₃√-3q⁻¹Φ₂²Φ″₃Φ′₆\n q⁻²Φ₂²Φ₄")
@test mytest("HeckeAlgebras.jl","W=ComplexReflectionGroup(4)","G₄")
@test mytest("HeckeAlgebras.jl","@Mvp x,y; H=hecke(W,[[1,x,y]])","hecke(G₄,Vector{Mvp{Int64, Int64}}[[1, x, y]])")
@test mytest("HeckeAlgebras.jl","FactorizedSchurElement(H,[[2,5]])","-x⁻¹yΦ₂(xy)Φ₁(x)Φ₆(xy⁻¹)Φ₁(y)")
@test mytest("HeckeAlgebras.jl","W=ComplexReflectionGroup(4)","G₄")
@test mytest("HeckeAlgebras.jl","@Mvp x,y; H=hecke(W,[[1,x,y]])","hecke(G₄,Vector{Mvp{Int64, Int64}}[[1, x, y]])")
@test mytest("HeckeAlgebras.jl","FactorizedSchurElements(H)","7-element Vector{Gapjm.HeckeAlgebras.FactSchur}:\n x⁻⁴y⁻⁴Φ₂(xy)Φ₁Φ₆(x)Φ₁Φ₆(y)\n Φ₂(x²y⁻¹)Φ₁Φ₆(x)Φ₁Φ₆(xy⁻¹)\n -x⁻⁴y⁵Φ₁Φ₆(xy⁻¹)Φ₂(xy⁻²)Φ₁Φ₆(y)\n -x⁻¹yΦ₂(xy)Φ₁(x)Φ₆(xy⁻¹)Φ₁(y)\n -x⁻⁴yΦ₂(x²y⁻¹)Φ₁(x)Φ₁(xy⁻¹)Φ₆(y)\n x⁻¹y⁻¹Φ₆(x)Φ₁(xy⁻¹)Φ₂(xy⁻²)Φ₁(y)\n x⁻²yΦ₂(x²y⁻¹)Φ₂(xy)Φ₂(xy⁻²)")
@test mytest("HeckeAlgebras.jl","WF=rootdatum(\"u\",3)","²A₂Φ₂")
@test mytest("HeckeAlgebras.jl","HF=hecke(WF,Pol(:v)^2;rootpara=Pol())","hecke(²A₂Φ₂,v²,rootpara=v)")
@test mytest("HeckeAlgebras.jl","CharTable(HF)","CharTable(hecke(²A₂Φ₂,v²,rootpara=v))\n   │ 111 21  3\n───┼───────────\n111│  -1  1 -1\n21 │-2v³  .  v\n3  │  v⁶  1 v²")
end
@testset "KL.jl" begin
@test mytest("KL.jl","W=coxgroup(:H,3)","H₃")
@test mytest("KL.jl","c=LeftCells(W)","22-element Vector{LeftCell{FiniteCoxeterGroup{Perm{Int16},Cyc{Int64}}}}:\n LeftCell<H₃: duflo= character=φ₁‚₀>\n LeftCell<H₃: duflo=123 character=φ₁‚₁₅>\n LeftCell<H₃: duflo=(15) character=φ₅‚₅>\n LeftCell<H₃: duflo=(10) character=φ₅‚₅>\n LeftCell<H₃: duflo=(14) character=φ₅‚₅>\n LeftCell<H₃: duflo=7 character=φ₅‚₅>\n LeftCell<H₃: duflo=(12) character=φ₅‚₅>\n LeftCell<H₃: duflo=(9,12) character=φ₅‚₂>\n LeftCell<H₃: duflo=(5,11) character=φ₅‚₂>\n LeftCell<H₃: duflo=13 character=φ₅‚₂>\n ⋮\n LeftCell<H₃: duflo=(8,13) character=φ₃‚₆+φ₃‚₈>\n LeftCell<H₃: duflo=(1,15) character=φ₃‚₆+φ₃‚₈>\n LeftCell<H₃: duflo=3 character=φ₃‚₁+φ₃‚₃>\n LeftCell<H₃: duflo=2 character=φ₃‚₁+φ₃‚₃>\n LeftCell<H₃: duflo=1 character=φ₃‚₁+φ₃‚₃>\n LeftCell<H₃: duflo=6 character=φ₄‚₃+φ₄‚₄>\n LeftCell<H₃: duflo=(13) character=φ₄‚₃+φ₄‚₄>\n LeftCell<H₃: duflo=(11) character=φ₄‚₃+φ₄‚₄>\n LeftCell<H₃: duflo=9 character=φ₄‚₃+φ₄‚₄>")
@test mytest("KL.jl","W=coxgroup(:F,4)","F₄")
@test mytest("KL.jl","w=longest(W)*gens(W)[1];length(W,w)","23")
@test mytest("KL.jl","y=W(1:4...);length(W,y)","4")
@test mytest("KL.jl","cr=KL.critical_pair(W,y,w);length(W,cr)","16")
@test mytest("KL.jl","Pol(:x);KLPol(W,y,w)","Pol{Int64}: x³+1")
@test mytest("KL.jl","KLPol(W,cr,w)","Pol{Int64}: x³+1")
@test mytest("KL.jl","W=coxgroup(:B,3)","B₃")
@test mytest("KL.jl","map(i->map(x->KLPol(W,one(W),x),elements(W,i)),1:W.N)","9-element Vector{Vector{Pol{Int64}}}:\n [1, 1, 1]\n [1, 1, 1, 1, 1]\n [1, 1, 1, 1, 1, 1, 1]\n [1, 1, 1, x+1, 1, 1, 1, 1]\n [x+1, 1, 1, x+1, x+1, 1, x+1, 1]\n [1, x+1, 1, x+1, x+1, x²+1, 1]\n [x+1, x+1, x²+x+1, 1, 1]\n [x²+1, x+1, 1]\n [1]")
@test mytest("KL.jl","W=coxgroup(:B,2);@Pol v;H=hecke(W,[v^4,v^2])","hecke(B₂,Pol{Int64}[v⁴, v²])")
@test mytest("KL.jl","Cp=Cpbasis(H);h=Cp(1)^2","(v²+v⁻²)C′₁")
@test mytest("KL.jl","k=Tbasis(h)","(1+v⁻⁴)T.+(1+v⁻⁴)T₁")
@test mytest("KL.jl","Cp(k)","(v²+v⁻²)C′₁")
@test mytest("KL.jl","W=coxgroup(:B,3);H=hecke(W,Pol(:v)^2)","hecke(B₃,v²)")
@test mytest("KL.jl","T=Tbasis(H);C=Cbasis(H);T(C(1))","-vT.+v⁻¹T₁")
@test mytest("KL.jl","C(T(1))","v²C.+vC₁")
@test mytest("KL.jl","ref=reflrep(H)","3-element Vector{Matrix{Pol{Int64}}}:\n [-1 0 0; -v² v² 0; 0 0 v²]\n [v² -2 0; 0 -1 0; 0 -v² v²]\n [v² 0 0; 0 v² -1; 0 0 -1]")
@test mytest("KL.jl","W=coxgroup(:B,3)","B₃")
@test mytest("KL.jl","@Pol v;H=hecke(W,v^2,rootpara=v)","hecke(B₃,v²,rootpara=v)")
@test mytest("KL.jl","C=Cpbasis(H); Tbasis(C(1,2))","v⁻²T.+v⁻²T₂+v⁻²T₁+v⁻²T₁₂")
@test mytest("KL.jl","c=LeftCells(coxgroup(:G,2))[3]","LeftCell<G₂: duflo=2 character=φ₂‚₁+φ′₁‚₃+φ₂‚₂>")
@test mytest("KL.jl","character(c)","3-element Vector{Int64}:\n 3\n 5\n 6")
@test mytest("KL.jl","W=coxgroup(:H,3)","H₃")
@test mytest("KL.jl","c=LeftCells(W)[3]","LeftCell<H₃: duflo=(15) character=φ₅‚₅>")
@test mytest("KL.jl","@Mvp q;H=hecke(W,q)","hecke(H₃,q)")
@test mytest("KL.jl","representation(c,H)","3-element Vector{Matrix{Mvp{Int64, Rational{Int64}}}}:\n [-1 0 … 0 0; 0 -1 … 0 -q½; … ; 0 0 … q 0; 0 0 … 0 q]\n [-1 -q½ … 0 0; 0 q … 0 0; … ; 0 0 … -1 0; 0 -q½ … 0 -1]\n [q 0 … 0 0; -q½ -1 … 0 0; … ; 0 0 … q 0; 0 0 … 0 -1]")
@test mytest("KL.jl","W=coxgroup(:G,2)","G₂")
@test mytest("KL.jl","LeftCells(W)","4-element Vector{LeftCell{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n LeftCell<G₂: duflo= character=φ₁‚₀>\n LeftCell<G₂: duflo=12 character=φ₁‚₆>\n LeftCell<G₂: duflo=2 character=φ₂‚₁+φ′₁‚₃+φ₂‚₂>\n LeftCell<G₂: duflo=1 character=φ₂‚₁+φ″₁‚₃+φ₂‚₂>")
@test mytest("KL.jl","W=coxgroup(:G,2);","nothing")
@test mytest("KL.jl","LeftCells(W,1)","2-element Vector{LeftCell{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n LeftCell<G₂: duflo=2 character=φ₂‚₁+φ′₁‚₃+φ₂‚₂>\n LeftCell<G₂: duflo=1 character=φ₂‚₁+φ″₁‚₃+φ₂‚₂>")
@test mytest("KL.jl","W=coxgroup(:E,8)","E₈")
@test mytest("KL.jl","LeftCell(W,W((1:8)...))","LeftCell<E₈: duflo=(42,43) character=φ₃₅‚₂>")
@test mytest("KL.jl","W=coxgroup(:G,2)","G₂")
@test mytest("KL.jl","l=Lusztigaw(W,W(1))","6-element Vector{Int64}:\n 0\n 0\n 1\n 0\n 1\n 1")
@test mytest("KL.jl","sum(l.*map(i->almostChar(W,i),eachindex(l)))","[G₂]:<φ′₁‚₃>+<φ₂‚₁>+<φ₂‚₂>")
@test mytest("KL.jl","W=coxgroup(:G,2)","G₂")
@test mytest("KL.jl","l=LusztigAw(W,W(1))","6-element Vector{Int64}:\n 0\n 0\n 0\n 1\n 1\n 1")
@test mytest("KL.jl","sum(l.*map(i->almostChar(W,i),eachindex(l)))","[G₂]:<φ″₁‚₃>+<φ₂‚₁>+<φ₂‚₂>")
@test mytest("KL.jl","W=coxgroup(:G,2)","G₂")
@test mytest("KL.jl","A=AsymptoticAlgebra(W,1)","Asymptotic Algebra dim.10")
@test mytest("KL.jl","b=basis(A)","10-element Vector{AlgebraElt{AsymptoticAlgebra, Int64}}:\n t₂\n t₁₂\n t₂₁₂\n t₁₂₁₂\n t₂₁₂₁₂\n t₁\n t₂₁\n t₁₂₁\n t₂₁₂₁\n t₁₂₁₂₁")
@test mytest("KL.jl","b*permutedims(b)","10×10 Matrix{AlgebraElt{AsymptoticAlgebra, Int64}}:\n t₂      0            t₂₁₂            …  0               t₂₁₂₁        0\n t₁₂     0            t₁₂+t₁₂₁₂          0               t₁₂₁+t₁₂₁₂₁  0\n t₂₁₂    0            t₂+t₂₁₂+t₂₁₂₁₂     0               t₂₁+t₂₁₂₁    0\n t₁₂₁₂   0            t₁₂+t₁₂₁₂          0               t₁+t₁₂₁      0\n t₂₁₂₁₂  0            t₂₁₂               0               t₂₁          0\n 0       t₁₂          0               …  t₁₂₁            0            t₁₂₁₂₁\n 0       t₂+t₂₁₂      0                  t₂₁+t₂₁₂₁       0            t₂₁₂₁\n 0       t₁₂+t₁₂₁₂    0                  t₁+t₁₂₁+t₁₂₁₂₁  0            t₁₂₁\n 0       t₂₁₂+t₂₁₂₁₂  0                  t₂₁+t₂₁₂₁       0            t₂₁\n 0       t₁₂₁₂        0                  t₁₂₁            0            t₁")
@test mytest("KL.jl","CharTable(A)","CharTable(Asymptotic Algebra dim.10)\n     │2 12 212 1212 21212 1 21 121 2121 12121\n─────┼────────────────────────────────────────\nφ′₁‚₃│.  .   .    .     . 1  .  -1    .     1\nφ₂‚₁ │1  .   2    .     1 1  .   2    .     1\nφ₂‚₂ │1  .   .    .    -1 1  .   .    .    -1\nφ″₁‚₃│1  .  -1    .     1 .  .   .    .     .")
end
@testset "Lusztig.jl" begin
@test mytest("Lusztig.jl","W=coxgroup(:B,3)","B₃")
@test mytest("Lusztig.jl","t=twistings(W,[1,3])","2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n B₃₍₁₃₎=Ã₁×A₁Φ₁\n B₃₍₁₃₎=Ã₁×A₁Φ₂")
@test mytest("Lusztig.jl","LusztigInductionTable(t[2],W)","Lusztig Induction from B₃₍₁₃₎=Ã₁×A₁Φ₂ to B₃\n     │11⊗ 11 11⊗ 2 2⊗ 11 2⊗ 2\n─────┼────────────────────────\n111. │     1    -1    -1    .\n11.1 │    -1     .     1   -1\n1.11 │     .     .    -1    .\n.111 │    -1     .     .    .\n21.  │     .     .     .    .\n1.2  │     1    -1     .    1\n2.1  │     .     1     .    .\n.21  │     .     .     .    .\n3.   │     .     .     .    1\n.3   │     .     1     1   -1\nB₂:2 │     .     .     1   -1\nB₂:11│     1    -1     .    .")
end
@testset "MatInt.jl" begin
@test mytest("MatInt.jl","MatInt.Gcdex(123,66)","(gcd = 3, coeff1 = 7, coeff2 = -13, coeff3 = -22, coeff4 = 41)")
@test mytest("MatInt.jl","MatInt.Gcdex(0,-3)","(gcd = 3, coeff1 = 0, coeff2 = -1, coeff3 = 1, coeff4 = 0)")
@test mytest("MatInt.jl","MatInt.Gcdex(0,0)","(gcd = 0, coeff1 = 1, coeff2 = 0, coeff3 = 0, coeff4 = 1)")
@test mytest("MatInt.jl","m=[[1,15,28],[4,5,6],[7,8,9]]","3-element Vector{Vector{Int64}}:\n [1, 15, 28]\n [4, 5, 6]\n [7, 8, 9]")
@test mytest("MatInt.jl","MatInt.NormalFormIntMat(m,6)","Dict{Symbol, Any} with 6 entries:\n  :rowQ     => [[-2, 62, -35], [1, -30, 17], [-3, 97, -55]]\n  :normal   => [[1, 0, 1], [0, 1, 1], [0, 0, 3]]\n  :rowC     => [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n  :rank     => 3\n  :signdet  => 1\n  :rowtrans => [[-2, 62, -35], [1, -30, 17], [-3, 97, -55]]")
@test mytest("MatInt.jl","r=MatInt.NormalFormIntMat(m,13)","Dict{Symbol, Any} with 9 entries:\n  :rowQ     => [[-2, 62, -35], [1, -30, 17], [-3, 97, -55]]\n  :normal   => [[1, 0, 0], [0, 1, 0], [0, 0, 3]]\n  :colQ     => [[1, 0, -1], [0, 1, -1], [0, 0, 1]]\n  :coltrans => [[1, 0, -1], [0, 1, -1], [0, 0, 1]]\n  :rowC     => [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n  :rank     => 3\n  :colC     => [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n  :signdet  => 1\n  :rowtrans => [[-2, 62, -35], [1, -30, 17], [-3, 97, -55]]")
@test mytest("MatInt.jl","toM(r[:rowtrans])*toM(m)*toM(r[:coltrans])","3×3 Matrix{Int64}:\n 1  0  0\n 0  1  0\n 0  0  3")
@test mytest("MatInt.jl","m=[[1,15,28],[4,5,6],[7,8,9]]","3-element Vector{Vector{Int64}}:\n [1, 15, 28]\n [4, 5, 6]\n [7, 8, 9]")
@test mytest("MatInt.jl","smith_normal_form(m)","3×3 Matrix{Int64}:\n 1  0  0\n 0  1  0\n 0  0  3")
@test mytest("MatInt.jl","m=[1 2 7;4 5 6;10 11 19]","3×3 Matrix{Int64}:\n  1   2   7\n  4   5   6\n 10  11  19")
@test mytest("MatInt.jl","baseInt(m)","3×3 Matrix{Int64}:\n 1  2   7\n 0  3   7\n 0  0  15")
@test mytest("MatInt.jl","mat=[[1,2,7],[4,5,6],[10,11,19]]; nat=[[5,7,2],[4,2,5],[7,1,4]]","3-element Vector{Vector{Int64}}:\n [5, 7, 2]\n [4, 2, 5]\n [7, 1, 4]")
@test mytest("MatInt.jl","MatInt.BaseIntersectionIntMats(mat,nat)","3-element Vector{Vector{Int64}}:\n [1, 5, 509]\n [0, 6, 869]\n [0, 0, 960]")
@test mytest("MatInt.jl","m=one(rand(Int,3,3))","3×3 Matrix{Int64}:\n 1  0  0\n 0  1  0\n 0  0  1")
@test mytest("MatInt.jl","n=[1 2 3;4 5 6]","2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6")
@test mytest("MatInt.jl","MatInt.complementInt(m,n)","(complement = [[0, 0, 1]], sub = [[1, 2, 3], [0, 3, 6]], moduli = [1, 3])")
@test mytest("MatInt.jl","m=[1 2 7;4 5 6;7 8 9;10 11 19;5 7 12]","5×3 Matrix{Int64}:\n  1   2   7\n  4   5   6\n  7   8   9\n 10  11  19\n  5   7  12")
@test mytest("MatInt.jl","MatInt.leftnullspaceInt(m)","2-element Vector{Vector{Int64}}:\n [1, 18, -9, 2, -6]\n [0, 24, -13, 3, -7]")
@test mytest("MatInt.jl","mat=[[1,2,7],[4,5,6],[7,8,9],[10,11,19],[5,7,12]]","5-element Vector{Vector{Int64}}:\n [1, 2, 7]\n [4, 5, 6]\n [7, 8, 9]\n [10, 11, 19]\n [5, 7, 12]")
@test mytest("MatInt.jl","solutionmat(toM(mat),[95,115,182])","5-element Vector{Rational{Int64}}:\n  47//4\n -17//2\n  67//4\n   0//1\n   0//1")
@test mytest("MatInt.jl","SolutionIntMat(mat,[95,115,182])","5-element view(::Matrix{Int64}, 1, :) with eltype Int64:\n  2285\n -5854\n  4888\n -1299\n     0")
@test mytest("MatInt.jl","DiaconisGraham([[3,0],[4,1]],[10,5])","Dict{Symbol, Any} with 2 entries:\n  :normal   => [[1, 0], [0, 2]]\n  :rowtrans => [[-13, 10], [4, -3]]")
end
@testset "PermGroups.jl" begin
@test mytest("PermGroups.jl","G=Group([Perm(i,i+1) for i in 1:2])","Group([(1,2),(2,3)])")
@test mytest("PermGroups.jl","collect(G)","6-element Vector{Perm{Int16}}:\n (1,2)\n (1,3,2)\n ()\n (1,2,3)\n (1,3)\n (2,3)")
@test mytest("PermGroups.jl","largest_moved_point(G)","3")
@test mytest("PermGroups.jl","Perm(1,2) in G","true")
@test mytest("PermGroups.jl","Perm(1,2,4) in G","false")
@test mytest("PermGroups.jl","base(G)","2-element Vector{Int16}:\n 1\n 2")
@test mytest("PermGroups.jl","centralizers(G)","2-element Vector{PermGroup{Int16}}:\n Group([(1,2),(2,3)])\n Group([(2,3)])")
@test mytest("PermGroups.jl","transversals(G)","2-element Vector{Dict{Int16, Perm{Int16}}}:\n Dict(2 => (1,2), 3 => (1,3,2), 1 => ())\n Dict(2 => (), 3 => (2,3))")
@test mytest("PermGroups.jl","WF=rootdatum(\"3D4\")","³D₄")
@test mytest("PermGroups.jl","on_classes(Group(WF),WF.phi)","Perm{Int64}: (2,8,7)(5,13,12)")
@test mytest("PermGroups.jl","uc=UnipotentCharacters(ComplexReflectionGroup(34));","nothing")
@test mytest("PermGroups.jl","stab_onmats(fourier(uc.families[20]))","Group([(7,38),(39,44)(40,43)(41,42)])")
@test mytest("PermGroups.jl","m=cartan(:D,12);","nothing")
@test mytest("PermGroups.jl","n=^(m,Perm(1,5,2,8,12,4,7)*Perm(3,9,11,6);dims=(1,2));","nothing")
@test mytest("PermGroups.jl","Perm_onmats(m,n)","(1,5,2,8,12,4,7)(3,9,11,6)")
end
@testset "PermRoot.jl" begin
@test mytest("PermRoot.jl","W=coxgroup(:A,3)","A₃")
@test mytest("PermRoot.jl","cartan(W)","3×3 Matrix{Int64}:\n  2  -1   0\n -1   2  -1\n  0  -1   2")
@test mytest("PermRoot.jl","rank(ComplexReflectionGroup(31))","4")
@test mytest("PermRoot.jl","W=coxgroup(:B,2)","B₂")
@test mytest("PermRoot.jl","hyperplane_orbits(W)","2-element Vector{NamedTuple{(:s, :cl_s, :order, :N_s, :det_s), Tuple{Int64, Vector{Int64}, Int64, Int64, Vector{Int64}}}}:\n (s = 1, cl_s = [2], order = 2, N_s = 2, det_s = [5])\n (s = 2, cl_s = [4], order = 2, N_s = 2, det_s = [1])")
@test mytest("PermRoot.jl","bipartite_decomposition(coxgroup(:E,8))","([1, 4, 6, 8], [3, 2, 5, 7])")
@test mytest("PermRoot.jl","reflchar(coxgroup(:A,3))","5-element Vector{Int64}:\n  3\n  1\n -1\n  0\n -1")
@test mytest("PermRoot.jl","refleigen(coxgroup(:B,2))","5-element Vector{Vector{Root1}}:\n [1, 1]\n [1, -1]\n [-1, -1]\n [1, -1]\n [ζ₄, ζ₄³]")
@test mytest("PermRoot.jl","W=coxgroup(:A,4)","A₄")
@test mytest("PermRoot.jl","reflength(W,longest(W))","2")
@test mytest("PermRoot.jl","reflength(W,W(1,2,3,4))","4")
@test mytest("PermRoot.jl","W=reflection_subgroup(coxgroup(:A,3),[1,3])","A₃₍₁₃₎=A₁×A₁Φ₁")
@test mytest("PermRoot.jl","semisimplerank(W)","2")
@test mytest("PermRoot.jl","rank(W)","3")
@test mytest("PermRoot.jl","W=reflection_subgroup(rootdatum(\"E7sc\"),1:6)","E₇₍₁₂₃₄₅₆₎=E₆Φ₁")
@test mytest("PermRoot.jl","PermX(W,reflrep(W,longest(W)))==longest(W)","true")
@test mytest("PermRoot.jl","parabolic_reps(coxgroup(:A,4))","7-element Vector{Vector{Int64}}:\n []\n [1]\n [1, 2]\n [1, 3]\n [1, 2, 3]\n [1, 2, 4]\n [1, 2, 3, 4]")
@test mytest("PermRoot.jl","parabolic_reps(coxgroup(:A,4),2)","2-element Vector{Vector{Int64}}:\n [1, 2]\n [1, 3]")
@test mytest("PermRoot.jl","W=reflection_subgroup(rootdatum(\"E7sc\"),1:6)","E₇₍₁₂₃₄₅₆₎=E₆Φ₁")
@test mytest("PermRoot.jl","reflrep(W,longest(W))","7×7 Matrix{Int64}:\n  0   0   0   0   0  -1  2\n  0  -1   0   0   0   0  2\n  0   0   0   0  -1   0  3\n  0   0   0  -1   0   0  4\n  0   0  -1   0   0   0  3\n -1   0   0   0   0   0  2\n  0   0   0   0   0   0  1")
@test mytest("PermRoot.jl","W=ComplexReflectionGroup(7)","G₇")
@test mytest("PermRoot.jl","is_parabolic(reflection_subgroup(W,[1,2]))","false")
@test mytest("PermRoot.jl","is_parabolic(reflection_subgroup(W,[1]))","true")
@test mytest("PermRoot.jl","W=ComplexReflectionGroup(7)","G₇")
@test mytest("PermRoot.jl","parabolic_closure(W,[1])","1-element Vector{Int64}:\n 1")
@test mytest("PermRoot.jl","parabolic_closure(W,[1,2])","3-element Vector{Int64}:\n 1\n 2\n 3")
@test mytest("PermRoot.jl","catalan(coxgroup(:A,7))","1430")
@test mytest("PermRoot.jl","catalan(ComplexReflectionGroup(7),2)","16")
@test mytest("PermRoot.jl","catalan(ComplexReflectionGroup(7),2;q=Pol())","Pol{Int64}: q⁷²+2q⁶⁰+3q⁴⁸+4q³⁶+3q²⁴+2q¹²+1")
@test mytest("PermRoot.jl","reflection([-1 0 0;1 1 0;0 0 1])","(root = [2, 0, 0], coroot = Rational{Int64}[1//1, -1//2, 0//1], eig = -1, isOrthogonal = false)")
@test mytest("PermRoot.jl","reflection([-1 0 0;1 1 0;0 0 1],[1,0,0])","(root = [1, 0, 0], coroot = Rational{Int64}[2//1, -1//1, 0//1], eig = -1, isOrthogonal = false)")
@test mytest("PermRoot.jl","W=ComplexReflectionGroup(4)","G₄")
@test mytest("PermRoot.jl","invariant_form(W)","2×2 Matrix{Int64}:\n 1  0\n 0  2")
@test mytest("PermRoot.jl","@Pol q","Pol{Int64}: q")
@test mytest("PermRoot.jl","PermRoot.generic_order(ComplexReflectionGroup(4),q)","Pol{Int64}: q¹⁴-q¹⁰-q⁸+q⁴")
@test mytest("PermRoot.jl","W=coxgroup(:A,2)","A₂")
@test mytest("PermRoot.jl","@Mvp x,y,z","nothing")
@test mytest("PermRoot.jl","i=invariants(W);","nothing")
@test mytest("PermRoot.jl","i[1](x,y)","Mvp{Int64}: -2x²+2xy-2y²")
@test mytest("PermRoot.jl","i[2](x,y)","Mvp{Int64}: 6x²y-6xy²")
@test mytest("PermRoot.jl","W=ComplexReflectionGroup(24)","G₂₄")
@test mytest("PermRoot.jl","i=invariants(W)[1];","nothing")
@test mytest("PermRoot.jl","p=i(x,y,z)","Mvp{Rational{Int64}}: (14//1)x⁴+(-12//1)x²y²+(-42//1)x²yz+(21//2)x²z²+(18//7)y⁴+(-6//1)y³z+(-9//2)y²z²+(-21//8)z⁴")
@test mytest("PermRoot.jl","p^reflrep(W,1)-p","Mvp{Cyc{Rational{Int64}}}: 0")
end
@testset "Perms.jl" begin
@test mytest("Perms.jl","a=Perm(1,2,3)","(1,2,3)")
@test mytest("Perms.jl","vec(a)","3-element Vector{Int16}:\n 2\n 3\n 1")
@test mytest("Perms.jl","a==Perm(vec(a))","true")
@test mytest("Perms.jl","b=Perm(1,2,3,4)","(1,2,3,4)")
@test mytest("Perms.jl","a*b","(1,3,2,4)")
@test mytest("Perms.jl","inv(a)","(1,3,2)")
@test mytest("Perms.jl","a/b","(3,4)")
@test mytest("Perms.jl","a\\\\b","(1,4)")
@test mytest("Perms.jl","a^b","(2,3,4)")
@test mytest("Perms.jl","b^2","(1,3)(2,4)")
@test mytest("Perms.jl","1^a","2")
@test mytest("Perms.jl","one(a)","()")
@test mytest("Perms.jl","sign(a)","1")
@test mytest("Perms.jl","order(a)","3")
@test mytest("Perms.jl","largest_moved_point(a)","3")
@test mytest("Perms.jl","smallest_moved_point(a)","1")
@test mytest("Perms.jl","Perm{Int8}(a)","Perm{Int8}: (1,2,3)")
@test mytest("Perms.jl","Matrix(b)","4×4 Matrix{Bool}:\n 0  1  0  0\n 0  0  1  0\n 0  0  0  1\n 1  0  0  0")
@test mytest("Perms.jl","Perm([0,2,4],[4,0,2])","(1,3,2)")
@test mytest("Perms.jl","Perm([0 1 0;0 0 1;1 0 0],[1 0 0;0 1 0;0 0 1];dims=1)","(1,3,2)")
@test mytest("Perms.jl","Perm([0 1 0;0 0 1;1 0 0],[1 0 0;0 1 0;0 0 1];dims=2)","(1,2,3)")
@test mytest("Perms.jl","Matrix(Perm(2,3,4),5)","5×5 Matrix{Bool}:\n 1  0  0  0  0\n 0  0  1  0  0\n 0  0  0  1  0\n 0  1  0  0  0\n 0  0  0  0  1")
@test mytest("Perms.jl","[5,4,6,1,7,5]^Perm(1,3,5,6,4)","6-element Vector{Int64}:\n 1\n 4\n 5\n 5\n 6\n 7")
@test mytest("Perms.jl","m=[3*i+j for i in 0:2,j in 1:3]","3×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n 7  8  9")
@test mytest("Perms.jl","p=Perm(1,2,3)","(1,2,3)")
@test mytest("Perms.jl","m^p","3×3 Matrix{Int64}:\n 7  8  9\n 1  2  3\n 4  5  6")
@test mytest("Perms.jl","^(m,p;dims=2)","3×3 Matrix{Int64}:\n 3  1  2\n 6  4  5\n 9  7  8")
@test mytest("Perms.jl","^(m,p;dims=(1,2))","3×3 Matrix{Int64}:\n 9  7  8\n 3  1  2\n 6  4  5")
@test mytest("Perms.jl","orbits(Perm(1,2)*Perm(4,5),1:5)","3-element Vector{Vector{Int16}}:\n [1, 2]\n [3]\n [4, 5]")
@test mytest("Perms.jl","cycles(Perm(1,2)*Perm(4,5))","2-element Vector{Vector{Int16}}:\n [1, 2]\n [4, 5]")
@test mytest("Perms.jl","cycletype(Perm(1,2)*Perm(3,4))","1-element Vector{Pair{Int64, Int64}}:\n 2 => 2")
@test mytest("Perms.jl","restricted(Perm(1,2)*Perm(3,4),3:4)","(3,4)")
@test mytest("Perms.jl","mappingPerm([1,2,5,3],[2,3,4,6])","(1,2,3,6,5,4)")
end
@testset "Posets.jl" begin
@test mytest("Posets.jl","p=Poset(coxgroup(:A,2))",".<1,2<21,12<121")
@test mytest("Posets.jl","length(p)","6")
@test mytest("Posets.jl","p.labels=\"abcdef\"; p","a<b,c<d,e<f")
@test mytest("Posets.jl","hasse(p)","6-element Vector{Vector{Int64}}:\n [2, 3]\n [4, 5]\n [4, 5]\n [6]\n [6]\n []")
@test mytest("Posets.jl","incidence(p)","6×6 Matrix{Bool}:\n 1  1  1  1  1  1\n 0  1  0  1  1  1\n 0  0  1  1  1  1\n 0  0  0  1  0  1\n 0  0  0  0  1  1\n 0  0  0  0  0  1")
@test mytest("Posets.jl","m=[j-i in [0,1] for i in 1:5, j in 1:5]","5×5 Matrix{Bool}:\n 1  1  0  0  0\n 0  1  1  0  0\n 0  0  1  1  0\n 0  0  0  1  1\n 0  0  0  0  1")
@test mytest("Posets.jl","transitive_closure(m)","5×5 Matrix{Bool}:\n 1  1  1  1  1\n 0  1  1  1  1\n 0  0  1  1  1\n 0  0  0  1  1\n 0  0  0  0  1")
@test mytest("Posets.jl","Poset(Bool[1 1 1 1 1;0 1 0 1 1;0 0 1 1 1;0 0 0 1 0;0 0 0 0 1])","1<2,3<4,5")
@test mytest("Posets.jl","Poset([[2,3],[4,5],[4,5],Int[],Int[]])","1<2,3<4,5")
@test mytest("Posets.jl","p=Poset([j%i==0 for i in 1:6, j in 1:6])","1<5\n1<2<4\n1<3<6\n2<6")
@test mytest("Posets.jl","linear_extension(p)","6-element Vector{Int64}:\n 1\n 2\n 3\n 5\n 4\n 6")
@test mytest("Posets.jl","p=Poset([j%i==0 for i in 1:5, j in 1:5])","1<3,5\n1<2<4")
@test mytest("Posets.jl","hasse(p)","5-element Vector{Vector{Int64}}:\n [2, 3, 5]\n [4]\n []\n []\n []")
@test mytest("Posets.jl","p=Poset(push!([[i+1] for i in 1:5],Int[]))","1<2<3<4<5<6")
@test mytest("Posets.jl","incidence(p)","6×6 Matrix{Bool}:\n 1  1  1  1  1  1\n 0  1  1  1  1  1\n 0  0  1  1  1  1\n 0  0  0  1  1  1\n 0  0  0  0  1  1\n 0  0  0  0  0  1")
@test mytest("Posets.jl","p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("Posets.jl","reverse(p)","3,7<2,6<1,5<4,8")
@test mytest("Posets.jl","p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("Posets.jl","partition(p)","4-element Vector{Vector{Int64}}:\n [4, 8]\n [2, 6]\n [3, 7]\n [1, 5]")
@test mytest("Posets.jl","p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("Posets.jl","restricted(p,2:6)","3<4<1,5<2")
@test mytest("Posets.jl","p.labels=1:8; restricted(p,2:6)","4<5<2,6<3")
@test mytest("Posets.jl","p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("Posets.jl","is_join_lattice(p)","false")
@test mytest("Posets.jl","p=Poset([i==j || i%4<j%4 for i in 1:8, j in 1:8])","4,8<1,5<2,6<3,7")
@test mytest("Posets.jl","is_meet_lattice(p)","false")
end
@testset "Presentations.jl" begin
@test mytest("Presentations.jl","@AbsWord a,b","nothing")
@test mytest("Presentations.jl","F=FpGroup([a,b])","FreeGroup(a,b)")
@test mytest("Presentations.jl","G=F/[a^2,b^7,comm(a,a^b),comm(a,a^(b^2))*inv(b^a)]","FreeGroup(a,b)/[a²,b⁷,a⁻¹b⁻¹a⁻¹bab⁻¹ab,a⁻¹b⁻²a⁻¹b²ab⁻²ab²a⁻¹b⁻¹a]")
@test mytest("Presentations.jl","P=Presentation(G)","Presentation: 2 generators, 4 relators, total length 30")
@test mytest("Presentations.jl","relators(P)","4-element Vector{AbsWord}:\n a²\n b⁷\n ab⁻¹abab⁻¹ab\n b⁻²ab²ab⁻²ab²ab⁻¹")
@test mytest("Presentations.jl","F=FpGroup(:a,:b,:c)","FreeGroup(a,b,c)")
@test mytest("Presentations.jl","Presentations.TietzeWord(comm(F(1),F(2))*inv(F(3)^2*F(2)),gens(F))","5-element Vector{Int64}:\n -1\n -2\n  1\n -3\n -3")
@test mytest("Presentations.jl","AbsWord([-1,-2,1,-3,-3],AbsWord.([:a,:b,:c]))","a⁻¹b⁻¹ac⁻²")
@test mytest("Presentations.jl","@AbsWord a,b,c,d,e,f","nothing")
@test mytest("Presentations.jl","F=FpGroup([a,b,c,d,e,f])","FreeGroup(a,b,c,d,e,f)")
@test mytest("Presentations.jl","G=F/[a^2,b^2,d*f^-1,e^2,f^2,a*b^-1*c,a*e*c^-1,b*d^-1*c,c*d*e^-1,a*f*c^-2,c^4]","FreeGroup(a,b,c,d,e,f)/[a²,b²,df⁻¹,e²,f²,ab⁻¹c,aec⁻¹,bd⁻¹c,cde⁻¹,afc⁻²,c⁴]")
@test mytest("Presentations.jl","simplify(G)","FreeGroup(a,c)/[a²,ac⁻¹ac⁻¹,c⁴]")
end
@testset "SPerms.jl" begin
@test mytest("SPerms.jl","SPerm([-2,-1,-3])","SPerm{Int64}: (1,-2)(3,-3)")
@test mytest("SPerms.jl","p=SPerm(-1)","(1,-1)")
@test mytest("SPerms.jl","q=SPerm(1,2)","(1,2)")
@test mytest("SPerms.jl","sort(elements(Group([p,q])))","8-element Vector{SPerm{Int16}}:\n (1,-2)\n (1,-2,-1,2)\n (1,-1)(2,-2)\n (1,-1)\n (2,-2)\n ()\n (1,2,-1,-2)\n (1,2)")
@test mytest("SPerms.jl","SPerm([-2,-1,-3])==SPerm([-2,-1,-3,4])","true")
@test mytest("SPerms.jl","p=SPerm([-2,-1,-3])","SPerm{Int64}: (1,-2)(3,-3)")
@test mytest("SPerms.jl","[20,30,40]^p","3-element Vector{Int64}:\n -30\n -20\n -40")
@test mytest("SPerms.jl","p=SPerm([20,30,40],[-40,-20,-30])","(1,-2,3,-1,2,-3)")
@test mytest("SPerms.jl","[20,30,40]^p","3-element Vector{Int64}:\n -40\n -20\n -30")
@test mytest("SPerms.jl","Matrix(SPerm([-2,-1,-3]))","3×3 Matrix{Int64}:\n  0  -1   0\n -1   0   0\n  0   0  -1")
@test mytest("SPerms.jl","elements(CoxHyperoctaedral(2))","8-element Vector{SPerm{Int8}}:\n ()\n (1,2)\n (1,-1)\n (1,2,-1,-2)\n (1,-2,-1,2)\n (2,-2)\n (1,-2)\n (1,-1)(2,-2)")
@test mytest("SPerms.jl","uc=UnipotentCharacters(ComplexReflectionGroup(6));","nothing")
@test mytest("SPerms.jl","g=sstab_onmats(fourier(uc.families[2]))","Group([(1,18)(3,-6)(8,-21)(10,-16)(11,22)(13,15),(1,-15)(2,-19)(3,-11)(6,22)(7,-12)(13,-18),(2,19)(4,-14)(5,20)(7,12),(1,-11)(2,-19)(3,-15)(5,-20)(6,13)(8,10)(16,21)(17,-17)(18,-22),(1,-22)(2,-19)(3,-13)(5,-20)(6,15)(8,-16)(10,-21)(11,-18)(17,-17),(1,6)(2,-19)(3,-18)(4,14)(8,16)(9,-9)(10,21)(11,-13)(15,-22),(1,13)(3,22)(4,14)(5,-20)(6,-11)(8,21)(9,-9)(10,16)(15,18)(17,-17)])")
@test mytest("SPerms.jl","length(g)","32")
@test mytest("SPerms.jl","f=SubFamilyij(chevieget(:families,:X)(12),1,3,(3+root(-3))/2);","nothing")
@test mytest("SPerms.jl","M=fourier(conj(f));","nothing")
@test mytest("SPerms.jl","uc=UnipotentCharacters(ComplexReflectionGroup(6));","nothing")
@test mytest("SPerms.jl","N=fourier(uc.families[2]);","nothing")
@test mytest("SPerms.jl","p=SPerm_onmats(M,N)","(1,3)(2,19,-2,-19)(4,-14,-4,14)(5,-5)(6,-18)(7,-7)(8,10)(11,15,-11,-15)(12,-12)(13,22)(16,21,-16,-21)")
@test mytest("SPerms.jl","^(M,p;dims=(1,2))==N","true")
end
@testset "Semisimple.jl" begin
@test mytest("Semisimple.jl","W=rootdatum([-1 1 0;0 -1 1],[-1 1 0;0 -1 1])","A₂Φ₁")
@test mytest("Semisimple.jl","reflrep(W,W(1))","3×3 Matrix{Int64}:\n 0  1  0\n 1  0  0\n 0  0  1")
@test mytest("Semisimple.jl","rootdatum(:gl,3)","A₂Φ₁")
@test mytest("Semisimple.jl","G=rootdatum(:sl,4)","A₃")
@test mytest("Semisimple.jl","L=reflection_subgroup(G,[1,3])","A₃₍₁₃₎=A₁×A₁Φ₁")
@test mytest("Semisimple.jl","C=algebraic_centre(L)","Dict{Symbol, Any} with 3 entries:\n  :descAZ => [[1, 2]]\n  :AZ     => SSGroup(SemisimpleElement{Root1}[<1,1,-1>])\n  :Z0     => SubTorus(A₃₍₁₃₎=A₁×A₁Φ₁,[[1, 2, 1]])")
@test mytest("Semisimple.jl","T=torsion_subgroup(C[:Z0],3)","SSGroup(SemisimpleElement{Root1}[<ζ₃,ζ₃²,ζ₃>])")
@test mytest("Semisimple.jl","e=sort(elements(T))","3-element Vector{SemisimpleElement{Root1}}:\n <1,1,1>\n <ζ₃,ζ₃²,ζ₃>\n <ζ₃²,ζ₃,ζ₃²>")
@test mytest("Semisimple.jl","e[3]^G(2)","SemisimpleElement{Root1}: <ζ₃²,1,ζ₃²>")
@test mytest("Semisimple.jl","orbit(G,e[3])","6-element Vector{SemisimpleElement{Root1}}:\n <ζ₃²,ζ₃,ζ₃²>\n <ζ₃²,1,ζ₃²>\n <ζ₃,1,ζ₃²>\n <ζ₃²,1,ζ₃>\n <ζ₃,1,ζ₃>\n <ζ₃,ζ₃²,ζ₃>")
@test mytest("Semisimple.jl","G=rootdatum(:sl,4)","A₃")
@test mytest("Semisimple.jl","s=SemisimpleElement(G,Z(4).^[1,2,1])","SemisimpleElement{FFE{2}}: <Z₄,Z₄²,Z₄>")
@test mytest("Semisimple.jl","s^G(2)","SemisimpleElement{FFE{2}}: <Z₄,1,Z₄>")
@test mytest("Semisimple.jl","orbit(G,s)","6-element Vector{SemisimpleElement{FFE{2}}}:\n <Z₄,Z₄²,Z₄>\n <Z₄,1,Z₄>\n <Z₄²,1,Z₄>\n <Z₄,1,Z₄²>\n <Z₄²,1,Z₄²>\n <Z₄²,Z₄,Z₄²>")
@test mytest("Semisimple.jl","G=coxgroup(:A,3)","A₃")
@test mytest("Semisimple.jl","s=SS(G,[0,1//2,0])","SemisimpleElement{Root1}: <1,-1,1>")
@test mytest("Semisimple.jl","centralizer(G,s)","A₃₍₁₃₎=(A₁A₁)Φ₂")
@test mytest("Semisimple.jl","W=coxgroup(:A,4)","A₄")
@test mytest("Semisimple.jl","SubTorus(W,[1 2 3 4;2 3 4 1;3 4 1 1])","SubTorus(A₄,[[1, 0, 3, -13], [0, 1, 2, 7], [0, 0, 4, -3]])")
@test mytest("Semisimple.jl","G=rootdatum(:sl,4)","A₃")
@test mytest("Semisimple.jl","L=reflection_subgroup(G,[1,3])","A₃₍₁₃₎=A₁×A₁Φ₁")
@test mytest("Semisimple.jl","C=algebraic_centre(L)","Dict{Symbol, Any} with 3 entries:\n  :descAZ => [[1, 2]]\n  :AZ     => SSGroup(SemisimpleElement{Root1}[<1,1,-1>])\n  :Z0     => SubTorus(A₃₍₁₃₎=A₁×A₁Φ₁,[[1, 2, 1]])")
@test mytest("Semisimple.jl","T=torsion_subgroup(C[:Z0],3)","SSGroup(SemisimpleElement{Root1}[<ζ₃,ζ₃²,ζ₃>])")
@test mytest("Semisimple.jl","sort(elements(T))","3-element Vector{SemisimpleElement{Root1}}:\n <1,1,1>\n <ζ₃,ζ₃²,ζ₃>\n <ζ₃²,ζ₃,ζ₃²>")
@test mytest("Semisimple.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Semisimple.jl","fundamental_group(W)","Group([(1,12,3,2)])")
@test mytest("Semisimple.jl","W=rootdatum(:sl,4)","A₃")
@test mytest("Semisimple.jl","fundamental_group(W)","Group([])")
@test mytest("Semisimple.jl","G=coxgroup(:A,3)","A₃")
@test mytest("Semisimple.jl","s=SS(G,[0,1//2,0])","SemisimpleElement{Root1}: <1,-1,1>")
@test mytest("Semisimple.jl","centralizer(G,s)","A₃₍₁₃₎=(A₁A₁)Φ₂")
@test mytest("Semisimple.jl","W=coxgroup(:E,6);l=Semisimple.QuasiIsolatedRepresentatives(W)","5-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <1,1,1,ζ₃,1,1>\n <1,-1,1,1,1,1>\n <1,ζ₆,ζ₆,1,ζ₆,1>\n <ζ₃,1,1,1,1,ζ₃>")
@test mytest("Semisimple.jl","map(s->is_isolated(W,s),l)","5-element Vector{Bool}:\n 1\n 1\n 1\n 0\n 0")
@test mytest("Semisimple.jl","W=rootdatum(:E6sc);l=Semisimple.QuasiIsolatedRepresentatives(W)","7-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <-1,1,1,-1,1,-1>\n <ζ₃,1,ζ₃²,1,ζ₃,ζ₃²>\n <ζ₃²,1,ζ₃,1,ζ₃,ζ₃²>\n <ζ₃²,1,ζ₃,1,ζ₃²,ζ₃>\n <ζ₃²,1,ζ₃,1,ζ₃²,ζ₆⁵>\n <ζ₆⁵,1,ζ₃²,1,ζ₃,ζ₃²>")
@test mytest("Semisimple.jl","map(s->is_isolated(W,s),l)","7-element Vector{Bool}:\n 1\n 1\n 1\n 1\n 1\n 1\n 1")
@test mytest("Semisimple.jl","Semisimple.QuasiIsolatedRepresentatives(W,3)","2-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <-1,1,1,-1,1,-1>")
@test mytest("Semisimple.jl","l=twistings(rootdatum(:sl,4),Int[])","5-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n A₃₍₎=Φ₁³\n A₃₍₎=Φ₁²Φ₂\n A₃₍₎=Φ₁Φ₂²\n A₃₍₎=Φ₁Φ₃\n A₃₍₎=Φ₂Φ₄")
@test mytest("Semisimple.jl","StructureRationalPointsConnectedCentre.(l,3)","5-element Vector{Vector{Int64}}:\n [2, 2, 2]\n [2, 8]\n [4, 8]\n [26]\n [40]")
@test mytest("Semisimple.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Semisimple.jl","fundamental_group(intermediate_group(W,Int[]))","Group([(1,12,3,2)])")
@test mytest("Semisimple.jl","fundamental_group(intermediate_group(W,Int[2]))","Group([(1,3)(2,12)])")
@test mytest("Semisimple.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Semisimple.jl","SScentralizer_reps(W)","6-element Vector{Vector{Int64}}:\n []\n [1]\n [2]\n [1, 2]\n [1, 5]\n [2, 6]")
@test mytest("Semisimple.jl","reflection_subgroup.(Ref(W),SScentralizer_reps(W))","6-element Vector{FiniteCoxeterSubGroup{Perm{Int16},Int64}}:\n G₂₍₎=Φ₁²\n G₂₍₁₎=A₁Φ₁\n G₂₍₂₎=Ã₁Φ₁\n G₂\n G₂₍₁₅₎=A₂\n G₂₍₂₆₎=Ã₁×A₁")
@test mytest("Semisimple.jl","SScentralizer_reps(W,2)","5-element Vector{Vector{Int64}}:\n []\n [1]\n [2]\n [1, 2]\n [1, 5]")
end
@testset "Sscoset.jl" begin
@test mytest("Sscoset.jl","WF=rootdatum(:u,6)","²A₅Φ₂")
@test mytest("Sscoset.jl","l=QuasiIsolatedRepresentatives(WF)","4-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <ζ₄,1,1,1,1,ζ₄³>\n <ζ₄,ζ₄,1,1,ζ₄³,ζ₄³>\n <ζ₄,ζ₄,ζ₄,ζ₄³,ζ₄³,ζ₄³>")
@test mytest("Sscoset.jl","centralizer.(Ref(WF),l)","4-element Vector{ExtendedCox{FiniteCoxeterGroup{Perm{Int16},Rational{Int64}}}}:\n Extended(C₃₍₃₂₁₎)\n B₂Φ₁\n (A₁A₁)₍₁₃₎×A₁₍₂₎\n ²A₃₍₃₁₂₎")
@test mytest("Sscoset.jl","is_isolated.(Ref(WF),l)","4-element BitVector:\n 1\n 0\n 1\n 1")
@test mytest("Sscoset.jl","WF=rootdatum(:u,6)","²A₅Φ₂")
@test mytest("Sscoset.jl","s=SS(Group(WF),[1//4,0,0,0,0,3//4])","SemisimpleElement{Root1}: <ζ₄,1,1,1,1,ζ₄³>")
@test mytest("Sscoset.jl","centralizer(WF,s)","B₂Φ₁")
@test mytest("Sscoset.jl","centralizer(WF,one(s))","Extended(C₃₍₃₂₁₎)")
@test mytest("Sscoset.jl","WF=rootdatum(Symbol(\"2E6sc\"))","²E₆")
@test mytest("Sscoset.jl","QuasiIsolatedRepresentatives(WF)","5-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <1,1,1,-1,1,1>\n <1,-1,ζ₄,1,ζ₄,1>\n <1,ζ₃²,1,ζ₃,1,1>\n <1,ζ₄³,1,-1,1,1>")
@test mytest("Sscoset.jl","QuasiIsolatedRepresentatives(WF,2)","2-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <1,ζ₃²,1,ζ₃,1,1>")
@test mytest("Sscoset.jl","QuasiIsolatedRepresentatives(WF,3)","4-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <1,1,1,-1,1,1>\n <1,-1,ζ₄,1,ζ₄,1>\n <1,ζ₄³,1,-1,1,1>")
@test mytest("Sscoset.jl","WF=rootdatum(:u,6)","²A₅Φ₂")
@test mytest("Sscoset.jl","l=QuasiIsolatedRepresentatives(WF)","4-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <ζ₄,1,1,1,1,ζ₄³>\n <ζ₄,ζ₄,1,1,ζ₄³,ζ₄³>\n <ζ₄,ζ₄,ζ₄,ζ₄³,ζ₄³,ζ₄³>")
@test mytest("Sscoset.jl","is_isolated.(Ref(WF),l)","4-element BitVector:\n 1\n 0\n 1\n 1")
end
@testset "Symbols.jl" begin
@test mytest("Symbols.jl","d=partition_tuples(3,2)","10-element Vector{Vector{Vector{Int64}}}:\n [[1, 1, 1], []]\n [[1, 1], [1]]\n [[1], [1, 1]]\n [[], [1, 1, 1]]\n [[2, 1], []]\n [[1], [2]]\n [[2], [1]]\n [[], [2, 1]]\n [[3], []]\n [[], [3]]")
@test mytest("Symbols.jl","PartitionTupleToString.(d)","10-element Vector{String}:\n \"111.\"\n \"11.1\"\n \"1.11\"\n \".111\"\n \"21.\"\n \"1.2\"\n \"2.1\"\n \".21\"\n \"3.\"\n \".3\"")
@test mytest("Symbols.jl","shiftβ([2,3],2)","4-element Vector{Int64}:\n 0\n 1\n 4\n 5")
@test mytest("Symbols.jl","shiftβ([0,1,4,5],-2)","2-element Vector{Int64}:\n 2\n 3")
@test mytest("Symbols.jl","βset([3,3,1])","3-element Vector{Int64}:\n 1\n 4\n 5")
@test mytest("Symbols.jl","partβ([0,4,5])","2-element Vector{Int64}:\n 3\n 3")
@test mytest("Symbols.jl","symbol_partition_tuple([[1,2],[1]],1)","2-element Vector{Vector{Int64}}:\n [2, 2]\n [1]")
@test mytest("Symbols.jl","symbol_partition_tuple([[1,2],[1]],0)","2-element Vector{Vector{Int64}}:\n [2, 2]\n [0, 2]")
@test mytest("Symbols.jl","symbol_partition_tuple([[1,2],[1]],-1)","2-element Vector{Vector{Int64}}:\n [2, 2]\n [0, 1, 3]")
@test mytest("Symbols.jl","ranksymbol([[1,5,6],[1,2]])","11")
@test mytest("Symbols.jl","valuation_gendeg_symbol([[1,5,6],[1,2]])","13")
@test mytest("Symbols.jl","degree_gendeg_symbol([[1,5,6],[1,2]])","91")
@test mytest("Symbols.jl","defectsymbol([[1,5,6],[1,2]])","1")
@test mytest("Symbols.jl","degree_fegsymbol([[1,5,6],[1,2]])","88")
@test mytest("Symbols.jl","valuation_fegsymbol([[1,5,6],[1,2]])","16")
@test mytest("Symbols.jl","stringsymbol.(symbols(3,2,1))","14-element Vector{String}:\n \"(12,0,0)\"\n \"(02,1,0)\"\n \"(02,0,1)\"\n \"(012,12,01)\"\n \"(01,1,1)\"\n \"(012,01,12)\"\n \"(2,,)\"\n \"(01,2,0)\"\n \"(01,0,2)\"\n \"(1,012,012)\"\n \"(,02,01)\"\n \"(,01,02)\"\n \"(0,,012)\"\n \"(0,012,)\"")
@test mytest("Symbols.jl","stringsymbol.(symbols(3,3,0))","12-element Vector{String}:\n \"(1+)\"\n \"(1E(3))\"\n \"(1E(3,2))\"\n \"(01,12,02)\"\n \"(01,02,12)\"\n \"(012,012,123)\"\n \"(0,1,2)\"\n \"(0,2,1)\"\n \"(01,01,13)\"\n \"(0,0,3)\"\n \"(012,,)\"\n \"(012,012,)\"")
@test mytest("Symbols.jl","fegsymbol([[1,5,6],[1,2]])","q¹⁶Φ₅Φ₇Φ₈Φ₉Φ₁₀Φ₁₁Φ₁₄Φ₁₆Φ₁₈Φ₂₀Φ₂₂")
@test mytest("Symbols.jl","Symbols.gendeg_symbol([[1,2],[1,5,6]])","q¹³Φ₅Φ₆Φ₇Φ₈²Φ₉Φ₁₀Φ₁₁Φ₁₄Φ₁₆Φ₁₈Φ₂₀Φ₂₂/2")
@test mytest("Symbols.jl","tableaux([[2,1],[1]])","8-element Vector{Vector{Vector{Vector{Int64}}}}:\n [[[1, 2], [3]], [[4]]]\n [[[1, 2], [4]], [[3]]]\n [[[1, 3], [2]], [[4]]]\n [[[1, 3], [4]], [[2]]]\n [[[1, 4], [2]], [[3]]]\n [[[1, 4], [3]], [[2]]]\n [[[2, 3], [4]], [[1]]]\n [[[2, 4], [3]], [[1]]]")
@test mytest("Symbols.jl","tableaux([2,2])","2-element Vector{Vector{Vector{Int64}}}:\n [[1, 2], [3, 4]]\n [[1, 3], [2, 4]]")
end
@testset "Uch.jl" begin
@test mytest("Uch.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Uch.jl","uc=UnipotentCharacters(W)","UnipotentCharacters(G₂)\n      γ│   Deg(γ)  Feg Fr(γ)    label\n───────┼──────────────────────────────\nφ₁‚₀   │        1    1     1\nφ₁‚₆   │       q⁶   q⁶     1\nφ′₁‚₃  │  qΦ₃Φ₆/3   q³     1    (1,ρ)\nφ″₁‚₃  │  qΦ₃Φ₆/3   q³     1   (g₃,1)\nφ₂‚₁   │ qΦ₂²Φ₃/6  qΦ₈     1    (1,1)\nφ₂‚₂   │ qΦ₂²Φ₆/2 q²Φ₄     1   (g₂,1)\nG₂[-1] │ qΦ₁²Φ₃/2    0    -1   (g₂,ε)\nG₂[1]  │ qΦ₁²Φ₆/6    0     1    (1,ε)\nG₂[ζ₃] │qΦ₁²Φ₂²/3    0    ζ₃  (g₃,ζ₃)\nG₂[ζ₃²]│qΦ₁²Φ₂²/3    0   ζ₃² (g₃,ζ₃²)")
@test mytest("Uch.jl","uc.families[1]","Family(D(𝔖 ₃),[5, 6, 4, 3, 8, 7, 9, 10])\nDrinfeld double of 𝔖 ₃, Lusztig′s version\n   label│eigen\n────────┼─────────────────────────────────────────────\n(1,1)   │    1 1/6  1/2  1/3  1/3  1/6  1/2  1/3  1/3\n(g₂,1)  │    1 1/2  1/2    0    0 -1/2 -1/2    0    0\n(g₃,1)  │    1 1/3    0  2/3 -1/3  1/3    0 -1/3 -1/3\n(1,ρ)   │    1 1/3    0 -1/3  2/3  1/3    0 -1/3 -1/3\n(1,ε)   │    1 1/6 -1/2  1/3  1/3  1/6 -1/2  1/3  1/3\n(g₂,ε)  │   -1 1/2 -1/2    0    0 -1/2  1/2    0    0\n(g₃,ζ₃) │   ζ₃ 1/3    0 -1/3 -1/3  1/3    0  2/3 -1/3\n(g₃,ζ₃²)│  ζ₃² 1/3    0 -1/3 -1/3  1/3    0 -1/3  2/3")
@test mytest("Uch.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Uch.jl","T=spets(reflection_subgroup(W,Int[]),W(1,2))","G₂₍₎=Φ₆")
@test mytest("Uch.jl","u=UniChar(T,1)","[G₂₍₎=Φ₆]:<Id>")
@test mytest("Uch.jl","LusztigInduce(W,u)","[G₂]:<φ₁‚₀>+<φ₁‚₆>-<φ₂‚₁>+<G₂[-1]>+<G₂[ζ₃]>+<G₂[ζ₃²]>")
@test mytest("Uch.jl","v=DLChar(W,[1,2])","[G₂]:<φ₁‚₀>+<φ₁‚₆>-<φ₂‚₁>+<G₂[-1]>+<G₂[ζ₃]>+<G₂[ζ₃²]>")
@test mytest("Uch.jl","degree(v)","Pol{Int64}: q⁶+q⁵-q⁴-2q³-q²+q+1")
@test mytest("Uch.jl","v*v","6")
@test mytest("Uch.jl","UnipotentCharacters(ComplexReflectionGroup(4))","UnipotentCharacters(G₄)\n    γ│           Deg(γ)    Feg Fr(γ)   label\n─────┼───────────────────────────────────────\nφ₁‚₀ │                1      1     1\nφ₁‚₄ │ -√-3q⁴Φ″₃Φ₄Φ″₆/6     q⁴     1  1∧-ζ₃²\nφ₁‚₈ │  √-3q⁴Φ′₃Φ₄Φ′₆/6     q⁸     1  -1∧ζ₃²\nφ₂‚₅ │        q⁴Φ₂²Φ₆/2   q⁵Φ₄     1   1∧ζ₃²\nφ₂‚₃ │-ζ₃√-3qΦ″₃Φ₄Φ′₆/3   q³Φ₄     1   1∧ζ₃²\nφ₂‚₁ │ζ₃²√-3qΦ′₃Φ₄Φ″₆/3    qΦ₄     1    1∧ζ₃\nφ₃‚₂ │           q²Φ₃Φ₆ q²Φ₃Φ₆     1\nZ₃:2 │    -√-3qΦ₁Φ₂Φ₄/3      0   ζ₃²  ζ₃∧ζ₃²\nZ₃:11│   -√-3q⁴Φ₁Φ₂Φ₄/3      0   ζ₃²  ζ₃∧-ζ₃\nG₄   │       -q⁴Φ₁²Φ₃/2      0    -1 -ζ₃²∧-1")
@test mytest("Uch.jl","W=coxgroup(:Bsym,2)","Bsym₂")
@test mytest("Uch.jl","WF=spets(W,Perm(1,2))","²Bsym₂")
@test mytest("Uch.jl","uc=UnipotentCharacters(WF)","UnipotentCharacters(²Bsym₂)\n       γ│   Deg(γ)   Feg Fr(γ) label\n────────┼────────────────────────────\n2       │        1     1     1\n11      │       q⁴    q⁴     1\n²B₂[1,3]│√2qΦ₁Φ₂/2 qΦ₁Φ₂   ζ₈³     1\n²B₂[1,5]│√2qΦ₁Φ₂/2     0   ζ₈⁵     2")
@test mytest("Uch.jl","uc.families","3-element Vector{Family}:\n Family(C₁,[1])\n Family(C₁,[2])\n Family(?4,3:4)")
@test mytest("Uch.jl","uc.families[3]","Family(?4,3:4)\nlabel│eigen    1     2\n─────┼─────────────────\n1    │  ζ₈³ √2/2 -√2/2\n2    │  -ζ₈ √2/2  √2/2")
@test mytest("Uch.jl","uc=UnipotentCharacters(coxgroup(:G,2));","nothing")
@test mytest("Uch.jl","charnames(uc;limit=true)","10-element Vector{String}:\n \"φ₁‚₀\"\n \"φ₁‚₆\"\n \"φ′₁‚₃\"\n \"φ″₁‚₃\"\n \"φ₂‚₁\"\n \"φ₂‚₂\"\n \"G₂[-1]\"\n \"G₂[1]\"\n \"G₂[ζ₃]\"\n \"G₂[ζ₃²]\"")
@test mytest("Uch.jl","charnames(uc;TeX=true)","10-element Vector{String}:\n \"\\\\phi_{1,0}\"\n \"\\\\phi_{1,6}\"\n \"\\\\phi_{1,3}'\"\n \"\\\\phi_{1,3}''\"\n \"\\\\phi_{2,1}\"\n \"\\\\phi_{2,2}\"\n \"G_2[-1]\"\n \"G_2[1]\"\n \"G_2[\\\\zeta_3]\"\n \"G_2[\\\\zeta_3^2]\"")
@test mytest("Uch.jl","W=coxgroup(:B,2)","B₂")
@test mytest("Uch.jl","uc=UnipotentCharacters(W)","UnipotentCharacters(B₂)\n  γ│Deg(γ) Feg Fr(γ) label\n───┼───────────────────────\n11.│ qΦ₄/2  q²     1   +,-\n1.1│qΦ₂²/2 qΦ₄     1   +,+\n.11│    q⁴  q⁴     1\n2. │     1   1     1\n.2 │ qΦ₄/2  q²     1   -,+\nB₂ │qΦ₁²/2   0    -1   -,-")
@test mytest("Uch.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Uch.jl","uc=UnipotentCharacters(W);","nothing")
@test mytest("Uch.jl","degrees(uc)","10-element Vector{Pol{Rational{Int64}}}:\n 1//1\n (1//1)q⁶\n (1//3)q⁵+(1//3)q³+(1//3)q\n (1//3)q⁵+(1//3)q³+(1//3)q\n (1//6)q⁵+(1//2)q⁴+(2//3)q³+(1//2)q²+(1//6)q\n (1//2)q⁵+(1//2)q⁴+(1//2)q²+(1//2)q\n (1//2)q⁵+(-1//2)q⁴+(-1//2)q²+(1//2)q\n (1//6)q⁵+(-1//2)q⁴+(2//3)q³+(-1//2)q²+(1//6)q\n (1//3)q⁵+(-2//3)q³+(1//3)q\n (1//3)q⁵+(-2//3)q³+(1//3)q")
@test mytest("Uch.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Uch.jl","CycPolUnipotentDegrees(W)","10-element Vector{CycPol{Rational{Int64}}}:\n 1\n q⁶\n qΦ₃Φ₆/3\n qΦ₃Φ₆/3\n qΦ₂²Φ₃/6\n qΦ₂²Φ₆/2\n qΦ₁²Φ₃/2\n qΦ₁²Φ₆/6\n qΦ₁²Φ₂²/3\n qΦ₁²Φ₂²/3")
@test mytest("Uch.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Uch.jl","u=UniChar(W,7)","[G₂]:<G₂[-1]>")
@test mytest("Uch.jl","v=UniChar(W,\"G2[E3]\")","[G₂]:<G₂[ζ₃]>")
@test mytest("Uch.jl","w=UniChar(W,[1,0,0,-1,0,0,2,0,0,1])","[G₂]:<φ₁‚₀>-<φ″₁‚₃>+2<G₂[-1]>+<G₂[ζ₃²]>")
@test mytest("Uch.jl","w-2u","[G₂]:<φ₁‚₀>-<φ″₁‚₃>+<G₂[ζ₃²]>")
@test mytest("Uch.jl","w*w","7")
@test mytest("Uch.jl","degree(w)","Pol{Int64}: q⁵-q⁴-q³-q²+q+1")
@test mytest("Uch.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Uch.jl","WF=spets(W)","G₂")
@test mytest("Uch.jl","T=subspets(WF,Int[],W(1))","G₂₍₎=Φ₁Φ₂")
@test mytest("Uch.jl","u=UniChar(T,1)","[G₂₍₎=Φ₁Φ₂]:<Id>")
@test mytest("Uch.jl","LusztigInduce(WF,u)","[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>")
@test mytest("Uch.jl","DLChar(W,W(1))","[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>")
@test mytest("Uch.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Uch.jl","WF=spets(W)","G₂")
@test mytest("Uch.jl","T=subspets(WF,Int[],W(1))","G₂₍₎=Φ₁Φ₂")
@test mytest("Uch.jl","u=DLChar(W,W(1))","[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>")
@test mytest("Uch.jl","LusztigRestrict(T,u)","[G₂₍₎=Φ₁Φ₂]:4<Id>")
@test mytest("Uch.jl","T=subspets(WF,Int[],W(2))","G₂₍₎=Φ₁Φ₂")
@test mytest("Uch.jl","LusztigRestrict(T,u)","[G₂₍₎=Φ₁Φ₂]:0")
@test mytest("Uch.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Uch.jl","DLChar(W,3)","[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>")
@test mytest("Uch.jl","DLChar(W,W(1))","[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>")
@test mytest("Uch.jl","DLChar(W,[1])","[G₂]:<φ₁‚₀>-<φ₁‚₆>-<φ′₁‚₃>+<φ″₁‚₃>")
@test mytest("Uch.jl","DLChar(W,[1,2])","[G₂]:<φ₁‚₀>+<φ₁‚₆>-<φ₂‚₁>+<G₂[-1]>+<G₂[ζ₃]>+<G₂[ζ₃²]>")
@test mytest("Uch.jl","W=coxgroup(:B,2)","B₂")
@test mytest("Uch.jl","almostChar(W,3)","[B₂]:<.11>")
@test mytest("Uch.jl","almostChar(W,1)","[B₂]:1//2<11.>+1//2<1.1>-1//2<.2>-1//2<B₂>")
@test mytest("Uch.jl","W=coxgroup(:A,2)","A₂")
@test mytest("Uch.jl","H=hecke(W,Pol(:q))","hecke(A₂,q)")
@test mytest("Uch.jl","T=Tbasis(H);","nothing")
@test mytest("Uch.jl","DLLefschetz(T(1,2))","[A₂]:<111>-q<21>+q²<3>")
@test mytest("Uch.jl","DLLefschetz((T(1)+T())*(T(2)+T()))","[A₂]:q<21>+(q²+2q+1)<3>")
@test mytest("Uch.jl","H=hecke(spets(W,Perm(1,2)),Pol(:q)^2)","hecke(²A₂,q²)")
@test mytest("Uch.jl","T=Tbasis(H);DLLefschetz(T(1))","[²A₂]:-<11>-q<²A₂>+q²<2>")
@test mytest("Uch.jl","WF=rootdatum(\"3D4\")","³D₄")
@test mytest("Uch.jl","on_unipotents(Group(WF),WF.phi)","(1,7,2)(8,12,9)")
@test mytest("Uch.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Uch.jl","WF=spets(W,Perm(1,2,4))","³D₄")
@test mytest("Uch.jl","u=UniChar(W,2)","[D₄]:<11->")
@test mytest("Uch.jl","Frobenius(WF)(u)","[D₄]:<.211>")
@test mytest("Uch.jl","Frobenius(WF)(u,-1)","[D₄]:<11+>")
@test mytest("Uch.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Uch.jl","cuspidal(UnipotentCharacters(W))","1-element Vector{Int64}:\n 14")
@test mytest("Uch.jl","cuspidal(UnipotentCharacters(W),6)","8-element Vector{Int64}:\n  1\n  2\n  6\n  7\n  8\n  9\n 10\n 12")
@test mytest("Uch.jl","cuspidal(UnipotentCharacters(ComplexReflectionGroup(4)),3)","4-element Vector{Int64}:\n  3\n  6\n  7\n 10")
@test mytest("Uch.jl","cuspidal_data(coxgroup(:F,4),1)","9-element Vector{NamedTuple{(:levi, :cuspidal, :d), Tuple{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}, Int64, Root1}}}:\n (levi = F₄, cuspidal = 31, d = 1)\n (levi = F₄, cuspidal = 32, d = 1)\n (levi = F₄, cuspidal = 33, d = 1)\n (levi = F₄, cuspidal = 34, d = 1)\n (levi = F₄, cuspidal = 35, d = 1)\n (levi = F₄, cuspidal = 36, d = 1)\n (levi = F₄, cuspidal = 37, d = 1)\n (levi = F₄₍₃₂₎=B₂₍₂₁₎Φ₁², cuspidal = 6, d = 1)\n (levi = F₄₍₎=Φ₁⁴, cuspidal = 1, d = 1)")
@test mytest("Uch.jl","cuspidal_data(ComplexReflectionGroup(4),3)","5-element Vector{NamedTuple{(:levi, :cuspidal, :d), Tuple{Spets{PRSG{Cyc{Rational{Int64}}, Int16}}, Int64, Root1}}}:\n (levi = G₄, cuspidal = 3, d = ζ₃)\n (levi = G₄, cuspidal = 6, d = ζ₃)\n (levi = G₄, cuspidal = 7, d = ζ₃)\n (levi = G₄, cuspidal = 10, d = ζ₃)\n (levi = G₄₍₎=Φ₁Φ′₃, cuspidal = 1, d = ζ₃)")
end
@testset "Ucl.jl" begin
@test mytest("Ucl.jl","UnipotentClasses(rootdatum(:sl,4))","UnipotentClasses(A₃)\n1111<211<22<31<4\n   u│D-R dBu B-C          C(u) A₃(A₃₍₎=Φ₁³) A₁(A₃₍₁₃₎=A₁×A₁Φ₁)/-1 .(A₃)/ζ₄\n────┼──────────────────────────────────────────────────────────────────────\n4   │222   0 222         q³.Z₄          1:4                  -1:2    ζ₄:Id\n31  │202   1 22.    q⁴.A₁₍₎=Φ₁        Id:31\n22  │020   2 2.2      q⁴.A₁.Z₂         2:22                 11:11\n211 │101   3 2.. q⁵.A₂₍₁₎=A₁Φ₁       Id:211\n1111│000   6 ...            A₃      Id:1111\n\n   u│.(A₃)/-ζ₄\n────┼──────────\n4   │   -ζ₄:Id\n31  │\n22  │\n211 │\n1111│")
@test mytest("Ucl.jl","UnipotentClasses(coxgroup(:A,3))","UnipotentClasses(A₃)\n1111<211<22<31<4\n   u│D-R dBu B-C          C(u) A₃(A₃₍₎=Φ₁³)\n────┼───────────────────────────────────────\n4   │222   0 222            q³         Id:4\n31  │202   1 22.    q⁴.A₁₍₎=Φ₁        Id:31\n22  │020   2 2.2         q⁴.A₁        Id:22\n211 │101   3 2.. q⁵.A₂₍₁₎=A₁Φ₁       Id:211\n1111│000   6 ...            A₃      Id:1111")
@test mytest("Ucl.jl","UnipotentClasses(coxgroup(:G,2))","UnipotentClasses(G₂)\n1<A₁<Ã₁<G₂(a₁)<G₂\n     u│D-R dBu B-C  C(u)    G₂(G₂₍₎=Φ₁²)  .(G₂)\n──────┼─────────────────────────────────────────\nG₂    │ 22   0  22    q²         Id:φ₁‚₀\nG₂(a₁)│ 20   1  20 q⁴.S₃ 21:φ′₁‚₃ 3:φ₂‚₁ 111:Id\nÃ₁    │ 01   2  .2 q³.A₁         Id:φ₂‚₂\nA₁    │ 10   3  2. q⁵.A₁        Id:φ″₁‚₃\n1     │ 00   6  ..    G₂         Id:φ₁‚₆")
@test mytest("Ucl.jl","UnipotentClasses(coxgroup(:G,2),3)","UnipotentClasses(G₂)\n1<A₁,(Ã₁)₃<Ã₁<G₂(a₁)<G₂\n     u│dBu B-C  C(u) G₂(G₂₍₎=Φ₁²) .(G₂) .(G₂)  .(G₂)\n──────┼──────────────────────────────────────────────\nG₂    │  0  22 q².Z₃       1:φ₁‚₀       ζ₃:Id ζ₃²:Id\nG₂(a₁)│  1  20 q⁴.Z₂       2:φ₂‚₁ 11:Id\nÃ₁    │  2  .2    q⁶      Id:φ₂‚₂\nA₁    │  3  2. q⁵.A₁     Id:φ″₁‚₃\n(Ã₁)₃ │  3  ?? q⁵.A₁     Id:φ′₁‚₃\n1     │  6  ..    G₂      Id:φ₁‚₆")
@test mytest("Ucl.jl","uc=UnipotentClasses(coxgroup(:G,2));","nothing")
@test mytest("Ucl.jl","t=ICCTable(uc)","Coefficients of Xᵪ on Yᵩ for G₂\n      │G₂ G₂(a₁)⁽²¹⁾ G₂(a₁) Ã₁ A₁  1\n──────┼──────────────────────────────\nXφ₁‚₀ │ 1          0      1  1  1  1\nXφ′₁‚₃│ 0          1      0  1  0 q²\nXφ₂‚₁ │ 0          0      1  1  1 Φ₈\nXφ₂‚₂ │ 0          0      0  1  1 Φ₄\nXφ″₁‚₃│ 0          0      0  0  1  1\nXφ₁‚₆ │ 0          0      0  0  0  1")
@test mytest("Ucl.jl","W=coxgroup(:F,4)","F₄")
@test mytest("Ucl.jl","H=reflection_subgroup(W,[1,3])","F₄₍₁₃₎=A₁×Ã₁Φ₁²")
@test mytest("Ucl.jl","Ucl.induced_linear_form(W,H,[2,2])","4-element Vector{Int64}:\n 0\n 1\n 0\n 0")
@test mytest("Ucl.jl","uc=UnipotentClasses(W);","nothing")
@test mytest("Ucl.jl","uc.classes[4].prop","Dict{Symbol, Any} with 7 entries:\n  :dynkin     => [0, 1, 0, 0]\n  :dimred     => 6\n  :red        => A₁×A₁\n  :Au         => .\n  :balacarter => [1, 3]\n  :dimunip    => 18\n  :AuAction   => A₁×A₁")
@test mytest("Ucl.jl","uc.classes[4]","UnipotentClass(A₁+Ã₁)")
@test mytest("Ucl.jl","W=rootdatum(:sl,4)","A₃")
@test mytest("Ucl.jl","uc=UnipotentClasses(W);","nothing")
@test mytest("Ucl.jl","uc.classes","5-element Vector{Gapjm.Ucl.UnipotentClass}:\n UnipotentClass(1111)\n UnipotentClass(211)\n UnipotentClass(22)\n UnipotentClass(31)\n UnipotentClass(4)")
@test mytest("Ucl.jl","t=ICCTable(uc)","Coefficients of Xᵪ on Yᵩ for A₃\n     │4 31 22 211 1111\n─────┼─────────────────\nX4   │1  1  1   1    1\nX31  │0  1  1  Φ₂   Φ₃\nX22  │0  0  1   1   Φ₄\nX211 │0  0  0   1   Φ₃\nX1111│0  0  0   0    1")
@test mytest("Ucl.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Ucl.jl","XTable(UnipotentClasses(W))","Values of character sheaves X̃ᵪ on local systems φ\n      X̃ᵪ|φ│   1 A₁ Ã₁ G₂(a₁)⁽¹¹¹⁾ G₂(a₁)⁽²¹⁾ G₂(a₁) G₂\n──────────┼────────────────────────────────────────────\nX_φ₁‚₀^G₂ │   1  1  1           0          0      1  1\nX_φ₁‚₆^G₂ │  q⁶  0  0           0          0      0  0\nX_φ′₁‚₃^G₂│  q³  0  q           0          q      0  0\nX_φ″₁‚₃^G₂│  q³ q³  0           0          0      0  0\nX_φ₂‚₁^G₂ │ qΦ₈  q  q           0          0      q  0\nX_φ₂‚₂^G₂ │q²Φ₄ q² q²           0          0      0  0\nX_Id^.    │   0  0  0          q²          0      0  0")
@test mytest("Ucl.jl","XTable(UnipotentClasses(W);classes=true)","Values of character sheaves X̃ᵪ on unipotent classes\n  X̃ᵪ|class│   1 A₁ Ã₁ G₂(a₁) G₂(a₁)₍₂₁₎ G₂(a₁)₍₃₎ G₂\n──────────┼──────────────────────────────────────────\nX_φ₁‚₀^G₂ │   1  1  1      1          1         1  1\nX_φ₁‚₆^G₂ │  q⁶  0  0      0          0         0  0\nX_φ′₁‚₃^G₂│  q³  0  q     2q          0        -q  0\nX_φ″₁‚₃^G₂│  q³ q³  0      0          0         0  0\nX_φ₂‚₁^G₂ │ qΦ₈  q  q      q          q         q  0\nX_φ₂‚₂^G₂ │q²Φ₄ q² q²      0          0         0  0\nX_Id^.    │   0  0  0     q²        -q²        q²  0")
@test mytest("Ucl.jl","XTable(UnipotentClasses(W,2))","Values of character sheaves X̃ᵪ on local systems φ\n      X̃ᵪ|φ│   1 A₁ Ã₁ G₂(a₁)⁽¹¹¹⁾ G₂(a₁)⁽²¹⁾ G₂(a₁) G₂⁽¹¹⁾ G₂\n──────────┼───────────────────────────────────────────────────\nX_φ₁‚₀^G₂ │   1  1  1           0          0      1      0  1\nX_φ₁‚₆^G₂ │  q⁶  0  0           0          0      0      0  0\nX_φ′₁‚₃^G₂│  q³  0  q           0          q      0      0  0\nX_φ″₁‚₃^G₂│  q³ q³  0           0          0      0      0  0\nX_φ₂‚₁^G₂ │ qΦ₈  q  q           0          0      q      0  0\nX_φ₂‚₂^G₂ │q²Φ₄ q² q²           0          0      0      0  0\nX_Id^.    │   0  0  0          q²          0      0      0  0\nX_Id^.    │   0  0  0           0          0      0      q  0")
@test mytest("Ucl.jl","XTable(UnipotentClasses(rootdatum(:sl,4)))","Values of character sheaves X̃ᵪ on local systems φ\n    X̃ᵪ|φ│1111 211 22⁽¹¹⁾ 22 31 4 4^(ζ₄) 4⁽⁻¹⁾ 4^(-ζ₄)\n────────┼─────────────────────────────────────────────\nX₁₁₁₁^A₃│  q⁶   0      0  0  0 0      0     0       0\nX₂₁₁^A₃ │q³Φ₃  q³      0  0  0 0      0     0       0\nX₂₂^A₃  │q²Φ₄  q²      0 q²  0 0      0     0       0\nX₃₁^A₃  │ qΦ₃ qΦ₂      0  q  q 0      0     0       0\nX₄^A₃   │   1   1      0  1  1 1      0     0       0\nX₁₁^A₁  │   0   0     q³  0  0 0      0     0       0\nX₂^A₁   │   0   0     q²  0  0 0      0     q       0\nX_Id^.  │   0   0      0  0  0 0   q³⁄₂     0       0\nX_Id^.  │   0   0      0  0  0 0      0     0    q³⁄₂")
@test mytest("Ucl.jl","t=Ucl.XTable(UnipotentClasses(coxgroup(:G,2));classes=true);","nothing")
@test mytest("Ucl.jl","CycPol.(t.cardClass)","7-element Vector{CycPol{Cyc{Rational{Int64}}}}:\n 1\n Φ₁Φ₂Φ₃Φ₆\n q²Φ₁Φ₂Φ₃Φ₆\n q²Φ₁²Φ₂²Φ₃Φ₆/6\n q²Φ₁²Φ₂²Φ₃Φ₆/2\n q²Φ₁²Φ₂²Φ₃Φ₆/3\n q⁴Φ₁²Φ₂²Φ₃Φ₆")
@test mytest("Ucl.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Ucl.jl","GreenTable(UnipotentClasses(W))","Values of Green functions Q_wF on local systems φ\n   Qᴵ_wF|φ│        1     A₁       Ã₁ G₂(a₁)⁽¹¹¹⁾ G₂(a₁)⁽²¹⁾ G₂(a₁) G₂\n──────────┼───────────────────────────────────────────────────────────\nQ_A₀^G₂   │  Φ₂²Φ₃Φ₆   Φ₂Φ₃ (2q+1)Φ₂           0          q   2q+1  1\nQ_Ã₁^G₂   │-Φ₁Φ₂Φ₃Φ₆  -Φ₁Φ₃       Φ₂           0          q      1  1\nQ_A₁^G₂   │-Φ₁Φ₂Φ₃Φ₆   Φ₂Φ₆      -Φ₁           0         -q      1  1\nQ_G₂^G₂   │ Φ₁²Φ₂²Φ₃ -Φ₁Φ₂²    -Φ₁Φ₂           0         -q     Φ₂  1\nQ_A₂^G₂   │ Φ₁²Φ₂²Φ₆  Φ₁²Φ₂    -Φ₁Φ₂           0          q    -Φ₁  1\nQ_A₁+Ã₁^G₂│  Φ₁²Φ₃Φ₆  -Φ₁Φ₆ (2q-1)Φ₁           0         -q  -2q+1  1\nQ_^.      │        0      0        0          q²          0      0  0")
@test mytest("Ucl.jl","GreenTable(UnipotentClasses(W);classes=true)","Values of Green functions Q_wF on unipotent classes\nQᴵ_wF|class│        1     A₁       Ã₁ G₂(a₁) G₂(a₁)₍₂₁₎ G₂(a₁)₍₃₎ G₂\n───────────┼─────────────────────────────────────────────────────────\nQ_A₀^G₂    │  Φ₂²Φ₃Φ₆   Φ₂Φ₃ (2q+1)Φ₂   4q+1       2q+1        Φ₂  1\nQ_Ã₁^G₂    │-Φ₁Φ₂Φ₃Φ₆  -Φ₁Φ₃       Φ₂   2q+1          1       -Φ₁  1\nQ_A₁^G₂    │-Φ₁Φ₂Φ₃Φ₆   Φ₂Φ₆      -Φ₁  -2q+1          1        Φ₂  1\nQ_G₂^G₂    │ Φ₁²Φ₂²Φ₃ -Φ₁Φ₂²    -Φ₁Φ₂    -Φ₁         Φ₂      2q+1  1\nQ_A₂^G₂    │ Φ₁²Φ₂²Φ₆  Φ₁²Φ₂    -Φ₁Φ₂     Φ₂        -Φ₁     -2q+1  1\nQ_A₁+Ã₁^G₂ │  Φ₁²Φ₃Φ₆  -Φ₁Φ₆ (2q-1)Φ₁  -4q+1      -2q+1       -Φ₁  1\nQ_^.       │        0      0        0     q²        -q²        q²  0")
@test mytest("Ucl.jl","GreenTable(UnipotentClasses(rootdatum(:sl,4)))","Values of Green functions Q_wF on local systems φ\n Qᴵ_wF|φ│     1111          211 22⁽¹¹⁾       22   31 4 4^(ζ₄) 4⁽⁻¹⁾ 4^(-ζ₄)\n────────┼───────────────────────────────────────────────────────────────────\nQ₁₁₁₁^A₃│  Φ₂²Φ₃Φ₄ (3q²+2q+1)Φ₂      0 (2q+1)Φ₂ 3q+1 1      0     0       0\nQ₂₁₁^A₃ │-Φ₁Φ₂Φ₃Φ₄   -q³+q²+q+1      0       Φ₂   Φ₂ 1      0     0       0\nQ₂₂^A₃  │  Φ₁²Φ₃Φ₄        -Φ₁Φ₄      0  2q²-q+1  -Φ₁ 1      0     0       0\nQ₃₁^A₃  │ Φ₁²Φ₂²Φ₄        -Φ₁Φ₂      0    -Φ₁Φ₂    1 1      0     0       0\nQ₄^A₃   │ -Φ₁³Φ₂Φ₃        Φ₁²Φ₂      0      -Φ₁  -Φ₁ 1      0     0       0\nQ₁₁^A₁  │        0            0   q²Φ₂        0    0 0      0     q       0\nQ₂^A₁   │        0            0  -q²Φ₁        0    0 0      0     q       0\nQ_^.    │        0            0      0        0    0 0   q³⁄₂     0       0\nQ_^.    │        0            0      0        0    0 0      0     0    q³⁄₂")
@test mytest("Ucl.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Ucl.jl","UnipotentValues(UnipotentClasses(W);classes=true)","Values of unipotent characters for G₂ on unipotent classes\n       │        1          A₁     Ã₁   G₂(a₁) G₂(a₁)₍₂₁₎ G₂(a₁)₍₃₎ G₂\n───────┼──────────────────────────────────────────────────────────────\nφ₁‚₀   │        1           1      1        1          1         1  1\nφ₁‚₆   │       q⁶           0      0        0          0         0  0\nφ′₁‚₃  │  qΦ₃Φ₆/3    -qΦ₁Φ₂/3      q (q+5)q/3     -qΦ₁/3     qΦ₁/3  0\nφ″₁‚₃  │  qΦ₃Φ₆/3  (2q²+1)q/3      0    qΦ₁/3     -qΦ₁/3  (q+2)q/3  0\nφ₂‚₁   │ qΦ₂²Φ₃/6 (2q+1)qΦ₂/6  qΦ₂/2 (q+5)q/6     -qΦ₁/6     qΦ₁/6  0\nφ₂‚₂   │ qΦ₂²Φ₆/2       qΦ₂/2  qΦ₂/2   -qΦ₁/2      qΦ₂/2    -qΦ₁/2  0\nG₂[-1] │ qΦ₁²Φ₃/2      -qΦ₁/2 -qΦ₁/2   -qΦ₁/2      qΦ₂/2    -qΦ₁/2  0\nG₂[1]  │ qΦ₁²Φ₆/6 (2q-1)qΦ₁/6 -qΦ₁/2 (q+5)q/6     -qΦ₁/6     qΦ₁/6  0\nG₂[ζ₃] │qΦ₁²Φ₂²/3    -qΦ₁Φ₂/3      0    qΦ₁/3     -qΦ₁/3  (q+2)q/3  0\nG₂[ζ₃²]│qΦ₁²Φ₂²/3    -qΦ₁Φ₂/3      0    qΦ₁/3     -qΦ₁/3  (q+2)q/3  0")
@test mytest("Ucl.jl","UnipotentValues(UnipotentClasses(W,3);classes=true)","Values of unipotent characters for G₂ on unipotent classes\n       │        1          A₁         Ã₁ G₂(a₁) G₂(a₁)₍₂₎    G₂       G₂_(ζ₃)\n───────┼──────────────────────────────────────────────────────────────────────\nφ₁‚₀   │        1           1          1      1         1     1             1\nφ₁‚₆   │       q⁶           0          0      0         0     0             0\nφ′₁‚₃  │  qΦ₃Φ₆/3    -qΦ₁Φ₂/3        q/3  qΦ₂/3    -qΦ₁/3 -2q/3           q/3\nφ″₁‚₃  │  qΦ₃Φ₆/3  (2q²+1)q/3        q/3  qΦ₂/3    -qΦ₁/3 -2q/3           q/3\nφ₂‚₁   │ qΦ₂²Φ₃/6 (2q+1)qΦ₂/6  (3q+1)q/6  qΦ₂/6    -qΦ₁/6  2q/3          -q/3\nφ₂‚₂   │ qΦ₂²Φ₆/2       qΦ₂/2      qΦ₂/2 -qΦ₁/2     qΦ₂/2     0             0\nG₂[-1] │ qΦ₁²Φ₃/2      -qΦ₁/2     -qΦ₁/2 -qΦ₁/2     qΦ₂/2     0             0\nG₂[1]  │ qΦ₁²Φ₆/6 (2q-1)qΦ₁/6 (-3q+1)q/6  qΦ₂/6    -qΦ₁/6  2q/3          -q/3\nG₂[ζ₃] │qΦ₁²Φ₂²/3    -qΦ₁Φ₂/3        q/3  qΦ₂/3    -qΦ₁/3   q/3 (-ζ₃+2ζ₃²)q/3\nG₂[ζ₃²]│qΦ₁²Φ₂²/3    -qΦ₁Φ₂/3        q/3  qΦ₂/3    -qΦ₁/3   q/3  (2ζ₃-ζ₃²)q/3\n\n       │     G₂_(ζ₃²)       (Ã₁)₃\n───────┼──────────────────────────\nφ₁‚₀   │            1           1\nφ₁‚₆   │            0           0\nφ′₁‚₃  │          q/3  (2q²+1)q/3\nφ″₁‚₃  │          q/3    -qΦ₁Φ₂/3\nφ₂‚₁   │         -q/3 (2q+1)qΦ₂/6\nφ₂‚₂   │            0       qΦ₂/2\nG₂[-1] │            0      -qΦ₁/2\nG₂[1]  │         -q/3 (2q-1)qΦ₁/6\nG₂[ζ₃] │ (2ζ₃-ζ₃²)q/3    -qΦ₁Φ₂/3\nG₂[ζ₃²]│(-ζ₃+2ζ₃²)q/3    -qΦ₁Φ₂/3")
@test mytest("Ucl.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Ucl.jl","special_pieces(UnipotentClasses(W))","3-element Vector{Vector{Int64}}:\n [1]\n [4, 3, 2]\n [5]")
@test mytest("Ucl.jl","special_pieces(UnipotentClasses(W,3))","3-element Vector{Vector{Int64}}:\n [1]\n [4, 3, 2, 6]\n [5]")
end
@testset "Urad.jl" begin
@test mytest("Urad.jl","W=coxgroup(:E,6)","E₆")
@test mytest("Urad.jl","U=UnipotentGroup(W)","UnipotentGroup(E₆)")
@test mytest("Urad.jl","U(2=>4)","u2(4)")
@test mytest("Urad.jl","U(2)^4","u2(4)")
@test mytest("Urad.jl","U(2=>4)*U(4=>5)","u2(4)u4(5)")
@test mytest("Urad.jl","U(2=>4,4=>5)","u2(4)u4(5)")
@test mytest("Urad.jl","U(4=>5,2=>4)","u2(4)u4(5)u8(-20)")
@test mytest("Urad.jl","W=coxgroup(:E,8);U=UnipotentGroup(W)","UnipotentGroup(E₈)")
@test mytest("Urad.jl","u=U(map(i->i=>Z(2)*Mvp(Symbol(\"x\",Char(i+0x2080))),1:8)...)","u1(x₁)u2(x₂)u3(x₃)u4(x₄)u5(x₅)u6(x₆)u7(x₇)u8(x₈)")
@test mytest("Urad.jl","u^32","()")
@test mytest("Urad.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Urad.jl","U=UnipotentGroup(W);@Mvp x,y","nothing")
@test mytest("Urad.jl","u=U(1=>x,3=>y)","u1(x)u3(y)")
@test mytest("Urad.jl","u^W(2,1)","u4(y)u5(x)")
@test mytest("Urad.jl","s=SemisimpleElement(W,[E(3),2])","SemisimpleElement{Cyc{Int64}}: <ζ₃,2>")
@test mytest("Urad.jl","u^s","u1(ζ₃x)u3(2ζ₃y)")
@test mytest("Urad.jl","u^U(2)","u1(x)u3(x+y)u4(-x-2y)u5(x+3y)u6(x²+3xy+3y²)")
@test mytest("Urad.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Urad.jl","U=UnipotentGroup(W)","UnipotentGroup(G₂)")
@test mytest("Urad.jl","U.specialPairs","10-element Vector{Vector{Int64}}:\n [1, 2, 3]\n [2, 3, 4]\n [2, 4, 5]\n [1, 5, 6]\n [3, 4, 6]\n [2, 1, 3]\n [3, 2, 4]\n [4, 2, 5]\n [5, 1, 6]\n [4, 3, 6]")
@test mytest("Urad.jl","U.N","10-element Vector{Int64}:\n  1\n  2\n  3\n  1\n  3\n -1\n -2\n -3\n -1\n -3")
@test mytest("Urad.jl","U.commutatorConstants","10-element Vector{Vector{Vector{Int64}}}:\n [[1, 1, 3, 1], [1, 2, 4, -1], [1, 3, 5, 1], [2, 3, 6, 2]]\n [[1, 1, 4, 2], [2, 1, 5, 3], [1, 2, 6, -3]]\n [[1, 1, 5, 3]]\n [[1, 1, 6, 1]]\n [[1, 1, 6, 3]]\n [[1, 1, 3, -1], [2, 1, 4, -1], [3, 1, 5, -1], [3, 2, 6, -1]]\n [[1, 1, 4, -2], [2, 1, 6, -3], [1, 2, 5, 3]]\n [[1, 1, 5, -3]]\n [[1, 1, 6, -1]]\n [[1, 1, 6, -3]]")
@test mytest("Urad.jl","U=UnipotentGroup(coxgroup(:G,2))","UnipotentGroup(G₂)")
@test mytest("Urad.jl","l=norm(U,[2=>4,1=>2])","6-element Vector{Pair{Int64, Int64}}:\n 1 => 2\n 2 => 4\n 3 => -8\n 4 => 32\n 5 => -128\n 6 => 512")
@test mytest("Urad.jl","norm(U,l,6:-1:1)","2-element Vector{Pair{Int64, Int64}}:\n 2 => 4\n 1 => 2")
@test mytest("Urad.jl","U=UnipotentGroup(coxgroup(:G,2))","UnipotentGroup(G₂)")
@test mytest("Urad.jl","U(2)","u2(1)")
@test mytest("Urad.jl","U(1=>2,2=>4)","u1(2)u2(4)")
@test mytest("Urad.jl","U(2=>4,1=>2)","u1(2)u2(4)u3(-8)u4(32)u5(-128)u6(512)")
@test mytest("Urad.jl","U=UnipotentGroup(coxgroup(:G,2));@Mvp x,y","nothing")
@test mytest("Urad.jl","u=U(2=>y,1=>x)","u1(x)u2(y)u3(-xy)u4(xy²)u5(-xy³)u6(2x²y³)")
@test mytest("Urad.jl","abelianpart(u)","u1(x)u2(y)")
@test mytest("Urad.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Urad.jl","U=UnipotentGroup(W);@Mvp x,y","nothing")
@test mytest("Urad.jl","u=U(2=>y,1=>x)","u1(x)u2(y)u3(-xy)u4(xy²)u5(-xy³)u6(2x²y³)")
@test mytest("Urad.jl","decompose(W(1),u)","2-element Vector{UnipotentElement{Mvp{Int64, Int64}}}:\n u1(x)\n u2(y)u3(-xy)u4(xy²)u5(-xy³)u6(2x²y³)")
@test mytest("Urad.jl","decompose(W(2),u)","2-element Vector{UnipotentElement{Mvp{Int64, Int64}}}:\n u2(y)\n u1(x)")
end
@testset "Weyl.jl" begin
@test mytest("Weyl.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Weyl.jl","cartan(W)","4×4 Matrix{Int64}:\n  2   0  -1   0\n  0   2  -1   0\n -1  -1   2  -1\n  0   0  -1   2")
@test mytest("Weyl.jl","W=coxgroup(:A,2)*coxgroup(:B,2)","A₂×B₂")
@test mytest("Weyl.jl","cartan(W)","4×4 Matrix{Int64}:\n  2  -1   0   0\n -1   2   0   0\n  0   0   2  -2\n  0   0  -1   2")
@test mytest("Weyl.jl","W=coxgroup(:D,4)","D₄")
@test mytest("Weyl.jl","p=W(1,3,2,1,3)","(1,14,13,2)(3,17,8,18)(4,12)(5,20,6,15)(7,10,11,9)(16,24)(19,22,23,21)")
@test mytest("Weyl.jl","word(W,p)","5-element Vector{Int64}:\n 1\n 3\n 1\n 2\n 3")
@test mytest("Weyl.jl","cartan([1 3;3 1])","2×2 Matrix{Cyc{Int64}}:\n  2  -1\n -1   2")
@test mytest("Weyl.jl","cartan(:F,4)","4×4 Matrix{Int64}:\n  2  -1   0   0\n -1   2  -1   0\n  0  -2   2  -1\n  0   0  -1   2")
@test mytest("Weyl.jl","cartan(:I,2,5)","2×2 Matrix{Cyc{Int64}}:\n       2  ζ₅²+ζ₅³\n ζ₅²+ζ₅³        2")
@test mytest("Weyl.jl","cartan(:Bsym,2)","2×2 Matrix{Cyc{Int64}}:\n   2  -√2\n -√2    2")
@test mytest("Weyl.jl","Weyl.two_tree(cartan(:A,4))","4-element Vector{Int64}:\n 1\n 2\n 3\n 4")
@test mytest("Weyl.jl","Weyl.two_tree(cartan(:E,8))","(4, [2], [3, 1], [5, 6, 7, 8])")
@test mytest("Weyl.jl","W=coxgroup(:A,3)","A₃")
@test mytest("Weyl.jl","inversions(W,W(1,2,1))","3-element Vector{Int64}:\n 1\n 2\n 4")
@test mytest("Weyl.jl","inversions(W,[2,1,2])","3-element Vector{Int16}:\n 2\n 4\n 1")
@test mytest("Weyl.jl","W=coxgroup(:A,2)","A₂")
@test mytest("Weyl.jl","map(N->with_inversions(W,N),combinations(1:nref(W)))","8-element Vector{Union{Nothing, Perm{Int16}}}:\n ()\n (1,4)(2,3)(5,6)\n (1,3)(2,5)(4,6)\n nothing\n nothing\n (1,6,2)(3,5,4)\n (1,2,6)(3,4,5)\n (1,5)(2,4)(3,6)")
@test mytest("Weyl.jl","W=coxgroup(:E,6)","E₆")
@test mytest("Weyl.jl","R=reflection_subgroup(W,[20,30,19,22])","E₆₍₁₉‚₁‚₉‚₂₀₎=A₄₍₃₁₂₄₎Φ₁²")
@test mytest("Weyl.jl","p=standard_parabolic(W,R)","(1,4,49,12,10)(2,54,62,3,19)(5,17,43,60,9)(6,21,34,36,20)(7,24,45,41,53)(8,65,50,15,22)(11,32,31,27,28)(13,48,46,37,40)(14,51,58,44,29)(16,23,35,33,30)(18,26,39,55,38)(42,57,70,72,56)(47,68,67,63,64)(52,59,71,69,66)")
@test mytest("Weyl.jl","reflection_subgroup(W,[20,30,19,22].^p)","E₆₍₂₄₅₆₎=A₄Φ₁²")
@test mytest("Weyl.jl","R=reflection_subgroup(W,[1,2,3,5,6,35])","E₆₍₁‚₃‚₂‚₃₅‚₅‚₆₎=A₂₍₁₃₎×A₂₍₂₆₎×A₂₍₄₅₎")
@test mytest("Weyl.jl","standard_parabolic(W,R)","nothing")
@test mytest("Weyl.jl","W=coxgroup(:E,8)","E₈")
@test mytest("Weyl.jl","badprimes(W)","3-element Vector{Int64}:\n 5\n 2\n 3")
@test mytest("Weyl.jl","W=coxgroup(:A,2)","A₂")
@test mytest("Weyl.jl","w=longest(W)","(1,5)(2,4)(3,6)")
@test mytest("Weyl.jl","describe_involution(W,w)","1-element Vector{Int64}:\n 3")
@test mytest("Weyl.jl","w==longest(reflection_subgroup(W,[3]))","true")
@test mytest("Weyl.jl","torus(3)","Φ₁³")
@test mytest("Weyl.jl","W=coxgroup(:G,2)","G₂")
@test mytest("Weyl.jl","Diagram(W)","O⇛ O\n1  2")
@test mytest("Weyl.jl","H=reflection_subgroup(W,[2,6])","G₂₍₂₆₎=Ã₁×A₁")
@test mytest("Weyl.jl","Diagram(H)","O\n1\nO\n2")
@test mytest("Weyl.jl","inclusion(H)","4-element Vector{Int64}:\n  2\n  6\n  8\n 12")
@test mytest("Weyl.jl","restriction(H)","12-element Vector{Int64}:\n 0\n 1\n 0\n 0\n 0\n 2\n 0\n 3\n 0\n 0\n 0\n 4")
@test mytest("Weyl.jl","word(W,H(2))","5-element Vector{Int64}:\n 1\n 2\n 1\n 2\n 1")
@test mytest("Weyl.jl","elH=word.(Ref(H),elements(H))","4-element Vector{Vector{Int64}}:\n []\n [2]\n [1]\n [1, 2]")
@test mytest("Weyl.jl","elW=word.(Ref(W),elements(H))","4-element Vector{Vector{Int64}}:\n []\n [1, 2, 1, 2, 1]\n [2]\n [1, 2, 1, 2, 1, 2]")
@test mytest("Weyl.jl","map(w->H(w...),elH)==map(w->W(w...),elW)","true")
end
@testset "cheviesupport.jl" begin
@test mytest("cheviesupport.jl","CycPol([3,-5,6,3//7])","3q⁻⁵Φ₆(q-ζ₇³)")
end
@testset "dSeries.jl" begin
@test mytest("dSeries.jl","W=rootdatum(\"3D4\")","³D₄")
@test mytest("dSeries.jl","l=cuspidal_data(W,3)","2-element Vector{NamedTuple{(:levi, :cuspidal, :d), Tuple{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}, Int64, Root1}}}:\n (levi = ³D₄, cuspidal = 8, d = ζ₃)\n (levi = ³D₄₍₎=Φ₃², cuspidal = 1, d = ζ₃)")
@test mytest("dSeries.jl","Series(W,l[2]...)","ζ₃-series R^³D₄_{³D₄₍₎=Φ₃²}(λ==Id)  H_G(L,λ)==hecke(G₄,Vector{Mvp{Cyc{Int64}, Int64}}[[ζ₃q², ζ₃, ζ₃q]])\n │    γᵩ    φ  ε family #\n─┼────────────────────────\n1│  φ₁‚₀ φ₁‚₀  1        1\n2│  φ₁‚₆ φ₁‚₄  1        2\n3│  φ₂‚₂ φ₁‚₈ -1        5\n6│ φ″₁‚₃ φ₂‚₅  1        4\n5│ φ′₁‚₃ φ₂‚₃ -1        3\n7│  φ₂‚₁ φ₂‚₁ -1        5\n4│³D₄[1] φ₃‚₂  1        5")
@test mytest("dSeries.jl","W=ComplexReflectionGroup(4)","G₄")
@test mytest("dSeries.jl","l=cuspidal_data(W,3)","5-element Vector{NamedTuple{(:levi, :cuspidal, :d), Tuple{Spets{PRSG{Cyc{Rational{Int64}}, Int16}}, Int64, Root1}}}:\n (levi = G₄, cuspidal = 3, d = ζ₃)\n (levi = G₄, cuspidal = 6, d = ζ₃)\n (levi = G₄, cuspidal = 7, d = ζ₃)\n (levi = G₄, cuspidal = 10, d = ζ₃)\n (levi = G₄₍₎=Φ₁Φ′₃, cuspidal = 1, d = ζ₃)")
@test mytest("dSeries.jl","Series(W,l[5]...)","ζ₃-series R^G₄_{G₄₍₎=Φ₁Φ′₃}(λ==Id)  W_G(L,λ)==Z₆\n │   γᵩ φ(mod 3)  ε parameter family #\n─┼─────────────────────────────────────\n1│ φ₁‚₀        1  1      ζ₃q²        1\n5│ φ₂‚₃     -ζ₃²  1      -ζ₃q        2\n2│ φ₁‚₄       ζ₃ -1        ζ₃        4\n8│ Z₃:2       -1 -1     -ζ₃²q        2\n9│Z₃:11      ζ₃² -1       ζ₃²        4\n4│ φ₂‚₅      -ζ₃ -1       -ζ₃        4")
@test mytest("dSeries.jl","cuspidal_data(W,Root1(;r=2//3))","5-element Vector{NamedTuple{(:levi, :cuspidal, :d), Tuple{Spets{PRSG{Cyc{Rational{Int64}}, Int16}}, Int64, Root1}}}:\n (levi = G₄, cuspidal = 2, d = ζ₃²)\n (levi = G₄, cuspidal = 5, d = ζ₃²)\n (levi = G₄, cuspidal = 7, d = ζ₃²)\n (levi = G₄, cuspidal = 10, d = ζ₃²)\n (levi = G₄₍₎=Φ₁Φ″₃, cuspidal = 1, d = ζ₃²)")
@test mytest("dSeries.jl","dSeries.ennola(rootdatum(\"3D4\"))","SPerm{Int64}: (3,-4)(5,-5)(6,-6)(7,-8)")
@test mytest("dSeries.jl","dSeries.ennola(ComplexReflectionGroup(14))","SPerm{Int64}: (2,43,-14,16,41,34)(3,35,40,18,-11,42)(4,-37,25,-17,-26,-36)(5,-6,-79)(7,-7)(8,-74)(9,-73)(10,-52,13,31,-50,29)(12,53,15,32,-51,-30)(19,71,70,21,67,68,20,69,72)(22,-39,27,-33,-28,-38)(23,24,-66,-23,-24,66)(44,46,49,-44,-46,-49)(45,48,47,-45,-48,-47)(54,-63,-55,-57,62,-56)(58,-65,-59,-61,64,-60)(75,-77)(76,-76)(78,-78)")
@test mytest("dSeries.jl","W=ComplexReflectionGroup(4)","G₄")
@test mytest("dSeries.jl","Series(W,3;proper=true)","1-element Vector{Series}:\n ζ₃-series R^G₄_{G₄₍₎=Φ₁Φ′₃}(λ==Id)  W_G(L,λ)==Z₆")
@test mytest("dSeries.jl","s=Series(W,3,1)[1]","ζ₃-series R^G₄_{G₄₍₎=Φ₁Φ′₃}(λ==Id)  W_G(L,λ)==Z₆\n │   γᵩ φ(mod 3)  ε parameter family #\n─┼─────────────────────────────────────\n1│ φ₁‚₀        1  1      ζ₃q²        1\n5│ φ₂‚₃     -ζ₃²  1      -ζ₃q        2\n2│ φ₁‚₄       ζ₃ -1        ζ₃        4\n8│ Z₃:2       -1 -1     -ζ₃²q        2\n9│Z₃:11      ζ₃² -1       ζ₃²        4\n4│ φ₂‚₅      -ζ₃ -1       -ζ₃        4")
@test mytest("dSeries.jl","s.spets","G₄")
@test mytest("dSeries.jl","s.levi","G₄₍₎=Φ₁Φ′₃")
@test mytest("dSeries.jl","s.cuspidal","1")
@test mytest("dSeries.jl","s.d","Root1: ζ₃")
@test mytest("dSeries.jl","hecke(s)","hecke(G₆‚₁‚₁,Vector{Mvp{Cyc{Int64}, Int64}}[[ζ₃q², -ζ₃q, ζ₃, -ζ₃²q, ζ₃², -ζ₃]])")
@test mytest("dSeries.jl","degree(s)","ζ₃Φ₁Φ₂²Φ″₃Φ₄Φ₆")
@test mytest("dSeries.jl","dSeries.RLG(s)","[G₄]:<φ₁‚₀>-<φ₁‚₄>-<φ₂‚₅>+<φ₂‚₃>-<Z₃:2>-<Z₃:11>")
@test mytest("dSeries.jl","dSeries.char_numbers(s)","6-element Vector{Int64}:\n 1\n 5\n 2\n 8\n 9\n 4")
@test mytest("dSeries.jl","dSeries.eps(s)","6-element Vector{Int64}:\n  1\n  1\n -1\n -1\n -1\n -1")
@test mytest("dSeries.jl","relative_group(s)","G₆‚₁‚₁")
end
@testset "mvptools.jl" begin
@test mytest("mvptools.jl","@Mvp x,y","nothing")
@test mytest("mvptools.jl","factor(x^2-y^2+x+3y-2)","2-element Vector{Mvp{Int64, Int64}}:\n x-y+2\n x+y-1")
@test mytest("mvptools.jl","factor(x^2+x+1)","2-element Vector{Mvp{Cyc{Int64}, Int64}}:\n x-ζ₃\n x-ζ₃²")
@test mytest("mvptools.jl","factor(x*y-1)","1-element Vector{Mvp{Int64, Int64}}:\n xy-1")
@test mytest("mvptools.jl","W=CoxSym(5)","𝔖 ₅")
@test mytest("mvptools.jl","pblocks(W,2)","2-element Vector{Vector{Int64}}:\n [1, 3, 4, 5, 7]\n [2, 6]")
@test mytest("mvptools.jl","pblocks(W,3)","3-element Vector{Vector{Int64}}:\n [1, 5, 6]\n [2, 3, 7]\n [4]")
@test mytest("mvptools.jl","pblocks(W,7)","7-element Vector{Vector{Int64}}:\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [7]")
@test mytest("mvptools.jl","abelian_gens([Perm(1,2),Perm(3,4,5),Perm(6,7)])","2-element Vector{Perm{Int16}}:\n (6,7)\n (1,2)(3,5,4)(6,7)")
end
end
